(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("ChemDoodle", [], factory);
	else if(typeof exports === 'object')
		exports["ChemDoodle"] = factory();
	else
		root["ChemDoodle"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/ChemDoodleWeb-unpacked.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/jquery-mousewheel/jquery.mousewheel.js":
/*!*************************************************************!*\
  !*** ./node_modules/jquery-mousewheel/jquery.mousewheel.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery Mousewheel 3.1.13
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 */

(function (factory) {
    if ( true ) {
        // AMD. Register as an anonymous module.
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(function ($) {

    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
        slice  = Array.prototype.slice,
        nullLowestDeltaTimeout, lowestDelta;

    if ( $.event.fixHooks ) {
        for ( var i = toFix.length; i; ) {
            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
        }
    }

    var special = $.event.special.mousewheel = {
        version: '3.1.12',

        setup: function() {
            if ( this.addEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.addEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = handler;
            }
            // Store the line height and page height for this particular element
            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
        },

        teardown: function() {
            if ( this.removeEventListener ) {
                for ( var i = toBind.length; i; ) {
                    this.removeEventListener( toBind[--i], handler, false );
                }
            } else {
                this.onmousewheel = null;
            }
            // Clean up the data we added to the element
            $.removeData(this, 'mousewheel-line-height');
            $.removeData(this, 'mousewheel-page-height');
        },

        getLineHeight: function(elem) {
            var $elem = $(elem),
                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
            if (!$parent.length) {
                $parent = $('body');
            }
            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
        },

        getPageHeight: function(elem) {
            return $(elem).height();
        },

        settings: {
            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
            normalizeOffset: true  // calls getBoundingClientRect for each event
        }
    };

    $.fn.extend({
        mousewheel: function(fn) {
            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
        },

        unmousewheel: function(fn) {
            return this.unbind('mousewheel', fn);
        }
    });


    function handler(event) {
        var orgEvent   = event || window.event,
            args       = slice.call(arguments, 1),
            delta      = 0,
            deltaX     = 0,
            deltaY     = 0,
            absDelta   = 0,
            offsetX    = 0,
            offsetY    = 0;
        event = $.event.fix(orgEvent);
        event.type = 'mousewheel';

        // Old school scrollwheel delta
        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }

        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
            deltaX = deltaY * -1;
            deltaY = 0;
        }

        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
        delta = deltaY === 0 ? deltaX : deltaY;

        // New school wheel delta (wheel event)
        if ( 'deltaY' in orgEvent ) {
            deltaY = orgEvent.deltaY * -1;
            delta  = deltaY;
        }
        if ( 'deltaX' in orgEvent ) {
            deltaX = orgEvent.deltaX;
            if ( deltaY === 0 ) { delta  = deltaX * -1; }
        }

        // No change actually happened, no reason to go any further
        if ( deltaY === 0 && deltaX === 0 ) { return; }

        // Need to convert lines and pages to pixels if we aren't already in pixels
        // There are three delta modes:
        //   * deltaMode 0 is by pixels, nothing to do
        //   * deltaMode 1 is by lines
        //   * deltaMode 2 is by pages
        if ( orgEvent.deltaMode === 1 ) {
            var lineHeight = $.data(this, 'mousewheel-line-height');
            delta  *= lineHeight;
            deltaY *= lineHeight;
            deltaX *= lineHeight;
        } else if ( orgEvent.deltaMode === 2 ) {
            var pageHeight = $.data(this, 'mousewheel-page-height');
            delta  *= pageHeight;
            deltaY *= pageHeight;
            deltaX *= pageHeight;
        }

        // Store lowest absolute delta to normalize the delta values
        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

        if ( !lowestDelta || absDelta < lowestDelta ) {
            lowestDelta = absDelta;

            // Adjust older deltas if necessary
            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
                lowestDelta /= 40;
            }
        }

        // Adjust older deltas if necessary
        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
            // Divide all the things by 40!
            delta  /= 40;
            deltaX /= 40;
            deltaY /= 40;
        }

        // Get a whole, normalized value for the deltas
        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

        // Normalise offsetX and offsetY properties
        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {
            var boundingRect = this.getBoundingClientRect();
            offsetX = event.clientX - boundingRect.left;
            offsetY = event.clientY - boundingRect.top;
        }

        // Add information to the event object
        event.deltaX = deltaX;
        event.deltaY = deltaY;
        event.deltaFactor = lowestDelta;
        event.offsetX = offsetX;
        event.offsetY = offsetY;
        // Go ahead and set deltaMode to 0 since we converted to pixels
        // Although this is a little odd since we overwrite the deltaX/Y
        // properties with normalized deltas.
        event.deltaMode = 0;

        // Add event and delta to the front of the arguments
        args.unshift(event, delta, deltaX, deltaY);

        // Clearout lowestDelta after sometime to better
        // handle multiple device types that give different
        // a different lowestDelta
        // Ex: trackpad = 3 and mouse wheel = 120
        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

        return ($.event.dispatch || $.event.handle).apply(this, args);
    }

    function nullLowestDelta() {
        lowestDelta = null;
    }

    function shouldAdjustOldDeltas(orgEvent, absDelta) {
        // If this is an older event and the delta is divisable by 120,
        // then we are assuming that the browser is treating this as an
        // older mouse wheel event and that we should divide the deltas
        // by 40 to try and get a more usable deltaFactor.
        // Side note, this actually impacts the reported scroll distance
        // in older browsers and can cause scrolling to be slower than native.
        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
    }

}));


/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v2.2.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:23Z
 */

(function( global, factory ) {

	if (  true && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//"use strict";
var arr = [];

var document = window.document;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "2.2.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		var realStringObj = obj && obj.toString();
		return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
	},

	isPlainObject: function( obj ) {
		var key;

		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		// Not own constructor property must be Object
		if ( obj.constructor &&
				!hasOwn.call( obj, "constructor" ) &&
				!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android<4.0, iOS<6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {

			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf( "use strict" ) === 1 ) {
				script = document.createElement( "script" );
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {

				// Otherwise, avoid the DOM node creation, insertion
				// and removal by using an indirect global eval

				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE9-11+
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

// JSHint would error on this code due to the Symbol not being defined in ES5.
// Defining this global in .jshintrc would create a danger of using the global
// unguarded in another place, it seems safer to just disable JSHint for these
// three lines.
/* jshint ignore: start */
if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}
/* jshint ignore: end */

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.1
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-10-17
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, nidselect, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
					while ( i-- ) {
						groups[i] = nidselect + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( (parent = document.defaultView) && parent.top !== parent ) {
		// Support: IE 11
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( document.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( (oldCache = uniqueCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		} );

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if ( elem && elem.parentNode ) {

						// Inject the element directly into the jQuery object
						this.length = 1;
						this[ 0 ] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

				// Always skip document fragments
				if ( cur.nodeType < 11 && ( pos ?
					pos.index( cur ) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector( cur, selectors ) ) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnotwhite = ( /\S+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this === promise ? newDefer.promise() : this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add( function() {

					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 ||
				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred.
			// If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// Add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.progress( updateFunc( i, progressContexts, progressValues ) )
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject );
				} else {
					--remaining;
				}
			}
		}

		// If we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
} );


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {

	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
} );

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called
		// after the browser event has already occurred.
		// Support: IE9-10 only
		// Older IE sometimes signals "interactive" too soon
		if ( document.readyState === "complete" ||
			( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

			// Handle it asynchronously to allow scripts the opportunity to delay ready
			window.setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	register: function( owner, initial ) {
		var value = initial || {};

		// If it is a node unlikely to be stringify-ed or looped over
		// use plain assignment
		if ( owner.nodeType ) {
			owner[ this.expando ] = value;

		// Otherwise secure it in a non-enumerable, non-writable property
		// configurability must be true to allow the property to be
		// deleted with the delete operator
		} else {
			Object.defineProperty( owner, this.expando, {
				value: value,
				writable: true,
				configurable: true
			} );
		}
		return owner[ this.expando ];
	},
	cache: function( owner ) {

		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return an empty object.
		if ( !acceptData( owner ) ) {
			return {};
		}

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ prop ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :
			owner[ this.expando ] && owner[ this.expando ][ key ];
	},
	access: function( owner, key, value ) {
		var stored;

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase( key ) );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key === undefined ) {
			this.register( owner );

		} else {

			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {

				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );

				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;

			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <= 35-45+
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://code.google.com/p/chromium/issues/detail?id=378607
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :

					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data, camelKey;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// with the key as-is
				data = dataUser.get( elem, key ) ||

					// Try to find dashed key if it exists (gh-2779)
					// This is for 2.2.x only
					dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );

				if ( data !== undefined ) {
					return data;
				}

				camelKey = jQuery.camelCase( key );

				// Attempt to get data from the cache
				// with the key camelized
				data = dataUser.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			camelKey = jQuery.camelCase( key );
			this.each( function() {

				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = dataUser.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				dataUser.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
					dataUser.set( this, key, value );
				}
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {

		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" ||
			!jQuery.contains( elem.ownerDocument, elem );
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() { return tween.cur(); } :
			function() { return jQuery.css( elem, prop, "" ); },
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([\w:-]+)/ );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE9
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE9-11+
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret = typeof context.getElementsByTagName !== "undefined" ?
			context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== "undefined" ?
				context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android<4.1, PhantomJS<2
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android<4.1, PhantomJS<2
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0-4.3, Safari<=5.1
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari<=5.1, Android<4.2
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<=11+
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE9
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Support (at least): Chrome, IE9
		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		//
		// Support: Firefox<=42+
		// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
		if ( delegateCount && cur.nodeType &&
			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push( { elem: cur, handlers: matches } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
		"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split( " " ),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
			"screenX screenY toElement" ).split( " " ),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX +
					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
					( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY +
					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
					( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome<28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android<4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://code.google.com/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {
	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

	// Support: IE 10-11, Edge 10240+
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName( "tbody" )[ 0 ] ||
			elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android<4.1, PhantomJS<2
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <= 35-45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <= 35-45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {

	// Keep domManip exposed until 3.0 (gh-2225)
	domManip: domManip,

	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );


var iframe,
	elemdisplay = {

		// Support: Firefox
		// We have to pre-define these values for FF (#10227)
		HTML: "block",
		BODY: "block"
	};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */

// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		display = jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
				.appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var documentElement = document.documentElement;



( function() {
	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE9-11+
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {
		div.style.cssText =

			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );
	}

	jQuery.extend( support, {
		pixelPosition: function() {

			// This test is executed only once but we still do memoizing
			// since we can use the boxSizingReliable pre-computing.
			// No need to check if the test was already performed, though.
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {

			// Support: Android 4.0-4.3
			// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
			// since that compresses better and they're computed together anyway.
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {

			// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return reliableMarginLeftVal;
		},
		reliableMarginRight: function() {

			// Support: Android 2.3
			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// This support function is only executed once so no memoizing is needed.
			var ret,
				marginDiv = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			marginDiv.style.cssText = div.style.cssText =

				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;box-sizing:content-box;" +
				"display:block;margin:0;border:0;padding:0";
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";
			documentElement.appendChild( container );

			ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );

			documentElement.removeChild( container );
			div.removeChild( marginDiv );

			return ret;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );
	ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

	// Support: Opera 12.1x only
	// Fall back to style even without computed
	// computed is undefined for elems on document fragments
	if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
		ret = jQuery.style( elem, name );
	}

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// http://dev.w3.org/csswg/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE9-11+
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?

		// If we already have the right measurement, avoid augmentation
		4 :

		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = dataPriv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {

			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = dataPriv.access(
					elem,
					"olddisplay",
					defaultDisplay( elem.nodeName )
				);
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				dataPriv.set(
					elem,
					"olddisplay",
					hidden ? display : jQuery.css( elem, "display" )
				);
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// Support: IE9-11+
			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				style[ name ] = value;
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
					elem.offsetWidth === 0 ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show
				// and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = dataPriv.access( elem, "fxshow", {} );
		}

		// Store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done( function() {
				jQuery( elem ).hide();
			} );
		}
		anim.done( function() {
			var prop;

			dataPriv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		} );
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {
	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnotwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
		opt.duration : opt.duration in jQuery.fx.speeds ?
			jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	window.clearInterval( timerId );

	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS<=5.1, Android<=4.2+
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE<=11+
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: Android<=2.3
	// Options inside disabled selects are incorrectly marked as disabled
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<=11+
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {

					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {
			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




var rclass = /[\t\r\n\f]/g;

function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnotwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 &&
					( " " + curValue + " " ).replace( rclass, " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnotwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + getClass( elem ) + " " ).replace( rclass, " " )
					.indexOf( className ) > -1
			) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g,
	rspaces = /[\x20\t\r\n\f]+/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?

					// Handle most common string cases
					ret.replace( rreturn, "" ) :

					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ?
								!option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome, Safari
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// The jqXHR state
			state = 0,

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {

								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE8-11+
			// IE throws exception if url is malformed, e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE8-11+
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );

				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapAll( html.call( this, i ) );
			} );
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function() {
		return this.parent().each( function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		} ).end();
	}
} );


jQuery.expr.filters.hidden = function( elem ) {
	return !jQuery.expr.filters.visible( elem );
};
jQuery.expr.filters.visible = function( elem ) {

	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	// Use OR instead of AND as the element is not visible if either is true
	// See tickets #10406 and #13132
	return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {

			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} ) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE9
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE9
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		box = elem.getBoundingClientRect();
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari<7-8+, Chrome<37-44+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},
	size: function() {
		return this.length;
	}
} );

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}



var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}

return jQuery;
}));


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/ChemDoodle/FileCanvas.js":
/*!**************************************!*\
  !*** ./src/ChemDoodle/FileCanvas.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FileCanvas; });
/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Canvas */ "./src/ChemDoodle/_Canvas.js");

function FileCanvas(id, width, height, action) {
  if (id) {
    this.create(id, width, height);
  }

  var form = '<br><form name="FileForm" enctype="multipart/form-data" method="POST" action="' + action + '" target="HiddenFileFrame"><input type="file" name="f" /><input type="submit" name="submitbutton" value="Show File" /></form><iframe id="HFF-' + id + '" name="HiddenFileFrame" height="0" width="0" style="display:none;" onLoad="GetMolFromFrame(\'HFF-' + id + '\', ' + id + ')"></iframe>';
  document.writeln(form);
  this.emptyMessage = 'Click below to load file';
  this.repaint();
}
;
FileCanvas.prototype = new _Canvas__WEBPACK_IMPORTED_MODULE_0__["default"]();

/***/ }),

/***/ "./src/ChemDoodle/HyperlinkCanvas.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/HyperlinkCanvas.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return HyperlinkCanvas; });
/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Canvas */ "./src/ChemDoodle/_Canvas.js");

function HyperlinkCanvas(id, width, height, urlOrFunction, color, size) {
  if (id) {
    this.create(id, width, height);
  }

  this.urlOrFunction = urlOrFunction;
  this.color = color ? color : 'blue';
  this.size = size ? size : 2;
}
;

var _ = HyperlinkCanvas.prototype = new _Canvas__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.openInNewWindow = true;
_.hoverImage = undefined;

_.drawChildExtras = function (ctx) {
  if (this.e) {
    if (this.hoverImage) {
      ctx.drawImage(this.hoverImage, 0, 0);
    } else {
      ctx.strokeStyle = this.color;
      ctx.lineWidth = this.size * 2;
      ctx.strokeRect(0, 0, this.width, this.height);
    }
  }
};

_.setHoverImage = function (url) {
  this.hoverImage = new Image();
  this.hoverImage.src = url;
};

_.click = function (p) {
  this.e = undefined;
  this.repaint();

  if (this.urlOrFunction instanceof Function) {
    this.urlOrFunction();
  } else {
    if (this.openInNewWindow) {
      window.open(this.urlOrFunction);
    } else {
      location.href = this.urlOrFunction;
    }
  }
};

_.mouseout = function (e) {
  this.e = undefined;
  this.repaint();
};

_.mouseover = function (e) {
  this.e = e;
  this.repaint();
};

/***/ }),

/***/ "./src/ChemDoodle/MolGrabberCanvas.js":
/*!********************************************!*\
  !*** ./src/ChemDoodle/MolGrabberCanvas.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MolGrabberCanvas; });
/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Canvas */ "./src/ChemDoodle/_Canvas.js");
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib */ "./src/ChemDoodle/lib/index.js");
/* harmony import */ var _iChemLabs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./iChemLabs */ "./src/ChemDoodle/iChemLabs.js");



function MolGrabberCanvas(id, width, height) {
  if (id) {
    this.create(id, width, height);
  }

  var sb = [];
  sb.push('<br><input type="text" id="');
  sb.push(id);
  sb.push('_query" size="32" value="" />');
  sb.push(this.getInputFields()); // Don't use document.writeln here, it breaks the whole page after
  // document is closed.

  document.getElementById(id);
  var canvas = Object(_lib__WEBPACK_IMPORTED_MODULE_1__["jQuery"])('#' + id);
  canvas.after(sb.join(''));
  var self = this;
  Object(_lib__WEBPACK_IMPORTED_MODULE_1__["jQuery"])('#' + id + '_submit').click(function () {
    self.search();
  });
  Object(_lib__WEBPACK_IMPORTED_MODULE_1__["jQuery"])('#' + id + '_query').keypress(function (e) {
    if (e.which === 13) {
      self.search();
    }
  });
  this.emptyMessage = 'Enter search term below';
  this.repaint();
}
;

var _ = MolGrabberCanvas.prototype = new _Canvas__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.setSearchTerm = function (term) {
  Object(_lib__WEBPACK_IMPORTED_MODULE_1__["jQuery"])('#' + this.id + '_query').val(term);
  this.search();
};

_.getInputFields = function () {
  var sb = [];
  sb.push('<br><nobr>');
  sb.push('<select id="');
  sb.push(this.id);
  sb.push('_select">');
  sb.push('<option value="chemexper">ChemExper');
  sb.push('<option value="chemspider">ChemSpider');
  sb.push('<option value="pubchem" selected>PubChem');
  sb.push('</select>');
  sb.push('<button id="');
  sb.push(this.id);
  sb.push('_submit">Show Molecule</button>');
  sb.push('</nobr>');
  return sb.join('');
};

_.search = function () {
  this.emptyMessage = 'Searching...';
  this.clear();
  var self = this;
  _iChemLabs__WEBPACK_IMPORTED_MODULE_2__["default"].getMoleculeFromDatabase(Object(_lib__WEBPACK_IMPORTED_MODULE_1__["jQuery"])('#' + this.id + '_query').val(), {
    database: Object(_lib__WEBPACK_IMPORTED_MODULE_1__["jQuery"])('#' + this.id + '_select').val()
  }, function (mol) {
    self.loadMolecule(mol);
  });
};

/***/ }),

/***/ "./src/ChemDoodle/MolGrabberCanvas3D.js":
/*!**********************************************!*\
  !*** ./src/ChemDoodle/MolGrabberCanvas3D.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MolGrabberCanvas3D; });
/* harmony import */ var _Canvas3D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Canvas3D */ "./src/ChemDoodle/_Canvas3D.js");
/* harmony import */ var _iChemLabs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iChemLabs */ "./src/ChemDoodle/iChemLabs.js");
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib */ "./src/ChemDoodle/lib/index.js");



function MolGrabberCanvas3D(id, width, height) {
  if (id) {
    this.create(id, width, height);
  }

  var sb = [];
  sb.push('<br><input type="text" id="');
  sb.push(id);
  sb.push('_query" size="32" value="" />');
  sb.push('<br><nobr>');
  sb.push('<select id="');
  sb.push(id);
  sb.push('_select">'); // sb.push('<option value="chemexper">ChemExper');
  // sb.push('<option value="chemspider">ChemSpider');

  sb.push('<option value="pubchem" selected>PubChem');
  sb.push('</select>');
  sb.push('<button id="');
  sb.push(id);
  sb.push('_submit">Show Molecule</button>');
  sb.push('</nobr>');
  document.writeln(sb.join(''));
  var self = this;
  Object(_lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"])('#' + id + '_submit').click(function () {
    self.search();
  });
  Object(_lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"])('#' + id + '_query').keypress(function (e) {
    if (e.which === 13) {
      self.search();
    }
  });
}
;

var _ = MolGrabberCanvas3D.prototype = new _Canvas3D__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.setSearchTerm = function (term) {
  Object(_lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"])('#' + this.id + '_query').val(term);
  this.search();
};

_.search = function () {
  var self = this;
  _iChemLabs__WEBPACK_IMPORTED_MODULE_1__["default"].getMoleculeFromDatabase(Object(_lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"])('#' + this.id + '_query').val(), {
    database: Object(_lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"])('#' + this.id + '_select').val(),
    dimension: 3
  }, function (mol) {
    self.loadMolecule(mol);
  });
};

/***/ }),

/***/ "./src/ChemDoodle/MovieCanvas3D.js":
/*!*****************************************!*\
  !*** ./src/ChemDoodle/MovieCanvas3D.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MovieCanvas3D; });
/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./structures */ "./src/ChemDoodle/structures/index.js");
/* harmony import */ var _Canvas3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Canvas3D */ "./src/ChemDoodle/_Canvas3D.js");
/* harmony import */ var _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_AnimatorCanvas */ "./src/ChemDoodle/_AnimatorCanvas.js");
/* harmony import */ var _RotatorCanvas__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RotatorCanvas */ "./src/ChemDoodle/RotatorCanvas.js");




function MovieCanvas3D(id, width, height) {
  if (id) {
    this.create(id, width, height);
  }

  this.frames = [];
}
;
MovieCanvas3D.PLAY_ONCE = 0;
MovieCanvas3D.PLAY_LOOP = 1;
MovieCanvas3D.PLAY_SPRING = 2;

var _ = MovieCanvas3D.prototype = new _Canvas3D__WEBPACK_IMPORTED_MODULE_1__["default"]();

_.timeout = 50;
_.frameNumber = 0;
_.playMode = 2;
_.reverse = false;
_.startAnimation = _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_2__["default"].prototype.startAnimation;
_.stopAnimation = _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_2__["default"].prototype.stopAnimation;
_.isRunning = _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_2__["default"].prototype.isRunning;
_.dblclick = _RotatorCanvas__WEBPACK_IMPORTED_MODULE_3__["default"].prototype.dblclick;

_.nextFrame = function (delta) {
  var f = this.frames[this.frameNumber];
  this.molecules = f.mols;
  this.shapes = f.shapes;

  if (this.playMode === 2 && this.reverse) {
    this.frameNumber--;

    if (this.frameNumber < 0) {
      this.frameNumber = 1;
      this.reverse = false;
    }
  } else {
    this.frameNumber++;

    if (this.frameNumber >= this.frames.length) {
      if (this.playMode === 2) {
        this.frameNumber -= 2;
        this.reverse = true;
      } else {
        this.frameNumber = 0;

        if (this.playMode === 0) {
          this.stopAnimation();
        }
      }
    }
  }
};

_.center = function () {
  // override this function to center the entire movie
  var p = new _structures__WEBPACK_IMPORTED_MODULE_0__["Atom"]();
  var first = this.frames[0];

  for (var j = 0, jj = first.mols.length; j < jj; j++) {
    p.add3D(first.mols[j].getCenter3D());
  }

  p.x /= first.mols.length;
  p.y /= first.mols.length;
  var center = new _structures__WEBPACK_IMPORTED_MODULE_0__["Atom"]();
  center.sub3D(p);

  for (var i = 0, ii = this.frames.length; i < ii; i++) {
    var f = this.frames[i];

    for (var j = 0, jj = f.mols.length; j < jj; j++) {
      var mol = f.mols[j];

      for (var k = 0, kk = mol.atoms.length; k < kk; k++) {
        mol.atoms[k].add3D(center);
      }
    }
  }
};

_.addFrame = function (molecules, shapes) {
  this.frames.push({
    mols: molecules,
    shapes: shapes
  });
};

/***/ }),

/***/ "./src/ChemDoodle/ObserverCanvas.js":
/*!******************************************!*\
  !*** ./src/ChemDoodle/ObserverCanvas.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ObserverCanvas; });
/* harmony import */ var _SpectrumCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_SpectrumCanvas */ "./src/ChemDoodle/_SpectrumCanvas.js");

function ObserverCanvas(id, width, height) {
  if (id) {
    this.create(id, width, height);
  }
}
;
ObserverCanvas.prototype = new _SpectrumCanvas__WEBPACK_IMPORTED_MODULE_0__["default"]();

/***/ }),

/***/ "./src/ChemDoodle/OverlayCanvas.js":
/*!*****************************************!*\
  !*** ./src/ChemDoodle/OverlayCanvas.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return OverlayCanvas; });
/* harmony import */ var _SpectrumCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_SpectrumCanvas */ "./src/ChemDoodle/_SpectrumCanvas.js");

function OverlayCanvas(id, width, height) {
  if (id) {
    this.create(id, width, height);
  }
}
;

var _ = OverlayCanvas.prototype = new _SpectrumCanvas__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.overlaySpectra = [];
_.superRepaint = _.innerRepaint;

_.innerRepaint = function (ctx) {
  this.superRepaint(ctx);

  if (this.spectrum && this.spectrum.data.length > 0) {
    for (var i = 0, ii = this.overlaySpectra.length; i < ii; i++) {
      var s = this.overlaySpectra[i];

      if (s && s.data.length > 0) {
        s.minX = this.spectrum.minX;
        s.maxX = this.spectrum.maxX;
        s.drawPlot(ctx, this.specs, this.width, this.height, this.spectrum.memory.offsetTop, this.spectrum.memory.offsetLeft, this.spectrum.memory.offsetBottom);
      }
    }
  }
};

_.addSpectrum = function (spectrum) {
  if (!this.spectrum) {
    this.spectrum = spectrum;
  } else {
    this.overlaySpectra.push(spectrum);
  }
};

/***/ }),

/***/ "./src/ChemDoodle/PeriodicTableCanvas.js":
/*!***********************************************!*\
  !*** ./src/ChemDoodle/PeriodicTableCanvas.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PeriodicTableCanvas; });
/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Canvas */ "./src/ChemDoodle/_Canvas.js");
/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ChemDoodle */ "./src/ChemDoodle/index.js");
/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extensions */ "./src/ChemDoodle/extensions/index.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./math */ "./src/ChemDoodle/math/index.js");





function PeriodicCell(element, x, y, dimension) {
  this.element = element;
  this.x = x;
  this.y = y;
  this.dimension = dimension;
  this.allowMultipleSelections = false;
}

function PeriodicTableCanvas(id, cellDimension) {
  this.padding = 5;

  if (id) {
    this.create(id, cellDimension * 18 + this.padding * 2, cellDimension * 10 + this.padding * 2);
  }

  this.cellDimension = cellDimension ? cellDimension : 20;
  this.setupTable();
  this.repaint();
}
;

var _ = PeriodicTableCanvas.prototype = new _Canvas__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.loadMolecule = undefined;
_.getMolecule = undefined;

_.getHoveredElement = function () {
  if (this.hovered) {
    return this.hovered.element;
  }

  return undefined;
};

_.innerRepaint = function (ctx) {
  for (var i = 0, ii = this.cells.length; i < ii; i++) {
    this.drawCell(ctx, this.specs, this.cells[i]);
  }

  if (this.hovered) {
    this.drawCell(ctx, this.specs, this.hovered);
  }

  if (this.selected) {
    this.drawCell(ctx, this.specs, this.selected);
  }
};

_.setupTable = function () {
  this.cells = [];
  var x = this.padding;
  var y = this.padding;
  var count = 0;

  for (var i = 0, ii = _ChemDoodle__WEBPACK_IMPORTED_MODULE_1__["SYMBOLS"].length; i < ii; i++) {
    if (count === 18) {
      count = 0;
      y += this.cellDimension;
      x = this.padding;
    }

    var e = _ChemDoodle__WEBPACK_IMPORTED_MODULE_1__["ELEMENT"][_ChemDoodle__WEBPACK_IMPORTED_MODULE_1__["SYMBOLS"][i]];

    if (e.atomicNumber === 2) {
      x += 16 * this.cellDimension;
      count += 16;
    } else if (e.atomicNumber === 5 || e.atomicNumber === 13) {
      x += 10 * this.cellDimension;
      count += 10;
    }

    if ((e.atomicNumber < 58 || e.atomicNumber > 71 && e.atomicNumber < 90 || e.atomicNumber > 103) && e.atomicNumber <= 118) {
      this.cells.push(new PeriodicCell(e, x, y, this.cellDimension));
      x += this.cellDimension;
      count++;
    }
  }

  y += 2 * this.cellDimension;
  x = 3 * this.cellDimension + this.padding;

  for (var i = 57; i < 104; i++) {
    var e = _ChemDoodle__WEBPACK_IMPORTED_MODULE_1__["ELEMENT"][_ChemDoodle__WEBPACK_IMPORTED_MODULE_1__["SYMBOLS"][i]];

    if (e.atomicNumber === 90) {
      y += this.cellDimension;
      x = 3 * this.cellDimension + this.padding;
    }

    if (e.atomicNumber >= 58 && e.atomicNumber <= 71 || e.atomicNumber >= 90 && e.atomicNumber <= 103) {
      this.cells.push(new PeriodicCell(e, x, y, this.cellDimension));
      x += this.cellDimension;
    }
  }
};

_.drawCell = function (ctx, specs, cell) {
  var radgrad = ctx.createRadialGradient(cell.x + cell.dimension / 3, cell.y + cell.dimension / 3, cell.dimension * 1.5, cell.x + cell.dimension / 3, cell.y + cell.dimension / 3, cell.dimension / 10);
  radgrad.addColorStop(0, '#000000');
  radgrad.addColorStop(.7, cell.element.jmolColor);
  radgrad.addColorStop(1, '#FFFFFF');
  ctx.fillStyle = radgrad;
  _extensions__WEBPACK_IMPORTED_MODULE_2__["contextRoundRect"](ctx, cell.x, cell.y, cell.dimension, cell.dimension, cell.dimension / 8);

  if (cell === this.hovered || cell === this.selected || cell.selected) {
    ctx.lineWidth = 2;
    ctx.strokeStyle = '#c10000';
    ctx.stroke();
    ctx.fillStyle = 'white';
  }

  ctx.fill();
  ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_2__["getFontString"](specs.text_font_size, specs.text_font_families);
  ctx.fillStyle = specs.text_color;
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';
  ctx.fillText(cell.element.symbol, cell.x + cell.dimension / 2, cell.y + cell.dimension / 2);
};

_.click = function (e) {
  if (this.hovered) {
    if (this.allowMultipleSelections) {
      this.hovered.selected = !this.hovered.selected;
    } else {
      this.selected = this.hovered;
    }

    this.repaint();
  }
};

_.touchstart = function (e) {
  // try to hover an element
  this.mousemove(e);
};

_.mousemove = function (e) {
  var x = e.p.x;
  var y = e.p.y;
  this.hovered = undefined;

  for (var i = 0, ii = this.cells.length; i < ii; i++) {
    var c = this.cells[i];

    if (_math__WEBPACK_IMPORTED_MODULE_3__["isBetween"](x, c.x, c.x + c.dimension) && _math__WEBPACK_IMPORTED_MODULE_3__["isBetween"](y, c.y, c.y + c.dimension)) {
      this.hovered = c;
      break;
    }
  }

  this.repaint();
};

_.mouseout = function (e) {
  this.hovered = undefined;
  this.repaint();
};

/***/ }),

/***/ "./src/ChemDoodle/PerspectiveCanvas.js":
/*!*********************************************!*\
  !*** ./src/ChemDoodle/PerspectiveCanvas.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PerspectiveCanvas; });
/* harmony import */ var _SpectrumCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_SpectrumCanvas */ "./src/ChemDoodle/_SpectrumCanvas.js");
/* harmony import */ var _monitor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./monitor */ "./src/ChemDoodle/monitor.js");
/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./structures */ "./src/ChemDoodle/structures/index.js");



var m = Math;
function PerspectiveCanvas(id, width, height) {
  if (id) {
    this.create(id, width, height);
  }
}
;

var _ = PerspectiveCanvas.prototype = new _SpectrumCanvas__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.dragRange = undefined;
_.rescaleYAxisOnZoom = true;
_.lastPinchScale = 1;

_.mousedown = function (e) {
  this.dragRange = new _structures__WEBPACK_IMPORTED_MODULE_2__["Point"](e.p.x, e.p.x);
};

_.mouseup = function (e) {
  if (this.dragRange && this.dragRange.x !== this.dragRange.y) {
    if (!this.dragRange.multi) {
      var newScale = this.spectrum.zoom(this.dragRange.x, e.p.x, this.width, this.rescaleYAxisOnZoom);

      if (this.rescaleYAxisOnZoom) {
        this.specs.scale = newScale;
      }
    }

    this.dragRange = undefined;
    this.repaint();
  }
};

_.drag = function (e) {
  if (this.dragRange) {
    if (this.dragRange.multi) {
      this.dragRange = undefined;
    } else if (_monitor__WEBPACK_IMPORTED_MODULE_1__["default"].SHIFT) {
      this.spectrum.translate(e.p.x - this.dragRange.x, this.width);
      this.dragRange.x = e.p.x;
      this.dragRange.y = e.p.x;
    } else {
      this.dragRange.y = e.p.x;
    }

    this.repaint();
  }
};

_.drawChildExtras = function (ctx) {
  if (this.dragRange) {
    var xs = m.min(this.dragRange.x, this.dragRange.y);
    var xe = m.max(this.dragRange.x, this.dragRange.y);
    ctx.strokeStyle = 'gray';
    ctx.lineStyle = 1;
    ctx.beginPath();
    ctx.moveTo(xs, this.height / 2);

    for (var i = xs; i <= xe; i++) {
      if (i % 10 < 5) {
        ctx.lineTo(i, m.round(this.height / 2));
      } else {
        ctx.moveTo(i, m.round(this.height / 2));
      }
    }

    ctx.stroke();
  }
};

_.mousewheel = function (e, delta) {
  this.specs.scale += delta / 10;

  if (this.specs.scale < .01) {
    this.specs.scale = .01;
  }

  this.repaint();
};

_.dblclick = function (e) {
  this.spectrum.setup();
  this.specs.scale = 1;
  this.repaint();
};

_.multitouchmove = function (e, numFingers) {
  if (numFingers === 2) {
    if (!this.dragRange || !this.dragRange.multi) {
      this.dragRange = new _structures__WEBPACK_IMPORTED_MODULE_2__["Point"](e.p.x, e.p.x);
      this.dragRange.multi = true;
    } else {
      this.spectrum.translate(e.p.x - this.dragRange.x, this.width);
      this.dragRange.x = e.p.x;
      this.dragRange.y = e.p.x;
      this.repaint();
    }
  }
};

_.gesturechange = function (e) {
  this.specs.scale *= e.originalEvent.scale / this.lastPinchScale;

  if (this.specs.scale < .01) {
    this.specs.scale = .01;
  }

  this.lastPinchScale = e.originalEvent.scale;
  this.repaint();
};

_.gestureend = function (e) {
  this.lastPinchScale = 1;
};

/***/ }),

/***/ "./src/ChemDoodle/RotatorCanvas.js":
/*!*****************************************!*\
  !*** ./src/ChemDoodle/RotatorCanvas.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RotatorCanvas; });
/* harmony import */ var _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_AnimatorCanvas */ "./src/ChemDoodle/_AnimatorCanvas.js");
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib */ "./src/ChemDoodle/lib/index.js");


var m = Math; // keep these declaration outside the loop to avoid overhead

var matrix = [];
var xAxis = [1, 0, 0];
var yAxis = [0, 1, 0];
var zAxis = [0, 0, 1];
function RotatorCanvas(id, width, height, rotate3D) {
  if (id) {
    this.create(id, width, height);
  }

  this.rotate3D = rotate3D;
}
;

var _ = RotatorCanvas.prototype = new _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_0__["default"]();

var increment = m.PI / 15;
_.xIncrement = increment;
_.yIncrement = increment;
_.zIncrement = increment;

_.nextFrame = function (delta) {
  if (this.molecules.length === 0 && this.shapes.length === 0) {
    this.stopAnimation();
    return;
  }

  var change = delta / 1000;

  if (this.rotate3D) {
    _lib__WEBPACK_IMPORTED_MODULE_1__["mat4"].identity(matrix);
    _lib__WEBPACK_IMPORTED_MODULE_1__["mat4"].rotate(matrix, this.xIncrement * change, xAxis);
    _lib__WEBPACK_IMPORTED_MODULE_1__["mat4"].rotate(matrix, this.yIncrement * change, yAxis);
    _lib__WEBPACK_IMPORTED_MODULE_1__["mat4"].rotate(matrix, this.zIncrement * change, zAxis);

    for (var i = 0, ii = this.molecules.length; i < ii; i++) {
      var m = this.molecules[i];

      for (var j = 0, jj = m.atoms.length; j < jj; j++) {
        var a = m.atoms[j];
        var p = [a.x - this.width / 2, a.y - this.height / 2, a.z];
        _lib__WEBPACK_IMPORTED_MODULE_1__["mat4"].multiplyVec3(matrix, p);
        a.x = p[0] + this.width / 2;
        a.y = p[1] + this.height / 2;
        a.z = p[2];
      }

      for (var j = 0, jj = m.rings.length; j < jj; j++) {
        m.rings[j].center = m.rings[j].getCenter();
      }

      if (this.specs.atoms_display && this.specs.atoms_circles_2D) {
        m.sortAtomsByZ();
      }

      if (this.specs.bonds_display && this.specs.bonds_clearOverlaps_2D) {
        m.sortBondsByZ();
      }
    }

    for (var i = 0, ii = this.shapes.length; i < ii; i++) {
      var sps = this.shapes[i].getPoints();

      for (var j = 0, jj = sps.length; j < jj; j++) {
        var a = sps[j];
        var p = [a.x - this.width / 2, a.y - this.height / 2, 0];
        _lib__WEBPACK_IMPORTED_MODULE_1__["mat4"].multiplyVec3(matrix, p);
        a.x = p[0] + this.width / 2;
        a.y = p[1] + this.height / 2;
      }
    }
  } else {
    this.specs.rotateAngle += this.zIncrement * change;
  }
};

_.dblclick = function (e) {
  if (this.isRunning()) {
    this.stopAnimation();
  } else {
    this.startAnimation();
  }
};

/***/ }),

/***/ "./src/ChemDoodle/RotatorCanvas3D.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/RotatorCanvas3D.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RotatorCanvas3D; });
/* harmony import */ var _Canvas3D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Canvas3D */ "./src/ChemDoodle/_Canvas3D.js");
/* harmony import */ var _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_AnimatorCanvas */ "./src/ChemDoodle/_AnimatorCanvas.js");
/* harmony import */ var _RotatorCanvas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RotatorCanvas */ "./src/ChemDoodle/RotatorCanvas.js");
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib */ "./src/ChemDoodle/lib/index.js");




var m = Math; // keep these declaration outside the loop to avoid overhead

var matrix = [];
var xAxis = [1, 0, 0];
var yAxis = [0, 1, 0];
var zAxis = [0, 0, 1];
function RotatorCanvas3D(id, width, height) {
  if (id) {
    this.create(id, width, height);
  }
}
;

var _ = RotatorCanvas3D.prototype = new _Canvas3D__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.timeout = 33;
var increment = m.PI / 15;
_.xIncrement = increment;
_.yIncrement = increment;
_.zIncrement = increment;
_.startAnimation = _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.startAnimation;
_.stopAnimation = _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.stopAnimation;
_.isRunning = _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_1__["default"].prototype.isRunning;
_.dblclick = _RotatorCanvas__WEBPACK_IMPORTED_MODULE_2__["default"].prototype.dblclick;
_.mousedown = undefined;
_.rightmousedown = undefined;
_.drag = undefined;
_.mousewheel = undefined;

_.nextFrame = function (delta) {
  if (this.molecules.length === 0 && this.shapes.length === 0) {
    this.stopAnimation();
    return;
  }

  _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].identity(matrix);
  var change = delta / 1000;
  _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].rotate(matrix, this.xIncrement * change, xAxis);
  _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].rotate(matrix, this.yIncrement * change, yAxis);
  _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].rotate(matrix, this.zIncrement * change, zAxis);
  _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].multiply(this.rotationMatrix, matrix);
};

/***/ }),

/***/ "./src/ChemDoodle/SeekerCanvas.js":
/*!****************************************!*\
  !*** ./src/ChemDoodle/SeekerCanvas.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SeekerCanvas; });
/* harmony import */ var _SpectrumCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_SpectrumCanvas */ "./src/ChemDoodle/_SpectrumCanvas.js");
/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extensions */ "./src/ChemDoodle/extensions/index.js");


var m = Math;
function SeekerCanvas(id, width, height, seekType) {
  if (id) {
    this.create(id, width, height);
  }

  this.seekType = seekType;
}
;

var _ = SeekerCanvas.prototype = new _SpectrumCanvas__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.superRepaint = _.innerRepaint;

_.innerRepaint = function (ctx) {
  this.superRepaint(ctx);

  if (this.spectrum && this.spectrum.data.length > 0 && this.p) {
    // set up coords
    var renderP;
    var internalP;

    if (this.seekType === SeekerCanvas.SEEK_POINTER) {
      renderP = this.p;
      internalP = this.spectrum.getInternalCoordinates(renderP.x, renderP.y);
    } else if (this.seekType === SeekerCanvas.SEEK_PLOT || this.seekType === SeekerCanvas.SEEK_PEAK) {
      internalP = this.seekType === SeekerCanvas.SEEK_PLOT ? this.spectrum.getClosestPlotInternalCoordinates(this.p.x) : this.spectrum.getClosestPeakInternalCoordinates(this.p.x);

      if (!internalP) {
        return;
      }

      renderP = {
        x: this.spectrum.getTransformedX(internalP.x, this.specs, this.width, this.spectrum.memory.offsetLeft),
        y: this.spectrum.getTransformedY(internalP.y / 100, this.specs, this.height, this.spectrum.memory.offsetBottom, this.spectrum.memory.offsetTop)
      };
    } // draw point


    ctx.fillStyle = 'white';
    ctx.strokeStyle = this.specs.plots_color;
    ctx.lineWidth = this.specs.plots_width;
    ctx.beginPath();
    ctx.arc(renderP.x, renderP.y, 3, 0, m.PI * 2, false);
    ctx.fill();
    ctx.stroke(); // draw internal coordinates

    ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_1__["getFontString"](this.specs.text_font_size, this.specs.text_font_families);
    ctx.textAlign = 'left';
    ctx.textBaseline = 'bottom';
    var s = 'x:' + internalP.x.toFixed(3) + ', y:' + internalP.y.toFixed(3);
    var x = renderP.x + 3;
    var w = ctx.measureText(s).width;

    if (x + w > this.width - 2) {
      x -= 6 + w;
    }

    var y = renderP.y;

    if (y - this.specs.text_font_size - 2 < 0) {
      y += this.specs.text_font_size;
    }

    ctx.fillRect(x, y - this.specs.text_font_size, w, this.specs.text_font_size);
    ctx.fillStyle = 'black';
    ctx.fillText(s, x, y);
  }
};

_.mouseout = function (e) {
  this.p = undefined;
  this.repaint();
};

_.mousemove = function (e) {
  this.p = {
    x: e.p.x - 2,
    y: e.p.y - 3
  };
  this.repaint();
};

_.touchstart = function (e) {
  this.mousemove(e);
};

_.touchmove = function (e) {
  this.mousemove(e);
};

_.touchend = function (e) {
  this.mouseout(e);
};

SeekerCanvas.SEEK_POINTER = 'pointer';
SeekerCanvas.SEEK_PLOT = 'plot';
SeekerCanvas.SEEK_PEAK = 'peak';

/***/ }),

/***/ "./src/ChemDoodle/SlideshowCanvas.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/SlideshowCanvas.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SlideshowCanvas; });
/* harmony import */ var _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_AnimatorCanvas */ "./src/ChemDoodle/_AnimatorCanvas.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math */ "./src/ChemDoodle/math/index.js");


function SlideshowCanvas(id, width, height) {
  if (id) {
    this.create(id, width, height);
  }
}
;

var _ = SlideshowCanvas.prototype = new _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.frames = [];
_.curIndex = 0;
_.timeout = 5000;
_.alpha = 0;
_.innerHandle = undefined;
_.phase = 0;

_.drawChildExtras = function (ctx) {
  var rgb = _math__WEBPACK_IMPORTED_MODULE_1__["getRGB"](this.specs.backgroundColor, 255);
  ctx.fillStyle = 'rgba(' + rgb[0] + ', ' + rgb[1] + ', ' + rgb[2] + ', ' + this.alpha + ')';
  ctx.fillRect(0, 0, this.width, this.height);
};

_.nextFrame = function (delta) {
  if (this.frames.length === 0) {
    this.stopAnimation();
    return;
  }

  this.phase = 0;
  var me = this;
  var count = 1;
  this.innerHandle = setInterval(function () {
    me.alpha = count / 15;
    me.repaint();

    if (count === 15) {
      me.breakInnerHandle();
    }

    count++;
  }, 33);
};

_.breakInnerHandle = function () {
  if (this.innerHandle) {
    clearInterval(this.innerHandle);
    this.innerHandle = undefined;
  }

  if (this.phase === 0) {
    this.curIndex++;

    if (this.curIndex > this.frames.length - 1) {
      this.curIndex = 0;
    }

    this.alpha = 1;
    var f = this.frames[this.curIndex];
    this.loadContent(f.mols, f.shapes);
    this.phase = 1;
    var me = this;
    var count = 1;
    this.innerHandle = setInterval(function () {
      me.alpha = (15 - count) / 15;
      me.repaint();

      if (count === 15) {
        me.breakInnerHandle();
      }

      count++;
    }, 33);
  } else if (this.phase === 1) {
    this.alpha = 0;
    this.repaint();
  }
};

_.addFrame = function (molecules, shapes) {
  if (this.frames.length === 0) {
    this.loadContent(molecules, shapes);
  }

  this.frames.push({
    mols: molecules,
    shapes: shapes
  });
};

/***/ }),

/***/ "./src/ChemDoodle/TransformCanvas.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/TransformCanvas.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TransformCanvas; });
/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Canvas */ "./src/ChemDoodle/_Canvas.js");
/* harmony import */ var _monitor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./monitor */ "./src/ChemDoodle/monitor.js");
/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./structures */ "./src/ChemDoodle/structures/index.js");
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib */ "./src/ChemDoodle/lib/index.js");




var m = Math;
function TransformCanvas(id, width, height, rotate3D) {
  if (id) {
    this.create(id, width, height);
  }

  this.rotate3D = rotate3D;
}
;

var _ = TransformCanvas.prototype = new _Canvas__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.lastPoint = undefined;
_.rotationMultMod = 1.3;
_.lastPinchScale = 1;
_.lastGestureRotate = 0;

_.mousedown = function (e) {
  this.lastPoint = e.p;
};

_.dblclick = function (e) {
  // center structure
  this.center();
  this.repaint();
};

_.drag = function (e) {
  if (!this.lastPoint.multi) {
    if (_monitor__WEBPACK_IMPORTED_MODULE_1__["default"].ALT) {
      var t = new _structures__WEBPACK_IMPORTED_MODULE_2__["Point"](e.p.x, e.p.y);
      t.sub(this.lastPoint);

      for (var i = 0, ii = this.molecules.length; i < ii; i++) {
        var mol = this.molecules[i];

        for (var j = 0, jj = mol.atoms.length; j < jj; j++) {
          mol.atoms[j].add(t);
        }

        mol.check();
      }

      for (var i = 0, ii = this.shapes.length; i < ii; i++) {
        var sps = this.shapes[i].getPoints();

        for (var j = 0, jj = sps.length; j < jj; j++) {
          sps[j].add(t);
        }
      }

      this.lastPoint = e.p;
      this.repaint();
    } else {
      if (this.rotate3D === true) {
        var diameter = m.max(this.width / 4, this.height / 4);
        var difx = e.p.x - this.lastPoint.x;
        var dify = e.p.y - this.lastPoint.y;
        var yIncrement = difx / diameter * this.rotationMultMod;
        var xIncrement = -dify / diameter * this.rotationMultMod;
        var matrix = [];
        _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].identity(matrix);
        _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].rotate(matrix, xIncrement, [1, 0, 0]);
        _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].rotate(matrix, yIncrement, [0, 1, 0]);

        for (var i = 0, ii = this.molecules.length; i < ii; i++) {
          var mol = this.molecules[i];

          for (var j = 0, jj = mol.atoms.length; j < jj; j++) {
            var a = mol.atoms[j];
            var p = [a.x - this.width / 2, a.y - this.height / 2, a.z];
            _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].multiplyVec3(matrix, p);
            a.x = p[0] + this.width / 2;
            a.y = p[1] + this.height / 2;
            a.z = p[2];
          }

          for (var i = 0, ii = mol.rings.length; i < ii; i++) {
            mol.rings[i].center = mol.rings[i].getCenter();
          }

          this.lastPoint = e.p;

          if (this.specs.atoms_display && this.specs.atoms_circles_2D) {
            mol.sortAtomsByZ();
          }

          if (this.specs.bonds_display && this.specs.bonds_clearOverlaps_2D) {
            mol.sortBondsByZ();
          }
        }

        this.repaint();
      } else {
        var center = new _structures__WEBPACK_IMPORTED_MODULE_2__["Point"](this.width / 2, this.height / 2);
        var before = center.angle(this.lastPoint);
        var after = center.angle(e.p);
        this.specs.rotateAngle -= after - before;
        this.lastPoint = e.p;
        this.repaint();
      }
    }
  }
};

_.mousewheel = function (e, delta) {
  this.specs.scale += delta / 50;

  if (this.specs.scale < .01) {
    this.specs.scale = .01;
  }

  this.repaint();
};

_.multitouchmove = function (e, numFingers) {
  if (numFingers === 2) {
    if (this.lastPoint.multi) {
      var t = new _structures__WEBPACK_IMPORTED_MODULE_2__["Point"](e.p.x, e.p.y);
      t.sub(this.lastPoint);

      for (var i = 0, ii = this.molecules.length; i < ii; i++) {
        var m = this.molecules[i];

        for (var j = 0, jj = m.atoms.length; j < jj; j++) {
          m.atoms[j].add(t);
        }

        m.check();
      }

      for (var i = 0, ii = this.shapes.length; i < ii; i++) {
        var sps = this.shapes[i].getPoints();

        for (var j = 0, jj = sps.length; j < jj; j++) {
          sps[j].add(t);
        }
      }

      this.lastPoint = e.p;
      this.lastPoint.multi = true;
      this.repaint();
    } else {
      this.lastPoint = e.p;
      this.lastPoint.multi = true;
    }
  }
};

_.gesturechange = function (e) {
  if (e.originalEvent.scale - this.lastPinchScale !== 0) {
    this.specs.scale *= e.originalEvent.scale / this.lastPinchScale;

    if (this.specs.scale < .01) {
      this.specs.scale = .01;
    }

    this.lastPinchScale = e.originalEvent.scale;
  }

  if (this.lastGestureRotate - e.originalEvent.rotation !== 0) {
    var rot = (this.lastGestureRotate - e.originalEvent.rotation) / 180 * m.PI;
    var center = new _structures__WEBPACK_IMPORTED_MODULE_2__["Point"](this.width / 2, this.height / 2);

    for (var i = 0, ii = this.molecules.length; i < ii; i++) {
      var mol = this.molecules[i];

      for (var j = 0, jj = mol.atoms.length; j < jj; j++) {
        var a = mol.atoms[j];
        var dist = center.distance(a);
        var angle = center.angle(a) + rot;
        a.x = center.x + dist * m.cos(angle);
        a.y = center.y - dist * m.sin(angle);
      }

      mol.check();
    }

    this.lastGestureRotate = e.originalEvent.rotation;
  }

  this.repaint();
};

_.gestureend = function (e) {
  this.lastPinchScale = 1;
  this.lastGestureRotate = 0;
};

/***/ }),

/***/ "./src/ChemDoodle/TransformCanvas3D.js":
/*!*********************************************!*\
  !*** ./src/ChemDoodle/TransformCanvas3D.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return TransformCanvas3D; });
/* harmony import */ var _Canvas3D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Canvas3D */ "./src/ChemDoodle/_Canvas3D.js");

function TransformCanvas3D(id, width, height) {
  if (id) {
    this.create(id, width, height);
  }
}
;
TransformCanvas3D.prototype = new _Canvas3D__WEBPACK_IMPORTED_MODULE_0__["default"]();

/***/ }),

/***/ "./src/ChemDoodle/ViewerCanvas.js":
/*!****************************************!*\
  !*** ./src/ChemDoodle/ViewerCanvas.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ViewerCanvas; });
/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Canvas */ "./src/ChemDoodle/_Canvas.js");

function ViewerCanvas(id, width, height) {
  if (id) {
    this.create(id, width, height);
  }
}
;
ViewerCanvas.prototype = new _Canvas__WEBPACK_IMPORTED_MODULE_0__["default"]();

/***/ }),

/***/ "./src/ChemDoodle/ViewerCanvas3D.js":
/*!******************************************!*\
  !*** ./src/ChemDoodle/ViewerCanvas3D.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ViewerCanvas3D; });
/* harmony import */ var _Canvas3D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Canvas3D */ "./src/ChemDoodle/_Canvas3D.js");

function ViewerCanvas3D(id, width, height) {
  if (id) {
    this.create(id, width, height);
  }
}
;

var _ = ViewerCanvas3D.prototype = new _Canvas3D__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.mousedown = undefined;
_.rightmousedown = undefined;
_.drag = undefined;
_.mousewheel = undefined;

/***/ }),

/***/ "./src/ChemDoodle/_AnimatorCanvas.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/_AnimatorCanvas.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _AnimatorCanvas; });
/* harmony import */ var _animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./animations */ "./src/ChemDoodle/animations.js");
/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Canvas */ "./src/ChemDoodle/_Canvas.js");


function _AnimatorCanvas(id, width, height) {
  if (id) {
    this.create(id, width, height);
  }
}
;

var _ = _AnimatorCanvas.prototype = new _Canvas__WEBPACK_IMPORTED_MODULE_1__["default"]();

_.timeout = 33;

_.startAnimation = function () {
  this.stopAnimation();
  this.lastTime = new Date().getTime();
  var me = this;

  if (this.nextFrame) {
    this.handle = _animations__WEBPACK_IMPORTED_MODULE_0__["default"].requestInterval(function () {
      // advance clock
      var timeNow = new Date().getTime(); // update and repaint

      me.nextFrame(timeNow - me.lastTime);
      me.repaint();
      me.lastTime = timeNow;
    }, this.timeout);
  }
};

_.stopAnimation = function () {
  if (this.handle) {
    _animations__WEBPACK_IMPORTED_MODULE_0__["default"].clearRequestInterval(this.handle);
    this.handle = undefined;
  }
};

_.isRunning = function () {
  // must compare to undefined here to return a boolean
  return this.handle !== undefined;
};

/***/ }),

/***/ "./src/ChemDoodle/_Canvas.js":
/*!***********************************!*\
  !*** ./src/ChemDoodle/_Canvas.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _Canvas; });
/* harmony import */ var _featureDetection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./featureDetection */ "./src/ChemDoodle/featureDetection.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math */ "./src/ChemDoodle/math/index.js");
/* harmony import */ var _monitor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./monitor */ "./src/ChemDoodle/monitor.js");
/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./structures */ "./src/ChemDoodle/structures/index.js");
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib */ "./src/ChemDoodle/lib/index.js");
/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ChemDoodle */ "./src/ChemDoodle/index.js");






var m = Math;
var userAgent = navigator.userAgent;
function _Canvas() {}
;
var _ = _Canvas.prototype;
_.molecules = undefined;
_.shapes = undefined;
_.emptyMessage = undefined;
_.image = undefined;

_.repaint = function () {
  if (this.test) {
    return;
  }

  var canvas = document.getElementById(this.id);

  if (canvas.getContext) {
    var ctx = canvas.getContext('2d');

    if (this.pixelRatio !== 1 && canvas.width === this.width) {
      canvas.width = this.width * this.pixelRatio;
      canvas.height = this.height * this.pixelRatio;
      ctx.scale(this.pixelRatio, this.pixelRatio);
    }

    if (!this.image) {
      if (this.specs.backgroundColor && this.bgCache !== canvas.style.backgroundColor) {
        canvas.style.backgroundColor = this.specs.backgroundColor;
        this.bgCache = canvas.style.backgroundColor;
      } // clearRect is correct, but doesn't work as expected on Android
      // ctx.clearRect(0, 0, this.width, this.height);


      ctx.fillStyle = this.specs.backgroundColor;
      ctx.fillRect(0, 0, this.width, this.height);
    } else {
      ctx.drawImage(this.image, 0, 0);
    }

    if (this.innerRepaint) {
      this.innerRepaint(ctx);
    } else {
      if (this.molecules.length !== 0 || this.shapes.length !== 0) {
        ctx.save();
        ctx.translate(this.width / 2, this.height / 2);
        ctx.rotate(this.specs.rotateAngle);
        ctx.scale(this.specs.scale, this.specs.scale);
        ctx.translate(-this.width / 2, -this.height / 2);

        for (var i = 0, ii = this.molecules.length; i < ii; i++) {
          this.molecules[i].check(true);
          this.molecules[i].draw(ctx, this.specs);
        }

        if (this.checksOnAction) {
          // checksOnAction() must be called after checking molecules, as it depends on molecules being correct
          // this function is only used by the uis
          this.checksOnAction(true);
        }

        for (var i = 0, ii = this.shapes.length; i < ii; i++) {
          this.shapes[i].draw(ctx, this.specs);
        }

        ctx.restore();
      } else if (this.emptyMessage) {
        ctx.fillStyle = '#737683';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.font = '18px Helvetica, Verdana, Arial, Sans-serif';
        ctx.fillText(this.emptyMessage, this.width / 2, this.height / 2);
      }
    }

    if (this.drawChildExtras) {
      this.drawChildExtras(ctx, this.specs);
    }
  }
};

_.resize = function (w, h) {
  var cap = Object(_lib__WEBPACK_IMPORTED_MODULE_4__["jQuery"])('#' + this.id);
  cap.attr({
    width: w,
    height: h
  });
  cap.css('width', w);
  cap.css('height', h);
  this.width = w;
  this.height = h;

  if (_ChemDoodle__WEBPACK_IMPORTED_MODULE_5__["_Canvas3D"] && this instanceof _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__["_Canvas3D"]) {
    var wu = w;
    var hu = h;

    if (this.pixelRatio !== 1) {
      wu *= this.pixelRatio;
      hu *= this.pixelRatio;
      this.gl.canvas.width = wu;
      this.gl.canvas.height = hu;
    }

    this.gl.viewport(0, 0, wu, hu);
    this.afterLoadContent();
  } else if (this.molecules.length > 0) {
    this.center();

    for (var i = 0, ii = this.molecules.length; i < ii; i++) {
      this.molecules[i].check();
    }
  }

  this.repaint();
};

_.setBackgroundImage = function (path) {
  this.image = new Image(); // Create new Image object

  var me = this;

  this.image.onload = function () {
    me.repaint();
  };

  this.image.src = path; // Set source path
};

_.loadMolecule = function (molecule) {
  this.clear();
  this.molecules.push(molecule); // do this twice to center based on atom labels, which must be first rendered to be considered in bounds

  for (var i = 0; i < 2; i++) {
    this.center();

    if (!(_ChemDoodle__WEBPACK_IMPORTED_MODULE_5__["_Canvas3D"] && this instanceof _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__["_Canvas3D"])) {
      molecule.check();
    }

    if (this.afterLoadContent) {
      this.afterLoadContent();
    }

    this.repaint();
  }
};

_.loadContent = function (mols, shapes) {
  this.molecules = mols ? mols : [];
  this.shapes = shapes ? shapes : []; // do this twice to center based on atom labels, which must be first rendered to be considered in bounds

  for (var i = 0; i < 2; i++) {
    this.center();

    if (!(_ChemDoodle__WEBPACK_IMPORTED_MODULE_5__["_Canvas3D"] && this instanceof _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__["_Canvas3D"])) {
      for (var i = 0, ii = this.molecules.length; i < ii; i++) {
        this.molecules[i].check();
      }
    }

    if (this.afterLoadContent) {
      this.afterLoadContent();
    }

    this.repaint();
  }
};

_.addMolecule = function (molecule) {
  this.molecules.push(molecule);

  if (!(_ChemDoodle__WEBPACK_IMPORTED_MODULE_5__["_Canvas3D"] && this instanceof _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__["_Canvas3D"])) {
    molecule.check();
  }

  this.repaint();
};

_.removeMolecule = function (mol) {
  this.molecules = _lib__WEBPACK_IMPORTED_MODULE_4__["jQuery"].grep(this.molecules, function (value) {
    return value !== mol;
  });
  this.repaint();
};

_.getMolecule = function () {
  return this.molecules.length > 0 ? this.molecules[0] : undefined;
};

_.getMolecules = function () {
  return this.molecules;
};

_.addShape = function (shape) {
  this.shapes.push(shape);
  this.repaint();
};

_.removeShape = function (shape) {
  this.shapes = _lib__WEBPACK_IMPORTED_MODULE_4__["jQuery"].grep(this.shapes, function (value) {
    return value !== shape;
  });
  this.repaint();
};

_.getShapes = function () {
  return this.shapes;
};

_.clear = function () {
  this.molecules = [];
  this.shapes = [];
  this.specs.scale = 1;
  this.repaint();
};

_.center = function () {
  var bounds = this.getContentBounds();
  var center = new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"]((this.width - bounds.minX - bounds.maxX) / 2, (this.height - bounds.minY - bounds.maxY) / 2);

  for (var i = 0, ii = this.molecules.length; i < ii; i++) {
    var mol = this.molecules[i];

    for (var j = 0, jj = mol.atoms.length; j < jj; j++) {
      mol.atoms[j].add(center);
    }
  }

  for (var i = 0, ii = this.shapes.length; i < ii; i++) {
    var sps = this.shapes[i].getPoints();

    for (var j = 0, jj = sps.length; j < jj; j++) {
      sps[j].add(center);
    }
  }

  this.specs.scale = 1;
  var difX = bounds.maxX - bounds.minX;
  var difY = bounds.maxY - bounds.minY;

  if (difX > this.width - 20 || difY > this.height - 20) {
    this.specs.scale = m.min(this.width / difX, this.height / difY) * .85;
  }
};

_.bondExists = function (a1, a2) {
  for (var i = 0, ii = this.molecules.length; i < ii; i++) {
    var mol = this.molecules[i];

    for (var j = 0, jj = mol.bonds.length; j < jj; j++) {
      var b = mol.bonds[j];

      if (b.contains(a1) && b.contains(a2)) {
        return true;
      }
    }
  }

  return false;
};

_.getBond = function (a1, a2) {
  for (var i = 0, ii = this.molecules.length; i < ii; i++) {
    var mol = this.molecules[i];

    for (var j = 0, jj = mol.bonds.length; j < jj; j++) {
      var b = mol.bonds[j];

      if (b.contains(a1) && b.contains(a2)) {
        return b;
      }
    }
  }

  return undefined;
};

_.getMoleculeByAtom = function (a) {
  for (var i = 0, ii = this.molecules.length; i < ii; i++) {
    var mol = this.molecules[i];

    if (mol.atoms.indexOf(a) !== -1) {
      return mol;
    }
  }

  return undefined;
};

_.getAllAtoms = function () {
  var as = [];

  for (var i = 0, ii = this.molecules.length; i < ii; i++) {
    as = as.concat(this.molecules[i].atoms);
  }

  return as;
};

_.getAllBonds = function () {
  var bs = [];

  for (var i = 0, ii = this.molecules.length; i < ii; i++) {
    bs = bs.concat(this.molecules[i].bonds);
  }

  return bs;
};

_.getAllPoints = function () {
  var ps = [];

  for (var i = 0, ii = this.molecules.length; i < ii; i++) {
    ps = ps.concat(this.molecules[i].atoms);
  }

  for (var i = 0, ii = this.shapes.length; i < ii; i++) {
    ps = ps.concat(this.shapes[i].getPoints());
  }

  return ps;
};

_.getContentBounds = function () {
  var bounds = new _math__WEBPACK_IMPORTED_MODULE_1__["Bounds"]();

  for (var i = 0, ii = this.molecules.length; i < ii; i++) {
    bounds.expand(this.molecules[i].getBounds());
  }

  for (var i = 0, ii = this.shapes.length; i < ii; i++) {
    bounds.expand(this.shapes[i].getBounds());
  }

  return bounds;
};

_.create = function (id, width, height) {
  this.id = id;
  this.width = width;
  this.height = height;
  this.molecules = [];
  this.shapes = [];

  if (document.getElementById(id)) {
    var canvas = Object(_lib__WEBPACK_IMPORTED_MODULE_4__["jQuery"])('#' + id);

    if (!width) {
      this.width = canvas.attr('width');
    } else {
      canvas.attr('width', width);
    }

    if (!height) {
      this.height = canvas.attr('height');
    } else {
      canvas.attr('height', height);
    } // If the canvas is pre-created, make sure that the class attribute
    // is specified.


    canvas.attr('class', 'ChemDoodleWebComponent');
  } else if (!_featureDetection__WEBPACK_IMPORTED_MODULE_0__["default"].supports_canvas_text() && userAgent.indexOf("MSIE") != -1) {
    // Install Google Chrome Frame
    document.writeln('<div style="border: 1px solid black;" width="' + width + '" height="' + height + '">Please install <a href="http://code.google.com/chrome/chromeframe/">Google Chrome Frame</a>, then restart Internet Explorer.</div>');
    return;
  } else {
    document.writeln('<canvas class="ChemDoodleWebComponent" id="' + id + '" width="' + width + '" height="' + height + '" alt="ChemDoodle Web Component">This browser does not support HTML5/Canvas.</canvas>');
  }

  var jqCapsule = Object(_lib__WEBPACK_IMPORTED_MODULE_4__["jQuery"])('#' + id);
  jqCapsule.css('width', this.width);
  jqCapsule.css('height', this.height);
  this.pixelRatio = window.devicePixelRatio ? window.devicePixelRatio : 1;
  this.specs = new _structures__WEBPACK_IMPORTED_MODULE_3__["VisualSpecifications"](); // setup input events
  // make sure prehandle events are only in if statements if handled, so
  // as not to block browser events

  var me = this;

  if (_featureDetection__WEBPACK_IMPORTED_MODULE_0__["default"].supports_touch()) {
    // for iPhone OS and Android devices (and other mobile browsers that
    // support mobile events)
    jqCapsule.bind('touchstart', function (e) {
      var time = new Date().getTime();

      if (!_featureDetection__WEBPACK_IMPORTED_MODULE_0__["default"].supports_gesture() && e.originalEvent.touches.length === 2) {
        // on some platforms, like Android, there is no gesture
        // support, so we have to implement it
        var ts = e.originalEvent.touches;
        var p1 = new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](ts[0].pageX, ts[0].pageY);
        var p2 = new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](ts[1].pageX, ts[1].pageY);
        me.implementedGestureDist = p1.distance(p2);
        me.implementedGestureAngle = p1.angle(p2);

        if (me.gesturestart) {
          me.prehandleEvent(e);
          me.gesturestart(e);
        }
      }

      if (me.lastTouch && e.originalEvent.touches.length === 1 && time - me.lastTouch < 500) {
        if (me.dbltap) {
          me.prehandleEvent(e);
          me.dbltap(e);
        } else if (me.dblclick) {
          me.prehandleEvent(e);
          me.dblclick(e);
        } else if (me.touchstart) {
          me.prehandleEvent(e);
          me.touchstart(e);
        } else if (me.mousedown) {
          me.prehandleEvent(e);
          me.mousedown(e);
        }
      } else if (me.touchstart) {
        me.prehandleEvent(e);
        me.touchstart(e);

        if (this.hold) {
          clearTimeout(this.hold);
        }

        if (this.touchhold) {
          this.hold = setTimeout(function () {
            me.touchhold(e);
          }, 1000);
        }
      } else if (me.mousedown) {
        me.prehandleEvent(e);
        me.mousedown(e);
      }

      me.lastTouch = time;
    });
    jqCapsule.bind('touchmove', function (e) {
      if (this.hold) {
        clearTimeout(this.hold);
        this.hold = undefined;
      }

      if (!_featureDetection__WEBPACK_IMPORTED_MODULE_0__["default"].supports_gesture() && e.originalEvent.touches.length === 2) {
        // on some platforms, like Android, there is no gesture
        // support, so we have to implement it
        if (me.gesturechange) {
          var ts = e.originalEvent.touches;
          var p1 = new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](ts[0].pageX, ts[0].pageY);
          var p2 = new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](ts[1].pageX, ts[1].pageY);
          var newDist = p1.distance(p2);
          var newAngle = p1.angle(p2);
          e.originalEvent.scale = newDist / me.implementedGestureDist;
          e.originalEvent.rotation = 180 * (me.implementedGestureAngle - newAngle) / m.PI;
          me.prehandleEvent(e);
          me.gesturechange(e);
        }
      }

      if (e.originalEvent.touches.length > 1 && me.multitouchmove) {
        var numFingers = e.originalEvent.touches.length;
        me.prehandleEvent(e);
        var center = new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](-e.offset.left * numFingers, -e.offset.top * numFingers);

        for (var i = 0; i < numFingers; i++) {
          center.x += e.originalEvent.changedTouches[i].pageX;
          center.y += e.originalEvent.changedTouches[i].pageY;
        }

        center.x /= numFingers;
        center.y /= numFingers;
        e.p = center;
        me.multitouchmove(e, numFingers);
      } else if (me.touchmove) {
        me.prehandleEvent(e);
        me.touchmove(e);
      } else if (me.drag) {
        me.prehandleEvent(e);
        me.drag(e);
      }
    });
    jqCapsule.bind('touchend', function (e) {
      if (this.hold) {
        clearTimeout(this.hold);
        this.hold = undefined;
      }

      if (!_featureDetection__WEBPACK_IMPORTED_MODULE_0__["default"].supports_gesture() && me.implementedGestureDist) {
        // on some platforms, like Android, there is no gesture
        // support, so we have to implement it
        me.implementedGestureDist = undefined;
        me.implementedGestureAngle = undefined;

        if (me.gestureend) {
          me.prehandleEvent(e);
          me.gestureend(e);
        }
      }

      if (me.touchend) {
        me.prehandleEvent(e);
        me.touchend(e);
      } else if (me.mouseup) {
        me.prehandleEvent(e);
        me.mouseup(e);
      }

      if (new Date().getTime() - me.lastTouch < 250) {
        if (me.tap) {
          me.prehandleEvent(e);
          me.tap(e);
        } else if (me.click) {
          me.prehandleEvent(e);
          me.click(e);
        }
      }
    });
    jqCapsule.bind('gesturestart', function (e) {
      if (me.gesturestart) {
        me.prehandleEvent(e);
        me.gesturestart(e);
      }
    });
    jqCapsule.bind('gesturechange', function (e) {
      if (me.gesturechange) {
        me.prehandleEvent(e);
        me.gesturechange(e);
      }
    });
    jqCapsule.bind('gestureend', function (e) {
      if (me.gestureend) {
        me.prehandleEvent(e);
        me.gestureend(e);
      }
    });
  } else {
    // normal events
    // some mobile browsers will simulate mouse events, so do not set
    // these
    // events if mobile, or it will interfere with the handling of touch
    // events
    jqCapsule.click(function (e) {
      switch (e.which) {
        case 1:
          // left mouse button pressed
          if (me.click) {
            me.prehandleEvent(e);
            me.click(e);
          }

          break;

        case 2:
          // middle mouse button pressed
          if (me.middleclick) {
            me.prehandleEvent(e);
            me.middleclick(e);
          }

          break;

        case 3:
          // right mouse button pressed
          if (me.rightclick) {
            me.prehandleEvent(e);
            me.rightclick(e);
          }

          break;
      }
    });
    jqCapsule.dblclick(function (e) {
      if (me.dblclick) {
        me.prehandleEvent(e);
        me.dblclick(e);
      }
    });
    jqCapsule.mousedown(function (e) {
      switch (e.which) {
        case 1:
          // left mouse button pressed
          _monitor__WEBPACK_IMPORTED_MODULE_2__["default"].CANVAS_DRAGGING = me;

          if (me.mousedown) {
            me.prehandleEvent(e);
            me.mousedown(e);
          }

          break;

        case 2:
          // middle mouse button pressed
          if (me.middlemousedown) {
            me.prehandleEvent(e);
            me.middlemousedown(e);
          }

          break;

        case 3:
          // right mouse button pressed
          if (me.rightmousedown) {
            me.prehandleEvent(e);
            me.rightmousedown(e);
          }

          break;
      }
    });
    jqCapsule.mousemove(function (e) {
      if (!_monitor__WEBPACK_IMPORTED_MODULE_2__["default"].CANVAS_DRAGGING && me.mousemove) {
        me.prehandleEvent(e);
        me.mousemove(e);
      }
    });
    jqCapsule.mouseout(function (e) {
      _monitor__WEBPACK_IMPORTED_MODULE_2__["default"].CANVAS_OVER = undefined;

      if (me.mouseout) {
        me.prehandleEvent(e);
        me.mouseout(e);
      }
    });
    jqCapsule.mouseover(function (e) {
      _monitor__WEBPACK_IMPORTED_MODULE_2__["default"].CANVAS_OVER = me;

      if (me.mouseover) {
        me.prehandleEvent(e);
        me.mouseover(e);
      }
    });
    jqCapsule.mouseup(function (e) {
      switch (e.which) {
        case 1:
          // left mouse button pressed
          if (me.mouseup) {
            me.prehandleEvent(e);
            me.mouseup(e);
          }

          break;

        case 2:
          // middle mouse button pressed
          if (me.middlemouseup) {
            me.prehandleEvent(e);
            me.middlemouseup(e);
          }

          break;

        case 3:
          // right mouse button pressed
          if (me.rightmouseup) {
            me.prehandleEvent(e);
            me.rightmouseup(e);
          }

          break;
      }
    });
    jqCapsule.mousewheel(function (e, delta) {
      if (me.mousewheel) {
        me.prehandleEvent(e);
        me.mousewheel(e, delta);
      }
    });
  }

  if (this.subCreate) {
    this.subCreate();
  }
};

_.prehandleEvent = function (e) {
  if (e.originalEvent.changedTouches) {
    e.pageX = e.originalEvent.changedTouches[0].pageX;
    e.pageY = e.originalEvent.changedTouches[0].pageY;
  }

  if (!this.doEventDefault) {
    e.preventDefault();
    e.returnValue = false;
  }

  e.offset = Object(_lib__WEBPACK_IMPORTED_MODULE_4__["jQuery"])('#' + this.id).offset();
  e.p = new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](e.pageX - e.offset.left, e.pageY - e.offset.top);
};

/***/ }),

/***/ "./src/ChemDoodle/_Canvas3D.js":
/*!*************************************!*\
  !*** ./src/ChemDoodle/_Canvas3D.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _Canvas3D; });
/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ChemDoodle */ "./src/ChemDoodle/index.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math */ "./src/ChemDoodle/math/index.js");
/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extensions */ "./src/ChemDoodle/extensions/index.js");
/* harmony import */ var _monitor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./monitor */ "./src/ChemDoodle/monitor.js");
/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./structures */ "./src/ChemDoodle/structures/index.js");
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib */ "./src/ChemDoodle/lib/index.js");
/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_Canvas */ "./src/ChemDoodle/_Canvas.js");








var m = Math;
function _Canvas3D(id, width, height) {
  if (id) {
    this.create(id, width, height);
  }
}
;

var _ = _Canvas3D.prototype = new _Canvas__WEBPACK_IMPORTED_MODULE_6__["default"]();

var _super = _Canvas__WEBPACK_IMPORTED_MODULE_6__["default"].prototype;
_.rotationMatrix = undefined;
_.lastPoint = undefined;
_.emptyMessage = 'WebGL is Unavailable!';
_.lastPinchScale = 1;
_.lastGestureRotate = 0;

_.afterLoadContent = function () {
  var bounds = new _math__WEBPACK_IMPORTED_MODULE_1__["Bounds"]();

  for (var i = 0, ii = this.molecules.length; i < ii; i++) {
    bounds.expand(this.molecules[i].getBounds3D());
  } // build fog parameter


  var maxDimension3D = _lib__WEBPACK_IMPORTED_MODULE_5__["vec3"].dist([bounds.maxX, bounds.maxY, bounds.maxZ], [bounds.minX, bounds.minY, bounds.minZ]) / 2 + 1.5;

  if (maxDimension3D === Infinity) {
    // there is no content
    maxDimension3D = 10;
  }

  this.maxDimension = m.max(bounds.maxX - bounds.minX, bounds.maxY - bounds.minY);
  var fov = m.min(179.9, m.max(this.specs.projectionPerspectiveVerticalFieldOfView_3D, 0.1));
  var theta = fov / 360 * m.PI;
  var tanTheta = m.tan(theta) / 0.8;
  var top = maxDimension3D;
  var focalLength = top / tanTheta;
  var near = focalLength - top;
  var far = focalLength + top;
  var aspect = this.width / this.height;
  this.camera.fieldOfView = fov;
  this.camera.near = near;
  this.camera.far = far;
  this.camera.aspect = aspect;
  _lib__WEBPACK_IMPORTED_MODULE_5__["mat4"].translate(_lib__WEBPACK_IMPORTED_MODULE_5__["mat4"].identity(this.camera.viewMatrix), [0, 0, -focalLength]);
  var lightFocalLength = top / m.tan(theta);
  this.lighting.camera.fieldOfView = fov;
  this.lighting.camera.near = lightFocalLength - top;
  this.lighting.camera.far = lightFocalLength + top;
  this.lighting.updateView();
  this.setupScene();
};

_.renderDepthMap = function () {
  if (this.specs.shadow_3D && _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].DepthShader) {
    var cullFaceEnabled = this.gl.isEnabled(this.gl.CULL_FACE);

    if (!cullFaceEnabled) {
      this.gl.enable(this.gl.CULL_FACE);
    }

    this.depthShader.useShaderProgram(this.gl); // current clear color

    var cs = this.gl.getParameter(this.gl.COLOR_CLEAR_VALUE);
    this.gl.clearColor(1.0, 1.0, 1.0, 0.0);
    this.lightDepthMapFramebuffer.bind(this.gl, this.shadowTextureSize, this.shadowTextureSize);
    this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT); // use light projection matrix to draw the molecule

    this.depthShader.setProjectionMatrix(this.gl, this.lighting.camera.projectionMatrix);
    this.depthShader.enableAttribsArray(this.gl);

    for (var i = 0, ii = this.molecules.length; i < ii; i++) {
      this.molecules[i].render(this.gl, this.specs);
    }

    this.gl.flush();
    this.depthShader.disableAttribsArray(this.gl);
    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null); // set back the clear color

    this.gl.clearColor(cs[0], cs[1], cs[2], cs[3]);

    if (!cullFaceEnabled) {
      this.gl.disable(this.gl.CULL_FACE);
    }
  }
}; // draw anything those not molecules, example compass, shapes, text etc.


_.renderExtras = function () {
  this.phongShader.useShaderProgram(this.gl);
  this.phongShader.enableAttribsArray(this.gl);
  var transparentShapes = [];

  for (var i = 0, ii = this.shapes.length; i < ii; i++) {
    var s = this.shapes[i];

    if (s instanceof _structures__WEBPACK_IMPORTED_MODULE_4__["d3"]._Surface && (!s.specs && this.specs.surfaces_alpha !== 1 || s.specs && s.specs.surfaces_alpha !== 1)) {
      transparentShapes.push(s);
    } else {
      s.render(this.gl, this.specs);
    }
  } // transparent shapes


  if (transparentShapes.length !== 0) {
    //this.gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
    this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);
    this.gl.enable(this.gl.BLEND);
    this.gl.depthMask(false);

    for (var i = 0, ii = transparentShapes.length; i < ii; i++) {
      var s = transparentShapes[i];
      s.render(this.gl, this.specs);
    }

    this.gl.depthMask(true);
    this.gl.disable(this.gl.BLEND);
    this.gl.blendFuncSeparate(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);
  }

  this.phongShader.setShadow(this.gl, false);
  this.phongShader.setFogMode(this.gl, 0);
  this.phongShader.setFlatColor(this.gl, false); // compass use its own model view and projection matrix
  // so it need to use back the default matrix for other
  // rendering process (ex. render arbitrary text).

  if (this.specs.compass_display) {
    this.phongShader.setLightDirection(this.gl, [0, 0, -1]);
    this.compass.render(this.gl, this.specs);
  }

  this.phongShader.disableAttribsArray(this.gl);
  this.gl.flush(); // enable blend and depth mask set to false

  this.gl.enable(this.gl.BLEND);
  this.gl.depthMask(false);
  this.labelShader.useShaderProgram(this.gl); // use back the default model view matrix

  this.labelShader.setMatrixUniforms(this.gl, this.gl.modelViewMatrix); // use back the default projection matrix

  this.labelShader.setProjectionMatrix(this.gl, this.camera.projectionMatrix);
  this.labelShader.setDimension(this.gl, this.gl.canvas.clientWidth, this.gl.canvas.clientHeight); // enable vertex for draw text

  this.labelShader.enableAttribsArray(this.gl); // draw label molecule

  if (this.specs.atoms_displayLabels_3D) {
    this.label3D.render(this.gl, this.specs, this.getMolecules());
  } // draw measurement text


  if (this.specs.measurement_displayText_3D) {
    for (var i = 0, ii = this.shapes.length; i < ii; i++) {
      var s = this.shapes[i];

      if (s.renderText) {
        s.renderText(this.gl, this.specs);
      }
    }
  } // draw compass X Y Z text


  if (this.specs.compass_display && this.specs.compass_displayText_3D) {
    this.compass.renderAxis(this.gl);
  } // disable vertex for draw text


  this.labelShader.disableAttribsArray(this.gl); // disable blend and depth mask set to true

  this.gl.disable(this.gl.BLEND);
  this.gl.depthMask(true);
  this.gl.flush();

  if (this.drawChildExtras) {
    this.drawChildExtras(this.gl);
  }

  this.gl.flush();
}; // molecule colors rendeing will both use on forward and deferred rendering


_.renderColor = function () {
  this.phongShader.useShaderProgram(this.gl);
  this.gl.uniform1i(this.phongShader.shadowDepthSampleUniform, 0);
  this.gl.activeTexture(this.gl.TEXTURE0);
  this.gl.bindTexture(this.gl.TEXTURE_2D, this.lightDepthMapTexture.texture);
  this.phongShader.setProjectionMatrix(this.gl, this.camera.projectionMatrix);
  this.phongShader.setShadow(this.gl, this.specs.shadow_3D);
  this.phongShader.setFlatColor(this.gl, this.specs.flat_color_3D);
  this.phongShader.setGammaCorrection(this.gl, this.specs.gammaCorrection_3D);
  this.phongShader.setShadowTextureSize(this.gl, this.shadowTextureSize, this.shadowTextureSize);
  this.phongShader.setShadowIntensity(this.gl, this.specs.shadow_intensity_3D);
  this.phongShader.setFogMode(this.gl, this.specs.fog_mode_3D);
  this.phongShader.setFogColor(this.gl, this.fogging.colorRGB);
  this.phongShader.setFogStart(this.gl, this.fogging.fogStart);
  this.phongShader.setFogEnd(this.gl, this.fogging.fogEnd);
  this.phongShader.setFogDensity(this.gl, this.fogging.density);
  this.phongShader.setLightProjectionMatrix(this.gl, this.lighting.camera.projectionMatrix);
  this.phongShader.setLightDiffuseColor(this.gl, this.lighting.diffuseRGB);
  this.phongShader.setLightSpecularColor(this.gl, this.lighting.specularRGB);
  this.phongShader.setLightDirection(this.gl, this.lighting.direction);
  this.phongShader.enableAttribsArray(this.gl);

  for (var i = 0, ii = this.molecules.length; i < ii; i++) {
    this.molecules[i].render(this.gl, this.specs);
  }

  this.phongShader.disableAttribsArray(this.gl);
  this.gl.flush();
};

_.renderPosition = function () {
  this.positionShader.useShaderProgram(this.gl);
  this.positionShader.setProjectionMatrix(this.gl, this.camera.projectionMatrix);
  this.positionShader.enableAttribsArray(this.gl);

  for (var i = 0, ii = this.molecules.length; i < ii; i++) {
    this.molecules[i].render(this.gl, this.specs);
  }

  this.positionShader.disableAttribsArray(this.gl);
  this.gl.flush();
};

_.renderNormal = function () {
  this.normalShader.useShaderProgram(this.gl);
  this.normalShader.setProjectionMatrix(this.gl, this.camera.projectionMatrix);
  this.normalShader.enableAttribsArray(this.gl);

  for (var i = 0, ii = this.molecules.length; i < ii; i++) {
    this.molecules[i].render(this.gl, this.specs);
  }

  this.normalShader.disableAttribsArray(this.gl);
  this.gl.flush();
};

_.renderSSAO = function () {
  this.ssaoShader.useShaderProgram(this.gl);
  this.ssaoShader.setProjectionMatrix(this.gl, this.camera.projectionMatrix);
  this.ssaoShader.setSampleKernel(this.gl, this.ssao.sampleKernel);
  this.ssaoShader.setKernelRadius(this.gl, this.specs.ssao_kernel_radius);
  this.ssaoShader.setPower(this.gl, this.specs.ssao_power);
  this.ssaoShader.setGbufferTextureSize(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
  this.gl.uniform1i(this.ssaoShader.positionSampleUniform, 0);
  this.gl.uniform1i(this.ssaoShader.normalSampleUniform, 1);
  this.gl.uniform1i(this.ssaoShader.noiseSampleUniform, 2);
  this.gl.activeTexture(this.gl.TEXTURE0);
  this.gl.bindTexture(this.gl.TEXTURE_2D, this.positionTexture.texture);
  this.gl.activeTexture(this.gl.TEXTURE1);
  this.gl.bindTexture(this.gl.TEXTURE_2D, this.normalTexture.texture);
  this.gl.activeTexture(this.gl.TEXTURE2);
  this.gl.bindTexture(this.gl.TEXTURE_2D, this.ssao.noiseTexture);
  this.gl.activeTexture(this.gl.TEXTURE0);
  this.ssaoShader.enableAttribsArray(this.gl);
  this.gl.quadBuffer.bindBuffers(this.gl);
  this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, this.gl.quadBuffer.vertexPositionBuffer.numItems);
  this.ssaoShader.disableAttribsArray(this.gl);
  this.gl.flush(); // render ssao blur shader

  this.ssaoFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
  this.gl.clear(this.gl.COLOR_BUFFER_BIT);
  this.ssaoBlurShader.useShaderProgram(this.gl);
  this.ssaoBlurShader.setGbufferTextureSize(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
  this.gl.uniform1i(this.ssaoBlurShader.aoSampleUniform, 0);
  this.gl.uniform1i(this.ssaoBlurShader.depthSampleUniform, 1);
  this.gl.activeTexture(this.gl.TEXTURE0);
  this.gl.bindTexture(this.gl.TEXTURE_2D, this.imageTexture.texture);
  this.gl.activeTexture(this.gl.TEXTURE1);
  this.gl.bindTexture(this.gl.TEXTURE_2D, this.depthTexture.texture);
  this.gl.activeTexture(this.gl.TEXTURE0);
  this.ssaoBlurShader.enableAttribsArray(this.gl);
  this.gl.quadBuffer.bindBuffers(this.gl);
  this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, this.gl.quadBuffer.vertexPositionBuffer.numItems);
  this.ssaoBlurShader.disableAttribsArray(this.gl);
  this.gl.activeTexture(this.gl.TEXTURE0);
  this.gl.flush();
};

_.renderOutline = function () {
  this.outlineShader.useShaderProgram(this.gl);
  this.outlineShader.setGbufferTextureSize(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
  this.outlineShader.setNormalThreshold(this.gl, this.specs.outline_normal_threshold);
  this.outlineShader.setDepthThreshold(this.gl, this.specs.outline_depth_threshold);
  this.outlineShader.setThickness(this.gl, this.specs.outline_thickness);
  this.gl.uniform1i(this.outlineShader.normalSampleUniform, 0);
  this.gl.uniform1i(this.outlineShader.depthSampleUniform, 1);
  this.gl.activeTexture(this.gl.TEXTURE0);
  this.gl.bindTexture(this.gl.TEXTURE_2D, this.normalTexture.texture);
  this.gl.activeTexture(this.gl.TEXTURE1);
  this.gl.bindTexture(this.gl.TEXTURE_2D, this.depthTexture.texture);
  this.gl.activeTexture(this.gl.TEXTURE0);
  this.outlineShader.enableAttribsArray(this.gl);
  this.gl.quadBuffer.bindBuffers(this.gl);
  this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, this.gl.quadBuffer.vertexPositionBuffer.numItems);
  this.outlineShader.disableAttribsArray(this.gl);
  this.gl.flush();
};

_.deferredRender = function () {
  // get backdground color
  var bgColor = this.gl.getParameter(this.gl.COLOR_CLEAR_VALUE); // set background to black

  this.gl.clearColor(0.0, 0.0, 0.0, 0.0); // render color

  this.colorFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
  this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
  this.renderColor(); // render position

  this.positionFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
  this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
  this.renderPosition(); // render normals

  this.normalFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
  this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
  this.renderNormal(); // render ssao

  if (this.specs.ssao_3D && _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].SSAOShader) {
    // render ssao shading
    this.quadFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
    this.gl.clear(this.gl.COLOR_BUFFER_BIT);
    this.renderSSAO();
  } else {
    this.ssaoFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
    this.gl.clearColor(1.0, 1.0, 1.0, 1.0);
    this.gl.clear(this.gl.COLOR_BUFFER_BIT);
  } // render outline


  this.outlineFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
  this.gl.clearColor(1.0, 1.0, 1.0, 1.0);
  this.gl.clear(this.gl.COLOR_BUFFER_BIT);

  if (this.specs.outline_3D) {
    this.renderOutline();
  } // set back background color


  this.gl.clearColor(bgColor[0], bgColor[1], bgColor[2], bgColor[3]); // composite render

  this.quadFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
  this.gl.clear(this.gl.COLOR_BUFFER_BIT);
  this.lightingShader.useShaderProgram(this.gl);
  this.gl.uniform1i(this.lightingShader.positionSampleUniform, 0);
  this.gl.uniform1i(this.lightingShader.colorSampleUniform, 1);
  this.gl.uniform1i(this.lightingShader.ssaoSampleUniform, 2);
  this.gl.uniform1i(this.lightingShader.outlineSampleUniform, 3);
  this.gl.activeTexture(this.gl.TEXTURE0);
  this.gl.bindTexture(this.gl.TEXTURE_2D, this.positionTexture.texture);
  this.gl.activeTexture(this.gl.TEXTURE1);
  this.gl.bindTexture(this.gl.TEXTURE_2D, this.colorTexture.texture);
  this.gl.activeTexture(this.gl.TEXTURE2);
  this.gl.bindTexture(this.gl.TEXTURE_2D, this.ssaoTexture.texture);
  this.gl.activeTexture(this.gl.TEXTURE3);
  this.gl.bindTexture(this.gl.TEXTURE_2D, this.outlineTexture.texture);
  this.gl.activeTexture(this.gl.TEXTURE0);
  this.lightingShader.enableAttribsArray(this.gl);
  this.gl.quadBuffer.bindBuffers(this.gl);
  this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, this.gl.quadBuffer.vertexPositionBuffer.numItems);
  this.lightingShader.disableAttribsArray(this.gl);
  this.gl.flush(); // final render

  this.fxaaFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
  this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT); // setup viewport

  this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
  this.gl.bindTexture(this.gl.TEXTURE_2D, this.imageTexture.texture);
  this.fxaaShader.useShaderProgram(this.gl);
  this.fxaaShader.setBuffersize(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
  this.fxaaShader.setAntialias(this.gl, this.specs.antialias_3D);
  this.fxaaShader.setEdgeThreshold(this.gl, this.specs.fxaa_edgeThreshold);
  this.fxaaShader.setEdgeThresholdMin(this.gl, this.specs.fxaa_edgeThresholdMin);
  this.fxaaShader.setSearchSteps(this.gl, this.specs.fxaa_searchSteps);
  this.fxaaShader.setSearchThreshold(this.gl, this.specs.fxaa_searchThreshold);
  this.fxaaShader.setSubpixCap(this.gl, this.specs.fxaa_subpixCap);
  this.fxaaShader.setSubpixTrim(this.gl, this.specs.fxaa_subpixTrim);
  this.fxaaShader.enableAttribsArray(this.gl);
  this.gl.quadBuffer.bindBuffers(this.gl);
  this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, this.gl.quadBuffer.vertexPositionBuffer.numItems);
  this.fxaaShader.disableAttribsArray(this.gl);
  this.gl.flush(); // final render

  this.finalFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
  this.renderExtras(); // set back background color

  this.gl.clearColor(bgColor[0], bgColor[1], bgColor[2], bgColor[3]); // last render

  this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);
  this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT); // setup viewport

  this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
  this.gl.bindTexture(this.gl.TEXTURE_2D, this.fxaaTexture.texture);
  this.quadShader.useShaderProgram(this.gl);
  this.quadShader.enableAttribsArray(this.gl);
  this.gl.quadBuffer.bindBuffers(this.gl);
  this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, this.gl.quadBuffer.vertexPositionBuffer.numItems);
  this.quadShader.disableAttribsArray(this.gl);
  this.gl.flush();
};

_.forwardRender = function () {
  // last render
  this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);
  this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT); // setup viewport

  this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
  this.renderColor();
  this.renderExtras();
};

_.repaint = function () {
  if (this.gl) {
    // set up the model view matrix to the specified transformations
    this.gl.lightViewMatrix = _lib__WEBPACK_IMPORTED_MODULE_5__["mat4"].multiply(this.lighting.camera.viewMatrix, this.rotationMatrix, []);
    this.gl.rotationMatrix = this.rotationMatrix;
    this.gl.modelViewMatrix = this.gl.lightViewMatrix;
    this.renderDepthMap();
    this.gl.modelViewMatrix = _lib__WEBPACK_IMPORTED_MODULE_5__["mat4"].multiply(this.camera.viewMatrix, this.rotationMatrix, []);

    if (this.isSupportDeferred() && (this.specs.ssao_3D || this.specs.outline_3D)) {
      this.deferredRender();
    } else {
      this.forwardRender();
    }
  }
};

_.pick = function (x, y, includeAtoms, includeBonds) {
  if (this.gl) {
    // draw with pick framebuffer
    var xu = x;
    var yu = this.height - y;

    if (this.pixelRatio !== 1) {
      xu *= this.pixelRatio;
      yu *= this.pixelRatio;
    } // set up the model view matrix to the specified transformations


    _lib__WEBPACK_IMPORTED_MODULE_5__["mat4"].multiply(this.camera.viewMatrix, this.rotationMatrix, this.gl.modelViewMatrix);
    this.gl.rotationMatrix = this.rotationMatrix;
    this.pickShader.useShaderProgram(this.gl); // current clear color

    var cs = this.gl.getParameter(this.gl.COLOR_CLEAR_VALUE);
    this.gl.clearColor(1.0, 1.0, 1.0, 0.0);
    this.pickerFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
    this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT); // use default projection matrix to draw the molecule

    this.pickShader.setProjectionMatrix(this.gl, this.camera.projectionMatrix); // not need the normal for diffuse light, we need flat color

    this.pickShader.enableAttribsArray(this.gl);
    var objects = [];

    for (var i = 0, ii = this.molecules.length; i < ii; i++) {
      this.molecules[i].renderPickFrame(this.gl, this.specs, objects, includeAtoms, includeBonds);
    }

    this.pickShader.disableAttribsArray(this.gl);
    this.gl.flush();
    var rgba = new Uint8Array(4);
    this.gl.readPixels(xu - 2, yu + 2, 1, 1, this.gl.RGBA, this.gl.UNSIGNED_BYTE, rgba);
    var object = undefined;
    var idxMolecule = rgba[3];

    if (idxMolecule > 0) {
      var idxAtom = rgba[2] | rgba[1] << 8 | rgba[0] << 16;
      object = objects[idxAtom];
    }

    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null); // set back the clear color

    this.gl.clearColor(cs[0], cs[1], cs[2], cs[3]);
    return object;
  }

  return undefined;
};

_.center = function () {
  var p = new _structures__WEBPACK_IMPORTED_MODULE_4__["Atom"]();

  for (var k = 0, kk = this.molecules.length; k < kk; k++) {
    var m = this.molecules[k];
    p.add3D(m.getCenter3D());
  }

  p.x /= this.molecules.length;
  p.y /= this.molecules.length;

  for (var k = 0, kk = this.molecules.length; k < kk; k++) {
    var m = this.molecules[k];

    for (var i = 0, ii = m.atoms.length; i < ii; i++) {
      m.atoms[i].sub3D(p);
    }

    if (m.chains && m.fromJSON) {
      for (var i = 0, ii = m.chains.length; i < ii; i++) {
        var chain = m.chains[i];

        for (var j = 0, jj = chain.length; j < jj; j++) {
          var residue = chain[j];
          residue.cp1.sub3D(p);
          residue.cp2.sub3D(p);

          if (residue.cp3) {
            residue.cp3.sub3D(p);
            residue.cp4.sub3D(p);
            residue.cp5.sub3D(p);
          }
        }
      }
    }
  }
};

_.isSupportDeferred = function () {
  return this.gl.textureFloatExt && this.gl.depthTextureExt;
};

_.create = function (id, width, height) {
  _super.create.call(this, id, width, height); // setup gl object


  try {
    var canvas = document.getElementById(this.id);
    this.gl = canvas.getContext('webgl');

    if (!this.gl) {
      this.gl = canvas.getContext('experimental-webgl');
    }
  } catch (e) {}

  if (this.gl) {
    if (this.pixelRatio !== 1 && this.gl.canvas.width === this.width) {
      this.gl.canvas.style.width = this.width + 'px';
      this.gl.canvas.style.height = this.height + 'px';
      this.gl.canvas.width = this.width * this.pixelRatio;
      this.gl.canvas.height = this.height * this.pixelRatio;
    }

    this.gl.enable(this.gl.DEPTH_TEST);
    this.gl.depthFunc(this.gl.LEQUAL);
    this.gl.blendFuncSeparate(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);
    this.gl.clearDepth(1.0); // size of texture for render depth map from light view

    this.shadowTextureSize = 1024; // setup matrices

    this.rotationMatrix = _lib__WEBPACK_IMPORTED_MODULE_5__["mat4"].identity([]); // set up camera

    this.camera = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Camera();
    this.label3D = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Label();
    this.lighting = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Light(this.specs.lightDiffuseColor_3D, this.specs.lightSpecularColor_3D, this.specs.lightDirection_3D);
    this.fogging = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Fog(this.specs.fog_color_3D || this.specs.backgroundColor, this.specs.fog_start_3D, this.specs.fog_end_3D, this.specs.fog_density_3D); // uncomment this line to see shadow without depth texture extension

    this.gl.depthTextureExt = this.gl.getExtension('WEBGL_depth_texture') || this.gl.getExtension('WEBKIT_WEBGL_depth_texture') || this.gl.getExtension('MOZ_WEBGL_depth_texture');
    this.gl.textureFloatExt = this.gl.getExtension('OES_texture_float') || this.gl.getExtension('WEBKIT_OES_texture_float') || this.gl.getExtension('MOZ_OES_texture_float'); // this.gl.shaderTextureLodExt = this.gl.getExtension('EXT_shader_texture_lod') || this.gl.getExtension('WEBKIT_EXT_shader_texture_lod') || this.gl.getExtension('MOZ_EXT_shader_texture_lod');
    // this.gl.drawBuffersExt = this.gl.getExtension('WEBGL_draw_buffers');

    this.ssao = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].SSAO(); // set picker color attachment

    this.pickerColorTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Texture();
    this.pickerColorTexture.init(this.gl, this.gl.UNSIGNED_BYTE, this.gl.RGBA, this.gl.RGBA); // set picker depth attachment 

    this.pickerDepthRenderbuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Renderbuffer();
    this.pickerDepthRenderbuffer.init(this.gl, this.gl.DEPTH_COMPONENT16); // set picker framebuffer

    this.pickerFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Framebuffer();
    this.pickerFramebuffer.init(this.gl);
    this.pickerFramebuffer.setColorTexture(this.gl, this.pickerColorTexture.texture);
    this.pickerFramebuffer.setDepthRenderbuffer(this.gl, this.pickerDepthRenderbuffer.renderbuffer); // depth map for shadowing

    this.lightDepthMapTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Texture();
    this.lightDepthMapRenderbuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Renderbuffer();
    this.lightDepthMapFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Framebuffer();
    this.lightDepthMapFramebuffer.init(this.gl);

    if (this.gl.depthTextureExt) {
      this.lightDepthMapTexture.init(this.gl, this.gl.UNSIGNED_SHORT, this.gl.DEPTH_COMPONENT);
      this.lightDepthMapRenderbuffer.init(this.gl, this.gl.RGBA4);
      this.lightDepthMapFramebuffer.setColorRenderbuffer(this.gl, this.lightDepthMapRenderbuffer.renderbuffer);
      this.lightDepthMapFramebuffer.setDepthTexture(this.gl, this.lightDepthMapTexture.texture);
    } else {
      this.lightDepthMapTexture.init(this.gl, this.gl.UNSIGNED_BYTE, this.gl.RGBA, this.gl.RGBA);
      this.lightDepthMapRenderbuffer.init(this.gl, this.gl.DEPTH_COMPONENT16);
      this.lightDepthMapFramebuffer.setColorTexture(this.gl, this.lightDepthMapTexture.texture);
      this.lightDepthMapFramebuffer.setDepthRenderbuffer(this.gl, this.lightDepthMapRenderbuffer.renderbuffer);
    } // deferred shading textures, renderbuffers, framebuffers and shaders


    if (this.isSupportDeferred()) {
      // g-buffer
      this.depthTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Texture();
      this.depthTexture.init(this.gl, this.gl.UNSIGNED_SHORT, this.gl.DEPTH_COMPONENT);
      this.colorTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Texture();
      this.colorTexture.init(this.gl, this.gl.UNSIGNED_BYTE, this.gl.RGBA);
      this.positionTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Texture();
      this.positionTexture.init(this.gl, this.gl.FLOAT, this.gl.RGBA);
      this.normalTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Texture();
      this.normalTexture.init(this.gl, this.gl.FLOAT, this.gl.RGBA); // postprocesing effect
      // ssao

      this.ssaoTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Texture();
      this.ssaoTexture.init(this.gl, this.gl.FLOAT, this.gl.RGBA); // outline

      this.outlineTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Texture();
      this.outlineTexture.init(this.gl, this.gl.UNSIGNED_BYTE, this.gl.RGBA);
      this.fxaaTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Texture();
      this.fxaaTexture.init(this.gl, this.gl.FLOAT, this.gl.RGBA); // temp texture

      this.imageTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Texture();
      this.imageTexture.init(this.gl, this.gl.FLOAT, this.gl.RGBA); // framebuffer

      this.colorFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Framebuffer();
      this.colorFramebuffer.init(this.gl);
      this.colorFramebuffer.setColorTexture(this.gl, this.colorTexture.texture);
      this.colorFramebuffer.setDepthTexture(this.gl, this.depthTexture.texture);
      this.normalFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Framebuffer();
      this.normalFramebuffer.init(this.gl);
      this.normalFramebuffer.setColorTexture(this.gl, this.normalTexture.texture);
      this.normalFramebuffer.setDepthTexture(this.gl, this.depthTexture.texture);
      this.positionFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Framebuffer();
      this.positionFramebuffer.init(this.gl);
      this.positionFramebuffer.setColorTexture(this.gl, this.positionTexture.texture);
      this.positionFramebuffer.setDepthTexture(this.gl, this.depthTexture.texture);
      this.ssaoFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Framebuffer();
      this.ssaoFramebuffer.init(this.gl);
      this.ssaoFramebuffer.setColorTexture(this.gl, this.ssaoTexture.texture);
      this.outlineFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Framebuffer();
      this.outlineFramebuffer.init(this.gl);
      this.outlineFramebuffer.setColorTexture(this.gl, this.outlineTexture.texture);
      this.fxaaFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Framebuffer();
      this.fxaaFramebuffer.init(this.gl);
      this.fxaaFramebuffer.setColorTexture(this.gl, this.fxaaTexture.texture);
      this.quadFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Framebuffer();
      this.quadFramebuffer.init(this.gl);
      this.quadFramebuffer.setColorTexture(this.gl, this.imageTexture.texture);
      this.finalFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Framebuffer();
      this.finalFramebuffer.init(this.gl);
      this.finalFramebuffer.setColorTexture(this.gl, this.fxaaTexture.texture);
      this.finalFramebuffer.setDepthTexture(this.gl, this.depthTexture.texture);
      this.normalShader = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].NormalShader();
      this.normalShader.init(this.gl);
      this.positionShader = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].PositionShader();
      this.positionShader.init(this.gl);

      if (_structures__WEBPACK_IMPORTED_MODULE_4__["d3"].SSAOShader) {
        this.ssaoShader = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].SSAOShader();
        this.ssaoShader.init(this.gl);
        this.ssaoBlurShader = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].SSAOBlurShader();
        this.ssaoBlurShader.init(this.gl);
      }

      this.outlineShader = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].OutlineShader();
      this.outlineShader.init(this.gl);
      this.lightingShader = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].LightingShader();
      this.lightingShader.init(this.gl);
      this.fxaaShader = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].FXAAShader();
      this.fxaaShader.init(this.gl);
      this.quadShader = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].QuadShader();
      this.quadShader.init(this.gl);
    } // this is the shaders


    this.labelShader = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].LabelShader();
    this.labelShader.init(this.gl);
    this.pickShader = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].PickShader();
    this.pickShader.init(this.gl);
    this.phongShader = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].PhongShader();
    this.phongShader.init(this.gl);

    if (_structures__WEBPACK_IMPORTED_MODULE_4__["d3"].DepthShader) {
      this.depthShader = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].DepthShader();
      this.depthShader.init(this.gl);
    }

    this.textTextImage = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].TextImage();
    this.textTextImage.init(this.gl);
    this.gl.textImage = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].TextImage();
    this.gl.textImage.init(this.gl);
    this.gl.textMesh = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].TextMesh();
    this.gl.textMesh.init(this.gl); // set up material

    this.gl.material = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Material();
    this.setupScene();
  } else {
    this.displayMessage();
  }
};

_.displayMessage = function () {
  var canvas = document.getElementById(this.id);

  if (canvas.getContext) {
    var ctx = canvas.getContext('2d');

    if (this.specs.backgroundColor) {
      ctx.fillStyle = this.specs.backgroundColor;
      ctx.fillRect(0, 0, this.width, this.height);
    }

    if (this.emptyMessage) {
      ctx.fillStyle = '#737683';
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.font = '18px Helvetica, Verdana, Arial, Sans-serif';
      ctx.fillText(this.emptyMessage, this.width / 2, this.height / 2);
    }
  }
};

_.renderText = function (text, position) {
  var vertexData = {
    position: [],
    texCoord: [],
    translation: []
  };
  this.textTextImage.pushVertexData(text, position, 0, vertexData);
  this.gl.textMesh.storeData(this.gl, vertexData.position, vertexData.texCoord, vertexData.translation);
  this.textTextImage.useTexture(this.gl);
  this.gl.textMesh.render(this.gl);
};

_.setupScene = function () {
  if (this.gl) {
    // clear the canvas
    // set background color for IE's sake, seems like an IE bug where half the repaints don't render a background
    var jqCapsule = Object(_lib__WEBPACK_IMPORTED_MODULE_5__["jQuery"])('#' + this.id);
    jqCapsule.css('background-color', this.specs.backgroundColor);
    var cs = _math__WEBPACK_IMPORTED_MODULE_1__["getRGB"](this.specs.backgroundColor, 1);
    this.gl.clearColor(cs[0], cs[1], cs[2], 1.0);
    this.specs.cullBackFace_3D ? this.gl.enable(this.gl.CULL_FACE) : this.gl.disable(this.gl.CULL_FACE); // here is the sphere buffer to be drawn, make it once, then scale
    // and translate to draw atoms

    this.gl.sphereBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Sphere(1, this.specs.atoms_resolution_3D, this.specs.atoms_resolution_3D);
    this.gl.starBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Star();
    this.gl.cylinderBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Cylinder(1, 1, this.specs.bonds_resolution_3D);
    this.gl.cylinderClosedBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Cylinder(1, 1, this.specs.bonds_resolution_3D, true);
    this.gl.boxBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Box(1, 1, 1);
    this.gl.pillBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Pill(this.specs.bonds_pillDiameter_3D / 2, this.specs.bonds_pillHeight_3D, this.specs.bonds_pillLatitudeResolution_3D, this.specs.bonds_pillLongitudeResolution_3D);
    this.gl.lineBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Line();
    this.gl.lineArrowBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].LineArrow();
    this.gl.arrowBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Arrow(0.3, this.specs.compass_resolution_3D);
    this.gl.quadBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Quad(); // texture for rendering text

    this.gl.textImage.updateFont(this.gl, this.specs.text_font_size, this.specs.text_font_families, this.specs.text_font_bold, this.specs.text_font_italic, this.specs.text_font_stroke_3D); // set up lighting

    this.lighting.lightScene(this.specs.lightDiffuseColor_3D, this.specs.lightSpecularColor_3D, this.specs.lightDirection_3D); // set up fogging

    this.fogging.fogScene(this.specs.fog_color_3D || this.specs.backgroundColor, this.specs.fog_start_3D, this.specs.fog_end_3D, this.specs.fog_density_3D); // set up compass

    this.compass = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Compass(this.gl, this.specs); // set texture and renderbuffer parameter

    this.lightDepthMapTexture.setParameter(this.gl, this.shadowTextureSize, this.shadowTextureSize);
    this.lightDepthMapRenderbuffer.setParameter(this.gl, this.shadowTextureSize, this.shadowTextureSize);
    this.pickerColorTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
    this.pickerDepthRenderbuffer.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);

    if (this.isSupportDeferred()) {
      this.depthTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
      this.colorTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
      this.imageTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
      this.positionTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
      this.normalTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
      this.ssaoTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
      this.outlineTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);
      this.fxaaTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight); // set SSAO parameter

      this.ssao.initSampleKernel(this.specs.ssao_kernel_samples);
      this.ssao.initNoiseTexture(this.gl);
    }

    this.camera.updateProjectionMatrix(this.specs.projectionPerspective_3D);

    for (var k = 0, kk = this.molecules.length; k < kk; k++) {
      var mol = this.molecules[k];

      if (!(mol.labelMesh instanceof _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].TextMesh)) {
        mol.labelMesh = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].TextMesh();
        mol.labelMesh.init(this.gl);
      }

      if (mol.chains) {
        mol.ribbons = [];
        mol.cartoons = [];
        mol.tubes = [];
        mol.pipePlanks = []; // set up ribbon diagram if available and not already setup

        for (var j = 0, jj = mol.chains.length; j < jj; j++) {
          var rs = mol.chains[j];

          for (var i = 0, ii = rs.length - 1; i < ii; i++) {
            rs[i].Test = i;
          }

          var isNucleotide = rs.length > 3 && _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["RESIDUE"][rs[3].name] && _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["RESIDUE"][rs[3].name].aminoColor === '#BEA06E';

          if (rs.length > 0 && !rs[0].lineSegments) {
            for (var i = 0, ii = rs.length - 1; i < ii; i++) {
              rs[i].setup(rs[i + 1].cp1, isNucleotide ? 1 : this.specs.proteins_horizontalResolution);
            }

            if (!isNucleotide) {
              for (var i = 1, ii = rs.length - 1; i < ii; i++) {
                // reverse guide points if carbonyl
                // orientation flips
                if (_extensions__WEBPACK_IMPORTED_MODULE_2__["vec3AngleFrom"](rs[i - 1].D, rs[i].D) > m.PI / 2) {
                  rs[i].guidePointsSmall.reverse();
                  rs[i].guidePointsLarge.reverse();
                  _lib__WEBPACK_IMPORTED_MODULE_5__["vec3"].scale(rs[i].D, -1);
                }
              }
            }

            for (var i = 2, ii = rs.length - 3; i < ii; i++) {
              // compute line segments
              rs[i].computeLineSegments(rs[i - 2], rs[i - 1], rs[i + 1], !isNucleotide, isNucleotide ? this.specs.nucleics_verticalResolution : this.specs.proteins_verticalResolution);
            } // remove unneeded dummies


            rs.pop();
            rs.pop();
            rs.pop();
            rs.shift();
            rs.shift();
          } // create the hsl color for the chain


          var rgb = _math__WEBPACK_IMPORTED_MODULE_1__["hsl2rgb"](jj === 1 ? .5 : j / jj, 1, .5);
          var chainColor = 'rgb(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ')';
          rs.chainColor = chainColor;

          if (isNucleotide) {
            var t = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Tube(rs, this.specs.nucleics_tubeThickness, this.specs.nucleics_tubeResolution_3D);
            t.chainColor = chainColor;
            mol.tubes.push(t);
          } else {
            var t = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].PipePlank(rs, this.specs);
            mol.pipePlanks.push(t);
            var res = rs.shift();
            var r = {
              front: new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Ribbon(rs, this.specs.proteins_ribbonThickness, false),
              back: new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Ribbon(rs, -this.specs.proteins_ribbonThickness, false)
            };
            r.front.chainColor = chainColor;
            r.back.chainColor = chainColor;
            mol.ribbons.push(r);
            var d = {
              front: new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Ribbon(rs, this.specs.proteins_ribbonThickness, true),
              back: new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].Ribbon(rs, -this.specs.proteins_ribbonThickness, true)
            };
            d.front.chainColor = chainColor;
            d.back.chainColor = chainColor;
            mol.cartoons.push(d);
            rs.unshift(res);
          }
        }
      }
    }

    this.label3D.updateVerticesBuffer(this.gl, this.getMolecules(), this.specs); // the molecules in frame of MovieCanvas3D must be handled

    if (this instanceof _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["MovieCanvas3D"] && this.frames) {
      for (var i = 0, ii = this.frames.length; i < ii; i++) {
        var f = this.frames[i];

        for (var j = 0, jj = f.mols.length; j < jj; j++) {
          var mol = f.mols[j];

          if (!(mol.labelMesh instanceof _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].TextMesh)) {
            mol.labelMesh = new _structures__WEBPACK_IMPORTED_MODULE_4__["d3"].TextMesh();
            mol.labelMesh.init(this.gl);
          }
        }

        this.label3D.updateVerticesBuffer(this.gl, f.mols, this.specs);
      }
    }
  }
};

_.updateScene = function () {
  this.camera.updateProjectionMatrix(this.specs.projectionPerspective_3D);
  this.lighting.lightScene(this.specs.lightDiffuseColor_3D, this.specs.lightSpecularColor_3D, this.specs.lightDirection_3D);
  this.fogging.fogScene(this.specs.fog_color_3D || this.specs.backgroundColor, this.specs.fog_start_3D, this.specs.fog_end_3D, this.specs.fog_density_3D);
  this.repaint();
};

_.mousedown = function (e) {
  this.lastPoint = e.p;
};

_.mouseup = function (e) {
  this.lastPoint = undefined;
};

_.rightmousedown = function (e) {
  this.lastPoint = e.p;
};

_.drag = function (e) {
  if (this.lastPoint) {
    if (_monitor__WEBPACK_IMPORTED_MODULE_3__["default"].ALT) {
      var t = new _structures__WEBPACK_IMPORTED_MODULE_4__["Point"](e.p.x, e.p.y);
      t.sub(this.lastPoint);
      var theta = this.camera.fieldOfView / 360 * m.PI;
      var tanTheta = m.tan(theta);
      var topScreen = this.height / 2 / this.camera.zoom;
      var nearScreen = topScreen / tanTheta;
      var nearRatio = this.camera.focalLength() / nearScreen;
      _lib__WEBPACK_IMPORTED_MODULE_5__["mat4"].translate(this.camera.viewMatrix, [t.x * nearRatio, -t.y * nearRatio, 0]);
    } else {
      var difx = e.p.x - this.lastPoint.x;
      var dify = e.p.y - this.lastPoint.y;
      var rotation = _lib__WEBPACK_IMPORTED_MODULE_5__["mat4"].rotate(_lib__WEBPACK_IMPORTED_MODULE_5__["mat4"].identity([]), difx * m.PI / 180.0, [0, 1, 0]);
      _lib__WEBPACK_IMPORTED_MODULE_5__["mat4"].rotate(rotation, dify * m.PI / 180.0, [1, 0, 0]);
      this.rotationMatrix = _lib__WEBPACK_IMPORTED_MODULE_5__["mat4"].multiply(rotation, this.rotationMatrix);
    }

    this.lastPoint = e.p;
    this.repaint();
  }
};

_.mousewheel = function (e, delta) {
  delta > 0 ? this.camera.zoomIn() : this.camera.zoomOut();
  this.updateScene();
};

_.multitouchmove = function (e, numFingers) {
  if (numFingers === 2) {
    if (this.lastPoint && this.lastPoint.multi) {
      var t = new _structures__WEBPACK_IMPORTED_MODULE_4__["Point"](e.p.x, e.p.y);
      t.sub(this.lastPoint);
      var theta = this.camera.fieldOfView / 360 * m.PI;
      var tanTheta = m.tan(theta);
      var topScreen = this.height / 2 / this.camera.zoom;
      var nearScreen = topScreen / tanTheta;
      var nearRatio = this.camera.focalLength() / nearScreen;
      _lib__WEBPACK_IMPORTED_MODULE_5__["mat4"].translate(this.camera.viewMatrix, [t.x * nearRatio, -t.y * nearRatio, 0]);
      this.lastPoint = e.p;
      this.repaint();
    } else {
      this.lastPoint = e.p;
      this.lastPoint.multi = true;
    }
  }
};

_.gesturechange = function (e) {
  if (e.originalEvent.scale - this.lastPinchScale !== 0) {
    var minFov = 0.1;
    var maxFov = 179.9;
    var dz = -(e.originalEvent.scale / this.lastPinchScale - 1) * 30;

    if (isNaN(dz)) {
      // this seems to happen on Android when using multiple fingers
      return;
    }

    dz > 0 ? this.camera.zoomIn() : this.camera.zoomOut();
    this.updateScene();
    this.lastPinchScale = e.originalEvent.scale;
  }

  this.repaint();
};

_.gestureend = function (e) {
  this.lastPinchScale = 1;
  this.lastGestureRotate = 0;
};

/***/ }),

/***/ "./src/ChemDoodle/_SpectrumCanvas.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/_SpectrumCanvas.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _SpectrumCanvas; });
/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Canvas */ "./src/ChemDoodle/_Canvas.js");

function _SpectrumCanvas(id, width, height) {
  if (id) {
    this.create(id, width, height);
  }
}
;

var _ = _SpectrumCanvas.prototype = new _Canvas__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.spectrum = undefined;
_.emptyMessage = 'No Spectrum Loaded or Recognized';
_.loadMolecule = undefined;
_.getMolecule = undefined;

_.innerRepaint = function (ctx) {
  if (this.spectrum && this.spectrum.data.length > 0) {
    this.spectrum.draw(ctx, this.specs, this.width, this.height);
  } else if (this.emptyMessage) {
    ctx.fillStyle = '#737683';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.font = '18px Helvetica, Verdana, Arial, Sans-serif';
    ctx.fillText(this.emptyMessage, this.width / 2, this.height / 2);
  }
};

_.loadSpectrum = function (spectrum) {
  this.spectrum = spectrum;
  this.repaint();
};

_.getSpectrum = function () {
  return this.spectrum;
};

_.getSpectrumCoordinates = function (x, y) {
  return spectrum.getInternalCoordinates(x, y, this.width, this.height);
};

/***/ }),

/***/ "./src/ChemDoodle/animations.js":
/*!**************************************!*\
  !*** ./src/ChemDoodle/animations.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);


var ext = {}; // Drop in replace functions for setTimeout() & setInterval() that 
// make use of requestAnimationFrame() for performance where available
// http://www.joelambert.co.uk
// Copyright 2011, Joe Lambert.
// Free to use under the MIT license.
// http://www.opensource.org/licenses/mit-license.php
// requestAnimationFrame() shim by Paul Irish
// http://paulirish.com/2011/requestanimationframe-for-smart-animating/

window.requestAnimFrame = function () {
  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (
  /* function */
  callback,
  /* DOMElement */
  element) {
    window.setTimeout(callback, 1000 / 60);
  };
}();
/**
 * Behaves the same as setInterval except uses requestAnimationFrame() where possible for better performance
 * @param {function} fn The callback function
 * @param {int} delay The delay in milliseconds
 */


ext.requestInterval = function (fn, delay) {
  if (!window.requestAnimationFrame && !window.webkitRequestAnimationFrame && !(window.mozRequestAnimationFrame && window.mozCancelRequestAnimationFrame) && // Firefox 5 ships without cancel support
  !window.oRequestAnimationFrame && !window.msRequestAnimationFrame) return window.setInterval(fn, delay);
  var start = new Date().getTime(),
      handle = new Object();

  function loop() {
    var current = new Date().getTime(),
        delta = current - start;

    if (delta >= delay) {
      fn.call();
      start = new Date().getTime();
    }

    handle.value = window.requestAnimFrame(loop);
  }

  ;
  handle.value = window.requestAnimFrame(loop);
  return handle;
};
/**
 * Behaves the same as clearInterval except uses cancelRequestAnimationFrame() where possible for better performance
 * @param {int|object} fn The callback function
 */


ext.clearRequestInterval = function (handle) {
  window.cancelAnimationFrame ? window.cancelAnimationFrame(handle.value) : window.webkitCancelAnimationFrame ? window.webkitCancelAnimationFrame(handle.value) : window.webkitCancelRequestAnimationFrame ? window.webkitCancelRequestAnimationFrame(handle.value) :
  /* Support for legacy API */
  window.mozCancelRequestAnimationFrame ? window.mozCancelRequestAnimationFrame(handle.value) : window.oCancelRequestAnimationFrame ? window.oCancelRequestAnimationFrame(handle.value) : window.msCancelRequestAnimationFrame ? window.msCancelRequestAnimationFrame(handle.value) : clearInterval(handle);
};
/**
 * Behaves the same as setTimeout except uses requestAnimationFrame() where possible for better performance
 * @param {function} fn The callback function
 * @param {int} delay The delay in milliseconds
 */


ext.requestTimeout = function (fn, delay) {
  if (!window.requestAnimationFrame && !window.webkitRequestAnimationFrame && !(window.mozRequestAnimationFrame && window.mozCancelRequestAnimationFrame) && // Firefox 5 ships without cancel support
  !window.oRequestAnimationFrame && !window.msRequestAnimationFrame) return window.setTimeout(fn, delay);
  var start = new Date().getTime(),
      handle = new Object();

  function loop() {
    var current = new Date().getTime(),
        delta = current - start;
    delta >= delay ? fn.call() : handle.value = window.requestAnimFrame(loop);
  }

  ;
  handle.value = window.requestAnimFrame(loop);
  return handle;
};
/**
 * Behaves the same as clearTimeout except uses cancelRequestAnimationFrame() where possible for better performance
 * @param {int|object} fn The callback function
 */


ext.clearRequestTimeout = function (handle) {
  window.cancelAnimationFrame ? window.cancelAnimationFrame(handle.value) : window.webkitCancelAnimationFrame ? window.webkitCancelAnimationFrame(handle.value) : window.webkitCancelRequestAnimationFrame ? window.webkitCancelRequestAnimationFrame(handle.value) :
  /* Support for legacy API */
  window.mozCancelRequestAnimationFrame ? window.mozCancelRequestAnimationFrame(handle.value) : window.oCancelRequestAnimationFrame ? window.oCancelRequestAnimationFrame(handle.value) : window.msCancelRequestAnimationFrame ? window.msCancelRequestAnimationFrame(handle.value) : clearTimeout(handle);
};

/* harmony default export */ __webpack_exports__["default"] = (ext);

/***/ }),

/***/ "./src/ChemDoodle/extensions/index.js":
/*!********************************************!*\
  !*** ./src/ChemDoodle/extensions/index.js ***!
  \********************************************/
/*! exports provided: stringStartsWith, vec3AngleFrom, contextRoundRect, contextEllipse, getFontString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringStartsWith", function() { return stringStartsWith; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "vec3AngleFrom", function() { return vec3AngleFrom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "contextRoundRect", function() { return contextRoundRect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "contextEllipse", function() { return contextEllipse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFontString", function() { return getFontString; });
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib */ "./src/ChemDoodle/lib/index.js");

var m = Math;
function stringStartsWith(str, match) {
  return str.slice(0, match.length) === match;
}
function vec3AngleFrom(v1, v2) {
  var length1 = _lib__WEBPACK_IMPORTED_MODULE_0__["vec3"].length(v1);
  var length2 = _lib__WEBPACK_IMPORTED_MODULE_0__["vec3"].length(v2);
  var dot = _lib__WEBPACK_IMPORTED_MODULE_0__["vec3"].dot(v1, v2);
  var cosine = dot / length1 / length2;
  return m.acos(cosine);
}
function contextRoundRect(ctx, x, y, width, height, radius) {
  ctx.beginPath();
  ctx.moveTo(x + radius, y);
  ctx.lineTo(x + width - radius, y);
  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
  ctx.lineTo(x + width, y + height - radius);
  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
  ctx.lineTo(x + radius, y + height);
  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
  ctx.lineTo(x, y + radius);
  ctx.quadraticCurveTo(x, y, x + radius, y);
  ctx.closePath();
}
function contextEllipse(ctx, x, y, w, h) {
  var kappa = .5522848;
  var ox = w / 2 * kappa;
  var oy = h / 2 * kappa;
  var xe = x + w;
  var ye = y + h;
  var xm = x + w / 2;
  var ym = y + h / 2;
  ctx.beginPath();
  ctx.moveTo(x, ym);
  ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);
  ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);
  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);
  ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);
  ctx.closePath();
}
function getFontString(size, families, bold, italic) {
  var sb = [];

  if (bold) {
    sb.push('bold ');
  }

  if (italic) {
    sb.push('italic ');
  }

  sb.push(size + 'px ');

  for (var i = 0, ii = families.length; i < ii; i++) {
    var use = families[i];

    if (use.indexOf(' ') !== -1) {
      use = '"' + use + '"';
    }

    sb.push((i !== 0 ? ',' : '') + use);
  }

  return sb.join('');
}

/***/ }),

/***/ "./src/ChemDoodle/featureDetection.js":
/*!********************************************!*\
  !*** ./src/ChemDoodle/featureDetection.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib */ "./src/ChemDoodle/lib/index.js");

var featureDetection = {};
/* harmony default export */ __webpack_exports__["default"] = (featureDetection);
var features = featureDetection;

features.supports_canvas = function () {
  return !!document.createElement('canvas').getContext;
};

features.supports_canvas_text = function () {
  if (!features.supports_canvas()) {
    return false;
  }

  var dummy_canvas = document.createElement('canvas');
  var context = dummy_canvas.getContext('2d');
  return typeof context.fillText === 'function';
};

features.supports_webgl = function () {
  var dummy_canvas = document.createElement('canvas');

  try {
    if (dummy_canvas.getContext('webgl')) {
      return true;
    }

    if (dummy_canvas.getContext('experimental-webgl')) {
      return true;
    }
  } catch (b) {}

  return false;
};

features.supports_xhr2 = function () {
  return _lib__WEBPACK_IMPORTED_MODULE_0__["jQuery"].support.cors;
};

features.supports_touch = function () {
  // check the mobile os so we don't interfere with hybrid pcs
  return 'ontouchstart' in window && !!navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|BB10/i);
};

features.supports_gesture = function () {
  return 'ongesturestart' in window;
};

/***/ }),

/***/ "./src/ChemDoodle/iChemLabs.js":
/*!*************************************!*\
  !*** ./src/ChemDoodle/iChemLabs.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _io_JSONInterpreter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./io/JSONInterpreter */ "./src/ChemDoodle/io/JSONInterpreter.js");
/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./structures */ "./src/ChemDoodle/structures/index.js");
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib */ "./src/ChemDoodle/lib/index.js");
/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ChemDoodle */ "./src/ChemDoodle/index.js");




var iChemLabs = {};
/* harmony default export */ __webpack_exports__["default"] = (iChemLabs);
iChemLabs.SERVER_URL = 'https://ichemlabs.cloud.chemdoodle.com/icl_cdc_v070001/WebHQ';
iChemLabs.inRelay = false;
iChemLabs.asynchronous = true;
iChemLabs.INFO = {
  userAgent: navigator.userAgent,
  v_cwc: Object(_ChemDoodle__WEBPACK_IMPORTED_MODULE_3__["getVersion"])(),
  v_jQuery: _lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"].fn.jquery,
  v_jQuery_ui: _lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"].ui ? _lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"].ui.version : 'N/A'
};
var JSON_INTERPRETER = new _io_JSONInterpreter__WEBPACK_IMPORTED_MODULE_0__["default"]();
var queue = new _structures__WEBPACK_IMPORTED_MODULE_1__["Queue"]();

iChemLabs._contactServer = function (call, content, options, callback, errorback) {
  if (this.inRelay) {
    queue.enqueue({
      'call': call,
      'content': content,
      'options': options,
      'callback': callback,
      'errorback': errorback
    });
  } else {
    iChemLabs.inRelay = true;
    _lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"].ajax({
      dataType: 'text',
      type: 'POST',
      data: JSON.stringify({
        'call': call,
        'content': content,
        'options': options,
        'info': iChemLabs.INFO
      }),
      url: this.SERVER_URL,
      success: function success(data) {
        var o = JSON.parse(data);

        if (o.message) {
          alert(o.message);
        }

        iChemLabs.inRelay = false;

        if (callback && o.content && !o.stop) {
          callback(o.content);
        }

        if (o.stop && errorback) {
          errorback();
        }

        if (!queue.isEmpty()) {
          var next = queue.dequeue();

          iChemLabs._contactServer(next.call, next.content, next.options, next.callback, next.errorback);
        }
      },
      error: function error(xhr, status, _error) {
        if (call != 'checkForUpdates') {
          alert('Call failed. Please try again. If you continue to see this message, please contact iChemLabs customer support.');
        }

        iChemLabs.inRelay = false;

        if (errorback) {
          errorback();
        }

        if (!queue.isEmpty()) {
          var next = queue.dequeue();

          iChemLabs._contactServer(next.call, next.content, next.options, next.callback, next.errorback);
        }
      },
      xhrFields: {
        withCredentials: true
      },
      async: iChemLabs.asynchronous
    });
  }
}; // undocumented, this call is for clients that have licensed cloud for their
// own servers


iChemLabs.authenticate = function (credential, options, callback, errorback) {
  this._contactServer('authenticate', {
    'credential': credential
  }, options, function (content) {
    callback(content);
  }, errorback);
};

iChemLabs.calculate = function (mol, options, callback, errorback) {
  this._contactServer('calculate', {
    'mol': JSON_INTERPRETER.molTo(mol)
  }, options, function (content) {
    callback(content);
  }, errorback);
};

iChemLabs.createLewisDotStructure = function (mol, options, callback, errorback) {
  this._contactServer('createLewisDot', {
    'mol': JSON_INTERPRETER.molTo(mol)
  }, options, function (content) {
    callback(JSON_INTERPRETER.molFrom(content.mol));
  }, errorback);
};

iChemLabs.generateImage = function (mol, options, callback, errorback) {
  this._contactServer('generateImage', {
    'mol': JSON_INTERPRETER.molTo(mol)
  }, options, function (content) {
    callback(content.link);
  }, errorback);
};

iChemLabs.generateIUPACName = function (mol, options, callback, errorback) {
  this._contactServer('generateIUPACName', {
    'mol': JSON_INTERPRETER.molTo(mol)
  }, options, function (content) {
    callback(content.iupac);
  }, errorback);
};

iChemLabs.getAd = function (callback, errorback) {
  this._contactServer('getAd', {}, {}, function (content) {
    callback(content.image_url, content.target_url);
  }, errorback);
};

iChemLabs.getMoleculeFromContent = function (input, options, callback, errorback) {
  this._contactServer('getMoleculeFromContent', {
    'content': input
  }, options, function (content) {
    var z = false;

    for (var i = 0, ii = content.mol.a.length; i < ii; i++) {
      if (content.mol.a[i].z !== 0) {
        z = true;
        break;
      }
    }

    if (z) {
      for (var i = 0, ii = content.mol.a.length; i < ii; i++) {
        content.mol.a[i].x /= 20;
        content.mol.a[i].y /= 20;
        content.mol.a[i].z /= 20;
      }
    }

    callback(JSON_INTERPRETER.molFrom(content.mol));
  }, errorback);
};

iChemLabs.getMoleculeFromDatabase = function (query, options, callback, errorback) {
  this._contactServer('getMoleculeFromDatabase', {
    'query': query
  }, options, function (content) {
    if (options.dimension === 3) {
      for (var i = 0, ii = content.mol.a.length; i < ii; i++) {
        content.mol.a[i].x /= 20;
        content.mol.a[i].y /= -20;
        content.mol.a[i].z /= 20;
      }
    }

    callback(JSON_INTERPRETER.molFrom(content.mol));
  }, errorback);
};

iChemLabs.getOptimizedPDBStructure = function (id, options, callback, errorback) {
  this._contactServer('getOptimizedPDBStructure', {
    'id': id
  }, options, function (content) {
    var mol;

    if (content.mol) {
      mol = JSON_INTERPRETER.molFrom(content.mol);
    } else {
      mol = new _structures__WEBPACK_IMPORTED_MODULE_1__["Molecule"]();
    }

    mol.chains = JSON_INTERPRETER.chainsFrom(content.ribbons);
    mol.fromJSON = true;
    callback(mol);
  }, errorback);
};

iChemLabs.getZeoliteFromIZA = function (query, options, callback, errorback) {
  this._contactServer('getZeoliteFromIZA', {
    'query': query
  }, options, function (content) {
    callback(ChemDoodle.readCIF(content.cif, options.xSuper, options.ySuper, options.zSuper));
  }, errorback);
};

iChemLabs.isGraphIsomorphism = function (arrow, target, options, callback, errorback) {
  this._contactServer('isGraphIsomorphism', {
    'arrow': JSON_INTERPRETER.molTo(arrow),
    'target': JSON_INTERPRETER.molTo(target)
  }, options, function (content) {
    callback(content.value);
  }, errorback);
};

iChemLabs.isSubgraphIsomorphism = function (arrow, target, options, callback, errorback) {
  this._contactServer('isSubgraphIsomorphism', {
    'arrow': JSON_INTERPRETER.molTo(arrow),
    'target': JSON_INTERPRETER.molTo(target)
  }, options, function (content) {
    callback(content.value);
  }, errorback);
};

iChemLabs.isSupergraphIsomorphism = function (arrow, target, options, callback, errorback) {
  this._contactServer('isSupergraphIsomorphism', {
    'arrow': JSON_INTERPRETER.molTo(arrow),
    'target': JSON_INTERPRETER.molTo(target)
  }, options, function (content) {
    callback(content.value);
  }, errorback);
};

iChemLabs.getSimilarityMeasure = function (first, second, options, callback, errorback) {
  this._contactServer('getSimilarityMeasure', {
    'first': JSON_INTERPRETER.molTo(first),
    'second': JSON_INTERPRETER.molTo(second)
  }, options, function (content) {
    callback(content.value);
  }, errorback);
};

iChemLabs.kekulize = function (mol, options, callback, errorback) {
  this._contactServer('kekulize', {
    'mol': JSON_INTERPRETER.molTo(mol)
  }, options, function (content) {
    callback(JSON_INTERPRETER.molFrom(content.mol));
  }, errorback);
};

iChemLabs.mechanismMatch = function (arrow, targets, options, callback, errorback) {
  this._contactServer('matchMechanism', {
    'arrow': arrow,
    'targets': targets
  }, options, function (content) {
    callback(content);
  }, errorback);
};

iChemLabs.optimize = function (mol, options, callback, errorback) {
  this._contactServer('optimize', {
    'mol': JSON_INTERPRETER.molTo(mol)
  }, options, function (content) {
    var optimized = JSON_INTERPRETER.molFrom(content.mol);

    if (options.dimension === 2) {
      for (var i = 0, ii = optimized.atoms.length; i < ii; i++) {
        mol.atoms[i].x = optimized.atoms[i].x;
        mol.atoms[i].y = optimized.atoms[i].y;
      }

      callback();
    } else if (options.dimension === 3) {
      for (var i = 0, ii = optimized.atoms.length; i < ii; i++) {
        optimized.atoms[i].x /= 20;
        optimized.atoms[i].y /= -20;
        optimized.atoms[i].z /= 20;
      }

      callback(optimized);
    }
  }, errorback);
};

iChemLabs.readIUPACName = function (iupac, options, callback, errorback) {
  this._contactServer('readIUPACName', {
    'iupac': iupac
  }, options, function (content) {
    callback(JSON_INTERPRETER.molFrom(content.mol));
  }, errorback);
};

iChemLabs.readSMILES = function (smiles, options, callback, errorback) {
  this._contactServer('readSMILES', {
    'smiles': smiles
  }, options, function (content) {
    callback(JSON_INTERPRETER.molFrom(content.mol));
  }, errorback);
};

iChemLabs.saveFile = function (mol, options, callback, errorback) {
  this._contactServer('saveFile', {
    'mol': JSON_INTERPRETER.molTo(mol)
  }, options, function (content) {
    callback(content.link);
  }, errorback);
};

iChemLabs.simulate13CNMR = function (mol, options, callback, errorback) {
  options.nucleus = 'C';
  options.isotope = 13;

  this._contactServer('simulateNMR', {
    'mol': JSON_INTERPRETER.molTo(mol)
  }, options, function (content) {
    callback(c.readJCAMP(content.jcamp));
  }, errorback);
};

iChemLabs.simulate1HNMR = function (mol, options, callback, errorback) {
  options.nucleus = 'H';
  options.isotope = 1;

  this._contactServer('simulateNMR', {
    'mol': JSON_INTERPRETER.molTo(mol)
  }, options, function (content) {
    callback(c.readJCAMP(content.jcamp));
  }, errorback);
};

iChemLabs.simulateMassParentPeak = function (mol, options, callback, errorback) {
  this._contactServer('simulateMassParentPeak', {
    'mol': JSON_INTERPRETER.molTo(mol)
  }, options, function (content) {
    callback(c.readJCAMP(content.jcamp));
  }, errorback);
};

iChemLabs.writeSMILES = function (mol, options, callback, errorback) {
  this._contactServer('writeSMILES', {
    'mol': JSON_INTERPRETER.molTo(mol)
  }, options, function (content) {
    callback(content.smiles);
  }, errorback);
};

iChemLabs.version = function (options, callback, errorback) {
  this._contactServer('version', {}, options, function (content) {
    callback(content.value);
  }, errorback);
};

iChemLabs.checkForUpdates = function (options) {
  this._contactServer('checkForUpdates', {
    'value': location.href
  }, options, function (content) {}, function () {});
};

/***/ }),

/***/ "./src/ChemDoodle/index.js":
/*!*********************************!*\
  !*** ./src/ChemDoodle/index.js ***!
  \*********************************/
/*! exports provided: _Canvas, FileCanvas, HyperlinkCanvas, PeriodicTableCanvas, MolGrabberCanvas, SlideshowCanvas, TransformCanvas, ViewerCanvas, _SpectrumCanvas, ObserverCanvas, OverlayCanvas, PerspectiveCanvas, SeekerCanvas, _AnimatorCanvas, RotatorCanvas, _Canvas3D, MolGrabberCanvas3D, RotatorCanvas3D, TransformCanvas3D, ViewerCanvas3D, MovieCanvas3D, getVersion, SYMBOLS, ELEMENT, RESIDUE, default_backgroundColor, default_scale, default_rotateAngle, default_bondLength_2D, default_angstromsPerBondLength, default_lightDirection_3D, default_lightDiffuseColor_3D, default_lightSpecularColor_3D, default_projectionPerspective_3D, default_projectionPerspectiveVerticalFieldOfView_3D, default_projectionOrthoWidth_3D, default_projectionWidthHeightRatio_3D, default_projectionFrontCulling_3D, default_projectionBackCulling_3D, default_cullBackFace_3D, default_fog_mode_3D, default_fog_color_3D, default_fog_start_3D, default_fog_end_3D, default_fog_density_3D, default_shadow_3D, default_shadow_intensity_3D, default_flat_color_3D, default_antialias_3D, default_gammaCorrection_3D, default_colorHover, default_colorSelect, default_colorError, default_colorPreview, default_ssao_3D, default_ssao_kernel_radius, default_ssao_kernel_samples, default_ssao_power, default_outline_3D, default_outline_thickness, default_outline_normal_threshold, default_outline_depth_threshold, default_fxaa_edgeThreshold, default_fxaa_edgeThresholdMin, default_fxaa_searchSteps, default_fxaa_searchThreshold, default_fxaa_subpixCap, default_fxaa_subpixTrim, default_atoms_display, default_atoms_color, default_atoms_font_size_2D, default_atoms_font_families_2D, default_atoms_font_bold_2D, default_atoms_font_italic_2D, default_atoms_circles_2D, default_atoms_circleDiameter_2D, default_atoms_circleBorderWidth_2D, default_atoms_lonePairDistance_2D, default_atoms_lonePairSpread_2D, default_atoms_lonePairDiameter_2D, default_atoms_useJMOLColors, default_atoms_usePYMOLColors, default_atoms_HBlack_2D, default_atoms_implicitHydrogens_2D, default_atoms_displayTerminalCarbonLabels_2D, default_atoms_showHiddenCarbons_2D, default_atoms_showAttributedCarbons_2D, default_atoms_displayAllCarbonLabels_2D, default_atoms_resolution_3D, default_atoms_sphereDiameter_3D, default_atoms_useVDWDiameters_3D, default_atoms_vdwMultiplier_3D, default_atoms_materialAmbientColor_3D, default_atoms_materialSpecularColor_3D, default_atoms_materialShininess_3D, default_atoms_nonBondedAsStars_3D, default_atoms_displayLabels_3D, default_bonds_display, default_bonds_color, default_bonds_width_2D, default_bonds_useAbsoluteSaturationWidths_2D, default_bonds_saturationWidth_2D, default_bonds_saturationWidthAbs_2D, default_bonds_ends_2D, default_bonds_splitColor, default_bonds_colorGradient, default_bonds_saturationAngle_2D, default_bonds_symmetrical_2D, default_bonds_clearOverlaps_2D, default_bonds_overlapClearWidth_2D, default_bonds_atomLabelBuffer_2D, default_bonds_wedgeThickness_2D, default_bonds_wavyLength_2D, default_bonds_hashWidth_2D, default_bonds_hashSpacing_2D, default_bonds_dotSize_2D, default_bonds_lewisStyle_2D, default_bonds_showBondOrders_3D, default_bonds_resolution_3D, default_bonds_renderAsLines_3D, default_bonds_cylinderDiameter_3D, default_bonds_pillLatitudeResolution_3D, default_bonds_pillLongitudeResolution_3D, default_bonds_pillHeight_3D, default_bonds_pillSpacing_3D, default_bonds_pillDiameter_3D, default_bonds_materialAmbientColor_3D, default_bonds_materialSpecularColor_3D, default_bonds_materialShininess_3D, default_proteins_displayRibbon, default_proteins_displayBackbone, default_proteins_backboneThickness, default_proteins_backboneColor, default_proteins_ribbonCartoonize, default_proteins_displayPipePlank, default_proteins_residueColor, default_proteins_primaryColor, default_proteins_secondaryColor, default_proteins_ribbonCartoonHelixPrimaryColor, default_proteins_ribbonCartoonHelixSecondaryColor, default_proteins_ribbonCartoonSheetColor, default_proteins_tubeColor, default_proteins_tubeResolution_3D, default_proteins_ribbonThickness, default_proteins_tubeThickness, default_proteins_plankSheetWidth, default_proteins_cylinderHelixDiameter, default_proteins_verticalResolution, default_proteins_horizontalResolution, default_proteins_materialAmbientColor_3D, default_proteins_materialSpecularColor_3D, default_proteins_materialShininess_3D, default_nucleics_display, default_nucleics_tubeColor, default_nucleics_baseColor, default_nucleics_residueColor, default_nucleics_tubeThickness, default_nucleics_tubeResolution_3D, default_nucleics_verticalResolution, default_nucleics_materialAmbientColor_3D, default_nucleics_materialSpecularColor_3D, default_nucleics_materialShininess_3D, default_macro_displayAtoms, default_macro_displayBonds, default_macro_atomToLigandDistance, default_macro_showWater, default_macro_colorByChain, default_macro_rainbowColors, default_surfaces_display, default_surfaces_alpha, default_surfaces_style, default_surfaces_color, default_surfaces_materialAmbientColor_3D, default_surfaces_materialSpecularColor_3D, default_surfaces_materialShininess_3D, default_plots_color, default_plots_width, default_plots_showIntegration, default_plots_integrationColor, default_plots_integrationLineWidth, default_plots_showGrid, default_plots_gridColor, default_plots_gridLineWidth, default_plots_showYAxis, default_plots_flipXAxis, default_text_font_size, default_text_font_families, default_text_font_bold, default_text_font_italic, default_text_font_stroke_3D, default_text_color, default_shapes_color, default_shapes_lineWidth, default_shapes_pointSize, default_shapes_arrowLength_2D, default_compass_display, default_compass_axisXColor_3D, default_compass_axisYColor_3D, default_compass_axisZColor_3D, default_compass_size_3D, default_compass_resolution_3D, default_compass_displayText_3D, default_compass_type_3D, default_measurement_update_3D, default_measurement_angleBands_3D, default_measurement_displayText_3D, readJSON, writeJSON, readCIF, readCML, writeCML, readMOL, writeMOL */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getVersion", function() { return getVersion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SYMBOLS", function() { return SYMBOLS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ELEMENT", function() { return ELEMENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RESIDUE", function() { return RESIDUE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_backgroundColor", function() { return default_backgroundColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_scale", function() { return default_scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_rotateAngle", function() { return default_rotateAngle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bondLength_2D", function() { return default_bondLength_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_angstromsPerBondLength", function() { return default_angstromsPerBondLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_lightDirection_3D", function() { return default_lightDirection_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_lightDiffuseColor_3D", function() { return default_lightDiffuseColor_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_lightSpecularColor_3D", function() { return default_lightSpecularColor_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_projectionPerspective_3D", function() { return default_projectionPerspective_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_projectionPerspectiveVerticalFieldOfView_3D", function() { return default_projectionPerspectiveVerticalFieldOfView_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_projectionOrthoWidth_3D", function() { return default_projectionOrthoWidth_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_projectionWidthHeightRatio_3D", function() { return default_projectionWidthHeightRatio_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_projectionFrontCulling_3D", function() { return default_projectionFrontCulling_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_projectionBackCulling_3D", function() { return default_projectionBackCulling_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_cullBackFace_3D", function() { return default_cullBackFace_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_fog_mode_3D", function() { return default_fog_mode_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_fog_color_3D", function() { return default_fog_color_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_fog_start_3D", function() { return default_fog_start_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_fog_end_3D", function() { return default_fog_end_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_fog_density_3D", function() { return default_fog_density_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_shadow_3D", function() { return default_shadow_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_shadow_intensity_3D", function() { return default_shadow_intensity_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_flat_color_3D", function() { return default_flat_color_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_antialias_3D", function() { return default_antialias_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_gammaCorrection_3D", function() { return default_gammaCorrection_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_colorHover", function() { return default_colorHover; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_colorSelect", function() { return default_colorSelect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_colorError", function() { return default_colorError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_colorPreview", function() { return default_colorPreview; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_ssao_3D", function() { return default_ssao_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_ssao_kernel_radius", function() { return default_ssao_kernel_radius; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_ssao_kernel_samples", function() { return default_ssao_kernel_samples; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_ssao_power", function() { return default_ssao_power; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_outline_3D", function() { return default_outline_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_outline_thickness", function() { return default_outline_thickness; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_outline_normal_threshold", function() { return default_outline_normal_threshold; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_outline_depth_threshold", function() { return default_outline_depth_threshold; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_fxaa_edgeThreshold", function() { return default_fxaa_edgeThreshold; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_fxaa_edgeThresholdMin", function() { return default_fxaa_edgeThresholdMin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_fxaa_searchSteps", function() { return default_fxaa_searchSteps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_fxaa_searchThreshold", function() { return default_fxaa_searchThreshold; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_fxaa_subpixCap", function() { return default_fxaa_subpixCap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_fxaa_subpixTrim", function() { return default_fxaa_subpixTrim; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_display", function() { return default_atoms_display; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_color", function() { return default_atoms_color; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_font_size_2D", function() { return default_atoms_font_size_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_font_families_2D", function() { return default_atoms_font_families_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_font_bold_2D", function() { return default_atoms_font_bold_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_font_italic_2D", function() { return default_atoms_font_italic_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_circles_2D", function() { return default_atoms_circles_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_circleDiameter_2D", function() { return default_atoms_circleDiameter_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_circleBorderWidth_2D", function() { return default_atoms_circleBorderWidth_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_lonePairDistance_2D", function() { return default_atoms_lonePairDistance_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_lonePairSpread_2D", function() { return default_atoms_lonePairSpread_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_lonePairDiameter_2D", function() { return default_atoms_lonePairDiameter_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_useJMOLColors", function() { return default_atoms_useJMOLColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_usePYMOLColors", function() { return default_atoms_usePYMOLColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_HBlack_2D", function() { return default_atoms_HBlack_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_implicitHydrogens_2D", function() { return default_atoms_implicitHydrogens_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_displayTerminalCarbonLabels_2D", function() { return default_atoms_displayTerminalCarbonLabels_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_showHiddenCarbons_2D", function() { return default_atoms_showHiddenCarbons_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_showAttributedCarbons_2D", function() { return default_atoms_showAttributedCarbons_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_displayAllCarbonLabels_2D", function() { return default_atoms_displayAllCarbonLabels_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_resolution_3D", function() { return default_atoms_resolution_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_sphereDiameter_3D", function() { return default_atoms_sphereDiameter_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_useVDWDiameters_3D", function() { return default_atoms_useVDWDiameters_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_vdwMultiplier_3D", function() { return default_atoms_vdwMultiplier_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_materialAmbientColor_3D", function() { return default_atoms_materialAmbientColor_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_materialSpecularColor_3D", function() { return default_atoms_materialSpecularColor_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_materialShininess_3D", function() { return default_atoms_materialShininess_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_nonBondedAsStars_3D", function() { return default_atoms_nonBondedAsStars_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_atoms_displayLabels_3D", function() { return default_atoms_displayLabels_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_display", function() { return default_bonds_display; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_color", function() { return default_bonds_color; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_width_2D", function() { return default_bonds_width_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_useAbsoluteSaturationWidths_2D", function() { return default_bonds_useAbsoluteSaturationWidths_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_saturationWidth_2D", function() { return default_bonds_saturationWidth_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_saturationWidthAbs_2D", function() { return default_bonds_saturationWidthAbs_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_ends_2D", function() { return default_bonds_ends_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_splitColor", function() { return default_bonds_splitColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_colorGradient", function() { return default_bonds_colorGradient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_saturationAngle_2D", function() { return default_bonds_saturationAngle_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_symmetrical_2D", function() { return default_bonds_symmetrical_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_clearOverlaps_2D", function() { return default_bonds_clearOverlaps_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_overlapClearWidth_2D", function() { return default_bonds_overlapClearWidth_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_atomLabelBuffer_2D", function() { return default_bonds_atomLabelBuffer_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_wedgeThickness_2D", function() { return default_bonds_wedgeThickness_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_wavyLength_2D", function() { return default_bonds_wavyLength_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_hashWidth_2D", function() { return default_bonds_hashWidth_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_hashSpacing_2D", function() { return default_bonds_hashSpacing_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_dotSize_2D", function() { return default_bonds_dotSize_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_lewisStyle_2D", function() { return default_bonds_lewisStyle_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_showBondOrders_3D", function() { return default_bonds_showBondOrders_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_resolution_3D", function() { return default_bonds_resolution_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_renderAsLines_3D", function() { return default_bonds_renderAsLines_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_cylinderDiameter_3D", function() { return default_bonds_cylinderDiameter_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_pillLatitudeResolution_3D", function() { return default_bonds_pillLatitudeResolution_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_pillLongitudeResolution_3D", function() { return default_bonds_pillLongitudeResolution_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_pillHeight_3D", function() { return default_bonds_pillHeight_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_pillSpacing_3D", function() { return default_bonds_pillSpacing_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_pillDiameter_3D", function() { return default_bonds_pillDiameter_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_materialAmbientColor_3D", function() { return default_bonds_materialAmbientColor_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_materialSpecularColor_3D", function() { return default_bonds_materialSpecularColor_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_bonds_materialShininess_3D", function() { return default_bonds_materialShininess_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_displayRibbon", function() { return default_proteins_displayRibbon; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_displayBackbone", function() { return default_proteins_displayBackbone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_backboneThickness", function() { return default_proteins_backboneThickness; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_backboneColor", function() { return default_proteins_backboneColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_ribbonCartoonize", function() { return default_proteins_ribbonCartoonize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_displayPipePlank", function() { return default_proteins_displayPipePlank; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_residueColor", function() { return default_proteins_residueColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_primaryColor", function() { return default_proteins_primaryColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_secondaryColor", function() { return default_proteins_secondaryColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_ribbonCartoonHelixPrimaryColor", function() { return default_proteins_ribbonCartoonHelixPrimaryColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_ribbonCartoonHelixSecondaryColor", function() { return default_proteins_ribbonCartoonHelixSecondaryColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_ribbonCartoonSheetColor", function() { return default_proteins_ribbonCartoonSheetColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_tubeColor", function() { return default_proteins_tubeColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_tubeResolution_3D", function() { return default_proteins_tubeResolution_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_ribbonThickness", function() { return default_proteins_ribbonThickness; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_tubeThickness", function() { return default_proteins_tubeThickness; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_plankSheetWidth", function() { return default_proteins_plankSheetWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_cylinderHelixDiameter", function() { return default_proteins_cylinderHelixDiameter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_verticalResolution", function() { return default_proteins_verticalResolution; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_horizontalResolution", function() { return default_proteins_horizontalResolution; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_materialAmbientColor_3D", function() { return default_proteins_materialAmbientColor_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_materialSpecularColor_3D", function() { return default_proteins_materialSpecularColor_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_proteins_materialShininess_3D", function() { return default_proteins_materialShininess_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_nucleics_display", function() { return default_nucleics_display; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_nucleics_tubeColor", function() { return default_nucleics_tubeColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_nucleics_baseColor", function() { return default_nucleics_baseColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_nucleics_residueColor", function() { return default_nucleics_residueColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_nucleics_tubeThickness", function() { return default_nucleics_tubeThickness; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_nucleics_tubeResolution_3D", function() { return default_nucleics_tubeResolution_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_nucleics_verticalResolution", function() { return default_nucleics_verticalResolution; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_nucleics_materialAmbientColor_3D", function() { return default_nucleics_materialAmbientColor_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_nucleics_materialSpecularColor_3D", function() { return default_nucleics_materialSpecularColor_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_nucleics_materialShininess_3D", function() { return default_nucleics_materialShininess_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_macro_displayAtoms", function() { return default_macro_displayAtoms; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_macro_displayBonds", function() { return default_macro_displayBonds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_macro_atomToLigandDistance", function() { return default_macro_atomToLigandDistance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_macro_showWater", function() { return default_macro_showWater; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_macro_colorByChain", function() { return default_macro_colorByChain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_macro_rainbowColors", function() { return default_macro_rainbowColors; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_surfaces_display", function() { return default_surfaces_display; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_surfaces_alpha", function() { return default_surfaces_alpha; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_surfaces_style", function() { return default_surfaces_style; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_surfaces_color", function() { return default_surfaces_color; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_surfaces_materialAmbientColor_3D", function() { return default_surfaces_materialAmbientColor_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_surfaces_materialSpecularColor_3D", function() { return default_surfaces_materialSpecularColor_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_surfaces_materialShininess_3D", function() { return default_surfaces_materialShininess_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_plots_color", function() { return default_plots_color; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_plots_width", function() { return default_plots_width; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_plots_showIntegration", function() { return default_plots_showIntegration; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_plots_integrationColor", function() { return default_plots_integrationColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_plots_integrationLineWidth", function() { return default_plots_integrationLineWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_plots_showGrid", function() { return default_plots_showGrid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_plots_gridColor", function() { return default_plots_gridColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_plots_gridLineWidth", function() { return default_plots_gridLineWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_plots_showYAxis", function() { return default_plots_showYAxis; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_plots_flipXAxis", function() { return default_plots_flipXAxis; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_text_font_size", function() { return default_text_font_size; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_text_font_families", function() { return default_text_font_families; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_text_font_bold", function() { return default_text_font_bold; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_text_font_italic", function() { return default_text_font_italic; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_text_font_stroke_3D", function() { return default_text_font_stroke_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_text_color", function() { return default_text_color; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_shapes_color", function() { return default_shapes_color; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_shapes_lineWidth", function() { return default_shapes_lineWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_shapes_pointSize", function() { return default_shapes_pointSize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_shapes_arrowLength_2D", function() { return default_shapes_arrowLength_2D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_compass_display", function() { return default_compass_display; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_compass_axisXColor_3D", function() { return default_compass_axisXColor_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_compass_axisYColor_3D", function() { return default_compass_axisYColor_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_compass_axisZColor_3D", function() { return default_compass_axisZColor_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_compass_size_3D", function() { return default_compass_size_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_compass_resolution_3D", function() { return default_compass_resolution_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_compass_displayText_3D", function() { return default_compass_displayText_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_compass_type_3D", function() { return default_compass_type_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_measurement_update_3D", function() { return default_measurement_update_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_measurement_angleBands_3D", function() { return default_measurement_angleBands_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default_measurement_displayText_3D", function() { return default_measurement_displayText_3D; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readJSON", function() { return readJSON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "writeJSON", function() { return writeJSON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readCIF", function() { return readCIF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readCML", function() { return readCML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "writeCML", function() { return writeCML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readMOL", function() { return readMOL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "writeMOL", function() { return writeMOL; });
/* harmony import */ var _io_CIFInterpreter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./io/CIFInterpreter */ "./src/ChemDoodle/io/CIFInterpreter.js");
/* harmony import */ var _io_JSONInterpreter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./io/JSONInterpreter */ "./src/ChemDoodle/io/JSONInterpreter.js");
/* harmony import */ var _io_CMLInterpreter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./io/CMLInterpreter */ "./src/ChemDoodle/io/CMLInterpreter.js");
/* harmony import */ var _io_MOLInterpreter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./io/MOLInterpreter */ "./src/ChemDoodle/io/MOLInterpreter.js");
/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./_Canvas */ "./src/ChemDoodle/_Canvas.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_Canvas", function() { return _Canvas__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _FileCanvas__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./FileCanvas */ "./src/ChemDoodle/FileCanvas.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FileCanvas", function() { return _FileCanvas__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _HyperlinkCanvas__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./HyperlinkCanvas */ "./src/ChemDoodle/HyperlinkCanvas.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HyperlinkCanvas", function() { return _HyperlinkCanvas__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _PeriodicTableCanvas__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./PeriodicTableCanvas */ "./src/ChemDoodle/PeriodicTableCanvas.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PeriodicTableCanvas", function() { return _PeriodicTableCanvas__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _MolGrabberCanvas__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./MolGrabberCanvas */ "./src/ChemDoodle/MolGrabberCanvas.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MolGrabberCanvas", function() { return _MolGrabberCanvas__WEBPACK_IMPORTED_MODULE_8__["default"]; });

/* harmony import */ var _SlideshowCanvas__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./SlideshowCanvas */ "./src/ChemDoodle/SlideshowCanvas.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SlideshowCanvas", function() { return _SlideshowCanvas__WEBPACK_IMPORTED_MODULE_9__["default"]; });

/* harmony import */ var _TransformCanvas__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./TransformCanvas */ "./src/ChemDoodle/TransformCanvas.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransformCanvas", function() { return _TransformCanvas__WEBPACK_IMPORTED_MODULE_10__["default"]; });

/* harmony import */ var _ViewerCanvas__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ViewerCanvas */ "./src/ChemDoodle/ViewerCanvas.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ViewerCanvas", function() { return _ViewerCanvas__WEBPACK_IMPORTED_MODULE_11__["default"]; });

/* harmony import */ var _SpectrumCanvas__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./_SpectrumCanvas */ "./src/ChemDoodle/_SpectrumCanvas.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_SpectrumCanvas", function() { return _SpectrumCanvas__WEBPACK_IMPORTED_MODULE_12__["default"]; });

/* harmony import */ var _ObserverCanvas__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ObserverCanvas */ "./src/ChemDoodle/ObserverCanvas.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ObserverCanvas", function() { return _ObserverCanvas__WEBPACK_IMPORTED_MODULE_13__["default"]; });

/* harmony import */ var _OverlayCanvas__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./OverlayCanvas */ "./src/ChemDoodle/OverlayCanvas.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OverlayCanvas", function() { return _OverlayCanvas__WEBPACK_IMPORTED_MODULE_14__["default"]; });

/* harmony import */ var _PerspectiveCanvas__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./PerspectiveCanvas */ "./src/ChemDoodle/PerspectiveCanvas.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PerspectiveCanvas", function() { return _PerspectiveCanvas__WEBPACK_IMPORTED_MODULE_15__["default"]; });

/* harmony import */ var _SeekerCanvas__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./SeekerCanvas */ "./src/ChemDoodle/SeekerCanvas.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SeekerCanvas", function() { return _SeekerCanvas__WEBPACK_IMPORTED_MODULE_16__["default"]; });

/* harmony import */ var _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./_AnimatorCanvas */ "./src/ChemDoodle/_AnimatorCanvas.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_AnimatorCanvas", function() { return _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_17__["default"]; });

/* harmony import */ var _RotatorCanvas__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./RotatorCanvas */ "./src/ChemDoodle/RotatorCanvas.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RotatorCanvas", function() { return _RotatorCanvas__WEBPACK_IMPORTED_MODULE_18__["default"]; });

/* harmony import */ var _Canvas3D__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./_Canvas3D */ "./src/ChemDoodle/_Canvas3D.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_Canvas3D", function() { return _Canvas3D__WEBPACK_IMPORTED_MODULE_19__["default"]; });

/* harmony import */ var _MolGrabberCanvas3D__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./MolGrabberCanvas3D */ "./src/ChemDoodle/MolGrabberCanvas3D.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MolGrabberCanvas3D", function() { return _MolGrabberCanvas3D__WEBPACK_IMPORTED_MODULE_20__["default"]; });

/* harmony import */ var _RotatorCanvas3D__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./RotatorCanvas3D */ "./src/ChemDoodle/RotatorCanvas3D.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RotatorCanvas3D", function() { return _RotatorCanvas3D__WEBPACK_IMPORTED_MODULE_21__["default"]; });

/* harmony import */ var _TransformCanvas3D__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./TransformCanvas3D */ "./src/ChemDoodle/TransformCanvas3D.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransformCanvas3D", function() { return _TransformCanvas3D__WEBPACK_IMPORTED_MODULE_22__["default"]; });

/* harmony import */ var _ViewerCanvas3D__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./ViewerCanvas3D */ "./src/ChemDoodle/ViewerCanvas3D.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ViewerCanvas3D", function() { return _ViewerCanvas3D__WEBPACK_IMPORTED_MODULE_23__["default"]; });

/* harmony import */ var _MovieCanvas3D__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./MovieCanvas3D */ "./src/ChemDoodle/MovieCanvas3D.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MovieCanvas3D", function() { return _MovieCanvas3D__WEBPACK_IMPORTED_MODULE_24__["default"]; });

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }


























var m = Math;
var VERSION = '8.0.0';
function getVersion() {
  return VERSION;
} // all symbols

var SYMBOLS = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og'];
var ELEMENT = function (SYMBOLS, undefined) {
  'use strict';

  var E = [];

  function Element(symbol, name, atomicNumber, addH, color, covalentRadius, vdWRadius, valency, mass) {
    this.symbol = symbol;
    this.name = name;
    this.atomicNumber = atomicNumber;
    this.addH = addH;
    this.jmolColor = this.pymolColor = color;
    this.covalentRadius = covalentRadius;
    this.vdWRadius = vdWRadius;
    this.valency = valency;
    this.mass = mass;
  }

  E.H = new Element('H', 'Hydrogen', 1, false, '#FFFFFF', 0.31, 1.1, 1, 1);
  E.He = new Element('He', 'Helium', 2, false, '#D9FFFF', 0.28, 1.4, 0, 4);
  E.Li = new Element('Li', 'Lithium', 3, false, '#CC80FF', 1.28, 1.82, 1, 7);
  E.Be = new Element('Be', 'Beryllium', 4, false, '#C2FF00', 0.96, 1.53, 2, 9);
  E.B = new Element('B', 'Boron', 5, true, '#FFB5B5', 0.84, 1.92, 3, 11);
  E.C = new Element('C', 'Carbon', 6, true, '#909090', 0.76, 1.7, 4, 12);
  E.N = new Element('N', 'Nitrogen', 7, true, '#3050F8', 0.71, 1.55, 3, 14);
  E.O = new Element('O', 'Oxygen', 8, true, '#FF0D0D', 0.66, 1.52, 2, 16);
  E.F = new Element('F', 'Fluorine', 9, true, '#90E050', 0.57, 1.47, 1, 19);
  E.Ne = new Element('Ne', 'Neon', 10, false, '#B3E3F5', 0.58, 1.54, 0, 20);
  E.Na = new Element('Na', 'Sodium', 11, false, '#AB5CF2', 1.66, 2.27, 1, 23);
  E.Mg = new Element('Mg', 'Magnesium', 12, false, '#8AFF00', 1.41, 1.73, 0, 24);
  E.Al = new Element('Al', 'Aluminum', 13, false, '#BFA6A6', 1.21, 1.84, 0, 27);
  E.Si = new Element('Si', 'Silicon', 14, true, '#F0C8A0', 1.11, 2.1, 4, 28);
  E.P = new Element('P', 'Phosphorus', 15, true, '#FF8000', 1.07, 1.8, 3, 31);
  E.S = new Element('S', 'Sulfur', 16, true, '#FFFF30', 1.05, 1.8, 2, 32);
  E.Cl = new Element('Cl', 'Chlorine', 17, true, '#1FF01F', 1.02, 1.75, 1, 35);
  E.Ar = new Element('Ar', 'Argon', 18, false, '#80D1E3', 1.06, 1.88, 0, 40);
  E.K = new Element('K', 'Potassium', 19, false, '#8F40D4', 2.03, 2.75, 0, 39);
  E.Ca = new Element('Ca', 'Calcium', 20, false, '#3DFF00', 1.76, 2.31, 0, 40);
  E.Sc = new Element('Sc', 'Scandium', 21, false, '#E6E6E6', 1.7, 0, 0, 45);
  E.Ti = new Element('Ti', 'Titanium', 22, false, '#BFC2C7', 1.6, 0, 1, 48);
  E.V = new Element('V', 'Vanadium', 23, false, '#A6A6AB', 1.53, 0, 1, 51);
  E.Cr = new Element('Cr', 'Chromium', 24, false, '#8A99C7', 1.39, 0, 2, 52);
  E.Mn = new Element('Mn', 'Manganese', 25, false, '#9C7AC7', 1.39, 0, 3, 55);
  E.Fe = new Element('Fe', 'Iron', 26, false, '#E06633', 1.32, 0, 2, 56);
  E.Co = new Element('Co', 'Cobalt', 27, false, '#F090A0', 1.26, 0, 1, 59);
  E.Ni = new Element('Ni', 'Nickel', 28, false, '#50D050', 1.24, 1.63, 1, 58);
  E.Cu = new Element('Cu', 'Copper', 29, false, '#C88033', 1.32, 1.4, 0, 63);
  E.Zn = new Element('Zn', 'Zinc', 30, false, '#7D80B0', 1.22, 1.39, 0, 64);
  E.Ga = new Element('Ga', 'Gallium', 31, false, '#C28F8F', 1.22, 1.87, 0, 69);
  E.Ge = new Element('Ge', 'Germanium', 32, false, '#668F8F', 1.2, 2.11, 4, 74);
  E.As = new Element('As', 'Arsenic', 33, true, '#BD80E3', 1.19, 1.85, 3, 75);
  E.Se = new Element('Se', 'Selenium', 34, true, '#FFA100', 1.2, 1.9, 2, 80);
  E.Br = new Element('Br', 'Bromine', 35, true, '#A62929', 1.2, 1.85, 1, 79);
  E.Kr = new Element('Kr', 'Krypton', 36, false, '#5CB8D1', 1.16, 2.02, 0, 84);
  E.Rb = new Element('Rb', 'Rubidium', 37, false, '#702EB0', 2.2, 3.03, 0, 85);
  E.Sr = new Element('Sr', 'Strontium', 38, false, '#00FF00', 1.95, 2.49, 0, 88);
  E.Y = new Element('Y', 'Yttrium', 39, false, '#94FFFF', 1.9, 0, 0, 89);
  E.Zr = new Element('Zr', 'Zirconium', 40, false, '#94E0E0', 1.75, 0, 0, 90);
  E.Nb = new Element('Nb', 'Niobium', 41, false, '#73C2C9', 1.64, 0, 1, 93);
  E.Mo = new Element('Mo', 'Molybdenum', 42, false, '#54B5B5', 1.54, 0, 2, 98);
  E.Tc = new Element('Tc', 'Technetium', 43, false, '#3B9E9E', 1.47, 0, 3, 0);
  E.Ru = new Element('Ru', 'Ruthenium', 44, false, '#248F8F', 1.46, 0, 2, 102);
  E.Rh = new Element('Rh', 'Rhodium', 45, false, '#0A7D8C', 1.42, 0, 1, 103);
  E.Pd = new Element('Pd', 'Palladium', 46, false, '#006985', 1.39, 1.63, 0, 106);
  E.Ag = new Element('Ag', 'Silver', 47, false, '#C0C0C0', 1.45, 1.72, 0, 107);
  E.Cd = new Element('Cd', 'Cadmium', 48, false, '#FFD98F', 1.44, 1.58, 0, 114);
  E.In = new Element('In', 'Indium', 49, false, '#A67573', 1.42, 1.93, 0, 115);
  E.Sn = new Element('Sn', 'Tin', 50, false, '#668080', 1.39, 2.17, 4, 120);
  E.Sb = new Element('Sb', 'Antimony', 51, false, '#9E63B5', 1.39, 2.06, 3, 121);
  E.Te = new Element('Te', 'Tellurium', 52, true, '#D47A00', 1.38, 2.06, 2, 130);
  E.I = new Element('I', 'Iodine', 53, true, '#940094', 1.39, 1.98, 1, 127);
  E.Xe = new Element('Xe', 'Xenon', 54, false, '#429EB0', 1.4, 2.16, 0, 132);
  E.Cs = new Element('Cs', 'Cesium', 55, false, '#57178F', 2.44, 3.43, 0, 133);
  E.Ba = new Element('Ba', 'Barium', 56, false, '#00C900', 2.15, 2.68, 0, 138);
  E.La = new Element('La', 'Lanthanum', 57, false, '#70D4FF', 2.07, 0, 0, 139);
  E.Ce = new Element('Ce', 'Cerium', 58, false, '#FFFFC7', 2.04, 0, 0, 140);
  E.Pr = new Element('Pr', 'Praseodymium', 59, false, '#D9FFC7', 2.03, 0, 0, 141);
  E.Nd = new Element('Nd', 'Neodymium', 60, false, '#C7FFC7', 2.01, 0, 0, 142);
  E.Pm = new Element('Pm', 'Promethium', 61, false, '#A3FFC7', 1.99, 0, 0, 0);
  E.Sm = new Element('Sm', 'Samarium', 62, false, '#8FFFC7', 1.98, 0, 0, 152);
  E.Eu = new Element('Eu', 'Europium', 63, false, '#61FFC7', 1.98, 0, 0, 153);
  E.Gd = new Element('Gd', 'Gadolinium', 64, false, '#45FFC7', 1.96, 0, 0, 158);
  E.Tb = new Element('Tb', 'Terbium', 65, false, '#30FFC7', 1.94, 0, 0, 159);
  E.Dy = new Element('Dy', 'Dysprosium', 66, false, '#1FFFC7', 1.92, 0, 0, 164);
  E.Ho = new Element('Ho', 'Holmium', 67, false, '#00FF9C', 1.92, 0, 0, 165);
  E.Er = new Element('Er', 'Erbium', 68, false, '#00E675', 1.89, 0, 0, 166);
  E.Tm = new Element('Tm', 'Thulium', 69, false, '#00D452', 1.9, 0, 0, 169);
  E.Yb = new Element('Yb', 'Ytterbium', 70, false, '#00BF38', 1.87, 0, 0, 174);
  E.Lu = new Element('Lu', 'Lutetium', 71, false, '#00AB24', 1.87, 0, 0, 175);
  E.Hf = new Element('Hf', 'Hafnium', 72, false, '#4DC2FF', 1.75, 0, 0, 180);
  E.Ta = new Element('Ta', 'Tantalum', 73, false, '#4DA6FF', 1.7, 0, 1, 181);
  E.W = new Element('W', 'Tungsten', 74, false, '#2194D6', 1.62, 0, 2, 184);
  E.Re = new Element('Re', 'Rhenium', 75, false, '#267DAB', 1.51, 0, 3, 187);
  E.Os = new Element('Os', 'Osmium', 76, false, '#266696', 1.44, 0, 2, 192);
  E.Ir = new Element('Ir', 'Iridium', 77, false, '#175487', 1.41, 0, 3, 193);
  E.Pt = new Element('Pt', 'Platinum', 78, false, '#D0D0E0', 1.36, 1.75, 0, 195);
  E.Au = new Element('Au', 'Gold', 79, false, '#FFD123', 1.36, 1.66, 1, 197);
  E.Hg = new Element('Hg', 'Mercury', 80, false, '#B8B8D0', 1.32, 1.55, 0, 202);
  E.Tl = new Element('Tl', 'Thallium', 81, false, '#A6544D', 1.45, 1.96, 0, 205);
  E.Pb = new Element('Pb', 'Lead', 82, false, '#575961', 1.46, 2.02, 4, 208);
  E.Bi = new Element('Bi', 'Bismuth', 83, false, '#9E4FB5', 1.48, 2.07, 3, 209);
  E.Po = new Element('Po', 'Polonium', 84, false, '#AB5C00', 1.4, 1.97, 2, 0);
  E.At = new Element('At', 'Astatine', 85, true, '#754F45', 1.5, 2.02, 1, 0);
  E.Rn = new Element('Rn', 'Radon', 86, false, '#428296', 1.5, 2.2, 0, 0);
  E.Fr = new Element('Fr', 'Francium', 87, false, '#420066', 2.6, 3.48, 0, 0);
  E.Ra = new Element('Ra', 'Radium', 88, false, '#007D00', 2.21, 2.83, 0, 0);
  E.Ac = new Element('Ac', 'Actinium', 89, false, '#70ABFA', 2.15, 0, 0, 0);
  E.Th = new Element('Th', 'Thorium', 90, false, '#00BAFF', 2.06, 0, 0, 232);
  E.Pa = new Element('Pa', 'Protactinium', 91, false, '#00A1FF', 2, 0, 0, 231);
  E.U = new Element('U', 'Uranium', 92, false, '#008FFF', 1.96, 1.86, 0, 238);
  E.Np = new Element('Np', 'Neptunium', 93, false, '#0080FF', 1.9, 0, 0, 0);
  E.Pu = new Element('Pu', 'Plutonium', 94, false, '#006BFF', 1.87, 0, 0, 0);
  E.Am = new Element('Am', 'Americium', 95, false, '#545CF2', 1.8, 0, 0, 0);
  E.Cm = new Element('Cm', 'Curium', 96, false, '#785CE3', 1.69, 0, 0, 0);
  E.Bk = new Element('Bk', 'Berkelium', 97, false, '#8A4FE3', 0, 0, 0, 0);
  E.Cf = new Element('Cf', 'Californium', 98, false, '#A136D4', 0, 0, 0, 0);
  E.Es = new Element('Es', 'Einsteinium', 99, false, '#B31FD4', 0, 0, 0, 0);
  E.Fm = new Element('Fm', 'Fermium', 100, false, '#B31FBA', 0, 0, 0, 0);
  E.Md = new Element('Md', 'Mendelevium', 101, false, '#B30DA6', 0, 0, 0, 0);
  E.No = new Element('No', 'Nobelium', 102, false, '#BD0D87', 0, 0, 0, 0);
  E.Lr = new Element('Lr', 'Lawrencium', 103, false, '#C70066', 0, 0, 0, 0);
  E.Rf = new Element('Rf', 'Rutherfordium', 104, false, '#CC0059', 0, 0, 0, 0);
  E.Db = new Element('Db', 'Dubnium', 105, false, '#D1004F', 0, 0, 0, 0);
  E.Sg = new Element('Sg', 'Seaborgium', 106, false, '#D90045', 0, 0, 0, 0);
  E.Bh = new Element('Bh', 'Bohrium', 107, false, '#E00038', 0, 0, 0, 0);
  E.Hs = new Element('Hs', 'Hassium', 108, false, '#E6002E', 0, 0, 0, 0);
  E.Mt = new Element('Mt', 'Meitnerium', 109, false, '#EB0026', 0, 0, 0, 0);
  E.Ds = new Element('Ds', 'Darmstadtium', 110, false, '#000000', 0, 0, 0, 0);
  E.Rg = new Element('Rg', 'Roentgenium', 111, false, '#000000', 0, 0, 0, 0);
  E.Cn = new Element('Cn', 'Copernicium', 112, false, '#000000', 0, 0, 0, 0);
  E.Nh = new Element('Nh', 'Nihonium', 113, false, '#000000', 0, 0, 0, 0);
  E.Fl = new Element('Fl', 'Flerovium', 114, false, '#000000', 0, 0, 0, 0);
  E.Mc = new Element('Mc', 'Moscovium', 115, false, '#000000', 0, 0, 0, 0);
  E.Lv = new Element('Lv', 'Livermorium', 116, false, '#000000', 0, 0, 0, 0);
  E.Ts = new Element('Ts', 'Tennessine', 117, false, '#000000', 0, 0, 0, 0);
  E.Og = new Element('Og', 'Oganesson', 118, false, '#000000', 0, 0, 0, 0);
  E.H.pymolColor = '#E6E6E6';
  E.C.pymolColor = '#33FF33';
  E.N.pymolColor = '#3333FF';
  E.O.pymolColor = '#FF4D4D';
  E.F.pymolColor = '#B3FFFF';
  E.S.pymolColor = '#E6C640';
  return E;
}(SYMBOLS);
var RESIDUE = function (undefined) {
  'use strict';

  var R = [];

  function Residue(symbol, name, polar, aminoColor, shapelyColor, acidity) {
    this.symbol = symbol;
    this.name = name;
    this.polar = polar;
    this.aminoColor = aminoColor;
    this.shapelyColor = shapelyColor;
    this.acidity = acidity;
  }

  R.Ala = new Residue('Ala', 'Alanine', false, '#C8C8C8', '#8CFF8C', 0);
  R.Arg = new Residue('Arg', 'Arginine', true, '#145AFF', '#00007C', 1);
  R.Asn = new Residue('Asn', 'Asparagine', true, '#00DCDC', '#FF7C70', 0);
  R.Asp = new Residue('Asp', 'Aspartic Acid', true, '#E60A0A', '#A00042', -1);
  R.Cys = new Residue('Cys', 'Cysteine', true, '#E6E600', '#FFFF70', 0);
  R.Gln = new Residue('Gln', 'Glutamine', true, '#00DCDC', '#FF4C4C', 0);
  R.Glu = new Residue('Glu', 'Glutamic Acid', true, '#E60A0A', '#660000', -1);
  R.Gly = new Residue('Gly', 'Glycine', false, '#EBEBEB', '#FFFFFF', 0);
  R.His = new Residue('His', 'Histidine', true, '#8282D2', '#7070FF', 1);
  R.Ile = new Residue('Ile', 'Isoleucine', false, '#0F820F', '#004C00', 0);
  R.Leu = new Residue('Leu', 'Leucine', false, '#0F820F', '#455E45', 0);
  R.Lys = new Residue('Lys', 'Lysine', true, '#145AFF', '#4747B8', 1);
  R.Met = new Residue('Met', 'Methionine', false, '#E6E600', '#B8A042', 0);
  R.Phe = new Residue('Phe', 'Phenylalanine', false, '#3232AA', '#534C52', 0);
  R.Pro = new Residue('Pro', 'Proline', false, '#DC9682', '#525252', 0);
  R.Ser = new Residue('Ser', 'Serine', true, '#FA9600', '#FF7042', 0);
  R.Thr = new Residue('Thr', 'Threonine', true, '#FA9600', '#B84C00', 0);
  R.Trp = new Residue('Trp', 'Tryptophan', true, '#B45AB4', '#4F4600', 0);
  R.Tyr = new Residue('Tyr', 'Tyrosine', true, '#3232AA', '#8C704C', 0);
  R.Val = new Residue('Val', 'Valine', false, '#0F820F', '#FF8CFF', 0);
  R.Asx = new Residue('Asx', 'Asparagine/Aspartic Acid', true, '#FF69B4', '#FF00FF', 0);
  R.Glx = new Residue('Glx', 'Glutamine/Glutamic Acid', true, '#FF69B4', '#FF00FF', 0);
  R['*'] = new Residue('*', 'Other', false, '#BEA06E', '#FF00FF', 0);
  R.A = new Residue('A', 'Adenine', false, '#BEA06E', '#A0A0FF', 0);
  R.G = new Residue('G', 'Guanine', false, '#BEA06E', '#FF7070', 0);
  R.I = new Residue('I', '', false, '#BEA06E', '#80FFFF', 0);
  R.C = new Residue('C', 'Cytosine', false, '#BEA06E', '#FF8C4B', 0);
  R.T = new Residue('T', 'Thymine', false, '#BEA06E', '#A0FFA0', 0);
  R.U = new Residue('U', 'Uracil', false, '#BEA06E', '#FF8080', 0);
  return R;
}(); // default canvas properties

var default_backgroundColor = '#FFFFFF';
var default_scale = 1;
var default_rotateAngle = 0;
var default_bondLength_2D = 20;
var default_angstromsPerBondLength = 1.25;
var default_lightDirection_3D = [-.1, -.1, -1];
var default_lightDiffuseColor_3D = '#FFFFFF';
var default_lightSpecularColor_3D = '#FFFFFF';
var default_projectionPerspective_3D = true;
var default_projectionPerspectiveVerticalFieldOfView_3D = 45;
var default_projectionOrthoWidth_3D = 40;
var default_projectionWidthHeightRatio_3D = undefined;
var default_projectionFrontCulling_3D = .1;
var default_projectionBackCulling_3D = 10000;
var default_cullBackFace_3D = true;
var default_fog_mode_3D = 0;
var default_fog_color_3D = '#000000';
var default_fog_start_3D = 0;
var default_fog_end_3D = 1;
var default_fog_density_3D = 1;
var default_shadow_3D = false;
var default_shadow_intensity_3D = .85;
var default_flat_color_3D = false;
var default_antialias_3D = true;
var default_gammaCorrection_3D = 2.2;
var default_colorHover = '#885110';
var default_colorSelect = '#0060B2';
var default_colorError = '#c10000';
var default_colorPreview = '#00FF00'; // 3D shaders
// default ssao

var default_ssao_3D = false;
var default_ssao_kernel_radius = 17;
var default_ssao_kernel_samples = 32;
var default_ssao_power = 1.0; // default outline 3D

var default_outline_3D = false;
var default_outline_thickness = 1.0;
var default_outline_normal_threshold = 0.85;
var default_outline_depth_threshold = 0.1; // defult fxaa antialiasing

var default_fxaa_edgeThreshold = 1.0 / 16.0;
var default_fxaa_edgeThresholdMin = 1.0 / 12.0;
var default_fxaa_searchSteps = 64;
var default_fxaa_searchThreshold = 1.0 / 4.0;
var default_fxaa_subpixCap = 1.0;
var default_fxaa_subpixTrim = 0.0; // default atom properties

var default_atoms_display = true;
var default_atoms_color = '#000000';
var default_atoms_font_size_2D = 12;
var default_atoms_font_families_2D = ['Helvetica', 'Arial', 'Dialog'];
var default_atoms_font_bold_2D = false;
var default_atoms_font_italic_2D = false;
var default_atoms_circles_2D = false;
var default_atoms_circleDiameter_2D = 10;
var default_atoms_circleBorderWidth_2D = 1;
var default_atoms_lonePairDistance_2D = 8;
var default_atoms_lonePairSpread_2D = 4;
var default_atoms_lonePairDiameter_2D = 1;
var default_atoms_useJMOLColors = false;
var default_atoms_usePYMOLColors = false;
var default_atoms_HBlack_2D = true;
var default_atoms_implicitHydrogens_2D = true;
var default_atoms_displayTerminalCarbonLabels_2D = false;
var default_atoms_showHiddenCarbons_2D = true;
var default_atoms_showAttributedCarbons_2D = true;
var default_atoms_displayAllCarbonLabels_2D = false;
var default_atoms_resolution_3D = 30;
var default_atoms_sphereDiameter_3D = .8;
var default_atoms_useVDWDiameters_3D = false;
var default_atoms_vdwMultiplier_3D = 1;
var default_atoms_materialAmbientColor_3D = '#000000';
var default_atoms_materialSpecularColor_3D = '#555555';
var default_atoms_materialShininess_3D = 32;
var default_atoms_nonBondedAsStars_3D = false;
var default_atoms_displayLabels_3D = false; // default bond properties

var default_bonds_display = true;
var default_bonds_color = '#000000';
var default_bonds_width_2D = 1;
var default_bonds_useAbsoluteSaturationWidths_2D = true;
var default_bonds_saturationWidth_2D = .2;
var default_bonds_saturationWidthAbs_2D = 5;
var default_bonds_ends_2D = 'round';
var default_bonds_splitColor = false;
var default_bonds_colorGradient = false;
var default_bonds_saturationAngle_2D = m.PI / 3;
var default_bonds_symmetrical_2D = false;
var default_bonds_clearOverlaps_2D = false;
var default_bonds_overlapClearWidth_2D = .5;
var default_bonds_atomLabelBuffer_2D = 1;
var default_bonds_wedgeThickness_2D = 6;
var default_bonds_wavyLength_2D = 4;
var default_bonds_hashWidth_2D = 1;
var default_bonds_hashSpacing_2D = 2.5;
var default_bonds_dotSize_2D = 2;
var default_bonds_lewisStyle_2D = false;
var default_bonds_showBondOrders_3D = false;
var default_bonds_resolution_3D = 30;
var default_bonds_renderAsLines_3D = false;
var default_bonds_cylinderDiameter_3D = .3;
var default_bonds_pillLatitudeResolution_3D = 10;
var default_bonds_pillLongitudeResolution_3D = 20;
var default_bonds_pillHeight_3D = .3;
var default_bonds_pillSpacing_3D = .1;
var default_bonds_pillDiameter_3D = .3;
var default_bonds_materialAmbientColor_3D = '#000000';
var default_bonds_materialSpecularColor_3D = '#555555';
var default_bonds_materialShininess_3D = 32; // default macromolecular properties

var default_proteins_displayRibbon = true;
var default_proteins_displayBackbone = false;
var default_proteins_backboneThickness = 1.5;
var default_proteins_backboneColor = '#CCCCCC';
var default_proteins_ribbonCartoonize = false;
var default_proteins_displayPipePlank = false; // shapely, amino, polarity, rainbow, acidity

var default_proteins_residueColor = 'none';
var default_proteins_primaryColor = '#FF0D0D';
var default_proteins_secondaryColor = '#FFFF30';
var default_proteins_ribbonCartoonHelixPrimaryColor = '#00E740';
var default_proteins_ribbonCartoonHelixSecondaryColor = '#9905FF';
var default_proteins_ribbonCartoonSheetColor = '#E8BB99';
var default_proteins_tubeColor = '#FF0D0D';
var default_proteins_tubeResolution_3D = 15;
var default_proteins_ribbonThickness = .2;
var default_proteins_tubeThickness = 0.5;
var default_proteins_plankSheetWidth = 3.5;
var default_proteins_cylinderHelixDiameter = 4;
var default_proteins_verticalResolution = 8;
var default_proteins_horizontalResolution = 8;
var default_proteins_materialAmbientColor_3D = '#000000';
var default_proteins_materialSpecularColor_3D = '#555555';
var default_proteins_materialShininess_3D = 32;
var default_nucleics_display = true;
var default_nucleics_tubeColor = '#CCCCCC';
var default_nucleics_baseColor = '#C10000'; // shapely, rainbow

var default_nucleics_residueColor = 'none';
var default_nucleics_tubeThickness = 1.5;
var default_nucleics_tubeResolution_3D = 15;
var default_nucleics_verticalResolution = 8;
var default_nucleics_materialAmbientColor_3D = '#000000';
var default_nucleics_materialSpecularColor_3D = '#555555';
var default_nucleics_materialShininess_3D = 32;
var default_macro_displayAtoms = false;
var default_macro_displayBonds = false;
var default_macro_atomToLigandDistance = -1;
var default_macro_showWater = false;
var default_macro_colorByChain = false;
var default_macro_rainbowColors = ['#0000FF', '#00FFFF', '#00FF00', '#FFFF00', '#FF0000']; // default surface properties

var default_surfaces_display = true;
var default_surfaces_alpha = .5;
var default_surfaces_style = 'Solid';
var default_surfaces_color = 'white';
var default_surfaces_materialAmbientColor_3D = '#000000';
var default_surfaces_materialSpecularColor_3D = '#000000';
var default_surfaces_materialShininess_3D = 32; // default spectrum properties

var default_plots_color = '#000000';
var default_plots_width = 1;
var default_plots_showIntegration = false;
var default_plots_integrationColor = '#c10000';
var default_plots_integrationLineWidth = 1;
var default_plots_showGrid = false;
var default_plots_gridColor = 'gray';
var default_plots_gridLineWidth = .5;
var default_plots_showYAxis = true;
var default_plots_flipXAxis = false; // default shape properties

var default_text_font_size = 12;
var default_text_font_families = ['Helvetica', 'Arial', 'Dialog'];
var default_text_font_bold = true;
var default_text_font_italic = false;
var default_text_font_stroke_3D = true;
var default_text_color = '#000000';
var default_shapes_color = '#000000';
var default_shapes_lineWidth = 1;
var default_shapes_pointSize = 2;
var default_shapes_arrowLength_2D = 8;
var default_compass_display = false;
var default_compass_axisXColor_3D = '#FF0000';
var default_compass_axisYColor_3D = '#00FF00';
var default_compass_axisZColor_3D = '#0000FF';
var default_compass_size_3D = 50;
var default_compass_resolution_3D = 10;
var default_compass_displayText_3D = true;
var default_compass_type_3D = 0;
var default_measurement_update_3D = false;
var default_measurement_angleBands_3D = 10;
var default_measurement_displayText_3D = true;

var _ref = function () {
  // shortcuts
  var interpreter = new _io_JSONInterpreter__WEBPACK_IMPORTED_MODULE_1__["default"]();
  return {
    readJSON: function readJSON(string) {
      var obj;

      try {
        obj = JSON.parse(string);
      } catch (e) {
        // not json
        return undefined;
      }

      if (obj) {
        if (obj.m || obj.s) {
          return interpreter.contentFrom(obj);
        } else if (obj.a) {
          return obj = {
            molecules: [interpreter.molFrom(obj)],
            shapes: []
          };
        } else {
          return obj = {
            molecules: [],
            shapes: []
          };
        }
      }

      return undefined;
    },
    writeJSON: function writeJSON(mols, shapes) {
      return JSON.stringify(interpreter.contentTo(mols, shapes));
    }
  };
}(),
    readJSON = _ref.readJSON,
    writeJSON = _ref.writeJSON;


var readCIF = function () {
  // shortcuts
  var interpreter = new _io_CIFInterpreter__WEBPACK_IMPORTED_MODULE_0__["default"]();
  return function (content, xSuper, ySuper, zSuper) {
    return interpreter.read(content, xSuper, ySuper, zSuper);
  };
}();

var _ref2 = function () {
  // shortcuts
  var interpreter = new _io_CMLInterpreter__WEBPACK_IMPORTED_MODULE_2__["default"]();
  return [function (content) {
    return interpreter.read(content);
  }, writeCML = function writeCML(molecules) {
    return interpreter.write(molecules);
  }];
}(),
    _ref3 = _slicedToArray(_ref2, 2),
    readCML = _ref3[0],
    writeCML = _ref3[1];



var _ref4 = function () {
  // shortcuts
  var interpreter = new _io_MOLInterpreter__WEBPACK_IMPORTED_MODULE_3__["default"]();
  return [function (content, multiplier) {
    return interpreter.read(content, multiplier);
  }, function (mol) {
    return interpreter.write(mol);
  }];
}(),
    _ref5 = _slicedToArray(_ref4, 2),
    readMOL = _ref5[0],
    writeMOL = _ref5[1];



/***/ }),

/***/ "./src/ChemDoodle/informatics/BondDeducer.js":
/*!***************************************************!*\
  !*** ./src/ChemDoodle/informatics/BondDeducer.js ***!
  \***************************************************/
/*! exports provided: getPointsPerAngstrom, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPointsPerAngstrom", function() { return getPointsPerAngstrom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BondDeducer; });
/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ChemDoodle */ "./src/ChemDoodle/index.js");
/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../structures */ "./src/ChemDoodle/structures/index.js");


function getPointsPerAngstrom() {
  return _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bondLength_2D"] / _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_angstromsPerBondLength"];
}
;
function BondDeducer() {}
;
var _ = BondDeducer.prototype;
_.margin = 1.1;

_.deduceCovalentBonds = function (molecule, customPointsPerAngstrom) {
  var pointsPerAngstrom = getPointsPerAngstrom();

  if (customPointsPerAngstrom) {
    pointsPerAngstrom = customPointsPerAngstrom;
  }

  for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {
    for (var j = i + 1; j < ii; j++) {
      var first = molecule.atoms[i];
      var second = molecule.atoms[j];

      if (first.distance3D(second) < (_ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["ELEMENT"][first.label].covalentRadius + _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["ELEMENT"][second.label].covalentRadius) * pointsPerAngstrom * this.margin) {
        molecule.bonds.push(new _structures__WEBPACK_IMPORTED_MODULE_1__["Bond"](first, second, 1));
      }
    }
  }
};

/***/ }),

/***/ "./src/ChemDoodle/informatics/EulerFacetRingFinder.js":
/*!************************************************************!*\
  !*** ./src/ChemDoodle/informatics/EulerFacetRingFinder.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return EulerFacetRingFinder; });
/* harmony import */ var _RingFinder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_RingFinder */ "./src/ChemDoodle/informatics/_RingFinder.js");
/* harmony import */ var _structures_Ring__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../structures/Ring */ "./src/ChemDoodle/structures/Ring.js");



function Finger(a, from) {
  this.atoms = [];

  if (from) {
    for (var i = 0, ii = from.atoms.length; i < ii; i++) {
      this.atoms[i] = from.atoms[i];
    }
  }

  this.atoms.push(a);
}

var _2 = Finger.prototype;

_2.grow = function (bonds, blockers) {
  var last = this.atoms[this.atoms.length - 1];
  var neighs = [];

  for (var i = 0, ii = bonds.length; i < ii; i++) {
    if (bonds[i].contains(last)) {
      var neigh = bonds[i].getNeighbor(last);

      if (blockers.indexOf(neigh) === -1) {
        neighs.push(neigh);
      }
    }
  }

  var returning = [];

  for (var i = 0, ii = neighs.length; i < ii; i++) {
    returning.push(new Finger(neighs[i], this));
  }

  return returning;
};

_2.check = function (bonds, finger, a) {
  // check that they dont contain similar parts
  for (var i = 0, ii = finger.atoms.length - 1; i < ii; i++) {
    if (this.atoms.indexOf(finger.atoms[i]) !== -1) {
      return undefined;
    }
  }

  var ring; // check if fingers meet at tips

  if (finger.atoms[finger.atoms.length - 1] === this.atoms[this.atoms.length - 1]) {
    ring = new _structures_Ring__WEBPACK_IMPORTED_MODULE_1__["default"]();
    ring.atoms[0] = a;

    for (var i = 0, ii = this.atoms.length; i < ii; i++) {
      ring.atoms.push(this.atoms[i]);
    }

    for (var i = finger.atoms.length - 2; i >= 0; i--) {
      ring.atoms.push(finger.atoms[i]);
    }
  } else {
    // check if fingers meet at bond
    var endbonds = [];

    for (var i = 0, ii = bonds.length; i < ii; i++) {
      if (bonds[i].contains(finger.atoms[finger.atoms.length - 1])) {
        endbonds.push(bonds[i]);
      }
    }

    for (var i = 0, ii = endbonds.length; i < ii; i++) {
      if ((finger.atoms.length === 1 || !endbonds[i].contains(finger.atoms[finger.atoms.length - 2])) && endbonds[i].contains(this.atoms[this.atoms.length - 1])) {
        ring = new _structures_Ring__WEBPACK_IMPORTED_MODULE_1__["default"]();
        ring.atoms[0] = a;

        for (var j = 0, jj = this.atoms.length; j < jj; j++) {
          ring.atoms.push(this.atoms[j]);
        }

        for (var j = finger.atoms.length - 1; j >= 0; j--) {
          ring.atoms.push(finger.atoms[j]);
        }

        break;
      }
    }
  }

  return ring;
};

function EulerFacetRingFinder(molecule) {
  this.setMolecule(molecule);
}
;

var _ = EulerFacetRingFinder.prototype = new _RingFinder__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.fingerBreak = 5;

_.innerGetRings = function () {
  for (var i = 0, ii = this.atoms.length; i < ii; i++) {
    var neigh = [];

    for (var j = 0, jj = this.bonds.length; j < jj; j++) {
      if (this.bonds[j].contains(this.atoms[i])) {
        neigh.push(this.bonds[j].getNeighbor(this.atoms[i]));
      }
    }

    for (var j = 0, jj = neigh.length; j < jj; j++) {
      // weird that i can't optimize this loop without breaking a test
      // case...
      for (var k = j + 1; k < neigh.length; k++) {
        var fingers = [];
        fingers[0] = new Finger(neigh[j]);
        fingers[1] = new Finger(neigh[k]);
        var blockers = [];
        blockers[0] = this.atoms[i];

        for (var l = 0, ll = neigh.length; l < ll; l++) {
          if (l !== j && l !== k) {
            blockers.push(neigh[l]);
          }
        }

        var found = []; // check for 3 membered ring

        var three = fingers[0].check(this.bonds, fingers[1], this.atoms[i]);

        if (three) {
          found[0] = three;
        }

        while (found.length === 0 && fingers.length > 0 && fingers[0].atoms.length < this.fingerBreak) {
          var newfingers = [];

          for (var l = 0, ll = fingers.length; l < ll; l++) {
            var adding = fingers[l].grow(this.bonds, blockers);

            for (var m = 0, mm = adding.length; m < mm; m++) {
              newfingers.push(adding[m]);
            }
          }

          fingers = newfingers;

          for (var l = 0, ll = fingers.length; l < ll; l++) {
            for (var m = l + 1; m < ll; m++) {
              var r = fingers[l].check(this.bonds, fingers[m], this.atoms[i]);

              if (r) {
                found.push(r);
              }
            }
          }

          if (found.length === 0) {
            var newBlockers = [];

            for (var l = 0, ll = blockers.length; l < ll; l++) {
              for (var m = 0, mm = this.bonds.length; m < mm; m++) {
                if (this.bonds[m].contains(blockers[l])) {
                  var neigh = this.bonds[m].getNeighbor(blockers[l]);

                  if (blockers.indexOf(neigh) === -1 && newBlockers.indexOf(neigh) === -1) {
                    newBlockers.push(neigh);
                  }
                }
              }
            }

            for (var l = 0, ll = newBlockers.length; l < ll; l++) {
              blockers.push(newBlockers[l]);
            }
          }
        }

        if (found.length > 0) {
          // this undefined is required...weird, don't know why
          var use = undefined;

          for (var l = 0, ll = found.length; l < ll; l++) {
            if (!use || use.atoms.length > found[l].atoms.length) {
              use = found[l];
            }
          }

          var already = false;

          for (var l = 0, ll = this.rings.length; l < ll; l++) {
            var all = true;

            for (var m = 0, mm = use.atoms.length; m < mm; m++) {
              if (this.rings[l].atoms.indexOf(use.atoms[m]) === -1) {
                all = false;
                break;
              }
            }

            if (all) {
              already = true;
              break;
            }
          }

          if (!already) {
            this.rings.push(use);
          }
        }
      }
    }
  }

  this.fuse();
};

/***/ }),

/***/ "./src/ChemDoodle/informatics/FrerejacqueNumberCounter.js":
/*!****************************************************************!*\
  !*** ./src/ChemDoodle/informatics/FrerejacqueNumberCounter.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FrerejacqueNumberCounter; });
/* harmony import */ var _Counter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Counter */ "./src/ChemDoodle/informatics/_Counter.js");
/* harmony import */ var _NumberOfMoleculesCounter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NumberOfMoleculesCounter */ "./src/ChemDoodle/informatics/NumberOfMoleculesCounter.js");


function FrerejacqueNumberCounter(molecule) {
  this.setMolecule(molecule);
}
;

var _ = FrerejacqueNumberCounter.prototype = new _Counter__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.innerCalculate = function () {
  this.value = this.molecule.bonds.length - this.molecule.atoms.length + new _NumberOfMoleculesCounter__WEBPACK_IMPORTED_MODULE_1__["default"](this.molecule).value;
};

/***/ }),

/***/ "./src/ChemDoodle/informatics/HydrogenDeducer.js":
/*!*******************************************************!*\
  !*** ./src/ChemDoodle/informatics/HydrogenDeducer.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return HydrogenDeducer; });
/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../structures */ "./src/ChemDoodle/structures/index.js");

function HydrogenDeducer() {}
;
var _ = HydrogenDeducer.prototype;

_.removeHydrogens = function (molecule, removeStereo) {
  var atoms = [];
  var bonds = [];

  for (var i = 0, ii = molecule.bonds.length; i < ii; i++) {
    var b = molecule.bonds[i];
    var save = b.a1.label !== 'H' && b.a2.label !== 'H';

    if (!save && !removeStereo && b.stereo !== _structures__WEBPACK_IMPORTED_MODULE_0__["Bond"].STEREO_NONE) {
      save = true;
    }

    if (save) {
      b.a1.tag = true;
      bonds.push(b);
    } else {
      if (b.a1.label === 'H') {
        b.a1.remove = true;
      }

      if (b.a2.label === 'H') {
        b.a2.remove = true;
      }
    }
  }

  for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {
    var a = molecule.atoms[i];

    if (a.remove) {
      a.remove = undefined;
    } else {
      atoms.push(a);
    }
  }

  molecule.atoms = atoms;
  molecule.bonds = bonds;
};

/***/ }),

/***/ "./src/ChemDoodle/informatics/NumberOfMoleculesCounter.js":
/*!****************************************************************!*\
  !*** ./src/ChemDoodle/informatics/NumberOfMoleculesCounter.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return NumberOfMoleculesCounter; });
/* harmony import */ var _Counter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Counter */ "./src/ChemDoodle/informatics/_Counter.js");
/* harmony import */ var _structures_Queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../structures/Queue */ "./src/ChemDoodle/structures/Queue.js");


function NumberOfMoleculesCounter(molecule) {
  this.setMolecule(molecule);
}
;

var _ = NumberOfMoleculesCounter.prototype = new _Counter__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.innerCalculate = function () {
  for (var i = 0, ii = this.molecule.atoms.length; i < ii; i++) {
    this.molecule.atoms[i].visited = false;
  }

  for (var i = 0, ii = this.molecule.atoms.length; i < ii; i++) {
    if (!this.molecule.atoms[i].visited) {
      this.value++;
      var q = new _structures_Queue__WEBPACK_IMPORTED_MODULE_1__["default"]();
      this.molecule.atoms[i].visited = true;
      q.enqueue(this.molecule.atoms[i]);

      while (!q.isEmpty()) {
        var atom = q.dequeue();

        for (var j = 0, jj = this.molecule.bonds.length; j < jj; j++) {
          var b = this.molecule.bonds[j];

          if (b.contains(atom)) {
            var neigh = b.getNeighbor(atom);

            if (!neigh.visited) {
              neigh.visited = true;
              q.enqueue(neigh);
            }
          }
        }
      }
    }
  }
};

/***/ }),

/***/ "./src/ChemDoodle/informatics/SSSRFinder.js":
/*!**************************************************!*\
  !*** ./src/ChemDoodle/informatics/SSSRFinder.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SSSRFinder; });
/* harmony import */ var _FrerejacqueNumberCounter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FrerejacqueNumberCounter */ "./src/ChemDoodle/informatics/FrerejacqueNumberCounter.js");
/* harmony import */ var _EulerFacetRingFinder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EulerFacetRingFinder */ "./src/ChemDoodle/informatics/EulerFacetRingFinder.js");


function SSSRFinder(molecule) {
  this.rings = [];

  if (molecule.atoms.length > 0) {
    var frerejacqueNumber = new _FrerejacqueNumberCounter__WEBPACK_IMPORTED_MODULE_0__["default"](molecule).value;
    var all = new _EulerFacetRingFinder__WEBPACK_IMPORTED_MODULE_1__["default"](molecule).rings;
    all.sort(function (a, b) {
      return a.atoms.length - b.atoms.length;
    });

    for (var i = 0, ii = molecule.bonds.length; i < ii; i++) {
      molecule.bonds[i].visited = false;
    }

    for (var i = 0, ii = all.length; i < ii; i++) {
      var use = false;

      for (var j = 0, jj = all[i].bonds.length; j < jj; j++) {
        if (!all[i].bonds[j].visited) {
          use = true;
          break;
        }
      }

      if (use) {
        for (var j = 0, jj = all[i].bonds.length; j < jj; j++) {
          all[i].bonds[j].visited = true;
        }

        this.rings.push(all[i]);
      }

      if (this.rings.length === frerejacqueNumber) {
        break;
      }
    }
  }
}
;

/***/ }),

/***/ "./src/ChemDoodle/informatics/Splitter.js":
/*!************************************************!*\
  !*** ./src/ChemDoodle/informatics/Splitter.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Splitter; });
/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../structures */ "./src/ChemDoodle/structures/index.js");

function Splitter() {}
;
var _ = Splitter.prototype;

_.split = function (molecule) {
  var mols = [];

  for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {
    molecule.atoms[i].visited = false;
  }

  for (var i = 0, ii = molecule.bonds.length; i < ii; i++) {
    molecule.bonds[i].visited = false;
  }

  for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {
    var a = molecule.atoms[i];

    if (!a.visited) {
      var newMol = new _structures__WEBPACK_IMPORTED_MODULE_0__["Molecule"]();
      newMol.atoms.push(a);
      a.visited = true;
      var q = new _structures__WEBPACK_IMPORTED_MODULE_0__["Queue"]();
      q.enqueue(a);

      while (!q.isEmpty()) {
        var atom = q.dequeue();

        for (var j = 0, jj = molecule.bonds.length; j < jj; j++) {
          var b = molecule.bonds[j];

          if (b.contains(atom) && !b.visited) {
            b.visited = true;
            newMol.bonds.push(b);
            var neigh = b.getNeighbor(atom);

            if (!neigh.visited) {
              neigh.visited = true;
              newMol.atoms.push(neigh);
              q.enqueue(neigh);
            }
          }
        }
      }

      mols.push(newMol);
    }
  }

  return mols;
};

/***/ }),

/***/ "./src/ChemDoodle/informatics/StructureBuilder.js":
/*!********************************************************!*\
  !*** ./src/ChemDoodle/informatics/StructureBuilder.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return StructureBuilder; });
/* harmony import */ var _io_JSONInterpreter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../io/JSONInterpreter */ "./src/ChemDoodle/io/JSONInterpreter.js");

function StructureBuilder() {}
;
var _ = StructureBuilder.prototype;

_.copy = function (molecule) {
  var json = new _io_JSONInterpreter__WEBPACK_IMPORTED_MODULE_0__["default"]();
  return json.molFrom(json.molTo(molecule));
};

/***/ }),

/***/ "./src/ChemDoodle/informatics/_Counter.js":
/*!************************************************!*\
  !*** ./src/ChemDoodle/informatics/_Counter.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _Counter; });
function _Counter() {}
;
var _ = _Counter.prototype;
_.value = 0;
_.molecule = undefined;

_.setMolecule = function (molecule) {
  this.value = 0;
  this.molecule = molecule;

  if (this.innerCalculate) {
    this.innerCalculate();
  }
};

/***/ }),

/***/ "./src/ChemDoodle/informatics/_RingFinder.js":
/*!***************************************************!*\
  !*** ./src/ChemDoodle/informatics/_RingFinder.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _RingFinder; });
function _RingFinder() {}
;
var _ = _RingFinder.prototype;
_.atoms = undefined;
_.bonds = undefined;
_.rings = undefined;

_.reduce = function (molecule) {
  for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {
    molecule.atoms[i].visited = false;
  }

  for (var i = 0, ii = molecule.bonds.length; i < ii; i++) {
    molecule.bonds[i].visited = false;
  }

  var cont = true;

  while (cont) {
    cont = false;

    for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {
      var count = 0;
      var bond;

      for (var j = 0, jj = molecule.bonds.length; j < jj; j++) {
        if (molecule.bonds[j].contains(molecule.atoms[i]) && !molecule.bonds[j].visited) {
          count++;

          if (count === 2) {
            break;
          }

          bond = molecule.bonds[j];
        }
      }

      if (count === 1) {
        cont = true;
        bond.visited = true;
        molecule.atoms[i].visited = true;
      }
    }
  }

  for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {
    if (!molecule.atoms[i].visited) {
      this.atoms.push(molecule.atoms[i]);
    }
  }

  for (var i = 0, ii = molecule.bonds.length; i < ii; i++) {
    if (!molecule.bonds[i].visited) {
      this.bonds.push(molecule.bonds[i]);
    }
  }

  if (this.bonds.length === 0 && this.atoms.length !== 0) {
    this.atoms = [];
  }
};

_.setMolecule = function (molecule) {
  this.atoms = [];
  this.bonds = [];
  this.rings = [];
  this.reduce(molecule);

  if (this.atoms.length > 2 && this.innerGetRings) {
    this.innerGetRings();
  }
};

_.fuse = function () {
  for (var i = 0, ii = this.rings.length; i < ii; i++) {
    for (var j = 0, jj = this.bonds.length; j < jj; j++) {
      if (this.rings[i].atoms.indexOf(this.bonds[j].a1) !== -1 && this.rings[i].atoms.indexOf(this.bonds[j].a2) !== -1) {
        this.rings[i].bonds.push(this.bonds[j]);
      }
    }
  }
};

/***/ }),

/***/ "./src/ChemDoodle/informatics/index.js":
/*!*********************************************!*\
  !*** ./src/ChemDoodle/informatics/index.js ***!
  \*********************************************/
/*! exports provided: _Counter, NumberOfMoleculesCounter, FrerejacqueNumberCounter, _RingFinder, EulerFacetRingFinder, SSSRFinder, BondDeducer, getPointsPerAngstrom, HydrogenDeducer, Splitter, StructureBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Counter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Counter */ "./src/ChemDoodle/informatics/_Counter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_Counter", function() { return _Counter__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _NumberOfMoleculesCounter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NumberOfMoleculesCounter */ "./src/ChemDoodle/informatics/NumberOfMoleculesCounter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NumberOfMoleculesCounter", function() { return _NumberOfMoleculesCounter__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _FrerejacqueNumberCounter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FrerejacqueNumberCounter */ "./src/ChemDoodle/informatics/FrerejacqueNumberCounter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FrerejacqueNumberCounter", function() { return _FrerejacqueNumberCounter__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _RingFinder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_RingFinder */ "./src/ChemDoodle/informatics/_RingFinder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_RingFinder", function() { return _RingFinder__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _EulerFacetRingFinder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EulerFacetRingFinder */ "./src/ChemDoodle/informatics/EulerFacetRingFinder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EulerFacetRingFinder", function() { return _EulerFacetRingFinder__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _SSSRFinder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SSSRFinder */ "./src/ChemDoodle/informatics/SSSRFinder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SSSRFinder", function() { return _SSSRFinder__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _BondDeducer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BondDeducer */ "./src/ChemDoodle/informatics/BondDeducer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BondDeducer", function() { return _BondDeducer__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getPointsPerAngstrom", function() { return _BondDeducer__WEBPACK_IMPORTED_MODULE_6__["getPointsPerAngstrom"]; });

/* harmony import */ var _HydrogenDeducer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./HydrogenDeducer */ "./src/ChemDoodle/informatics/HydrogenDeducer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HydrogenDeducer", function() { return _HydrogenDeducer__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _Splitter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Splitter */ "./src/ChemDoodle/informatics/Splitter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Splitter", function() { return _Splitter__WEBPACK_IMPORTED_MODULE_8__["default"]; });

/* harmony import */ var _StructureBuilder__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./StructureBuilder */ "./src/ChemDoodle/informatics/StructureBuilder.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StructureBuilder", function() { return _StructureBuilder__WEBPACK_IMPORTED_MODULE_9__["default"]; });












/***/ }),

/***/ "./src/ChemDoodle/io/CIFInterpreter.js":
/*!*********************************************!*\
  !*** ./src/ChemDoodle/io/CIFInterpreter.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CIFInterpreter; });
/* harmony import */ var _Interpreter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Interpreter */ "./src/ChemDoodle/io/_Interpreter.js");
/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../extensions */ "./src/ChemDoodle/extensions/index.js");
/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../structures */ "./src/ChemDoodle/structures/index.js");
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib */ "./src/ChemDoodle/lib/index.js");
/* harmony import */ var _informatics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../informatics */ "./src/ChemDoodle/informatics/index.js");





var m = Math;
var whitespaceRegex = /\s+/g;
var whitespaceAndParenthesisRegex = /\(|\)|\s+/g;
var whitespaceAndQuoteRegex = /\'|\s+/g;
var whitespaceAndQuoteAndCommaRegex = /,|\'|\s+/g;
var leadingWhitespaceRegex = /^\s+/;
var digitsRegex = /[0-9]/g;
var digitsSymbolRegex = /[0-9]|\+|\-/g;

var filter = function filter(s) {
  return s.length !== 0;
};

var hallTranslations = {
  'P': [],
  'A': [[0, .5, .5]],
  'B': [[.5, 0, .5]],
  'C': [[.5, .5, 0]],
  'I': [[.5, .5, .5]],
  'R': [[2 / 3, 1 / 3, 1 / 3], [1 / 3, 2 / 3, 2 / 3]],
  'S': [[1 / 3, 1 / 3, 2 / 3], [2 / 3, 2 / 3, 1 / 3]],
  'T': [[1 / 3, 2 / 3, 1 / 3], [2 / 3, 1 / 3, 2 / 3]],
  'F': [[0, .5, .5], [.5, 0, .5], [.5, .5, 0]]
};

var parseTransform = function parseTransform(s) {
  var displacement = 0;
  var x = 0,
      y = 0,
      z = 0;
  var indexx = s.indexOf('x');
  var indexy = s.indexOf('y');
  var indexz = s.indexOf('z');

  if (indexx !== -1) {
    x++;

    if (indexx > 0 && s.charAt(indexx - 1) !== '+') {
      x *= -1;
    }
  }

  if (indexy !== -1) {
    y++;

    if (indexy > 0 && s.charAt(indexy - 1) !== '+') {
      y *= -1;
    }
  }

  if (indexz !== -1) {
    z++;

    if (indexz > 0 && s.charAt(indexz - 1) !== '+') {
      z *= -1;
    }
  }

  if (s.length > 2) {
    var op = '+';

    for (var i = 0, ii = s.length; i < ii; i++) {
      var l = s.charAt(i);

      if ((l === '-' || l === '/') && (i === s.length - 1 || s.charAt(i + 1).match(digitsRegex))) {
        op = l;
      }

      if (l.match(digitsRegex)) {
        if (op === '+') {
          displacement += parseInt(l);
        } else if (op === '-') {
          displacement -= parseInt(l);
        } else if (op === '/') {
          displacement /= parseInt(l);
        }
      }
    }
  }

  return [displacement, x, y, z];
};

var generateABC2XYZ = function generateABC2XYZ(a, b, c, alpha, beta, gamma) {
  var d = (m.cos(alpha) - m.cos(gamma) * m.cos(beta)) / m.sin(gamma);
  return [a, 0, 0, 0, b * m.cos(gamma), b * m.sin(gamma), 0, 0, c * m.cos(beta), c * d, c * m.sqrt(1 - m.pow(m.cos(beta), 2) - d * d), 0, 0, 0, 0, 1];
};

function CIFInterpreter() {}
;

var _ = CIFInterpreter.prototype = new _Interpreter__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.read = function (content, xSuper, ySuper, zSuper) {
  xSuper = xSuper ? xSuper : 1;
  ySuper = ySuper ? ySuper : 1;
  zSuper = zSuper ? zSuper : 1;
  var molecule = new _structures__WEBPACK_IMPORTED_MODULE_2__["Molecule"]();

  if (!content) {
    return molecule;
  }

  var lines = content.split('\n');
  var aLength = 0,
      bLength = 0,
      cLength = 0,
      alphaAngle = 0,
      betaAngle = 0,
      gammaAngle = 0;
  var hallClass = 'P';
  var transformLoop;
  var atomLoop;
  var bondLoop;
  var line;
  var shift = true;

  while (lines.length > 0) {
    if (shift) {
      line = lines.shift();
    } else {
      shift = true;
    }

    if (line.length > 0) {
      if (_extensions__WEBPACK_IMPORTED_MODULE_1__["stringStartsWith"](line, '_cell_length_a')) {
        aLength = parseFloat(line.split(whitespaceAndParenthesisRegex)[1]);
      } else if (_extensions__WEBPACK_IMPORTED_MODULE_1__["stringStartsWith"](line, '_cell_length_b')) {
        bLength = parseFloat(line.split(whitespaceAndParenthesisRegex)[1]);
      } else if (_extensions__WEBPACK_IMPORTED_MODULE_1__["stringStartsWith"](line, '_cell_length_c')) {
        cLength = parseFloat(line.split(whitespaceAndParenthesisRegex)[1]);
      } else if (_extensions__WEBPACK_IMPORTED_MODULE_1__["stringStartsWith"](line, '_cell_angle_alpha')) {
        alphaAngle = m.PI * parseFloat(line.split(whitespaceAndParenthesisRegex)[1]) / 180;
      } else if (_extensions__WEBPACK_IMPORTED_MODULE_1__["stringStartsWith"](line, '_cell_angle_beta')) {
        betaAngle = m.PI * parseFloat(line.split(whitespaceAndParenthesisRegex)[1]) / 180;
      } else if (_extensions__WEBPACK_IMPORTED_MODULE_1__["stringStartsWith"](line, '_cell_angle_gamma')) {
        gammaAngle = m.PI * parseFloat(line.split(whitespaceAndParenthesisRegex)[1]) / 180;
      } else if (_extensions__WEBPACK_IMPORTED_MODULE_1__["stringStartsWith"](line, '_symmetry_space_group_name_H-M')) {
        hallClass = line.split(whitespaceAndQuoteRegex)[1];
      } else if (_extensions__WEBPACK_IMPORTED_MODULE_1__["stringStartsWith"](line, 'loop_')) {
        var loop = {
          fields: [],
          lines: []
        };
        var pushingLines = false; // keep undefined check here because the line may be an
        // empty string

        while ((line = lines.shift()) !== undefined && !_extensions__WEBPACK_IMPORTED_MODULE_1__["stringStartsWith"](line = line.replace(leadingWhitespaceRegex, ''), 'loop_') && line.length > 0) {
          // remove leading whitespace that may appear in
          // subloop lines ^
          if (_extensions__WEBPACK_IMPORTED_MODULE_1__["stringStartsWith"](line, '_')) {
            if (pushingLines) {
              break;
            }

            loop.fields = loop.fields.concat(line.split(whitespaceRegex).filter(filter));
          } else {
            pushingLines = true;
            loop.lines.push(line);
          }
        }

        if (lines.length !== 0 && (_extensions__WEBPACK_IMPORTED_MODULE_1__["stringStartsWith"](line, 'loop_') || _extensions__WEBPACK_IMPORTED_MODULE_1__["stringStartsWith"](line, '_'))) {
          shift = false;
        }

        if (loop.fields.indexOf('_symmetry_equiv_pos_as_xyz') !== -1 || loop.fields.indexOf('_space_group_symop_operation_xyz') !== -1) {
          transformLoop = loop;
        } else if (loop.fields.indexOf('_atom_site_label') !== -1) {
          atomLoop = loop;
        } else if (loop.fields.indexOf('_geom_bond_atom_site_label_1') !== -1) {
          bondLoop = loop;
        }
      }
    }
  }

  var abc2xyz = generateABC2XYZ(aLength, bLength, cLength, alphaAngle, betaAngle, gammaAngle); // internal atom coordinates

  if (atomLoop) {
    var labelIndex = -1,
        altLabelIndex = -1,
        xIndex = -1,
        yIndex = -1,
        zIndex = -1;

    for (var i = 0, ii = atomLoop.fields.length; i < ii; i++) {
      var field = atomLoop.fields[i];

      if (field === '_atom_site_type_symbol') {
        labelIndex = i;
      } else if (field === '_atom_site_label') {
        altLabelIndex = i;
      } else if (field === '_atom_site_fract_x') {
        xIndex = i;
      } else if (field === '_atom_site_fract_y') {
        yIndex = i;
      } else if (field === '_atom_site_fract_z') {
        zIndex = i;
      }
    }

    for (var i = 0, ii = atomLoop.lines.length; i < ii; i++) {
      line = atomLoop.lines[i];
      var tokens = line.split(whitespaceRegex).filter(filter);
      var a = new _structures__WEBPACK_IMPORTED_MODULE_2__["Atom"](tokens[labelIndex === -1 ? altLabelIndex : labelIndex].split(digitsSymbolRegex)[0], parseFloat(tokens[xIndex]), parseFloat(tokens[yIndex]), parseFloat(tokens[zIndex]));
      molecule.atoms.push(a);

      if (altLabelIndex !== -1) {
        a.cifId = tokens[altLabelIndex];
        a.cifPart = 0;
      }
    }
  } // transforms, unless bonds are specified


  if (transformLoop && !bondLoop) {
    // assume the index is 0, just incase a different identifier is
    // used
    var symIndex = 0;

    for (var i = 0, ii = transformLoop.fields.length; i < ii; i++) {
      var field = transformLoop.fields[i];

      if (field === '_symmetry_equiv_pos_as_xyz' || field === '_space_group_symop_operation_xyz') {
        symIndex = i;
      }
    }

    var impliedTranslations = hallTranslations[hallClass];
    var add = [];

    for (var i = 0, ii = transformLoop.lines.length; i < ii; i++) {
      var parts = transformLoop.lines[i].split(whitespaceAndQuoteAndCommaRegex).filter(filter);
      var multx = parseTransform(parts[symIndex]);
      var multy = parseTransform(parts[symIndex + 1]);
      var multz = parseTransform(parts[symIndex + 2]);

      for (var j = 0, jj = molecule.atoms.length; j < jj; j++) {
        var a = molecule.atoms[j];
        var x = a.x * multx[1] + a.y * multx[2] + a.z * multx[3] + multx[0];
        var y = a.x * multy[1] + a.y * multy[2] + a.z * multy[3] + multy[0];
        var z = a.x * multz[1] + a.y * multz[2] + a.z * multz[3] + multz[0];
        var copy1 = new _structures__WEBPACK_IMPORTED_MODULE_2__["Atom"](a.label, x, y, z);
        add.push(copy1); // cifID could be 0, so check for undefined

        if (a.cifId !== undefined) {
          copy1.cifId = a.cifId;
          copy1.cifPart = i + 1;
        }

        if (impliedTranslations) {
          for (var k = 0, kk = impliedTranslations.length; k < kk; k++) {
            var trans = impliedTranslations[k];
            var copy2 = new _structures__WEBPACK_IMPORTED_MODULE_2__["Atom"](a.label, x + trans[0], y + trans[1], z + trans[2]);
            add.push(copy2); // cifID could be 0, so check for undefined

            if (a.cifId !== undefined) {
              copy2.cifId = a.cifId;
              copy2.cifPart = i + 1;
            }
          }
        }
      }
    } // make sure all atoms are within the unit cell


    for (var i = 0, ii = add.length; i < ii; i++) {
      var a = add[i];

      while (a.x >= 1) {
        a.x--;
      }

      while (a.x < 0) {
        a.x++;
      }

      while (a.y >= 1) {
        a.y--;
      }

      while (a.y < 0) {
        a.y++;
      }

      while (a.z >= 1) {
        a.z--;
      }

      while (a.z < 0) {
        a.z++;
      }
    } // remove overlaps


    var noOverlaps = [];

    for (var i = 0, ii = add.length; i < ii; i++) {
      var overlap = false;
      var a = add[i];

      for (var j = 0, jj = molecule.atoms.length; j < jj; j++) {
        if (molecule.atoms[j].distance3D(a) < .0001) {
          overlap = true;
          break;
        }
      }

      if (!overlap) {
        for (var j = 0, jj = noOverlaps.length; j < jj; j++) {
          if (noOverlaps[j].distance3D(a) < .0001) {
            overlap = true;
            break;
          }
        }

        if (!overlap) {
          noOverlaps.push(a);
        }
      }
    } // concat arrays


    molecule.atoms = molecule.atoms.concat(noOverlaps);
  } // build super cell


  var extras = [];

  for (var i = 0; i < xSuper; i++) {
    for (var j = 0; j < ySuper; j++) {
      for (var k = 0; k < zSuper; k++) {
        if (!(i === 0 && j === 0 && k === 0)) {
          for (var l = 0, ll = molecule.atoms.length; l < ll; l++) {
            var a = molecule.atoms[l];
            var copy = new _structures__WEBPACK_IMPORTED_MODULE_2__["Atom"](a.label, a.x + i, a.y + j, a.z + k);
            extras.push(copy); // cifID could be 0, so check for undefined

            if (a.cifId !== undefined) {
              copy.cifId = a.cifId;
              copy.cifPart = a.cifPart + (transformLoop ? transformLoop.lines.length : 0) + i + j * 10 + k * 100;
            }
          }
        }
      }
    }
  }

  molecule.atoms = molecule.atoms.concat(extras); // convert to xyz

  for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {
    var a = molecule.atoms[i];
    var xyz = _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].multiplyVec3(abc2xyz, [a.x, a.y, a.z]);
    a.x = xyz[0];
    a.y = xyz[1];
    a.z = xyz[2];
  } // handle bonds


  if (bondLoop) {
    var atom1 = -1,
        atom2 = -1;

    for (var i = 0, ii = bondLoop.fields.length; i < ii; i++) {
      var field = bondLoop.fields[i];

      if (field === '_geom_bond_atom_site_label_1') {
        atom1 = i;
      } else if (field === '_geom_bond_atom_site_label_2') {
        atom2 = i;
      }
    }

    for (var k = 0, kk = bondLoop.lines.length; k < kk; k++) {
      var tokens = bondLoop.lines[k].split(whitespaceRegex).filter(filter);
      var id1 = tokens[atom1];
      var id2 = tokens[atom2];

      for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {
        for (var j = i + 1; j < ii; j++) {
          var ai = molecule.atoms[i];
          var aj = molecule.atoms[j];

          if (ai.cifPart !== aj.cifPart) {
            break;
          }

          if (ai.cifId === id1 && aj.cifId === id2 || ai.cifId === id2 && aj.cifId === id1) {
            molecule.bonds.push(new _structures__WEBPACK_IMPORTED_MODULE_2__["Bond"](ai, aj));
          }
        }
      }
    }
  } else {
    new _informatics__WEBPACK_IMPORTED_MODULE_4__["BondDeducer"]().deduceCovalentBonds(molecule, 1);
  } // generate unit cell


  var o = [-xSuper / 2, -ySuper / 2, -zSuper / 2];
  var unitCellVectors = {
    o: _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].multiplyVec3(abc2xyz, o, []),
    x: _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].multiplyVec3(abc2xyz, [o[0] + 1, o[1], o[2]]),
    y: _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].multiplyVec3(abc2xyz, [o[0], o[1] + 1, o[2]]),
    z: _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].multiplyVec3(abc2xyz, [o[0], o[1], o[2] + 1]),
    xy: _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].multiplyVec3(abc2xyz, [o[0] + 1, o[1] + 1, o[2]]),
    xz: _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].multiplyVec3(abc2xyz, [o[0] + 1, o[1], o[2] + 1]),
    yz: _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].multiplyVec3(abc2xyz, [o[0], o[1] + 1, o[2] + 1]),
    xyz: _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].multiplyVec3(abc2xyz, [o[0] + 1, o[1] + 1, o[2] + 1])
  };
  return {
    molecule: molecule,
    unitCell: new _structures__WEBPACK_IMPORTED_MODULE_2__["d3"].UnitCell(unitCellVectors)
  };
};

/***/ }),

/***/ "./src/ChemDoodle/io/CMLInterpreter.js":
/*!*********************************************!*\
  !*** ./src/ChemDoodle/io/CMLInterpreter.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CMLInterpreter; });
/* harmony import */ var _Interpreter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Interpreter */ "./src/ChemDoodle/io/_Interpreter.js");
/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../structures */ "./src/ChemDoodle/structures/index.js");
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib */ "./src/ChemDoodle/lib/index.js");



function CMLInterpreter() {}
;

var _ = CMLInterpreter.prototype = new _Interpreter__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.read = function (content) {
  var molecules = [];
  var xml = _lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"].parseXML(content); // Possible for multiple CML tags to exist

  var allCml = Object(_lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"])(xml).find('cml');

  for (var i = 0, ii = allCml.length; i < ii; i++) {
    var allMolecules = Object(_lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"])(allCml[i]).find('molecule');

    for (var j = 0, jj = allMolecules.length; j < jj; j++) {
      var currentMolecule = molecules[j] = new _structures__WEBPACK_IMPORTED_MODULE_1__["Molecule"]();
      var idmap = []; // Don't even bother with atomArrays, there's no point.

      var cmlAtoms = Object(_lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"])(allMolecules[j]).find('atom');

      for (var k = 0, kk = cmlAtoms.length; k < kk; k++) {
        var currentCMLAtom = Object(_lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"])(cmlAtoms[k]);
        var label = currentCMLAtom.attr('elementType');
        var x, y, z, currentAtom;

        if (currentCMLAtom.attr('x2') == undefined) {
          x = currentCMLAtom.attr('x3');
          y = currentCMLAtom.attr('y3');
          z = currentCMLAtom.attr('z3');
        } else {
          x = currentCMLAtom.attr('x2');
          y = currentCMLAtom.attr('y2');
          z = 0;
        }

        currentAtom = molecules[j].atoms[k] = new _structures__WEBPACK_IMPORTED_MODULE_1__["Atom"](label, x, y, z);
        idmap[k] = currentCMLAtom.attr('id'); // charge

        if (currentCMLAtom.attr('formalCharge') != undefined) {
          currentAtom.charge = currentCMLAtom.attr('formalCharge');
        }
      }

      var cmlBonds = Object(_lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"])(allMolecules[j]).find('bond');

      for (var k = 0, kk = cmlBonds.length; k < kk; k++) {
        var currentCMLBond = Object(_lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"])(cmlBonds[k]);
        var atomRefs2 = currentCMLBond.attr('atomRefs2').split(' ');
        var a1, a2, order;
        a1 = currentMolecule.atoms[_lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"].inArray(atomRefs2[0], idmap)];
        a2 = currentMolecule.atoms[_lib__WEBPACK_IMPORTED_MODULE_2__["jQuery"].inArray(atomRefs2[1], idmap)];

        switch (currentCMLBond.attr('order')) {
          case '2':
          case 'D':
            order = 2;
            break;

          case '3':
          case 'T':
            order = 3;
            break;

          case 'A':
            order = 1.5;
            break;

          default:
            order = 1;
        }

        var currentBond = molecules[j].bonds[k] = new _structures__WEBPACK_IMPORTED_MODULE_1__["Bond"](a1, a2, order); // check stereo... only support W or H

        switch (currentCMLBond.find('bondStereo').text()) {
          case 'W':
            currentBond.stereo = _structures__WEBPACK_IMPORTED_MODULE_1__["Bond"].STEREO_PROTRUDING;
            break;

          case 'H':
            currentBond.stereo = _structures__WEBPACK_IMPORTED_MODULE_1__["Bond"].STEREO_RECESSED;
            break;
        }
      }
    }
  }

  return molecules;
};

_.write = function (molecules) {
  var sb = [];
  sb.push('<?xml version="1.0" encoding="UTF-8"?>\n');
  sb.push('<cml convention="conventions:molecular" xmlns="http://www.xml-cml.org/schema" xmlns:conventions="http://www.xml-cml.org/convention/" xmlns:dc="http://purl.org/dc/elements/1.1/">\n'); // TODO: Metadata

  for (var i = 0, ii = molecules.length; i < ii; i++) {
    sb.push('<molecule id="m');
    sb.push(i);
    sb.push('">');
    sb.push('<atomArray>');

    for (var j = 0, jj = molecules[i].atoms.length; j < jj; j++) {
      var currentAtom = molecules[i].atoms[j];
      sb.push('<atom elementType="');
      sb.push(currentAtom.label);
      sb.push('" id="a');
      sb.push(j);
      sb.push('" '); // Always do 3D coordinates, unless there is a fancy reliable way to tell if the molecule is 2D.

      sb.push('x3="');
      sb.push(currentAtom.x);
      sb.push('" y3="');
      sb.push(currentAtom.y);
      sb.push('" z3="');
      sb.push(currentAtom.z);
      sb.push('" ');

      if (currentAtom.charge != 0) {
        sb.push('formalCharge="');
        sb.push(currentAtom.charge);
        sb.push('" ');
      }

      sb.push('/>');
    }

    sb.push('</atomArray>');
    sb.push('<bondArray>');

    for (var j = 0, jj = molecules[i].bonds.length; j < jj; j++) {
      var currentBond = molecules[i].bonds[j];
      sb.push('<bond atomRefs2="a');
      sb.push(molecules[i].atoms.indexOf(currentBond.a1));
      sb.push(' a');
      sb.push(molecules[i].atoms.indexOf(currentBond.a2));
      sb.push('" order="');

      switch (currentBond.bondOrder) {
        case 1.5:
          sb.push('A');
          break;

        case 1:
        case 2:
        case 3:
          sb.push(currentBond.bondOrder);
          break;

        case 0.5:
        default:
          sb.push('S');
          break;
      }

      sb.push('"/>');
    }

    sb.push('</bondArray>');
    sb.push('</molecule>');
  }

  sb.push('</cml>');
  return sb.join('');
};

/***/ }),

/***/ "./src/ChemDoodle/io/JSONInterpreter.js":
/*!**********************************************!*\
  !*** ./src/ChemDoodle/io/JSONInterpreter.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return JSONInterpreter; });
/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../structures */ "./src/ChemDoodle/structures/index.js");

function JSONInterpreter() {}
;
var _ = JSONInterpreter.prototype;

_.contentTo = function (mols, shapes) {
  if (!mols) {
    mols = [];
  }

  if (!shapes) {
    shapes = [];
  }

  var count1 = 0,
      count2 = 0;

  for (var i = 0, ii = mols.length; i < ii; i++) {
    var mol = mols[i];

    for (var j = 0, jj = mol.atoms.length; j < jj; j++) {
      mol.atoms[j].tmpid = 'a' + count1++;
    }

    for (var j = 0, jj = mol.bonds.length; j < jj; j++) {
      mol.bonds[j].tmpid = 'b' + count2++;
    }
  }

  count1 = 0;

  for (var i = 0, ii = shapes.length; i < ii; i++) {
    shapes[i].tmpid = 's' + count1++;
  }

  var dummy = {};

  if (mols && mols.length > 0) {
    dummy.m = [];

    for (var i = 0, ii = mols.length; i < ii; i++) {
      dummy.m.push(this.molTo(mols[i]));
    }
  }

  if (shapes && shapes.length > 0) {
    dummy.s = [];

    for (var i = 0, ii = shapes.length; i < ii; i++) {
      dummy.s.push(this.shapeTo(shapes[i]));
    }
  }

  for (var i = 0, ii = mols.length; i < ii; i++) {
    var mol = mols[i];

    for (var j = 0, jj = mol.atoms.length; j < jj; j++) {
      mol.atoms[j].tmpid = undefined;
    }

    for (var j = 0, jj = mol.bonds.length; j < jj; j++) {
      mol.bonds[j].tmpid = undefined;
    }
  }

  for (var i = 0, ii = shapes.length; i < ii; i++) {
    shapes[i].tmpid = undefined;
  }

  return dummy;
};

_.contentFrom = function (dummy) {
  var obj = {
    molecules: [],
    shapes: []
  };

  if (dummy.m) {
    for (var i = 0, ii = dummy.m.length; i < ii; i++) {
      obj.molecules.push(this.molFrom(dummy.m[i]));
    }
  }

  if (dummy.s) {
    for (var i = 0, ii = dummy.s.length; i < ii; i++) {
      obj.shapes.push(this.shapeFrom(dummy.s[i], obj.molecules));
    }
  }

  for (var i = 0, ii = obj.molecules.length; i < ii; i++) {
    var mol = obj.molecules[i];

    for (var j = 0, jj = mol.atoms.length; j < jj; j++) {
      mol.atoms[j].tmpid = undefined;
    }

    for (var j = 0, jj = mol.bonds.length; j < jj; j++) {
      mol.bonds[j].tmpid = undefined;
    }
  }

  for (var i = 0, ii = obj.shapes.length; i < ii; i++) {
    obj.shapes[i].tmpid = undefined;
  }

  return obj;
};

_.queryTo = function (query) {
  var q = {};

  var appendProperty = function appendProperty(q, p, name, isRange) {
    if (p) {
      q[name] = {
        v: isRange ? query.outputRange(p.v) : p.v,
        n: p.not
      };
    }
  };

  if (query.type === _structures__WEBPACK_IMPORTED_MODULE_0__["Query"].TYPE_ATOM) {
    appendProperty(q, query.elements, 'as');
    appendProperty(q, query.chirality, '@');
    appendProperty(q, query.aromatic, 'A');
    appendProperty(q, query.charge, 'C', true);
    appendProperty(q, query.hydrogens, 'H', true);
    appendProperty(q, query.ringCount, 'R', true);
    appendProperty(q, query.saturation, 'S');
    appendProperty(q, query.connectivity, 'X', true);
    appendProperty(q, query.connectivityNoH, 'x', true);
  } else {
    appendProperty(q, query.orders, 'bs');
    appendProperty(q, query.stereo, '@');
    appendProperty(q, query.aromatic, 'A');
    appendProperty(q, query.ringCount, 'R', true);
  }

  return q;
};

_.molTo = function (mol) {
  var dummy = {
    a: []
  };

  for (var i = 0, ii = mol.atoms.length; i < ii; i++) {
    var a = mol.atoms[i];
    var da = {
      x: a.x,
      y: a.y
    };

    if (a.tmpid) {
      da.i = a.tmpid;
    }

    if (a.label !== 'C') {
      da.l = a.label;
    }

    if (a.z !== 0) {
      da.z = a.z;
    }

    if (a.charge !== 0) {
      da.c = a.charge;
    }

    if (a.mass !== -1) {
      da.m = a.mass;
    }

    if (a.implicitH !== -1) {
      da.h = a.implicitH;
    }

    if (a.numRadical !== 0) {
      da.r = a.numRadical;
    }

    if (a.numLonePair !== 0) {
      da.p = a.numLonePair;
    }

    if (a.query) {
      da.q = this.queryTo(a.query);
    }

    dummy.a.push(da);
  }

  if (mol.bonds.length > 0) {
    dummy.b = [];

    for (var i = 0, ii = mol.bonds.length; i < ii; i++) {
      var b = mol.bonds[i];
      var db = {
        b: mol.atoms.indexOf(b.a1),
        e: mol.atoms.indexOf(b.a2)
      };

      if (b.tmpid) {
        db.i = b.tmpid;
      }

      if (b.bondOrder !== 1) {
        db.o = b.bondOrder;
      }

      if (b.stereo !== _structures__WEBPACK_IMPORTED_MODULE_0__["Bond"].STEREO_NONE) {
        db.s = b.stereo;
      }

      if (b.query) {
        db.q = this.queryTo(b.query);
      }

      dummy.b.push(db);
    }
  }

  return dummy;
};

_.queryFrom = function (json) {
  var query = new _structures__WEBPACK_IMPORTED_MODULE_0__["Query"](json.as ? _structures__WEBPACK_IMPORTED_MODULE_0__["Query"].TYPE_ATOM : _structures__WEBPACK_IMPORTED_MODULE_0__["Query"].TYPE_BOND);

  var setupProperty = function setupProperty(query, json, name, isRange) {
    if (json) {
      query[name] = {};
      query[name].v = isRange ? query.parseRange(json.v) : json.v;

      if (json.n) {
        query[name].not = true;
      }
    }
  };

  if (query.type === _structures__WEBPACK_IMPORTED_MODULE_0__["Query"].TYPE_ATOM) {
    setupProperty(query, json.as, 'elements');
    setupProperty(query, json['@'], 'chirality');
    setupProperty(query, json.A, 'aromatic');
    setupProperty(query, json.C, 'charge', true);
    setupProperty(query, json.H, 'hydrogens', true);
    setupProperty(query, json.R, 'ringCount', true);
    setupProperty(query, json.S, 'saturation');
    setupProperty(query, json.X, 'connectivity', true);
    setupProperty(query, json.x, 'connectivityNoH', true);
  } else {
    setupProperty(query, json.bs, 'orders');
    setupProperty(query, json['@'], 'stereo');
    setupProperty(query, json.A, 'aromatic');
    setupProperty(query, json.R, 'ringCount', true);
  }

  return query;
};

_.molFrom = function (json) {
  var molecule = new _structures__WEBPACK_IMPORTED_MODULE_0__["Molecule"]();

  for (var i = 0, ii = json.a.length; i < ii; i++) {
    var c = json.a[i];
    var a = new _structures__WEBPACK_IMPORTED_MODULE_0__["Atom"](c.l ? c.l : 'C', c.x, c.y);

    if (c.i) {
      a.tmpid = c.i;
    }

    if (c.z) {
      a.z = c.z;
    }

    if (c.c) {
      a.charge = c.c;
    }

    if (c.m) {
      a.mass = c.m;
    }

    if (c.h) {
      a.implicitH = c.h;
    }

    if (c.r) {
      a.numRadical = c.r;
    }

    if (c.p) {
      a.numLonePair = c.p;
    }

    if (c.q) {
      a.query = this.queryFrom(c.q);
    } // these are booleans or numbers, so check if undefined


    if (c.p_h !== undefined) {
      a.hetatm = c.p_h;
    }

    if (c.p_w !== undefined) {
      a.isWater = c.p_w;
    }

    if (c.p_d !== undefined) {
      a.closestDistance = c.p_d;
    }

    molecule.atoms.push(a);
  }

  if (json.b) {
    for (var i = 0, ii = json.b.length; i < ii; i++) {
      var c = json.b[i]; // order can be 0, so check against undefined

      var b = new _structures__WEBPACK_IMPORTED_MODULE_0__["Bond"](molecule.atoms[c.b], molecule.atoms[c.e], c.o === undefined ? 1 : c.o);

      if (c.i) {
        b.tmpid = c.i;
      }

      if (c.s) {
        b.stereo = c.s;
      }

      if (c.q) {
        b.query = this.queryFrom(c.q);
      }

      molecule.bonds.push(b);
    }
  }

  return molecule;
};

_.shapeTo = function (shape) {
  var dummy = {};

  if (shape.tmpid) {
    dummy.i = shape.tmpid;
  }

  if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__["d2"].Line) {
    dummy.t = 'Line';
    dummy.x1 = shape.p1.x;
    dummy.y1 = shape.p1.y;
    dummy.x2 = shape.p2.x;
    dummy.y2 = shape.p2.y;
    dummy.a = shape.arrowType;
  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__["d2"].Pusher) {
    dummy.t = 'Pusher';
    dummy.o1 = shape.o1.tmpid;
    dummy.o2 = shape.o2.tmpid;

    if (shape.numElectron !== 1) {
      dummy.e = shape.numElectron;
    }
  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__["d2"].AtomMapping) {
    dummy.t = 'AtomMapping';
    dummy.a1 = shape.o1.tmpid;
    dummy.a2 = shape.o2.tmpid;
  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__["d2"].Bracket) {
    dummy.t = 'Bracket';
    dummy.x1 = shape.p1.x;
    dummy.y1 = shape.p1.y;
    dummy.x2 = shape.p2.x;
    dummy.y2 = shape.p2.y;

    if (shape.charge !== 0) {
      dummy.c = shape.charge;
    }

    if (shape.mult !== 0) {
      dummy.m = shape.mult;
    }

    if (shape.repeat !== 0) {
      dummy.r = shape.repeat;
    }
  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__["d2"].DynamicBracket) {
    dummy.t = 'DynamicBracket';
    dummy.b1 = shape.b1.tmpid;
    dummy.b2 = shape.b2.tmpid;
    dummy.n1 = shape.n1;
    dummy.n2 = shape.n2;

    if (shape.flip === true) {
      dummy.f = true;
    }
  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__["d2"].VAP) {
    dummy.t = 'VAP';
    dummy.x = shape.asterisk.x;
    dummy.y = shape.asterisk.y;

    if (shape.bondType !== 1) {
      dummy.o = shape.bondType;
    }

    if (shape.substituent) {
      dummy.s = shape.substituent.tmpid;
    }

    dummy.a = [];

    for (var i = 0, ii = shape.attachments.length; i < ii; i++) {
      dummy.a.push(shape.attachments[i].tmpid);
    }
  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__["d3"].Distance) {
    dummy.t = 'Distance';
    dummy.a1 = shape.a1.tmpid;
    dummy.a2 = shape.a2.tmpid;

    if (shape.node) {
      dummy.n = shape.node;
      dummy.o = shape.offset;
    }
  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__["d3"].Angle) {
    dummy.t = 'Angle';
    dummy.a1 = shape.a1.tmpid;
    dummy.a2 = shape.a2.tmpid;
    dummy.a3 = shape.a3.tmpid;
  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__["d3"].Torsion) {
    dummy.t = 'Torsion';
    dummy.a1 = shape.a1.tmpid;
    dummy.a2 = shape.a2.tmpid;
    dummy.a3 = shape.a3.tmpid;
    dummy.a4 = shape.a4.tmpid;
  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__["d3"]._Surface) {
    dummy.t = 'Surface';
    dummy.a = [];

    for (var i = 0, ii = shape.atoms.length; i < ii; i++) {
      dummy.a.push(shape.atoms[i].tmpid);
    }

    if (!(shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__["d3"].VDWSurface)) {
      dummy.p = shape.probeRadius;
    }

    dummy.r = shape.resolution;
    var type = 'vdw';

    if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__["d3"].SASSurface) {
      type = 'sas';
    } else if (_structures__WEBPACK_IMPORTED_MODULE_0__["d3"].SESSurface && shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__["d3"].SESSurface) {
      type = 'ses';
    }

    dummy.f = type;
  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__["d3"].UnitCell) {
    dummy.t = 'UnitCell';

    for (var p in shape.unitCell) {
      dummy[p] = shape.unitCell[p];
    }
  }

  return dummy;
};

_.shapeFrom = function (dummy, mols) {
  var shape;

  if (dummy.t === 'Line') {
    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__["d2"].Line(new _structures__WEBPACK_IMPORTED_MODULE_0__["Point"](dummy.x1, dummy.y1), new _structures__WEBPACK_IMPORTED_MODULE_0__["Point"](dummy.x2, dummy.y2));
    shape.arrowType = dummy.a;
  } else if (dummy.t === 'Pusher') {
    var o1, o2;

    for (var i = 0, ii = mols.length; i < ii; i++) {
      var mol = mols[i];

      for (var j = 0, jj = mol.atoms.length; j < jj; j++) {
        var a = mol.atoms[j];

        if (a.tmpid === dummy.o1) {
          o1 = a;
        } else if (a.tmpid === dummy.o2) {
          o2 = a;
        }
      }

      for (var j = 0, jj = mol.bonds.length; j < jj; j++) {
        var b = mol.bonds[j];

        if (b.tmpid === dummy.o1) {
          o1 = b;
        } else if (b.tmpid === dummy.o2) {
          o2 = b;
        }
      }
    }

    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__["d2"].Pusher(o1, o2);

    if (dummy.e) {
      shape.numElectron = dummy.e;
    }
  } else if (dummy.t === 'AtomMapping') {
    var a1, a2;

    for (var i = 0, ii = mols.length; i < ii; i++) {
      var mol = mols[i];

      for (var j = 0, jj = mol.atoms.length; j < jj; j++) {
        var a = mol.atoms[j];

        if (a.tmpid === dummy.a1) {
          a1 = a;
        } else if (a.tmpid === dummy.a2) {
          a2 = a;
        }
      }
    }

    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__["d2"].AtomMapping(a1, a2);
  } else if (dummy.t === 'Bracket') {
    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__["d2"].Bracket(new _structures__WEBPACK_IMPORTED_MODULE_0__["Point"](dummy.x1, dummy.y1), new _structures__WEBPACK_IMPORTED_MODULE_0__["Point"](dummy.x2, dummy.y2));

    if (dummy.c !== undefined) {
      // have to check against undefined as it is an integer that can
      // be 0
      shape.charge = dummy.c;
    }

    if (dummy.m !== undefined) {
      // have to check against undefined as it is an integer that can
      // be 0
      shape.mult = dummy.m;
    }

    if (dummy.r !== undefined) {
      // have to check against undefined as it is an integer that can
      // be 0
      shape.repeat = dummy.r;
    }
  } else if (dummy.t === 'DynamicBracket') {
    var b1, b2;

    for (var i = 0, ii = mols.length; i < ii; i++) {
      var mol = mols[i];

      for (var j = 0, jj = mol.bonds.length; j < jj; j++) {
        var b = mol.bonds[j];

        if (b.tmpid === dummy.b1) {
          b1 = b;
        } else if (b.tmpid === dummy.b2) {
          b2 = b;
        }
      }
    }

    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__["d2"].DynamicBracket(b1, b2);
    shape.n1 = dummy.n1;
    shape.n2 = dummy.n2;

    if (dummy.f) {
      shape.flip = true;
    }
  } else if (dummy.t === 'VAP') {
    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__["d2"].VAP(dummy.x, dummy.y);

    if (dummy.o) {
      shape.bondType = dummy.o;
    }

    for (var i = 0, ii = mols.length; i < ii; i++) {
      var mol = mols[i];

      for (var j = 0, jj = mol.atoms.length; j < jj; j++) {
        var a = mol.atoms[j];

        if (a.tmpid === dummy.s) {
          shape.substituent = a;
        } else {
          for (var k = 0, kk = dummy.a.length; k < kk; k++) {
            if (a.tmpid === dummy.a[k]) {
              shape.attachments.push(a);
            }
          }
        }
      }
    }
  } else if (dummy.t === 'Distance') {
    var a1, a2;

    for (var i = 0, ii = mols.length; i < ii; i++) {
      var mol = mols[i];

      for (var j = 0, jj = mol.atoms.length; j < jj; j++) {
        var a = mol.atoms[j];

        if (a.tmpid === dummy.a1) {
          a1 = a;
        } else if (a.tmpid === dummy.a2) {
          a2 = a;
        }
      }
    }

    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__["d3"].Distance(a1, a2, dummy.n, dummy.o);
  } else if (dummy.t === 'Angle') {
    var a1, a2, a3;

    for (var i = 0, ii = mols.length; i < ii; i++) {
      var mol = mols[i];

      for (var j = 0, jj = mol.atoms.length; j < jj; j++) {
        var a = mol.atoms[j];

        if (a.tmpid === dummy.a1) {
          a1 = a;
        } else if (a.tmpid === dummy.a2) {
          a2 = a;
        } else if (a.tmpid === dummy.a3) {
          a3 = a;
        }
      }
    }

    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__["d3"].Angle(a1, a2, a3);
  } else if (dummy.t === 'Torsion') {
    var a1, a2, a3, a4;

    for (var i = 0, ii = mols.length; i < ii; i++) {
      var mol = mols[i];

      for (var j = 0, jj = mol.atoms.length; j < jj; j++) {
        var a = mol.atoms[j];

        if (a.tmpid === dummy.a1) {
          a1 = a;
        } else if (a.tmpid === dummy.a2) {
          a2 = a;
        } else if (a.tmpid === dummy.a3) {
          a3 = a;
        } else if (a.tmpid === dummy.a4) {
          a4 = a;
        }
      }
    }

    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__["d3"].Torsion(a1, a2, a3, a4);
  } else if (dummy.t === 'Surface') {
    var atoms = [];

    for (var i = 0, ii = mols.length; i < ii; i++) {
      var mol = mols[i];

      for (var j = 0, jj = mol.atoms.length; j < jj; j++) {
        var a = mol.atoms[j];

        for (var k = 0, kk = dummy.a.length; k < kk; k++) {
          if (a.tmpid === dummy.a[k]) {
            atoms.push(a);
          }
        }
      }
    }

    var probeRadius = dummy.p ? dummy.p : 1.4;
    var resolution = dummy.r ? dummy.r : 30;

    if (dummy.f === 'vdw') {
      shape = new _structures__WEBPACK_IMPORTED_MODULE_0__["d3"].VDWSurface(atoms, resolution);
    } else if (dummy.f === 'sas') {
      shape = new _structures__WEBPACK_IMPORTED_MODULE_0__["d3"].SASSurface(atoms, probeRadius, resolution);
    } else if (dummy.f === 'ses') {
      shape = new _structures__WEBPACK_IMPORTED_MODULE_0__["d3"].SESSurface(atoms, probeRadius, resolution);
    }
  } else if (dummy.t === 'UnitCell') {
    var unitCellVectors = {};

    for (var p in dummy) {
      unitCellVectors[p] = dummy[p];
    }

    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__["d3"].UnitCell(unitCellVectors);
  }

  return shape;
};

_.pdbFrom = function (content) {
  var mol = this.molFrom(content.mol);
  mol.findRings = false; // mark from JSON to note to algorithms that atoms in chain are not
  // same
  // objects as in atom array

  mol.fromJSON = true;
  mol.chains = this.chainsFrom(content.ribbons);
  return mol;
};

_.chainsFrom = function (content) {
  var chains = [];

  for (var i = 0, ii = content.cs.length; i < ii; i++) {
    var chain = content.cs[i];
    var c = [];

    for (var j = 0, jj = chain.length; j < jj; j++) {
      var convert = chain[j];
      var r = new _structures__WEBPACK_IMPORTED_MODULE_0__["Residue"]();
      r.name = convert.n;
      r.cp1 = new _structures__WEBPACK_IMPORTED_MODULE_0__["Atom"]('', convert.x1, convert.y1, convert.z1);
      r.cp2 = new _structures__WEBPACK_IMPORTED_MODULE_0__["Atom"]('', convert.x2, convert.y2, convert.z2);

      if (convert.x3) {
        r.cp3 = new _structures__WEBPACK_IMPORTED_MODULE_0__["Atom"]('', convert.x3, convert.y3, convert.z3);
        r.cp4 = new _structures__WEBPACK_IMPORTED_MODULE_0__["Atom"]('', convert.x4, convert.y4, convert.z4);
        r.cp5 = new _structures__WEBPACK_IMPORTED_MODULE_0__["Atom"]('', convert.x5, convert.y5, convert.z5);
      }

      r.helix = convert.h;
      r.sheet = convert.s;
      r.arrow = j > 0 && chain[j - 1].a;
      c.push(r);
    }

    chains.push(c);
  }

  return chains;
};

/***/ }),

/***/ "./src/ChemDoodle/io/MOLInterpreter.js":
/*!*********************************************!*\
  !*** ./src/ChemDoodle/io/MOLInterpreter.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MOLInterpreter; });
/* harmony import */ var _Interpreter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Interpreter */ "./src/ChemDoodle/io/_Interpreter.js");
/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../ChemDoodle */ "./src/ChemDoodle/index.js");
/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../structures */ "./src/ChemDoodle/structures/index.js");



function MOLInterpreter() {}
;

var _ = MOLInterpreter.prototype = new _Interpreter__WEBPACK_IMPORTED_MODULE_0__["default"]();

_.read = function (content, multiplier) {
  if (!multiplier) {
    multiplier = _ChemDoodle__WEBPACK_IMPORTED_MODULE_1__["default_bondLength_2D"];
  }

  var molecule = new _structures__WEBPACK_IMPORTED_MODULE_2__["Molecule"]();

  if (!content) {
    return molecule;
  }

  var currentTagTokens = content.split('\n');
  var counts = currentTagTokens[3];
  var numAtoms = parseInt(counts.substring(0, 3));
  var numBonds = parseInt(counts.substring(3, 6));

  for (var i = 0; i < numAtoms; i++) {
    var line = currentTagTokens[4 + i];
    molecule.atoms[i] = new _structures__WEBPACK_IMPORTED_MODULE_2__["Atom"](line.substring(31, 34), parseFloat(line.substring(0, 10)) * multiplier, (multiplier === 1 ? 1 : -1) * parseFloat(line.substring(10, 20)) * multiplier, parseFloat(line.substring(20, 30)) * multiplier);
    var massDif = parseInt(line.substring(34, 36));

    if (massDif !== 0 && _ChemDoodle__WEBPACK_IMPORTED_MODULE_1__["ELEMENT"][molecule.atoms[i].label]) {
      molecule.atoms[i].mass = _ChemDoodle__WEBPACK_IMPORTED_MODULE_1__["ELEMENT"][molecule.atoms[i].label].mass + massDif;
    }

    switch (parseInt(line.substring(36, 39))) {
      case 1:
        molecule.atoms[i].charge = 3;
        break;

      case 2:
        molecule.atoms[i].charge = 2;
        break;

      case 3:
        molecule.atoms[i].charge = 1;
        break;

      case 5:
        molecule.atoms[i].charge = -1;
        break;

      case 6:
        molecule.atoms[i].charge = -2;
        break;

      case 7:
        molecule.atoms[i].charge = -3;
        break;
    }
  }

  for (var i = 0; i < numBonds; i++) {
    var line = currentTagTokens[4 + numAtoms + i];
    var bondOrder = parseInt(line.substring(6, 9));
    var stereo = parseInt(line.substring(9, 12));

    if (bondOrder > 3) {
      switch (bondOrder) {
        case 4:
          bondOrder = 1.5;
          break;

        default:
          bondOrder = 1;
          break;
      }
    }

    var b = new _structures__WEBPACK_IMPORTED_MODULE_2__["Bond"](molecule.atoms[parseInt(line.substring(0, 3)) - 1], molecule.atoms[parseInt(line.substring(3, 6)) - 1], bondOrder);

    switch (stereo) {
      case 3:
        b.stereo = _structures__WEBPACK_IMPORTED_MODULE_2__["Bond"].STEREO_AMBIGUOUS;
        break;

      case 1:
        b.stereo = _structures__WEBPACK_IMPORTED_MODULE_2__["Bond"].STEREO_PROTRUDING;
        break;

      case 6:
        b.stereo = _structures__WEBPACK_IMPORTED_MODULE_2__["Bond"].STEREO_RECESSED;
        break;
    }

    molecule.bonds[i] = b;
  }

  return molecule;
};

_.write = function (molecule) {
  var sb = [];
  sb.push('Molecule from ChemDoodle Web Components\n\nhttp://www.ichemlabs.com\n');
  sb.push(this.fit(molecule.atoms.length.toString(), 3));
  sb.push(this.fit(molecule.bonds.length.toString(), 3));
  sb.push('  0  0  0  0            999 V2000\n');
  var p = molecule.getCenter();

  for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {
    var a = molecule.atoms[i];
    var mass = ' 0';

    if (a.mass !== -1 && _ChemDoodle__WEBPACK_IMPORTED_MODULE_1__["ELEMENT"][a.label]) {
      var dif = a.mass - _ChemDoodle__WEBPACK_IMPORTED_MODULE_1__["ELEMENT"][a.label].mass;

      if (dif < 5 && dif > -4) {
        mass = (dif > -1 ? ' ' : '') + dif;
      }
    }

    var charge = '  0';

    if (a.charge !== 0) {
      switch (a.charge) {
        case 3:
          charge = '  1';
          break;

        case 2:
          charge = '  2';
          break;

        case 1:
          charge = '  3';
          break;

        case -1:
          charge = '  5';
          break;

        case -2:
          charge = '  6';
          break;

        case -3:
          charge = '  7';
          break;
      }
    }

    sb.push(this.fit(((a.x - p.x) / _ChemDoodle__WEBPACK_IMPORTED_MODULE_1__["default_bondLength_2D"]).toFixed(4), 10));
    sb.push(this.fit((-(a.y - p.y) / _ChemDoodle__WEBPACK_IMPORTED_MODULE_1__["default_bondLength_2D"]).toFixed(4), 10));
    sb.push(this.fit((a.z / _ChemDoodle__WEBPACK_IMPORTED_MODULE_1__["default_bondLength_2D"]).toFixed(4), 10));
    sb.push(' ');
    sb.push(this.fit(a.label, 3, true));
    sb.push(mass);
    sb.push(charge);
    sb.push('  0  0  0  0\n');
  }

  for (var i = 0, ii = molecule.bonds.length; i < ii; i++) {
    var b = molecule.bonds[i];
    var stereo = 0;

    if (b.stereo === _structures__WEBPACK_IMPORTED_MODULE_2__["Bond"].STEREO_AMBIGUOUS) {
      stereo = 3;
    } else if (b.stereo === _structures__WEBPACK_IMPORTED_MODULE_2__["Bond"].STEREO_PROTRUDING) {
      stereo = 1;
    } else if (b.stereo === _structures__WEBPACK_IMPORTED_MODULE_2__["Bond"].STEREO_RECESSED) {
      stereo = 6;
    }

    sb.push(this.fit((molecule.atoms.indexOf(b.a1) + 1).toString(), 3));
    sb.push(this.fit((molecule.atoms.indexOf(b.a2) + 1).toString(), 3));
    var btype = b.bondOrder;

    if (btype == 1.5) {
      btype = 4;
    } else if (btype > 3 || btype % 1 != 0) {
      btype = 1;
    }

    sb.push(this.fit(btype.toString(), 3));
    sb.push('  ');
    sb.push(stereo);
    sb.push('  0  0  0\n');
  }

  sb.push('M  END');
  return sb.join('');
};

/***/ }),

/***/ "./src/ChemDoodle/io/_Interpreter.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/io/_Interpreter.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _Interpreter; });
function _Interpreter() {}
;
var _ = _Interpreter.prototype;

_.fit = function (data, length, leftAlign) {
  var size = data.length;
  var padding = [];

  for (var i = 0; i < length - size; i++) {
    padding.push(' ');
  }

  return leftAlign ? data + padding.join('') : padding.join('') + data;
};

/***/ }),

/***/ "./src/ChemDoodle/io/index.js":
/*!************************************!*\
  !*** ./src/ChemDoodle/io/index.js ***!
  \************************************/
/*! exports provided: _Interpreter, JSONInterpreter, CIFInterpreter, CMLInterpreter, MOLInterpreter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Interpreter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Interpreter */ "./src/ChemDoodle/io/_Interpreter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "_Interpreter", function() { return _Interpreter__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _JSONInterpreter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./JSONInterpreter */ "./src/ChemDoodle/io/JSONInterpreter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JSONInterpreter", function() { return _JSONInterpreter__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _CIFInterpreter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CIFInterpreter */ "./src/ChemDoodle/io/CIFInterpreter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CIFInterpreter", function() { return _CIFInterpreter__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _CMLInterpreter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CMLInterpreter */ "./src/ChemDoodle/io/CMLInterpreter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CMLInterpreter", function() { return _CMLInterpreter__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _MOLInterpreter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MOLInterpreter */ "./src/ChemDoodle/io/MOLInterpreter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MOLInterpreter", function() { return _MOLInterpreter__WEBPACK_IMPORTED_MODULE_4__["default"]; });







/***/ }),

/***/ "./src/ChemDoodle/lib/MarchingCubes.js":
/*!*********************************************!*\
  !*** ./src/ChemDoodle/lib/MarchingCubes.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// The MIT License (MIT)
// Copyright (c) 2012-2013 Mikola Lysenko
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

/**
 * Javascript Marching Cubes
 *
 * Based on Paul Bourke's classic implementation:
 *    http://local.wasp.uwa.edu.au/~pbourke/geometry/polygonise/
 *
 * JS port by Mikola Lysenko
 */
var MarchingCubes = function () {
  var edgeTable = new Uint32Array([0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c, 0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00, 0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c, 0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90, 0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c, 0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30, 0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac, 0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0, 0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c, 0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60, 0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc, 0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0, 0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c, 0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950, 0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc, 0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0, 0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc, 0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0, 0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c, 0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650, 0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc, 0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0, 0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c, 0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460, 0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac, 0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0, 0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c, 0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230, 0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c, 0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190, 0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c, 0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0]),
      triTable = [[], [0, 8, 3], [0, 1, 9], [1, 8, 3, 9, 8, 1], [1, 2, 10], [0, 8, 3, 1, 2, 10], [9, 2, 10, 0, 2, 9], [2, 8, 3, 2, 10, 8, 10, 9, 8], [3, 11, 2], [0, 11, 2, 8, 11, 0], [1, 9, 0, 2, 3, 11], [1, 11, 2, 1, 9, 11, 9, 8, 11], [3, 10, 1, 11, 10, 3], [0, 10, 1, 0, 8, 10, 8, 11, 10], [3, 9, 0, 3, 11, 9, 11, 10, 9], [9, 8, 10, 10, 8, 11], [4, 7, 8], [4, 3, 0, 7, 3, 4], [0, 1, 9, 8, 4, 7], [4, 1, 9, 4, 7, 1, 7, 3, 1], [1, 2, 10, 8, 4, 7], [3, 4, 7, 3, 0, 4, 1, 2, 10], [9, 2, 10, 9, 0, 2, 8, 4, 7], [2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4], [8, 4, 7, 3, 11, 2], [11, 4, 7, 11, 2, 4, 2, 0, 4], [9, 0, 1, 8, 4, 7, 2, 3, 11], [4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1], [3, 10, 1, 3, 11, 10, 7, 8, 4], [1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4], [4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3], [4, 7, 11, 4, 11, 9, 9, 11, 10], [9, 5, 4], [9, 5, 4, 0, 8, 3], [0, 5, 4, 1, 5, 0], [8, 5, 4, 8, 3, 5, 3, 1, 5], [1, 2, 10, 9, 5, 4], [3, 0, 8, 1, 2, 10, 4, 9, 5], [5, 2, 10, 5, 4, 2, 4, 0, 2], [2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8], [9, 5, 4, 2, 3, 11], [0, 11, 2, 0, 8, 11, 4, 9, 5], [0, 5, 4, 0, 1, 5, 2, 3, 11], [2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5], [10, 3, 11, 10, 1, 3, 9, 5, 4], [4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10], [5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3], [5, 4, 8, 5, 8, 10, 10, 8, 11], [9, 7, 8, 5, 7, 9], [9, 3, 0, 9, 5, 3, 5, 7, 3], [0, 7, 8, 0, 1, 7, 1, 5, 7], [1, 5, 3, 3, 5, 7], [9, 7, 8, 9, 5, 7, 10, 1, 2], [10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3], [8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2], [2, 10, 5, 2, 5, 3, 3, 5, 7], [7, 9, 5, 7, 8, 9, 3, 11, 2], [9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11], [2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7], [11, 2, 1, 11, 1, 7, 7, 1, 5], [9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11], [5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0], [11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0], [11, 10, 5, 7, 11, 5], [10, 6, 5], [0, 8, 3, 5, 10, 6], [9, 0, 1, 5, 10, 6], [1, 8, 3, 1, 9, 8, 5, 10, 6], [1, 6, 5, 2, 6, 1], [1, 6, 5, 1, 2, 6, 3, 0, 8], [9, 6, 5, 9, 0, 6, 0, 2, 6], [5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8], [2, 3, 11, 10, 6, 5], [11, 0, 8, 11, 2, 0, 10, 6, 5], [0, 1, 9, 2, 3, 11, 5, 10, 6], [5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11], [6, 3, 11, 6, 5, 3, 5, 1, 3], [0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6], [3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9], [6, 5, 9, 6, 9, 11, 11, 9, 8], [5, 10, 6, 4, 7, 8], [4, 3, 0, 4, 7, 3, 6, 5, 10], [1, 9, 0, 5, 10, 6, 8, 4, 7], [10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4], [6, 1, 2, 6, 5, 1, 4, 7, 8], [1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7], [8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6], [7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9], [3, 11, 2, 7, 8, 4, 10, 6, 5], [5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11], [0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6], [9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6], [8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6], [5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11], [0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7], [6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9], [10, 4, 9, 6, 4, 10], [4, 10, 6, 4, 9, 10, 0, 8, 3], [10, 0, 1, 10, 6, 0, 6, 4, 0], [8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10], [1, 4, 9, 1, 2, 4, 2, 6, 4], [3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4], [0, 2, 4, 4, 2, 6], [8, 3, 2, 8, 2, 4, 4, 2, 6], [10, 4, 9, 10, 6, 4, 11, 2, 3], [0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6], [3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10], [6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1], [9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3], [8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1], [3, 11, 6, 3, 6, 0, 0, 6, 4], [6, 4, 8, 11, 6, 8], [7, 10, 6, 7, 8, 10, 8, 9, 10], [0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10], [10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0], [10, 6, 7, 10, 7, 1, 1, 7, 3], [1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7], [2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9], [7, 8, 0, 7, 0, 6, 6, 0, 2], [7, 3, 2, 6, 7, 2], [2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7], [2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7], [1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11], [11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1], [8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6], [0, 9, 1, 11, 6, 7], [7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0], [7, 11, 6], [7, 6, 11], [3, 0, 8, 11, 7, 6], [0, 1, 9, 11, 7, 6], [8, 1, 9, 8, 3, 1, 11, 7, 6], [10, 1, 2, 6, 11, 7], [1, 2, 10, 3, 0, 8, 6, 11, 7], [2, 9, 0, 2, 10, 9, 6, 11, 7], [6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8], [7, 2, 3, 6, 2, 7], [7, 0, 8, 7, 6, 0, 6, 2, 0], [2, 7, 6, 2, 3, 7, 0, 1, 9], [1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6], [10, 7, 6, 10, 1, 7, 1, 3, 7], [10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8], [0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7], [7, 6, 10, 7, 10, 8, 8, 10, 9], [6, 8, 4, 11, 8, 6], [3, 6, 11, 3, 0, 6, 0, 4, 6], [8, 6, 11, 8, 4, 6, 9, 0, 1], [9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6], [6, 8, 4, 6, 11, 8, 2, 10, 1], [1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6], [4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9], [10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3], [8, 2, 3, 8, 4, 2, 4, 6, 2], [0, 4, 2, 4, 6, 2], [1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8], [1, 9, 4, 1, 4, 2, 2, 4, 6], [8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1], [10, 1, 0, 10, 0, 6, 6, 0, 4], [4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3], [10, 9, 4, 6, 10, 4], [4, 9, 5, 7, 6, 11], [0, 8, 3, 4, 9, 5, 11, 7, 6], [5, 0, 1, 5, 4, 0, 7, 6, 11], [11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5], [9, 5, 4, 10, 1, 2, 7, 6, 11], [6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5], [7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2], [3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6], [7, 2, 3, 7, 6, 2, 5, 4, 9], [9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7], [3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0], [6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8], [9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7], [1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4], [4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10], [7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10], [6, 9, 5, 6, 11, 9, 11, 8, 9], [3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5], [0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11], [6, 11, 3, 6, 3, 5, 5, 3, 1], [1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6], [0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10], [11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5], [6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3], [5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2], [9, 5, 6, 9, 6, 0, 0, 6, 2], [1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8], [1, 5, 6, 2, 1, 6], [1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6], [10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0], [0, 3, 8, 5, 6, 10], [10, 5, 6], [11, 5, 10, 7, 5, 11], [11, 5, 10, 11, 7, 5, 8, 3, 0], [5, 11, 7, 5, 10, 11, 1, 9, 0], [10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1], [11, 1, 2, 11, 7, 1, 7, 5, 1], [0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11], [9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7], [7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2], [2, 5, 10, 2, 3, 5, 3, 7, 5], [8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5], [9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2], [9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2], [1, 3, 5, 3, 7, 5], [0, 8, 7, 0, 7, 1, 1, 7, 5], [9, 0, 3, 9, 3, 5, 5, 3, 7], [9, 8, 7, 5, 9, 7], [5, 8, 4, 5, 10, 8, 10, 11, 8], [5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0], [0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5], [10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4], [2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8], [0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11], [0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5], [9, 4, 5, 2, 11, 3], [2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4], [5, 10, 2, 5, 2, 4, 4, 2, 0], [3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9], [5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2], [8, 4, 5, 8, 5, 3, 3, 5, 1], [0, 4, 5, 1, 0, 5], [8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5], [9, 4, 5], [4, 11, 7, 4, 9, 11, 9, 10, 11], [0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11], [1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11], [3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4], [4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2], [9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3], [11, 7, 4, 11, 4, 2, 2, 4, 0], [11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4], [2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9], [9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7], [3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10], [1, 10, 2, 8, 7, 4], [4, 9, 1, 4, 1, 7, 7, 1, 3], [4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1], [4, 0, 3, 7, 4, 3], [4, 8, 7], [9, 10, 8, 10, 11, 8], [3, 0, 9, 3, 9, 11, 11, 9, 10], [0, 1, 10, 0, 10, 8, 8, 10, 11], [3, 1, 10, 11, 3, 10], [1, 2, 11, 1, 11, 9, 9, 11, 8], [3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9], [0, 2, 11, 8, 0, 11], [3, 2, 11], [2, 3, 8, 2, 8, 10, 10, 8, 9], [9, 10, 2, 0, 9, 2], [2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8], [1, 10, 2], [1, 3, 8, 9, 1, 8], [0, 9, 1], [0, 3, 8], []],
      cubeVerts = [[0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0], [0, 0, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1]],
      edgeIndex = [[0, 1], [1, 2], [2, 3], [3, 0], [4, 5], [5, 6], [6, 7], [7, 4], [0, 4], [1, 5], [2, 6], [3, 7]];
  return function (data, dims) {
    var vertices = [],
        faces = [],
        n = 0,
        grid = new Float32Array(8),
        edges = new Int32Array(12),
        x = new Int32Array(3); //March over the volume

    for (x[2] = 0; x[2] < dims[2] - 1; ++x[2], n += dims[0]) {
      for (x[1] = 0; x[1] < dims[1] - 1; ++x[1], ++n) {
        for (x[0] = 0; x[0] < dims[0] - 1; ++x[0], ++n) {
          //For each cell, compute cube mask
          var cube_index = 0;

          for (var i = 0; i < 8; ++i) {
            var v = cubeVerts[i],
                s = data[n + v[0] + dims[0] * (v[1] + dims[1] * v[2])];
            grid[i] = s;
            cube_index |= s > 0 ? 1 << i : 0;
          } //Compute vertices


          var edge_mask = edgeTable[cube_index];

          if (edge_mask === 0) {
            continue;
          }

          for (var i = 0; i < 12; ++i) {
            if ((edge_mask & 1 << i) === 0) {
              continue;
            }

            edges[i] = vertices.length;
            var nv = [0, 0, 0],
                e = edgeIndex[i],
                p0 = cubeVerts[e[0]],
                p1 = cubeVerts[e[1]],
                a = grid[e[0]],
                b = grid[e[1]],
                d = a - b,
                t = 0;

            if (Math.abs(d) > 1e-6) {
              t = a / d;
            }

            for (var j = 0; j < 3; ++j) {
              nv[j] = x[j] + p0[j] + t * (p1[j] - p0[j]);
            }

            vertices.push(nv);
          } //Add faces


          var f = triTable[cube_index];

          for (var i = 0; i < f.length; i += 3) {
            faces.push([edges[f[i]], edges[f[i + 1]], edges[f[i + 2]]]);
          }
        }
      }
    }

    return {
      vertices: vertices,
      faces: faces
    };
  };
}();

/* harmony default export */ __webpack_exports__["default"] = (MarchingCubes);

/***/ }),

/***/ "./src/ChemDoodle/lib/gl-matrix.js":
/*!*****************************************!*\
  !*** ./src/ChemDoodle/lib/gl-matrix.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * @fileoverview gl-matrix - High performance matrix and vector operations for WebGL
 * @author Brandon Jones
 * @author Colin MacKenzie IV
 * @version 1.3.7
 */

/*
 * Copyright (c) 2012 Brandon Jones, Colin MacKenzie IV
 *
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 *
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 *
 *    1. The origin of this software must not be misrepresented; you must not
 *    claim that you wrote the original software. If you use this software
 *    in a product, an acknowledgment in the product documentation would be
 *    appreciated but is not required.
 *
 *    2. Altered source versions must be plainly marked as such, and must not
 *    be misrepresented as being the original software.
 *
 *    3. This notice may not be removed or altered from any source
 *    distribution.
 */
// Updated to use a modification of the "returnExportsGlobal" pattern from https://github.com/umdjs/umd
(function (root, factory) {
  if (( false ? undefined : _typeof(exports)) === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like enviroments that support module.exports,
    // like Node.
    module.exports = factory(global);
  } else if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return factory(root);
    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this, function (root) {
  "use strict"; // Tweak to your liking

  var FLOAT_EPSILON = 0.000001;
  var glMath = {};

  (function () {
    if (typeof Float32Array != 'undefined') {
      var y = new Float32Array(1);
      var i = new Int32Array(y.buffer);
      /**
       * Fast way to calculate the inverse square root,
       * see http://jsperf.com/inverse-square-root/5
       *
       * If typed arrays are not available, a slower
       * implementation will be used.
       *
       * @param {Number} number the number
       * @returns {Number} Inverse square root
       */

      glMath.invsqrt = function (number) {
        var x2 = number * 0.5;
        y[0] = number;
        var threehalfs = 1.5;
        i[0] = 0x5f3759df - (i[0] >> 1);
        var number2 = y[0];
        return number2 * (threehalfs - x2 * number2 * number2);
      };
    } else {
      glMath.invsqrt = function (number) {
        return 1.0 / Math.sqrt(number);
      };
    }
  })();
  /**
   * @class System-specific optimal array type
   * @name MatrixArray
   */


  var MatrixArray = null; // explicitly sets and returns the type of array to use within glMatrix

  function setMatrixArrayType(type) {
    MatrixArray = type;
    return MatrixArray;
  } // auto-detects and returns the best type of array to use within glMatrix, falling
  // back to Array if typed arrays are unsupported


  function determineMatrixArrayType() {
    MatrixArray = typeof Float32Array !== 'undefined' ? Float32Array : Array;
    return MatrixArray;
  }

  determineMatrixArrayType();
  /**
   * @class 3 Dimensional Vector
   * @name vec3
   */

  var vec3 = {};
  /**
   * Creates a new instance of a vec3 using the default array type
   * Any javascript array-like objects containing at least 3 numeric elements can serve as a vec3
   *
   * @param {vec3} [vec] vec3 containing values to initialize with
   *
   * @returns {vec3} New vec3
   */

  vec3.create = function (vec) {
    var dest = new MatrixArray(3);

    if (vec) {
      dest[0] = vec[0];
      dest[1] = vec[1];
      dest[2] = vec[2];
    } else {
      dest[0] = dest[1] = dest[2] = 0;
    }

    return dest;
  };
  /**
   * Creates a new instance of a vec3, initializing it with the given arguments
   *
   * @param {number} x X value
   * @param {number} y Y value
   * @param {number} z Z value
    * @returns {vec3} New vec3
   */


  vec3.createFrom = function (x, y, z) {
    var dest = new MatrixArray(3);
    dest[0] = x;
    dest[1] = y;
    dest[2] = z;
    return dest;
  };
  /**
   * Copies the values of one vec3 to another
   *
   * @param {vec3} vec vec3 containing values to copy
   * @param {vec3} dest vec3 receiving copied values
   *
   * @returns {vec3} dest
   */


  vec3.set = function (vec, dest) {
    dest[0] = vec[0];
    dest[1] = vec[1];
    dest[2] = vec[2];
    return dest;
  };
  /**
   * Compares two vectors for equality within a certain margin of error
   *
   * @param {vec3} a First vector
   * @param {vec3} b Second vector
   *
   * @returns {Boolean} True if a is equivalent to b
   */


  vec3.equal = function (a, b) {
    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON;
  };
  /**
   * Performs a vector addition
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */


  vec3.add = function (vec, vec2, dest) {
    if (!dest || vec === dest) {
      vec[0] += vec2[0];
      vec[1] += vec2[1];
      vec[2] += vec2[2];
      return vec;
    }

    dest[0] = vec[0] + vec2[0];
    dest[1] = vec[1] + vec2[1];
    dest[2] = vec[2] + vec2[2];
    return dest;
  };
  /**
   * Performs a vector subtraction
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */


  vec3.subtract = function (vec, vec2, dest) {
    if (!dest || vec === dest) {
      vec[0] -= vec2[0];
      vec[1] -= vec2[1];
      vec[2] -= vec2[2];
      return vec;
    }

    dest[0] = vec[0] - vec2[0];
    dest[1] = vec[1] - vec2[1];
    dest[2] = vec[2] - vec2[2];
    return dest;
  };
  /**
   * Performs a vector multiplication
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */


  vec3.multiply = function (vec, vec2, dest) {
    if (!dest || vec === dest) {
      vec[0] *= vec2[0];
      vec[1] *= vec2[1];
      vec[2] *= vec2[2];
      return vec;
    }

    dest[0] = vec[0] * vec2[0];
    dest[1] = vec[1] * vec2[1];
    dest[2] = vec[2] * vec2[2];
    return dest;
  };
  /**
   * Negates the components of a vec3
   *
   * @param {vec3} vec vec3 to negate
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */


  vec3.negate = function (vec, dest) {
    if (!dest) {
      dest = vec;
    }

    dest[0] = -vec[0];
    dest[1] = -vec[1];
    dest[2] = -vec[2];
    return dest;
  };
  /**
   * Multiplies the components of a vec3 by a scalar value
   *
   * @param {vec3} vec vec3 to scale
   * @param {number} val Value to scale by
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */


  vec3.scale = function (vec, val, dest) {
    if (!dest || vec === dest) {
      vec[0] *= val;
      vec[1] *= val;
      vec[2] *= val;
      return vec;
    }

    dest[0] = vec[0] * val;
    dest[1] = vec[1] * val;
    dest[2] = vec[2] * val;
    return dest;
  };
  /**
   * Generates a unit vector of the same direction as the provided vec3
   * If vector length is 0, returns [0, 0, 0]
   *
   * @param {vec3} vec vec3 to normalize
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */


  vec3.normalize = function (vec, dest) {
    if (!dest) {
      dest = vec;
    }

    var x = vec[0],
        y = vec[1],
        z = vec[2],
        len = Math.sqrt(x * x + y * y + z * z);

    if (!len) {
      dest[0] = 0;
      dest[1] = 0;
      dest[2] = 0;
      return dest;
    } else if (len === 1) {
      dest[0] = x;
      dest[1] = y;
      dest[2] = z;
      return dest;
    }

    len = 1 / len;
    dest[0] = x * len;
    dest[1] = y * len;
    dest[2] = z * len;
    return dest;
  };
  /**
   * Generates the cross product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */


  vec3.cross = function (vec, vec2, dest) {
    if (!dest) {
      dest = vec;
    }

    var x = vec[0],
        y = vec[1],
        z = vec[2],
        x2 = vec2[0],
        y2 = vec2[1],
        z2 = vec2[2];
    dest[0] = y * z2 - z * y2;
    dest[1] = z * x2 - x * z2;
    dest[2] = x * y2 - y * x2;
    return dest;
  };
  /**
   * Caclulates the length of a vec3
   *
   * @param {vec3} vec vec3 to calculate length of
   *
   * @returns {number} Length of vec
   */


  vec3.length = function (vec) {
    var x = vec[0],
        y = vec[1],
        z = vec[2];
    return Math.sqrt(x * x + y * y + z * z);
  };
  /**
   * Caclulates the squared length of a vec3
   *
   * @param {vec3} vec vec3 to calculate squared length of
   *
   * @returns {number} Squared Length of vec
   */


  vec3.squaredLength = function (vec) {
    var x = vec[0],
        y = vec[1],
        z = vec[2];
    return x * x + y * y + z * z;
  };
  /**
   * Caclulates the dot product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   *
   * @returns {number} Dot product of vec and vec2
   */


  vec3.dot = function (vec, vec2) {
    return vec[0] * vec2[0] + vec[1] * vec2[1] + vec[2] * vec2[2];
  };
  /**
   * Generates a unit vector pointing from one vector to another
   *
   * @param {vec3} vec Origin vec3
   * @param {vec3} vec2 vec3 to point to
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */


  vec3.direction = function (vec, vec2, dest) {
    if (!dest) {
      dest = vec;
    }

    var x = vec[0] - vec2[0],
        y = vec[1] - vec2[1],
        z = vec[2] - vec2[2],
        len = Math.sqrt(x * x + y * y + z * z);

    if (!len) {
      dest[0] = 0;
      dest[1] = 0;
      dest[2] = 0;
      return dest;
    }

    len = 1 / len;
    dest[0] = x * len;
    dest[1] = y * len;
    dest[2] = z * len;
    return dest;
  };
  /**
   * Performs a linear interpolation between two vec3
   *
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   * @param {number} lerp Interpolation amount between the two inputs
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */


  vec3.lerp = function (vec, vec2, lerp, dest) {
    if (!dest) {
      dest = vec;
    }

    dest[0] = vec[0] + lerp * (vec2[0] - vec[0]);
    dest[1] = vec[1] + lerp * (vec2[1] - vec[1]);
    dest[2] = vec[2] + lerp * (vec2[2] - vec[2]);
    return dest;
  };
  /**
   * Calculates the euclidian distance between two vec3
   *
   * Params:
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   *
   * @returns {number} Distance between vec and vec2
   */


  vec3.dist = function (vec, vec2) {
    var x = vec2[0] - vec[0],
        y = vec2[1] - vec[1],
        z = vec2[2] - vec[2];
    return Math.sqrt(x * x + y * y + z * z);
  }; // Pre-allocated to prevent unecessary garbage collection


  var unprojectMat = null;
  var unprojectVec = new MatrixArray(4);
  /**
   * Projects the specified vec3 from screen space into object space
   * Based on the <a href="http://webcvs.freedesktop.org/mesa/Mesa/src/glu/mesa/project.c?revision=1.4&view=markup">Mesa gluUnProject implementation</a>
   *
   * @param {vec3} vec Screen-space vector to project
   * @param {mat4} view View matrix
   * @param {mat4} proj Projection matrix
   * @param {vec4} viewport Viewport as given to gl.viewport [x, y, width, height]
   * @param {vec3} [dest] vec3 receiving unprojected result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */

  vec3.unproject = function (vec, view, proj, viewport, dest) {
    if (!dest) {
      dest = vec;
    }

    if (!unprojectMat) {
      unprojectMat = mat4.create();
    }

    var m = unprojectMat;
    var v = unprojectVec;
    v[0] = (vec[0] - viewport[0]) * 2.0 / viewport[2] - 1.0;
    v[1] = (vec[1] - viewport[1]) * 2.0 / viewport[3] - 1.0;
    v[2] = 2.0 * vec[2] - 1.0;
    v[3] = 1.0;
    mat4.multiply(proj, view, m);

    if (!mat4.inverse(m)) {
      return null;
    }

    mat4.multiplyVec4(m, v);

    if (v[3] === 0.0) {
      return null;
    }

    dest[0] = v[0] / v[3];
    dest[1] = v[1] / v[3];
    dest[2] = v[2] / v[3];
    return dest;
  };

  var xUnitVec3 = vec3.createFrom(1, 0, 0);
  var yUnitVec3 = vec3.createFrom(0, 1, 0);
  var zUnitVec3 = vec3.createFrom(0, 0, 1);
  var tmpvec3 = vec3.create();
  /**
   * Generates a quaternion of rotation between two given normalized vectors
   *
   * @param {vec3} a Normalized source vector
   * @param {vec3} b Normalized target vector
   * @param {quat4} [dest] quat4 receiving operation result.
   *
   * @returns {quat4} dest if specified, a new quat4 otherwise
   */

  vec3.rotationTo = function (a, b, dest) {
    if (!dest) {
      dest = quat4.create();
    }

    var d = vec3.dot(a, b);
    var axis = tmpvec3;

    if (d >= 1.0) {
      quat4.set(identityQuat4, dest);
    } else if (d < 0.000001 - 1.0) {
      vec3.cross(xUnitVec3, a, axis);
      if (vec3.length(axis) < 0.000001) vec3.cross(yUnitVec3, a, axis);
      if (vec3.length(axis) < 0.000001) vec3.cross(zUnitVec3, a, axis);
      vec3.normalize(axis);
      quat4.fromAngleAxis(Math.PI, axis, dest);
    } else {
      var s = Math.sqrt((1.0 + d) * 2.0);
      var sInv = 1.0 / s;
      vec3.cross(a, b, axis);
      dest[0] = axis[0] * sInv;
      dest[1] = axis[1] * sInv;
      dest[2] = axis[2] * sInv;
      dest[3] = s * 0.5;
      quat4.normalize(dest);
    }

    if (dest[3] > 1.0) dest[3] = 1.0;else if (dest[3] < -1.0) dest[3] = -1.0;
    return dest;
  };
  /**
   * Returns a string representation of a vector
   *
   * @param {vec3} vec Vector to represent as a string
   *
   * @returns {string} String representation of vec
   */


  vec3.str = function (vec) {
    return '[' + vec[0] + ', ' + vec[1] + ', ' + vec[2] + ']';
  };
  /**
   * @class 3x3 Matrix
   * @name mat3
   */


  var mat3 = {};
  /**
   * Creates a new instance of a mat3 using the default array type
   * Any javascript array-like object containing at least 9 numeric elements can serve as a mat3
   *
   * @param {mat3} [mat] mat3 containing values to initialize with
   *
   * @returns {mat3} New mat3
   */

  mat3.create = function (mat) {
    var dest = new MatrixArray(9);

    if (mat) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
    } else {
      dest[0] = dest[1] = dest[2] = dest[3] = dest[4] = dest[5] = dest[6] = dest[7] = dest[8] = 0;
    }

    return dest;
  };
  /**
   * Creates a new instance of a mat3, initializing it with the given arguments
   *
   * @param {number} m00
   * @param {number} m01
   * @param {number} m02
   * @param {number} m10
   * @param {number} m11
   * @param {number} m12
   * @param {number} m20
   * @param {number} m21
   * @param {number} m22
    * @returns {mat3} New mat3
   */


  mat3.createFrom = function (m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    var dest = new MatrixArray(9);
    dest[0] = m00;
    dest[1] = m01;
    dest[2] = m02;
    dest[3] = m10;
    dest[4] = m11;
    dest[5] = m12;
    dest[6] = m20;
    dest[7] = m21;
    dest[8] = m22;
    return dest;
  };
  /**
   * Calculates the determinant of a mat3
   *
   * @param {mat3} mat mat3 to calculate determinant of
   *
   * @returns {Number} determinant of mat
   */


  mat3.determinant = function (mat) {
    var a00 = mat[0],
        a01 = mat[1],
        a02 = mat[2],
        a10 = mat[3],
        a11 = mat[4],
        a12 = mat[5],
        a20 = mat[6],
        a21 = mat[7],
        a22 = mat[8];
    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
  };
  /**
   * Calculates the inverse matrix of a mat3
   *
   * @param {mat3} mat mat3 to calculate inverse of
   * @param {mat3} [dest] mat3 receiving inverse matrix. If not specified result is written to mat
   *
   * @param {mat3} dest is specified, mat otherwise, null if matrix cannot be inverted
   */


  mat3.inverse = function (mat, dest) {
    var a00 = mat[0],
        a01 = mat[1],
        a02 = mat[2],
        a10 = mat[3],
        a11 = mat[4],
        a12 = mat[5],
        a20 = mat[6],
        a21 = mat[7],
        a22 = mat[8],
        b01 = a22 * a11 - a12 * a21,
        b11 = -a22 * a10 + a12 * a20,
        b21 = a21 * a10 - a11 * a20,
        d = a00 * b01 + a01 * b11 + a02 * b21,
        id;

    if (!d) {
      return null;
    }

    id = 1 / d;

    if (!dest) {
      dest = mat3.create();
    }

    dest[0] = b01 * id;
    dest[1] = (-a22 * a01 + a02 * a21) * id;
    dest[2] = (a12 * a01 - a02 * a11) * id;
    dest[3] = b11 * id;
    dest[4] = (a22 * a00 - a02 * a20) * id;
    dest[5] = (-a12 * a00 + a02 * a10) * id;
    dest[6] = b21 * id;
    dest[7] = (-a21 * a00 + a01 * a20) * id;
    dest[8] = (a11 * a00 - a01 * a10) * id;
    return dest;
  };
  /**
   * Performs a matrix multiplication
   *
   * @param {mat3} mat First operand
   * @param {mat3} mat2 Second operand
   * @param {mat3} [dest] mat3 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat3} dest if specified, mat otherwise
   */


  mat3.multiply = function (mat, mat2, dest) {
    if (!dest) {
      dest = mat;
    } // Cache the matrix values (makes for huge speed increases!)


    var a00 = mat[0],
        a01 = mat[1],
        a02 = mat[2],
        a10 = mat[3],
        a11 = mat[4],
        a12 = mat[5],
        a20 = mat[6],
        a21 = mat[7],
        a22 = mat[8],
        b00 = mat2[0],
        b01 = mat2[1],
        b02 = mat2[2],
        b10 = mat2[3],
        b11 = mat2[4],
        b12 = mat2[5],
        b20 = mat2[6],
        b21 = mat2[7],
        b22 = mat2[8];
    dest[0] = b00 * a00 + b01 * a10 + b02 * a20;
    dest[1] = b00 * a01 + b01 * a11 + b02 * a21;
    dest[2] = b00 * a02 + b01 * a12 + b02 * a22;
    dest[3] = b10 * a00 + b11 * a10 + b12 * a20;
    dest[4] = b10 * a01 + b11 * a11 + b12 * a21;
    dest[5] = b10 * a02 + b11 * a12 + b12 * a22;
    dest[6] = b20 * a00 + b21 * a10 + b22 * a20;
    dest[7] = b20 * a01 + b21 * a11 + b22 * a21;
    dest[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return dest;
  };
  /**
   * Transforms the vec2 according to the given mat3.
   *
   * @param {mat3} matrix mat3 to multiply against
   * @param {vec2} vec    the vector to multiply
   * @param {vec2} [dest] an optional receiving vector. If not given, vec is used.
   *
   * @returns {vec2} The multiplication result
   **/


  mat3.multiplyVec2 = function (matrix, vec, dest) {
    if (!dest) dest = vec;
    var x = vec[0],
        y = vec[1];
    dest[0] = x * matrix[0] + y * matrix[3] + matrix[6];
    dest[1] = x * matrix[1] + y * matrix[4] + matrix[7];
    return dest;
  };
  /**
   * Transforms the vec3 according to the given mat3
   *
   * @param {mat3} matrix mat3 to multiply against
   * @param {vec3} vec    the vector to multiply
   * @param {vec3} [dest] an optional receiving vector. If not given, vec is used.
   *
   * @returns {vec3} The multiplication result
   **/


  mat3.multiplyVec3 = function (matrix, vec, dest) {
    if (!dest) dest = vec;
    var x = vec[0],
        y = vec[1],
        z = vec[2];
    dest[0] = x * matrix[0] + y * matrix[3] + z * matrix[6];
    dest[1] = x * matrix[1] + y * matrix[4] + z * matrix[7];
    dest[2] = x * matrix[2] + y * matrix[5] + z * matrix[8];
    return dest;
  };
  /**
   * Copies the values of one mat3 to another
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat3} dest mat3 receiving copied values
   *
   * @returns {mat3} dest
   */


  mat3.set = function (mat, dest) {
    dest[0] = mat[0];
    dest[1] = mat[1];
    dest[2] = mat[2];
    dest[3] = mat[3];
    dest[4] = mat[4];
    dest[5] = mat[5];
    dest[6] = mat[6];
    dest[7] = mat[7];
    dest[8] = mat[8];
    return dest;
  };
  /**
   * Compares two matrices for equality within a certain margin of error
   *
   * @param {mat3} a First matrix
   * @param {mat3} b Second matrix
   *
   * @returns {Boolean} True if a is equivalent to b
   */


  mat3.equal = function (a, b) {
    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON && Math.abs(a[3] - b[3]) < FLOAT_EPSILON && Math.abs(a[4] - b[4]) < FLOAT_EPSILON && Math.abs(a[5] - b[5]) < FLOAT_EPSILON && Math.abs(a[6] - b[6]) < FLOAT_EPSILON && Math.abs(a[7] - b[7]) < FLOAT_EPSILON && Math.abs(a[8] - b[8]) < FLOAT_EPSILON;
  };
  /**
   * Sets a mat3 to an identity matrix
   *
   * @param {mat3} dest mat3 to set
   *
   * @returns dest if specified, otherwise a new mat3
   */


  mat3.identity = function (dest) {
    if (!dest) {
      dest = mat3.create();
    }

    dest[0] = 1;
    dest[1] = 0;
    dest[2] = 0;
    dest[3] = 0;
    dest[4] = 1;
    dest[5] = 0;
    dest[6] = 0;
    dest[7] = 0;
    dest[8] = 1;
    return dest;
  };
  /**
   * Transposes a mat3 (flips the values over the diagonal)
   *
   * Params:
   * @param {mat3} mat mat3 to transpose
   * @param {mat3} [dest] mat3 receiving transposed values. If not specified result is written to mat
   *
   * @returns {mat3} dest is specified, mat otherwise
   */


  mat3.transpose = function (mat, dest) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (!dest || mat === dest) {
      var a01 = mat[1],
          a02 = mat[2],
          a12 = mat[5];
      mat[1] = mat[3];
      mat[2] = mat[6];
      mat[3] = a01;
      mat[5] = mat[7];
      mat[6] = a02;
      mat[7] = a12;
      return mat;
    }

    dest[0] = mat[0];
    dest[1] = mat[3];
    dest[2] = mat[6];
    dest[3] = mat[1];
    dest[4] = mat[4];
    dest[5] = mat[7];
    dest[6] = mat[2];
    dest[7] = mat[5];
    dest[8] = mat[8];
    return dest;
  };
  /**
   * Copies the elements of a mat3 into the upper 3x3 elements of a mat4
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */


  mat3.toMat4 = function (mat, dest) {
    if (!dest) {
      dest = mat4.create();
    }

    dest[15] = 1;
    dest[14] = 0;
    dest[13] = 0;
    dest[12] = 0;
    dest[11] = 0;
    dest[10] = mat[8];
    dest[9] = mat[7];
    dest[8] = mat[6];
    dest[7] = 0;
    dest[6] = mat[5];
    dest[5] = mat[4];
    dest[4] = mat[3];
    dest[3] = 0;
    dest[2] = mat[2];
    dest[1] = mat[1];
    dest[0] = mat[0];
    return dest;
  };
  /**
   * Returns a string representation of a mat3
   *
   * @param {mat3} mat mat3 to represent as a string
   *
   * @param {string} String representation of mat
   */


  mat3.str = function (mat) {
    return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] + ', ' + mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] + ', ' + mat[8] + ']';
  };
  /**
   * @class 4x4 Matrix
   * @name mat4
   */


  var mat4 = {};
  /**
   * Creates a new instance of a mat4 using the default array type
   * Any javascript array-like object containing at least 16 numeric elements can serve as a mat4
   *
   * @param {mat4} [mat] mat4 containing values to initialize with
   *
   * @returns {mat4} New mat4
   */

  mat4.create = function (mat) {
    var dest = new MatrixArray(16);

    if (mat) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
    }

    return dest;
  };
  /**
   * Creates a new instance of a mat4, initializing it with the given arguments
   *
   * @param {number} m00
   * @param {number} m01
   * @param {number} m02
   * @param {number} m03
   * @param {number} m10
   * @param {number} m11
   * @param {number} m12
   * @param {number} m13
   * @param {number} m20
   * @param {number} m21
   * @param {number} m22
   * @param {number} m23
   * @param {number} m30
   * @param {number} m31
   * @param {number} m32
   * @param {number} m33
    * @returns {mat4} New mat4
   */


  mat4.createFrom = function (m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    var dest = new MatrixArray(16);
    dest[0] = m00;
    dest[1] = m01;
    dest[2] = m02;
    dest[3] = m03;
    dest[4] = m10;
    dest[5] = m11;
    dest[6] = m12;
    dest[7] = m13;
    dest[8] = m20;
    dest[9] = m21;
    dest[10] = m22;
    dest[11] = m23;
    dest[12] = m30;
    dest[13] = m31;
    dest[14] = m32;
    dest[15] = m33;
    return dest;
  };
  /**
   * Copies the values of one mat4 to another
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} dest mat4 receiving copied values
   *
   * @returns {mat4} dest
   */


  mat4.set = function (mat, dest) {
    dest[0] = mat[0];
    dest[1] = mat[1];
    dest[2] = mat[2];
    dest[3] = mat[3];
    dest[4] = mat[4];
    dest[5] = mat[5];
    dest[6] = mat[6];
    dest[7] = mat[7];
    dest[8] = mat[8];
    dest[9] = mat[9];
    dest[10] = mat[10];
    dest[11] = mat[11];
    dest[12] = mat[12];
    dest[13] = mat[13];
    dest[14] = mat[14];
    dest[15] = mat[15];
    return dest;
  };
  /**
   * Compares two matrices for equality within a certain margin of error
   *
   * @param {mat4} a First matrix
   * @param {mat4} b Second matrix
   *
   * @returns {Boolean} True if a is equivalent to b
   */


  mat4.equal = function (a, b) {
    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON && Math.abs(a[3] - b[3]) < FLOAT_EPSILON && Math.abs(a[4] - b[4]) < FLOAT_EPSILON && Math.abs(a[5] - b[5]) < FLOAT_EPSILON && Math.abs(a[6] - b[6]) < FLOAT_EPSILON && Math.abs(a[7] - b[7]) < FLOAT_EPSILON && Math.abs(a[8] - b[8]) < FLOAT_EPSILON && Math.abs(a[9] - b[9]) < FLOAT_EPSILON && Math.abs(a[10] - b[10]) < FLOAT_EPSILON && Math.abs(a[11] - b[11]) < FLOAT_EPSILON && Math.abs(a[12] - b[12]) < FLOAT_EPSILON && Math.abs(a[13] - b[13]) < FLOAT_EPSILON && Math.abs(a[14] - b[14]) < FLOAT_EPSILON && Math.abs(a[15] - b[15]) < FLOAT_EPSILON;
  };
  /**
   * Sets a mat4 to an identity matrix
   *
   * @param {mat4} dest mat4 to set
   *
   * @returns {mat4} dest
   */


  mat4.identity = function (dest) {
    if (!dest) {
      dest = mat4.create();
    }

    dest[0] = 1;
    dest[1] = 0;
    dest[2] = 0;
    dest[3] = 0;
    dest[4] = 0;
    dest[5] = 1;
    dest[6] = 0;
    dest[7] = 0;
    dest[8] = 0;
    dest[9] = 0;
    dest[10] = 1;
    dest[11] = 0;
    dest[12] = 0;
    dest[13] = 0;
    dest[14] = 0;
    dest[15] = 1;
    return dest;
  };
  /**
   * Transposes a mat4 (flips the values over the diagonal)
   *
   * @param {mat4} mat mat4 to transpose
   * @param {mat4} [dest] mat4 receiving transposed values. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise
   */


  mat4.transpose = function (mat, dest) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (!dest || mat === dest) {
      var a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a12 = mat[6],
          a13 = mat[7],
          a23 = mat[11];
      mat[1] = mat[4];
      mat[2] = mat[8];
      mat[3] = mat[12];
      mat[4] = a01;
      mat[6] = mat[9];
      mat[7] = mat[13];
      mat[8] = a02;
      mat[9] = a12;
      mat[11] = mat[14];
      mat[12] = a03;
      mat[13] = a13;
      mat[14] = a23;
      return mat;
    }

    dest[0] = mat[0];
    dest[1] = mat[4];
    dest[2] = mat[8];
    dest[3] = mat[12];
    dest[4] = mat[1];
    dest[5] = mat[5];
    dest[6] = mat[9];
    dest[7] = mat[13];
    dest[8] = mat[2];
    dest[9] = mat[6];
    dest[10] = mat[10];
    dest[11] = mat[14];
    dest[12] = mat[3];
    dest[13] = mat[7];
    dest[14] = mat[11];
    dest[15] = mat[15];
    return dest;
  };
  /**
   * Calculates the determinant of a mat4
   *
   * @param {mat4} mat mat4 to calculate determinant of
   *
   * @returns {number} determinant of mat
   */


  mat4.determinant = function (mat) {
    // Cache the matrix values (makes for huge speed increases!)
    var a00 = mat[0],
        a01 = mat[1],
        a02 = mat[2],
        a03 = mat[3],
        a10 = mat[4],
        a11 = mat[5],
        a12 = mat[6],
        a13 = mat[7],
        a20 = mat[8],
        a21 = mat[9],
        a22 = mat[10],
        a23 = mat[11],
        a30 = mat[12],
        a31 = mat[13],
        a32 = mat[14],
        a33 = mat[15];
    return a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 + a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 + a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 + a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 + a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 + a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33;
  };
  /**
   * Calculates the inverse matrix of a mat4
   *
   * @param {mat4} mat mat4 to calculate inverse of
   * @param {mat4} [dest] mat4 receiving inverse matrix. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise, null if matrix cannot be inverted
   */


  mat4.inverse = function (mat, dest) {
    if (!dest) {
      dest = mat;
    } // Cache the matrix values (makes for huge speed increases!)


    var a00 = mat[0],
        a01 = mat[1],
        a02 = mat[2],
        a03 = mat[3],
        a10 = mat[4],
        a11 = mat[5],
        a12 = mat[6],
        a13 = mat[7],
        a20 = mat[8],
        a21 = mat[9],
        a22 = mat[10],
        a23 = mat[11],
        a30 = mat[12],
        a31 = mat[13],
        a32 = mat[14],
        a33 = mat[15],
        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,
        d = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06,
        invDet; // Calculate the determinant

    if (!d) {
      return null;
    }

    invDet = 1 / d;
    dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
    dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
    dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
    dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
    dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
    dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
    dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
    dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
    dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
    dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
    dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
    dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
    dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
    dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
    dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
    dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
    return dest;
  };
  /**
   * Copies the upper 3x3 elements of a mat4 into another mat4
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest is specified, a new mat4 otherwise
   */


  mat4.toRotationMat = function (mat, dest) {
    if (!dest) {
      dest = mat4.create();
    }

    dest[0] = mat[0];
    dest[1] = mat[1];
    dest[2] = mat[2];
    dest[3] = mat[3];
    dest[4] = mat[4];
    dest[5] = mat[5];
    dest[6] = mat[6];
    dest[7] = mat[7];
    dest[8] = mat[8];
    dest[9] = mat[9];
    dest[10] = mat[10];
    dest[11] = mat[11];
    dest[12] = 0;
    dest[13] = 0;
    dest[14] = 0;
    dest[15] = 1;
    return dest;
  };
  /**
   * Copies the upper 3x3 elements of a mat4 into a mat3
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat3} [dest] mat3 receiving copied values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise
   */


  mat4.toMat3 = function (mat, dest) {
    if (!dest) {
      dest = mat3.create();
    }

    dest[0] = mat[0];
    dest[1] = mat[1];
    dest[2] = mat[2];
    dest[3] = mat[4];
    dest[4] = mat[5];
    dest[5] = mat[6];
    dest[6] = mat[8];
    dest[7] = mat[9];
    dest[8] = mat[10];
    return dest;
  };
  /**
   * Calculates the inverse of the upper 3x3 elements of a mat4 and copies the result into a mat3
   * The resulting matrix is useful for calculating transformed normals
   *
   * Params:
   * @param {mat4} mat mat4 containing values to invert and copy
   * @param {mat3} [dest] mat3 receiving values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise, null if the matrix cannot be inverted
   */


  mat4.toInverseMat3 = function (mat, dest) {
    // Cache the matrix values (makes for huge speed increases!)
    var a00 = mat[0],
        a01 = mat[1],
        a02 = mat[2],
        a10 = mat[4],
        a11 = mat[5],
        a12 = mat[6],
        a20 = mat[8],
        a21 = mat[9],
        a22 = mat[10],
        b01 = a22 * a11 - a12 * a21,
        b11 = -a22 * a10 + a12 * a20,
        b21 = a21 * a10 - a11 * a20,
        d = a00 * b01 + a01 * b11 + a02 * b21,
        id;

    if (!d) {
      return null;
    }

    id = 1 / d;

    if (!dest) {
      dest = mat3.create();
    }

    dest[0] = b01 * id;
    dest[1] = (-a22 * a01 + a02 * a21) * id;
    dest[2] = (a12 * a01 - a02 * a11) * id;
    dest[3] = b11 * id;
    dest[4] = (a22 * a00 - a02 * a20) * id;
    dest[5] = (-a12 * a00 + a02 * a10) * id;
    dest[6] = b21 * id;
    dest[7] = (-a21 * a00 + a01 * a20) * id;
    dest[8] = (a11 * a00 - a01 * a10) * id;
    return dest;
  };
  /**
   * Performs a matrix multiplication
   *
   * @param {mat4} mat First operand
   * @param {mat4} mat2 Second operand
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */


  mat4.multiply = function (mat, mat2, dest) {
    if (!dest) {
      dest = mat;
    } // Cache the matrix values (makes for huge speed increases!)


    var a00 = mat[0],
        a01 = mat[1],
        a02 = mat[2],
        a03 = mat[3];
    var a10 = mat[4],
        a11 = mat[5],
        a12 = mat[6],
        a13 = mat[7];
    var a20 = mat[8],
        a21 = mat[9],
        a22 = mat[10],
        a23 = mat[11];
    var a30 = mat[12],
        a31 = mat[13],
        a32 = mat[14],
        a33 = mat[15]; // Cache only the current line of the second matrix

    var b0 = mat2[0],
        b1 = mat2[1],
        b2 = mat2[2],
        b3 = mat2[3];
    dest[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    dest[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    dest[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    dest[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = mat2[4];
    b1 = mat2[5];
    b2 = mat2[6];
    b3 = mat2[7];
    dest[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    dest[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    dest[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    dest[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = mat2[8];
    b1 = mat2[9];
    b2 = mat2[10];
    b3 = mat2[11];
    dest[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    dest[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    dest[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    dest[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = mat2[12];
    b1 = mat2[13];
    b2 = mat2[14];
    b3 = mat2[15];
    dest[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    dest[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    dest[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    dest[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return dest;
  };
  /**
   * Transforms a vec3 with the given matrix
   * 4th vector component is implicitly '1'
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */


  mat4.multiplyVec3 = function (mat, vec, dest) {
    if (!dest) {
      dest = vec;
    }

    var x = vec[0],
        y = vec[1],
        z = vec[2];
    dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
    dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
    dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
    return dest;
  };
  /**
   * Transforms a vec4 with the given matrix
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec4} vec vec4 to transform
   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec4} dest if specified, vec otherwise
   */


  mat4.multiplyVec4 = function (mat, vec, dest) {
    if (!dest) {
      dest = vec;
    }

    var x = vec[0],
        y = vec[1],
        z = vec[2],
        w = vec[3];
    dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12] * w;
    dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13] * w;
    dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14] * w;
    dest[3] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15] * w;
    return dest;
  };
  /**
   * Translates a matrix by the given vector
   *
   * @param {mat4} mat mat4 to translate
   * @param {vec3} vec vec3 specifying the translation
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */


  mat4.translate = function (mat, vec, dest) {
    var x = vec[0],
        y = vec[1],
        z = vec[2],
        a00,
        a01,
        a02,
        a03,
        a10,
        a11,
        a12,
        a13,
        a20,
        a21,
        a22,
        a23;

    if (!dest || mat === dest) {
      mat[12] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
      mat[13] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
      mat[14] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
      mat[15] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15];
      return mat;
    }

    a00 = mat[0];
    a01 = mat[1];
    a02 = mat[2];
    a03 = mat[3];
    a10 = mat[4];
    a11 = mat[5];
    a12 = mat[6];
    a13 = mat[7];
    a20 = mat[8];
    a21 = mat[9];
    a22 = mat[10];
    a23 = mat[11];
    dest[0] = a00;
    dest[1] = a01;
    dest[2] = a02;
    dest[3] = a03;
    dest[4] = a10;
    dest[5] = a11;
    dest[6] = a12;
    dest[7] = a13;
    dest[8] = a20;
    dest[9] = a21;
    dest[10] = a22;
    dest[11] = a23;
    dest[12] = a00 * x + a10 * y + a20 * z + mat[12];
    dest[13] = a01 * x + a11 * y + a21 * z + mat[13];
    dest[14] = a02 * x + a12 * y + a22 * z + mat[14];
    dest[15] = a03 * x + a13 * y + a23 * z + mat[15];
    return dest;
  };
  /**
   * Scales a matrix by the given vector
   *
   * @param {mat4} mat mat4 to scale
   * @param {vec3} vec vec3 specifying the scale for each axis
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @param {mat4} dest if specified, mat otherwise
   */


  mat4.scale = function (mat, vec, dest) {
    var x = vec[0],
        y = vec[1],
        z = vec[2];

    if (!dest || mat === dest) {
      mat[0] *= x;
      mat[1] *= x;
      mat[2] *= x;
      mat[3] *= x;
      mat[4] *= y;
      mat[5] *= y;
      mat[6] *= y;
      mat[7] *= y;
      mat[8] *= z;
      mat[9] *= z;
      mat[10] *= z;
      mat[11] *= z;
      return mat;
    }

    dest[0] = mat[0] * x;
    dest[1] = mat[1] * x;
    dest[2] = mat[2] * x;
    dest[3] = mat[3] * x;
    dest[4] = mat[4] * y;
    dest[5] = mat[5] * y;
    dest[6] = mat[6] * y;
    dest[7] = mat[7] * y;
    dest[8] = mat[8] * z;
    dest[9] = mat[9] * z;
    dest[10] = mat[10] * z;
    dest[11] = mat[11] * z;
    dest[12] = mat[12];
    dest[13] = mat[13];
    dest[14] = mat[14];
    dest[15] = mat[15];
    return dest;
  };
  /**
   * Rotates a matrix by the given angle around the specified axis
   * If rotating around a primary axis (X,Y,Z) one of the specialized rotation functions should be used instead for performance
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {vec3} axis vec3 representing the axis to rotate around
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */


  mat4.rotate = function (mat, angle, axis, dest) {
    var x = axis[0],
        y = axis[1],
        z = axis[2],
        len = Math.sqrt(x * x + y * y + z * z),
        s,
        c,
        t,
        a00,
        a01,
        a02,
        a03,
        a10,
        a11,
        a12,
        a13,
        a20,
        a21,
        a22,
        a23,
        b00,
        b01,
        b02,
        b10,
        b11,
        b12,
        b20,
        b21,
        b22;

    if (!len) {
      return null;
    }

    if (len !== 1) {
      len = 1 / len;
      x *= len;
      y *= len;
      z *= len;
    }

    s = Math.sin(angle);
    c = Math.cos(angle);
    t = 1 - c;
    a00 = mat[0];
    a01 = mat[1];
    a02 = mat[2];
    a03 = mat[3];
    a10 = mat[4];
    a11 = mat[5];
    a12 = mat[6];
    a13 = mat[7];
    a20 = mat[8];
    a21 = mat[9];
    a22 = mat[10];
    a23 = mat[11]; // Construct the elements of the rotation matrix

    b00 = x * x * t + c;
    b01 = y * x * t + z * s;
    b02 = z * x * t - y * s;
    b10 = x * y * t - z * s;
    b11 = y * y * t + c;
    b12 = z * y * t + x * s;
    b20 = x * z * t + y * s;
    b21 = y * z * t - x * s;
    b22 = z * z * t + c;

    if (!dest) {
      dest = mat;
    } else if (mat !== dest) {
      // If the source and destination differ, copy the unchanged last row
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
    } // Perform rotation-specific matrix multiplication


    dest[0] = a00 * b00 + a10 * b01 + a20 * b02;
    dest[1] = a01 * b00 + a11 * b01 + a21 * b02;
    dest[2] = a02 * b00 + a12 * b01 + a22 * b02;
    dest[3] = a03 * b00 + a13 * b01 + a23 * b02;
    dest[4] = a00 * b10 + a10 * b11 + a20 * b12;
    dest[5] = a01 * b10 + a11 * b11 + a21 * b12;
    dest[6] = a02 * b10 + a12 * b11 + a22 * b12;
    dest[7] = a03 * b10 + a13 * b11 + a23 * b12;
    dest[8] = a00 * b20 + a10 * b21 + a20 * b22;
    dest[9] = a01 * b20 + a11 * b21 + a21 * b22;
    dest[10] = a02 * b20 + a12 * b21 + a22 * b22;
    dest[11] = a03 * b20 + a13 * b21 + a23 * b22;
    return dest;
  };
  /**
   * Rotates a matrix by the given angle around the X axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */


  mat4.rotateX = function (mat, angle, dest) {
    var s = Math.sin(angle),
        c = Math.cos(angle),
        a10 = mat[4],
        a11 = mat[5],
        a12 = mat[6],
        a13 = mat[7],
        a20 = mat[8],
        a21 = mat[9],
        a22 = mat[10],
        a23 = mat[11];

    if (!dest) {
      dest = mat;
    } else if (mat !== dest) {
      // If the source and destination differ, copy the unchanged rows
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
    } // Perform axis-specific matrix multiplication


    dest[4] = a10 * c + a20 * s;
    dest[5] = a11 * c + a21 * s;
    dest[6] = a12 * c + a22 * s;
    dest[7] = a13 * c + a23 * s;
    dest[8] = a10 * -s + a20 * c;
    dest[9] = a11 * -s + a21 * c;
    dest[10] = a12 * -s + a22 * c;
    dest[11] = a13 * -s + a23 * c;
    return dest;
  };
  /**
   * Rotates a matrix by the given angle around the Y axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */


  mat4.rotateY = function (mat, angle, dest) {
    var s = Math.sin(angle),
        c = Math.cos(angle),
        a00 = mat[0],
        a01 = mat[1],
        a02 = mat[2],
        a03 = mat[3],
        a20 = mat[8],
        a21 = mat[9],
        a22 = mat[10],
        a23 = mat[11];

    if (!dest) {
      dest = mat;
    } else if (mat !== dest) {
      // If the source and destination differ, copy the unchanged rows
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
    } // Perform axis-specific matrix multiplication


    dest[0] = a00 * c + a20 * -s;
    dest[1] = a01 * c + a21 * -s;
    dest[2] = a02 * c + a22 * -s;
    dest[3] = a03 * c + a23 * -s;
    dest[8] = a00 * s + a20 * c;
    dest[9] = a01 * s + a21 * c;
    dest[10] = a02 * s + a22 * c;
    dest[11] = a03 * s + a23 * c;
    return dest;
  };
  /**
   * Rotates a matrix by the given angle around the Z axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */


  mat4.rotateZ = function (mat, angle, dest) {
    var s = Math.sin(angle),
        c = Math.cos(angle),
        a00 = mat[0],
        a01 = mat[1],
        a02 = mat[2],
        a03 = mat[3],
        a10 = mat[4],
        a11 = mat[5],
        a12 = mat[6],
        a13 = mat[7];

    if (!dest) {
      dest = mat;
    } else if (mat !== dest) {
      // If the source and destination differ, copy the unchanged last row
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
    } // Perform axis-specific matrix multiplication


    dest[0] = a00 * c + a10 * s;
    dest[1] = a01 * c + a11 * s;
    dest[2] = a02 * c + a12 * s;
    dest[3] = a03 * c + a13 * s;
    dest[4] = a00 * -s + a10 * c;
    dest[5] = a01 * -s + a11 * c;
    dest[6] = a02 * -s + a12 * c;
    dest[7] = a03 * -s + a13 * c;
    return dest;
  };
  /**
   * Generates a frustum matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */


  mat4.frustum = function (left, right, bottom, top, near, far, dest) {
    if (!dest) {
      dest = mat4.create();
    }

    var rl = right - left,
        tb = top - bottom,
        fn = far - near;
    dest[0] = near * 2 / rl;
    dest[1] = 0;
    dest[2] = 0;
    dest[3] = 0;
    dest[4] = 0;
    dest[5] = near * 2 / tb;
    dest[6] = 0;
    dest[7] = 0;
    dest[8] = (right + left) / rl;
    dest[9] = (top + bottom) / tb;
    dest[10] = -(far + near) / fn;
    dest[11] = -1;
    dest[12] = 0;
    dest[13] = 0;
    dest[14] = -(far * near * 2) / fn;
    dest[15] = 0;
    return dest;
  };
  /**
   * Generates a perspective projection matrix with the given bounds
   *
   * @param {number} fovy Vertical field of view
   * @param {number} aspect Aspect ratio. typically viewport width/height
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */


  mat4.perspective = function (fovy, aspect, near, far, dest) {
    var top = near * Math.tan(fovy * Math.PI / 360.0),
        right = top * aspect;
    return mat4.frustum(-right, right, -top, top, near, far, dest);
  };
  /**
   * Generates a orthogonal projection matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */


  mat4.ortho = function (left, right, bottom, top, near, far, dest) {
    if (!dest) {
      dest = mat4.create();
    }

    var rl = right - left,
        tb = top - bottom,
        fn = far - near;
    dest[0] = 2 / rl;
    dest[1] = 0;
    dest[2] = 0;
    dest[3] = 0;
    dest[4] = 0;
    dest[5] = 2 / tb;
    dest[6] = 0;
    dest[7] = 0;
    dest[8] = 0;
    dest[9] = 0;
    dest[10] = -2 / fn;
    dest[11] = 0;
    dest[12] = -(left + right) / rl;
    dest[13] = -(top + bottom) / tb;
    dest[14] = -(far + near) / fn;
    dest[15] = 1;
    return dest;
  };
  /**
   * Generates a look-at matrix with the given eye position, focal point, and up axis
   *
   * @param {vec3} eye Position of the viewer
   * @param {vec3} center Point the viewer is looking at
   * @param {vec3} up vec3 pointing "up"
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */


  mat4.lookAt = function (eye, center, up, dest) {
    if (!dest) {
      dest = mat4.create();
    }

    var x0,
        x1,
        x2,
        y0,
        y1,
        y2,
        z0,
        z1,
        z2,
        len,
        eyex = eye[0],
        eyey = eye[1],
        eyez = eye[2],
        upx = up[0],
        upy = up[1],
        upz = up[2],
        centerx = center[0],
        centery = center[1],
        centerz = center[2];

    if (eyex === centerx && eyey === centery && eyez === centerz) {
      return mat4.identity(dest);
    } //vec3.direction(eye, center, z);


    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz; // normalize (no check needed for 0 because of early return)

    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
    z0 *= len;
    z1 *= len;
    z2 *= len; //vec3.normalize(vec3.cross(up, z, x));

    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);

    if (!len) {
      x0 = 0;
      x1 = 0;
      x2 = 0;
    } else {
      len = 1 / len;
      x0 *= len;
      x1 *= len;
      x2 *= len;
    } //vec3.normalize(vec3.cross(z, x, y));


    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;
    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);

    if (!len) {
      y0 = 0;
      y1 = 0;
      y2 = 0;
    } else {
      len = 1 / len;
      y0 *= len;
      y1 *= len;
      y2 *= len;
    }

    dest[0] = x0;
    dest[1] = y0;
    dest[2] = z0;
    dest[3] = 0;
    dest[4] = x1;
    dest[5] = y1;
    dest[6] = z1;
    dest[7] = 0;
    dest[8] = x2;
    dest[9] = y2;
    dest[10] = z2;
    dest[11] = 0;
    dest[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    dest[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    dest[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    dest[15] = 1;
    return dest;
  };
  /**
   * Creates a matrix from a quaternion rotation and vector translation
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.translate(dest, vec);
   *     var quatMat = mat4.create();
   *     quat4.toMat4(quat, quatMat);
   *     mat4.multiply(dest, quatMat);
   *
   * @param {quat4} quat Rotation quaternion
   * @param {vec3} vec Translation vector
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to a new mat4
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */


  mat4.fromRotationTranslation = function (quat, vec, dest) {
    if (!dest) {
      dest = mat4.create();
    } // Quaternion math


    var x = quat[0],
        y = quat[1],
        z = quat[2],
        w = quat[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,
        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;
    dest[0] = 1 - (yy + zz);
    dest[1] = xy + wz;
    dest[2] = xz - wy;
    dest[3] = 0;
    dest[4] = xy - wz;
    dest[5] = 1 - (xx + zz);
    dest[6] = yz + wx;
    dest[7] = 0;
    dest[8] = xz + wy;
    dest[9] = yz - wx;
    dest[10] = 1 - (xx + yy);
    dest[11] = 0;
    dest[12] = vec[0];
    dest[13] = vec[1];
    dest[14] = vec[2];
    dest[15] = 1;
    return dest;
  };
  /**
   * Returns a string representation of a mat4
   *
   * @param {mat4} mat mat4 to represent as a string
   *
   * @returns {string} String representation of mat
   */


  mat4.str = function (mat) {
    return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] + ', ' + mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] + ', ' + mat[8] + ', ' + mat[9] + ', ' + mat[10] + ', ' + mat[11] + ', ' + mat[12] + ', ' + mat[13] + ', ' + mat[14] + ', ' + mat[15] + ']';
  };
  /**
   * @class Quaternion
   * @name quat4
   */


  var quat4 = {};
  /**
   * Creates a new instance of a quat4 using the default array type
   * Any javascript array containing at least 4 numeric elements can serve as a quat4
   *
   * @param {quat4} [quat] quat4 containing values to initialize with
   *
   * @returns {quat4} New quat4
   */

  quat4.create = function (quat) {
    var dest = new MatrixArray(4);

    if (quat) {
      dest[0] = quat[0];
      dest[1] = quat[1];
      dest[2] = quat[2];
      dest[3] = quat[3];
    } else {
      dest[0] = dest[1] = dest[2] = dest[3] = 0;
    }

    return dest;
  };
  /**
   * Creates a new instance of a quat4, initializing it with the given arguments
   *
   * @param {number} x X value
   * @param {number} y Y value
   * @param {number} z Z value
   * @param {number} w W value
    * @returns {quat4} New quat4
   */


  quat4.createFrom = function (x, y, z, w) {
    var dest = new MatrixArray(4);
    dest[0] = x;
    dest[1] = y;
    dest[2] = z;
    dest[3] = w;
    return dest;
  };
  /**
   * Copies the values of one quat4 to another
   *
   * @param {quat4} quat quat4 containing values to copy
   * @param {quat4} dest quat4 receiving copied values
   *
   * @returns {quat4} dest
   */


  quat4.set = function (quat, dest) {
    dest[0] = quat[0];
    dest[1] = quat[1];
    dest[2] = quat[2];
    dest[3] = quat[3];
    return dest;
  };
  /**
   * Compares two quaternions for equality within a certain margin of error
   *
   * @param {quat4} a First vector
   * @param {quat4} b Second vector
   *
   * @returns {Boolean} True if a is equivalent to b
   */


  quat4.equal = function (a, b) {
    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON && Math.abs(a[3] - b[3]) < FLOAT_EPSILON;
  };
  /**
   * Creates a new identity Quat4
   *
   * @param {quat4} [dest] quat4 receiving copied values
   *
   * @returns {quat4} dest is specified, new quat4 otherwise
   */


  quat4.identity = function (dest) {
    if (!dest) {
      dest = quat4.create();
    }

    dest[0] = 0;
    dest[1] = 0;
    dest[2] = 0;
    dest[3] = 1;
    return dest;
  };

  var identityQuat4 = quat4.identity();
  /**
   * Calculates the W component of a quat4 from the X, Y, and Z components.
   * Assumes that quaternion is 1 unit in length.
   * Any existing W component will be ignored.
   *
   * @param {quat4} quat quat4 to calculate W component of
   * @param {quat4} [dest] quat4 receiving calculated values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */

  quat4.calculateW = function (quat, dest) {
    var x = quat[0],
        y = quat[1],
        z = quat[2];

    if (!dest || quat === dest) {
      quat[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
      return quat;
    }

    dest[0] = x;
    dest[1] = y;
    dest[2] = z;
    dest[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
    return dest;
  };
  /**
   * Calculates the dot product of two quaternions
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   *
   * @return {number} Dot product of quat and quat2
   */


  quat4.dot = function (quat, quat2) {
    return quat[0] * quat2[0] + quat[1] * quat2[1] + quat[2] * quat2[2] + quat[3] * quat2[3];
  };
  /**
   * Calculates the inverse of a quat4
   *
   * @param {quat4} quat quat4 to calculate inverse of
   * @param {quat4} [dest] quat4 receiving inverse values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */


  quat4.inverse = function (quat, dest) {
    var q0 = quat[0],
        q1 = quat[1],
        q2 = quat[2],
        q3 = quat[3],
        dot = q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3,
        invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

    if (!dest || quat === dest) {
      quat[0] *= -invDot;
      quat[1] *= -invDot;
      quat[2] *= -invDot;
      quat[3] *= invDot;
      return quat;
    }

    dest[0] = -quat[0] * invDot;
    dest[1] = -quat[1] * invDot;
    dest[2] = -quat[2] * invDot;
    dest[3] = quat[3] * invDot;
    return dest;
  };
  /**
   * Calculates the conjugate of a quat4
   * If the quaternion is normalized, this function is faster than quat4.inverse and produces the same result.
   *
   * @param {quat4} quat quat4 to calculate conjugate of
   * @param {quat4} [dest] quat4 receiving conjugate values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */


  quat4.conjugate = function (quat, dest) {
    if (!dest || quat === dest) {
      quat[0] *= -1;
      quat[1] *= -1;
      quat[2] *= -1;
      return quat;
    }

    dest[0] = -quat[0];
    dest[1] = -quat[1];
    dest[2] = -quat[2];
    dest[3] = quat[3];
    return dest;
  };
  /**
   * Calculates the length of a quat4
   *
   * Params:
   * @param {quat4} quat quat4 to calculate length of
   *
   * @returns Length of quat
   */


  quat4.length = function (quat) {
    var x = quat[0],
        y = quat[1],
        z = quat[2],
        w = quat[3];
    return Math.sqrt(x * x + y * y + z * z + w * w);
  };
  /**
   * Generates a unit quaternion of the same direction as the provided quat4
   * If quaternion length is 0, returns [0, 0, 0, 0]
   *
   * @param {quat4} quat quat4 to normalize
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */


  quat4.normalize = function (quat, dest) {
    if (!dest) {
      dest = quat;
    }

    var x = quat[0],
        y = quat[1],
        z = quat[2],
        w = quat[3],
        len = Math.sqrt(x * x + y * y + z * z + w * w);

    if (len === 0) {
      dest[0] = 0;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      return dest;
    }

    len = 1 / len;
    dest[0] = x * len;
    dest[1] = y * len;
    dest[2] = z * len;
    dest[3] = w * len;
    return dest;
  };
  /**
   * Performs quaternion addition
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */


  quat4.add = function (quat, quat2, dest) {
    if (!dest || quat === dest) {
      quat[0] += quat2[0];
      quat[1] += quat2[1];
      quat[2] += quat2[2];
      quat[3] += quat2[3];
      return quat;
    }

    dest[0] = quat[0] + quat2[0];
    dest[1] = quat[1] + quat2[1];
    dest[2] = quat[2] + quat2[2];
    dest[3] = quat[3] + quat2[3];
    return dest;
  };
  /**
   * Performs a quaternion multiplication
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */


  quat4.multiply = function (quat, quat2, dest) {
    if (!dest) {
      dest = quat;
    }

    var qax = quat[0],
        qay = quat[1],
        qaz = quat[2],
        qaw = quat[3],
        qbx = quat2[0],
        qby = quat2[1],
        qbz = quat2[2],
        qbw = quat2[3];
    dest[0] = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    dest[1] = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    dest[2] = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    dest[3] = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
    return dest;
  };
  /**
   * Transforms a vec3 with the given quaternion
   *
   * @param {quat4} quat quat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns dest if specified, vec otherwise
   */


  quat4.multiplyVec3 = function (quat, vec, dest) {
    if (!dest) {
      dest = vec;
    }

    var x = vec[0],
        y = vec[1],
        z = vec[2],
        qx = quat[0],
        qy = quat[1],
        qz = quat[2],
        qw = quat[3],
        // calculate quat * vec
    ix = qw * x + qy * z - qz * y,
        iy = qw * y + qz * x - qx * z,
        iz = qw * z + qx * y - qy * x,
        iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat

    dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return dest;
  };
  /**
   * Multiplies the components of a quaternion by a scalar value
   *
   * @param {quat4} quat to scale
   * @param {number} val Value to scale by
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */


  quat4.scale = function (quat, val, dest) {
    if (!dest || quat === dest) {
      quat[0] *= val;
      quat[1] *= val;
      quat[2] *= val;
      quat[3] *= val;
      return quat;
    }

    dest[0] = quat[0] * val;
    dest[1] = quat[1] * val;
    dest[2] = quat[2] * val;
    dest[3] = quat[3] * val;
    return dest;
  };
  /**
   * Calculates a 3x3 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat3} [dest] mat3 receiving operation result
   *
   * @returns {mat3} dest if specified, a new mat3 otherwise
   */


  quat4.toMat3 = function (quat, dest) {
    if (!dest) {
      dest = mat3.create();
    }

    var x = quat[0],
        y = quat[1],
        z = quat[2],
        w = quat[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,
        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;
    dest[0] = 1 - (yy + zz);
    dest[1] = xy + wz;
    dest[2] = xz - wy;
    dest[3] = xy - wz;
    dest[4] = 1 - (xx + zz);
    dest[5] = yz + wx;
    dest[6] = xz + wy;
    dest[7] = yz - wx;
    dest[8] = 1 - (xx + yy);
    return dest;
  };
  /**
   * Calculates a 4x4 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat4} [dest] mat4 receiving operation result
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */


  quat4.toMat4 = function (quat, dest) {
    if (!dest) {
      dest = mat4.create();
    }

    var x = quat[0],
        y = quat[1],
        z = quat[2],
        w = quat[3],
        x2 = x + x,
        y2 = y + y,
        z2 = z + z,
        xx = x * x2,
        xy = x * y2,
        xz = x * z2,
        yy = y * y2,
        yz = y * z2,
        zz = z * z2,
        wx = w * x2,
        wy = w * y2,
        wz = w * z2;
    dest[0] = 1 - (yy + zz);
    dest[1] = xy + wz;
    dest[2] = xz - wy;
    dest[3] = 0;
    dest[4] = xy - wz;
    dest[5] = 1 - (xx + zz);
    dest[6] = yz + wx;
    dest[7] = 0;
    dest[8] = xz + wy;
    dest[9] = yz - wx;
    dest[10] = 1 - (xx + yy);
    dest[11] = 0;
    dest[12] = 0;
    dest[13] = 0;
    dest[14] = 0;
    dest[15] = 1;
    return dest;
  };
  /**
   * Performs a spherical linear interpolation between two quat4
   *
   * @param {quat4} quat First quaternion
   * @param {quat4} quat2 Second quaternion
   * @param {number} slerp Interpolation amount between the two inputs
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */


  quat4.slerp = function (quat, quat2, slerp, dest) {
    if (!dest) {
      dest = quat;
    }

    var cosHalfTheta = quat[0] * quat2[0] + quat[1] * quat2[1] + quat[2] * quat2[2] + quat[3] * quat2[3],
        halfTheta,
        sinHalfTheta,
        ratioA,
        ratioB;

    if (Math.abs(cosHalfTheta) >= 1.0) {
      if (dest !== quat) {
        dest[0] = quat[0];
        dest[1] = quat[1];
        dest[2] = quat[2];
        dest[3] = quat[3];
      }

      return dest;
    }

    halfTheta = Math.acos(cosHalfTheta);
    sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);

    if (Math.abs(sinHalfTheta) < 0.001) {
      dest[0] = quat[0] * 0.5 + quat2[0] * 0.5;
      dest[1] = quat[1] * 0.5 + quat2[1] * 0.5;
      dest[2] = quat[2] * 0.5 + quat2[2] * 0.5;
      dest[3] = quat[3] * 0.5 + quat2[3] * 0.5;
      return dest;
    }

    ratioA = Math.sin((1 - slerp) * halfTheta) / sinHalfTheta;
    ratioB = Math.sin(slerp * halfTheta) / sinHalfTheta;
    dest[0] = quat[0] * ratioA + quat2[0] * ratioB;
    dest[1] = quat[1] * ratioA + quat2[1] * ratioB;
    dest[2] = quat[2] * ratioA + quat2[2] * ratioB;
    dest[3] = quat[3] * ratioA + quat2[3] * ratioB;
    return dest;
  };
  /**
   * Creates a quaternion from the given 3x3 rotation matrix.
   * If dest is omitted, a new quaternion will be created.
   *
   * @param {mat3}  mat    the rotation matrix
   * @param {quat4} [dest] an optional receiving quaternion
   *
   * @returns {quat4} the quaternion constructed from the rotation matrix
   *
   */


  quat4.fromRotationMatrix = function (mat, dest) {
    if (!dest) dest = quat4.create(); // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
    // article "Quaternion Calculus and Fast Animation".

    var fTrace = mat[0] + mat[4] + mat[8];
    var fRoot;

    if (fTrace > 0.0) {
      // |w| > 1/2, may as well choose w > 1/2
      fRoot = Math.sqrt(fTrace + 1.0); // 2w

      dest[3] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot; // 1/(4w)

      dest[0] = (mat[7] - mat[5]) * fRoot;
      dest[1] = (mat[2] - mat[6]) * fRoot;
      dest[2] = (mat[3] - mat[1]) * fRoot;
    } else {
      // |w| <= 1/2
      var s_iNext = quat4.fromRotationMatrix.s_iNext = quat4.fromRotationMatrix.s_iNext || [1, 2, 0];
      var i = 0;
      if (mat[4] > mat[0]) i = 1;
      if (mat[8] > mat[i * 3 + i]) i = 2;
      var j = s_iNext[i];
      var k = s_iNext[j];
      fRoot = Math.sqrt(mat[i * 3 + i] - mat[j * 3 + j] - mat[k * 3 + k] + 1.0);
      dest[i] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      dest[3] = (mat[k * 3 + j] - mat[j * 3 + k]) * fRoot;
      dest[j] = (mat[j * 3 + i] + mat[i * 3 + j]) * fRoot;
      dest[k] = (mat[k * 3 + i] + mat[i * 3 + k]) * fRoot;
    }

    return dest;
  };
  /**
   * Alias. See the description for quat4.fromRotationMatrix().
   */


  mat3.toQuat4 = quat4.fromRotationMatrix;

  (function () {
    var mat = mat3.create();
    /**
     * Creates a quaternion from the 3 given vectors. They must be perpendicular
     * to one another and represent the X, Y and Z axes.
     *
     * If dest is omitted, a new quat4 will be created.
     *
     * Example: The default OpenGL orientation has a view vector [0, 0, -1],
     * right vector [1, 0, 0], and up vector [0, 1, 0]. A quaternion representing
     * this orientation could be constructed with:
     *
     *   quat = quat4.fromAxes([0, 0, -1], [1, 0, 0], [0, 1, 0], quat4.create());
     *
     * @param {vec3}  view   the view vector, or direction the object is pointing in
     * @param {vec3}  right  the right vector, or direction to the "right" of the object
     * @param {vec3}  up     the up vector, or direction towards the object's "up"
     * @param {quat4} [dest] an optional receiving quat4
     *
     * @returns {quat4} dest
     **/

    quat4.fromAxes = function (view, right, up, dest) {
      mat[0] = right[0];
      mat[3] = right[1];
      mat[6] = right[2];
      mat[1] = up[0];
      mat[4] = up[1];
      mat[7] = up[2];
      mat[2] = view[0];
      mat[5] = view[1];
      mat[8] = view[2];
      return quat4.fromRotationMatrix(mat, dest);
    };
  })();
  /**
   * Sets a quat4 to the Identity and returns it.
   *
   * @param {quat4} [dest] quat4 to set. If omitted, a
   * new quat4 will be created.
   *
   * @returns {quat4} dest
   */


  quat4.identity = function (dest) {
    if (!dest) dest = quat4.create();
    dest[0] = 0;
    dest[1] = 0;
    dest[2] = 0;
    dest[3] = 1;
    return dest;
  };
  /**
   * Sets a quat4 from the given angle and rotation axis,
   * then returns it. If dest is not given, a new quat4 is created.
   *
   * @param {Number} angle  the angle in radians
   * @param {vec3}   axis   the axis around which to rotate
   * @param {quat4}  [dest] the optional quat4 to store the result
   *
   * @returns {quat4} dest
   **/


  quat4.fromAngleAxis = function (angle, axis, dest) {
    // The quaternion representing the rotation is
    //   q = cos(A/2)+sin(A/2)*(x*i+y*j+z*k)
    if (!dest) dest = quat4.create();
    var half = angle * 0.5;
    var s = Math.sin(half);
    dest[3] = Math.cos(half);
    dest[0] = s * axis[0];
    dest[1] = s * axis[1];
    dest[2] = s * axis[2];
    return dest;
  };
  /**
   * Stores the angle and axis in a vec4, where the XYZ components represent
   * the axis and the W (4th) component is the angle in radians.
   *
   * If dest is not given, src will be modified in place and returned, after
   * which it should not be considered not a quaternion (just an axis and angle).
   *
   * @param {quat4} quat   the quaternion whose angle and axis to store
   * @param {vec4}  [dest] the optional vec4 to receive the data
   *
   * @returns {vec4} dest
   */


  quat4.toAngleAxis = function (src, dest) {
    if (!dest) dest = src; // The quaternion representing the rotation is
    //   q = cos(A/2)+sin(A/2)*(x*i+y*j+z*k)

    var sqrlen = src[0] * src[0] + src[1] * src[1] + src[2] * src[2];

    if (sqrlen > 0) {
      dest[3] = 2 * Math.acos(src[3]);
      var invlen = glMath.invsqrt(sqrlen);
      dest[0] = src[0] * invlen;
      dest[1] = src[1] * invlen;
      dest[2] = src[2] * invlen;
    } else {
      // angle is 0 (mod 2*pi), so any axis will do
      dest[3] = 0;
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
    }

    return dest;
  };
  /**
   * Returns a string representation of a quaternion
   *
   * @param {quat4} quat quat4 to represent as a string
   *
   * @returns {string} String representation of quat
   */


  quat4.str = function (quat) {
    return '[' + quat[0] + ', ' + quat[1] + ', ' + quat[2] + ', ' + quat[3] + ']';
  };
  /**
   * @class 2 Dimensional Vector
   * @name vec2
   */


  var vec2 = {};
  /**
   * Creates a new vec2, initializing it from vec if vec
   * is given.
   *
   * @param {vec2} [vec] the vector's initial contents
   * @returns {vec2} a new 2D vector
   */

  vec2.create = function (vec) {
    var dest = new MatrixArray(2);

    if (vec) {
      dest[0] = vec[0];
      dest[1] = vec[1];
    } else {
      dest[0] = 0;
      dest[1] = 0;
    }

    return dest;
  };
  /**
   * Creates a new instance of a vec2, initializing it with the given arguments
   *
   * @param {number} x X value
   * @param {number} y Y value
    * @returns {vec2} New vec2
   */


  vec2.createFrom = function (x, y) {
    var dest = new MatrixArray(2);
    dest[0] = x;
    dest[1] = y;
    return dest;
  };
  /**
   * Adds the vec2's together. If dest is given, the result
   * is stored there. Otherwise, the result is stored in vecB.
   *
   * @param {vec2} vecA the first operand
   * @param {vec2} vecB the second operand
   * @param {vec2} [dest] the optional receiving vector
   * @returns {vec2} dest
   */


  vec2.add = function (vecA, vecB, dest) {
    if (!dest) dest = vecB;
    dest[0] = vecA[0] + vecB[0];
    dest[1] = vecA[1] + vecB[1];
    return dest;
  };
  /**
   * Subtracts vecB from vecA. If dest is given, the result
   * is stored there. Otherwise, the result is stored in vecB.
   *
   * @param {vec2} vecA the first operand
   * @param {vec2} vecB the second operand
   * @param {vec2} [dest] the optional receiving vector
   * @returns {vec2} dest
   */


  vec2.subtract = function (vecA, vecB, dest) {
    if (!dest) dest = vecB;
    dest[0] = vecA[0] - vecB[0];
    dest[1] = vecA[1] - vecB[1];
    return dest;
  };
  /**
   * Multiplies vecA with vecB. If dest is given, the result
   * is stored there. Otherwise, the result is stored in vecB.
   *
   * @param {vec2} vecA the first operand
   * @param {vec2} vecB the second operand
   * @param {vec2} [dest] the optional receiving vector
   * @returns {vec2} dest
   */


  vec2.multiply = function (vecA, vecB, dest) {
    if (!dest) dest = vecB;
    dest[0] = vecA[0] * vecB[0];
    dest[1] = vecA[1] * vecB[1];
    return dest;
  };
  /**
   * Divides vecA by vecB. If dest is given, the result
   * is stored there. Otherwise, the result is stored in vecB.
   *
   * @param {vec2} vecA the first operand
   * @param {vec2} vecB the second operand
   * @param {vec2} [dest] the optional receiving vector
   * @returns {vec2} dest
   */


  vec2.divide = function (vecA, vecB, dest) {
    if (!dest) dest = vecB;
    dest[0] = vecA[0] / vecB[0];
    dest[1] = vecA[1] / vecB[1];
    return dest;
  };
  /**
   * Scales vecA by some scalar number. If dest is given, the result
   * is stored there. Otherwise, the result is stored in vecA.
   *
   * This is the same as multiplying each component of vecA
   * by the given scalar.
   *
   * @param {vec2}   vecA the vector to be scaled
   * @param {Number} scalar the amount to scale the vector by
   * @param {vec2}   [dest] the optional receiving vector
   * @returns {vec2} dest
   */


  vec2.scale = function (vecA, scalar, dest) {
    if (!dest) dest = vecA;
    dest[0] = vecA[0] * scalar;
    dest[1] = vecA[1] * scalar;
    return dest;
  };
  /**
   * Calculates the euclidian distance between two vec2
   *
   * Params:
   * @param {vec2} vecA First vector
   * @param {vec2} vecB Second vector
   *
   * @returns {number} Distance between vecA and vecB
   */


  vec2.dist = function (vecA, vecB) {
    var x = vecB[0] - vecA[0],
        y = vecB[1] - vecA[1];
    return Math.sqrt(x * x + y * y);
  };
  /**
   * Copies the values of one vec2 to another
   *
   * @param {vec2} vec vec2 containing values to copy
   * @param {vec2} dest vec2 receiving copied values
   *
   * @returns {vec2} dest
   */


  vec2.set = function (vec, dest) {
    dest[0] = vec[0];
    dest[1] = vec[1];
    return dest;
  };
  /**
   * Compares two vectors for equality within a certain margin of error
   *
   * @param {vec2} a First vector
   * @param {vec2} b Second vector
   *
   * @returns {Boolean} True if a is equivalent to b
   */


  vec2.equal = function (a, b) {
    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON;
  };
  /**
   * Negates the components of a vec2
   *
   * @param {vec2} vec vec2 to negate
   * @param {vec2} [dest] vec2 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec2} dest if specified, vec otherwise
   */


  vec2.negate = function (vec, dest) {
    if (!dest) {
      dest = vec;
    }

    dest[0] = -vec[0];
    dest[1] = -vec[1];
    return dest;
  };
  /**
   * Normlize a vec2
   *
   * @param {vec2} vec vec2 to normalize
   * @param {vec2} [dest] vec2 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec2} dest if specified, vec otherwise
   */


  vec2.normalize = function (vec, dest) {
    if (!dest) {
      dest = vec;
    }

    var mag = vec[0] * vec[0] + vec[1] * vec[1];

    if (mag > 0) {
      mag = Math.sqrt(mag);
      dest[0] = vec[0] / mag;
      dest[1] = vec[1] / mag;
    } else {
      dest[0] = dest[1] = 0;
    }

    return dest;
  };
  /**
   * Computes the cross product of two vec2's. Note that the cross product must by definition
   * produce a 3D vector. If a dest vector is given, it will contain the resultant 3D vector.
   * Otherwise, a scalar number will be returned, representing the vector's Z coordinate, since
   * its X and Y must always equal 0.
   *
   * Examples:
   *    var crossResult = vec3.create();
   *    vec2.cross([1, 2], [3, 4], crossResult);
   *    //=> [0, 0, -2]
   *
   *    vec2.cross([1, 2], [3, 4]);
   *    //=> -2
   *
   * See http://stackoverflow.com/questions/243945/calculating-a-2d-vectors-cross-product
   * for some interesting facts.
   *
   * @param {vec2} vecA left operand
   * @param {vec2} vecB right operand
   * @param {vec2} [dest] optional vec2 receiving result. If not specified a scalar is returned
   *
   */


  vec2.cross = function (vecA, vecB, dest) {
    var z = vecA[0] * vecB[1] - vecA[1] * vecB[0];
    if (!dest) return z;
    dest[0] = dest[1] = 0;
    dest[2] = z;
    return dest;
  };
  /**
   * Caclulates the length of a vec2
   *
   * @param {vec2} vec vec2 to calculate length of
   *
   * @returns {Number} Length of vec
   */


  vec2.length = function (vec) {
    var x = vec[0],
        y = vec[1];
    return Math.sqrt(x * x + y * y);
  };
  /**
   * Caclulates the squared length of a vec2
   *
   * @param {vec2} vec vec2 to calculate squared length of
   *
   * @returns {Number} Squared Length of vec
   */


  vec2.squaredLength = function (vec) {
    var x = vec[0],
        y = vec[1];
    return x * x + y * y;
  };
  /**
   * Caclulates the dot product of two vec2s
   *
   * @param {vec2} vecA First operand
   * @param {vec2} vecB Second operand
   *
   * @returns {Number} Dot product of vecA and vecB
   */


  vec2.dot = function (vecA, vecB) {
    return vecA[0] * vecB[0] + vecA[1] * vecB[1];
  };
  /**
   * Generates a 2D unit vector pointing from one vector to another
   *
   * @param {vec2} vecA Origin vec2
   * @param {vec2} vecB vec2 to point to
   * @param {vec2} [dest] vec2 receiving operation result. If not specified result is written to vecA
   *
   * @returns {vec2} dest if specified, vecA otherwise
   */


  vec2.direction = function (vecA, vecB, dest) {
    if (!dest) {
      dest = vecA;
    }

    var x = vecA[0] - vecB[0],
        y = vecA[1] - vecB[1],
        len = x * x + y * y;

    if (!len) {
      dest[0] = 0;
      dest[1] = 0;
      dest[2] = 0;
      return dest;
    }

    len = 1 / Math.sqrt(len);
    dest[0] = x * len;
    dest[1] = y * len;
    return dest;
  };
  /**
   * Performs a linear interpolation between two vec2
   *
   * @param {vec2} vecA First vector
   * @param {vec2} vecB Second vector
   * @param {Number} lerp Interpolation amount between the two inputs
   * @param {vec2} [dest] vec2 receiving operation result. If not specified result is written to vecA
   *
   * @returns {vec2} dest if specified, vecA otherwise
   */


  vec2.lerp = function (vecA, vecB, lerp, dest) {
    if (!dest) {
      dest = vecA;
    }

    dest[0] = vecA[0] + lerp * (vecB[0] - vecA[0]);
    dest[1] = vecA[1] + lerp * (vecB[1] - vecA[1]);
    return dest;
  };
  /**
   * Returns a string representation of a vector
   *
   * @param {vec2} vec Vector to represent as a string
   *
   * @returns {String} String representation of vec
   */


  vec2.str = function (vec) {
    return '[' + vec[0] + ', ' + vec[1] + ']';
  };
  /**
   * @class 2x2 Matrix
   * @name mat2
   */


  var mat2 = {};
  /**
   * Creates a new 2x2 matrix. If src is given, the new matrix
   * is initialized to those values.
   *
   * @param {mat2} [src] the seed values for the new matrix, if any
   * @returns {mat2} a new matrix
   */

  mat2.create = function (src) {
    var dest = new MatrixArray(4);

    if (src) {
      dest[0] = src[0];
      dest[1] = src[1];
      dest[2] = src[2];
      dest[3] = src[3];
    } else {
      dest[0] = dest[1] = dest[2] = dest[3] = 0;
    }

    return dest;
  };
  /**
   * Creates a new instance of a mat2, initializing it with the given arguments
   *
   * @param {number} m00
   * @param {number} m01
   * @param {number} m10
   * @param {number} m11
    * @returns {mat2} New mat2
   */


  mat2.createFrom = function (m00, m01, m10, m11) {
    var dest = new MatrixArray(4);
    dest[0] = m00;
    dest[1] = m01;
    dest[2] = m10;
    dest[3] = m11;
    return dest;
  };
  /**
   * Copies the values of one mat2 to another
   *
   * @param {mat2} mat mat2 containing values to copy
   * @param {mat2} dest mat2 receiving copied values
   *
   * @returns {mat2} dest
   */


  mat2.set = function (mat, dest) {
    dest[0] = mat[0];
    dest[1] = mat[1];
    dest[2] = mat[2];
    dest[3] = mat[3];
    return dest;
  };
  /**
   * Compares two matrices for equality within a certain margin of error
   *
   * @param {mat2} a First matrix
   * @param {mat2} b Second matrix
   *
   * @returns {Boolean} True if a is equivalent to b
   */


  mat2.equal = function (a, b) {
    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON && Math.abs(a[3] - b[3]) < FLOAT_EPSILON;
  };
  /**
   * Sets a mat2 to an identity matrix
   *
   * @param {mat2} [dest] mat2 to set. If omitted a new one will be created.
   *
   * @returns {mat2} dest
   */


  mat2.identity = function (dest) {
    if (!dest) {
      dest = mat2.create();
    }

    dest[0] = 1;
    dest[1] = 0;
    dest[2] = 0;
    dest[3] = 1;
    return dest;
  };
  /**
   * Transposes a mat2 (flips the values over the diagonal)
   *
   * @param {mat2} mat mat2 to transpose
   * @param {mat2} [dest] mat2 receiving transposed values. If not specified result is written to mat
   *
   * @param {mat2} dest if specified, mat otherwise
   */


  mat2.transpose = function (mat, dest) {
    // If we are transposing ourselves we can skip a few steps but have to cache some values
    if (!dest || mat === dest) {
      var a00 = mat[1];
      mat[1] = mat[2];
      mat[2] = a00;
      return mat;
    }

    dest[0] = mat[0];
    dest[1] = mat[2];
    dest[2] = mat[1];
    dest[3] = mat[3];
    return dest;
  };
  /**
   * Calculates the determinant of a mat2
   *
   * @param {mat2} mat mat2 to calculate determinant of
   *
   * @returns {Number} determinant of mat
   */


  mat2.determinant = function (mat) {
    return mat[0] * mat[3] - mat[2] * mat[1];
  };
  /**
   * Calculates the inverse matrix of a mat2
   *
   * @param {mat2} mat mat2 to calculate inverse of
   * @param {mat2} [dest] mat2 receiving inverse matrix. If not specified result is written to mat
   *
   * @param {mat2} dest is specified, mat otherwise, null if matrix cannot be inverted
   */


  mat2.inverse = function (mat, dest) {
    if (!dest) {
      dest = mat;
    }

    var a0 = mat[0],
        a1 = mat[1],
        a2 = mat[2],
        a3 = mat[3];
    var det = a0 * a3 - a2 * a1;
    if (!det) return null;
    det = 1.0 / det;
    dest[0] = a3 * det;
    dest[1] = -a1 * det;
    dest[2] = -a2 * det;
    dest[3] = a0 * det;
    return dest;
  };
  /**
   * Performs a matrix multiplication
   *
   * @param {mat2} matA First operand
   * @param {mat2} matB Second operand
   * @param {mat2} [dest] mat2 receiving operation result. If not specified result is written to matA
   *
   * @returns {mat2} dest if specified, matA otherwise
   */


  mat2.multiply = function (matA, matB, dest) {
    if (!dest) {
      dest = matA;
    }

    var a11 = matA[0],
        a12 = matA[1],
        a21 = matA[2],
        a22 = matA[3];
    dest[0] = a11 * matB[0] + a12 * matB[2];
    dest[1] = a11 * matB[1] + a12 * matB[3];
    dest[2] = a21 * matB[0] + a22 * matB[2];
    dest[3] = a21 * matB[1] + a22 * matB[3];
    return dest;
  };
  /**
   * Rotates a 2x2 matrix by an angle
   *
   * @param {mat2}   mat   The matrix to rotate
   * @param {Number} angle The angle in radians
   * @param {mat2} [dest]  Optional mat2 receiving the result. If omitted mat will be used.
   *
   * @returns {mat2} dest if specified, mat otherwise
   */


  mat2.rotate = function (mat, angle, dest) {
    if (!dest) {
      dest = mat;
    }

    var a11 = mat[0],
        a12 = mat[1],
        a21 = mat[2],
        a22 = mat[3],
        s = Math.sin(angle),
        c = Math.cos(angle);
    dest[0] = a11 * c + a12 * s;
    dest[1] = a11 * -s + a12 * c;
    dest[2] = a21 * c + a22 * s;
    dest[3] = a21 * -s + a22 * c;
    return dest;
  };
  /**
   * Multiplies the vec2 by the given 2x2 matrix
   *
   * @param {mat2} matrix the 2x2 matrix to multiply against
   * @param {vec2} vec    the vector to multiply
   * @param {vec2} [dest] an optional receiving vector. If not given, vec is used.
   *
   * @returns {vec2} The multiplication result
   **/


  mat2.multiplyVec2 = function (matrix, vec, dest) {
    if (!dest) dest = vec;
    var x = vec[0],
        y = vec[1];
    dest[0] = x * matrix[0] + y * matrix[1];
    dest[1] = x * matrix[2] + y * matrix[3];
    return dest;
  };
  /**
   * Scales the mat2 by the dimensions in the given vec2
   *
   * @param {mat2} matrix the 2x2 matrix to scale
   * @param {vec2} vec    the vector containing the dimensions to scale by
   * @param {vec2} [dest] an optional receiving mat2. If not given, matrix is used.
   *
   * @returns {mat2} dest if specified, matrix otherwise
   **/


  mat2.scale = function (matrix, vec, dest) {
    if (!dest) {
      dest = matrix;
    }

    var a11 = matrix[0],
        a12 = matrix[1],
        a21 = matrix[2],
        a22 = matrix[3],
        b11 = vec[0],
        b22 = vec[1];
    dest[0] = a11 * b11;
    dest[1] = a12 * b22;
    dest[2] = a21 * b11;
    dest[3] = a22 * b22;
    return dest;
  };
  /**
   * Returns a string representation of a mat2
   *
   * @param {mat2} mat mat2 to represent as a string
   *
   * @param {String} String representation of mat
   */


  mat2.str = function (mat) {
    return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] + ']';
  };
  /**
   * @class 4 Dimensional Vector
   * @name vec4
   */


  var vec4 = {};
  /**
   * Creates a new vec4, initializing it from vec if vec
   * is given.
   *
   * @param {vec4} [vec] the vector's initial contents
   * @returns {vec4} a new 2D vector
   */

  vec4.create = function (vec) {
    var dest = new MatrixArray(4);

    if (vec) {
      dest[0] = vec[0];
      dest[1] = vec[1];
      dest[2] = vec[2];
      dest[3] = vec[3];
    } else {
      dest[0] = 0;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
    }

    return dest;
  };
  /**
   * Creates a new instance of a vec4, initializing it with the given arguments
   *
   * @param {number} x X value
   * @param {number} y Y value
   * @param {number} z Z value
   * @param {number} w W value
    * @returns {vec4} New vec4
   */


  vec4.createFrom = function (x, y, z, w) {
    var dest = new MatrixArray(4);
    dest[0] = x;
    dest[1] = y;
    dest[2] = z;
    dest[3] = w;
    return dest;
  };
  /**
   * Adds the vec4's together. If dest is given, the result
   * is stored there. Otherwise, the result is stored in vecB.
   *
   * @param {vec4} vecA the first operand
   * @param {vec4} vecB the second operand
   * @param {vec4} [dest] the optional receiving vector
   * @returns {vec4} dest
   */


  vec4.add = function (vecA, vecB, dest) {
    if (!dest) dest = vecB;
    dest[0] = vecA[0] + vecB[0];
    dest[1] = vecA[1] + vecB[1];
    dest[2] = vecA[2] + vecB[2];
    dest[3] = vecA[3] + vecB[3];
    return dest;
  };
  /**
   * Subtracts vecB from vecA. If dest is given, the result
   * is stored there. Otherwise, the result is stored in vecB.
   *
   * @param {vec4} vecA the first operand
   * @param {vec4} vecB the second operand
   * @param {vec4} [dest] the optional receiving vector
   * @returns {vec4} dest
   */


  vec4.subtract = function (vecA, vecB, dest) {
    if (!dest) dest = vecB;
    dest[0] = vecA[0] - vecB[0];
    dest[1] = vecA[1] - vecB[1];
    dest[2] = vecA[2] - vecB[2];
    dest[3] = vecA[3] - vecB[3];
    return dest;
  };
  /**
   * Multiplies vecA with vecB. If dest is given, the result
   * is stored there. Otherwise, the result is stored in vecB.
   *
   * @param {vec4} vecA the first operand
   * @param {vec4} vecB the second operand
   * @param {vec4} [dest] the optional receiving vector
   * @returns {vec4} dest
   */


  vec4.multiply = function (vecA, vecB, dest) {
    if (!dest) dest = vecB;
    dest[0] = vecA[0] * vecB[0];
    dest[1] = vecA[1] * vecB[1];
    dest[2] = vecA[2] * vecB[2];
    dest[3] = vecA[3] * vecB[3];
    return dest;
  };
  /**
   * Divides vecA by vecB. If dest is given, the result
   * is stored there. Otherwise, the result is stored in vecB.
   *
   * @param {vec4} vecA the first operand
   * @param {vec4} vecB the second operand
   * @param {vec4} [dest] the optional receiving vector
   * @returns {vec4} dest
   */


  vec4.divide = function (vecA, vecB, dest) {
    if (!dest) dest = vecB;
    dest[0] = vecA[0] / vecB[0];
    dest[1] = vecA[1] / vecB[1];
    dest[2] = vecA[2] / vecB[2];
    dest[3] = vecA[3] / vecB[3];
    return dest;
  };
  /**
   * Scales vecA by some scalar number. If dest is given, the result
   * is stored there. Otherwise, the result is stored in vecA.
   *
   * This is the same as multiplying each component of vecA
   * by the given scalar.
   *
   * @param {vec4}   vecA the vector to be scaled
   * @param {Number} scalar the amount to scale the vector by
   * @param {vec4}   [dest] the optional receiving vector
   * @returns {vec4} dest
   */


  vec4.scale = function (vecA, scalar, dest) {
    if (!dest) dest = vecA;
    dest[0] = vecA[0] * scalar;
    dest[1] = vecA[1] * scalar;
    dest[2] = vecA[2] * scalar;
    dest[3] = vecA[3] * scalar;
    return dest;
  };
  /**
   * Copies the values of one vec4 to another
   *
   * @param {vec4} vec vec4 containing values to copy
   * @param {vec4} dest vec4 receiving copied values
   *
   * @returns {vec4} dest
   */


  vec4.set = function (vec, dest) {
    dest[0] = vec[0];
    dest[1] = vec[1];
    dest[2] = vec[2];
    dest[3] = vec[3];
    return dest;
  };
  /**
   * Compares two vectors for equality within a certain margin of error
   *
   * @param {vec4} a First vector
   * @param {vec4} b Second vector
   *
   * @returns {Boolean} True if a is equivalent to b
   */


  vec4.equal = function (a, b) {
    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON && Math.abs(a[3] - b[3]) < FLOAT_EPSILON;
  };
  /**
   * Negates the components of a vec4
   *
   * @param {vec4} vec vec4 to negate
   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec4} dest if specified, vec otherwise
   */


  vec4.negate = function (vec, dest) {
    if (!dest) {
      dest = vec;
    }

    dest[0] = -vec[0];
    dest[1] = -vec[1];
    dest[2] = -vec[2];
    dest[3] = -vec[3];
    return dest;
  };
  /**
   * Caclulates the length of a vec2
   *
   * @param {vec2} vec vec2 to calculate length of
   *
   * @returns {Number} Length of vec
   */


  vec4.length = function (vec) {
    var x = vec[0],
        y = vec[1],
        z = vec[2],
        w = vec[3];
    return Math.sqrt(x * x + y * y + z * z + w * w);
  };
  /**
   * Caclulates the squared length of a vec4
   *
   * @param {vec4} vec vec4 to calculate squared length of
   *
   * @returns {Number} Squared Length of vec
   */


  vec4.squaredLength = function (vec) {
    var x = vec[0],
        y = vec[1],
        z = vec[2],
        w = vec[3];
    return x * x + y * y + z * z + w * w;
  };
  /**
   * Performs a linear interpolation between two vec4
   *
   * @param {vec4} vecA First vector
   * @param {vec4} vecB Second vector
   * @param {Number} lerp Interpolation amount between the two inputs
   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vecA
   *
   * @returns {vec4} dest if specified, vecA otherwise
   */


  vec4.lerp = function (vecA, vecB, lerp, dest) {
    if (!dest) {
      dest = vecA;
    }

    dest[0] = vecA[0] + lerp * (vecB[0] - vecA[0]);
    dest[1] = vecA[1] + lerp * (vecB[1] - vecA[1]);
    dest[2] = vecA[2] + lerp * (vecB[2] - vecA[2]);
    dest[3] = vecA[3] + lerp * (vecB[3] - vecA[3]);
    return dest;
  };
  /**
   * Returns a string representation of a vector
   *
   * @param {vec4} vec Vector to represent as a string
   *
   * @returns {String} String representation of vec
   */


  vec4.str = function (vec) {
    return '[' + vec[0] + ', ' + vec[1] + ', ' + vec[2] + ', ' + vec[3] + ']';
  };
  /*
   * Exports
   */


  if (root) {
    root.glMatrixArrayType = MatrixArray;
    root.MatrixArray = MatrixArray;
    root.setMatrixArrayType = setMatrixArrayType;
    root.determineMatrixArrayType = determineMatrixArrayType;
    root.glMath = glMath;
    root.vec2 = vec2;
    root.vec3 = vec3;
    root.vec4 = vec4;
    root.mat2 = mat2;
    root.mat3 = mat3;
    root.mat4 = mat4;
    root.quat4 = quat4;
  }

  return {
    glMatrixArrayType: MatrixArray,
    MatrixArray: MatrixArray,
    setMatrixArrayType: setMatrixArrayType,
    determineMatrixArrayType: determineMatrixArrayType,
    glMath: glMath,
    vec2: vec2,
    vec3: vec3,
    vec4: vec4,
    mat2: mat2,
    mat3: mat3,
    mat4: mat4,
    quat4: quat4
  };
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./src/ChemDoodle/lib/index.js":
/*!*************************************!*\
  !*** ./src/ChemDoodle/lib/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _jQuery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jQuery */ "./src/ChemDoodle/lib/jQuery.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "jQuery", function() { return _jQuery__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gl-matrix */ "./src/ChemDoodle/lib/gl-matrix.js");
/* harmony import */ var _gl_matrix__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gl_matrix__WEBPACK_IMPORTED_MODULE_1__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _gl_matrix__WEBPACK_IMPORTED_MODULE_1__) if(["jQuery","jsBezier","MarchingCubes","default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _gl_matrix__WEBPACK_IMPORTED_MODULE_1__[key]; }) }(__WEBPACK_IMPORT_KEY__));
/* harmony import */ var _jsBezier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsBezier */ "./src/ChemDoodle/lib/jsBezier.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "jsBezier", function() { return _jsBezier__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _MarchingCubes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MarchingCubes */ "./src/ChemDoodle/lib/MarchingCubes.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MarchingCubes", function() { return _MarchingCubes__WEBPACK_IMPORTED_MODULE_3__["default"]; });






/***/ }),

/***/ "./src/ChemDoodle/lib/jQuery.js":
/*!**************************************!*\
  !*** ./src/ChemDoodle/lib/jQuery.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jquery_mousewheel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery-mousewheel */ "./node_modules/jquery-mousewheel/jquery.mousewheel.js");
/* harmony import */ var jquery_mousewheel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery_mousewheel__WEBPACK_IMPORTED_MODULE_1__);


jquery__WEBPACK_IMPORTED_MODULE_0___default.a.noConflict(true);
/* harmony default export */ __webpack_exports__["default"] = (jquery__WEBPACK_IMPORTED_MODULE_0___default.a);

/***/ }),

/***/ "./src/ChemDoodle/lib/jsBezier.js":
/*!****************************************!*\
  !*** ./src/ChemDoodle/lib/jsBezier.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var lib = {};

(function (lib) {
  'use strict';

  function sgn(x) {
    return x == 0 ? 0 : x > 0 ? 1 : -1;
  }

  var Vectors = {
    subtract: function subtract(v1, v2) {
      return {
        x: v1.x - v2.x,
        y: v1.y - v2.y
      };
    },
    dotProduct: function dotProduct(v1, v2) {
      return v1.x * v2.x + v1.y * v2.y;
    },
    square: function square(v) {
      return Math.sqrt(v.x * v.x + v.y * v.y);
    },
    scale: function scale(v, s) {
      return {
        x: v.x * s,
        y: v.y * s
      };
    }
  },
      maxRecursion = 64,
      flatnessTolerance = Math.pow(2.0, -maxRecursion - 1);
  /**
   * Calculates the distance that the point lies from the curve.
   * 
   * @param point
   *            a point in the form {x:567, y:3342}
   * @param curve
   *            a Bezier curve in the form [{x:..., y:...}, {x:..., y:...},
   *            {x:..., y:...}, {x:..., y:...}]. note that this is currently
   *            hardcoded to assume cubiz beziers, but would be better off
   *            supporting any degree.
   * @return a JS object literal containing location and distance, for
   *         example: {location:0.35, distance:10}. Location is analogous to
   *         the location argument you pass to the pointOnPath function: it is
   *         a ratio of distance travelled along the curve. Distance is the
   *         distance in pixels from the point to the curve.
   */

  var _distanceFromCurve = function _distanceFromCurve(point, curve) {
    var candidates = [],
        w = _convertToBezier(point, curve),
        degree = curve.length - 1,
        higherDegree = 2 * degree - 1,
        numSolutions = _findRoots(w, higherDegree, candidates, 0),
        v = Vectors.subtract(point, curve[0]),
        dist = Vectors.square(v),
        t = 0.0;

    for (var i = 0; i < numSolutions; i++) {
      v = Vectors.subtract(point, _bezier(curve, degree, candidates[i], null, null));
      var newDist = Vectors.square(v);

      if (newDist < dist) {
        dist = newDist;
        t = candidates[i];
      }
    }

    v = Vectors.subtract(point, curve[degree]);
    newDist = Vectors.square(v);

    if (newDist < dist) {
      dist = newDist;
      t = 1.0;
    }

    return {
      location: t,
      distance: dist
    };
  };
  /**
   * finds the nearest point on the curve to the given point.
   */


  var _nearestPointOnCurve = function _nearestPointOnCurve(point, curve) {
    var td = _distanceFromCurve(point, curve);

    return {
      point: _bezier(curve, curve.length - 1, td.location, null, null),
      location: td.location
    };
  };

  var _convertToBezier = function _convertToBezier(point, curve) {
    var degree = curve.length - 1,
        higherDegree = 2 * degree - 1,
        c = [],
        d = [],
        cdTable = [],
        w = [],
        z = [[1.0, 0.6, 0.3, 0.1], [0.4, 0.6, 0.6, 0.4], [0.1, 0.3, 0.6, 1.0]];

    for (var i = 0; i <= degree; i++) {
      c[i] = Vectors.subtract(curve[i], point);
    }

    for (var i = 0; i <= degree - 1; i++) {
      d[i] = Vectors.subtract(curve[i + 1], curve[i]);
      d[i] = Vectors.scale(d[i], 3.0);
    }

    for (var row = 0; row <= degree - 1; row++) {
      for (var column = 0; column <= degree; column++) {
        if (!cdTable[row]) cdTable[row] = [];
        cdTable[row][column] = Vectors.dotProduct(d[row], c[column]);
      }
    }

    for (i = 0; i <= higherDegree; i++) {
      if (!w[i]) w[i] = [];
      w[i].y = 0.0;
      w[i].x = parseFloat(i) / higherDegree;
    }

    var n = degree,
        m = degree - 1;

    for (var k = 0; k <= n + m; k++) {
      var lb = Math.max(0, k - m),
          ub = Math.min(k, n);

      for (i = lb; i <= ub; i++) {
        var j = k - i;
        w[i + j].y += cdTable[j][i] * z[j][i];
      }
    }

    return w;
  };
  /**
   * counts how many roots there are.
   */


  var _findRoots = function _findRoots(w, degree, t, depth) {
    var left = [],
        right = [],
        left_count,
        right_count,
        left_t = [],
        right_t = [];

    switch (_getCrossingCount(w, degree)) {
      case 0:
        {
          return 0;
        }

      case 1:
        {
          if (depth >= maxRecursion) {
            t[0] = (w[0].x + w[degree].x) / 2.0;
            return 1;
          }

          if (_isFlatEnough(w, degree)) {
            t[0] = _computeXIntercept(w, degree);
            return 1;
          }

          break;
        }
    }

    _bezier(w, degree, 0.5, left, right);

    left_count = _findRoots(left, degree, left_t, depth + 1);
    right_count = _findRoots(right, degree, right_t, depth + 1);

    for (var i = 0; i < left_count; i++) {
      t[i] = left_t[i];
    }

    for (var i = 0; i < right_count; i++) {
      t[i + left_count] = right_t[i];
    }

    return left_count + right_count;
  };

  var _getCrossingCount = function _getCrossingCount(curve, degree) {
    var n_crossings = 0,
        sign,
        old_sign;
    sign = old_sign = sgn(curve[0].y);

    for (var i = 1; i <= degree; i++) {
      sign = sgn(curve[i].y);
      if (sign != old_sign) n_crossings++;
      old_sign = sign;
    }

    return n_crossings;
  };

  var _isFlatEnough = function _isFlatEnough(curve, degree) {
    var error, intercept_1, intercept_2, left_intercept, right_intercept, a, b, c, det, dInv, a1, b1, c1, a2, b2, c2;
    a = curve[0].y - curve[degree].y;
    b = curve[degree].x - curve[0].x;
    c = curve[0].x * curve[degree].y - curve[degree].x * curve[0].y;
    var max_distance_above = 0.0,
        max_distance_below = 0.0;

    for (var i = 1; i < degree; i++) {
      var value = a * curve[i].x + b * curve[i].y + c;
      if (value > max_distance_above) max_distance_above = value;else if (value < max_distance_below) max_distance_below = value;
    }

    a1 = 0.0;
    b1 = 1.0;
    c1 = 0.0;
    a2 = a;
    b2 = b;
    c2 = c - max_distance_above;
    det = a1 * b2 - a2 * b1;
    dInv = 1.0 / det;
    intercept_1 = (b1 * c2 - b2 * c1) * dInv;
    a2 = a;
    b2 = b;
    c2 = c - max_distance_below;
    det = a1 * b2 - a2 * b1;
    dInv = 1.0 / det;
    intercept_2 = (b1 * c2 - b2 * c1) * dInv;
    left_intercept = Math.min(intercept_1, intercept_2);
    right_intercept = Math.max(intercept_1, intercept_2);
    error = right_intercept - left_intercept;
    return error < flatnessTolerance ? 1 : 0;
  };

  var _computeXIntercept = function _computeXIntercept(curve, degree) {
    var XLK = 1.0,
        YLK = 0.0,
        XNM = curve[degree].x - curve[0].x,
        YNM = curve[degree].y - curve[0].y,
        XMK = curve[0].x - 0.0,
        YMK = curve[0].y - 0.0,
        det = XNM * YLK - YNM * XLK,
        detInv = 1.0 / det,
        S = (XNM * YMK - YNM * XMK) * detInv;
    return 0.0 + XLK * S;
  };

  var _bezier = function _bezier(curve, degree, t, left, right) {
    var temp = [[]];

    for (var j = 0; j <= degree; j++) {
      temp[0][j] = curve[j];
    }

    for (var i = 1; i <= degree; i++) {
      for (var j = 0; j <= degree - i; j++) {
        if (!temp[i]) temp[i] = [];
        if (!temp[i][j]) temp[i][j] = {};
        temp[i][j].x = (1.0 - t) * temp[i - 1][j].x + t * temp[i - 1][j + 1].x;
        temp[i][j].y = (1.0 - t) * temp[i - 1][j].y + t * temp[i - 1][j + 1].y;
      }
    }

    if (left != null) for (j = 0; j <= degree; j++) {
      left[j] = temp[j][0];
    }
    if (right != null) for (j = 0; j <= degree; j++) {
      right[j] = temp[degree - j][j];
    }
    return temp[degree][0];
  };

  var _curveFunctionCache = {};

  var _getCurveFunctions = function _getCurveFunctions(order) {
    var fns = _curveFunctionCache[order];

    if (!fns) {
      fns = [];

      var f_term = function f_term() {
        return function (t) {
          return Math.pow(t, order);
        };
      },
          l_term = function l_term() {
        return function (t) {
          return Math.pow(1 - t, order);
        };
      },
          c_term = function c_term(c) {
        return function (t) {
          return c;
        };
      },
          t_term = function t_term() {
        return function (t) {
          return t;
        };
      },
          one_minus_t_term = function one_minus_t_term() {
        return function (t) {
          return 1 - t;
        };
      },
          _termFunc = function _termFunc(terms) {
        return function (t) {
          var p = 1;

          for (var i = 0; i < terms.length; i++) {
            p = p * terms[i](t);
          }

          return p;
        };
      };

      fns.push(new f_term()); // first is t to the power of the curve
      // order

      for (var i = 1; i < order; i++) {
        var terms = [new c_term(order)];

        for (var j = 0; j < order - i; j++) {
          terms.push(new t_term());
        }

        for (var j = 0; j < i; j++) {
          terms.push(new one_minus_t_term());
        }

        fns.push(new _termFunc(terms));
      }

      fns.push(new l_term()); // last is (1-t) to the power of the curve
      // order

      _curveFunctionCache[order] = fns;
    }

    return fns;
  };
  /**
   * calculates a point on the curve, for a Bezier of arbitrary order.
   * 
   * @param curve
   *            an array of control points, eg [{x:10,y:20}, {x:50,y:50},
   *            {x:100,y:100}, {x:120,y:100}]. For a cubic bezier this should
   *            have four points.
   * @param location
   *            a decimal indicating the distance along the curve the point
   *            should be located at. this is the distance along the curve as
   *            it travels, taking the way it bends into account. should be a
   *            number from 0 to 1, inclusive.
   */


  var _pointOnPath = function _pointOnPath(curve, location) {
    var cc = _getCurveFunctions(curve.length - 1),
        _x = 0,
        _y = 0;

    for (var i = 0; i < curve.length; i++) {
      _x = _x + curve[i].x * cc[i](location);
      _y = _y + curve[i].y * cc[i](location);
    }

    return {
      x: _x,
      y: _y
    };
  };

  var _dist = function _dist(p1, p2) {
    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
  };
  /**
   * finds the point that is 'distance' along the path from 'location'. this
   * method returns both the x,y location of the point and also its 'location'
   * (proportion of travel along the path); the method below -
   * _pointAlongPathFrom - calls this method and just returns the point.
   */


  var _pointAlongPath = function _pointAlongPath(curve, location, distance) {
    var prev = _pointOnPath(curve, location),
        tally = 0,
        curLoc = location,
        direction = distance > 0 ? 1 : -1,
        cur = null;

    while (tally < Math.abs(distance)) {
      curLoc += 0.005 * direction;
      cur = _pointOnPath(curve, curLoc);
      tally += _dist(cur, prev);
      prev = cur;
    }

    return {
      point: cur,
      location: curLoc
    };
  };

  var _length = function _length(curve) {
    var prev = _pointOnPath(curve, 0),
        tally = 0,
        curLoc = 0,
        direction = 1,
        cur = null;

    while (curLoc < 1) {
      curLoc += 0.005 * direction;
      cur = _pointOnPath(curve, curLoc);
      tally += _dist(cur, prev);
      prev = cur;
    }

    return tally;
  };
  /**
   * finds the point that is 'distance' along the path from 'location'.
   */


  var _pointAlongPathFrom = function _pointAlongPathFrom(curve, location, distance) {
    return _pointAlongPath(curve, location, distance).point;
  };
  /**
   * finds the location that is 'distance' along the path from 'location'.
   */


  var _locationAlongPathFrom = function _locationAlongPathFrom(curve, location, distance) {
    return _pointAlongPath(curve, location, distance).location;
  };
  /**
   * returns the gradient of the curve at the given location, which is a
   * decimal between 0 and 1 inclusive.
   * 
   * thanks // http://bimixual.org/AnimationLibrary/beziertangents.html
   */


  var _gradientAtPoint = function _gradientAtPoint(curve, location) {
    var p1 = _pointOnPath(curve, location),
        p2 = _pointOnPath(curve.slice(0, curve.length - 1), location),
        dy = p2.y - p1.y,
        dx = p2.x - p1.x;

    return dy == 0 ? Infinity : Math.atan(dy / dx);
  };
  /**
   * returns the gradient of the curve at the point which is 'distance' from
   * the given location. if this point is greater than location 1, the
   * gradient at location 1 is returned. if this point is less than location
   * 0, the gradient at location 0 is returned.
   */


  var _gradientAtPointAlongPathFrom = function _gradientAtPointAlongPathFrom(curve, location, distance) {
    var p = _pointAlongPath(curve, location, distance);

    if (p.location > 1) p.location = 1;
    if (p.location < 0) p.location = 0;
    return _gradientAtPoint(curve, p.location);
  };
  /**
   * calculates a line that is 'length' pixels long, perpendicular to, and
   * centered on, the path at 'distance' pixels from the given location. if
   * distance is not supplied, the perpendicular for the given location is
   * computed (ie. we set distance to zero).
   */


  var _perpendicularToPathAt = function _perpendicularToPathAt(curve, location, length, distance) {
    distance = distance == null ? 0 : distance;

    var p = _pointAlongPath(curve, location, distance),
        m = _gradientAtPoint(curve, p.location),
        _theta2 = Math.atan(-1 / m),
        y = length / 2 * Math.sin(_theta2),
        x = length / 2 * Math.cos(_theta2);

    return [{
      x: p.point.x + x,
      y: p.point.y + y
    }, {
      x: p.point.x - x,
      y: p.point.y - y
    }];
  };

  lib.jsBezier = {
    distanceFromCurve: _distanceFromCurve,
    gradientAtPoint: _gradientAtPoint,
    gradientAtPointAlongCurveFrom: _gradientAtPointAlongPathFrom,
    nearestPointOnCurve: _nearestPointOnCurve,
    pointOnCurve: _pointOnPath,
    pointAlongCurveFrom: _pointAlongPathFrom,
    perpendicularToCurveAt: _perpendicularToPathAt,
    locationAlongCurveFrom: _locationAlongPathFrom,
    getLength: _length
  };
})(lib);

/* harmony default export */ __webpack_exports__["default"] = (lib.jsBezier);

/***/ }),

/***/ "./src/ChemDoodle/math/Bounds.js":
/*!***************************************!*\
  !*** ./src/ChemDoodle/math/Bounds.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Bounds; });
var m = Math;
function Bounds() {}
;
var _ = Bounds.prototype;
_.minX = _.minY = _.minZ = Infinity;
_.maxX = _.maxY = _.maxZ = -Infinity;

_.expand = function (x1, y1, x2, y2) {
  if (x1 instanceof Bounds) {
    // only need to compare min and max since bounds already has
    // them ordered
    this.minX = m.min(this.minX, x1.minX);
    this.minY = m.min(this.minY, x1.minY);
    this.maxX = m.max(this.maxX, x1.maxX);
    this.maxY = m.max(this.maxY, x1.maxY);

    if (x1.maxZ !== Infinity) {
      this.minZ = m.min(this.minZ, x1.minZ);
      this.maxZ = m.max(this.maxZ, x1.maxZ);
    }
  } else {
    this.minX = m.min(this.minX, x1);
    this.maxX = m.max(this.maxX, x1);
    this.minY = m.min(this.minY, y1);
    this.maxY = m.max(this.maxY, y1); // these two values could be 0, so check if undefined

    if (x2 !== undefined && y2 !== undefined) {
      this.minX = m.min(this.minX, x2);
      this.maxX = m.max(this.maxX, x2);
      this.minY = m.min(this.minY, y2);
      this.maxY = m.max(this.maxY, y2);
    }
  }
};

_.expand3D = function (x1, y1, z1, x2, y2, z2) {
  this.minX = m.min(this.minX, x1);
  this.maxX = m.max(this.maxX, x1);
  this.minY = m.min(this.minY, y1);
  this.maxY = m.max(this.maxY, y1);
  this.minZ = m.min(this.minZ, z1);
  this.maxZ = m.max(this.maxZ, z1); // these two values could be 0, so check if undefined

  if (x2 !== undefined && y2 !== undefined && z2 !== undefined) {
    this.minX = m.min(this.minX, x2);
    this.maxX = m.max(this.maxX, x2);
    this.minY = m.min(this.minY, y2);
    this.maxY = m.max(this.maxY, y2);
    this.minZ = m.min(this.minZ, z2);
    this.maxZ = m.max(this.maxZ, z2);
  }
};

/***/ }),

/***/ "./src/ChemDoodle/math/index.js":
/*!**************************************!*\
  !*** ./src/ChemDoodle/math/index.js ***!
  \**************************************/
/*! exports provided: Bounds, angleBetweenLargest, isBetween, getRGB, hsl2rgb, idx2color, distanceFromPointToLineInclusive, calculateDistanceInterior, intersectLines, clamp, rainbowAt, angleBounds, isPointInPoly */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "angleBetweenLargest", function() { return angleBetweenLargest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isBetween", function() { return isBetween; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRGB", function() { return getRGB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hsl2rgb", function() { return hsl2rgb; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "idx2color", function() { return idx2color; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distanceFromPointToLineInclusive", function() { return distanceFromPointToLineInclusive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calculateDistanceInterior", function() { return calculateDistanceInterior; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intersectLines", function() { return intersectLines; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clamp", function() { return clamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rainbowAt", function() { return rainbowAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "angleBounds", function() { return angleBounds; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPointInPoly", function() { return isPointInPoly; });
/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../extensions */ "./src/ChemDoodle/extensions/index.js");
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib */ "./src/ChemDoodle/lib/index.js");
/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../structures */ "./src/ChemDoodle/structures/index.js");
/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ChemDoodle */ "./src/ChemDoodle/index.js");
/* harmony import */ var _Bounds__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Bounds */ "./src/ChemDoodle/math/Bounds.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Bounds", function() { return _Bounds__WEBPACK_IMPORTED_MODULE_4__["default"]; });






var m = Math;
var pack = {};
var namedColors = {
  'aliceblue': '#f0f8ff',
  'antiquewhite': '#faebd7',
  'aqua': '#00ffff',
  'aquamarine': '#7fffd4',
  'azure': '#f0ffff',
  'beige': '#f5f5dc',
  'bisque': '#ffe4c4',
  'black': '#000000',
  'blanchedalmond': '#ffebcd',
  'blue': '#0000ff',
  'blueviolet': '#8a2be2',
  'brown': '#a52a2a',
  'burlywood': '#deb887',
  'cadetblue': '#5f9ea0',
  'chartreuse': '#7fff00',
  'chocolate': '#d2691e',
  'coral': '#ff7f50',
  'cornflowerblue': '#6495ed',
  'cornsilk': '#fff8dc',
  'crimson': '#dc143c',
  'cyan': '#00ffff',
  'darkblue': '#00008b',
  'darkcyan': '#008b8b',
  'darkgoldenrod': '#b8860b',
  'darkgray': '#a9a9a9',
  'darkgreen': '#006400',
  'darkkhaki': '#bdb76b',
  'darkmagenta': '#8b008b',
  'darkolivegreen': '#556b2f',
  'darkorange': '#ff8c00',
  'darkorchid': '#9932cc',
  'darkred': '#8b0000',
  'darksalmon': '#e9967a',
  'darkseagreen': '#8fbc8f',
  'darkslateblue': '#483d8b',
  'darkslategray': '#2f4f4f',
  'darkturquoise': '#00ced1',
  'darkviolet': '#9400d3',
  'deeppink': '#ff1493',
  'deepskyblue': '#00bfff',
  'dimgray': '#696969',
  'dodgerblue': '#1e90ff',
  'firebrick': '#b22222',
  'floralwhite': '#fffaf0',
  'forestgreen': '#228b22',
  'fuchsia': '#ff00ff',
  'gainsboro': '#dcdcdc',
  'ghostwhite': '#f8f8ff',
  'gold': '#ffd700',
  'goldenrod': '#daa520',
  'gray': '#808080',
  'green': '#008000',
  'greenyellow': '#adff2f',
  'honeydew': '#f0fff0',
  'hotpink': '#ff69b4',
  'indianred ': '#cd5c5c',
  'indigo ': '#4b0082',
  'ivory': '#fffff0',
  'khaki': '#f0e68c',
  'lavender': '#e6e6fa',
  'lavenderblush': '#fff0f5',
  'lawngreen': '#7cfc00',
  'lemonchiffon': '#fffacd',
  'lightblue': '#add8e6',
  'lightcoral': '#f08080',
  'lightcyan': '#e0ffff',
  'lightgoldenrodyellow': '#fafad2',
  'lightgrey': '#d3d3d3',
  'lightgreen': '#90ee90',
  'lightpink': '#ffb6c1',
  'lightsalmon': '#ffa07a',
  'lightseagreen': '#20b2aa',
  'lightskyblue': '#87cefa',
  'lightslategray': '#778899',
  'lightsteelblue': '#b0c4de',
  'lightyellow': '#ffffe0',
  'lime': '#00ff00',
  'limegreen': '#32cd32',
  'linen': '#faf0e6',
  'magenta': '#ff00ff',
  'maroon': '#800000',
  'mediumaquamarine': '#66cdaa',
  'mediumblue': '#0000cd',
  'mediumorchid': '#ba55d3',
  'mediumpurple': '#9370d8',
  'mediumseagreen': '#3cb371',
  'mediumslateblue': '#7b68ee',
  'mediumspringgreen': '#00fa9a',
  'mediumturquoise': '#48d1cc',
  'mediumvioletred': '#c71585',
  'midnightblue': '#191970',
  'mintcream': '#f5fffa',
  'mistyrose': '#ffe4e1',
  'moccasin': '#ffe4b5',
  'navajowhite': '#ffdead',
  'navy': '#000080',
  'oldlace': '#fdf5e6',
  'olive': '#808000',
  'olivedrab': '#6b8e23',
  'orange': '#ffa500',
  'orangered': '#ff4500',
  'orchid': '#da70d6',
  'palegoldenrod': '#eee8aa',
  'palegreen': '#98fb98',
  'paleturquoise': '#afeeee',
  'palevioletred': '#d87093',
  'papayawhip': '#ffefd5',
  'peachpuff': '#ffdab9',
  'peru': '#cd853f',
  'pink': '#ffc0cb',
  'plum': '#dda0dd',
  'powderblue': '#b0e0e6',
  'purple': '#800080',
  'red': '#ff0000',
  'rosybrown': '#bc8f8f',
  'royalblue': '#4169e1',
  'saddlebrown': '#8b4513',
  'salmon': '#fa8072',
  'sandybrown': '#f4a460',
  'seagreen': '#2e8b57',
  'seashell': '#fff5ee',
  'sienna': '#a0522d',
  'silver': '#c0c0c0',
  'skyblue': '#87ceeb',
  'slateblue': '#6a5acd',
  'slategray': '#708090',
  'snow': '#fffafa',
  'springgreen': '#00ff7f',
  'steelblue': '#4682b4',
  'tan': '#d2b48c',
  'teal': '#008080',
  'thistle': '#d8bfd8',
  'tomato': '#ff6347',
  'turquoise': '#40e0d0',
  'violet': '#ee82ee',
  'wheat': '#f5deb3',
  'white': '#ffffff',
  'whitesmoke': '#f5f5f5',
  'yellow': '#ffff00',
  'yellowgreen': '#9acd32'
};
function angleBetweenLargest(angles) {
  if (angles.length === 0) {
    return {
      angle: 0,
      largest: m.PI * 2
    };
  }

  if (angles.length === 1) {
    return {
      angle: angles[0] + m.PI,
      largest: m.PI * 2
    };
  }

  var largest = 0;
  var angle = 0;

  for (var i = 0, ii = angles.length - 1; i < ii; i++) {
    var dif = angles[i + 1] - angles[i];

    if (dif > largest) {
      largest = dif;
      angle = (angles[i + 1] + angles[i]) / 2;
    }
  }

  var last = angles[0] + m.PI * 2 - angles[angles.length - 1];

  if (last > largest) {
    angle = angles[0] - last / 2;
    largest = last;

    if (angle < 0) {
      angle += m.PI * 2;
    }
  }

  return {
    angle: angle,
    largest: largest
  };
}
;
function isBetween(x, left, right) {
  if (left > right) {
    var tmp = left;
    left = right;
    right = tmp;
  }

  return x >= left && x <= right;
}
; // be careful not to remove this, as this will cause corruption issues
// contact iChemLabs for instructions to remove this

Object(_lib__WEBPACK_IMPORTED_MODULE_1__["jQuery"])(document).ready(function () {
  if (_ChemDoodle__WEBPACK_IMPORTED_MODULE_3__ && _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__["iChemLabs"] && _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__["iChemLabs"].checkForUpdates) {
    _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__["iChemLabs"].checkForUpdates({});
  }
});
function getRGB(color, multiplier) {
  var err = [0, 0, 0];

  if (namedColors[color.toLowerCase()]) {
    color = namedColors[color.toLowerCase()];
  }

  if (color.charAt(0) === '#') {
    if (color.length === 4) {
      color = '#' + color.charAt(1) + color.charAt(1) + color.charAt(2) + color.charAt(2) + color.charAt(3) + color.charAt(3);
    }

    return [parseInt(color.substring(1, 3), 16) / 255.0 * multiplier, parseInt(color.substring(3, 5), 16) / 255.0 * multiplier, parseInt(color.substring(5, 7), 16) / 255.0 * multiplier];
  } else if (Object(_extensions__WEBPACK_IMPORTED_MODULE_0__["stringStartsWith"])(color, 'rgb')) {
    var cs = color.replace(/rgb\(|\)/g, '').split(',');

    if (cs.length !== 3) {
      return err;
    }

    return [parseInt(cs[0]) / 255.0 * multiplier, parseInt(cs[1]) / 255.0 * multiplier, parseInt(cs[2]) / 255.0 * multiplier];
  }

  return err;
}
;
function hsl2rgb(h, s, l) {
  var hue2rgb = function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    } else if (t > 1) {
      t -= 1;
    }

    if (t < 1 / 6) {
      return p + (q - p) * 6 * t;
    } else if (t < 1 / 2) {
      return q;
    } else if (t < 2 / 3) {
      return p + (q - p) * (2 / 3 - t) * 6;
    }

    return p;
  };

  var r, g, b;

  if (s === 0) {
    r = g = b = l; // achromatic
  } else {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = hue2rgb(p, q, h + 1 / 3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1 / 3);
  }

  return [r * 255, g * 255, b * 255];
}
;
function idx2color(value) {
  var hex = value.toString(16); // add '0' padding

  for (var i = 0, ii = 6 - hex.length; i < ii; i++) {
    hex = "0" + hex;
  }

  return "#" + hex;
}
;
function distanceFromPointToLineInclusive(p, l1, l2, retract) {
  var length = l1.distance(l2);
  var angle = l1.angle(l2);
  var angleDif = m.PI / 2 - angle;
  var newAngleP = l1.angle(p) + angleDif;
  var pDist = l1.distance(p);
  var pcopRot = new _structures__WEBPACK_IMPORTED_MODULE_2__["Point"](pDist * m.cos(newAngleP), -pDist * m.sin(newAngleP));
  var pull = retract ? retract : 0;

  if (isBetween(-pcopRot.y, pull, length - pull)) {
    return m.abs(pcopRot.x);
  }

  return -1;
}
;
function calculateDistanceInterior(to, from, r) {
  if (isBetween(from.x, r.x, r.x + r.w) && isBetween(from.y, r.y, r.y + r.h)) {
    return to.distance(from);
  } // calculates the distance that a line needs to remove from itself to be
  // outside that rectangle


  var lines = []; // top

  lines.push({
    x1: r.x,
    y1: r.y,
    x2: r.x + r.w,
    y2: r.y
  }); // bottom

  lines.push({
    x1: r.x,
    y1: r.y + r.h,
    x2: r.x + r.w,
    y2: r.y + r.h
  }); // left

  lines.push({
    x1: r.x,
    y1: r.y,
    x2: r.x,
    y2: r.y + r.h
  }); // right

  lines.push({
    x1: r.x + r.w,
    y1: r.y,
    x2: r.x + r.w,
    y2: r.y + r.h
  });
  var intersections = [];

  for (var i = 0; i < 4; i++) {
    var l = lines[i];
    var p = intersectLines(from.x, from.y, to.x, to.y, l.x1, l.y1, l.x2, l.y2);

    if (p) {
      intersections.push(p);
    }
  }

  if (intersections.length === 0) {
    return 0;
  }

  var max = 0;

  for (var i = 0, ii = intersections.length; i < ii; i++) {
    var p = intersections[i];
    var dx = to.x - p.x;
    var dy = to.y - p.y;
    max = m.max(max, m.sqrt(dx * dx + dy * dy));
  }

  return max;
}
;
function intersectLines(ax, ay, bx, by, cx, cy, dx, dy) {
  // calculate the direction vectors
  bx -= ax;
  by -= ay;
  dx -= cx;
  dy -= cy; // are they parallel?

  var denominator = by * dx - bx * dy;

  if (denominator === 0) {
    return false;
  } // calculate point of intersection


  var r = (dy * (ax - cx) - dx * (ay - cy)) / denominator;
  var s = (by * (ax - cx) - bx * (ay - cy)) / denominator;

  if (s >= 0 && s <= 1 && r >= 0 && r <= 1) {
    return {
      x: ax + r * bx,
      y: ay + r * by
    };
  } else {
    return false;
  }
}
;
function clamp(value, min, max) {
  return value < min ? min : value > max ? max : value;
}
;
function rainbowAt(i, ii, colors) {
  // The rainbow colors length must be more than one color
  if (colors.length < 1) {
    colors.push('#000000', '#FFFFFF');
  } else if (colors.length < 2) {
    colors.push('#FFFFFF');
  }

  var step = ii / (colors.length - 1);
  var j = m.floor(i / step);
  var t = (i - j * step) / step;
  var startColor = getRGB(colors[j], 1);
  var endColor = getRGB(colors[j + 1], 1);
  var lerpColor = [(startColor[0] + (endColor[0] - startColor[0]) * t) * 255, (startColor[1] + (endColor[1] - startColor[1]) * t) * 255, (startColor[2] + (endColor[2] - startColor[2]) * t) * 255];
  return 'rgb(' + lerpColor.join(',') + ')';
}
;
function angleBounds(angle, convertToDegrees, limitToPi) {
  var full = m.PI * 2;

  while (angle < 0) {
    angle += full;
  }

  while (angle > full) {
    angle -= full;
  }

  if (limitToPi && angle > m.PI) {
    angle = 2 * m.PI - angle;
  }

  if (convertToDegrees) {
    angle = 180 * angle / m.PI;
  }

  return angle;
}
;
function isPointInPoly(poly, pt) {
  for (var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i) {
    (poly[i].y <= pt.y && pt.y < poly[j].y || poly[j].y <= pt.y && pt.y < poly[i].y) && pt.x < (poly[j].x - poly[i].x) * (pt.y - poly[i].y) / (poly[j].y - poly[i].y) + poly[i].x && (c = !c);
  }

  return c;
}
;

/***/ }),

/***/ "./src/ChemDoodle/monitor.js":
/*!***********************************!*\
  !*** ./src/ChemDoodle/monitor.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _featureDetection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./featureDetection */ "./src/ChemDoodle/featureDetection.js");
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib */ "./src/ChemDoodle/lib/index.js");


var m = {};
m.CANVAS_DRAGGING = undefined;
m.CANVAS_OVER = undefined;
m.ALT = false;
m.SHIFT = false;
m.META = false;

if (!_featureDetection__WEBPACK_IMPORTED_MODULE_0__["default"].supports_touch()) {
  Object(_lib__WEBPACK_IMPORTED_MODULE_1__["jQuery"])(document).ready(function () {
    // handles dragging beyond the canvas bounds
    Object(_lib__WEBPACK_IMPORTED_MODULE_1__["jQuery"])(document).mousemove(function (e) {
      if (m.CANVAS_DRAGGING) {
        if (m.CANVAS_DRAGGING.drag) {
          m.CANVAS_DRAGGING.prehandleEvent(e);
          m.CANVAS_DRAGGING.drag(e);
        }
      }
    });
    Object(_lib__WEBPACK_IMPORTED_MODULE_1__["jQuery"])(document).mouseup(function (e) {
      if (m.CANVAS_DRAGGING && m.CANVAS_DRAGGING !== m.CANVAS_OVER) {
        if (m.CANVAS_DRAGGING.mouseup) {
          m.CANVAS_DRAGGING.prehandleEvent(e);
          m.CANVAS_DRAGGING.mouseup(e);
        }
      }

      m.CANVAS_DRAGGING = undefined;
    }); // handles modifier keys from a single keyboard

    Object(_lib__WEBPACK_IMPORTED_MODULE_1__["jQuery"])(document).keydown(function (e) {
      m.SHIFT = e.shiftKey;
      m.ALT = e.altKey;
      m.META = e.metaKey || e.ctrlKey;
      var affecting = m.CANVAS_OVER;

      if (m.CANVAS_DRAGGING) {
        affecting = m.CANVAS_DRAGGING;
      }

      if (affecting) {
        if (affecting.keydown) {
          affecting.prehandleEvent(e);
          affecting.keydown(e);
        }
      }
    });
    Object(_lib__WEBPACK_IMPORTED_MODULE_1__["jQuery"])(document).keypress(function (e) {
      var affecting = m.CANVAS_OVER;

      if (m.CANVAS_DRAGGING) {
        affecting = m.CANVAS_DRAGGING;
      }

      if (affecting) {
        if (affecting.keypress) {
          affecting.prehandleEvent(e);
          affecting.keypress(e);
        }
      }
    });
    Object(_lib__WEBPACK_IMPORTED_MODULE_1__["jQuery"])(document).keyup(function (e) {
      m.SHIFT = e.shiftKey;
      m.ALT = e.altKey;
      m.META = e.metaKey || e.ctrlKey;
      var affecting = m.CANVAS_OVER;

      if (m.CANVAS_DRAGGING) {
        affecting = m.CANVAS_DRAGGING;
      }

      if (affecting) {
        if (affecting.keyup) {
          affecting.prehandleEvent(e);
          affecting.keyup(e);
        }
      }
    });
  });
}

var monitor = m;
/* harmony default export */ __webpack_exports__["default"] = (monitor);

/***/ }),

/***/ "./src/ChemDoodle/structures/Atom.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/structures/Atom.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Atom; });
/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ChemDoodle */ "./src/ChemDoodle/index.js");
/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../extensions */ "./src/ChemDoodle/extensions/index.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math */ "./src/ChemDoodle/math/index.js");
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib */ "./src/ChemDoodle/lib/index.js");
/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Point */ "./src/ChemDoodle/structures/Point.js");
/* harmony import */ var _CondensedLabel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CondensedLabel */ "./src/ChemDoodle/structures/CondensedLabel.js");






var m = Math;
function Atom(label, x, y, z) {
  this.label = label ? label.replace(/\s/g, '') : 'C';
  this.x = x ? x : 0;
  this.y = y ? y : 0;
  this.z = z ? z : 0;
}
;

var _ = Atom.prototype = new _Point__WEBPACK_IMPORTED_MODULE_4__["default"](0, 0);

_.charge = 0;
_.numLonePair = 0;
_.numRadical = 0;
_.mass = -1;
_.implicitH = -1;
_.coordinationNumber = 0;
_.bondNumber = 0;
_.angleOfLeastInterference = 0;
_.isHidden = false;
_.altLabel = undefined;
_.isLone = false;
_.isHover = false;
_.isSelected = false;

_.add3D = function (p) {
  this.x += p.x;
  this.y += p.y;
  this.z += p.z;
};

_.sub3D = function (p) {
  this.x -= p.x;
  this.y -= p.y;
  this.z -= p.z;
};

_.distance3D = function (p) {
  var dx = p.x - this.x;
  var dy = p.y - this.y;
  var dz = p.z - this.z;
  return m.sqrt(dx * dx + dy * dy + dz * dz);
};

_.draw = function (ctx, specs) {
  if (this.dontDraw) {
    // this is used when the atom shouldn't be visible, such as when the text input field is open over this atom
    return;
  }

  if (this.isLassoed) {
    var grd = ctx.createRadialGradient(this.x - 1, this.y - 1, 0, this.x, this.y, 7);
    grd.addColorStop(0, 'rgba(212, 99, 0, 0)');
    grd.addColorStop(0.7, 'rgba(212, 99, 0, 0.8)');
    ctx.fillStyle = grd;
    ctx.beginPath();
    ctx.arc(this.x, this.y, 5, 0, m.PI * 2, false);
    ctx.fill();
  }

  if (this.query) {
    return;
  }

  this.textBounds = [];

  if (this.specs) {
    specs = this.specs;
  }

  var font = _extensions__WEBPACK_IMPORTED_MODULE_1__["getFontString"](specs.atoms_font_size_2D, specs.atoms_font_families_2D, specs.atoms_font_bold_2D, specs.atoms_font_italic_2D);
  ctx.font = font;
  ctx.fillStyle = this.getElementColor(specs.atoms_useJMOLColors, specs.atoms_usePYMOLColors, specs.atoms_color, 2);

  if (this.label === 'H' && specs.atoms_HBlack_2D) {
    ctx.fillStyle = 'black';
  }

  if (this.error) {
    ctx.fillStyle = specs.colorError;
  }

  var hAngle;
  var labelVisible = this.isLabelVisible(specs);

  if (this.isLone && !labelVisible || specs.atoms_circles_2D) {
    // always use carbon gray for lone carbon atom dots
    if (this.isLone) {
      ctx.fillStyle = '#909090';
    }

    ctx.beginPath();
    ctx.arc(this.x, this.y, specs.atoms_circleDiameter_2D / 2, 0, m.PI * 2, false);
    ctx.fill();

    if (specs.atoms_circleBorderWidth_2D > 0) {
      ctx.lineWidth = specs.atoms_circleBorderWidth_2D;
      ctx.strokeStyle = 'black';
      ctx.stroke();
    }
  } else if (labelVisible) {
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle'; // keep check to undefined here as dev may set altLabel to empty
    // string

    if (this.altLabel !== undefined) {
      // altLabel can be 0, so check if undefined
      ctx.fillText(this.altLabel, this.x, this.y);
      var symbolWidth = ctx.measureText(this.altLabel).width;
      this.textBounds.push({
        x: this.x - symbolWidth / 2,
        y: this.y - specs.atoms_font_size_2D / 2 + 1,
        w: symbolWidth,
        h: specs.atoms_font_size_2D - 2
      });
    } else if (!_ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["ELEMENT"][this.label]) {
      if (_CondensedLabel__WEBPACK_IMPORTED_MODULE_5__["default"]) {
        // CondensedLabel is proprietary and not included in the GPL version
        if (!this.condensed || this.condensed.text !== this.label) {
          this.condensed = new _CondensedLabel__WEBPACK_IMPORTED_MODULE_5__["default"](this, this.label);
        }

        this.condensed.draw(ctx, specs);
      } else {
        ctx.fillText(this.label, this.x, this.y);
        var symbolWidth = ctx.measureText(this.label).width;
        this.textBounds.push({
          x: this.x - symbolWidth / 2,
          y: this.y - specs.atoms_font_size_2D / 2 + 1,
          w: symbolWidth,
          h: specs.atoms_font_size_2D - 2
        });
      }
    } else {
      ctx.fillText(this.label, this.x, this.y);
      var symbolWidth = ctx.measureText(this.label).width;
      this.textBounds.push({
        x: this.x - symbolWidth / 2,
        y: this.y - specs.atoms_font_size_2D / 2 + 1,
        w: symbolWidth,
        h: specs.atoms_font_size_2D - 2
      }); // mass

      var massWidth = 0;

      if (this.mass !== -1) {
        var fontSave = ctx.font;
        ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_1__["getFontString"](specs.atoms_font_size_2D * .7, specs.atoms_font_families_2D, specs.atoms_font_bold_2D, specs.atoms_font_italic_2D);
        massWidth = ctx.measureText(this.mass).width;
        ctx.fillText(this.mass, this.x - massWidth - .5, this.y - specs.atoms_font_size_2D / 2 + 1);
        this.textBounds.push({
          x: this.x - symbolWidth / 2 - massWidth - .5,
          y: this.y - specs.atoms_font_size_2D * 1.7 / 2 + 1,
          w: massWidth,
          h: specs.atoms_font_size_2D / 2 - 1
        });
        ctx.font = fontSave;
      } // implicit hydrogens


      var chargeOffset = symbolWidth / 2;
      var numHs = this.getImplicitHydrogenCount();

      if (specs.atoms_implicitHydrogens_2D && numHs > 0) {
        hAngle = 0;
        var hWidth = ctx.measureText('H').width;
        var moveCharge = true;

        if (numHs > 1) {
          var xoffset = symbolWidth / 2 + hWidth / 2;
          var yoffset = 0;
          var subFont = _extensions__WEBPACK_IMPORTED_MODULE_1__["getFontString"](specs.atoms_font_size_2D * .8, specs.atoms_font_families_2D, specs.atoms_font_bold_2D, specs.atoms_font_italic_2D);
          ctx.font = subFont;
          var numWidth = ctx.measureText(numHs).width;

          if (this.bondNumber === 1) {
            if (this.angleOfLeastInterference > m.PI / 2 && this.angleOfLeastInterference < 3 * m.PI / 2) {
              xoffset = -symbolWidth / 2 - numWidth - hWidth / 2 - massWidth / 2;
              moveCharge = false;
              hAngle = m.PI;
            }
          } else {
            if (this.angleOfLeastInterference <= m.PI / 4) {// default
            } else if (this.angleOfLeastInterference < 3 * m.PI / 4) {
              xoffset = 0;
              yoffset = -specs.atoms_font_size_2D * .9;

              if (this.charge !== 0) {
                yoffset -= specs.atoms_font_size_2D * .3;
              }

              moveCharge = false;
              hAngle = m.PI / 2;
            } else if (this.angleOfLeastInterference <= 5 * m.PI / 4) {
              xoffset = -symbolWidth / 2 - numWidth - hWidth / 2 - massWidth / 2;
              moveCharge = false;
              hAngle = m.PI;
            } else if (this.angleOfLeastInterference < 7 * m.PI / 4) {
              xoffset = 0;
              yoffset = specs.atoms_font_size_2D * .9;
              moveCharge = false;
              hAngle = 3 * m.PI / 2;
            }
          }

          ctx.font = font;
          ctx.fillText('H', this.x + xoffset, this.y + yoffset);
          ctx.font = subFont;
          ctx.fillText(numHs, this.x + xoffset + hWidth / 2 + numWidth / 2, this.y + yoffset + specs.atoms_font_size_2D * .3);
          this.textBounds.push({
            x: this.x + xoffset - hWidth / 2,
            y: this.y + yoffset - specs.atoms_font_size_2D / 2 + 1,
            w: hWidth,
            h: specs.atoms_font_size_2D - 2
          });
          this.textBounds.push({
            x: this.x + xoffset + hWidth / 2,
            y: this.y + yoffset + specs.atoms_font_size_2D * .3 - specs.atoms_font_size_2D / 2 + 1,
            w: numWidth,
            h: specs.atoms_font_size_2D * .8 - 2
          });
        } else {
          var xoffset = symbolWidth / 2 + hWidth / 2;
          var yoffset = 0;

          if (this.bondNumber === 1) {
            if (this.angleOfLeastInterference > m.PI / 2 && this.angleOfLeastInterference < 3 * m.PI / 2) {
              xoffset = -symbolWidth / 2 - hWidth / 2 - massWidth / 2;
              moveCharge = false;
              hAngle = m.PI;
            }
          } else {
            if (this.angleOfLeastInterference <= m.PI / 4) {// default
            } else if (this.angleOfLeastInterference < 3 * m.PI / 4) {
              xoffset = 0;
              yoffset = -specs.atoms_font_size_2D * .9;
              moveCharge = false;
              hAngle = m.PI / 2;
            } else if (this.angleOfLeastInterference <= 5 * m.PI / 4) {
              xoffset = -symbolWidth / 2 - hWidth / 2 - massWidth / 2;
              moveCharge = false;
              hAngle = m.PI;
            } else if (this.angleOfLeastInterference < 7 * m.PI / 4) {
              xoffset = 0;
              yoffset = specs.atoms_font_size_2D * .9;
              moveCharge = false;
              hAngle = 3 * m.PI / 2;
            }
          }

          ctx.fillText('H', this.x + xoffset, this.y + yoffset);
          this.textBounds.push({
            x: this.x + xoffset - hWidth / 2,
            y: this.y + yoffset - specs.atoms_font_size_2D / 2 + 1,
            w: hWidth,
            h: specs.atoms_font_size_2D - 2
          });
        }

        if (moveCharge) {
          chargeOffset += hWidth;
        } // adjust the angles metadata to account for hydrogen
        // placement

        /*
          * this.angles.push(hAngle); var angleData =
          * math.angleBetweenLargest(this.angles);
          * this.angleOfLeastInterference = angleData.angle % (m.PI *
          * 2); this.largestAngle = angleData.largest;
          */

      } // charge


      if (this.charge !== 0) {
        var s = this.charge.toFixed(0);

        if (s === '1') {
          s = '+';
        } else if (s === '-1') {
          s = "\u2013";
        } else if (_extensions__WEBPACK_IMPORTED_MODULE_1__["stringStartsWith"](s, '-')) {
          s = s.substring(1) + "\u2013";
        } else {
          s += '+';
        }

        var chargeWidth = ctx.measureText(s).width;
        chargeOffset += chargeWidth / 2;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_1__["getFontString"](m.floor(specs.atoms_font_size_2D * .8), specs.atoms_font_families_2D, specs.atoms_font_bold_2D, specs.atoms_font_italic_2D);
        ctx.fillText(s, this.x + chargeOffset - 1, this.y - specs.atoms_font_size_2D / 2 + 1);
        this.textBounds.push({
          x: this.x + chargeOffset - chargeWidth / 2 - 1,
          y: this.y - specs.atoms_font_size_2D * 1.8 / 2 + 5,
          w: chargeWidth,
          h: specs.atoms_font_size_2D / 2 - 1
        });
      }
    }
  }

  if (this.numLonePair > 0 || this.numRadical > 0) {
    ctx.fillStyle = 'black';
    var as = this.angles.slice(0);
    var ali = this.angleOfLeastInterference;
    var la = this.largestAngle;

    if (hAngle !== undefined) {
      // have to check for undefined here as this number can be 0
      as.push(hAngle);
      as.sort(function (a, b) {
        return a - b;
      });
      var angleData = _math__WEBPACK_IMPORTED_MODULE_2__["angleBetweenLargest"](as);
      ali = angleData.angle % (m.PI * 2);
      la = angleData.largest;
    }

    var things = [];

    for (var i = 0; i < this.numLonePair; i++) {
      things.push({
        t: 2
      });
    }

    for (var i = 0; i < this.numRadical; i++) {
      things.push({
        t: 1
      });
    }

    if (hAngle === undefined && m.abs(la - 2 * m.PI / as.length) < m.PI / 60) {
      var mid = m.ceil(things.length / as.length);

      for (var i = 0, ii = things.length; i < ii; i += mid, ali += la) {
        this.drawElectrons(ctx, specs, things.slice(i, m.min(things.length, i + mid)), ali, la, hAngle);
      }
    } else {
      this.drawElectrons(ctx, specs, things, ali, la, hAngle);
    }
  } // for debugging atom label dimensions
  //ctx.strokeStyle = 'red'; for(var i = 0, ii = this.textBounds.length;i<ii; i++){ var r = this.textBounds[i];ctx.beginPath();ctx.rect(r.x, r.y, r.w, r.h); ctx.stroke(); }

};

_.drawElectrons = function (ctx, specs, things, angle, largest, hAngle) {
  var segment = largest / (things.length + (this.bonds.length === 0 && hAngle === undefined ? 0 : 1));
  var angleStart = angle - largest / 2 + segment;

  for (var i = 0; i < things.length; i++) {
    var t = things[i];
    var angle = angleStart + i * segment;
    var p1x = this.x + Math.cos(angle) * specs.atoms_lonePairDistance_2D;
    var p1y = this.y - Math.sin(angle) * specs.atoms_lonePairDistance_2D;

    if (t.t === 2) {
      var perp = angle + Math.PI / 2;
      var difx = Math.cos(perp) * specs.atoms_lonePairSpread_2D / 2;
      var dify = -Math.sin(perp) * specs.atoms_lonePairSpread_2D / 2;
      ctx.beginPath();
      ctx.arc(p1x + difx, p1y + dify, specs.atoms_lonePairDiameter_2D, 0, m.PI * 2, false);
      ctx.fill();
      ctx.beginPath();
      ctx.arc(p1x - difx, p1y - dify, specs.atoms_lonePairDiameter_2D, 0, m.PI * 2, false);
      ctx.fill();
    } else if (t.t === 1) {
      ctx.beginPath();
      ctx.arc(p1x, p1y, specs.atoms_lonePairDiameter_2D, 0, m.PI * 2, false);
      ctx.fill();
    }
  }
};

_.drawDecorations = function (ctx, specs) {
  if (this.isHover || this.isSelected) {
    ctx.strokeStyle = this.isHover ? specs.colorHover : specs.colorSelect;
    ctx.lineWidth = 1.2;
    ctx.beginPath();
    var radius = this.isHover ? 7 : 15;
    ctx.arc(this.x, this.y, radius, 0, m.PI * 2, false);
    ctx.stroke();
  }

  if (this.isOverlap) {
    ctx.strokeStyle = specs.colorError;
    ctx.lineWidth = 1.2;
    ctx.beginPath();
    ctx.arc(this.x, this.y, 7, 0, m.PI * 2, false);
    ctx.stroke();
  }
};

_.render = function (gl, specs, noColor) {
  if (this.specs) {
    specs = this.specs;
  }

  var transform = _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].translate(_lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].identity(), [this.x, this.y, this.z]);
  var radius = specs.atoms_useVDWDiameters_3D ? _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["ELEMENT"][this.label].vdWRadius * specs.atoms_vdwMultiplier_3D : specs.atoms_sphereDiameter_3D / 2;

  if (radius === 0) {
    radius = 1;
  }

  _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].scale(transform, [radius, radius, radius]); // colors

  if (!noColor) {
    var color = specs.atoms_color;

    if (specs.atoms_useJMOLColors) {
      color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["ELEMENT"][this.label].jmolColor;
    } else if (specs.atoms_usePYMOLColors) {
      color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["ELEMENT"][this.label].pymolColor;
    }

    gl.material.setDiffuseColor(gl, color);
  } // render


  gl.shader.setMatrixUniforms(gl, transform);
  var buffer = this.renderAsStar ? gl.starBuffer : gl.sphereBuffer;
  gl.drawElements(gl.TRIANGLES, buffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
};

_.renderHighlight = function (gl, specs) {
  if (this.isSelected || this.isHover) {
    if (this.specs) {
      specs = this.specs;
    }

    var transform = _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].translate(_lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].identity(), [this.x, this.y, this.z]);
    var radius = specs.atoms_useVDWDiameters_3D ? _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["ELEMENT"][this.label].vdWRadius * specs.atoms_vdwMultiplier_3D : specs.atoms_sphereDiameter_3D / 2;

    if (radius === 0) {
      radius = 1;
    }

    radius *= 1.3;
    _lib__WEBPACK_IMPORTED_MODULE_3__["mat4"].scale(transform, [radius, radius, radius]);
    gl.shader.setMatrixUniforms(gl, transform);
    gl.material.setDiffuseColor(gl, this.isHover ? specs.colorHover : specs.colorSelect);
    var buffer = this.renderAsStar ? gl.starBuffer : gl.sphereBuffer;
    gl.drawElements(gl.TRIANGLES, buffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
  }
};

_.isLabelVisible = function (specs) {
  if (specs.atoms_displayAllCarbonLabels_2D) {
    // show all carbons
    return true;
  }

  if (this.label !== 'C') {
    // not a carbon
    return true;
  }

  if (this.altLabel || !_ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["ELEMENT"][this.label]) {
    // there is an alternative or condensed label
    return true;
  }

  if (this.mass !== -1 || this.implicitH !== -1 || this.charge !== 0) {
    // an isotope or charge or implicit hydrogen override designation, so label must be shown
    return true;
  }

  if (specs.atoms_showAttributedCarbons_2D && (this.numRadical !== 0 || this.numLonePair !== 0)) {
    // there are attributes and we want to show the associated label
    return true;
  }

  if (this.isHidden && specs.atoms_showHiddenCarbons_2D) {
    // if it is hidden and we want to show them
    return true;
  }

  if (specs.atoms_displayTerminalCarbonLabels_2D && this.bondNumber === 1) {
    // if it is terminal and we want to show them
    return true;
  }

  return false;
};

_.getImplicitHydrogenCount = function () {
  if (!_ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["ELEMENT"][this.label] || !_ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["ELEMENT"][this.label].addH) {
    return 0;
  }

  if (this.implicitH !== -1) {
    return this.implicitH;
  }

  if (this.label === 'H') {
    return 0;
  }

  var valence = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["ELEMENT"][this.label].valency;
  var dif = valence - this.coordinationNumber;

  if (this.numRadical > 0) {
    dif = m.max(0, dif - this.numRadical);
  }

  if (this.charge > 0) {
    var vdif = 4 - valence;

    if (this.charge <= vdif) {
      dif += this.charge;
    } else {
      dif = 4 - this.coordinationNumber - this.charge + vdif;
    }
  } else {
    dif += this.charge;
  }

  return dif < 0 ? 0 : m.floor(dif);
};

_.getBounds = function () {
  var bounds = new _math__WEBPACK_IMPORTED_MODULE_2__["Bounds"]();
  bounds.expand(this.x, this.y);

  if (this.textBounds) {
    for (var i = 0, ii = this.textBounds.length; i < ii; i++) {
      var tb = this.textBounds[i];
      bounds.expand(tb.x, tb.y, tb.x + tb.w, tb.y + tb.h);
    }
  }

  return bounds;
};

_.getBounds3D = function () {
  var bounds = new _math__WEBPACK_IMPORTED_MODULE_2__["Bounds"]();
  bounds.expand3D(this.x, this.y, this.z);
  return bounds;
};
/**
 * Get Color by atom element.
 * 
 * @param {boolean}
 *            useJMOLColors
 * @param {boolean}
 *            usePYMOLColors
 * @param {string}
 *            color The default color
 * @param {number}
 *            dim The render dimension
 * @return {string} The atom element color
 */


_.getElementColor = function (useJMOLColors, usePYMOLColors, color) {
  if (!_ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["ELEMENT"][this.label]) {
    return '#000';
  }

  if (useJMOLColors) {
    color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["ELEMENT"][this.label].jmolColor;
  } else if (usePYMOLColors) {
    color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["ELEMENT"][this.label].pymolColor;
  }

  return color;
};

/***/ }),

/***/ "./src/ChemDoodle/structures/Bond.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/structures/Bond.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Bond; });
/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../extensions */ "./src/ChemDoodle/extensions/index.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math */ "./src/ChemDoodle/math/index.js");
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib */ "./src/ChemDoodle/lib/index.js");
/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Point */ "./src/ChemDoodle/structures/Point.js");




var m = Math;
function Bond(a1, a2, bondOrder) {
  this.a1 = a1;
  this.a2 = a2; // bondOrder can be 0, so need to check against undefined

  this.bondOrder = bondOrder !== undefined ? bondOrder : 1;
}
;
Bond.STEREO_NONE = 'none';
Bond.STEREO_PROTRUDING = 'protruding';
Bond.STEREO_RECESSED = 'recessed';
Bond.STEREO_AMBIGUOUS = 'ambiguous';
var _ = Bond.prototype;
_.stereo = Bond.STEREO_NONE;
_.isHover = false;
_.ring = undefined;

_.getCenter = function () {
  return new _Point__WEBPACK_IMPORTED_MODULE_3__["default"]((this.a1.x + this.a2.x) / 2, (this.a1.y + this.a2.y) / 2);
};

_.getLength = function () {
  return this.a1.distance(this.a2);
};

_.getLength3D = function () {
  return this.a1.distance3D(this.a2);
};

_.contains = function (a) {
  return a === this.a1 || a === this.a2;
};

_.getNeighbor = function (a) {
  if (a === this.a1) {
    return this.a2;
  } else if (a === this.a2) {
    return this.a1;
  }

  return undefined;
};

_.draw = function (ctx, specs) {
  if (this.a1.x === this.a2.x && this.a1.y === this.a2.y) {
    // return, as there is nothing to render, will only cause fill
    // overflows
    return;
  }

  if (this.specs) {
    specs = this.specs;
  }

  var x1 = this.a1.x;
  var x2 = this.a2.x;
  var y1 = this.a1.y;
  var y2 = this.a2.y;
  var dist = this.a1.distance(this.a2);
  var difX = x2 - x1;
  var difY = y2 - y1;

  if (this.a1.isLassoed && this.a2.isLassoed) {
    var grd = ctx.createLinearGradient(x1, y1, x2, y2);
    grd.addColorStop(0, 'rgba(212, 99, 0, 0)');
    grd.addColorStop(0.5, 'rgba(212, 99, 0, 0.8)');
    grd.addColorStop(1, 'rgba(212, 99, 0, 0)');
    var useDist = 2.5;
    var perpendicular = this.a1.angle(this.a2) + m.PI / 2;
    var mcosp = m.cos(perpendicular);
    var msinp = m.sin(perpendicular);
    var cx1 = x1 - mcosp * useDist;
    var cy1 = y1 + msinp * useDist;
    var cx2 = x1 + mcosp * useDist;
    var cy2 = y1 - msinp * useDist;
    var cx3 = x2 + mcosp * useDist;
    var cy3 = y2 - msinp * useDist;
    var cx4 = x2 - mcosp * useDist;
    var cy4 = y2 + msinp * useDist;
    ctx.fillStyle = grd;
    ctx.beginPath();
    ctx.moveTo(cx1, cy1);
    ctx.lineTo(cx2, cy2);
    ctx.lineTo(cx3, cy3);
    ctx.lineTo(cx4, cy4);
    ctx.closePath();
    ctx.fill();
  }

  if (specs.atoms_display && !specs.atoms_circles_2D && this.a1.isLabelVisible(specs) && this.a1.textBounds) {
    var distShrink = 0;

    for (var i = 0, ii = this.a1.textBounds.length; i < ii; i++) {
      distShrink = Math.max(distShrink, _math__WEBPACK_IMPORTED_MODULE_1__["calculateDistanceInterior"](this.a1, this.a2, this.a1.textBounds[i]));
    }

    distShrink += specs.bonds_atomLabelBuffer_2D;
    var perc = distShrink / dist;
    x1 += difX * perc;
    y1 += difY * perc;
  }

  if (specs.atoms_display && !specs.atoms_circles_2D && this.a2.isLabelVisible(specs) && this.a2.textBounds) {
    var distShrink = 0;

    for (var i = 0, ii = this.a2.textBounds.length; i < ii; i++) {
      distShrink = Math.max(distShrink, _math__WEBPACK_IMPORTED_MODULE_1__["calculateDistanceInterior"](this.a2, this.a1, this.a2.textBounds[i]));
    }

    distShrink += specs.bonds_atomLabelBuffer_2D;
    var perc = distShrink / dist;
    x2 -= difX * perc;
    y2 -= difY * perc;
  }

  if (specs.bonds_clearOverlaps_2D) {
    var xs = x1 + difX * .15;
    var ys = y1 + difY * .15;
    var xf = x2 - difX * .15;
    var yf = y2 - difY * .15;
    ctx.strokeStyle = specs.backgroundColor;
    ctx.lineWidth = specs.bonds_width_2D + specs.bonds_overlapClearWidth_2D * 2;
    ctx.lineCap = 'round';
    ctx.beginPath();
    ctx.moveTo(xs, ys);
    ctx.lineTo(xf, yf);
    ctx.closePath();
    ctx.stroke();
  }

  ctx.strokeStyle = this.error ? specs.colorError : specs.bonds_color;
  ctx.fillStyle = this.error ? specs.colorError : specs.bonds_color;
  ctx.lineWidth = specs.bonds_width_2D;
  ctx.lineCap = specs.bonds_ends_2D;

  if (specs.bonds_splitColor) {
    var linearGradient = ctx.createLinearGradient(x1, y1, x2, y2);
    var specs1 = this.a1.specs ? this.a1.specs : specs;
    var specs2 = this.a2.specs ? this.a2.specs : specs;
    var color1 = this.a1.getElementColor(specs1.atoms_useJMOLColors, specs1.atoms_usePYMOLColors, specs1.atoms_color, 2);
    var color2 = this.a2.getElementColor(specs2.atoms_useJMOLColors, specs2.atoms_usePYMOLColors, specs2.atoms_color, 2);
    linearGradient.addColorStop(0, color1);

    if (!specs.bonds_colorGradient) {
      linearGradient.addColorStop(0.5, color1);
      linearGradient.addColorStop(0.51, color2);
    }

    linearGradient.addColorStop(1, color2);
    ctx.strokeStyle = linearGradient;
    ctx.fillStyle = linearGradient;
  }

  if (specs.bonds_lewisStyle_2D && this.bondOrder % 1 === 0) {
    this.drawLewisStyle(ctx, specs, x1, y1, x2, y2);
  } else {
    switch (this.query ? 1 : this.bondOrder) {
      case 0:
        var dx = x2 - x1;
        var dy = y2 - y1;
        var innerDist = m.sqrt(dx * dx + dy * dy);
        var num = m.floor(innerDist / specs.bonds_dotSize_2D);
        var remainder = (innerDist - (num - 1) * specs.bonds_dotSize_2D) / 2;

        if (num % 2 === 1) {
          remainder += specs.bonds_dotSize_2D / 4;
        } else {
          remainder -= specs.bonds_dotSize_2D / 4;
          num += 2;
        }

        num /= 2;
        var angle = this.a1.angle(this.a2);
        var xs = x1 + remainder * Math.cos(angle);
        var ys = y1 - remainder * Math.sin(angle);
        ctx.beginPath();

        for (var i = 0; i < num; i++) {
          ctx.arc(xs, ys, specs.bonds_dotSize_2D / 2, 0, m.PI * 2, false);
          xs += 2 * specs.bonds_dotSize_2D * Math.cos(angle);
          ys -= 2 * specs.bonds_dotSize_2D * Math.sin(angle);
        }

        ctx.fill();
        break;

      case 0.5:
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.setLineDash([specs.bonds_hashSpacing_2D, specs.bonds_hashSpacing_2D]);
        ctx.stroke();
        ctx.setLineDash([]);
        break;

      case 1:
        if (!this.query && (this.stereo === Bond.STEREO_PROTRUDING || this.stereo === Bond.STEREO_RECESSED)) {
          var thinSpread = specs.bonds_width_2D / 2;
          var useDist = specs.bonds_wedgeThickness_2D / 2;
          var perpendicular = this.a1.angle(this.a2) + m.PI / 2;
          var mcosp = m.cos(perpendicular);
          var msinp = m.sin(perpendicular);
          var cx1 = x1 - mcosp * thinSpread;
          var cy1 = y1 + msinp * thinSpread;
          var cx2 = x1 + mcosp * thinSpread;
          var cy2 = y1 - msinp * thinSpread;
          var cx3 = x2 + mcosp * useDist;
          var cy3 = y2 - msinp * useDist;
          var cx4 = x2 - mcosp * useDist;
          var cy4 = y2 + msinp * useDist;
          ctx.beginPath();
          ctx.moveTo(cx1, cy1);
          ctx.lineTo(cx2, cy2);
          ctx.lineTo(cx3, cy3);
          ctx.lineTo(cx4, cy4);
          ctx.closePath();

          if (this.stereo === Bond.STEREO_PROTRUDING) {
            ctx.fill();
          } else {
            ctx.save();
            ctx.clip();
            ctx.lineWidth = useDist * 2;
            ctx.lineCap = 'butt';
            ctx.beginPath();
            ctx.moveTo(x1, y1); // workaround to lengthen distance for Firefox as there is a bug, shouldn't affect rendering or performance

            var dx = x2 - x1;
            var dy = y2 - y1;
            ctx.lineTo(x2 + 5 * dx, y2 + 5 * dy);
            ctx.setLineDash([specs.bonds_hashWidth_2D, specs.bonds_hashSpacing_2D]);
            ctx.stroke();
            ctx.setLineDash([]);
            ctx.restore();
          }
        } else if (!this.query && this.stereo === Bond.STEREO_AMBIGUOUS) {
          ctx.beginPath();
          ctx.moveTo(x1, y1);
          var curves = m.floor(m.sqrt(difX * difX + difY * difY) / specs.bonds_wavyLength_2D);
          var x = x1;
          var y = y1;
          var perpendicular = this.a1.angle(this.a2) + m.PI / 2;
          var mcosp = m.cos(perpendicular);
          var msinp = m.sin(perpendicular);
          var curveX = difX / curves;
          var curveY = difY / curves;
          var cpx1, cpx2, cpy1, cpy2;

          for (var i = 0, ii = curves; i < ii; i++) {
            x += curveX;
            y += curveY;
            cpx1 = specs.bonds_wavyLength_2D * mcosp + x - curveX * 0.5;
            cpy1 = specs.bonds_wavyLength_2D * -msinp + y - curveY * 0.5;
            cpx2 = specs.bonds_wavyLength_2D * -mcosp + x - curveX * 0.5;
            cpy2 = specs.bonds_wavyLength_2D * msinp + y - curveY * 0.5;

            if (i % 2 === 0) {
              ctx.quadraticCurveTo(cpx1, cpy1, x, y);
            } else {
              ctx.quadraticCurveTo(cpx2, cpy2, x, y);
            }
          }

          ctx.stroke();
          break;
        } else {
          ctx.beginPath();
          ctx.moveTo(x1, y1);
          ctx.lineTo(x2, y2);
          ctx.stroke();

          if (this.query) {
            this.query.draw(ctx, specs, this.getCenter());
          }
        }

        break;

      case 1.5:
      case 2:
        var angle = this.a1.angle(this.a2);
        var perpendicular = angle + m.PI / 2;
        var mcosp = m.cos(perpendicular);
        var msinp = m.sin(perpendicular);
        var dist = this.a1.distance(this.a2);
        var useDist = specs.bonds_useAbsoluteSaturationWidths_2D ? specs.bonds_saturationWidthAbs_2D / 2 : dist * specs.bonds_saturationWidth_2D / 2;

        if (this.stereo === Bond.STEREO_AMBIGUOUS) {
          var cx1 = x1 - mcosp * useDist;
          var cy1 = y1 + msinp * useDist;
          var cx2 = x1 + mcosp * useDist;
          var cy2 = y1 - msinp * useDist;
          var cx3 = x2 + mcosp * useDist;
          var cy3 = y2 - msinp * useDist;
          var cx4 = x2 - mcosp * useDist;
          var cy4 = y2 + msinp * useDist;
          ctx.beginPath();
          ctx.moveTo(cx1, cy1);
          ctx.lineTo(cx3, cy3);
          ctx.moveTo(cx2, cy2);
          ctx.lineTo(cx4, cy4);
          ctx.stroke();
        } else if (!specs.bonds_symmetrical_2D && (this.ring || this.a1.label === 'C' && this.a2.label === 'C')) {
          ctx.beginPath();
          ctx.moveTo(x1, y1);
          ctx.lineTo(x2, y2);
          ctx.stroke();
          var clip = 0;
          useDist *= 2;
          var clipAngle = specs.bonds_saturationAngle_2D;

          if (clipAngle < m.PI / 2) {
            clip = -(useDist / m.tan(clipAngle));
          }

          if (m.abs(clip) < dist / 2) {
            var xuse1 = x1 - m.cos(angle) * clip;
            var xuse2 = x2 + m.cos(angle) * clip;
            var yuse1 = y1 + m.sin(angle) * clip;
            var yuse2 = y2 - m.sin(angle) * clip;
            var cx1 = xuse1 - mcosp * useDist;
            var cy1 = yuse1 + msinp * useDist;
            var cx2 = xuse1 + mcosp * useDist;
            var cy2 = yuse1 - msinp * useDist;
            var cx3 = xuse2 - mcosp * useDist;
            var cy3 = yuse2 + msinp * useDist;
            var cx4 = xuse2 + mcosp * useDist;
            var cy4 = yuse2 - msinp * useDist;
            var flip = !this.ring || this.ring.center.angle(this.a1) > this.ring.center.angle(this.a2) && !(this.ring.center.angle(this.a1) - this.ring.center.angle(this.a2) > m.PI) || this.ring.center.angle(this.a1) - this.ring.center.angle(this.a2) < -m.PI;
            ctx.beginPath();

            if (flip) {
              ctx.moveTo(cx1, cy1);
              ctx.lineTo(cx3, cy3);
            } else {
              ctx.moveTo(cx2, cy2);
              ctx.lineTo(cx4, cy4);
            }

            if (this.bondOrder !== 2) {
              ctx.setLineDash([specs.bonds_hashSpacing_2D, specs.bonds_hashSpacing_2D]);
            }

            ctx.stroke();
            ctx.setLineDash([]);
          }
        } else {
          var cx1 = x1 - mcosp * useDist;
          var cy1 = y1 + msinp * useDist;
          var cx2 = x1 + mcosp * useDist;
          var cy2 = y1 - msinp * useDist;
          var cx3 = x2 + mcosp * useDist;
          var cy3 = y2 - msinp * useDist;
          var cx4 = x2 - mcosp * useDist;
          var cy4 = y2 + msinp * useDist;
          ctx.beginPath();
          ctx.moveTo(cx1, cy1);
          ctx.lineTo(cx4, cy4);
          ctx.stroke();
          ctx.beginPath();
          ctx.moveTo(cx2, cy2);
          ctx.lineTo(cx3, cy3);

          if (this.bondOrder !== 2) {
            ctx.setLineDash([specs.bonds_hashWidth_2D, specs.bonds_hashSpacing_2D]);
          }

          ctx.stroke();
          ctx.setLineDash([]);
        }

        break;

      case 3:
        var useDist = specs.bonds_useAbsoluteSaturationWidths_2D ? specs.bonds_saturationWidthAbs_2D : this.a1.distance(this.a2) * specs.bonds_saturationWidth_2D;
        var perpendicular = this.a1.angle(this.a2) + m.PI / 2;
        var mcosp = m.cos(perpendicular);
        var msinp = m.sin(perpendicular);
        var cx1 = x1 - mcosp * useDist;
        var cy1 = y1 + msinp * useDist;
        var cx2 = x1 + mcosp * useDist;
        var cy2 = y1 - msinp * useDist;
        var cx3 = x2 + mcosp * useDist;
        var cy3 = y2 - msinp * useDist;
        var cx4 = x2 - mcosp * useDist;
        var cy4 = y2 + msinp * useDist;
        ctx.beginPath();
        ctx.moveTo(cx1, cy1);
        ctx.lineTo(cx4, cy4);
        ctx.moveTo(cx2, cy2);
        ctx.lineTo(cx3, cy3);
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
        break;
    }
  }
};

_.drawDecorations = function (ctx, specs) {
  if (this.isHover || this.isSelected) {
    var pi2 = 2 * m.PI;
    var angle = (this.a1.angleForStupidCanvasArcs(this.a2) + m.PI / 2) % pi2;
    ctx.strokeStyle = this.isHover ? specs.colorHover : specs.colorSelect;
    ctx.lineWidth = 1.2;
    ctx.beginPath();
    var angleTo = (angle + m.PI) % pi2;
    angleTo = angleTo % (m.PI * 2);
    ctx.arc(this.a1.x, this.a1.y, 7, angle, angleTo, false);
    ctx.stroke();
    ctx.beginPath();
    angle += m.PI;
    angleTo = (angle + m.PI) % pi2;
    ctx.arc(this.a2.x, this.a2.y, 7, angle, angleTo, false);
    ctx.stroke();
  }
};

_.drawLewisStyle = function (ctx, specs, x1, y1, x2, y2) {
  var angle = this.a1.angle(this.a2);
  var perp = angle + m.PI / 2;
  var difx = x2 - x1;
  var dify = y2 - y1;
  var increment = m.sqrt(difx * difx + dify * dify) / (this.bondOrder + 1);
  var xi = increment * m.cos(angle);
  var yi = -increment * m.sin(angle);
  var x = x1 + xi;
  var y = y1 + yi;

  for (var i = 0; i < this.bondOrder; i++) {
    var sep = specs.atoms_lonePairSpread_2D / 2;
    var cx1 = x - m.cos(perp) * sep;
    var cy1 = y + m.sin(perp) * sep;
    var cx2 = x + m.cos(perp) * sep;
    var cy2 = y - m.sin(perp) * sep;
    ctx.beginPath();
    ctx.arc(cx1 - specs.atoms_lonePairDiameter_2D / 2, cy1 - specs.atoms_lonePairDiameter_2D / 2, specs.atoms_lonePairDiameter_2D, 0, m.PI * 2, false);
    ctx.fill();
    ctx.beginPath();
    ctx.arc(cx2 - specs.atoms_lonePairDiameter_2D / 2, cy2 - specs.atoms_lonePairDiameter_2D / 2, specs.atoms_lonePairDiameter_2D, 0, m.PI * 2, false);
    ctx.fill();
    x += xi;
    y += yi;
  }
};
/**
 * 
 * @param {WegGLRenderingContext}
 *            gl
 * @param {structures.VisualSpecifications}
 *            specs
 * @param {boolean}
 *            asSegments Using cylinder/solid line or segmented pills/dashed
 *            line
 * @return {void}
 */


_.render = function (gl, specs, asSegments) {
  if (this.specs) {
    specs = this.specs;
  } // this is the elongation vector for the cylinder


  var height = this.a1.distance3D(this.a2);

  if (height === 0) {
    // if there is no height, then no point in rendering this bond,
    // just return
    return;
  } // scale factor for cylinder/pill radius.
  // when scale pill, the cap will affected too.


  var radiusScale = specs.bonds_cylinderDiameter_3D / 2; // atom1 color and atom2 color

  var a1Color = specs.bonds_color;
  var a2Color; // transform to the atom as well as the opposite atom (for Jmol and
  // PyMOL
  // color splits)

  var transform = _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].translate(_lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].identity(), [this.a1.x, this.a1.y, this.a1.z]);
  var transformOpposite; // vector from atom1 to atom2

  var a2b = [this.a2.x - this.a1.x, this.a2.y - this.a1.y, this.a2.z - this.a1.z]; // calculate the rotation

  var y = [0, 1, 0];
  var ang = 0;
  var axis;

  if (this.a1.x === this.a2.x && this.a1.z === this.a2.z) {
    axis = [0, 0, 1];

    if (this.a2.y < this.a1.y) {
      ang = m.PI;
    }
  } else {
    ang = _extensions__WEBPACK_IMPORTED_MODULE_0__["vec3AngleFrom"](y, a2b);
    axis = _lib__WEBPACK_IMPORTED_MODULE_2__["vec3"].cross(y, a2b, []);
  } // the specs will split color are
  // - Line
  // - Stick
  // - Wireframe


  if (specs.bonds_splitColor) {
    var specs1 = this.a1.specs ? this.a1.specs : specs;
    var specs2 = this.a2.specs ? this.a2.specs : specs;
    a1Color = this.a1.getElementColor(specs1.atoms_useJMOLColors, specs1.atoms_usePYMOLColors, specs1.atoms_color);
    a2Color = this.a2.getElementColor(specs2.atoms_useJMOLColors, specs2.atoms_usePYMOLColors, specs2.atoms_color); // the transformOpposite will use for split color.
    // just make it splited if the color different.

    if (a1Color != a2Color) {
      transformOpposite = _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].translate(_lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].identity(), [this.a2.x, this.a2.y, this.a2.z]);
    }
  } // calculate the translations for unsaturated bonds.
  // represenattio use saturatedCross are
  // - Line
  // - Wireframe
  // - Ball and Stick
  // just Stick will set bonds_showBondOrders_3D to false


  var others = [0];
  var saturatedCross;

  if (asSegments) {
    // block for draw bond as segmented line/pill
    if (specs.bonds_showBondOrders_3D && this.bondOrder > 1) {
      // The "0.5" part set here,
      // the other part (1) will render as cylinder
      others = [
      /*-specs.bonds_cylinderDiameter_3D, */
      specs.bonds_cylinderDiameter_3D];
      var z = [0, 0, 1];
      var inverse = _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].inverse(gl.rotationMatrix, []);
      _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].multiplyVec3(inverse, z);
      saturatedCross = _lib__WEBPACK_IMPORTED_MODULE_2__["vec3"].cross(a2b, z, []);
      _lib__WEBPACK_IMPORTED_MODULE_2__["vec3"].normalize(saturatedCross);
    }

    var segmentScale = 1;
    var spaceBetweenPill = specs.bonds_pillSpacing_3D;
    var pillHeight = specs.bonds_pillHeight_3D;

    if (this.bondOrder == 0) {
      if (specs.bonds_renderAsLines_3D) {
        pillHeight = spaceBetweenPill;
      } else {
        pillHeight = specs.bonds_pillDiameter_3D; // Detect Ball and Stick representation

        if (pillHeight < specs.bonds_cylinderDiameter_3D) {
          pillHeight /= 2;
        }

        segmentScale = pillHeight / 2;
        height /= segmentScale;
        spaceBetweenPill /= segmentScale / 2;
      }
    } // total space need for one pill, iclude the space.


    var totalSpaceForPill = pillHeight + spaceBetweenPill; // segmented pills for one bond.

    var totalPillsPerBond = height / totalSpaceForPill; // segmented one unit pill for one bond

    var pillsPerBond = m.floor(totalPillsPerBond);
    var extraSegmentedSpace = height - totalSpaceForPill * pillsPerBond;
    var paddingSpace = (spaceBetweenPill + specs.bonds_pillDiameter_3D + extraSegmentedSpace) / 2; // pillSegmentsLength will change if both atom1 and atom2 color used
    // for rendering

    var pillSegmentsLength = pillsPerBond;

    if (transformOpposite) {
      // floor will effected for odd pills, because one pill at the
      // center
      // will replace with splited pills
      pillSegmentsLength = m.floor(pillsPerBond / 2);
    } // render bonds


    for (var i = 0, ii = others.length; i < ii; i++) {
      var transformUse = _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].set(transform, []);

      if (others[i] !== 0) {
        _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].translate(transformUse, _lib__WEBPACK_IMPORTED_MODULE_2__["vec3"].scale(saturatedCross, others[i], []));
      }

      if (ang !== 0) {
        _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].rotate(transformUse, ang, axis);
      }

      if (segmentScale != 1) {
        _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].scale(transformUse, [segmentScale, segmentScale, segmentScale]);
      } // colors


      if (a1Color) gl.material.setDiffuseColor(gl, a1Color);
      _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].translate(transformUse, [0, paddingSpace, 0]);

      for (var j = 0; j < pillSegmentsLength; j++) {
        if (specs.bonds_renderAsLines_3D) {
          if (this.bondOrder == 0) {
            gl.shader.setMatrixUniforms(gl, transformUse);
            gl.drawArrays(gl.POINTS, 0, 1);
          } else {
            _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].scale(transformUse, [1, pillHeight, 1]);
            gl.shader.setMatrixUniforms(gl, transformUse);
            gl.drawArrays(gl.LINES, 0, gl.lineBuffer.vertexPositionBuffer.numItems);
            _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].scale(transformUse, [1, 1 / pillHeight, 1]);
          }
        } else {
          gl.shader.setMatrixUniforms(gl, transformUse);

          if (this.bondOrder == 0) {
            gl.drawElements(gl.TRIANGLES, gl.sphereBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
          } else {
            gl.drawElements(gl.TRIANGLES, gl.pillBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
          }
        }

        _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].translate(transformUse, [0, totalSpaceForPill, 0]);
      } // if rendering segmented pill use atom1 and atom2 color


      if (transformOpposite) {
        // parameter for calculate splited pills
        var scaleY, halfOneMinScaleY;

        if (specs.bonds_renderAsLines_3D) {
          scaleY = pillHeight; // if(this.bondOrder != 0) {
          // scaleY -= spaceBetweenPill;
          // }

          scaleY /= 2;
          halfOneMinScaleY = 0;
        } else {
          scaleY = 2 / 3;
          halfOneMinScaleY = (1 - scaleY) / 2;
        } // if count of pills per bound is odd,
        // then draw the splited pills of atom1


        if (pillsPerBond % 2 != 0) {
          _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].scale(transformUse, [1, scaleY, 1]);
          gl.shader.setMatrixUniforms(gl, transformUse);

          if (specs.bonds_renderAsLines_3D) {
            if (this.bondOrder == 0) {
              gl.drawArrays(gl.POINTS, 0, 1);
            } else {
              gl.drawArrays(gl.LINES, 0, gl.lineBuffer.vertexPositionBuffer.numItems);
            }
          } else {
            if (this.bondOrder == 0) {
              gl.drawElements(gl.TRIANGLES, gl.sphereBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
            } else {
              gl.drawElements(gl.TRIANGLES, gl.pillBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
            }
          }

          _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].translate(transformUse, [0, totalSpaceForPill * (1 + halfOneMinScaleY), 0]);
          _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].scale(transformUse, [1, 1 / scaleY, 1]);
        } // prepare to render the atom2


        _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].set(transformOpposite, transformUse);

        if (others[i] !== 0) {
          _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].translate(transformUse, _lib__WEBPACK_IMPORTED_MODULE_2__["vec3"].scale(saturatedCross, others[i], []));
        } // don't check for 0 here as that means it should be rotated
        // by PI, but PI will be negated


        _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].rotate(transformUse, ang + m.PI, axis);

        if (segmentScale != 1) {
          _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].scale(transformUse, [segmentScale, segmentScale, segmentScale]);
        } // colors


        if (a2Color) {
          gl.material.setDiffuseColor(gl, a2Color);
        }

        _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].translate(transformUse, [0, paddingSpace, 0]); // draw the remain pills which use the atom2 color

        for (var j = 0; j < pillSegmentsLength; j++) {
          if (specs.bonds_renderAsLines_3D) {
            if (this.bondOrder == 0) {
              gl.shader.setMatrixUniforms(gl, transformUse);
              gl.drawArrays(gl.POINTS, 0, 1);
            } else {
              _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].scale(transformUse, [1, pillHeight, 1]);
              gl.shader.setMatrixUniforms(gl, transformUse);
              gl.drawArrays(gl.LINES, 0, gl.lineBuffer.vertexPositionBuffer.numItems);
              _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].scale(transformUse, [1, 1 / pillHeight, 1]);
            }
          } else {
            gl.shader.setMatrixUniforms(gl, transformUse);

            if (this.bondOrder == 0) {
              gl.drawElements(gl.TRIANGLES, gl.sphereBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
            } else {
              gl.drawElements(gl.TRIANGLES, gl.pillBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
            }
          }

          _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].translate(transformUse, [0, totalSpaceForPill, 0]);
        } // draw the splited center pills of atom2


        if (pillsPerBond % 2 != 0) {
          _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].scale(transformUse, [1, scaleY, 1]);
          gl.shader.setMatrixUniforms(gl, transformUse);

          if (specs.bonds_renderAsLines_3D) {
            if (this.bondOrder == 0) {
              gl.drawArrays(gl.POINTS, 0, 1);
            } else {
              gl.drawArrays(gl.LINES, 0, gl.lineBuffer.vertexPositionBuffer.numItems);
            }
          } else {
            if (this.bondOrder == 0) {
              gl.drawElements(gl.TRIANGLES, gl.sphereBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
            } else {
              gl.drawElements(gl.TRIANGLES, gl.pillBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
            }
          }

          _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].translate(transformUse, [0, totalSpaceForPill * (1 + halfOneMinScaleY), 0]);
          _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].scale(transformUse, [1, 1 / scaleY, 1]);
        }
      }
    }
  } else {
    // calculate the translations for unsaturated bonds.
    // represenation that use saturatedCross are
    // - Line
    // - Wireframe
    // - Ball and Stick
    // just Stick will set bonds_showBondOrders_3D to false
    if (specs.bonds_showBondOrders_3D) {
      switch (this.bondOrder) {
        // the 0 and 0.5 bond order will draw as segmented pill.
        // so we not set that here.
        // case 0:
        // case 0.5: break;
        case 1.5:
          // The "1" part set here,
          // the other part (0.5) will render as segmented pill
          others = [-specs.bonds_cylinderDiameter_3D
          /*
          * ,
          * specs.bonds_cylinderDiameter_3D
          */
          ];
          break;

        case 2:
          others = [-specs.bonds_cylinderDiameter_3D, specs.bonds_cylinderDiameter_3D];
          break;

        case 3:
          others = [-1.2 * specs.bonds_cylinderDiameter_3D, 0, 1.2 * specs.bonds_cylinderDiameter_3D];
          break;
      } // saturatedCross just need for need for bondorder greather than
      // 1


      if (this.bondOrder > 1) {
        var z = [0, 0, 1];
        var inverse = _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].inverse(gl.rotationMatrix, []);
        _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].multiplyVec3(inverse, z);
        saturatedCross = _lib__WEBPACK_IMPORTED_MODULE_2__["vec3"].cross(a2b, z, []);
        _lib__WEBPACK_IMPORTED_MODULE_2__["vec3"].normalize(saturatedCross);
      }
    } // for Stick representation, we just change the cylinder radius
    else {
        switch (this.bondOrder) {
          case 0:
            radiusScale *= 0.25;
            break;

          case 0.5:
          case 1.5:
            radiusScale *= 0.5;
            break;
        }
      } // if transformOpposite is set, the it mean the color must be
    // splited.
    // so the heigh of cylinder will be half.
    // one half for atom1 color the other for atom2 color


    if (transformOpposite) {
      height /= 2;
    } // Radius of cylinder already defined when initialize cylinder mesh,
    // so at this rate, the scale just needed for Y to strech
    // cylinder to bond length (height) and X and Z for radius.


    var scaleVector = [radiusScale, height, radiusScale]; // render bonds

    for (var i = 0, ii = others.length; i < ii; i++) {
      var transformUse = _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].set(transform, []);

      if (others[i] !== 0) {
        _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].translate(transformUse, _lib__WEBPACK_IMPORTED_MODULE_2__["vec3"].scale(saturatedCross, others[i], []));
      }

      if (ang !== 0) {
        _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].rotate(transformUse, ang, axis);
      }

      _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].scale(transformUse, scaleVector); // colors

      if (a1Color) gl.material.setDiffuseColor(gl, a1Color); // render

      gl.shader.setMatrixUniforms(gl, transformUse);

      if (specs.bonds_renderAsLines_3D) {
        gl.drawArrays(gl.LINES, 0, gl.lineBuffer.vertexPositionBuffer.numItems);
      } else {
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, gl.cylinderBuffer.vertexPositionBuffer.numItems);
      } // if transformOpposite is set, then a2Color also shoudl be
      // seted as well.


      if (transformOpposite) {
        _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].set(transformOpposite, transformUse);

        if (others[i] !== 0) {
          _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].translate(transformUse, _lib__WEBPACK_IMPORTED_MODULE_2__["vec3"].scale(saturatedCross, others[i], []));
        } // don't check for 0 here as that means it should be rotated
        // by PI, but PI will be negated


        _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].rotate(transformUse, ang + m.PI, axis);
        _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].scale(transformUse, scaleVector); // colors

        if (a2Color) gl.material.setDiffuseColor(gl, a2Color); // render

        gl.shader.setMatrixUniforms(gl, transformUse);

        if (specs.bonds_renderAsLines_3D) {
          gl.drawArrays(gl.LINES, 0, gl.lineBuffer.vertexPositionBuffer.numItems);
        } else {
          gl.drawArrays(gl.TRIANGLE_STRIP, 0, gl.cylinderBuffer.vertexPositionBuffer.numItems);
        }
      }
    }
  }
};

_.renderHighlight = function (gl, specs) {
  if (this.isSelected || this.isHover) {
    if (this.specs) {
      specs = this.specs;
    }

    if (this.specs) {
      specs = this.specs;
    } // this is the elongation vector for the cylinder


    var height = this.a1.distance3D(this.a2);

    if (height === 0) {
      // if there is no height, then no point in rendering this bond,
      // just return
      return;
    } // scale factor for cylinder/pill radius.
    // when scale pill, the cap will affected too.


    var radiusScale = specs.bonds_cylinderDiameter_3D / 1.2;
    var transform = _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].translate(_lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].identity(), [this.a1.x, this.a1.y, this.a1.z]); // vector from atom1 to atom2

    var a2b = [this.a2.x - this.a1.x, this.a2.y - this.a1.y, this.a2.z - this.a1.z]; // calculate the rotation

    var y = [0, 1, 0];
    var ang = 0;
    var axis;

    if (this.a1.x === this.a2.x && this.a1.z === this.a2.z) {
      axis = [0, 0, 1];

      if (this.a2.y < this.a1.y) {
        ang = m.PI;
      }
    } else {
      ang = _extensions__WEBPACK_IMPORTED_MODULE_0__["vec3AngleFrom"](y, a2b);
      axis = _lib__WEBPACK_IMPORTED_MODULE_2__["vec3"].cross(y, a2b, []);
    }

    var scaleVector = [radiusScale, height, radiusScale];

    if (ang !== 0) {
      _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].rotate(transform, ang, axis);
    }

    _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].scale(transform, scaleVector);
    gl.shader.setMatrixUniforms(gl, transform);
    gl.material.setDiffuseColor(gl, this.isHover ? specs.colorHover : specs.colorSelect);
    gl.drawArrays(gl.TRIANGLE_STRIP, 0, gl.cylinderBuffer.vertexPositionBuffer.numItems);
  }
};
/**
 * 
 * @param {WegGLRenderingContext}
 *            gl
 * @param {structures.VisualSpecifications}
 *            specs
 * @return {void}
 */


_.renderPicker = function (gl, specs) {
  // gl.cylinderBuffer.bindBuffers(gl);
  // gl.material.setDiffuseColor(
  // this.bondOrder == 0 ? '#FF0000' : // merah
  // this.bondOrder == 0.5 ? '#FFFF00' : // kuning
  // this.bondOrder == 1 ? '#FF00FF' : // ungu
  // this.bondOrder == 1.5 ? '#00FF00' : // hijau
  // this.bondOrder == 2 ? '#00FFFF' : // cyan
  // this.bondOrder == 3 ? '#0000FF' : // biru
  // '#FFFFFF');
  // gl.material.setAlpha(1);
  if (this.specs) {
    specs = this.specs;
  } // this is the elongation vector for the cylinder


  var height = this.a1.distance3D(this.a2);

  if (height === 0) {
    // if there is no height, then no point in rendering this bond,
    // just return
    return;
  } // scale factor for cylinder/pill radius.
  // when scale pill, the cap will affected too.


  var radiusScale = specs.bonds_cylinderDiameter_3D / 2; // transform to the atom as well as the opposite atom (for Jmol and
  // PyMOL
  // color splits)

  var transform = _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].translate(_lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].identity(), [this.a1.x, this.a1.y, this.a1.z]); // vector from atom1 to atom2

  var a2b = [this.a2.x - this.a1.x, this.a2.y - this.a1.y, this.a2.z - this.a1.z]; // calculate the rotation

  var y = [0, 1, 0];
  var ang = 0;
  var axis;

  if (this.a1.x === this.a2.x && this.a1.z === this.a2.z) {
    axis = [0, 0, 1];

    if (this.a2.y < this.a1.y) {
      ang = m.PI;
    }
  } else {
    ang = _extensions__WEBPACK_IMPORTED_MODULE_0__["vec3AngleFrom"](y, a2b);
    axis = _lib__WEBPACK_IMPORTED_MODULE_2__["vec3"].cross(y, a2b, []);
  } // calculate the translations for unsaturated bonds.
  // represenattio use saturatedCross are
  // - Line
  // - WIreframe
  // - Ball and Stick
  // just Stick will set bonds_showBondOrders_3D to false


  var others = [0];
  var saturatedCross;

  if (specs.bonds_showBondOrders_3D) {
    if (specs.bonds_renderAsLines_3D) {
      switch (this.bondOrder) {
        case 1.5:
        case 2:
          others = [-specs.bonds_cylinderDiameter_3D, specs.bonds_cylinderDiameter_3D];
          break;

        case 3:
          others = [-1.2 * specs.bonds_cylinderDiameter_3D, 0, 1.2 * specs.bonds_cylinderDiameter_3D];
          break;
      } // saturatedCross just need for need for bondorder greather than
      // 1


      if (this.bondOrder > 1) {
        var z = [0, 0, 1];
        var inverse = _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].inverse(gl.rotationMatrix, []);
        _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].multiplyVec3(inverse, z);
        saturatedCross = _lib__WEBPACK_IMPORTED_MODULE_2__["vec3"].cross(a2b, z, []);
        _lib__WEBPACK_IMPORTED_MODULE_2__["vec3"].normalize(saturatedCross);
      }
    } else {
      switch (this.bondOrder) {
        case 1.5:
        case 2:
          radiusScale *= 3;
          break;

        case 3:
          radiusScale *= 3.4;
          break;
      }
    }
  } else {
    // this is for Stick repersentation because Stick not have
    // bonds_showBondOrders_3D
    switch (this.bondOrder) {
      case 0:
        radiusScale *= 0.25;
        break;

      case 0.5:
      case 1.5:
        radiusScale *= 0.5;
        break;
    }
  } // Radius of cylinder already defined when initialize cylinder mesh,
  // so at this rate, the scale just needed for Y to strech
  // cylinder to bond length (height) and X and Z for radius.


  var scaleVector = [radiusScale, height, radiusScale]; // render bonds

  for (var i = 0, ii = others.length; i < ii; i++) {
    var transformUse = _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].set(transform, []);

    if (others[i] !== 0) {
      _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].translate(transformUse, _lib__WEBPACK_IMPORTED_MODULE_2__["vec3"].scale(saturatedCross, others[i], []));
    }

    if (ang !== 0) {
      _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].rotate(transformUse, ang, axis);
    }

    _lib__WEBPACK_IMPORTED_MODULE_2__["mat4"].scale(transformUse, scaleVector); // render

    gl.shader.setMatrixUniforms(gl, transformUse);

    if (specs.bonds_renderAsLines_3D) {
      gl.drawArrays(gl.LINES, 0, gl.lineBuffer.vertexPositionBuffer.numItems);
    } else {
      gl.drawArrays(gl.TRIANGLE_STRIP, 0, gl.cylinderBuffer.vertexPositionBuffer.numItems);
    }
  }
};

/***/ }),

/***/ "./src/ChemDoodle/structures/CondensedLabel.js":
/*!*****************************************************!*\
  !*** ./src/ChemDoodle/structures/CondensedLabel.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// CondensedLabel is proprietary and not included in the GPL version
// its created to satisfy Atom requirements
var CondensedLabel = undefined;
/* harmony default export */ __webpack_exports__["default"] = (CondensedLabel);

/***/ }),

/***/ "./src/ChemDoodle/structures/Molecule.js":
/*!***********************************************!*\
  !*** ./src/ChemDoodle/structures/Molecule.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Molecule; });
/* harmony import */ var _Queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Queue */ "./src/ChemDoodle/structures/Queue.js");
/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Point */ "./src/ChemDoodle/structures/Point.js");
/* harmony import */ var _Atom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Atom */ "./src/ChemDoodle/structures/Atom.js");
/* harmony import */ var _Bond__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Bond */ "./src/ChemDoodle/structures/Bond.js");
/* harmony import */ var _VisualSpecifications__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./VisualSpecifications */ "./src/ChemDoodle/structures/VisualSpecifications.js");
/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../ChemDoodle */ "./src/ChemDoodle/index.js");
/* harmony import */ var _informatics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../informatics */ "./src/ChemDoodle/informatics/index.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../math */ "./src/ChemDoodle/math/index.js");








var m = Math;
function Molecule() {
  this.atoms = [];
  this.bonds = [];
  this.rings = [];
}
;
var _ = Molecule.prototype; // this can be an extensive algorithm for large molecules, you may want
// to turn this off

_.findRings = true;

_.draw = function (ctx, specs) {
  if (this.specs) {
    specs = this.specs;
  } // draw
  // need this weird render of atoms before and after, just in case
  // circles are rendered, as those should be on top


  if (specs.atoms_display && !specs.atoms_circles_2D) {
    for (var i = 0, ii = this.atoms.length; i < ii; i++) {
      this.atoms[i].draw(ctx, specs);
    }
  }

  if (specs.bonds_display) {
    for (var i = 0, ii = this.bonds.length; i < ii; i++) {
      this.bonds[i].draw(ctx, specs);
    }
  }

  if (specs.atoms_display) {
    for (var i = 0, ii = this.atoms.length; i < ii; i++) {
      var a = this.atoms[i];

      if (specs.atoms_circles_2D) {
        a.draw(ctx, specs);
      }

      if (a.query) {
        a.query.draw(ctx, specs, a);
      }
    }
  }
};

_.render = function (gl, specs) {
  // uncomment this to render the picking frame
  // return this.renderPickFrame(gl, specs, []);
  if (this.specs) {
    specs = this.specs;
  } // check explicitly if it is undefined here, since hetatm is a
  // boolean that can be true or false, as long as it is set, it is
  // macro


  var isMacro = this.atoms.length > 0 && this.atoms[0].hetatm !== undefined;

  if (isMacro) {
    if (specs.macro_displayBonds) {
      if (this.bonds.length > 0) {
        if (specs.bonds_renderAsLines_3D && !this.residueSpecs || this.residueSpecs && this.residueSpecs.bonds_renderAsLines_3D) {
          gl.lineWidth(this.residueSpecs ? this.residueSpecs.bonds_width_2D : specs.bonds_width_2D);
          gl.lineBuffer.bindBuffers(gl);
        } else {
          gl.cylinderBuffer.bindBuffers(gl);
        } // colors


        gl.material.setTempColors(gl, specs.bonds_materialAmbientColor_3D, undefined, specs.bonds_materialSpecularColor_3D, specs.bonds_materialShininess_3D);
      }

      for (var i = 0, ii = this.bonds.length; i < ii; i++) {
        var b = this.bonds[i]; // closestDistance may be 0, so check if undefined

        if (!b.a1.hetatm && (specs.macro_atomToLigandDistance === -1 || b.a1.closestDistance !== undefined && specs.macro_atomToLigandDistance >= b.a1.closestDistance && specs.macro_atomToLigandDistance >= b.a2.closestDistance)) {
          b.render(gl, this.residueSpecs ? this.residueSpecs : specs);
        }
      }
    }

    if (specs.macro_displayAtoms) {
      if (this.atoms.length > 0) {
        gl.sphereBuffer.bindBuffers(gl); // colors

        gl.material.setTempColors(gl, specs.atoms_materialAmbientColor_3D, undefined, specs.atoms_materialSpecularColor_3D, specs.atoms_materialShininess_3D);
      }

      for (var i = 0, ii = this.atoms.length; i < ii; i++) {
        var a = this.atoms[i]; // closestDistance may be 0, so check if undefined

        if (!a.hetatm && (specs.macro_atomToLigandDistance === -1 || a.closestDistance !== undefined && specs.macro_atomToLigandDistance >= a.closestDistance)) {
          a.render(gl, this.residueSpecs ? this.residueSpecs : specs);
        }
      }
    }
  }

  if (specs.bonds_display) {
    // Array for Half Bonds. It is needed because Half Bonds use the
    // pill buffer.
    var asPills = []; // Array for 0 bond order.

    var asSpheres = [];

    if (this.bonds.length > 0) {
      if (specs.bonds_renderAsLines_3D) {
        gl.lineWidth(specs.bonds_width_2D);
        gl.lineBuffer.bindBuffers(gl);
      } else {
        gl.cylinderBuffer.bindBuffers(gl);
      } // colors


      gl.material.setTempColors(gl, specs.bonds_materialAmbientColor_3D, undefined, specs.bonds_materialSpecularColor_3D, specs.bonds_materialShininess_3D);
    }

    for (var i = 0, ii = this.bonds.length; i < ii; i++) {
      var b = this.bonds[i];

      if (!isMacro || b.a1.hetatm) {
        // Check if render as segmented pill will used.
        if (specs.bonds_showBondOrders_3D) {
          if (b.bondOrder == 0) {
            // 0 bond order
            asSpheres.push(b);
          } else if (b.bondOrder == 0.5) {
            // 0.5 bond order
            asPills.push(b);
          } else {
            if (b.bondOrder == 1.5) {
              // For 1.5 bond order, the "1" part will render
              // as cylinder, and the "0.5" part will render
              // as segmented pills
              asPills.push(b);
            }

            b.render(gl, specs);
          }
        } else {
          // this will render the Stick representation
          b.render(gl, specs);
        }
      }
    } // Render the Half Bond


    if (asPills.length > 0) {
      // if bonds_renderAsLines_3D is true, then lineBuffer will
      // binded.
      // so in here we just need to check if we need to change
      // the binding buffer to pillBuffer or not.
      if (!specs.bonds_renderAsLines_3D) {
        gl.pillBuffer.bindBuffers(gl);
      }

      for (var i = 0, ii = asPills.length; i < ii; i++) {
        asPills[i].render(gl, specs, true);
      }
    } // Render zero bond order


    if (asSpheres.length > 0) {
      // if bonds_renderAsLines_3D is true, then lineBuffer will
      // binded.
      // so in here we just need to check if we need to change
      // the binding buffer to pillBuffer or not.
      if (!specs.bonds_renderAsLines_3D) {
        gl.sphereBuffer.bindBuffers(gl);
      }

      for (var i = 0, ii = asSpheres.length; i < ii; i++) {
        asSpheres[i].render(gl, specs, true);
      }
    }
  }

  if (specs.atoms_display) {
    for (var i = 0, ii = this.atoms.length; i < ii; i++) {
      var a = this.atoms[i];
      a.bondNumber = 0;
      a.renderAsStar = false;
    }

    for (var i = 0, ii = this.bonds.length; i < ii; i++) {
      var b = this.bonds[i];
      b.a1.bondNumber++;
      b.a2.bondNumber++;
    }

    if (this.atoms.length > 0) {
      gl.sphereBuffer.bindBuffers(gl); // colors

      gl.material.setTempColors(gl, specs.atoms_materialAmbientColor_3D, undefined, specs.atoms_materialSpecularColor_3D, specs.atoms_materialShininess_3D);
    }

    var asStars = [];

    for (var i = 0, ii = this.atoms.length; i < ii; i++) {
      var a = this.atoms[i];

      if (!isMacro || a.hetatm && (specs.macro_showWater || !a.isWater)) {
        if (specs.atoms_nonBondedAsStars_3D && a.bondNumber === 0) {
          a.renderAsStar = true;
          asStars.push(a);
        } else {
          a.render(gl, specs);
        }
      }
    }

    if (asStars.length > 0) {
      gl.starBuffer.bindBuffers(gl);

      for (var i = 0, ii = asStars.length; i < ii; i++) {
        asStars[i].render(gl, specs);
      }
    }
  }

  if (this.chains) {
    // set up the model view matrix, since it won't be modified
    // for macromolecules
    gl.shader.setMatrixUniforms(gl); // render chains

    if (specs.proteins_displayRibbon) {
      // proteins
      // colors
      gl.material.setTempColors(gl, specs.proteins_materialAmbientColor_3D, undefined, specs.proteins_materialSpecularColor_3D, specs.proteins_materialShininess_3D);
      var uses = specs.proteins_ribbonCartoonize ? this.cartoons : this.ribbons;

      for (var j = 0, jj = uses.length; j < jj; j++) {
        var use = uses[j];

        if (specs.proteins_residueColor !== 'none') {
          use.front.bindBuffers(gl);
          var rainbow = specs.proteins_residueColor === 'rainbow';

          for (var i = 0, ii = use.front.segments.length; i < ii; i++) {
            if (rainbow) {
              gl.material.setDiffuseColor(gl, _math__WEBPACK_IMPORTED_MODULE_7__["rainbowAt"](i, ii, specs.macro_rainbowColors));
            }

            use.front.segments[i].render(gl, specs);
          }

          use.back.bindBuffers(gl);

          for (var i = 0, ii = use.back.segments.length; i < ii; i++) {
            if (rainbow) {
              gl.material.setDiffuseColor(gl, _math__WEBPACK_IMPORTED_MODULE_7__["rainbowAt"](i, ii, specs.macro_rainbowColors));
            }

            use.back.segments[i].render(gl, specs);
          }
        } else {
          use.front.render(gl, specs);
          use.back.render(gl, specs);
        }
      }
    }

    if (specs.proteins_displayPipePlank) {
      for (var j = 0, jj = this.pipePlanks.length; j < jj; j++) {
        this.pipePlanks[j].render(gl, specs);
      }
    }

    if (specs.proteins_displayBackbone) {
      if (!this.alphaCarbonTrace) {
        // cache the alpha carbon trace
        this.alphaCarbonTrace = {
          nodes: [],
          edges: []
        };

        for (var j = 0, jj = this.chains.length; j < jj; j++) {
          var rs = this.chains[j];
          var isNucleotide = rs.length > 2 && _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__["RESIDUE"][rs[2].name] && _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__["RESIDUE"][rs[2].name].aminoColor === '#BEA06E';

          if (!isNucleotide && rs.length > 0) {
            for (var i = 0, ii = rs.length - 2; i < ii; i++) {
              var n = rs[i].cp1;
              n.chainColor = rs.chainColor;
              this.alphaCarbonTrace.nodes.push(n);
              var b = new _Bond__WEBPACK_IMPORTED_MODULE_3__["default"](rs[i].cp1, rs[i + 1].cp1);
              b.residueName = rs[i].name;
              b.chainColor = rs.chainColor;
              this.alphaCarbonTrace.edges.push(b);

              if (i === rs.length - 3) {
                n = rs[i + 1].cp1;
                n.chainColor = rs.chainColor;
                this.alphaCarbonTrace.nodes.push(n);
              }
            }
          }
        }
      }

      if (this.alphaCarbonTrace.nodes.length > 0) {
        var traceSpecs = new _VisualSpecifications__WEBPACK_IMPORTED_MODULE_4__["default"]();
        traceSpecs.atoms_display = true;
        traceSpecs.bonds_display = true;
        traceSpecs.atoms_sphereDiameter_3D = specs.proteins_backboneThickness;
        traceSpecs.bonds_cylinderDiameter_3D = specs.proteins_backboneThickness;
        traceSpecs.bonds_splitColor = false;
        traceSpecs.atoms_color = specs.proteins_backboneColor;
        traceSpecs.bonds_color = specs.proteins_backboneColor;
        traceSpecs.atoms_useVDWDiameters_3D = false; // colors

        gl.material.setTempColors(gl, specs.proteins_materialAmbientColor_3D, undefined, specs.proteins_materialSpecularColor_3D, specs.proteins_materialShininess_3D);
        gl.material.setDiffuseColor(gl, specs.proteins_backboneColor);

        for (var i = 0, ii = this.alphaCarbonTrace.nodes.length; i < ii; i++) {
          var n = this.alphaCarbonTrace.nodes[i];

          if (specs.macro_colorByChain) {
            traceSpecs.atoms_color = n.chainColor;
          }

          gl.sphereBuffer.bindBuffers(gl);
          n.render(gl, traceSpecs);
        }

        for (var i = 0, ii = this.alphaCarbonTrace.edges.length; i < ii; i++) {
          var e = this.alphaCarbonTrace.edges[i];
          var color;
          var r = _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__["RESIDUE"][e.residueName] ? _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__["RESIDUE"][e.residueName] : _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__["RESIDUE"]['*'];

          if (specs.macro_colorByChain) {
            color = e.chainColor;
          } else if (specs.proteins_residueColor === 'shapely') {
            color = r.shapelyColor;
          } else if (specs.proteins_residueColor === 'amino') {
            color = r.aminoColor;
          } else if (specs.proteins_residueColor === 'polarity') {
            if (r.polar) {
              color = '#C10000';
            } else {
              color = '#FFFFFF';
            }
          } else if (specs.proteins_residueColor === 'acidity') {
            if (r.acidity === 1) {
              color = '#0000FF';
            } else if (r.acidity === -1) {
              color = '#FF0000';
            } else if (r.polar) {
              color = '#FFFFFF';
            } else {
              color = '#773300';
            }
          } else if (specs.proteins_residueColor === 'rainbow') {
            color = _math__WEBPACK_IMPORTED_MODULE_7__["rainbowAt"](i, ii, specs.macro_rainbowColors);
          }

          if (color) {
            traceSpecs.bonds_color = color;
          }

          gl.cylinderBuffer.bindBuffers(gl);
          e.render(gl, traceSpecs);
        }
      }
    }

    if (specs.nucleics_display) {
      // nucleic acids
      // colors
      gl.material.setTempColors(gl, specs.nucleics_materialAmbientColor_3D, undefined, specs.nucleics_materialSpecularColor_3D, specs.nucleics_materialShininess_3D);

      for (var j = 0, jj = this.tubes.length; j < jj; j++) {
        gl.shader.setMatrixUniforms(gl);
        var use = this.tubes[j];
        use.render(gl, specs);
      }
    }
  }

  if (specs.atoms_display) {
    var highlight = false;

    for (var i = 0, ii = this.atoms.length; i < ii; i++) {
      var a = this.atoms[i];

      if (a.isHover || a.isSelected) {
        highlight = true;
        break;
      }
    }

    if (!highlight) {
      for (var i = 0, ii = this.bonds.length; i < ii; i++) {
        var b = this.bonds[i];

        if (b.isHover || b.isSelected) {
          highlight = true;
          break;
        }
      }
    }

    if (highlight) {
      gl.sphereBuffer.bindBuffers(gl); // colors

      gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
      gl.material.setTempColors(gl, specs.atoms_materialAmbientColor_3D, undefined, '#000000', 0);
      gl.enable(gl.BLEND);
      gl.depthMask(false);
      gl.material.setAlpha(gl, .4);
      gl.sphereBuffer.bindBuffers(gl);

      for (var i = 0, ii = this.atoms.length; i < ii; i++) {
        var a = this.atoms[i];

        if (a.isHover || a.isSelected) {
          a.renderHighlight(gl, specs);
        }
      }

      gl.cylinderBuffer.bindBuffers(gl);

      for (var i = 0, ii = this.bonds.length; i < ii; i++) {
        var b = this.bonds[i];

        if (b.isHover || b.isSelected) {
          b.renderHighlight(gl, specs);
        }
      }

      gl.depthMask(true);
      gl.disable(gl.BLEND);
      gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
    }
  }
};

_.renderPickFrame = function (gl, specs, objects, includeAtoms, includeBonds) {
  if (this.specs) {
    specs = this.specs;
  }

  var isMacro = this.atoms.length > 0 && this.atoms[0].hetatm !== undefined;

  if (includeBonds && specs.bonds_display) {
    if (this.bonds.length > 0) {
      if (specs.bonds_renderAsLines_3D) {
        gl.lineWidth(specs.bonds_width_2D);
        gl.lineBuffer.bindBuffers(gl);
      } else {
        gl.cylinderBuffer.bindBuffers(gl);
      }
    }

    for (var i = 0, ii = this.bonds.length; i < ii; i++) {
      var b = this.bonds[i];

      if (!isMacro || b.a1.hetatm) {
        gl.material.setDiffuseColor(gl, _math__WEBPACK_IMPORTED_MODULE_7__["idx2color"](objects.length));
        b.renderPicker(gl, specs);
        objects.push(b);
      }
    }
  }

  if (includeAtoms && specs.atoms_display) {
    for (var i = 0, ii = this.atoms.length; i < ii; i++) {
      var a = this.atoms[i];
      a.bondNumber = 0;
      a.renderAsStar = false;
    }

    for (var i = 0, ii = this.bonds.length; i < ii; i++) {
      var b = this.bonds[i];
      b.a1.bondNumber++;
      b.a2.bondNumber++;
    }

    if (this.atoms.length > 0) {
      gl.sphereBuffer.bindBuffers(gl);
    }

    var asStars = [];

    for (var i = 0, ii = this.atoms.length; i < ii; i++) {
      var a = this.atoms[i];

      if (!isMacro || a.hetatm && (specs.macro_showWater || !a.isWater)) {
        if (specs.atoms_nonBondedAsStars_3D && a.bondNumber === 0) {
          a.renderAsStar = true;
          asStars.push(a);
        } else {
          gl.material.setDiffuseColor(gl, _math__WEBPACK_IMPORTED_MODULE_7__["idx2color"](objects.length));
          a.render(gl, specs, true);
          objects.push(a);
        }
      }
    }

    if (asStars.length > 0) {
      gl.starBuffer.bindBuffers(gl);

      for (var i = 0, ii = asStars.length; i < ii; i++) {
        var a = asStars[i];
        gl.material.setDiffuseColor(gl, _math__WEBPACK_IMPORTED_MODULE_7__["idx2color"](objects.length));
        a.render(gl, specs, true);
        objects.push(a);
      }
    }
  }
};

_.getCenter3D = function () {
  if (this.atoms.length === 1) {
    return new _Atom__WEBPACK_IMPORTED_MODULE_2__["default"]('C', this.atoms[0].x, this.atoms[0].y, this.atoms[0].z);
  }

  var minX = Infinity,
      minY = Infinity,
      minZ = Infinity;
  var maxX = -Infinity,
      maxY = -Infinity,
      maxZ = -Infinity;

  if (this.chains) {
    // residues
    for (var i = 0, ii = this.chains.length; i < ii; i++) {
      var chain = this.chains[i];

      for (var j = 0, jj = chain.length; j < jj; j++) {
        var residue = chain[j];
        minX = m.min(residue.cp1.x, residue.cp2.x, minX);
        minY = m.min(residue.cp1.y, residue.cp2.y, minY);
        minZ = m.min(residue.cp1.z, residue.cp2.z, minZ);
        maxX = m.max(residue.cp1.x, residue.cp2.x, maxX);
        maxY = m.max(residue.cp1.y, residue.cp2.y, maxY);
        maxZ = m.max(residue.cp1.z, residue.cp2.z, maxZ);
      }
    }
  }

  for (var i = 0, ii = this.atoms.length; i < ii; i++) {
    minX = m.min(this.atoms[i].x, minX);
    minY = m.min(this.atoms[i].y, minY);
    minZ = m.min(this.atoms[i].z, minZ);
    maxX = m.max(this.atoms[i].x, maxX);
    maxY = m.max(this.atoms[i].y, maxY);
    maxZ = m.max(this.atoms[i].z, maxZ);
  }

  return new _Atom__WEBPACK_IMPORTED_MODULE_2__["default"]('C', (maxX + minX) / 2, (maxY + minY) / 2, (maxZ + minZ) / 2);
};

_.getCenter = function () {
  if (this.atoms.length === 1) {
    return new _Point__WEBPACK_IMPORTED_MODULE_1__["default"](this.atoms[0].x, this.atoms[0].y);
  }

  var minX = Infinity,
      minY = Infinity;
  var maxX = -Infinity,
      maxY = -Infinity;

  for (var i = 0, ii = this.atoms.length; i < ii; i++) {
    minX = m.min(this.atoms[i].x, minX);
    minY = m.min(this.atoms[i].y, minY);
    maxX = m.max(this.atoms[i].x, maxX);
    maxY = m.max(this.atoms[i].y, maxY);
  }

  return new _Point__WEBPACK_IMPORTED_MODULE_1__["default"]((maxX + minX) / 2, (maxY + minY) / 2);
};

_.getDimension = function () {
  if (this.atoms.length === 1) {
    return new _Point__WEBPACK_IMPORTED_MODULE_1__["default"](0, 0);
  }

  var minX = Infinity,
      minY = Infinity;
  var maxX = -Infinity,
      maxY = -Infinity;

  if (this.chains) {
    for (var i = 0, ii = this.chains.length; i < ii; i++) {
      var chain = this.chains[i];

      for (var j = 0, jj = chain.length; j < jj; j++) {
        var residue = chain[j];
        minX = m.min(residue.cp1.x, residue.cp2.x, minX);
        minY = m.min(residue.cp1.y, residue.cp2.y, minY);
        maxX = m.max(residue.cp1.x, residue.cp2.x, maxX);
        maxY = m.max(residue.cp1.y, residue.cp2.y, maxY);
      }
    }

    minX -= 30;
    minY -= 30;
    maxX += 30;
    maxY += 30;
  }

  for (var i = 0, ii = this.atoms.length; i < ii; i++) {
    minX = m.min(this.atoms[i].x, minX);
    minY = m.min(this.atoms[i].y, minY);
    maxX = m.max(this.atoms[i].x, maxX);
    maxY = m.max(this.atoms[i].y, maxY);
  }

  return new _Point__WEBPACK_IMPORTED_MODULE_1__["default"](maxX - minX, maxY - minY);
};

_.check = function (force) {
  // using force improves efficiency, so changes will not be checked
  // until a render occurs
  // you can force a check by sending true to this function after
  // calling check with a false
  if (force && this.doChecks) {
    // only check if the number of bonds has changed
    if (this.findRings) {
      if (this.bonds.length - this.atoms.length !== this.fjNumCache) {
        // find rings
        this.rings = new _informatics__WEBPACK_IMPORTED_MODULE_6__["SSSRFinder"](this).rings;

        for (var i = 0, ii = this.bonds.length; i < ii; i++) {
          this.bonds[i].ring = undefined;
        }

        for (var i = 0, ii = this.rings.length; i < ii; i++) {
          this.rings[i].setupBonds();
        }
      } else {
        // update rings if any
        for (var i = 0, ii = this.rings.length; i < ii; i++) {
          var r = this.rings[i];
          r.center = r.getCenter();
        }
      }
    } // find lones


    for (var i = 0, ii = this.atoms.length; i < ii; i++) {
      this.atoms[i].isLone = false;

      if (this.atoms[i].label === 'C') {
        var counter = 0;

        for (var j = 0, jj = this.bonds.length; j < jj; j++) {
          if (this.bonds[j].a1 === this.atoms[i] || this.bonds[j].a2 === this.atoms[i]) {
            counter++;
          }
        }

        if (counter === 0) {
          this.atoms[i].isLone = true;
        }
      }
    } // sort


    var sort = false;

    for (var i = 0, ii = this.atoms.length; i < ii; i++) {
      if (this.atoms[i].z !== 0) {
        sort = true;
      }
    }

    if (sort) {
      this.sortAtomsByZ();
      this.sortBondsByZ();
    } // setup metadata


    this.setupMetaData();
    this.atomNumCache = this.atoms.length;
    this.bondNumCache = this.bonds.length; // fj number cache doesnt care if there are separate molecules,
    // as the change will signal a need to check for rings; the
    // accuracy doesn't matter

    this.fjNumCache = this.bonds.length - this.atoms.length;
  }

  this.doChecks = !force;
};

_.getAngles = function (a) {
  var angles = [];

  for (var i = 0, ii = this.bonds.length; i < ii; i++) {
    if (this.bonds[i].contains(a)) {
      angles.push(a.angle(this.bonds[i].getNeighbor(a)));
    }
  }

  angles.sort(function (a, b) {
    return a - b;
  });
  return angles;
};

_.getCoordinationNumber = function (bs) {
  var coordinationNumber = 0;

  for (var i = 0, ii = bs.length; i < ii; i++) {
    coordinationNumber += bs[i].bondOrder;
  }

  return coordinationNumber;
};

_.getBonds = function (a) {
  var bonds = [];

  for (var i = 0, ii = this.bonds.length; i < ii; i++) {
    if (this.bonds[i].contains(a)) {
      bonds.push(this.bonds[i]);
    }
  }

  return bonds;
};

_.sortAtomsByZ = function () {
  for (var i = 1, ii = this.atoms.length; i < ii; i++) {
    var index = i;

    while (index > 0 && this.atoms[index].z < this.atoms[index - 1].z) {
      var hold = this.atoms[index];
      this.atoms[index] = this.atoms[index - 1];
      this.atoms[index - 1] = hold;
      index--;
    }
  }
};

_.sortBondsByZ = function () {
  for (var i = 1, ii = this.bonds.length; i < ii; i++) {
    var index = i;

    while (index > 0 && this.bonds[index].a1.z + this.bonds[index].a2.z < this.bonds[index - 1].a1.z + this.bonds[index - 1].a2.z) {
      var hold = this.bonds[index];
      this.bonds[index] = this.bonds[index - 1];
      this.bonds[index - 1] = hold;
      index--;
    }
  }
};

_.setupMetaData = function () {
  var center = this.getCenter();

  for (var i = 0, ii = this.atoms.length; i < ii; i++) {
    var a = this.atoms[i];
    a.bonds = this.getBonds(a);
    a.angles = this.getAngles(a);
    a.isHidden = a.bonds.length === 2 && m.abs(m.abs(a.angles[1] - a.angles[0]) - m.PI) < m.PI / 30 && a.bonds[0].bondOrder === a.bonds[1].bondOrder;
    var angleData = _math__WEBPACK_IMPORTED_MODULE_7__["angleBetweenLargest"](a.angles);
    a.angleOfLeastInterference = angleData.angle % (m.PI * 2);
    a.largestAngle = angleData.largest;
    a.coordinationNumber = this.getCoordinationNumber(a.bonds);
    a.bondNumber = a.bonds.length;
    a.molCenter = center;
  }

  for (var i = 0, ii = this.bonds.length; i < ii; i++) {
    var b = this.bonds[i];
    b.molCenter = center;
  }
};

_.scaleToAverageBondLength = function (length) {
  var avBondLength = this.getAverageBondLength();

  if (avBondLength !== 0) {
    var scale = length / avBondLength;

    for (var i = 0, ii = this.atoms.length; i < ii; i++) {
      this.atoms[i].x *= scale;
      this.atoms[i].y *= scale;
    }
  }
};

_.getAverageBondLength = function () {
  if (this.bonds.length === 0) {
    return 0;
  }

  var tot = 0;

  for (var i = 0, ii = this.bonds.length; i < ii; i++) {
    tot += this.bonds[i].getLength();
  }

  tot /= this.bonds.length;
  return tot;
};

_.getBounds = function () {
  var bounds = new _math__WEBPACK_IMPORTED_MODULE_7__["Bounds"]();

  for (var i = 0, ii = this.atoms.length; i < ii; i++) {
    bounds.expand(this.atoms[i].getBounds());
  }

  if (this.chains) {
    for (var i = 0, ii = this.chains.length; i < ii; i++) {
      var chain = this.chains[i];

      for (var j = 0, jj = chain.length; j < jj; j++) {
        var residue = chain[j];
        bounds.expand(residue.cp1.x, residue.cp1.y);
        bounds.expand(residue.cp2.x, residue.cp2.y);
      }
    }

    bounds.minX -= 30;
    bounds.minY -= 30;
    bounds.maxX += 30;
    bounds.maxY += 30;
  }

  return bounds;
};

_.getBounds3D = function () {
  var bounds = new _math__WEBPACK_IMPORTED_MODULE_7__["Bounds"]();

  for (var i = 0, ii = this.atoms.length; i < ii; i++) {
    bounds.expand(this.atoms[i].getBounds3D());
  }

  if (this.chains) {
    for (var i = 0, ii = this.chains.length; i < ii; i++) {
      var chain = this.chains[i];

      for (var j = 0, jj = chain.length; j < jj; j++) {
        var residue = chain[j];
        bounds.expand3D(residue.cp1.x, residue.cp1.y, residue.cp1.z);
        bounds.expand3D(residue.cp2.x, residue.cp2.y, residue.cp2.z);
      }
    }
  }

  return bounds;
};

_.getAtomGroup = function (a) {
  var ring = false;

  for (var i = 0, ii = this.atoms.length; i < ii; i++) {
    this.atoms[i].visited = false;
  }

  for (var i = 0, ii = this.bonds.length; i < ii; i++) {
    var b = this.bonds[i];

    if (!ring && b.contains(a) && b.ring !== undefined) {
      ring = true;
    }
  }

  if (!ring) {
    return undefined;
  }

  var set = [a];
  a.visited = true;
  var q = new _Queue__WEBPACK_IMPORTED_MODULE_0__["default"]();
  q.enqueue(a);

  while (!q.isEmpty()) {
    var atom = q.dequeue();

    for (var i = 0, ii = this.bonds.length; i < ii; i++) {
      var b = this.bonds[i];

      if (b.contains(atom) && ring === (b.ring !== undefined)) {
        var n = b.getNeighbor(atom);

        if (!n.visited) {
          n.visited = true;
          set.push(n);
          q.enqueue(n);
        }
      }
    }
  }

  return set;
};

_.getBondGroup = function (b) {
  var ring = b.ring !== undefined;
  var contained = false;

  for (var i = 0, ii = this.bonds.length; i < ii; i++) {
    var bi = this.bonds[i];

    if (bi === b) {
      contained = true;
    }

    bi.visited = false;
  }

  if (!contained) {
    // this bond isn't part of the molecule
    return undefined;
  }

  var set = [b];
  b.visited = true;
  var q = new _Queue__WEBPACK_IMPORTED_MODULE_0__["default"]();
  q.enqueue(b);

  while (!q.isEmpty()) {
    var bond = q.dequeue();

    for (var i = 0, ii = this.bonds.length; i < ii; i++) {
      var n = this.bonds[i];

      if (!n.visited && (n.a1 === bond.a1 || n.a2 === bond.a1 || n.a1 === bond.a2 || n.a2 === bond.a2) && n.ring !== undefined === ring) {
        n.visited = true;
        set.push(n);
        q.enqueue(n);
      }
    }
  }

  return set;
};

/***/ }),

/***/ "./src/ChemDoodle/structures/Plate.js":
/*!********************************************!*\
  !*** ./src/ChemDoodle/structures/Plate.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Plate; });
/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../extensions */ "./src/ChemDoodle/extensions/index.js");

var m = Math;
function Plate(lanes) {
  this.lanes = new Array(lanes);

  for (i = 0, ii = lanes; i < ii; i++) {
    this.lanes[i] = [];
  }
}
;
var _ = Plate.prototype;

_.sort = function () {
  for (i = 0, ii = this.lanes.length; i < ii; i++) {
    this.lanes[i].sort(function (a, b) {
      return a - b;
    });
  }
};

_.draw = function (ctx, specs) {
  // Front and origin
  var width = ctx.canvas.width;
  var height = ctx.canvas.height;
  this.origin = 9 * height / 10;
  this.front = height / 10;
  this.laneLength = this.origin - this.front;
  ctx.strokeStyle = '#000000';
  ctx.beginPath();
  ctx.moveTo(0, this.front);
  ctx.lineTo(width, this.front);
  ctx.setLineDash([3]);
  ctx.stroke();
  ctx.setLineDash([]);
  ctx.beginPath();
  ctx.moveTo(0, this.origin);
  ctx.lineTo(width, this.origin);
  ctx.closePath();
  ctx.stroke(); // Lanes

  for (i = 0, ii = this.lanes.length; i < ii; i++) {
    var laneX = (i + 1) * width / (ii + 1);
    ctx.beginPath();
    ctx.moveTo(laneX, this.origin);
    ctx.lineTo(laneX, this.origin + 3);
    ctx.closePath();
    ctx.stroke(); // Spots

    for (s = 0, ss = this.lanes[i].length; s < ss; s++) {
      var spotY = this.origin - this.laneLength * this.lanes[i][s].rf;

      switch (this.lanes[i][s].type) {
        case 'compact':
          ctx.beginPath();
          ctx.arc(laneX, spotY, 3, 0, 2 * m.PI, false);
          ctx.closePath();
          break;

        case 'expanded':
          ctx.beginPath();
          ctx.arc(laneX, spotY, 7, 0, 2 * m.PI, false);
          ctx.closePath();
          break;

        case 'trailing':
          // trailing
          break;

        case 'widened':
          _extensions__WEBPACK_IMPORTED_MODULE_0__["contextEllipse"](ctx, laneX - 18, spotY - 10, 36, 10);
          break;

        case 'cresent':
          ctx.beginPath();
          ctx.arc(laneX, spotY, 9, 0, m.PI, true);
          ctx.closePath();
          break;
      }

      switch (this.lanes[i][s].style) {
        case 'solid':
          ctx.fillStyle = '#000000';
          ctx.fill();
          break;

        case 'transparent':
          ctx.stroke();
          break;

        case 'gradient':
          // gradient
          break;
      }
    }
  }
};

Plate.Spot = function (type, rf, style) {
  this.type = type;
  this.rf = rf;
  this.style = style ? style : 'solid';
};

/***/ }),

/***/ "./src/ChemDoodle/structures/Point.js":
/*!********************************************!*\
  !*** ./src/ChemDoodle/structures/Point.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Point; });
var m = Math;
function Point(x, y) {
  this.x = x ? x : 0;
  this.y = y ? y : 0;
}
;
var _ = Point.prototype;

_.sub = function (p) {
  this.x -= p.x;
  this.y -= p.y;
};

_.add = function (p) {
  this.x += p.x;
  this.y += p.y;
};

_.distance = function (p) {
  var dx = p.x - this.x;
  var dy = p.y - this.y;
  return m.sqrt(dx * dx + dy * dy);
};

_.angleForStupidCanvasArcs = function (p) {
  var dx = p.x - this.x;
  var dy = p.y - this.y;
  var angle = 0; // Calculate angle

  if (dx === 0) {
    if (dy === 0) {
      angle = 0;
    } else if (dy > 0) {
      angle = m.PI / 2;
    } else {
      angle = 3 * m.PI / 2;
    }
  } else if (dy === 0) {
    if (dx > 0) {
      angle = 0;
    } else {
      angle = m.PI;
    }
  } else {
    if (dx < 0) {
      angle = m.atan(dy / dx) + m.PI;
    } else if (dy < 0) {
      angle = m.atan(dy / dx) + 2 * m.PI;
    } else {
      angle = m.atan(dy / dx);
    }
  }

  while (angle < 0) {
    angle += m.PI * 2;
  }

  angle = angle % (m.PI * 2);
  return angle;
};

_.angle = function (p) {
  // y is upside down to account for inverted canvas
  var dx = p.x - this.x;
  var dy = this.y - p.y;
  var angle = 0; // Calculate angle

  if (dx === 0) {
    if (dy === 0) {
      angle = 0;
    } else if (dy > 0) {
      angle = m.PI / 2;
    } else {
      angle = 3 * m.PI / 2;
    }
  } else if (dy === 0) {
    if (dx > 0) {
      angle = 0;
    } else {
      angle = m.PI;
    }
  } else {
    if (dx < 0) {
      angle = m.atan(dy / dx) + m.PI;
    } else if (dy < 0) {
      angle = m.atan(dy / dx) + 2 * m.PI;
    } else {
      angle = m.atan(dy / dx);
    }
  }

  while (angle < 0) {
    angle += m.PI * 2;
  }

  angle = angle % (m.PI * 2);
  return angle;
};

/***/ }),

/***/ "./src/ChemDoodle/structures/Query.js":
/*!********************************************!*\
  !*** ./src/ChemDoodle/structures/Query.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Query; });
/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../extensions */ "./src/ChemDoodle/extensions/index.js");

var extensions = {
  getFontString: _extensions__WEBPACK_IMPORTED_MODULE_0__["getFontString"]
};
var m = Math;
var COMMA_SPACE_REGEX = /[ ,]+/;
var COMMA_DASH_REGEX = /\-+/;
var FONTS = ['Helvetica', 'Arial', 'Dialog'];
function Query(type) {
  this.type = type; // atom properties

  this.elements = {
    v: [],
    not: false
  };
  this.charge = undefined;
  this.chirality = undefined;
  this.connectivity = undefined;
  this.connectivityNoH = undefined;
  this.hydrogens = undefined;
  this.saturation = undefined; // bond properties

  this.orders = {
    v: [],
    not: false
  };
  this.stereo = undefined; // generic properties

  this.aromatic = undefined;
  this.ringCount = undefined; // cache the string value

  this.cache = undefined;
}
;
Query.TYPE_ATOM = 0;
Query.TYPE_BOND = 1;
var _ = Query.prototype;

_.parseRange = function (range) {
  var points = [];
  var splits = range.split(COMMA_SPACE_REGEX);

  for (var i = 0, ii = splits.length; i < ii; i++) {
    var t = splits[i];
    var neg = false;
    var neg2 = false;

    if (t.charAt(0) === '-') {
      neg = true;
      t = t.substring(1);
    }

    if (t.indexOf('--') != -1) {
      neg2 = true;
    }

    if (t.indexOf('-') != -1) {
      var parts = t.split(COMMA_DASH_REGEX);
      var p = {
        x: parseInt(parts[0]) * (neg ? -1 : 1),
        y: parseInt(parts[1]) * (neg2 ? -1 : 1)
      };

      if (p.y < p.x) {
        var tmp = p.y;
        p.y = p.x;
        p.x = tmp;
      }

      points.push(p);
    } else {
      points.push({
        x: parseInt(t) * (neg ? -1 : 1)
      });
    }
  }

  return points;
};

_.draw = function (ctx, specs, pos) {
  if (!this.cache) {
    this.cache = this.toString();
  }

  var top = this.cache;
  var bottom = undefined;
  var split = top.indexOf('(');

  if (split != -1) {
    top = this.cache.substring(0, split);
    bottom = this.cache.substring(split, this.cache.length);
  }

  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';
  ctx.font = extensions.getFontString(12, FONTS, true, false);
  var tw = ctx.measureText(top).width;
  ctx.fillStyle = specs.backgroundColor;
  ctx.fillRect(pos.x - tw / 2, pos.y - 6, tw, 12);
  ctx.fillStyle = 'black';
  ctx.fillText(top, pos.x, pos.y);

  if (bottom) {
    ctx.font = extensions.getFontString(10, FONTS, false, true);
    tw = ctx.measureText(bottom).width;
    ctx.fillStyle = specs.backgroundColor;
    ctx.fillRect(pos.x - tw / 2, pos.y + 6, tw, 11);
    ctx.fillStyle = 'black';
    ctx.fillText(bottom, pos.x, pos.y + 11);
  }
};

_.outputRange = function (array) {
  var comma = false;
  var sb = [];

  for (var i = 0, ii = array.length; i < ii; i++) {
    if (comma) {
      sb.push(',');
    }

    comma = true;
    var p = array[i];

    if (p.y) {
      sb.push(p.x);
      sb.push('-');
      sb.push(p.y);
    } else {
      sb.push(p.x);
    }
  }

  return sb.join('');
};

_.toString = function () {
  var sb = [];
  var attributes = [];

  if (this.type === Query.TYPE_ATOM) {
    if (!this.elements || this.elements.v.length === 0) {
      sb.push('[a]');
    } else {
      if (this.elements.not) {
        sb.push('!');
      }

      sb.push('[');
      sb.push(this.elements.v.join(','));
      sb.push(']');
    }

    if (this.chirality) {
      attributes.push((this.chirality.not ? '!' : '') + '@=' + this.chirality.v);
    }

    if (this.aromatic) {
      attributes.push((this.aromatic.not ? '!' : '') + 'A');
    }

    if (this.charge) {
      attributes.push((this.charge.not ? '!' : '') + 'C=' + this.outputRange(this.charge.v));
    }

    if (this.hydrogens) {
      attributes.push((this.hydrogens.not ? '!' : '') + 'H=' + this.outputRange(this.hydrogens.v));
    }

    if (this.ringCount) {
      attributes.push((this.ringCount.not ? '!' : '') + 'R=' + this.outputRange(this.ringCount.v));
    }

    if (this.saturation) {
      attributes.push((this.saturation.not ? '!' : '') + 'S');
    }

    if (this.connectivity) {
      attributes.push((this.connectivity.not ? '!' : '') + 'X=' + this.outputRange(this.connectivity.v));
    }

    if (this.connectivityNoH) {
      attributes.push((this.connectivityNoH.not ? '!' : '') + 'x=' + this.outputRange(this.connectivityNoH.v));
    }
  } else if (this.type === Query.TYPE_BOND) {
    if (!this.orders || this.orders.v.length === 0) {
      sb.push('[a]');
    } else {
      if (this.orders.not) {
        sb.push('!');
      }

      sb.push('[');
      sb.push(this.orders.v.join(','));
      sb.push(']');
    }

    if (this.stereo) {
      attributes.push((this.stereo.not ? '!' : '') + '@=' + this.stereo.v);
    }

    if (this.aromatic) {
      attributes.push((this.aromatic.not ? '!' : '') + 'A');
    }

    if (this.ringCount) {
      attributes.push((this.ringCount.not ? '!' : '') + 'R=' + this.outputRange(this.ringCount.v));
    }
  }

  if (attributes.length > 0) {
    sb.push('(');
    sb.push(attributes.join(','));
    sb.push(')');
  }

  return sb.join('');
};

/***/ }),

/***/ "./src/ChemDoodle/structures/Queue.js":
/*!********************************************!*\
  !*** ./src/ChemDoodle/structures/Queue.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Queue; });
// This is a more efficient Queue implementation other than using Array.shift() on each dequeue, which is very expensive
// this is 2-3x faster

/*
  * Creates a new Queue. A Queue is a first-in-first-out (FIFO) data
  * structure. Functions of the Queue object allow elements to be
  * enthis.queued and dethis.queued, the first element to be obtained without
  * dequeuing, and for the current size of the Queue and empty/non-empty
  * status to be obtained.
  */
function Queue() {
  // the list of elements, initialised to the empty array
  this.queue = [];
}
;
var _ = Queue.prototype; // the amount of space at the front of the this.queue, initialised to zero

_.queueSpace = 0;
/*
  * Returns the size of this Queue. The size of a Queue is equal to the
  * number of elements that have been enthis.queued minus the number of
  * elements that have been dethis.queued.
  */

_.getSize = function () {
  // return the number of elements in the this.queue
  return this.queue.length - this.queueSpace;
};
/*
  * Returns true if this Queue is empty, and false otherwise. A Queue is
  * empty if the number of elements that have been enthis.queued equals the
  * number of elements that have been dethis.queued.
  */


_.isEmpty = function () {
  // return true if the this.queue is empty, and false otherwise
  return this.queue.length === 0;
};
/*
  * Enthis.queues the specified element in this Queue. The parameter is:
  * 
  * element - the element to enthis.queue
  */


_.enqueue = function (element) {
  this.queue.push(element);
};
/*
  * Dethis.queues an element from this Queue. The oldest element in this
  * Queue is removed and returned. If this Queue is empty then undefined is
  * returned.
  */


_.dequeue = function () {
  // initialise the element to return to be undefined
  var element; // check whether the this.queue is empty

  if (this.queue.length) {
    // fetch the oldest element in the this.queue
    element = this.queue[this.queueSpace]; // update the amount of space and check whether a shift should
    // occur

    if (++this.queueSpace * 2 >= this.queue.length) {
      // set the this.queue equal to the non-empty portion of the
      // this.queue
      this.queue = this.queue.slice(this.queueSpace); // reset the amount of space at the front of the this.queue

      this.queueSpace = 0;
    }
  } // return the removed element


  return element;
};
/*
  * Returns the oldest element in this Queue. If this Queue is empty then
  * undefined is returned. This function returns the same value as the
  * dethis.queue function, but does not remove the returned element from this
  * Queue.
  */


_.getOldestElement = function () {
  // initialise the element to return to be undefined
  var element; // if the this.queue is not element then fetch the oldest element in the
  // this.queue

  if (this.queue.length) {
    element = this.queue[this.queueSpace];
  } // return the oldest element


  return element;
};

/***/ }),

/***/ "./src/ChemDoodle/structures/Residue.js":
/*!**********************************************!*\
  !*** ./src/ChemDoodle/structures/Residue.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Residue; });
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib */ "./src/ChemDoodle/lib/index.js");
/* harmony import */ var _Atom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Atom */ "./src/ChemDoodle/structures/Atom.js");


var m = Math;
var SB;
var lastVerticalResolution = -1;

function setupMatrices(verticalResolution) {
  var n2 = verticalResolution * verticalResolution;
  var n3 = verticalResolution * verticalResolution * verticalResolution;
  var S = [6 / n3, 0, 0, 0, 6 / n3, 2 / n2, 0, 0, 1 / n3, 1 / n2, 1 / verticalResolution, 0, 0, 0, 0, 1];
  var Bm = [-1 / 6, 1 / 2, -1 / 2, 1 / 6, 1 / 2, -1, 1 / 2, 0, -1 / 2, 0, 1 / 2, 0, 1 / 6, 2 / 3, 1 / 6, 0];
  SB = _lib__WEBPACK_IMPORTED_MODULE_0__["mat4"].multiply(Bm, S, []);
  lastVerticalResolution = verticalResolution;
}

function Residue(resSeq) {
  // number of vertical slashes per segment
  this.resSeq = resSeq;
}
;
var _ = Residue.prototype;

_.setup = function (nextAlpha, horizontalResolution) {
  this.horizontalResolution = horizontalResolution; // define plane

  var A = [nextAlpha.x - this.cp1.x, nextAlpha.y - this.cp1.y, nextAlpha.z - this.cp1.z];
  var B = [this.cp2.x - this.cp1.x, this.cp2.y - this.cp1.y, this.cp2.z - this.cp1.z];
  var C = _lib__WEBPACK_IMPORTED_MODULE_0__["vec3"].cross(A, B, []);
  this.D = _lib__WEBPACK_IMPORTED_MODULE_0__["vec3"].cross(C, A, []);
  _lib__WEBPACK_IMPORTED_MODULE_0__["vec3"].normalize(C);
  _lib__WEBPACK_IMPORTED_MODULE_0__["vec3"].normalize(this.D); // generate guide coordinates
  // guides for the narrow parts of the ribbons

  this.guidePointsSmall = []; // guides for the wide parts of the ribbons

  this.guidePointsLarge = []; // guides for the ribbon part of helix as cylinder model

  var P = [(nextAlpha.x + this.cp1.x) / 2, (nextAlpha.y + this.cp1.y) / 2, (nextAlpha.z + this.cp1.z) / 2];

  if (this.helix) {
    // expand helices
    _lib__WEBPACK_IMPORTED_MODULE_0__["vec3"].scale(C, 1.5);
    _lib__WEBPACK_IMPORTED_MODULE_0__["vec3"].add(P, C);
  }

  this.guidePointsSmall[0] = new _Atom__WEBPACK_IMPORTED_MODULE_1__["default"]('', P[0] - this.D[0] / 2, P[1] - this.D[1] / 2, P[2] - this.D[2] / 2);

  for (var i = 1; i < horizontalResolution; i++) {
    this.guidePointsSmall[i] = new _Atom__WEBPACK_IMPORTED_MODULE_1__["default"]('', this.guidePointsSmall[0].x + this.D[0] * i / horizontalResolution, this.guidePointsSmall[0].y + this.D[1] * i / horizontalResolution, this.guidePointsSmall[0].z + this.D[2] * i / horizontalResolution);
  }

  _lib__WEBPACK_IMPORTED_MODULE_0__["vec3"].scale(this.D, 4);
  this.guidePointsLarge[0] = new _Atom__WEBPACK_IMPORTED_MODULE_1__["default"]('', P[0] - this.D[0] / 2, P[1] - this.D[1] / 2, P[2] - this.D[2] / 2);

  for (var i = 1; i < horizontalResolution; i++) {
    this.guidePointsLarge[i] = new _Atom__WEBPACK_IMPORTED_MODULE_1__["default"]('', this.guidePointsLarge[0].x + this.D[0] * i / horizontalResolution, this.guidePointsLarge[0].y + this.D[1] * i / horizontalResolution, this.guidePointsLarge[0].z + this.D[2] * i / horizontalResolution);
  }
};

_.getGuidePointSet = function (type) {
  if (type === 0) {
    return this.helix || this.sheet ? this.guidePointsLarge : this.guidePointsSmall;
  } else if (type === 1) {
    return this.guidePointsSmall;
  } else if (type === 2) {
    return this.guidePointsLarge;
  }
};

_.computeLineSegments = function (b2, b1, a1, doCartoon, verticalResolution) {
  this.setVerticalResolution(verticalResolution);
  this.split = a1.helix !== this.helix || a1.sheet !== this.sheet;
  this.lineSegments = this.innerCompute(0, b2, b1, a1, false, verticalResolution);

  if (doCartoon) {
    this.lineSegmentsCartoon = this.innerCompute(this.helix || this.sheet ? 2 : 1, b2, b1, a1, true, verticalResolution);
  }
};

_.innerCompute = function (set, b2, b1, a1, useArrows, verticalResolution) {
  var segments = [];
  var use = this.getGuidePointSet(set);
  var useb2 = b2.getGuidePointSet(set);
  var useb1 = b1.getGuidePointSet(set);
  var usea1 = a1.getGuidePointSet(set);

  for (var l = 0, ll = use.length; l < ll; l++) {
    var G = [useb2[l].x, useb2[l].y, useb2[l].z, 1, useb1[l].x, useb1[l].y, useb1[l].z, 1, use[l].x, use[l].y, use[l].z, 1, usea1[l].x, usea1[l].y, usea1[l].z, 1];
    var M = _lib__WEBPACK_IMPORTED_MODULE_0__["mat4"].multiply(G, SB, []);
    var strand = [];

    for (var k = 0; k < verticalResolution; k++) {
      for (var i = 3; i > 0; i--) {
        for (var j = 0; j < 4; j++) {
          M[i * 4 + j] += M[(i - 1) * 4 + j];
        }
      }

      strand[k] = new _Atom__WEBPACK_IMPORTED_MODULE_1__["default"]('', M[12] / M[15], M[13] / M[15], M[14] / M[15]);
    }

    segments[l] = strand;
  }

  if (useArrows && this.arrow) {
    for (var i = 0, ii = verticalResolution; i < ii; i++) {
      var mult = 1.5 - 1.3 * i / verticalResolution;
      var mid = m.floor(this.horizontalResolution / 2);
      var center = segments[mid];

      for (var j = 0, jj = segments.length; j < jj; j++) {
        if (j !== mid) {
          var o = center[i];
          var f = segments[j][i];
          var vec = [f.x - o.x, f.y - o.y, f.z - o.z];
          _lib__WEBPACK_IMPORTED_MODULE_0__["vec3"].scale(vec, mult);
          f.x = o.x + vec[0];
          f.y = o.y + vec[1];
          f.z = o.z + vec[2];
        }
      }
    }
  }

  return segments;
};

_.setVerticalResolution = function (verticalResolution) {
  if (verticalResolution !== lastVerticalResolution) {
    setupMatrices(verticalResolution);
  }
};

/***/ }),

/***/ "./src/ChemDoodle/structures/Ring.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/structures/Ring.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Ring; });
/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Point */ "./src/ChemDoodle/structures/Point.js");

var m = Math;
function Ring() {
  this.atoms = [];
  this.bonds = [];
}
;
var _ = Ring.prototype;
_.center = undefined;

_.setupBonds = function () {
  for (var i = 0, ii = this.bonds.length; i < ii; i++) {
    this.bonds[i].ring = this;
  }

  this.center = this.getCenter();
};

_.getCenter = function () {
  var minX = Infinity,
      minY = Infinity,
      maxX = -Infinity,
      maxY = -Infinity;

  for (var i = 0, ii = this.atoms.length; i < ii; i++) {
    minX = m.min(this.atoms[i].x, minX);
    minY = m.min(this.atoms[i].y, minY);
    maxX = m.max(this.atoms[i].x, maxX);
    maxY = m.max(this.atoms[i].y, maxY);
  }

  return new _Point__WEBPACK_IMPORTED_MODULE_0__["default"]((maxX + minX) / 2, (maxY + minY) / 2);
};

/***/ }),

/***/ "./src/ChemDoodle/structures/Spectrum.js":
/*!***********************************************!*\
  !*** ./src/ChemDoodle/structures/Spectrum.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Spectrum; });
/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../extensions */ "./src/ChemDoodle/extensions/index.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math */ "./src/ChemDoodle/math/index.js");
/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Point */ "./src/ChemDoodle/structures/Point.js");



var m = Math;
function Spectrum() {
  this.data = [];
  this.metadata = [];
  this.dataDisplay = [];
  this.memory = {
    offsetTop: 0,
    offsetLeft: 0,
    offsetBottom: 0,
    flipXAxis: false,
    scale: 1,
    width: 0,
    height: 0
  };
}
;
var _ = Spectrum.prototype;
_.title = undefined;
_.xUnit = undefined;
_.yUnit = undefined;
_.continuous = true;
_.integrationSensitivity = 0.01;

_.draw = function (ctx, specs, width, height) {
  if (this.specs) {
    specs = this.specs;
  }

  var offsetTop = 5;
  var offsetLeft = 0;
  var offsetBottom = 0; // draw decorations

  ctx.fillStyle = specs.text_color;
  ctx.textAlign = 'center';
  ctx.textBaseline = 'alphabetic';
  ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_0__["getFontString"](specs.text_font_size, specs.text_font_families);

  if (this.xUnit) {
    offsetBottom += specs.text_font_size;
    ctx.fillText(this.xUnit, width / 2, height - 2);
  }

  if (this.yUnit && specs.plots_showYAxis) {
    offsetLeft += specs.text_font_size;
    ctx.save();
    ctx.translate(specs.text_font_size, height / 2);
    ctx.rotate(-m.PI / 2);
    ctx.fillText(this.yUnit, 0, 0);
    ctx.restore();
  }

  if (this.title) {
    offsetTop += specs.text_font_size;
    ctx.fillText(this.title, width / 2, specs.text_font_size);
  } // draw ticks


  ctx.lineCap = 'square';
  offsetBottom += 5 + specs.text_font_size;

  if (specs.plots_showYAxis) {
    offsetLeft += 5 + ctx.measureText('1000').width;
  }

  if (specs.plots_showGrid) {
    ctx.strokeStyle = specs.plots_gridColor;
    ctx.lineWidth = specs.plots_gridLineWidth;
    ctx.strokeRect(offsetLeft, offsetTop, width - offsetLeft, height - offsetBottom - offsetTop);
  }

  ctx.textAlign = 'center';
  ctx.textBaseline = 'top';
  var span = this.maxX - this.minX;
  var t = span / 100;
  var major = .001;

  while (major < t || span / major > 25) {
    major *= 10;
  }

  var counter = 0;
  var overlapX = specs.plots_flipXAxis ? width : 0;

  for (var i = m.round(this.minX / major) * major; i <= this.maxX; i += major / 2) {
    var x = this.getTransformedX(i, specs, width, offsetLeft);

    if (x > offsetLeft) {
      ctx.strokeStyle = 'black';
      ctx.lineWidth = 1;

      if (counter % 2 === 0) {
        ctx.beginPath();
        ctx.moveTo(x, height - offsetBottom);
        ctx.lineTo(x, height - offsetBottom + 2);
        ctx.stroke();
        var s = i.toFixed(5);

        while (s.charAt(s.length - 1) === '0') {
          s = s.substring(0, s.length - 1);
        }

        if (s.charAt(s.length - 1) === '.') {
          s = s.substring(0, s.length - 1);
        } // do this to avoid label overlap


        var numWidth = ctx.measureText(s).width;

        if (specs.plots_flipXAxis) {
          numWidth *= -1;
        }

        var ls = x - numWidth / 2;

        if (specs.plots_flipXAxis ? ls < overlapX : ls > overlapX) {
          ctx.fillText(s, x, height - offsetBottom + 2);
          overlapX = x + numWidth / 2;
        }

        if (specs.plots_showGrid) {
          ctx.strokeStyle = specs.plots_gridColor;
          ctx.lineWidth = specs.plots_gridLineWidth;
          ctx.beginPath();
          ctx.moveTo(x, height - offsetBottom);
          ctx.lineTo(x, offsetTop);
          ctx.stroke();
        }
      } else {
        ctx.beginPath();
        ctx.moveTo(x, height - offsetBottom);
        ctx.lineTo(x, height - offsetBottom + 2);
        ctx.stroke();
      }
    }

    counter++;
  }

  if (specs.plots_showYAxis || specs.plots_showGrid) {
    var spany = 1 / specs.scale;
    ctx.textAlign = 'right';
    ctx.textBaseline = 'middle';

    for (var i = 0; i <= 10; i++) {
      var yval = spany / 10 * i;
      var y = offsetTop + (height - offsetBottom - offsetTop) * (1 - yval * specs.scale);

      if (specs.plots_showGrid) {
        ctx.strokeStyle = specs.plots_gridColor;
        ctx.lineWidth = specs.plots_gridLineWidth;
        ctx.beginPath();
        ctx.moveTo(offsetLeft, y);
        ctx.lineTo(width, y);
        ctx.stroke();
      }

      if (specs.plots_showYAxis) {
        ctx.strokeStyle = 'black';
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.moveTo(offsetLeft, y);
        ctx.lineTo(offsetLeft - 3, y);
        ctx.stroke();
        var val = yval * 100;
        var cutoff = m.max(0, 3 - m.floor(val).toString().length);
        var s = val.toFixed(cutoff);

        if (cutoff > 0) {
          while (s.charAt(s.length - 1) === '0') {
            s = s.substring(0, s.length - 1);
          }
        }

        if (s.charAt(s.length - 1) === '.') {
          s = s.substring(0, s.length - 1);
        }

        ctx.fillText(s, offsetLeft - 3, y);
      }
    }
  } // draw axes


  ctx.strokeStyle = 'black';
  ctx.lineWidth = 1;
  ctx.beginPath(); // draw x axis

  ctx.moveTo(width, height - offsetBottom);
  ctx.lineTo(offsetLeft, height - offsetBottom); // draw y axis

  if (specs.plots_showYAxis) {
    ctx.lineTo(offsetLeft, offsetTop);
  }

  ctx.stroke(); // draw metadata

  if (this.dataDisplay.length > 0) {
    ctx.textAlign = 'left';
    ctx.textBaseline = 'top';
    var mcount = 0;

    for (var i = 0, ii = this.dataDisplay.length; i < ii; i++) {
      if (this.dataDisplay[i].value) {
        ctx.fillText([this.dataDisplay[i].display, ': ', this.dataDisplay[i].value].join(''), offsetLeft + 10, offsetTop + 10 + mcount * (specs.text_font_size + 5));
        mcount++;
      } else if (this.dataDisplay[i].tag) {
        for (var j = 0, jj = this.metadata.length; j < jj; j++) {
          if (_extensions__WEBPACK_IMPORTED_MODULE_0__["stringStartsWith"](this.metadata[j], this.dataDisplay[i].tag)) {
            var draw = this.metadata[j];

            if (this.dataDisplay[i].display) {
              var index = this.metadata[j].indexOf('=');
              draw = [this.dataDisplay[i].display, ': ', index > -1 ? this.metadata[j].substring(index + 2) : this.metadata[j]].join('');
            }

            ctx.fillText(draw, offsetLeft + 10, offsetTop + 10 + mcount * (specs.text_font_size + 5));
            mcount++;
            break;
          }
        }
      }
    }
  }

  this.drawPlot(ctx, specs, width, height, offsetTop, offsetLeft, offsetBottom);
  this.memory.offsetTop = offsetTop;
  this.memory.offsetLeft = offsetLeft;
  this.memory.offsetBottom = offsetBottom;
  this.memory.flipXAxis = specs.plots_flipXAxis;
  this.memory.scale = specs.scale;
  this.memory.width = width;
  this.memory.height = height;
};

_.drawPlot = function (ctx, specs, width, height, offsetTop, offsetLeft, offsetBottom) {
  if (this.specs) {
    specs = this.specs;
  }

  ctx.strokeStyle = specs.plots_color;
  ctx.lineWidth = specs.plots_width;
  var integration = []; // clip the spectrum display bounds here to not draw over the axes
  // we do this because we want to continue drawing segments to their natural ends to be accurate, but don't want to see them past the display area

  ctx.save();
  ctx.rect(offsetLeft, offsetTop, width - offsetLeft, height - offsetBottom - offsetTop);
  ctx.clip();
  ctx.beginPath();

  if (this.continuous) {
    var started = false;
    var counter = 0;
    var stop = false;

    for (var i = 0, ii = this.data.length; i < ii; i++) {
      var x = this.getTransformedX(this.data[i].x, specs, width, offsetLeft);
      var xnext;

      if (i < ii && !started && this.data[i + 1]) {
        // see if you should render this first segment
        xnext = this.getTransformedX(this.data[i + 1].x, specs, width, offsetLeft);
      } // check xnext against undefined as it can be 0/1


      if (x >= offsetLeft && x < width || xnext !== undefined && xnext >= offsetLeft && xnext < width) {
        var y = this.getTransformedY(this.data[i].y, specs, height, offsetBottom, offsetTop);

        if (specs.plots_showIntegration && m.abs(this.data[i].y) > this.integrationSensitivity) {
          integration.push(new _Point__WEBPACK_IMPORTED_MODULE_2__["default"](this.data[i].x, this.data[i].y));
        }

        if (!started) {
          ctx.moveTo(x, y);
          started = true;
        }

        ctx.lineTo(x, y);
        counter++;

        if (counter % 1000 === 0) {
          // segment the path to avoid crashing safari on mac os x
          ctx.stroke();
          ctx.beginPath();
          ctx.moveTo(x, y);
        }

        if (stop) {
          break;
        }
      } else if (started) {
        // render one more segment
        stop = true;
      }
    }
  } else {
    for (var i = 0, ii = this.data.length; i < ii; i++) {
      var x = this.getTransformedX(this.data[i].x, specs, width, offsetLeft);

      if (x >= offsetLeft && x < width) {
        ctx.moveTo(x, height - offsetBottom);
        ctx.lineTo(x, this.getTransformedY(this.data[i].y, specs, height, offsetBottom, offsetTop));
      }
    }
  }

  ctx.stroke();

  if (specs.plots_showIntegration && integration.length > 1) {
    ctx.strokeStyle = specs.plots_integrationColor;
    ctx.lineWidth = specs.plots_integrationLineWidth;
    ctx.beginPath();
    var ascending = integration[1].x > integration[0].x;
    var max;

    if (this.flipXAxis && !ascending || !this.flipXAxis && ascending) {
      for (var i = integration.length - 2; i >= 0; i--) {
        integration[i].y = integration[i].y + integration[i + 1].y;
      }

      max = integration[0].y;
    } else {
      for (var i = 1, ii = integration.length; i < ii; i++) {
        integration[i].y = integration[i].y + integration[i - 1].y;
      }

      max = integration[integration.length - 1].y;
    }

    for (var i = 0, ii = integration.length; i < ii; i++) {
      var x = this.getTransformedX(integration[i].x, specs, width, offsetLeft);
      var y = this.getTransformedY(integration[i].y / specs.scale / max, specs, height, offsetBottom, offsetTop);

      if (i === 0) {
        ctx.moveTo(x, y);
      } else {
        ctx.lineTo(x, y);
      }
    }

    ctx.stroke();
  }

  ctx.restore();
};

_.getTransformedY = function (y, specs, height, offsetBottom, offsetTop) {
  return offsetTop + (height - offsetBottom - offsetTop) * (1 - y * specs.scale);
};

_.getInverseTransformedY = function (y) {
  // can only be called after a render when memory is set, this
  // function doesn't make sense without a render first anyway
  return (1 - (y - this.memory.offsetTop) / (this.memory.height - this.memory.offsetBottom - this.memory.offsetTop)) / this.memory.scale * 100;
};

_.getTransformedX = function (x, specs, width, offsetLeft) {
  var returning = offsetLeft + (x - this.minX) / (this.maxX - this.minX) * (width - offsetLeft);

  if (specs.plots_flipXAxis) {
    returning = width + offsetLeft - returning;
  }

  return returning;
};

_.getInverseTransformedX = function (x) {
  // can only be called after a render when memory is set, this
  // function doesn't make sense without a render first anyway
  if (this.memory.flipXAxis) {
    x = this.memory.width + this.memory.offsetLeft - x;
  }

  return (x - this.memory.offsetLeft) * (this.maxX - this.minX) / (this.memory.width - this.memory.offsetLeft) + this.minX;
};

_.setup = function () {
  var xmin = Number.MAX_VALUE;
  var xmax = Number.MIN_VALUE;
  var ymax = Number.MIN_VALUE;

  for (var i = 0, ii = this.data.length; i < ii; i++) {
    xmin = m.min(xmin, this.data[i].x);
    xmax = m.max(xmax, this.data[i].x);
    ymax = m.max(ymax, this.data[i].y);
  }

  if (this.continuous) {
    this.minX = xmin;
    this.maxX = xmax;
  } else {
    this.minX = xmin - 1;
    this.maxX = xmax + 1;
  }

  for (var i = 0, ii = this.data.length; i < ii; i++) {
    this.data[i].y /= ymax;
  }
};

_.zoom = function (pixel1, pixel2, width, rescaleY) {
  var p1 = this.getInverseTransformedX(pixel1);
  var p2 = this.getInverseTransformedX(pixel2);
  this.minX = m.min(p1, p2);
  this.maxX = m.max(p1, p2);

  if (rescaleY) {
    var ymax = Number.MIN_VALUE;

    for (var i = 0, ii = this.data.length; i < ii; i++) {
      if (_math__WEBPACK_IMPORTED_MODULE_1__["isBetween"](this.data[i].x, this.minX, this.maxX)) {
        ymax = m.max(ymax, this.data[i].y);
      }
    }

    return 1 / ymax;
  }
};

_.translate = function (dif, width) {
  var dist = dif / (width - this.memory.offsetLeft) * (this.maxX - this.minX) * (this.memory.flipXAxis ? 1 : -1);
  this.minX += dist;
  this.maxX += dist;
};

_.alertMetadata = function () {
  alert(this.metadata.join('\n'));
};

_.getInternalCoordinates = function (x, y) {
  return new _Point__WEBPACK_IMPORTED_MODULE_2__["default"](this.getInverseTransformedX(x), this.getInverseTransformedY(y));
};

_.getClosestPlotInternalCoordinates = function (x) {
  var xtl = this.getInverseTransformedX(x - 1);
  var xtr = this.getInverseTransformedX(x + 1);

  if (xtl > xtr) {
    var temp = xtl;
    xtl = xtr;
    xtr = temp;
  }

  var highest = -1;
  var max = -Infinity;
  var inRange = false;

  for (var i = 0, ii = this.data.length; i < ii; i++) {
    var p = this.data[i];

    if (_math__WEBPACK_IMPORTED_MODULE_1__["isBetween"](p.x, xtl, xtr)) {
      if (p.y > max) {
        inRange = true;
        max = p.y;
        highest = i;
      }
    } else if (inRange) {
      break;
    }
  }

  if (highest === -1) {
    return undefined;
  }

  var p = this.data[highest];
  return new _Point__WEBPACK_IMPORTED_MODULE_2__["default"](p.x, p.y * 100);
};

_.getClosestPeakInternalCoordinates = function (x) {
  var xt = this.getInverseTransformedX(x);
  var closest = 0;
  var dif = Infinity;

  for (var i = 0, ii = this.data.length; i < ii; i++) {
    var sub = m.abs(this.data[i].x - xt);

    if (sub <= dif) {
      dif = sub;
      closest = i;
    } else {
      break;
    }
  }

  var highestLeft = closest,
      highestRight = closest;
  var maxLeft = this.data[closest].y,
      maxRight = this.data[closest].y;

  for (var i = closest + 1, ii = this.data.length; i < ii; i++) {
    if (this.data[i].y + .05 > maxRight) {
      maxRight = this.data[i].y;
      highestRight = i;
    } else {
      break;
    }
  }

  for (var i = closest - 1; i >= 0; i--) {
    if (this.data[i].y + .05 > maxLeft) {
      maxLeft = this.data[i].y;
      highestLeft = i;
    } else {
      break;
    }
  }

  var p = this.data[highestLeft - closest > highestRight - closest ? highestRight : highestLeft];
  return new _Point__WEBPACK_IMPORTED_MODULE_2__["default"](p.x, p.y * 100);
};

/***/ }),

/***/ "./src/ChemDoodle/structures/VisualSpecifications.js":
/*!***********************************************************!*\
  !*** ./src/ChemDoodle/structures/VisualSpecifications.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return VisualSpecifications; });
/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ChemDoodle */ "./src/ChemDoodle/index.js");

function VisualSpecifications() {
  // canvas properties
  this.backgroundColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_backgroundColor"];
  this.scale = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_scale"];
  this.rotateAngle = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_rotateAngle"];
  this.bondLength_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bondLength_2D"];
  this.angstromsPerBondLength = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_angstromsPerBondLength"];
  this.lightDirection_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_lightDirection_3D"].slice(0);
  this.lightDiffuseColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_lightDiffuseColor_3D"];
  this.lightSpecularColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_lightSpecularColor_3D"];
  this.projectionPerspective_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_projectionPerspective_3D"];
  this.projectionPerspectiveVerticalFieldOfView_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_projectionPerspectiveVerticalFieldOfView_3D"];
  this.projectionOrthoWidth_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_projectionOrthoWidth_3D"];
  this.projectionWidthHeightRatio_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_projectionWidthHeightRatio_3D"];
  this.projectionFrontCulling_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_projectionFrontCulling_3D"];
  this.projectionBackCulling_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_projectionBackCulling_3D"];
  this.cullBackFace_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_cullBackFace_3D"];
  this.fog_mode_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_fog_mode_3D"];
  this.fog_color_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_fog_color_3D"];
  this.fog_start_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_fog_start_3D"];
  this.fog_end_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_fog_end_3D"];
  this.fog_density_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_fog_density_3D"];
  this.shadow_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_shadow_3D"];
  this.shadow_intensity_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_shadow_intensity_3D"];
  this.flat_color_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_flat_color_3D"];
  this.antialias_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_antialias_3D"];
  this.gammaCorrection_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_gammaCorrection_3D"];
  this.colorHover = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_colorHover"];
  this.colorSelect = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_colorSelect"];
  this.colorError = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_colorError"];
  this.colorPreview = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_colorPreview"]; // 3D shaders
  // ssao properties

  this.ssao_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_ssao_3D"];
  this.ssao_kernel_radius = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_ssao_kernel_radius"];
  this.ssao_kernel_samples = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_ssao_kernel_samples"];
  this.ssao_power = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_ssao_power"]; // outline properties

  this.outline_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_outline_3D"];
  this.outline_normal_threshold = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_outline_normal_threshold"];
  this.outline_depth_threshold = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_outline_depth_threshold"];
  this.outline_thickness = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_outline_thickness"]; // fxaa properties

  this.fxaa_edgeThreshold = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_fxaa_edgeThreshold"];
  this.fxaa_edgeThresholdMin = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_fxaa_edgeThresholdMin"];
  this.fxaa_searchSteps = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_fxaa_searchSteps"];
  this.fxaa_searchThreshold = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_fxaa_searchThreshold"];
  this.fxaa_subpixCap = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_fxaa_subpixCap"];
  this.fxaa_subpixTrim = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_fxaa_subpixTrim"]; // atom properties

  this.atoms_display = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_display"];
  this.atoms_color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_color"];
  this.atoms_font_size_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_font_size_2D"];
  this.atoms_font_families_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_font_families_2D"].slice(0);
  this.atoms_font_bold_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_font_bold_2D"];
  this.atoms_font_italic_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_font_italic_2D"];
  this.atoms_circles_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_circles_2D"];
  this.atoms_circleDiameter_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_circleDiameter_2D"];
  this.atoms_circleBorderWidth_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_circleBorderWidth_2D"];
  this.atoms_lonePairDistance_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_lonePairDistance_2D"];
  this.atoms_lonePairSpread_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_lonePairSpread_2D"];
  this.atoms_lonePairDiameter_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_lonePairDiameter_2D"];
  this.atoms_useJMOLColors = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_useJMOLColors"];
  this.atoms_usePYMOLColors = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_usePYMOLColors"];
  this.atoms_HBlack_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_HBlack_2D"];
  this.atoms_implicitHydrogens_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_implicitHydrogens_2D"];
  this.atoms_displayTerminalCarbonLabels_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_displayTerminalCarbonLabels_2D"];
  this.atoms_showHiddenCarbons_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_showHiddenCarbons_2D"];
  this.atoms_showAttributedCarbons_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_showAttributedCarbons_2D"];
  this.atoms_displayAllCarbonLabels_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_displayAllCarbonLabels_2D"];
  this.atoms_resolution_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_resolution_3D"];
  this.atoms_sphereDiameter_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_sphereDiameter_3D"];
  this.atoms_useVDWDiameters_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_useVDWDiameters_3D"];
  this.atoms_vdwMultiplier_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_vdwMultiplier_3D"];
  this.atoms_materialAmbientColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_materialAmbientColor_3D"];
  this.atoms_materialSpecularColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_materialSpecularColor_3D"];
  this.atoms_materialShininess_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_materialShininess_3D"];
  this.atoms_nonBondedAsStars_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_nonBondedAsStars_3D"];
  this.atoms_displayLabels_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_displayLabels_3D"]; // bond properties

  this.bonds_display = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_display"];
  this.bonds_color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_color"];
  this.bonds_width_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_width_2D"];
  this.bonds_useAbsoluteSaturationWidths_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_useAbsoluteSaturationWidths_2D"];
  this.bonds_saturationWidth_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_saturationWidth_2D"];
  this.bonds_saturationWidthAbs_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_saturationWidthAbs_2D"];
  this.bonds_ends_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_ends_2D"];
  this.bonds_splitColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_splitColor"];
  this.bonds_colorGradient = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_colorGradient"];
  this.bonds_saturationAngle_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_saturationAngle_2D"];
  this.bonds_symmetrical_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_symmetrical_2D"];
  this.bonds_clearOverlaps_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_clearOverlaps_2D"];
  this.bonds_overlapClearWidth_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_overlapClearWidth_2D"];
  this.bonds_atomLabelBuffer_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_atomLabelBuffer_2D"];
  this.bonds_wedgeThickness_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_wedgeThickness_2D"];
  this.bonds_wavyLength_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_wavyLength_2D"];
  this.bonds_hashWidth_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_hashWidth_2D"];
  this.bonds_hashSpacing_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_hashSpacing_2D"];
  this.bonds_dotSize_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_dotSize_2D"];
  this.bonds_lewisStyle_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_lewisStyle_2D"];
  this.bonds_showBondOrders_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_showBondOrders_3D"];
  this.bonds_resolution_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_resolution_3D"];
  this.bonds_renderAsLines_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_renderAsLines_3D"];
  this.bonds_cylinderDiameter_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_cylinderDiameter_3D"];
  this.bonds_pillHeight_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_pillHeight_3D"];
  this.bonds_pillLatitudeResolution_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_pillLatitudeResolution_3D"];
  this.bonds_pillLongitudeResolution_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_pillLongitudeResolution_3D"];
  this.bonds_pillSpacing_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_pillSpacing_3D"];
  this.bonds_pillDiameter_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_pillDiameter_3D"];
  this.bonds_materialAmbientColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_materialAmbientColor_3D"];
  this.bonds_materialSpecularColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_materialSpecularColor_3D"];
  this.bonds_materialShininess_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_bonds_materialShininess_3D"]; // macromolecular properties

  this.proteins_displayRibbon = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_displayRibbon"];
  this.proteins_displayBackbone = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_displayBackbone"];
  this.proteins_backboneThickness = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_backboneThickness"];
  this.proteins_backboneColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_backboneColor"];
  this.proteins_ribbonCartoonize = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_ribbonCartoonize"];
  this.proteins_residueColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_residueColor"];
  this.proteins_primaryColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_primaryColor"];
  this.proteins_secondaryColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_secondaryColor"];
  this.proteins_ribbonCartoonHelixPrimaryColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_ribbonCartoonHelixPrimaryColor"];
  this.proteins_ribbonCartoonHelixSecondaryColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_ribbonCartoonHelixSecondaryColor"];
  this.proteins_tubeColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_tubeColor"];
  this.proteins_tubeResolution_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_tubeResolution_3D"];
  this.proteins_displayPipePlank = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_displayPipePlank"];
  this.proteins_ribbonCartoonSheetColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_ribbonCartoonSheetColor"];
  this.proteins_ribbonThickness = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_ribbonThickness"];
  this.proteins_tubeThickness = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_tubeThickness"];
  this.proteins_plankSheetWidth = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_plankSheetWidth"];
  this.proteins_cylinderHelixDiameter = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_cylinderHelixDiameter"];
  this.proteins_verticalResolution = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_verticalResolution"];
  this.proteins_horizontalResolution = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_horizontalResolution"];
  this.proteins_materialAmbientColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_materialAmbientColor_3D"];
  this.proteins_materialSpecularColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_materialSpecularColor_3D"];
  this.proteins_materialShininess_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_proteins_materialShininess_3D"];
  this.macro_displayAtoms = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_macro_displayAtoms"];
  this.macro_displayBonds = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_macro_displayBonds"];
  this.macro_atomToLigandDistance = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_macro_atomToLigandDistance"];
  this.nucleics_display = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_nucleics_display"];
  this.nucleics_tubeColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_nucleics_tubeColor"];
  this.nucleics_baseColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_nucleics_baseColor"];
  this.nucleics_residueColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_nucleics_residueColor"];
  this.nucleics_tubeThickness = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_nucleics_tubeThickness"];
  this.nucleics_tubeResolution_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_nucleics_tubeResolution_3D"];
  this.nucleics_verticalResolution = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_nucleics_verticalResolution"];
  this.nucleics_materialAmbientColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_nucleics_materialAmbientColor_3D"];
  this.nucleics_materialSpecularColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_nucleics_materialSpecularColor_3D"];
  this.nucleics_materialShininess_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_nucleics_materialShininess_3D"];
  this.macro_showWater = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_macro_showWater"];
  this.macro_colorByChain = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_macro_colorByChain"];
  this.macro_rainbowColors = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_macro_rainbowColors"].slice(0); // surface properties

  this.surfaces_display = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_surfaces_display"];
  this.surfaces_alpha = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_surfaces_alpha"];
  this.surfaces_style = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_surfaces_style"];
  this.surfaces_color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_surfaces_color"];
  this.surfaces_materialAmbientColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_surfaces_materialAmbientColor_3D"];
  this.surfaces_materialSpecularColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_surfaces_materialSpecularColor_3D"];
  this.surfaces_materialShininess_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_surfaces_materialShininess_3D"]; // spectrum properties

  this.plots_color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_plots_color"];
  this.plots_width = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_plots_width"];
  this.plots_showIntegration = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_plots_showIntegration"];
  this.plots_integrationColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_plots_integrationColor"];
  this.plots_integrationLineWidth = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_plots_integrationLineWidth"];
  this.plots_showGrid = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_plots_showGrid"];
  this.plots_gridColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_plots_gridColor"];
  this.plots_gridLineWidth = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_plots_gridLineWidth"];
  this.plots_showYAxis = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_plots_showYAxis"];
  this.plots_flipXAxis = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_plots_flipXAxis"]; // shape properties

  this.text_font_size = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_text_font_size"];
  this.text_font_families = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_text_font_families"].slice(0);
  this.text_font_bold = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_text_font_bold"];
  this.text_font_italic = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_text_font_italic"];
  this.text_font_stroke_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_text_font_stroke_3D"];
  this.text_color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_text_color"];
  this.shapes_color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_shapes_color"];
  this.shapes_lineWidth = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_shapes_lineWidth"];
  this.shapes_pointSize = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_shapes_pointSize"];
  this.shapes_arrowLength_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_shapes_arrowLength_2D"];
  this.compass_display = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_compass_display"];
  this.compass_axisXColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_compass_axisXColor_3D"];
  this.compass_axisYColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_compass_axisYColor_3D"];
  this.compass_axisZColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_compass_axisZColor_3D"];
  this.compass_size_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_compass_size_3D"];
  this.compass_resolution_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_compass_resolution_3D"];
  this.compass_displayText_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_compass_displayText_3D"];
  this.compass_type_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_compass_type_3D"];
  this.measurement_update_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_measurement_update_3D"];
  this.measurement_angleBands_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_measurement_angleBands_3D"];
  this.measurement_displayText_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_measurement_displayText_3D"];
}
;
var _ = VisualSpecifications.prototype;

_.set3DRepresentation = function (representation) {
  this.atoms_display = true;
  this.bonds_display = true;
  this.bonds_color = '#777777';
  this.atoms_useVDWDiameters_3D = true;
  this.atoms_useJMOLColors = true;
  this.bonds_splitColor = true;
  this.bonds_showBondOrders_3D = true;
  this.bonds_renderAsLines_3D = false;

  if (representation === 'Ball and Stick') {
    this.atoms_vdwMultiplier_3D = .3;
    this.bonds_splitColor = false;
    this.bonds_cylinderDiameter_3D = .3;
    this.bonds_materialAmbientColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_materialAmbientColor_3D"];
    this.bonds_pillDiameter_3D = .15;
  } else if (representation === 'van der Waals Spheres') {
    this.bonds_display = false;
    this.atoms_vdwMultiplier_3D = 1;
  } else if (representation === 'Stick') {
    this.atoms_useVDWDiameters_3D = false;
    this.bonds_showBondOrders_3D = false;
    this.bonds_cylinderDiameter_3D = this.atoms_sphereDiameter_3D = .8;
    this.bonds_materialAmbientColor_3D = this.atoms_materialAmbientColor_3D;
  } else if (representation === 'Wireframe') {
    this.atoms_useVDWDiameters_3D = false;
    this.bonds_cylinderDiameter_3D = this.bonds_pillDiameter_3D = .05;
    this.atoms_sphereDiameter_3D = .15;
    this.bonds_materialAmbientColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__["default_atoms_materialAmbientColor_3D"];
  } else if (representation === 'Line') {
    this.atoms_display = false;
    this.bonds_renderAsLines_3D = true;
    this.bonds_width_2D = 1;
    this.bonds_cylinderDiameter_3D = .05;
  } else {
    alert('"' + representation + '" is not recognized. Use one of the following strings:\n\n' + '1. Ball and Stick\n' + '2. van der Waals Spheres\n' + '3. Stick\n' + '4. Wireframe\n' + '5. Line\n');
  }
};

_.copy = function () {
  var copy = JSON.parse(JSON.stringify(this));
  copy.set3DRepresentation = _.set3DRepresentation;
  return copy;
};

/***/ }),

/***/ "./src/ChemDoodle/structures/d2/index.js":
/*!***********************************************!*\
  !*** ./src/ChemDoodle/structures/d2/index.js ***!
  \***********************************************/
/*! exports provided: d2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d2", function() { return d2; });
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../math */ "./src/ChemDoodle/math/index.js");
/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../extensions */ "./src/ChemDoodle/extensions/index.js");
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib */ "./src/ChemDoodle/lib/index.js");
/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../structures */ "./src/ChemDoodle/structures/index.js");




var m = Math;
var d2 = {};

(function (undefined) {
  'use strict';

  d2._Shape = function () {};

  var _ = d2._Shape.prototype;

  _.drawDecorations = function (ctx, specs) {
    if (this.isHover) {
      var ps = this.getPoints();

      for (var i = 0, ii = ps.length; i < ii; i++) {
        var p = ps[i];
        this.drawAnchor(ctx, specs, p, p === this.hoverPoint);
      }
    }
  };

  _.getBounds = function () {
    var bounds = new _math__WEBPACK_IMPORTED_MODULE_0__["Bounds"]();
    var ps = this.getPoints();

    for (var i = 0, ii = ps.length; i < ii; i++) {
      var p = ps[i];
      bounds.expand(p.x, p.y);
    }

    return bounds;
  };

  _.drawAnchor = function (ctx, specs, p, hovered) {
    ctx.save();
    ctx.translate(p.x, p.y);
    ctx.rotate(m.PI / 4);
    ctx.scale(1 / specs.scale, 1 / specs.scale);
    var boxRadius = 4;
    var innerRadius = boxRadius / 2;
    ctx.beginPath();
    ctx.moveTo(-boxRadius, -boxRadius);
    ctx.lineTo(boxRadius, -boxRadius);
    ctx.lineTo(boxRadius, boxRadius);
    ctx.lineTo(-boxRadius, boxRadius);
    ctx.closePath();

    if (hovered) {
      ctx.fillStyle = specs.colorHover;
    } else {
      ctx.fillStyle = 'white';
    }

    ctx.fill();
    ctx.beginPath();
    ctx.moveTo(-boxRadius, -innerRadius);
    ctx.lineTo(-boxRadius, -boxRadius);
    ctx.lineTo(-innerRadius, -boxRadius);
    ctx.moveTo(innerRadius, -boxRadius);
    ctx.lineTo(boxRadius, -boxRadius);
    ctx.lineTo(boxRadius, -innerRadius);
    ctx.moveTo(boxRadius, innerRadius);
    ctx.lineTo(boxRadius, boxRadius);
    ctx.lineTo(innerRadius, boxRadius);
    ctx.moveTo(-innerRadius, boxRadius);
    ctx.lineTo(-boxRadius, boxRadius);
    ctx.lineTo(-boxRadius, innerRadius);
    ctx.moveTo(-boxRadius, -innerRadius);
    ctx.strokeStyle = 'rgba(0,0,0,.2)';
    ctx.lineWidth = 5;
    ctx.stroke();
    ctx.strokeStyle = 'blue';
    ctx.lineWidth = 1;
    ctx.stroke();
    ctx.restore();
  };
})();

(function (undefined) {
  'use strict';

  d2.AtomMapping = function (o1, o2) {
    // these need to be named 'o', not 'a' or the generic erase function won't work for them
    this.o1 = o1;
    this.o2 = o2;
    this.label = '0';
    this.error = false;
  };

  var _ = d2.AtomMapping.prototype = new d2._Shape();

  _.drawDecorations = function (ctx, specs) {
    if (this.isHover || this.isSelected) {
      ctx.strokeStyle = this.isHover ? specs.colorHover : specs.colorSelect;
      ctx.lineWidth = 1;
      ctx.beginPath();
      ctx.moveTo(this.o1.x, this.o1.y);
      ctx.lineTo(this.o2.x, this.o2.y);
      ctx.setLineDash([2]);
      ctx.stroke();
      ctx.setLineDash([]);
    }
  };

  _.draw = function (ctx, specs) {
    if (this.o1 && this.o2) {
      var sep = 14;
      this.x1 = this.o1.x + sep * m.cos(this.o1.angleOfLeastInterference);
      this.y1 = this.o1.y - sep * m.sin(this.o1.angleOfLeastInterference);
      this.x2 = this.o2.x + sep * m.cos(this.o2.angleOfLeastInterference);
      this.y2 = this.o2.y - sep * m.sin(this.o2.angleOfLeastInterference);
      ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_1__["getFontString"](specs.text_font_size, specs.text_font_families, specs.text_font_bold, specs.text_font_italic);
      var label = this.label;
      var w = ctx.measureText(label).width;

      if (this.isLassoed) {
        ctx.fillStyle = specs.colorHover;
        ctx.fillRect(this.x1 - w / 2 - 3, this.y1 - specs.text_font_size / 2 - 3, w + 6, specs.text_font_size + 6);
        ctx.fillRect(this.x2 - w / 2 - 3, this.y2 - specs.text_font_size / 2 - 3, w + 6, specs.text_font_size + 6);
      }

      var color = this.error ? specs.colorError : specs.shapes_color;

      if (this.isHover || this.isSelected) {
        color = this.isHover ? specs.colorHover : specs.colorSelect;
      }

      ctx.fillStyle = color;
      ctx.fillRect(this.x1 - w / 2 - 1, this.y1 - specs.text_font_size / 2 - 1, w + 2, specs.text_font_size + 2);
      ctx.fillRect(this.x2 - w / 2 - 1, this.y2 - specs.text_font_size / 2 - 1, w + 2, specs.text_font_size + 2);
      ctx.textAlign = 'center';
      ctx.textBaseline = 'middle';
      ctx.fillStyle = specs.backgroundColor;
      ctx.fillText(label, this.x1, this.y1);
      ctx.fillText(label, this.x2, this.y2);
    }
  };

  _.getPoints = function () {
    return [new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](this.x1, this.y1), new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](this.x2, this.y2)];
  };

  _.isOver = function (p, barrier) {
    if (this.x1) {
      return p.distance({
        x: this.x1,
        y: this.y1
      }) < barrier || p.distance({
        x: this.x2,
        y: this.y2
      }) < barrier;
    }

    return false;
  };
})();

(function (undefined) {
  'use strict';

  d2.Bracket = function (p1, p2) {
    this.p1 = p1 ? p1 : new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"]();
    this.p2 = p2 ? p2 : new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"]();
  };

  var _ = d2.Bracket.prototype = new d2._Shape();

  _.charge = 0;
  _.mult = 0;
  _.repeat = 0;

  _.draw = function (ctx, specs) {
    var minX = m.min(this.p1.x, this.p2.x);
    var maxX = m.max(this.p1.x, this.p2.x);
    var minY = m.min(this.p1.y, this.p2.y);
    var maxY = m.max(this.p1.y, this.p2.y);
    var h = maxY - minY;
    var lip = h / 10;
    ctx.beginPath();
    ctx.moveTo(minX + lip, minY);
    ctx.lineTo(minX, minY);
    ctx.lineTo(minX, maxY);
    ctx.lineTo(minX + lip, maxY);
    ctx.moveTo(maxX - lip, maxY);
    ctx.lineTo(maxX, maxY);
    ctx.lineTo(maxX, minY);
    ctx.lineTo(maxX - lip, minY);

    if (this.isLassoed) {
      var grd = ctx.createLinearGradient(this.p1.x, this.p1.y, this.p2.x, this.p2.y);
      grd.addColorStop(0, 'rgba(212, 99, 0, 0)');
      grd.addColorStop(0.5, 'rgba(212, 99, 0, 0.8)');
      grd.addColorStop(1, 'rgba(212, 99, 0, 0)');
      ctx.lineWidth = specs.shapes_lineWidth + 5;
      ctx.strokeStyle = grd;
      ctx.lineJoin = 'miter';
      ctx.lineCap = 'square';
      ctx.stroke();
    }

    ctx.strokeStyle = specs.shapes_color;
    ctx.lineWidth = specs.shapes_lineWidth;
    ctx.lineJoin = 'miter';
    ctx.lineCap = 'butt';
    ctx.stroke();

    if (this.charge !== 0) {
      ctx.fillStyle = specs.text_color;
      ctx.textAlign = 'left';
      ctx.textBaseline = 'alphabetic';
      ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_1__["getFontString"](specs.text_font_size, specs.text_font_families);
      var s = this.charge.toFixed(0);

      if (s === '1') {
        s = '+';
      } else if (s === '-1') {
        s = "\u2013";
      } else if (_extensions__WEBPACK_IMPORTED_MODULE_1__["stringStartsWith"](s, '-')) {
        s = s.substring(1) + "\u2013";
      } else {
        s += '+';
      }

      ctx.fillText(s, maxX + 5, minY + 5);
    }

    if (this.mult !== 0) {
      ctx.fillStyle = specs.text_color;
      ctx.textAlign = 'right';
      ctx.textBaseline = 'middle';
      ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_1__["getFontString"](specs.text_font_size, specs.text_font_families);
      ctx.fillText(this.mult.toFixed(0), minX - 5, minY + h / 2);
    }

    if (this.repeat !== 0) {
      ctx.fillStyle = specs.text_color;
      ctx.textAlign = 'left';
      ctx.textBaseline = 'top';
      ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_1__["getFontString"](specs.text_font_size, specs.text_font_families);
      var s = this.repeat.toFixed(0);
      ctx.fillText(s, maxX + 5, maxY - 5);
    }
  };

  _.getPoints = function () {
    return [this.p1, this.p2];
  };

  _.isOver = function (p, barrier) {
    return _math__WEBPACK_IMPORTED_MODULE_0__["isBetween"](p.x, this.p1.x, this.p2.x) && _math__WEBPACK_IMPORTED_MODULE_0__["isBetween"](p.y, this.p1.y, this.p2.y);
  };
})();

(function (undefined) {
  'use strict';

  d2.DynamicBracket = function (b1, b2) {
    this.b1 = b1;
    this.b2 = b2;
    this.n1 = 1;
    this.n2 = 4;
    this.contents = [];
    this.ps = [];
  };

  var _ = d2.DynamicBracket.prototype = new d2._Shape();

  _.drawDecorations = function (ctx, specs) {
    if (this.isHover) {
      for (var i = 0, ii = this.contents.length; i < ii; i++) {
        var a = this.contents[i];
        var grd = ctx.createRadialGradient(a.x - 1, a.y - 1, 0, a.x, a.y, 7);
        grd.addColorStop(0, 'rgba(212, 99, 0, 0)');
        grd.addColorStop(0.7, 'rgba(212, 99, 0, 0.8)');
        ctx.fillStyle = grd;
        ctx.beginPath();
        ctx.arc(a.x, a.y, 5, 0, m.PI * 2, false);
        ctx.fill();
      }
    }
  };

  var drawEnd = function drawEnd(ctx, specs, b, b2, contents) {
    var ps = [];
    var stretch = 10;
    var arm = 4;
    var a = contents.length > 0 ? contents.indexOf(b.a1) === -1 ? b.a2 : b.a1 : b.a1.distance(b2.getCenter()) < b.a2.distance(b2.getCenter()) ? b.a1 : b.a2;
    var angle = a.angle(b.getNeighbor(a));
    var perp = angle + m.PI / 2;
    var length = b.getLength() / (contents.length > 1 ? 4 : 2);
    var psx = a.x + length * m.cos(angle);
    var psy = a.y - length * m.sin(angle);
    var scos = stretch * m.cos(perp);
    var ssin = stretch * m.sin(perp);
    var p1x = psx + scos;
    var p1y = psy - ssin;
    var p2x = psx - scos;
    var p2y = psy + ssin;
    var acos = -arm * m.cos(angle);
    var asin = -arm * m.sin(angle);
    var p1ax = p1x + acos;
    var p1ay = p1y - asin;
    var p2ax = p2x + acos;
    var p2ay = p2y - asin;
    ctx.beginPath();
    ctx.moveTo(p1ax, p1ay);
    ctx.lineTo(p1x, p1y);
    ctx.lineTo(p2x, p2y);
    ctx.lineTo(p2ax, p2ay);
    ctx.stroke();
    ps.push(new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](p1x, p1y));
    ps.push(new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](p2x, p2y));
    return ps;
  };

  _.draw = function (ctx, specs) {
    if (this.b1 && this.b2) {
      var color = this.error ? specs.colorError : specs.shapes_color;

      if (this.isHover || this.isSelected) {
        color = this.isHover ? specs.colorHover : specs.colorSelect;
      }

      ctx.strokeStyle = color;
      ctx.fillStyle = ctx.strokeStyle;
      ctx.lineWidth = specs.shapes_lineWidth;
      ctx.lineJoin = 'miter';
      ctx.lineCap = 'butt';
      var ps1 = drawEnd(ctx, specs, this.b1, this.b2, this.contents);
      var ps2 = drawEnd(ctx, specs, this.b2, this.b1, this.contents);
      this.ps = ps1.concat(ps2);

      if (this.b1.getCenter().x > this.b2.getCenter().x) {
        if (this.ps[0].x > this.ps[1].x + 5) {
          this.textPos = this.ps[0];
        } else {
          this.textPos = this.ps[1];
        }
      } else {
        if (this.ps[2].x > this.ps[3].x + 5) {
          this.textPos = this.ps[2];
        } else {
          this.textPos = this.ps[3];
        }
      }

      if (!this.error && this.contents.length > 0) {
        ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_1__["getFontString"](specs.text_font_size, specs.text_font_families, specs.text_font_bold, specs.text_font_italic);
        ctx.fillStyle = this.isHover ? specs.colorHover : specs.text_color;
        ctx.textAlign = 'left';
        ctx.textBaseline = 'bottom';
        ctx.fillText(this.n1 + '-' + this.n2, this.textPos.x + 2, this.textPos.y + 2);
      }
    }
  };

  _.getPoints = function () {
    return this.ps;
  };

  _.isOver = function (p, barrier) {
    return false;
  };

  _.setContents = function (sketcher) {
    this.contents = [];
    var m1 = sketcher.getMoleculeByAtom(this.b1.a1);
    var m2 = sketcher.getMoleculeByAtom(this.b2.a1); // make sure both b1 and b2 are part of the same molecule

    if (m1 && m1 === m2) {
      // if either b1 or b2 is in a ring, then stop, as this is a violation
      // unless b1 and b2 are part of the same ring and are part of no other rings
      var c1 = 0;
      var c2 = 0;

      for (var i = 0, ii = m1.rings.length; i < ii; i++) {
        var r = m1.rings[i];

        for (var j = 0, jj = r.bonds.length; j < jj; j++) {
          var rb = r.bonds[j];

          if (rb === this.b1) {
            c1++;
          } else if (rb === this.b2) {
            c2++;
          }
        }
      }

      var sameSingleRing = c1 === 1 && c2 === 1 && this.b1.ring === this.b2.ring;
      this.contents.flippable = sameSingleRing;

      if (this.b1.ring === undefined && this.b2.ring === undefined || sameSingleRing) {
        for (var i = 0, ii = m1.atoms.length; i < ii; i++) {
          var reached1 = false;
          var reached2 = false;
          var reachedInner = false;

          for (var j = 0, jj = m1.bonds.length; j < jj; j++) {
            m1.bonds[j].visited = false;
          }

          var q = new _structures__WEBPACK_IMPORTED_MODULE_3__["Queue"]();
          var a = m1.atoms[i];
          q.enqueue(a);

          while (!q.isEmpty() && !(reached1 && reached2)) {
            var check = q.dequeue();

            if (sameSingleRing && (!this.flip && check === this.b1.a1 || this.flip && check === this.b1.a2)) {
              reachedInner = true;
            }

            for (var j = 0, jj = m1.bonds.length; j < jj; j++) {
              var b = m1.bonds[j];

              if (b.a1 === check || b.a2 === check) {
                if (b === this.b1) {
                  reached1 = true;
                } else if (b === this.b2) {
                  reached2 = true;
                } else if (!b.visited) {
                  b.visited = true;
                  q.enqueue(b.getNeighbor(check));
                }
              }
            }
          }

          if (reached1 && reached2 && (!sameSingleRing || reachedInner)) {
            this.contents.push(a);
          }
        }
      }
    }
  };
})();

(function (undefined) {
  'use strict';

  d2.Line = function (p1, p2) {
    this.p1 = p1 ? p1 : new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"]();
    this.p2 = p2 ? p2 : new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"]();
  };

  d2.Line.ARROW_SYNTHETIC = 'synthetic';
  d2.Line.ARROW_RETROSYNTHETIC = 'retrosynthetic';
  d2.Line.ARROW_RESONANCE = 'resonance';
  d2.Line.ARROW_EQUILIBRIUM = 'equilibrium';

  var _ = d2.Line.prototype = new d2._Shape();

  _.arrowType = undefined;
  _.topText = undefined;
  _.bottomText = undefined;

  _.draw = function (ctx, specs) {
    if (this.isLassoed) {
      var grd = ctx.createLinearGradient(this.p1.x, this.p1.y, this.p2.x, this.p2.y);
      grd.addColorStop(0, 'rgba(212, 99, 0, 0)');
      grd.addColorStop(0.5, 'rgba(212, 99, 0, 0.8)');
      grd.addColorStop(1, 'rgba(212, 99, 0, 0)');
      var useDist = 2.5;
      var perpendicular = this.p1.angle(this.p2) + m.PI / 2;
      var mcosp = m.cos(perpendicular);
      var msinp = m.sin(perpendicular);
      var cx1 = this.p1.x - mcosp * useDist;
      var cy1 = this.p1.y + msinp * useDist;
      var cx2 = this.p1.x + mcosp * useDist;
      var cy2 = this.p1.y - msinp * useDist;
      var cx3 = this.p2.x + mcosp * useDist;
      var cy3 = this.p2.y - msinp * useDist;
      var cx4 = this.p2.x - mcosp * useDist;
      var cy4 = this.p2.y + msinp * useDist;
      ctx.fillStyle = grd;
      ctx.beginPath();
      ctx.moveTo(cx1, cy1);
      ctx.lineTo(cx2, cy2);
      ctx.lineTo(cx3, cy3);
      ctx.lineTo(cx4, cy4);
      ctx.closePath();
      ctx.fill();
    }

    ctx.strokeStyle = specs.shapes_color;
    ctx.fillStyle = specs.shapes_color;
    ctx.lineWidth = specs.shapes_lineWidth;
    ctx.lineJoin = 'miter';
    ctx.lineCap = 'butt';

    if (this.p1.x !== this.p2.x || this.p1.y !== this.p2.y) {
      // only render if the points are different, otherwise this will
      // cause fill overflows
      if (this.arrowType === d2.Line.ARROW_RETROSYNTHETIC) {
        var r2 = m.sqrt(2) * 2;
        var useDist = specs.shapes_arrowLength_2D / r2;
        var angle = this.p1.angle(this.p2);
        var perpendicular = angle + m.PI / 2;
        var retract = specs.shapes_arrowLength_2D / r2;
        var mcosa = m.cos(angle);
        var msina = m.sin(angle);
        var mcosp = m.cos(perpendicular);
        var msinp = m.sin(perpendicular);
        var cx1 = this.p1.x - mcosp * useDist;
        var cy1 = this.p1.y + msinp * useDist;
        var cx2 = this.p1.x + mcosp * useDist;
        var cy2 = this.p1.y - msinp * useDist;
        var cx3 = this.p2.x + mcosp * useDist - mcosa * retract;
        var cy3 = this.p2.y - msinp * useDist + msina * retract;
        var cx4 = this.p2.x - mcosp * useDist - mcosa * retract;
        var cy4 = this.p2.y + msinp * useDist + msina * retract;
        var ax1 = this.p2.x + mcosp * useDist * 2 - mcosa * retract * 2;
        var ay1 = this.p2.y - msinp * useDist * 2 + msina * retract * 2;
        var ax2 = this.p2.x - mcosp * useDist * 2 - mcosa * retract * 2;
        var ay2 = this.p2.y + msinp * useDist * 2 + msina * retract * 2;
        ctx.beginPath();
        ctx.moveTo(cx2, cy2);
        ctx.lineTo(cx3, cy3);
        ctx.moveTo(ax1, ay1);
        ctx.lineTo(this.p2.x, this.p2.y);
        ctx.lineTo(ax2, ay2);
        ctx.moveTo(cx4, cy4);
        ctx.lineTo(cx1, cy1);
        ctx.stroke();
      } else if (this.arrowType === d2.Line.ARROW_EQUILIBRIUM) {
        var r2 = m.sqrt(2) * 2;
        var useDist = specs.shapes_arrowLength_2D / r2 / 2;
        var angle = this.p1.angle(this.p2);
        var perpendicular = angle + m.PI / 2;
        var retract = specs.shapes_arrowLength_2D * 2 / m.sqrt(3);
        var mcosa = m.cos(angle);
        var msina = m.sin(angle);
        var mcosp = m.cos(perpendicular);
        var msinp = m.sin(perpendicular);
        var cx1 = this.p1.x - mcosp * useDist;
        var cy1 = this.p1.y + msinp * useDist;
        var cx2 = this.p1.x + mcosp * useDist;
        var cy2 = this.p1.y - msinp * useDist;
        var cx3 = this.p2.x + mcosp * useDist;
        var cy3 = this.p2.y - msinp * useDist;
        var cx4 = this.p2.x - mcosp * useDist;
        var cy4 = this.p2.y + msinp * useDist;
        ctx.beginPath();
        ctx.moveTo(cx2, cy2);
        ctx.lineTo(cx3, cy3);
        ctx.moveTo(cx4, cy4);
        ctx.lineTo(cx1, cy1);
        ctx.stroke(); // right arrow

        var rx1 = cx3 - mcosa * retract * .8;
        var ry1 = cy3 + msina * retract * .8;
        var ax1 = cx3 + mcosp * specs.shapes_arrowLength_2D / 3 - mcosa * retract;
        var ay1 = cy3 - msinp * specs.shapes_arrowLength_2D / 3 + msina * retract;
        ctx.beginPath();
        ctx.moveTo(cx3, cy3);
        ctx.lineTo(ax1, ay1);
        ctx.lineTo(rx1, ry1);
        ctx.closePath();
        ctx.fill();
        ctx.stroke(); // left arrow

        rx1 = cx1 + mcosa * retract * .8;
        ry1 = cy1 - msina * retract * .8;
        ax1 = cx1 - mcosp * specs.shapes_arrowLength_2D / 3 + mcosa * retract;
        ay1 = cy1 + msinp * specs.shapes_arrowLength_2D / 3 - msina * retract;
        ctx.beginPath();
        ctx.moveTo(cx1, cy1);
        ctx.lineTo(ax1, ay1);
        ctx.lineTo(rx1, ry1);
        ctx.closePath();
        ctx.fill();
        ctx.stroke();
      } else if (this.arrowType === d2.Line.ARROW_SYNTHETIC) {
        var angle = this.p1.angle(this.p2);
        var perpendicular = angle + m.PI / 2;
        var retract = specs.shapes_arrowLength_2D * 2 / m.sqrt(3);
        var mcosa = m.cos(angle);
        var msina = m.sin(angle);
        var mcosp = m.cos(perpendicular);
        var msinp = m.sin(perpendicular);
        ctx.beginPath();
        ctx.moveTo(this.p1.x, this.p1.y);
        ctx.lineTo(this.p2.x - mcosa * retract / 2, this.p2.y + msina * retract / 2);
        ctx.stroke();
        var rx1 = this.p2.x - mcosa * retract * .8;
        var ry1 = this.p2.y + msina * retract * .8;
        var ax1 = this.p2.x + mcosp * specs.shapes_arrowLength_2D / 3 - mcosa * retract;
        var ay1 = this.p2.y - msinp * specs.shapes_arrowLength_2D / 3 + msina * retract;
        var ax2 = this.p2.x - mcosp * specs.shapes_arrowLength_2D / 3 - mcosa * retract;
        var ay2 = this.p2.y + msinp * specs.shapes_arrowLength_2D / 3 + msina * retract;
        ctx.beginPath();
        ctx.moveTo(this.p2.x, this.p2.y);
        ctx.lineTo(ax2, ay2);
        ctx.lineTo(rx1, ry1);
        ctx.lineTo(ax1, ay1);
        ctx.closePath();
        ctx.fill();
        ctx.stroke();
      } else if (this.arrowType === d2.Line.ARROW_RESONANCE) {
        var angle = this.p1.angle(this.p2);
        var perpendicular = angle + m.PI / 2;
        var retract = specs.shapes_arrowLength_2D * 2 / m.sqrt(3);
        var mcosa = m.cos(angle);
        var msina = m.sin(angle);
        var mcosp = m.cos(perpendicular);
        var msinp = m.sin(perpendicular);
        ctx.beginPath();
        ctx.moveTo(this.p1.x + mcosa * retract / 2, this.p1.y - msina * retract / 2);
        ctx.lineTo(this.p2.x - mcosa * retract / 2, this.p2.y + msina * retract / 2);
        ctx.stroke(); // right arrow

        var rx1 = this.p2.x - mcosa * retract * .8;
        var ry1 = this.p2.y + msina * retract * .8;
        var ax1 = this.p2.x + mcosp * specs.shapes_arrowLength_2D / 3 - mcosa * retract;
        var ay1 = this.p2.y - msinp * specs.shapes_arrowLength_2D / 3 + msina * retract;
        var ax2 = this.p2.x - mcosp * specs.shapes_arrowLength_2D / 3 - mcosa * retract;
        var ay2 = this.p2.y + msinp * specs.shapes_arrowLength_2D / 3 + msina * retract;
        ctx.beginPath();
        ctx.moveTo(this.p2.x, this.p2.y);
        ctx.lineTo(ax2, ay2);
        ctx.lineTo(rx1, ry1);
        ctx.lineTo(ax1, ay1);
        ctx.closePath();
        ctx.fill();
        ctx.stroke(); // left arrow

        rx1 = this.p1.x + mcosa * retract * .8;
        ry1 = this.p1.y - msina * retract * .8;
        ax1 = this.p1.x - mcosp * specs.shapes_arrowLength_2D / 3 + mcosa * retract;
        ay1 = this.p1.y + msinp * specs.shapes_arrowLength_2D / 3 - msina * retract;
        ax2 = this.p1.x + mcosp * specs.shapes_arrowLength_2D / 3 + mcosa * retract;
        ay2 = this.p1.y - msinp * specs.shapes_arrowLength_2D / 3 - msina * retract;
        ctx.beginPath();
        ctx.moveTo(this.p1.x, this.p1.y);
        ctx.lineTo(ax2, ay2);
        ctx.lineTo(rx1, ry1);
        ctx.lineTo(ax1, ay1);
        ctx.closePath();
        ctx.fill();
        ctx.stroke();
      } else {
        ctx.beginPath();
        ctx.moveTo(this.p1.x, this.p1.y);
        ctx.lineTo(this.p2.x, this.p2.y);
        ctx.stroke();
      }

      if (this.topText || this.bottomText) {
        ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_1__["getFontString"](specs.text_font_size, specs.text_font_families, specs.text_font_bold, specs.text_font_italic);
        ctx.fillStyle = specs.text_color;
      }

      if (this.topText) {
        ctx.textAlign = 'center';
        ctx.textBaseline = 'bottom';
        ctx.fillText(this.topText, (this.p1.x + this.p2.x) / 2, this.p1.y - 5);
      }

      if (this.bottomText) {
        ctx.textAlign = 'center';
        ctx.textBaseline = 'top';
        ctx.fillText(this.bottomText, (this.p1.x + this.p2.x) / 2, this.p1.y + 5);
      }
    }
  };

  _.getPoints = function () {
    return [this.p1, this.p2];
  };

  _.isOver = function (p, barrier) {
    var dist = _math__WEBPACK_IMPORTED_MODULE_0__["distanceFromPointToLineInclusive"](p, this.p1, this.p2);
    return dist !== -1 && dist < barrier;
  };
})();

(function (undefined) {
  'use strict';

  var getPossibleAngles = function getPossibleAngles(o) {
    var as = [];

    if (o instanceof _structures__WEBPACK_IMPORTED_MODULE_3__["Atom"]) {
      if (o.bondNumber === 0) {
        as.push(m.PI);
      } else if (o.angles) {
        if (o.angles.length === 1) {
          as.push(o.angles[0] + m.PI);
        } else {
          for (var i = 1, ii = o.angles.length; i < ii; i++) {
            as.push(o.angles[i - 1] + (o.angles[i] - o.angles[i - 1]) / 2);
          }

          var firstIncreased = o.angles[0] + m.PI * 2;
          var last = o.angles[o.angles.length - 1];
          as.push(last + (firstIncreased - last) / 2);
        }

        if (o.largestAngle > m.PI) {
          // always use angle of least interfearence if it is greater
          // than 120
          as = [o.angleOfLeastInterference];
        }

        if (o.bonds) {
          // point up towards a carbonyl
          for (var i = 0, ii = o.bonds.length; i < ii; i++) {
            var b = o.bonds[i];

            if (b.bondOrder === 2) {
              var n = b.getNeighbor(o);

              if (n.label === 'O') {
                as = [n.angle(o)];
                break;
              }
            }
          }
        }
      }
    } else {
      var angle = o.a1.angle(o.a2);
      as.push(angle + m.PI / 2);
      as.push(angle + 3 * m.PI / 2);
    }

    for (var i = 0, ii = as.length; i < ii; i++) {
      while (as[i] > m.PI * 2) {
        as[i] -= m.PI * 2;
      }

      while (as[i] < 0) {
        as[i] += m.PI * 2;
      }
    }

    return as;
  };

  var getPullBack = function getPullBack(o, specs) {
    var pullback = 3;

    if (o instanceof _structures__WEBPACK_IMPORTED_MODULE_3__["Atom"]) {
      if (o.isLabelVisible(specs)) {
        pullback = 8;
      }

      if (o.charge !== 0 || o.numRadical !== 0 || o.numLonePair !== 0) {
        pullback = 13;
      }
    } else if (o instanceof _structures__WEBPACK_IMPORTED_MODULE_3__["Point"]) {
      // this is the midpoint of a bond forming pusher
      pullback = 0;
    } else {
      if (o.bondOrder > 1) {
        pullback = 5;
      }
    }

    return pullback;
  };

  var drawPusher = function drawPusher(ctx, specs, o1, o2, p1, c1, c2, p2, numElectron, caches) {
    var angle1 = c1.angle(p1);
    var angle2 = c2.angle(p2);
    var mcosa = m.cos(angle1);
    var msina = m.sin(angle1); // pull back from start

    var pullBack = getPullBack(o1, specs);
    p1.x -= mcosa * pullBack;
    p1.y += msina * pullBack; // arrow

    var perpendicular = angle2 + m.PI / 2;
    var retract = specs.shapes_arrowLength_2D * 2 / m.sqrt(3);
    var mcosa = m.cos(angle2);
    var msina = m.sin(angle2);
    var mcosp = m.cos(perpendicular);
    var msinp = m.sin(perpendicular);
    p2.x -= mcosa * 5;
    p2.y += msina * 5;
    var nap = new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](p2.x, p2.y); // pull back from end

    pullBack = getPullBack(o2, specs) / 3;
    nap.x -= mcosa * pullBack;
    nap.y += msina * pullBack;
    p2.x -= mcosa * (retract * 0.8 + pullBack);
    p2.y += msina * (retract * 0.8 + pullBack);
    var rx1 = nap.x - mcosa * retract * 0.8;
    var ry1 = nap.y + msina * retract * 0.8;
    var a1 = new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](nap.x + mcosp * specs.shapes_arrowLength_2D / 3 - mcosa * retract, nap.y - msinp * specs.shapes_arrowLength_2D / 3 + msina * retract);
    var a2 = new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](nap.x - mcosp * specs.shapes_arrowLength_2D / 3 - mcosa * retract, nap.y + msinp * specs.shapes_arrowLength_2D / 3 + msina * retract);
    var include1 = true,
        include2 = true;

    if (numElectron === 1) {
      if (a1.distance(c1) > a2.distance(c1)) {
        include2 = false;
      } else {
        include1 = false;
      }
    }

    ctx.beginPath();
    ctx.moveTo(nap.x, nap.y);

    if (include2) {
      ctx.lineTo(a2.x, a2.y);
    }

    ctx.lineTo(rx1, ry1);

    if (include1) {
      ctx.lineTo(a1.x, a1.y);
    }

    ctx.closePath();
    ctx.fill();
    ctx.stroke(); // bezier

    ctx.beginPath();
    ctx.moveTo(p1.x, p1.y);
    ctx.bezierCurveTo(c1.x, c1.y, c2.x, c2.y, p2.x, p2.y);
    ctx.stroke();
    caches.push([p1, c1, c2, p2]);
  };

  d2.Pusher = function (o1, o2, numElectron) {
    this.o1 = o1;
    this.o2 = o2;
    this.numElectron = numElectron ? numElectron : 1;
  };

  var _ = d2.Pusher.prototype = new d2._Shape();

  _.drawDecorations = function (ctx, specs) {
    if (this.isHover) {
      var p1 = this.o1 instanceof _structures__WEBPACK_IMPORTED_MODULE_3__["Atom"] ? new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](this.o1.x, this.o1.y) : this.o1.getCenter();
      var p2 = this.o2 instanceof _structures__WEBPACK_IMPORTED_MODULE_3__["Atom"] ? new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](this.o2.x, this.o2.y) : this.o2.getCenter();
      var ps = [p1, p2];

      for (var i = 0, ii = ps.length; i < ii; i++) {
        var p = ps[i];
        this.drawAnchor(ctx, specs, p, p === this.hoverPoint);
      }
    }
  };

  _.draw = function (ctx, specs) {
    if (this.o1 && this.o2) {
      ctx.strokeStyle = specs.shapes_color;
      ctx.fillStyle = specs.shapes_color;
      ctx.lineWidth = specs.shapes_lineWidth;
      ctx.lineJoin = 'miter';
      ctx.lineCap = 'butt';
      var p1 = this.o1 instanceof _structures__WEBPACK_IMPORTED_MODULE_3__["Atom"] ? new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](this.o1.x, this.o1.y) : this.o1.getCenter();
      var p2 = this.o2 instanceof _structures__WEBPACK_IMPORTED_MODULE_3__["Atom"] ? new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](this.o2.x, this.o2.y) : this.o2.getCenter();
      var controlDist = 35;
      var as1 = getPossibleAngles(this.o1);
      var as2 = getPossibleAngles(this.o2);
      var c1, c2;
      var minDif = Infinity;

      for (var i = 0, ii = as1.length; i < ii; i++) {
        for (var j = 0, jj = as2.length; j < jj; j++) {
          var c1c = new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](p1.x + controlDist * m.cos(as1[i]), p1.y - controlDist * m.sin(as1[i]));
          var c2c = new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](p2.x + controlDist * m.cos(as2[j]), p2.y - controlDist * m.sin(as2[j]));
          var dif = c1c.distance(c2c);

          if (dif < minDif) {
            minDif = dif;
            c1 = c1c;
            c2 = c2c;
          }
        }
      }

      this.caches = [];

      if (this.numElectron === -1) {
        var dist = p1.distance(p2) / 2;
        var angle = p1.angle(p2);
        var perp = angle + m.PI / 2;
        var mcosa = m.cos(angle);
        var msina = m.sin(angle);
        var m1 = new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](p1.x + (dist - 1) * mcosa, p1.y - (dist - 1) * msina);
        var cm1 = new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](m1.x + m.cos(perp + m.PI / 6) * controlDist, m1.y - m.sin(perp + m.PI / 6) * controlDist);
        var m2 = new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](p1.x + (dist + 1) * mcosa, p1.y - (dist + 1) * msina);
        var cm2 = new _structures__WEBPACK_IMPORTED_MODULE_3__["Point"](m2.x + m.cos(perp - m.PI / 6) * controlDist, m2.y - m.sin(perp - m.PI / 6) * controlDist);
        drawPusher(ctx, specs, this.o1, m1, p1, c1, cm1, m1, 1, this.caches);
        drawPusher(ctx, specs, this.o2, m2, p2, c2, cm2, m2, 1, this.caches);
      } else {
        if (_math__WEBPACK_IMPORTED_MODULE_0__["intersectLines"](p1.x, p1.y, c1.x, c1.y, p2.x, p2.y, c2.x, c2.y)) {
          var tmp = c1;
          c1 = c2;
          c2 = tmp;
        } // try to clean up problems, like loops


        var angle1 = c1.angle(p1);
        var angle2 = c2.angle(p2);
        var angleDif = m.max(angle1, angle2) - m.min(angle1, angle2);

        if (m.abs(angleDif - m.PI) < .001 && this.o1.molCenter === this.o2.molCenter) {
          // in the case where the control tangents are parallel
          angle1 += m.PI / 2;
          angle2 -= m.PI / 2;
          c1.x = p1.x + controlDist * m.cos(angle1 + m.PI);
          c1.y = p1.y - controlDist * m.sin(angle1 + m.PI);
          c2.x = p2.x + controlDist * m.cos(angle2 + m.PI);
          c2.y = p2.y - controlDist * m.sin(angle2 + m.PI);
        }

        drawPusher(ctx, specs, this.o1, this.o2, p1, c1, c2, p2, this.numElectron, this.caches);
      }
    }
  };

  _.getPoints = function () {
    return [];
  };

  _.isOver = function (p, barrier) {
    for (var i = 0, ii = this.caches.length; i < ii; i++) {
      var r = _lib__WEBPACK_IMPORTED_MODULE_2__["jsBezier"].distanceFromCurve(p, this.caches[i]);

      if (r.distance < barrier) {
        return true;
      }
    }

    return false;
  };
})();

(function (undefined) {
  'use strict';

  var BOND = new _structures__WEBPACK_IMPORTED_MODULE_3__["Bond"]();

  d2.VAP = function (x, y) {
    this.asterisk = new _structures__WEBPACK_IMPORTED_MODULE_3__["Atom"]('O', x, y);
    this.substituent;
    this.bondType = 1;
    this.attachments = [];
  };

  var _ = d2.VAP.prototype = new d2._Shape();

  _.drawDecorations = function (ctx, specs) {
    if (this.isHover || this.isSelected) {
      ctx.strokeStyle = this.isHover ? specs.colorHover : specs.colorSelect;
      ctx.lineWidth = 1.2;
      var radius = 7;

      if (this.hoverBond) {
        var pi2 = 2 * m.PI;
        var angle = (this.asterisk.angleForStupidCanvasArcs(this.hoverBond) + m.PI / 2) % pi2;
        ctx.strokeStyle = this.isHover ? specs.colorHover : specs.colorSelect;
        ctx.beginPath();
        var angleTo = (angle + m.PI) % pi2;
        angleTo = angleTo % (m.PI * 2);
        ctx.arc(this.asterisk.x, this.asterisk.y, radius, angle, angleTo, false);
        ctx.stroke();
        ctx.beginPath();
        angle += m.PI;
        angleTo = (angle + m.PI) % pi2;
        ctx.arc(this.hoverBond.x, this.hoverBond.y, radius, angle, angleTo, false);
        ctx.stroke();
      } else {
        ctx.beginPath();
        ctx.arc(this.asterisk.x, this.asterisk.y, radius, 0, m.PI * 2, false);
        ctx.stroke();
      }
    }
  };

  _.draw = function (ctx, specs) {
    // asterisk
    ctx.strokeStyle = this.error ? specs.colorError : specs.shapes_color;
    ctx.lineWidth = 1;
    var length = 4;
    var sqrt3 = m.sqrt(3) / 2;
    ctx.beginPath();
    ctx.moveTo(this.asterisk.x, this.asterisk.y - length);
    ctx.lineTo(this.asterisk.x, this.asterisk.y + length);
    ctx.moveTo(this.asterisk.x - sqrt3 * length, this.asterisk.y - length / 2);
    ctx.lineTo(this.asterisk.x + sqrt3 * length, this.asterisk.y + length / 2);
    ctx.moveTo(this.asterisk.x - sqrt3 * length, this.asterisk.y + length / 2);
    ctx.lineTo(this.asterisk.x + sqrt3 * length, this.asterisk.y - length / 2);
    ctx.stroke();
    this.asterisk.textBounds = [];
    this.asterisk.textBounds.push({
      x: this.asterisk.x - length,
      y: this.asterisk.y - length,
      w: length * 2,
      h: length * 2
    });
    var bcsave = specs.bonds_color;

    if (this.error) {
      specs.bonds_color = specs.colorError;
    }

    BOND.a1 = this.asterisk; // substituent bond

    if (this.substituent) {
      BOND.a2 = this.substituent;
      BOND.bondOrder = this.bondType;
      BOND.draw(ctx, specs);
    } // attachment bonds


    BOND.bondOrder = 0;

    if (!this.error) {
      specs.bonds_color = specs.shapes_color;
    }

    for (var i = 0, ii = this.attachments.length; i < ii; i++) {
      BOND.a2 = this.attachments[i];
      BOND.draw(ctx, specs);
    }

    specs.bonds_color = bcsave;
  };

  _.getPoints = function () {
    return [this.asterisk];
  };

  _.isOver = function (p, barrier) {
    return false;
  };
})();

/***/ }),

/***/ "./src/ChemDoodle/structures/d3/index.js":
/*!***********************************************!*\
  !*** ./src/ChemDoodle/structures/d3/index.js ***!
  \***********************************************/
/*! exports provided: d3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d3", function() { return d3; });
/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Point */ "./src/ChemDoodle/structures/Point.js");
/* harmony import */ var _Atom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Atom */ "./src/ChemDoodle/structures/Atom.js");
/* harmony import */ var _Residue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Residue */ "./src/ChemDoodle/structures/Residue.js");
/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../ChemDoodle */ "./src/ChemDoodle/index.js");
/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../extensions */ "./src/ChemDoodle/extensions/index.js");
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../math */ "./src/ChemDoodle/math/index.js");
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib */ "./src/ChemDoodle/lib/index.js");







var m = Math;
var d3 = {};

(function (d3, m, undefined) {
  'use strict';

  d3._Mesh = function () {};

  var _ = d3._Mesh.prototype;

  _.storeData = function (positionData, normalData, indexData) {
    this.positionData = positionData;
    this.normalData = normalData;
    this.indexData = indexData;
  };

  _.setupBuffers = function (gl) {
    this.vertexPositionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexPositionBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.positionData), gl.STATIC_DRAW);
    this.vertexPositionBuffer.itemSize = 3;
    this.vertexPositionBuffer.numItems = this.positionData.length / 3;
    this.vertexNormalBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexNormalBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.normalData), gl.STATIC_DRAW);
    this.vertexNormalBuffer.itemSize = 3;
    this.vertexNormalBuffer.numItems = this.normalData.length / 3;

    if (this.indexData) {
      this.vertexIndexBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.vertexIndexBuffer);
      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(this.indexData), gl.STATIC_DRAW);
      this.vertexIndexBuffer.itemSize = 1;
      this.vertexIndexBuffer.numItems = this.indexData.length;
    }

    if (this.partitions) {
      for (var i = 0, ii = this.partitions.length; i < ii; i++) {
        var p = this.partitions[i];
        var buffers = this.generateBuffers(gl, p.positionData, p.normalData, p.indexData);
        p.vertexPositionBuffer = buffers[0];
        p.vertexNormalBuffer = buffers[1];
        p.vertexIndexBuffer = buffers[2];
      }
    }
  };

  _.generateBuffers = function (gl, positionData, normalData, indexData) {
    var vertexPositionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positionData), gl.STATIC_DRAW);
    vertexPositionBuffer.itemSize = 3;
    vertexPositionBuffer.numItems = positionData.length / 3;
    var vertexNormalBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexNormalBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normalData), gl.STATIC_DRAW);
    vertexNormalBuffer.itemSize = 3;
    vertexNormalBuffer.numItems = normalData.length / 3;
    var vertexIndexBuffer;

    if (indexData) {
      vertexIndexBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffer);
      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STATIC_DRAW);
      vertexIndexBuffer.itemSize = 1;
      vertexIndexBuffer.numItems = indexData.length;
    }

    return [vertexPositionBuffer, vertexNormalBuffer, vertexIndexBuffer];
  };

  _.bindBuffers = function (gl) {
    if (!this.vertexPositionBuffer) {
      this.setupBuffers(gl);
    } // positions


    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexPositionBuffer);
    gl.vertexAttribPointer(gl.shader.vertexPositionAttribute, this.vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0); // normals

    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexNormalBuffer);
    gl.vertexAttribPointer(gl.shader.vertexNormalAttribute, this.vertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0);

    if (this.vertexIndexBuffer) {
      // indexes
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.vertexIndexBuffer);
    }
  };
})(d3, m);

(function (d3, undefined) {
  'use strict';

  d3._Measurement = function () {};

  var _ = d3._Measurement.prototype = new d3._Mesh();

  _.render = function (gl, specs) {
    gl.shader.setMatrixUniforms(gl); // setting the vertex position buffer to undefined resets the buffers, so this shape can be dynamically updated with the molecule

    if (specs.measurement_update_3D) {
      this.vertexPositionBuffer = undefined;
      this.text = undefined;
    }

    if (!this.vertexPositionBuffer) {
      this.calculateData(specs);
    }

    this.bindBuffers(gl); // colors

    gl.material.setDiffuseColor(gl, specs.shapes_color);
    gl.lineWidth(specs.shapes_lineWidth); // render

    gl.drawElements(gl.LINES, this.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
  };

  _.renderText = function (gl, specs) {
    gl.shader.setMatrixUniforms(gl); // render the text

    if (!this.text) {
      this.text = this.getText(specs);
    }

    var vertexData = {
      position: [],
      texCoord: [],
      translation: []
    };
    gl.textImage.pushVertexData(this.text.value, this.text.pos, 1, vertexData);
    gl.textMesh.storeData(gl, vertexData.position, vertexData.texCoord, vertexData.translation);
    gl.textImage.useTexture(gl);
    gl.textMesh.render(gl);
  };
})(d3);

(function (ELEMENT, extensions, d3, math, m, m4, v3, undefined) {
  'use strict';

  d3.Angle = function (a1, a2, a3) {
    this.a1 = a1;
    this.a2 = a2;
    this.a3 = a3;
  };

  var _ = d3.Angle.prototype = new d3._Measurement();

  _.calculateData = function (specs) {
    var positionData = [];
    var normalData = [];
    var indexData = [];
    var dist1 = this.a2.distance3D(this.a1);
    var dist2 = this.a2.distance3D(this.a3);
    this.distUse = m.min(dist1, dist2) / 2; // data for the angle

    this.vec1 = v3.normalize([this.a1.x - this.a2.x, this.a1.y - this.a2.y, this.a1.z - this.a2.z]);
    this.vec2 = v3.normalize([this.a3.x - this.a2.x, this.a3.y - this.a2.y, this.a3.z - this.a2.z]);
    this.angle = extensions.vec3AngleFrom(this.vec1, this.vec2);
    var axis = v3.normalize(v3.cross(this.vec1, this.vec2, []));
    var vec3 = v3.normalize(v3.cross(axis, this.vec1, []));
    var bands = specs.measurement_angleBands_3D;

    for (var i = 0; i <= bands; ++i) {
      var theta = this.angle * i / bands;
      var vecCos = v3.scale(this.vec1, m.cos(theta), []);
      var vecSin = v3.scale(vec3, m.sin(theta), []);
      var norm = v3.scale(v3.normalize(v3.add(vecCos, vecSin, [])), this.distUse);
      positionData.push(this.a2.x + norm[0], this.a2.y + norm[1], this.a2.z + norm[2]);
      normalData.push(0, 0, 0);

      if (i < bands) {
        indexData.push(i, i + 1);
      }
    }

    this.storeData(positionData, normalData, indexData);
  };

  _.getText = function (specs) {
    var vecCenter = v3.scale(v3.normalize(v3.add(this.vec1, this.vec2, [])), this.distUse + 0.3);
    return {
      pos: [this.a2.x + vecCenter[0], this.a2.y + vecCenter[1], this.a2.z + vecCenter[2]],
      value: [math.angleBounds(this.angle, true).toFixed(2), " \xB0"].join('')
    };
  };
})(_ChemDoodle__WEBPACK_IMPORTED_MODULE_3__["ELEMENT"], _extensions__WEBPACK_IMPORTED_MODULE_4__, d3, _math__WEBPACK_IMPORTED_MODULE_5__, m, _lib__WEBPACK_IMPORTED_MODULE_6__["mat4"], _lib__WEBPACK_IMPORTED_MODULE_6__["vec3"]);

(function (d3, m, undefined) {
  'use strict';

  d3.Arrow = function (radius, longitudeBands) {
    var positionData = [];
    var normalData = [];

    for (var longNumber = 0; longNumber <= longitudeBands; longNumber++) {
      var theta = longNumber * 2 * m.PI / longitudeBands;
      var sinTheta = m.sin(theta);
      var cosTheta = m.cos(theta);
      var x = cosTheta;
      var y = sinTheta;
      normalData.push( // base cylinder
      0, 0, -1, 0, 0, -1, // cylinder
      x, y, 0, x, y, 0, // base cone
      0, 0, -1, 0, 0, -1, // cone
      x, y, 1, x, y, 1);
      positionData.push( // base cylinder
      0, 0, 0, radius * x, radius * y, 0, // cylinder
      radius * x, radius * y, 0, radius * x, radius * y, 2, // base cone
      radius * x, radius * y, 2, radius * x * 2, radius * y * 2, 2, // cone
      radius * x * 2, radius * y * 2, 2, 0, 0, 3);
    }

    var indexData = [];

    for (var i = 0; i < longitudeBands; i++) {
      var offset = i * 8;

      for (var j = 0, jj = 7; j < jj; j++) {
        var first = j + offset;
        var second = first + 1;
        var third = first + jj + 2;
        var forth = third - 1;
        indexData.push(first, third, second, third, first, forth);
      }
    }

    this.storeData(positionData, normalData, indexData);
  };

  d3.Arrow.prototype = new d3._Mesh();
})(d3, m);

(function (d3, m, undefined) {
  'use strict';

  d3.Box = function (width, height, depth) {
    width /= 2;
    depth /= 2;
    var positionData = [];
    var normalData = []; // top

    positionData.push(width, height, -depth);
    positionData.push(width, height, -depth);
    positionData.push(-width, height, -depth);
    positionData.push(width, height, depth);
    positionData.push(-width, height, depth);
    positionData.push(-width, height, depth);

    for (var i = 6; i--; normalData.push(0, 1, 0)) {
      ;
    } // front


    positionData.push(-width, height, depth);
    positionData.push(-width, height, depth);
    positionData.push(-width, 0, depth);
    positionData.push(width, height, depth);
    positionData.push(width, 0, depth);
    positionData.push(width, 0, depth);

    for (var i = 6; i--; normalData.push(0, 0, 1)) {
      ;
    } // right


    positionData.push(width, height, depth);
    positionData.push(width, height, depth);
    positionData.push(width, 0, depth);
    positionData.push(width, height, -depth);
    positionData.push(width, 0, -depth);
    positionData.push(width, 0, -depth);

    for (var i = 6; i--; normalData.push(1, 0, 0)) {
      ;
    } // back


    positionData.push(width, height, -depth);
    positionData.push(width, height, -depth);
    positionData.push(width, 0, -depth);
    positionData.push(-width, height, -depth);
    positionData.push(-width, 0, -depth);
    positionData.push(-width, 0, -depth);

    for (var i = 6; i--; normalData.push(0, 0, -1)) {
      ;
    } // left


    positionData.push(-width, height, -depth);
    positionData.push(-width, height, -depth);
    positionData.push(-width, 0, -depth);
    positionData.push(-width, height, depth);
    positionData.push(-width, 0, depth);
    positionData.push(-width, 0, depth);

    for (var i = 6; i--; normalData.push(-1, 0, 0)) {
      ;
    } // bottom


    positionData.push(-width, 0, depth);
    positionData.push(-width, 0, depth);
    positionData.push(-width, 0, -depth);
    positionData.push(width, 0, depth);
    positionData.push(width, 0, -depth);
    positionData.push(width, 0, -depth);

    for (var i = 6; i--; normalData.push(0, -1, 0)) {
      ;
    }

    this.storeData(positionData, normalData);
  };

  d3.Box.prototype = new d3._Mesh();
})(d3, m);

(function (math, d3, v3, m4, m, undefined) {
  'use strict';

  d3.Camera = function () {
    this.fieldOfView = 45;
    this.aspect = 1;
    this.near = 0.1;
    this.far = 10000;
    this.zoom = 1;
    this.viewMatrix = m4.identity([]);
    this.projectionMatrix = m4.identity([]);
  };

  var _ = d3.Camera.prototype;

  _.perspectiveProjectionMatrix = function () {
    var top = m.tan(this.fieldOfView / 360 * m.PI) * this.near * this.zoom;
    var right = this.aspect * top;
    return m4.frustum(-right, right, -top, top, this.near, this.far, this.projectionMatrix);
  };

  _.orthogonalProjectionMatrix = function () {
    var top = m.tan(this.fieldOfView / 360 * m.PI) * ((this.far - this.near) / 2 + this.near) * this.zoom;
    var right = this.aspect * top;
    return m4.ortho(-right, right, -top, top, this.near, this.far, this.projectionMatrix);
  };

  _.updateProjectionMatrix = function (isPerspective) {
    return isPerspective ? this.perspectiveProjectionMatrix() : this.orthogonalProjectionMatrix();
  };

  _.focalLength = function () {
    return (this.far - this.near) / 2 + this.near;
  };

  _.zoomIn = function () {
    this.zoom = m.min(this.zoom * 1.25, 200);
  };

  _.zoomOut = function () {
    this.zoom = m.max(this.zoom / 1.25, 1 / 400);
  };
})(_math__WEBPACK_IMPORTED_MODULE_5__, d3, _lib__WEBPACK_IMPORTED_MODULE_6__["vec3"], _lib__WEBPACK_IMPORTED_MODULE_6__["mat4"], m);

(function (d3, m, m4, undefined) {
  'use strict';

  d3.LineArrow = function () {
    var d = 2.8;
    var w = 0.1;
    this.storeData([0, 0, -3, w, 0, -d, 0, 0, -3, -w, 0, -d, 0, 0, -3, 0, 0, 3, 0, 0, 3, w, 0, d, 0, 0, 3, -w, 0, d], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
  };

  d3.LineArrow.prototype = new d3._Mesh();

  d3.Compass = function (gl, specs) {
    // setup text X Y Z
    this.textImage = new d3.TextImage();
    this.textImage.init(gl);
    this.textImage.updateFont(gl, specs.text_font_size, specs.text_font_families, specs.text_font_bold, specs.text_font_italic, specs.text_font_stroke_3D);
    this.textMesh = new d3.TextMesh();
    this.textMesh.init(gl);
    var screenRatioHeight = specs.compass_size_3D / gl.canvas.clientHeight;
    var height = 3 / screenRatioHeight;
    var tanTheta = m.tan(specs.projectionPerspectiveVerticalFieldOfView_3D / 360 * m.PI);
    var depth = height / tanTheta;
    var near = m.max(depth - height, 0.1);
    var far = depth + height;
    var aspec = gl.canvas.clientWidth / gl.canvas.clientHeight;
    var fnProjection, z;

    if (specs.projectionPerspective_3D) {
      z = near;
      fnProjection = m4.frustum;
    } else {
      z = depth;
      fnProjection = m4.ortho;
    }

    var nearRatio = z / gl.canvas.clientHeight * 2 * tanTheta;
    var top = tanTheta * z;
    var bottom = -top;
    var left = aspec * bottom;
    var right = aspec * top;

    if (specs.compass_type_3D === 0) {
      var deltaX = -(gl.canvas.clientWidth - specs.compass_size_3D) / 2 + this.textImage.charHeight;
      var deltaY = -(gl.canvas.clientHeight - specs.compass_size_3D) / 2 + this.textImage.charHeight;
      var x = deltaX * nearRatio;
      var y = deltaY * nearRatio;
      left -= x;
      right -= x;
      bottom -= y;
      top -= y;
    }

    this.projectionMatrix = fnProjection(left, right, bottom, top, near, far);
    this.translationMatrix = m4.translate(m4.identity([]), [0, 0, -depth]); // vertex data for X Y Z text label

    var vertexData = {
      position: [],
      texCoord: [],
      translation: []
    }; // it need to auto calculated somehow

    var textPos = 3.5;
    this.textImage.pushVertexData('X', [textPos, 0, 0], 0, vertexData);
    this.textImage.pushVertexData('Y', [0, textPos, 0], 0, vertexData);
    this.textImage.pushVertexData('Z', [0, 0, textPos], 0, vertexData);
    this.textMesh.storeData(gl, vertexData.position, vertexData.texCoord, vertexData.translation);
  };

  var _ = d3.Compass.prototype;

  _.renderArrow = function (gl, type, color, mvMatrix) {
    gl.material.setDiffuseColor(gl, color);
    gl.shader.setModelViewMatrix(gl, mvMatrix);

    if (type === 1) {
      gl.drawArrays(gl.LINES, 0, gl.lineArrowBuffer.vertexPositionBuffer.numItems);
    } else {
      gl.drawElements(gl.TRIANGLES, gl.arrowBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
    }
  };

  _.render = function (gl, specs) {
    gl.shader.setProjectionMatrix(gl, this.projectionMatrix);
    specs.compass_type_3D === 1 ? gl.lineArrowBuffer.bindBuffers(gl) : gl.arrowBuffer.bindBuffers(gl);
    gl.material.setTempColors(gl, specs.bonds_materialAmbientColor_3D, undefined, specs.bonds_materialSpecularColor_3D, specs.bonds_materialShininess_3D);
    var modelMatrix = m4.multiply(this.translationMatrix, gl.rotationMatrix, []);
    var angle = m.PI / 2; // x - axis

    this.renderArrow(gl, specs.compass_type_3D, specs.compass_axisXColor_3D, m4.rotateY(modelMatrix, angle, [])); // y - axis

    this.renderArrow(gl, specs.compass_type_3D, specs.compass_axisYColor_3D, m4.rotateX(modelMatrix, -angle, [])); // z - axis

    this.renderArrow(gl, specs.compass_type_3D, specs.compass_axisZColor_3D, modelMatrix);
  };

  _.renderAxis = function (gl) {
    gl.shader.setProjectionMatrix(gl, this.projectionMatrix);
    var mvMatrix = m4.multiply(this.translationMatrix, gl.rotationMatrix, []);
    gl.shader.setModelViewMatrix(gl, mvMatrix);
    this.textImage.useTexture(gl);
    this.textMesh.render(gl);
  };
})(d3, m, _lib__WEBPACK_IMPORTED_MODULE_6__["mat4"]);

(function (d3, m, undefined) {
  'use strict';

  d3.Cylinder = function (radius, height, bands, closed) {
    var positionData = [];
    var normalData = [];

    if (closed) {
      for (var i = 0; i <= bands; i++) {
        var theta = i % bands * 2 * m.PI / bands;
        var cosTheta = m.cos(theta);
        var sinTheta = m.sin(theta);
        normalData.push(0, -1, 0);
        positionData.push(0, 0, 0);
        normalData.push(0, -1, 0);
        positionData.push(radius * cosTheta, 0, radius * sinTheta);
      }

      for (var i = 0; i <= bands; i++) {
        var theta = i % bands * 2 * m.PI / bands;
        var cosTheta = m.cos(theta);
        var sinTheta = m.sin(theta);
        normalData.push(cosTheta, 0, sinTheta);
        positionData.push(radius * cosTheta, 0, radius * sinTheta);
        normalData.push(cosTheta, 0, sinTheta);
        positionData.push(radius * cosTheta, height, radius * sinTheta);
      }

      for (var i = 0; i <= bands; i++) {
        var theta = i % bands * 2 * m.PI / bands;
        var cosTheta = m.cos(theta);
        var sinTheta = m.sin(theta);
        normalData.push(0, 1, 0);
        positionData.push(radius * cosTheta, height, radius * sinTheta);
        normalData.push(0, 1, 0);
        positionData.push(0, height, 0);
      }
    } else {
      for (var i = 0; i < bands; i++) {
        var theta = i * 2 * m.PI / bands;
        var cosTheta = m.cos(theta);
        var sinTheta = m.sin(theta);
        normalData.push(cosTheta, 0, sinTheta);
        positionData.push(radius * cosTheta, 0, radius * sinTheta);
        normalData.push(cosTheta, 0, sinTheta);
        positionData.push(radius * cosTheta, height, radius * sinTheta);
      }

      normalData.push(1, 0, 0);
      positionData.push(radius, 0, 0);
      normalData.push(1, 0, 0);
      positionData.push(radius, height, 0);
    }

    this.storeData(positionData, normalData);
  };

  d3.Cylinder.prototype = new d3._Mesh();
})(d3, m);

(function (ELEMENT, d3, m, v3, undefined) {
  'use strict';

  d3.Distance = function (a1, a2, node, offset) {
    this.a1 = a1;
    this.a2 = a2;
    this.node = node;
    this.offset = offset ? offset : 0;
  };

  var _ = d3.Distance.prototype = new d3._Measurement();

  _.calculateData = function (specs) {
    var positionData = [this.a1.x, this.a1.y, this.a1.z, this.a2.x, this.a2.y, this.a2.z];

    if (this.node) {
      var r1 = specs.atoms_useVDWDiameters_3D ? ELEMENT[this.a1.label].vdWRadius * specs.atoms_vdwMultiplier_3D : specs.atoms_sphereDiameter_3D / 2;
      var r2 = specs.atoms_useVDWDiameters_3D ? ELEMENT[this.a2.label].vdWRadius * specs.atoms_vdwMultiplier_3D : specs.atoms_sphereDiameter_3D / 2;
      this.move = this.offset + m.max(r1, r2);
      this.displacement = [(this.a1.x + this.a2.x) / 2 - this.node.x, (this.a1.y + this.a2.y) / 2 - this.node.y, (this.a1.z + this.a2.z) / 2 - this.node.z];
      v3.normalize(this.displacement);
      var change = v3.scale(this.displacement, this.move, []);
      positionData[0] += change[0];
      positionData[1] += change[1];
      positionData[2] += change[2];
      positionData[3] += change[0];
      positionData[4] += change[1];
      positionData[5] += change[2];
    }

    var normalData = [0, 0, 0, 0, 0, 0];
    var indexData = [0, 1];
    this.storeData(positionData, normalData, indexData);
  };

  _.getText = function (specs) {
    var dist = this.a1.distance3D(this.a2);
    var center = [(this.a1.x + this.a2.x) / 2, (this.a1.y + this.a2.y) / 2, (this.a1.z + this.a2.z) / 2];

    if (this.node) {
      var change = v3.scale(this.displacement, this.move + .1, []);
      center[0] += change[0];
      center[1] += change[1];
      center[2] += change[2];
    }

    return {
      pos: center,
      value: [dist.toFixed(2), " \u212B"].join('')
    };
  };
})(_ChemDoodle__WEBPACK_IMPORTED_MODULE_3__["ELEMENT"], d3, m, _lib__WEBPACK_IMPORTED_MODULE_6__["vec3"]);

(function (math, d3, v3, undefined) {
  'use strict';

  d3.Fog = function (color, fogStart, fogEnd, density) {
    this.fogScene(color, fogStart, fogEnd, density);
  };

  var _ = d3.Fog.prototype;

  _.fogScene = function (color, fogStart, fogEnd, density) {
    this.colorRGB = math.getRGB(color, 1);
    this.fogStart = fogStart;
    this.fogEnd = fogEnd;
    this.density = density;
  };
})(_math__WEBPACK_IMPORTED_MODULE_5__, d3, _lib__WEBPACK_IMPORTED_MODULE_6__["vec3"]);

(function (ELEMENT, d3, undefined) {
  d3.Label = function (textImage) {};

  var _ = d3.Label.prototype;

  _.updateVerticesBuffer = function (gl, molecules, specs) {
    for (var i = 0, ii = molecules.length; i < ii; i++) {
      var molecule = molecules[i];
      var moleculeLabel = molecule.labelMesh;
      var atoms = molecule.atoms;
      var vertexData = {
        position: [],
        texCoord: [],
        translation: []
      };
      var isMacro = atoms.length > 0 && atoms[0].hetatm != undefined;

      for (var j = 0, jj = atoms.length; j < jj; j++) {
        var atom = atoms[j];
        var atomLabel = atom.label;
        var zDepth = 0.05; // Sphere or Ball and Stick

        if (specs.atoms_useVDWDiameters_3D) {
          var add = ELEMENT[atomLabel].vdWRadius * specs.atoms_vdwMultiplier_3D;

          if (add === 0) {
            add = 1;
          }

          zDepth += add;
        } // if Stick or Wireframe
        else if (specs.atoms_sphereDiameter_3D) {
            zDepth += specs.atoms_sphereDiameter_3D / 2 * 1.5;
          }

        if (isMacro) {
          if (!atom.hetatm) {
            if (!specs.macro_displayAtoms) {
              continue;
            }
          } else if (atom.isWater) {
            if (!specs.macro_showWaters) {
              continue;
            }
          }
        }

        gl.textImage.pushVertexData(atom.altLabel ? atom.altLabel : atom.label, [atom.x, atom.y, atom.z], zDepth, vertexData);
      }

      var chains = molecule.chains;

      if (chains && (specs.proteins_displayRibbon || specs.proteins_displayBackbone)) {
        for (var j = 0, jj = chains.length; j < jj; j++) {
          var chain = chains[j];

          for (var k = 0, kk = chain.length; k < kk; k++) {
            var residue = chain[k];

            if (residue.name) {
              var atom = residue.cp1;
              gl.textImage.pushVertexData(residue.name, [atom.x, atom.y, atom.z], 2, vertexData);
            }
          }
        }
      }

      moleculeLabel.storeData(gl, vertexData.position, vertexData.texCoord, vertexData.translation, vertexData.zDepth);
    }
  };

  _.render = function (gl, specs, molecules) {
    // use projection for shader text.
    gl.shader.setMatrixUniforms(gl);
    gl.textImage.useTexture(gl);

    for (var i = 0, ii = molecules.length; i < ii; i++) {
      if (molecules[i].labelMesh) {
        molecules[i].labelMesh.render(gl);
      }
    }
  };
})(_ChemDoodle__WEBPACK_IMPORTED_MODULE_3__["ELEMENT"], d3);

(function (d3, m, undefined) {
  'use strict';

  d3.Sphere = function (radius, latitudeBands, longitudeBands) {
    var positionData = [];
    var normalData = [];

    for (var latNumber = 0; latNumber <= latitudeBands; latNumber++) {
      var theta = latNumber * m.PI / latitudeBands;
      var sinTheta = m.sin(theta);
      var cosTheta = m.cos(theta);

      for (var longNumber = 0; longNumber <= longitudeBands; longNumber++) {
        var phi = longNumber * 2 * m.PI / longitudeBands;
        var sinPhi = m.sin(phi);
        var cosPhi = m.cos(phi);
        var x = cosPhi * sinTheta;
        var y = cosTheta;
        var z = sinPhi * sinTheta;
        normalData.push(x, y, z);
        positionData.push(radius * x, radius * y, radius * z);
      }
    }

    var indexData = [];
    longitudeBands += 1;

    for (var latNumber = 0; latNumber < latitudeBands; latNumber++) {
      for (var longNumber = 0; longNumber < longitudeBands; longNumber++) {
        var first = latNumber * longitudeBands + longNumber % longitudeBands;
        var second = first + longitudeBands;
        indexData.push(first, first + 1, second);

        if (longNumber < longitudeBands - 1) {
          indexData.push(second, first + 1, second + 1);
        }
      }
    }

    this.storeData(positionData, normalData, indexData);
  };

  d3.Sphere.prototype = new d3._Mesh();
})(d3, m);

(function (RESIDUE, d3, m, v3, undefined) {
  'use strict';

  var loadPartition = function loadPartition(gl, p) {
    // positions
    gl.bindBuffer(gl.ARRAY_BUFFER, p.vertexPositionBuffer);
    gl.vertexAttribPointer(gl.shader.vertexPositionAttribute, p.vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0); // normals

    gl.bindBuffer(gl.ARRAY_BUFFER, p.vertexNormalBuffer);
    gl.vertexAttribPointer(gl.shader.vertexNormalAttribute, p.vertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0); // indexes

    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, p.vertexIndexBuffer);
  };

  function SubRibbon(entire, name, indexes, pi) {
    this.entire = entire;
    this.name = name;
    this.indexes = indexes;
    this.pi = pi;
  }

  var _2 = SubRibbon.prototype; // NOTE: To use rainbow coloring for chains, it needs coloring each residue with total residue count
  // and current index residue in chain parameters.

  _2.getColor = function (specs) {
    if (specs.macro_colorByChain) {
      return this.entire.chainColor;
    } else if (this.name) {
      return this.getResidueColor(RESIDUE[this.name] ? this.name : '*', specs);
    } else if (this.helix) {
      return this.entire.front ? specs.proteins_ribbonCartoonHelixPrimaryColor : specs.proteins_ribbonCartoonHelixSecondaryColor;
    } else if (this.sheet) {
      return specs.proteins_ribbonCartoonSheetColor;
    } else {
      return this.entire.front ? specs.proteins_primaryColor : specs.proteins_secondaryColor;
    }
  };

  _2.getResidueColor = function (name, specs) {
    var r = RESIDUE[name];

    if (specs.proteins_residueColor === 'shapely') {
      return r.shapelyColor;
    } else if (specs.proteins_residueColor === 'amino') {
      return r.aminoColor;
    } else if (specs.proteins_residueColor === 'polarity') {
      if (r.polar) {
        return '#C10000';
      } else {
        return '#FFFFFF';
      }
    } else if (specs.proteins_residueColor === 'acidity') {
      if (r.acidity === 1) {
        return '#0000FF';
      } else if (r.acidity === -1) {
        return '#FF0000';
      } else if (r.polar) {
        return '#FFFFFF';
      } else {
        return '#773300';
      }
    }

    return '#FFFFFF';
  };

  _2.render = function (gl, specs, noColor) {
    if (this.entire.partitions && this.pi !== this.entire.partitions.lastRender) {
      loadPartition(gl, this.entire.partitions[this.pi]);
      this.entire.partitions.lastRender = this.pi;
    }

    if (!this.vertexIndexBuffer) {
      this.vertexIndexBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.vertexIndexBuffer);
      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(this.indexes), gl.STATIC_DRAW);
      this.vertexIndexBuffer.itemSize = 1;
      this.vertexIndexBuffer.numItems = this.indexes.length;
    } // indexes


    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.vertexIndexBuffer); // colors

    if (!noColor && specs.proteins_residueColor !== 'rainbow') {
      gl.material.setDiffuseColor(gl, this.getColor(specs));
    } // render


    gl.drawElements(gl.TRIANGLES, this.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
  };

  d3.Ribbon = function (chain, offset, cartoon) {
    // ribbon meshes build front to back, not side to side, so keep this in
    // mind
    var lineSegmentNum = chain[0].lineSegments.length;
    var lineSegmentLength = chain[0].lineSegments[0].length;
    this.partitions = [];
    this.partitions.lastRender = 0;
    var currentPartition;
    this.front = offset > 0; // calculate vertex and normal points

    for (var i = 0, ii = chain.length; i < ii; i++) {
      if (!currentPartition || currentPartition.positionData.length > 65000) {
        if (this.partitions.length > 0) {
          i--;
        }

        currentPartition = {
          count: 0,
          positionData: [],
          normalData: []
        };
        this.partitions.push(currentPartition);
      }

      var residue = chain[i];
      currentPartition.count++;

      for (var j = 0; j < lineSegmentNum; j++) {
        var lineSegment = cartoon ? residue.lineSegmentsCartoon[j] : residue.lineSegments[j];
        var doSide1 = j === 0;
        var doSide2 = false;

        for (var k = 0; k < lineSegmentLength; k++) {
          var a = lineSegment[k]; // normals

          var abovei = i;
          var abovek = k + 1;

          if (i === chain.length - 1 && k === lineSegmentLength - 1) {
            abovek--;
          } else if (k === lineSegmentLength - 1) {
            abovei++;
            abovek = 0;
          }

          var above = cartoon ? chain[abovei].lineSegmentsCartoon[j][abovek] : chain[abovei].lineSegments[j][abovek];
          var negate = false;
          var nextj = j + 1;

          if (j === lineSegmentNum - 1) {
            nextj -= 2;
            negate = true;
          }

          var side = cartoon ? residue.lineSegmentsCartoon[nextj][k] : residue.lineSegments[nextj][k];
          var toAbove = [above.x - a.x, above.y - a.y, above.z - a.z];
          var toSide = [side.x - a.x, side.y - a.y, side.z - a.z];
          var normal = v3.cross(toAbove, toSide, []); // positions

          if (k === 0) {
            // tip
            v3.normalize(toAbove);
            v3.scale(toAbove, -1);
            currentPartition.normalData.push(toAbove[0], toAbove[1], toAbove[2]);
            currentPartition.positionData.push(a.x, a.y, a.z);
          }

          if (doSide1 || doSide2) {
            // sides
            v3.normalize(toSide);
            v3.scale(toSide, -1);
            currentPartition.normalData.push(toSide[0], toSide[1], toSide[2]);
            currentPartition.positionData.push(a.x, a.y, a.z);

            if (doSide1 && k === lineSegmentLength - 1) {
              doSide1 = false;
              k = -1;
            }
          } else {
            // center strips
            v3.normalize(normal);

            if (negate && !this.front || !negate && this.front) {
              v3.scale(normal, -1);
            }

            currentPartition.normalData.push(normal[0], normal[1], normal[2]);
            v3.scale(normal, m.abs(offset));
            currentPartition.positionData.push(a.x + normal[0], a.y + normal[1], a.z + normal[2]);

            if (j === lineSegmentNum - 1 && k === lineSegmentLength - 1) {
              doSide2 = true;
              k = -1;
            }
          }

          if (k === -1 || k === lineSegmentLength - 1) {
            // end
            v3.normalize(toAbove);
            currentPartition.normalData.push(toAbove[0], toAbove[1], toAbove[2]);
            currentPartition.positionData.push(a.x, a.y, a.z);
          }
        }
      }
    } // build mesh connectivity
    // add 2 to lineSegmentNum and lineSegmentLength to account for sides
    // and ends


    lineSegmentNum += 2;
    lineSegmentLength += 2;
    this.segments = [];
    this.partitionSegments = [];

    for (var n = 0, nn = this.partitions.length; n < nn; n++) {
      var currentPartition = this.partitions[n];
      var partitionSegmentIndexData = [];

      for (var i = 0, ii = currentPartition.count - 1; i < ii; i++) {
        var chainIndex = i;

        for (var j = 0; j < n; j++) {
          chainIndex += this.partitions[j].count - 1;
        }

        var c = chain[chainIndex];
        var residueIndexStart = i * lineSegmentNum * lineSegmentLength;
        var individualIndexData = [];

        for (var j = 0, jj = lineSegmentNum - 1; j < jj; j++) {
          var segmentIndexStart = residueIndexStart + j * lineSegmentLength;

          for (var k = 0; k < lineSegmentLength - 1; k++) {
            var nextRes = 1;

            if (i === ii) {
              nextRes = 0;
            }

            var add = [segmentIndexStart + k, segmentIndexStart + lineSegmentLength + k, segmentIndexStart + lineSegmentLength + k + nextRes, segmentIndexStart + k, segmentIndexStart + k + nextRes, segmentIndexStart + lineSegmentLength + k + nextRes];

            if (k !== lineSegmentLength - 1) {
              if (this.front) {
                individualIndexData.push(add[0], add[1], add[2], add[3], add[5], add[4]);
              } else {
                individualIndexData.push(add[0], add[2], add[1], add[3], add[4], add[5]);
              }
            }

            if (k === lineSegmentLength - 2 && !(i === currentPartition.count - 2 && n === this.partitions.length - 1)) {
              // jump the gap, the other mesh points will be
              // covered,
              // so no need to explicitly skip them
              var jump = lineSegmentNum * lineSegmentLength - k;
              add[2] += jump;
              add[4] += jump;
              add[5] += jump;
            }

            if (this.front) {
              partitionSegmentIndexData.push(add[0], add[1], add[2], add[3], add[5], add[4]);
            } else {
              partitionSegmentIndexData.push(add[0], add[2], add[1], add[3], add[4], add[5]);
            }
          }
        }

        if (cartoon && c.split) {
          var sr = new SubRibbon(this, undefined, partitionSegmentIndexData, n);
          sr.helix = c.helix;
          sr.sheet = c.sheet;
          this.partitionSegments.push(sr);
          partitionSegmentIndexData = [];
        }

        this.segments.push(new SubRibbon(this, c.name, individualIndexData, n));
      }

      var sr = new SubRibbon(this, undefined, partitionSegmentIndexData, n);
      sr.helix = c.helix;
      sr.sheet = c.sheet;
      this.partitionSegments.push(sr);
    }

    this.storeData(this.partitions[0].positionData, this.partitions[0].normalData);

    if (this.partitions.length === 1) {
      // clear partitions to reduce overhead
      this.partitions = undefined;
    }
  };

  var _ = d3.Ribbon.prototype = new d3._Mesh();

  _.render = function (gl, specs) {
    this.bindBuffers(gl); // colors

    var color = specs.macro_colorByChain ? this.chainColor : undefined;

    if (!color) {
      color = this.front ? specs.proteins_primaryColor : specs.proteins_secondaryColor;
    }

    gl.material.setDiffuseColor(gl, color);

    for (var i = 0, ii = this.partitionSegments.length; i < ii; i++) {
      this.partitionSegments[i].render(gl, specs, !specs.proteins_ribbonCartoonize);
    }
  };
})(_ChemDoodle__WEBPACK_IMPORTED_MODULE_3__["RESIDUE"], d3, m, _lib__WEBPACK_IMPORTED_MODULE_6__["vec3"]);

(function (math, d3, v3, m4, undefined) {
  'use strict';

  d3.Light = function (diffuseColor, specularColor, direction) {
    this.camera = new d3.Camera();
    this.lightScene(diffuseColor, specularColor, direction);
  };

  var _ = d3.Light.prototype;

  _.lightScene = function (diffuseColor, specularColor, direction) {
    this.diffuseRGB = math.getRGB(diffuseColor, 1);
    this.specularRGB = math.getRGB(specularColor, 1);
    this.direction = direction;
    this.updateView();
  };

  _.updateView = function () {
    var lightDir = v3.normalize(this.direction, []);
    var eyePos = v3.scale(lightDir, (this.camera.near - this.camera.far) / 2 - this.camera.near, []);
    var up = v3.equal(lightDir, [0, 1, 0]) ? [0, 0, 1] : [0, 1, 0];
    m4.lookAt(eyePos, [0, 0, 0], up, this.camera.viewMatrix);
    this.camera.orthogonalProjectionMatrix();
  };
})(_math__WEBPACK_IMPORTED_MODULE_5__, d3, _lib__WEBPACK_IMPORTED_MODULE_6__["vec3"], _lib__WEBPACK_IMPORTED_MODULE_6__["mat4"]);

(function (d3, undefined) {
  'use strict';

  d3.Line = function () {
    this.storeData([0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0]);
  };

  d3.Line.prototype = new d3._Mesh();
})(d3);

(function (math, d3, undefined) {
  'use strict';

  d3.Material = function () {};

  var _ = d3.Material.prototype;

  _.setTempColors = function (gl, ambientColor, diffuseColor, specularColor, shininess) {
    if (ambientColor) {
      gl.shader.setMaterialAmbientColor(gl, math.getRGB(ambientColor, 1));
    }

    if (diffuseColor) {
      gl.shader.setMaterialDiffuseColor(gl, math.getRGB(diffuseColor, 1));
    }

    if (specularColor) {
      gl.shader.setMaterialSpecularColor(gl, math.getRGB(specularColor, 1));
    }

    gl.shader.setMaterialShininess(gl, shininess);
    gl.shader.setMaterialAlpha(gl, 1);
  };

  _.setDiffuseColor = function (gl, diffuseColor) {
    gl.shader.setMaterialDiffuseColor(gl, math.getRGB(diffuseColor, 1));
  };

  _.setAlpha = function (gl, alpha) {
    gl.shader.setMaterialAlpha(gl, alpha);
  };
})(_math__WEBPACK_IMPORTED_MODULE_5__, d3);

(function (d3, math, document, undefined) {
  'use strict';

  d3.Picker = function () {};

  var _ = d3.Picker.prototype;

  _.init = function (gl) {
    // setup for picking system
    this.framebuffer = gl.createFramebuffer(); // set pick texture

    var texture2D = gl.createTexture();
    var renderbuffer = gl.createRenderbuffer();
    gl.bindTexture(gl.TEXTURE_2D, texture2D);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer); // set framebuffer and bind the texture and renderbuffer

    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture2D, 0);
    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);
    gl.bindTexture(gl.TEXTURE_2D, null);
    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  };

  _.setDimension = function (gl, width, height) {
    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer); // get binded depth attachment renderbuffer

    var renderbuffer = gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME);

    if (gl.isRenderbuffer(renderbuffer)) {
      // set renderbuffer dimension
      gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);
      gl.bindRenderbuffer(gl.RENDERBUFFER, null);
    } // get binded color attachment texture 2d


    var texture2D = gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME);

    if (gl.isTexture(texture2D)) {
      // set texture dimension
      gl.bindTexture(gl.TEXTURE_2D, texture2D);
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
      gl.bindTexture(gl.TEXTURE_2D, null);
    }

    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  };
})(d3, _math__WEBPACK_IMPORTED_MODULE_5__, document);

(function (d3, m, undefined) {
  'use strict';

  d3.Pill = function (radius, height, latitudeBands, longitudeBands) {
    var capHeightScale = 1;
    var capDiameter = 2 * radius;
    height -= capDiameter;

    if (height < 0) {
      capHeightScale = 0;
      height += capDiameter;
    } else if (height < capDiameter) {
      capHeightScale = height / capDiameter;
      height = capDiameter;
    } // update latitude and logintude band for two caps.
    // latitudeBands *= 2;
    // longitudeBands *= 2;


    var positionData = [];
    var normalData = [];

    for (var latNumber = 0; latNumber <= latitudeBands; latNumber++) {
      var theta = latNumber * m.PI / latitudeBands;
      var sinTheta = m.sin(theta);
      var cosTheta = m.cos(theta) * capHeightScale;

      for (var longNumber = 0; longNumber <= longitudeBands; longNumber++) {
        var phi = longNumber * 2 * m.PI / longitudeBands;
        var sinPhi = m.sin(phi);
        var cosPhi = m.cos(phi);
        var x = cosPhi * sinTheta;
        var y = cosTheta;
        var z = sinPhi * sinTheta;
        normalData.push(x, y, z);
        positionData.push(radius * x, radius * y + (latNumber < latitudeBands / 2 ? height : 0), radius * z);
      }
    }

    var indexData = [];
    longitudeBands += 1;

    for (var latNumber = 0; latNumber < latitudeBands; latNumber++) {
      for (var longNumber = 0; longNumber < longitudeBands; longNumber++) {
        var first = latNumber * longitudeBands + longNumber % longitudeBands;
        var second = first + longitudeBands;
        indexData.push(first, first + 1, second);

        if (longNumber < longitudeBands - 1) {
          indexData.push(second, first + 1, second + 1);
        }
      }
    }

    this.storeData(positionData, normalData, indexData);
  };

  d3.Pill.prototype = new d3._Mesh();
})(d3, m);

(function (extensions, RESIDUE, d3, m, m4, v3, math, undefined) {
  'use strict';

  function createDummyResidue(x, y, z) {
    var dummyRes = new _Residue__WEBPACK_IMPORTED_MODULE_2__["default"](-1);
    dummyRes.cp1 = dummyRes.cp2 = new _Atom__WEBPACK_IMPORTED_MODULE_1__["default"]('', x, y, z);
    return dummyRes;
  }

  function Pipe(a1, a2) {
    this.a1 = a1;
    this.a2 = a2;
  }

  ;
  var _ = Pipe.prototype;

  _.render = function (gl, specs) {
    var p1 = this.a1;
    var p2 = this.a2;
    var height = 1.001 * p1.distance3D(p2);
    var radiusScale = specs.proteins_cylinderHelixDiameter / 2;
    var scaleVector = [radiusScale, height, radiusScale];
    var transform = m4.translate(m4.identity(), [p1.x, p1.y, p1.z]);
    var y = [0, 1, 0];
    var ang = 0;
    var axis;

    if (p1.x === p2.x && p1.z === p2.z) {
      axis = [0, 0, 1];

      if (p2.y < p1.y) {
        ang = m.PI;
      }
    } else {
      var a2b = [p2.x - p1.x, p2.y - p1.y, p2.z - p1.z];
      ang = extensions.vec3AngleFrom(y, a2b);
      axis = v3.cross(y, a2b, []);
    }

    if (ang !== 0) {
      m4.rotate(transform, ang, axis);
    }

    m4.scale(transform, scaleVector);
    gl.shader.setMatrixUniforms(gl, transform);
    gl.drawArrays(gl.TRIANGLE_STRIP, 0, gl.cylinderClosedBuffer.vertexPositionBuffer.numItems);
  };

  function Plank(a1, a2, vx) {
    this.a1 = a1;
    this.a2 = a2;
    this.vx = vx;
  }

  ;
  var _ = Plank.prototype;

  _.render = function (gl, specs) {
    if (this.specs) {
      specs = this.specs;
    } // this is the elongation vector for the plank


    var height = 1.001 * this.a1.distance3D(this.a2);
    var diry = [this.a2.x - this.a1.x, this.a2.y - this.a1.y, this.a2.z - this.a1.z];
    var dirz = v3.cross(diry, this.vx, []);
    var dirx = v3.cross(dirz, diry, []);
    v3.normalize(dirx);
    v3.normalize(diry);
    v3.normalize(dirz);
    var transform = [dirx[0], dirx[1], dirx[2], 0, diry[0], diry[1], diry[2], 0, dirz[0], dirz[1], dirz[2], 0, this.a1.x, this.a1.y, this.a1.z, 1];
    var scaleVector = [specs.proteins_plankSheetWidth, height, specs.proteins_tubeThickness];
    m4.scale(transform, scaleVector);
    gl.shader.setMatrixUniforms(gl, transform);
    gl.drawArrays(gl.TRIANGLE_STRIP, 0, gl.boxBuffer.vertexPositionBuffer.numItems);
  };

  d3.PipePlank = function (rs, specs) {
    this.tubes = [];
    this.helixCylinders = [];
    this.sheetPlanks = [];
    this.chainColor = rs.chainColor;
    var chainNoSS = [];
    var noSSResidues = [];
    var helixResidues = [];
    var sheetResidues = []; // the first residue just a dummy residue.
    // so at beginning, the secondary structure of second residue must be check

    if (rs.length > 1) {
      var r0 = rs[0];
      var r1 = rs[1];

      if (r1.helix) {
        helixResidues.push(r0);
      } else if (r1.sheet) {
        sheetResidues.push(r0);
      } else {
        noSSResidues.push(r0);
      }
    } // iterate residues


    for (var i = 1, ii = rs.length - 1; i <= ii; i++) {
      var residue = rs[i];

      if (residue.helix) {
        helixResidues.push(residue);

        if (residue.arrow) {
          var startPoint = v3.create();
          var endPoint = v3.create();

          if (helixResidues.length == 2) {
            // PDB like 2PEC have helix which is just have 2 residues in it.
            startPoint = [helixResidues[0].cp1.x, helixResidues[0].cp1.y, helixResidues[0].cp1.z];
            endPoint = [helixResidues[1].cp1.x, helixResidues[1].cp1.y, helixResidues[1].cp1.z];
          } else {
            // To get helix axis, we need at least 4 residues.
            // if residues lenght is 3, then one residue need to be added.
            // The added residue is residue before helix.
            if (helixResidues.length == 3) {
              helixResidues.unshift(rs[m.max(i - 3, 0)]);
            }

            var Ps = [];
            var Vs = [];

            for (var h = 1, hh = helixResidues.length - 1; h < hh; h++) {
              var cai = [helixResidues[h].cp1.x, helixResidues[h].cp1.y, helixResidues[h].cp1.z];
              var A = [helixResidues[h - 1].cp1.x, helixResidues[h - 1].cp1.y, helixResidues[h - 1].cp1.z];
              var B = [helixResidues[h + 1].cp1.x, helixResidues[h + 1].cp1.y, helixResidues[h + 1].cp1.z];
              v3.subtract(A, cai);
              v3.subtract(B, cai);
              var Al = v3.scale(A, v3.length(B), []);
              var Bl = v3.scale(B, v3.length(A), []);
              var V = v3.normalize(v3.add(Al, Bl, []));
              Ps.push(cai);
              Vs.push(V);
            }

            var axes = [];

            for (var h = 0, hh = Ps.length - 1; h < hh; h++) {
              var P1 = Ps[h];
              var V1 = Vs[h];
              var P2 = Ps[h + 1];
              var V2 = Vs[h + 1];
              var H = v3.normalize(v3.cross(V1, V2, []));
              var P2subP1 = v3.subtract(P2, P1, []);
              var d = v3.dot(P2subP1, H);
              var dH = v3.scale(H, d, []);
              var dHl = v3.length(dH);
              var P2subP1l = v3.length(P2subP1);
              var r = -(dHl * dHl - P2subP1l * P2subP1l) / (2 * v3.dot(v3.subtract(P1, P2, []), V2));
              var H1 = v3.add(P1, v3.scale(V1, r, []), []);
              var H2 = v3.add(P2, v3.scale(V2, r, []), []);
              axes.push([H1, H2]);
            }

            var firstPoint = axes[0][0];
            var secondPoint = axes[0][1];
            var secondToFirst = v3.subtract(firstPoint, secondPoint, []);
            v3.add(firstPoint, secondToFirst, startPoint);
            var firstPoint = axes[axes.length - 1][1];
            var secondPoint = axes[axes.length - 1][0];
            var secondToFirst = v3.subtract(firstPoint, secondPoint, []);
            v3.add(firstPoint, secondToFirst, endPoint);
          }

          var startAtom = new _Atom__WEBPACK_IMPORTED_MODULE_1__["default"]('', startPoint[0], startPoint[1], startPoint[2]);
          var endAtom = new _Atom__WEBPACK_IMPORTED_MODULE_1__["default"]('', endPoint[0], endPoint[1], endPoint[2]);
          this.helixCylinders.push(new Pipe(startAtom, endAtom));
          helixResidues = []; // get vector direction from Pipe end to start

          var helixDir = v3.subtract(startPoint, endPoint, []);
          v3.normalize(helixDir);
          v3.scale(helixDir, .5);

          if (noSSResidues.length > 0) {
            var additionCp = v3.add(startPoint, helixDir, []);
            var prevResCp = noSSResidues[noSSResidues.length - 1].cp1;
            var helixDirToPrevRes = v3.subtract([prevResCp.x, prevResCp.y, prevResCp.z], additionCp, []);
            v3.normalize(helixDirToPrevRes);
            v3.scale(helixDirToPrevRes, .5);
            v3.add(additionCp, helixDirToPrevRes);
            var dummyRes = new _Residue__WEBPACK_IMPORTED_MODULE_2__["default"](-1);
            dummyRes.cp1 = dummyRes.cp2 = new _Atom__WEBPACK_IMPORTED_MODULE_1__["default"]('', additionCp[0], additionCp[1], additionCp[2]);
            noSSResidues.push(dummyRes); // force the non secondary structure spline to end on helix start point.

            var dummyRes = createDummyResidue(startPoint[0], startPoint[1], startPoint[2]);
            noSSResidues.push(dummyRes);
            chainNoSS.push(noSSResidues);
          }

          noSSResidues = []; // check for next residue

          if (i < ii) {
            // force the non secondary structure spline to start on helix end point.
            var dummyRes = createDummyResidue(endPoint[0], endPoint[1], endPoint[2]);
            noSSResidues.push(dummyRes);
            var rm = rs[i + 1];

            if (rm.sheet) {
              noSSResidues.push(residue);
              noSSResidues.push(residue);
              chainNoSS.push(noSSResidues);
              noSSResidues = [];
              sheetResidues.push(residue);
            } else {
              // force the non secondary structure spline to start on helix end point.
              v3.scale(helixDir, -1);
              var additionCp = v3.add(endPoint, helixDir, []);
              var nextResCp = rm.cp1;
              var helixDirToNextRes = v3.subtract([nextResCp.x, nextResCp.y, nextResCp.z], additionCp, []);
              v3.normalize(helixDirToNextRes);
              v3.scale(helixDirToNextRes, .5);
              v3.add(additionCp, helixDirToNextRes);
              var dummyRes = createDummyResidue(additionCp[0], additionCp[1], additionCp[2]);
              noSSResidues.push(dummyRes);
            }
          }
        }
      } else if (residue.sheet) {
        sheetResidues.push(residue);

        if (residue.arrow) {
          var p1 = [0, 0, 0];
          var p2 = [0, 0, 0];

          for (var h = 0, hh = sheetResidues.length; h < hh; h++) {
            var guidePoints = sheetResidues[h].guidePointsLarge;
            var gp1 = guidePoints[0];
            var gp2 = guidePoints[guidePoints.length - 1];
            v3.add(p1, [gp1.x, gp1.y, gp1.z]);
            v3.add(p2, [gp2.x, gp2.y, gp2.z]);
          }

          v3.scale(p1, 1 / hh);
          v3.scale(p2, 1 / hh);
          var dirx = v3.subtract(p1, p2);
          var firstRs = sheetResidues[0];
          var lastRs = sheetResidues[sheetResidues.length - 1];
          var firstGuidePoints = firstRs.guidePointsSmall[0];
          var lastGuidePoints = lastRs.guidePointsSmall[0];
          this.sheetPlanks.push(new Plank(firstGuidePoints, lastGuidePoints, dirx));
          sheetResidues = [];

          if (i < ii) {
            var rm = rs[i + 1];

            if (rm.sheet) {
              sheetResidues.push(residue);
            } else {
              var dummyRes = createDummyResidue(lastGuidePoints.x, lastGuidePoints.y, lastGuidePoints.z);
              noSSResidues.push(dummyRes);
            }
          }
        }
      } else {
        noSSResidues.push(residue);

        if (i < ii) {
          var rm = rs[i + 1];

          if (rm.sheet) {
            var guidePoints = residue.guidePointsSmall[0];
            var dummyRes = createDummyResidue(guidePoints.x, guidePoints.y, guidePoints.z);
            noSSResidues.push(dummyRes);
            chainNoSS.push(noSSResidues);
            noSSResidues = [];
            sheetResidues.push(residue);
          }
        }
      }
    }

    if (noSSResidues.length > 1) {
      if (noSSResidues.length == 2) {
        noSSResidues.push(noSSResidues[noSSResidues.length - 1]);
      }

      chainNoSS.push(noSSResidues);
    }

    noSSResidues = [];
    var chainSegments = [];

    for (var n = 0, nn = chainNoSS.length; n < nn; n++) {
      var nhs = chainNoSS[n];
      var lineSegmentsList = [];

      for (var i = 0, ii = nhs.length - 1; i <= ii; i++) {
        lineSegmentsList.push(nhs[i].cp1);
      }

      chainSegments.push(lineSegmentsList);
    }

    for (var i = 0, ii = chainSegments.length; i < ii; i++) {
      var t = new d3.CatmullTube(chainSegments[i], specs.proteins_tubeThickness, specs.proteins_tubeResolution_3D, specs.proteins_horizontalResolution);
      t.chainColor = rs.chainColor;
      this.tubes.push(t);
    }
  };

  var _ = d3.PipePlank.prototype = new d3._Mesh();

  _.render = function (gl, specs) {
    gl.material.setTempColors(gl, specs.proteins_materialAmbientColor_3D, undefined, specs.proteins_materialSpecularColor_3D, specs.proteins_materialShininess_3D); // colors

    gl.material.setDiffuseColor(gl, specs.macro_colorByChain ? this.chainColor : specs.proteins_tubeColor);

    for (var j = 0, jj = this.tubes.length; j < jj; j++) {
      gl.shader.setMatrixUniforms(gl);
      this.tubes[j].render(gl, specs);
    }

    if (!specs.macro_colorByChain) {
      gl.material.setDiffuseColor(gl, specs.proteins_ribbonCartoonHelixSecondaryColor);
    }

    gl.cylinderClosedBuffer.bindBuffers(gl);

    for (var j = 0, jj = this.helixCylinders.length; j < jj; j++) {
      this.helixCylinders[j].render(gl, specs);
    }

    if (!specs.macro_colorByChain) {
      gl.material.setDiffuseColor(gl, specs.proteins_ribbonCartoonSheetColor);
    }

    gl.boxBuffer.bindBuffers(gl);

    for (var j = 0, jj = this.sheetPlanks.length; j < jj; j++) {
      this.sheetPlanks[j].render(gl, specs);
    }
  };
})(_extensions__WEBPACK_IMPORTED_MODULE_4__, _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__["RESIDUE"], d3, m, _lib__WEBPACK_IMPORTED_MODULE_6__["mat4"], _lib__WEBPACK_IMPORTED_MODULE_6__["vec3"], _math__WEBPACK_IMPORTED_MODULE_5__);

(function (d3, undefined) {
  'use strict';

  d3.Quad = function () {
    var positionData = [-1, 1, 0, -1, -1, 0, 1, 1, 0, 1, -1, 0];
    var normalData = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    this.storeData(positionData, normalData);
  };

  d3.Quad.prototype = new d3._Mesh();
})(d3);

(function (d3, v3, undefined) {
  'use strict';

  d3.Shape = function (points, thickness) {
    // points must be in the xy-plane, all z-coords must be 0, thickness
    // will be in the z-plane
    var numPoints = points.length;
    var positionData = [];
    var normalData = []; // calculate vertex and normal points

    var center = new _Point__WEBPACK_IMPORTED_MODULE_0__["default"]();

    for (var i = 0, ii = numPoints; i < ii; i++) {
      var next = i + 1;

      if (i === ii - 1) {
        next = 0;
      }

      var z = [0, 0, 1];
      var currentPoint = points[i];
      var nextPoint = points[next];
      var v = [nextPoint.x - currentPoint.x, nextPoint.y - currentPoint.y, 0];
      var normal = v3.cross(z, v); // first four are for the side normal
      // second four will do both the bottom and top triangle normals

      for (var j = 0; j < 2; j++) {
        positionData.push(currentPoint.x, currentPoint.y, thickness / 2);
        positionData.push(currentPoint.x, currentPoint.y, -thickness / 2);
        positionData.push(nextPoint.x, nextPoint.y, thickness / 2);
        positionData.push(nextPoint.x, nextPoint.y, -thickness / 2);
      } // side normals


      for (var j = 0; j < 4; j++) {
        normalData.push(normal[0], normal[1], normal[2]);
      } // top and bottom normals


      normalData.push(0, 0, 1);
      normalData.push(0, 0, -1);
      normalData.push(0, 0, 1);
      normalData.push(0, 0, -1);
      center.add(currentPoint);
    } // centers


    center.x /= numPoints;
    center.y /= numPoints;
    normalData.push(0, 0, 1);
    positionData.push(center.x, center.y, thickness / 2);
    normalData.push(0, 0, -1);
    positionData.push(center.x, center.y, -thickness / 2); // build mesh connectivity

    var indexData = [];
    var centerIndex = numPoints * 8;

    for (var i = 0, ii = numPoints; i < ii; i++) {
      var start = i * 8; // sides

      indexData.push(start);
      indexData.push(start + 3);
      indexData.push(start + 1);
      indexData.push(start);
      indexData.push(start + 2);
      indexData.push(start + 3); // top and bottom

      indexData.push(start + 4);
      indexData.push(centerIndex);
      indexData.push(start + 6);
      indexData.push(start + 5);
      indexData.push(start + 7);
      indexData.push(centerIndex + 1);
    }

    this.storeData(positionData, normalData, indexData);
  };

  d3.Shape.prototype = new d3._Mesh();
})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__["vec3"]);

(function (d3, m, v3, undefined) {
  'use strict';

  d3.Star = function () {
    var ps = [.8944, .4472, 0, .2764, .4472, .8506, .2764, .4472, -.8506, -.7236, .4472, .5257, -.7236, .4472, -.5257, -.3416, .4472, 0, -.1056, .4472, .3249, -.1056, .4472, -.3249, .2764, .4472, .2008, .2764, .4472, -.2008, -.8944, -.4472, 0, -.2764, -.4472, .8506, -.2764, -.4472, -.8506, .7236, -.4472, .5257, .7236, -.4472, -.5257, .3416, -.4472, 0, .1056, -.4472, .3249, .1056, -.4472, -.3249, -.2764, -.4472, .2008, -.2764, -.4472, -.2008, -.5527, .1058, 0, -.1708, .1058, .5527, -.1708, .1058, -.5527, .4471, .1058, .3249, .4471, .1058, -.3249, .5527, -.1058, 0, .1708, -.1058, .5527, .1708, -.1058, -.5527, -.4471, -.1058, .3249, -.4471, -.1058, -.3249, 0, 1, 0, 0, -1, 0];
    var is = [0, 9, 8, 2, 7, 9, 4, 5, 7, 3, 6, 5, 1, 8, 6, 0, 8, 23, 30, 6, 8, 3, 21, 6, 11, 26, 21, 13, 23, 26, 2, 9, 24, 30, 8, 9, 1, 23, 8, 13, 25, 23, 14, 24, 25, 4, 7, 22, 30, 9, 7, 0, 24, 9, 14, 27, 24, 12, 22, 27, 3, 5, 20, 30, 7, 5, 2, 22, 7, 12, 29, 22, 10, 20, 29, 1, 6, 21, 30, 5, 6, 4, 20, 5, 10, 28, 20, 11, 21, 28, 10, 19, 18, 12, 17, 19, 14, 15, 17, 13, 16, 15, 11, 18, 16, 31, 19, 17, 14, 17, 27, 2, 27, 22, 4, 22, 29, 10, 29, 19, 31, 18, 19, 12, 19, 29, 4, 29, 20, 3, 20, 28, 11, 28, 18, 31, 16, 18, 10, 18, 28, 3, 28, 21, 1, 21, 26, 13, 26, 16, 31, 15, 16, 11, 16, 26, 1, 26, 23, 0, 23, 25, 14, 25, 15, 31, 17, 15, 13, 15, 25, 0, 25, 24, 2, 24, 27, 12, 27, 17];
    var positionData = [];
    var normalData = [];
    var indexData = [];

    for (var i = 0, ii = is.length; i < ii; i += 3) {
      var j1 = is[i] * 3;
      var j2 = is[i + 1] * 3;
      var j3 = is[i + 2] * 3;
      var p1 = [ps[j1], ps[j1 + 1], ps[j1 + 2]];
      var p2 = [ps[j2], ps[j2 + 1], ps[j2 + 2]];
      var p3 = [ps[j3], ps[j3 + 1], ps[j3 + 2]];
      var toAbove = [p1[0] - p2[0], p1[1] - p2[1], p1[2] - p2[2]];
      var toSide = [p3[0] - p2[0], p3[1] - p2[1], p3[2] - p2[2]];
      var normal = v3.cross(toSide, toAbove, []);
      v3.normalize(normal);
      positionData.push(p1[0], p1[1], p1[2], p2[0], p2[1], p2[2], p3[0], p3[1], p3[2]);
      normalData.push(normal[0], normal[1], normal[2], normal[0], normal[1], normal[2], normal[0], normal[1], normal[2]);
      indexData.push(i, i + 1, i + 2);
    }

    this.storeData(positionData, normalData, indexData);
  };

  d3.Star.prototype = new d3._Mesh();
})(d3, m, _lib__WEBPACK_IMPORTED_MODULE_6__["vec3"]);

(function (d3, extensions, document, window, undefined) {
  'use strict';

  var ratio = 1;

  if (window.devicePixelRatio) {
    ratio = window.devicePixelRatio;
  }

  d3.TextImage = function () {
    this.ctx = document.createElement('canvas').getContext('2d');
    this.data = [];
    this.text = '';
    this.charHeight = 0;
  };

  var _ = d3.TextImage.prototype;

  _.init = function (gl) {
    // init texture
    this.textureImage = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, this.textureImage);
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    gl.bindTexture(gl.TEXTURE_2D, null);
    this.updateFont(gl, 12, ['Sans-serif'], false, false, false);
  };

  _.charData = function (character) {
    var index = this.text.indexOf(character);
    return index >= 0 ? this.data[index] : null;
  };

  _.updateFont = function (gl, fontSize, fontFamilies, fontBold, fontItalic, fontStroke) {
    var ctx = this.ctx;
    var canvas = this.ctx.canvas;
    var data = [];
    var text = "";
    fontSize *= ratio;
    var contextFont = extensions.getFontString(fontSize, fontFamilies, fontBold, fontItalic);
    ctx.font = contextFont;
    ctx.save();
    var totalWidth = 0;
    var charHeight = fontSize * 1.5;

    for (var i = 32, ii = 127; i < ii; i++) {
      // skip control characters
      // if(i <= 31 || i == 127) continue;
      var character = String.fromCharCode(i),
          width = ctx.measureText(character).width;
      data.push({
        text: character,
        width: width,
        height: charHeight
      });
      totalWidth += width * 2;
    } // add other characters


    var chars = "\xB0\u212B\xAE".split('');

    for (var i = 0, ii = chars.length; i < ii; i++) {
      var character = chars[i],
          width = ctx.measureText(character).width;
      data.push({
        text: character,
        width: width,
        height: charHeight
      });
      totalWidth += width * 2;
    }

    var areaImage = totalWidth * charHeight;
    var sqrtArea = m.sqrt(areaImage);
    var totalRows = m.ceil(sqrtArea / charHeight);
    var maxWidth = m.ceil(totalWidth / (totalRows - 1));
    canvas.width = maxWidth;
    canvas.height = totalRows * charHeight;
    ctx.font = contextFont;
    ctx.textAlign = "left";
    ctx.textBaseline = "middle";
    ctx.strokeStyle = "#000";
    ctx.lineWidth = 1.4;
    ctx.fillStyle = "#fff";
    var offsetRow = 0;
    var posX = 0;

    for (var i = 0, ii = data.length; i < ii; i++) {
      var charData = data[i];
      var charWidth = charData.width * 2;
      var charHeight = charData.height;
      var charText = charData.text;
      var willWidth = posX + charWidth;

      if (willWidth > maxWidth) {
        offsetRow++;
        posX = 0;
      }

      var posY = offsetRow * charHeight;

      if (fontStroke) {
        // stroke must draw before fill
        ctx.strokeText(charText, posX, posY + charHeight / 2);
      }

      ctx.fillText(charText, posX, posY + charHeight / 2);
      charData.x = posX;
      charData.y = posY;
      text += charText;
      posX += charWidth;
    }

    this.text = text;
    this.data = data;
    this.charHeight = charHeight; // also update the texture

    gl.bindTexture(gl.TEXTURE_2D, this.textureImage);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);
    gl.bindTexture(gl.TEXTURE_2D, null);
  };

  _.pushVertexData = function (text, position, zDepth, data) {
    // characters of string text
    var textPiece = text.toString().split(""); // height of texture image

    var heightImage = this.getHeight();
    var widthImage = this.getWidth();
    var x1 = -this.textWidth(text) / 2 / ratio;
    var y1 = -this.charHeight / 2 / ratio; // iterate each character

    for (var j = 0, jj = textPiece.length; j < jj; j++) {
      var charData = this.charData(textPiece[j]);
      var width = charData.width;
      var left = charData.x / widthImage;
      var right = left + charData.width * 1.8 / widthImage;
      var top = charData.y / heightImage;
      var bottom = top + charData.height / heightImage;
      var x2 = x1 + width * 1.8 / ratio;
      var y2 = this.charHeight / 2 / ratio;
      data.position.push( // left top
      position[0], position[1], position[2], // right top
      position[0], position[1], position[2], // right bottom
      position[0], position[1], position[2], // left top
      position[0], position[1], position[2], // left bottom
      position[0], position[1], position[2], // right bottom
      position[0], position[1], position[2]);
      data.texCoord.push( // left top
      left, top, // right bottom
      right, bottom, // right top
      right, top, // left top
      left, top, // left bottom
      left, bottom, // right bottom
      right, bottom);
      data.translation.push( // left top
      x1, y2, zDepth, // right bottom
      x2, y1, zDepth, // right top
      x2, y2, zDepth, // left top
      x1, y2, zDepth, // left bottom
      x1, y1, zDepth, // right bottom
      x2, y1, zDepth);
      x1 = x2 + (width - width * 1.8) / ratio;
    }
  };

  _.getCanvas = function () {
    return this.ctx.canvas;
  };

  _.getHeight = function () {
    return this.getCanvas().height;
  };

  _.getWidth = function () {
    return this.getCanvas().width;
  };

  _.textWidth = function (text) {
    return this.ctx.measureText(text).width;
  };

  _.test = function () {
    document.body.appendChild(this.getCanvas());
  };

  _.useTexture = function (gl) {
    gl.bindTexture(gl.TEXTURE_2D, this.textureImage);
  };
})(d3, _extensions__WEBPACK_IMPORTED_MODULE_4__, document, window);

(function (d3, m, undefined) {
  'use strict';

  d3.TextMesh = function () {};

  var _ = d3.TextMesh.prototype;

  _.init = function (gl) {
    // set vertex buffer
    this.vertexPositionBuffer = gl.createBuffer();
    this.vertexTexCoordBuffer = gl.createBuffer();
    this.vertexTranslationBuffer = gl.createBuffer();
  };

  _.setVertexData = function (gl, vertexBuffer, bufferData, itemSize) {
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(bufferData), gl.STATIC_DRAW);
    vertexBuffer.itemSize = itemSize;
    vertexBuffer.numItems = bufferData.length / itemSize;
  };

  _.storeData = function (gl, vertexPositionData, vertexTexCoordData, vertexTranslationData) {
    this.setVertexData(gl, this.vertexPositionBuffer, vertexPositionData, 3);
    this.setVertexData(gl, this.vertexTexCoordBuffer, vertexTexCoordData, 2);
    this.setVertexData(gl, this.vertexTranslationBuffer, vertexTranslationData, 3);
  };

  _.bindBuffers = function (gl) {
    // positions
    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexPositionBuffer);
    gl.vertexAttribPointer(gl.shader.vertexPositionAttribute, this.vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0); // texCoord

    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexTexCoordBuffer);
    gl.vertexAttribPointer(gl.shader.vertexTexCoordAttribute, this.vertexTexCoordBuffer.itemSize, gl.FLOAT, false, 0, 0); // translation and z depth

    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexTranslationBuffer);
    gl.vertexAttribPointer(gl.shader.vertexNormalAttribute, this.vertexTranslationBuffer.itemSize, gl.FLOAT, false, 0, 0);
  };

  _.render = function (gl) {
    var numItems = this.vertexPositionBuffer.numItems;

    if (!numItems) {
      // nothing to do here
      return;
    }

    this.bindBuffers(gl);
    gl.drawArrays(gl.TRIANGLES, 0, numItems);
  };
})(d3, m);

(function (ELEMENT, math, d3, m, m4, v3, undefined) {
  'use strict';

  d3.Torsion = function (a1, a2, a3, a4) {
    this.a1 = a1;
    this.a2 = a2;
    this.a3 = a3;
    this.a4 = a4;
  };

  var _ = d3.Torsion.prototype = new d3._Measurement();

  _.calculateData = function (specs) {
    var positionData = [];
    var normalData = [];
    var indexData = [];
    var dist1 = this.a2.distance3D(this.a1);
    var dist2 = this.a2.distance3D(this.a3);
    this.distUse = m.min(dist1, dist2) / 2; // data for the angle

    var b1 = [this.a2.x - this.a1.x, this.a2.y - this.a1.y, this.a2.z - this.a1.z];
    var b2 = [this.a3.x - this.a2.x, this.a3.y - this.a2.y, this.a3.z - this.a2.z];
    var b3 = [this.a4.x - this.a3.x, this.a4.y - this.a3.y, this.a4.z - this.a3.z];
    var cross12 = v3.cross(b1, b2, []);
    var cross23 = v3.cross(b2, b3, []);
    v3.scale(b1, v3.length(b2));
    this.torsion = m.atan2(v3.dot(b1, cross23), v3.dot(cross12, cross23));
    var vec1 = v3.normalize(v3.cross(cross12, b2, []));
    var vec3 = v3.normalize(v3.cross(b2, vec1, []));
    this.pos = v3.add([this.a2.x, this.a2.y, this.a2.z], v3.scale(v3.normalize(b2, []), this.distUse));
    var vec0 = [];
    var bands = specs.measurement_angleBands_3D;

    for (var i = 0; i <= bands; ++i) {
      var theta = this.torsion * i / bands;
      var vecCos = v3.scale(vec1, m.cos(theta), []);
      var vecSin = v3.scale(vec3, m.sin(theta), []);
      var norm = v3.scale(v3.normalize(v3.add(vecCos, vecSin, [])), this.distUse);

      if (i == 0) {
        vec0 = norm;
      }

      positionData.push(this.pos[0] + norm[0], this.pos[1] + norm[1], this.pos[2] + norm[2]);
      normalData.push(0, 0, 0);

      if (i < bands) {
        indexData.push(i, i + 1);
      }
    }

    this.vecText = v3.normalize(v3.add(vec0, norm, []));
    var arrowLength = 0.25;
    var b2Norm = v3.normalize(b2, []);
    v3.scale(b2Norm, arrowLength / 4);
    var theta = this.torsion - m.asin(arrowLength / 2) * 2 * this.torsion / m.abs(this.torsion);
    var vecCos = v3.scale(vec1, m.cos(theta), []);
    var vecSin = v3.scale(vec3, m.sin(theta), []);
    var norm = v3.scale(v3.normalize(v3.add(vecCos, vecSin, [])), this.distUse);
    positionData.push(this.pos[0] + b2Norm[0] + norm[0], this.pos[1] + b2Norm[1] + norm[1], this.pos[2] + b2Norm[2] + norm[2]);
    normalData.push(0, 0, 0);
    positionData.push(this.pos[0] - b2Norm[0] + norm[0], this.pos[1] - b2Norm[1] + norm[1], this.pos[2] - b2Norm[2] + norm[2]);
    normalData.push(0, 0, 0);
    indexData.push(--i, i + 1, i, i + 2);
    this.storeData(positionData, normalData, indexData);
  };

  _.getText = function (specs) {
    v3.add(this.pos, v3.scale(this.vecText, this.distUse + 0.3, []));
    return {
      pos: this.pos,
      value: [math.angleBounds(this.torsion, true, true).toFixed(2), " \xB0"].join('')
    };
  };
})(_ChemDoodle__WEBPACK_IMPORTED_MODULE_3__["ELEMENT"], _math__WEBPACK_IMPORTED_MODULE_5__, d3, m, _lib__WEBPACK_IMPORTED_MODULE_6__["mat4"], _lib__WEBPACK_IMPORTED_MODULE_6__["vec3"]);

(function (extensions, RESIDUE, d3, m, m4, v3, math, undefined) {
  'use strict';

  var loadPartition = function loadPartition(gl, p) {
    // positions
    gl.bindBuffer(gl.ARRAY_BUFFER, p.vertexPositionBuffer);
    gl.vertexAttribPointer(gl.shader.vertexPositionAttribute, p.vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0); // normals

    gl.bindBuffer(gl.ARRAY_BUFFER, p.vertexNormalBuffer);
    gl.vertexAttribPointer(gl.shader.vertexNormalAttribute, p.vertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0); // indexes

    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, p.vertexIndexBuffer);
  };

  var PointRotator = function PointRotator(point, axis, angle) {
    var d = m.sqrt(axis[1] * axis[1] + axis[2] * axis[2]);
    var Rx = [1, 0, 0, 0, 0, axis[2] / d, -axis[1] / d, 0, 0, axis[1] / d, axis[2] / d, 0, 0, 0, 0, 1];
    var RxT = [1, 0, 0, 0, 0, axis[2] / d, axis[1] / d, 0, 0, -axis[1] / d, axis[2] / d, 0, 0, 0, 0, 1];
    var Ry = [d, 0, -axis[0], 0, 0, 1, 0, 0, axis[0], 0, d, 0, 0, 0, 0, 1];
    var RyT = [d, 0, axis[0], 0, 0, 1, 0, 0, -axis[0], 0, d, 0, 0, 0, 0, 1];
    var Rz = [m.cos(angle), -m.sin(angle), 0, 0, m.sin(angle), m.cos(angle), 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
    var matrix = m4.multiply(Rx, m4.multiply(Ry, m4.multiply(Rz, m4.multiply(RyT, RxT, []))));

    this.rotate = function () {
      return m4.multiplyVec3(matrix, point);
    };
  };

  d3.Tube = function (chain, thickness, cylinderResolution) {
    var lineSegmentNum = chain[0].lineSegments[0].length;
    this.partitions = [];
    var currentPartition;
    this.ends = [];
    this.ends.push(chain[0].lineSegments[0][0]);
    this.ends.push(chain[chain.length - 1].lineSegments[0][0]); // calculate vertex and normal points

    var last = [1, 0, 0];

    for (var i = 0, ii = chain.length; i < ii; i++) {
      if (!currentPartition || currentPartition.positionData.length > 65000) {
        if (this.partitions.length > 0) {
          i--;
        }

        currentPartition = {
          count: 0,
          positionData: [],
          normalData: [],
          indexData: []
        };
        this.partitions.push(currentPartition);
      }

      var residue = chain[i];
      currentPartition.count++;
      var min = Infinity;
      var p = new _Atom__WEBPACK_IMPORTED_MODULE_1__["default"]('', chain[i].cp1.x, chain[i].cp1.y, chain[i].cp1.z);

      for (var j = 0; j < lineSegmentNum; j++) {
        var currentPoint = residue.lineSegments[0][j];
        var nextPoint;

        if (j === lineSegmentNum - 1) {
          if (i === chain.length - 1) {
            nextPoint = residue.lineSegments[0][j - 1];
          } else {
            nextPoint = chain[i + 1].lineSegments[0][0];
          }
        } else {
          nextPoint = residue.lineSegments[0][j + 1];
        }

        var axis = [nextPoint.x - currentPoint.x, nextPoint.y - currentPoint.y, nextPoint.z - currentPoint.z];
        v3.normalize(axis);

        if (i === chain.length - 1 && j === lineSegmentNum - 1) {
          v3.scale(axis, -1);
        }

        var startVector = v3.cross(axis, last, []);
        v3.normalize(startVector);
        v3.scale(startVector, thickness / 2);
        var rotator = new PointRotator(startVector, axis, 2 * m.PI / cylinderResolution);

        for (var k = 0, kk = cylinderResolution; k < kk; k++) {
          var use = rotator.rotate();

          if (k === m.floor(cylinderResolution / 4)) {
            last = [use[0], use[1], use[2]];
          }

          currentPartition.normalData.push(use[0], use[1], use[2]);
          currentPartition.positionData.push(currentPoint.x + use[0], currentPoint.y + use[1], currentPoint.z + use[2]);
        } // find closest point to attach stick to


        if (p) {
          var dist = currentPoint.distance3D(p);

          if (dist < min) {
            min = dist;
            chain[i].pPoint = currentPoint;
          }
        }
      }
    } // build mesh connectivity


    for (var n = 0, nn = this.partitions.length; n < nn; n++) {
      var currentPartition = this.partitions[n];

      for (var i = 0, ii = currentPartition.count - 1; i < ii; i++) {
        var indexStart = i * lineSegmentNum * cylinderResolution;

        for (var j = 0, jj = lineSegmentNum; j < jj; j++) {
          var segmentIndexStart = indexStart + j * cylinderResolution;

          for (var k = 0; k < cylinderResolution; k++) {
            var next = 1;
            var sk = segmentIndexStart + k;
            currentPartition.indexData.push(sk);
            currentPartition.indexData.push(sk + cylinderResolution);
            currentPartition.indexData.push(sk + cylinderResolution + next);
            currentPartition.indexData.push(sk);
            currentPartition.indexData.push(sk + cylinderResolution + next);
            currentPartition.indexData.push(sk + next);
          }
        }
      }
    }

    this.storeData(this.partitions[0].positionData, this.partitions[0].normalData, this.partitions[0].indexData);
    var ps = [new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](2, 0)];

    for (var i = 0; i < 60; i++) {
      var ang = i / 60 * m.PI;
      ps.push(new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](2 * m.cos(ang), -2 * m.sin(ang)));
    }

    ps.push(new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](-2, 0), new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](-2, 4), new _Point__WEBPACK_IMPORTED_MODULE_0__["default"](2, 4));
    var platform = new d3.Shape(ps, 1);

    this.render = function (gl, specs) {
      // draw tube
      this.bindBuffers(gl); // colors

      gl.material.setDiffuseColor(gl, specs.macro_colorByChain ? this.chainColor : specs.nucleics_tubeColor); // render

      gl.drawElements(gl.TRIANGLES, this.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);

      if (this.partitions) {
        for (var i = 1, ii = this.partitions.length; i < ii; i++) {
          var p = this.partitions[i];
          loadPartition(gl, p); // render

          gl.drawElements(gl.TRIANGLES, p.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
        }
      } // draw ends


      gl.sphereBuffer.bindBuffers(gl);

      for (var i = 0; i < 2; i++) {
        var p = this.ends[i];
        var transform = m4.translate(m4.identity(), [p.x, p.y, p.z]);
        var radius = thickness / 2;
        m4.scale(transform, [radius, radius, radius]); // render

        gl.shader.setMatrixUniforms(gl, transform);
        gl.drawElements(gl.TRIANGLES, gl.sphereBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
      } // draw nucleotide handles


      gl.cylinderBuffer.bindBuffers(gl);

      for (var i = 0, ii = chain.length - 1; i < ii; i++) {
        var residue = chain[i];
        var p1 = residue.pPoint;
        var p2 = new _Atom__WEBPACK_IMPORTED_MODULE_1__["default"]('', residue.cp2.x, residue.cp2.y, residue.cp2.z);
        var height = 1.001 * p1.distance3D(p2);
        var scaleVector = [thickness / 4, height, thickness / 4];
        var transform = m4.translate(m4.identity(), [p1.x, p1.y, p1.z]);
        var y = [0, 1, 0];
        var ang = 0;
        var axis;
        var a2b = [p2.x - p1.x, p2.y - p1.y, p2.z - p1.z];

        if (p1.x === p2.x && p1.z === p2.z) {
          axis = [0, 0, 1];

          if (p1.y < p1.y) {
            ang = m.PI;
          }
        } else {
          ang = extensions.vec3AngleFrom(y, a2b);
          axis = v3.cross(y, a2b, []);
        }

        if (ang !== 0) {
          m4.rotate(transform, ang, axis);
        }

        m4.scale(transform, scaleVector);
        gl.shader.setMatrixUniforms(gl, transform);
        gl.drawArrays(gl.TRIANGLE_STRIP, 0, gl.cylinderBuffer.vertexPositionBuffer.numItems);
      } // draw nucleotide platforms


      platform.bindBuffers(gl); // colors

      if (specs.nucleics_residueColor === 'none' && !specs.macro_colorByChain) {
        gl.material.setDiffuseColor(gl, specs.nucleics_baseColor);
      }

      for (var i = 0, ii = chain.length - 1; i < ii; i++) {
        var residue = chain[i];
        var p2 = residue.cp2;
        var transform = m4.translate(m4.identity(), [p2.x, p2.y, p2.z]); // rotate to direction

        var y = [0, 1, 0];
        var ang = 0;
        var axis;
        var p3 = residue.cp3;

        if (p3) {
          var a2b = [p3.x - p2.x, p3.y - p2.y, p3.z - p2.z];

          if (p2.x === p3.x && p2.z === p3.z) {
            axis = [0, 0, 1];

            if (p2.y < p2.y) {
              ang = m.PI;
            }
          } else {
            ang = extensions.vec3AngleFrom(y, a2b);
            axis = v3.cross(y, a2b, []);
          }

          if (ang !== 0) {
            m4.rotate(transform, ang, axis);
          } // rotate to orientation


          var x = [1, 0, 0];
          var rM = m4.rotate(m4.identity([]), ang, axis);
          m4.multiplyVec3(rM, x);
          var p4 = residue.cp4;
          var p5 = residue.cp5;

          if (!(p4.y === p5.y && p4.z === p5.z)) {
            var pivot = [p5.x - p4.x, p5.y - p4.y, p5.z - p4.z];
            var ang2 = extensions.vec3AngleFrom(x, pivot);

            if (v3.dot(a2b, v3.cross(x, pivot)) < 0) {
              ang2 *= -1;
            }

            m4.rotateY(transform, ang2);
          } // color


          if (!specs.macro_colorByChain) {
            if (specs.nucleics_residueColor === 'shapely') {
              if (RESIDUE[residue.name]) {
                gl.material.setDiffuseColor(gl, RESIDUE[residue.name].shapelyColor);
              } else {
                gl.material.setDiffuseColor(gl, RESIDUE['*'].shapelyColor);
              }
            } else if (specs.nucleics_residueColor === 'rainbow') {
              gl.material.setDiffuseColor(gl, math.rainbowAt(i, ii, specs.macro_rainbowColors));
            }
          } // render


          gl.shader.setMatrixUniforms(gl, transform);
          gl.drawElements(gl.TRIANGLES, platform.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
        }
      }
    };
  };

  d3.Tube.prototype = new d3._Mesh();

  d3.CatmullTube = function (chains, thickness, cylinderResolution, horizontalResolution) {
    var chain = [];
    chains.push(chains[chains.length - 1]);

    for (var i = 0, ii = chains.length - 2; i <= ii; i++) {
      var p0 = chains[i == 0 ? 0 : i - 1];
      var p1 = chains[i + 0];
      var p2 = chains[i + 1];
      var p3 = chains[i == ii ? i + 1 : i + 2];
      var segments = [];

      for (var j = 0; j < horizontalResolution; j++) {
        var t = j / horizontalResolution;

        if (i == ii) {
          t = j / (horizontalResolution - 1);
        }

        var x = 0.5 * (2 * p1.x + (p2.x - p0.x) * t + (2 * p0.x - 5 * p1.x + 4 * p2.x - p3.x) * t * t + (3 * p1.x - p0.x - 3 * p2.x + p3.x) * t * t * t);
        var y = 0.5 * (2 * p1.y + (p2.y - p0.y) * t + (2 * p0.y - 5 * p1.y + 4 * p2.y - p3.y) * t * t + (3 * p1.y - p0.y - 3 * p2.y + p3.y) * t * t * t);
        var z = 0.5 * (2 * p1.z + (p2.z - p0.z) * t + (2 * p0.z - 5 * p1.z + 4 * p2.z - p3.z) * t * t + (3 * p1.z - p0.z - 3 * p2.z + p3.z) * t * t * t);
        var o = new _Atom__WEBPACK_IMPORTED_MODULE_1__["default"]('C', x, y, z);
        segments.push(o);
      }

      chain.push(segments);
    }

    var lineSegmentNum = chain[0].length;
    this.partitions = [];
    var currentPartition;
    this.ends = [];
    this.ends.push(chain[0][0]);
    this.ends.push(chain[chain.length - 1][0]); // calculate vertex and normal points

    var last = [1, 0, 0];

    for (var i = 0, ii = chain.length; i < ii; i++) {
      if (!currentPartition || currentPartition.positionData.length > 65000) {
        if (this.partitions.length > 0) {
          i--;
        }

        currentPartition = {
          count: 0,
          positionData: [],
          normalData: [],
          indexData: []
        };
        this.partitions.push(currentPartition);
      }

      var residue = chain[i];
      currentPartition.count++;
      var min = Infinity; // var p = new Atom('', chain[i].cp1.x, chain[i].cp1.y, chain[i].cp1.z);

      for (var j = 0; j < lineSegmentNum; j++) {
        var currentPoint = residue[j];
        var nextPoint;

        if (j === lineSegmentNum - 1) {
          if (i === chain.length - 1) {
            nextPoint = residue[j - 1];
          } else {
            nextPoint = chain[i + 1][0];
          }
        } else {
          nextPoint = residue[j + 1];
        }

        var axis = [nextPoint.x - currentPoint.x, nextPoint.y - currentPoint.y, nextPoint.z - currentPoint.z];
        v3.normalize(axis);

        if (i === chain.length - 1 && j === lineSegmentNum - 1) {
          v3.scale(axis, -1);
        }

        var startVector = v3.cross(axis, last, []);
        v3.normalize(startVector);
        v3.scale(startVector, thickness / 2);
        var rotator = new PointRotator(startVector, axis, 2 * m.PI / cylinderResolution);

        for (var k = 0, kk = cylinderResolution; k < kk; k++) {
          var use = rotator.rotate();

          if (k === m.floor(cylinderResolution / 4)) {
            last = [use[0], use[1], use[2]];
          }

          currentPartition.normalData.push(use[0], use[1], use[2]);
          currentPartition.positionData.push(currentPoint.x + use[0], currentPoint.y + use[1], currentPoint.z + use[2]);
        }
      }
    } // build mesh connectivity


    for (var n = 0, nn = this.partitions.length; n < nn; n++) {
      var currentPartition = this.partitions[n];

      for (var i = 0, ii = currentPartition.count - 1; i < ii; i++) {
        var indexStart = i * lineSegmentNum * cylinderResolution;

        for (var j = 0, jj = lineSegmentNum; j < jj; j++) {
          var segmentIndexStart = indexStart + j * cylinderResolution;

          for (var k = 0; k <= cylinderResolution; k++) {
            var sk = segmentIndexStart + k % cylinderResolution;
            currentPartition.indexData.push(sk, sk + cylinderResolution);
          }
        }
      }
    }

    this.storeData(this.partitions[0].positionData, this.partitions[0].normalData, this.partitions[0].indexData);
  };

  var _ = d3.CatmullTube.prototype = new d3._Mesh();

  _.render = function (gl, specs) {
    // draw tube
    this.bindBuffers(gl); // render

    for (var i = 0, ii = this.partitions.length; i < ii; i++) {
      var p = this.partitions[i];
      loadPartition(gl, p); // render

      gl.drawElements(gl.TRIANGLE_STRIP, p.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
    } // draw ends


    gl.sphereBuffer.bindBuffers(gl);

    for (var i = 0; i < 2; i++) {
      var p = this.ends[i];
      var transform = m4.translate(m4.identity(), [p.x, p.y, p.z]);
      var radius = specs.proteins_tubeThickness / 2;
      m4.scale(transform, [radius, radius, radius]); // render

      gl.shader.setMatrixUniforms(gl, transform);
      gl.drawElements(gl.TRIANGLES, gl.sphereBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
    }
  };
})(_extensions__WEBPACK_IMPORTED_MODULE_4__, _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__["RESIDUE"], d3, m, _lib__WEBPACK_IMPORTED_MODULE_6__["mat4"], _lib__WEBPACK_IMPORTED_MODULE_6__["vec3"], _math__WEBPACK_IMPORTED_MODULE_5__);

(function (d3, v3, undefined) {
  'use strict';

  d3.UnitCell = function (unitCellVectors) {
    this.unitCell = unitCellVectors;
    var positionData = [];
    var normalData = []; // calculate vertex and normal points

    var pushSide = function pushSide(p1, p2, p3, p4) {
      positionData.push(p1[0], p1[1], p1[2]);
      positionData.push(p2[0], p2[1], p2[2]);
      positionData.push(p3[0], p3[1], p3[2]);
      positionData.push(p4[0], p4[1], p4[2]); // push 0s for normals so shader gives them full color

      for (var i = 0; i < 4; i++) {
        normalData.push(0, 0, 0);
      }
    };

    pushSide(unitCellVectors.o, unitCellVectors.x, unitCellVectors.xy, unitCellVectors.y);
    pushSide(unitCellVectors.o, unitCellVectors.y, unitCellVectors.yz, unitCellVectors.z);
    pushSide(unitCellVectors.o, unitCellVectors.z, unitCellVectors.xz, unitCellVectors.x);
    pushSide(unitCellVectors.yz, unitCellVectors.y, unitCellVectors.xy, unitCellVectors.xyz);
    pushSide(unitCellVectors.xyz, unitCellVectors.xz, unitCellVectors.z, unitCellVectors.yz);
    pushSide(unitCellVectors.xy, unitCellVectors.x, unitCellVectors.xz, unitCellVectors.xyz); // build mesh connectivity

    var indexData = [];

    for (var i = 0; i < 6; i++) {
      var start = i * 4; // sides

      indexData.push(start, start + 1, start + 1, start + 2, start + 2, start + 3, start + 3, start);
    }

    this.storeData(positionData, normalData, indexData);
  };

  var _ = d3.UnitCell.prototype = new d3._Mesh();

  _.render = function (gl, specs) {
    gl.shader.setMatrixUniforms(gl);
    this.bindBuffers(gl); // colors

    gl.material.setDiffuseColor(gl, specs.shapes_color);
    gl.lineWidth(specs.shapes_lineWidth); // render

    gl.drawElements(gl.LINES, this.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
  };
})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__["vec3"]);

(function (d3, math, document, undefined) {
  'use strict';

  d3.Framebuffer = function () {};

  var _ = d3.Framebuffer.prototype;

  _.init = function (gl) {
    this.framebuffer = gl.createFramebuffer();
  };

  _.setColorTexture = function (gl, texture, attachment) {
    var i = attachment === undefined ? 0 : attachment;
    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, texture, 0);
    gl.bindTexture(gl.TEXTURE_2D, null);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  };

  _.setColorRenderbuffer = function (gl, renderbuffer, attachment) {
    var i = attachment === undefined ? 0 : attachment;
    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.RENDERBUFFER, renderbuffer);
    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  };

  _.setDepthTexture = function (gl, texture) {
    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, texture, 0);
    gl.bindTexture(gl.TEXTURE_2D, null);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  };

  _.setDepthRenderbuffer = function (gl, renderbuffer) {
    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);
    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  };

  _.bind = function (gl, width, height) {
    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
    gl.viewport(0, 0, width, height);
  };
})(d3, _math__WEBPACK_IMPORTED_MODULE_5__, document);

(function (d3, math, document, undefined) {
  'use strict';

  d3.Renderbuffer = function () {};

  var _ = d3.Renderbuffer.prototype;

  _.init = function (gl, format) {
    this.renderbuffer = gl.createRenderbuffer();
    this.format = format;
  };

  _.setParameter = function (gl, width, height) {
    this.width = width;
    this.height = height;
    gl.bindRenderbuffer(gl.RENDERBUFFER, this.renderbuffer);
    gl.renderbufferStorage(gl.RENDERBUFFER, this.format, this.width, this.height);
    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
  };
})(d3, _math__WEBPACK_IMPORTED_MODULE_5__, document);

(function (math, d3, m, undefined) {
  'use strict';

  d3.SSAO = function () {};

  var _ = d3.SSAO.prototype;

  _.initSampleKernel = function (kernelSize) {
    var sampleKernel = [];

    for (var i = 0; i < kernelSize; i++) {
      var x = m.random() * 2.0 - 1.0;
      var y = m.random() * 2.0 - 1.0;
      var z = m.random() * 2.0 - 1.0;
      var scale = i / kernelSize;
      var scale2 = scale * scale;
      var lerp = 0.1 + scale2 * 0.9;
      x *= lerp;
      y *= lerp;
      z *= lerp;
      sampleKernel.push(x, y, z);
    }

    this.sampleKernel = new Float32Array(sampleKernel);
  };

  _.initNoiseTexture = function (gl) {
    var noiseSize = 16;
    var ssaoNoise = [];

    for (var i = 0; i < noiseSize; i++) {
      ssaoNoise.push(m.random() * 2 - 1);
      ssaoNoise.push(m.random() * 2 - 1);
      ssaoNoise.push(0.0);
    }

    this.noiseTexture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, this.noiseTexture);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 4, 4, 0, gl.RGB, gl.FLOAT, new Float32Array(ssaoNoise));
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
    gl.bindTexture(gl.TEXTURE_2D, null);
  };
})(_math__WEBPACK_IMPORTED_MODULE_5__, d3, m);

(function (d3, math, document, undefined) {
  'use strict';

  d3.Texture = function () {};

  var _ = d3.Texture.prototype;

  _.init = function (gl, type, internalFormat, format) {
    this.texture = gl.createTexture();
    this.type = type;
    this.internalFormat = internalFormat;
    this.format = format !== undefined ? format : internalFormat;
    gl.bindTexture(gl.TEXTURE_2D, this.texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.bindTexture(gl.TEXTURE_2D, null);
  };

  _.setParameter = function (gl, width, height) {
    this.width = width;
    this.height = height; // set texture dimension

    gl.bindTexture(gl.TEXTURE_2D, this.texture);
    gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, this.width, this.height, 0, this.format, this.type, null);
    gl.bindTexture(gl.TEXTURE_2D, null);
  };
})(d3, _math__WEBPACK_IMPORTED_MODULE_5__, document);

(function (d3, m3, m4, document, undefined) {
  'use strict';

  d3._Shader = function () {};

  var _ = d3._Shader.prototype;

  _.useShaderProgram = function (gl) {
    gl.useProgram(this.gProgram);
    gl.shader = this;
  };

  _.init = function (gl) {
    var vertexShader = this.getShader(gl, 'vertex-shader');

    if (!vertexShader) {
      vertexShader = this.loadDefaultVertexShader(gl);
    }

    var fragmentShader = this.getShader(gl, 'fragment-shader');

    if (!fragmentShader) {
      fragmentShader = this.loadDefaultFragmentShader(gl);
    }

    this.gProgram = gl.createProgram();
    gl.attachShader(this.gProgram, vertexShader);
    gl.attachShader(this.gProgram, fragmentShader);
    this.onShaderAttached(gl);
    gl.linkProgram(this.gProgram);

    if (!gl.getProgramParameter(this.gProgram, gl.LINK_STATUS)) {
      alert('Could not initialize shaders: ' + gl.getProgramInfoLog(this.gProgram));
    }

    gl.useProgram(this.gProgram);
    this.initUniformLocations(gl);
    gl.useProgram(null);
  };

  _.onShaderAttached = function (gl) {
    // set vertex attributes explicitly
    this.vertexPositionAttribute = 0;
    this.vertexNormalAttribute = 1;
    gl.bindAttribLocation(this.gProgram, this.vertexPositionAttribute, 'a_vertex_position');
    gl.bindAttribLocation(this.gProgram, this.vertexNormalAttribute, 'a_vertex_normal');
  };

  _.getShaderFromStr = function (gl, shaderType, strSrc) {
    var shader = gl.createShader(shaderType);
    gl.shaderSource(shader, strSrc);
    gl.compileShader(shader);

    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
      alert(shaderScript.type + ' ' + gl.getShaderInfoLog(shader));
      gl.deleteShader(shader);
      return undefined;
    }

    return shader;
  };

  _.enableAttribsArray = function (gl) {
    gl.enableVertexAttribArray(this.vertexPositionAttribute);
  };

  _.disableAttribsArray = function (gl) {
    gl.disableVertexAttribArray(this.vertexPositionAttribute);
  };

  _.getShader = function (gl, id) {
    var shaderScript = document.getElementById(id);

    if (!shaderScript) {
      return undefined;
    }

    var sb = [];
    var k = shaderScript.firstChild;

    while (k) {
      if (k.nodeType === 3) {
        sb.push(k.textContent);
      }

      k = k.nextSibling;
    }

    var sdrSrc = sb.join('');
    var shader;

    if (shaderScript.type === 'x-shader/x-fragment') {
      shader = this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sdrSrc);
    } else if (shaderScript.type === 'x-shader/x-vertex') {
      shader = this.getShaderFromStr(gl, gl.VERTEX_SHADER, sdrSrc);
    } else {
      return undefined;
    }

    return shader;
  };

  _.initUniformLocations = function (gl) {
    this.modelViewMatrixUniform = gl.getUniformLocation(this.gProgram, 'u_model_view_matrix');
    this.projectionMatrixUniform = gl.getUniformLocation(this.gProgram, 'u_projection_matrix');
  };

  _.loadDefaultVertexShader = function (gl) {};

  _.loadDefaultFragmentShader = function (gl) {};

  _.setMatrixUniforms = function (gl, modelMatrix) {
    if (modelMatrix === undefined) {
      this.setModelViewMatrix(gl, gl.modelViewMatrix);
    } else {
      this.setModelViewMatrix(gl, m4.multiply(gl.modelViewMatrix, modelMatrix, []));
    }
  };

  _.setProjectionMatrix = function (gl, matrix) {
    gl.uniformMatrix4fv(this.projectionMatrixUniform, false, matrix);
  };

  _.setModelViewMatrix = function (gl, mvMatrix) {
    gl.uniformMatrix4fv(this.modelViewMatrixUniform, false, mvMatrix);
  };

  _.setMaterialAmbientColor = function (gl, ambient) {};

  _.setMaterialDiffuseColor = function (gl, diffuse) {};

  _.setMaterialSpecularColor = function (gl, specular) {};

  _.setMaterialShininess = function (gl, shininess) {};

  _.setMaterialAlpha = function (gl, alpha) {};
})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__["mat3"], _lib__WEBPACK_IMPORTED_MODULE_6__["mat4"], document);

(function (d3, m3, m4, document, undefined) {
  'use strict';

  d3.FXAAShader = function () {};

  var _super = d3._Shader.prototype;

  var _ = d3.FXAAShader.prototype = new d3._Shader();

  _.initUniformLocations = function (gl) {
    // assign uniform properties
    _super.initUniformLocations.call(this, gl);

    this.buffersizeUniform = gl.getUniformLocation(this.gProgram, 'u_buffersize');
    this.antialiasUniform = gl.getUniformLocation(this.gProgram, 'u_antialias');
    this.edgeThresholdUniform = gl.getUniformLocation(this.gProgram, 'u_edge_threshold');
    this.edgeThresholdMinUniform = gl.getUniformLocation(this.gProgram, 'u_edge_threshold_min');
    this.searchStepsUniform = gl.getUniformLocation(this.gProgram, 'u_search_steps');
    this.searchThresholdUniform = gl.getUniformLocation(this.gProgram, 'u_search_threshold');
    this.subpixCapUniform = gl.getUniformLocation(this.gProgram, 'u_subpix_cap');
    this.subpixTrimUniform = gl.getUniformLocation(this.gProgram, 'u_subpix_trim');
  };

  _.setBuffersize = function (gl, width, height) {
    gl.uniform2f(this.buffersizeUniform, width, height);
  };

  _.setAntialias = function (gl, val) {
    gl.uniform1f(this.antialiasUniform, val);
  };

  _.setEdgeThreshold = function (gl, val) {
    gl.uniform1f(this.edgeThresholdUniform, val);
  };

  _.setEdgeThresholdMin = function (gl, val) {
    gl.uniform1f(this.edgeThresholdMinUniform, val);
  };

  _.setSearchSteps = function (gl, val) {
    gl.uniform1i(this.searchStepsUniform, val);
  };

  _.setSearchThreshold = function (gl, val) {
    gl.uniform1f(this.searchThresholdUniform, val);
  };

  _.setSubpixCap = function (gl, val) {
    gl.uniform1f(this.subpixCapUniform, val);
  };

  _.setSubpixTrim = function (gl, val) {
    gl.uniform1f(this.subpixTrimUniform, val);
  };

  _.loadDefaultVertexShader = function (gl) {
    var sb = ['precision mediump float;', // attributes set when rendering objects
    'attribute vec3 a_vertex_position;', 'varying vec2 v_texcoord;', 'void main() {', 'gl_Position = vec4(a_vertex_position, 1.);', 'v_texcoord = a_vertex_position.xy * .5 + .5;', '}'].join('');
    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);
  };

  _.loadDefaultFragmentShader = function (gl) {
    var sb = ['precision mediump float;', 'const int fxaaMaxSearchSteps = 128;', 'uniform float u_edge_threshold;', 'uniform float u_edge_threshold_min;', 'uniform int u_search_steps;', 'uniform float u_search_threshold;', 'uniform float u_subpix_cap;', 'uniform float u_subpix_trim;', 'uniform sampler2D u_sampler0;', 'uniform vec2 u_buffersize;', 'uniform bool u_antialias;', 'varying vec2 v_texcoord;', 'float FxaaLuma(vec3 rgb) {', 'return rgb.y * (0.587/0.299) + rgb.x;', '}', 'vec3 FxaaLerp3(vec3 a, vec3 b, float amountOfA) {', 'return (vec3(-amountOfA) * b) + ((a * vec3(amountOfA)) + b);', '}', 'vec4 FxaaTexOff(sampler2D tex, vec2 pos, vec2 off, vec2 rcpFrame) {', 'return texture2D(tex, pos + off * rcpFrame);', '}', 'vec3 FxaaPixelShader(vec2 pos, sampler2D tex, vec2 rcpFrame) {', 'float subpix_trim_scale = (1.0/(1.0 - u_subpix_trim));', 'vec3 rgbN = FxaaTexOff(tex, pos.xy, vec2( 0.,-1.), rcpFrame).xyz;', 'vec3 rgbW = FxaaTexOff(tex, pos.xy, vec2(-1., 0.), rcpFrame).xyz;', 'vec3 rgbM = FxaaTexOff(tex, pos.xy, vec2( 0., 0.), rcpFrame).xyz;', 'vec3 rgbE = FxaaTexOff(tex, pos.xy, vec2( 1., 0.), rcpFrame).xyz;', 'vec3 rgbS = FxaaTexOff(tex, pos.xy, vec2( 0., 1.), rcpFrame).xyz;', 'float lumaN = FxaaLuma(rgbN);', 'float lumaW = FxaaLuma(rgbW);', 'float lumaM = FxaaLuma(rgbM);', 'float lumaE = FxaaLuma(rgbE);', 'float lumaS = FxaaLuma(rgbS);', 'float rangeMin = min(lumaM, min(min(lumaN, lumaW), min(lumaS, lumaE)));', 'float rangeMax = max(lumaM, max(max(lumaN, lumaW), max(lumaS, lumaE)));', 'float range = rangeMax - rangeMin;', 'if(range < max(u_edge_threshold_min, rangeMax * u_edge_threshold)) {', 'return rgbM;', '}', 'vec3 rgbL = rgbN + rgbW + rgbM + rgbE + rgbS;', 'float lumaL = (lumaN + lumaW + lumaE + lumaS) * 0.25;', 'float rangeL = abs(lumaL - lumaM);', 'float blendL = max(0.0, (rangeL / range) - u_subpix_trim) * subpix_trim_scale;', 'blendL = min(u_subpix_cap, blendL);', 'vec3 rgbNW = FxaaTexOff(tex, pos.xy, vec2(-1.,-1.), rcpFrame).xyz;', 'vec3 rgbNE = FxaaTexOff(tex, pos.xy, vec2( 1.,-1.), rcpFrame).xyz;', 'vec3 rgbSW = FxaaTexOff(tex, pos.xy, vec2(-1., 1.), rcpFrame).xyz;', 'vec3 rgbSE = FxaaTexOff(tex, pos.xy, vec2( 1., 1.), rcpFrame).xyz;', 'rgbL += (rgbNW + rgbNE + rgbSW + rgbSE);', 'rgbL *= vec3(1.0/9.0);', 'float lumaNW = FxaaLuma(rgbNW);', 'float lumaNE = FxaaLuma(rgbNE);', 'float lumaSW = FxaaLuma(rgbSW);', 'float lumaSE = FxaaLuma(rgbSE);', 'float edgeVert =', 'abs((0.25 * lumaNW) + (-0.5 * lumaN) + (0.25 * lumaNE)) +', 'abs((0.50 * lumaW ) + (-1.0 * lumaM) + (0.50 * lumaE )) +', 'abs((0.25 * lumaSW) + (-0.5 * lumaS) + (0.25 * lumaSE));', 'float edgeHorz =', 'abs((0.25 * lumaNW) + (-0.5 * lumaW) + (0.25 * lumaSW)) +', 'abs((0.50 * lumaN ) + (-1.0 * lumaM) + (0.50 * lumaS )) +', 'abs((0.25 * lumaNE) + (-0.5 * lumaE) + (0.25 * lumaSE));', 'bool horzSpan = edgeHorz >= edgeVert;', 'float lengthSign = horzSpan ? -rcpFrame.y : -rcpFrame.x;', 'if(!horzSpan) {', 'lumaN = lumaW;', 'lumaS = lumaE;', '}', 'float gradientN = abs(lumaN - lumaM);', 'float gradientS = abs(lumaS - lumaM);', 'lumaN = (lumaN + lumaM) * 0.5;', 'lumaS = (lumaS + lumaM) * 0.5;', 'if (gradientN < gradientS) {', 'lumaN = lumaS;', 'lumaN = lumaS;', 'gradientN = gradientS;', 'lengthSign *= -1.0;', '}', 'vec2 posN;', 'posN.x = pos.x + (horzSpan ? 0.0 : lengthSign * 0.5);', 'posN.y = pos.y + (horzSpan ? lengthSign * 0.5 : 0.0);', 'gradientN *= u_search_threshold;', 'vec2 posP = posN;', 'vec2 offNP = horzSpan ? vec2(rcpFrame.x, 0.0) : vec2(0.0, rcpFrame.y);', 'float lumaEndN = lumaN;', 'float lumaEndP = lumaN;', 'bool doneN = false;', 'bool doneP = false;', 'posN += offNP * vec2(-1.0, -1.0);', 'posP += offNP * vec2( 1.0,  1.0);', 'for(int i = 0; i < fxaaMaxSearchSteps; i++) {', 'if(i >= u_search_steps) break;', 'if(!doneN) {', 'lumaEndN = FxaaLuma(texture2D(tex, posN.xy).xyz);', '}', 'if(!doneP) {', 'lumaEndP = FxaaLuma(texture2D(tex, posP.xy).xyz);', '}', 'doneN = doneN || (abs(lumaEndN - lumaN) >= gradientN);', 'doneP = doneP || (abs(lumaEndP - lumaN) >= gradientN);', 'if(doneN && doneP) {', 'break;', '}', 'if(!doneN) {', 'posN -= offNP;', '}', 'if(!doneP) {', 'posP += offNP;', '}', '}', 'float dstN = horzSpan ? pos.x - posN.x : pos.y - posN.y;', 'float dstP = horzSpan ? posP.x - pos.x : posP.y - pos.y;', 'bool directionN = dstN < dstP;', 'lumaEndN = directionN ? lumaEndN : lumaEndP;', 'if(((lumaM - lumaN) < 0.0) == ((lumaEndN - lumaN) < 0.0)) {', 'lengthSign = 0.0;', '}', 'float spanLength = (dstP + dstN);', 'dstN = directionN ? dstN : dstP;', 'float subPixelOffset = (0.5 + (dstN * (-1.0/spanLength))) * lengthSign;', 'vec3 rgbF = texture2D(tex, vec2(', 'pos.x + (horzSpan ? 0.0 : subPixelOffset),', 'pos.y + (horzSpan ? subPixelOffset : 0.0))).xyz;', 'return FxaaLerp3(rgbL, rgbF, blendL);', '}', 'void main() {', 'gl_FragColor = texture2D(u_sampler0, v_texcoord);', 'if(u_antialias) {', 'gl_FragColor.xyz = FxaaPixelShader(v_texcoord, u_sampler0, 1. / u_buffersize).xyz;', '}', '}'].join('\n');
    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);
  };
})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__["mat3"], _lib__WEBPACK_IMPORTED_MODULE_6__["mat4"], document);

(function (d3, m3, m4, document, undefined) {
  'use strict';

  d3.LabelShader = function () {};

  var _super = d3._Shader.prototype;

  var _ = d3.LabelShader.prototype = new d3._Shader();

  _.initUniformLocations = function (gl) {
    _super.initUniformLocations.call(this, gl);

    this.dimensionUniform = gl.getUniformLocation(this.gProgram, 'u_dimension');
  };

  _.onShaderAttached = function (gl) {
    _super.onShaderAttached.call(this, gl);

    this.vertexTexCoordAttribute = 2;
    gl.bindAttribLocation(this.gProgram, this.vertexTexCoordAttribute, 'a_vertex_texcoord');
  };

  _.loadDefaultVertexShader = function (gl) {
    var sb = ['precision mediump float;', // attributes set when rendering objects
    'attribute vec3 a_vertex_position;', 'attribute vec3 a_vertex_normal;', 'attribute vec2 a_vertex_texcoord;', // matrices set by gl.setMatrixUniforms
    'uniform mat4 u_model_view_matrix;', 'uniform mat4 u_projection_matrix;', 'uniform vec2 u_dimension;', // sent to the fragment shader
    'varying vec2 v_texcoord;', 'void main() {', 'gl_Position = u_model_view_matrix * vec4(a_vertex_position, 1.);', 'vec4 depth_pos = vec4(gl_Position);', 'depth_pos.z += a_vertex_normal.z;', 'gl_Position = u_projection_matrix * gl_Position;', 'depth_pos = u_projection_matrix * depth_pos;', 'gl_Position /= gl_Position.w;', 'gl_Position.xy += a_vertex_normal.xy / u_dimension * 2.;', 'gl_Position.z = depth_pos.z / depth_pos.w;', 'v_texcoord = a_vertex_texcoord;', '}'].join('');
    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);
  };

  _.loadDefaultFragmentShader = function (gl) {
    var sb = [// set macro for depth mmap texture
    gl.depthTextureExt ? '#define CWC_DEPTH_TEX\n' : '', // set float precision
    'precision mediump float;', // texture for draw text nor shadow map
    'uniform sampler2D u_image;', // from the vertex shader
    'varying vec2 v_texcoord;', 'void main(void) {', 'gl_FragColor = texture2D(u_image, v_texcoord);', '}'].join('');
    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);
  };

  _.enableAttribsArray = function (gl) {
    _super.enableAttribsArray.call(this, gl);

    gl.enableVertexAttribArray(this.vertexNormalAttribute);
    gl.enableVertexAttribArray(this.vertexTexCoordAttribute);
  };

  _.disableAttribsArray = function (gl) {
    _super.disableAttribsArray.call(this, gl);

    gl.disableVertexAttribArray(this.vertexNormalAttribute);
    gl.disableVertexAttribArray(this.vertexTexCoordAttribute);
  };

  _.setDimension = function (gl, width, height) {
    gl.uniform2f(this.dimensionUniform, width, height);
  };
})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__["mat3"], _lib__WEBPACK_IMPORTED_MODULE_6__["mat4"], document);

(function (d3, m3, m4, document, undefined) {
  'use strict';

  d3.LightingShader = function () {};

  var _super = d3._Shader.prototype;

  var _ = d3.LightingShader.prototype = new d3._Shader();

  _.initUniformLocations = function (gl) {
    _super.initUniformLocations.call(this, gl); // assign uniform properties


    this.positionSampleUniform = gl.getUniformLocation(this.gProgram, 'u_position_sample');
    this.colorSampleUniform = gl.getUniformLocation(this.gProgram, 'u_color_sample');
    this.ssaoSampleUniform = gl.getUniformLocation(this.gProgram, 'u_ssao_sample');
    this.outlineSampleUniform = gl.getUniformLocation(this.gProgram, 'u_outline_sample');
  };

  _.loadDefaultVertexShader = function (gl) {
    var sb = ['precision mediump float;', // attributes set when rendering objects
    'attribute vec3 a_vertex_position;', // sent to the fragment shader
    'varying vec2 v_texcoord;', 'void main() {', 'gl_Position = vec4(a_vertex_position, 1.);', 'v_texcoord = a_vertex_position.xy * .5 + .5;', '}'].join('');
    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);
  };

  _.loadDefaultFragmentShader = function (gl) {
    var sb = [// set float precision
    'precision mediump float;', 'uniform sampler2D u_position_sample;', 'uniform sampler2D u_color_sample;', 'uniform sampler2D u_ssao_sample;', 'uniform sampler2D u_outline_sample;', 'varying vec2 v_texcoord;', 'void main() {', 'vec4 position = texture2D(u_position_sample, v_texcoord);', 'vec4 color = texture2D(u_color_sample, v_texcoord);', 'vec4 ao = texture2D(u_ssao_sample, v_texcoord);', 'float outline = texture2D(u_outline_sample, v_texcoord).r;', // skip background color
    'if(position.w == 0. && outline == 1.) {', // 'gl_FragColor = vec4(0., 0., 0., 1.);',
    'return;', '}', 'gl_FragColor = vec4(color.rgb * ao.r * outline, 1.);', '}'].join('');
    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);
  };
})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__["mat3"], _lib__WEBPACK_IMPORTED_MODULE_6__["mat4"], document);

(function (d3, m3, m4, document, undefined) {
  'use strict';

  d3.NormalShader = function () {};

  var _super = d3._Shader.prototype;

  var _ = d3.NormalShader.prototype = new d3._Shader();

  _.initUniformLocations = function (gl) {
    _super.initUniformLocations.call(this, gl); // assign uniform properties


    this.normalMatrixUniform = gl.getUniformLocation(this.gProgram, 'u_normal_matrix');
  };

  _.loadDefaultVertexShader = function (gl) {
    var sb = ['precision mediump float;', // attributes set when rendering objects
    'attribute vec3 a_vertex_position;', 'attribute vec3 a_vertex_normal;', // matrices set by gl.setMatrixUniforms
    'uniform mat4 u_model_view_matrix;', 'uniform mat4 u_projection_matrix;', 'uniform mat3 u_normal_matrix;', // sent to the fragment shader
    'varying vec3 v_normal;', 'void main() {', 'v_normal = length(a_vertex_normal)==0. ? a_vertex_normal : u_normal_matrix * a_vertex_normal;', 'gl_Position = u_projection_matrix * u_model_view_matrix * vec4(a_vertex_position, 1.);', '}'].join('');
    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);
  };

  _.loadDefaultFragmentShader = function (gl) {
    var sb = [// set float precision
    'precision mediump float;', 'varying vec3 v_normal;', 'void main(void) {', 'vec3 normal = length(v_normal)==0. ? vec3(0., 0., 1.) : normalize(v_normal);', 'gl_FragColor = vec4(normal, 0.);', '}'].join('');
    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);
  };

  _.enableAttribsArray = function (gl) {
    _super.enableAttribsArray.call(this, gl);

    gl.enableVertexAttribArray(this.vertexNormalAttribute);
  };

  _.disableAttribsArray = function (gl) {
    _super.disableAttribsArray.call(this, gl);

    gl.disableVertexAttribArray(this.vertexNormalAttribute);
  };

  _.setModelViewMatrix = function (gl, mvMatrix) {
    _super.setModelViewMatrix.call(this, gl, mvMatrix); // create the normal matrix and push it to the graphics card


    var normalMatrix = m3.transpose(m4.toInverseMat3(mvMatrix, []));
    gl.uniformMatrix3fv(this.normalMatrixUniform, false, normalMatrix);
  };
})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__["mat3"], _lib__WEBPACK_IMPORTED_MODULE_6__["mat4"], document);

(function (d3, m3, m4, document, undefined) {
  'use strict';

  d3.OutlineShader = function () {};

  var _super = d3._Shader.prototype;

  var _ = d3.OutlineShader.prototype = new d3._Shader();

  _.initUniformLocations = function (gl) {
    _super.initUniformLocations.call(this, gl);

    this.normalSampleUniform = gl.getUniformLocation(this.gProgram, 'u_normal_sample');
    this.depthSampleUniform = gl.getUniformLocation(this.gProgram, 'u_depth_sample');
    this.gbufferTextureSizeUniform = gl.getUniformLocation(this.gProgram, 'u_gbuffer_texture_size');
    this.normalThresholdUniform = gl.getUniformLocation(this.gProgram, 'u_normal_threshold');
    this.depthThresholdUniform = gl.getUniformLocation(this.gProgram, 'u_depth_threshold');
    this.thicknessUniform = gl.getUniformLocation(this.gProgram, 'u_thickness');
  };

  _.loadDefaultVertexShader = function (gl) {
    var sb = ['precision mediump float;', // attributes set when rendering objects
    'attribute vec3 a_vertex_position;', 'varying vec2 v_texcoord;', 'void main() {', 'gl_Position = vec4(a_vertex_position, 1.);', 'v_texcoord = a_vertex_position.xy * .5 + .5;', '}'].join('');
    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);
  };

  _.loadDefaultFragmentShader = function (gl) {
    var sb = [// set float precision
    'precision mediump float;', 'uniform sampler2D u_normal_sample;', 'uniform sampler2D u_depth_sample;', 'uniform float u_normal_threshold;', 'uniform float u_depth_threshold;', 'uniform float u_thickness;', 'uniform vec2 u_gbuffer_texture_size;', 'varying vec2 v_texcoord;', 'void main() {', 'vec3 normal = texture2D(u_normal_sample, v_texcoord).xyz;', 'float depth = texture2D(u_depth_sample, v_texcoord).r;', // check background pixel
    // 'if(depth == 1.) {',
    // 	'return;',
    // '}',
    'vec2 texelSize = u_thickness/u_gbuffer_texture_size * .5;', 'vec2 offsets[8];', 'offsets[0] = vec2(-texelSize.x, -texelSize.y);', 'offsets[1] = vec2(-texelSize.x, 0);', 'offsets[2] = vec2(-texelSize.x, texelSize.y);', 'offsets[3] = vec2(0, -texelSize.y);', 'offsets[4] = vec2(0,  texelSize.y);', 'offsets[5] = vec2(texelSize.x, -texelSize.y);', 'offsets[6] = vec2(texelSize.x, 0);', 'offsets[7] = vec2(texelSize.x, texelSize.y);', 'float edge = 0.;', 'for (int i = 0; i < 8; i++) {', 'vec3 sampleNorm = texture2D(u_normal_sample, v_texcoord + offsets[i]).xyz;', 'if(normal == vec3(.0, .0, .0)) {', 'if(sampleNorm != vec3(.0, .0, .0)) {', 'edge = 1.0;', 'break;', '}', 'continue;', '}', 'if (dot(sampleNorm, normal) < u_normal_threshold) {', 'edge = 1.0;', 'break;', '}', 'float sampleDepth = texture2D(u_depth_sample, v_texcoord + offsets[i]).r;', 'if (abs(sampleDepth - depth) > u_depth_threshold) {', 'edge = 1.0;', 'break;', '}', '}', 'edge = 1. - edge;', 'gl_FragColor = vec4(edge, edge, edge, 1.);', '}'].join('');
    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);
  };

  _.setGbufferTextureSize = function (gl, width, height) {
    gl.uniform2f(this.gbufferTextureSizeUniform, width, height);
  };

  _.setNormalThreshold = function (gl, value) {
    gl.uniform1f(this.normalThresholdUniform, value);
  };

  _.setDepthThreshold = function (gl, value) {
    gl.uniform1f(this.depthThresholdUniform, value);
  };

  _.setThickness = function (gl, value) {
    gl.uniform1f(this.thicknessUniform, value);
  };
})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__["mat3"], _lib__WEBPACK_IMPORTED_MODULE_6__["mat4"], document);

(function (d3, m3, m4, document, undefined) {
  'use strict';

  d3.PhongShader = function () {};

  var _super = d3._Shader.prototype;

  var _ = d3.PhongShader.prototype = new d3._Shader();

  _.initUniformLocations = function (gl) {
    _super.initUniformLocations.call(this, gl); // assign uniform properties


    this.shadowUniform = gl.getUniformLocation(this.gProgram, 'u_shadow');
    this.flatColorUniform = gl.getUniformLocation(this.gProgram, 'u_flat_color');
    this.normalMatrixUniform = gl.getUniformLocation(this.gProgram, 'u_normal_matrix');
    this.lightModelViewMatrixUniform = gl.getUniformLocation(this.gProgram, 'u_light_model_view_matrix');
    this.lightProjectionMatrixUniform = gl.getUniformLocation(this.gProgram, 'u_light_projection_matrix');
    this.lightDiffuseColorUniform = gl.getUniformLocation(this.gProgram, 'u_light_diffuse_color');
    this.lightSpecularColorUniform = gl.getUniformLocation(this.gProgram, 'u_light_specular_color');
    this.lightDirectionUniform = gl.getUniformLocation(this.gProgram, 'u_light_direction');
    this.materialAmbientColorUniform = gl.getUniformLocation(this.gProgram, 'u_material_ambient_color');
    this.materialDiffuseColorUniform = gl.getUniformLocation(this.gProgram, 'u_material_diffuse_color');
    this.materialSpecularColorUniform = gl.getUniformLocation(this.gProgram, 'u_material_specular_color');
    this.materialShininessUniform = gl.getUniformLocation(this.gProgram, 'u_material_shininess');
    this.materialAlphaUniform = gl.getUniformLocation(this.gProgram, 'u_material_alpha');
    this.fogModeUniform = gl.getUniformLocation(this.gProgram, 'u_fog_mode');
    this.fogColorUniform = gl.getUniformLocation(this.gProgram, 'u_fog_color');
    this.fogStartUniform = gl.getUniformLocation(this.gProgram, 'u_fog_start');
    this.fogEndUniform = gl.getUniformLocation(this.gProgram, 'u_fog_end');
    this.fogDensityUniform = gl.getUniformLocation(this.gProgram, 'u_fog_density'); // texture for shadow map

    this.shadowDepthSampleUniform = gl.getUniformLocation(this.gProgram, 'u_shadow_depth_sample');
    this.shadowTextureSizeUniform = gl.getUniformLocation(this.gProgram, 'u_shadow_texture_size');
    this.shadowIntensityUniform = gl.getUniformLocation(this.gProgram, 'u_shadow_intensity'); // gamma correction

    this.gammaCorrectionUniform = gl.getUniformLocation(this.gProgram, 'u_gamma_inverted'); // point size

    this.pointSizeUniform = gl.getUniformLocation(this.gProgram, 'u_point_size');
  };

  _.loadDefaultVertexShader = function (gl) {
    var sb = ['precision mediump float;', // attributes set when rendering objects
    'attribute vec3 a_vertex_position;', 'attribute vec3 a_vertex_normal;', // scene uniforms
    'uniform vec3 u_light_diffuse_color;', 'uniform vec3 u_material_ambient_color;', 'uniform vec3 u_material_diffuse_color;', // matrices set by gl.setMatrixUniforms
    'uniform mat4 u_model_view_matrix;', 'uniform mat4 u_projection_matrix;', 'uniform mat3 u_normal_matrix;', 'uniform mat4 u_light_model_view_matrix;', 'uniform mat4 u_light_projection_matrix;', 'uniform bool u_shadow;', // sent to the fragment shader
    'varying vec3 v_viewpos;', 'varying vec4 v_shadcoord;', 'varying vec3 v_diffuse;', 'varying vec3 v_ambient;', 'varying vec3 v_normal;', 'uniform float u_point_size;', 'void main() {', 'v_normal = length(a_vertex_normal)==0. ? a_vertex_normal : u_normal_matrix * a_vertex_normal;', 'v_ambient = u_material_ambient_color;', 'v_diffuse = u_material_diffuse_color * u_light_diffuse_color;', 'if(u_shadow) {', 'v_shadcoord = u_light_projection_matrix * u_light_model_view_matrix * vec4(a_vertex_position, 1.);', 'v_shadcoord /= v_shadcoord.w;', '}', 'vec4 viewPos = u_model_view_matrix * vec4(a_vertex_position, 1.);', 'v_viewpos = viewPos.xyz / viewPos.w;', 'gl_Position = u_projection_matrix * viewPos;', // just to make sure the w is 1
    'gl_Position /= gl_Position.w;', 'gl_PointSize = u_point_size;', '}'].join('');
    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);
  };

  _.loadDefaultFragmentShader = function (gl) {
    var sb = [// set macro for depth mmap texture
    gl.depthTextureExt ? '#define CWC_DEPTH_TEX\n' : '', // set float precision
    'precision mediump float;', // scene uniforms
    'uniform vec3 u_light_specular_color;', 'uniform vec3 u_light_direction;', 'uniform vec3 u_material_specular_color;', 'uniform float u_material_shininess;', 'uniform float u_material_alpha;', 'uniform int u_fog_mode;', 'uniform vec3 u_fog_color;', 'uniform float u_fog_density;', 'uniform float u_fog_start;', 'uniform float u_fog_end;', 'uniform bool u_shadow;', 'uniform float u_shadow_intensity;', 'uniform bool u_flat_color;', 'uniform float u_gamma_inverted;', // texture for shadow map
    'uniform sampler2D u_shadow_depth_sample;', 'uniform vec2 u_shadow_texture_size;', // from the vertex shader
    'varying vec3 v_viewpos;', 'varying vec4 v_shadcoord;', 'varying vec3 v_diffuse;', 'varying vec3 v_ambient;', 'varying vec3 v_normal;', '\n#ifndef CWC_DEPTH_TEX\n', 'float unpack (vec4 colour) {', 'const vec4 bitShifts = vec4(1.,', '1. / 255.,', '1. / (255. * 255.),', '1. / (255. * 255. * 255.));', 'return dot(colour, bitShifts);', '}', '\n#endif\n', 'float shadowMapDepth(vec4 shadowMapColor) {', 'float zShadowMap;', '\n#ifdef CWC_DEPTH_TEX\n', 'zShadowMap = shadowMapColor.r;', '\n#else\n', 'zShadowMap = unpack(shadowMapColor);', '\n#endif\n', 'return zShadowMap;', '}', 'void main(void) {', 'vec3 color = v_diffuse;', 'if(length(v_normal)!=0.){', 'vec3 normal = normalize(v_normal);', 'vec3 lightDir = normalize(-u_light_direction);', 'float nDotL = dot(normal, lightDir);', 'float shadow = 0.0;', 'if(u_shadow) {', 'vec3 depthCoord = .5 + v_shadcoord.xyz / v_shadcoord.w * .5;', 'if(depthCoord.z <= 1. && depthCoord.z >= 0.) {', 'float bias = max(.05 * (1. - nDotL), .005);', 'vec2 texelSize = 1. / u_shadow_texture_size;', 'for(int x = -1; x <= 1; ++x) {', 'for(int y = -1; y <= 1; ++y)  {', 'vec4 shadowMapColor = texture2D(u_shadow_depth_sample, depthCoord.xy + vec2(x, y) * texelSize);', 'float zShadowMap = shadowMapDepth(shadowMapColor);', 'shadow += zShadowMap + bias < depthCoord.z ? 1. : 0.;', '}', '}', 'shadow /= 9.;', 'shadow *= u_shadow_intensity;', '}', '}', 'if(!u_flat_color) {', 'vec3 viewDir = normalize(-v_viewpos);', 'vec3 halfDir = normalize(lightDir + viewDir);', 'float nDotHV = max(dot(halfDir, normal), 0.);', 'vec3 specular = u_material_specular_color * u_light_specular_color;', 'color*=max(nDotL, 0.);', 'color+=specular * pow(nDotHV, u_material_shininess);', '}', // set the color
    'color = (1.-shadow)*color+v_ambient;', '}', 'gl_FragColor = vec4(pow(color, vec3(u_gamma_inverted)), u_material_alpha);', 'if(u_fog_mode != 0){', 'float fogCoord = 1.-clamp((u_fog_end - gl_FragCoord.z/gl_FragCoord.w) / (u_fog_end - u_fog_start), 0., 1.);', 'float fogFactor = 1.;', // linear equation
    'if(u_fog_mode == 1){', 'fogFactor = 1.-fogCoord;', '}', // exp equation
    'else if(u_fog_mode == 2) {', 'fogFactor = clamp(exp(-u_fog_density*fogCoord), 0., 1.);', '}', // exp2 equation
    'else if(u_fog_mode == 3) {', 'fogFactor = clamp(exp(-pow(u_fog_density*fogCoord, 2.)), 0., 1.);', '}', 'gl_FragColor = mix(vec4(u_fog_color, 1.), gl_FragColor, fogFactor);', // for debugging
    // 'gl_FragColor = vec4(vec3(fogFactor), 1.);',
    '}', '}'].join('');
    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);
  };

  _.enableAttribsArray = function (gl) {
    _super.enableAttribsArray.call(this, gl);

    gl.enableVertexAttribArray(this.vertexNormalAttribute);
  };

  _.disableAttribsArray = function (gl) {
    _super.disableAttribsArray.call(this, gl);

    gl.disableVertexAttribArray(this.vertexNormalAttribute);
  };

  _.setMatrixUniforms = function (gl, modelMatrix) {
    if (modelMatrix === undefined) {
      this.setModelViewMatrix(gl, gl.modelViewMatrix);
      this.setLightModelViewMatrix(gl, gl.lightViewMatrix);
    } else {
      var mvMatrix = m4.multiply(gl.modelViewMatrix, modelMatrix, []);
      var lightModelViewMatrix = m4.multiply(gl.lightViewMatrix, modelMatrix, []);
      this.setModelViewMatrix(gl, mvMatrix);
      this.setLightModelViewMatrix(gl, lightModelViewMatrix);
    }
  };

  _.setModelViewMatrix = function (gl, mvMatrix) {
    _super.setModelViewMatrix.call(this, gl, mvMatrix); // create the normal matrix and push it to the graphics card


    var normalMatrix = m3.transpose(m4.toInverseMat3(mvMatrix, []));
    gl.uniformMatrix3fv(this.normalMatrixUniform, false, normalMatrix);
  };

  _.setFlatColor = function (gl, enabled) {
    gl.uniform1i(this.flatColorUniform, enabled);
  };

  _.setShadow = function (gl, enabled) {
    gl.uniform1i(this.shadowUniform, enabled);
  };

  _.setFogMode = function (gl, mode) {
    gl.uniform1i(this.fogModeUniform, mode);
  };

  _.setFogColor = function (gl, color) {
    gl.uniform3fv(this.fogColorUniform, color);
  };

  _.setFogStart = function (gl, fogStart) {
    gl.uniform1f(this.fogStartUniform, fogStart);
  };

  _.setFogEnd = function (gl, fogEnd) {
    gl.uniform1f(this.fogEndUniform, fogEnd);
  };

  _.setFogDensity = function (gl, density) {
    gl.uniform1f(this.fogDensityUniform, density);
  };

  _.setMaterialAmbientColor = function (gl, ambient) {
    gl.uniform3fv(this.materialAmbientColorUniform, ambient);
  };

  _.setMaterialDiffuseColor = function (gl, diffuse) {
    gl.uniform3fv(this.materialDiffuseColorUniform, diffuse);
  };

  _.setMaterialSpecularColor = function (gl, specular) {
    gl.uniform3fv(this.materialSpecularColorUniform, specular);
  };

  _.setMaterialShininess = function (gl, shininess) {
    gl.uniform1f(this.materialShininessUniform, shininess);
  };

  _.setMaterialAlpha = function (gl, alpha) {
    gl.uniform1f(this.materialAlphaUniform, alpha);
  };

  _.setLightDiffuseColor = function (gl, diffuse) {
    gl.uniform3fv(this.lightDiffuseColorUniform, diffuse);
  };

  _.setLightSpecularColor = function (gl, specular) {
    gl.uniform3fv(this.lightSpecularColorUniform, specular);
  };

  _.setLightDirection = function (gl, direction) {
    gl.uniform3fv(this.lightDirectionUniform, direction);
  };

  _.setLightModelViewMatrix = function (gl, mvMatrix) {
    gl.uniformMatrix4fv(this.lightModelViewMatrixUniform, false, mvMatrix);
  };

  _.setLightProjectionMatrix = function (gl, matrix) {
    gl.uniformMatrix4fv(this.lightProjectionMatrixUniform, false, matrix);
  };

  _.setShadowTextureSize = function (gl, width, height) {
    gl.uniform2f(this.shadowTextureSizeUniform, width, height);
  };

  _.setShadowIntensity = function (gl, intensity) {
    gl.uniform1f(this.shadowIntensityUniform, intensity);
  };

  _.setGammaCorrection = function (gl, gammaCorrection) {
    // make sure gamma correction is inverted here as it is more efficient in the shader
    gl.uniform1f(this.gammaCorrectionUniform, 1.0 / gammaCorrection);
  };

  _.setPointSize = function (gl, pointSize) {
    gl.uniform1f(this.pointSizeUniform, pointSize);
  };
})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__["mat3"], _lib__WEBPACK_IMPORTED_MODULE_6__["mat4"], document);

(function (d3, m3, m4, document, undefined) {
  'use strict';

  d3.PickShader = function () {};

  var _super = d3._Shader.prototype;

  var _ = d3.PickShader.prototype = new d3._Shader();

  _.initUniformLocations = function (gl) {
    // assign uniform properties
    _super.initUniformLocations.call(this, gl);

    this.materialDiffuseColorUniform = gl.getUniformLocation(this.gProgram, 'u_material_diffuse_color');
  };

  _.loadDefaultVertexShader = function (gl) {
    var sb = ['precision mediump float;', // attributes set when rendering objects
    'attribute vec3 a_vertex_position;', // matrices set by gl.setMatrixUniforms
    'uniform mat4 u_model_view_matrix;', 'uniform mat4 u_projection_matrix;', 'void main() {', 'gl_Position = u_projection_matrix * u_model_view_matrix * vec4(a_vertex_position, 1.);', // just to make sure the w is 1
    'gl_Position /= gl_Position.w;', '}'].join('');
    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);
  };

  _.loadDefaultFragmentShader = function (gl) {
    var sb = [// set macro for depth mmap texture
    gl.depthTextureExt ? '#define CWC_DEPTH_TEX\n' : '', // set float precision
    'precision mediump float;', 'uniform vec3 u_material_diffuse_color;', 'void main(void) {', 'gl_FragColor = vec4(u_material_diffuse_color, 1.);', '}'].join('');
    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);
  };

  _.setMaterialDiffuseColor = function (gl, diffuse) {
    gl.uniform3fv(this.materialDiffuseColorUniform, diffuse);
  };
})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__["mat3"], _lib__WEBPACK_IMPORTED_MODULE_6__["mat4"], document);

(function (d3, m3, m4, document, undefined) {
  'use strict';

  d3.PositionShader = function () {};

  var _super = d3._Shader.prototype;

  var _ = d3.PositionShader.prototype = new d3._Shader();

  _.loadDefaultVertexShader = function (gl) {
    var sb = ['precision mediump float;', // attributes set when rendering objects
    'attribute vec3 a_vertex_position;', // matrices set by gl.setMatrixUniforms
    'uniform mat4 u_model_view_matrix;', 'uniform mat4 u_projection_matrix;', 'varying vec4 v_position;', 'void main() {', 'vec4 viewPos = u_model_view_matrix * vec4(a_vertex_position, 1.);', 'gl_Position = u_projection_matrix * viewPos;', 'v_position = viewPos / viewPos.w;', '}'].join('');
    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);
  };

  _.loadDefaultFragmentShader = function (gl) {
    var sb = [// set float precision
    'precision mediump float;', 'varying vec4 v_position;', 'void main(void) {', 'gl_FragColor = v_position;', '}'].join('');
    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);
  };
})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__["mat3"], _lib__WEBPACK_IMPORTED_MODULE_6__["mat4"], document);

(function (d3, m3, m4, document, undefined) {
  'use strict';

  d3.QuadShader = function () {};

  var _ = d3.QuadShader.prototype = new d3._Shader();

  _.loadDefaultVertexShader = function (gl) {
    var sb = ['precision mediump float;', // attributes set when rendering objects
    'attribute vec3 a_vertex_position;', 'varying vec2 v_texcoord;', 'void main() {', 'gl_Position = vec4(a_vertex_position, 1.);', 'v_texcoord = a_vertex_position.xy * .5 + .5;', '}'].join('');
    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);
  };

  _.loadDefaultFragmentShader = function (gl) {
    var sb = [// set float precision
    'precision mediump float;', 'uniform sampler2D u_image;', 'varying vec2 v_texcoord;', 'void main() {', 'gl_FragColor = texture2D(u_image, v_texcoord);', '}'].join('');
    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);
  };
})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__["mat3"], _lib__WEBPACK_IMPORTED_MODULE_6__["mat4"], document);

(function (d3, ELEMENT, MarchingCubes, v3, m, undefined) {
  'use strict';

  var Triangle = function Triangle(i1, i2, i3) {
    this.i1 = i1;
    this.i2 = i2;
    this.i3 = i3;
  };

  function getRange(atoms, probeRadius) {
    var r = [Infinity, -Infinity, Infinity, -Infinity, Infinity, -Infinity];
    var add = probeRadius + 2;

    for (var i = 0, ii = atoms.length; i < ii; i++) {
      var a = atoms[i];
      r[0] = m.min(r[0], a.x - add);
      r[1] = m.max(r[1], a.x + add);
      r[2] = m.min(r[2], a.y - add);
      r[3] = m.max(r[3], a.y + add);
      r[4] = m.min(r[4], a.z - add);
      r[5] = m.max(r[5], a.z + add);
    }

    return r;
  }

  ;

  function addPoint(p, points, xs, ys, zs, step) {
    // transform back into real space
    var px = p[0] * step + xs - step;
    var py = p[1] * step + ys - step;
    var pz = p[2] * step + zs - step; // find any previous match

    var index = -1;
    var cutoff = 1E-3;

    for (var j = 0, jj = points.length; j < jj; j++) {
      var pj = points[j];

      if (m.abs(pj.x - px) < cutoff && m.abs(pj.y - py) < cutoff && m.abs(pj.z - pz) < cutoff) {
        index = j;
        break;
      }
    }

    if (index == -1) {
      index = points.length;
      points.push(new _Atom__WEBPACK_IMPORTED_MODULE_1__["default"]('C', px, py, pz));
    }

    return index;
  }

  ;

  d3._Surface = function () {};

  var _ = d3._Surface.prototype = new d3._Mesh();

  _.generate = function (xdif, ydif, zdif, step, range, xsteps, ysteps, zsteps) {
    // generate the function
    var vals = [];
    var z = range[4] - step;

    for (var k = 0; k < zsteps; k++) {
      var y = range[2] - step;

      for (var j = 0; j < ysteps; j++) {
        var x = range[0] - step;

        for (var i = 0; i < xsteps; i++) {
          vals.push(this.calculate(x, y, z));
          x += step;
        }

        y += step;
      }

      z += step;
    }

    return vals;
  };

  _.build = function (atoms, probeRadius, resolution) {
    var positionData = [];
    var normalData = [];
    var indexData = []; // calculate the range of the function

    var range = getRange(atoms, probeRadius);
    var xdif = range[1] - range[0];
    var ydif = range[3] - range[2];
    var zdif = range[5] - range[4];
    var step = m.min(xdif, m.min(ydif, zdif)) / resolution; // generate the function

    var xsteps = 2 + m.ceil(xdif / step);
    var ysteps = 2 + m.ceil(ydif / step);
    var zsteps = 2 + m.ceil(zdif / step);
    var vals = this.generate(xdif, ydif, zdif, step, range, xsteps, ysteps, zsteps); // marching cubes

    var mesh = MarchingCubes(vals, [xsteps, ysteps, zsteps]); // build surface

    var ps = [];
    var is = [];

    for (var i = 0, ii = mesh.vertices.length; i < ii; i++) {
      is.push(addPoint(mesh.vertices[i], ps, range[0], range[2], range[4], step));
    } // triangles


    var triangles = [];

    for (var i = 0, ii = mesh.faces.length; i < ii; i++) {
      var f = mesh.faces[i];
      var i1 = is[f[0]];
      var i2 = is[f[1]];
      var i3 = is[f[2]];
      triangles.push(new Triangle(i1, i2, i3));
      indexData.push(i1, i2, i3);
    } // smoothing - 1 pass


    var savedConnections = [];

    for (var i = 0, ii = ps.length; i < ii; i++) {
      var connections = [];

      for (var j = 0, jj = triangles.length; j < jj; j++) {
        var t = triangles[j];

        if (t.i1 === i || t.i2 === i || t.i3 === i) {
          if (t.i1 != i && connections.indexOf(t.i1) === -1) {
            connections.push(t.i1);
          }

          if (t.i2 != i && connections.indexOf(t.i2) === -1) {
            connections.push(t.i2);
          }

          if (t.i3 != i && connections.indexOf(t.i3) === -1) {
            connections.push(t.i3);
          }
        }
      }

      savedConnections.push(connections);
    }

    var tmp = [];

    for (var i = 0, ii = ps.length; i < ii; i++) {
      var pi = ps[i];
      var connections = savedConnections[i];
      var pt = new _Atom__WEBPACK_IMPORTED_MODULE_1__["default"]();

      if (connections.length < 3) {
        pt.x = pi.x;
        pt.y = pi.y;
        pt.z = pi.z;
      } else {
        var wt = 1;

        if (connections.length < 5) {
          wt = .5;
        }

        for (var j = 0, jj = connections.length; j < jj; j++) {
          var pc = ps[connections[j]];
          pt.x += pc.x;
          pt.y += pc.y;
          pt.z += pc.z;
        }

        pt.x += pi.x * wt;
        pt.y += pi.y * wt;
        pt.z += pi.z * wt;
        var scale = 1 / (wt + connections.length);
        pt.x *= scale;
        pt.y *= scale;
        pt.z *= scale;
      }

      tmp.push(pt);
    }

    ps = tmp;

    for (var i = 0, ii = ps.length; i < ii; i++) {
      var pi = ps[i];
      positionData.push(pi.x, pi.y, pi.z);
    } // normals


    for (var i = 0, ii = triangles.length; i < ii; i++) {
      var t = triangles[i];
      var p1 = ps[t.i1];
      var p2 = ps[t.i2];
      var p3 = ps[t.i3];
      var v12 = [p2.x - p1.x, p2.y - p1.y, p2.z - p1.z];
      var v13 = [p3.x - p1.x, p3.y - p1.y, p3.z - p1.z];
      v3.cross(v12, v13);

      if (isNaN(v12[0])) {
        // for some reason, origin shows up as some points and should be
        // ignored
        v12 = [0, 0, 0];
      }

      t.normal = v12;
    }

    for (var i = 0, ii = ps.length; i < ii; i++) {
      var sum = [0, 0, 0];

      for (var j = 0, jj = triangles.length; j < jj; j++) {
        var t = triangles[j];

        if (t.i1 === i || t.i2 === i || t.i3 === i) {
          sum[0] += t.normal[0];
          sum[1] += t.normal[1];
          sum[2] += t.normal[2];
        }
      }

      v3.normalize(sum);
      normalData.push(sum[0], sum[1], sum[2]);
    }

    this.storeData(positionData, normalData, indexData);
  };

  _.render = function (gl, specs) {
    if (this.specs) {
      specs = this.specs;
    }

    if (!specs.surfaces_display) {
      return;
    }

    gl.shader.setMatrixUniforms(gl);
    this.bindBuffers(gl); // colors

    gl.material.setTempColors(gl, specs.surfaces_materialAmbientColor_3D, specs.surfaces_color, specs.surfaces_materialSpecularColor_3D, specs.surfaces_materialShininess_3D); // alpha must be set after temp colors as that function sets alpha to 1

    gl.material.setAlpha(gl, specs.surfaces_alpha); // render

    if (specs.surfaces_style === 'Dots') {
      // dots
      //gl.pointSize(1);
      // pointSize isn't part of WebGL API, so we have to make it a shader uniform in the vertex shader
      gl.shader.setPointSize(gl, specs.shapes_pointSize); //gl.drawArrays(gl.POINTS, 0, this.vertexIndexBuffer.numItems);

      gl.drawElements(gl.POINTS, this.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
    } else if (specs.surfaces_style === 'Mesh') {
      // mesh
      gl.lineWidth(specs.shapes_lineWidth); //gl.polygonMode(gl.FRONT_AND_BACK, gl.LINE);

      gl.drawElements(gl.LINES, this.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0); //gl.polygonMode(gl.FRONT_AND_BACK, gl.FILL);
    } else {
      // solid
      gl.drawElements(gl.TRIANGLES, this.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
    }
  };
})(d3, _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__["ELEMENT"], _lib__WEBPACK_IMPORTED_MODULE_6__["MarchingCubes"], _lib__WEBPACK_IMPORTED_MODULE_6__["vec3"], m);

(function (d3, ELEMENT, m, undefined) {
  'use strict';

  d3.SASSurface = function (atoms, probeRadius, resolution) {
    this.atoms = atoms;
    this.probeRadius = probeRadius;
    this.resolution = resolution;
    this.build(atoms, probeRadius, resolution);
  };

  var _ = d3.SASSurface.prototype = new d3._Surface();

  _.calculate = function (x, y, z) {
    var min = Infinity;
    var p = new _Atom__WEBPACK_IMPORTED_MODULE_1__["default"]('C', x, y, z);

    for (var i = 0, ii = this.atoms.length; i < ii; i++) {
      var a = this.atoms[i];
      var vdwRadius = ELEMENT[a.label] && ELEMENT[a.label].vdWRadius !== 0 ? ELEMENT[a.label].vdWRadius : 2;
      var distanceCenter = a.distance3D(p) - this.probeRadius;
      var distanceSurface = distanceCenter - vdwRadius;
      min = m.min(min, distanceSurface);
    }

    return min;
  };
})(d3, _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__["ELEMENT"], m);

(function (d3, ELEMENT, m, undefined) {
  'use strict';

  d3.VDWSurface = function (atoms, resolution) {
    this.atoms = atoms;
    this.probeRadius = 0;
    this.resolution = resolution;
    this.build(atoms, 0, resolution);
  };

  var _ = d3.VDWSurface.prototype = new d3._Surface();

  _.calculate = function (x, y, z) {
    var min = Infinity;
    var p = new _Atom__WEBPACK_IMPORTED_MODULE_1__["default"]('C', x, y, z);

    for (var i = 0, ii = this.atoms.length; i < ii; i++) {
      var a = this.atoms[i];
      var vdwRadius = ELEMENT[a.label] && ELEMENT[a.label].vdWRadius !== 0 ? ELEMENT[a.label].vdWRadius : 2;
      var distanceCenter = a.distance3D(p);
      var distanceSurface = distanceCenter - vdwRadius;
      min = m.min(min, distanceSurface);
    }

    return min;
  };
})(d3, _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__["ELEMENT"], m);

/***/ }),

/***/ "./src/ChemDoodle/structures/index.js":
/*!********************************************!*\
  !*** ./src/ChemDoodle/structures/index.js ***!
  \********************************************/
/*! exports provided: Point, Queue, Query, Ring, Atom, Bond, Residue, Molecule, Spectrum, Plate, VisualSpecifications, d2, d3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Point */ "./src/ChemDoodle/structures/Point.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Point", function() { return _Point__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _Queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Queue */ "./src/ChemDoodle/structures/Queue.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Queue", function() { return _Queue__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _Query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Query */ "./src/ChemDoodle/structures/Query.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Query", function() { return _Query__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _Ring__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Ring */ "./src/ChemDoodle/structures/Ring.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Ring", function() { return _Ring__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _Atom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Atom */ "./src/ChemDoodle/structures/Atom.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Atom", function() { return _Atom__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _Bond__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Bond */ "./src/ChemDoodle/structures/Bond.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Bond", function() { return _Bond__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _Residue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Residue */ "./src/ChemDoodle/structures/Residue.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Residue", function() { return _Residue__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _Molecule__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Molecule */ "./src/ChemDoodle/structures/Molecule.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Molecule", function() { return _Molecule__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _Spectrum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Spectrum */ "./src/ChemDoodle/structures/Spectrum.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Spectrum", function() { return _Spectrum__WEBPACK_IMPORTED_MODULE_8__["default"]; });

/* harmony import */ var _Plate__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Plate */ "./src/ChemDoodle/structures/Plate.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Plate", function() { return _Plate__WEBPACK_IMPORTED_MODULE_9__["default"]; });

/* harmony import */ var _VisualSpecifications__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./VisualSpecifications */ "./src/ChemDoodle/structures/VisualSpecifications.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VisualSpecifications", function() { return _VisualSpecifications__WEBPACK_IMPORTED_MODULE_10__["default"]; });

/* harmony import */ var _d2__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./d2 */ "./src/ChemDoodle/structures/d2/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "d2", function() { return _d2__WEBPACK_IMPORTED_MODULE_11__["d2"]; });

/* harmony import */ var _d3__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./d3 */ "./src/ChemDoodle/structures/d3/index.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "d3", function() { return _d3__WEBPACK_IMPORTED_MODULE_12__["d3"]; });















/***/ }),

/***/ "./src/ChemDoodleWeb-unpacked.js":
/*!***************************************!*\
  !*** ./src/ChemDoodleWeb-unpacked.js ***!
  \***************************************/
/*! exports provided: ChemDoodle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChemDoodle", function() { return ChemDoodle; });
/* harmony import */ var _ChemDoodle_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ChemDoodle/lib */ "./src/ChemDoodle/lib/index.js");
/* harmony import */ var _ChemDoodle_extensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ChemDoodle/extensions */ "./src/ChemDoodle/extensions/index.js");
/* harmony import */ var _ChemDoodle_structures__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ChemDoodle/structures */ "./src/ChemDoodle/structures/index.js");
/* harmony import */ var _ChemDoodle_math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ChemDoodle/math */ "./src/ChemDoodle/math/index.js");
/* harmony import */ var _ChemDoodle_informatics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ChemDoodle/informatics */ "./src/ChemDoodle/informatics/index.js");
/* harmony import */ var _ChemDoodle_io__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ChemDoodle/io */ "./src/ChemDoodle/io/index.js");
/* harmony import */ var _ChemDoodle_animations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ChemDoodle/animations */ "./src/ChemDoodle/animations.js");
/* harmony import */ var _ChemDoodle_featureDetection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ChemDoodle/featureDetection */ "./src/ChemDoodle/featureDetection.js");
/* harmony import */ var _ChemDoodle_monitor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ChemDoodle/monitor */ "./src/ChemDoodle/monitor.js");
/* harmony import */ var _ChemDoodle_iChemLabs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ChemDoodle/iChemLabs */ "./src/ChemDoodle/iChemLabs.js");
/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ChemDoodle */ "./src/ChemDoodle/index.js");
//
// ChemDoodle Web Components 8.0.0
//
// http://web.chemdoodle.com
//
// Copyright 2009-2017 iChemLabs, LLC.  All rights reserved.
//
// The ChemDoodle Web Components library is licensed under version 3
// of the GNU GENERAL PUBLIC LICENSE.
//
// You may redistribute it and/or modify it under the terms of the
// GNU General Public License as published by the Free Software Foundation,
// either version 3 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// Please contact iChemLabs <http://www.ichemlabs.com/contact-us> for
// alternate licensing options.
//











var ChemDoodle = _ChemDoodle__WEBPACK_IMPORTED_MODULE_10__;
ChemDoodle.iChemLabs = _ChemDoodle_iChemLabs__WEBPACK_IMPORTED_MODULE_9__["default"];
ChemDoodle.informatics = _ChemDoodle_informatics__WEBPACK_IMPORTED_MODULE_4__;
ChemDoodle.io = _ChemDoodle_io__WEBPACK_IMPORTED_MODULE_5__;
ChemDoodle.lib = _ChemDoodle_lib__WEBPACK_IMPORTED_MODULE_0__;
ChemDoodle.notations = {};
ChemDoodle.structures = _ChemDoodle_structures__WEBPACK_IMPORTED_MODULE_2__;
ChemDoodle.animations = _ChemDoodle_animations__WEBPACK_IMPORTED_MODULE_6__["default"];
ChemDoodle.extensions = _ChemDoodle_extensions__WEBPACK_IMPORTED_MODULE_1__;
ChemDoodle.math = _ChemDoodle_math__WEBPACK_IMPORTED_MODULE_3__;
ChemDoodle.featureDetection = _ChemDoodle_featureDetection__WEBPACK_IMPORTED_MODULE_7__["default"];

(function (c, extensions, io, structures, ELEMENT, trim, m, undefined) {
  'use strict';

  function checkContained(residue, set, chainID, index, helix) {
    for (var j = 0, jj = set.length; j < jj; j++) {
      var check = set[j];

      if (check.id === chainID && index >= check.start && index <= check.end) {
        if (helix) {
          residue.helix = true;
        } else {
          residue.sheet = true;
        }

        if (index === check.end) {
          residue.arrow = true;
        }

        return;
      }
    }
  }

  io.PDBInterpreter = function () {};

  var _ = io.PDBInterpreter.prototype = new io._Interpreter();

  _.calculateRibbonDistances = false;
  _.deduceResidueBonds = false;

  _.read = function (content, multiplier) {
    var molecule = new structures.Molecule();
    molecule.chains = [];

    if (!content) {
      return molecule;
    }

    var currentTagTokens = content.split('\n');

    if (!multiplier) {
      multiplier = 1;
    }

    var helices = [];
    var sheets = [];
    var lastC;
    var currentChain = [];
    var resatoms = [];
    var atomSerials = [];

    for (var i = 0, ii = currentTagTokens.length; i < ii; i++) {
      var line = currentTagTokens[i];

      if (extensions.stringStartsWith(line, 'HELIX')) {
        helices.push({
          id: line.substring(19, 20),
          start: parseInt(line.substring(21, 25)),
          end: parseInt(line.substring(33, 37))
        });
      } else if (extensions.stringStartsWith(line, 'SHEET')) {
        sheets.push({
          id: line.substring(21, 22),
          start: parseInt(line.substring(22, 26)),
          end: parseInt(line.substring(33, 37))
        });
      } else if (extensions.stringStartsWith(line, 'ATOM')) {
        var altLoc = line.substring(16, 17);

        if (altLoc === ' ' || altLoc === 'A') {
          var label = trim(line.substring(76, 78));

          if (label.length === 0) {
            var s = trim(line.substring(12, 14));

            if (s === 'HD') {
              label = 'H';
            } else if (s.length > 0) {
              if (s.length > 1) {
                label = s.charAt(0) + s.substring(1).toLowerCase();
              } else {
                label = s;
              }
            }
          }

          var a = new structures.Atom(label, parseFloat(line.substring(30, 38)) * multiplier, parseFloat(line.substring(38, 46)) * multiplier, parseFloat(line.substring(46, 54)) * multiplier);
          a.hetatm = false;
          resatoms.push(a); // set up residue

          var resSeq = parseInt(line.substring(22, 26));

          if (currentChain.length === 0) {
            for (var j = 0; j < 3; j++) {
              var dummyFront = new structures.Residue(-1);
              dummyFront.cp1 = a;
              dummyFront.cp2 = a;
              currentChain.push(dummyFront);
            }
          }

          if (resSeq !== Number.NaN && currentChain[currentChain.length - 1].resSeq !== resSeq) {
            var r = new structures.Residue(resSeq);
            r.name = trim(line.substring(17, 20));

            if (r.name.length === 3) {
              r.name = r.name.substring(0, 1) + r.name.substring(1).toLowerCase();
            } else {
              if (r.name.length === 2 && r.name.charAt(0) === 'D') {
                r.name = r.name.substring(1);
              }
            }

            currentChain.push(r);
            var chainID = line.substring(21, 22);
            checkContained(r, helices, chainID, resSeq, true);
            checkContained(r, sheets, chainID, resSeq, false);
          } // end residue setup


          var atomName = trim(line.substring(12, 16));
          var currentResidue = currentChain[currentChain.length - 1];

          if (atomName === 'CA' || atomName === 'P' || atomName === 'O5\'') {
            if (!currentResidue.cp1) {
              currentResidue.cp1 = a;
            }
          } else if (atomName === 'N3' && (currentResidue.name === 'C' || currentResidue.name === 'U' || currentResidue.name === 'T') || atomName === 'N1' && (currentResidue.name === 'A' || currentResidue.name === 'G')) {
            // control points for base platform direction
            currentResidue.cp3 = a;
          } else if (atomName === 'C2') {
            // control points for base platform orientation
            currentResidue.cp4 = a;
          } else if (atomName === 'C4' && (currentResidue.name === 'C' || currentResidue.name === 'U' || currentResidue.name === 'T') || atomName === 'C6' && (currentResidue.name === 'A' || currentResidue.name === 'G')) {
            // control points for base platform orientation
            currentResidue.cp5 = a;
          } else if (atomName === 'O' || atomName === 'C6' && (currentResidue.name === 'C' || currentResidue.name === 'U' || currentResidue.name === 'T') || atomName === 'N9') {
            if (!currentChain[currentChain.length - 1].cp2) {
              if (atomName === 'C6' || atomName === 'N9') {
                lastC = a;
              }

              currentResidue.cp2 = a;
            }
          } else if (atomName === 'C') {
            lastC = a;
          }
        }
      } else if (extensions.stringStartsWith(line, 'HETATM')) {
        var symbol = trim(line.substring(76, 78));

        if (symbol.length === 0) {
          // handle the case where an improperly formatted PDB
          // file states the element label in the atom name column
          symbol = trim(line.substring(12, 16));
        }

        if (symbol.length > 1) {
          symbol = symbol.substring(0, 1) + symbol.substring(1).toLowerCase();
        }

        var het = new structures.Atom(symbol, parseFloat(line.substring(30, 38)) * multiplier, parseFloat(line.substring(38, 46)) * multiplier, parseFloat(line.substring(46, 54)) * multiplier);
        het.hetatm = true;
        var residueName = trim(line.substring(17, 20));

        if (residueName === 'HOH') {
          het.isWater = true;
        }

        molecule.atoms.push(het);
        atomSerials[parseInt(trim(line.substring(6, 11)))] = het;
      } else if (extensions.stringStartsWith(line, 'CONECT')) {
        var oid = parseInt(trim(line.substring(6, 11)));

        if (atomSerials[oid]) {
          var origin = atomSerials[oid];

          for (var k = 0; k < 4; k++) {
            var next = trim(line.substring(11 + k * 5, 16 + k * 5));

            if (next.length !== 0) {
              var nid = parseInt(next);

              if (atomSerials[nid]) {
                var a2 = atomSerials[nid];
                var found = false;

                for (var j = 0, jj = molecule.bonds.length; j < jj; j++) {
                  var b = molecule.bonds[j];

                  if (b.a1 === origin && b.a2 === a2 || b.a1 === a2 && b.a2 === origin) {
                    found = true;
                    break;
                  }
                }

                if (!found) {
                  molecule.bonds.push(new structures.Bond(origin, a2));
                }
              }
            }
          }
        }
      } else if (extensions.stringStartsWith(line, 'TER')) {
        this.endChain(molecule, currentChain, lastC, resatoms);
        currentChain = [];
      } else if (extensions.stringStartsWith(line, 'ENDMDL')) {
        break;
      }
    }

    this.endChain(molecule, currentChain, lastC, resatoms);

    if (molecule.bonds.size === 0) {
      new c.informatics.BondDeducer().deduceCovalentBonds(molecule, multiplier);
    }

    if (this.deduceResidueBonds) {
      for (var i = 0, ii = resatoms.length; i < ii; i++) {
        var max = m.min(ii, i + 20);

        for (var j = i + 1; j < max; j++) {
          var first = resatoms[i];
          var second = resatoms[j];

          if (first.distance3D(second) < (ELEMENT[first.label].covalentRadius + ELEMENT[second.label].covalentRadius) * 1.1) {
            molecule.bonds.push(new structures.Bond(first, second, 1));
          }
        }
      }
    }

    molecule.atoms = molecule.atoms.concat(resatoms);

    if (this.calculateRibbonDistances) {
      this.calculateDistances(molecule, resatoms);
    }

    return molecule;
  };

  _.endChain = function (molecule, chain, lastC, resatoms) {
    if (chain.length > 0) {
      var last = chain[chain.length - 1];

      if (!last.cp1) {
        last.cp1 = resatoms[resatoms.length - 2];
      }

      if (!last.cp2) {
        last.cp2 = resatoms[resatoms.length - 1];
      }

      for (var i = 0; i < 4; i++) {
        var dummyEnd = new structures.Residue(-1);
        dummyEnd.cp1 = lastC;
        dummyEnd.cp2 = chain[chain.length - 1].cp2;
        chain.push(dummyEnd);
      }

      molecule.chains.push(chain);
    }
  };

  _.calculateDistances = function (molecule, resatoms) {
    var hetatm = [];

    for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {
      var a = molecule.atoms[i];

      if (a.hetatm) {
        if (!a.isWater) {
          hetatm.push(a);
        }
      }
    }

    for (var i = 0, ii = resatoms.length; i < ii; i++) {
      var a = resatoms[i];
      a.closestDistance = Number.POSITIVE_INFINITY;

      if (hetatm.length === 0) {
        a.closestDistance = 0;
      } else {
        for (var j = 0, jj = hetatm.length; j < jj; j++) {
          a.closestDistance = Math.min(a.closestDistance, a.distance3D(hetatm[j]));
        }
      }
    }
  }; // shortcuts


  var interpreter = new io.PDBInterpreter();

  c.readPDB = function (content, multiplier) {
    return interpreter.read(content, multiplier);
  };
})(ChemDoodle, ChemDoodle.extensions, ChemDoodle.io, ChemDoodle.structures, ChemDoodle.ELEMENT, ChemDoodle.lib.jQuery.trim, Math);

(function (c, extensions, io, structures, q, undefined) {
  'use strict';

  var SQZ_HASH = {
    '@': 0,
    'A': 1,
    'B': 2,
    'C': 3,
    'D': 4,
    'E': 5,
    'F': 6,
    'G': 7,
    'H': 8,
    'I': 9,
    'a': -1,
    'b': -2,
    'c': -3,
    'd': -4,
    'e': -5,
    'f': -6,
    'g': -7,
    'h': -8,
    'i': -9
  },
      DIF_HASH = {
    '%': 0,
    'J': 1,
    'K': 2,
    'L': 3,
    'M': 4,
    'N': 5,
    'O': 6,
    'P': 7,
    'Q': 8,
    'R': 9,
    'j': -1,
    'k': -2,
    'l': -3,
    'm': -4,
    'n': -5,
    'o': -6,
    'p': -7,
    'q': -8,
    'r': -9
  },
      DUP_HASH = {
    'S': 1,
    'T': 2,
    'U': 3,
    'V': 4,
    'W': 5,
    'X': 6,
    'Y': 7,
    'Z': 8,
    's': 9
  };

  io.JCAMPInterpreter = function () {};

  var _ = io.JCAMPInterpreter.prototype = new io._Interpreter();

  _.convertHZ2PPM = false;

  _.read = function (content) {
    this.isBreak = function (c) {
      // some of these arrays may return zero, so check if undefined
      return SQZ_HASH[c] !== undefined || DIF_HASH[c] !== undefined || DUP_HASH[c] !== undefined || c === ' ' || c === '-' || c === '+';
    };

    this.getValue = function (decipher, lastDif) {
      var first = decipher.charAt(0);
      var rest = decipher.substring(1); // some of these arrays may return zero, so check if undefined

      if (SQZ_HASH[first] !== undefined) {
        return parseFloat(SQZ_HASH[first] + rest);
      } else if (DIF_HASH[first] !== undefined) {
        return parseFloat(DIF_HASH[first] + rest) + lastDif;
      }

      return parseFloat(rest);
    };

    var spectrum = new structures.Spectrum();

    if (content === undefined || content.length === 0) {
      return spectrum;
    }

    var lines = content.split('\n');
    var sb = [];
    var xLast,
        xFirst,
        yFirst,
        nPoints,
        xFactor = 1,
        yFactor = 1,
        observeFrequency = 1,
        deltaX = -1,
        shiftOffsetNum = -1,
        shiftOffsetVal = -1;
    var recordMeta = true,
        divideByFrequency = false;

    for (var i = 0, ii = lines.length; i < ii; i++) {
      var use = lines[i].trim();
      var index = use.indexOf('$$');

      if (index !== -1) {
        use = use.substring(0, index);
      }

      if (sb.length === 0 || !extensions.stringStartsWith(lines[i], '##')) {
        var trimmed = use.trim();

        if (sb.length !== 0 && trimmed.length !== 0) {
          sb.push('\n');
        }

        sb.push(trimmed);
      } else {
        var currentRecord = sb.join('');

        if (recordMeta && currentRecord.length < 100) {
          spectrum.metadata.push(currentRecord);
        }

        sb = [use];

        if (extensions.stringStartsWith(currentRecord, '##TITLE=')) {
          spectrum.title = currentRecord.substring(8).trim();
        } else if (extensions.stringStartsWith(currentRecord, '##XUNITS=')) {
          spectrum.xUnit = currentRecord.substring(9).trim();

          if (this.convertHZ2PPM && spectrum.xUnit.toUpperCase() === 'HZ') {
            spectrum.xUnit = 'PPM';
            divideByFrequency = true;
          }
        } else if (extensions.stringStartsWith(currentRecord, '##YUNITS=')) {
          spectrum.yUnit = currentRecord.substring(9).trim();
        } else if (extensions.stringStartsWith(currentRecord, '##XYPAIRS=')) {// spectrum.yUnit = currentRecord.substring(9).trim();
        } else if (extensions.stringStartsWith(currentRecord, '##FIRSTX=')) {
          xFirst = parseFloat(currentRecord.substring(9).trim());
        } else if (extensions.stringStartsWith(currentRecord, '##LASTX=')) {
          xLast = parseFloat(currentRecord.substring(8).trim());
        } else if (extensions.stringStartsWith(currentRecord, '##FIRSTY=')) {
          yFirst = parseFloat(currentRecord.substring(9).trim());
        } else if (extensions.stringStartsWith(currentRecord, '##NPOINTS=')) {
          nPoints = parseFloat(currentRecord.substring(10).trim());
        } else if (extensions.stringStartsWith(currentRecord, '##XFACTOR=')) {
          xFactor = parseFloat(currentRecord.substring(10).trim());
        } else if (extensions.stringStartsWith(currentRecord, '##YFACTOR=')) {
          yFactor = parseFloat(currentRecord.substring(10).trim());
        } else if (extensions.stringStartsWith(currentRecord, '##DELTAX=')) {
          deltaX = parseFloat(currentRecord.substring(9).trim());
        } else if (extensions.stringStartsWith(currentRecord, '##.OBSERVE FREQUENCY=')) {
          if (this.convertHZ2PPM) {
            observeFrequency = parseFloat(currentRecord.substring(21).trim());
          }
        } else if (extensions.stringStartsWith(currentRecord, '##.SHIFT REFERENCE=')) {
          if (this.convertHZ2PPM) {
            var parts = currentRecord.substring(19).split(',');
            shiftOffsetNum = parseInt(parts[2].trim());
            shiftOffsetVal = parseFloat(parts[3].trim());
          }
        } else if (extensions.stringStartsWith(currentRecord, '##XYDATA=')) {
          if (!divideByFrequency) {
            observeFrequency = 1;
          }

          recordMeta = false;
          var lastWasDif = false;
          var innerLines = currentRecord.split('\n');
          var abscissaSpacing = (xLast - xFirst) / (nPoints - 1);
          var lastX = xFirst - abscissaSpacing;
          var lastY = yFirst;
          var lastDif = 0;
          var lastOrdinate;

          for (var j = 1, jj = innerLines.length; j < jj; j++) {
            var data = [];
            var read = innerLines[j].trim();
            var sb = [];

            for (var k = 0, kk = read.length; k < kk; k++) {
              if (this.isBreak(read.charAt(k))) {
                if (sb.length > 0 && !(sb.length === 1 && sb[0] === ' ')) {
                  data.push(sb.join(''));
                }

                sb = [read.charAt(k)];
              } else {
                sb.push(read.charAt(k));
              }
            }

            data.push(sb.join(''));
            lastX = parseFloat(data[0]) * xFactor - abscissaSpacing;

            for (var k = 1, kk = data.length; k < kk; k++) {
              var decipher = data[k]; // some of these arrays may return zero, so
              // check if undefined

              if (DUP_HASH[decipher.charAt(0)] !== undefined) {
                // be careful when reading this, to keep
                // spectra efficient, DUPS are actually
                // discarded, except the last y!
                var dup = parseInt(DUP_HASH[decipher.charAt(0)] + decipher.substring(1)) - 1;

                for (var l = 0; l < dup; l++) {
                  lastX += abscissaSpacing;
                  lastDif = this.getValue(lastOrdinate, lastDif);
                  lastY = lastDif * yFactor;
                  count++;
                  spectrum.data[spectrum.data.length - 1] = new structures.Point(lastX / observeFrequency, lastY);
                }
              } else {
                // some of these arrays may return zero, so
                // check if undefined
                if (!(SQZ_HASH[decipher.charAt(0)] !== undefined && lastWasDif)) {
                  lastWasDif = DIF_HASH[decipher.charAt(0)] !== undefined;
                  lastOrdinate = decipher;
                  lastX += abscissaSpacing;
                  lastDif = this.getValue(decipher, lastDif);
                  lastY = lastDif * yFactor;
                  count++;
                  spectrum.data.push(new structures.Point(lastX / observeFrequency, lastY));
                } else {
                  lastY = this.getValue(decipher, lastDif) * yFactor;
                }
              }
            }
          }

          if (shiftOffsetNum !== -1) {
            var dif = shiftOffsetVal - spectrum.data[shiftOffsetNum - 1].x;

            for (var i = 0, ii = spectrum.data.length; i < ii; i++) {
              spectrum.data[i].x += dif;
            }
          }
        } else if (extensions.stringStartsWith(currentRecord, '##PEAK TABLE=')) {
          recordMeta = false;
          spectrum.continuous = false;
          var innerLines = currentRecord.split('\n');
          var count = 0;
          var reg = /[\s,]+/;

          for (var j = 1, jj = innerLines.length; j < jj; j++) {
            var items = innerLines[j].split(reg);
            count += items.length / 2;

            for (var k = 0, kk = items.length; k + 1 < kk; k += 2) {
              spectrum.data.push(new structures.Point(parseFloat(items[k].trim()), parseFloat(items[k + 1].trim())));
            }
          }
        } else if (extensions.stringStartsWith(currentRecord, '##ATOMLIST=')) {
          spectrum.molecule = new structures.Molecule();
          var innerLines = currentRecord.split('\n');
          var reg = /[\s]+/;

          for (var j = 1, jj = innerLines.length; j < jj; j++) {
            var items = innerLines[j].split(reg);
            spectrum.molecule.atoms.push(new structures.Atom(items[1]));
          }
        } else if (extensions.stringStartsWith(currentRecord, '##BONDLIST=')) {
          var innerLines = currentRecord.split('\n');
          var reg = /[\s]+/;

          for (var j = 1, jj = innerLines.length; j < jj; j++) {
            var items = innerLines[j].split(reg);
            var order = 1;

            if (items[2] === 'D') {
              order = 2;
            } else if (items[2] === 'T') {
              order = 3;
            }

            spectrum.molecule.bonds.push(new structures.Bond(spectrum.molecule.atoms[parseInt(items[0]) - 1], spectrum.molecule.atoms[parseInt(items[1]) - 1], order));
          }
        } else if (spectrum.molecule && extensions.stringStartsWith(currentRecord, '##XY_RASTER=')) {
          var innerLines = currentRecord.split('\n');
          var reg = /[\s]+/;

          for (var j = 1, jj = innerLines.length; j < jj; j++) {
            var items = innerLines[j].split(reg);
            var a = spectrum.molecule.atoms[parseInt(items[0]) - 1];
            a.x = parseInt(items[1]);
            a.y = parseInt(items[2]);

            if (items.length == 4) {
              a.z = parseInt(items[3]);
            }
          }

          spectrum.molecule.scaleToAverageBondLength(20);
        } else if (extensions.stringStartsWith(currentRecord, '##PEAK ASSIGNMENTS=')) {
          var innerLines = currentRecord.split('\n');
          var reg = /[\s,()<>]+/;
          spectrum.assignments = [];

          for (var j = 1, jj = innerLines.length; j < jj; j++) {
            var items = innerLines[j].split(reg);
            var x = parseFloat(items[1]);
            var y = parseFloat(items[2]);
            var a = spectrum.molecule.atoms[parseInt(items[3]) - 1];
            var used = false;

            for (var k = 0, kk = spectrum.assignments.length; k < kk; k++) {
              var assign = spectrum.assignments[k];

              if (assign.x === x) {
                assign.as.push(a);
                a.assigned = assign;
                used = true;
                break;
              }
            }

            if (!used) {
              var assign = {
                x: x,
                y: y,
                as: [a]
              };
              a.assigned = assign;
              spectrum.assignments.push(assign);
            }
          }
        }
      }
    }

    spectrum.setup();
    return spectrum;
  };

  _.makeStructureSpectrumSet = function (id, content) {
    this.convertHZ2PPM = true;
    var spectrum = this.read(content);
    var mcanvas = new c.ViewerCanvas(id + '_molecule', 200, 200);
    mcanvas.specs.atoms_displayTerminalCarbonLabels_2D = true;
    mcanvas.specs.atoms_displayImplicitHydrogens_2D = true;

    mcanvas.mouseout = function (e) {
      if (this.molecules.length !== 0) {
        for (var i = 0, ii = this.molecules[0].atoms.length; i < ii; i++) {
          this.molecules[0].atoms[i].isHover = false;
        }

        spectrum.hovered = undefined;
        this.repaint();
        scanvas.repaint();
      }
    };

    mcanvas.touchend = mcanvas.mouseout;

    mcanvas.mousemove = function (e) {
      if (this.molecules.length !== 0) {
        var closest = undefined;

        for (var i = 0, ii = this.molecules[0].atoms.length; i < ii; i++) {
          var a = this.molecules[0].atoms[i];
          a.isHover = false;

          if (a.assigned && (closest === undefined || e.p.distance(a) < e.p.distance(closest))) {
            closest = a;
          }
        }

        spectrum.hovered = undefined;

        if (e.p.distance(closest) < 20) {
          for (var i = 0, ii = closest.assigned.as.length; i < ii; i++) {
            closest.assigned.as[i].isHover = true;
          }

          scanvas.spectrum.hovered = closest.assigned;
        }

        this.repaint();
        scanvas.repaint();
      }
    };

    mcanvas.touchmove = mcanvas.mousemove;

    mcanvas.drawChildExtras = function (ctx, specs) {
      if (this.molecules.length !== 0) {
        for (var i = 0, ii = this.molecules[0].atoms.length; i < ii; i++) {
          this.molecules[0].atoms[i].drawDecorations(ctx, specs);
        }
      }
    };

    var scanvas = new c.ObserverCanvas(id + '_spectrum', 400, 200);
    scanvas.specs.plots_showYAxis = false;
    scanvas.specs.plots_flipXAxis = true;

    scanvas.mouseout = function (e) {
      if (this.spectrum && this.spectrum.assignments) {
        for (var i = 0, ii = mcanvas.molecules[0].atoms.length; i < ii; i++) {
          mcanvas.molecules[0].atoms[i].isHover = false;
        }

        this.spectrum.hovered = undefined;
        mcanvas.repaint();
        this.repaint();
      }
    };

    scanvas.touchend = scanvas.mouseout;

    scanvas.mousemove = function (e) {
      if (this.spectrum && this.spectrum.assignments) {
        var closest = undefined;

        for (var i = 0, ii = mcanvas.molecules[0].atoms.length; i < ii; i++) {
          mcanvas.molecules[0].atoms[i].isHover = false;
        }

        this.spectrum.hovered = undefined;

        for (var i = 0, ii = this.spectrum.assignments.length; i < ii; i++) {
          var a = this.spectrum.assignments[i];

          if (closest === undefined || Math.abs(this.spectrum.getTransformedX(a.x, this.specs, this.spectrum.memory.width, this.spectrum.memory.offsetLeft) - e.p.x) < Math.abs(this.spectrum.getTransformedX(closest.x, this.specs, this.spectrum.memory.width, this.spectrum.memory.offsetLeft) - e.p.x)) {
            closest = a;
          }
        }

        if (Math.abs(this.spectrum.getTransformedX(closest.x, this.specs, this.spectrum.memory.width, this.spectrum.memory.offsetLeft) - e.p.x) < 20) {
          for (var i = 0, ii = closest.as.length; i < ii; i++) {
            closest.as[i].isHover = true;
          }

          this.spectrum.hovered = closest;
        }

        mcanvas.repaint();
        this.repaint();
      }
    };

    scanvas.touchmove = scanvas.mousemove;

    scanvas.drawChildExtras = function (ctx) {
      if (this.spectrum && this.spectrum.hovered) {
        var x = this.spectrum.getTransformedX(this.spectrum.hovered.x, scanvas.specs, this.spectrum.memory.width, this.spectrum.memory.offsetLeft);

        if (x >= this.spectrum.memory.offsetLeft && x < this.spectrum.memory.width) {
          ctx.save();
          ctx.strokeStyle = '#885110';
          ctx.lineWidth = 3;
          ctx.beginPath();
          ctx.moveTo(x, this.spectrum.memory.height - this.spectrum.memory.offsetBottom);
          ctx.lineTo(x, this.spectrum.getTransformedY(this.spectrum.hovered.y, scanvas.specs, this.spectrum.memory.height, this.spectrum.memory.offsetBottom, this.spectrum.memory.offsetTop));
          ctx.stroke();
          ctx.restore();
        }
      }
    };

    if (spectrum) {
      scanvas.loadSpectrum(spectrum);

      if (spectrum.molecule) {
        mcanvas.loadMolecule(spectrum.molecule);
      }
    }

    return [mcanvas, scanvas];
  }; // shortcuts


  var interpreter = new io.JCAMPInterpreter();
  interpreter.convertHZ2PPM = true;

  c.readJCAMP = function (content) {
    return interpreter.read(content);
  };
})(ChemDoodle, ChemDoodle.extensions, ChemDoodle.io, ChemDoodle.structures, ChemDoodle.lib.jQuery);

(function (c, io, structures, undefined) {
  'use strict';

  io.RXNInterpreter = function () {};

  var _ = io.RXNInterpreter.prototype = new io._Interpreter();

  _.read = function (content, multiplier) {
    if (!multiplier) {
      multiplier = c.default_bondLength_2D;
    }

    var molecules = [];
    var line;

    if (!content) {
      molecules.push(new structures.Molecule());
      line = new structures.d2.Line(new structures.Point(-20, 0), new structures.Point(20, 0));
    } else {
      var contentTokens = content.split('$MOL\n');
      var headerTokens = contentTokens[0].split('\n');
      var counts = headerTokens[4];
      var numReactants = parseInt(counts.substring(0, 3));
      var numProducts = parseInt(counts.substring(3, 6));
      var currentMolecule = 1;
      var start = 0;

      for (var i = 0, ii = numReactants + numProducts; i < ii; i++) {
        molecules[i] = c.readMOL(contentTokens[currentMolecule], multiplier);
        var b = molecules[i].getBounds();
        var width = b.maxX - b.minX;
        start -= width + 40;
        currentMolecule++;
      }

      for (var i = 0, ii = numReactants; i < ii; i++) {
        var b = molecules[i].getBounds();
        var width = b.maxX - b.minX;
        var center = molecules[i].getCenter();

        for (var j = 0, jj = molecules[i].atoms.length; j < jj; j++) {
          var a = molecules[i].atoms[j];
          a.x += start + width / 2 - center.x;
          a.y -= center.y;
        }

        start += width + 40;
      }

      line = new structures.d2.Line(new structures.Point(start, 0), new structures.Point(start + 40, 0));
      start += 80;

      for (var i = numReactants, ii = numReactants + numProducts; i < ii; i++) {
        var b = molecules[i].getBounds();
        var width = b.maxX - b.minX;
        var center = molecules[i].getCenter();

        for (var j = 0; j < molecules[i].atoms.length; j++) {
          var a = molecules[i].atoms[j];
          a.x += start + width / 2 - center.x;
          a.y -= center.y;
        }

        start += width + 40;
      }
    }

    line.arrowType = structures.d2.Line.ARROW_SYNTHETIC;
    return {
      'molecules': molecules,
      'shapes': [line]
    };
  };

  _.write = function (mols, shapes) {
    var molecules = [[], []];
    var ps = undefined;

    if (!mols || !shapes) {
      return;
    }

    for (i = 0, ii = shapes.length; i < ii; i++) {
      if (shapes[i] instanceof structures.d2.Line) {
        ps = shapes[i].getPoints();
        break;
      }
    }

    if (!ps) {
      return '';
    }

    for (var i = 0, ii = mols.length; i < ii; i++) {
      var center = mols[i].getCenter();

      if (center.x < ps[1].x) {
        molecules[0].push(mols[i]);
      } else {
        molecules[1].push(mols[i]);
      }
    }

    var sb = [];
    sb.push('$RXN\nReaction from ChemDoodle Web Components\n\nhttp://www.ichemlabs.com\n');
    sb.push(this.fit(molecules[0].length.toString(), 3));
    sb.push(this.fit(molecules[1].length.toString(), 3));
    sb.push('\n');

    for (var i = 0; i < 2; i++) {
      for (var j = 0, jj = molecules[i].length; j < jj; j++) {
        sb.push('$MOL\n');
        sb.push(c.writeMOL(molecules[i][j]));
        sb.push('\n');
      }
    }

    return sb.join('');
  }; // shortcuts


  var interpreter = new io.RXNInterpreter();

  c.readRXN = function (content, multiplier) {
    return interpreter.read(content, multiplier);
  };

  c.writeRXN = function (mols, shapes) {
    return interpreter.write(mols, shapes);
  };
})(ChemDoodle, ChemDoodle.io, ChemDoodle.structures);

(function (c, ELEMENT, SYMBOLS, io, structures, trim, undefined) {
  'use strict';

  io.XYZInterpreter = function () {};

  var _ = io.XYZInterpreter.prototype = new io._Interpreter();

  _.deduceCovalentBonds = true;

  _.read = function (content) {
    var molecule = new structures.Molecule();

    if (!content) {
      return molecule;
    }

    var lines = content.split('\n');
    var numAtoms = parseInt(trim(lines[0]));

    for (var i = 0; i < numAtoms; i++) {
      var line = lines[i + 2];
      var tokens = line.split(/\s+/g);
      molecule.atoms[i] = new structures.Atom(isNaN(tokens[0]) ? tokens[0] : SYMBOLS[parseInt(tokens[0]) - 1], parseFloat(tokens[1]), parseFloat(tokens[2]), parseFloat(tokens[3]));
    }

    if (this.deduceCovalentBonds) {
      new c.informatics.BondDeducer().deduceCovalentBonds(molecule, 1);
    }

    return molecule;
  }; // shortcuts


  var interpreter = new io.XYZInterpreter();

  c.readXYZ = function (content) {
    return interpreter.read(content);
  };
})(ChemDoodle, ChemDoodle.ELEMENT, ChemDoodle.SYMBOLS, ChemDoodle.io, ChemDoodle.structures, ChemDoodle.lib.jQuery.trim);

ChemDoodle.monitor = _ChemDoodle_monitor__WEBPACK_IMPORTED_MODULE_8__["default"];

(function (io, document, window, undefined) {
  'use strict';

  io.png = {};

  io.png.string = function (canvas) {
    // this will not work for WebGL canvases in some browsers
    // to fix that you need to set the "preserveDrawingBuffer" to true when
    // creating the WebGL context
    // note that this will cause performance issues on some platforms and is
    // therefore not done by default
    return document.getElementById(canvas.id).toDataURL('image/png');
  };

  io.png.open = function (canvas) {
    window.open(this.string(canvas));
  };
})(ChemDoodle.io, document, window);

(function (io, q, undefined) {
  'use strict';

  io.file = {}; // this function will only work with files from the same origin it is being
  // called from, unless the receiving server supports XHR2

  io.file.content = function (url, callback) {
    q.get(url, '', callback);
  };
})(ChemDoodle.io, ChemDoodle.lib.jQuery);

/***/ })

/******/ })["ChemDoodle"];
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,