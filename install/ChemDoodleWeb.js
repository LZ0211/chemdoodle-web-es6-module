(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("ChemDoodle", [], factory);
	else if(typeof exports === 'object')
		exports["ChemDoodle"] = factory();
	else
		root["ChemDoodle"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/ChemDoodleWeb-unpacked.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/jquery-mousewheel/jquery.mousewheel.js":
/*!*************************************************************!*\
  !*** ./node_modules/jquery-mousewheel/jquery.mousewheel.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery Mousewheel 3.1.13\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n */\n\n(function (factory) {\n    if ( true ) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(function ($) {\n\n    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],\n        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?\n                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],\n        slice  = Array.prototype.slice,\n        nullLowestDeltaTimeout, lowestDelta;\n\n    if ( $.event.fixHooks ) {\n        for ( var i = toFix.length; i; ) {\n            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;\n        }\n    }\n\n    var special = $.event.special.mousewheel = {\n        version: '3.1.12',\n\n        setup: function() {\n            if ( this.addEventListener ) {\n                for ( var i = toBind.length; i; ) {\n                    this.addEventListener( toBind[--i], handler, false );\n                }\n            } else {\n                this.onmousewheel = handler;\n            }\n            // Store the line height and page height for this particular element\n            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));\n            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));\n        },\n\n        teardown: function() {\n            if ( this.removeEventListener ) {\n                for ( var i = toBind.length; i; ) {\n                    this.removeEventListener( toBind[--i], handler, false );\n                }\n            } else {\n                this.onmousewheel = null;\n            }\n            // Clean up the data we added to the element\n            $.removeData(this, 'mousewheel-line-height');\n            $.removeData(this, 'mousewheel-page-height');\n        },\n\n        getLineHeight: function(elem) {\n            var $elem = $(elem),\n                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();\n            if (!$parent.length) {\n                $parent = $('body');\n            }\n            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;\n        },\n\n        getPageHeight: function(elem) {\n            return $(elem).height();\n        },\n\n        settings: {\n            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below\n            normalizeOffset: true  // calls getBoundingClientRect for each event\n        }\n    };\n\n    $.fn.extend({\n        mousewheel: function(fn) {\n            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');\n        },\n\n        unmousewheel: function(fn) {\n            return this.unbind('mousewheel', fn);\n        }\n    });\n\n\n    function handler(event) {\n        var orgEvent   = event || window.event,\n            args       = slice.call(arguments, 1),\n            delta      = 0,\n            deltaX     = 0,\n            deltaY     = 0,\n            absDelta   = 0,\n            offsetX    = 0,\n            offsetY    = 0;\n        event = $.event.fix(orgEvent);\n        event.type = 'mousewheel';\n\n        // Old school scrollwheel delta\n        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }\n        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }\n        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }\n        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }\n\n        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event\n        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {\n            deltaX = deltaY * -1;\n            deltaY = 0;\n        }\n\n        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy\n        delta = deltaY === 0 ? deltaX : deltaY;\n\n        // New school wheel delta (wheel event)\n        if ( 'deltaY' in orgEvent ) {\n            deltaY = orgEvent.deltaY * -1;\n            delta  = deltaY;\n        }\n        if ( 'deltaX' in orgEvent ) {\n            deltaX = orgEvent.deltaX;\n            if ( deltaY === 0 ) { delta  = deltaX * -1; }\n        }\n\n        // No change actually happened, no reason to go any further\n        if ( deltaY === 0 && deltaX === 0 ) { return; }\n\n        // Need to convert lines and pages to pixels if we aren't already in pixels\n        // There are three delta modes:\n        //   * deltaMode 0 is by pixels, nothing to do\n        //   * deltaMode 1 is by lines\n        //   * deltaMode 2 is by pages\n        if ( orgEvent.deltaMode === 1 ) {\n            var lineHeight = $.data(this, 'mousewheel-line-height');\n            delta  *= lineHeight;\n            deltaY *= lineHeight;\n            deltaX *= lineHeight;\n        } else if ( orgEvent.deltaMode === 2 ) {\n            var pageHeight = $.data(this, 'mousewheel-page-height');\n            delta  *= pageHeight;\n            deltaY *= pageHeight;\n            deltaX *= pageHeight;\n        }\n\n        // Store lowest absolute delta to normalize the delta values\n        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );\n\n        if ( !lowestDelta || absDelta < lowestDelta ) {\n            lowestDelta = absDelta;\n\n            // Adjust older deltas if necessary\n            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {\n                lowestDelta /= 40;\n            }\n        }\n\n        // Adjust older deltas if necessary\n        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {\n            // Divide all the things by 40!\n            delta  /= 40;\n            deltaX /= 40;\n            deltaY /= 40;\n        }\n\n        // Get a whole, normalized value for the deltas\n        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);\n        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);\n        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);\n\n        // Normalise offsetX and offsetY properties\n        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {\n            var boundingRect = this.getBoundingClientRect();\n            offsetX = event.clientX - boundingRect.left;\n            offsetY = event.clientY - boundingRect.top;\n        }\n\n        // Add information to the event object\n        event.deltaX = deltaX;\n        event.deltaY = deltaY;\n        event.deltaFactor = lowestDelta;\n        event.offsetX = offsetX;\n        event.offsetY = offsetY;\n        // Go ahead and set deltaMode to 0 since we converted to pixels\n        // Although this is a little odd since we overwrite the deltaX/Y\n        // properties with normalized deltas.\n        event.deltaMode = 0;\n\n        // Add event and delta to the front of the arguments\n        args.unshift(event, delta, deltaX, deltaY);\n\n        // Clearout lowestDelta after sometime to better\n        // handle multiple device types that give different\n        // a different lowestDelta\n        // Ex: trackpad = 3 and mouse wheel = 120\n        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }\n        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);\n\n        return ($.event.dispatch || $.event.handle).apply(this, args);\n    }\n\n    function nullLowestDelta() {\n        lowestDelta = null;\n    }\n\n    function shouldAdjustOldDeltas(orgEvent, absDelta) {\n        // If this is an older event and the delta is divisable by 120,\n        // then we are assuming that the browser is treating this as an\n        // older mouse wheel event and that we should divide the deltas\n        // by 40 to try and get a more usable deltaFactor.\n        // Side note, this actually impacts the reported scroll distance\n        // in older browsers and can cause scrolling to be slower than native.\n        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.\n        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;\n    }\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery-mousewheel/jquery.mousewheel.js\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v2.2.4\n * http://jquery.com/\n *\n * Includes Sizzle.js\n * http://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-05-20T17:23Z\n */\n\n(function( global, factory ) {\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n}(typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Support: Firefox 18+\n// Can't be in strict mode, several libs including ASP.NET trace\n// the stack via arguments.caller.callee and Firefox dies if\n// you try to trace through \"use strict\" call chains. (#13335)\n//\"use strict\";\nvar arr = [];\n\nvar document = window.document;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar support = {};\n\n\n\nvar\n\tversion = \"2.2.4\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android<4.1\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\trdashAlpha = /-([\\da-z])/gi,\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function( all, letter ) {\n\t\treturn letter.toUpperCase();\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// Start with an empty selector\n\tselector: \"\",\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\t\treturn num != null ?\n\n\t\t\t// Return just the one element from the set\n\t\t\t( num < 0 ? this[ num + this.length ] : this[ num ] ) :\n\n\t\t\t// Return all the elements in a clean array\n\t\t\tslice.call( this );\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\t\tret.context = this.context;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = jQuery.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && jQuery.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisFunction: function( obj ) {\n\t\treturn jQuery.type( obj ) === \"function\";\n\t},\n\n\tisArray: Array.isArray,\n\n\tisWindow: function( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t},\n\n\tisNumeric: function( obj ) {\n\n\t\t// parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t// adding 1 corrects loss of precision from parseFloat (#15100)\n\t\tvar realStringObj = obj && obj.toString();\n\t\treturn !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;\n\t},\n\n\tisPlainObject: function( obj ) {\n\t\tvar key;\n\n\t\t// Not plain objects:\n\t\t// - Any object or value whose internal [[Class]] property is not \"[object Object]\"\n\t\t// - DOM nodes\n\t\t// - window\n\t\tif ( jQuery.type( obj ) !== \"object\" || obj.nodeType || jQuery.isWindow( obj ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Not own constructor property must be Object\n\t\tif ( obj.constructor &&\n\t\t\t\t!hasOwn.call( obj, \"constructor\" ) &&\n\t\t\t\t!hasOwn.call( obj.constructor.prototype || {}, \"isPrototypeOf\" ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t// if last one is own, then all properties are own\n\t\tfor ( key in obj ) {}\n\n\t\treturn key === undefined || hasOwn.call( obj, key );\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\ttype: function( obj ) {\n\t\tif ( obj == null ) {\n\t\t\treturn obj + \"\";\n\t\t}\n\n\t\t// Support: Android<4.0, iOS<6 (functionish RegExp)\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\t\ttypeof obj;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tvar script,\n\t\t\tindirect = eval;\n\n\t\tcode = jQuery.trim( code );\n\n\t\tif ( code ) {\n\n\t\t\t// If the code includes a valid, prologue position\n\t\t\t// strict mode pragma, execute code by injecting a\n\t\t\t// script tag into the document.\n\t\t\tif ( code.indexOf( \"use strict\" ) === 1 ) {\n\t\t\t\tscript = document.createElement( \"script\" );\n\t\t\t\tscript.text = code;\n\t\t\t\tdocument.head.appendChild( script ).parentNode.removeChild( script );\n\t\t\t} else {\n\n\t\t\t\t// Otherwise, avoid the DOM node creation, insertion\n\t\t\t\t// and removal by using an indirect global eval\n\n\t\t\t\tindirect( code );\n\t\t\t}\n\t\t}\n\t},\n\n\t// Convert dashed to camelCase; used by the css and data modules\n\t// Support: IE9-11+\n\t// Microsoft forgot to hump their vendor prefix (#9572)\n\tcamelCase: function( string ) {\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n\t},\n\n\tnodeName: function( elem, name ) {\n\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android<4.1\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// Bind a function to a context, optionally partially applying any\n\t// arguments.\n\tproxy: function( fn, context ) {\n\t\tvar tmp, args, proxy;\n\n\t\tif ( typeof context === \"string\" ) {\n\t\t\ttmp = fn[ context ];\n\t\t\tcontext = fn;\n\t\t\tfn = tmp;\n\t\t}\n\n\t\t// Quick check to determine if target is callable, in the spec\n\t\t// this throws a TypeError, but we will just return undefined.\n\t\tif ( !jQuery.isFunction( fn ) ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Simulated bind\n\t\targs = slice.call( arguments, 2 );\n\t\tproxy = function() {\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t\t};\n\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\treturn proxy;\n\t},\n\n\tnow: Date.now,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\n// JSHint would error on this code due to the Symbol not being defined in ES5.\n// Defining this global in .jshintrc would create a danger of using the global\n// unguarded in another place, it seems safer to just disable JSHint for these\n// three lines.\n/* jshint ignore: start */\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n/* jshint ignore: end */\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: iOS 8.2 (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = jQuery.type( obj );\n\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.2.1\n * http://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2015-10-17\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// General-purpose constants\n\tMAX_NEGATIVE = 1 << 31,\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// http://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\trescape = /'|\\\\/g,\n\n\t// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t};\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, nidselect, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rescape, \"\\\\$&\" );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\tnidselect = ridentifier.test( nid ) ? \"#\" + nid : \"[id='\" + nid + \"']\";\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = nidselect + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created div and expects a boolean result\n */\nfunction assert( fn ) {\n\tvar div = document.createElement(\"div\");\n\n\ttry {\n\t\treturn !!fn( div );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( div.parentNode ) {\n\t\t\tdiv.parentNode.removeChild( div );\n\t\t}\n\t\t// release memory in IE\n\t\tdiv = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\t( ~b.sourceIndex || MAX_NEGATIVE ) -\n\t\t\t( ~a.sourceIndex || MAX_NEGATIVE );\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, parent,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( (parent = document.defaultView) && parent.top !== parent ) {\n\t\t// Support: IE 11\n\t\tif ( parent.addEventListener ) {\n\t\t\tparent.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( parent.attachEvent ) {\n\t\t\tparent.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( div ) {\n\t\tdiv.className = \"i\";\n\t\treturn !div.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( div ) {\n\t\tdiv.appendChild( document.createComment(\"\") );\n\t\treturn !div.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( div ) {\n\t\tdocElem.appendChild( div ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID find and filter\n\tif ( support.getById ) {\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar m = context.getElementById( id );\n\t\t\t\treturn m ? [ m ] : [];\n\t\t\t}\n\t\t};\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t} else {\n\t\t// Support: IE6/7\n\t\t// getElementById is not reliable as a find shortcut\n\t\tdelete Expr.find[\"ID\"];\n\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See http://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( div ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// http://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( div ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( div.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !div.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !div.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !div.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibing-combinator selector` fails\n\t\t\tif ( !div.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( div ) {\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tdiv.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( div.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !div.querySelectorAll(\":enabled\").length ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tdiv.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( div ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( div, \"div\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( div, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": function( elem ) {\n\t\t\treturn elem.disabled === false;\n\t\t},\n\n\t\t\"disabled\": function( elem ) {\n\t\t\treturn elem.disabled === true;\n\t\t},\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tcheckNonElements = base && dir === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( (oldCache = uniqueCache[ dir ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ dir ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tsupport.getById && context.nodeType === 9 && documentIsHTML &&\n\t\t\t\tExpr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( div1 ) {\n\t// Should return 1, but returns 4 (following)\n\treturn div1.compareDocumentPosition( document.createElement(\"div\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( div ) {\n\tdiv.innerHTML = \"<a href='#'></a>\";\n\treturn div.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( div ) {\n\tdiv.innerHTML = \"<input/>\";\n\tdiv.firstChild.setAttribute( \"value\", \"\" );\n\treturn div.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( div ) {\n\treturn div.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = ( /^<([\\w-]+)\\s*\\/?>(?:<\\/\\1>|)$/ );\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( jQuery.isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\t/* jshint -W018 */\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\n\t}\n\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\n\t}\n\n\tif ( typeof qualifier === \"string\" ) {\n\t\tif ( risSimple.test( qualifier ) ) {\n\t\t\treturn jQuery.filter( qualifier, elements, not );\n\t\t}\n\n\t\tqualifier = jQuery.filter( qualifier, elements );\n\t}\n\n\treturn jQuery.grep( elements, function( elem ) {\n\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t} );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\treturn elems.length === 1 && elem.nodeType === 1 ?\n\t\tjQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :\n\t\tjQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\t\treturn elem.nodeType === 1;\n\t\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i,\n\t\t\tlen = this.length,\n\t\t\tret = [],\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\t// Needed because $( selector, context ) becomes $( context ).find( selector )\n\t\tret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );\n\t\tret.selector = this.selector ? this.selector + \" \" + selector : selector;\n\t\treturn ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\t// Support: Blackberry 4.6\n\t\t\t\t\t// gEBID returns nodes no longer in the document (#6963)\n\t\t\t\t\tif ( elem && elem.parentNode ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.context = document;\n\t\t\t\t\tthis.selector = selector;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis.context = this[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( jQuery.isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\tif ( selector.selector !== undefined ) {\n\t\t\tthis.selector = selector.selector;\n\t\t\tthis.context = selector.context;\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\tpos = rneedsContext.test( selectors ) || typeof selectors !== \"string\" ?\n\t\t\t\tjQuery( selectors, context || this.context ) :\n\t\t\t\t0;\n\n\t\tfor ( ; i < l; i++ ) {\n\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t// Always skip document fragments\n\t\t\t\tif ( cur.nodeType < 11 && ( pos ?\n\t\t\t\t\tpos.index( cur ) > -1 :\n\n\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\treturn elem.contentDocument || jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnotwhite = ( /\\S+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( jQuery.isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && jQuery.type( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, listener list, final state\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ), \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ), \"rejected\" ],\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ) ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\tthen: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];\n\n\t\t\t\t\t\t\t// deferred[ done | fail | progress ] for forwarding actions to newDefer\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis === promise ? newDefer.promise() : this,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Keep pipe for back-compat\n\t\tpromise.pipe = promise.then;\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 3 ];\n\n\t\t\t// promise[ done | fail | progress ] = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add( function() {\n\n\t\t\t\t\t// state = [ resolved | rejected ]\n\t\t\t\t\tstate = stateString;\n\n\t\t\t\t// [ reject_list | resolve_list ].disable; progress_list.lock\n\t\t\t\t}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );\n\t\t\t}\n\n\t\t\t// deferred[ resolve | reject | notify ]\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? promise : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( subordinate /* , ..., subordinateN */ ) {\n\t\tvar i = 0,\n\t\t\tresolveValues = slice.call( arguments ),\n\t\t\tlength = resolveValues.length,\n\n\t\t\t// the count of uncompleted subordinates\n\t\t\tremaining = length !== 1 ||\n\t\t\t\t( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,\n\n\t\t\t// the master Deferred.\n\t\t\t// If resolveValues consist of only a single Deferred, just use that.\n\t\t\tdeferred = remaining === 1 ? subordinate : jQuery.Deferred(),\n\n\t\t\t// Update function for both resolve and progress values\n\t\t\tupdateFunc = function( i, contexts, values ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tcontexts[ i ] = this;\n\t\t\t\t\tvalues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( values === progressValues ) {\n\t\t\t\t\t\tdeferred.notifyWith( contexts, values );\n\t\t\t\t\t} else if ( !( --remaining ) ) {\n\t\t\t\t\t\tdeferred.resolveWith( contexts, values );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tprogressValues, progressContexts, resolveContexts;\n\n\t\t// Add listeners to Deferred subordinates; treat others as resolved\n\t\tif ( length > 1 ) {\n\t\t\tprogressValues = new Array( length );\n\t\t\tprogressContexts = new Array( length );\n\t\t\tresolveContexts = new Array( length );\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {\n\t\t\t\t\tresolveValues[ i ].promise()\n\t\t\t\t\t\t.progress( updateFunc( i, progressContexts, progressValues ) )\n\t\t\t\t\t\t.done( updateFunc( i, resolveContexts, resolveValues ) )\n\t\t\t\t\t\t.fail( deferred.reject );\n\t\t\t\t} else {\n\t\t\t\t\t--remaining;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we're not waiting on anything, resolve the master\n\t\tif ( !remaining ) {\n\t\t\tdeferred.resolveWith( resolveContexts, resolveValues );\n\t\t}\n\n\t\treturn deferred.promise();\n\t}\n} );\n\n\n// The deferred used on DOM ready\nvar readyList;\n\njQuery.fn.ready = function( fn ) {\n\n\t// Add the callback\n\tjQuery.ready.promise().done( fn );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Hold (or release) the ready event\n\tholdReady: function( hold ) {\n\t\tif ( hold ) {\n\t\t\tjQuery.readyWait++;\n\t\t} else {\n\t\t\tjQuery.ready( true );\n\t\t}\n\t},\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\n\t\t// Trigger any bound ready events\n\t\tif ( jQuery.fn.triggerHandler ) {\n\t\t\tjQuery( document ).triggerHandler( \"ready\" );\n\t\t\tjQuery( document ).off( \"ready\" );\n\t\t}\n\t}\n} );\n\n/**\n * The ready event handler and self cleanup method\n */\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\njQuery.ready.promise = function( obj ) {\n\tif ( !readyList ) {\n\n\t\treadyList = jQuery.Deferred();\n\n\t\t// Catch cases where $(document).ready() is called\n\t\t// after the browser event has already occurred.\n\t\t// Support: IE9-10 only\n\t\t// Older IE sometimes signals \"interactive\" too soon\n\t\tif ( document.readyState === \"complete\" ||\n\t\t\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\t\t\twindow.setTimeout( jQuery.ready );\n\n\t\t} else {\n\n\t\t\t// Use the handy event callback\n\t\t\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t\t\t// A fallback to window.onload, that will always work\n\t\t\twindow.addEventListener( \"load\", completed );\n\t\t}\n\t}\n\treturn readyList.promise( obj );\n};\n\n// Kick off the DOM ready check even if the user does not\njQuery.ready.promise();\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( jQuery.type( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !jQuery.isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn chainable ?\n\t\telems :\n\n\t\t// Gets\n\t\tbulk ?\n\t\t\tfn.call( elems ) :\n\t\t\tlen ? fn( elems[ 0 ], key ) : emptyGet;\n};\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\t/* jshint -W018 */\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tregister: function( owner, initial ) {\n\t\tvar value = initial || {};\n\n\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t// use plain assignment\n\t\tif ( owner.nodeType ) {\n\t\t\towner[ this.expando ] = value;\n\n\t\t// Otherwise secure it in a non-enumerable, non-writable property\n\t\t// configurability must be true to allow the property to be\n\t\t// deleted with the delete operator\n\t\t} else {\n\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\tvalue: value,\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: true\n\t\t\t} );\n\t\t}\n\t\treturn owner[ this.expando ];\n\t},\n\tcache: function( owner ) {\n\n\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t// but we should not, see #8335.\n\t\t// Always return an empty object.\n\t\tif ( !acceptData( owner ) ) {\n\t\t\treturn {};\n\t\t}\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ data ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ prop ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\t\t\towner[ this.expando ] && owner[ this.expando ][ key ];\n\t},\n\taccess: function( owner, key, value ) {\n\t\tvar stored;\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\tstored = this.get( owner, key );\n\n\t\t\treturn stored !== undefined ?\n\t\t\t\tstored : this.get( owner, jQuery.camelCase( key ) );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i, name, camel,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key === undefined ) {\n\t\t\tthis.register( owner );\n\n\t\t} else {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( jQuery.isArray( key ) ) {\n\n\t\t\t\t// If \"name\" is an array of keys...\n\t\t\t\t// When data is initially created, via (\"key\", \"val\") signature,\n\t\t\t\t// keys will be converted to camelCase.\n\t\t\t\t// Since there is no way to tell _how_ a key was added, remove\n\t\t\t\t// both plain key and camelCase key. #12786\n\t\t\t\t// This will only penalize the array argument path.\n\t\t\t\tname = key.concat( key.map( jQuery.camelCase ) );\n\t\t\t} else {\n\t\t\t\tcamel = jQuery.camelCase( key );\n\n\t\t\t\t// Try the string as a key before any manipulation\n\t\t\t\tif ( key in cache ) {\n\t\t\t\t\tname = [ key, camel ];\n\t\t\t\t} else {\n\n\t\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\t\tname = camel;\n\t\t\t\t\tname = name in cache ?\n\t\t\t\t\t\t[ name ] : ( name.match( rnotwhite ) || [] );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = name.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ name[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <= 35-45+\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://code.google.com/p/chromium/issues/detail?id=378607\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = data === \"true\" ? true :\n\t\t\t\t\tdata === \"false\" ? false :\n\t\t\t\t\tdata === \"null\" ? null :\n\n\t\t\t\t\t// Only convert to a number if it doesn't change the string\n\t\t\t\t\t+data + \"\" === data ? +data :\n\t\t\t\t\trbrace.test( data ) ? jQuery.parseJSON( data ) :\n\t\t\t\t\tdata;\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE11+\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data, camelKey;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// with the key as-is\n\t\t\t\tdata = dataUser.get( elem, key ) ||\n\n\t\t\t\t\t// Try to find dashed key if it exists (gh-2779)\n\t\t\t\t\t// This is for 2.2.x only\n\t\t\t\t\tdataUser.get( elem, key.replace( rmultiDash, \"-$&\" ).toLowerCase() );\n\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\tcamelKey = jQuery.camelCase( key );\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// with the key camelized\n\t\t\t\tdata = dataUser.get( elem, camelKey );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, camelKey, undefined );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tcamelKey = jQuery.camelCase( key );\n\t\t\tthis.each( function() {\n\n\t\t\t\t// First, attempt to store a copy or reference of any\n\t\t\t\t// data that might've been store with a camelCased key.\n\t\t\t\tvar data = dataUser.get( this, camelKey );\n\n\t\t\t\t// For HTML5 data-* attribute interop, we have to\n\t\t\t\t// store property names with dashes in a camelCase form.\n\t\t\t\t// This might not apply to all properties...*\n\t\t\t\tdataUser.set( this, camelKey, value );\n\n\t\t\t\t// *... In the case of properties that might _actually_\n\t\t\t\t// have dashes, we need to also store a copy of that\n\t\t\t\t// unchanged property.\n\t\t\t\tif ( key.indexOf( \"-\" ) > -1 && data !== undefined ) {\n\t\t\t\t\tdataUser.set( this, key, value );\n\t\t\t\t}\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || jQuery.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHidden = function( elem, el ) {\n\n\t\t// isHidden might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\t\treturn jQuery.css( elem, \"display\" ) === \"none\" ||\n\t\t\t!jQuery.contains( elem.ownerDocument, elem );\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted,\n\t\tscale = 1,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() { return tween.cur(); } :\n\t\t\tfunction() { return jQuery.css( elem, prop, \"\" ); },\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\tdo {\n\n\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\tscale = scale || \".5\";\n\n\t\t\t// Adjust and apply\n\t\t\tinitialInUnit = initialInUnit / scale;\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n\t\t} while (\n\t\t\tscale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\n\t\t);\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([\\w:-]+)/ );\n\nvar rscriptType = ( /^$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE9\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE9\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE9-11+\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret = typeof context.getElementsByTagName !== \"undefined\" ?\n\t\t\tcontext.getElementsByTagName( tag || \"*\" ) :\n\t\t\ttypeof context.querySelectorAll !== \"undefined\" ?\n\t\t\t\tcontext.querySelectorAll( tag || \"*\" ) :\n\t\t\t[];\n\n\treturn tag === undefined || tag && jQuery.nodeName( context, tag ) ?\n\t\tjQuery.merge( [ context ], ret ) :\n\t\tret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, contains, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( jQuery.type( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android<4.1, PhantomJS<2\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android<4.1, PhantomJS<2\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0-4.3, Safari<=5.1\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Safari<=5.1, Android<4.2\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE<=11+\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE9\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( event ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tevent = jQuery.event.fix( event );\n\n\t\tvar i, j, ret, matched, handleObj,\n\t\t\thandlerQueue = [],\n\t\t\targs = slice.call( arguments ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, matches, sel, handleObj,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Support (at least): Chrome, IE9\n\t\t// Find delegate handlers\n\t\t// Black-hole SVG <use> instance trees (#13180)\n\t\t//\n\t\t// Support: Firefox<=42+\n\t\t// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)\n\t\tif ( delegateCount && cur.nodeType &&\n\t\t\t( event.type !== \"click\" || isNaN( event.button ) || event.button < 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== \"click\" ) ) {\n\t\t\t\t\tmatches = [];\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matches[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatches[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matches[ sel ] ) {\n\t\t\t\t\t\t\tmatches.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matches.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matches } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\t// Includes some event props shared by KeyEvent and MouseEvent\n\tprops: ( \"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase \" +\n\t\t\"metaKey relatedTarget shiftKey target timeStamp view which\" ).split( \" \" ),\n\n\tfixHooks: {},\n\n\tkeyHooks: {\n\t\tprops: \"char charCode key keyCode\".split( \" \" ),\n\t\tfilter: function( event, original ) {\n\n\t\t\t// Add which for key events\n\t\t\tif ( event.which == null ) {\n\t\t\t\tevent.which = original.charCode != null ? original.charCode : original.keyCode;\n\t\t\t}\n\n\t\t\treturn event;\n\t\t}\n\t},\n\n\tmouseHooks: {\n\t\tprops: ( \"button buttons clientX clientY offsetX offsetY pageX pageY \" +\n\t\t\t\"screenX screenY toElement\" ).split( \" \" ),\n\t\tfilter: function( event, original ) {\n\t\t\tvar eventDoc, doc, body,\n\t\t\t\tbutton = original.button;\n\n\t\t\t// Calculate pageX/Y if missing and clientX/Y available\n\t\t\tif ( event.pageX == null && original.clientX != null ) {\n\t\t\t\teventDoc = event.target.ownerDocument || document;\n\t\t\t\tdoc = eventDoc.documentElement;\n\t\t\t\tbody = eventDoc.body;\n\n\t\t\t\tevent.pageX = original.clientX +\n\t\t\t\t\t( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -\n\t\t\t\t\t( doc && doc.clientLeft || body && body.clientLeft || 0 );\n\t\t\t\tevent.pageY = original.clientY +\n\t\t\t\t\t( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -\n\t\t\t\t\t( doc && doc.clientTop  || body && body.clientTop  || 0 );\n\t\t\t}\n\n\t\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\t\t// Note: button is not normalized, so don't use it\n\t\t\tif ( !event.which && button !== undefined ) {\n\t\t\t\tevent.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );\n\t\t\t}\n\n\t\t\treturn event;\n\t\t}\n\t},\n\n\tfix: function( event ) {\n\t\tif ( event[ jQuery.expando ] ) {\n\t\t\treturn event;\n\t\t}\n\n\t\t// Create a writable copy of the event object and normalize some properties\n\t\tvar i, prop, copy,\n\t\t\ttype = event.type,\n\t\t\toriginalEvent = event,\n\t\t\tfixHook = this.fixHooks[ type ];\n\n\t\tif ( !fixHook ) {\n\t\t\tthis.fixHooks[ type ] = fixHook =\n\t\t\t\trmouseEvent.test( type ) ? this.mouseHooks :\n\t\t\t\trkeyEvent.test( type ) ? this.keyHooks :\n\t\t\t\t{};\n\t\t}\n\t\tcopy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;\n\n\t\tevent = new jQuery.Event( originalEvent );\n\n\t\ti = copy.length;\n\t\twhile ( i-- ) {\n\t\t\tprop = copy[ i ];\n\t\t\tevent[ prop ] = originalEvent[ prop ];\n\t\t}\n\n\t\t// Support: Cordova 2.5 (WebKit) (#13255)\n\t\t// All events should have a target; Cordova deviceready doesn't\n\t\tif ( !event.target ) {\n\t\t\tevent.target = document;\n\t\t}\n\n\t\t// Support: Safari 6.0+, Chrome<28\n\t\t// Target should not be a text node (#504, #13143)\n\t\tif ( event.target.nodeType === 3 ) {\n\t\t\tevent.target = event.target.parentNode;\n\t\t}\n\n\t\treturn fixHook.filter ? fixHook.filter( event, originalEvent ) : event;\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this.type === \"checkbox\" && this.click && jQuery.nodeName( this, \"input\" ) ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn jQuery.nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android<4.0\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://code.google.com/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:-]+)[^>]*)\\/>/gi,\n\n\t// Support: IE 10-11, Edge 10240+\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trscriptTypeMasked = /^true\\/(.*)/,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Manipulating tables requires a tbody\nfunction manipulationTarget( elem, content ) {\n\treturn jQuery.nodeName( elem, \"table\" ) &&\n\t\tjQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ?\n\n\t\telem.getElementsByTagName( \"tbody\" )[ 0 ] ||\n\t\t\telem.appendChild( elem.ownerDocument.createElement( \"tbody\" ) ) :\n\t\telem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tvar match = rscriptTypeMasked.exec( elem.type );\n\n\tif ( match ) {\n\t\telem.type = match[ 1 ];\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tisFunction = jQuery.isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( isFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( isFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android<4.1, PhantomJS<2\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjQuery.globalEval( node.textContent.replace( rcleanScript, \"\" ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <= 35-45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <= 35-45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\n\t// Keep domManip exposed until 3.0 (gh-2225)\n\tdomManip: domManip,\n\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: QtWebKit\n\t\t\t// .get() because push.apply(_, arraylike) throws\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\n\n\nvar iframe,\n\telemdisplay = {\n\n\t\t// Support: Firefox\n\t\t// We have to pre-define these values for FF (#10227)\n\t\tHTML: \"block\",\n\t\tBODY: \"block\"\n\t};\n\n/**\n * Retrieve the actual display of a element\n * @param {String} name nodeName of the element\n * @param {Object} doc Document object\n */\n\n// Called only from within defaultDisplay\nfunction actualDisplay( name, doc ) {\n\tvar elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),\n\n\t\tdisplay = jQuery.css( elem[ 0 ], \"display\" );\n\n\t// We don't have any data stored on the element,\n\t// so use \"detach\" method as fast way to get rid of the element\n\telem.detach();\n\n\treturn display;\n}\n\n/**\n * Try to determine the default display value of an element\n * @param {String} nodeName\n */\nfunction defaultDisplay( nodeName ) {\n\tvar doc = document,\n\t\tdisplay = elemdisplay[ nodeName ];\n\n\tif ( !display ) {\n\t\tdisplay = actualDisplay( nodeName, doc );\n\n\t\t// If the simple way fails, read from inside an iframe\n\t\tif ( display === \"none\" || !display ) {\n\n\t\t\t// Use the already-created iframe if possible\n\t\t\tiframe = ( iframe || jQuery( \"<iframe frameborder='0' width='0' height='0'/>\" ) )\n\t\t\t\t.appendTo( doc.documentElement );\n\n\t\t\t// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse\n\t\t\tdoc = iframe[ 0 ].contentDocument;\n\n\t\t\t// Support: IE\n\t\t\tdoc.write();\n\t\t\tdoc.close();\n\n\t\t\tdisplay = actualDisplay( nodeName, doc );\n\t\t\tiframe.detach();\n\t\t}\n\n\t\t// Store the correct default display\n\t\telemdisplay[ nodeName ] = display;\n\t}\n\n\treturn display;\n}\nvar rmargin = ( /^margin/ );\n\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE<=11+, Firefox<=30+ (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar documentElement = document.documentElement;\n\n\n\n( function() {\n\tvar pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE9-11+\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tcontainer.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" +\n\t\t\"padding:0;margin-top:1px;position:absolute\";\n\tcontainer.appendChild( div );\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\t\tdiv.style.cssText =\n\n\t\t\t// Support: Firefox<29, Android 2.3\n\t\t\t// Vendor-prefix box-sizing\n\t\t\t\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;\" +\n\t\t\t\"position:relative;display:block;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"top:1%;width:50%\";\n\t\tdiv.innerHTML = \"\";\n\t\tdocumentElement.appendChild( container );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\t\treliableMarginLeftVal = divStyle.marginLeft === \"2px\";\n\t\tboxSizingReliableVal = divStyle.width === \"4px\";\n\n\t\t// Support: Android 4.0 - 4.3 only\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.marginRight = \"50%\";\n\t\tpixelMarginRightVal = divStyle.marginRight === \"4px\";\n\n\t\tdocumentElement.removeChild( container );\n\t}\n\n\tjQuery.extend( support, {\n\t\tpixelPosition: function() {\n\n\t\t\t// This test is executed only once but we still do memoizing\n\t\t\t// since we can use the boxSizingReliable pre-computing.\n\t\t\t// No need to check if the test was already performed, though.\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\tboxSizingReliable: function() {\n\t\t\tif ( boxSizingReliableVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelMarginRight: function() {\n\n\t\t\t// Support: Android 4.0-4.3\n\t\t\t// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal\n\t\t\t// since that compresses better and they're computed together anyway.\n\t\t\tif ( boxSizingReliableVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn pixelMarginRightVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\n\t\t\t// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37\n\t\t\tif ( boxSizingReliableVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\treliableMarginRight: function() {\n\n\t\t\t// Support: Android 2.3\n\t\t\t// Check if div with explicit width and no margin-right incorrectly\n\t\t\t// gets computed margin-right based on width of container. (#3333)\n\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n\t\t\t// This support function is only executed once so no memoizing is needed.\n\t\t\tvar ret,\n\t\t\t\tmarginDiv = div.appendChild( document.createElement( \"div\" ) );\n\n\t\t\t// Reset CSS: box-sizing; display; margin; border; padding\n\t\t\tmarginDiv.style.cssText = div.style.cssText =\n\n\t\t\t\t// Support: Android 2.3\n\t\t\t\t// Vendor-prefix box-sizing\n\t\t\t\t\"-webkit-box-sizing:content-box;box-sizing:content-box;\" +\n\t\t\t\t\"display:block;margin:0;border:0;padding:0\";\n\t\t\tmarginDiv.style.marginRight = marginDiv.style.width = \"0\";\n\t\t\tdiv.style.width = \"1px\";\n\t\t\tdocumentElement.appendChild( container );\n\n\t\t\tret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );\n\n\t\t\tdocumentElement.removeChild( container );\n\t\t\tdiv.removeChild( marginDiv );\n\n\t\t\treturn ret;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\tret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;\n\n\t// Support: Opera 12.1x only\n\t// Fall back to style even without computed\n\t// computed is undefined for elems on document fragments\n\tif ( ( ret === \"\" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\tret = jQuery.style( elem, name );\n\t}\n\n\t// Support: IE9\n\t// getPropertyValue is only needed for .css('filter') (#12537)\n\tif ( computed ) {\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// http://dev.w3.org/csswg/cssom/#resolved-values\n\t\tif ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE9-11+\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"O\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n\tvar i = extra === ( isBorderBox ? \"border\" : \"content\" ) ?\n\n\t\t// If we already have the right measurement, avoid augmentation\n\t\t4 :\n\n\t\t// Otherwise initialize for horizontal or vertical properties\n\t\tname === \"width\" ? 1 : 0,\n\n\t\tval = 0;\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin, so add it if we want it\n\t\tif ( extra === \"margin\" ) {\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\tif ( isBorderBox ) {\n\n\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\tif ( extra === \"content\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// At this point, extra isn't border nor margin, so remove border\n\t\t\tif ( extra !== \"margin\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// At this point, extra isn't content, so add padding\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// At this point, extra isn't content nor padding, so add border\n\t\t\tif ( extra !== \"padding\" ) {\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n\t// Start with offset property, which is equivalent to the border-box value\n\tvar valueIsBorderBox = true,\n\t\tval = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\n\t\tstyles = getStyles( elem ),\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t// Some non-html elements return undefined for offsetWidth, so check for null/undefined\n\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\tif ( val <= 0 || val == null ) {\n\n\t\t// Fall back to computed then uncomputed css if necessary\n\t\tval = curCSS( elem, name, styles );\n\t\tif ( val < 0 || val == null ) {\n\t\t\tval = elem.style[ name ];\n\t\t}\n\n\t\t// Computed unit is not pixels. Stop here and return.\n\t\tif ( rnumnonpx.test( val ) ) {\n\t\t\treturn val;\n\t\t}\n\n\t\t// Check for style in case a browser which returns unreliable values\n\t\t// for getComputedStyle silently falls back to the reliable elem.style\n\t\tvalueIsBorderBox = isBorderBox &&\n\t\t\t( support.boxSizingReliable() || val === elem.style[ name ] );\n\n\t\t// Normalize \"\", auto, and prepare for extra\n\t\tval = parseFloat( val ) || 0;\n\t}\n\n\t// Use the active box-sizing model to add/subtract irrelevant styles\n\treturn ( val +\n\t\taugmentWidthOrHeight(\n\t\t\telem,\n\t\t\tname,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles\n\t\t)\n\t) + \"px\";\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem, hidden,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvalues[ index ] = dataPriv.get( elem, \"olddisplay\" );\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Reset the inline display of this element to learn if it is\n\t\t\t// being hidden by cascaded rules or not\n\t\t\tif ( !values[ index ] && display === \"none\" ) {\n\t\t\t\telem.style.display = \"\";\n\t\t\t}\n\n\t\t\t// Set elements which have been overridden with display: none\n\t\t\t// in a stylesheet to whatever the default browser style is\n\t\t\t// for such an element\n\t\t\tif ( elem.style.display === \"\" && isHidden( elem ) ) {\n\t\t\t\tvalues[ index ] = dataPriv.access(\n\t\t\t\t\telem,\n\t\t\t\t\t\"olddisplay\",\n\t\t\t\t\tdefaultDisplay( elem.nodeName )\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\thidden = isHidden( elem );\n\n\t\t\tif ( display !== \"none\" || !hidden ) {\n\t\t\t\tdataPriv.set(\n\t\t\t\t\telem,\n\t\t\t\t\t\"olddisplay\",\n\t\t\t\t\thidden ? display : jQuery.css( elem, \"display\" )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of most of the elements in a second loop\n\t// to avoid the constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( !show || elem.style.display === \"none\" || elem.style.display === \"\" ) {\n\t\t\telem.style.display = show ? values[ index ] || \"\" : \"none\";\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {\n\t\t\"float\": \"cssFloat\"\n\t},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tstyle = elem.style;\n\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === \"number\" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tstyle[ name ] = value;\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = jQuery.camelCase( name );\n\n\t\t// Make sure that we're working with the right name\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, name ) {\n\tjQuery.cssHooks[ name ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\t\t\t\t\telem.offsetWidth === 0 ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, name, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = extra && getStyles( elem ),\n\t\t\t\tsubtract = extra && augmentWidthOrHeight(\n\t\t\t\t\telem,\n\t\t\t\t\tname,\n\t\t\t\t\textra,\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\t\tstyles\n\t\t\t\t);\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ name ] = value;\n\t\t\t\tvalue = jQuery.css( elem, name );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// Support: Android 2.3\njQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn swap( elem, { \"display\": \"inline-block\" },\n\t\t\t\tcurCSS, [ elem, \"marginRight\" ] );\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( !rmargin.test( prefix ) ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( jQuery.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t},\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHidden( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE9\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back Compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, timerId,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4 ; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\t/* jshint validthis: true */\n\tvar prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHidden( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Handle queue: false promises\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Height/width overflow pass\n\tif ( elem.nodeType === 1 && ( \"height\" in props || \"width\" in props ) ) {\n\n\t\t// Make sure that nothing sneaks out\n\t\t// Record all 3 overflow attributes because IE9-10 do not\n\t\t// change the overflow attribute when overflowX and\n\t\t// overflowY are set to the same value\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Set display property to inline-block for height/width\n\t\t// animations on inline elements that are having width/height animated\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\n\t\t// Test default display if display is currently \"none\"\n\t\tcheckDisplay = display === \"none\" ?\n\t\t\tdataPriv.get( elem, \"olddisplay\" ) || defaultDisplay( elem.nodeName ) : display;\n\n\t\tif ( checkDisplay === \"inline\" && jQuery.css( elem, \"float\" ) === \"none\" ) {\n\t\t\tstyle.display = \"inline-block\";\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// show/hide pass\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.exec( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// If there is dataShow left over from a stopped hide or show\n\t\t\t\t// and we are going to proceed with show, we should pretend to be hidden\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\n\t\t// Any non-fx value stops us from restoring the original display value\n\t\t} else {\n\t\t\tdisplay = undefined;\n\t\t}\n\t}\n\n\tif ( !jQuery.isEmptyObject( orig ) ) {\n\t\tif ( dataShow ) {\n\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\thidden = dataShow.hidden;\n\t\t\t}\n\t\t} else {\n\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", {} );\n\t\t}\n\n\t\t// Store state if its toggle - enables .stop().toggle() to \"reverse\"\n\t\tif ( toggle ) {\n\t\t\tdataShow.hidden = !hidden;\n\t\t}\n\t\tif ( hidden ) {\n\t\t\tjQuery( elem ).show();\n\t\t} else {\n\t\t\tanim.done( function() {\n\t\t\t\tjQuery( elem ).hide();\n\t\t\t} );\n\t\t}\n\t\tanim.done( function() {\n\t\t\tvar prop;\n\n\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\tfor ( prop in orig ) {\n\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t}\n\t\t} );\n\t\tfor ( prop in orig ) {\n\t\t\ttween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\n\t\t\tif ( !( prop in dataShow ) ) {\n\t\t\t\tdataShow[ prop ] = tween.start;\n\t\t\t\tif ( hidden ) {\n\t\t\t\t\ttween.end = tween.start;\n\t\t\t\t\ttween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t// If this is a noop like .hide().hide(), restore an overwritten display value\n\t} else if ( ( display === \"none\" ? defaultDisplay( elem.nodeName ) : display ) === \"inline\" ) {\n\t\tstyle.display = display;\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = jQuery.camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( jQuery.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length ; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t} else {\n\t\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length ; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length ; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( jQuery.isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tjQuery.proxy( result.stop, result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( jQuery.isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\t// attach callbacks from options\n\treturn animation.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( jQuery.isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnotwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length ; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tjQuery.isFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n\t};\n\n\topt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ?\n\t\topt.duration : opt.duration in jQuery.fx.speeds ?\n\t\t\tjQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( jQuery.isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHidden ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = jQuery.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Checks the timer has not already been removed\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tif ( timer() ) {\n\t\tjQuery.fx.start();\n\t} else {\n\t\tjQuery.timers.pop();\n\t}\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( !timerId ) {\n\t\ttimerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );\n\t}\n};\n\njQuery.fx.stop = function() {\n\twindow.clearInterval( timerId );\n\n\ttimerId = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: iOS<=5.1, Android<=4.2+\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE<=11+\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: Android<=2.3\n\t// Options inside disabled selects are incorrectly marked as disabled\n\tselect.disabled = true;\n\tsupport.optDisabled = !opt.disabled;\n\n\t// Support: IE<=11+\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// All attributes are lowercase\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\tname = name.toLowerCase();\n\t\t\thooks = jQuery.attrHooks[ name ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tjQuery.nodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name, propName,\n\t\t\ti = 0,\n\t\t\tattrNames = value && value.match( rnotwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\tpropName = jQuery.propFix[ name ] || name;\n\n\t\t\t\t// Boolean attributes get special treatment (#10870)\n\t\t\t\tif ( jQuery.expr.match.bool.test( name ) ) {\n\n\t\t\t\t\t// Set corresponding property to false\n\t\t\t\t\telem[ propName ] = false;\n\t\t\t\t}\n\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle;\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ name ];\n\t\t\tattrHandle[ name ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tname.toLowerCase() :\n\t\t\t\tnull;\n\t\t\tattrHandle[ name ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\treturn tabindex ?\n\t\t\t\t\tparseInt( tabindex, 10 ) :\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\t\trclickable.test( elem.nodeName ) && elem.href ?\n\t\t\t\t\t\t\t0 :\n\t\t\t\t\t\t\t-1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\nvar rclass = /[\\t\\r\\n\\f]/g;\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnotwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 &&\n\t\t\t\t\t( \" \" + curValue + \" \" ).replace( rclass, \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = jQuery.trim( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnotwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 &&\n\t\t\t\t\t( \" \" + curValue + \" \" ).replace( rclass, \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = jQuery.trim( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value;\n\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( type === \"string\" ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = value.match( rnotwhite ) || [];\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + getClass( elem ) + \" \" ).replace( rclass, \" \" )\n\t\t\t\t\t.indexOf( className ) > -1\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g,\n\trspaces = /[\\x20\\t\\r\\n\\f]+/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, isFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\treturn typeof ret === \"string\" ?\n\n\t\t\t\t\t// Handle most common string cases\n\t\t\t\t\tret.replace( rreturn, \"\" ) :\n\n\t\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\t\tret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tisFunction = jQuery.isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( jQuery.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE10-11+\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tjQuery.trim( jQuery.text( elem ) ).replace( rspaces, \" \" );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\" || index < 0,\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length,\n\t\t\t\t\ti = index < 0 ?\n\t\t\t\t\t\tmax :\n\t\t\t\t\t\tone ? index : 0;\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t( support.optDisabled ?\n\t\t\t\t\t\t\t\t!option.disabled : option.getAttribute( \"disabled\" ) === null ) &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( jQuery.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\telem[ type ]();\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout load resize scroll unload click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup error contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\n// Support: Firefox\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome, Safari\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = jQuery.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Support: Android 2.3\n// Workaround failure to string-cast null input\njQuery.parseJSON = function( data ) {\n\treturn JSON.parse( data + \"\" );\n};\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE9\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trhash = /#.*$/,\n\trts = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];\n\n\t\tif ( jQuery.isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": jQuery.parseJSON,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// The jqXHR state\n\t\t\tstate = 0,\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( state === 2 ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn state === 2 ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tvar lname = name.toLowerCase();\n\t\t\t\t\tif ( !state ) {\n\t\t\t\t\t\tname = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( !state ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( state < 2 ) {\n\t\t\t\t\t\t\tfor ( code in map ) {\n\n\t\t\t\t\t\t\t\t// Lazy-add the new callback in a way that preserves old ones\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR ).complete = completeDeferred.add;\n\t\tjqXHR.success = jqXHR.done;\n\t\tjqXHR.error = jqXHR.fail;\n\n\t\t// Remove hash character (#7531: and string promotion)\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" ).replace( rhash, \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = jQuery.trim( s.dataType || \"*\" ).toLowerCase().match( rnotwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE8-11+\n\t\t\t// IE throws exception if url is malformed, e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE8-11+\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( state === 2 ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\tcacheURL = s.url;\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// If data is available, append data to url\n\t\t\tif ( s.data ) {\n\t\t\t\tcacheURL = ( s.url += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data );\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add anti-cache in url if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\ts.url = rts.test( cacheURL ) ?\n\n\t\t\t\t\t// If there is already a '_' parameter, set its value\n\t\t\t\t\tcacheURL.replace( rts, \"$1_=\" + nonce++ ) :\n\n\t\t\t\t\t// Otherwise add one to the end\n\t\t\t\t\tcacheURL + ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + nonce++;\n\t\t\t}\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tfor ( i in { success: 1, error: 1, complete: 1 } ) {\n\t\t\tjqXHR[ i ]( s[ i ] );\n\t\t}\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( state === 2 ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tstate = 1;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Propagate exception as error if not done\n\t\t\t\tif ( state < 2 ) {\n\t\t\t\t\tdone( -1, e );\n\n\t\t\t\t// Simply rethrow otherwise\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Called once\n\t\t\tif ( state === 2 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// State is \"done\" now\n\t\t\tstate = 2;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapAll( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( this[ 0 ] ) {\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar isFunction = jQuery.isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function() {\n\t\treturn this.parent().each( function() {\n\t\t\tif ( !jQuery.nodeName( this, \"body\" ) ) {\n\t\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t\t}\n\t\t} ).end();\n\t}\n} );\n\n\njQuery.expr.filters.hidden = function( elem ) {\n\treturn !jQuery.expr.filters.visible( elem );\n};\njQuery.expr.filters.visible = function( elem ) {\n\n\t// Support: Opera <= 12.12\n\t// Opera reports offsetWidths and offsetHeights less than zero on some elements\n\t// Use OR instead of AND as the element is not visible if either is true\n\t// See tickets #10406 and #13132\n\treturn elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;\n};\n\n\n\n\nvar r20 = /%20/g,\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( jQuery.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, value ) {\n\n\t\t\t// If value is a function, invoke it and return its value\n\t\t\tvalue = jQuery.isFunction( value ) ? value() : ( value == null ? \"\" : value );\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" + encodeURIComponent( value );\n\t\t};\n\n\t// Set traditional to true for jQuery <= 1.3.2 behavior.\n\tif ( traditional === undefined ) {\n\t\ttraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" ).replace( r20, \"+\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\treturn val == null ?\n\t\t\t\tnull :\n\t\t\t\tjQuery.isArray( val ) ?\n\t\t\t\t\tjQuery.map( val, function( val ) {\n\t\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t\t} ) :\n\t\t\t\t\t{ name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE9\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE9\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = callback( \"error\" );\n\n\t\t\t\t// Support: IE9\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" ).prop( {\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t} ).on(\n\t\t\t\t\t\"load error\",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\tcontext = context || document;\n\n\tvar parsed = rsingleTag.exec( data ),\n\t\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n// Keep a copy of the old load method\nvar _load = jQuery.fn.load;\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tif ( typeof url !== \"string\" && _load ) {\n\t\treturn _load.apply( this, arguments );\n\t}\n\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = jQuery.trim( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( jQuery.isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.filters.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\n/**\n * Gets a window from an element\n */\nfunction getWindow( elem ) {\n\treturn jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;\n}\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( jQuery.isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\toffset: function( options ) {\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar docElem, win,\n\t\t\telem = this[ 0 ],\n\t\t\tbox = { top: 0, left: 0 },\n\t\t\tdoc = elem && elem.ownerDocument;\n\n\t\tif ( !doc ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdocElem = doc.documentElement;\n\n\t\t// Make sure it's not a disconnected DOM node\n\t\tif ( !jQuery.contains( docElem, elem ) ) {\n\t\t\treturn box;\n\t\t}\n\n\t\tbox = elem.getBoundingClientRect();\n\t\twin = getWindow( doc );\n\t\treturn {\n\t\t\ttop: box.top + win.pageYOffset - docElem.clientTop,\n\t\t\tleft: box.left + win.pageXOffset - docElem.clientLeft\n\t\t};\n\t},\n\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n\t\t// because it is its only offset parent\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume getBoundingClientRect is there when computed position is fixed\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\n\t\t\t// Get *real* offsetParent\n\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t// Get correct offsets\n\t\t\toffset = this.offset();\n\t\t\tif ( !jQuery.nodeName( offsetParent[ 0 ], \"html\" ) ) {\n\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t}\n\n\t\t\t// Add offsetParent borders\n\t\t\tparentOffset.top += jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true );\n\t\t\tparentOffset.left += jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true );\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\t\t\tvar win = getWindow( elem );\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari<7-8+, Chrome<37-44+\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\n\t\t\t\t\t// isn't a whole lot we can do. See pull request at this URL for discussion:\n\t\t\t\t\t// https://github.com/jquery/jquery/pull/764\n\t\t\t\t\treturn elem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable, null );\n\t\t};\n\t} );\n} );\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\tsize: function() {\n\t\treturn this.length;\n\t}\n} );\n\njQuery.fn.andSelf = jQuery.fn.addBack;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\nreturn jQuery;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n\n/* WEBPACK VAR INJECTION */}.call(this, {}))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzPzAwODYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vYW1kLW9wdGlvbnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWxzIF9fd2VicGFja19hbWRfb3B0aW9uc19fICovXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19hbWRfb3B0aW9uc19fO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/amd-options.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcz9jZDAwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzPzgyYjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/harmony-module.js\n");

/***/ }),

/***/ "./src/ChemDoodle/lib/index.js":
/*!*************************************!*\
  !*** ./src/ChemDoodle/lib/index.js ***!
  \*************************************/
/*! exports provided: jQuery */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _jQuery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jQuery */ \"./src/ChemDoodle/lib/jQuery.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"jQuery\", function() { return _jQuery__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvbGliL2luZGV4LmpzPzkxYTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUEiLCJmaWxlIjoiLi9zcmMvQ2hlbURvb2RsZS9saWIvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQge2RlZmF1bHQgYXMgalF1ZXJ5fSBmcm9tICcuL2pRdWVyeSc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ChemDoodle/lib/index.js\n");

/***/ }),

/***/ "./src/ChemDoodle/lib/jQuery.js":
/*!**************************************!*\
  !*** ./src/ChemDoodle/lib/jQuery.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var jquery_mousewheel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery-mousewheel */ \"./node_modules/jquery-mousewheel/jquery.mousewheel.js\");\n/* harmony import */ var jquery_mousewheel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery_mousewheel__WEBPACK_IMPORTED_MODULE_1__);\n\n\njquery__WEBPACK_IMPORTED_MODULE_0___default.a.noConflict(true);\n/* harmony default export */ __webpack_exports__[\"default\"] = (jquery__WEBPACK_IMPORTED_MODULE_0___default.a);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvbGliL2pRdWVyeS5qcz80Mjg1Il0sIm5hbWVzIjpbImpRdWVyeSIsIm5vQ29uZmxpY3QiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUFBLDZDQUFNLENBQUNDLFVBQVAsQ0FBa0IsSUFBbEI7QUFFZUQsNEdBQWYiLCJmaWxlIjoiLi9zcmMvQ2hlbURvb2RsZS9saWIvalF1ZXJ5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGpRdWVyeSBmcm9tICdqcXVlcnknO1xuaW1wb3J0IG1vdXNld2hlZWwgZnJvbSAnanF1ZXJ5LW1vdXNld2hlZWwnO1xuXG5qUXVlcnkubm9Db25mbGljdCh0cnVlKTtcblxuZXhwb3J0IGRlZmF1bHQgalF1ZXJ5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/ChemDoodle/lib/jQuery.js\n");

/***/ }),

/***/ "./src/ChemDoodleWeb-unpacked.js":
/*!***************************************!*\
  !*** ./src/ChemDoodleWeb-unpacked.js ***!
  \***************************************/
/*! exports provided: ChemDoodle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global, module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ChemDoodle\", function() { return ChemDoodle; });\n/* harmony import */ var _ChemDoodle_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ChemDoodle/lib */ \"./src/ChemDoodle/lib/index.js\");\nfunction _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}//\n// ChemDoodle Web Components 8.0.0\n//\n// http://web.chemdoodle.com\n//\n// Copyright 2009-2017 iChemLabs, LLC.  All rights reserved.\n//\n// The ChemDoodle Web Components library is licensed under version 3\n// of the GNU GENERAL PUBLIC LICENSE.\n//\n// You may redistribute it and/or modify it under the terms of the\n// GNU General Public License as published by the Free Software Foundation,\n// either version 3 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n// Please contact iChemLabs <http://www.ichemlabs.com/contact-us> for\n// alternate licensing options.\n//\n// google closure fails if undefined is provided to this module... but it is not needed so whatever...\nvar ChemDoodle=function(){'use strict';var c={};c.iChemLabs={};c.informatics={};c.io={};c.lib=_ChemDoodle_lib__WEBPACK_IMPORTED_MODULE_0__;c.notations={};c.structures={};c.structures.d2={};c.structures.d3={};var VERSION='8.0.0';c.getVersion=function(){return VERSION;};return c;}();/**\n * @fileoverview gl-matrix - High performance matrix and vector operations for WebGL\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 1.3.7\n */ /*\n * Copyright (c) 2012 Brandon Jones, Colin MacKenzie IV\n *\n * This software is provided 'as-is', without any express or implied\n * warranty. In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n *    1. The origin of this software must not be misrepresented; you must not\n *    claim that you wrote the original software. If you use this software\n *    in a product, an acknowledgment in the product documentation would be\n *    appreciated but is not required.\n *\n *    2. Altered source versions must be plainly marked as such, and must not\n *    be misrepresented as being the original software.\n *\n *    3. This notice may not be removed or altered from any source\n *    distribution.\n */ // Updated to use a modification of the \"returnExportsGlobal\" pattern from https://github.com/umdjs/umd\n(function(root,factory){if((typeof exports===\"undefined\"?\"undefined\":_typeof(exports))==='object'){// Node. Does not work with strict CommonJS, but\n// only CommonJS-like enviroments that support module.exports,\n// like Node.\nmodule.exports=factory(global);}else if(typeof define==='function'&&__webpack_require__(/*! !webpack amd options */ \"./node_modules/webpack/buildin/amd-options.js\")){// AMD. Register as an anonymous module.\ndefine([],function(){return factory(root);});}else{// Browser globals\nfactory(root);}})(ChemDoodle.lib,function(root){\"use strict\";// Tweak to your liking\nvar FLOAT_EPSILON=0.000001;var glMath={};(function(){if(typeof Float32Array!='undefined'){var y=new Float32Array(1);var i=new Int32Array(y.buffer);/**\n             * Fast way to calculate the inverse square root,\n             * see http://jsperf.com/inverse-square-root/5\n             *\n             * If typed arrays are not available, a slower\n             * implementation will be used.\n             *\n             * @param {Number} number the number\n             * @returns {Number} Inverse square root\n             */glMath.invsqrt=function(number){var x2=number*0.5;y[0]=number;var threehalfs=1.5;i[0]=0x5f3759df-(i[0]>>1);var number2=y[0];return number2*(threehalfs-x2*number2*number2);};}else{glMath.invsqrt=function(number){return 1.0/Math.sqrt(number);};}})();/**\n     * @class System-specific optimal array type\n     * @name MatrixArray\n     */var MatrixArray=null;// explicitly sets and returns the type of array to use within glMatrix\nfunction setMatrixArrayType(type){MatrixArray=type;return MatrixArray;}// auto-detects and returns the best type of array to use within glMatrix, falling\n// back to Array if typed arrays are unsupported\nfunction determineMatrixArrayType(){MatrixArray=typeof Float32Array!=='undefined'?Float32Array:Array;return MatrixArray;}determineMatrixArrayType();/**\n     * @class 3 Dimensional Vector\n     * @name vec3\n     */var vec3={};/**\n     * Creates a new instance of a vec3 using the default array type\n     * Any javascript array-like objects containing at least 3 numeric elements can serve as a vec3\n     *\n     * @param {vec3} [vec] vec3 containing values to initialize with\n     *\n     * @returns {vec3} New vec3\n     */vec3.create=function(vec){var dest=new MatrixArray(3);if(vec){dest[0]=vec[0];dest[1]=vec[1];dest[2]=vec[2];}else{dest[0]=dest[1]=dest[2]=0;}return dest;};/**\n     * Creates a new instance of a vec3, initializing it with the given arguments\n     *\n     * @param {number} x X value\n     * @param {number} y Y value\n     * @param {number} z Z value\n\n     * @returns {vec3} New vec3\n     */vec3.createFrom=function(x,y,z){var dest=new MatrixArray(3);dest[0]=x;dest[1]=y;dest[2]=z;return dest;};/**\n     * Copies the values of one vec3 to another\n     *\n     * @param {vec3} vec vec3 containing values to copy\n     * @param {vec3} dest vec3 receiving copied values\n     *\n     * @returns {vec3} dest\n     */vec3.set=function(vec,dest){dest[0]=vec[0];dest[1]=vec[1];dest[2]=vec[2];return dest;};/**\n     * Compares two vectors for equality within a certain margin of error\n     *\n     * @param {vec3} a First vector\n     * @param {vec3} b Second vector\n     *\n     * @returns {Boolean} True if a is equivalent to b\n     */vec3.equal=function(a,b){return a===b||Math.abs(a[0]-b[0])<FLOAT_EPSILON&&Math.abs(a[1]-b[1])<FLOAT_EPSILON&&Math.abs(a[2]-b[2])<FLOAT_EPSILON;};/**\n     * Performs a vector addition\n     *\n     * @param {vec3} vec First operand\n     * @param {vec3} vec2 Second operand\n     * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n     *\n     * @returns {vec3} dest if specified, vec otherwise\n     */vec3.add=function(vec,vec2,dest){if(!dest||vec===dest){vec[0]+=vec2[0];vec[1]+=vec2[1];vec[2]+=vec2[2];return vec;}dest[0]=vec[0]+vec2[0];dest[1]=vec[1]+vec2[1];dest[2]=vec[2]+vec2[2];return dest;};/**\n     * Performs a vector subtraction\n     *\n     * @param {vec3} vec First operand\n     * @param {vec3} vec2 Second operand\n     * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n     *\n     * @returns {vec3} dest if specified, vec otherwise\n     */vec3.subtract=function(vec,vec2,dest){if(!dest||vec===dest){vec[0]-=vec2[0];vec[1]-=vec2[1];vec[2]-=vec2[2];return vec;}dest[0]=vec[0]-vec2[0];dest[1]=vec[1]-vec2[1];dest[2]=vec[2]-vec2[2];return dest;};/**\n     * Performs a vector multiplication\n     *\n     * @param {vec3} vec First operand\n     * @param {vec3} vec2 Second operand\n     * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n     *\n     * @returns {vec3} dest if specified, vec otherwise\n     */vec3.multiply=function(vec,vec2,dest){if(!dest||vec===dest){vec[0]*=vec2[0];vec[1]*=vec2[1];vec[2]*=vec2[2];return vec;}dest[0]=vec[0]*vec2[0];dest[1]=vec[1]*vec2[1];dest[2]=vec[2]*vec2[2];return dest;};/**\n     * Negates the components of a vec3\n     *\n     * @param {vec3} vec vec3 to negate\n     * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n     *\n     * @returns {vec3} dest if specified, vec otherwise\n     */vec3.negate=function(vec,dest){if(!dest){dest=vec;}dest[0]=-vec[0];dest[1]=-vec[1];dest[2]=-vec[2];return dest;};/**\n     * Multiplies the components of a vec3 by a scalar value\n     *\n     * @param {vec3} vec vec3 to scale\n     * @param {number} val Value to scale by\n     * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n     *\n     * @returns {vec3} dest if specified, vec otherwise\n     */vec3.scale=function(vec,val,dest){if(!dest||vec===dest){vec[0]*=val;vec[1]*=val;vec[2]*=val;return vec;}dest[0]=vec[0]*val;dest[1]=vec[1]*val;dest[2]=vec[2]*val;return dest;};/**\n     * Generates a unit vector of the same direction as the provided vec3\n     * If vector length is 0, returns [0, 0, 0]\n     *\n     * @param {vec3} vec vec3 to normalize\n     * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n     *\n     * @returns {vec3} dest if specified, vec otherwise\n     */vec3.normalize=function(vec,dest){if(!dest){dest=vec;}var x=vec[0],y=vec[1],z=vec[2],len=Math.sqrt(x*x+y*y+z*z);if(!len){dest[0]=0;dest[1]=0;dest[2]=0;return dest;}else if(len===1){dest[0]=x;dest[1]=y;dest[2]=z;return dest;}len=1/len;dest[0]=x*len;dest[1]=y*len;dest[2]=z*len;return dest;};/**\n     * Generates the cross product of two vec3s\n     *\n     * @param {vec3} vec First operand\n     * @param {vec3} vec2 Second operand\n     * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n     *\n     * @returns {vec3} dest if specified, vec otherwise\n     */vec3.cross=function(vec,vec2,dest){if(!dest){dest=vec;}var x=vec[0],y=vec[1],z=vec[2],x2=vec2[0],y2=vec2[1],z2=vec2[2];dest[0]=y*z2-z*y2;dest[1]=z*x2-x*z2;dest[2]=x*y2-y*x2;return dest;};/**\n     * Caclulates the length of a vec3\n     *\n     * @param {vec3} vec vec3 to calculate length of\n     *\n     * @returns {number} Length of vec\n     */vec3.length=function(vec){var x=vec[0],y=vec[1],z=vec[2];return Math.sqrt(x*x+y*y+z*z);};/**\n     * Caclulates the squared length of a vec3\n     *\n     * @param {vec3} vec vec3 to calculate squared length of\n     *\n     * @returns {number} Squared Length of vec\n     */vec3.squaredLength=function(vec){var x=vec[0],y=vec[1],z=vec[2];return x*x+y*y+z*z;};/**\n     * Caclulates the dot product of two vec3s\n     *\n     * @param {vec3} vec First operand\n     * @param {vec3} vec2 Second operand\n     *\n     * @returns {number} Dot product of vec and vec2\n     */vec3.dot=function(vec,vec2){return vec[0]*vec2[0]+vec[1]*vec2[1]+vec[2]*vec2[2];};/**\n     * Generates a unit vector pointing from one vector to another\n     *\n     * @param {vec3} vec Origin vec3\n     * @param {vec3} vec2 vec3 to point to\n     * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n     *\n     * @returns {vec3} dest if specified, vec otherwise\n     */vec3.direction=function(vec,vec2,dest){if(!dest){dest=vec;}var x=vec[0]-vec2[0],y=vec[1]-vec2[1],z=vec[2]-vec2[2],len=Math.sqrt(x*x+y*y+z*z);if(!len){dest[0]=0;dest[1]=0;dest[2]=0;return dest;}len=1/len;dest[0]=x*len;dest[1]=y*len;dest[2]=z*len;return dest;};/**\n     * Performs a linear interpolation between two vec3\n     *\n     * @param {vec3} vec First vector\n     * @param {vec3} vec2 Second vector\n     * @param {number} lerp Interpolation amount between the two inputs\n     * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n     *\n     * @returns {vec3} dest if specified, vec otherwise\n     */vec3.lerp=function(vec,vec2,lerp,dest){if(!dest){dest=vec;}dest[0]=vec[0]+lerp*(vec2[0]-vec[0]);dest[1]=vec[1]+lerp*(vec2[1]-vec[1]);dest[2]=vec[2]+lerp*(vec2[2]-vec[2]);return dest;};/**\n     * Calculates the euclidian distance between two vec3\n     *\n     * Params:\n     * @param {vec3} vec First vector\n     * @param {vec3} vec2 Second vector\n     *\n     * @returns {number} Distance between vec and vec2\n     */vec3.dist=function(vec,vec2){var x=vec2[0]-vec[0],y=vec2[1]-vec[1],z=vec2[2]-vec[2];return Math.sqrt(x*x+y*y+z*z);};// Pre-allocated to prevent unecessary garbage collection\nvar unprojectMat=null;var unprojectVec=new MatrixArray(4);/**\n     * Projects the specified vec3 from screen space into object space\n     * Based on the <a href=\"http://webcvs.freedesktop.org/mesa/Mesa/src/glu/mesa/project.c?revision=1.4&view=markup\">Mesa gluUnProject implementation</a>\n     *\n     * @param {vec3} vec Screen-space vector to project\n     * @param {mat4} view View matrix\n     * @param {mat4} proj Projection matrix\n     * @param {vec4} viewport Viewport as given to gl.viewport [x, y, width, height]\n     * @param {vec3} [dest] vec3 receiving unprojected result. If not specified result is written to vec\n     *\n     * @returns {vec3} dest if specified, vec otherwise\n     */vec3.unproject=function(vec,view,proj,viewport,dest){if(!dest){dest=vec;}if(!unprojectMat){unprojectMat=mat4.create();}var m=unprojectMat;var v=unprojectVec;v[0]=(vec[0]-viewport[0])*2.0/viewport[2]-1.0;v[1]=(vec[1]-viewport[1])*2.0/viewport[3]-1.0;v[2]=2.0*vec[2]-1.0;v[3]=1.0;mat4.multiply(proj,view,m);if(!mat4.inverse(m)){return null;}mat4.multiplyVec4(m,v);if(v[3]===0.0){return null;}dest[0]=v[0]/v[3];dest[1]=v[1]/v[3];dest[2]=v[2]/v[3];return dest;};var xUnitVec3=vec3.createFrom(1,0,0);var yUnitVec3=vec3.createFrom(0,1,0);var zUnitVec3=vec3.createFrom(0,0,1);var tmpvec3=vec3.create();/**\n     * Generates a quaternion of rotation between two given normalized vectors\n     *\n     * @param {vec3} a Normalized source vector\n     * @param {vec3} b Normalized target vector\n     * @param {quat4} [dest] quat4 receiving operation result.\n     *\n     * @returns {quat4} dest if specified, a new quat4 otherwise\n     */vec3.rotationTo=function(a,b,dest){if(!dest){dest=quat4.create();}var d=vec3.dot(a,b);var axis=tmpvec3;if(d>=1.0){quat4.set(identityQuat4,dest);}else if(d<0.000001-1.0){vec3.cross(xUnitVec3,a,axis);if(vec3.length(axis)<0.000001)vec3.cross(yUnitVec3,a,axis);if(vec3.length(axis)<0.000001)vec3.cross(zUnitVec3,a,axis);vec3.normalize(axis);quat4.fromAngleAxis(Math.PI,axis,dest);}else{var s=Math.sqrt((1.0+d)*2.0);var sInv=1.0/s;vec3.cross(a,b,axis);dest[0]=axis[0]*sInv;dest[1]=axis[1]*sInv;dest[2]=axis[2]*sInv;dest[3]=s*0.5;quat4.normalize(dest);}if(dest[3]>1.0)dest[3]=1.0;else if(dest[3]<-1.0)dest[3]=-1.0;return dest;};/**\n     * Returns a string representation of a vector\n     *\n     * @param {vec3} vec Vector to represent as a string\n     *\n     * @returns {string} String representation of vec\n     */vec3.str=function(vec){return'['+vec[0]+', '+vec[1]+', '+vec[2]+']';};/**\n     * @class 3x3 Matrix\n     * @name mat3\n     */var mat3={};/**\n     * Creates a new instance of a mat3 using the default array type\n     * Any javascript array-like object containing at least 9 numeric elements can serve as a mat3\n     *\n     * @param {mat3} [mat] mat3 containing values to initialize with\n     *\n     * @returns {mat3} New mat3\n     */mat3.create=function(mat){var dest=new MatrixArray(9);if(mat){dest[0]=mat[0];dest[1]=mat[1];dest[2]=mat[2];dest[3]=mat[3];dest[4]=mat[4];dest[5]=mat[5];dest[6]=mat[6];dest[7]=mat[7];dest[8]=mat[8];}else{dest[0]=dest[1]=dest[2]=dest[3]=dest[4]=dest[5]=dest[6]=dest[7]=dest[8]=0;}return dest;};/**\n     * Creates a new instance of a mat3, initializing it with the given arguments\n     *\n     * @param {number} m00\n     * @param {number} m01\n     * @param {number} m02\n     * @param {number} m10\n     * @param {number} m11\n     * @param {number} m12\n     * @param {number} m20\n     * @param {number} m21\n     * @param {number} m22\n\n     * @returns {mat3} New mat3\n     */mat3.createFrom=function(m00,m01,m02,m10,m11,m12,m20,m21,m22){var dest=new MatrixArray(9);dest[0]=m00;dest[1]=m01;dest[2]=m02;dest[3]=m10;dest[4]=m11;dest[5]=m12;dest[6]=m20;dest[7]=m21;dest[8]=m22;return dest;};/**\n     * Calculates the determinant of a mat3\n     *\n     * @param {mat3} mat mat3 to calculate determinant of\n     *\n     * @returns {Number} determinant of mat\n     */mat3.determinant=function(mat){var a00=mat[0],a01=mat[1],a02=mat[2],a10=mat[3],a11=mat[4],a12=mat[5],a20=mat[6],a21=mat[7],a22=mat[8];return a00*(a22*a11-a12*a21)+a01*(-a22*a10+a12*a20)+a02*(a21*a10-a11*a20);};/**\n     * Calculates the inverse matrix of a mat3\n     *\n     * @param {mat3} mat mat3 to calculate inverse of\n     * @param {mat3} [dest] mat3 receiving inverse matrix. If not specified result is written to mat\n     *\n     * @param {mat3} dest is specified, mat otherwise, null if matrix cannot be inverted\n     */mat3.inverse=function(mat,dest){var a00=mat[0],a01=mat[1],a02=mat[2],a10=mat[3],a11=mat[4],a12=mat[5],a20=mat[6],a21=mat[7],a22=mat[8],b01=a22*a11-a12*a21,b11=-a22*a10+a12*a20,b21=a21*a10-a11*a20,d=a00*b01+a01*b11+a02*b21,id;if(!d){return null;}id=1/d;if(!dest){dest=mat3.create();}dest[0]=b01*id;dest[1]=(-a22*a01+a02*a21)*id;dest[2]=(a12*a01-a02*a11)*id;dest[3]=b11*id;dest[4]=(a22*a00-a02*a20)*id;dest[5]=(-a12*a00+a02*a10)*id;dest[6]=b21*id;dest[7]=(-a21*a00+a01*a20)*id;dest[8]=(a11*a00-a01*a10)*id;return dest;};/**\n     * Performs a matrix multiplication\n     *\n     * @param {mat3} mat First operand\n     * @param {mat3} mat2 Second operand\n     * @param {mat3} [dest] mat3 receiving operation result. If not specified result is written to mat\n     *\n     * @returns {mat3} dest if specified, mat otherwise\n     */mat3.multiply=function(mat,mat2,dest){if(!dest){dest=mat;}// Cache the matrix values (makes for huge speed increases!)\nvar a00=mat[0],a01=mat[1],a02=mat[2],a10=mat[3],a11=mat[4],a12=mat[5],a20=mat[6],a21=mat[7],a22=mat[8],b00=mat2[0],b01=mat2[1],b02=mat2[2],b10=mat2[3],b11=mat2[4],b12=mat2[5],b20=mat2[6],b21=mat2[7],b22=mat2[8];dest[0]=b00*a00+b01*a10+b02*a20;dest[1]=b00*a01+b01*a11+b02*a21;dest[2]=b00*a02+b01*a12+b02*a22;dest[3]=b10*a00+b11*a10+b12*a20;dest[4]=b10*a01+b11*a11+b12*a21;dest[5]=b10*a02+b11*a12+b12*a22;dest[6]=b20*a00+b21*a10+b22*a20;dest[7]=b20*a01+b21*a11+b22*a21;dest[8]=b20*a02+b21*a12+b22*a22;return dest;};/**\n     * Transforms the vec2 according to the given mat3.\n     *\n     * @param {mat3} matrix mat3 to multiply against\n     * @param {vec2} vec    the vector to multiply\n     * @param {vec2} [dest] an optional receiving vector. If not given, vec is used.\n     *\n     * @returns {vec2} The multiplication result\n     **/mat3.multiplyVec2=function(matrix,vec,dest){if(!dest)dest=vec;var x=vec[0],y=vec[1];dest[0]=x*matrix[0]+y*matrix[3]+matrix[6];dest[1]=x*matrix[1]+y*matrix[4]+matrix[7];return dest;};/**\n     * Transforms the vec3 according to the given mat3\n     *\n     * @param {mat3} matrix mat3 to multiply against\n     * @param {vec3} vec    the vector to multiply\n     * @param {vec3} [dest] an optional receiving vector. If not given, vec is used.\n     *\n     * @returns {vec3} The multiplication result\n     **/mat3.multiplyVec3=function(matrix,vec,dest){if(!dest)dest=vec;var x=vec[0],y=vec[1],z=vec[2];dest[0]=x*matrix[0]+y*matrix[3]+z*matrix[6];dest[1]=x*matrix[1]+y*matrix[4]+z*matrix[7];dest[2]=x*matrix[2]+y*matrix[5]+z*matrix[8];return dest;};/**\n     * Copies the values of one mat3 to another\n     *\n     * @param {mat3} mat mat3 containing values to copy\n     * @param {mat3} dest mat3 receiving copied values\n     *\n     * @returns {mat3} dest\n     */mat3.set=function(mat,dest){dest[0]=mat[0];dest[1]=mat[1];dest[2]=mat[2];dest[3]=mat[3];dest[4]=mat[4];dest[5]=mat[5];dest[6]=mat[6];dest[7]=mat[7];dest[8]=mat[8];return dest;};/**\n     * Compares two matrices for equality within a certain margin of error\n     *\n     * @param {mat3} a First matrix\n     * @param {mat3} b Second matrix\n     *\n     * @returns {Boolean} True if a is equivalent to b\n     */mat3.equal=function(a,b){return a===b||Math.abs(a[0]-b[0])<FLOAT_EPSILON&&Math.abs(a[1]-b[1])<FLOAT_EPSILON&&Math.abs(a[2]-b[2])<FLOAT_EPSILON&&Math.abs(a[3]-b[3])<FLOAT_EPSILON&&Math.abs(a[4]-b[4])<FLOAT_EPSILON&&Math.abs(a[5]-b[5])<FLOAT_EPSILON&&Math.abs(a[6]-b[6])<FLOAT_EPSILON&&Math.abs(a[7]-b[7])<FLOAT_EPSILON&&Math.abs(a[8]-b[8])<FLOAT_EPSILON;};/**\n     * Sets a mat3 to an identity matrix\n     *\n     * @param {mat3} dest mat3 to set\n     *\n     * @returns dest if specified, otherwise a new mat3\n     */mat3.identity=function(dest){if(!dest){dest=mat3.create();}dest[0]=1;dest[1]=0;dest[2]=0;dest[3]=0;dest[4]=1;dest[5]=0;dest[6]=0;dest[7]=0;dest[8]=1;return dest;};/**\n     * Transposes a mat3 (flips the values over the diagonal)\n     *\n     * Params:\n     * @param {mat3} mat mat3 to transpose\n     * @param {mat3} [dest] mat3 receiving transposed values. If not specified result is written to mat\n     *\n     * @returns {mat3} dest is specified, mat otherwise\n     */mat3.transpose=function(mat,dest){// If we are transposing ourselves we can skip a few steps but have to cache some values\nif(!dest||mat===dest){var a01=mat[1],a02=mat[2],a12=mat[5];mat[1]=mat[3];mat[2]=mat[6];mat[3]=a01;mat[5]=mat[7];mat[6]=a02;mat[7]=a12;return mat;}dest[0]=mat[0];dest[1]=mat[3];dest[2]=mat[6];dest[3]=mat[1];dest[4]=mat[4];dest[5]=mat[7];dest[6]=mat[2];dest[7]=mat[5];dest[8]=mat[8];return dest;};/**\n     * Copies the elements of a mat3 into the upper 3x3 elements of a mat4\n     *\n     * @param {mat3} mat mat3 containing values to copy\n     * @param {mat4} [dest] mat4 receiving copied values\n     *\n     * @returns {mat4} dest if specified, a new mat4 otherwise\n     */mat3.toMat4=function(mat,dest){if(!dest){dest=mat4.create();}dest[15]=1;dest[14]=0;dest[13]=0;dest[12]=0;dest[11]=0;dest[10]=mat[8];dest[9]=mat[7];dest[8]=mat[6];dest[7]=0;dest[6]=mat[5];dest[5]=mat[4];dest[4]=mat[3];dest[3]=0;dest[2]=mat[2];dest[1]=mat[1];dest[0]=mat[0];return dest;};/**\n     * Returns a string representation of a mat3\n     *\n     * @param {mat3} mat mat3 to represent as a string\n     *\n     * @param {string} String representation of mat\n     */mat3.str=function(mat){return'['+mat[0]+', '+mat[1]+', '+mat[2]+', '+mat[3]+', '+mat[4]+', '+mat[5]+', '+mat[6]+', '+mat[7]+', '+mat[8]+']';};/**\n     * @class 4x4 Matrix\n     * @name mat4\n     */var mat4={};/**\n     * Creates a new instance of a mat4 using the default array type\n     * Any javascript array-like object containing at least 16 numeric elements can serve as a mat4\n     *\n     * @param {mat4} [mat] mat4 containing values to initialize with\n     *\n     * @returns {mat4} New mat4\n     */mat4.create=function(mat){var dest=new MatrixArray(16);if(mat){dest[0]=mat[0];dest[1]=mat[1];dest[2]=mat[2];dest[3]=mat[3];dest[4]=mat[4];dest[5]=mat[5];dest[6]=mat[6];dest[7]=mat[7];dest[8]=mat[8];dest[9]=mat[9];dest[10]=mat[10];dest[11]=mat[11];dest[12]=mat[12];dest[13]=mat[13];dest[14]=mat[14];dest[15]=mat[15];}return dest;};/**\n     * Creates a new instance of a mat4, initializing it with the given arguments\n     *\n     * @param {number} m00\n     * @param {number} m01\n     * @param {number} m02\n     * @param {number} m03\n     * @param {number} m10\n     * @param {number} m11\n     * @param {number} m12\n     * @param {number} m13\n     * @param {number} m20\n     * @param {number} m21\n     * @param {number} m22\n     * @param {number} m23\n     * @param {number} m30\n     * @param {number} m31\n     * @param {number} m32\n     * @param {number} m33\n\n     * @returns {mat4} New mat4\n     */mat4.createFrom=function(m00,m01,m02,m03,m10,m11,m12,m13,m20,m21,m22,m23,m30,m31,m32,m33){var dest=new MatrixArray(16);dest[0]=m00;dest[1]=m01;dest[2]=m02;dest[3]=m03;dest[4]=m10;dest[5]=m11;dest[6]=m12;dest[7]=m13;dest[8]=m20;dest[9]=m21;dest[10]=m22;dest[11]=m23;dest[12]=m30;dest[13]=m31;dest[14]=m32;dest[15]=m33;return dest;};/**\n     * Copies the values of one mat4 to another\n     *\n     * @param {mat4} mat mat4 containing values to copy\n     * @param {mat4} dest mat4 receiving copied values\n     *\n     * @returns {mat4} dest\n     */mat4.set=function(mat,dest){dest[0]=mat[0];dest[1]=mat[1];dest[2]=mat[2];dest[3]=mat[3];dest[4]=mat[4];dest[5]=mat[5];dest[6]=mat[6];dest[7]=mat[7];dest[8]=mat[8];dest[9]=mat[9];dest[10]=mat[10];dest[11]=mat[11];dest[12]=mat[12];dest[13]=mat[13];dest[14]=mat[14];dest[15]=mat[15];return dest;};/**\n     * Compares two matrices for equality within a certain margin of error\n     *\n     * @param {mat4} a First matrix\n     * @param {mat4} b Second matrix\n     *\n     * @returns {Boolean} True if a is equivalent to b\n     */mat4.equal=function(a,b){return a===b||Math.abs(a[0]-b[0])<FLOAT_EPSILON&&Math.abs(a[1]-b[1])<FLOAT_EPSILON&&Math.abs(a[2]-b[2])<FLOAT_EPSILON&&Math.abs(a[3]-b[3])<FLOAT_EPSILON&&Math.abs(a[4]-b[4])<FLOAT_EPSILON&&Math.abs(a[5]-b[5])<FLOAT_EPSILON&&Math.abs(a[6]-b[6])<FLOAT_EPSILON&&Math.abs(a[7]-b[7])<FLOAT_EPSILON&&Math.abs(a[8]-b[8])<FLOAT_EPSILON&&Math.abs(a[9]-b[9])<FLOAT_EPSILON&&Math.abs(a[10]-b[10])<FLOAT_EPSILON&&Math.abs(a[11]-b[11])<FLOAT_EPSILON&&Math.abs(a[12]-b[12])<FLOAT_EPSILON&&Math.abs(a[13]-b[13])<FLOAT_EPSILON&&Math.abs(a[14]-b[14])<FLOAT_EPSILON&&Math.abs(a[15]-b[15])<FLOAT_EPSILON;};/**\n     * Sets a mat4 to an identity matrix\n     *\n     * @param {mat4} dest mat4 to set\n     *\n     * @returns {mat4} dest\n     */mat4.identity=function(dest){if(!dest){dest=mat4.create();}dest[0]=1;dest[1]=0;dest[2]=0;dest[3]=0;dest[4]=0;dest[5]=1;dest[6]=0;dest[7]=0;dest[8]=0;dest[9]=0;dest[10]=1;dest[11]=0;dest[12]=0;dest[13]=0;dest[14]=0;dest[15]=1;return dest;};/**\n     * Transposes a mat4 (flips the values over the diagonal)\n     *\n     * @param {mat4} mat mat4 to transpose\n     * @param {mat4} [dest] mat4 receiving transposed values. If not specified result is written to mat\n     *\n     * @param {mat4} dest is specified, mat otherwise\n     */mat4.transpose=function(mat,dest){// If we are transposing ourselves we can skip a few steps but have to cache some values\nif(!dest||mat===dest){var a01=mat[1],a02=mat[2],a03=mat[3],a12=mat[6],a13=mat[7],a23=mat[11];mat[1]=mat[4];mat[2]=mat[8];mat[3]=mat[12];mat[4]=a01;mat[6]=mat[9];mat[7]=mat[13];mat[8]=a02;mat[9]=a12;mat[11]=mat[14];mat[12]=a03;mat[13]=a13;mat[14]=a23;return mat;}dest[0]=mat[0];dest[1]=mat[4];dest[2]=mat[8];dest[3]=mat[12];dest[4]=mat[1];dest[5]=mat[5];dest[6]=mat[9];dest[7]=mat[13];dest[8]=mat[2];dest[9]=mat[6];dest[10]=mat[10];dest[11]=mat[14];dest[12]=mat[3];dest[13]=mat[7];dest[14]=mat[11];dest[15]=mat[15];return dest;};/**\n     * Calculates the determinant of a mat4\n     *\n     * @param {mat4} mat mat4 to calculate determinant of\n     *\n     * @returns {number} determinant of mat\n     */mat4.determinant=function(mat){// Cache the matrix values (makes for huge speed increases!)\nvar a00=mat[0],a01=mat[1],a02=mat[2],a03=mat[3],a10=mat[4],a11=mat[5],a12=mat[6],a13=mat[7],a20=mat[8],a21=mat[9],a22=mat[10],a23=mat[11],a30=mat[12],a31=mat[13],a32=mat[14],a33=mat[15];return a30*a21*a12*a03-a20*a31*a12*a03-a30*a11*a22*a03+a10*a31*a22*a03+a20*a11*a32*a03-a10*a21*a32*a03-a30*a21*a02*a13+a20*a31*a02*a13+a30*a01*a22*a13-a00*a31*a22*a13-a20*a01*a32*a13+a00*a21*a32*a13+a30*a11*a02*a23-a10*a31*a02*a23-a30*a01*a12*a23+a00*a31*a12*a23+a10*a01*a32*a23-a00*a11*a32*a23-a20*a11*a02*a33+a10*a21*a02*a33+a20*a01*a12*a33-a00*a21*a12*a33-a10*a01*a22*a33+a00*a11*a22*a33;};/**\n     * Calculates the inverse matrix of a mat4\n     *\n     * @param {mat4} mat mat4 to calculate inverse of\n     * @param {mat4} [dest] mat4 receiving inverse matrix. If not specified result is written to mat\n     *\n     * @param {mat4} dest is specified, mat otherwise, null if matrix cannot be inverted\n     */mat4.inverse=function(mat,dest){if(!dest){dest=mat;}// Cache the matrix values (makes for huge speed increases!)\nvar a00=mat[0],a01=mat[1],a02=mat[2],a03=mat[3],a10=mat[4],a11=mat[5],a12=mat[6],a13=mat[7],a20=mat[8],a21=mat[9],a22=mat[10],a23=mat[11],a30=mat[12],a31=mat[13],a32=mat[14],a33=mat[15],b00=a00*a11-a01*a10,b01=a00*a12-a02*a10,b02=a00*a13-a03*a10,b03=a01*a12-a02*a11,b04=a01*a13-a03*a11,b05=a02*a13-a03*a12,b06=a20*a31-a21*a30,b07=a20*a32-a22*a30,b08=a20*a33-a23*a30,b09=a21*a32-a22*a31,b10=a21*a33-a23*a31,b11=a22*a33-a23*a32,d=b00*b11-b01*b10+b02*b09+b03*b08-b04*b07+b05*b06,invDet;// Calculate the determinant\nif(!d){return null;}invDet=1/d;dest[0]=(a11*b11-a12*b10+a13*b09)*invDet;dest[1]=(-a01*b11+a02*b10-a03*b09)*invDet;dest[2]=(a31*b05-a32*b04+a33*b03)*invDet;dest[3]=(-a21*b05+a22*b04-a23*b03)*invDet;dest[4]=(-a10*b11+a12*b08-a13*b07)*invDet;dest[5]=(a00*b11-a02*b08+a03*b07)*invDet;dest[6]=(-a30*b05+a32*b02-a33*b01)*invDet;dest[7]=(a20*b05-a22*b02+a23*b01)*invDet;dest[8]=(a10*b10-a11*b08+a13*b06)*invDet;dest[9]=(-a00*b10+a01*b08-a03*b06)*invDet;dest[10]=(a30*b04-a31*b02+a33*b00)*invDet;dest[11]=(-a20*b04+a21*b02-a23*b00)*invDet;dest[12]=(-a10*b09+a11*b07-a12*b06)*invDet;dest[13]=(a00*b09-a01*b07+a02*b06)*invDet;dest[14]=(-a30*b03+a31*b01-a32*b00)*invDet;dest[15]=(a20*b03-a21*b01+a22*b00)*invDet;return dest;};/**\n     * Copies the upper 3x3 elements of a mat4 into another mat4\n     *\n     * @param {mat4} mat mat4 containing values to copy\n     * @param {mat4} [dest] mat4 receiving copied values\n     *\n     * @returns {mat4} dest is specified, a new mat4 otherwise\n     */mat4.toRotationMat=function(mat,dest){if(!dest){dest=mat4.create();}dest[0]=mat[0];dest[1]=mat[1];dest[2]=mat[2];dest[3]=mat[3];dest[4]=mat[4];dest[5]=mat[5];dest[6]=mat[6];dest[7]=mat[7];dest[8]=mat[8];dest[9]=mat[9];dest[10]=mat[10];dest[11]=mat[11];dest[12]=0;dest[13]=0;dest[14]=0;dest[15]=1;return dest;};/**\n     * Copies the upper 3x3 elements of a mat4 into a mat3\n     *\n     * @param {mat4} mat mat4 containing values to copy\n     * @param {mat3} [dest] mat3 receiving copied values\n     *\n     * @returns {mat3} dest is specified, a new mat3 otherwise\n     */mat4.toMat3=function(mat,dest){if(!dest){dest=mat3.create();}dest[0]=mat[0];dest[1]=mat[1];dest[2]=mat[2];dest[3]=mat[4];dest[4]=mat[5];dest[5]=mat[6];dest[6]=mat[8];dest[7]=mat[9];dest[8]=mat[10];return dest;};/**\n     * Calculates the inverse of the upper 3x3 elements of a mat4 and copies the result into a mat3\n     * The resulting matrix is useful for calculating transformed normals\n     *\n     * Params:\n     * @param {mat4} mat mat4 containing values to invert and copy\n     * @param {mat3} [dest] mat3 receiving values\n     *\n     * @returns {mat3} dest is specified, a new mat3 otherwise, null if the matrix cannot be inverted\n     */mat4.toInverseMat3=function(mat,dest){// Cache the matrix values (makes for huge speed increases!)\nvar a00=mat[0],a01=mat[1],a02=mat[2],a10=mat[4],a11=mat[5],a12=mat[6],a20=mat[8],a21=mat[9],a22=mat[10],b01=a22*a11-a12*a21,b11=-a22*a10+a12*a20,b21=a21*a10-a11*a20,d=a00*b01+a01*b11+a02*b21,id;if(!d){return null;}id=1/d;if(!dest){dest=mat3.create();}dest[0]=b01*id;dest[1]=(-a22*a01+a02*a21)*id;dest[2]=(a12*a01-a02*a11)*id;dest[3]=b11*id;dest[4]=(a22*a00-a02*a20)*id;dest[5]=(-a12*a00+a02*a10)*id;dest[6]=b21*id;dest[7]=(-a21*a00+a01*a20)*id;dest[8]=(a11*a00-a01*a10)*id;return dest;};/**\n     * Performs a matrix multiplication\n     *\n     * @param {mat4} mat First operand\n     * @param {mat4} mat2 Second operand\n     * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n     *\n     * @returns {mat4} dest if specified, mat otherwise\n     */mat4.multiply=function(mat,mat2,dest){if(!dest){dest=mat;}// Cache the matrix values (makes for huge speed increases!)\nvar a00=mat[0],a01=mat[1],a02=mat[2],a03=mat[3];var a10=mat[4],a11=mat[5],a12=mat[6],a13=mat[7];var a20=mat[8],a21=mat[9],a22=mat[10],a23=mat[11];var a30=mat[12],a31=mat[13],a32=mat[14],a33=mat[15];// Cache only the current line of the second matrix\nvar b0=mat2[0],b1=mat2[1],b2=mat2[2],b3=mat2[3];dest[0]=b0*a00+b1*a10+b2*a20+b3*a30;dest[1]=b0*a01+b1*a11+b2*a21+b3*a31;dest[2]=b0*a02+b1*a12+b2*a22+b3*a32;dest[3]=b0*a03+b1*a13+b2*a23+b3*a33;b0=mat2[4];b1=mat2[5];b2=mat2[6];b3=mat2[7];dest[4]=b0*a00+b1*a10+b2*a20+b3*a30;dest[5]=b0*a01+b1*a11+b2*a21+b3*a31;dest[6]=b0*a02+b1*a12+b2*a22+b3*a32;dest[7]=b0*a03+b1*a13+b2*a23+b3*a33;b0=mat2[8];b1=mat2[9];b2=mat2[10];b3=mat2[11];dest[8]=b0*a00+b1*a10+b2*a20+b3*a30;dest[9]=b0*a01+b1*a11+b2*a21+b3*a31;dest[10]=b0*a02+b1*a12+b2*a22+b3*a32;dest[11]=b0*a03+b1*a13+b2*a23+b3*a33;b0=mat2[12];b1=mat2[13];b2=mat2[14];b3=mat2[15];dest[12]=b0*a00+b1*a10+b2*a20+b3*a30;dest[13]=b0*a01+b1*a11+b2*a21+b3*a31;dest[14]=b0*a02+b1*a12+b2*a22+b3*a32;dest[15]=b0*a03+b1*a13+b2*a23+b3*a33;return dest;};/**\n     * Transforms a vec3 with the given matrix\n     * 4th vector component is implicitly '1'\n     *\n     * @param {mat4} mat mat4 to transform the vector with\n     * @param {vec3} vec vec3 to transform\n     * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n     *\n     * @returns {vec3} dest if specified, vec otherwise\n     */mat4.multiplyVec3=function(mat,vec,dest){if(!dest){dest=vec;}var x=vec[0],y=vec[1],z=vec[2];dest[0]=mat[0]*x+mat[4]*y+mat[8]*z+mat[12];dest[1]=mat[1]*x+mat[5]*y+mat[9]*z+mat[13];dest[2]=mat[2]*x+mat[6]*y+mat[10]*z+mat[14];return dest;};/**\n     * Transforms a vec4 with the given matrix\n     *\n     * @param {mat4} mat mat4 to transform the vector with\n     * @param {vec4} vec vec4 to transform\n     * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec\n     *\n     * @returns {vec4} dest if specified, vec otherwise\n     */mat4.multiplyVec4=function(mat,vec,dest){if(!dest){dest=vec;}var x=vec[0],y=vec[1],z=vec[2],w=vec[3];dest[0]=mat[0]*x+mat[4]*y+mat[8]*z+mat[12]*w;dest[1]=mat[1]*x+mat[5]*y+mat[9]*z+mat[13]*w;dest[2]=mat[2]*x+mat[6]*y+mat[10]*z+mat[14]*w;dest[3]=mat[3]*x+mat[7]*y+mat[11]*z+mat[15]*w;return dest;};/**\n     * Translates a matrix by the given vector\n     *\n     * @param {mat4} mat mat4 to translate\n     * @param {vec3} vec vec3 specifying the translation\n     * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n     *\n     * @returns {mat4} dest if specified, mat otherwise\n     */mat4.translate=function(mat,vec,dest){var x=vec[0],y=vec[1],z=vec[2],a00,a01,a02,a03,a10,a11,a12,a13,a20,a21,a22,a23;if(!dest||mat===dest){mat[12]=mat[0]*x+mat[4]*y+mat[8]*z+mat[12];mat[13]=mat[1]*x+mat[5]*y+mat[9]*z+mat[13];mat[14]=mat[2]*x+mat[6]*y+mat[10]*z+mat[14];mat[15]=mat[3]*x+mat[7]*y+mat[11]*z+mat[15];return mat;}a00=mat[0];a01=mat[1];a02=mat[2];a03=mat[3];a10=mat[4];a11=mat[5];a12=mat[6];a13=mat[7];a20=mat[8];a21=mat[9];a22=mat[10];a23=mat[11];dest[0]=a00;dest[1]=a01;dest[2]=a02;dest[3]=a03;dest[4]=a10;dest[5]=a11;dest[6]=a12;dest[7]=a13;dest[8]=a20;dest[9]=a21;dest[10]=a22;dest[11]=a23;dest[12]=a00*x+a10*y+a20*z+mat[12];dest[13]=a01*x+a11*y+a21*z+mat[13];dest[14]=a02*x+a12*y+a22*z+mat[14];dest[15]=a03*x+a13*y+a23*z+mat[15];return dest;};/**\n     * Scales a matrix by the given vector\n     *\n     * @param {mat4} mat mat4 to scale\n     * @param {vec3} vec vec3 specifying the scale for each axis\n     * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n     *\n     * @param {mat4} dest if specified, mat otherwise\n     */mat4.scale=function(mat,vec,dest){var x=vec[0],y=vec[1],z=vec[2];if(!dest||mat===dest){mat[0]*=x;mat[1]*=x;mat[2]*=x;mat[3]*=x;mat[4]*=y;mat[5]*=y;mat[6]*=y;mat[7]*=y;mat[8]*=z;mat[9]*=z;mat[10]*=z;mat[11]*=z;return mat;}dest[0]=mat[0]*x;dest[1]=mat[1]*x;dest[2]=mat[2]*x;dest[3]=mat[3]*x;dest[4]=mat[4]*y;dest[5]=mat[5]*y;dest[6]=mat[6]*y;dest[7]=mat[7]*y;dest[8]=mat[8]*z;dest[9]=mat[9]*z;dest[10]=mat[10]*z;dest[11]=mat[11]*z;dest[12]=mat[12];dest[13]=mat[13];dest[14]=mat[14];dest[15]=mat[15];return dest;};/**\n     * Rotates a matrix by the given angle around the specified axis\n     * If rotating around a primary axis (X,Y,Z) one of the specialized rotation functions should be used instead for performance\n     *\n     * @param {mat4} mat mat4 to rotate\n     * @param {number} angle Angle (in radians) to rotate\n     * @param {vec3} axis vec3 representing the axis to rotate around\n     * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n     *\n     * @returns {mat4} dest if specified, mat otherwise\n     */mat4.rotate=function(mat,angle,axis,dest){var x=axis[0],y=axis[1],z=axis[2],len=Math.sqrt(x*x+y*y+z*z),s,c,t,a00,a01,a02,a03,a10,a11,a12,a13,a20,a21,a22,a23,b00,b01,b02,b10,b11,b12,b20,b21,b22;if(!len){return null;}if(len!==1){len=1/len;x*=len;y*=len;z*=len;}s=Math.sin(angle);c=Math.cos(angle);t=1-c;a00=mat[0];a01=mat[1];a02=mat[2];a03=mat[3];a10=mat[4];a11=mat[5];a12=mat[6];a13=mat[7];a20=mat[8];a21=mat[9];a22=mat[10];a23=mat[11];// Construct the elements of the rotation matrix\nb00=x*x*t+c;b01=y*x*t+z*s;b02=z*x*t-y*s;b10=x*y*t-z*s;b11=y*y*t+c;b12=z*y*t+x*s;b20=x*z*t+y*s;b21=y*z*t-x*s;b22=z*z*t+c;if(!dest){dest=mat;}else if(mat!==dest){// If the source and destination differ, copy the unchanged last row\ndest[12]=mat[12];dest[13]=mat[13];dest[14]=mat[14];dest[15]=mat[15];}// Perform rotation-specific matrix multiplication\ndest[0]=a00*b00+a10*b01+a20*b02;dest[1]=a01*b00+a11*b01+a21*b02;dest[2]=a02*b00+a12*b01+a22*b02;dest[3]=a03*b00+a13*b01+a23*b02;dest[4]=a00*b10+a10*b11+a20*b12;dest[5]=a01*b10+a11*b11+a21*b12;dest[6]=a02*b10+a12*b11+a22*b12;dest[7]=a03*b10+a13*b11+a23*b12;dest[8]=a00*b20+a10*b21+a20*b22;dest[9]=a01*b20+a11*b21+a21*b22;dest[10]=a02*b20+a12*b21+a22*b22;dest[11]=a03*b20+a13*b21+a23*b22;return dest;};/**\n     * Rotates a matrix by the given angle around the X axis\n     *\n     * @param {mat4} mat mat4 to rotate\n     * @param {number} angle Angle (in radians) to rotate\n     * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n     *\n     * @returns {mat4} dest if specified, mat otherwise\n     */mat4.rotateX=function(mat,angle,dest){var s=Math.sin(angle),c=Math.cos(angle),a10=mat[4],a11=mat[5],a12=mat[6],a13=mat[7],a20=mat[8],a21=mat[9],a22=mat[10],a23=mat[11];if(!dest){dest=mat;}else if(mat!==dest){// If the source and destination differ, copy the unchanged rows\ndest[0]=mat[0];dest[1]=mat[1];dest[2]=mat[2];dest[3]=mat[3];dest[12]=mat[12];dest[13]=mat[13];dest[14]=mat[14];dest[15]=mat[15];}// Perform axis-specific matrix multiplication\ndest[4]=a10*c+a20*s;dest[5]=a11*c+a21*s;dest[6]=a12*c+a22*s;dest[7]=a13*c+a23*s;dest[8]=a10*-s+a20*c;dest[9]=a11*-s+a21*c;dest[10]=a12*-s+a22*c;dest[11]=a13*-s+a23*c;return dest;};/**\n     * Rotates a matrix by the given angle around the Y axis\n     *\n     * @param {mat4} mat mat4 to rotate\n     * @param {number} angle Angle (in radians) to rotate\n     * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n     *\n     * @returns {mat4} dest if specified, mat otherwise\n     */mat4.rotateY=function(mat,angle,dest){var s=Math.sin(angle),c=Math.cos(angle),a00=mat[0],a01=mat[1],a02=mat[2],a03=mat[3],a20=mat[8],a21=mat[9],a22=mat[10],a23=mat[11];if(!dest){dest=mat;}else if(mat!==dest){// If the source and destination differ, copy the unchanged rows\ndest[4]=mat[4];dest[5]=mat[5];dest[6]=mat[6];dest[7]=mat[7];dest[12]=mat[12];dest[13]=mat[13];dest[14]=mat[14];dest[15]=mat[15];}// Perform axis-specific matrix multiplication\ndest[0]=a00*c+a20*-s;dest[1]=a01*c+a21*-s;dest[2]=a02*c+a22*-s;dest[3]=a03*c+a23*-s;dest[8]=a00*s+a20*c;dest[9]=a01*s+a21*c;dest[10]=a02*s+a22*c;dest[11]=a03*s+a23*c;return dest;};/**\n     * Rotates a matrix by the given angle around the Z axis\n     *\n     * @param {mat4} mat mat4 to rotate\n     * @param {number} angle Angle (in radians) to rotate\n     * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n     *\n     * @returns {mat4} dest if specified, mat otherwise\n     */mat4.rotateZ=function(mat,angle,dest){var s=Math.sin(angle),c=Math.cos(angle),a00=mat[0],a01=mat[1],a02=mat[2],a03=mat[3],a10=mat[4],a11=mat[5],a12=mat[6],a13=mat[7];if(!dest){dest=mat;}else if(mat!==dest){// If the source and destination differ, copy the unchanged last row\ndest[8]=mat[8];dest[9]=mat[9];dest[10]=mat[10];dest[11]=mat[11];dest[12]=mat[12];dest[13]=mat[13];dest[14]=mat[14];dest[15]=mat[15];}// Perform axis-specific matrix multiplication\ndest[0]=a00*c+a10*s;dest[1]=a01*c+a11*s;dest[2]=a02*c+a12*s;dest[3]=a03*c+a13*s;dest[4]=a00*-s+a10*c;dest[5]=a01*-s+a11*c;dest[6]=a02*-s+a12*c;dest[7]=a03*-s+a13*c;return dest;};/**\n     * Generates a frustum matrix with the given bounds\n     *\n     * @param {number} left Left bound of the frustum\n     * @param {number} right Right bound of the frustum\n     * @param {number} bottom Bottom bound of the frustum\n     * @param {number} top Top bound of the frustum\n     * @param {number} near Near bound of the frustum\n     * @param {number} far Far bound of the frustum\n     * @param {mat4} [dest] mat4 frustum matrix will be written into\n     *\n     * @returns {mat4} dest if specified, a new mat4 otherwise\n     */mat4.frustum=function(left,right,bottom,top,near,far,dest){if(!dest){dest=mat4.create();}var rl=right-left,tb=top-bottom,fn=far-near;dest[0]=near*2/rl;dest[1]=0;dest[2]=0;dest[3]=0;dest[4]=0;dest[5]=near*2/tb;dest[6]=0;dest[7]=0;dest[8]=(right+left)/rl;dest[9]=(top+bottom)/tb;dest[10]=-(far+near)/fn;dest[11]=-1;dest[12]=0;dest[13]=0;dest[14]=-(far*near*2)/fn;dest[15]=0;return dest;};/**\n     * Generates a perspective projection matrix with the given bounds\n     *\n     * @param {number} fovy Vertical field of view\n     * @param {number} aspect Aspect ratio. typically viewport width/height\n     * @param {number} near Near bound of the frustum\n     * @param {number} far Far bound of the frustum\n     * @param {mat4} [dest] mat4 frustum matrix will be written into\n     *\n     * @returns {mat4} dest if specified, a new mat4 otherwise\n     */mat4.perspective=function(fovy,aspect,near,far,dest){var top=near*Math.tan(fovy*Math.PI/360.0),right=top*aspect;return mat4.frustum(-right,right,-top,top,near,far,dest);};/**\n     * Generates a orthogonal projection matrix with the given bounds\n     *\n     * @param {number} left Left bound of the frustum\n     * @param {number} right Right bound of the frustum\n     * @param {number} bottom Bottom bound of the frustum\n     * @param {number} top Top bound of the frustum\n     * @param {number} near Near bound of the frustum\n     * @param {number} far Far bound of the frustum\n     * @param {mat4} [dest] mat4 frustum matrix will be written into\n     *\n     * @returns {mat4} dest if specified, a new mat4 otherwise\n     */mat4.ortho=function(left,right,bottom,top,near,far,dest){if(!dest){dest=mat4.create();}var rl=right-left,tb=top-bottom,fn=far-near;dest[0]=2/rl;dest[1]=0;dest[2]=0;dest[3]=0;dest[4]=0;dest[5]=2/tb;dest[6]=0;dest[7]=0;dest[8]=0;dest[9]=0;dest[10]=-2/fn;dest[11]=0;dest[12]=-(left+right)/rl;dest[13]=-(top+bottom)/tb;dest[14]=-(far+near)/fn;dest[15]=1;return dest;};/**\n     * Generates a look-at matrix with the given eye position, focal point, and up axis\n     *\n     * @param {vec3} eye Position of the viewer\n     * @param {vec3} center Point the viewer is looking at\n     * @param {vec3} up vec3 pointing \"up\"\n     * @param {mat4} [dest] mat4 frustum matrix will be written into\n     *\n     * @returns {mat4} dest if specified, a new mat4 otherwise\n     */mat4.lookAt=function(eye,center,up,dest){if(!dest){dest=mat4.create();}var x0,x1,x2,y0,y1,y2,z0,z1,z2,len,eyex=eye[0],eyey=eye[1],eyez=eye[2],upx=up[0],upy=up[1],upz=up[2],centerx=center[0],centery=center[1],centerz=center[2];if(eyex===centerx&&eyey===centery&&eyez===centerz){return mat4.identity(dest);}//vec3.direction(eye, center, z);\nz0=eyex-centerx;z1=eyey-centery;z2=eyez-centerz;// normalize (no check needed for 0 because of early return)\nlen=1/Math.sqrt(z0*z0+z1*z1+z2*z2);z0*=len;z1*=len;z2*=len;//vec3.normalize(vec3.cross(up, z, x));\nx0=upy*z2-upz*z1;x1=upz*z0-upx*z2;x2=upx*z1-upy*z0;len=Math.sqrt(x0*x0+x1*x1+x2*x2);if(!len){x0=0;x1=0;x2=0;}else{len=1/len;x0*=len;x1*=len;x2*=len;}//vec3.normalize(vec3.cross(z, x, y));\ny0=z1*x2-z2*x1;y1=z2*x0-z0*x2;y2=z0*x1-z1*x0;len=Math.sqrt(y0*y0+y1*y1+y2*y2);if(!len){y0=0;y1=0;y2=0;}else{len=1/len;y0*=len;y1*=len;y2*=len;}dest[0]=x0;dest[1]=y0;dest[2]=z0;dest[3]=0;dest[4]=x1;dest[5]=y1;dest[6]=z1;dest[7]=0;dest[8]=x2;dest[9]=y2;dest[10]=z2;dest[11]=0;dest[12]=-(x0*eyex+x1*eyey+x2*eyez);dest[13]=-(y0*eyex+y1*eyey+y2*eyez);dest[14]=-(z0*eyex+z1*eyey+z2*eyez);dest[15]=1;return dest;};/**\n     * Creates a matrix from a quaternion rotation and vector translation\n     * This is equivalent to (but much faster than):\n     *\n     *     mat4.identity(dest);\n     *     mat4.translate(dest, vec);\n     *     var quatMat = mat4.create();\n     *     quat4.toMat4(quat, quatMat);\n     *     mat4.multiply(dest, quatMat);\n     *\n     * @param {quat4} quat Rotation quaternion\n     * @param {vec3} vec Translation vector\n     * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to a new mat4\n     *\n     * @returns {mat4} dest if specified, a new mat4 otherwise\n     */mat4.fromRotationTranslation=function(quat,vec,dest){if(!dest){dest=mat4.create();}// Quaternion math\nvar x=quat[0],y=quat[1],z=quat[2],w=quat[3],x2=x+x,y2=y+y,z2=z+z,xx=x*x2,xy=x*y2,xz=x*z2,yy=y*y2,yz=y*z2,zz=z*z2,wx=w*x2,wy=w*y2,wz=w*z2;dest[0]=1-(yy+zz);dest[1]=xy+wz;dest[2]=xz-wy;dest[3]=0;dest[4]=xy-wz;dest[5]=1-(xx+zz);dest[6]=yz+wx;dest[7]=0;dest[8]=xz+wy;dest[9]=yz-wx;dest[10]=1-(xx+yy);dest[11]=0;dest[12]=vec[0];dest[13]=vec[1];dest[14]=vec[2];dest[15]=1;return dest;};/**\n     * Returns a string representation of a mat4\n     *\n     * @param {mat4} mat mat4 to represent as a string\n     *\n     * @returns {string} String representation of mat\n     */mat4.str=function(mat){return'['+mat[0]+', '+mat[1]+', '+mat[2]+', '+mat[3]+', '+mat[4]+', '+mat[5]+', '+mat[6]+', '+mat[7]+', '+mat[8]+', '+mat[9]+', '+mat[10]+', '+mat[11]+', '+mat[12]+', '+mat[13]+', '+mat[14]+', '+mat[15]+']';};/**\n     * @class Quaternion\n     * @name quat4\n     */var quat4={};/**\n     * Creates a new instance of a quat4 using the default array type\n     * Any javascript array containing at least 4 numeric elements can serve as a quat4\n     *\n     * @param {quat4} [quat] quat4 containing values to initialize with\n     *\n     * @returns {quat4} New quat4\n     */quat4.create=function(quat){var dest=new MatrixArray(4);if(quat){dest[0]=quat[0];dest[1]=quat[1];dest[2]=quat[2];dest[3]=quat[3];}else{dest[0]=dest[1]=dest[2]=dest[3]=0;}return dest;};/**\n     * Creates a new instance of a quat4, initializing it with the given arguments\n     *\n     * @param {number} x X value\n     * @param {number} y Y value\n     * @param {number} z Z value\n     * @param {number} w W value\n\n     * @returns {quat4} New quat4\n     */quat4.createFrom=function(x,y,z,w){var dest=new MatrixArray(4);dest[0]=x;dest[1]=y;dest[2]=z;dest[3]=w;return dest;};/**\n     * Copies the values of one quat4 to another\n     *\n     * @param {quat4} quat quat4 containing values to copy\n     * @param {quat4} dest quat4 receiving copied values\n     *\n     * @returns {quat4} dest\n     */quat4.set=function(quat,dest){dest[0]=quat[0];dest[1]=quat[1];dest[2]=quat[2];dest[3]=quat[3];return dest;};/**\n     * Compares two quaternions for equality within a certain margin of error\n     *\n     * @param {quat4} a First vector\n     * @param {quat4} b Second vector\n     *\n     * @returns {Boolean} True if a is equivalent to b\n     */quat4.equal=function(a,b){return a===b||Math.abs(a[0]-b[0])<FLOAT_EPSILON&&Math.abs(a[1]-b[1])<FLOAT_EPSILON&&Math.abs(a[2]-b[2])<FLOAT_EPSILON&&Math.abs(a[3]-b[3])<FLOAT_EPSILON;};/**\n     * Creates a new identity Quat4\n     *\n     * @param {quat4} [dest] quat4 receiving copied values\n     *\n     * @returns {quat4} dest is specified, new quat4 otherwise\n     */quat4.identity=function(dest){if(!dest){dest=quat4.create();}dest[0]=0;dest[1]=0;dest[2]=0;dest[3]=1;return dest;};var identityQuat4=quat4.identity();/**\n     * Calculates the W component of a quat4 from the X, Y, and Z components.\n     * Assumes that quaternion is 1 unit in length.\n     * Any existing W component will be ignored.\n     *\n     * @param {quat4} quat quat4 to calculate W component of\n     * @param {quat4} [dest] quat4 receiving calculated values. If not specified result is written to quat\n     *\n     * @returns {quat4} dest if specified, quat otherwise\n     */quat4.calculateW=function(quat,dest){var x=quat[0],y=quat[1],z=quat[2];if(!dest||quat===dest){quat[3]=-Math.sqrt(Math.abs(1.0-x*x-y*y-z*z));return quat;}dest[0]=x;dest[1]=y;dest[2]=z;dest[3]=-Math.sqrt(Math.abs(1.0-x*x-y*y-z*z));return dest;};/**\n     * Calculates the dot product of two quaternions\n     *\n     * @param {quat4} quat First operand\n     * @param {quat4} quat2 Second operand\n     *\n     * @return {number} Dot product of quat and quat2\n     */quat4.dot=function(quat,quat2){return quat[0]*quat2[0]+quat[1]*quat2[1]+quat[2]*quat2[2]+quat[3]*quat2[3];};/**\n     * Calculates the inverse of a quat4\n     *\n     * @param {quat4} quat quat4 to calculate inverse of\n     * @param {quat4} [dest] quat4 receiving inverse values. If not specified result is written to quat\n     *\n     * @returns {quat4} dest if specified, quat otherwise\n     */quat4.inverse=function(quat,dest){var q0=quat[0],q1=quat[1],q2=quat[2],q3=quat[3],dot=q0*q0+q1*q1+q2*q2+q3*q3,invDot=dot?1.0/dot:0;// TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\nif(!dest||quat===dest){quat[0]*=-invDot;quat[1]*=-invDot;quat[2]*=-invDot;quat[3]*=invDot;return quat;}dest[0]=-quat[0]*invDot;dest[1]=-quat[1]*invDot;dest[2]=-quat[2]*invDot;dest[3]=quat[3]*invDot;return dest;};/**\n     * Calculates the conjugate of a quat4\n     * If the quaternion is normalized, this function is faster than quat4.inverse and produces the same result.\n     *\n     * @param {quat4} quat quat4 to calculate conjugate of\n     * @param {quat4} [dest] quat4 receiving conjugate values. If not specified result is written to quat\n     *\n     * @returns {quat4} dest if specified, quat otherwise\n     */quat4.conjugate=function(quat,dest){if(!dest||quat===dest){quat[0]*=-1;quat[1]*=-1;quat[2]*=-1;return quat;}dest[0]=-quat[0];dest[1]=-quat[1];dest[2]=-quat[2];dest[3]=quat[3];return dest;};/**\n     * Calculates the length of a quat4\n     *\n     * Params:\n     * @param {quat4} quat quat4 to calculate length of\n     *\n     * @returns Length of quat\n     */quat4.length=function(quat){var x=quat[0],y=quat[1],z=quat[2],w=quat[3];return Math.sqrt(x*x+y*y+z*z+w*w);};/**\n     * Generates a unit quaternion of the same direction as the provided quat4\n     * If quaternion length is 0, returns [0, 0, 0, 0]\n     *\n     * @param {quat4} quat quat4 to normalize\n     * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat\n     *\n     * @returns {quat4} dest if specified, quat otherwise\n     */quat4.normalize=function(quat,dest){if(!dest){dest=quat;}var x=quat[0],y=quat[1],z=quat[2],w=quat[3],len=Math.sqrt(x*x+y*y+z*z+w*w);if(len===0){dest[0]=0;dest[1]=0;dest[2]=0;dest[3]=0;return dest;}len=1/len;dest[0]=x*len;dest[1]=y*len;dest[2]=z*len;dest[3]=w*len;return dest;};/**\n     * Performs quaternion addition\n     *\n     * @param {quat4} quat First operand\n     * @param {quat4} quat2 Second operand\n     * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat\n     *\n     * @returns {quat4} dest if specified, quat otherwise\n     */quat4.add=function(quat,quat2,dest){if(!dest||quat===dest){quat[0]+=quat2[0];quat[1]+=quat2[1];quat[2]+=quat2[2];quat[3]+=quat2[3];return quat;}dest[0]=quat[0]+quat2[0];dest[1]=quat[1]+quat2[1];dest[2]=quat[2]+quat2[2];dest[3]=quat[3]+quat2[3];return dest;};/**\n     * Performs a quaternion multiplication\n     *\n     * @param {quat4} quat First operand\n     * @param {quat4} quat2 Second operand\n     * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat\n     *\n     * @returns {quat4} dest if specified, quat otherwise\n     */quat4.multiply=function(quat,quat2,dest){if(!dest){dest=quat;}var qax=quat[0],qay=quat[1],qaz=quat[2],qaw=quat[3],qbx=quat2[0],qby=quat2[1],qbz=quat2[2],qbw=quat2[3];dest[0]=qax*qbw+qaw*qbx+qay*qbz-qaz*qby;dest[1]=qay*qbw+qaw*qby+qaz*qbx-qax*qbz;dest[2]=qaz*qbw+qaw*qbz+qax*qby-qay*qbx;dest[3]=qaw*qbw-qax*qbx-qay*qby-qaz*qbz;return dest;};/**\n     * Transforms a vec3 with the given quaternion\n     *\n     * @param {quat4} quat quat4 to transform the vector with\n     * @param {vec3} vec vec3 to transform\n     * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n     *\n     * @returns dest if specified, vec otherwise\n     */quat4.multiplyVec3=function(quat,vec,dest){if(!dest){dest=vec;}var x=vec[0],y=vec[1],z=vec[2],qx=quat[0],qy=quat[1],qz=quat[2],qw=quat[3],// calculate quat * vec\nix=qw*x+qy*z-qz*y,iy=qw*y+qz*x-qx*z,iz=qw*z+qx*y-qy*x,iw=-qx*x-qy*y-qz*z;// calculate result * inverse quat\ndest[0]=ix*qw+iw*-qx+iy*-qz-iz*-qy;dest[1]=iy*qw+iw*-qy+iz*-qx-ix*-qz;dest[2]=iz*qw+iw*-qz+ix*-qy-iy*-qx;return dest;};/**\n     * Multiplies the components of a quaternion by a scalar value\n     *\n     * @param {quat4} quat to scale\n     * @param {number} val Value to scale by\n     * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat\n     *\n     * @returns {quat4} dest if specified, quat otherwise\n     */quat4.scale=function(quat,val,dest){if(!dest||quat===dest){quat[0]*=val;quat[1]*=val;quat[2]*=val;quat[3]*=val;return quat;}dest[0]=quat[0]*val;dest[1]=quat[1]*val;dest[2]=quat[2]*val;dest[3]=quat[3]*val;return dest;};/**\n     * Calculates a 3x3 matrix from the given quat4\n     *\n     * @param {quat4} quat quat4 to create matrix from\n     * @param {mat3} [dest] mat3 receiving operation result\n     *\n     * @returns {mat3} dest if specified, a new mat3 otherwise\n     */quat4.toMat3=function(quat,dest){if(!dest){dest=mat3.create();}var x=quat[0],y=quat[1],z=quat[2],w=quat[3],x2=x+x,y2=y+y,z2=z+z,xx=x*x2,xy=x*y2,xz=x*z2,yy=y*y2,yz=y*z2,zz=z*z2,wx=w*x2,wy=w*y2,wz=w*z2;dest[0]=1-(yy+zz);dest[1]=xy+wz;dest[2]=xz-wy;dest[3]=xy-wz;dest[4]=1-(xx+zz);dest[5]=yz+wx;dest[6]=xz+wy;dest[7]=yz-wx;dest[8]=1-(xx+yy);return dest;};/**\n     * Calculates a 4x4 matrix from the given quat4\n     *\n     * @param {quat4} quat quat4 to create matrix from\n     * @param {mat4} [dest] mat4 receiving operation result\n     *\n     * @returns {mat4} dest if specified, a new mat4 otherwise\n     */quat4.toMat4=function(quat,dest){if(!dest){dest=mat4.create();}var x=quat[0],y=quat[1],z=quat[2],w=quat[3],x2=x+x,y2=y+y,z2=z+z,xx=x*x2,xy=x*y2,xz=x*z2,yy=y*y2,yz=y*z2,zz=z*z2,wx=w*x2,wy=w*y2,wz=w*z2;dest[0]=1-(yy+zz);dest[1]=xy+wz;dest[2]=xz-wy;dest[3]=0;dest[4]=xy-wz;dest[5]=1-(xx+zz);dest[6]=yz+wx;dest[7]=0;dest[8]=xz+wy;dest[9]=yz-wx;dest[10]=1-(xx+yy);dest[11]=0;dest[12]=0;dest[13]=0;dest[14]=0;dest[15]=1;return dest;};/**\n     * Performs a spherical linear interpolation between two quat4\n     *\n     * @param {quat4} quat First quaternion\n     * @param {quat4} quat2 Second quaternion\n     * @param {number} slerp Interpolation amount between the two inputs\n     * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat\n     *\n     * @returns {quat4} dest if specified, quat otherwise\n     */quat4.slerp=function(quat,quat2,slerp,dest){if(!dest){dest=quat;}var cosHalfTheta=quat[0]*quat2[0]+quat[1]*quat2[1]+quat[2]*quat2[2]+quat[3]*quat2[3],halfTheta,sinHalfTheta,ratioA,ratioB;if(Math.abs(cosHalfTheta)>=1.0){if(dest!==quat){dest[0]=quat[0];dest[1]=quat[1];dest[2]=quat[2];dest[3]=quat[3];}return dest;}halfTheta=Math.acos(cosHalfTheta);sinHalfTheta=Math.sqrt(1.0-cosHalfTheta*cosHalfTheta);if(Math.abs(sinHalfTheta)<0.001){dest[0]=quat[0]*0.5+quat2[0]*0.5;dest[1]=quat[1]*0.5+quat2[1]*0.5;dest[2]=quat[2]*0.5+quat2[2]*0.5;dest[3]=quat[3]*0.5+quat2[3]*0.5;return dest;}ratioA=Math.sin((1-slerp)*halfTheta)/sinHalfTheta;ratioB=Math.sin(slerp*halfTheta)/sinHalfTheta;dest[0]=quat[0]*ratioA+quat2[0]*ratioB;dest[1]=quat[1]*ratioA+quat2[1]*ratioB;dest[2]=quat[2]*ratioA+quat2[2]*ratioB;dest[3]=quat[3]*ratioA+quat2[3]*ratioB;return dest;};/**\n     * Creates a quaternion from the given 3x3 rotation matrix.\n     * If dest is omitted, a new quaternion will be created.\n     *\n     * @param {mat3}  mat    the rotation matrix\n     * @param {quat4} [dest] an optional receiving quaternion\n     *\n     * @returns {quat4} the quaternion constructed from the rotation matrix\n     *\n     */quat4.fromRotationMatrix=function(mat,dest){if(!dest)dest=quat4.create();// Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n// article \"Quaternion Calculus and Fast Animation\".\nvar fTrace=mat[0]+mat[4]+mat[8];var fRoot;if(fTrace>0.0){// |w| > 1/2, may as well choose w > 1/2\nfRoot=Math.sqrt(fTrace+1.0);// 2w\ndest[3]=0.5*fRoot;fRoot=0.5/fRoot;// 1/(4w)\ndest[0]=(mat[7]-mat[5])*fRoot;dest[1]=(mat[2]-mat[6])*fRoot;dest[2]=(mat[3]-mat[1])*fRoot;}else{// |w| <= 1/2\nvar s_iNext=quat4.fromRotationMatrix.s_iNext=quat4.fromRotationMatrix.s_iNext||[1,2,0];var i=0;if(mat[4]>mat[0])i=1;if(mat[8]>mat[i*3+i])i=2;var j=s_iNext[i];var k=s_iNext[j];fRoot=Math.sqrt(mat[i*3+i]-mat[j*3+j]-mat[k*3+k]+1.0);dest[i]=0.5*fRoot;fRoot=0.5/fRoot;dest[3]=(mat[k*3+j]-mat[j*3+k])*fRoot;dest[j]=(mat[j*3+i]+mat[i*3+j])*fRoot;dest[k]=(mat[k*3+i]+mat[i*3+k])*fRoot;}return dest;};/**\n     * Alias. See the description for quat4.fromRotationMatrix().\n     */mat3.toQuat4=quat4.fromRotationMatrix;(function(){var mat=mat3.create();/**\n         * Creates a quaternion from the 3 given vectors. They must be perpendicular\n         * to one another and represent the X, Y and Z axes.\n         *\n         * If dest is omitted, a new quat4 will be created.\n         *\n         * Example: The default OpenGL orientation has a view vector [0, 0, -1],\n         * right vector [1, 0, 0], and up vector [0, 1, 0]. A quaternion representing\n         * this orientation could be constructed with:\n         *\n         *   quat = quat4.fromAxes([0, 0, -1], [1, 0, 0], [0, 1, 0], quat4.create());\n         *\n         * @param {vec3}  view   the view vector, or direction the object is pointing in\n         * @param {vec3}  right  the right vector, or direction to the \"right\" of the object\n         * @param {vec3}  up     the up vector, or direction towards the object's \"up\"\n         * @param {quat4} [dest] an optional receiving quat4\n         *\n         * @returns {quat4} dest\n         **/quat4.fromAxes=function(view,right,up,dest){mat[0]=right[0];mat[3]=right[1];mat[6]=right[2];mat[1]=up[0];mat[4]=up[1];mat[7]=up[2];mat[2]=view[0];mat[5]=view[1];mat[8]=view[2];return quat4.fromRotationMatrix(mat,dest);};})();/**\n     * Sets a quat4 to the Identity and returns it.\n     *\n     * @param {quat4} [dest] quat4 to set. If omitted, a\n     * new quat4 will be created.\n     *\n     * @returns {quat4} dest\n     */quat4.identity=function(dest){if(!dest)dest=quat4.create();dest[0]=0;dest[1]=0;dest[2]=0;dest[3]=1;return dest;};/**\n     * Sets a quat4 from the given angle and rotation axis,\n     * then returns it. If dest is not given, a new quat4 is created.\n     *\n     * @param {Number} angle  the angle in radians\n     * @param {vec3}   axis   the axis around which to rotate\n     * @param {quat4}  [dest] the optional quat4 to store the result\n     *\n     * @returns {quat4} dest\n     **/quat4.fromAngleAxis=function(angle,axis,dest){// The quaternion representing the rotation is\n//   q = cos(A/2)+sin(A/2)*(x*i+y*j+z*k)\nif(!dest)dest=quat4.create();var half=angle*0.5;var s=Math.sin(half);dest[3]=Math.cos(half);dest[0]=s*axis[0];dest[1]=s*axis[1];dest[2]=s*axis[2];return dest;};/**\n     * Stores the angle and axis in a vec4, where the XYZ components represent\n     * the axis and the W (4th) component is the angle in radians.\n     *\n     * If dest is not given, src will be modified in place and returned, after\n     * which it should not be considered not a quaternion (just an axis and angle).\n     *\n     * @param {quat4} quat   the quaternion whose angle and axis to store\n     * @param {vec4}  [dest] the optional vec4 to receive the data\n     *\n     * @returns {vec4} dest\n     */quat4.toAngleAxis=function(src,dest){if(!dest)dest=src;// The quaternion representing the rotation is\n//   q = cos(A/2)+sin(A/2)*(x*i+y*j+z*k)\nvar sqrlen=src[0]*src[0]+src[1]*src[1]+src[2]*src[2];if(sqrlen>0){dest[3]=2*Math.acos(src[3]);var invlen=glMath.invsqrt(sqrlen);dest[0]=src[0]*invlen;dest[1]=src[1]*invlen;dest[2]=src[2]*invlen;}else{// angle is 0 (mod 2*pi), so any axis will do\ndest[3]=0;dest[0]=1;dest[1]=0;dest[2]=0;}return dest;};/**\n     * Returns a string representation of a quaternion\n     *\n     * @param {quat4} quat quat4 to represent as a string\n     *\n     * @returns {string} String representation of quat\n     */quat4.str=function(quat){return'['+quat[0]+', '+quat[1]+', '+quat[2]+', '+quat[3]+']';};/**\n     * @class 2 Dimensional Vector\n     * @name vec2\n     */var vec2={};/**\n     * Creates a new vec2, initializing it from vec if vec\n     * is given.\n     *\n     * @param {vec2} [vec] the vector's initial contents\n     * @returns {vec2} a new 2D vector\n     */vec2.create=function(vec){var dest=new MatrixArray(2);if(vec){dest[0]=vec[0];dest[1]=vec[1];}else{dest[0]=0;dest[1]=0;}return dest;};/**\n     * Creates a new instance of a vec2, initializing it with the given arguments\n     *\n     * @param {number} x X value\n     * @param {number} y Y value\n\n     * @returns {vec2} New vec2\n     */vec2.createFrom=function(x,y){var dest=new MatrixArray(2);dest[0]=x;dest[1]=y;return dest;};/**\n     * Adds the vec2's together. If dest is given, the result\n     * is stored there. Otherwise, the result is stored in vecB.\n     *\n     * @param {vec2} vecA the first operand\n     * @param {vec2} vecB the second operand\n     * @param {vec2} [dest] the optional receiving vector\n     * @returns {vec2} dest\n     */vec2.add=function(vecA,vecB,dest){if(!dest)dest=vecB;dest[0]=vecA[0]+vecB[0];dest[1]=vecA[1]+vecB[1];return dest;};/**\n     * Subtracts vecB from vecA. If dest is given, the result\n     * is stored there. Otherwise, the result is stored in vecB.\n     *\n     * @param {vec2} vecA the first operand\n     * @param {vec2} vecB the second operand\n     * @param {vec2} [dest] the optional receiving vector\n     * @returns {vec2} dest\n     */vec2.subtract=function(vecA,vecB,dest){if(!dest)dest=vecB;dest[0]=vecA[0]-vecB[0];dest[1]=vecA[1]-vecB[1];return dest;};/**\n     * Multiplies vecA with vecB. If dest is given, the result\n     * is stored there. Otherwise, the result is stored in vecB.\n     *\n     * @param {vec2} vecA the first operand\n     * @param {vec2} vecB the second operand\n     * @param {vec2} [dest] the optional receiving vector\n     * @returns {vec2} dest\n     */vec2.multiply=function(vecA,vecB,dest){if(!dest)dest=vecB;dest[0]=vecA[0]*vecB[0];dest[1]=vecA[1]*vecB[1];return dest;};/**\n     * Divides vecA by vecB. If dest is given, the result\n     * is stored there. Otherwise, the result is stored in vecB.\n     *\n     * @param {vec2} vecA the first operand\n     * @param {vec2} vecB the second operand\n     * @param {vec2} [dest] the optional receiving vector\n     * @returns {vec2} dest\n     */vec2.divide=function(vecA,vecB,dest){if(!dest)dest=vecB;dest[0]=vecA[0]/vecB[0];dest[1]=vecA[1]/vecB[1];return dest;};/**\n     * Scales vecA by some scalar number. If dest is given, the result\n     * is stored there. Otherwise, the result is stored in vecA.\n     *\n     * This is the same as multiplying each component of vecA\n     * by the given scalar.\n     *\n     * @param {vec2}   vecA the vector to be scaled\n     * @param {Number} scalar the amount to scale the vector by\n     * @param {vec2}   [dest] the optional receiving vector\n     * @returns {vec2} dest\n     */vec2.scale=function(vecA,scalar,dest){if(!dest)dest=vecA;dest[0]=vecA[0]*scalar;dest[1]=vecA[1]*scalar;return dest;};/**\n     * Calculates the euclidian distance between two vec2\n     *\n     * Params:\n     * @param {vec2} vecA First vector\n     * @param {vec2} vecB Second vector\n     *\n     * @returns {number} Distance between vecA and vecB\n     */vec2.dist=function(vecA,vecB){var x=vecB[0]-vecA[0],y=vecB[1]-vecA[1];return Math.sqrt(x*x+y*y);};/**\n     * Copies the values of one vec2 to another\n     *\n     * @param {vec2} vec vec2 containing values to copy\n     * @param {vec2} dest vec2 receiving copied values\n     *\n     * @returns {vec2} dest\n     */vec2.set=function(vec,dest){dest[0]=vec[0];dest[1]=vec[1];return dest;};/**\n     * Compares two vectors for equality within a certain margin of error\n     *\n     * @param {vec2} a First vector\n     * @param {vec2} b Second vector\n     *\n     * @returns {Boolean} True if a is equivalent to b\n     */vec2.equal=function(a,b){return a===b||Math.abs(a[0]-b[0])<FLOAT_EPSILON&&Math.abs(a[1]-b[1])<FLOAT_EPSILON;};/**\n     * Negates the components of a vec2\n     *\n     * @param {vec2} vec vec2 to negate\n     * @param {vec2} [dest] vec2 receiving operation result. If not specified result is written to vec\n     *\n     * @returns {vec2} dest if specified, vec otherwise\n     */vec2.negate=function(vec,dest){if(!dest){dest=vec;}dest[0]=-vec[0];dest[1]=-vec[1];return dest;};/**\n     * Normlize a vec2\n     *\n     * @param {vec2} vec vec2 to normalize\n     * @param {vec2} [dest] vec2 receiving operation result. If not specified result is written to vec\n     *\n     * @returns {vec2} dest if specified, vec otherwise\n     */vec2.normalize=function(vec,dest){if(!dest){dest=vec;}var mag=vec[0]*vec[0]+vec[1]*vec[1];if(mag>0){mag=Math.sqrt(mag);dest[0]=vec[0]/mag;dest[1]=vec[1]/mag;}else{dest[0]=dest[1]=0;}return dest;};/**\n     * Computes the cross product of two vec2's. Note that the cross product must by definition\n     * produce a 3D vector. If a dest vector is given, it will contain the resultant 3D vector.\n     * Otherwise, a scalar number will be returned, representing the vector's Z coordinate, since\n     * its X and Y must always equal 0.\n     *\n     * Examples:\n     *    var crossResult = vec3.create();\n     *    vec2.cross([1, 2], [3, 4], crossResult);\n     *    //=> [0, 0, -2]\n     *\n     *    vec2.cross([1, 2], [3, 4]);\n     *    //=> -2\n     *\n     * See http://stackoverflow.com/questions/243945/calculating-a-2d-vectors-cross-product\n     * for some interesting facts.\n     *\n     * @param {vec2} vecA left operand\n     * @param {vec2} vecB right operand\n     * @param {vec2} [dest] optional vec2 receiving result. If not specified a scalar is returned\n     *\n     */vec2.cross=function(vecA,vecB,dest){var z=vecA[0]*vecB[1]-vecA[1]*vecB[0];if(!dest)return z;dest[0]=dest[1]=0;dest[2]=z;return dest;};/**\n     * Caclulates the length of a vec2\n     *\n     * @param {vec2} vec vec2 to calculate length of\n     *\n     * @returns {Number} Length of vec\n     */vec2.length=function(vec){var x=vec[0],y=vec[1];return Math.sqrt(x*x+y*y);};/**\n     * Caclulates the squared length of a vec2\n     *\n     * @param {vec2} vec vec2 to calculate squared length of\n     *\n     * @returns {Number} Squared Length of vec\n     */vec2.squaredLength=function(vec){var x=vec[0],y=vec[1];return x*x+y*y;};/**\n     * Caclulates the dot product of two vec2s\n     *\n     * @param {vec2} vecA First operand\n     * @param {vec2} vecB Second operand\n     *\n     * @returns {Number} Dot product of vecA and vecB\n     */vec2.dot=function(vecA,vecB){return vecA[0]*vecB[0]+vecA[1]*vecB[1];};/**\n     * Generates a 2D unit vector pointing from one vector to another\n     *\n     * @param {vec2} vecA Origin vec2\n     * @param {vec2} vecB vec2 to point to\n     * @param {vec2} [dest] vec2 receiving operation result. If not specified result is written to vecA\n     *\n     * @returns {vec2} dest if specified, vecA otherwise\n     */vec2.direction=function(vecA,vecB,dest){if(!dest){dest=vecA;}var x=vecA[0]-vecB[0],y=vecA[1]-vecB[1],len=x*x+y*y;if(!len){dest[0]=0;dest[1]=0;dest[2]=0;return dest;}len=1/Math.sqrt(len);dest[0]=x*len;dest[1]=y*len;return dest;};/**\n     * Performs a linear interpolation between two vec2\n     *\n     * @param {vec2} vecA First vector\n     * @param {vec2} vecB Second vector\n     * @param {Number} lerp Interpolation amount between the two inputs\n     * @param {vec2} [dest] vec2 receiving operation result. If not specified result is written to vecA\n     *\n     * @returns {vec2} dest if specified, vecA otherwise\n     */vec2.lerp=function(vecA,vecB,lerp,dest){if(!dest){dest=vecA;}dest[0]=vecA[0]+lerp*(vecB[0]-vecA[0]);dest[1]=vecA[1]+lerp*(vecB[1]-vecA[1]);return dest;};/**\n     * Returns a string representation of a vector\n     *\n     * @param {vec2} vec Vector to represent as a string\n     *\n     * @returns {String} String representation of vec\n     */vec2.str=function(vec){return'['+vec[0]+', '+vec[1]+']';};/**\n     * @class 2x2 Matrix\n     * @name mat2\n     */var mat2={};/**\n     * Creates a new 2x2 matrix. If src is given, the new matrix\n     * is initialized to those values.\n     *\n     * @param {mat2} [src] the seed values for the new matrix, if any\n     * @returns {mat2} a new matrix\n     */mat2.create=function(src){var dest=new MatrixArray(4);if(src){dest[0]=src[0];dest[1]=src[1];dest[2]=src[2];dest[3]=src[3];}else{dest[0]=dest[1]=dest[2]=dest[3]=0;}return dest;};/**\n     * Creates a new instance of a mat2, initializing it with the given arguments\n     *\n     * @param {number} m00\n     * @param {number} m01\n     * @param {number} m10\n     * @param {number} m11\n\n     * @returns {mat2} New mat2\n     */mat2.createFrom=function(m00,m01,m10,m11){var dest=new MatrixArray(4);dest[0]=m00;dest[1]=m01;dest[2]=m10;dest[3]=m11;return dest;};/**\n     * Copies the values of one mat2 to another\n     *\n     * @param {mat2} mat mat2 containing values to copy\n     * @param {mat2} dest mat2 receiving copied values\n     *\n     * @returns {mat2} dest\n     */mat2.set=function(mat,dest){dest[0]=mat[0];dest[1]=mat[1];dest[2]=mat[2];dest[3]=mat[3];return dest;};/**\n     * Compares two matrices for equality within a certain margin of error\n     *\n     * @param {mat2} a First matrix\n     * @param {mat2} b Second matrix\n     *\n     * @returns {Boolean} True if a is equivalent to b\n     */mat2.equal=function(a,b){return a===b||Math.abs(a[0]-b[0])<FLOAT_EPSILON&&Math.abs(a[1]-b[1])<FLOAT_EPSILON&&Math.abs(a[2]-b[2])<FLOAT_EPSILON&&Math.abs(a[3]-b[3])<FLOAT_EPSILON;};/**\n     * Sets a mat2 to an identity matrix\n     *\n     * @param {mat2} [dest] mat2 to set. If omitted a new one will be created.\n     *\n     * @returns {mat2} dest\n     */mat2.identity=function(dest){if(!dest){dest=mat2.create();}dest[0]=1;dest[1]=0;dest[2]=0;dest[3]=1;return dest;};/**\n     * Transposes a mat2 (flips the values over the diagonal)\n     *\n     * @param {mat2} mat mat2 to transpose\n     * @param {mat2} [dest] mat2 receiving transposed values. If not specified result is written to mat\n     *\n     * @param {mat2} dest if specified, mat otherwise\n     */mat2.transpose=function(mat,dest){// If we are transposing ourselves we can skip a few steps but have to cache some values\nif(!dest||mat===dest){var a00=mat[1];mat[1]=mat[2];mat[2]=a00;return mat;}dest[0]=mat[0];dest[1]=mat[2];dest[2]=mat[1];dest[3]=mat[3];return dest;};/**\n     * Calculates the determinant of a mat2\n     *\n     * @param {mat2} mat mat2 to calculate determinant of\n     *\n     * @returns {Number} determinant of mat\n     */mat2.determinant=function(mat){return mat[0]*mat[3]-mat[2]*mat[1];};/**\n     * Calculates the inverse matrix of a mat2\n     *\n     * @param {mat2} mat mat2 to calculate inverse of\n     * @param {mat2} [dest] mat2 receiving inverse matrix. If not specified result is written to mat\n     *\n     * @param {mat2} dest is specified, mat otherwise, null if matrix cannot be inverted\n     */mat2.inverse=function(mat,dest){if(!dest){dest=mat;}var a0=mat[0],a1=mat[1],a2=mat[2],a3=mat[3];var det=a0*a3-a2*a1;if(!det)return null;det=1.0/det;dest[0]=a3*det;dest[1]=-a1*det;dest[2]=-a2*det;dest[3]=a0*det;return dest;};/**\n     * Performs a matrix multiplication\n     *\n     * @param {mat2} matA First operand\n     * @param {mat2} matB Second operand\n     * @param {mat2} [dest] mat2 receiving operation result. If not specified result is written to matA\n     *\n     * @returns {mat2} dest if specified, matA otherwise\n     */mat2.multiply=function(matA,matB,dest){if(!dest){dest=matA;}var a11=matA[0],a12=matA[1],a21=matA[2],a22=matA[3];dest[0]=a11*matB[0]+a12*matB[2];dest[1]=a11*matB[1]+a12*matB[3];dest[2]=a21*matB[0]+a22*matB[2];dest[3]=a21*matB[1]+a22*matB[3];return dest;};/**\n     * Rotates a 2x2 matrix by an angle\n     *\n     * @param {mat2}   mat   The matrix to rotate\n     * @param {Number} angle The angle in radians\n     * @param {mat2} [dest]  Optional mat2 receiving the result. If omitted mat will be used.\n     *\n     * @returns {mat2} dest if specified, mat otherwise\n     */mat2.rotate=function(mat,angle,dest){if(!dest){dest=mat;}var a11=mat[0],a12=mat[1],a21=mat[2],a22=mat[3],s=Math.sin(angle),c=Math.cos(angle);dest[0]=a11*c+a12*s;dest[1]=a11*-s+a12*c;dest[2]=a21*c+a22*s;dest[3]=a21*-s+a22*c;return dest;};/**\n     * Multiplies the vec2 by the given 2x2 matrix\n     *\n     * @param {mat2} matrix the 2x2 matrix to multiply against\n     * @param {vec2} vec    the vector to multiply\n     * @param {vec2} [dest] an optional receiving vector. If not given, vec is used.\n     *\n     * @returns {vec2} The multiplication result\n     **/mat2.multiplyVec2=function(matrix,vec,dest){if(!dest)dest=vec;var x=vec[0],y=vec[1];dest[0]=x*matrix[0]+y*matrix[1];dest[1]=x*matrix[2]+y*matrix[3];return dest;};/**\n     * Scales the mat2 by the dimensions in the given vec2\n     *\n     * @param {mat2} matrix the 2x2 matrix to scale\n     * @param {vec2} vec    the vector containing the dimensions to scale by\n     * @param {vec2} [dest] an optional receiving mat2. If not given, matrix is used.\n     *\n     * @returns {mat2} dest if specified, matrix otherwise\n     **/mat2.scale=function(matrix,vec,dest){if(!dest){dest=matrix;}var a11=matrix[0],a12=matrix[1],a21=matrix[2],a22=matrix[3],b11=vec[0],b22=vec[1];dest[0]=a11*b11;dest[1]=a12*b22;dest[2]=a21*b11;dest[3]=a22*b22;return dest;};/**\n     * Returns a string representation of a mat2\n     *\n     * @param {mat2} mat mat2 to represent as a string\n     *\n     * @param {String} String representation of mat\n     */mat2.str=function(mat){return'['+mat[0]+', '+mat[1]+', '+mat[2]+', '+mat[3]+']';};/**\n     * @class 4 Dimensional Vector\n     * @name vec4\n     */var vec4={};/**\n     * Creates a new vec4, initializing it from vec if vec\n     * is given.\n     *\n     * @param {vec4} [vec] the vector's initial contents\n     * @returns {vec4} a new 2D vector\n     */vec4.create=function(vec){var dest=new MatrixArray(4);if(vec){dest[0]=vec[0];dest[1]=vec[1];dest[2]=vec[2];dest[3]=vec[3];}else{dest[0]=0;dest[1]=0;dest[2]=0;dest[3]=0;}return dest;};/**\n     * Creates a new instance of a vec4, initializing it with the given arguments\n     *\n     * @param {number} x X value\n     * @param {number} y Y value\n     * @param {number} z Z value\n     * @param {number} w W value\n\n     * @returns {vec4} New vec4\n     */vec4.createFrom=function(x,y,z,w){var dest=new MatrixArray(4);dest[0]=x;dest[1]=y;dest[2]=z;dest[3]=w;return dest;};/**\n     * Adds the vec4's together. If dest is given, the result\n     * is stored there. Otherwise, the result is stored in vecB.\n     *\n     * @param {vec4} vecA the first operand\n     * @param {vec4} vecB the second operand\n     * @param {vec4} [dest] the optional receiving vector\n     * @returns {vec4} dest\n     */vec4.add=function(vecA,vecB,dest){if(!dest)dest=vecB;dest[0]=vecA[0]+vecB[0];dest[1]=vecA[1]+vecB[1];dest[2]=vecA[2]+vecB[2];dest[3]=vecA[3]+vecB[3];return dest;};/**\n     * Subtracts vecB from vecA. If dest is given, the result\n     * is stored there. Otherwise, the result is stored in vecB.\n     *\n     * @param {vec4} vecA the first operand\n     * @param {vec4} vecB the second operand\n     * @param {vec4} [dest] the optional receiving vector\n     * @returns {vec4} dest\n     */vec4.subtract=function(vecA,vecB,dest){if(!dest)dest=vecB;dest[0]=vecA[0]-vecB[0];dest[1]=vecA[1]-vecB[1];dest[2]=vecA[2]-vecB[2];dest[3]=vecA[3]-vecB[3];return dest;};/**\n     * Multiplies vecA with vecB. If dest is given, the result\n     * is stored there. Otherwise, the result is stored in vecB.\n     *\n     * @param {vec4} vecA the first operand\n     * @param {vec4} vecB the second operand\n     * @param {vec4} [dest] the optional receiving vector\n     * @returns {vec4} dest\n     */vec4.multiply=function(vecA,vecB,dest){if(!dest)dest=vecB;dest[0]=vecA[0]*vecB[0];dest[1]=vecA[1]*vecB[1];dest[2]=vecA[2]*vecB[2];dest[3]=vecA[3]*vecB[3];return dest;};/**\n     * Divides vecA by vecB. If dest is given, the result\n     * is stored there. Otherwise, the result is stored in vecB.\n     *\n     * @param {vec4} vecA the first operand\n     * @param {vec4} vecB the second operand\n     * @param {vec4} [dest] the optional receiving vector\n     * @returns {vec4} dest\n     */vec4.divide=function(vecA,vecB,dest){if(!dest)dest=vecB;dest[0]=vecA[0]/vecB[0];dest[1]=vecA[1]/vecB[1];dest[2]=vecA[2]/vecB[2];dest[3]=vecA[3]/vecB[3];return dest;};/**\n     * Scales vecA by some scalar number. If dest is given, the result\n     * is stored there. Otherwise, the result is stored in vecA.\n     *\n     * This is the same as multiplying each component of vecA\n     * by the given scalar.\n     *\n     * @param {vec4}   vecA the vector to be scaled\n     * @param {Number} scalar the amount to scale the vector by\n     * @param {vec4}   [dest] the optional receiving vector\n     * @returns {vec4} dest\n     */vec4.scale=function(vecA,scalar,dest){if(!dest)dest=vecA;dest[0]=vecA[0]*scalar;dest[1]=vecA[1]*scalar;dest[2]=vecA[2]*scalar;dest[3]=vecA[3]*scalar;return dest;};/**\n     * Copies the values of one vec4 to another\n     *\n     * @param {vec4} vec vec4 containing values to copy\n     * @param {vec4} dest vec4 receiving copied values\n     *\n     * @returns {vec4} dest\n     */vec4.set=function(vec,dest){dest[0]=vec[0];dest[1]=vec[1];dest[2]=vec[2];dest[3]=vec[3];return dest;};/**\n     * Compares two vectors for equality within a certain margin of error\n     *\n     * @param {vec4} a First vector\n     * @param {vec4} b Second vector\n     *\n     * @returns {Boolean} True if a is equivalent to b\n     */vec4.equal=function(a,b){return a===b||Math.abs(a[0]-b[0])<FLOAT_EPSILON&&Math.abs(a[1]-b[1])<FLOAT_EPSILON&&Math.abs(a[2]-b[2])<FLOAT_EPSILON&&Math.abs(a[3]-b[3])<FLOAT_EPSILON;};/**\n     * Negates the components of a vec4\n     *\n     * @param {vec4} vec vec4 to negate\n     * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec\n     *\n     * @returns {vec4} dest if specified, vec otherwise\n     */vec4.negate=function(vec,dest){if(!dest){dest=vec;}dest[0]=-vec[0];dest[1]=-vec[1];dest[2]=-vec[2];dest[3]=-vec[3];return dest;};/**\n     * Caclulates the length of a vec2\n     *\n     * @param {vec2} vec vec2 to calculate length of\n     *\n     * @returns {Number} Length of vec\n     */vec4.length=function(vec){var x=vec[0],y=vec[1],z=vec[2],w=vec[3];return Math.sqrt(x*x+y*y+z*z+w*w);};/**\n     * Caclulates the squared length of a vec4\n     *\n     * @param {vec4} vec vec4 to calculate squared length of\n     *\n     * @returns {Number} Squared Length of vec\n     */vec4.squaredLength=function(vec){var x=vec[0],y=vec[1],z=vec[2],w=vec[3];return x*x+y*y+z*z+w*w;};/**\n     * Performs a linear interpolation between two vec4\n     *\n     * @param {vec4} vecA First vector\n     * @param {vec4} vecB Second vector\n     * @param {Number} lerp Interpolation amount between the two inputs\n     * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vecA\n     *\n     * @returns {vec4} dest if specified, vecA otherwise\n     */vec4.lerp=function(vecA,vecB,lerp,dest){if(!dest){dest=vecA;}dest[0]=vecA[0]+lerp*(vecB[0]-vecA[0]);dest[1]=vecA[1]+lerp*(vecB[1]-vecA[1]);dest[2]=vecA[2]+lerp*(vecB[2]-vecA[2]);dest[3]=vecA[3]+lerp*(vecB[3]-vecA[3]);return dest;};/**\n     * Returns a string representation of a vector\n     *\n     * @param {vec4} vec Vector to represent as a string\n     *\n     * @returns {String} String representation of vec\n     */vec4.str=function(vec){return'['+vec[0]+', '+vec[1]+', '+vec[2]+', '+vec[3]+']';};/*\n     * Exports\n     */if(root){root.glMatrixArrayType=MatrixArray;root.MatrixArray=MatrixArray;root.setMatrixArrayType=setMatrixArrayType;root.determineMatrixArrayType=determineMatrixArrayType;root.glMath=glMath;root.vec2=vec2;root.vec3=vec3;root.vec4=vec4;root.mat2=mat2;root.mat3=mat3;root.mat4=mat4;root.quat4=quat4;}return{glMatrixArrayType:MatrixArray,MatrixArray:MatrixArray,setMatrixArrayType:setMatrixArrayType,determineMatrixArrayType:determineMatrixArrayType,glMath:glMath,vec2:vec2,vec3:vec3,vec4:vec4,mat2:mat2,mat3:mat3,mat4:mat4,quat4:quat4};});/**\n * jsBezier-0.5\n * \n * Copyright (c) 2010 - 2011 Simon Porritt (simon.porritt@gmail.com)\n * \n * licensed under the MIT license.\n * \n * a set of Bezier curve functions that deal with Beziers, used by jsPlumb, and\n * perhaps useful for other people. These functions work with Bezier curves of\n * arbitrary degree.\n *  - functions are all in the 'jsBezier' namespace.\n *  - all input points should be in the format {x:.., y:..}. all output points\n * are in this format too.\n *  - all input curves should be in the format [ {x:.., y:..}, {x:.., y:..},\n * {x:.., y:..}, {x:.., y:..} ]\n *  - 'location' as used as an input here refers to a decimal in the range 0-1\n * inclusive, which indicates a point some proportion along the length of the\n * curve. location as output has the same format and meaning.\n * \n * \n * Function List: --------------\n * \n * distanceFromCurve(point, curve)\n * \n * Calculates the distance that the given point lies from the given Bezier. Note\n * that it is computed relative to the center of the Bezier, so if you have\n * stroked the curve with a wide pen you may wish to take that into account! The\n * distance returned is relative to the values of the curve and the point - it\n * will most likely be pixels.\n * \n * gradientAtPoint(curve, location)\n * \n * Calculates the gradient to the curve at the given location, as a decimal\n * between 0 and 1 inclusive.\n * \n * gradientAtPointAlongCurveFrom (curve, location)\n * \n * Calculates the gradient at the point on the given curve that is 'distance'\n * units from location.\n * \n * nearestPointOnCurve(point, curve)\n * \n * Calculates the nearest point to the given point on the given curve. The\n * return value of this is a JS object literal, containing both the point's\n * coordinates and also the 'location' of the point (see above), for example: {\n * point:{x:551,y:150}, location:0.263365 }.\n * \n * pointOnCurve(curve, location)\n * \n * Calculates the coordinates of the point on the given Bezier curve at the\n * given location.\n * \n * pointAlongCurveFrom(curve, location, distance)\n * \n * Calculates the coordinates of the point on the given curve that is 'distance'\n * units from location. 'distance' should be in the same coordinate space as\n * that used to construct the Bezier curve. For an HTML Canvas usage, for\n * example, distance would be a measure of pixels.\n * \n * locationAlongCurveFrom(curve, location, distance)\n * \n * Calculates the location on the given curve that is 'distance' units from\n * location. 'distance' should be in the same coordinate space as that used to\n * construct the Bezier curve. For an HTML Canvas usage, for example, distance\n * would be a measure of pixels.\n * \n * perpendicularToCurveAt(curve, location, length, distance)\n * \n * Calculates the perpendicular to the given curve at the given location. length\n * is the length of the line you wish for (it will be centered on the point at\n * 'location'). distance is optional, and allows you to specify a point along\n * the path from the given location as the center of the perpendicular returned.\n * The return value of this is an array of two points: [ {x:...,y:...},\n * {x:...,y:...} ].\n * \n * \n */(function(lib){'use strict';function sgn(x){return x==0?0:x>0?1:-1;}var Vectors={subtract:function subtract(v1,v2){return{x:v1.x-v2.x,y:v1.y-v2.y};},dotProduct:function dotProduct(v1,v2){return v1.x*v2.x+v1.y*v2.y;},square:function square(v){return Math.sqrt(v.x*v.x+v.y*v.y);},scale:function scale(v,s){return{x:v.x*s,y:v.y*s};}},maxRecursion=64,flatnessTolerance=Math.pow(2.0,-maxRecursion-1);/**\n\t * Calculates the distance that the point lies from the curve.\n\t * \n\t * @param point\n\t *            a point in the form {x:567, y:3342}\n\t * @param curve\n\t *            a Bezier curve in the form [{x:..., y:...}, {x:..., y:...},\n\t *            {x:..., y:...}, {x:..., y:...}]. note that this is currently\n\t *            hardcoded to assume cubiz beziers, but would be better off\n\t *            supporting any degree.\n\t * @return a JS object literal containing location and distance, for\n\t *         example: {location:0.35, distance:10}. Location is analogous to\n\t *         the location argument you pass to the pointOnPath function: it is\n\t *         a ratio of distance travelled along the curve. Distance is the\n\t *         distance in pixels from the point to the curve.\n\t */var _distanceFromCurve=function _distanceFromCurve(point,curve){var candidates=[],w=_convertToBezier(point,curve),degree=curve.length-1,higherDegree=2*degree-1,numSolutions=_findRoots(w,higherDegree,candidates,0),v=Vectors.subtract(point,curve[0]),dist=Vectors.square(v),t=0.0;for(var i=0;i<numSolutions;i++){v=Vectors.subtract(point,_bezier(curve,degree,candidates[i],null,null));var newDist=Vectors.square(v);if(newDist<dist){dist=newDist;t=candidates[i];}}v=Vectors.subtract(point,curve[degree]);newDist=Vectors.square(v);if(newDist<dist){dist=newDist;t=1.0;}return{location:t,distance:dist};};/**\n\t * finds the nearest point on the curve to the given point.\n\t */var _nearestPointOnCurve=function _nearestPointOnCurve(point,curve){var td=_distanceFromCurve(point,curve);return{point:_bezier(curve,curve.length-1,td.location,null,null),location:td.location};};var _convertToBezier=function _convertToBezier(point,curve){var degree=curve.length-1,higherDegree=2*degree-1,c=[],d=[],cdTable=[],w=[],z=[[1.0,0.6,0.3,0.1],[0.4,0.6,0.6,0.4],[0.1,0.3,0.6,1.0]];for(var i=0;i<=degree;i++){c[i]=Vectors.subtract(curve[i],point);}for(var i=0;i<=degree-1;i++){d[i]=Vectors.subtract(curve[i+1],curve[i]);d[i]=Vectors.scale(d[i],3.0);}for(var row=0;row<=degree-1;row++){for(var column=0;column<=degree;column++){if(!cdTable[row])cdTable[row]=[];cdTable[row][column]=Vectors.dotProduct(d[row],c[column]);}}for(i=0;i<=higherDegree;i++){if(!w[i])w[i]=[];w[i].y=0.0;w[i].x=parseFloat(i)/higherDegree;}var n=degree,m=degree-1;for(var k=0;k<=n+m;k++){var lb=Math.max(0,k-m),ub=Math.min(k,n);for(i=lb;i<=ub;i++){var j=k-i;w[i+j].y+=cdTable[j][i]*z[j][i];}}return w;};/**\n\t * counts how many roots there are.\n\t */var _findRoots=function _findRoots(w,degree,t,depth){var left=[],right=[],left_count,right_count,left_t=[],right_t=[];switch(_getCrossingCount(w,degree)){case 0:{return 0;}case 1:{if(depth>=maxRecursion){t[0]=(w[0].x+w[degree].x)/2.0;return 1;}if(_isFlatEnough(w,degree)){t[0]=_computeXIntercept(w,degree);return 1;}break;}}_bezier(w,degree,0.5,left,right);left_count=_findRoots(left,degree,left_t,depth+1);right_count=_findRoots(right,degree,right_t,depth+1);for(var i=0;i<left_count;i++){t[i]=left_t[i];}for(var i=0;i<right_count;i++){t[i+left_count]=right_t[i];}return left_count+right_count;};var _getCrossingCount=function _getCrossingCount(curve,degree){var n_crossings=0,sign,old_sign;sign=old_sign=sgn(curve[0].y);for(var i=1;i<=degree;i++){sign=sgn(curve[i].y);if(sign!=old_sign)n_crossings++;old_sign=sign;}return n_crossings;};var _isFlatEnough=function _isFlatEnough(curve,degree){var error,intercept_1,intercept_2,left_intercept,right_intercept,a,b,c,det,dInv,a1,b1,c1,a2,b2,c2;a=curve[0].y-curve[degree].y;b=curve[degree].x-curve[0].x;c=curve[0].x*curve[degree].y-curve[degree].x*curve[0].y;var max_distance_above=0.0,max_distance_below=0.0;for(var i=1;i<degree;i++){var value=a*curve[i].x+b*curve[i].y+c;if(value>max_distance_above)max_distance_above=value;else if(value<max_distance_below)max_distance_below=value;}a1=0.0;b1=1.0;c1=0.0;a2=a;b2=b;c2=c-max_distance_above;det=a1*b2-a2*b1;dInv=1.0/det;intercept_1=(b1*c2-b2*c1)*dInv;a2=a;b2=b;c2=c-max_distance_below;det=a1*b2-a2*b1;dInv=1.0/det;intercept_2=(b1*c2-b2*c1)*dInv;left_intercept=Math.min(intercept_1,intercept_2);right_intercept=Math.max(intercept_1,intercept_2);error=right_intercept-left_intercept;return error<flatnessTolerance?1:0;};var _computeXIntercept=function _computeXIntercept(curve,degree){var XLK=1.0,YLK=0.0,XNM=curve[degree].x-curve[0].x,YNM=curve[degree].y-curve[0].y,XMK=curve[0].x-0.0,YMK=curve[0].y-0.0,det=XNM*YLK-YNM*XLK,detInv=1.0/det,S=(XNM*YMK-YNM*XMK)*detInv;return 0.0+XLK*S;};var _bezier=function _bezier(curve,degree,t,left,right){var temp=[[]];for(var j=0;j<=degree;j++){temp[0][j]=curve[j];}for(var i=1;i<=degree;i++){for(var j=0;j<=degree-i;j++){if(!temp[i])temp[i]=[];if(!temp[i][j])temp[i][j]={};temp[i][j].x=(1.0-t)*temp[i-1][j].x+t*temp[i-1][j+1].x;temp[i][j].y=(1.0-t)*temp[i-1][j].y+t*temp[i-1][j+1].y;}}if(left!=null)for(j=0;j<=degree;j++){left[j]=temp[j][0];}if(right!=null)for(j=0;j<=degree;j++){right[j]=temp[degree-j][j];}return temp[degree][0];};var _curveFunctionCache={};var _getCurveFunctions=function _getCurveFunctions(order){var fns=_curveFunctionCache[order];if(!fns){fns=[];var f_term=function f_term(){return function(t){return Math.pow(t,order);};},l_term=function l_term(){return function(t){return Math.pow(1-t,order);};},c_term=function c_term(c){return function(t){return c;};},t_term=function t_term(){return function(t){return t;};},one_minus_t_term=function one_minus_t_term(){return function(t){return 1-t;};},_termFunc=function _termFunc(terms){return function(t){var p=1;for(var i=0;i<terms.length;i++){p=p*terms[i](t);}return p;};};fns.push(new f_term());// first is t to the power of the curve\n// order\nfor(var i=1;i<order;i++){var terms=[new c_term(order)];for(var j=0;j<order-i;j++){terms.push(new t_term());}for(var j=0;j<i;j++){terms.push(new one_minus_t_term());}fns.push(new _termFunc(terms));}fns.push(new l_term());// last is (1-t) to the power of the curve\n// order\n_curveFunctionCache[order]=fns;}return fns;};/**\n\t * calculates a point on the curve, for a Bezier of arbitrary order.\n\t * \n\t * @param curve\n\t *            an array of control points, eg [{x:10,y:20}, {x:50,y:50},\n\t *            {x:100,y:100}, {x:120,y:100}]. For a cubic bezier this should\n\t *            have four points.\n\t * @param location\n\t *            a decimal indicating the distance along the curve the point\n\t *            should be located at. this is the distance along the curve as\n\t *            it travels, taking the way it bends into account. should be a\n\t *            number from 0 to 1, inclusive.\n\t */var _pointOnPath=function _pointOnPath(curve,location){var cc=_getCurveFunctions(curve.length-1),_x=0,_y=0;for(var i=0;i<curve.length;i++){_x=_x+curve[i].x*cc[i](location);_y=_y+curve[i].y*cc[i](location);}return{x:_x,y:_y};};var _dist=function _dist(p1,p2){return Math.sqrt(Math.pow(p1.x-p2.x,2)+Math.pow(p1.y-p2.y,2));};/**\n\t * finds the point that is 'distance' along the path from 'location'. this\n\t * method returns both the x,y location of the point and also its 'location'\n\t * (proportion of travel along the path); the method below -\n\t * _pointAlongPathFrom - calls this method and just returns the point.\n\t */var _pointAlongPath=function _pointAlongPath(curve,location,distance){var prev=_pointOnPath(curve,location),tally=0,curLoc=location,direction=distance>0?1:-1,cur=null;while(tally<Math.abs(distance)){curLoc+=0.005*direction;cur=_pointOnPath(curve,curLoc);tally+=_dist(cur,prev);prev=cur;}return{point:cur,location:curLoc};};var _length=function _length(curve){var prev=_pointOnPath(curve,0),tally=0,curLoc=0,direction=1,cur=null;while(curLoc<1){curLoc+=0.005*direction;cur=_pointOnPath(curve,curLoc);tally+=_dist(cur,prev);prev=cur;}return tally;};/**\n\t * finds the point that is 'distance' along the path from 'location'.\n\t */var _pointAlongPathFrom=function _pointAlongPathFrom(curve,location,distance){return _pointAlongPath(curve,location,distance).point;};/**\n\t * finds the location that is 'distance' along the path from 'location'.\n\t */var _locationAlongPathFrom=function _locationAlongPathFrom(curve,location,distance){return _pointAlongPath(curve,location,distance).location;};/**\n\t * returns the gradient of the curve at the given location, which is a\n\t * decimal between 0 and 1 inclusive.\n\t * \n\t * thanks // http://bimixual.org/AnimationLibrary/beziertangents.html\n\t */var _gradientAtPoint=function _gradientAtPoint(curve,location){var p1=_pointOnPath(curve,location),p2=_pointOnPath(curve.slice(0,curve.length-1),location),dy=p2.y-p1.y,dx=p2.x-p1.x;return dy==0?Infinity:Math.atan(dy/dx);};/**\n\t * returns the gradient of the curve at the point which is 'distance' from\n\t * the given location. if this point is greater than location 1, the\n\t * gradient at location 1 is returned. if this point is less than location\n\t * 0, the gradient at location 0 is returned.\n\t */var _gradientAtPointAlongPathFrom=function _gradientAtPointAlongPathFrom(curve,location,distance){var p=_pointAlongPath(curve,location,distance);if(p.location>1)p.location=1;if(p.location<0)p.location=0;return _gradientAtPoint(curve,p.location);};/**\n\t * calculates a line that is 'length' pixels long, perpendicular to, and\n\t * centered on, the path at 'distance' pixels from the given location. if\n\t * distance is not supplied, the perpendicular for the given location is\n\t * computed (ie. we set distance to zero).\n\t */var _perpendicularToPathAt=function _perpendicularToPathAt(curve,location,length,distance){distance=distance==null?0:distance;var p=_pointAlongPath(curve,location,distance),m=_gradientAtPoint(curve,p.location),_theta2=Math.atan(-1/m),y=length/2*Math.sin(_theta2),x=length/2*Math.cos(_theta2);return[{x:p.point.x+x,y:p.point.y+y},{x:p.point.x-x,y:p.point.y-y}];};ChemDoodle.lib.jsBezier={distanceFromCurve:_distanceFromCurve,gradientAtPoint:_gradientAtPoint,gradientAtPointAlongCurveFrom:_gradientAtPointAlongPathFrom,nearestPointOnCurve:_nearestPointOnCurve,pointOnCurve:_pointOnPath,pointAlongCurveFrom:_pointAlongPathFrom,perpendicularToCurveAt:_perpendicularToPathAt,locationAlongCurveFrom:_locationAlongPathFrom,getLength:_length};})(ChemDoodle.lib);// The MIT License (MIT)\n// Copyright (c) 2012-2013 Mikola Lysenko\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/**\n * Javascript Marching Cubes\n *\n * Based on Paul Bourke's classic implementation:\n *    http://local.wasp.uwa.edu.au/~pbourke/geometry/polygonise/\n *\n * JS port by Mikola Lysenko\n */ChemDoodle.lib.MarchingCubes=function(){var edgeTable=new Uint32Array([0x0,0x109,0x203,0x30a,0x406,0x50f,0x605,0x70c,0x80c,0x905,0xa0f,0xb06,0xc0a,0xd03,0xe09,0xf00,0x190,0x99,0x393,0x29a,0x596,0x49f,0x795,0x69c,0x99c,0x895,0xb9f,0xa96,0xd9a,0xc93,0xf99,0xe90,0x230,0x339,0x33,0x13a,0x636,0x73f,0x435,0x53c,0xa3c,0xb35,0x83f,0x936,0xe3a,0xf33,0xc39,0xd30,0x3a0,0x2a9,0x1a3,0xaa,0x7a6,0x6af,0x5a5,0x4ac,0xbac,0xaa5,0x9af,0x8a6,0xfaa,0xea3,0xda9,0xca0,0x460,0x569,0x663,0x76a,0x66,0x16f,0x265,0x36c,0xc6c,0xd65,0xe6f,0xf66,0x86a,0x963,0xa69,0xb60,0x5f0,0x4f9,0x7f3,0x6fa,0x1f6,0xff,0x3f5,0x2fc,0xdfc,0xcf5,0xfff,0xef6,0x9fa,0x8f3,0xbf9,0xaf0,0x650,0x759,0x453,0x55a,0x256,0x35f,0x55,0x15c,0xe5c,0xf55,0xc5f,0xd56,0xa5a,0xb53,0x859,0x950,0x7c0,0x6c9,0x5c3,0x4ca,0x3c6,0x2cf,0x1c5,0xcc,0xfcc,0xec5,0xdcf,0xcc6,0xbca,0xac3,0x9c9,0x8c0,0x8c0,0x9c9,0xac3,0xbca,0xcc6,0xdcf,0xec5,0xfcc,0xcc,0x1c5,0x2cf,0x3c6,0x4ca,0x5c3,0x6c9,0x7c0,0x950,0x859,0xb53,0xa5a,0xd56,0xc5f,0xf55,0xe5c,0x15c,0x55,0x35f,0x256,0x55a,0x453,0x759,0x650,0xaf0,0xbf9,0x8f3,0x9fa,0xef6,0xfff,0xcf5,0xdfc,0x2fc,0x3f5,0xff,0x1f6,0x6fa,0x7f3,0x4f9,0x5f0,0xb60,0xa69,0x963,0x86a,0xf66,0xe6f,0xd65,0xc6c,0x36c,0x265,0x16f,0x66,0x76a,0x663,0x569,0x460,0xca0,0xda9,0xea3,0xfaa,0x8a6,0x9af,0xaa5,0xbac,0x4ac,0x5a5,0x6af,0x7a6,0xaa,0x1a3,0x2a9,0x3a0,0xd30,0xc39,0xf33,0xe3a,0x936,0x83f,0xb35,0xa3c,0x53c,0x435,0x73f,0x636,0x13a,0x33,0x339,0x230,0xe90,0xf99,0xc93,0xd9a,0xa96,0xb9f,0x895,0x99c,0x69c,0x795,0x49f,0x596,0x29a,0x393,0x99,0x190,0xf00,0xe09,0xd03,0xc0a,0xb06,0xa0f,0x905,0x80c,0x70c,0x605,0x50f,0x406,0x30a,0x203,0x109,0x0]),triTable=[[],[0,8,3],[0,1,9],[1,8,3,9,8,1],[1,2,10],[0,8,3,1,2,10],[9,2,10,0,2,9],[2,8,3,2,10,8,10,9,8],[3,11,2],[0,11,2,8,11,0],[1,9,0,2,3,11],[1,11,2,1,9,11,9,8,11],[3,10,1,11,10,3],[0,10,1,0,8,10,8,11,10],[3,9,0,3,11,9,11,10,9],[9,8,10,10,8,11],[4,7,8],[4,3,0,7,3,4],[0,1,9,8,4,7],[4,1,9,4,7,1,7,3,1],[1,2,10,8,4,7],[3,4,7,3,0,4,1,2,10],[9,2,10,9,0,2,8,4,7],[2,10,9,2,9,7,2,7,3,7,9,4],[8,4,7,3,11,2],[11,4,7,11,2,4,2,0,4],[9,0,1,8,4,7,2,3,11],[4,7,11,9,4,11,9,11,2,9,2,1],[3,10,1,3,11,10,7,8,4],[1,11,10,1,4,11,1,0,4,7,11,4],[4,7,8,9,0,11,9,11,10,11,0,3],[4,7,11,4,11,9,9,11,10],[9,5,4],[9,5,4,0,8,3],[0,5,4,1,5,0],[8,5,4,8,3,5,3,1,5],[1,2,10,9,5,4],[3,0,8,1,2,10,4,9,5],[5,2,10,5,4,2,4,0,2],[2,10,5,3,2,5,3,5,4,3,4,8],[9,5,4,2,3,11],[0,11,2,0,8,11,4,9,5],[0,5,4,0,1,5,2,3,11],[2,1,5,2,5,8,2,8,11,4,8,5],[10,3,11,10,1,3,9,5,4],[4,9,5,0,8,1,8,10,1,8,11,10],[5,4,0,5,0,11,5,11,10,11,0,3],[5,4,8,5,8,10,10,8,11],[9,7,8,5,7,9],[9,3,0,9,5,3,5,7,3],[0,7,8,0,1,7,1,5,7],[1,5,3,3,5,7],[9,7,8,9,5,7,10,1,2],[10,1,2,9,5,0,5,3,0,5,7,3],[8,0,2,8,2,5,8,5,7,10,5,2],[2,10,5,2,5,3,3,5,7],[7,9,5,7,8,9,3,11,2],[9,5,7,9,7,2,9,2,0,2,7,11],[2,3,11,0,1,8,1,7,8,1,5,7],[11,2,1,11,1,7,7,1,5],[9,5,8,8,5,7,10,1,3,10,3,11],[5,7,0,5,0,9,7,11,0,1,0,10,11,10,0],[11,10,0,11,0,3,10,5,0,8,0,7,5,7,0],[11,10,5,7,11,5],[10,6,5],[0,8,3,5,10,6],[9,0,1,5,10,6],[1,8,3,1,9,8,5,10,6],[1,6,5,2,6,1],[1,6,5,1,2,6,3,0,8],[9,6,5,9,0,6,0,2,6],[5,9,8,5,8,2,5,2,6,3,2,8],[2,3,11,10,6,5],[11,0,8,11,2,0,10,6,5],[0,1,9,2,3,11,5,10,6],[5,10,6,1,9,2,9,11,2,9,8,11],[6,3,11,6,5,3,5,1,3],[0,8,11,0,11,5,0,5,1,5,11,6],[3,11,6,0,3,6,0,6,5,0,5,9],[6,5,9,6,9,11,11,9,8],[5,10,6,4,7,8],[4,3,0,4,7,3,6,5,10],[1,9,0,5,10,6,8,4,7],[10,6,5,1,9,7,1,7,3,7,9,4],[6,1,2,6,5,1,4,7,8],[1,2,5,5,2,6,3,0,4,3,4,7],[8,4,7,9,0,5,0,6,5,0,2,6],[7,3,9,7,9,4,3,2,9,5,9,6,2,6,9],[3,11,2,7,8,4,10,6,5],[5,10,6,4,7,2,4,2,0,2,7,11],[0,1,9,4,7,8,2,3,11,5,10,6],[9,2,1,9,11,2,9,4,11,7,11,4,5,10,6],[8,4,7,3,11,5,3,5,1,5,11,6],[5,1,11,5,11,6,1,0,11,7,11,4,0,4,11],[0,5,9,0,6,5,0,3,6,11,6,3,8,4,7],[6,5,9,6,9,11,4,7,9,7,11,9],[10,4,9,6,4,10],[4,10,6,4,9,10,0,8,3],[10,0,1,10,6,0,6,4,0],[8,3,1,8,1,6,8,6,4,6,1,10],[1,4,9,1,2,4,2,6,4],[3,0,8,1,2,9,2,4,9,2,6,4],[0,2,4,4,2,6],[8,3,2,8,2,4,4,2,6],[10,4,9,10,6,4,11,2,3],[0,8,2,2,8,11,4,9,10,4,10,6],[3,11,2,0,1,6,0,6,4,6,1,10],[6,4,1,6,1,10,4,8,1,2,1,11,8,11,1],[9,6,4,9,3,6,9,1,3,11,6,3],[8,11,1,8,1,0,11,6,1,9,1,4,6,4,1],[3,11,6,3,6,0,0,6,4],[6,4,8,11,6,8],[7,10,6,7,8,10,8,9,10],[0,7,3,0,10,7,0,9,10,6,7,10],[10,6,7,1,10,7,1,7,8,1,8,0],[10,6,7,10,7,1,1,7,3],[1,2,6,1,6,8,1,8,9,8,6,7],[2,6,9,2,9,1,6,7,9,0,9,3,7,3,9],[7,8,0,7,0,6,6,0,2],[7,3,2,6,7,2],[2,3,11,10,6,8,10,8,9,8,6,7],[2,0,7,2,7,11,0,9,7,6,7,10,9,10,7],[1,8,0,1,7,8,1,10,7,6,7,10,2,3,11],[11,2,1,11,1,7,10,6,1,6,7,1],[8,9,6,8,6,7,9,1,6,11,6,3,1,3,6],[0,9,1,11,6,7],[7,8,0,7,0,6,3,11,0,11,6,0],[7,11,6],[7,6,11],[3,0,8,11,7,6],[0,1,9,11,7,6],[8,1,9,8,3,1,11,7,6],[10,1,2,6,11,7],[1,2,10,3,0,8,6,11,7],[2,9,0,2,10,9,6,11,7],[6,11,7,2,10,3,10,8,3,10,9,8],[7,2,3,6,2,7],[7,0,8,7,6,0,6,2,0],[2,7,6,2,3,7,0,1,9],[1,6,2,1,8,6,1,9,8,8,7,6],[10,7,6,10,1,7,1,3,7],[10,7,6,1,7,10,1,8,7,1,0,8],[0,3,7,0,7,10,0,10,9,6,10,7],[7,6,10,7,10,8,8,10,9],[6,8,4,11,8,6],[3,6,11,3,0,6,0,4,6],[8,6,11,8,4,6,9,0,1],[9,4,6,9,6,3,9,3,1,11,3,6],[6,8,4,6,11,8,2,10,1],[1,2,10,3,0,11,0,6,11,0,4,6],[4,11,8,4,6,11,0,2,9,2,10,9],[10,9,3,10,3,2,9,4,3,11,3,6,4,6,3],[8,2,3,8,4,2,4,6,2],[0,4,2,4,6,2],[1,9,0,2,3,4,2,4,6,4,3,8],[1,9,4,1,4,2,2,4,6],[8,1,3,8,6,1,8,4,6,6,10,1],[10,1,0,10,0,6,6,0,4],[4,6,3,4,3,8,6,10,3,0,3,9,10,9,3],[10,9,4,6,10,4],[4,9,5,7,6,11],[0,8,3,4,9,5,11,7,6],[5,0,1,5,4,0,7,6,11],[11,7,6,8,3,4,3,5,4,3,1,5],[9,5,4,10,1,2,7,6,11],[6,11,7,1,2,10,0,8,3,4,9,5],[7,6,11,5,4,10,4,2,10,4,0,2],[3,4,8,3,5,4,3,2,5,10,5,2,11,7,6],[7,2,3,7,6,2,5,4,9],[9,5,4,0,8,6,0,6,2,6,8,7],[3,6,2,3,7,6,1,5,0,5,4,0],[6,2,8,6,8,7,2,1,8,4,8,5,1,5,8],[9,5,4,10,1,6,1,7,6,1,3,7],[1,6,10,1,7,6,1,0,7,8,7,0,9,5,4],[4,0,10,4,10,5,0,3,10,6,10,7,3,7,10],[7,6,10,7,10,8,5,4,10,4,8,10],[6,9,5,6,11,9,11,8,9],[3,6,11,0,6,3,0,5,6,0,9,5],[0,11,8,0,5,11,0,1,5,5,6,11],[6,11,3,6,3,5,5,3,1],[1,2,10,9,5,11,9,11,8,11,5,6],[0,11,3,0,6,11,0,9,6,5,6,9,1,2,10],[11,8,5,11,5,6,8,0,5,10,5,2,0,2,5],[6,11,3,6,3,5,2,10,3,10,5,3],[5,8,9,5,2,8,5,6,2,3,8,2],[9,5,6,9,6,0,0,6,2],[1,5,8,1,8,0,5,6,8,3,8,2,6,2,8],[1,5,6,2,1,6],[1,3,6,1,6,10,3,8,6,5,6,9,8,9,6],[10,1,0,10,0,6,9,5,0,5,6,0],[0,3,8,5,6,10],[10,5,6],[11,5,10,7,5,11],[11,5,10,11,7,5,8,3,0],[5,11,7,5,10,11,1,9,0],[10,7,5,10,11,7,9,8,1,8,3,1],[11,1,2,11,7,1,7,5,1],[0,8,3,1,2,7,1,7,5,7,2,11],[9,7,5,9,2,7,9,0,2,2,11,7],[7,5,2,7,2,11,5,9,2,3,2,8,9,8,2],[2,5,10,2,3,5,3,7,5],[8,2,0,8,5,2,8,7,5,10,2,5],[9,0,1,5,10,3,5,3,7,3,10,2],[9,8,2,9,2,1,8,7,2,10,2,5,7,5,2],[1,3,5,3,7,5],[0,8,7,0,7,1,1,7,5],[9,0,3,9,3,5,5,3,7],[9,8,7,5,9,7],[5,8,4,5,10,8,10,11,8],[5,0,4,5,11,0,5,10,11,11,3,0],[0,1,9,8,4,10,8,10,11,10,4,5],[10,11,4,10,4,5,11,3,4,9,4,1,3,1,4],[2,5,1,2,8,5,2,11,8,4,5,8],[0,4,11,0,11,3,4,5,11,2,11,1,5,1,11],[0,2,5,0,5,9,2,11,5,4,5,8,11,8,5],[9,4,5,2,11,3],[2,5,10,3,5,2,3,4,5,3,8,4],[5,10,2,5,2,4,4,2,0],[3,10,2,3,5,10,3,8,5,4,5,8,0,1,9],[5,10,2,5,2,4,1,9,2,9,4,2],[8,4,5,8,5,3,3,5,1],[0,4,5,1,0,5],[8,4,5,8,5,3,9,0,5,0,3,5],[9,4,5],[4,11,7,4,9,11,9,10,11],[0,8,3,4,9,7,9,11,7,9,10,11],[1,10,11,1,11,4,1,4,0,7,4,11],[3,1,4,3,4,8,1,10,4,7,4,11,10,11,4],[4,11,7,9,11,4,9,2,11,9,1,2],[9,7,4,9,11,7,9,1,11,2,11,1,0,8,3],[11,7,4,11,4,2,2,4,0],[11,7,4,11,4,2,8,3,4,3,2,4],[2,9,10,2,7,9,2,3,7,7,4,9],[9,10,7,9,7,4,10,2,7,8,7,0,2,0,7],[3,7,10,3,10,2,7,4,10,1,10,0,4,0,10],[1,10,2,8,7,4],[4,9,1,4,1,7,7,1,3],[4,9,1,4,1,7,0,8,1,8,7,1],[4,0,3,7,4,3],[4,8,7],[9,10,8,10,11,8],[3,0,9,3,9,11,11,9,10],[0,1,10,0,10,8,8,10,11],[3,1,10,11,3,10],[1,2,11,1,11,9,9,11,8],[3,0,9,3,9,11,1,2,9,2,11,9],[0,2,11,8,0,11],[3,2,11],[2,3,8,2,8,10,10,8,9],[9,10,2,0,9,2],[2,3,8,2,8,10,0,1,8,1,10,8],[1,10,2],[1,3,8,9,1,8],[0,9,1],[0,3,8],[]],cubeVerts=[[0,0,0],[1,0,0],[1,1,0],[0,1,0],[0,0,1],[1,0,1],[1,1,1],[0,1,1]],edgeIndex=[[0,1],[1,2],[2,3],[3,0],[4,5],[5,6],[6,7],[7,4],[0,4],[1,5],[2,6],[3,7]];return function(data,dims){var vertices=[],faces=[],n=0,grid=new Float32Array(8),edges=new Int32Array(12),x=new Int32Array(3);//March over the volume\nfor(x[2]=0;x[2]<dims[2]-1;++x[2],n+=dims[0]){for(x[1]=0;x[1]<dims[1]-1;++x[1],++n){for(x[0]=0;x[0]<dims[0]-1;++x[0],++n){//For each cell, compute cube mask\nvar cube_index=0;for(var i=0;i<8;++i){var v=cubeVerts[i],s=data[n+v[0]+dims[0]*(v[1]+dims[1]*v[2])];grid[i]=s;cube_index|=s>0?1<<i:0;}//Compute vertices\nvar edge_mask=edgeTable[cube_index];if(edge_mask===0){continue;}for(var i=0;i<12;++i){if((edge_mask&1<<i)===0){continue;}edges[i]=vertices.length;var nv=[0,0,0],e=edgeIndex[i],p0=cubeVerts[e[0]],p1=cubeVerts[e[1]],a=grid[e[0]],b=grid[e[1]],d=a-b,t=0;if(Math.abs(d)>1e-6){t=a/d;}for(var j=0;j<3;++j){nv[j]=x[j]+p0[j]+t*(p1[j]-p0[j]);}vertices.push(nv);}//Add faces\nvar f=triTable[cube_index];for(var i=0;i<f.length;i+=3){faces.push([edges[f[i]],edges[f[i+1]],edges[f[i+2]]]);}}}}return{vertices:vertices,faces:faces};};}();ChemDoodle.animations=function(window,undefined){'use strict';var ext={};// Drop in replace functions for setTimeout() & setInterval() that \n// make use of requestAnimationFrame() for performance where available\n// http://www.joelambert.co.uk\n// Copyright 2011, Joe Lambert.\n// Free to use under the MIT license.\n// http://www.opensource.org/licenses/mit-license.php\n// requestAnimationFrame() shim by Paul Irish\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\nwindow.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(/* function */callback,/* DOMElement */element){window.setTimeout(callback,1000/60);};}();/**\n\t * Behaves the same as setInterval except uses requestAnimationFrame() where possible for better performance\n\t * @param {function} fn The callback function\n\t * @param {int} delay The delay in milliseconds\n\t */ext.requestInterval=function(fn,delay){if(!window.requestAnimationFrame&&!window.webkitRequestAnimationFrame&&!(window.mozRequestAnimationFrame&&window.mozCancelRequestAnimationFrame)&&// Firefox 5 ships without cancel support\n!window.oRequestAnimationFrame&&!window.msRequestAnimationFrame)return window.setInterval(fn,delay);var start=new Date().getTime(),handle=new Object();function loop(){var current=new Date().getTime(),delta=current-start;if(delta>=delay){fn.call();start=new Date().getTime();}handle.value=window.requestAnimFrame(loop);};handle.value=window.requestAnimFrame(loop);return handle;};/**\n\t * Behaves the same as clearInterval except uses cancelRequestAnimationFrame() where possible for better performance\n\t * @param {int|object} fn The callback function\n\t */ext.clearRequestInterval=function(handle){window.cancelAnimationFrame?window.cancelAnimationFrame(handle.value):window.webkitCancelAnimationFrame?window.webkitCancelAnimationFrame(handle.value):window.webkitCancelRequestAnimationFrame?window.webkitCancelRequestAnimationFrame(handle.value):/* Support for legacy API */window.mozCancelRequestAnimationFrame?window.mozCancelRequestAnimationFrame(handle.value):window.oCancelRequestAnimationFrame?window.oCancelRequestAnimationFrame(handle.value):window.msCancelRequestAnimationFrame?window.msCancelRequestAnimationFrame(handle.value):clearInterval(handle);};/**\n\t * Behaves the same as setTimeout except uses requestAnimationFrame() where possible for better performance\n\t * @param {function} fn The callback function\n\t * @param {int} delay The delay in milliseconds\n\t */ext.requestTimeout=function(fn,delay){if(!window.requestAnimationFrame&&!window.webkitRequestAnimationFrame&&!(window.mozRequestAnimationFrame&&window.mozCancelRequestAnimationFrame)&&// Firefox 5 ships without cancel support\n!window.oRequestAnimationFrame&&!window.msRequestAnimationFrame)return window.setTimeout(fn,delay);var start=new Date().getTime(),handle=new Object();function loop(){var current=new Date().getTime(),delta=current-start;delta>=delay?fn.call():handle.value=window.requestAnimFrame(loop);};handle.value=window.requestAnimFrame(loop);return handle;};/**\n\t * Behaves the same as clearTimeout except uses cancelRequestAnimationFrame() where possible for better performance\n\t * @param {int|object} fn The callback function\n\t */ext.clearRequestTimeout=function(handle){window.cancelAnimationFrame?window.cancelAnimationFrame(handle.value):window.webkitCancelAnimationFrame?window.webkitCancelAnimationFrame(handle.value):window.webkitCancelRequestAnimationFrame?window.webkitCancelRequestAnimationFrame(handle.value):/* Support for legacy API */window.mozCancelRequestAnimationFrame?window.mozCancelRequestAnimationFrame(handle.value):window.oCancelRequestAnimationFrame?window.oCancelRequestAnimationFrame(handle.value):window.msCancelRequestAnimationFrame?window.msCancelRequestAnimationFrame(handle.value):clearTimeout(handle);};return ext;}(window);ChemDoodle.extensions=function(structures,v3,m,undefined){'use strict';var ext={};ext.stringStartsWith=function(str,match){return str.slice(0,match.length)===match;};ext.vec3AngleFrom=function(v1,v2){var length1=v3.length(v1);var length2=v3.length(v2);var dot=v3.dot(v1,v2);var cosine=dot/length1/length2;return m.acos(cosine);};ext.contextRoundRect=function(ctx,x,y,width,height,radius){ctx.beginPath();ctx.moveTo(x+radius,y);ctx.lineTo(x+width-radius,y);ctx.quadraticCurveTo(x+width,y,x+width,y+radius);ctx.lineTo(x+width,y+height-radius);ctx.quadraticCurveTo(x+width,y+height,x+width-radius,y+height);ctx.lineTo(x+radius,y+height);ctx.quadraticCurveTo(x,y+height,x,y+height-radius);ctx.lineTo(x,y+radius);ctx.quadraticCurveTo(x,y,x+radius,y);ctx.closePath();};ext.contextEllipse=function(ctx,x,y,w,h){var kappa=.5522848;var ox=w/2*kappa;var oy=h/2*kappa;var xe=x+w;var ye=y+h;var xm=x+w/2;var ym=y+h/2;ctx.beginPath();ctx.moveTo(x,ym);ctx.bezierCurveTo(x,ym-oy,xm-ox,y,xm,y);ctx.bezierCurveTo(xm+ox,y,xe,ym-oy,xe,ym);ctx.bezierCurveTo(xe,ym+oy,xm+ox,ye,xm,ye);ctx.bezierCurveTo(xm-ox,ye,x,ym+oy,x,ym);ctx.closePath();};ext.getFontString=function(size,families,bold,italic){var sb=[];if(bold){sb.push('bold ');}if(italic){sb.push('italic ');}sb.push(size+'px ');for(var i=0,ii=families.length;i<ii;i++){var use=families[i];if(use.indexOf(' ')!==-1){use='\"'+use+'\"';}sb.push((i!==0?',':'')+use);}return sb.join('');};return ext;}(ChemDoodle.structures,ChemDoodle.lib.vec3,Math);ChemDoodle.math=function(c,extensions,structures,q,m,undefined){'use strict';var pack={};var namedColors={'aliceblue':'#f0f8ff','antiquewhite':'#faebd7','aqua':'#00ffff','aquamarine':'#7fffd4','azure':'#f0ffff','beige':'#f5f5dc','bisque':'#ffe4c4','black':'#000000','blanchedalmond':'#ffebcd','blue':'#0000ff','blueviolet':'#8a2be2','brown':'#a52a2a','burlywood':'#deb887','cadetblue':'#5f9ea0','chartreuse':'#7fff00','chocolate':'#d2691e','coral':'#ff7f50','cornflowerblue':'#6495ed','cornsilk':'#fff8dc','crimson':'#dc143c','cyan':'#00ffff','darkblue':'#00008b','darkcyan':'#008b8b','darkgoldenrod':'#b8860b','darkgray':'#a9a9a9','darkgreen':'#006400','darkkhaki':'#bdb76b','darkmagenta':'#8b008b','darkolivegreen':'#556b2f','darkorange':'#ff8c00','darkorchid':'#9932cc','darkred':'#8b0000','darksalmon':'#e9967a','darkseagreen':'#8fbc8f','darkslateblue':'#483d8b','darkslategray':'#2f4f4f','darkturquoise':'#00ced1','darkviolet':'#9400d3','deeppink':'#ff1493','deepskyblue':'#00bfff','dimgray':'#696969','dodgerblue':'#1e90ff','firebrick':'#b22222','floralwhite':'#fffaf0','forestgreen':'#228b22','fuchsia':'#ff00ff','gainsboro':'#dcdcdc','ghostwhite':'#f8f8ff','gold':'#ffd700','goldenrod':'#daa520','gray':'#808080','green':'#008000','greenyellow':'#adff2f','honeydew':'#f0fff0','hotpink':'#ff69b4','indianred ':'#cd5c5c','indigo ':'#4b0082','ivory':'#fffff0','khaki':'#f0e68c','lavender':'#e6e6fa','lavenderblush':'#fff0f5','lawngreen':'#7cfc00','lemonchiffon':'#fffacd','lightblue':'#add8e6','lightcoral':'#f08080','lightcyan':'#e0ffff','lightgoldenrodyellow':'#fafad2','lightgrey':'#d3d3d3','lightgreen':'#90ee90','lightpink':'#ffb6c1','lightsalmon':'#ffa07a','lightseagreen':'#20b2aa','lightskyblue':'#87cefa','lightslategray':'#778899','lightsteelblue':'#b0c4de','lightyellow':'#ffffe0','lime':'#00ff00','limegreen':'#32cd32','linen':'#faf0e6','magenta':'#ff00ff','maroon':'#800000','mediumaquamarine':'#66cdaa','mediumblue':'#0000cd','mediumorchid':'#ba55d3','mediumpurple':'#9370d8','mediumseagreen':'#3cb371','mediumslateblue':'#7b68ee','mediumspringgreen':'#00fa9a','mediumturquoise':'#48d1cc','mediumvioletred':'#c71585','midnightblue':'#191970','mintcream':'#f5fffa','mistyrose':'#ffe4e1','moccasin':'#ffe4b5','navajowhite':'#ffdead','navy':'#000080','oldlace':'#fdf5e6','olive':'#808000','olivedrab':'#6b8e23','orange':'#ffa500','orangered':'#ff4500','orchid':'#da70d6','palegoldenrod':'#eee8aa','palegreen':'#98fb98','paleturquoise':'#afeeee','palevioletred':'#d87093','papayawhip':'#ffefd5','peachpuff':'#ffdab9','peru':'#cd853f','pink':'#ffc0cb','plum':'#dda0dd','powderblue':'#b0e0e6','purple':'#800080','red':'#ff0000','rosybrown':'#bc8f8f','royalblue':'#4169e1','saddlebrown':'#8b4513','salmon':'#fa8072','sandybrown':'#f4a460','seagreen':'#2e8b57','seashell':'#fff5ee','sienna':'#a0522d','silver':'#c0c0c0','skyblue':'#87ceeb','slateblue':'#6a5acd','slategray':'#708090','snow':'#fffafa','springgreen':'#00ff7f','steelblue':'#4682b4','tan':'#d2b48c','teal':'#008080','thistle':'#d8bfd8','tomato':'#ff6347','turquoise':'#40e0d0','violet':'#ee82ee','wheat':'#f5deb3','white':'#ffffff','whitesmoke':'#f5f5f5','yellow':'#ffff00','yellowgreen':'#9acd32'};pack.angleBetweenLargest=function(angles){if(angles.length===0){return{angle:0,largest:m.PI*2};}if(angles.length===1){return{angle:angles[0]+m.PI,largest:m.PI*2};}var largest=0;var angle=0;for(var i=0,ii=angles.length-1;i<ii;i++){var dif=angles[i+1]-angles[i];if(dif>largest){largest=dif;angle=(angles[i+1]+angles[i])/2;}}var last=angles[0]+m.PI*2-angles[angles.length-1];if(last>largest){angle=angles[0]-last/2;largest=last;if(angle<0){angle+=m.PI*2;}}return{angle:angle,largest:largest};};pack.isBetween=function(x,left,right){if(left>right){var tmp=left;left=right;right=tmp;}return x>=left&&x<=right;};// be careful not to remove this, as this will cause corruption issues\n// contact iChemLabs for instructions to remove this\nq(document).ready(function(){if(c&&c.iChemLabs&&c.iChemLabs.checkForUpdates){c.iChemLabs.checkForUpdates({});}});pack.getRGB=function(color,multiplier){var err=[0,0,0];if(namedColors[color.toLowerCase()]){color=namedColors[color.toLowerCase()];}if(color.charAt(0)==='#'){if(color.length===4){color='#'+color.charAt(1)+color.charAt(1)+color.charAt(2)+color.charAt(2)+color.charAt(3)+color.charAt(3);}return[parseInt(color.substring(1,3),16)/255.0*multiplier,parseInt(color.substring(3,5),16)/255.0*multiplier,parseInt(color.substring(5,7),16)/255.0*multiplier];}else if(extensions.stringStartsWith(color,'rgb')){var cs=color.replace(/rgb\\(|\\)/g,'').split(',');if(cs.length!==3){return err;}return[parseInt(cs[0])/255.0*multiplier,parseInt(cs[1])/255.0*multiplier,parseInt(cs[2])/255.0*multiplier];}return err;};pack.hsl2rgb=function(h,s,l){var hue2rgb=function hue2rgb(p,q,t){if(t<0){t+=1;}else if(t>1){t-=1;}if(t<1/6){return p+(q-p)*6*t;}else if(t<1/2){return q;}else if(t<2/3){return p+(q-p)*(2/3-t)*6;}return p;};var r,g,b;if(s===0){r=g=b=l;// achromatic\n}else{var q=l<0.5?l*(1+s):l+s-l*s;var p=2*l-q;r=hue2rgb(p,q,h+1/3);g=hue2rgb(p,q,h);b=hue2rgb(p,q,h-1/3);}return[r*255,g*255,b*255];};pack.idx2color=function(value){var hex=value.toString(16);// add '0' padding\nfor(var i=0,ii=6-hex.length;i<ii;i++){hex=\"0\"+hex;}return\"#\"+hex;};pack.distanceFromPointToLineInclusive=function(p,l1,l2,retract){var length=l1.distance(l2);var angle=l1.angle(l2);var angleDif=m.PI/2-angle;var newAngleP=l1.angle(p)+angleDif;var pDist=l1.distance(p);var pcopRot=new structures.Point(pDist*m.cos(newAngleP),-pDist*m.sin(newAngleP));var pull=retract?retract:0;if(pack.isBetween(-pcopRot.y,pull,length-pull)){return m.abs(pcopRot.x);}return-1;};pack.calculateDistanceInterior=function(to,from,r){if(this.isBetween(from.x,r.x,r.x+r.w)&&this.isBetween(from.y,r.y,r.y+r.h)){return to.distance(from);}// calculates the distance that a line needs to remove from itself to be\n// outside that rectangle\nvar lines=[];// top\nlines.push({x1:r.x,y1:r.y,x2:r.x+r.w,y2:r.y});// bottom\nlines.push({x1:r.x,y1:r.y+r.h,x2:r.x+r.w,y2:r.y+r.h});// left\nlines.push({x1:r.x,y1:r.y,x2:r.x,y2:r.y+r.h});// right\nlines.push({x1:r.x+r.w,y1:r.y,x2:r.x+r.w,y2:r.y+r.h});var intersections=[];for(var i=0;i<4;i++){var l=lines[i];var p=this.intersectLines(from.x,from.y,to.x,to.y,l.x1,l.y1,l.x2,l.y2);if(p){intersections.push(p);}}if(intersections.length===0){return 0;}var max=0;for(var i=0,ii=intersections.length;i<ii;i++){var p=intersections[i];var dx=to.x-p.x;var dy=to.y-p.y;max=m.max(max,m.sqrt(dx*dx+dy*dy));}return max;};pack.intersectLines=function(ax,ay,bx,by,cx,cy,dx,dy){// calculate the direction vectors\nbx-=ax;by-=ay;dx-=cx;dy-=cy;// are they parallel?\nvar denominator=by*dx-bx*dy;if(denominator===0){return false;}// calculate point of intersection\nvar r=(dy*(ax-cx)-dx*(ay-cy))/denominator;var s=(by*(ax-cx)-bx*(ay-cy))/denominator;if(s>=0&&s<=1&&r>=0&&r<=1){return{x:ax+r*bx,y:ay+r*by};}else{return false;}};pack.clamp=function(value,min,max){return value<min?min:value>max?max:value;};pack.rainbowAt=function(i,ii,colors){// The rainbow colors length must be more than one color\nif(colors.length<1){colors.push('#000000','#FFFFFF');}else if(colors.length<2){colors.push('#FFFFFF');}var step=ii/(colors.length-1);var j=m.floor(i/step);var t=(i-j*step)/step;var startColor=pack.getRGB(colors[j],1);var endColor=pack.getRGB(colors[j+1],1);var lerpColor=[(startColor[0]+(endColor[0]-startColor[0])*t)*255,(startColor[1]+(endColor[1]-startColor[1])*t)*255,(startColor[2]+(endColor[2]-startColor[2])*t)*255];return'rgb('+lerpColor.join(',')+')';};pack.angleBounds=function(angle,convertToDegrees,limitToPi){var full=m.PI*2;while(angle<0){angle+=full;}while(angle>full){angle-=full;}if(limitToPi&&angle>m.PI){angle=2*m.PI-angle;}if(convertToDegrees){angle=180*angle/m.PI;}return angle;};pack.isPointInPoly=function(poly,pt){for(var c=false,i=-1,l=poly.length,j=l-1;++i<l;j=i){(poly[i].y<=pt.y&&pt.y<poly[j].y||poly[j].y<=pt.y&&pt.y<poly[i].y)&&pt.x<(poly[j].x-poly[i].x)*(pt.y-poly[i].y)/(poly[j].y-poly[i].y)+poly[i].x&&(c=!c);}return c;};return pack;}(ChemDoodle,ChemDoodle.extensions,ChemDoodle.structures,ChemDoodle.lib.jQuery,Math);(function(math,m,undefined){'use strict';math.Bounds=function(){};var _=math.Bounds.prototype;_.minX=_.minY=_.minZ=Infinity;_.maxX=_.maxY=_.maxZ=-Infinity;_.expand=function(x1,y1,x2,y2){if(x1 instanceof math.Bounds){// only need to compare min and max since bounds already has\n// them ordered\nthis.minX=m.min(this.minX,x1.minX);this.minY=m.min(this.minY,x1.minY);this.maxX=m.max(this.maxX,x1.maxX);this.maxY=m.max(this.maxY,x1.maxY);if(x1.maxZ!==Infinity){this.minZ=m.min(this.minZ,x1.minZ);this.maxZ=m.max(this.maxZ,x1.maxZ);}}else{this.minX=m.min(this.minX,x1);this.maxX=m.max(this.maxX,x1);this.minY=m.min(this.minY,y1);this.maxY=m.max(this.maxY,y1);// these two values could be 0, so check if undefined\nif(x2!==undefined&&y2!==undefined){this.minX=m.min(this.minX,x2);this.maxX=m.max(this.maxX,x2);this.minY=m.min(this.minY,y2);this.maxY=m.max(this.maxY,y2);}}};_.expand3D=function(x1,y1,z1,x2,y2,z2){this.minX=m.min(this.minX,x1);this.maxX=m.max(this.maxX,x1);this.minY=m.min(this.minY,y1);this.maxY=m.max(this.maxY,y1);this.minZ=m.min(this.minZ,z1);this.maxZ=m.max(this.maxZ,z1);// these two values could be 0, so check if undefined\nif(x2!==undefined&&y2!==undefined&&z2!==undefined){this.minX=m.min(this.minX,x2);this.maxX=m.max(this.maxX,x2);this.minY=m.min(this.minY,y2);this.maxY=m.max(this.maxY,y2);this.minZ=m.min(this.minZ,z2);this.maxZ=m.max(this.maxZ,z2);}};})(ChemDoodle.math,Math);ChemDoodle.featureDetection=function(iChemLabs,q,document,window,undefined){'use strict';var features={};features.supports_canvas=function(){return!!document.createElement('canvas').getContext;};features.supports_canvas_text=function(){if(!features.supports_canvas()){return false;}var dummy_canvas=document.createElement('canvas');var context=dummy_canvas.getContext('2d');return typeof context.fillText==='function';};features.supports_webgl=function(){var dummy_canvas=document.createElement('canvas');try{if(dummy_canvas.getContext('webgl')){return true;}if(dummy_canvas.getContext('experimental-webgl')){return true;}}catch(b){}return false;};features.supports_xhr2=function(){return q.support.cors;};features.supports_touch=function(){// check the mobile os so we don't interfere with hybrid pcs\nreturn'ontouchstart'in window&&!!navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|BB10/i);};features.supports_gesture=function(){return'ongesturestart'in window;};return features;}(ChemDoodle.iChemLabs,ChemDoodle.lib.jQuery,document,window);// all symbols\nChemDoodle.SYMBOLS=['H','He','Li','Be','B','C','N','O','F','Ne','Na','Mg','Al','Si','P','S','Cl','Ar','K','Ca','Sc','Ti','V','Cr','Mn','Fe','Co','Ni','Cu','Zn','Ga','Ge','As','Se','Br','Kr','Rb','Sr','Y','Zr','Nb','Mo','Tc','Ru','Rh','Pd','Ag','Cd','In','Sn','Sb','Te','I','Xe','Cs','Ba','La','Ce','Pr','Nd','Pm','Sm','Eu','Gd','Tb','Dy','Ho','Er','Tm','Yb','Lu','Hf','Ta','W','Re','Os','Ir','Pt','Au','Hg','Tl','Pb','Bi','Po','At','Rn','Fr','Ra','Ac','Th','Pa','U','Np','Pu','Am','Cm','Bk','Cf','Es','Fm','Md','No','Lr','Rf','Db','Sg','Bh','Hs','Mt','Ds','Rg','Cn','Nh','Fl','Mc','Lv','Ts','Og'];ChemDoodle.ELEMENT=function(SYMBOLS,undefined){'use strict';var E=[];function Element(symbol,name,atomicNumber,addH,color,covalentRadius,vdWRadius,valency,mass){this.symbol=symbol;this.name=name;this.atomicNumber=atomicNumber;this.addH=addH;this.jmolColor=this.pymolColor=color;this.covalentRadius=covalentRadius;this.vdWRadius=vdWRadius;this.valency=valency;this.mass=mass;}E.H=new Element('H','Hydrogen',1,false,'#FFFFFF',0.31,1.1,1,1);E.He=new Element('He','Helium',2,false,'#D9FFFF',0.28,1.4,0,4);E.Li=new Element('Li','Lithium',3,false,'#CC80FF',1.28,1.82,1,7);E.Be=new Element('Be','Beryllium',4,false,'#C2FF00',0.96,1.53,2,9);E.B=new Element('B','Boron',5,true,'#FFB5B5',0.84,1.92,3,11);E.C=new Element('C','Carbon',6,true,'#909090',0.76,1.7,4,12);E.N=new Element('N','Nitrogen',7,true,'#3050F8',0.71,1.55,3,14);E.O=new Element('O','Oxygen',8,true,'#FF0D0D',0.66,1.52,2,16);E.F=new Element('F','Fluorine',9,true,'#90E050',0.57,1.47,1,19);E.Ne=new Element('Ne','Neon',10,false,'#B3E3F5',0.58,1.54,0,20);E.Na=new Element('Na','Sodium',11,false,'#AB5CF2',1.66,2.27,1,23);E.Mg=new Element('Mg','Magnesium',12,false,'#8AFF00',1.41,1.73,0,24);E.Al=new Element('Al','Aluminum',13,false,'#BFA6A6',1.21,1.84,0,27);E.Si=new Element('Si','Silicon',14,true,'#F0C8A0',1.11,2.1,4,28);E.P=new Element('P','Phosphorus',15,true,'#FF8000',1.07,1.8,3,31);E.S=new Element('S','Sulfur',16,true,'#FFFF30',1.05,1.8,2,32);E.Cl=new Element('Cl','Chlorine',17,true,'#1FF01F',1.02,1.75,1,35);E.Ar=new Element('Ar','Argon',18,false,'#80D1E3',1.06,1.88,0,40);E.K=new Element('K','Potassium',19,false,'#8F40D4',2.03,2.75,0,39);E.Ca=new Element('Ca','Calcium',20,false,'#3DFF00',1.76,2.31,0,40);E.Sc=new Element('Sc','Scandium',21,false,'#E6E6E6',1.7,0,0,45);E.Ti=new Element('Ti','Titanium',22,false,'#BFC2C7',1.6,0,1,48);E.V=new Element('V','Vanadium',23,false,'#A6A6AB',1.53,0,1,51);E.Cr=new Element('Cr','Chromium',24,false,'#8A99C7',1.39,0,2,52);E.Mn=new Element('Mn','Manganese',25,false,'#9C7AC7',1.39,0,3,55);E.Fe=new Element('Fe','Iron',26,false,'#E06633',1.32,0,2,56);E.Co=new Element('Co','Cobalt',27,false,'#F090A0',1.26,0,1,59);E.Ni=new Element('Ni','Nickel',28,false,'#50D050',1.24,1.63,1,58);E.Cu=new Element('Cu','Copper',29,false,'#C88033',1.32,1.4,0,63);E.Zn=new Element('Zn','Zinc',30,false,'#7D80B0',1.22,1.39,0,64);E.Ga=new Element('Ga','Gallium',31,false,'#C28F8F',1.22,1.87,0,69);E.Ge=new Element('Ge','Germanium',32,false,'#668F8F',1.2,2.11,4,74);E.As=new Element('As','Arsenic',33,true,'#BD80E3',1.19,1.85,3,75);E.Se=new Element('Se','Selenium',34,true,'#FFA100',1.2,1.9,2,80);E.Br=new Element('Br','Bromine',35,true,'#A62929',1.2,1.85,1,79);E.Kr=new Element('Kr','Krypton',36,false,'#5CB8D1',1.16,2.02,0,84);E.Rb=new Element('Rb','Rubidium',37,false,'#702EB0',2.2,3.03,0,85);E.Sr=new Element('Sr','Strontium',38,false,'#00FF00',1.95,2.49,0,88);E.Y=new Element('Y','Yttrium',39,false,'#94FFFF',1.9,0,0,89);E.Zr=new Element('Zr','Zirconium',40,false,'#94E0E0',1.75,0,0,90);E.Nb=new Element('Nb','Niobium',41,false,'#73C2C9',1.64,0,1,93);E.Mo=new Element('Mo','Molybdenum',42,false,'#54B5B5',1.54,0,2,98);E.Tc=new Element('Tc','Technetium',43,false,'#3B9E9E',1.47,0,3,0);E.Ru=new Element('Ru','Ruthenium',44,false,'#248F8F',1.46,0,2,102);E.Rh=new Element('Rh','Rhodium',45,false,'#0A7D8C',1.42,0,1,103);E.Pd=new Element('Pd','Palladium',46,false,'#006985',1.39,1.63,0,106);E.Ag=new Element('Ag','Silver',47,false,'#C0C0C0',1.45,1.72,0,107);E.Cd=new Element('Cd','Cadmium',48,false,'#FFD98F',1.44,1.58,0,114);E.In=new Element('In','Indium',49,false,'#A67573',1.42,1.93,0,115);E.Sn=new Element('Sn','Tin',50,false,'#668080',1.39,2.17,4,120);E.Sb=new Element('Sb','Antimony',51,false,'#9E63B5',1.39,2.06,3,121);E.Te=new Element('Te','Tellurium',52,true,'#D47A00',1.38,2.06,2,130);E.I=new Element('I','Iodine',53,true,'#940094',1.39,1.98,1,127);E.Xe=new Element('Xe','Xenon',54,false,'#429EB0',1.4,2.16,0,132);E.Cs=new Element('Cs','Cesium',55,false,'#57178F',2.44,3.43,0,133);E.Ba=new Element('Ba','Barium',56,false,'#00C900',2.15,2.68,0,138);E.La=new Element('La','Lanthanum',57,false,'#70D4FF',2.07,0,0,139);E.Ce=new Element('Ce','Cerium',58,false,'#FFFFC7',2.04,0,0,140);E.Pr=new Element('Pr','Praseodymium',59,false,'#D9FFC7',2.03,0,0,141);E.Nd=new Element('Nd','Neodymium',60,false,'#C7FFC7',2.01,0,0,142);E.Pm=new Element('Pm','Promethium',61,false,'#A3FFC7',1.99,0,0,0);E.Sm=new Element('Sm','Samarium',62,false,'#8FFFC7',1.98,0,0,152);E.Eu=new Element('Eu','Europium',63,false,'#61FFC7',1.98,0,0,153);E.Gd=new Element('Gd','Gadolinium',64,false,'#45FFC7',1.96,0,0,158);E.Tb=new Element('Tb','Terbium',65,false,'#30FFC7',1.94,0,0,159);E.Dy=new Element('Dy','Dysprosium',66,false,'#1FFFC7',1.92,0,0,164);E.Ho=new Element('Ho','Holmium',67,false,'#00FF9C',1.92,0,0,165);E.Er=new Element('Er','Erbium',68,false,'#00E675',1.89,0,0,166);E.Tm=new Element('Tm','Thulium',69,false,'#00D452',1.9,0,0,169);E.Yb=new Element('Yb','Ytterbium',70,false,'#00BF38',1.87,0,0,174);E.Lu=new Element('Lu','Lutetium',71,false,'#00AB24',1.87,0,0,175);E.Hf=new Element('Hf','Hafnium',72,false,'#4DC2FF',1.75,0,0,180);E.Ta=new Element('Ta','Tantalum',73,false,'#4DA6FF',1.7,0,1,181);E.W=new Element('W','Tungsten',74,false,'#2194D6',1.62,0,2,184);E.Re=new Element('Re','Rhenium',75,false,'#267DAB',1.51,0,3,187);E.Os=new Element('Os','Osmium',76,false,'#266696',1.44,0,2,192);E.Ir=new Element('Ir','Iridium',77,false,'#175487',1.41,0,3,193);E.Pt=new Element('Pt','Platinum',78,false,'#D0D0E0',1.36,1.75,0,195);E.Au=new Element('Au','Gold',79,false,'#FFD123',1.36,1.66,1,197);E.Hg=new Element('Hg','Mercury',80,false,'#B8B8D0',1.32,1.55,0,202);E.Tl=new Element('Tl','Thallium',81,false,'#A6544D',1.45,1.96,0,205);E.Pb=new Element('Pb','Lead',82,false,'#575961',1.46,2.02,4,208);E.Bi=new Element('Bi','Bismuth',83,false,'#9E4FB5',1.48,2.07,3,209);E.Po=new Element('Po','Polonium',84,false,'#AB5C00',1.4,1.97,2,0);E.At=new Element('At','Astatine',85,true,'#754F45',1.5,2.02,1,0);E.Rn=new Element('Rn','Radon',86,false,'#428296',1.5,2.2,0,0);E.Fr=new Element('Fr','Francium',87,false,'#420066',2.6,3.48,0,0);E.Ra=new Element('Ra','Radium',88,false,'#007D00',2.21,2.83,0,0);E.Ac=new Element('Ac','Actinium',89,false,'#70ABFA',2.15,0,0,0);E.Th=new Element('Th','Thorium',90,false,'#00BAFF',2.06,0,0,232);E.Pa=new Element('Pa','Protactinium',91,false,'#00A1FF',2,0,0,231);E.U=new Element('U','Uranium',92,false,'#008FFF',1.96,1.86,0,238);E.Np=new Element('Np','Neptunium',93,false,'#0080FF',1.9,0,0,0);E.Pu=new Element('Pu','Plutonium',94,false,'#006BFF',1.87,0,0,0);E.Am=new Element('Am','Americium',95,false,'#545CF2',1.8,0,0,0);E.Cm=new Element('Cm','Curium',96,false,'#785CE3',1.69,0,0,0);E.Bk=new Element('Bk','Berkelium',97,false,'#8A4FE3',0,0,0,0);E.Cf=new Element('Cf','Californium',98,false,'#A136D4',0,0,0,0);E.Es=new Element('Es','Einsteinium',99,false,'#B31FD4',0,0,0,0);E.Fm=new Element('Fm','Fermium',100,false,'#B31FBA',0,0,0,0);E.Md=new Element('Md','Mendelevium',101,false,'#B30DA6',0,0,0,0);E.No=new Element('No','Nobelium',102,false,'#BD0D87',0,0,0,0);E.Lr=new Element('Lr','Lawrencium',103,false,'#C70066',0,0,0,0);E.Rf=new Element('Rf','Rutherfordium',104,false,'#CC0059',0,0,0,0);E.Db=new Element('Db','Dubnium',105,false,'#D1004F',0,0,0,0);E.Sg=new Element('Sg','Seaborgium',106,false,'#D90045',0,0,0,0);E.Bh=new Element('Bh','Bohrium',107,false,'#E00038',0,0,0,0);E.Hs=new Element('Hs','Hassium',108,false,'#E6002E',0,0,0,0);E.Mt=new Element('Mt','Meitnerium',109,false,'#EB0026',0,0,0,0);E.Ds=new Element('Ds','Darmstadtium',110,false,'#000000',0,0,0,0);E.Rg=new Element('Rg','Roentgenium',111,false,'#000000',0,0,0,0);E.Cn=new Element('Cn','Copernicium',112,false,'#000000',0,0,0,0);E.Nh=new Element('Nh','Nihonium',113,false,'#000000',0,0,0,0);E.Fl=new Element('Fl','Flerovium',114,false,'#000000',0,0,0,0);E.Mc=new Element('Mc','Moscovium',115,false,'#000000',0,0,0,0);E.Lv=new Element('Lv','Livermorium',116,false,'#000000',0,0,0,0);E.Ts=new Element('Ts','Tennessine',117,false,'#000000',0,0,0,0);E.Og=new Element('Og','Oganesson',118,false,'#000000',0,0,0,0);E.H.pymolColor='#E6E6E6';E.C.pymolColor='#33FF33';E.N.pymolColor='#3333FF';E.O.pymolColor='#FF4D4D';E.F.pymolColor='#B3FFFF';E.S.pymolColor='#E6C640';return E;}(ChemDoodle.SYMBOLS);ChemDoodle.RESIDUE=function(undefined){'use strict';var R=[];function Residue(symbol,name,polar,aminoColor,shapelyColor,acidity){this.symbol=symbol;this.name=name;this.polar=polar;this.aminoColor=aminoColor;this.shapelyColor=shapelyColor;this.acidity=acidity;}R.Ala=new Residue('Ala','Alanine',false,'#C8C8C8','#8CFF8C',0);R.Arg=new Residue('Arg','Arginine',true,'#145AFF','#00007C',1);R.Asn=new Residue('Asn','Asparagine',true,'#00DCDC','#FF7C70',0);R.Asp=new Residue('Asp','Aspartic Acid',true,'#E60A0A','#A00042',-1);R.Cys=new Residue('Cys','Cysteine',true,'#E6E600','#FFFF70',0);R.Gln=new Residue('Gln','Glutamine',true,'#00DCDC','#FF4C4C',0);R.Glu=new Residue('Glu','Glutamic Acid',true,'#E60A0A','#660000',-1);R.Gly=new Residue('Gly','Glycine',false,'#EBEBEB','#FFFFFF',0);R.His=new Residue('His','Histidine',true,'#8282D2','#7070FF',1);R.Ile=new Residue('Ile','Isoleucine',false,'#0F820F','#004C00',0);R.Leu=new Residue('Leu','Leucine',false,'#0F820F','#455E45',0);R.Lys=new Residue('Lys','Lysine',true,'#145AFF','#4747B8',1);R.Met=new Residue('Met','Methionine',false,'#E6E600','#B8A042',0);R.Phe=new Residue('Phe','Phenylalanine',false,'#3232AA','#534C52',0);R.Pro=new Residue('Pro','Proline',false,'#DC9682','#525252',0);R.Ser=new Residue('Ser','Serine',true,'#FA9600','#FF7042',0);R.Thr=new Residue('Thr','Threonine',true,'#FA9600','#B84C00',0);R.Trp=new Residue('Trp','Tryptophan',true,'#B45AB4','#4F4600',0);R.Tyr=new Residue('Tyr','Tyrosine',true,'#3232AA','#8C704C',0);R.Val=new Residue('Val','Valine',false,'#0F820F','#FF8CFF',0);R.Asx=new Residue('Asx','Asparagine/Aspartic Acid',true,'#FF69B4','#FF00FF',0);R.Glx=new Residue('Glx','Glutamine/Glutamic Acid',true,'#FF69B4','#FF00FF',0);R['*']=new Residue('*','Other',false,'#BEA06E','#FF00FF',0);R.A=new Residue('A','Adenine',false,'#BEA06E','#A0A0FF',0);R.G=new Residue('G','Guanine',false,'#BEA06E','#FF7070',0);R.I=new Residue('I','',false,'#BEA06E','#80FFFF',0);R.C=new Residue('C','Cytosine',false,'#BEA06E','#FF8C4B',0);R.T=new Residue('T','Thymine',false,'#BEA06E','#A0FFA0',0);R.U=new Residue('U','Uracil',false,'#BEA06E','#FF8080',0);return R;}();(function(structures,undefined){'use strict';// This is a more efficient Queue implementation other than using Array.shift() on each dequeue, which is very expensive\n// this is 2-3x faster\n/*\n\t * Creates a new Queue. A Queue is a first-in-first-out (FIFO) data\n\t * structure. Functions of the Queue object allow elements to be\n\t * enthis.queued and dethis.queued, the first element to be obtained without\n\t * dequeuing, and for the current size of the Queue and empty/non-empty\n\t * status to be obtained.\n\t */structures.Queue=function(){// the list of elements, initialised to the empty array\nthis.queue=[];};var _=structures.Queue.prototype;// the amount of space at the front of the this.queue, initialised to zero\n_.queueSpace=0;/*\n\t * Returns the size of this Queue. The size of a Queue is equal to the\n\t * number of elements that have been enthis.queued minus the number of\n\t * elements that have been dethis.queued.\n\t */_.getSize=function(){// return the number of elements in the this.queue\nreturn this.queue.length-this.queueSpace;};/*\n\t * Returns true if this Queue is empty, and false otherwise. A Queue is\n\t * empty if the number of elements that have been enthis.queued equals the\n\t * number of elements that have been dethis.queued.\n\t */_.isEmpty=function(){// return true if the this.queue is empty, and false otherwise\nreturn this.queue.length===0;};/*\n\t * Enthis.queues the specified element in this Queue. The parameter is:\n\t * \n\t * element - the element to enthis.queue\n\t */_.enqueue=function(element){this.queue.push(element);};/*\n\t * Dethis.queues an element from this Queue. The oldest element in this\n\t * Queue is removed and returned. If this Queue is empty then undefined is\n\t * returned.\n\t */_.dequeue=function(){// initialise the element to return to be undefined\nvar element;// check whether the this.queue is empty\nif(this.queue.length){// fetch the oldest element in the this.queue\nelement=this.queue[this.queueSpace];// update the amount of space and check whether a shift should\n// occur\nif(++this.queueSpace*2>=this.queue.length){// set the this.queue equal to the non-empty portion of the\n// this.queue\nthis.queue=this.queue.slice(this.queueSpace);// reset the amount of space at the front of the this.queue\nthis.queueSpace=0;}}// return the removed element\nreturn element;};/*\n\t * Returns the oldest element in this Queue. If this Queue is empty then\n\t * undefined is returned. This function returns the same value as the\n\t * dethis.queue function, but does not remove the returned element from this\n\t * Queue.\n\t */_.getOldestElement=function(){// initialise the element to return to be undefined\nvar element;// if the this.queue is not element then fetch the oldest element in the\n// this.queue\nif(this.queue.length){element=this.queue[this.queueSpace];}// return the oldest element\nreturn element;};})(ChemDoodle.structures);(function(structures,m,undefined){'use strict';structures.Point=function(x,y){this.x=x?x:0;this.y=y?y:0;};var _=structures.Point.prototype;_.sub=function(p){this.x-=p.x;this.y-=p.y;};_.add=function(p){this.x+=p.x;this.y+=p.y;};_.distance=function(p){var dx=p.x-this.x;var dy=p.y-this.y;return m.sqrt(dx*dx+dy*dy);};_.angleForStupidCanvasArcs=function(p){var dx=p.x-this.x;var dy=p.y-this.y;var angle=0;// Calculate angle\nif(dx===0){if(dy===0){angle=0;}else if(dy>0){angle=m.PI/2;}else{angle=3*m.PI/2;}}else if(dy===0){if(dx>0){angle=0;}else{angle=m.PI;}}else{if(dx<0){angle=m.atan(dy/dx)+m.PI;}else if(dy<0){angle=m.atan(dy/dx)+2*m.PI;}else{angle=m.atan(dy/dx);}}while(angle<0){angle+=m.PI*2;}angle=angle%(m.PI*2);return angle;};_.angle=function(p){// y is upside down to account for inverted canvas\nvar dx=p.x-this.x;var dy=this.y-p.y;var angle=0;// Calculate angle\nif(dx===0){if(dy===0){angle=0;}else if(dy>0){angle=m.PI/2;}else{angle=3*m.PI/2;}}else if(dy===0){if(dx>0){angle=0;}else{angle=m.PI;}}else{if(dx<0){angle=m.atan(dy/dx)+m.PI;}else if(dy<0){angle=m.atan(dy/dx)+2*m.PI;}else{angle=m.atan(dy/dx);}}while(angle<0){angle+=m.PI*2;}angle=angle%(m.PI*2);return angle;};})(ChemDoodle.structures,Math);(function(extensions,structures,m,undefined){'use strict';var COMMA_SPACE_REGEX=/[ ,]+/;var COMMA_DASH_REGEX=/\\-+/;var FONTS=['Helvetica','Arial','Dialog'];structures.Query=function(type){this.type=type;// atom properties\nthis.elements={v:[],not:false};this.charge=undefined;this.chirality=undefined;this.connectivity=undefined;this.connectivityNoH=undefined;this.hydrogens=undefined;this.saturation=undefined;// bond properties\nthis.orders={v:[],not:false};this.stereo=undefined;// generic properties\nthis.aromatic=undefined;this.ringCount=undefined;// cache the string value\nthis.cache=undefined;};structures.Query.TYPE_ATOM=0;structures.Query.TYPE_BOND=1;var _=structures.Query.prototype;_.parseRange=function(range){var points=[];var splits=range.split(COMMA_SPACE_REGEX);for(var i=0,ii=splits.length;i<ii;i++){var t=splits[i];var neg=false;var neg2=false;if(t.charAt(0)==='-'){neg=true;t=t.substring(1);}if(t.indexOf('--')!=-1){neg2=true;}if(t.indexOf('-')!=-1){var parts=t.split(COMMA_DASH_REGEX);var p={x:parseInt(parts[0])*(neg?-1:1),y:parseInt(parts[1])*(neg2?-1:1)};if(p.y<p.x){var tmp=p.y;p.y=p.x;p.x=tmp;}points.push(p);}else{points.push({x:parseInt(t)*(neg?-1:1)});}}return points;};_.draw=function(ctx,specs,pos){if(!this.cache){this.cache=this.toString();}var top=this.cache;var bottom=undefined;var split=top.indexOf('(');if(split!=-1){top=this.cache.substring(0,split);bottom=this.cache.substring(split,this.cache.length);}ctx.textAlign='center';ctx.textBaseline='middle';ctx.font=extensions.getFontString(12,FONTS,true,false);var tw=ctx.measureText(top).width;ctx.fillStyle=specs.backgroundColor;ctx.fillRect(pos.x-tw/2,pos.y-6,tw,12);ctx.fillStyle='black';ctx.fillText(top,pos.x,pos.y);if(bottom){ctx.font=extensions.getFontString(10,FONTS,false,true);tw=ctx.measureText(bottom).width;ctx.fillStyle=specs.backgroundColor;ctx.fillRect(pos.x-tw/2,pos.y+6,tw,11);ctx.fillStyle='black';ctx.fillText(bottom,pos.x,pos.y+11);}};_.outputRange=function(array){var comma=false;var sb=[];for(var i=0,ii=array.length;i<ii;i++){if(comma){sb.push(',');}comma=true;var p=array[i];if(p.y){sb.push(p.x);sb.push('-');sb.push(p.y);}else{sb.push(p.x);}}return sb.join('');};_.toString=function(){var sb=[];var attributes=[];if(this.type===structures.Query.TYPE_ATOM){if(!this.elements||this.elements.v.length===0){sb.push('[a]');}else{if(this.elements.not){sb.push('!');}sb.push('[');sb.push(this.elements.v.join(','));sb.push(']');}if(this.chirality){attributes.push((this.chirality.not?'!':'')+'@='+this.chirality.v);}if(this.aromatic){attributes.push((this.aromatic.not?'!':'')+'A');}if(this.charge){attributes.push((this.charge.not?'!':'')+'C='+this.outputRange(this.charge.v));}if(this.hydrogens){attributes.push((this.hydrogens.not?'!':'')+'H='+this.outputRange(this.hydrogens.v));}if(this.ringCount){attributes.push((this.ringCount.not?'!':'')+'R='+this.outputRange(this.ringCount.v));}if(this.saturation){attributes.push((this.saturation.not?'!':'')+'S');}if(this.connectivity){attributes.push((this.connectivity.not?'!':'')+'X='+this.outputRange(this.connectivity.v));}if(this.connectivityNoH){attributes.push((this.connectivityNoH.not?'!':'')+'x='+this.outputRange(this.connectivityNoH.v));}}else if(this.type===structures.Query.TYPE_BOND){if(!this.orders||this.orders.v.length===0){sb.push('[a]');}else{if(this.orders.not){sb.push('!');}sb.push('[');sb.push(this.orders.v.join(','));sb.push(']');}if(this.stereo){attributes.push((this.stereo.not?'!':'')+'@='+this.stereo.v);}if(this.aromatic){attributes.push((this.aromatic.not?'!':'')+'A');}if(this.ringCount){attributes.push((this.ringCount.not?'!':'')+'R='+this.outputRange(this.ringCount.v));}}if(attributes.length>0){sb.push('(');sb.push(attributes.join(','));sb.push(')');}return sb.join('');};})(ChemDoodle.extensions,ChemDoodle.structures,Math);(function(ELEMENT,extensions,math,structures,m,m4,undefined){'use strict';structures.Atom=function(label,x,y,z){this.label=label?label.replace(/\\s/g,''):'C';this.x=x?x:0;this.y=y?y:0;this.z=z?z:0;};var _=structures.Atom.prototype=new structures.Point(0,0);_.charge=0;_.numLonePair=0;_.numRadical=0;_.mass=-1;_.implicitH=-1;_.coordinationNumber=0;_.bondNumber=0;_.angleOfLeastInterference=0;_.isHidden=false;_.altLabel=undefined;_.isLone=false;_.isHover=false;_.isSelected=false;_.add3D=function(p){this.x+=p.x;this.y+=p.y;this.z+=p.z;};_.sub3D=function(p){this.x-=p.x;this.y-=p.y;this.z-=p.z;};_.distance3D=function(p){var dx=p.x-this.x;var dy=p.y-this.y;var dz=p.z-this.z;return m.sqrt(dx*dx+dy*dy+dz*dz);};_.draw=function(ctx,specs){if(this.dontDraw){// this is used when the atom shouldn't be visible, such as when the text input field is open over this atom\nreturn;}if(this.isLassoed){var grd=ctx.createRadialGradient(this.x-1,this.y-1,0,this.x,this.y,7);grd.addColorStop(0,'rgba(212, 99, 0, 0)');grd.addColorStop(0.7,'rgba(212, 99, 0, 0.8)');ctx.fillStyle=grd;ctx.beginPath();ctx.arc(this.x,this.y,5,0,m.PI*2,false);ctx.fill();}if(this.query){return;}this.textBounds=[];if(this.specs){specs=this.specs;}var font=extensions.getFontString(specs.atoms_font_size_2D,specs.atoms_font_families_2D,specs.atoms_font_bold_2D,specs.atoms_font_italic_2D);ctx.font=font;ctx.fillStyle=this.getElementColor(specs.atoms_useJMOLColors,specs.atoms_usePYMOLColors,specs.atoms_color,2);if(this.label==='H'&&specs.atoms_HBlack_2D){ctx.fillStyle='black';}if(this.error){ctx.fillStyle=specs.colorError;}var hAngle;var labelVisible=this.isLabelVisible(specs);if(this.isLone&&!labelVisible||specs.atoms_circles_2D){// always use carbon gray for lone carbon atom dots\nif(this.isLone){ctx.fillStyle='#909090';}ctx.beginPath();ctx.arc(this.x,this.y,specs.atoms_circleDiameter_2D/2,0,m.PI*2,false);ctx.fill();if(specs.atoms_circleBorderWidth_2D>0){ctx.lineWidth=specs.atoms_circleBorderWidth_2D;ctx.strokeStyle='black';ctx.stroke();}}else if(labelVisible){ctx.textAlign='center';ctx.textBaseline='middle';// keep check to undefined here as dev may set altLabel to empty\n// string\nif(this.altLabel!==undefined){// altLabel can be 0, so check if undefined\nctx.fillText(this.altLabel,this.x,this.y);var symbolWidth=ctx.measureText(this.altLabel).width;this.textBounds.push({x:this.x-symbolWidth/2,y:this.y-specs.atoms_font_size_2D/2+1,w:symbolWidth,h:specs.atoms_font_size_2D-2});}else if(!ELEMENT[this.label]){if(structures.CondensedLabel){// CondensedLabel is proprietary and not included in the GPL version\nif(!this.condensed||this.condensed.text!==this.label){this.condensed=new structures.CondensedLabel(this,this.label);}this.condensed.draw(ctx,specs);}else{ctx.fillText(this.label,this.x,this.y);var symbolWidth=ctx.measureText(this.label).width;this.textBounds.push({x:this.x-symbolWidth/2,y:this.y-specs.atoms_font_size_2D/2+1,w:symbolWidth,h:specs.atoms_font_size_2D-2});}}else{ctx.fillText(this.label,this.x,this.y);var symbolWidth=ctx.measureText(this.label).width;this.textBounds.push({x:this.x-symbolWidth/2,y:this.y-specs.atoms_font_size_2D/2+1,w:symbolWidth,h:specs.atoms_font_size_2D-2});// mass\nvar massWidth=0;if(this.mass!==-1){var fontSave=ctx.font;ctx.font=extensions.getFontString(specs.atoms_font_size_2D*.7,specs.atoms_font_families_2D,specs.atoms_font_bold_2D,specs.atoms_font_italic_2D);massWidth=ctx.measureText(this.mass).width;ctx.fillText(this.mass,this.x-massWidth-.5,this.y-specs.atoms_font_size_2D/2+1);this.textBounds.push({x:this.x-symbolWidth/2-massWidth-.5,y:this.y-specs.atoms_font_size_2D*1.7/2+1,w:massWidth,h:specs.atoms_font_size_2D/2-1});ctx.font=fontSave;}// implicit hydrogens\nvar chargeOffset=symbolWidth/2;var numHs=this.getImplicitHydrogenCount();if(specs.atoms_implicitHydrogens_2D&&numHs>0){hAngle=0;var hWidth=ctx.measureText('H').width;var moveCharge=true;if(numHs>1){var xoffset=symbolWidth/2+hWidth/2;var yoffset=0;var subFont=extensions.getFontString(specs.atoms_font_size_2D*.8,specs.atoms_font_families_2D,specs.atoms_font_bold_2D,specs.atoms_font_italic_2D);ctx.font=subFont;var numWidth=ctx.measureText(numHs).width;if(this.bondNumber===1){if(this.angleOfLeastInterference>m.PI/2&&this.angleOfLeastInterference<3*m.PI/2){xoffset=-symbolWidth/2-numWidth-hWidth/2-massWidth/2;moveCharge=false;hAngle=m.PI;}}else{if(this.angleOfLeastInterference<=m.PI/4){// default\n}else if(this.angleOfLeastInterference<3*m.PI/4){xoffset=0;yoffset=-specs.atoms_font_size_2D*.9;if(this.charge!==0){yoffset-=specs.atoms_font_size_2D*.3;}moveCharge=false;hAngle=m.PI/2;}else if(this.angleOfLeastInterference<=5*m.PI/4){xoffset=-symbolWidth/2-numWidth-hWidth/2-massWidth/2;moveCharge=false;hAngle=m.PI;}else if(this.angleOfLeastInterference<7*m.PI/4){xoffset=0;yoffset=specs.atoms_font_size_2D*.9;moveCharge=false;hAngle=3*m.PI/2;}}ctx.font=font;ctx.fillText('H',this.x+xoffset,this.y+yoffset);ctx.font=subFont;ctx.fillText(numHs,this.x+xoffset+hWidth/2+numWidth/2,this.y+yoffset+specs.atoms_font_size_2D*.3);this.textBounds.push({x:this.x+xoffset-hWidth/2,y:this.y+yoffset-specs.atoms_font_size_2D/2+1,w:hWidth,h:specs.atoms_font_size_2D-2});this.textBounds.push({x:this.x+xoffset+hWidth/2,y:this.y+yoffset+specs.atoms_font_size_2D*.3-specs.atoms_font_size_2D/2+1,w:numWidth,h:specs.atoms_font_size_2D*.8-2});}else{var xoffset=symbolWidth/2+hWidth/2;var yoffset=0;if(this.bondNumber===1){if(this.angleOfLeastInterference>m.PI/2&&this.angleOfLeastInterference<3*m.PI/2){xoffset=-symbolWidth/2-hWidth/2-massWidth/2;moveCharge=false;hAngle=m.PI;}}else{if(this.angleOfLeastInterference<=m.PI/4){// default\n}else if(this.angleOfLeastInterference<3*m.PI/4){xoffset=0;yoffset=-specs.atoms_font_size_2D*.9;moveCharge=false;hAngle=m.PI/2;}else if(this.angleOfLeastInterference<=5*m.PI/4){xoffset=-symbolWidth/2-hWidth/2-massWidth/2;moveCharge=false;hAngle=m.PI;}else if(this.angleOfLeastInterference<7*m.PI/4){xoffset=0;yoffset=specs.atoms_font_size_2D*.9;moveCharge=false;hAngle=3*m.PI/2;}}ctx.fillText('H',this.x+xoffset,this.y+yoffset);this.textBounds.push({x:this.x+xoffset-hWidth/2,y:this.y+yoffset-specs.atoms_font_size_2D/2+1,w:hWidth,h:specs.atoms_font_size_2D-2});}if(moveCharge){chargeOffset+=hWidth;}// adjust the angles metadata to account for hydrogen\n// placement\n/*\n\t\t\t\t\t * this.angles.push(hAngle); var angleData =\n\t\t\t\t\t * math.angleBetweenLargest(this.angles);\n\t\t\t\t\t * this.angleOfLeastInterference = angleData.angle % (m.PI *\n\t\t\t\t\t * 2); this.largestAngle = angleData.largest;\n\t\t\t\t\t */}// charge\nif(this.charge!==0){var s=this.charge.toFixed(0);if(s==='1'){s='+';}else if(s==='-1'){s=\"\\u2013\";}else if(extensions.stringStartsWith(s,'-')){s=s.substring(1)+\"\\u2013\";}else{s+='+';}var chargeWidth=ctx.measureText(s).width;chargeOffset+=chargeWidth/2;ctx.textAlign='center';ctx.textBaseline='middle';ctx.font=extensions.getFontString(m.floor(specs.atoms_font_size_2D*.8),specs.atoms_font_families_2D,specs.atoms_font_bold_2D,specs.atoms_font_italic_2D);ctx.fillText(s,this.x+chargeOffset-1,this.y-specs.atoms_font_size_2D/2+1);this.textBounds.push({x:this.x+chargeOffset-chargeWidth/2-1,y:this.y-specs.atoms_font_size_2D*1.8/2+5,w:chargeWidth,h:specs.atoms_font_size_2D/2-1});}}}if(this.numLonePair>0||this.numRadical>0){ctx.fillStyle='black';var as=this.angles.slice(0);var ali=this.angleOfLeastInterference;var la=this.largestAngle;if(hAngle!==undefined){// have to check for undefined here as this number can be 0\nas.push(hAngle);as.sort(function(a,b){return a-b;});var angleData=math.angleBetweenLargest(as);ali=angleData.angle%(m.PI*2);la=angleData.largest;}var things=[];for(var i=0;i<this.numLonePair;i++){things.push({t:2});}for(var i=0;i<this.numRadical;i++){things.push({t:1});}if(hAngle===undefined&&m.abs(la-2*m.PI/as.length)<m.PI/60){var mid=m.ceil(things.length/as.length);for(var i=0,ii=things.length;i<ii;i+=mid,ali+=la){this.drawElectrons(ctx,specs,things.slice(i,m.min(things.length,i+mid)),ali,la,hAngle);}}else{this.drawElectrons(ctx,specs,things,ali,la,hAngle);}}// for debugging atom label dimensions\n//ctx.strokeStyle = 'red'; for(var i = 0, ii = this.textBounds.length;i<ii; i++){ var r = this.textBounds[i];ctx.beginPath();ctx.rect(r.x, r.y, r.w, r.h); ctx.stroke(); }\n};_.drawElectrons=function(ctx,specs,things,angle,largest,hAngle){var segment=largest/(things.length+(this.bonds.length===0&&hAngle===undefined?0:1));var angleStart=angle-largest/2+segment;for(var i=0;i<things.length;i++){var t=things[i];var angle=angleStart+i*segment;var p1x=this.x+Math.cos(angle)*specs.atoms_lonePairDistance_2D;var p1y=this.y-Math.sin(angle)*specs.atoms_lonePairDistance_2D;if(t.t===2){var perp=angle+Math.PI/2;var difx=Math.cos(perp)*specs.atoms_lonePairSpread_2D/2;var dify=-Math.sin(perp)*specs.atoms_lonePairSpread_2D/2;ctx.beginPath();ctx.arc(p1x+difx,p1y+dify,specs.atoms_lonePairDiameter_2D,0,m.PI*2,false);ctx.fill();ctx.beginPath();ctx.arc(p1x-difx,p1y-dify,specs.atoms_lonePairDiameter_2D,0,m.PI*2,false);ctx.fill();}else if(t.t===1){ctx.beginPath();ctx.arc(p1x,p1y,specs.atoms_lonePairDiameter_2D,0,m.PI*2,false);ctx.fill();}}};_.drawDecorations=function(ctx,specs){if(this.isHover||this.isSelected){ctx.strokeStyle=this.isHover?specs.colorHover:specs.colorSelect;ctx.lineWidth=1.2;ctx.beginPath();var radius=this.isHover?7:15;ctx.arc(this.x,this.y,radius,0,m.PI*2,false);ctx.stroke();}if(this.isOverlap){ctx.strokeStyle=specs.colorError;ctx.lineWidth=1.2;ctx.beginPath();ctx.arc(this.x,this.y,7,0,m.PI*2,false);ctx.stroke();}};_.render=function(gl,specs,noColor){if(this.specs){specs=this.specs;}var transform=m4.translate(m4.identity(),[this.x,this.y,this.z]);var radius=specs.atoms_useVDWDiameters_3D?ELEMENT[this.label].vdWRadius*specs.atoms_vdwMultiplier_3D:specs.atoms_sphereDiameter_3D/2;if(radius===0){radius=1;}m4.scale(transform,[radius,radius,radius]);// colors\nif(!noColor){var color=specs.atoms_color;if(specs.atoms_useJMOLColors){color=ELEMENT[this.label].jmolColor;}else if(specs.atoms_usePYMOLColors){color=ELEMENT[this.label].pymolColor;}gl.material.setDiffuseColor(gl,color);}// render\ngl.shader.setMatrixUniforms(gl,transform);var buffer=this.renderAsStar?gl.starBuffer:gl.sphereBuffer;gl.drawElements(gl.TRIANGLES,buffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);};_.renderHighlight=function(gl,specs){if(this.isSelected||this.isHover){if(this.specs){specs=this.specs;}var transform=m4.translate(m4.identity(),[this.x,this.y,this.z]);var radius=specs.atoms_useVDWDiameters_3D?ELEMENT[this.label].vdWRadius*specs.atoms_vdwMultiplier_3D:specs.atoms_sphereDiameter_3D/2;if(radius===0){radius=1;}radius*=1.3;m4.scale(transform,[radius,radius,radius]);gl.shader.setMatrixUniforms(gl,transform);gl.material.setDiffuseColor(gl,this.isHover?specs.colorHover:specs.colorSelect);var buffer=this.renderAsStar?gl.starBuffer:gl.sphereBuffer;gl.drawElements(gl.TRIANGLES,buffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}};_.isLabelVisible=function(specs){if(specs.atoms_displayAllCarbonLabels_2D){// show all carbons\nreturn true;}if(this.label!=='C'){// not a carbon\nreturn true;}if(this.altLabel||!ELEMENT[this.label]){// there is an alternative or condensed label\nreturn true;}if(this.mass!==-1||this.implicitH!==-1||this.charge!==0){// an isotope or charge or implicit hydrogen override designation, so label must be shown\nreturn true;}if(specs.atoms_showAttributedCarbons_2D&&(this.numRadical!==0||this.numLonePair!==0)){// there are attributes and we want to show the associated label\nreturn true;}if(this.isHidden&&specs.atoms_showHiddenCarbons_2D){// if it is hidden and we want to show them\nreturn true;}if(specs.atoms_displayTerminalCarbonLabels_2D&&this.bondNumber===1){// if it is terminal and we want to show them\nreturn true;}return false;};_.getImplicitHydrogenCount=function(){if(!ELEMENT[this.label]||!ELEMENT[this.label].addH){return 0;}if(this.implicitH!==-1){return this.implicitH;}if(this.label==='H'){return 0;}var valence=ELEMENT[this.label].valency;var dif=valence-this.coordinationNumber;if(this.numRadical>0){dif=m.max(0,dif-this.numRadical);}if(this.charge>0){var vdif=4-valence;if(this.charge<=vdif){dif+=this.charge;}else{dif=4-this.coordinationNumber-this.charge+vdif;}}else{dif+=this.charge;}return dif<0?0:m.floor(dif);};_.getBounds=function(){var bounds=new math.Bounds();bounds.expand(this.x,this.y);if(this.textBounds){for(var i=0,ii=this.textBounds.length;i<ii;i++){var tb=this.textBounds[i];bounds.expand(tb.x,tb.y,tb.x+tb.w,tb.y+tb.h);}}return bounds;};_.getBounds3D=function(){var bounds=new math.Bounds();bounds.expand3D(this.x,this.y,this.z);return bounds;};/**\n\t * Get Color by atom element.\n\t * \n\t * @param {boolean}\n\t *            useJMOLColors\n\t * @param {boolean}\n\t *            usePYMOLColors\n\t * @param {string}\n\t *            color The default color\n\t * @param {number}\n\t *            dim The render dimension\n\t * @return {string} The atom element color\n\t */_.getElementColor=function(useJMOLColors,usePYMOLColors,color){if(!ELEMENT[this.label]){return'#000';}if(useJMOLColors){color=ELEMENT[this.label].jmolColor;}else if(usePYMOLColors){color=ELEMENT[this.label].pymolColor;}return color;};})(ChemDoodle.ELEMENT,ChemDoodle.extensions,ChemDoodle.math,ChemDoodle.structures,Math,ChemDoodle.lib.mat4);(function(ELEMENT,extensions,structures,math,m,m4,v3,undefined){'use strict';structures.Bond=function(a1,a2,bondOrder){this.a1=a1;this.a2=a2;// bondOrder can be 0, so need to check against undefined\nthis.bondOrder=bondOrder!==undefined?bondOrder:1;};structures.Bond.STEREO_NONE='none';structures.Bond.STEREO_PROTRUDING='protruding';structures.Bond.STEREO_RECESSED='recessed';structures.Bond.STEREO_AMBIGUOUS='ambiguous';var _=structures.Bond.prototype;_.stereo=structures.Bond.STEREO_NONE;_.isHover=false;_.ring=undefined;_.getCenter=function(){return new structures.Point((this.a1.x+this.a2.x)/2,(this.a1.y+this.a2.y)/2);};_.getLength=function(){return this.a1.distance(this.a2);};_.getLength3D=function(){return this.a1.distance3D(this.a2);};_.contains=function(a){return a===this.a1||a===this.a2;};_.getNeighbor=function(a){if(a===this.a1){return this.a2;}else if(a===this.a2){return this.a1;}return undefined;};_.draw=function(ctx,specs){if(this.a1.x===this.a2.x&&this.a1.y===this.a2.y){// return, as there is nothing to render, will only cause fill\n// overflows\nreturn;}if(this.specs){specs=this.specs;}var x1=this.a1.x;var x2=this.a2.x;var y1=this.a1.y;var y2=this.a2.y;var dist=this.a1.distance(this.a2);var difX=x2-x1;var difY=y2-y1;if(this.a1.isLassoed&&this.a2.isLassoed){var grd=ctx.createLinearGradient(x1,y1,x2,y2);grd.addColorStop(0,'rgba(212, 99, 0, 0)');grd.addColorStop(0.5,'rgba(212, 99, 0, 0.8)');grd.addColorStop(1,'rgba(212, 99, 0, 0)');var useDist=2.5;var perpendicular=this.a1.angle(this.a2)+m.PI/2;var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);var cx1=x1-mcosp*useDist;var cy1=y1+msinp*useDist;var cx2=x1+mcosp*useDist;var cy2=y1-msinp*useDist;var cx3=x2+mcosp*useDist;var cy3=y2-msinp*useDist;var cx4=x2-mcosp*useDist;var cy4=y2+msinp*useDist;ctx.fillStyle=grd;ctx.beginPath();ctx.moveTo(cx1,cy1);ctx.lineTo(cx2,cy2);ctx.lineTo(cx3,cy3);ctx.lineTo(cx4,cy4);ctx.closePath();ctx.fill();}if(specs.atoms_display&&!specs.atoms_circles_2D&&this.a1.isLabelVisible(specs)&&this.a1.textBounds){var distShrink=0;for(var i=0,ii=this.a1.textBounds.length;i<ii;i++){distShrink=Math.max(distShrink,math.calculateDistanceInterior(this.a1,this.a2,this.a1.textBounds[i]));}distShrink+=specs.bonds_atomLabelBuffer_2D;var perc=distShrink/dist;x1+=difX*perc;y1+=difY*perc;}if(specs.atoms_display&&!specs.atoms_circles_2D&&this.a2.isLabelVisible(specs)&&this.a2.textBounds){var distShrink=0;for(var i=0,ii=this.a2.textBounds.length;i<ii;i++){distShrink=Math.max(distShrink,math.calculateDistanceInterior(this.a2,this.a1,this.a2.textBounds[i]));}distShrink+=specs.bonds_atomLabelBuffer_2D;var perc=distShrink/dist;x2-=difX*perc;y2-=difY*perc;}if(specs.bonds_clearOverlaps_2D){var xs=x1+difX*.15;var ys=y1+difY*.15;var xf=x2-difX*.15;var yf=y2-difY*.15;ctx.strokeStyle=specs.backgroundColor;ctx.lineWidth=specs.bonds_width_2D+specs.bonds_overlapClearWidth_2D*2;ctx.lineCap='round';ctx.beginPath();ctx.moveTo(xs,ys);ctx.lineTo(xf,yf);ctx.closePath();ctx.stroke();}ctx.strokeStyle=this.error?specs.colorError:specs.bonds_color;ctx.fillStyle=this.error?specs.colorError:specs.bonds_color;ctx.lineWidth=specs.bonds_width_2D;ctx.lineCap=specs.bonds_ends_2D;if(specs.bonds_splitColor){var linearGradient=ctx.createLinearGradient(x1,y1,x2,y2);var specs1=this.a1.specs?this.a1.specs:specs;var specs2=this.a2.specs?this.a2.specs:specs;var color1=this.a1.getElementColor(specs1.atoms_useJMOLColors,specs1.atoms_usePYMOLColors,specs1.atoms_color,2);var color2=this.a2.getElementColor(specs2.atoms_useJMOLColors,specs2.atoms_usePYMOLColors,specs2.atoms_color,2);linearGradient.addColorStop(0,color1);if(!specs.bonds_colorGradient){linearGradient.addColorStop(0.5,color1);linearGradient.addColorStop(0.51,color2);}linearGradient.addColorStop(1,color2);ctx.strokeStyle=linearGradient;ctx.fillStyle=linearGradient;}if(specs.bonds_lewisStyle_2D&&this.bondOrder%1===0){this.drawLewisStyle(ctx,specs,x1,y1,x2,y2);}else{switch(this.query?1:this.bondOrder){case 0:var dx=x2-x1;var dy=y2-y1;var innerDist=m.sqrt(dx*dx+dy*dy);var num=m.floor(innerDist/specs.bonds_dotSize_2D);var remainder=(innerDist-(num-1)*specs.bonds_dotSize_2D)/2;if(num%2===1){remainder+=specs.bonds_dotSize_2D/4;}else{remainder-=specs.bonds_dotSize_2D/4;num+=2;}num/=2;var angle=this.a1.angle(this.a2);var xs=x1+remainder*Math.cos(angle);var ys=y1-remainder*Math.sin(angle);ctx.beginPath();for(var i=0;i<num;i++){ctx.arc(xs,ys,specs.bonds_dotSize_2D/2,0,m.PI*2,false);xs+=2*specs.bonds_dotSize_2D*Math.cos(angle);ys-=2*specs.bonds_dotSize_2D*Math.sin(angle);}ctx.fill();break;case 0.5:ctx.beginPath();ctx.moveTo(x1,y1);ctx.lineTo(x2,y2);ctx.setLineDash([specs.bonds_hashSpacing_2D,specs.bonds_hashSpacing_2D]);ctx.stroke();ctx.setLineDash([]);break;case 1:if(!this.query&&(this.stereo===structures.Bond.STEREO_PROTRUDING||this.stereo===structures.Bond.STEREO_RECESSED)){var thinSpread=specs.bonds_width_2D/2;var useDist=specs.bonds_wedgeThickness_2D/2;var perpendicular=this.a1.angle(this.a2)+m.PI/2;var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);var cx1=x1-mcosp*thinSpread;var cy1=y1+msinp*thinSpread;var cx2=x1+mcosp*thinSpread;var cy2=y1-msinp*thinSpread;var cx3=x2+mcosp*useDist;var cy3=y2-msinp*useDist;var cx4=x2-mcosp*useDist;var cy4=y2+msinp*useDist;ctx.beginPath();ctx.moveTo(cx1,cy1);ctx.lineTo(cx2,cy2);ctx.lineTo(cx3,cy3);ctx.lineTo(cx4,cy4);ctx.closePath();if(this.stereo===structures.Bond.STEREO_PROTRUDING){ctx.fill();}else{ctx.save();ctx.clip();ctx.lineWidth=useDist*2;ctx.lineCap='butt';ctx.beginPath();ctx.moveTo(x1,y1);// workaround to lengthen distance for Firefox as there is a bug, shouldn't affect rendering or performance\nvar dx=x2-x1;var dy=y2-y1;ctx.lineTo(x2+5*dx,y2+5*dy);ctx.setLineDash([specs.bonds_hashWidth_2D,specs.bonds_hashSpacing_2D]);ctx.stroke();ctx.setLineDash([]);ctx.restore();}}else if(!this.query&&this.stereo===structures.Bond.STEREO_AMBIGUOUS){ctx.beginPath();ctx.moveTo(x1,y1);var curves=m.floor(m.sqrt(difX*difX+difY*difY)/specs.bonds_wavyLength_2D);var x=x1;var y=y1;var perpendicular=this.a1.angle(this.a2)+m.PI/2;var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);var curveX=difX/curves;var curveY=difY/curves;var cpx1,cpx2,cpy1,cpy2;for(var i=0,ii=curves;i<ii;i++){x+=curveX;y+=curveY;cpx1=specs.bonds_wavyLength_2D*mcosp+x-curveX*0.5;cpy1=specs.bonds_wavyLength_2D*-msinp+y-curveY*0.5;cpx2=specs.bonds_wavyLength_2D*-mcosp+x-curveX*0.5;cpy2=specs.bonds_wavyLength_2D*msinp+y-curveY*0.5;if(i%2===0){ctx.quadraticCurveTo(cpx1,cpy1,x,y);}else{ctx.quadraticCurveTo(cpx2,cpy2,x,y);}}ctx.stroke();break;}else{ctx.beginPath();ctx.moveTo(x1,y1);ctx.lineTo(x2,y2);ctx.stroke();if(this.query){this.query.draw(ctx,specs,this.getCenter());}}break;case 1.5:case 2:var angle=this.a1.angle(this.a2);var perpendicular=angle+m.PI/2;var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);var dist=this.a1.distance(this.a2);var useDist=specs.bonds_useAbsoluteSaturationWidths_2D?specs.bonds_saturationWidthAbs_2D/2:dist*specs.bonds_saturationWidth_2D/2;if(this.stereo===structures.Bond.STEREO_AMBIGUOUS){var cx1=x1-mcosp*useDist;var cy1=y1+msinp*useDist;var cx2=x1+mcosp*useDist;var cy2=y1-msinp*useDist;var cx3=x2+mcosp*useDist;var cy3=y2-msinp*useDist;var cx4=x2-mcosp*useDist;var cy4=y2+msinp*useDist;ctx.beginPath();ctx.moveTo(cx1,cy1);ctx.lineTo(cx3,cy3);ctx.moveTo(cx2,cy2);ctx.lineTo(cx4,cy4);ctx.stroke();}else if(!specs.bonds_symmetrical_2D&&(this.ring||this.a1.label==='C'&&this.a2.label==='C')){ctx.beginPath();ctx.moveTo(x1,y1);ctx.lineTo(x2,y2);ctx.stroke();var clip=0;useDist*=2;var clipAngle=specs.bonds_saturationAngle_2D;if(clipAngle<m.PI/2){clip=-(useDist/m.tan(clipAngle));}if(m.abs(clip)<dist/2){var xuse1=x1-m.cos(angle)*clip;var xuse2=x2+m.cos(angle)*clip;var yuse1=y1+m.sin(angle)*clip;var yuse2=y2-m.sin(angle)*clip;var cx1=xuse1-mcosp*useDist;var cy1=yuse1+msinp*useDist;var cx2=xuse1+mcosp*useDist;var cy2=yuse1-msinp*useDist;var cx3=xuse2-mcosp*useDist;var cy3=yuse2+msinp*useDist;var cx4=xuse2+mcosp*useDist;var cy4=yuse2-msinp*useDist;var flip=!this.ring||this.ring.center.angle(this.a1)>this.ring.center.angle(this.a2)&&!(this.ring.center.angle(this.a1)-this.ring.center.angle(this.a2)>m.PI)||this.ring.center.angle(this.a1)-this.ring.center.angle(this.a2)<-m.PI;ctx.beginPath();if(flip){ctx.moveTo(cx1,cy1);ctx.lineTo(cx3,cy3);}else{ctx.moveTo(cx2,cy2);ctx.lineTo(cx4,cy4);}if(this.bondOrder!==2){ctx.setLineDash([specs.bonds_hashSpacing_2D,specs.bonds_hashSpacing_2D]);}ctx.stroke();ctx.setLineDash([]);}}else{var cx1=x1-mcosp*useDist;var cy1=y1+msinp*useDist;var cx2=x1+mcosp*useDist;var cy2=y1-msinp*useDist;var cx3=x2+mcosp*useDist;var cy3=y2-msinp*useDist;var cx4=x2-mcosp*useDist;var cy4=y2+msinp*useDist;ctx.beginPath();ctx.moveTo(cx1,cy1);ctx.lineTo(cx4,cy4);ctx.stroke();ctx.beginPath();ctx.moveTo(cx2,cy2);ctx.lineTo(cx3,cy3);if(this.bondOrder!==2){ctx.setLineDash([specs.bonds_hashWidth_2D,specs.bonds_hashSpacing_2D]);}ctx.stroke();ctx.setLineDash([]);}break;case 3:var useDist=specs.bonds_useAbsoluteSaturationWidths_2D?specs.bonds_saturationWidthAbs_2D:this.a1.distance(this.a2)*specs.bonds_saturationWidth_2D;var perpendicular=this.a1.angle(this.a2)+m.PI/2;var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);var cx1=x1-mcosp*useDist;var cy1=y1+msinp*useDist;var cx2=x1+mcosp*useDist;var cy2=y1-msinp*useDist;var cx3=x2+mcosp*useDist;var cy3=y2-msinp*useDist;var cx4=x2-mcosp*useDist;var cy4=y2+msinp*useDist;ctx.beginPath();ctx.moveTo(cx1,cy1);ctx.lineTo(cx4,cy4);ctx.moveTo(cx2,cy2);ctx.lineTo(cx3,cy3);ctx.moveTo(x1,y1);ctx.lineTo(x2,y2);ctx.stroke();break;}}};_.drawDecorations=function(ctx,specs){if(this.isHover||this.isSelected){var pi2=2*m.PI;var angle=(this.a1.angleForStupidCanvasArcs(this.a2)+m.PI/2)%pi2;ctx.strokeStyle=this.isHover?specs.colorHover:specs.colorSelect;ctx.lineWidth=1.2;ctx.beginPath();var angleTo=(angle+m.PI)%pi2;angleTo=angleTo%(m.PI*2);ctx.arc(this.a1.x,this.a1.y,7,angle,angleTo,false);ctx.stroke();ctx.beginPath();angle+=m.PI;angleTo=(angle+m.PI)%pi2;ctx.arc(this.a2.x,this.a2.y,7,angle,angleTo,false);ctx.stroke();}};_.drawLewisStyle=function(ctx,specs,x1,y1,x2,y2){var angle=this.a1.angle(this.a2);var perp=angle+m.PI/2;var difx=x2-x1;var dify=y2-y1;var increment=m.sqrt(difx*difx+dify*dify)/(this.bondOrder+1);var xi=increment*m.cos(angle);var yi=-increment*m.sin(angle);var x=x1+xi;var y=y1+yi;for(var i=0;i<this.bondOrder;i++){var sep=specs.atoms_lonePairSpread_2D/2;var cx1=x-m.cos(perp)*sep;var cy1=y+m.sin(perp)*sep;var cx2=x+m.cos(perp)*sep;var cy2=y-m.sin(perp)*sep;ctx.beginPath();ctx.arc(cx1-specs.atoms_lonePairDiameter_2D/2,cy1-specs.atoms_lonePairDiameter_2D/2,specs.atoms_lonePairDiameter_2D,0,m.PI*2,false);ctx.fill();ctx.beginPath();ctx.arc(cx2-specs.atoms_lonePairDiameter_2D/2,cy2-specs.atoms_lonePairDiameter_2D/2,specs.atoms_lonePairDiameter_2D,0,m.PI*2,false);ctx.fill();x+=xi;y+=yi;}};/**\n\t * \n\t * @param {WegGLRenderingContext}\n\t *            gl\n\t * @param {structures.VisualSpecifications}\n\t *            specs\n\t * @param {boolean}\n\t *            asSegments Using cylinder/solid line or segmented pills/dashed\n\t *            line\n\t * @return {void}\n\t */_.render=function(gl,specs,asSegments){if(this.specs){specs=this.specs;}// this is the elongation vector for the cylinder\nvar height=this.a1.distance3D(this.a2);if(height===0){// if there is no height, then no point in rendering this bond,\n// just return\nreturn;}// scale factor for cylinder/pill radius.\n// when scale pill, the cap will affected too.\nvar radiusScale=specs.bonds_cylinderDiameter_3D/2;// atom1 color and atom2 color\nvar a1Color=specs.bonds_color;var a2Color;// transform to the atom as well as the opposite atom (for Jmol and\n// PyMOL\n// color splits)\nvar transform=m4.translate(m4.identity(),[this.a1.x,this.a1.y,this.a1.z]);var transformOpposite;// vector from atom1 to atom2\nvar a2b=[this.a2.x-this.a1.x,this.a2.y-this.a1.y,this.a2.z-this.a1.z];// calculate the rotation\nvar y=[0,1,0];var ang=0;var axis;if(this.a1.x===this.a2.x&&this.a1.z===this.a2.z){axis=[0,0,1];if(this.a2.y<this.a1.y){ang=m.PI;}}else{ang=extensions.vec3AngleFrom(y,a2b);axis=v3.cross(y,a2b,[]);}// the specs will split color are\n// - Line\n// - Stick\n// - Wireframe\nif(specs.bonds_splitColor){var specs1=this.a1.specs?this.a1.specs:specs;var specs2=this.a2.specs?this.a2.specs:specs;a1Color=this.a1.getElementColor(specs1.atoms_useJMOLColors,specs1.atoms_usePYMOLColors,specs1.atoms_color);a2Color=this.a2.getElementColor(specs2.atoms_useJMOLColors,specs2.atoms_usePYMOLColors,specs2.atoms_color);// the transformOpposite will use for split color.\n// just make it splited if the color different.\nif(a1Color!=a2Color){transformOpposite=m4.translate(m4.identity(),[this.a2.x,this.a2.y,this.a2.z]);}}// calculate the translations for unsaturated bonds.\n// represenattio use saturatedCross are\n// - Line\n// - Wireframe\n// - Ball and Stick\n// just Stick will set bonds_showBondOrders_3D to false\nvar others=[0];var saturatedCross;if(asSegments){// block for draw bond as segmented line/pill\nif(specs.bonds_showBondOrders_3D&&this.bondOrder>1){// The \"0.5\" part set here,\n// the other part (1) will render as cylinder\nothers=[/*-specs.bonds_cylinderDiameter_3D, */specs.bonds_cylinderDiameter_3D];var z=[0,0,1];var inverse=m4.inverse(gl.rotationMatrix,[]);m4.multiplyVec3(inverse,z);saturatedCross=v3.cross(a2b,z,[]);v3.normalize(saturatedCross);}var segmentScale=1;var spaceBetweenPill=specs.bonds_pillSpacing_3D;var pillHeight=specs.bonds_pillHeight_3D;if(this.bondOrder==0){if(specs.bonds_renderAsLines_3D){pillHeight=spaceBetweenPill;}else{pillHeight=specs.bonds_pillDiameter_3D;// Detect Ball and Stick representation\nif(pillHeight<specs.bonds_cylinderDiameter_3D){pillHeight/=2;}segmentScale=pillHeight/2;height/=segmentScale;spaceBetweenPill/=segmentScale/2;}}// total space need for one pill, iclude the space.\nvar totalSpaceForPill=pillHeight+spaceBetweenPill;// segmented pills for one bond.\nvar totalPillsPerBond=height/totalSpaceForPill;// segmented one unit pill for one bond\nvar pillsPerBond=m.floor(totalPillsPerBond);var extraSegmentedSpace=height-totalSpaceForPill*pillsPerBond;var paddingSpace=(spaceBetweenPill+specs.bonds_pillDiameter_3D+extraSegmentedSpace)/2;// pillSegmentsLength will change if both atom1 and atom2 color used\n// for rendering\nvar pillSegmentsLength=pillsPerBond;if(transformOpposite){// floor will effected for odd pills, because one pill at the\n// center\n// will replace with splited pills\npillSegmentsLength=m.floor(pillsPerBond/2);}// render bonds\nfor(var i=0,ii=others.length;i<ii;i++){var transformUse=m4.set(transform,[]);if(others[i]!==0){m4.translate(transformUse,v3.scale(saturatedCross,others[i],[]));}if(ang!==0){m4.rotate(transformUse,ang,axis);}if(segmentScale!=1){m4.scale(transformUse,[segmentScale,segmentScale,segmentScale]);}// colors\nif(a1Color)gl.material.setDiffuseColor(gl,a1Color);m4.translate(transformUse,[0,paddingSpace,0]);for(var j=0;j<pillSegmentsLength;j++){if(specs.bonds_renderAsLines_3D){if(this.bondOrder==0){gl.shader.setMatrixUniforms(gl,transformUse);gl.drawArrays(gl.POINTS,0,1);}else{m4.scale(transformUse,[1,pillHeight,1]);gl.shader.setMatrixUniforms(gl,transformUse);gl.drawArrays(gl.LINES,0,gl.lineBuffer.vertexPositionBuffer.numItems);m4.scale(transformUse,[1,1/pillHeight,1]);}}else{gl.shader.setMatrixUniforms(gl,transformUse);if(this.bondOrder==0){gl.drawElements(gl.TRIANGLES,gl.sphereBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}else{gl.drawElements(gl.TRIANGLES,gl.pillBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}}m4.translate(transformUse,[0,totalSpaceForPill,0]);}// if rendering segmented pill use atom1 and atom2 color\nif(transformOpposite){// parameter for calculate splited pills\nvar scaleY,halfOneMinScaleY;if(specs.bonds_renderAsLines_3D){scaleY=pillHeight;// if(this.bondOrder != 0) {\n// scaleY -= spaceBetweenPill;\n// }\nscaleY/=2;halfOneMinScaleY=0;}else{scaleY=2/3;halfOneMinScaleY=(1-scaleY)/2;}// if count of pills per bound is odd,\n// then draw the splited pills of atom1\nif(pillsPerBond%2!=0){m4.scale(transformUse,[1,scaleY,1]);gl.shader.setMatrixUniforms(gl,transformUse);if(specs.bonds_renderAsLines_3D){if(this.bondOrder==0){gl.drawArrays(gl.POINTS,0,1);}else{gl.drawArrays(gl.LINES,0,gl.lineBuffer.vertexPositionBuffer.numItems);}}else{if(this.bondOrder==0){gl.drawElements(gl.TRIANGLES,gl.sphereBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}else{gl.drawElements(gl.TRIANGLES,gl.pillBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}}m4.translate(transformUse,[0,totalSpaceForPill*(1+halfOneMinScaleY),0]);m4.scale(transformUse,[1,1/scaleY,1]);}// prepare to render the atom2\nm4.set(transformOpposite,transformUse);if(others[i]!==0){m4.translate(transformUse,v3.scale(saturatedCross,others[i],[]));}// don't check for 0 here as that means it should be rotated\n// by PI, but PI will be negated\nm4.rotate(transformUse,ang+m.PI,axis);if(segmentScale!=1){m4.scale(transformUse,[segmentScale,segmentScale,segmentScale]);}// colors\nif(a2Color){gl.material.setDiffuseColor(gl,a2Color);}m4.translate(transformUse,[0,paddingSpace,0]);// draw the remain pills which use the atom2 color\nfor(var j=0;j<pillSegmentsLength;j++){if(specs.bonds_renderAsLines_3D){if(this.bondOrder==0){gl.shader.setMatrixUniforms(gl,transformUse);gl.drawArrays(gl.POINTS,0,1);}else{m4.scale(transformUse,[1,pillHeight,1]);gl.shader.setMatrixUniforms(gl,transformUse);gl.drawArrays(gl.LINES,0,gl.lineBuffer.vertexPositionBuffer.numItems);m4.scale(transformUse,[1,1/pillHeight,1]);}}else{gl.shader.setMatrixUniforms(gl,transformUse);if(this.bondOrder==0){gl.drawElements(gl.TRIANGLES,gl.sphereBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}else{gl.drawElements(gl.TRIANGLES,gl.pillBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}}m4.translate(transformUse,[0,totalSpaceForPill,0]);}// draw the splited center pills of atom2\nif(pillsPerBond%2!=0){m4.scale(transformUse,[1,scaleY,1]);gl.shader.setMatrixUniforms(gl,transformUse);if(specs.bonds_renderAsLines_3D){if(this.bondOrder==0){gl.drawArrays(gl.POINTS,0,1);}else{gl.drawArrays(gl.LINES,0,gl.lineBuffer.vertexPositionBuffer.numItems);}}else{if(this.bondOrder==0){gl.drawElements(gl.TRIANGLES,gl.sphereBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}else{gl.drawElements(gl.TRIANGLES,gl.pillBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}}m4.translate(transformUse,[0,totalSpaceForPill*(1+halfOneMinScaleY),0]);m4.scale(transformUse,[1,1/scaleY,1]);}}}}else{// calculate the translations for unsaturated bonds.\n// represenation that use saturatedCross are\n// - Line\n// - Wireframe\n// - Ball and Stick\n// just Stick will set bonds_showBondOrders_3D to false\nif(specs.bonds_showBondOrders_3D){switch(this.bondOrder){// the 0 and 0.5 bond order will draw as segmented pill.\n// so we not set that here.\n// case 0:\n// case 0.5: break;\ncase 1.5:// The \"1\" part set here,\n// the other part (0.5) will render as segmented pill\nothers=[-specs.bonds_cylinderDiameter_3D/*\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * specs.bonds_cylinderDiameter_3D\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */];break;case 2:others=[-specs.bonds_cylinderDiameter_3D,specs.bonds_cylinderDiameter_3D];break;case 3:others=[-1.2*specs.bonds_cylinderDiameter_3D,0,1.2*specs.bonds_cylinderDiameter_3D];break;}// saturatedCross just need for need for bondorder greather than\n// 1\nif(this.bondOrder>1){var z=[0,0,1];var inverse=m4.inverse(gl.rotationMatrix,[]);m4.multiplyVec3(inverse,z);saturatedCross=v3.cross(a2b,z,[]);v3.normalize(saturatedCross);}}// for Stick representation, we just change the cylinder radius\nelse{switch(this.bondOrder){case 0:radiusScale*=0.25;break;case 0.5:case 1.5:radiusScale*=0.5;break;}}// if transformOpposite is set, the it mean the color must be\n// splited.\n// so the heigh of cylinder will be half.\n// one half for atom1 color the other for atom2 color\nif(transformOpposite){height/=2;}// Radius of cylinder already defined when initialize cylinder mesh,\n// so at this rate, the scale just needed for Y to strech\n// cylinder to bond length (height) and X and Z for radius.\nvar scaleVector=[radiusScale,height,radiusScale];// render bonds\nfor(var i=0,ii=others.length;i<ii;i++){var transformUse=m4.set(transform,[]);if(others[i]!==0){m4.translate(transformUse,v3.scale(saturatedCross,others[i],[]));}if(ang!==0){m4.rotate(transformUse,ang,axis);}m4.scale(transformUse,scaleVector);// colors\nif(a1Color)gl.material.setDiffuseColor(gl,a1Color);// render\ngl.shader.setMatrixUniforms(gl,transformUse);if(specs.bonds_renderAsLines_3D){gl.drawArrays(gl.LINES,0,gl.lineBuffer.vertexPositionBuffer.numItems);}else{gl.drawArrays(gl.TRIANGLE_STRIP,0,gl.cylinderBuffer.vertexPositionBuffer.numItems);}// if transformOpposite is set, then a2Color also shoudl be\n// seted as well.\nif(transformOpposite){m4.set(transformOpposite,transformUse);if(others[i]!==0){m4.translate(transformUse,v3.scale(saturatedCross,others[i],[]));}// don't check for 0 here as that means it should be rotated\n// by PI, but PI will be negated\nm4.rotate(transformUse,ang+m.PI,axis);m4.scale(transformUse,scaleVector);// colors\nif(a2Color)gl.material.setDiffuseColor(gl,a2Color);// render\ngl.shader.setMatrixUniforms(gl,transformUse);if(specs.bonds_renderAsLines_3D){gl.drawArrays(gl.LINES,0,gl.lineBuffer.vertexPositionBuffer.numItems);}else{gl.drawArrays(gl.TRIANGLE_STRIP,0,gl.cylinderBuffer.vertexPositionBuffer.numItems);}}}}};_.renderHighlight=function(gl,specs){if(this.isSelected||this.isHover){if(this.specs){specs=this.specs;}if(this.specs){specs=this.specs;}// this is the elongation vector for the cylinder\nvar height=this.a1.distance3D(this.a2);if(height===0){// if there is no height, then no point in rendering this bond,\n// just return\nreturn;}// scale factor for cylinder/pill radius.\n// when scale pill, the cap will affected too.\nvar radiusScale=specs.bonds_cylinderDiameter_3D/1.2;var transform=m4.translate(m4.identity(),[this.a1.x,this.a1.y,this.a1.z]);// vector from atom1 to atom2\nvar a2b=[this.a2.x-this.a1.x,this.a2.y-this.a1.y,this.a2.z-this.a1.z];// calculate the rotation\nvar y=[0,1,0];var ang=0;var axis;if(this.a1.x===this.a2.x&&this.a1.z===this.a2.z){axis=[0,0,1];if(this.a2.y<this.a1.y){ang=m.PI;}}else{ang=extensions.vec3AngleFrom(y,a2b);axis=v3.cross(y,a2b,[]);}var scaleVector=[radiusScale,height,radiusScale];if(ang!==0){m4.rotate(transform,ang,axis);}m4.scale(transform,scaleVector);gl.shader.setMatrixUniforms(gl,transform);gl.material.setDiffuseColor(gl,this.isHover?specs.colorHover:specs.colorSelect);gl.drawArrays(gl.TRIANGLE_STRIP,0,gl.cylinderBuffer.vertexPositionBuffer.numItems);}};/**\n\t * \n\t * @param {WegGLRenderingContext}\n\t *            gl\n\t * @param {structures.VisualSpecifications}\n\t *            specs\n\t * @return {void}\n\t */_.renderPicker=function(gl,specs){// gl.cylinderBuffer.bindBuffers(gl);\n// gl.material.setDiffuseColor(\n// this.bondOrder == 0 ? '#FF0000' : // merah\n// this.bondOrder == 0.5 ? '#FFFF00' : // kuning\n// this.bondOrder == 1 ? '#FF00FF' : // ungu\n// this.bondOrder == 1.5 ? '#00FF00' : // hijau\n// this.bondOrder == 2 ? '#00FFFF' : // cyan\n// this.bondOrder == 3 ? '#0000FF' : // biru\n// '#FFFFFF');\n// gl.material.setAlpha(1);\nif(this.specs){specs=this.specs;}// this is the elongation vector for the cylinder\nvar height=this.a1.distance3D(this.a2);if(height===0){// if there is no height, then no point in rendering this bond,\n// just return\nreturn;}// scale factor for cylinder/pill radius.\n// when scale pill, the cap will affected too.\nvar radiusScale=specs.bonds_cylinderDiameter_3D/2;// transform to the atom as well as the opposite atom (for Jmol and\n// PyMOL\n// color splits)\nvar transform=m4.translate(m4.identity(),[this.a1.x,this.a1.y,this.a1.z]);// vector from atom1 to atom2\nvar a2b=[this.a2.x-this.a1.x,this.a2.y-this.a1.y,this.a2.z-this.a1.z];// calculate the rotation\nvar y=[0,1,0];var ang=0;var axis;if(this.a1.x===this.a2.x&&this.a1.z===this.a2.z){axis=[0,0,1];if(this.a2.y<this.a1.y){ang=m.PI;}}else{ang=extensions.vec3AngleFrom(y,a2b);axis=v3.cross(y,a2b,[]);}// calculate the translations for unsaturated bonds.\n// represenattio use saturatedCross are\n// - Line\n// - WIreframe\n// - Ball and Stick\n// just Stick will set bonds_showBondOrders_3D to false\nvar others=[0];var saturatedCross;if(specs.bonds_showBondOrders_3D){if(specs.bonds_renderAsLines_3D){switch(this.bondOrder){case 1.5:case 2:others=[-specs.bonds_cylinderDiameter_3D,specs.bonds_cylinderDiameter_3D];break;case 3:others=[-1.2*specs.bonds_cylinderDiameter_3D,0,1.2*specs.bonds_cylinderDiameter_3D];break;}// saturatedCross just need for need for bondorder greather than\n// 1\nif(this.bondOrder>1){var z=[0,0,1];var inverse=m4.inverse(gl.rotationMatrix,[]);m4.multiplyVec3(inverse,z);saturatedCross=v3.cross(a2b,z,[]);v3.normalize(saturatedCross);}}else{switch(this.bondOrder){case 1.5:case 2:radiusScale*=3;break;case 3:radiusScale*=3.4;break;}}}else{// this is for Stick repersentation because Stick not have\n// bonds_showBondOrders_3D\nswitch(this.bondOrder){case 0:radiusScale*=0.25;break;case 0.5:case 1.5:radiusScale*=0.5;break;}}// Radius of cylinder already defined when initialize cylinder mesh,\n// so at this rate, the scale just needed for Y to strech\n// cylinder to bond length (height) and X and Z for radius.\nvar scaleVector=[radiusScale,height,radiusScale];// render bonds\nfor(var i=0,ii=others.length;i<ii;i++){var transformUse=m4.set(transform,[]);if(others[i]!==0){m4.translate(transformUse,v3.scale(saturatedCross,others[i],[]));}if(ang!==0){m4.rotate(transformUse,ang,axis);}m4.scale(transformUse,scaleVector);// render\ngl.shader.setMatrixUniforms(gl,transformUse);if(specs.bonds_renderAsLines_3D){gl.drawArrays(gl.LINES,0,gl.lineBuffer.vertexPositionBuffer.numItems);}else{gl.drawArrays(gl.TRIANGLE_STRIP,0,gl.cylinderBuffer.vertexPositionBuffer.numItems);}}};})(ChemDoodle.ELEMENT,ChemDoodle.extensions,ChemDoodle.structures,ChemDoodle.math,Math,ChemDoodle.lib.mat4,ChemDoodle.lib.vec3);(function(structures,m,undefined){'use strict';structures.Ring=function(){this.atoms=[];this.bonds=[];};var _=structures.Ring.prototype;_.center=undefined;_.setupBonds=function(){for(var i=0,ii=this.bonds.length;i<ii;i++){this.bonds[i].ring=this;}this.center=this.getCenter();};_.getCenter=function(){var minX=Infinity,minY=Infinity,maxX=-Infinity,maxY=-Infinity;for(var i=0,ii=this.atoms.length;i<ii;i++){minX=m.min(this.atoms[i].x,minX);minY=m.min(this.atoms[i].y,minY);maxX=m.max(this.atoms[i].x,maxX);maxY=m.max(this.atoms[i].y,maxY);}return new structures.Point((maxX+minX)/2,(maxY+minY)/2);};})(ChemDoodle.structures,Math);(function(c,math,structures,RESIDUE,m,undefined){'use strict';structures.Molecule=function(){this.atoms=[];this.bonds=[];this.rings=[];};var _=structures.Molecule.prototype;// this can be an extensive algorithm for large molecules, you may want\n// to turn this off\n_.findRings=true;_.draw=function(ctx,specs){if(this.specs){specs=this.specs;}// draw\n// need this weird render of atoms before and after, just in case\n// circles are rendered, as those should be on top\nif(specs.atoms_display&&!specs.atoms_circles_2D){for(var i=0,ii=this.atoms.length;i<ii;i++){this.atoms[i].draw(ctx,specs);}}if(specs.bonds_display){for(var i=0,ii=this.bonds.length;i<ii;i++){this.bonds[i].draw(ctx,specs);}}if(specs.atoms_display){for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];if(specs.atoms_circles_2D){a.draw(ctx,specs);}if(a.query){a.query.draw(ctx,specs,a);}}}};_.render=function(gl,specs){// uncomment this to render the picking frame\n// return this.renderPickFrame(gl, specs, []);\nif(this.specs){specs=this.specs;}// check explicitly if it is undefined here, since hetatm is a\n// boolean that can be true or false, as long as it is set, it is\n// macro\nvar isMacro=this.atoms.length>0&&this.atoms[0].hetatm!==undefined;if(isMacro){if(specs.macro_displayBonds){if(this.bonds.length>0){if(specs.bonds_renderAsLines_3D&&!this.residueSpecs||this.residueSpecs&&this.residueSpecs.bonds_renderAsLines_3D){gl.lineWidth(this.residueSpecs?this.residueSpecs.bonds_width_2D:specs.bonds_width_2D);gl.lineBuffer.bindBuffers(gl);}else{gl.cylinderBuffer.bindBuffers(gl);}// colors\ngl.material.setTempColors(gl,specs.bonds_materialAmbientColor_3D,undefined,specs.bonds_materialSpecularColor_3D,specs.bonds_materialShininess_3D);}for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];// closestDistance may be 0, so check if undefined\nif(!b.a1.hetatm&&(specs.macro_atomToLigandDistance===-1||b.a1.closestDistance!==undefined&&specs.macro_atomToLigandDistance>=b.a1.closestDistance&&specs.macro_atomToLigandDistance>=b.a2.closestDistance)){b.render(gl,this.residueSpecs?this.residueSpecs:specs);}}}if(specs.macro_displayAtoms){if(this.atoms.length>0){gl.sphereBuffer.bindBuffers(gl);// colors\ngl.material.setTempColors(gl,specs.atoms_materialAmbientColor_3D,undefined,specs.atoms_materialSpecularColor_3D,specs.atoms_materialShininess_3D);}for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];// closestDistance may be 0, so check if undefined\nif(!a.hetatm&&(specs.macro_atomToLigandDistance===-1||a.closestDistance!==undefined&&specs.macro_atomToLigandDistance>=a.closestDistance)){a.render(gl,this.residueSpecs?this.residueSpecs:specs);}}}}if(specs.bonds_display){// Array for Half Bonds. It is needed because Half Bonds use the\n// pill buffer.\nvar asPills=[];// Array for 0 bond order.\nvar asSpheres=[];if(this.bonds.length>0){if(specs.bonds_renderAsLines_3D){gl.lineWidth(specs.bonds_width_2D);gl.lineBuffer.bindBuffers(gl);}else{gl.cylinderBuffer.bindBuffers(gl);}// colors\ngl.material.setTempColors(gl,specs.bonds_materialAmbientColor_3D,undefined,specs.bonds_materialSpecularColor_3D,specs.bonds_materialShininess_3D);}for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];if(!isMacro||b.a1.hetatm){// Check if render as segmented pill will used.\nif(specs.bonds_showBondOrders_3D){if(b.bondOrder==0){// 0 bond order\nasSpheres.push(b);}else if(b.bondOrder==0.5){// 0.5 bond order\nasPills.push(b);}else{if(b.bondOrder==1.5){// For 1.5 bond order, the \"1\" part will render\n// as cylinder, and the \"0.5\" part will render\n// as segmented pills\nasPills.push(b);}b.render(gl,specs);}}else{// this will render the Stick representation\nb.render(gl,specs);}}}// Render the Half Bond\nif(asPills.length>0){// if bonds_renderAsLines_3D is true, then lineBuffer will\n// binded.\n// so in here we just need to check if we need to change\n// the binding buffer to pillBuffer or not.\nif(!specs.bonds_renderAsLines_3D){gl.pillBuffer.bindBuffers(gl);}for(var i=0,ii=asPills.length;i<ii;i++){asPills[i].render(gl,specs,true);}}// Render zero bond order\nif(asSpheres.length>0){// if bonds_renderAsLines_3D is true, then lineBuffer will\n// binded.\n// so in here we just need to check if we need to change\n// the binding buffer to pillBuffer or not.\nif(!specs.bonds_renderAsLines_3D){gl.sphereBuffer.bindBuffers(gl);}for(var i=0,ii=asSpheres.length;i<ii;i++){asSpheres[i].render(gl,specs,true);}}}if(specs.atoms_display){for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];a.bondNumber=0;a.renderAsStar=false;}for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];b.a1.bondNumber++;b.a2.bondNumber++;}if(this.atoms.length>0){gl.sphereBuffer.bindBuffers(gl);// colors\ngl.material.setTempColors(gl,specs.atoms_materialAmbientColor_3D,undefined,specs.atoms_materialSpecularColor_3D,specs.atoms_materialShininess_3D);}var asStars=[];for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];if(!isMacro||a.hetatm&&(specs.macro_showWater||!a.isWater)){if(specs.atoms_nonBondedAsStars_3D&&a.bondNumber===0){a.renderAsStar=true;asStars.push(a);}else{a.render(gl,specs);}}}if(asStars.length>0){gl.starBuffer.bindBuffers(gl);for(var i=0,ii=asStars.length;i<ii;i++){asStars[i].render(gl,specs);}}}if(this.chains){// set up the model view matrix, since it won't be modified\n// for macromolecules\ngl.shader.setMatrixUniforms(gl);// render chains\nif(specs.proteins_displayRibbon){// proteins\n// colors\ngl.material.setTempColors(gl,specs.proteins_materialAmbientColor_3D,undefined,specs.proteins_materialSpecularColor_3D,specs.proteins_materialShininess_3D);var uses=specs.proteins_ribbonCartoonize?this.cartoons:this.ribbons;for(var j=0,jj=uses.length;j<jj;j++){var use=uses[j];if(specs.proteins_residueColor!=='none'){use.front.bindBuffers(gl);var rainbow=specs.proteins_residueColor==='rainbow';for(var i=0,ii=use.front.segments.length;i<ii;i++){if(rainbow){gl.material.setDiffuseColor(gl,math.rainbowAt(i,ii,specs.macro_rainbowColors));}use.front.segments[i].render(gl,specs);}use.back.bindBuffers(gl);for(var i=0,ii=use.back.segments.length;i<ii;i++){if(rainbow){gl.material.setDiffuseColor(gl,math.rainbowAt(i,ii,specs.macro_rainbowColors));}use.back.segments[i].render(gl,specs);}}else{use.front.render(gl,specs);use.back.render(gl,specs);}}}if(specs.proteins_displayPipePlank){for(var j=0,jj=this.pipePlanks.length;j<jj;j++){this.pipePlanks[j].render(gl,specs);}}if(specs.proteins_displayBackbone){if(!this.alphaCarbonTrace){// cache the alpha carbon trace\nthis.alphaCarbonTrace={nodes:[],edges:[]};for(var j=0,jj=this.chains.length;j<jj;j++){var rs=this.chains[j];var isNucleotide=rs.length>2&&RESIDUE[rs[2].name]&&RESIDUE[rs[2].name].aminoColor==='#BEA06E';if(!isNucleotide&&rs.length>0){for(var i=0,ii=rs.length-2;i<ii;i++){var n=rs[i].cp1;n.chainColor=rs.chainColor;this.alphaCarbonTrace.nodes.push(n);var b=new structures.Bond(rs[i].cp1,rs[i+1].cp1);b.residueName=rs[i].name;b.chainColor=rs.chainColor;this.alphaCarbonTrace.edges.push(b);if(i===rs.length-3){n=rs[i+1].cp1;n.chainColor=rs.chainColor;this.alphaCarbonTrace.nodes.push(n);}}}}}if(this.alphaCarbonTrace.nodes.length>0){var traceSpecs=new structures.VisualSpecifications();traceSpecs.atoms_display=true;traceSpecs.bonds_display=true;traceSpecs.atoms_sphereDiameter_3D=specs.proteins_backboneThickness;traceSpecs.bonds_cylinderDiameter_3D=specs.proteins_backboneThickness;traceSpecs.bonds_splitColor=false;traceSpecs.atoms_color=specs.proteins_backboneColor;traceSpecs.bonds_color=specs.proteins_backboneColor;traceSpecs.atoms_useVDWDiameters_3D=false;// colors\ngl.material.setTempColors(gl,specs.proteins_materialAmbientColor_3D,undefined,specs.proteins_materialSpecularColor_3D,specs.proteins_materialShininess_3D);gl.material.setDiffuseColor(gl,specs.proteins_backboneColor);for(var i=0,ii=this.alphaCarbonTrace.nodes.length;i<ii;i++){var n=this.alphaCarbonTrace.nodes[i];if(specs.macro_colorByChain){traceSpecs.atoms_color=n.chainColor;}gl.sphereBuffer.bindBuffers(gl);n.render(gl,traceSpecs);}for(var i=0,ii=this.alphaCarbonTrace.edges.length;i<ii;i++){var e=this.alphaCarbonTrace.edges[i];var color;var r=RESIDUE[e.residueName]?RESIDUE[e.residueName]:RESIDUE['*'];if(specs.macro_colorByChain){color=e.chainColor;}else if(specs.proteins_residueColor==='shapely'){color=r.shapelyColor;}else if(specs.proteins_residueColor==='amino'){color=r.aminoColor;}else if(specs.proteins_residueColor==='polarity'){if(r.polar){color='#C10000';}else{color='#FFFFFF';}}else if(specs.proteins_residueColor==='acidity'){if(r.acidity===1){color='#0000FF';}else if(r.acidity===-1){color='#FF0000';}else if(r.polar){color='#FFFFFF';}else{color='#773300';}}else if(specs.proteins_residueColor==='rainbow'){color=math.rainbowAt(i,ii,specs.macro_rainbowColors);}if(color){traceSpecs.bonds_color=color;}gl.cylinderBuffer.bindBuffers(gl);e.render(gl,traceSpecs);}}}if(specs.nucleics_display){// nucleic acids\n// colors\ngl.material.setTempColors(gl,specs.nucleics_materialAmbientColor_3D,undefined,specs.nucleics_materialSpecularColor_3D,specs.nucleics_materialShininess_3D);for(var j=0,jj=this.tubes.length;j<jj;j++){gl.shader.setMatrixUniforms(gl);var use=this.tubes[j];use.render(gl,specs);}}}if(specs.atoms_display){var highlight=false;for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];if(a.isHover||a.isSelected){highlight=true;break;}}if(!highlight){for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];if(b.isHover||b.isSelected){highlight=true;break;}}}if(highlight){gl.sphereBuffer.bindBuffers(gl);// colors\ngl.blendFunc(gl.SRC_ALPHA,gl.ONE);gl.material.setTempColors(gl,specs.atoms_materialAmbientColor_3D,undefined,'#000000',0);gl.enable(gl.BLEND);gl.depthMask(false);gl.material.setAlpha(gl,.4);gl.sphereBuffer.bindBuffers(gl);for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];if(a.isHover||a.isSelected){a.renderHighlight(gl,specs);}}gl.cylinderBuffer.bindBuffers(gl);for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];if(b.isHover||b.isSelected){b.renderHighlight(gl,specs);}}gl.depthMask(true);gl.disable(gl.BLEND);gl.blendFuncSeparate(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA,gl.ONE,gl.ONE_MINUS_SRC_ALPHA);}}};_.renderPickFrame=function(gl,specs,objects,includeAtoms,includeBonds){if(this.specs){specs=this.specs;}var isMacro=this.atoms.length>0&&this.atoms[0].hetatm!==undefined;if(includeBonds&&specs.bonds_display){if(this.bonds.length>0){if(specs.bonds_renderAsLines_3D){gl.lineWidth(specs.bonds_width_2D);gl.lineBuffer.bindBuffers(gl);}else{gl.cylinderBuffer.bindBuffers(gl);}}for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];if(!isMacro||b.a1.hetatm){gl.material.setDiffuseColor(gl,math.idx2color(objects.length));b.renderPicker(gl,specs);objects.push(b);}}}if(includeAtoms&&specs.atoms_display){for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];a.bondNumber=0;a.renderAsStar=false;}for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];b.a1.bondNumber++;b.a2.bondNumber++;}if(this.atoms.length>0){gl.sphereBuffer.bindBuffers(gl);}var asStars=[];for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];if(!isMacro||a.hetatm&&(specs.macro_showWater||!a.isWater)){if(specs.atoms_nonBondedAsStars_3D&&a.bondNumber===0){a.renderAsStar=true;asStars.push(a);}else{gl.material.setDiffuseColor(gl,math.idx2color(objects.length));a.render(gl,specs,true);objects.push(a);}}}if(asStars.length>0){gl.starBuffer.bindBuffers(gl);for(var i=0,ii=asStars.length;i<ii;i++){var a=asStars[i];gl.material.setDiffuseColor(gl,math.idx2color(objects.length));a.render(gl,specs,true);objects.push(a);}}}};_.getCenter3D=function(){if(this.atoms.length===1){return new structures.Atom('C',this.atoms[0].x,this.atoms[0].y,this.atoms[0].z);}var minX=Infinity,minY=Infinity,minZ=Infinity;var maxX=-Infinity,maxY=-Infinity,maxZ=-Infinity;if(this.chains){// residues\nfor(var i=0,ii=this.chains.length;i<ii;i++){var chain=this.chains[i];for(var j=0,jj=chain.length;j<jj;j++){var residue=chain[j];minX=m.min(residue.cp1.x,residue.cp2.x,minX);minY=m.min(residue.cp1.y,residue.cp2.y,minY);minZ=m.min(residue.cp1.z,residue.cp2.z,minZ);maxX=m.max(residue.cp1.x,residue.cp2.x,maxX);maxY=m.max(residue.cp1.y,residue.cp2.y,maxY);maxZ=m.max(residue.cp1.z,residue.cp2.z,maxZ);}}}for(var i=0,ii=this.atoms.length;i<ii;i++){minX=m.min(this.atoms[i].x,minX);minY=m.min(this.atoms[i].y,minY);minZ=m.min(this.atoms[i].z,minZ);maxX=m.max(this.atoms[i].x,maxX);maxY=m.max(this.atoms[i].y,maxY);maxZ=m.max(this.atoms[i].z,maxZ);}return new structures.Atom('C',(maxX+minX)/2,(maxY+minY)/2,(maxZ+minZ)/2);};_.getCenter=function(){if(this.atoms.length===1){return new structures.Point(this.atoms[0].x,this.atoms[0].y);}var minX=Infinity,minY=Infinity;var maxX=-Infinity,maxY=-Infinity;for(var i=0,ii=this.atoms.length;i<ii;i++){minX=m.min(this.atoms[i].x,minX);minY=m.min(this.atoms[i].y,minY);maxX=m.max(this.atoms[i].x,maxX);maxY=m.max(this.atoms[i].y,maxY);}return new structures.Point((maxX+minX)/2,(maxY+minY)/2);};_.getDimension=function(){if(this.atoms.length===1){return new structures.Point(0,0);}var minX=Infinity,minY=Infinity;var maxX=-Infinity,maxY=-Infinity;if(this.chains){for(var i=0,ii=this.chains.length;i<ii;i++){var chain=this.chains[i];for(var j=0,jj=chain.length;j<jj;j++){var residue=chain[j];minX=m.min(residue.cp1.x,residue.cp2.x,minX);minY=m.min(residue.cp1.y,residue.cp2.y,minY);maxX=m.max(residue.cp1.x,residue.cp2.x,maxX);maxY=m.max(residue.cp1.y,residue.cp2.y,maxY);}}minX-=30;minY-=30;maxX+=30;maxY+=30;}for(var i=0,ii=this.atoms.length;i<ii;i++){minX=m.min(this.atoms[i].x,minX);minY=m.min(this.atoms[i].y,minY);maxX=m.max(this.atoms[i].x,maxX);maxY=m.max(this.atoms[i].y,maxY);}return new structures.Point(maxX-minX,maxY-minY);};_.check=function(force){// using force improves efficiency, so changes will not be checked\n// until a render occurs\n// you can force a check by sending true to this function after\n// calling check with a false\nif(force&&this.doChecks){// only check if the number of bonds has changed\nif(this.findRings){if(this.bonds.length-this.atoms.length!==this.fjNumCache){// find rings\nthis.rings=new c.informatics.SSSRFinder(this).rings;for(var i=0,ii=this.bonds.length;i<ii;i++){this.bonds[i].ring=undefined;}for(var i=0,ii=this.rings.length;i<ii;i++){this.rings[i].setupBonds();}}else{// update rings if any\nfor(var i=0,ii=this.rings.length;i<ii;i++){var r=this.rings[i];r.center=r.getCenter();}}}// find lones\nfor(var i=0,ii=this.atoms.length;i<ii;i++){this.atoms[i].isLone=false;if(this.atoms[i].label==='C'){var counter=0;for(var j=0,jj=this.bonds.length;j<jj;j++){if(this.bonds[j].a1===this.atoms[i]||this.bonds[j].a2===this.atoms[i]){counter++;}}if(counter===0){this.atoms[i].isLone=true;}}}// sort\nvar sort=false;for(var i=0,ii=this.atoms.length;i<ii;i++){if(this.atoms[i].z!==0){sort=true;}}if(sort){this.sortAtomsByZ();this.sortBondsByZ();}// setup metadata\nthis.setupMetaData();this.atomNumCache=this.atoms.length;this.bondNumCache=this.bonds.length;// fj number cache doesnt care if there are separate molecules,\n// as the change will signal a need to check for rings; the\n// accuracy doesn't matter\nthis.fjNumCache=this.bonds.length-this.atoms.length;}this.doChecks=!force;};_.getAngles=function(a){var angles=[];for(var i=0,ii=this.bonds.length;i<ii;i++){if(this.bonds[i].contains(a)){angles.push(a.angle(this.bonds[i].getNeighbor(a)));}}angles.sort(function(a,b){return a-b;});return angles;};_.getCoordinationNumber=function(bs){var coordinationNumber=0;for(var i=0,ii=bs.length;i<ii;i++){coordinationNumber+=bs[i].bondOrder;}return coordinationNumber;};_.getBonds=function(a){var bonds=[];for(var i=0,ii=this.bonds.length;i<ii;i++){if(this.bonds[i].contains(a)){bonds.push(this.bonds[i]);}}return bonds;};_.sortAtomsByZ=function(){for(var i=1,ii=this.atoms.length;i<ii;i++){var index=i;while(index>0&&this.atoms[index].z<this.atoms[index-1].z){var hold=this.atoms[index];this.atoms[index]=this.atoms[index-1];this.atoms[index-1]=hold;index--;}}};_.sortBondsByZ=function(){for(var i=1,ii=this.bonds.length;i<ii;i++){var index=i;while(index>0&&this.bonds[index].a1.z+this.bonds[index].a2.z<this.bonds[index-1].a1.z+this.bonds[index-1].a2.z){var hold=this.bonds[index];this.bonds[index]=this.bonds[index-1];this.bonds[index-1]=hold;index--;}}};_.setupMetaData=function(){var center=this.getCenter();for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];a.bonds=this.getBonds(a);a.angles=this.getAngles(a);a.isHidden=a.bonds.length===2&&m.abs(m.abs(a.angles[1]-a.angles[0])-m.PI)<m.PI/30&&a.bonds[0].bondOrder===a.bonds[1].bondOrder;var angleData=math.angleBetweenLargest(a.angles);a.angleOfLeastInterference=angleData.angle%(m.PI*2);a.largestAngle=angleData.largest;a.coordinationNumber=this.getCoordinationNumber(a.bonds);a.bondNumber=a.bonds.length;a.molCenter=center;}for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];b.molCenter=center;}};_.scaleToAverageBondLength=function(length){var avBondLength=this.getAverageBondLength();if(avBondLength!==0){var scale=length/avBondLength;for(var i=0,ii=this.atoms.length;i<ii;i++){this.atoms[i].x*=scale;this.atoms[i].y*=scale;}}};_.getAverageBondLength=function(){if(this.bonds.length===0){return 0;}var tot=0;for(var i=0,ii=this.bonds.length;i<ii;i++){tot+=this.bonds[i].getLength();}tot/=this.bonds.length;return tot;};_.getBounds=function(){var bounds=new math.Bounds();for(var i=0,ii=this.atoms.length;i<ii;i++){bounds.expand(this.atoms[i].getBounds());}if(this.chains){for(var i=0,ii=this.chains.length;i<ii;i++){var chain=this.chains[i];for(var j=0,jj=chain.length;j<jj;j++){var residue=chain[j];bounds.expand(residue.cp1.x,residue.cp1.y);bounds.expand(residue.cp2.x,residue.cp2.y);}}bounds.minX-=30;bounds.minY-=30;bounds.maxX+=30;bounds.maxY+=30;}return bounds;};_.getBounds3D=function(){var bounds=new math.Bounds();for(var i=0,ii=this.atoms.length;i<ii;i++){bounds.expand(this.atoms[i].getBounds3D());}if(this.chains){for(var i=0,ii=this.chains.length;i<ii;i++){var chain=this.chains[i];for(var j=0,jj=chain.length;j<jj;j++){var residue=chain[j];bounds.expand3D(residue.cp1.x,residue.cp1.y,residue.cp1.z);bounds.expand3D(residue.cp2.x,residue.cp2.y,residue.cp2.z);}}}return bounds;};_.getAtomGroup=function(a){var ring=false;for(var i=0,ii=this.atoms.length;i<ii;i++){this.atoms[i].visited=false;}for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];if(!ring&&b.contains(a)&&b.ring!==undefined){ring=true;}}if(!ring){return undefined;}var set=[a];a.visited=true;var q=new structures.Queue();q.enqueue(a);while(!q.isEmpty()){var atom=q.dequeue();for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];if(b.contains(atom)&&ring===(b.ring!==undefined)){var n=b.getNeighbor(atom);if(!n.visited){n.visited=true;set.push(n);q.enqueue(n);}}}}return set;};_.getBondGroup=function(b){var ring=b.ring!==undefined;var contained=false;for(var i=0,ii=this.bonds.length;i<ii;i++){var bi=this.bonds[i];if(bi===b){contained=true;}bi.visited=false;}if(!contained){// this bond isn't part of the molecule\nreturn undefined;}var set=[b];b.visited=true;var q=new structures.Queue();q.enqueue(b);while(!q.isEmpty()){var bond=q.dequeue();for(var i=0,ii=this.bonds.length;i<ii;i++){var n=this.bonds[i];if(!n.visited&&(n.a1===bond.a1||n.a2===bond.a1||n.a1===bond.a2||n.a2===bond.a2)&&n.ring!==undefined===ring){n.visited=true;set.push(n);q.enqueue(n);}}}return set;};})(ChemDoodle,ChemDoodle.math,ChemDoodle.structures,ChemDoodle.RESIDUE,Math);(function(structures,m,m4,v3,undefined){'use strict';var SB;var lastVerticalResolution=-1;function setupMatrices(verticalResolution){var n2=verticalResolution*verticalResolution;var n3=verticalResolution*verticalResolution*verticalResolution;var S=[6/n3,0,0,0,6/n3,2/n2,0,0,1/n3,1/n2,1/verticalResolution,0,0,0,0,1];var Bm=[-1/6,1/2,-1/2,1/6,1/2,-1,1/2,0,-1/2,0,1/2,0,1/6,2/3,1/6,0];SB=m4.multiply(Bm,S,[]);lastVerticalResolution=verticalResolution;}structures.Residue=function(resSeq){// number of vertical slashes per segment\nthis.resSeq=resSeq;};var _=structures.Residue.prototype;_.setup=function(nextAlpha,horizontalResolution){this.horizontalResolution=horizontalResolution;// define plane\nvar A=[nextAlpha.x-this.cp1.x,nextAlpha.y-this.cp1.y,nextAlpha.z-this.cp1.z];var B=[this.cp2.x-this.cp1.x,this.cp2.y-this.cp1.y,this.cp2.z-this.cp1.z];var C=v3.cross(A,B,[]);this.D=v3.cross(C,A,[]);v3.normalize(C);v3.normalize(this.D);// generate guide coordinates\n// guides for the narrow parts of the ribbons\nthis.guidePointsSmall=[];// guides for the wide parts of the ribbons\nthis.guidePointsLarge=[];// guides for the ribbon part of helix as cylinder model\nvar P=[(nextAlpha.x+this.cp1.x)/2,(nextAlpha.y+this.cp1.y)/2,(nextAlpha.z+this.cp1.z)/2];if(this.helix){// expand helices\nv3.scale(C,1.5);v3.add(P,C);}this.guidePointsSmall[0]=new structures.Atom('',P[0]-this.D[0]/2,P[1]-this.D[1]/2,P[2]-this.D[2]/2);for(var i=1;i<horizontalResolution;i++){this.guidePointsSmall[i]=new structures.Atom('',this.guidePointsSmall[0].x+this.D[0]*i/horizontalResolution,this.guidePointsSmall[0].y+this.D[1]*i/horizontalResolution,this.guidePointsSmall[0].z+this.D[2]*i/horizontalResolution);}v3.scale(this.D,4);this.guidePointsLarge[0]=new structures.Atom('',P[0]-this.D[0]/2,P[1]-this.D[1]/2,P[2]-this.D[2]/2);for(var i=1;i<horizontalResolution;i++){this.guidePointsLarge[i]=new structures.Atom('',this.guidePointsLarge[0].x+this.D[0]*i/horizontalResolution,this.guidePointsLarge[0].y+this.D[1]*i/horizontalResolution,this.guidePointsLarge[0].z+this.D[2]*i/horizontalResolution);}};_.getGuidePointSet=function(type){if(type===0){return this.helix||this.sheet?this.guidePointsLarge:this.guidePointsSmall;}else if(type===1){return this.guidePointsSmall;}else if(type===2){return this.guidePointsLarge;}};_.computeLineSegments=function(b2,b1,a1,doCartoon,verticalResolution){this.setVerticalResolution(verticalResolution);this.split=a1.helix!==this.helix||a1.sheet!==this.sheet;this.lineSegments=this.innerCompute(0,b2,b1,a1,false,verticalResolution);if(doCartoon){this.lineSegmentsCartoon=this.innerCompute(this.helix||this.sheet?2:1,b2,b1,a1,true,verticalResolution);}};_.innerCompute=function(set,b2,b1,a1,useArrows,verticalResolution){var segments=[];var use=this.getGuidePointSet(set);var useb2=b2.getGuidePointSet(set);var useb1=b1.getGuidePointSet(set);var usea1=a1.getGuidePointSet(set);for(var l=0,ll=use.length;l<ll;l++){var G=[useb2[l].x,useb2[l].y,useb2[l].z,1,useb1[l].x,useb1[l].y,useb1[l].z,1,use[l].x,use[l].y,use[l].z,1,usea1[l].x,usea1[l].y,usea1[l].z,1];var M=m4.multiply(G,SB,[]);var strand=[];for(var k=0;k<verticalResolution;k++){for(var i=3;i>0;i--){for(var j=0;j<4;j++){M[i*4+j]+=M[(i-1)*4+j];}}strand[k]=new structures.Atom('',M[12]/M[15],M[13]/M[15],M[14]/M[15]);}segments[l]=strand;}if(useArrows&&this.arrow){for(var i=0,ii=verticalResolution;i<ii;i++){var mult=1.5-1.3*i/verticalResolution;var mid=m.floor(this.horizontalResolution/2);var center=segments[mid];for(var j=0,jj=segments.length;j<jj;j++){if(j!==mid){var o=center[i];var f=segments[j][i];var vec=[f.x-o.x,f.y-o.y,f.z-o.z];v3.scale(vec,mult);f.x=o.x+vec[0];f.y=o.y+vec[1];f.z=o.z+vec[2];}}}}return segments;};_.setVerticalResolution=function(verticalResolution){if(verticalResolution!==lastVerticalResolution){setupMatrices(verticalResolution);}};})(ChemDoodle.structures,Math,ChemDoodle.lib.mat4,ChemDoodle.lib.vec3);(function(extensions,structures,math,q,m,undefined){'use strict';structures.Spectrum=function(){this.data=[];this.metadata=[];this.dataDisplay=[];this.memory={offsetTop:0,offsetLeft:0,offsetBottom:0,flipXAxis:false,scale:1,width:0,height:0};};var _=structures.Spectrum.prototype;_.title=undefined;_.xUnit=undefined;_.yUnit=undefined;_.continuous=true;_.integrationSensitivity=0.01;_.draw=function(ctx,specs,width,height){if(this.specs){specs=this.specs;}var offsetTop=5;var offsetLeft=0;var offsetBottom=0;// draw decorations\nctx.fillStyle=specs.text_color;ctx.textAlign='center';ctx.textBaseline='alphabetic';ctx.font=extensions.getFontString(specs.text_font_size,specs.text_font_families);if(this.xUnit){offsetBottom+=specs.text_font_size;ctx.fillText(this.xUnit,width/2,height-2);}if(this.yUnit&&specs.plots_showYAxis){offsetLeft+=specs.text_font_size;ctx.save();ctx.translate(specs.text_font_size,height/2);ctx.rotate(-m.PI/2);ctx.fillText(this.yUnit,0,0);ctx.restore();}if(this.title){offsetTop+=specs.text_font_size;ctx.fillText(this.title,width/2,specs.text_font_size);}// draw ticks\nctx.lineCap='square';offsetBottom+=5+specs.text_font_size;if(specs.plots_showYAxis){offsetLeft+=5+ctx.measureText('1000').width;}if(specs.plots_showGrid){ctx.strokeStyle=specs.plots_gridColor;ctx.lineWidth=specs.plots_gridLineWidth;ctx.strokeRect(offsetLeft,offsetTop,width-offsetLeft,height-offsetBottom-offsetTop);}ctx.textAlign='center';ctx.textBaseline='top';var span=this.maxX-this.minX;var t=span/100;var major=.001;while(major<t||span/major>25){major*=10;}var counter=0;var overlapX=specs.plots_flipXAxis?width:0;for(var i=m.round(this.minX/major)*major;i<=this.maxX;i+=major/2){var x=this.getTransformedX(i,specs,width,offsetLeft);if(x>offsetLeft){ctx.strokeStyle='black';ctx.lineWidth=1;if(counter%2===0){ctx.beginPath();ctx.moveTo(x,height-offsetBottom);ctx.lineTo(x,height-offsetBottom+2);ctx.stroke();var s=i.toFixed(5);while(s.charAt(s.length-1)==='0'){s=s.substring(0,s.length-1);}if(s.charAt(s.length-1)==='.'){s=s.substring(0,s.length-1);}// do this to avoid label overlap\nvar numWidth=ctx.measureText(s).width;if(specs.plots_flipXAxis){numWidth*=-1;}var ls=x-numWidth/2;if(specs.plots_flipXAxis?ls<overlapX:ls>overlapX){ctx.fillText(s,x,height-offsetBottom+2);overlapX=x+numWidth/2;}if(specs.plots_showGrid){ctx.strokeStyle=specs.plots_gridColor;ctx.lineWidth=specs.plots_gridLineWidth;ctx.beginPath();ctx.moveTo(x,height-offsetBottom);ctx.lineTo(x,offsetTop);ctx.stroke();}}else{ctx.beginPath();ctx.moveTo(x,height-offsetBottom);ctx.lineTo(x,height-offsetBottom+2);ctx.stroke();}}counter++;}if(specs.plots_showYAxis||specs.plots_showGrid){var spany=1/specs.scale;ctx.textAlign='right';ctx.textBaseline='middle';for(var i=0;i<=10;i++){var yval=spany/10*i;var y=offsetTop+(height-offsetBottom-offsetTop)*(1-yval*specs.scale);if(specs.plots_showGrid){ctx.strokeStyle=specs.plots_gridColor;ctx.lineWidth=specs.plots_gridLineWidth;ctx.beginPath();ctx.moveTo(offsetLeft,y);ctx.lineTo(width,y);ctx.stroke();}if(specs.plots_showYAxis){ctx.strokeStyle='black';ctx.lineWidth=1;ctx.beginPath();ctx.moveTo(offsetLeft,y);ctx.lineTo(offsetLeft-3,y);ctx.stroke();var val=yval*100;var cutoff=m.max(0,3-m.floor(val).toString().length);var s=val.toFixed(cutoff);if(cutoff>0){while(s.charAt(s.length-1)==='0'){s=s.substring(0,s.length-1);}}if(s.charAt(s.length-1)==='.'){s=s.substring(0,s.length-1);}ctx.fillText(s,offsetLeft-3,y);}}}// draw axes\nctx.strokeStyle='black';ctx.lineWidth=1;ctx.beginPath();// draw x axis\nctx.moveTo(width,height-offsetBottom);ctx.lineTo(offsetLeft,height-offsetBottom);// draw y axis\nif(specs.plots_showYAxis){ctx.lineTo(offsetLeft,offsetTop);}ctx.stroke();// draw metadata\nif(this.dataDisplay.length>0){ctx.textAlign='left';ctx.textBaseline='top';var mcount=0;for(var i=0,ii=this.dataDisplay.length;i<ii;i++){if(this.dataDisplay[i].value){ctx.fillText([this.dataDisplay[i].display,': ',this.dataDisplay[i].value].join(''),offsetLeft+10,offsetTop+10+mcount*(specs.text_font_size+5));mcount++;}else if(this.dataDisplay[i].tag){for(var j=0,jj=this.metadata.length;j<jj;j++){if(extensions.stringStartsWith(this.metadata[j],this.dataDisplay[i].tag)){var draw=this.metadata[j];if(this.dataDisplay[i].display){var index=this.metadata[j].indexOf('=');draw=[this.dataDisplay[i].display,': ',index>-1?this.metadata[j].substring(index+2):this.metadata[j]].join('');}ctx.fillText(draw,offsetLeft+10,offsetTop+10+mcount*(specs.text_font_size+5));mcount++;break;}}}}}this.drawPlot(ctx,specs,width,height,offsetTop,offsetLeft,offsetBottom);this.memory.offsetTop=offsetTop;this.memory.offsetLeft=offsetLeft;this.memory.offsetBottom=offsetBottom;this.memory.flipXAxis=specs.plots_flipXAxis;this.memory.scale=specs.scale;this.memory.width=width;this.memory.height=height;};_.drawPlot=function(ctx,specs,width,height,offsetTop,offsetLeft,offsetBottom){if(this.specs){specs=this.specs;}ctx.strokeStyle=specs.plots_color;ctx.lineWidth=specs.plots_width;var integration=[];// clip the spectrum display bounds here to not draw over the axes\n// we do this because we want to continue drawing segments to their natural ends to be accurate, but don't want to see them past the display area\nctx.save();ctx.rect(offsetLeft,offsetTop,width-offsetLeft,height-offsetBottom-offsetTop);ctx.clip();ctx.beginPath();if(this.continuous){var started=false;var counter=0;var stop=false;for(var i=0,ii=this.data.length;i<ii;i++){var x=this.getTransformedX(this.data[i].x,specs,width,offsetLeft);var xnext;if(i<ii&&!started&&this.data[i+1]){// see if you should render this first segment\nxnext=this.getTransformedX(this.data[i+1].x,specs,width,offsetLeft);}// check xnext against undefined as it can be 0/1\nif(x>=offsetLeft&&x<width||xnext!==undefined&&xnext>=offsetLeft&&xnext<width){var y=this.getTransformedY(this.data[i].y,specs,height,offsetBottom,offsetTop);if(specs.plots_showIntegration&&m.abs(this.data[i].y)>this.integrationSensitivity){integration.push(new structures.Point(this.data[i].x,this.data[i].y));}if(!started){ctx.moveTo(x,y);started=true;}ctx.lineTo(x,y);counter++;if(counter%1000===0){// segment the path to avoid crashing safari on mac os x\nctx.stroke();ctx.beginPath();ctx.moveTo(x,y);}if(stop){break;}}else if(started){// render one more segment\nstop=true;}}}else{for(var i=0,ii=this.data.length;i<ii;i++){var x=this.getTransformedX(this.data[i].x,specs,width,offsetLeft);if(x>=offsetLeft&&x<width){ctx.moveTo(x,height-offsetBottom);ctx.lineTo(x,this.getTransformedY(this.data[i].y,specs,height,offsetBottom,offsetTop));}}}ctx.stroke();if(specs.plots_showIntegration&&integration.length>1){ctx.strokeStyle=specs.plots_integrationColor;ctx.lineWidth=specs.plots_integrationLineWidth;ctx.beginPath();var ascending=integration[1].x>integration[0].x;var max;if(this.flipXAxis&&!ascending||!this.flipXAxis&&ascending){for(var i=integration.length-2;i>=0;i--){integration[i].y=integration[i].y+integration[i+1].y;}max=integration[0].y;}else{for(var i=1,ii=integration.length;i<ii;i++){integration[i].y=integration[i].y+integration[i-1].y;}max=integration[integration.length-1].y;}for(var i=0,ii=integration.length;i<ii;i++){var x=this.getTransformedX(integration[i].x,specs,width,offsetLeft);var y=this.getTransformedY(integration[i].y/specs.scale/max,specs,height,offsetBottom,offsetTop);if(i===0){ctx.moveTo(x,y);}else{ctx.lineTo(x,y);}}ctx.stroke();}ctx.restore();};_.getTransformedY=function(y,specs,height,offsetBottom,offsetTop){return offsetTop+(height-offsetBottom-offsetTop)*(1-y*specs.scale);};_.getInverseTransformedY=function(y){// can only be called after a render when memory is set, this\n// function doesn't make sense without a render first anyway\nreturn(1-(y-this.memory.offsetTop)/(this.memory.height-this.memory.offsetBottom-this.memory.offsetTop))/this.memory.scale*100;};_.getTransformedX=function(x,specs,width,offsetLeft){var returning=offsetLeft+(x-this.minX)/(this.maxX-this.minX)*(width-offsetLeft);if(specs.plots_flipXAxis){returning=width+offsetLeft-returning;}return returning;};_.getInverseTransformedX=function(x){// can only be called after a render when memory is set, this\n// function doesn't make sense without a render first anyway\nif(this.memory.flipXAxis){x=this.memory.width+this.memory.offsetLeft-x;}return(x-this.memory.offsetLeft)*(this.maxX-this.minX)/(this.memory.width-this.memory.offsetLeft)+this.minX;};_.setup=function(){var xmin=Number.MAX_VALUE;var xmax=Number.MIN_VALUE;var ymax=Number.MIN_VALUE;for(var i=0,ii=this.data.length;i<ii;i++){xmin=m.min(xmin,this.data[i].x);xmax=m.max(xmax,this.data[i].x);ymax=m.max(ymax,this.data[i].y);}if(this.continuous){this.minX=xmin;this.maxX=xmax;}else{this.minX=xmin-1;this.maxX=xmax+1;}for(var i=0,ii=this.data.length;i<ii;i++){this.data[i].y/=ymax;}};_.zoom=function(pixel1,pixel2,width,rescaleY){var p1=this.getInverseTransformedX(pixel1);var p2=this.getInverseTransformedX(pixel2);this.minX=m.min(p1,p2);this.maxX=m.max(p1,p2);if(rescaleY){var ymax=Number.MIN_VALUE;for(var i=0,ii=this.data.length;i<ii;i++){if(math.isBetween(this.data[i].x,this.minX,this.maxX)){ymax=m.max(ymax,this.data[i].y);}}return 1/ymax;}};_.translate=function(dif,width){var dist=dif/(width-this.memory.offsetLeft)*(this.maxX-this.minX)*(this.memory.flipXAxis?1:-1);this.minX+=dist;this.maxX+=dist;};_.alertMetadata=function(){alert(this.metadata.join('\\n'));};_.getInternalCoordinates=function(x,y){return new ChemDoodle.structures.Point(this.getInverseTransformedX(x),this.getInverseTransformedY(y));};_.getClosestPlotInternalCoordinates=function(x){var xtl=this.getInverseTransformedX(x-1);var xtr=this.getInverseTransformedX(x+1);if(xtl>xtr){var temp=xtl;xtl=xtr;xtr=temp;}var highest=-1;var max=-Infinity;var inRange=false;for(var i=0,ii=this.data.length;i<ii;i++){var p=this.data[i];if(math.isBetween(p.x,xtl,xtr)){if(p.y>max){inRange=true;max=p.y;highest=i;}}else if(inRange){break;}}if(highest===-1){return undefined;}var p=this.data[highest];return new ChemDoodle.structures.Point(p.x,p.y*100);};_.getClosestPeakInternalCoordinates=function(x){var xt=this.getInverseTransformedX(x);var closest=0;var dif=Infinity;for(var i=0,ii=this.data.length;i<ii;i++){var sub=m.abs(this.data[i].x-xt);if(sub<=dif){dif=sub;closest=i;}else{break;}}var highestLeft=closest,highestRight=closest;var maxLeft=this.data[closest].y,maxRight=this.data[closest].y;for(var i=closest+1,ii=this.data.length;i<ii;i++){if(this.data[i].y+.05>maxRight){maxRight=this.data[i].y;highestRight=i;}else{break;}}for(var i=closest-1;i>=0;i--){if(this.data[i].y+.05>maxLeft){maxLeft=this.data[i].y;highestLeft=i;}else{break;}}var p=this.data[highestLeft-closest>highestRight-closest?highestRight:highestLeft];return new ChemDoodle.structures.Point(p.x,p.y*100);};})(ChemDoodle.extensions,ChemDoodle.structures,ChemDoodle.math,ChemDoodle.lib.jQuery,Math);(function(math,d2,m,undefined){'use strict';d2._Shape=function(){};var _=d2._Shape.prototype;_.drawDecorations=function(ctx,specs){if(this.isHover){var ps=this.getPoints();for(var i=0,ii=ps.length;i<ii;i++){var p=ps[i];this.drawAnchor(ctx,specs,p,p===this.hoverPoint);}}};_.getBounds=function(){var bounds=new math.Bounds();var ps=this.getPoints();for(var i=0,ii=ps.length;i<ii;i++){var p=ps[i];bounds.expand(p.x,p.y);}return bounds;};_.drawAnchor=function(ctx,specs,p,hovered){ctx.save();ctx.translate(p.x,p.y);ctx.rotate(m.PI/4);ctx.scale(1/specs.scale,1/specs.scale);var boxRadius=4;var innerRadius=boxRadius/2;ctx.beginPath();ctx.moveTo(-boxRadius,-boxRadius);ctx.lineTo(boxRadius,-boxRadius);ctx.lineTo(boxRadius,boxRadius);ctx.lineTo(-boxRadius,boxRadius);ctx.closePath();if(hovered){ctx.fillStyle=specs.colorHover;}else{ctx.fillStyle='white';}ctx.fill();ctx.beginPath();ctx.moveTo(-boxRadius,-innerRadius);ctx.lineTo(-boxRadius,-boxRadius);ctx.lineTo(-innerRadius,-boxRadius);ctx.moveTo(innerRadius,-boxRadius);ctx.lineTo(boxRadius,-boxRadius);ctx.lineTo(boxRadius,-innerRadius);ctx.moveTo(boxRadius,innerRadius);ctx.lineTo(boxRadius,boxRadius);ctx.lineTo(innerRadius,boxRadius);ctx.moveTo(-innerRadius,boxRadius);ctx.lineTo(-boxRadius,boxRadius);ctx.lineTo(-boxRadius,innerRadius);ctx.moveTo(-boxRadius,-innerRadius);ctx.strokeStyle='rgba(0,0,0,.2)';ctx.lineWidth=5;ctx.stroke();ctx.strokeStyle='blue';ctx.lineWidth=1;ctx.stroke();ctx.restore();};})(ChemDoodle.math,ChemDoodle.structures.d2,Math);(function(extensions,math,structures,d2,m,undefined){'use strict';d2.AtomMapping=function(o1,o2){// these need to be named 'o', not 'a' or the generic erase function won't work for them\nthis.o1=o1;this.o2=o2;this.label='0';this.error=false;};var _=d2.AtomMapping.prototype=new d2._Shape();_.drawDecorations=function(ctx,specs){if(this.isHover||this.isSelected){ctx.strokeStyle=this.isHover?specs.colorHover:specs.colorSelect;ctx.lineWidth=1;ctx.beginPath();ctx.moveTo(this.o1.x,this.o1.y);ctx.lineTo(this.o2.x,this.o2.y);ctx.setLineDash([2]);ctx.stroke();ctx.setLineDash([]);}};_.draw=function(ctx,specs){if(this.o1&&this.o2){var sep=14;this.x1=this.o1.x+sep*m.cos(this.o1.angleOfLeastInterference);this.y1=this.o1.y-sep*m.sin(this.o1.angleOfLeastInterference);this.x2=this.o2.x+sep*m.cos(this.o2.angleOfLeastInterference);this.y2=this.o2.y-sep*m.sin(this.o2.angleOfLeastInterference);ctx.font=extensions.getFontString(specs.text_font_size,specs.text_font_families,specs.text_font_bold,specs.text_font_italic);var label=this.label;var w=ctx.measureText(label).width;if(this.isLassoed){ctx.fillStyle=specs.colorHover;ctx.fillRect(this.x1-w/2-3,this.y1-specs.text_font_size/2-3,w+6,specs.text_font_size+6);ctx.fillRect(this.x2-w/2-3,this.y2-specs.text_font_size/2-3,w+6,specs.text_font_size+6);}var color=this.error?specs.colorError:specs.shapes_color;if(this.isHover||this.isSelected){color=this.isHover?specs.colorHover:specs.colorSelect;}ctx.fillStyle=color;ctx.fillRect(this.x1-w/2-1,this.y1-specs.text_font_size/2-1,w+2,specs.text_font_size+2);ctx.fillRect(this.x2-w/2-1,this.y2-specs.text_font_size/2-1,w+2,specs.text_font_size+2);ctx.textAlign='center';ctx.textBaseline='middle';ctx.fillStyle=specs.backgroundColor;ctx.fillText(label,this.x1,this.y1);ctx.fillText(label,this.x2,this.y2);}};_.getPoints=function(){return[new structures.Point(this.x1,this.y1),new structures.Point(this.x2,this.y2)];};_.isOver=function(p,barrier){if(this.x1){return p.distance({x:this.x1,y:this.y1})<barrier||p.distance({x:this.x2,y:this.y2})<barrier;}return false;};})(ChemDoodle.extensions,ChemDoodle.math,ChemDoodle.structures,ChemDoodle.structures.d2,Math);(function(extensions,math,structures,d2,m,undefined){'use strict';d2.Bracket=function(p1,p2){this.p1=p1?p1:new structures.Point();this.p2=p2?p2:new structures.Point();};var _=d2.Bracket.prototype=new d2._Shape();_.charge=0;_.mult=0;_.repeat=0;_.draw=function(ctx,specs){var minX=m.min(this.p1.x,this.p2.x);var maxX=m.max(this.p1.x,this.p2.x);var minY=m.min(this.p1.y,this.p2.y);var maxY=m.max(this.p1.y,this.p2.y);var h=maxY-minY;var lip=h/10;ctx.beginPath();ctx.moveTo(minX+lip,minY);ctx.lineTo(minX,minY);ctx.lineTo(minX,maxY);ctx.lineTo(minX+lip,maxY);ctx.moveTo(maxX-lip,maxY);ctx.lineTo(maxX,maxY);ctx.lineTo(maxX,minY);ctx.lineTo(maxX-lip,minY);if(this.isLassoed){var grd=ctx.createLinearGradient(this.p1.x,this.p1.y,this.p2.x,this.p2.y);grd.addColorStop(0,'rgba(212, 99, 0, 0)');grd.addColorStop(0.5,'rgba(212, 99, 0, 0.8)');grd.addColorStop(1,'rgba(212, 99, 0, 0)');ctx.lineWidth=specs.shapes_lineWidth+5;ctx.strokeStyle=grd;ctx.lineJoin='miter';ctx.lineCap='square';ctx.stroke();}ctx.strokeStyle=specs.shapes_color;ctx.lineWidth=specs.shapes_lineWidth;ctx.lineJoin='miter';ctx.lineCap='butt';ctx.stroke();if(this.charge!==0){ctx.fillStyle=specs.text_color;ctx.textAlign='left';ctx.textBaseline='alphabetic';ctx.font=extensions.getFontString(specs.text_font_size,specs.text_font_families);var s=this.charge.toFixed(0);if(s==='1'){s='+';}else if(s==='-1'){s=\"\\u2013\";}else if(extensions.stringStartsWith(s,'-')){s=s.substring(1)+\"\\u2013\";}else{s+='+';}ctx.fillText(s,maxX+5,minY+5);}if(this.mult!==0){ctx.fillStyle=specs.text_color;ctx.textAlign='right';ctx.textBaseline='middle';ctx.font=extensions.getFontString(specs.text_font_size,specs.text_font_families);ctx.fillText(this.mult.toFixed(0),minX-5,minY+h/2);}if(this.repeat!==0){ctx.fillStyle=specs.text_color;ctx.textAlign='left';ctx.textBaseline='top';ctx.font=extensions.getFontString(specs.text_font_size,specs.text_font_families);var s=this.repeat.toFixed(0);ctx.fillText(s,maxX+5,maxY-5);}};_.getPoints=function(){return[this.p1,this.p2];};_.isOver=function(p,barrier){return math.isBetween(p.x,this.p1.x,this.p2.x)&&math.isBetween(p.y,this.p1.y,this.p2.y);};})(ChemDoodle.extensions,ChemDoodle.math,ChemDoodle.structures,ChemDoodle.structures.d2,Math);(function(extensions,math,jsb,structures,d2,m,undefined){'use strict';d2.DynamicBracket=function(b1,b2){this.b1=b1;this.b2=b2;this.n1=1;this.n2=4;this.contents=[];this.ps=[];};var _=d2.DynamicBracket.prototype=new d2._Shape();_.drawDecorations=function(ctx,specs){if(this.isHover){for(var i=0,ii=this.contents.length;i<ii;i++){var a=this.contents[i];var grd=ctx.createRadialGradient(a.x-1,a.y-1,0,a.x,a.y,7);grd.addColorStop(0,'rgba(212, 99, 0, 0)');grd.addColorStop(0.7,'rgba(212, 99, 0, 0.8)');ctx.fillStyle=grd;ctx.beginPath();ctx.arc(a.x,a.y,5,0,m.PI*2,false);ctx.fill();}}};var drawEnd=function drawEnd(ctx,specs,b,b2,contents){var ps=[];var stretch=10;var arm=4;var a=contents.length>0?contents.indexOf(b.a1)===-1?b.a2:b.a1:b.a1.distance(b2.getCenter())<b.a2.distance(b2.getCenter())?b.a1:b.a2;var angle=a.angle(b.getNeighbor(a));var perp=angle+m.PI/2;var length=b.getLength()/(contents.length>1?4:2);var psx=a.x+length*m.cos(angle);var psy=a.y-length*m.sin(angle);var scos=stretch*m.cos(perp);var ssin=stretch*m.sin(perp);var p1x=psx+scos;var p1y=psy-ssin;var p2x=psx-scos;var p2y=psy+ssin;var acos=-arm*m.cos(angle);var asin=-arm*m.sin(angle);var p1ax=p1x+acos;var p1ay=p1y-asin;var p2ax=p2x+acos;var p2ay=p2y-asin;ctx.beginPath();ctx.moveTo(p1ax,p1ay);ctx.lineTo(p1x,p1y);ctx.lineTo(p2x,p2y);ctx.lineTo(p2ax,p2ay);ctx.stroke();ps.push(new structures.Point(p1x,p1y));ps.push(new structures.Point(p2x,p2y));return ps;};_.draw=function(ctx,specs){if(this.b1&&this.b2){var color=this.error?specs.colorError:specs.shapes_color;if(this.isHover||this.isSelected){color=this.isHover?specs.colorHover:specs.colorSelect;}ctx.strokeStyle=color;ctx.fillStyle=ctx.strokeStyle;ctx.lineWidth=specs.shapes_lineWidth;ctx.lineJoin='miter';ctx.lineCap='butt';var ps1=drawEnd(ctx,specs,this.b1,this.b2,this.contents);var ps2=drawEnd(ctx,specs,this.b2,this.b1,this.contents);this.ps=ps1.concat(ps2);if(this.b1.getCenter().x>this.b2.getCenter().x){if(this.ps[0].x>this.ps[1].x+5){this.textPos=this.ps[0];}else{this.textPos=this.ps[1];}}else{if(this.ps[2].x>this.ps[3].x+5){this.textPos=this.ps[2];}else{this.textPos=this.ps[3];}}if(!this.error&&this.contents.length>0){ctx.font=extensions.getFontString(specs.text_font_size,specs.text_font_families,specs.text_font_bold,specs.text_font_italic);ctx.fillStyle=this.isHover?specs.colorHover:specs.text_color;ctx.textAlign='left';ctx.textBaseline='bottom';ctx.fillText(this.n1+'-'+this.n2,this.textPos.x+2,this.textPos.y+2);}}};_.getPoints=function(){return this.ps;};_.isOver=function(p,barrier){return false;};_.setContents=function(sketcher){this.contents=[];var m1=sketcher.getMoleculeByAtom(this.b1.a1);var m2=sketcher.getMoleculeByAtom(this.b2.a1);// make sure both b1 and b2 are part of the same molecule\nif(m1&&m1===m2){// if either b1 or b2 is in a ring, then stop, as this is a violation\n// unless b1 and b2 are part of the same ring and are part of no other rings\nvar c1=0;var c2=0;for(var i=0,ii=m1.rings.length;i<ii;i++){var r=m1.rings[i];for(var j=0,jj=r.bonds.length;j<jj;j++){var rb=r.bonds[j];if(rb===this.b1){c1++;}else if(rb===this.b2){c2++;}}}var sameSingleRing=c1===1&&c2===1&&this.b1.ring===this.b2.ring;this.contents.flippable=sameSingleRing;if(this.b1.ring===undefined&&this.b2.ring===undefined||sameSingleRing){for(var i=0,ii=m1.atoms.length;i<ii;i++){var reached1=false;var reached2=false;var reachedInner=false;for(var j=0,jj=m1.bonds.length;j<jj;j++){m1.bonds[j].visited=false;}var q=new structures.Queue();var a=m1.atoms[i];q.enqueue(a);while(!q.isEmpty()&&!(reached1&&reached2)){var check=q.dequeue();if(sameSingleRing&&(!this.flip&&check===this.b1.a1||this.flip&&check===this.b1.a2)){reachedInner=true;}for(var j=0,jj=m1.bonds.length;j<jj;j++){var b=m1.bonds[j];if(b.a1===check||b.a2===check){if(b===this.b1){reached1=true;}else if(b===this.b2){reached2=true;}else if(!b.visited){b.visited=true;q.enqueue(b.getNeighbor(check));}}}}if(reached1&&reached2&&(!sameSingleRing||reachedInner)){this.contents.push(a);}}}}};})(ChemDoodle.extensions,ChemDoodle.math,ChemDoodle.lib.jsBezier,ChemDoodle.structures,ChemDoodle.structures.d2,Math);(function(extensions,math,structures,d2,m,undefined){'use strict';d2.Line=function(p1,p2){this.p1=p1?p1:new structures.Point();this.p2=p2?p2:new structures.Point();};d2.Line.ARROW_SYNTHETIC='synthetic';d2.Line.ARROW_RETROSYNTHETIC='retrosynthetic';d2.Line.ARROW_RESONANCE='resonance';d2.Line.ARROW_EQUILIBRIUM='equilibrium';var _=d2.Line.prototype=new d2._Shape();_.arrowType=undefined;_.topText=undefined;_.bottomText=undefined;_.draw=function(ctx,specs){if(this.isLassoed){var grd=ctx.createLinearGradient(this.p1.x,this.p1.y,this.p2.x,this.p2.y);grd.addColorStop(0,'rgba(212, 99, 0, 0)');grd.addColorStop(0.5,'rgba(212, 99, 0, 0.8)');grd.addColorStop(1,'rgba(212, 99, 0, 0)');var useDist=2.5;var perpendicular=this.p1.angle(this.p2)+m.PI/2;var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);var cx1=this.p1.x-mcosp*useDist;var cy1=this.p1.y+msinp*useDist;var cx2=this.p1.x+mcosp*useDist;var cy2=this.p1.y-msinp*useDist;var cx3=this.p2.x+mcosp*useDist;var cy3=this.p2.y-msinp*useDist;var cx4=this.p2.x-mcosp*useDist;var cy4=this.p2.y+msinp*useDist;ctx.fillStyle=grd;ctx.beginPath();ctx.moveTo(cx1,cy1);ctx.lineTo(cx2,cy2);ctx.lineTo(cx3,cy3);ctx.lineTo(cx4,cy4);ctx.closePath();ctx.fill();}ctx.strokeStyle=specs.shapes_color;ctx.fillStyle=specs.shapes_color;ctx.lineWidth=specs.shapes_lineWidth;ctx.lineJoin='miter';ctx.lineCap='butt';if(this.p1.x!==this.p2.x||this.p1.y!==this.p2.y){// only render if the points are different, otherwise this will\n// cause fill overflows\nif(this.arrowType===d2.Line.ARROW_RETROSYNTHETIC){var r2=m.sqrt(2)*2;var useDist=specs.shapes_arrowLength_2D/r2;var angle=this.p1.angle(this.p2);var perpendicular=angle+m.PI/2;var retract=specs.shapes_arrowLength_2D/r2;var mcosa=m.cos(angle);var msina=m.sin(angle);var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);var cx1=this.p1.x-mcosp*useDist;var cy1=this.p1.y+msinp*useDist;var cx2=this.p1.x+mcosp*useDist;var cy2=this.p1.y-msinp*useDist;var cx3=this.p2.x+mcosp*useDist-mcosa*retract;var cy3=this.p2.y-msinp*useDist+msina*retract;var cx4=this.p2.x-mcosp*useDist-mcosa*retract;var cy4=this.p2.y+msinp*useDist+msina*retract;var ax1=this.p2.x+mcosp*useDist*2-mcosa*retract*2;var ay1=this.p2.y-msinp*useDist*2+msina*retract*2;var ax2=this.p2.x-mcosp*useDist*2-mcosa*retract*2;var ay2=this.p2.y+msinp*useDist*2+msina*retract*2;ctx.beginPath();ctx.moveTo(cx2,cy2);ctx.lineTo(cx3,cy3);ctx.moveTo(ax1,ay1);ctx.lineTo(this.p2.x,this.p2.y);ctx.lineTo(ax2,ay2);ctx.moveTo(cx4,cy4);ctx.lineTo(cx1,cy1);ctx.stroke();}else if(this.arrowType===d2.Line.ARROW_EQUILIBRIUM){var r2=m.sqrt(2)*2;var useDist=specs.shapes_arrowLength_2D/r2/2;var angle=this.p1.angle(this.p2);var perpendicular=angle+m.PI/2;var retract=specs.shapes_arrowLength_2D*2/m.sqrt(3);var mcosa=m.cos(angle);var msina=m.sin(angle);var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);var cx1=this.p1.x-mcosp*useDist;var cy1=this.p1.y+msinp*useDist;var cx2=this.p1.x+mcosp*useDist;var cy2=this.p1.y-msinp*useDist;var cx3=this.p2.x+mcosp*useDist;var cy3=this.p2.y-msinp*useDist;var cx4=this.p2.x-mcosp*useDist;var cy4=this.p2.y+msinp*useDist;ctx.beginPath();ctx.moveTo(cx2,cy2);ctx.lineTo(cx3,cy3);ctx.moveTo(cx4,cy4);ctx.lineTo(cx1,cy1);ctx.stroke();// right arrow\nvar rx1=cx3-mcosa*retract*.8;var ry1=cy3+msina*retract*.8;var ax1=cx3+mcosp*specs.shapes_arrowLength_2D/3-mcosa*retract;var ay1=cy3-msinp*specs.shapes_arrowLength_2D/3+msina*retract;ctx.beginPath();ctx.moveTo(cx3,cy3);ctx.lineTo(ax1,ay1);ctx.lineTo(rx1,ry1);ctx.closePath();ctx.fill();ctx.stroke();// left arrow\nrx1=cx1+mcosa*retract*.8;ry1=cy1-msina*retract*.8;ax1=cx1-mcosp*specs.shapes_arrowLength_2D/3+mcosa*retract;ay1=cy1+msinp*specs.shapes_arrowLength_2D/3-msina*retract;ctx.beginPath();ctx.moveTo(cx1,cy1);ctx.lineTo(ax1,ay1);ctx.lineTo(rx1,ry1);ctx.closePath();ctx.fill();ctx.stroke();}else if(this.arrowType===d2.Line.ARROW_SYNTHETIC){var angle=this.p1.angle(this.p2);var perpendicular=angle+m.PI/2;var retract=specs.shapes_arrowLength_2D*2/m.sqrt(3);var mcosa=m.cos(angle);var msina=m.sin(angle);var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);ctx.beginPath();ctx.moveTo(this.p1.x,this.p1.y);ctx.lineTo(this.p2.x-mcosa*retract/2,this.p2.y+msina*retract/2);ctx.stroke();var rx1=this.p2.x-mcosa*retract*.8;var ry1=this.p2.y+msina*retract*.8;var ax1=this.p2.x+mcosp*specs.shapes_arrowLength_2D/3-mcosa*retract;var ay1=this.p2.y-msinp*specs.shapes_arrowLength_2D/3+msina*retract;var ax2=this.p2.x-mcosp*specs.shapes_arrowLength_2D/3-mcosa*retract;var ay2=this.p2.y+msinp*specs.shapes_arrowLength_2D/3+msina*retract;ctx.beginPath();ctx.moveTo(this.p2.x,this.p2.y);ctx.lineTo(ax2,ay2);ctx.lineTo(rx1,ry1);ctx.lineTo(ax1,ay1);ctx.closePath();ctx.fill();ctx.stroke();}else if(this.arrowType===d2.Line.ARROW_RESONANCE){var angle=this.p1.angle(this.p2);var perpendicular=angle+m.PI/2;var retract=specs.shapes_arrowLength_2D*2/m.sqrt(3);var mcosa=m.cos(angle);var msina=m.sin(angle);var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);ctx.beginPath();ctx.moveTo(this.p1.x+mcosa*retract/2,this.p1.y-msina*retract/2);ctx.lineTo(this.p2.x-mcosa*retract/2,this.p2.y+msina*retract/2);ctx.stroke();// right arrow\nvar rx1=this.p2.x-mcosa*retract*.8;var ry1=this.p2.y+msina*retract*.8;var ax1=this.p2.x+mcosp*specs.shapes_arrowLength_2D/3-mcosa*retract;var ay1=this.p2.y-msinp*specs.shapes_arrowLength_2D/3+msina*retract;var ax2=this.p2.x-mcosp*specs.shapes_arrowLength_2D/3-mcosa*retract;var ay2=this.p2.y+msinp*specs.shapes_arrowLength_2D/3+msina*retract;ctx.beginPath();ctx.moveTo(this.p2.x,this.p2.y);ctx.lineTo(ax2,ay2);ctx.lineTo(rx1,ry1);ctx.lineTo(ax1,ay1);ctx.closePath();ctx.fill();ctx.stroke();// left arrow\nrx1=this.p1.x+mcosa*retract*.8;ry1=this.p1.y-msina*retract*.8;ax1=this.p1.x-mcosp*specs.shapes_arrowLength_2D/3+mcosa*retract;ay1=this.p1.y+msinp*specs.shapes_arrowLength_2D/3-msina*retract;ax2=this.p1.x+mcosp*specs.shapes_arrowLength_2D/3+mcosa*retract;ay2=this.p1.y-msinp*specs.shapes_arrowLength_2D/3-msina*retract;ctx.beginPath();ctx.moveTo(this.p1.x,this.p1.y);ctx.lineTo(ax2,ay2);ctx.lineTo(rx1,ry1);ctx.lineTo(ax1,ay1);ctx.closePath();ctx.fill();ctx.stroke();}else{ctx.beginPath();ctx.moveTo(this.p1.x,this.p1.y);ctx.lineTo(this.p2.x,this.p2.y);ctx.stroke();}if(this.topText||this.bottomText){ctx.font=extensions.getFontString(specs.text_font_size,specs.text_font_families,specs.text_font_bold,specs.text_font_italic);ctx.fillStyle=specs.text_color;}if(this.topText){ctx.textAlign='center';ctx.textBaseline='bottom';ctx.fillText(this.topText,(this.p1.x+this.p2.x)/2,this.p1.y-5);}if(this.bottomText){ctx.textAlign='center';ctx.textBaseline='top';ctx.fillText(this.bottomText,(this.p1.x+this.p2.x)/2,this.p1.y+5);}}};_.getPoints=function(){return[this.p1,this.p2];};_.isOver=function(p,barrier){var dist=math.distanceFromPointToLineInclusive(p,this.p1,this.p2);return dist!==-1&&dist<barrier;};})(ChemDoodle.extensions,ChemDoodle.math,ChemDoodle.structures,ChemDoodle.structures.d2,Math);(function(math,jsb,structures,d2,m,undefined){'use strict';var getPossibleAngles=function getPossibleAngles(o){var as=[];if(o instanceof structures.Atom){if(o.bondNumber===0){as.push(m.PI);}else if(o.angles){if(o.angles.length===1){as.push(o.angles[0]+m.PI);}else{for(var i=1,ii=o.angles.length;i<ii;i++){as.push(o.angles[i-1]+(o.angles[i]-o.angles[i-1])/2);}var firstIncreased=o.angles[0]+m.PI*2;var last=o.angles[o.angles.length-1];as.push(last+(firstIncreased-last)/2);}if(o.largestAngle>m.PI){// always use angle of least interfearence if it is greater\n// than 120\nas=[o.angleOfLeastInterference];}if(o.bonds){// point up towards a carbonyl\nfor(var i=0,ii=o.bonds.length;i<ii;i++){var b=o.bonds[i];if(b.bondOrder===2){var n=b.getNeighbor(o);if(n.label==='O'){as=[n.angle(o)];break;}}}}}}else{var angle=o.a1.angle(o.a2);as.push(angle+m.PI/2);as.push(angle+3*m.PI/2);}for(var i=0,ii=as.length;i<ii;i++){while(as[i]>m.PI*2){as[i]-=m.PI*2;}while(as[i]<0){as[i]+=m.PI*2;}}return as;};var getPullBack=function getPullBack(o,specs){var pullback=3;if(o instanceof structures.Atom){if(o.isLabelVisible(specs)){pullback=8;}if(o.charge!==0||o.numRadical!==0||o.numLonePair!==0){pullback=13;}}else if(o instanceof structures.Point){// this is the midpoint of a bond forming pusher\npullback=0;}else{if(o.bondOrder>1){pullback=5;}}return pullback;};var drawPusher=function drawPusher(ctx,specs,o1,o2,p1,c1,c2,p2,numElectron,caches){var angle1=c1.angle(p1);var angle2=c2.angle(p2);var mcosa=m.cos(angle1);var msina=m.sin(angle1);// pull back from start\nvar pullBack=getPullBack(o1,specs);p1.x-=mcosa*pullBack;p1.y+=msina*pullBack;// arrow\nvar perpendicular=angle2+m.PI/2;var retract=specs.shapes_arrowLength_2D*2/m.sqrt(3);var mcosa=m.cos(angle2);var msina=m.sin(angle2);var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);p2.x-=mcosa*5;p2.y+=msina*5;var nap=new structures.Point(p2.x,p2.y);// pull back from end\npullBack=getPullBack(o2,specs)/3;nap.x-=mcosa*pullBack;nap.y+=msina*pullBack;p2.x-=mcosa*(retract*0.8+pullBack);p2.y+=msina*(retract*0.8+pullBack);var rx1=nap.x-mcosa*retract*0.8;var ry1=nap.y+msina*retract*0.8;var a1=new structures.Point(nap.x+mcosp*specs.shapes_arrowLength_2D/3-mcosa*retract,nap.y-msinp*specs.shapes_arrowLength_2D/3+msina*retract);var a2=new structures.Point(nap.x-mcosp*specs.shapes_arrowLength_2D/3-mcosa*retract,nap.y+msinp*specs.shapes_arrowLength_2D/3+msina*retract);var include1=true,include2=true;if(numElectron===1){if(a1.distance(c1)>a2.distance(c1)){include2=false;}else{include1=false;}}ctx.beginPath();ctx.moveTo(nap.x,nap.y);if(include2){ctx.lineTo(a2.x,a2.y);}ctx.lineTo(rx1,ry1);if(include1){ctx.lineTo(a1.x,a1.y);}ctx.closePath();ctx.fill();ctx.stroke();// bezier\nctx.beginPath();ctx.moveTo(p1.x,p1.y);ctx.bezierCurveTo(c1.x,c1.y,c2.x,c2.y,p2.x,p2.y);ctx.stroke();caches.push([p1,c1,c2,p2]);};d2.Pusher=function(o1,o2,numElectron){this.o1=o1;this.o2=o2;this.numElectron=numElectron?numElectron:1;};var _=d2.Pusher.prototype=new d2._Shape();_.drawDecorations=function(ctx,specs){if(this.isHover){var p1=this.o1 instanceof structures.Atom?new structures.Point(this.o1.x,this.o1.y):this.o1.getCenter();var p2=this.o2 instanceof structures.Atom?new structures.Point(this.o2.x,this.o2.y):this.o2.getCenter();var ps=[p1,p2];for(var i=0,ii=ps.length;i<ii;i++){var p=ps[i];this.drawAnchor(ctx,specs,p,p===this.hoverPoint);}}};_.draw=function(ctx,specs){if(this.o1&&this.o2){ctx.strokeStyle=specs.shapes_color;ctx.fillStyle=specs.shapes_color;ctx.lineWidth=specs.shapes_lineWidth;ctx.lineJoin='miter';ctx.lineCap='butt';var p1=this.o1 instanceof structures.Atom?new structures.Point(this.o1.x,this.o1.y):this.o1.getCenter();var p2=this.o2 instanceof structures.Atom?new structures.Point(this.o2.x,this.o2.y):this.o2.getCenter();var controlDist=35;var as1=getPossibleAngles(this.o1);var as2=getPossibleAngles(this.o2);var c1,c2;var minDif=Infinity;for(var i=0,ii=as1.length;i<ii;i++){for(var j=0,jj=as2.length;j<jj;j++){var c1c=new structures.Point(p1.x+controlDist*m.cos(as1[i]),p1.y-controlDist*m.sin(as1[i]));var c2c=new structures.Point(p2.x+controlDist*m.cos(as2[j]),p2.y-controlDist*m.sin(as2[j]));var dif=c1c.distance(c2c);if(dif<minDif){minDif=dif;c1=c1c;c2=c2c;}}}this.caches=[];if(this.numElectron===-1){var dist=p1.distance(p2)/2;var angle=p1.angle(p2);var perp=angle+m.PI/2;var mcosa=m.cos(angle);var msina=m.sin(angle);var m1=new structures.Point(p1.x+(dist-1)*mcosa,p1.y-(dist-1)*msina);var cm1=new structures.Point(m1.x+m.cos(perp+m.PI/6)*controlDist,m1.y-m.sin(perp+m.PI/6)*controlDist);var m2=new structures.Point(p1.x+(dist+1)*mcosa,p1.y-(dist+1)*msina);var cm2=new structures.Point(m2.x+m.cos(perp-m.PI/6)*controlDist,m2.y-m.sin(perp-m.PI/6)*controlDist);drawPusher(ctx,specs,this.o1,m1,p1,c1,cm1,m1,1,this.caches);drawPusher(ctx,specs,this.o2,m2,p2,c2,cm2,m2,1,this.caches);}else{if(math.intersectLines(p1.x,p1.y,c1.x,c1.y,p2.x,p2.y,c2.x,c2.y)){var tmp=c1;c1=c2;c2=tmp;}// try to clean up problems, like loops\nvar angle1=c1.angle(p1);var angle2=c2.angle(p2);var angleDif=m.max(angle1,angle2)-m.min(angle1,angle2);if(m.abs(angleDif-m.PI)<.001&&this.o1.molCenter===this.o2.molCenter){// in the case where the control tangents are parallel\nangle1+=m.PI/2;angle2-=m.PI/2;c1.x=p1.x+controlDist*m.cos(angle1+m.PI);c1.y=p1.y-controlDist*m.sin(angle1+m.PI);c2.x=p2.x+controlDist*m.cos(angle2+m.PI);c2.y=p2.y-controlDist*m.sin(angle2+m.PI);}drawPusher(ctx,specs,this.o1,this.o2,p1,c1,c2,p2,this.numElectron,this.caches);}}};_.getPoints=function(){return[];};_.isOver=function(p,barrier){for(var i=0,ii=this.caches.length;i<ii;i++){var r=jsb.distanceFromCurve(p,this.caches[i]);if(r.distance<barrier){return true;}}return false;};})(ChemDoodle.math,ChemDoodle.lib.jsBezier,ChemDoodle.structures,ChemDoodle.structures.d2,Math);(function(math,structures,d2,m,undefined){'use strict';var BOND=new structures.Bond();d2.VAP=function(x,y){this.asterisk=new structures.Atom('O',x,y);this.substituent;this.bondType=1;this.attachments=[];};var _=d2.VAP.prototype=new d2._Shape();_.drawDecorations=function(ctx,specs){if(this.isHover||this.isSelected){ctx.strokeStyle=this.isHover?specs.colorHover:specs.colorSelect;ctx.lineWidth=1.2;var radius=7;if(this.hoverBond){var pi2=2*m.PI;var angle=(this.asterisk.angleForStupidCanvasArcs(this.hoverBond)+m.PI/2)%pi2;ctx.strokeStyle=this.isHover?specs.colorHover:specs.colorSelect;ctx.beginPath();var angleTo=(angle+m.PI)%pi2;angleTo=angleTo%(m.PI*2);ctx.arc(this.asterisk.x,this.asterisk.y,radius,angle,angleTo,false);ctx.stroke();ctx.beginPath();angle+=m.PI;angleTo=(angle+m.PI)%pi2;ctx.arc(this.hoverBond.x,this.hoverBond.y,radius,angle,angleTo,false);ctx.stroke();}else{ctx.beginPath();ctx.arc(this.asterisk.x,this.asterisk.y,radius,0,m.PI*2,false);ctx.stroke();}}};_.draw=function(ctx,specs){// asterisk\nctx.strokeStyle=this.error?specs.colorError:specs.shapes_color;ctx.lineWidth=1;var length=4;var sqrt3=m.sqrt(3)/2;ctx.beginPath();ctx.moveTo(this.asterisk.x,this.asterisk.y-length);ctx.lineTo(this.asterisk.x,this.asterisk.y+length);ctx.moveTo(this.asterisk.x-sqrt3*length,this.asterisk.y-length/2);ctx.lineTo(this.asterisk.x+sqrt3*length,this.asterisk.y+length/2);ctx.moveTo(this.asterisk.x-sqrt3*length,this.asterisk.y+length/2);ctx.lineTo(this.asterisk.x+sqrt3*length,this.asterisk.y-length/2);ctx.stroke();this.asterisk.textBounds=[];this.asterisk.textBounds.push({x:this.asterisk.x-length,y:this.asterisk.y-length,w:length*2,h:length*2});var bcsave=specs.bonds_color;if(this.error){specs.bonds_color=specs.colorError;}BOND.a1=this.asterisk;// substituent bond\nif(this.substituent){BOND.a2=this.substituent;BOND.bondOrder=this.bondType;BOND.draw(ctx,specs);}// attachment bonds\nBOND.bondOrder=0;if(!this.error){specs.bonds_color=specs.shapes_color;}for(var i=0,ii=this.attachments.length;i<ii;i++){BOND.a2=this.attachments[i];BOND.draw(ctx,specs);}specs.bonds_color=bcsave;};_.getPoints=function(){return[this.asterisk];};_.isOver=function(p,barrier){return false;};})(ChemDoodle.math,ChemDoodle.structures,ChemDoodle.structures.d2,Math);(function(d3,m,undefined){'use strict';d3._Mesh=function(){};var _=d3._Mesh.prototype;_.storeData=function(positionData,normalData,indexData){this.positionData=positionData;this.normalData=normalData;this.indexData=indexData;};_.setupBuffers=function(gl){this.vertexPositionBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexPositionBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(this.positionData),gl.STATIC_DRAW);this.vertexPositionBuffer.itemSize=3;this.vertexPositionBuffer.numItems=this.positionData.length/3;this.vertexNormalBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexNormalBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(this.normalData),gl.STATIC_DRAW);this.vertexNormalBuffer.itemSize=3;this.vertexNormalBuffer.numItems=this.normalData.length/3;if(this.indexData){this.vertexIndexBuffer=gl.createBuffer();gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.vertexIndexBuffer);gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(this.indexData),gl.STATIC_DRAW);this.vertexIndexBuffer.itemSize=1;this.vertexIndexBuffer.numItems=this.indexData.length;}if(this.partitions){for(var i=0,ii=this.partitions.length;i<ii;i++){var p=this.partitions[i];var buffers=this.generateBuffers(gl,p.positionData,p.normalData,p.indexData);p.vertexPositionBuffer=buffers[0];p.vertexNormalBuffer=buffers[1];p.vertexIndexBuffer=buffers[2];}}};_.generateBuffers=function(gl,positionData,normalData,indexData){var vertexPositionBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vertexPositionBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(positionData),gl.STATIC_DRAW);vertexPositionBuffer.itemSize=3;vertexPositionBuffer.numItems=positionData.length/3;var vertexNormalBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vertexNormalBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(normalData),gl.STATIC_DRAW);vertexNormalBuffer.itemSize=3;vertexNormalBuffer.numItems=normalData.length/3;var vertexIndexBuffer;if(indexData){vertexIndexBuffer=gl.createBuffer();gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,vertexIndexBuffer);gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(indexData),gl.STATIC_DRAW);vertexIndexBuffer.itemSize=1;vertexIndexBuffer.numItems=indexData.length;}return[vertexPositionBuffer,vertexNormalBuffer,vertexIndexBuffer];};_.bindBuffers=function(gl){if(!this.vertexPositionBuffer){this.setupBuffers(gl);}// positions\ngl.bindBuffer(gl.ARRAY_BUFFER,this.vertexPositionBuffer);gl.vertexAttribPointer(gl.shader.vertexPositionAttribute,this.vertexPositionBuffer.itemSize,gl.FLOAT,false,0,0);// normals\ngl.bindBuffer(gl.ARRAY_BUFFER,this.vertexNormalBuffer);gl.vertexAttribPointer(gl.shader.vertexNormalAttribute,this.vertexNormalBuffer.itemSize,gl.FLOAT,false,0,0);if(this.vertexIndexBuffer){// indexes\ngl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.vertexIndexBuffer);}};})(ChemDoodle.structures.d3,Math);(function(d3,undefined){'use strict';d3._Measurement=function(){};var _=d3._Measurement.prototype=new d3._Mesh();_.render=function(gl,specs){gl.shader.setMatrixUniforms(gl);// setting the vertex position buffer to undefined resets the buffers, so this shape can be dynamically updated with the molecule\nif(specs.measurement_update_3D){this.vertexPositionBuffer=undefined;this.text=undefined;}if(!this.vertexPositionBuffer){this.calculateData(specs);}this.bindBuffers(gl);// colors\ngl.material.setDiffuseColor(gl,specs.shapes_color);gl.lineWidth(specs.shapes_lineWidth);// render\ngl.drawElements(gl.LINES,this.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);};_.renderText=function(gl,specs){gl.shader.setMatrixUniforms(gl);// render the text\nif(!this.text){this.text=this.getText(specs);}var vertexData={position:[],texCoord:[],translation:[]};gl.textImage.pushVertexData(this.text.value,this.text.pos,1,vertexData);gl.textMesh.storeData(gl,vertexData.position,vertexData.texCoord,vertexData.translation);gl.textImage.useTexture(gl);gl.textMesh.render(gl);};})(ChemDoodle.structures.d3);(function(ELEMENT,extensions,d3,math,m,m4,v3,undefined){'use strict';d3.Angle=function(a1,a2,a3){this.a1=a1;this.a2=a2;this.a3=a3;};var _=d3.Angle.prototype=new d3._Measurement();_.calculateData=function(specs){var positionData=[];var normalData=[];var indexData=[];var dist1=this.a2.distance3D(this.a1);var dist2=this.a2.distance3D(this.a3);this.distUse=m.min(dist1,dist2)/2;// data for the angle\nthis.vec1=v3.normalize([this.a1.x-this.a2.x,this.a1.y-this.a2.y,this.a1.z-this.a2.z]);this.vec2=v3.normalize([this.a3.x-this.a2.x,this.a3.y-this.a2.y,this.a3.z-this.a2.z]);this.angle=extensions.vec3AngleFrom(this.vec1,this.vec2);var axis=v3.normalize(v3.cross(this.vec1,this.vec2,[]));var vec3=v3.normalize(v3.cross(axis,this.vec1,[]));var bands=specs.measurement_angleBands_3D;for(var i=0;i<=bands;++i){var theta=this.angle*i/bands;var vecCos=v3.scale(this.vec1,m.cos(theta),[]);var vecSin=v3.scale(vec3,m.sin(theta),[]);var norm=v3.scale(v3.normalize(v3.add(vecCos,vecSin,[])),this.distUse);positionData.push(this.a2.x+norm[0],this.a2.y+norm[1],this.a2.z+norm[2]);normalData.push(0,0,0);if(i<bands){indexData.push(i,i+1);}}this.storeData(positionData,normalData,indexData);};_.getText=function(specs){var vecCenter=v3.scale(v3.normalize(v3.add(this.vec1,this.vec2,[])),this.distUse+0.3);return{pos:[this.a2.x+vecCenter[0],this.a2.y+vecCenter[1],this.a2.z+vecCenter[2]],value:[math.angleBounds(this.angle,true).toFixed(2),\" \\xB0\"].join('')};};})(ChemDoodle.ELEMENT,ChemDoodle.extensions,ChemDoodle.structures.d3,ChemDoodle.math,Math,ChemDoodle.lib.mat4,ChemDoodle.lib.vec3);(function(d3,m,undefined){'use strict';d3.Arrow=function(radius,longitudeBands){var positionData=[];var normalData=[];for(var longNumber=0;longNumber<=longitudeBands;longNumber++){var theta=longNumber*2*m.PI/longitudeBands;var sinTheta=m.sin(theta);var cosTheta=m.cos(theta);var x=cosTheta;var y=sinTheta;normalData.push(// base cylinder\n0,0,-1,0,0,-1,// cylinder\nx,y,0,x,y,0,// base cone\n0,0,-1,0,0,-1,// cone\nx,y,1,x,y,1);positionData.push(// base cylinder\n0,0,0,radius*x,radius*y,0,// cylinder\nradius*x,radius*y,0,radius*x,radius*y,2,// base cone\nradius*x,radius*y,2,radius*x*2,radius*y*2,2,// cone\nradius*x*2,radius*y*2,2,0,0,3);}var indexData=[];for(var i=0;i<longitudeBands;i++){var offset=i*8;for(var j=0,jj=7;j<jj;j++){var first=j+offset;var second=first+1;var third=first+jj+2;var forth=third-1;indexData.push(first,third,second,third,first,forth);}}this.storeData(positionData,normalData,indexData);};d3.Arrow.prototype=new d3._Mesh();})(ChemDoodle.structures.d3,Math);(function(d3,m,undefined){'use strict';d3.Box=function(width,height,depth){width/=2;depth/=2;var positionData=[];var normalData=[];// top\npositionData.push(width,height,-depth);positionData.push(width,height,-depth);positionData.push(-width,height,-depth);positionData.push(width,height,depth);positionData.push(-width,height,depth);positionData.push(-width,height,depth);for(var i=6;i--;normalData.push(0,1,0)){;}// front\npositionData.push(-width,height,depth);positionData.push(-width,height,depth);positionData.push(-width,0,depth);positionData.push(width,height,depth);positionData.push(width,0,depth);positionData.push(width,0,depth);for(var i=6;i--;normalData.push(0,0,1)){;}// right\npositionData.push(width,height,depth);positionData.push(width,height,depth);positionData.push(width,0,depth);positionData.push(width,height,-depth);positionData.push(width,0,-depth);positionData.push(width,0,-depth);for(var i=6;i--;normalData.push(1,0,0)){;}// back\npositionData.push(width,height,-depth);positionData.push(width,height,-depth);positionData.push(width,0,-depth);positionData.push(-width,height,-depth);positionData.push(-width,0,-depth);positionData.push(-width,0,-depth);for(var i=6;i--;normalData.push(0,0,-1)){;}// left\npositionData.push(-width,height,-depth);positionData.push(-width,height,-depth);positionData.push(-width,0,-depth);positionData.push(-width,height,depth);positionData.push(-width,0,depth);positionData.push(-width,0,depth);for(var i=6;i--;normalData.push(-1,0,0)){;}// bottom\npositionData.push(-width,0,depth);positionData.push(-width,0,depth);positionData.push(-width,0,-depth);positionData.push(width,0,depth);positionData.push(width,0,-depth);positionData.push(width,0,-depth);for(var i=6;i--;normalData.push(0,-1,0)){;}this.storeData(positionData,normalData);};d3.Box.prototype=new d3._Mesh();})(ChemDoodle.structures.d3,Math);(function(math,d3,v3,m4,m,undefined){'use strict';d3.Camera=function(){this.fieldOfView=45;this.aspect=1;this.near=0.1;this.far=10000;this.zoom=1;this.viewMatrix=m4.identity([]);this.projectionMatrix=m4.identity([]);};var _=d3.Camera.prototype;_.perspectiveProjectionMatrix=function(){var top=m.tan(this.fieldOfView/360*m.PI)*this.near*this.zoom;var right=this.aspect*top;return m4.frustum(-right,right,-top,top,this.near,this.far,this.projectionMatrix);};_.orthogonalProjectionMatrix=function(){var top=m.tan(this.fieldOfView/360*m.PI)*((this.far-this.near)/2+this.near)*this.zoom;var right=this.aspect*top;return m4.ortho(-right,right,-top,top,this.near,this.far,this.projectionMatrix);};_.updateProjectionMatrix=function(isPerspective){return isPerspective?this.perspectiveProjectionMatrix():this.orthogonalProjectionMatrix();};_.focalLength=function(){return(this.far-this.near)/2+this.near;};_.zoomIn=function(){this.zoom=m.min(this.zoom*1.25,200);};_.zoomOut=function(){this.zoom=m.max(this.zoom/1.25,1/400);};})(ChemDoodle.math,ChemDoodle.structures.d3,ChemDoodle.lib.vec3,ChemDoodle.lib.mat4,window.Math);(function(d3,m,m4,undefined){'use strict';d3.LineArrow=function(){var d=2.8;var w=0.1;this.storeData([0,0,-3,w,0,-d,0,0,-3,-w,0,-d,0,0,-3,0,0,3,0,0,3,w,0,d,0,0,3,-w,0,d],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);};d3.LineArrow.prototype=new d3._Mesh();d3.Compass=function(gl,specs){// setup text X Y Z\nthis.textImage=new d3.TextImage();this.textImage.init(gl);this.textImage.updateFont(gl,specs.text_font_size,specs.text_font_families,specs.text_font_bold,specs.text_font_italic,specs.text_font_stroke_3D);this.textMesh=new d3.TextMesh();this.textMesh.init(gl);var screenRatioHeight=specs.compass_size_3D/gl.canvas.clientHeight;var height=3/screenRatioHeight;var tanTheta=m.tan(specs.projectionPerspectiveVerticalFieldOfView_3D/360*m.PI);var depth=height/tanTheta;var near=m.max(depth-height,0.1);var far=depth+height;var aspec=gl.canvas.clientWidth/gl.canvas.clientHeight;var fnProjection,z;if(specs.projectionPerspective_3D){z=near;fnProjection=m4.frustum;}else{z=depth;fnProjection=m4.ortho;}var nearRatio=z/gl.canvas.clientHeight*2*tanTheta;var top=tanTheta*z;var bottom=-top;var left=aspec*bottom;var right=aspec*top;if(specs.compass_type_3D===0){var deltaX=-(gl.canvas.clientWidth-specs.compass_size_3D)/2+this.textImage.charHeight;var deltaY=-(gl.canvas.clientHeight-specs.compass_size_3D)/2+this.textImage.charHeight;var x=deltaX*nearRatio;var y=deltaY*nearRatio;left-=x;right-=x;bottom-=y;top-=y;}this.projectionMatrix=fnProjection(left,right,bottom,top,near,far);this.translationMatrix=m4.translate(m4.identity([]),[0,0,-depth]);// vertex data for X Y Z text label\nvar vertexData={position:[],texCoord:[],translation:[]};// it need to auto calculated somehow\nvar textPos=3.5;this.textImage.pushVertexData('X',[textPos,0,0],0,vertexData);this.textImage.pushVertexData('Y',[0,textPos,0],0,vertexData);this.textImage.pushVertexData('Z',[0,0,textPos],0,vertexData);this.textMesh.storeData(gl,vertexData.position,vertexData.texCoord,vertexData.translation);};var _=d3.Compass.prototype;_.renderArrow=function(gl,type,color,mvMatrix){gl.material.setDiffuseColor(gl,color);gl.shader.setModelViewMatrix(gl,mvMatrix);if(type===1){gl.drawArrays(gl.LINES,0,gl.lineArrowBuffer.vertexPositionBuffer.numItems);}else{gl.drawElements(gl.TRIANGLES,gl.arrowBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}};_.render=function(gl,specs){gl.shader.setProjectionMatrix(gl,this.projectionMatrix);specs.compass_type_3D===1?gl.lineArrowBuffer.bindBuffers(gl):gl.arrowBuffer.bindBuffers(gl);gl.material.setTempColors(gl,specs.bonds_materialAmbientColor_3D,undefined,specs.bonds_materialSpecularColor_3D,specs.bonds_materialShininess_3D);var modelMatrix=m4.multiply(this.translationMatrix,gl.rotationMatrix,[]);var angle=m.PI/2;// x - axis\nthis.renderArrow(gl,specs.compass_type_3D,specs.compass_axisXColor_3D,m4.rotateY(modelMatrix,angle,[]));// y - axis\nthis.renderArrow(gl,specs.compass_type_3D,specs.compass_axisYColor_3D,m4.rotateX(modelMatrix,-angle,[]));// z - axis\nthis.renderArrow(gl,specs.compass_type_3D,specs.compass_axisZColor_3D,modelMatrix);};_.renderAxis=function(gl){gl.shader.setProjectionMatrix(gl,this.projectionMatrix);var mvMatrix=m4.multiply(this.translationMatrix,gl.rotationMatrix,[]);gl.shader.setModelViewMatrix(gl,mvMatrix);this.textImage.useTexture(gl);this.textMesh.render(gl);};})(ChemDoodle.structures.d3,Math,ChemDoodle.lib.mat4);(function(d3,m,undefined){'use strict';d3.Cylinder=function(radius,height,bands,closed){var positionData=[];var normalData=[];if(closed){for(var i=0;i<=bands;i++){var theta=i%bands*2*m.PI/bands;var cosTheta=m.cos(theta);var sinTheta=m.sin(theta);normalData.push(0,-1,0);positionData.push(0,0,0);normalData.push(0,-1,0);positionData.push(radius*cosTheta,0,radius*sinTheta);}for(var i=0;i<=bands;i++){var theta=i%bands*2*m.PI/bands;var cosTheta=m.cos(theta);var sinTheta=m.sin(theta);normalData.push(cosTheta,0,sinTheta);positionData.push(radius*cosTheta,0,radius*sinTheta);normalData.push(cosTheta,0,sinTheta);positionData.push(radius*cosTheta,height,radius*sinTheta);}for(var i=0;i<=bands;i++){var theta=i%bands*2*m.PI/bands;var cosTheta=m.cos(theta);var sinTheta=m.sin(theta);normalData.push(0,1,0);positionData.push(radius*cosTheta,height,radius*sinTheta);normalData.push(0,1,0);positionData.push(0,height,0);}}else{for(var i=0;i<bands;i++){var theta=i*2*m.PI/bands;var cosTheta=m.cos(theta);var sinTheta=m.sin(theta);normalData.push(cosTheta,0,sinTheta);positionData.push(radius*cosTheta,0,radius*sinTheta);normalData.push(cosTheta,0,sinTheta);positionData.push(radius*cosTheta,height,radius*sinTheta);}normalData.push(1,0,0);positionData.push(radius,0,0);normalData.push(1,0,0);positionData.push(radius,height,0);}this.storeData(positionData,normalData);};d3.Cylinder.prototype=new d3._Mesh();})(ChemDoodle.structures.d3,Math);(function(ELEMENT,d3,m,v3,undefined){'use strict';d3.Distance=function(a1,a2,node,offset){this.a1=a1;this.a2=a2;this.node=node;this.offset=offset?offset:0;};var _=d3.Distance.prototype=new d3._Measurement();_.calculateData=function(specs){var positionData=[this.a1.x,this.a1.y,this.a1.z,this.a2.x,this.a2.y,this.a2.z];if(this.node){var r1=specs.atoms_useVDWDiameters_3D?ELEMENT[this.a1.label].vdWRadius*specs.atoms_vdwMultiplier_3D:specs.atoms_sphereDiameter_3D/2;var r2=specs.atoms_useVDWDiameters_3D?ELEMENT[this.a2.label].vdWRadius*specs.atoms_vdwMultiplier_3D:specs.atoms_sphereDiameter_3D/2;this.move=this.offset+m.max(r1,r2);this.displacement=[(this.a1.x+this.a2.x)/2-this.node.x,(this.a1.y+this.a2.y)/2-this.node.y,(this.a1.z+this.a2.z)/2-this.node.z];v3.normalize(this.displacement);var change=v3.scale(this.displacement,this.move,[]);positionData[0]+=change[0];positionData[1]+=change[1];positionData[2]+=change[2];positionData[3]+=change[0];positionData[4]+=change[1];positionData[5]+=change[2];}var normalData=[0,0,0,0,0,0];var indexData=[0,1];this.storeData(positionData,normalData,indexData);};_.getText=function(specs){var dist=this.a1.distance3D(this.a2);var center=[(this.a1.x+this.a2.x)/2,(this.a1.y+this.a2.y)/2,(this.a1.z+this.a2.z)/2];if(this.node){var change=v3.scale(this.displacement,this.move+.1,[]);center[0]+=change[0];center[1]+=change[1];center[2]+=change[2];}return{pos:center,value:[dist.toFixed(2),\" \\u212B\"].join('')};};})(ChemDoodle.ELEMENT,ChemDoodle.structures.d3,Math,ChemDoodle.lib.vec3);(function(math,d3,v3,undefined){'use strict';d3.Fog=function(color,fogStart,fogEnd,density){this.fogScene(color,fogStart,fogEnd,density);};var _=d3.Fog.prototype;_.fogScene=function(color,fogStart,fogEnd,density){this.colorRGB=math.getRGB(color,1);this.fogStart=fogStart;this.fogEnd=fogEnd;this.density=density;};})(ChemDoodle.math,ChemDoodle.structures.d3,ChemDoodle.lib.vec3);(function(ELEMENT,d3,undefined){d3.Label=function(textImage){};var _=d3.Label.prototype;_.updateVerticesBuffer=function(gl,molecules,specs){for(var i=0,ii=molecules.length;i<ii;i++){var molecule=molecules[i];var moleculeLabel=molecule.labelMesh;var atoms=molecule.atoms;var vertexData={position:[],texCoord:[],translation:[]};var isMacro=atoms.length>0&&atoms[0].hetatm!=undefined;for(var j=0,jj=atoms.length;j<jj;j++){var atom=atoms[j];var atomLabel=atom.label;var zDepth=0.05;// Sphere or Ball and Stick\nif(specs.atoms_useVDWDiameters_3D){var add=ELEMENT[atomLabel].vdWRadius*specs.atoms_vdwMultiplier_3D;if(add===0){add=1;}zDepth+=add;}// if Stick or Wireframe\nelse if(specs.atoms_sphereDiameter_3D){zDepth+=specs.atoms_sphereDiameter_3D/2*1.5;}if(isMacro){if(!atom.hetatm){if(!specs.macro_displayAtoms){continue;}}else if(atom.isWater){if(!specs.macro_showWaters){continue;}}}gl.textImage.pushVertexData(atom.altLabel?atom.altLabel:atom.label,[atom.x,atom.y,atom.z],zDepth,vertexData);}var chains=molecule.chains;if(chains&&(specs.proteins_displayRibbon||specs.proteins_displayBackbone)){for(var j=0,jj=chains.length;j<jj;j++){var chain=chains[j];for(var k=0,kk=chain.length;k<kk;k++){var residue=chain[k];if(residue.name){var atom=residue.cp1;gl.textImage.pushVertexData(residue.name,[atom.x,atom.y,atom.z],2,vertexData);}}}}moleculeLabel.storeData(gl,vertexData.position,vertexData.texCoord,vertexData.translation,vertexData.zDepth);}};_.render=function(gl,specs,molecules){// use projection for shader text.\ngl.shader.setMatrixUniforms(gl);gl.textImage.useTexture(gl);for(var i=0,ii=molecules.length;i<ii;i++){if(molecules[i].labelMesh){molecules[i].labelMesh.render(gl);}}};})(ChemDoodle.ELEMENT,ChemDoodle.structures.d3);(function(d3,m,undefined){'use strict';d3.Sphere=function(radius,latitudeBands,longitudeBands){var positionData=[];var normalData=[];for(var latNumber=0;latNumber<=latitudeBands;latNumber++){var theta=latNumber*m.PI/latitudeBands;var sinTheta=m.sin(theta);var cosTheta=m.cos(theta);for(var longNumber=0;longNumber<=longitudeBands;longNumber++){var phi=longNumber*2*m.PI/longitudeBands;var sinPhi=m.sin(phi);var cosPhi=m.cos(phi);var x=cosPhi*sinTheta;var y=cosTheta;var z=sinPhi*sinTheta;normalData.push(x,y,z);positionData.push(radius*x,radius*y,radius*z);}}var indexData=[];longitudeBands+=1;for(var latNumber=0;latNumber<latitudeBands;latNumber++){for(var longNumber=0;longNumber<longitudeBands;longNumber++){var first=latNumber*longitudeBands+longNumber%longitudeBands;var second=first+longitudeBands;indexData.push(first,first+1,second);if(longNumber<longitudeBands-1){indexData.push(second,first+1,second+1);}}}this.storeData(positionData,normalData,indexData);};d3.Sphere.prototype=new d3._Mesh();})(ChemDoodle.structures.d3,Math);(function(RESIDUE,d3,m,v3,undefined){'use strict';var loadPartition=function loadPartition(gl,p){// positions\ngl.bindBuffer(gl.ARRAY_BUFFER,p.vertexPositionBuffer);gl.vertexAttribPointer(gl.shader.vertexPositionAttribute,p.vertexPositionBuffer.itemSize,gl.FLOAT,false,0,0);// normals\ngl.bindBuffer(gl.ARRAY_BUFFER,p.vertexNormalBuffer);gl.vertexAttribPointer(gl.shader.vertexNormalAttribute,p.vertexNormalBuffer.itemSize,gl.FLOAT,false,0,0);// indexes\ngl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,p.vertexIndexBuffer);};function SubRibbon(entire,name,indexes,pi){this.entire=entire;this.name=name;this.indexes=indexes;this.pi=pi;}var _2=SubRibbon.prototype;// NOTE: To use rainbow coloring for chains, it needs coloring each residue with total residue count\n// and current index residue in chain parameters.\n_2.getColor=function(specs){if(specs.macro_colorByChain){return this.entire.chainColor;}else if(this.name){return this.getResidueColor(RESIDUE[this.name]?this.name:'*',specs);}else if(this.helix){return this.entire.front?specs.proteins_ribbonCartoonHelixPrimaryColor:specs.proteins_ribbonCartoonHelixSecondaryColor;}else if(this.sheet){return specs.proteins_ribbonCartoonSheetColor;}else{return this.entire.front?specs.proteins_primaryColor:specs.proteins_secondaryColor;}};_2.getResidueColor=function(name,specs){var r=RESIDUE[name];if(specs.proteins_residueColor==='shapely'){return r.shapelyColor;}else if(specs.proteins_residueColor==='amino'){return r.aminoColor;}else if(specs.proteins_residueColor==='polarity'){if(r.polar){return'#C10000';}else{return'#FFFFFF';}}else if(specs.proteins_residueColor==='acidity'){if(r.acidity===1){return'#0000FF';}else if(r.acidity===-1){return'#FF0000';}else if(r.polar){return'#FFFFFF';}else{return'#773300';}}return'#FFFFFF';};_2.render=function(gl,specs,noColor){if(this.entire.partitions&&this.pi!==this.entire.partitions.lastRender){loadPartition(gl,this.entire.partitions[this.pi]);this.entire.partitions.lastRender=this.pi;}if(!this.vertexIndexBuffer){this.vertexIndexBuffer=gl.createBuffer();gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.vertexIndexBuffer);gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(this.indexes),gl.STATIC_DRAW);this.vertexIndexBuffer.itemSize=1;this.vertexIndexBuffer.numItems=this.indexes.length;}// indexes\ngl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.vertexIndexBuffer);// colors\nif(!noColor&&specs.proteins_residueColor!=='rainbow'){gl.material.setDiffuseColor(gl,this.getColor(specs));}// render\ngl.drawElements(gl.TRIANGLES,this.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);};d3.Ribbon=function(chain,offset,cartoon){// ribbon meshes build front to back, not side to side, so keep this in\n// mind\nvar lineSegmentNum=chain[0].lineSegments.length;var lineSegmentLength=chain[0].lineSegments[0].length;this.partitions=[];this.partitions.lastRender=0;var currentPartition;this.front=offset>0;// calculate vertex and normal points\nfor(var i=0,ii=chain.length;i<ii;i++){if(!currentPartition||currentPartition.positionData.length>65000){if(this.partitions.length>0){i--;}currentPartition={count:0,positionData:[],normalData:[]};this.partitions.push(currentPartition);}var residue=chain[i];currentPartition.count++;for(var j=0;j<lineSegmentNum;j++){var lineSegment=cartoon?residue.lineSegmentsCartoon[j]:residue.lineSegments[j];var doSide1=j===0;var doSide2=false;for(var k=0;k<lineSegmentLength;k++){var a=lineSegment[k];// normals\nvar abovei=i;var abovek=k+1;if(i===chain.length-1&&k===lineSegmentLength-1){abovek--;}else if(k===lineSegmentLength-1){abovei++;abovek=0;}var above=cartoon?chain[abovei].lineSegmentsCartoon[j][abovek]:chain[abovei].lineSegments[j][abovek];var negate=false;var nextj=j+1;if(j===lineSegmentNum-1){nextj-=2;negate=true;}var side=cartoon?residue.lineSegmentsCartoon[nextj][k]:residue.lineSegments[nextj][k];var toAbove=[above.x-a.x,above.y-a.y,above.z-a.z];var toSide=[side.x-a.x,side.y-a.y,side.z-a.z];var normal=v3.cross(toAbove,toSide,[]);// positions\nif(k===0){// tip\nv3.normalize(toAbove);v3.scale(toAbove,-1);currentPartition.normalData.push(toAbove[0],toAbove[1],toAbove[2]);currentPartition.positionData.push(a.x,a.y,a.z);}if(doSide1||doSide2){// sides\nv3.normalize(toSide);v3.scale(toSide,-1);currentPartition.normalData.push(toSide[0],toSide[1],toSide[2]);currentPartition.positionData.push(a.x,a.y,a.z);if(doSide1&&k===lineSegmentLength-1){doSide1=false;k=-1;}}else{// center strips\nv3.normalize(normal);if(negate&&!this.front||!negate&&this.front){v3.scale(normal,-1);}currentPartition.normalData.push(normal[0],normal[1],normal[2]);v3.scale(normal,m.abs(offset));currentPartition.positionData.push(a.x+normal[0],a.y+normal[1],a.z+normal[2]);if(j===lineSegmentNum-1&&k===lineSegmentLength-1){doSide2=true;k=-1;}}if(k===-1||k===lineSegmentLength-1){// end\nv3.normalize(toAbove);currentPartition.normalData.push(toAbove[0],toAbove[1],toAbove[2]);currentPartition.positionData.push(a.x,a.y,a.z);}}}}// build mesh connectivity\n// add 2 to lineSegmentNum and lineSegmentLength to account for sides\n// and ends\nlineSegmentNum+=2;lineSegmentLength+=2;this.segments=[];this.partitionSegments=[];for(var n=0,nn=this.partitions.length;n<nn;n++){var currentPartition=this.partitions[n];var partitionSegmentIndexData=[];for(var i=0,ii=currentPartition.count-1;i<ii;i++){var chainIndex=i;for(var j=0;j<n;j++){chainIndex+=this.partitions[j].count-1;}var c=chain[chainIndex];var residueIndexStart=i*lineSegmentNum*lineSegmentLength;var individualIndexData=[];for(var j=0,jj=lineSegmentNum-1;j<jj;j++){var segmentIndexStart=residueIndexStart+j*lineSegmentLength;for(var k=0;k<lineSegmentLength-1;k++){var nextRes=1;if(i===ii){nextRes=0;}var add=[segmentIndexStart+k,segmentIndexStart+lineSegmentLength+k,segmentIndexStart+lineSegmentLength+k+nextRes,segmentIndexStart+k,segmentIndexStart+k+nextRes,segmentIndexStart+lineSegmentLength+k+nextRes];if(k!==lineSegmentLength-1){if(this.front){individualIndexData.push(add[0],add[1],add[2],add[3],add[5],add[4]);}else{individualIndexData.push(add[0],add[2],add[1],add[3],add[4],add[5]);}}if(k===lineSegmentLength-2&&!(i===currentPartition.count-2&&n===this.partitions.length-1)){// jump the gap, the other mesh points will be\n// covered,\n// so no need to explicitly skip them\nvar jump=lineSegmentNum*lineSegmentLength-k;add[2]+=jump;add[4]+=jump;add[5]+=jump;}if(this.front){partitionSegmentIndexData.push(add[0],add[1],add[2],add[3],add[5],add[4]);}else{partitionSegmentIndexData.push(add[0],add[2],add[1],add[3],add[4],add[5]);}}}if(cartoon&&c.split){var sr=new SubRibbon(this,undefined,partitionSegmentIndexData,n);sr.helix=c.helix;sr.sheet=c.sheet;this.partitionSegments.push(sr);partitionSegmentIndexData=[];}this.segments.push(new SubRibbon(this,c.name,individualIndexData,n));}var sr=new SubRibbon(this,undefined,partitionSegmentIndexData,n);sr.helix=c.helix;sr.sheet=c.sheet;this.partitionSegments.push(sr);}this.storeData(this.partitions[0].positionData,this.partitions[0].normalData);if(this.partitions.length===1){// clear partitions to reduce overhead\nthis.partitions=undefined;}};var _=d3.Ribbon.prototype=new d3._Mesh();_.render=function(gl,specs){this.bindBuffers(gl);// colors\nvar color=specs.macro_colorByChain?this.chainColor:undefined;if(!color){color=this.front?specs.proteins_primaryColor:specs.proteins_secondaryColor;}gl.material.setDiffuseColor(gl,color);for(var i=0,ii=this.partitionSegments.length;i<ii;i++){this.partitionSegments[i].render(gl,specs,!specs.proteins_ribbonCartoonize);}};})(ChemDoodle.RESIDUE,ChemDoodle.structures.d3,Math,ChemDoodle.lib.vec3);(function(math,d3,v3,m4,undefined){'use strict';d3.Light=function(diffuseColor,specularColor,direction){this.camera=new d3.Camera();this.lightScene(diffuseColor,specularColor,direction);};var _=d3.Light.prototype;_.lightScene=function(diffuseColor,specularColor,direction){this.diffuseRGB=math.getRGB(diffuseColor,1);this.specularRGB=math.getRGB(specularColor,1);this.direction=direction;this.updateView();};_.updateView=function(){var lightDir=v3.normalize(this.direction,[]);var eyePos=v3.scale(lightDir,(this.camera.near-this.camera.far)/2-this.camera.near,[]);var up=v3.equal(lightDir,[0,1,0])?[0,0,1]:[0,1,0];m4.lookAt(eyePos,[0,0,0],up,this.camera.viewMatrix);this.camera.orthogonalProjectionMatrix();};})(ChemDoodle.math,ChemDoodle.structures.d3,ChemDoodle.lib.vec3,ChemDoodle.lib.mat4);(function(d3,undefined){'use strict';d3.Line=function(){this.storeData([0,0,0,0,1,0],[0,0,0,0,0,0]);};d3.Line.prototype=new d3._Mesh();})(ChemDoodle.structures.d3);(function(math,d3,undefined){'use strict';d3.Material=function(){};var _=d3.Material.prototype;_.setTempColors=function(gl,ambientColor,diffuseColor,specularColor,shininess){if(ambientColor){gl.shader.setMaterialAmbientColor(gl,math.getRGB(ambientColor,1));}if(diffuseColor){gl.shader.setMaterialDiffuseColor(gl,math.getRGB(diffuseColor,1));}if(specularColor){gl.shader.setMaterialSpecularColor(gl,math.getRGB(specularColor,1));}gl.shader.setMaterialShininess(gl,shininess);gl.shader.setMaterialAlpha(gl,1);};_.setDiffuseColor=function(gl,diffuseColor){gl.shader.setMaterialDiffuseColor(gl,math.getRGB(diffuseColor,1));};_.setAlpha=function(gl,alpha){gl.shader.setMaterialAlpha(gl,alpha);};})(ChemDoodle.math,ChemDoodle.structures.d3);(function(d3,math,document,undefined){'use strict';d3.Picker=function(){};var _=d3.Picker.prototype;_.init=function(gl){// setup for picking system\nthis.framebuffer=gl.createFramebuffer();// set pick texture\nvar texture2D=gl.createTexture();var renderbuffer=gl.createRenderbuffer();gl.bindTexture(gl.TEXTURE_2D,texture2D);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.bindRenderbuffer(gl.RENDERBUFFER,renderbuffer);// set framebuffer and bind the texture and renderbuffer\ngl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture2D,0);gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,renderbuffer);gl.bindTexture(gl.TEXTURE_2D,null);gl.bindRenderbuffer(gl.RENDERBUFFER,null);gl.bindFramebuffer(gl.FRAMEBUFFER,null);};_.setDimension=function(gl,width,height){gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);// get binded depth attachment renderbuffer\nvar renderbuffer=gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME);if(gl.isRenderbuffer(renderbuffer)){// set renderbuffer dimension\ngl.bindRenderbuffer(gl.RENDERBUFFER,renderbuffer);gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,width,height);gl.bindRenderbuffer(gl.RENDERBUFFER,null);}// get binded color attachment texture 2d\nvar texture2D=gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME);if(gl.isTexture(texture2D)){// set texture dimension\ngl.bindTexture(gl.TEXTURE_2D,texture2D);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,width,height,0,gl.RGBA,gl.UNSIGNED_BYTE,null);gl.bindTexture(gl.TEXTURE_2D,null);}gl.bindFramebuffer(gl.FRAMEBUFFER,null);};})(ChemDoodle.structures.d3,ChemDoodle.math,document);(function(d3,m,undefined){'use strict';d3.Pill=function(radius,height,latitudeBands,longitudeBands){var capHeightScale=1;var capDiameter=2*radius;height-=capDiameter;if(height<0){capHeightScale=0;height+=capDiameter;}else if(height<capDiameter){capHeightScale=height/capDiameter;height=capDiameter;}// update latitude and logintude band for two caps.\n// latitudeBands *= 2;\n// longitudeBands *= 2;\nvar positionData=[];var normalData=[];for(var latNumber=0;latNumber<=latitudeBands;latNumber++){var theta=latNumber*m.PI/latitudeBands;var sinTheta=m.sin(theta);var cosTheta=m.cos(theta)*capHeightScale;for(var longNumber=0;longNumber<=longitudeBands;longNumber++){var phi=longNumber*2*m.PI/longitudeBands;var sinPhi=m.sin(phi);var cosPhi=m.cos(phi);var x=cosPhi*sinTheta;var y=cosTheta;var z=sinPhi*sinTheta;normalData.push(x,y,z);positionData.push(radius*x,radius*y+(latNumber<latitudeBands/2?height:0),radius*z);}}var indexData=[];longitudeBands+=1;for(var latNumber=0;latNumber<latitudeBands;latNumber++){for(var longNumber=0;longNumber<longitudeBands;longNumber++){var first=latNumber*longitudeBands+longNumber%longitudeBands;var second=first+longitudeBands;indexData.push(first,first+1,second);if(longNumber<longitudeBands-1){indexData.push(second,first+1,second+1);}}}this.storeData(positionData,normalData,indexData);};d3.Pill.prototype=new d3._Mesh();})(ChemDoodle.structures.d3,Math);(function(extensions,RESIDUE,structures,d3,m,m4,v3,math,undefined){'use strict';function createDummyResidue(x,y,z){var dummyRes=new structures.Residue(-1);dummyRes.cp1=dummyRes.cp2=new structures.Atom('',x,y,z);return dummyRes;}function Pipe(a1,a2){this.a1=a1;this.a2=a2;};var _=Pipe.prototype;_.render=function(gl,specs){var p1=this.a1;var p2=this.a2;var height=1.001*p1.distance3D(p2);var radiusScale=specs.proteins_cylinderHelixDiameter/2;var scaleVector=[radiusScale,height,radiusScale];var transform=m4.translate(m4.identity(),[p1.x,p1.y,p1.z]);var y=[0,1,0];var ang=0;var axis;if(p1.x===p2.x&&p1.z===p2.z){axis=[0,0,1];if(p2.y<p1.y){ang=m.PI;}}else{var a2b=[p2.x-p1.x,p2.y-p1.y,p2.z-p1.z];ang=extensions.vec3AngleFrom(y,a2b);axis=v3.cross(y,a2b,[]);}if(ang!==0){m4.rotate(transform,ang,axis);}m4.scale(transform,scaleVector);gl.shader.setMatrixUniforms(gl,transform);gl.drawArrays(gl.TRIANGLE_STRIP,0,gl.cylinderClosedBuffer.vertexPositionBuffer.numItems);};function Plank(a1,a2,vx){this.a1=a1;this.a2=a2;this.vx=vx;};var _=Plank.prototype;_.render=function(gl,specs){if(this.specs){specs=this.specs;}// this is the elongation vector for the plank\nvar height=1.001*this.a1.distance3D(this.a2);var diry=[this.a2.x-this.a1.x,this.a2.y-this.a1.y,this.a2.z-this.a1.z];var dirz=v3.cross(diry,this.vx,[]);var dirx=v3.cross(dirz,diry,[]);v3.normalize(dirx);v3.normalize(diry);v3.normalize(dirz);var transform=[dirx[0],dirx[1],dirx[2],0,diry[0],diry[1],diry[2],0,dirz[0],dirz[1],dirz[2],0,this.a1.x,this.a1.y,this.a1.z,1];var scaleVector=[specs.proteins_plankSheetWidth,height,specs.proteins_tubeThickness];m4.scale(transform,scaleVector);gl.shader.setMatrixUniforms(gl,transform);gl.drawArrays(gl.TRIANGLE_STRIP,0,gl.boxBuffer.vertexPositionBuffer.numItems);};d3.PipePlank=function(rs,specs){this.tubes=[];this.helixCylinders=[];this.sheetPlanks=[];this.chainColor=rs.chainColor;var chainNoSS=[];var noSSResidues=[];var helixResidues=[];var sheetResidues=[];// the first residue just a dummy residue.\n// so at beginning, the secondary structure of second residue must be check\nif(rs.length>1){var r0=rs[0];var r1=rs[1];if(r1.helix){helixResidues.push(r0);}else if(r1.sheet){sheetResidues.push(r0);}else{noSSResidues.push(r0);}}// iterate residues\nfor(var i=1,ii=rs.length-1;i<=ii;i++){var residue=rs[i];if(residue.helix){helixResidues.push(residue);if(residue.arrow){var startPoint=v3.create();var endPoint=v3.create();if(helixResidues.length==2){// PDB like 2PEC have helix which is just have 2 residues in it.\nstartPoint=[helixResidues[0].cp1.x,helixResidues[0].cp1.y,helixResidues[0].cp1.z];endPoint=[helixResidues[1].cp1.x,helixResidues[1].cp1.y,helixResidues[1].cp1.z];}else{// To get helix axis, we need at least 4 residues.\n// if residues lenght is 3, then one residue need to be added.\n// The added residue is residue before helix.\nif(helixResidues.length==3){helixResidues.unshift(rs[m.max(i-3,0)]);}var Ps=[];var Vs=[];for(var h=1,hh=helixResidues.length-1;h<hh;h++){var cai=[helixResidues[h].cp1.x,helixResidues[h].cp1.y,helixResidues[h].cp1.z];var A=[helixResidues[h-1].cp1.x,helixResidues[h-1].cp1.y,helixResidues[h-1].cp1.z];var B=[helixResidues[h+1].cp1.x,helixResidues[h+1].cp1.y,helixResidues[h+1].cp1.z];v3.subtract(A,cai);v3.subtract(B,cai);var Al=v3.scale(A,v3.length(B),[]);var Bl=v3.scale(B,v3.length(A),[]);var V=v3.normalize(v3.add(Al,Bl,[]));Ps.push(cai);Vs.push(V);}var axes=[];for(var h=0,hh=Ps.length-1;h<hh;h++){var P1=Ps[h];var V1=Vs[h];var P2=Ps[h+1];var V2=Vs[h+1];var H=v3.normalize(v3.cross(V1,V2,[]));var P2subP1=v3.subtract(P2,P1,[]);var d=v3.dot(P2subP1,H);var dH=v3.scale(H,d,[]);var dHl=v3.length(dH);var P2subP1l=v3.length(P2subP1);var r=-(dHl*dHl-P2subP1l*P2subP1l)/(2*v3.dot(v3.subtract(P1,P2,[]),V2));var H1=v3.add(P1,v3.scale(V1,r,[]),[]);var H2=v3.add(P2,v3.scale(V2,r,[]),[]);axes.push([H1,H2]);}var firstPoint=axes[0][0];var secondPoint=axes[0][1];var secondToFirst=v3.subtract(firstPoint,secondPoint,[]);v3.add(firstPoint,secondToFirst,startPoint);var firstPoint=axes[axes.length-1][1];var secondPoint=axes[axes.length-1][0];var secondToFirst=v3.subtract(firstPoint,secondPoint,[]);v3.add(firstPoint,secondToFirst,endPoint);}var startAtom=new structures.Atom('',startPoint[0],startPoint[1],startPoint[2]);var endAtom=new structures.Atom('',endPoint[0],endPoint[1],endPoint[2]);this.helixCylinders.push(new Pipe(startAtom,endAtom));helixResidues=[];// get vector direction from Pipe end to start\nvar helixDir=v3.subtract(startPoint,endPoint,[]);v3.normalize(helixDir);v3.scale(helixDir,.5);if(noSSResidues.length>0){var additionCp=v3.add(startPoint,helixDir,[]);var prevResCp=noSSResidues[noSSResidues.length-1].cp1;var helixDirToPrevRes=v3.subtract([prevResCp.x,prevResCp.y,prevResCp.z],additionCp,[]);v3.normalize(helixDirToPrevRes);v3.scale(helixDirToPrevRes,.5);v3.add(additionCp,helixDirToPrevRes);var dummyRes=new structures.Residue(-1);dummyRes.cp1=dummyRes.cp2=new structures.Atom('',additionCp[0],additionCp[1],additionCp[2]);noSSResidues.push(dummyRes);// force the non secondary structure spline to end on helix start point.\nvar dummyRes=createDummyResidue(startPoint[0],startPoint[1],startPoint[2]);noSSResidues.push(dummyRes);chainNoSS.push(noSSResidues);}noSSResidues=[];// check for next residue\nif(i<ii){// force the non secondary structure spline to start on helix end point.\nvar dummyRes=createDummyResidue(endPoint[0],endPoint[1],endPoint[2]);noSSResidues.push(dummyRes);var rm=rs[i+1];if(rm.sheet){noSSResidues.push(residue);noSSResidues.push(residue);chainNoSS.push(noSSResidues);noSSResidues=[];sheetResidues.push(residue);}else{// force the non secondary structure spline to start on helix end point.\nv3.scale(helixDir,-1);var additionCp=v3.add(endPoint,helixDir,[]);var nextResCp=rm.cp1;var helixDirToNextRes=v3.subtract([nextResCp.x,nextResCp.y,nextResCp.z],additionCp,[]);v3.normalize(helixDirToNextRes);v3.scale(helixDirToNextRes,.5);v3.add(additionCp,helixDirToNextRes);var dummyRes=createDummyResidue(additionCp[0],additionCp[1],additionCp[2]);noSSResidues.push(dummyRes);}}}}else if(residue.sheet){sheetResidues.push(residue);if(residue.arrow){var p1=[0,0,0];var p2=[0,0,0];for(var h=0,hh=sheetResidues.length;h<hh;h++){var guidePoints=sheetResidues[h].guidePointsLarge;var gp1=guidePoints[0];var gp2=guidePoints[guidePoints.length-1];v3.add(p1,[gp1.x,gp1.y,gp1.z]);v3.add(p2,[gp2.x,gp2.y,gp2.z]);}v3.scale(p1,1/hh);v3.scale(p2,1/hh);var dirx=v3.subtract(p1,p2);var firstRs=sheetResidues[0];var lastRs=sheetResidues[sheetResidues.length-1];var firstGuidePoints=firstRs.guidePointsSmall[0];var lastGuidePoints=lastRs.guidePointsSmall[0];this.sheetPlanks.push(new Plank(firstGuidePoints,lastGuidePoints,dirx));sheetResidues=[];if(i<ii){var rm=rs[i+1];if(rm.sheet){sheetResidues.push(residue);}else{var dummyRes=createDummyResidue(lastGuidePoints.x,lastGuidePoints.y,lastGuidePoints.z);noSSResidues.push(dummyRes);}}}}else{noSSResidues.push(residue);if(i<ii){var rm=rs[i+1];if(rm.sheet){var guidePoints=residue.guidePointsSmall[0];var dummyRes=createDummyResidue(guidePoints.x,guidePoints.y,guidePoints.z);noSSResidues.push(dummyRes);chainNoSS.push(noSSResidues);noSSResidues=[];sheetResidues.push(residue);}}}}if(noSSResidues.length>1){if(noSSResidues.length==2){noSSResidues.push(noSSResidues[noSSResidues.length-1]);}chainNoSS.push(noSSResidues);}noSSResidues=[];var chainSegments=[];for(var n=0,nn=chainNoSS.length;n<nn;n++){var nhs=chainNoSS[n];var lineSegmentsList=[];for(var i=0,ii=nhs.length-1;i<=ii;i++){lineSegmentsList.push(nhs[i].cp1);}chainSegments.push(lineSegmentsList);}for(var i=0,ii=chainSegments.length;i<ii;i++){var t=new d3.CatmullTube(chainSegments[i],specs.proteins_tubeThickness,specs.proteins_tubeResolution_3D,specs.proteins_horizontalResolution);t.chainColor=rs.chainColor;this.tubes.push(t);}};var _=d3.PipePlank.prototype=new d3._Mesh();_.render=function(gl,specs){gl.material.setTempColors(gl,specs.proteins_materialAmbientColor_3D,undefined,specs.proteins_materialSpecularColor_3D,specs.proteins_materialShininess_3D);// colors\ngl.material.setDiffuseColor(gl,specs.macro_colorByChain?this.chainColor:specs.proteins_tubeColor);for(var j=0,jj=this.tubes.length;j<jj;j++){gl.shader.setMatrixUniforms(gl);this.tubes[j].render(gl,specs);}if(!specs.macro_colorByChain){gl.material.setDiffuseColor(gl,specs.proteins_ribbonCartoonHelixSecondaryColor);}gl.cylinderClosedBuffer.bindBuffers(gl);for(var j=0,jj=this.helixCylinders.length;j<jj;j++){this.helixCylinders[j].render(gl,specs);}if(!specs.macro_colorByChain){gl.material.setDiffuseColor(gl,specs.proteins_ribbonCartoonSheetColor);}gl.boxBuffer.bindBuffers(gl);for(var j=0,jj=this.sheetPlanks.length;j<jj;j++){this.sheetPlanks[j].render(gl,specs);}};})(ChemDoodle.extensions,ChemDoodle.RESIDUE,ChemDoodle.structures,ChemDoodle.structures.d3,Math,ChemDoodle.lib.mat4,ChemDoodle.lib.vec3,ChemDoodle.math);(function(d3,undefined){'use strict';d3.Quad=function(){var positionData=[-1,1,0,-1,-1,0,1,1,0,1,-1,0];var normalData=[0,0,0,0,0,0,0,0,0,0,0,0];this.storeData(positionData,normalData);};d3.Quad.prototype=new d3._Mesh();})(ChemDoodle.structures.d3);(function(structures,d3,v3,undefined){'use strict';d3.Shape=function(points,thickness){// points must be in the xy-plane, all z-coords must be 0, thickness\n// will be in the z-plane\nvar numPoints=points.length;var positionData=[];var normalData=[];// calculate vertex and normal points\nvar center=new structures.Point();for(var i=0,ii=numPoints;i<ii;i++){var next=i+1;if(i===ii-1){next=0;}var z=[0,0,1];var currentPoint=points[i];var nextPoint=points[next];var v=[nextPoint.x-currentPoint.x,nextPoint.y-currentPoint.y,0];var normal=v3.cross(z,v);// first four are for the side normal\n// second four will do both the bottom and top triangle normals\nfor(var j=0;j<2;j++){positionData.push(currentPoint.x,currentPoint.y,thickness/2);positionData.push(currentPoint.x,currentPoint.y,-thickness/2);positionData.push(nextPoint.x,nextPoint.y,thickness/2);positionData.push(nextPoint.x,nextPoint.y,-thickness/2);}// side normals\nfor(var j=0;j<4;j++){normalData.push(normal[0],normal[1],normal[2]);}// top and bottom normals\nnormalData.push(0,0,1);normalData.push(0,0,-1);normalData.push(0,0,1);normalData.push(0,0,-1);center.add(currentPoint);}// centers\ncenter.x/=numPoints;center.y/=numPoints;normalData.push(0,0,1);positionData.push(center.x,center.y,thickness/2);normalData.push(0,0,-1);positionData.push(center.x,center.y,-thickness/2);// build mesh connectivity\nvar indexData=[];var centerIndex=numPoints*8;for(var i=0,ii=numPoints;i<ii;i++){var start=i*8;// sides\nindexData.push(start);indexData.push(start+3);indexData.push(start+1);indexData.push(start);indexData.push(start+2);indexData.push(start+3);// top and bottom\nindexData.push(start+4);indexData.push(centerIndex);indexData.push(start+6);indexData.push(start+5);indexData.push(start+7);indexData.push(centerIndex+1);}this.storeData(positionData,normalData,indexData);};d3.Shape.prototype=new d3._Mesh();})(ChemDoodle.structures,ChemDoodle.structures.d3,ChemDoodle.lib.vec3);(function(d3,m,v3,undefined){'use strict';d3.Star=function(){var ps=[.8944,.4472,0,.2764,.4472,.8506,.2764,.4472,-.8506,-.7236,.4472,.5257,-.7236,.4472,-.5257,-.3416,.4472,0,-.1056,.4472,.3249,-.1056,.4472,-.3249,.2764,.4472,.2008,.2764,.4472,-.2008,-.8944,-.4472,0,-.2764,-.4472,.8506,-.2764,-.4472,-.8506,.7236,-.4472,.5257,.7236,-.4472,-.5257,.3416,-.4472,0,.1056,-.4472,.3249,.1056,-.4472,-.3249,-.2764,-.4472,.2008,-.2764,-.4472,-.2008,-.5527,.1058,0,-.1708,.1058,.5527,-.1708,.1058,-.5527,.4471,.1058,.3249,.4471,.1058,-.3249,.5527,-.1058,0,.1708,-.1058,.5527,.1708,-.1058,-.5527,-.4471,-.1058,.3249,-.4471,-.1058,-.3249,0,1,0,0,-1,0];var is=[0,9,8,2,7,9,4,5,7,3,6,5,1,8,6,0,8,23,30,6,8,3,21,6,11,26,21,13,23,26,2,9,24,30,8,9,1,23,8,13,25,23,14,24,25,4,7,22,30,9,7,0,24,9,14,27,24,12,22,27,3,5,20,30,7,5,2,22,7,12,29,22,10,20,29,1,6,21,30,5,6,4,20,5,10,28,20,11,21,28,10,19,18,12,17,19,14,15,17,13,16,15,11,18,16,31,19,17,14,17,27,2,27,22,4,22,29,10,29,19,31,18,19,12,19,29,4,29,20,3,20,28,11,28,18,31,16,18,10,18,28,3,28,21,1,21,26,13,26,16,31,15,16,11,16,26,1,26,23,0,23,25,14,25,15,31,17,15,13,15,25,0,25,24,2,24,27,12,27,17];var positionData=[];var normalData=[];var indexData=[];for(var i=0,ii=is.length;i<ii;i+=3){var j1=is[i]*3;var j2=is[i+1]*3;var j3=is[i+2]*3;var p1=[ps[j1],ps[j1+1],ps[j1+2]];var p2=[ps[j2],ps[j2+1],ps[j2+2]];var p3=[ps[j3],ps[j3+1],ps[j3+2]];var toAbove=[p1[0]-p2[0],p1[1]-p2[1],p1[2]-p2[2]];var toSide=[p3[0]-p2[0],p3[1]-p2[1],p3[2]-p2[2]];var normal=v3.cross(toSide,toAbove,[]);v3.normalize(normal);positionData.push(p1[0],p1[1],p1[2],p2[0],p2[1],p2[2],p3[0],p3[1],p3[2]);normalData.push(normal[0],normal[1],normal[2],normal[0],normal[1],normal[2],normal[0],normal[1],normal[2]);indexData.push(i,i+1,i+2);}this.storeData(positionData,normalData,indexData);};d3.Star.prototype=new d3._Mesh();})(ChemDoodle.structures.d3,Math,ChemDoodle.lib.vec3);(function(d3,extensions,document,window,undefined){'use strict';var ratio=1;if(window.devicePixelRatio){ratio=window.devicePixelRatio;}d3.TextImage=function(){this.ctx=document.createElement('canvas').getContext('2d');this.data=[];this.text='';this.charHeight=0;};var _=d3.TextImage.prototype;_.init=function(gl){// init texture\nthis.textureImage=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,this.textureImage);gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,false);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);gl.bindTexture(gl.TEXTURE_2D,null);this.updateFont(gl,12,['Sans-serif'],false,false,false);};_.charData=function(character){var index=this.text.indexOf(character);return index>=0?this.data[index]:null;};_.updateFont=function(gl,fontSize,fontFamilies,fontBold,fontItalic,fontStroke){var ctx=this.ctx;var canvas=this.ctx.canvas;var data=[];var text=\"\";fontSize*=ratio;var contextFont=extensions.getFontString(fontSize,fontFamilies,fontBold,fontItalic);ctx.font=contextFont;ctx.save();var totalWidth=0;var charHeight=fontSize*1.5;for(var i=32,ii=127;i<ii;i++){// skip control characters\n// if(i <= 31 || i == 127) continue;\nvar character=String.fromCharCode(i),width=ctx.measureText(character).width;data.push({text:character,width:width,height:charHeight});totalWidth+=width*2;}// add other characters\nvar chars=\"\\xB0\\u212B\\xAE\".split('');for(var i=0,ii=chars.length;i<ii;i++){var character=chars[i],width=ctx.measureText(character).width;data.push({text:character,width:width,height:charHeight});totalWidth+=width*2;}var areaImage=totalWidth*charHeight;var sqrtArea=Math.sqrt(areaImage);var totalRows=Math.ceil(sqrtArea/charHeight);var maxWidth=Math.ceil(totalWidth/(totalRows-1));canvas.width=maxWidth;canvas.height=totalRows*charHeight;ctx.font=contextFont;ctx.textAlign=\"left\";ctx.textBaseline=\"middle\";ctx.strokeStyle=\"#000\";ctx.lineWidth=1.4;ctx.fillStyle=\"#fff\";var offsetRow=0;var posX=0;for(var i=0,ii=data.length;i<ii;i++){var charData=data[i];var charWidth=charData.width*2;var charHeight=charData.height;var charText=charData.text;var willWidth=posX+charWidth;if(willWidth>maxWidth){offsetRow++;posX=0;}var posY=offsetRow*charHeight;if(fontStroke){// stroke must draw before fill\nctx.strokeText(charText,posX,posY+charHeight/2);}ctx.fillText(charText,posX,posY+charHeight/2);charData.x=posX;charData.y=posY;text+=charText;posX+=charWidth;}this.text=text;this.data=data;this.charHeight=charHeight;// also update the texture\ngl.bindTexture(gl.TEXTURE_2D,this.textureImage);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,canvas);gl.bindTexture(gl.TEXTURE_2D,null);};_.pushVertexData=function(text,position,zDepth,data){// characters of string text\nvar textPiece=text.toString().split(\"\");// height of texture image\nvar heightImage=this.getHeight();var widthImage=this.getWidth();var x1=-this.textWidth(text)/2/ratio;var y1=-this.charHeight/2/ratio;// iterate each character\nfor(var j=0,jj=textPiece.length;j<jj;j++){var charData=this.charData(textPiece[j]);var width=charData.width;var left=charData.x/widthImage;var right=left+charData.width*1.8/widthImage;var top=charData.y/heightImage;var bottom=top+charData.height/heightImage;var x2=x1+width*1.8/ratio;var y2=this.charHeight/2/ratio;data.position.push(// left top\nposition[0],position[1],position[2],// right top\nposition[0],position[1],position[2],// right bottom\nposition[0],position[1],position[2],// left top\nposition[0],position[1],position[2],// left bottom\nposition[0],position[1],position[2],// right bottom\nposition[0],position[1],position[2]);data.texCoord.push(// left top\nleft,top,// right bottom\nright,bottom,// right top\nright,top,// left top\nleft,top,// left bottom\nleft,bottom,// right bottom\nright,bottom);data.translation.push(// left top\nx1,y2,zDepth,// right bottom\nx2,y1,zDepth,// right top\nx2,y2,zDepth,// left top\nx1,y2,zDepth,// left bottom\nx1,y1,zDepth,// right bottom\nx2,y1,zDepth);x1=x2+(width-width*1.8)/ratio;}};_.getCanvas=function(){return this.ctx.canvas;};_.getHeight=function(){return this.getCanvas().height;};_.getWidth=function(){return this.getCanvas().width;};_.textWidth=function(text){return this.ctx.measureText(text).width;};_.test=function(){document.body.appendChild(this.getCanvas());};_.useTexture=function(gl){gl.bindTexture(gl.TEXTURE_2D,this.textureImage);};})(ChemDoodle.structures.d3,ChemDoodle.extensions,document,window);(function(d3,m,undefined){'use strict';d3.TextMesh=function(){};var _=d3.TextMesh.prototype;_.init=function(gl){// set vertex buffer\nthis.vertexPositionBuffer=gl.createBuffer();this.vertexTexCoordBuffer=gl.createBuffer();this.vertexTranslationBuffer=gl.createBuffer();};_.setVertexData=function(gl,vertexBuffer,bufferData,itemSize){gl.bindBuffer(gl.ARRAY_BUFFER,vertexBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(bufferData),gl.STATIC_DRAW);vertexBuffer.itemSize=itemSize;vertexBuffer.numItems=bufferData.length/itemSize;};_.storeData=function(gl,vertexPositionData,vertexTexCoordData,vertexTranslationData){this.setVertexData(gl,this.vertexPositionBuffer,vertexPositionData,3);this.setVertexData(gl,this.vertexTexCoordBuffer,vertexTexCoordData,2);this.setVertexData(gl,this.vertexTranslationBuffer,vertexTranslationData,3);};_.bindBuffers=function(gl){// positions\ngl.bindBuffer(gl.ARRAY_BUFFER,this.vertexPositionBuffer);gl.vertexAttribPointer(gl.shader.vertexPositionAttribute,this.vertexPositionBuffer.itemSize,gl.FLOAT,false,0,0);// texCoord\ngl.bindBuffer(gl.ARRAY_BUFFER,this.vertexTexCoordBuffer);gl.vertexAttribPointer(gl.shader.vertexTexCoordAttribute,this.vertexTexCoordBuffer.itemSize,gl.FLOAT,false,0,0);// translation and z depth\ngl.bindBuffer(gl.ARRAY_BUFFER,this.vertexTranslationBuffer);gl.vertexAttribPointer(gl.shader.vertexNormalAttribute,this.vertexTranslationBuffer.itemSize,gl.FLOAT,false,0,0);};_.render=function(gl){var numItems=this.vertexPositionBuffer.numItems;if(!numItems){// nothing to do here\nreturn;}this.bindBuffers(gl);gl.drawArrays(gl.TRIANGLES,0,numItems);};})(ChemDoodle.structures.d3,Math);(function(ELEMENT,math,d3,m,m4,v3,undefined){'use strict';d3.Torsion=function(a1,a2,a3,a4){this.a1=a1;this.a2=a2;this.a3=a3;this.a4=a4;};var _=d3.Torsion.prototype=new d3._Measurement();_.calculateData=function(specs){var positionData=[];var normalData=[];var indexData=[];var dist1=this.a2.distance3D(this.a1);var dist2=this.a2.distance3D(this.a3);this.distUse=m.min(dist1,dist2)/2;// data for the angle\nvar b1=[this.a2.x-this.a1.x,this.a2.y-this.a1.y,this.a2.z-this.a1.z];var b2=[this.a3.x-this.a2.x,this.a3.y-this.a2.y,this.a3.z-this.a2.z];var b3=[this.a4.x-this.a3.x,this.a4.y-this.a3.y,this.a4.z-this.a3.z];var cross12=v3.cross(b1,b2,[]);var cross23=v3.cross(b2,b3,[]);v3.scale(b1,v3.length(b2));this.torsion=m.atan2(v3.dot(b1,cross23),v3.dot(cross12,cross23));var vec1=v3.normalize(v3.cross(cross12,b2,[]));var vec3=v3.normalize(v3.cross(b2,vec1,[]));this.pos=v3.add([this.a2.x,this.a2.y,this.a2.z],v3.scale(v3.normalize(b2,[]),this.distUse));var vec0=[];var bands=specs.measurement_angleBands_3D;for(var i=0;i<=bands;++i){var theta=this.torsion*i/bands;var vecCos=v3.scale(vec1,m.cos(theta),[]);var vecSin=v3.scale(vec3,m.sin(theta),[]);var norm=v3.scale(v3.normalize(v3.add(vecCos,vecSin,[])),this.distUse);if(i==0){vec0=norm;}positionData.push(this.pos[0]+norm[0],this.pos[1]+norm[1],this.pos[2]+norm[2]);normalData.push(0,0,0);if(i<bands){indexData.push(i,i+1);}}this.vecText=v3.normalize(v3.add(vec0,norm,[]));var arrowLength=0.25;var b2Norm=v3.normalize(b2,[]);v3.scale(b2Norm,arrowLength/4);var theta=this.torsion-m.asin(arrowLength/2)*2*this.torsion/m.abs(this.torsion);var vecCos=v3.scale(vec1,m.cos(theta),[]);var vecSin=v3.scale(vec3,m.sin(theta),[]);var norm=v3.scale(v3.normalize(v3.add(vecCos,vecSin,[])),this.distUse);positionData.push(this.pos[0]+b2Norm[0]+norm[0],this.pos[1]+b2Norm[1]+norm[1],this.pos[2]+b2Norm[2]+norm[2]);normalData.push(0,0,0);positionData.push(this.pos[0]-b2Norm[0]+norm[0],this.pos[1]-b2Norm[1]+norm[1],this.pos[2]-b2Norm[2]+norm[2]);normalData.push(0,0,0);indexData.push(--i,i+1,i,i+2);this.storeData(positionData,normalData,indexData);};_.getText=function(specs){v3.add(this.pos,v3.scale(this.vecText,this.distUse+0.3,[]));return{pos:this.pos,value:[math.angleBounds(this.torsion,true,true).toFixed(2),\" \\xB0\"].join('')};};})(ChemDoodle.ELEMENT,ChemDoodle.math,ChemDoodle.structures.d3,Math,ChemDoodle.lib.mat4,ChemDoodle.lib.vec3);(function(extensions,RESIDUE,structures,d3,m,m4,v3,math,undefined){'use strict';var loadPartition=function loadPartition(gl,p){// positions\ngl.bindBuffer(gl.ARRAY_BUFFER,p.vertexPositionBuffer);gl.vertexAttribPointer(gl.shader.vertexPositionAttribute,p.vertexPositionBuffer.itemSize,gl.FLOAT,false,0,0);// normals\ngl.bindBuffer(gl.ARRAY_BUFFER,p.vertexNormalBuffer);gl.vertexAttribPointer(gl.shader.vertexNormalAttribute,p.vertexNormalBuffer.itemSize,gl.FLOAT,false,0,0);// indexes\ngl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,p.vertexIndexBuffer);};var PointRotator=function PointRotator(point,axis,angle){var d=m.sqrt(axis[1]*axis[1]+axis[2]*axis[2]);var Rx=[1,0,0,0,0,axis[2]/d,-axis[1]/d,0,0,axis[1]/d,axis[2]/d,0,0,0,0,1];var RxT=[1,0,0,0,0,axis[2]/d,axis[1]/d,0,0,-axis[1]/d,axis[2]/d,0,0,0,0,1];var Ry=[d,0,-axis[0],0,0,1,0,0,axis[0],0,d,0,0,0,0,1];var RyT=[d,0,axis[0],0,0,1,0,0,-axis[0],0,d,0,0,0,0,1];var Rz=[m.cos(angle),-m.sin(angle),0,0,m.sin(angle),m.cos(angle),0,0,0,0,1,0,0,0,0,1];var matrix=m4.multiply(Rx,m4.multiply(Ry,m4.multiply(Rz,m4.multiply(RyT,RxT,[]))));this.rotate=function(){return m4.multiplyVec3(matrix,point);};};d3.Tube=function(chain,thickness,cylinderResolution){var lineSegmentNum=chain[0].lineSegments[0].length;this.partitions=[];var currentPartition;this.ends=[];this.ends.push(chain[0].lineSegments[0][0]);this.ends.push(chain[chain.length-1].lineSegments[0][0]);// calculate vertex and normal points\nvar last=[1,0,0];for(var i=0,ii=chain.length;i<ii;i++){if(!currentPartition||currentPartition.positionData.length>65000){if(this.partitions.length>0){i--;}currentPartition={count:0,positionData:[],normalData:[],indexData:[]};this.partitions.push(currentPartition);}var residue=chain[i];currentPartition.count++;var min=Infinity;var p=new structures.Atom('',chain[i].cp1.x,chain[i].cp1.y,chain[i].cp1.z);for(var j=0;j<lineSegmentNum;j++){var currentPoint=residue.lineSegments[0][j];var nextPoint;if(j===lineSegmentNum-1){if(i===chain.length-1){nextPoint=residue.lineSegments[0][j-1];}else{nextPoint=chain[i+1].lineSegments[0][0];}}else{nextPoint=residue.lineSegments[0][j+1];}var axis=[nextPoint.x-currentPoint.x,nextPoint.y-currentPoint.y,nextPoint.z-currentPoint.z];v3.normalize(axis);if(i===chain.length-1&&j===lineSegmentNum-1){v3.scale(axis,-1);}var startVector=v3.cross(axis,last,[]);v3.normalize(startVector);v3.scale(startVector,thickness/2);var rotator=new PointRotator(startVector,axis,2*Math.PI/cylinderResolution);for(var k=0,kk=cylinderResolution;k<kk;k++){var use=rotator.rotate();if(k===m.floor(cylinderResolution/4)){last=[use[0],use[1],use[2]];}currentPartition.normalData.push(use[0],use[1],use[2]);currentPartition.positionData.push(currentPoint.x+use[0],currentPoint.y+use[1],currentPoint.z+use[2]);}// find closest point to attach stick to\nif(p){var dist=currentPoint.distance3D(p);if(dist<min){min=dist;chain[i].pPoint=currentPoint;}}}}// build mesh connectivity\nfor(var n=0,nn=this.partitions.length;n<nn;n++){var currentPartition=this.partitions[n];for(var i=0,ii=currentPartition.count-1;i<ii;i++){var indexStart=i*lineSegmentNum*cylinderResolution;for(var j=0,jj=lineSegmentNum;j<jj;j++){var segmentIndexStart=indexStart+j*cylinderResolution;for(var k=0;k<cylinderResolution;k++){var next=1;var sk=segmentIndexStart+k;currentPartition.indexData.push(sk);currentPartition.indexData.push(sk+cylinderResolution);currentPartition.indexData.push(sk+cylinderResolution+next);currentPartition.indexData.push(sk);currentPartition.indexData.push(sk+cylinderResolution+next);currentPartition.indexData.push(sk+next);}}}}this.storeData(this.partitions[0].positionData,this.partitions[0].normalData,this.partitions[0].indexData);var ps=[new structures.Point(2,0)];for(var i=0;i<60;i++){var ang=i/60*m.PI;ps.push(new structures.Point(2*m.cos(ang),-2*m.sin(ang)));}ps.push(new structures.Point(-2,0),new structures.Point(-2,4),new structures.Point(2,4));var platform=new structures.d3.Shape(ps,1);this.render=function(gl,specs){// draw tube\nthis.bindBuffers(gl);// colors\ngl.material.setDiffuseColor(gl,specs.macro_colorByChain?this.chainColor:specs.nucleics_tubeColor);// render\ngl.drawElements(gl.TRIANGLES,this.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);if(this.partitions){for(var i=1,ii=this.partitions.length;i<ii;i++){var p=this.partitions[i];loadPartition(gl,p);// render\ngl.drawElements(gl.TRIANGLES,p.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}}// draw ends\ngl.sphereBuffer.bindBuffers(gl);for(var i=0;i<2;i++){var p=this.ends[i];var transform=m4.translate(m4.identity(),[p.x,p.y,p.z]);var radius=thickness/2;m4.scale(transform,[radius,radius,radius]);// render\ngl.shader.setMatrixUniforms(gl,transform);gl.drawElements(gl.TRIANGLES,gl.sphereBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}// draw nucleotide handles\ngl.cylinderBuffer.bindBuffers(gl);for(var i=0,ii=chain.length-1;i<ii;i++){var residue=chain[i];var p1=residue.pPoint;var p2=new structures.Atom('',residue.cp2.x,residue.cp2.y,residue.cp2.z);var height=1.001*p1.distance3D(p2);var scaleVector=[thickness/4,height,thickness/4];var transform=m4.translate(m4.identity(),[p1.x,p1.y,p1.z]);var y=[0,1,0];var ang=0;var axis;var a2b=[p2.x-p1.x,p2.y-p1.y,p2.z-p1.z];if(p1.x===p2.x&&p1.z===p2.z){axis=[0,0,1];if(p1.y<p1.y){ang=m.PI;}}else{ang=extensions.vec3AngleFrom(y,a2b);axis=v3.cross(y,a2b,[]);}if(ang!==0){m4.rotate(transform,ang,axis);}m4.scale(transform,scaleVector);gl.shader.setMatrixUniforms(gl,transform);gl.drawArrays(gl.TRIANGLE_STRIP,0,gl.cylinderBuffer.vertexPositionBuffer.numItems);}// draw nucleotide platforms\nplatform.bindBuffers(gl);// colors\nif(specs.nucleics_residueColor==='none'&&!specs.macro_colorByChain){gl.material.setDiffuseColor(gl,specs.nucleics_baseColor);}for(var i=0,ii=chain.length-1;i<ii;i++){var residue=chain[i];var p2=residue.cp2;var transform=m4.translate(m4.identity(),[p2.x,p2.y,p2.z]);// rotate to direction\nvar y=[0,1,0];var ang=0;var axis;var p3=residue.cp3;if(p3){var a2b=[p3.x-p2.x,p3.y-p2.y,p3.z-p2.z];if(p2.x===p3.x&&p2.z===p3.z){axis=[0,0,1];if(p2.y<p2.y){ang=m.PI;}}else{ang=extensions.vec3AngleFrom(y,a2b);axis=v3.cross(y,a2b,[]);}if(ang!==0){m4.rotate(transform,ang,axis);}// rotate to orientation\nvar x=[1,0,0];var rM=m4.rotate(m4.identity([]),ang,axis);m4.multiplyVec3(rM,x);var p4=residue.cp4;var p5=residue.cp5;if(!(p4.y===p5.y&&p4.z===p5.z)){var pivot=[p5.x-p4.x,p5.y-p4.y,p5.z-p4.z];var ang2=extensions.vec3AngleFrom(x,pivot);if(v3.dot(a2b,v3.cross(x,pivot))<0){ang2*=-1;}m4.rotateY(transform,ang2);}// color\nif(!specs.macro_colorByChain){if(specs.nucleics_residueColor==='shapely'){if(RESIDUE[residue.name]){gl.material.setDiffuseColor(gl,RESIDUE[residue.name].shapelyColor);}else{gl.material.setDiffuseColor(gl,RESIDUE['*'].shapelyColor);}}else if(specs.nucleics_residueColor==='rainbow'){gl.material.setDiffuseColor(gl,math.rainbowAt(i,ii,specs.macro_rainbowColors));}}// render\ngl.shader.setMatrixUniforms(gl,transform);gl.drawElements(gl.TRIANGLES,platform.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}}};};d3.Tube.prototype=new d3._Mesh();d3.CatmullTube=function(chains,thickness,cylinderResolution,horizontalResolution){var chain=[];chains.push(chains[chains.length-1]);for(var i=0,ii=chains.length-2;i<=ii;i++){var p0=chains[i==0?0:i-1];var p1=chains[i+0];var p2=chains[i+1];var p3=chains[i==ii?i+1:i+2];var segments=[];for(var j=0;j<horizontalResolution;j++){var t=j/horizontalResolution;if(i==ii){t=j/(horizontalResolution-1);}var x=0.5*(2*p1.x+(p2.x-p0.x)*t+(2*p0.x-5*p1.x+4*p2.x-p3.x)*t*t+(3*p1.x-p0.x-3*p2.x+p3.x)*t*t*t);var y=0.5*(2*p1.y+(p2.y-p0.y)*t+(2*p0.y-5*p1.y+4*p2.y-p3.y)*t*t+(3*p1.y-p0.y-3*p2.y+p3.y)*t*t*t);var z=0.5*(2*p1.z+(p2.z-p0.z)*t+(2*p0.z-5*p1.z+4*p2.z-p3.z)*t*t+(3*p1.z-p0.z-3*p2.z+p3.z)*t*t*t);var o=new structures.Atom('C',x,y,z);segments.push(o);}chain.push(segments);}var lineSegmentNum=chain[0].length;this.partitions=[];var currentPartition;this.ends=[];this.ends.push(chain[0][0]);this.ends.push(chain[chain.length-1][0]);// calculate vertex and normal points\nvar last=[1,0,0];for(var i=0,ii=chain.length;i<ii;i++){if(!currentPartition||currentPartition.positionData.length>65000){if(this.partitions.length>0){i--;}currentPartition={count:0,positionData:[],normalData:[],indexData:[]};this.partitions.push(currentPartition);}var residue=chain[i];currentPartition.count++;var min=Infinity;// var p = new structures.Atom('', chain[i].cp1.x, chain[i].cp1.y, chain[i].cp1.z);\nfor(var j=0;j<lineSegmentNum;j++){var currentPoint=residue[j];var nextPoint;if(j===lineSegmentNum-1){if(i===chain.length-1){nextPoint=residue[j-1];}else{nextPoint=chain[i+1][0];}}else{nextPoint=residue[j+1];}var axis=[nextPoint.x-currentPoint.x,nextPoint.y-currentPoint.y,nextPoint.z-currentPoint.z];v3.normalize(axis);if(i===chain.length-1&&j===lineSegmentNum-1){v3.scale(axis,-1);}var startVector=v3.cross(axis,last,[]);v3.normalize(startVector);v3.scale(startVector,thickness/2);var rotator=new PointRotator(startVector,axis,2*Math.PI/cylinderResolution);for(var k=0,kk=cylinderResolution;k<kk;k++){var use=rotator.rotate();if(k===m.floor(cylinderResolution/4)){last=[use[0],use[1],use[2]];}currentPartition.normalData.push(use[0],use[1],use[2]);currentPartition.positionData.push(currentPoint.x+use[0],currentPoint.y+use[1],currentPoint.z+use[2]);}}}// build mesh connectivity\nfor(var n=0,nn=this.partitions.length;n<nn;n++){var currentPartition=this.partitions[n];for(var i=0,ii=currentPartition.count-1;i<ii;i++){var indexStart=i*lineSegmentNum*cylinderResolution;for(var j=0,jj=lineSegmentNum;j<jj;j++){var segmentIndexStart=indexStart+j*cylinderResolution;for(var k=0;k<=cylinderResolution;k++){var sk=segmentIndexStart+k%cylinderResolution;currentPartition.indexData.push(sk,sk+cylinderResolution);}}}}this.storeData(this.partitions[0].positionData,this.partitions[0].normalData,this.partitions[0].indexData);};var _=d3.CatmullTube.prototype=new d3._Mesh();_.render=function(gl,specs){// draw tube\nthis.bindBuffers(gl);// render\nfor(var i=0,ii=this.partitions.length;i<ii;i++){var p=this.partitions[i];loadPartition(gl,p);// render\ngl.drawElements(gl.TRIANGLE_STRIP,p.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}// draw ends\ngl.sphereBuffer.bindBuffers(gl);for(var i=0;i<2;i++){var p=this.ends[i];var transform=m4.translate(m4.identity(),[p.x,p.y,p.z]);var radius=specs.proteins_tubeThickness/2;m4.scale(transform,[radius,radius,radius]);// render\ngl.shader.setMatrixUniforms(gl,transform);gl.drawElements(gl.TRIANGLES,gl.sphereBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}};})(ChemDoodle.extensions,ChemDoodle.RESIDUE,ChemDoodle.structures,ChemDoodle.structures.d3,Math,ChemDoodle.lib.mat4,ChemDoodle.lib.vec3,ChemDoodle.math);(function(d3,v3,undefined){'use strict';d3.UnitCell=function(unitCellVectors){this.unitCell=unitCellVectors;var positionData=[];var normalData=[];// calculate vertex and normal points\nvar pushSide=function pushSide(p1,p2,p3,p4){positionData.push(p1[0],p1[1],p1[2]);positionData.push(p2[0],p2[1],p2[2]);positionData.push(p3[0],p3[1],p3[2]);positionData.push(p4[0],p4[1],p4[2]);// push 0s for normals so shader gives them full color\nfor(var i=0;i<4;i++){normalData.push(0,0,0);}};pushSide(unitCellVectors.o,unitCellVectors.x,unitCellVectors.xy,unitCellVectors.y);pushSide(unitCellVectors.o,unitCellVectors.y,unitCellVectors.yz,unitCellVectors.z);pushSide(unitCellVectors.o,unitCellVectors.z,unitCellVectors.xz,unitCellVectors.x);pushSide(unitCellVectors.yz,unitCellVectors.y,unitCellVectors.xy,unitCellVectors.xyz);pushSide(unitCellVectors.xyz,unitCellVectors.xz,unitCellVectors.z,unitCellVectors.yz);pushSide(unitCellVectors.xy,unitCellVectors.x,unitCellVectors.xz,unitCellVectors.xyz);// build mesh connectivity\nvar indexData=[];for(var i=0;i<6;i++){var start=i*4;// sides\nindexData.push(start,start+1,start+1,start+2,start+2,start+3,start+3,start);}this.storeData(positionData,normalData,indexData);};var _=d3.UnitCell.prototype=new d3._Mesh();_.render=function(gl,specs){gl.shader.setMatrixUniforms(gl);this.bindBuffers(gl);// colors\ngl.material.setDiffuseColor(gl,specs.shapes_color);gl.lineWidth(specs.shapes_lineWidth);// render\ngl.drawElements(gl.LINES,this.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);};})(ChemDoodle.structures.d3,ChemDoodle.lib.vec3);(function(d3,math,document,undefined){'use strict';d3.Framebuffer=function(){};var _=d3.Framebuffer.prototype;_.init=function(gl){this.framebuffer=gl.createFramebuffer();};_.setColorTexture=function(gl,texture,attachment){var i=attachment===undefined?0:attachment;gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);gl.bindTexture(gl.TEXTURE_2D,texture);gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0+i,gl.TEXTURE_2D,texture,0);gl.bindTexture(gl.TEXTURE_2D,null);gl.bindFramebuffer(gl.FRAMEBUFFER,null);};_.setColorRenderbuffer=function(gl,renderbuffer,attachment){var i=attachment===undefined?0:attachment;gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);gl.bindRenderbuffer(gl.RENDERBUFFER,renderbuffer);gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0+i,gl.RENDERBUFFER,renderbuffer);gl.bindRenderbuffer(gl.RENDERBUFFER,null);gl.bindFramebuffer(gl.FRAMEBUFFER,null);};_.setDepthTexture=function(gl,texture){gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);gl.bindTexture(gl.TEXTURE_2D,texture);gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.TEXTURE_2D,texture,0);gl.bindTexture(gl.TEXTURE_2D,null);gl.bindFramebuffer(gl.FRAMEBUFFER,null);};_.setDepthRenderbuffer=function(gl,renderbuffer){gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);gl.bindRenderbuffer(gl.RENDERBUFFER,renderbuffer);gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,renderbuffer);gl.bindRenderbuffer(gl.RENDERBUFFER,null);gl.bindFramebuffer(gl.FRAMEBUFFER,null);};_.bind=function(gl,width,height){gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);gl.viewport(0,0,width,height);};})(ChemDoodle.structures.d3,ChemDoodle.math,document);(function(d3,math,document,undefined){'use strict';d3.Renderbuffer=function(){};var _=d3.Renderbuffer.prototype;_.init=function(gl,format){this.renderbuffer=gl.createRenderbuffer();this.format=format;};_.setParameter=function(gl,width,height){this.width=width;this.height=height;gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderbuffer);gl.renderbufferStorage(gl.RENDERBUFFER,this.format,this.width,this.height);gl.bindRenderbuffer(gl.RENDERBUFFER,null);};})(ChemDoodle.structures.d3,ChemDoodle.math,document);(function(math,d3,m,undefined){'use strict';d3.SSAO=function(){};var _=d3.SSAO.prototype;_.initSampleKernel=function(kernelSize){var sampleKernel=[];for(var i=0;i<kernelSize;i++){var x=m.random()*2.0-1.0;var y=m.random()*2.0-1.0;var z=m.random()*2.0-1.0;var scale=i/kernelSize;var scale2=scale*scale;var lerp=0.1+scale2*0.9;x*=lerp;y*=lerp;z*=lerp;sampleKernel.push(x,y,z);}this.sampleKernel=new Float32Array(sampleKernel);};_.initNoiseTexture=function(gl){var noiseSize=16;var ssaoNoise=[];for(var i=0;i<noiseSize;i++){ssaoNoise.push(m.random()*2-1);ssaoNoise.push(m.random()*2-1);ssaoNoise.push(0.0);}this.noiseTexture=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,this.noiseTexture);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGB,4,4,0,gl.RGB,gl.FLOAT,new Float32Array(ssaoNoise));gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT);gl.bindTexture(gl.TEXTURE_2D,null);};})(ChemDoodle.math,ChemDoodle.structures.d3,Math);(function(d3,math,document,undefined){'use strict';d3.Texture=function(){};var _=d3.Texture.prototype;_.init=function(gl,type,internalFormat,format){this.texture=gl.createTexture();this.type=type;this.internalFormat=internalFormat;this.format=format!==undefined?format:internalFormat;gl.bindTexture(gl.TEXTURE_2D,this.texture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.bindTexture(gl.TEXTURE_2D,null);};_.setParameter=function(gl,width,height){this.width=width;this.height=height;// set texture dimension\ngl.bindTexture(gl.TEXTURE_2D,this.texture);gl.texImage2D(gl.TEXTURE_2D,0,this.internalFormat,this.width,this.height,0,this.format,this.type,null);gl.bindTexture(gl.TEXTURE_2D,null);};})(ChemDoodle.structures.d3,ChemDoodle.math,document);(function(d3,m3,m4,document,undefined){'use strict';d3._Shader=function(){};var _=d3._Shader.prototype;_.useShaderProgram=function(gl){gl.useProgram(this.gProgram);gl.shader=this;};_.init=function(gl){var vertexShader=this.getShader(gl,'vertex-shader');if(!vertexShader){vertexShader=this.loadDefaultVertexShader(gl);}var fragmentShader=this.getShader(gl,'fragment-shader');if(!fragmentShader){fragmentShader=this.loadDefaultFragmentShader(gl);}this.gProgram=gl.createProgram();gl.attachShader(this.gProgram,vertexShader);gl.attachShader(this.gProgram,fragmentShader);this.onShaderAttached(gl);gl.linkProgram(this.gProgram);if(!gl.getProgramParameter(this.gProgram,gl.LINK_STATUS)){alert('Could not initialize shaders: '+gl.getProgramInfoLog(this.gProgram));}gl.useProgram(this.gProgram);this.initUniformLocations(gl);gl.useProgram(null);};_.onShaderAttached=function(gl){// set vertex attributes explicitly\nthis.vertexPositionAttribute=0;this.vertexNormalAttribute=1;gl.bindAttribLocation(this.gProgram,this.vertexPositionAttribute,'a_vertex_position');gl.bindAttribLocation(this.gProgram,this.vertexNormalAttribute,'a_vertex_normal');};_.getShaderFromStr=function(gl,shaderType,strSrc){var shader=gl.createShader(shaderType);gl.shaderSource(shader,strSrc);gl.compileShader(shader);if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)){alert(shaderScript.type+' '+gl.getShaderInfoLog(shader));gl.deleteShader(shader);return undefined;}return shader;};_.enableAttribsArray=function(gl){gl.enableVertexAttribArray(this.vertexPositionAttribute);};_.disableAttribsArray=function(gl){gl.disableVertexAttribArray(this.vertexPositionAttribute);};_.getShader=function(gl,id){var shaderScript=document.getElementById(id);if(!shaderScript){return undefined;}var sb=[];var k=shaderScript.firstChild;while(k){if(k.nodeType===3){sb.push(k.textContent);}k=k.nextSibling;}var sdrSrc=sb.join('');var shader;if(shaderScript.type==='x-shader/x-fragment'){shader=this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sdrSrc);}else if(shaderScript.type==='x-shader/x-vertex'){shader=this.getShaderFromStr(gl,gl.VERTEX_SHADER,sdrSrc);}else{return undefined;}return shader;};_.initUniformLocations=function(gl){this.modelViewMatrixUniform=gl.getUniformLocation(this.gProgram,'u_model_view_matrix');this.projectionMatrixUniform=gl.getUniformLocation(this.gProgram,'u_projection_matrix');};_.loadDefaultVertexShader=function(gl){};_.loadDefaultFragmentShader=function(gl){};_.setMatrixUniforms=function(gl,modelMatrix){if(modelMatrix===undefined){this.setModelViewMatrix(gl,gl.modelViewMatrix);}else{this.setModelViewMatrix(gl,m4.multiply(gl.modelViewMatrix,modelMatrix,[]));}};_.setProjectionMatrix=function(gl,matrix){gl.uniformMatrix4fv(this.projectionMatrixUniform,false,matrix);};_.setModelViewMatrix=function(gl,mvMatrix){gl.uniformMatrix4fv(this.modelViewMatrixUniform,false,mvMatrix);};_.setMaterialAmbientColor=function(gl,ambient){};_.setMaterialDiffuseColor=function(gl,diffuse){};_.setMaterialSpecularColor=function(gl,specular){};_.setMaterialShininess=function(gl,shininess){};_.setMaterialAlpha=function(gl,alpha){};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.FXAAShader=function(){};var _super=d3._Shader.prototype;var _=d3.FXAAShader.prototype=new d3._Shader();_.initUniformLocations=function(gl){// assign uniform properties\n_super.initUniformLocations.call(this,gl);this.buffersizeUniform=gl.getUniformLocation(this.gProgram,'u_buffersize');this.antialiasUniform=gl.getUniformLocation(this.gProgram,'u_antialias');this.edgeThresholdUniform=gl.getUniformLocation(this.gProgram,'u_edge_threshold');this.edgeThresholdMinUniform=gl.getUniformLocation(this.gProgram,'u_edge_threshold_min');this.searchStepsUniform=gl.getUniformLocation(this.gProgram,'u_search_steps');this.searchThresholdUniform=gl.getUniformLocation(this.gProgram,'u_search_threshold');this.subpixCapUniform=gl.getUniformLocation(this.gProgram,'u_subpix_cap');this.subpixTrimUniform=gl.getUniformLocation(this.gProgram,'u_subpix_trim');};_.setBuffersize=function(gl,width,height){gl.uniform2f(this.buffersizeUniform,width,height);};_.setAntialias=function(gl,val){gl.uniform1f(this.antialiasUniform,val);};_.setEdgeThreshold=function(gl,val){gl.uniform1f(this.edgeThresholdUniform,val);};_.setEdgeThresholdMin=function(gl,val){gl.uniform1f(this.edgeThresholdMinUniform,val);};_.setSearchSteps=function(gl,val){gl.uniform1i(this.searchStepsUniform,val);};_.setSearchThreshold=function(gl,val){gl.uniform1f(this.searchThresholdUniform,val);};_.setSubpixCap=function(gl,val){gl.uniform1f(this.subpixCapUniform,val);};_.setSubpixTrim=function(gl,val){gl.uniform1f(this.subpixTrimUniform,val);};_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;','varying vec2 v_texcoord;','void main() {','gl_Position = vec4(a_vertex_position, 1.);','v_texcoord = a_vertex_position.xy * .5 + .5;','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=['precision mediump float;','const int fxaaMaxSearchSteps = 128;','uniform float u_edge_threshold;','uniform float u_edge_threshold_min;','uniform int u_search_steps;','uniform float u_search_threshold;','uniform float u_subpix_cap;','uniform float u_subpix_trim;','uniform sampler2D u_sampler0;','uniform vec2 u_buffersize;','uniform bool u_antialias;','varying vec2 v_texcoord;','float FxaaLuma(vec3 rgb) {','return rgb.y * (0.587/0.299) + rgb.x;','}','vec3 FxaaLerp3(vec3 a, vec3 b, float amountOfA) {','return (vec3(-amountOfA) * b) + ((a * vec3(amountOfA)) + b);','}','vec4 FxaaTexOff(sampler2D tex, vec2 pos, vec2 off, vec2 rcpFrame) {','return texture2D(tex, pos + off * rcpFrame);','}','vec3 FxaaPixelShader(vec2 pos, sampler2D tex, vec2 rcpFrame) {','float subpix_trim_scale = (1.0/(1.0 - u_subpix_trim));','vec3 rgbN = FxaaTexOff(tex, pos.xy, vec2( 0.,-1.), rcpFrame).xyz;','vec3 rgbW = FxaaTexOff(tex, pos.xy, vec2(-1., 0.), rcpFrame).xyz;','vec3 rgbM = FxaaTexOff(tex, pos.xy, vec2( 0., 0.), rcpFrame).xyz;','vec3 rgbE = FxaaTexOff(tex, pos.xy, vec2( 1., 0.), rcpFrame).xyz;','vec3 rgbS = FxaaTexOff(tex, pos.xy, vec2( 0., 1.), rcpFrame).xyz;','float lumaN = FxaaLuma(rgbN);','float lumaW = FxaaLuma(rgbW);','float lumaM = FxaaLuma(rgbM);','float lumaE = FxaaLuma(rgbE);','float lumaS = FxaaLuma(rgbS);','float rangeMin = min(lumaM, min(min(lumaN, lumaW), min(lumaS, lumaE)));','float rangeMax = max(lumaM, max(max(lumaN, lumaW), max(lumaS, lumaE)));','float range = rangeMax - rangeMin;','if(range < max(u_edge_threshold_min, rangeMax * u_edge_threshold)) {','return rgbM;','}','vec3 rgbL = rgbN + rgbW + rgbM + rgbE + rgbS;','float lumaL = (lumaN + lumaW + lumaE + lumaS) * 0.25;','float rangeL = abs(lumaL - lumaM);','float blendL = max(0.0, (rangeL / range) - u_subpix_trim) * subpix_trim_scale;','blendL = min(u_subpix_cap, blendL);','vec3 rgbNW = FxaaTexOff(tex, pos.xy, vec2(-1.,-1.), rcpFrame).xyz;','vec3 rgbNE = FxaaTexOff(tex, pos.xy, vec2( 1.,-1.), rcpFrame).xyz;','vec3 rgbSW = FxaaTexOff(tex, pos.xy, vec2(-1., 1.), rcpFrame).xyz;','vec3 rgbSE = FxaaTexOff(tex, pos.xy, vec2( 1., 1.), rcpFrame).xyz;','rgbL += (rgbNW + rgbNE + rgbSW + rgbSE);','rgbL *= vec3(1.0/9.0);','float lumaNW = FxaaLuma(rgbNW);','float lumaNE = FxaaLuma(rgbNE);','float lumaSW = FxaaLuma(rgbSW);','float lumaSE = FxaaLuma(rgbSE);','float edgeVert =','abs((0.25 * lumaNW) + (-0.5 * lumaN) + (0.25 * lumaNE)) +','abs((0.50 * lumaW ) + (-1.0 * lumaM) + (0.50 * lumaE )) +','abs((0.25 * lumaSW) + (-0.5 * lumaS) + (0.25 * lumaSE));','float edgeHorz =','abs((0.25 * lumaNW) + (-0.5 * lumaW) + (0.25 * lumaSW)) +','abs((0.50 * lumaN ) + (-1.0 * lumaM) + (0.50 * lumaS )) +','abs((0.25 * lumaNE) + (-0.5 * lumaE) + (0.25 * lumaSE));','bool horzSpan = edgeHorz >= edgeVert;','float lengthSign = horzSpan ? -rcpFrame.y : -rcpFrame.x;','if(!horzSpan) {','lumaN = lumaW;','lumaS = lumaE;','}','float gradientN = abs(lumaN - lumaM);','float gradientS = abs(lumaS - lumaM);','lumaN = (lumaN + lumaM) * 0.5;','lumaS = (lumaS + lumaM) * 0.5;','if (gradientN < gradientS) {','lumaN = lumaS;','lumaN = lumaS;','gradientN = gradientS;','lengthSign *= -1.0;','}','vec2 posN;','posN.x = pos.x + (horzSpan ? 0.0 : lengthSign * 0.5);','posN.y = pos.y + (horzSpan ? lengthSign * 0.5 : 0.0);','gradientN *= u_search_threshold;','vec2 posP = posN;','vec2 offNP = horzSpan ? vec2(rcpFrame.x, 0.0) : vec2(0.0, rcpFrame.y);','float lumaEndN = lumaN;','float lumaEndP = lumaN;','bool doneN = false;','bool doneP = false;','posN += offNP * vec2(-1.0, -1.0);','posP += offNP * vec2( 1.0,  1.0);','for(int i = 0; i < fxaaMaxSearchSteps; i++) {','if(i >= u_search_steps) break;','if(!doneN) {','lumaEndN = FxaaLuma(texture2D(tex, posN.xy).xyz);','}','if(!doneP) {','lumaEndP = FxaaLuma(texture2D(tex, posP.xy).xyz);','}','doneN = doneN || (abs(lumaEndN - lumaN) >= gradientN);','doneP = doneP || (abs(lumaEndP - lumaN) >= gradientN);','if(doneN && doneP) {','break;','}','if(!doneN) {','posN -= offNP;','}','if(!doneP) {','posP += offNP;','}','}','float dstN = horzSpan ? pos.x - posN.x : pos.y - posN.y;','float dstP = horzSpan ? posP.x - pos.x : posP.y - pos.y;','bool directionN = dstN < dstP;','lumaEndN = directionN ? lumaEndN : lumaEndP;','if(((lumaM - lumaN) < 0.0) == ((lumaEndN - lumaN) < 0.0)) {','lengthSign = 0.0;','}','float spanLength = (dstP + dstN);','dstN = directionN ? dstN : dstP;','float subPixelOffset = (0.5 + (dstN * (-1.0/spanLength))) * lengthSign;','vec3 rgbF = texture2D(tex, vec2(','pos.x + (horzSpan ? 0.0 : subPixelOffset),','pos.y + (horzSpan ? subPixelOffset : 0.0))).xyz;','return FxaaLerp3(rgbL, rgbF, blendL);','}','void main() {','gl_FragColor = texture2D(u_sampler0, v_texcoord);','if(u_antialias) {','gl_FragColor.xyz = FxaaPixelShader(v_texcoord, u_sampler0, 1. / u_buffersize).xyz;','}','}'].join('\\n');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.LabelShader=function(){};var _super=d3._Shader.prototype;var _=d3.LabelShader.prototype=new d3._Shader();_.initUniformLocations=function(gl){_super.initUniformLocations.call(this,gl);this.dimensionUniform=gl.getUniformLocation(this.gProgram,'u_dimension');};_.onShaderAttached=function(gl){_super.onShaderAttached.call(this,gl);this.vertexTexCoordAttribute=2;gl.bindAttribLocation(this.gProgram,this.vertexTexCoordAttribute,'a_vertex_texcoord');};_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;','attribute vec3 a_vertex_normal;','attribute vec2 a_vertex_texcoord;',// matrices set by gl.setMatrixUniforms\n'uniform mat4 u_model_view_matrix;','uniform mat4 u_projection_matrix;','uniform vec2 u_dimension;',// sent to the fragment shader\n'varying vec2 v_texcoord;','void main() {','gl_Position = u_model_view_matrix * vec4(a_vertex_position, 1.);','vec4 depth_pos = vec4(gl_Position);','depth_pos.z += a_vertex_normal.z;','gl_Position = u_projection_matrix * gl_Position;','depth_pos = u_projection_matrix * depth_pos;','gl_Position /= gl_Position.w;','gl_Position.xy += a_vertex_normal.xy / u_dimension * 2.;','gl_Position.z = depth_pos.z / depth_pos.w;','v_texcoord = a_vertex_texcoord;','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=[// set macro for depth mmap texture\ngl.depthTextureExt?'#define CWC_DEPTH_TEX\\n':'',// set float precision\n'precision mediump float;',// texture for draw text nor shadow map\n'uniform sampler2D u_image;',// from the vertex shader\n'varying vec2 v_texcoord;','void main(void) {','gl_FragColor = texture2D(u_image, v_texcoord);','}'].join('');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};_.enableAttribsArray=function(gl){_super.enableAttribsArray.call(this,gl);gl.enableVertexAttribArray(this.vertexNormalAttribute);gl.enableVertexAttribArray(this.vertexTexCoordAttribute);};_.disableAttribsArray=function(gl){_super.disableAttribsArray.call(this,gl);gl.disableVertexAttribArray(this.vertexNormalAttribute);gl.disableVertexAttribArray(this.vertexTexCoordAttribute);};_.setDimension=function(gl,width,height){gl.uniform2f(this.dimensionUniform,width,height);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.LightingShader=function(){};var _super=d3._Shader.prototype;var _=d3.LightingShader.prototype=new d3._Shader();_.initUniformLocations=function(gl){_super.initUniformLocations.call(this,gl);// assign uniform properties\nthis.positionSampleUniform=gl.getUniformLocation(this.gProgram,'u_position_sample');this.colorSampleUniform=gl.getUniformLocation(this.gProgram,'u_color_sample');this.ssaoSampleUniform=gl.getUniformLocation(this.gProgram,'u_ssao_sample');this.outlineSampleUniform=gl.getUniformLocation(this.gProgram,'u_outline_sample');};_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;',// sent to the fragment shader\n'varying vec2 v_texcoord;','void main() {','gl_Position = vec4(a_vertex_position, 1.);','v_texcoord = a_vertex_position.xy * .5 + .5;','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=[// set float precision\n'precision mediump float;','uniform sampler2D u_position_sample;','uniform sampler2D u_color_sample;','uniform sampler2D u_ssao_sample;','uniform sampler2D u_outline_sample;','varying vec2 v_texcoord;','void main() {','vec4 position = texture2D(u_position_sample, v_texcoord);','vec4 color = texture2D(u_color_sample, v_texcoord);','vec4 ao = texture2D(u_ssao_sample, v_texcoord);','float outline = texture2D(u_outline_sample, v_texcoord).r;',// skip background color\n'if(position.w == 0. && outline == 1.) {',// 'gl_FragColor = vec4(0., 0., 0., 1.);',\n'return;','}','gl_FragColor = vec4(color.rgb * ao.r * outline, 1.);','}'].join('');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.NormalShader=function(){};var _super=d3._Shader.prototype;var _=d3.NormalShader.prototype=new d3._Shader();_.initUniformLocations=function(gl){_super.initUniformLocations.call(this,gl);// assign uniform properties\nthis.normalMatrixUniform=gl.getUniformLocation(this.gProgram,'u_normal_matrix');};_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;','attribute vec3 a_vertex_normal;',// matrices set by gl.setMatrixUniforms\n'uniform mat4 u_model_view_matrix;','uniform mat4 u_projection_matrix;','uniform mat3 u_normal_matrix;',// sent to the fragment shader\n'varying vec3 v_normal;','void main() {','v_normal = length(a_vertex_normal)==0. ? a_vertex_normal : u_normal_matrix * a_vertex_normal;','gl_Position = u_projection_matrix * u_model_view_matrix * vec4(a_vertex_position, 1.);','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=[// set float precision\n'precision mediump float;','varying vec3 v_normal;','void main(void) {','vec3 normal = length(v_normal)==0. ? vec3(0., 0., 1.) : normalize(v_normal);','gl_FragColor = vec4(normal, 0.);','}'].join('');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};_.enableAttribsArray=function(gl){_super.enableAttribsArray.call(this,gl);gl.enableVertexAttribArray(this.vertexNormalAttribute);};_.disableAttribsArray=function(gl){_super.disableAttribsArray.call(this,gl);gl.disableVertexAttribArray(this.vertexNormalAttribute);};_.setModelViewMatrix=function(gl,mvMatrix){_super.setModelViewMatrix.call(this,gl,mvMatrix);// create the normal matrix and push it to the graphics card\nvar normalMatrix=m3.transpose(m4.toInverseMat3(mvMatrix,[]));gl.uniformMatrix3fv(this.normalMatrixUniform,false,normalMatrix);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.OutlineShader=function(){};var _super=d3._Shader.prototype;var _=d3.OutlineShader.prototype=new d3._Shader();_.initUniformLocations=function(gl){_super.initUniformLocations.call(this,gl);this.normalSampleUniform=gl.getUniformLocation(this.gProgram,'u_normal_sample');this.depthSampleUniform=gl.getUniformLocation(this.gProgram,'u_depth_sample');this.gbufferTextureSizeUniform=gl.getUniformLocation(this.gProgram,'u_gbuffer_texture_size');this.normalThresholdUniform=gl.getUniformLocation(this.gProgram,'u_normal_threshold');this.depthThresholdUniform=gl.getUniformLocation(this.gProgram,'u_depth_threshold');this.thicknessUniform=gl.getUniformLocation(this.gProgram,'u_thickness');};_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;','varying vec2 v_texcoord;','void main() {','gl_Position = vec4(a_vertex_position, 1.);','v_texcoord = a_vertex_position.xy * .5 + .5;','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=[// set float precision\n'precision mediump float;','uniform sampler2D u_normal_sample;','uniform sampler2D u_depth_sample;','uniform float u_normal_threshold;','uniform float u_depth_threshold;','uniform float u_thickness;','uniform vec2 u_gbuffer_texture_size;','varying vec2 v_texcoord;','void main() {','vec3 normal = texture2D(u_normal_sample, v_texcoord).xyz;','float depth = texture2D(u_depth_sample, v_texcoord).r;',// check background pixel\n// 'if(depth == 1.) {',\n// \t'return;',\n// '}',\n'vec2 texelSize = u_thickness/u_gbuffer_texture_size * .5;','vec2 offsets[8];','offsets[0] = vec2(-texelSize.x, -texelSize.y);','offsets[1] = vec2(-texelSize.x, 0);','offsets[2] = vec2(-texelSize.x, texelSize.y);','offsets[3] = vec2(0, -texelSize.y);','offsets[4] = vec2(0,  texelSize.y);','offsets[5] = vec2(texelSize.x, -texelSize.y);','offsets[6] = vec2(texelSize.x, 0);','offsets[7] = vec2(texelSize.x, texelSize.y);','float edge = 0.;','for (int i = 0; i < 8; i++) {','vec3 sampleNorm = texture2D(u_normal_sample, v_texcoord + offsets[i]).xyz;','if(normal == vec3(.0, .0, .0)) {','if(sampleNorm != vec3(.0, .0, .0)) {','edge = 1.0;','break;','}','continue;','}','if (dot(sampleNorm, normal) < u_normal_threshold) {','edge = 1.0;','break;','}','float sampleDepth = texture2D(u_depth_sample, v_texcoord + offsets[i]).r;','if (abs(sampleDepth - depth) > u_depth_threshold) {','edge = 1.0;','break;','}','}','edge = 1. - edge;','gl_FragColor = vec4(edge, edge, edge, 1.);','}'].join('');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};_.setGbufferTextureSize=function(gl,width,height){gl.uniform2f(this.gbufferTextureSizeUniform,width,height);};_.setNormalThreshold=function(gl,value){gl.uniform1f(this.normalThresholdUniform,value);};_.setDepthThreshold=function(gl,value){gl.uniform1f(this.depthThresholdUniform,value);};_.setThickness=function(gl,value){gl.uniform1f(this.thicknessUniform,value);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.PhongShader=function(){};var _super=d3._Shader.prototype;var _=d3.PhongShader.prototype=new d3._Shader();_.initUniformLocations=function(gl){_super.initUniformLocations.call(this,gl);// assign uniform properties\nthis.shadowUniform=gl.getUniformLocation(this.gProgram,'u_shadow');this.flatColorUniform=gl.getUniformLocation(this.gProgram,'u_flat_color');this.normalMatrixUniform=gl.getUniformLocation(this.gProgram,'u_normal_matrix');this.lightModelViewMatrixUniform=gl.getUniformLocation(this.gProgram,'u_light_model_view_matrix');this.lightProjectionMatrixUniform=gl.getUniformLocation(this.gProgram,'u_light_projection_matrix');this.lightDiffuseColorUniform=gl.getUniformLocation(this.gProgram,'u_light_diffuse_color');this.lightSpecularColorUniform=gl.getUniformLocation(this.gProgram,'u_light_specular_color');this.lightDirectionUniform=gl.getUniformLocation(this.gProgram,'u_light_direction');this.materialAmbientColorUniform=gl.getUniformLocation(this.gProgram,'u_material_ambient_color');this.materialDiffuseColorUniform=gl.getUniformLocation(this.gProgram,'u_material_diffuse_color');this.materialSpecularColorUniform=gl.getUniformLocation(this.gProgram,'u_material_specular_color');this.materialShininessUniform=gl.getUniformLocation(this.gProgram,'u_material_shininess');this.materialAlphaUniform=gl.getUniformLocation(this.gProgram,'u_material_alpha');this.fogModeUniform=gl.getUniformLocation(this.gProgram,'u_fog_mode');this.fogColorUniform=gl.getUniformLocation(this.gProgram,'u_fog_color');this.fogStartUniform=gl.getUniformLocation(this.gProgram,'u_fog_start');this.fogEndUniform=gl.getUniformLocation(this.gProgram,'u_fog_end');this.fogDensityUniform=gl.getUniformLocation(this.gProgram,'u_fog_density');// texture for shadow map\nthis.shadowDepthSampleUniform=gl.getUniformLocation(this.gProgram,'u_shadow_depth_sample');this.shadowTextureSizeUniform=gl.getUniformLocation(this.gProgram,'u_shadow_texture_size');this.shadowIntensityUniform=gl.getUniformLocation(this.gProgram,'u_shadow_intensity');// gamma correction\nthis.gammaCorrectionUniform=gl.getUniformLocation(this.gProgram,'u_gamma_inverted');// point size\nthis.pointSizeUniform=gl.getUniformLocation(this.gProgram,'u_point_size');};_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;','attribute vec3 a_vertex_normal;',// scene uniforms\n'uniform vec3 u_light_diffuse_color;','uniform vec3 u_material_ambient_color;','uniform vec3 u_material_diffuse_color;',// matrices set by gl.setMatrixUniforms\n'uniform mat4 u_model_view_matrix;','uniform mat4 u_projection_matrix;','uniform mat3 u_normal_matrix;','uniform mat4 u_light_model_view_matrix;','uniform mat4 u_light_projection_matrix;','uniform bool u_shadow;',// sent to the fragment shader\n'varying vec3 v_viewpos;','varying vec4 v_shadcoord;','varying vec3 v_diffuse;','varying vec3 v_ambient;','varying vec3 v_normal;','uniform float u_point_size;','void main() {','v_normal = length(a_vertex_normal)==0. ? a_vertex_normal : u_normal_matrix * a_vertex_normal;','v_ambient = u_material_ambient_color;','v_diffuse = u_material_diffuse_color * u_light_diffuse_color;','if(u_shadow) {','v_shadcoord = u_light_projection_matrix * u_light_model_view_matrix * vec4(a_vertex_position, 1.);','v_shadcoord /= v_shadcoord.w;','}','vec4 viewPos = u_model_view_matrix * vec4(a_vertex_position, 1.);','v_viewpos = viewPos.xyz / viewPos.w;','gl_Position = u_projection_matrix * viewPos;',// just to make sure the w is 1\n'gl_Position /= gl_Position.w;','gl_PointSize = u_point_size;','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=[// set macro for depth mmap texture\ngl.depthTextureExt?'#define CWC_DEPTH_TEX\\n':'',// set float precision\n'precision mediump float;',// scene uniforms\n'uniform vec3 u_light_specular_color;','uniform vec3 u_light_direction;','uniform vec3 u_material_specular_color;','uniform float u_material_shininess;','uniform float u_material_alpha;','uniform int u_fog_mode;','uniform vec3 u_fog_color;','uniform float u_fog_density;','uniform float u_fog_start;','uniform float u_fog_end;','uniform bool u_shadow;','uniform float u_shadow_intensity;','uniform bool u_flat_color;','uniform float u_gamma_inverted;',// texture for shadow map\n'uniform sampler2D u_shadow_depth_sample;','uniform vec2 u_shadow_texture_size;',// from the vertex shader\n'varying vec3 v_viewpos;','varying vec4 v_shadcoord;','varying vec3 v_diffuse;','varying vec3 v_ambient;','varying vec3 v_normal;','\\n#ifndef CWC_DEPTH_TEX\\n','float unpack (vec4 colour) {','const vec4 bitShifts = vec4(1.,','1. / 255.,','1. / (255. * 255.),','1. / (255. * 255. * 255.));','return dot(colour, bitShifts);','}','\\n#endif\\n','float shadowMapDepth(vec4 shadowMapColor) {','float zShadowMap;','\\n#ifdef CWC_DEPTH_TEX\\n','zShadowMap = shadowMapColor.r;','\\n#else\\n','zShadowMap = unpack(shadowMapColor);','\\n#endif\\n','return zShadowMap;','}','void main(void) {','vec3 color = v_diffuse;','if(length(v_normal)!=0.){','vec3 normal = normalize(v_normal);','vec3 lightDir = normalize(-u_light_direction);','float nDotL = dot(normal, lightDir);','float shadow = 0.0;','if(u_shadow) {','vec3 depthCoord = .5 + v_shadcoord.xyz / v_shadcoord.w * .5;','if(depthCoord.z <= 1. && depthCoord.z >= 0.) {','float bias = max(.05 * (1. - nDotL), .005);','vec2 texelSize = 1. / u_shadow_texture_size;','for(int x = -1; x <= 1; ++x) {','for(int y = -1; y <= 1; ++y)  {','vec4 shadowMapColor = texture2D(u_shadow_depth_sample, depthCoord.xy + vec2(x, y) * texelSize);','float zShadowMap = shadowMapDepth(shadowMapColor);','shadow += zShadowMap + bias < depthCoord.z ? 1. : 0.;','}','}','shadow /= 9.;','shadow *= u_shadow_intensity;','}','}','if(!u_flat_color) {','vec3 viewDir = normalize(-v_viewpos);','vec3 halfDir = normalize(lightDir + viewDir);','float nDotHV = max(dot(halfDir, normal), 0.);','vec3 specular = u_material_specular_color * u_light_specular_color;','color*=max(nDotL, 0.);','color+=specular * pow(nDotHV, u_material_shininess);','}',// set the color\n'color = (1.-shadow)*color+v_ambient;','}','gl_FragColor = vec4(pow(color, vec3(u_gamma_inverted)), u_material_alpha);','if(u_fog_mode != 0){','float fogCoord = 1.-clamp((u_fog_end - gl_FragCoord.z/gl_FragCoord.w) / (u_fog_end - u_fog_start), 0., 1.);','float fogFactor = 1.;',// linear equation\n'if(u_fog_mode == 1){','fogFactor = 1.-fogCoord;','}',// exp equation\n'else if(u_fog_mode == 2) {','fogFactor = clamp(exp(-u_fog_density*fogCoord), 0., 1.);','}',// exp2 equation\n'else if(u_fog_mode == 3) {','fogFactor = clamp(exp(-pow(u_fog_density*fogCoord, 2.)), 0., 1.);','}','gl_FragColor = mix(vec4(u_fog_color, 1.), gl_FragColor, fogFactor);',// for debugging\n// 'gl_FragColor = vec4(vec3(fogFactor), 1.);',\n'}','}'].join('');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};_.enableAttribsArray=function(gl){_super.enableAttribsArray.call(this,gl);gl.enableVertexAttribArray(this.vertexNormalAttribute);};_.disableAttribsArray=function(gl){_super.disableAttribsArray.call(this,gl);gl.disableVertexAttribArray(this.vertexNormalAttribute);};_.setMatrixUniforms=function(gl,modelMatrix){if(modelMatrix===undefined){this.setModelViewMatrix(gl,gl.modelViewMatrix);this.setLightModelViewMatrix(gl,gl.lightViewMatrix);}else{var mvMatrix=m4.multiply(gl.modelViewMatrix,modelMatrix,[]);var lightModelViewMatrix=m4.multiply(gl.lightViewMatrix,modelMatrix,[]);this.setModelViewMatrix(gl,mvMatrix);this.setLightModelViewMatrix(gl,lightModelViewMatrix);}};_.setModelViewMatrix=function(gl,mvMatrix){_super.setModelViewMatrix.call(this,gl,mvMatrix);// create the normal matrix and push it to the graphics card\nvar normalMatrix=m3.transpose(m4.toInverseMat3(mvMatrix,[]));gl.uniformMatrix3fv(this.normalMatrixUniform,false,normalMatrix);};_.setFlatColor=function(gl,enabled){gl.uniform1i(this.flatColorUniform,enabled);};_.setShadow=function(gl,enabled){gl.uniform1i(this.shadowUniform,enabled);};_.setFogMode=function(gl,mode){gl.uniform1i(this.fogModeUniform,mode);};_.setFogColor=function(gl,color){gl.uniform3fv(this.fogColorUniform,color);};_.setFogStart=function(gl,fogStart){gl.uniform1f(this.fogStartUniform,fogStart);};_.setFogEnd=function(gl,fogEnd){gl.uniform1f(this.fogEndUniform,fogEnd);};_.setFogDensity=function(gl,density){gl.uniform1f(this.fogDensityUniform,density);};_.setMaterialAmbientColor=function(gl,ambient){gl.uniform3fv(this.materialAmbientColorUniform,ambient);};_.setMaterialDiffuseColor=function(gl,diffuse){gl.uniform3fv(this.materialDiffuseColorUniform,diffuse);};_.setMaterialSpecularColor=function(gl,specular){gl.uniform3fv(this.materialSpecularColorUniform,specular);};_.setMaterialShininess=function(gl,shininess){gl.uniform1f(this.materialShininessUniform,shininess);};_.setMaterialAlpha=function(gl,alpha){gl.uniform1f(this.materialAlphaUniform,alpha);};_.setLightDiffuseColor=function(gl,diffuse){gl.uniform3fv(this.lightDiffuseColorUniform,diffuse);};_.setLightSpecularColor=function(gl,specular){gl.uniform3fv(this.lightSpecularColorUniform,specular);};_.setLightDirection=function(gl,direction){gl.uniform3fv(this.lightDirectionUniform,direction);};_.setLightModelViewMatrix=function(gl,mvMatrix){gl.uniformMatrix4fv(this.lightModelViewMatrixUniform,false,mvMatrix);};_.setLightProjectionMatrix=function(gl,matrix){gl.uniformMatrix4fv(this.lightProjectionMatrixUniform,false,matrix);};_.setShadowTextureSize=function(gl,width,height){gl.uniform2f(this.shadowTextureSizeUniform,width,height);};_.setShadowIntensity=function(gl,intensity){gl.uniform1f(this.shadowIntensityUniform,intensity);};_.setGammaCorrection=function(gl,gammaCorrection){// make sure gamma correction is inverted here as it is more efficient in the shader\ngl.uniform1f(this.gammaCorrectionUniform,1.0/gammaCorrection);};_.setPointSize=function(gl,pointSize){gl.uniform1f(this.pointSizeUniform,pointSize);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.PickShader=function(){};var _super=d3._Shader.prototype;var _=d3.PickShader.prototype=new d3._Shader();_.initUniformLocations=function(gl){// assign uniform properties\n_super.initUniformLocations.call(this,gl);this.materialDiffuseColorUniform=gl.getUniformLocation(this.gProgram,'u_material_diffuse_color');};_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;',// matrices set by gl.setMatrixUniforms\n'uniform mat4 u_model_view_matrix;','uniform mat4 u_projection_matrix;','void main() {','gl_Position = u_projection_matrix * u_model_view_matrix * vec4(a_vertex_position, 1.);',// just to make sure the w is 1\n'gl_Position /= gl_Position.w;','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=[// set macro for depth mmap texture\ngl.depthTextureExt?'#define CWC_DEPTH_TEX\\n':'',// set float precision\n'precision mediump float;','uniform vec3 u_material_diffuse_color;','void main(void) {','gl_FragColor = vec4(u_material_diffuse_color, 1.);','}'].join('');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};_.setMaterialDiffuseColor=function(gl,diffuse){gl.uniform3fv(this.materialDiffuseColorUniform,diffuse);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.PositionShader=function(){};var _super=d3._Shader.prototype;var _=d3.PositionShader.prototype=new d3._Shader();_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;',// matrices set by gl.setMatrixUniforms\n'uniform mat4 u_model_view_matrix;','uniform mat4 u_projection_matrix;','varying vec4 v_position;','void main() {','vec4 viewPos = u_model_view_matrix * vec4(a_vertex_position, 1.);','gl_Position = u_projection_matrix * viewPos;','v_position = viewPos / viewPos.w;','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=[// set float precision\n'precision mediump float;','varying vec4 v_position;','void main(void) {','gl_FragColor = v_position;','}'].join('');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.QuadShader=function(){};var _=d3.QuadShader.prototype=new d3._Shader();_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;','varying vec2 v_texcoord;','void main() {','gl_Position = vec4(a_vertex_position, 1.);','v_texcoord = a_vertex_position.xy * .5 + .5;','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=[// set float precision\n'precision mediump float;','uniform sampler2D u_image;','varying vec2 v_texcoord;','void main() {','gl_FragColor = texture2D(u_image, v_texcoord);','}'].join('');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(structures,d3,ELEMENT,MarchingCubes,v3,m,undefined){'use strict';var Triangle=function Triangle(i1,i2,i3){this.i1=i1;this.i2=i2;this.i3=i3;};function getRange(atoms,probeRadius){var r=[Infinity,-Infinity,Infinity,-Infinity,Infinity,-Infinity];var add=probeRadius+2;for(var i=0,ii=atoms.length;i<ii;i++){var a=atoms[i];r[0]=m.min(r[0],a.x-add);r[1]=m.max(r[1],a.x+add);r[2]=m.min(r[2],a.y-add);r[3]=m.max(r[3],a.y+add);r[4]=m.min(r[4],a.z-add);r[5]=m.max(r[5],a.z+add);}return r;};function addPoint(p,points,xs,ys,zs,step){// transform back into real space\nvar px=p[0]*step+xs-step;var py=p[1]*step+ys-step;var pz=p[2]*step+zs-step;// find any previous match\nvar index=-1;var cutoff=1E-3;for(var j=0,jj=points.length;j<jj;j++){var pj=points[j];if(m.abs(pj.x-px)<cutoff&&m.abs(pj.y-py)<cutoff&&m.abs(pj.z-pz)<cutoff){index=j;break;}}if(index==-1){index=points.length;points.push(new structures.Atom('C',px,py,pz));}return index;};d3._Surface=function(){};var _=d3._Surface.prototype=new d3._Mesh();_.generate=function(xdif,ydif,zdif,step,range,xsteps,ysteps,zsteps){// generate the function\nvar vals=[];var z=range[4]-step;for(var k=0;k<zsteps;k++){var y=range[2]-step;for(var j=0;j<ysteps;j++){var x=range[0]-step;for(var i=0;i<xsteps;i++){vals.push(this.calculate(x,y,z));x+=step;}y+=step;}z+=step;}return vals;};_.build=function(atoms,probeRadius,resolution){var positionData=[];var normalData=[];var indexData=[];// calculate the range of the function\nvar range=getRange(atoms,probeRadius);var xdif=range[1]-range[0];var ydif=range[3]-range[2];var zdif=range[5]-range[4];var step=m.min(xdif,m.min(ydif,zdif))/resolution;// generate the function\nvar xsteps=2+m.ceil(xdif/step);var ysteps=2+m.ceil(ydif/step);var zsteps=2+m.ceil(zdif/step);var vals=this.generate(xdif,ydif,zdif,step,range,xsteps,ysteps,zsteps);// marching cubes\nvar mesh=MarchingCubes(vals,[xsteps,ysteps,zsteps]);// build surface\nvar ps=[];var is=[];for(var i=0,ii=mesh.vertices.length;i<ii;i++){is.push(addPoint(mesh.vertices[i],ps,range[0],range[2],range[4],step));}// triangles\nvar triangles=[];for(var i=0,ii=mesh.faces.length;i<ii;i++){var f=mesh.faces[i];var i1=is[f[0]];var i2=is[f[1]];var i3=is[f[2]];triangles.push(new Triangle(i1,i2,i3));indexData.push(i1,i2,i3);}// smoothing - 1 pass\nvar savedConnections=[];for(var i=0,ii=ps.length;i<ii;i++){var connections=[];for(var j=0,jj=triangles.length;j<jj;j++){var t=triangles[j];if(t.i1===i||t.i2===i||t.i3===i){if(t.i1!=i&&connections.indexOf(t.i1)===-1){connections.push(t.i1);}if(t.i2!=i&&connections.indexOf(t.i2)===-1){connections.push(t.i2);}if(t.i3!=i&&connections.indexOf(t.i3)===-1){connections.push(t.i3);}}}savedConnections.push(connections);}var tmp=[];for(var i=0,ii=ps.length;i<ii;i++){var pi=ps[i];var connections=savedConnections[i];var pt=new structures.Atom();if(connections.length<3){pt.x=pi.x;pt.y=pi.y;pt.z=pi.z;}else{var wt=1;if(connections.length<5){wt=.5;}for(var j=0,jj=connections.length;j<jj;j++){var pc=ps[connections[j]];pt.x+=pc.x;pt.y+=pc.y;pt.z+=pc.z;}pt.x+=pi.x*wt;pt.y+=pi.y*wt;pt.z+=pi.z*wt;var scale=1/(wt+connections.length);pt.x*=scale;pt.y*=scale;pt.z*=scale;}tmp.push(pt);}ps=tmp;for(var i=0,ii=ps.length;i<ii;i++){var pi=ps[i];positionData.push(pi.x,pi.y,pi.z);}// normals\nfor(var i=0,ii=triangles.length;i<ii;i++){var t=triangles[i];var p1=ps[t.i1];var p2=ps[t.i2];var p3=ps[t.i3];var v12=[p2.x-p1.x,p2.y-p1.y,p2.z-p1.z];var v13=[p3.x-p1.x,p3.y-p1.y,p3.z-p1.z];v3.cross(v12,v13);if(isNaN(v12[0])){// for some reason, origin shows up as some points and should be\n// ignored\nv12=[0,0,0];}t.normal=v12;}for(var i=0,ii=ps.length;i<ii;i++){var sum=[0,0,0];for(var j=0,jj=triangles.length;j<jj;j++){var t=triangles[j];if(t.i1===i||t.i2===i||t.i3===i){sum[0]+=t.normal[0];sum[1]+=t.normal[1];sum[2]+=t.normal[2];}}v3.normalize(sum);normalData.push(sum[0],sum[1],sum[2]);}this.storeData(positionData,normalData,indexData);};_.render=function(gl,specs){if(this.specs){specs=this.specs;}if(!specs.surfaces_display){return;}gl.shader.setMatrixUniforms(gl);this.bindBuffers(gl);// colors\ngl.material.setTempColors(gl,specs.surfaces_materialAmbientColor_3D,specs.surfaces_color,specs.surfaces_materialSpecularColor_3D,specs.surfaces_materialShininess_3D);// alpha must be set after temp colors as that function sets alpha to 1\ngl.material.setAlpha(gl,specs.surfaces_alpha);// render\nif(specs.surfaces_style==='Dots'){// dots\n//gl.pointSize(1);\n// pointSize isn't part of WebGL API, so we have to make it a shader uniform in the vertex shader\ngl.shader.setPointSize(gl,specs.shapes_pointSize);//gl.drawArrays(gl.POINTS, 0, this.vertexIndexBuffer.numItems);\ngl.drawElements(gl.POINTS,this.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}else if(specs.surfaces_style==='Mesh'){// mesh\ngl.lineWidth(specs.shapes_lineWidth);//gl.polygonMode(gl.FRONT_AND_BACK, gl.LINE);\ngl.drawElements(gl.LINES,this.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);//gl.polygonMode(gl.FRONT_AND_BACK, gl.FILL);\n}else{// solid\ngl.drawElements(gl.TRIANGLES,this.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}};})(ChemDoodle.structures,ChemDoodle.structures.d3,ChemDoodle.ELEMENT,ChemDoodle.lib.MarchingCubes,ChemDoodle.lib.vec3,Math);(function(structures,d3,ELEMENT,m,undefined){'use strict';d3.SASSurface=function(atoms,probeRadius,resolution){this.atoms=atoms;this.probeRadius=probeRadius;this.resolution=resolution;this.build(atoms,probeRadius,resolution);};var _=d3.SASSurface.prototype=new d3._Surface();_.calculate=function(x,y,z){var min=Infinity;var p=new structures.Atom('C',x,y,z);for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];var vdwRadius=ELEMENT[a.label]&&ELEMENT[a.label].vdWRadius!==0?ELEMENT[a.label].vdWRadius:2;var distanceCenter=a.distance3D(p)-this.probeRadius;var distanceSurface=distanceCenter-vdwRadius;min=m.min(min,distanceSurface);}return min;};})(ChemDoodle.structures,ChemDoodle.structures.d3,ChemDoodle.ELEMENT,Math);(function(structures,d3,ELEMENT,m,undefined){'use strict';d3.VDWSurface=function(atoms,resolution){this.atoms=atoms;this.probeRadius=0;this.resolution=resolution;this.build(atoms,0,resolution);};var _=d3.VDWSurface.prototype=new d3._Surface();_.calculate=function(x,y,z){var min=Infinity;var p=new structures.Atom('C',x,y,z);for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];var vdwRadius=ELEMENT[a.label]&&ELEMENT[a.label].vdWRadius!==0?ELEMENT[a.label].vdWRadius:2;var distanceCenter=a.distance3D(p);var distanceSurface=distanceCenter-vdwRadius;min=m.min(min,distanceSurface);}return min;};})(ChemDoodle.structures,ChemDoodle.structures.d3,ChemDoodle.ELEMENT,Math);(function(structures,extensions,m,undefined){'use strict';structures.Plate=function(lanes){this.lanes=new Array(lanes);for(i=0,ii=lanes;i<ii;i++){this.lanes[i]=[];}};var _=structures.Plate.prototype;_.sort=function(){for(i=0,ii=this.lanes.length;i<ii;i++){this.lanes[i].sort(function(a,b){return a-b;});}};_.draw=function(ctx,specs){// Front and origin\nvar width=ctx.canvas.width;var height=ctx.canvas.height;this.origin=9*height/10;this.front=height/10;this.laneLength=this.origin-this.front;ctx.strokeStyle='#000000';ctx.beginPath();ctx.moveTo(0,this.front);ctx.lineTo(width,this.front);ctx.setLineDash([3]);ctx.stroke();ctx.setLineDash([]);ctx.beginPath();ctx.moveTo(0,this.origin);ctx.lineTo(width,this.origin);ctx.closePath();ctx.stroke();// Lanes\nfor(i=0,ii=this.lanes.length;i<ii;i++){var laneX=(i+1)*width/(ii+1);ctx.beginPath();ctx.moveTo(laneX,this.origin);ctx.lineTo(laneX,this.origin+3);ctx.closePath();ctx.stroke();// Spots\nfor(s=0,ss=this.lanes[i].length;s<ss;s++){var spotY=this.origin-this.laneLength*this.lanes[i][s].rf;switch(this.lanes[i][s].type){case'compact':ctx.beginPath();ctx.arc(laneX,spotY,3,0,2*m.PI,false);ctx.closePath();break;case'expanded':ctx.beginPath();ctx.arc(laneX,spotY,7,0,2*m.PI,false);ctx.closePath();break;case'trailing':// trailing\nbreak;case'widened':extensions.contextEllipse(ctx,laneX-18,spotY-10,36,10);break;case'cresent':ctx.beginPath();ctx.arc(laneX,spotY,9,0,m.PI,true);ctx.closePath();break;}switch(this.lanes[i][s].style){case'solid':ctx.fillStyle='#000000';ctx.fill();break;case'transparent':ctx.stroke();break;case'gradient':// gradient\nbreak;}}}};structures.Plate.Spot=function(type,rf,style){this.type=type;this.rf=rf;this.style=style?style:'solid';};})(ChemDoodle.structures,ChemDoodle.extensions,Math);(function(c,structures,m,JSON,undefined){'use strict';// default canvas properties\nc.default_backgroundColor='#FFFFFF';c.default_scale=1;c.default_rotateAngle=0;c.default_bondLength_2D=20;c.default_angstromsPerBondLength=1.25;c.default_lightDirection_3D=[-.1,-.1,-1];c.default_lightDiffuseColor_3D='#FFFFFF';c.default_lightSpecularColor_3D='#FFFFFF';c.default_projectionPerspective_3D=true;c.default_projectionPerspectiveVerticalFieldOfView_3D=45;c.default_projectionOrthoWidth_3D=40;c.default_projectionWidthHeightRatio_3D=undefined;c.default_projectionFrontCulling_3D=.1;c.default_projectionBackCulling_3D=10000;c.default_cullBackFace_3D=true;c.default_fog_mode_3D=0;c.default_fog_color_3D='#000000';c.default_fog_start_3D=0;c.default_fog_end_3D=1;c.default_fog_density_3D=1;c.default_shadow_3D=false;c.default_shadow_intensity_3D=.85;c.default_flat_color_3D=false;c.default_antialias_3D=true;c.default_gammaCorrection_3D=2.2;c.default_colorHover='#885110';c.default_colorSelect='#0060B2';c.default_colorError='#c10000';c.default_colorPreview='#00FF00';// 3D shaders\n// default ssao\nc.default_ssao_3D=false;c.default_ssao_kernel_radius=17;c.default_ssao_kernel_samples=32;c.default_ssao_power=1.0;// default outline 3D\nc.default_outline_3D=false;c.default_outline_thickness=1.0;c.default_outline_normal_threshold=0.85;c.default_outline_depth_threshold=0.1;// defult fxaa antialiasing\nc.default_fxaa_edgeThreshold=1.0/16.0;c.default_fxaa_edgeThresholdMin=1.0/12.0;c.default_fxaa_searchSteps=64;c.default_fxaa_searchThreshold=1.0/4.0;c.default_fxaa_subpixCap=1.0;c.default_fxaa_subpixTrim=0.0;// default atom properties\nc.default_atoms_display=true;c.default_atoms_color='#000000';c.default_atoms_font_size_2D=12;c.default_atoms_font_families_2D=['Helvetica','Arial','Dialog'];c.default_atoms_font_bold_2D=false;c.default_atoms_font_italic_2D=false;c.default_atoms_circles_2D=false;c.default_atoms_circleDiameter_2D=10;c.default_atoms_circleBorderWidth_2D=1;c.default_atoms_lonePairDistance_2D=8;c.default_atoms_lonePairSpread_2D=4;c.default_atoms_lonePairDiameter_2D=1;c.default_atoms_useJMOLColors=false;c.default_atoms_usePYMOLColors=false;c.default_atoms_HBlack_2D=true;c.default_atoms_implicitHydrogens_2D=true;c.default_atoms_displayTerminalCarbonLabels_2D=false;c.default_atoms_showHiddenCarbons_2D=true;c.default_atoms_showAttributedCarbons_2D=true;c.default_atoms_displayAllCarbonLabels_2D=false;c.default_atoms_resolution_3D=30;c.default_atoms_sphereDiameter_3D=.8;c.default_atoms_useVDWDiameters_3D=false;c.default_atoms_vdwMultiplier_3D=1;c.default_atoms_materialAmbientColor_3D='#000000';c.default_atoms_materialSpecularColor_3D='#555555';c.default_atoms_materialShininess_3D=32;c.default_atoms_nonBondedAsStars_3D=false;c.default_atoms_displayLabels_3D=false;// default bond properties\nc.default_bonds_display=true;c.default_bonds_color='#000000';c.default_bonds_width_2D=1;c.default_bonds_useAbsoluteSaturationWidths_2D=true;c.default_bonds_saturationWidth_2D=.2;c.default_bonds_saturationWidthAbs_2D=5;c.default_bonds_ends_2D='round';c.default_bonds_splitColor=false;c.default_bonds_colorGradient=false;c.default_bonds_saturationAngle_2D=m.PI/3;c.default_bonds_symmetrical_2D=false;c.default_bonds_clearOverlaps_2D=false;c.default_bonds_overlapClearWidth_2D=.5;c.default_bonds_atomLabelBuffer_2D=1;c.default_bonds_wedgeThickness_2D=6;c.default_bonds_wavyLength_2D=4;c.default_bonds_hashWidth_2D=1;c.default_bonds_hashSpacing_2D=2.5;c.default_bonds_dotSize_2D=2;c.default_bonds_lewisStyle_2D=false;c.default_bonds_showBondOrders_3D=false;c.default_bonds_resolution_3D=30;c.default_bonds_renderAsLines_3D=false;c.default_bonds_cylinderDiameter_3D=.3;c.default_bonds_pillLatitudeResolution_3D=10;c.default_bonds_pillLongitudeResolution_3D=20;c.default_bonds_pillHeight_3D=.3;c.default_bonds_pillSpacing_3D=.1;c.default_bonds_pillDiameter_3D=.3;c.default_bonds_materialAmbientColor_3D='#000000';c.default_bonds_materialSpecularColor_3D='#555555';c.default_bonds_materialShininess_3D=32;// default macromolecular properties\nc.default_proteins_displayRibbon=true;c.default_proteins_displayBackbone=false;c.default_proteins_backboneThickness=1.5;c.default_proteins_backboneColor='#CCCCCC';c.default_proteins_ribbonCartoonize=false;c.default_proteins_displayPipePlank=false;// shapely, amino, polarity, rainbow, acidity\nc.default_proteins_residueColor='none';c.default_proteins_primaryColor='#FF0D0D';c.default_proteins_secondaryColor='#FFFF30';c.default_proteins_ribbonCartoonHelixPrimaryColor='#00E740';c.default_proteins_ribbonCartoonHelixSecondaryColor='#9905FF';c.default_proteins_ribbonCartoonSheetColor='#E8BB99';c.default_proteins_tubeColor='#FF0D0D';c.default_proteins_tubeResolution_3D=15;c.default_proteins_ribbonThickness=.2;c.default_proteins_tubeThickness=0.5;c.default_proteins_plankSheetWidth=3.5;c.default_proteins_cylinderHelixDiameter=4;c.default_proteins_verticalResolution=8;c.default_proteins_horizontalResolution=8;c.default_proteins_materialAmbientColor_3D='#000000';c.default_proteins_materialSpecularColor_3D='#555555';c.default_proteins_materialShininess_3D=32;c.default_nucleics_display=true;c.default_nucleics_tubeColor='#CCCCCC';c.default_nucleics_baseColor='#C10000';// shapely, rainbow\nc.default_nucleics_residueColor='none';c.default_nucleics_tubeThickness=1.5;c.default_nucleics_tubeResolution_3D=15;c.default_nucleics_verticalResolution=8;c.default_nucleics_materialAmbientColor_3D='#000000';c.default_nucleics_materialSpecularColor_3D='#555555';c.default_nucleics_materialShininess_3D=32;c.default_macro_displayAtoms=false;c.default_macro_displayBonds=false;c.default_macro_atomToLigandDistance=-1;c.default_macro_showWater=false;c.default_macro_colorByChain=false;c.default_macro_rainbowColors=['#0000FF','#00FFFF','#00FF00','#FFFF00','#FF0000'];// default surface properties\nc.default_surfaces_display=true;c.default_surfaces_alpha=.5;c.default_surfaces_style='Solid';c.default_surfaces_color='white';c.default_surfaces_materialAmbientColor_3D='#000000';c.default_surfaces_materialSpecularColor_3D='#000000';c.default_surfaces_materialShininess_3D=32;// default spectrum properties\nc.default_plots_color='#000000';c.default_plots_width=1;c.default_plots_showIntegration=false;c.default_plots_integrationColor='#c10000';c.default_plots_integrationLineWidth=1;c.default_plots_showGrid=false;c.default_plots_gridColor='gray';c.default_plots_gridLineWidth=.5;c.default_plots_showYAxis=true;c.default_plots_flipXAxis=false;// default shape properties\nc.default_text_font_size=12;c.default_text_font_families=['Helvetica','Arial','Dialog'];c.default_text_font_bold=true;c.default_text_font_italic=false;c.default_text_font_stroke_3D=true;c.default_text_color='#000000';c.default_shapes_color='#000000';c.default_shapes_lineWidth=1;c.default_shapes_pointSize=2;c.default_shapes_arrowLength_2D=8;c.default_compass_display=false;c.default_compass_axisXColor_3D='#FF0000';c.default_compass_axisYColor_3D='#00FF00';c.default_compass_axisZColor_3D='#0000FF';c.default_compass_size_3D=50;c.default_compass_resolution_3D=10;c.default_compass_displayText_3D=true;c.default_compass_type_3D=0;c.default_measurement_update_3D=false;c.default_measurement_angleBands_3D=10;c.default_measurement_displayText_3D=true;structures.VisualSpecifications=function(){// canvas properties\nthis.backgroundColor=c.default_backgroundColor;this.scale=c.default_scale;this.rotateAngle=c.default_rotateAngle;this.bondLength_2D=c.default_bondLength_2D;this.angstromsPerBondLength=c.default_angstromsPerBondLength;this.lightDirection_3D=c.default_lightDirection_3D.slice(0);this.lightDiffuseColor_3D=c.default_lightDiffuseColor_3D;this.lightSpecularColor_3D=c.default_lightSpecularColor_3D;this.projectionPerspective_3D=c.default_projectionPerspective_3D;this.projectionPerspectiveVerticalFieldOfView_3D=c.default_projectionPerspectiveVerticalFieldOfView_3D;this.projectionOrthoWidth_3D=c.default_projectionOrthoWidth_3D;this.projectionWidthHeightRatio_3D=c.default_projectionWidthHeightRatio_3D;this.projectionFrontCulling_3D=c.default_projectionFrontCulling_3D;this.projectionBackCulling_3D=c.default_projectionBackCulling_3D;this.cullBackFace_3D=c.default_cullBackFace_3D;this.fog_mode_3D=c.default_fog_mode_3D;this.fog_color_3D=c.default_fog_color_3D;this.fog_start_3D=c.default_fog_start_3D;this.fog_end_3D=c.default_fog_end_3D;this.fog_density_3D=c.default_fog_density_3D;this.shadow_3D=c.default_shadow_3D;this.shadow_intensity_3D=c.default_shadow_intensity_3D;this.flat_color_3D=c.default_flat_color_3D;this.antialias_3D=c.default_antialias_3D;this.gammaCorrection_3D=c.default_gammaCorrection_3D;this.colorHover=c.default_colorHover;this.colorSelect=c.default_colorSelect;this.colorError=c.default_colorError;this.colorPreview=c.default_colorPreview;// 3D shaders\n// ssao properties\nthis.ssao_3D=c.default_ssao_3D;this.ssao_kernel_radius=c.default_ssao_kernel_radius;this.ssao_kernel_samples=c.default_ssao_kernel_samples;this.ssao_power=c.default_ssao_power;// outline properties\nthis.outline_3D=c.default_outline_3D;this.outline_normal_threshold=c.default_outline_normal_threshold;this.outline_depth_threshold=c.default_outline_depth_threshold;this.outline_thickness=c.default_outline_thickness;// fxaa properties\nthis.fxaa_edgeThreshold=c.default_fxaa_edgeThreshold;this.fxaa_edgeThresholdMin=c.default_fxaa_edgeThresholdMin;this.fxaa_searchSteps=c.default_fxaa_searchSteps;this.fxaa_searchThreshold=c.default_fxaa_searchThreshold;this.fxaa_subpixCap=c.default_fxaa_subpixCap;this.fxaa_subpixTrim=c.default_fxaa_subpixTrim;// atom properties\nthis.atoms_display=c.default_atoms_display;this.atoms_color=c.default_atoms_color;this.atoms_font_size_2D=c.default_atoms_font_size_2D;this.atoms_font_families_2D=c.default_atoms_font_families_2D.slice(0);this.atoms_font_bold_2D=c.default_atoms_font_bold_2D;this.atoms_font_italic_2D=c.default_atoms_font_italic_2D;this.atoms_circles_2D=c.default_atoms_circles_2D;this.atoms_circleDiameter_2D=c.default_atoms_circleDiameter_2D;this.atoms_circleBorderWidth_2D=c.default_atoms_circleBorderWidth_2D;this.atoms_lonePairDistance_2D=c.default_atoms_lonePairDistance_2D;this.atoms_lonePairSpread_2D=c.default_atoms_lonePairSpread_2D;this.atoms_lonePairDiameter_2D=c.default_atoms_lonePairDiameter_2D;this.atoms_useJMOLColors=c.default_atoms_useJMOLColors;this.atoms_usePYMOLColors=c.default_atoms_usePYMOLColors;this.atoms_HBlack_2D=c.default_atoms_HBlack_2D;this.atoms_implicitHydrogens_2D=c.default_atoms_implicitHydrogens_2D;this.atoms_displayTerminalCarbonLabels_2D=c.default_atoms_displayTerminalCarbonLabels_2D;this.atoms_showHiddenCarbons_2D=c.default_atoms_showHiddenCarbons_2D;this.atoms_showAttributedCarbons_2D=c.default_atoms_showAttributedCarbons_2D;this.atoms_displayAllCarbonLabels_2D=c.default_atoms_displayAllCarbonLabels_2D;this.atoms_resolution_3D=c.default_atoms_resolution_3D;this.atoms_sphereDiameter_3D=c.default_atoms_sphereDiameter_3D;this.atoms_useVDWDiameters_3D=c.default_atoms_useVDWDiameters_3D;this.atoms_vdwMultiplier_3D=c.default_atoms_vdwMultiplier_3D;this.atoms_materialAmbientColor_3D=c.default_atoms_materialAmbientColor_3D;this.atoms_materialSpecularColor_3D=c.default_atoms_materialSpecularColor_3D;this.atoms_materialShininess_3D=c.default_atoms_materialShininess_3D;this.atoms_nonBondedAsStars_3D=c.default_atoms_nonBondedAsStars_3D;this.atoms_displayLabels_3D=c.default_atoms_displayLabels_3D;// bond properties\nthis.bonds_display=c.default_bonds_display;this.bonds_color=c.default_bonds_color;this.bonds_width_2D=c.default_bonds_width_2D;this.bonds_useAbsoluteSaturationWidths_2D=c.default_bonds_useAbsoluteSaturationWidths_2D;this.bonds_saturationWidth_2D=c.default_bonds_saturationWidth_2D;this.bonds_saturationWidthAbs_2D=c.default_bonds_saturationWidthAbs_2D;this.bonds_ends_2D=c.default_bonds_ends_2D;this.bonds_splitColor=c.default_bonds_splitColor;this.bonds_colorGradient=c.default_bonds_colorGradient;this.bonds_saturationAngle_2D=c.default_bonds_saturationAngle_2D;this.bonds_symmetrical_2D=c.default_bonds_symmetrical_2D;this.bonds_clearOverlaps_2D=c.default_bonds_clearOverlaps_2D;this.bonds_overlapClearWidth_2D=c.default_bonds_overlapClearWidth_2D;this.bonds_atomLabelBuffer_2D=c.default_bonds_atomLabelBuffer_2D;this.bonds_wedgeThickness_2D=c.default_bonds_wedgeThickness_2D;this.bonds_wavyLength_2D=c.default_bonds_wavyLength_2D;this.bonds_hashWidth_2D=c.default_bonds_hashWidth_2D;this.bonds_hashSpacing_2D=c.default_bonds_hashSpacing_2D;this.bonds_dotSize_2D=c.default_bonds_dotSize_2D;this.bonds_lewisStyle_2D=c.default_bonds_lewisStyle_2D;this.bonds_showBondOrders_3D=c.default_bonds_showBondOrders_3D;this.bonds_resolution_3D=c.default_bonds_resolution_3D;this.bonds_renderAsLines_3D=c.default_bonds_renderAsLines_3D;this.bonds_cylinderDiameter_3D=c.default_bonds_cylinderDiameter_3D;this.bonds_pillHeight_3D=c.default_bonds_pillHeight_3D;this.bonds_pillLatitudeResolution_3D=c.default_bonds_pillLatitudeResolution_3D;this.bonds_pillLongitudeResolution_3D=c.default_bonds_pillLongitudeResolution_3D;this.bonds_pillSpacing_3D=c.default_bonds_pillSpacing_3D;this.bonds_pillDiameter_3D=c.default_bonds_pillDiameter_3D;this.bonds_materialAmbientColor_3D=c.default_bonds_materialAmbientColor_3D;this.bonds_materialSpecularColor_3D=c.default_bonds_materialSpecularColor_3D;this.bonds_materialShininess_3D=c.default_bonds_materialShininess_3D;// macromolecular properties\nthis.proteins_displayRibbon=c.default_proteins_displayRibbon;this.proteins_displayBackbone=c.default_proteins_displayBackbone;this.proteins_backboneThickness=c.default_proteins_backboneThickness;this.proteins_backboneColor=c.default_proteins_backboneColor;this.proteins_ribbonCartoonize=c.default_proteins_ribbonCartoonize;this.proteins_residueColor=c.default_proteins_residueColor;this.proteins_primaryColor=c.default_proteins_primaryColor;this.proteins_secondaryColor=c.default_proteins_secondaryColor;this.proteins_ribbonCartoonHelixPrimaryColor=c.default_proteins_ribbonCartoonHelixPrimaryColor;this.proteins_ribbonCartoonHelixSecondaryColor=c.default_proteins_ribbonCartoonHelixSecondaryColor;this.proteins_tubeColor=c.default_proteins_tubeColor;this.proteins_tubeResolution_3D=c.default_proteins_tubeResolution_3D;this.proteins_displayPipePlank=c.default_proteins_displayPipePlank;this.proteins_ribbonCartoonSheetColor=c.default_proteins_ribbonCartoonSheetColor;this.proteins_ribbonThickness=c.default_proteins_ribbonThickness;this.proteins_tubeThickness=c.default_proteins_tubeThickness;this.proteins_plankSheetWidth=c.default_proteins_plankSheetWidth;this.proteins_cylinderHelixDiameter=c.default_proteins_cylinderHelixDiameter;this.proteins_verticalResolution=c.default_proteins_verticalResolution;this.proteins_horizontalResolution=c.default_proteins_horizontalResolution;this.proteins_materialAmbientColor_3D=c.default_proteins_materialAmbientColor_3D;this.proteins_materialSpecularColor_3D=c.default_proteins_materialSpecularColor_3D;this.proteins_materialShininess_3D=c.default_proteins_materialShininess_3D;this.macro_displayAtoms=c.default_macro_displayAtoms;this.macro_displayBonds=c.default_macro_displayBonds;this.macro_atomToLigandDistance=c.default_macro_atomToLigandDistance;this.nucleics_display=c.default_nucleics_display;this.nucleics_tubeColor=c.default_nucleics_tubeColor;this.nucleics_baseColor=c.default_nucleics_baseColor;this.nucleics_residueColor=c.default_nucleics_residueColor;this.nucleics_tubeThickness=c.default_nucleics_tubeThickness;this.nucleics_tubeResolution_3D=c.default_nucleics_tubeResolution_3D;this.nucleics_verticalResolution=c.default_nucleics_verticalResolution;this.nucleics_materialAmbientColor_3D=c.default_nucleics_materialAmbientColor_3D;this.nucleics_materialSpecularColor_3D=c.default_nucleics_materialSpecularColor_3D;this.nucleics_materialShininess_3D=c.default_nucleics_materialShininess_3D;this.macro_showWater=c.default_macro_showWater;this.macro_colorByChain=c.default_macro_colorByChain;this.macro_rainbowColors=c.default_macro_rainbowColors.slice(0);// surface properties\nthis.surfaces_display=c.default_surfaces_display;this.surfaces_alpha=c.default_surfaces_alpha;this.surfaces_style=c.default_surfaces_style;this.surfaces_color=c.default_surfaces_color;this.surfaces_materialAmbientColor_3D=c.default_surfaces_materialAmbientColor_3D;this.surfaces_materialSpecularColor_3D=c.default_surfaces_materialSpecularColor_3D;this.surfaces_materialShininess_3D=c.default_surfaces_materialShininess_3D;// spectrum properties\nthis.plots_color=c.default_plots_color;this.plots_width=c.default_plots_width;this.plots_showIntegration=c.default_plots_showIntegration;this.plots_integrationColor=c.default_plots_integrationColor;this.plots_integrationLineWidth=c.default_plots_integrationLineWidth;this.plots_showGrid=c.default_plots_showGrid;this.plots_gridColor=c.default_plots_gridColor;this.plots_gridLineWidth=c.default_plots_gridLineWidth;this.plots_showYAxis=c.default_plots_showYAxis;this.plots_flipXAxis=c.default_plots_flipXAxis;// shape properties\nthis.text_font_size=c.default_text_font_size;this.text_font_families=c.default_text_font_families.slice(0);this.text_font_bold=c.default_text_font_bold;this.text_font_italic=c.default_text_font_italic;this.text_font_stroke_3D=c.default_text_font_stroke_3D;this.text_color=c.default_text_color;this.shapes_color=c.default_shapes_color;this.shapes_lineWidth=c.default_shapes_lineWidth;this.shapes_pointSize=c.default_shapes_pointSize;this.shapes_arrowLength_2D=c.default_shapes_arrowLength_2D;this.compass_display=c.default_compass_display;this.compass_axisXColor_3D=c.default_compass_axisXColor_3D;this.compass_axisYColor_3D=c.default_compass_axisYColor_3D;this.compass_axisZColor_3D=c.default_compass_axisZColor_3D;this.compass_size_3D=c.default_compass_size_3D;this.compass_resolution_3D=c.default_compass_resolution_3D;this.compass_displayText_3D=c.default_compass_displayText_3D;this.compass_type_3D=c.default_compass_type_3D;this.measurement_update_3D=c.default_measurement_update_3D;this.measurement_angleBands_3D=c.default_measurement_angleBands_3D;this.measurement_displayText_3D=c.default_measurement_displayText_3D;};var _=structures.VisualSpecifications.prototype;_.set3DRepresentation=function(representation){this.atoms_display=true;this.bonds_display=true;this.bonds_color='#777777';this.atoms_useVDWDiameters_3D=true;this.atoms_useJMOLColors=true;this.bonds_splitColor=true;this.bonds_showBondOrders_3D=true;this.bonds_renderAsLines_3D=false;if(representation==='Ball and Stick'){this.atoms_vdwMultiplier_3D=.3;this.bonds_splitColor=false;this.bonds_cylinderDiameter_3D=.3;this.bonds_materialAmbientColor_3D=c.default_atoms_materialAmbientColor_3D;this.bonds_pillDiameter_3D=.15;}else if(representation==='van der Waals Spheres'){this.bonds_display=false;this.atoms_vdwMultiplier_3D=1;}else if(representation==='Stick'){this.atoms_useVDWDiameters_3D=false;this.bonds_showBondOrders_3D=false;this.bonds_cylinderDiameter_3D=this.atoms_sphereDiameter_3D=.8;this.bonds_materialAmbientColor_3D=this.atoms_materialAmbientColor_3D;}else if(representation==='Wireframe'){this.atoms_useVDWDiameters_3D=false;this.bonds_cylinderDiameter_3D=this.bonds_pillDiameter_3D=.05;this.atoms_sphereDiameter_3D=.15;this.bonds_materialAmbientColor_3D=c.default_atoms_materialAmbientColor_3D;}else if(representation==='Line'){this.atoms_display=false;this.bonds_renderAsLines_3D=true;this.bonds_width_2D=1;this.bonds_cylinderDiameter_3D=.05;}else{alert('\"'+representation+'\" is not recognized. Use one of the following strings:\\n\\n'+'1. Ball and Stick\\n'+'2. van der Waals Spheres\\n'+'3. Stick\\n'+'4. Wireframe\\n'+'5. Line\\n');}};_.copy=function(){var copy=JSON.parse(JSON.stringify(this));copy.set3DRepresentation=_.set3DRepresentation;return copy;};})(ChemDoodle,ChemDoodle.structures,Math,JSON);(function(c,ELEMENT,informatics,structures,undefined){'use strict';informatics.getPointsPerAngstrom=function(){return c.default_bondLength_2D/c.default_angstromsPerBondLength;};informatics.BondDeducer=function(){};var _=informatics.BondDeducer.prototype;_.margin=1.1;_.deduceCovalentBonds=function(molecule,customPointsPerAngstrom){var pointsPerAngstrom=informatics.getPointsPerAngstrom();if(customPointsPerAngstrom){pointsPerAngstrom=customPointsPerAngstrom;}for(var i=0,ii=molecule.atoms.length;i<ii;i++){for(var j=i+1;j<ii;j++){var first=molecule.atoms[i];var second=molecule.atoms[j];if(first.distance3D(second)<(ELEMENT[first.label].covalentRadius+ELEMENT[second.label].covalentRadius)*pointsPerAngstrom*this.margin){molecule.bonds.push(new structures.Bond(first,second,1));}}}};})(ChemDoodle,ChemDoodle.ELEMENT,ChemDoodle.informatics,ChemDoodle.structures);(function(informatics,structures,undefined){'use strict';informatics.HydrogenDeducer=function(){};var _=informatics.HydrogenDeducer.prototype;_.removeHydrogens=function(molecule,removeStereo){var atoms=[];var bonds=[];for(var i=0,ii=molecule.bonds.length;i<ii;i++){var b=molecule.bonds[i];var save=b.a1.label!=='H'&&b.a2.label!=='H';if(!save&&!removeStereo&&b.stereo!==structures.Bond.STEREO_NONE){save=true;}if(save){b.a1.tag=true;bonds.push(b);}else{if(b.a1.label==='H'){b.a1.remove=true;}if(b.a2.label==='H'){b.a2.remove=true;}}}for(var i=0,ii=molecule.atoms.length;i<ii;i++){var a=molecule.atoms[i];if(a.remove){a.remove=undefined;}else{atoms.push(a);}}molecule.atoms=atoms;molecule.bonds=bonds;};})(ChemDoodle.informatics,ChemDoodle.structures);(function(informatics,structures,undefined){'use strict';informatics.Splitter=function(){};var _=informatics.Splitter.prototype;_.split=function(molecule){var mols=[];for(var i=0,ii=molecule.atoms.length;i<ii;i++){molecule.atoms[i].visited=false;}for(var i=0,ii=molecule.bonds.length;i<ii;i++){molecule.bonds[i].visited=false;}for(var i=0,ii=molecule.atoms.length;i<ii;i++){var a=molecule.atoms[i];if(!a.visited){var newMol=new structures.Molecule();newMol.atoms.push(a);a.visited=true;var q=new structures.Queue();q.enqueue(a);while(!q.isEmpty()){var atom=q.dequeue();for(var j=0,jj=molecule.bonds.length;j<jj;j++){var b=molecule.bonds[j];if(b.contains(atom)&&!b.visited){b.visited=true;newMol.bonds.push(b);var neigh=b.getNeighbor(atom);if(!neigh.visited){neigh.visited=true;newMol.atoms.push(neigh);q.enqueue(neigh);}}}}mols.push(newMol);}}return mols;};})(ChemDoodle.informatics,ChemDoodle.structures);(function(informatics,io,structures,undefined){'use strict';informatics.StructureBuilder=function(){};var _=informatics.StructureBuilder.prototype;_.copy=function(molecule){var json=new io.JSONInterpreter();return json.molFrom(json.molTo(molecule));};})(ChemDoodle.informatics,ChemDoodle.io,ChemDoodle.structures);(function(informatics,undefined){'use strict';informatics._Counter=function(){};var _=informatics._Counter.prototype;_.value=0;_.molecule=undefined;_.setMolecule=function(molecule){this.value=0;this.molecule=molecule;if(this.innerCalculate){this.innerCalculate();}};})(ChemDoodle.informatics);(function(informatics,undefined){'use strict';informatics.FrerejacqueNumberCounter=function(molecule){this.setMolecule(molecule);};var _=informatics.FrerejacqueNumberCounter.prototype=new informatics._Counter();_.innerCalculate=function(){this.value=this.molecule.bonds.length-this.molecule.atoms.length+new informatics.NumberOfMoleculesCounter(this.molecule).value;};})(ChemDoodle.informatics);(function(structures,informatics,undefined){'use strict';informatics.NumberOfMoleculesCounter=function(molecule){this.setMolecule(molecule);};var _=informatics.NumberOfMoleculesCounter.prototype=new informatics._Counter();_.innerCalculate=function(){for(var i=0,ii=this.molecule.atoms.length;i<ii;i++){this.molecule.atoms[i].visited=false;}for(var i=0,ii=this.molecule.atoms.length;i<ii;i++){if(!this.molecule.atoms[i].visited){this.value++;var q=new structures.Queue();this.molecule.atoms[i].visited=true;q.enqueue(this.molecule.atoms[i]);while(!q.isEmpty()){var atom=q.dequeue();for(var j=0,jj=this.molecule.bonds.length;j<jj;j++){var b=this.molecule.bonds[j];if(b.contains(atom)){var neigh=b.getNeighbor(atom);if(!neigh.visited){neigh.visited=true;q.enqueue(neigh);}}}}}}};})(ChemDoodle.structures,ChemDoodle.informatics);(function(informatics,undefined){'use strict';informatics._RingFinder=function(){};var _=informatics._RingFinder.prototype;_.atoms=undefined;_.bonds=undefined;_.rings=undefined;_.reduce=function(molecule){for(var i=0,ii=molecule.atoms.length;i<ii;i++){molecule.atoms[i].visited=false;}for(var i=0,ii=molecule.bonds.length;i<ii;i++){molecule.bonds[i].visited=false;}var cont=true;while(cont){cont=false;for(var i=0,ii=molecule.atoms.length;i<ii;i++){var count=0;var bond;for(var j=0,jj=molecule.bonds.length;j<jj;j++){if(molecule.bonds[j].contains(molecule.atoms[i])&&!molecule.bonds[j].visited){count++;if(count===2){break;}bond=molecule.bonds[j];}}if(count===1){cont=true;bond.visited=true;molecule.atoms[i].visited=true;}}}for(var i=0,ii=molecule.atoms.length;i<ii;i++){if(!molecule.atoms[i].visited){this.atoms.push(molecule.atoms[i]);}}for(var i=0,ii=molecule.bonds.length;i<ii;i++){if(!molecule.bonds[i].visited){this.bonds.push(molecule.bonds[i]);}}if(this.bonds.length===0&&this.atoms.length!==0){this.atoms=[];}};_.setMolecule=function(molecule){this.atoms=[];this.bonds=[];this.rings=[];this.reduce(molecule);if(this.atoms.length>2&&this.innerGetRings){this.innerGetRings();}};_.fuse=function(){for(var i=0,ii=this.rings.length;i<ii;i++){for(var j=0,jj=this.bonds.length;j<jj;j++){if(this.rings[i].atoms.indexOf(this.bonds[j].a1)!==-1&&this.rings[i].atoms.indexOf(this.bonds[j].a2)!==-1){this.rings[i].bonds.push(this.bonds[j]);}}}};})(ChemDoodle.informatics);(function(informatics,structures,undefined){'use strict';function Finger(a,from){this.atoms=[];if(from){for(var i=0,ii=from.atoms.length;i<ii;i++){this.atoms[i]=from.atoms[i];}}this.atoms.push(a);}var _2=Finger.prototype;_2.grow=function(bonds,blockers){var last=this.atoms[this.atoms.length-1];var neighs=[];for(var i=0,ii=bonds.length;i<ii;i++){if(bonds[i].contains(last)){var neigh=bonds[i].getNeighbor(last);if(blockers.indexOf(neigh)===-1){neighs.push(neigh);}}}var returning=[];for(var i=0,ii=neighs.length;i<ii;i++){returning.push(new Finger(neighs[i],this));}return returning;};_2.check=function(bonds,finger,a){// check that they dont contain similar parts\nfor(var i=0,ii=finger.atoms.length-1;i<ii;i++){if(this.atoms.indexOf(finger.atoms[i])!==-1){return undefined;}}var ring;// check if fingers meet at tips\nif(finger.atoms[finger.atoms.length-1]===this.atoms[this.atoms.length-1]){ring=new structures.Ring();ring.atoms[0]=a;for(var i=0,ii=this.atoms.length;i<ii;i++){ring.atoms.push(this.atoms[i]);}for(var i=finger.atoms.length-2;i>=0;i--){ring.atoms.push(finger.atoms[i]);}}else{// check if fingers meet at bond\nvar endbonds=[];for(var i=0,ii=bonds.length;i<ii;i++){if(bonds[i].contains(finger.atoms[finger.atoms.length-1])){endbonds.push(bonds[i]);}}for(var i=0,ii=endbonds.length;i<ii;i++){if((finger.atoms.length===1||!endbonds[i].contains(finger.atoms[finger.atoms.length-2]))&&endbonds[i].contains(this.atoms[this.atoms.length-1])){ring=new structures.Ring();ring.atoms[0]=a;for(var j=0,jj=this.atoms.length;j<jj;j++){ring.atoms.push(this.atoms[j]);}for(var j=finger.atoms.length-1;j>=0;j--){ring.atoms.push(finger.atoms[j]);}break;}}}return ring;};informatics.EulerFacetRingFinder=function(molecule){this.setMolecule(molecule);};var _=informatics.EulerFacetRingFinder.prototype=new informatics._RingFinder();_.fingerBreak=5;_.innerGetRings=function(){for(var i=0,ii=this.atoms.length;i<ii;i++){var neigh=[];for(var j=0,jj=this.bonds.length;j<jj;j++){if(this.bonds[j].contains(this.atoms[i])){neigh.push(this.bonds[j].getNeighbor(this.atoms[i]));}}for(var j=0,jj=neigh.length;j<jj;j++){// weird that i can't optimize this loop without breaking a test\n// case...\nfor(var k=j+1;k<neigh.length;k++){var fingers=[];fingers[0]=new Finger(neigh[j]);fingers[1]=new Finger(neigh[k]);var blockers=[];blockers[0]=this.atoms[i];for(var l=0,ll=neigh.length;l<ll;l++){if(l!==j&&l!==k){blockers.push(neigh[l]);}}var found=[];// check for 3 membered ring\nvar three=fingers[0].check(this.bonds,fingers[1],this.atoms[i]);if(three){found[0]=three;}while(found.length===0&&fingers.length>0&&fingers[0].atoms.length<this.fingerBreak){var newfingers=[];for(var l=0,ll=fingers.length;l<ll;l++){var adding=fingers[l].grow(this.bonds,blockers);for(var m=0,mm=adding.length;m<mm;m++){newfingers.push(adding[m]);}}fingers=newfingers;for(var l=0,ll=fingers.length;l<ll;l++){for(var m=l+1;m<ll;m++){var r=fingers[l].check(this.bonds,fingers[m],this.atoms[i]);if(r){found.push(r);}}}if(found.length===0){var newBlockers=[];for(var l=0,ll=blockers.length;l<ll;l++){for(var m=0,mm=this.bonds.length;m<mm;m++){if(this.bonds[m].contains(blockers[l])){var neigh=this.bonds[m].getNeighbor(blockers[l]);if(blockers.indexOf(neigh)===-1&&newBlockers.indexOf(neigh)===-1){newBlockers.push(neigh);}}}}for(var l=0,ll=newBlockers.length;l<ll;l++){blockers.push(newBlockers[l]);}}}if(found.length>0){// this undefined is required...weird, don't know why\nvar use=undefined;for(var l=0,ll=found.length;l<ll;l++){if(!use||use.atoms.length>found[l].atoms.length){use=found[l];}}var already=false;for(var l=0,ll=this.rings.length;l<ll;l++){var all=true;for(var m=0,mm=use.atoms.length;m<mm;m++){if(this.rings[l].atoms.indexOf(use.atoms[m])===-1){all=false;break;}}if(all){already=true;break;}}if(!already){this.rings.push(use);}}}}}this.fuse();};})(ChemDoodle.informatics,ChemDoodle.structures);(function(informatics,undefined){'use strict';informatics.SSSRFinder=function(molecule){this.rings=[];if(molecule.atoms.length>0){var frerejacqueNumber=new informatics.FrerejacqueNumberCounter(molecule).value;var all=new informatics.EulerFacetRingFinder(molecule).rings;all.sort(function(a,b){return a.atoms.length-b.atoms.length;});for(var i=0,ii=molecule.bonds.length;i<ii;i++){molecule.bonds[i].visited=false;}for(var i=0,ii=all.length;i<ii;i++){var use=false;for(var j=0,jj=all[i].bonds.length;j<jj;j++){if(!all[i].bonds[j].visited){use=true;break;}}if(use){for(var j=0,jj=all[i].bonds.length;j<jj;j++){all[i].bonds[j].visited=true;}this.rings.push(all[i]);}if(this.rings.length===frerejacqueNumber){break;}}}};})(ChemDoodle.informatics);(function(io,undefined){'use strict';io._Interpreter=function(){};var _=io._Interpreter.prototype;_.fit=function(data,length,leftAlign){var size=data.length;var padding=[];for(var i=0;i<length-size;i++){padding.push(' ');}return leftAlign?data+padding.join(''):padding.join('')+data;};})(ChemDoodle.io);(function(c,extensions,io,structures,d3,m,m4,v3,undefined){'use strict';var whitespaceRegex=/\\s+/g;var whitespaceAndParenthesisRegex=/\\(|\\)|\\s+/g;var whitespaceAndQuoteRegex=/\\'|\\s+/g;var whitespaceAndQuoteAndCommaRegex=/,|\\'|\\s+/g;var leadingWhitespaceRegex=/^\\s+/;var digitsRegex=/[0-9]/g;var digitsSymbolRegex=/[0-9]|\\+|\\-/g;var filter=function filter(s){return s.length!==0;};var hallTranslations={'P':[],'A':[[0,.5,.5]],'B':[[.5,0,.5]],'C':[[.5,.5,0]],'I':[[.5,.5,.5]],'R':[[2/3,1/3,1/3],[1/3,2/3,2/3]],'S':[[1/3,1/3,2/3],[2/3,2/3,1/3]],'T':[[1/3,2/3,1/3],[2/3,1/3,2/3]],'F':[[0,.5,.5],[.5,0,.5],[.5,.5,0]]};var parseTransform=function parseTransform(s){var displacement=0;var x=0,y=0,z=0;var indexx=s.indexOf('x');var indexy=s.indexOf('y');var indexz=s.indexOf('z');if(indexx!==-1){x++;if(indexx>0&&s.charAt(indexx-1)!=='+'){x*=-1;}}if(indexy!==-1){y++;if(indexy>0&&s.charAt(indexy-1)!=='+'){y*=-1;}}if(indexz!==-1){z++;if(indexz>0&&s.charAt(indexz-1)!=='+'){z*=-1;}}if(s.length>2){var op='+';for(var i=0,ii=s.length;i<ii;i++){var l=s.charAt(i);if((l==='-'||l==='/')&&(i===s.length-1||s.charAt(i+1).match(digitsRegex))){op=l;}if(l.match(digitsRegex)){if(op==='+'){displacement+=parseInt(l);}else if(op==='-'){displacement-=parseInt(l);}else if(op==='/'){displacement/=parseInt(l);}}}}return[displacement,x,y,z];};var generateABC2XYZ=function generateABC2XYZ(a,b,c,alpha,beta,gamma){var d=(m.cos(alpha)-m.cos(gamma)*m.cos(beta))/m.sin(gamma);return[a,0,0,0,b*m.cos(gamma),b*m.sin(gamma),0,0,c*m.cos(beta),c*d,c*m.sqrt(1-m.pow(m.cos(beta),2)-d*d),0,0,0,0,1];};io.CIFInterpreter=function(){};var _=io.CIFInterpreter.prototype=new io._Interpreter();_.read=function(content,xSuper,ySuper,zSuper){xSuper=xSuper?xSuper:1;ySuper=ySuper?ySuper:1;zSuper=zSuper?zSuper:1;var molecule=new structures.Molecule();if(!content){return molecule;}var lines=content.split('\\n');var aLength=0,bLength=0,cLength=0,alphaAngle=0,betaAngle=0,gammaAngle=0;var hallClass='P';var transformLoop;var atomLoop;var bondLoop;var line;var shift=true;while(lines.length>0){if(shift){line=lines.shift();}else{shift=true;}if(line.length>0){if(extensions.stringStartsWith(line,'_cell_length_a')){aLength=parseFloat(line.split(whitespaceAndParenthesisRegex)[1]);}else if(extensions.stringStartsWith(line,'_cell_length_b')){bLength=parseFloat(line.split(whitespaceAndParenthesisRegex)[1]);}else if(extensions.stringStartsWith(line,'_cell_length_c')){cLength=parseFloat(line.split(whitespaceAndParenthesisRegex)[1]);}else if(extensions.stringStartsWith(line,'_cell_angle_alpha')){alphaAngle=m.PI*parseFloat(line.split(whitespaceAndParenthesisRegex)[1])/180;}else if(extensions.stringStartsWith(line,'_cell_angle_beta')){betaAngle=m.PI*parseFloat(line.split(whitespaceAndParenthesisRegex)[1])/180;}else if(extensions.stringStartsWith(line,'_cell_angle_gamma')){gammaAngle=m.PI*parseFloat(line.split(whitespaceAndParenthesisRegex)[1])/180;}else if(extensions.stringStartsWith(line,'_symmetry_space_group_name_H-M')){hallClass=line.split(whitespaceAndQuoteRegex)[1];}else if(extensions.stringStartsWith(line,'loop_')){var loop={fields:[],lines:[]};var pushingLines=false;// keep undefined check here because the line may be an\n// empty string\nwhile((line=lines.shift())!==undefined&&!extensions.stringStartsWith(line=line.replace(leadingWhitespaceRegex,''),'loop_')&&line.length>0){// remove leading whitespace that may appear in\n// subloop lines ^\nif(extensions.stringStartsWith(line,'_')){if(pushingLines){break;}loop.fields=loop.fields.concat(line.split(whitespaceRegex).filter(filter));}else{pushingLines=true;loop.lines.push(line);}}if(lines.length!==0&&(extensions.stringStartsWith(line,'loop_')||extensions.stringStartsWith(line,'_'))){shift=false;}if(loop.fields.indexOf('_symmetry_equiv_pos_as_xyz')!==-1||loop.fields.indexOf('_space_group_symop_operation_xyz')!==-1){transformLoop=loop;}else if(loop.fields.indexOf('_atom_site_label')!==-1){atomLoop=loop;}else if(loop.fields.indexOf('_geom_bond_atom_site_label_1')!==-1){bondLoop=loop;}}}}var abc2xyz=generateABC2XYZ(aLength,bLength,cLength,alphaAngle,betaAngle,gammaAngle);// internal atom coordinates\nif(atomLoop){var labelIndex=-1,altLabelIndex=-1,xIndex=-1,yIndex=-1,zIndex=-1;for(var i=0,ii=atomLoop.fields.length;i<ii;i++){var field=atomLoop.fields[i];if(field==='_atom_site_type_symbol'){labelIndex=i;}else if(field==='_atom_site_label'){altLabelIndex=i;}else if(field==='_atom_site_fract_x'){xIndex=i;}else if(field==='_atom_site_fract_y'){yIndex=i;}else if(field==='_atom_site_fract_z'){zIndex=i;}}for(var i=0,ii=atomLoop.lines.length;i<ii;i++){line=atomLoop.lines[i];var tokens=line.split(whitespaceRegex).filter(filter);var a=new structures.Atom(tokens[labelIndex===-1?altLabelIndex:labelIndex].split(digitsSymbolRegex)[0],parseFloat(tokens[xIndex]),parseFloat(tokens[yIndex]),parseFloat(tokens[zIndex]));molecule.atoms.push(a);if(altLabelIndex!==-1){a.cifId=tokens[altLabelIndex];a.cifPart=0;}}}// transforms, unless bonds are specified\nif(transformLoop&&!bondLoop){// assume the index is 0, just incase a different identifier is\n// used\nvar symIndex=0;for(var i=0,ii=transformLoop.fields.length;i<ii;i++){var field=transformLoop.fields[i];if(field==='_symmetry_equiv_pos_as_xyz'||field==='_space_group_symop_operation_xyz'){symIndex=i;}}var impliedTranslations=hallTranslations[hallClass];var add=[];for(var i=0,ii=transformLoop.lines.length;i<ii;i++){var parts=transformLoop.lines[i].split(whitespaceAndQuoteAndCommaRegex).filter(filter);var multx=parseTransform(parts[symIndex]);var multy=parseTransform(parts[symIndex+1]);var multz=parseTransform(parts[symIndex+2]);for(var j=0,jj=molecule.atoms.length;j<jj;j++){var a=molecule.atoms[j];var x=a.x*multx[1]+a.y*multx[2]+a.z*multx[3]+multx[0];var y=a.x*multy[1]+a.y*multy[2]+a.z*multy[3]+multy[0];var z=a.x*multz[1]+a.y*multz[2]+a.z*multz[3]+multz[0];var copy1=new structures.Atom(a.label,x,y,z);add.push(copy1);// cifID could be 0, so check for undefined\nif(a.cifId!==undefined){copy1.cifId=a.cifId;copy1.cifPart=i+1;}if(impliedTranslations){for(var k=0,kk=impliedTranslations.length;k<kk;k++){var trans=impliedTranslations[k];var copy2=new structures.Atom(a.label,x+trans[0],y+trans[1],z+trans[2]);add.push(copy2);// cifID could be 0, so check for undefined\nif(a.cifId!==undefined){copy2.cifId=a.cifId;copy2.cifPart=i+1;}}}}}// make sure all atoms are within the unit cell\nfor(var i=0,ii=add.length;i<ii;i++){var a=add[i];while(a.x>=1){a.x--;}while(a.x<0){a.x++;}while(a.y>=1){a.y--;}while(a.y<0){a.y++;}while(a.z>=1){a.z--;}while(a.z<0){a.z++;}}// remove overlaps\nvar noOverlaps=[];for(var i=0,ii=add.length;i<ii;i++){var overlap=false;var a=add[i];for(var j=0,jj=molecule.atoms.length;j<jj;j++){if(molecule.atoms[j].distance3D(a)<.0001){overlap=true;break;}}if(!overlap){for(var j=0,jj=noOverlaps.length;j<jj;j++){if(noOverlaps[j].distance3D(a)<.0001){overlap=true;break;}}if(!overlap){noOverlaps.push(a);}}}// concat arrays\nmolecule.atoms=molecule.atoms.concat(noOverlaps);}// build super cell\nvar extras=[];for(var i=0;i<xSuper;i++){for(var j=0;j<ySuper;j++){for(var k=0;k<zSuper;k++){if(!(i===0&&j===0&&k===0)){for(var l=0,ll=molecule.atoms.length;l<ll;l++){var a=molecule.atoms[l];var copy=new structures.Atom(a.label,a.x+i,a.y+j,a.z+k);extras.push(copy);// cifID could be 0, so check for undefined\nif(a.cifId!==undefined){copy.cifId=a.cifId;copy.cifPart=a.cifPart+(transformLoop?transformLoop.lines.length:0)+i+j*10+k*100;}}}}}}molecule.atoms=molecule.atoms.concat(extras);// convert to xyz\nfor(var i=0,ii=molecule.atoms.length;i<ii;i++){var a=molecule.atoms[i];var xyz=m4.multiplyVec3(abc2xyz,[a.x,a.y,a.z]);a.x=xyz[0];a.y=xyz[1];a.z=xyz[2];}// handle bonds\nif(bondLoop){var atom1=-1,atom2=-1;for(var i=0,ii=bondLoop.fields.length;i<ii;i++){var field=bondLoop.fields[i];if(field==='_geom_bond_atom_site_label_1'){atom1=i;}else if(field==='_geom_bond_atom_site_label_2'){atom2=i;}}for(var k=0,kk=bondLoop.lines.length;k<kk;k++){var tokens=bondLoop.lines[k].split(whitespaceRegex).filter(filter);var id1=tokens[atom1];var id2=tokens[atom2];for(var i=0,ii=molecule.atoms.length;i<ii;i++){for(var j=i+1;j<ii;j++){var ai=molecule.atoms[i];var aj=molecule.atoms[j];if(ai.cifPart!==aj.cifPart){break;}if(ai.cifId===id1&&aj.cifId===id2||ai.cifId===id2&&aj.cifId===id1){molecule.bonds.push(new structures.Bond(ai,aj));}}}}}else{new c.informatics.BondDeducer().deduceCovalentBonds(molecule,1);}// generate unit cell\nvar o=[-xSuper/2,-ySuper/2,-zSuper/2];var unitCellVectors={o:m4.multiplyVec3(abc2xyz,o,[]),x:m4.multiplyVec3(abc2xyz,[o[0]+1,o[1],o[2]]),y:m4.multiplyVec3(abc2xyz,[o[0],o[1]+1,o[2]]),z:m4.multiplyVec3(abc2xyz,[o[0],o[1],o[2]+1]),xy:m4.multiplyVec3(abc2xyz,[o[0]+1,o[1]+1,o[2]]),xz:m4.multiplyVec3(abc2xyz,[o[0]+1,o[1],o[2]+1]),yz:m4.multiplyVec3(abc2xyz,[o[0],o[1]+1,o[2]+1]),xyz:m4.multiplyVec3(abc2xyz,[o[0]+1,o[1]+1,o[2]+1])};return{molecule:molecule,unitCell:new d3.UnitCell(unitCellVectors)};};// shortcuts\nvar interpreter=new io.CIFInterpreter();c.readCIF=function(content,xSuper,ySuper,zSuper){return interpreter.read(content,xSuper,ySuper,zSuper);};})(ChemDoodle,ChemDoodle.extensions,ChemDoodle.io,ChemDoodle.structures,ChemDoodle.structures.d3,Math,ChemDoodle.lib.mat4,ChemDoodle.lib.vec3);(function(c,io,structures,q,undefined){'use strict';io.CMLInterpreter=function(){};var _=io.CMLInterpreter.prototype=new io._Interpreter();_.read=function(content){var molecules=[];var xml=q.parseXML(content);// Possible for multiple CML tags to exist\nvar allCml=q(xml).find('cml');for(var i=0,ii=allCml.length;i<ii;i++){var allMolecules=q(allCml[i]).find('molecule');for(var j=0,jj=allMolecules.length;j<jj;j++){var currentMolecule=molecules[j]=new structures.Molecule();var idmap=[];// Don't even bother with atomArrays, there's no point.\nvar cmlAtoms=q(allMolecules[j]).find('atom');for(var k=0,kk=cmlAtoms.length;k<kk;k++){var currentCMLAtom=q(cmlAtoms[k]);var label=currentCMLAtom.attr('elementType');var x,y,z,currentAtom;if(currentCMLAtom.attr('x2')==undefined){x=currentCMLAtom.attr('x3');y=currentCMLAtom.attr('y3');z=currentCMLAtom.attr('z3');}else{x=currentCMLAtom.attr('x2');y=currentCMLAtom.attr('y2');z=0;}currentAtom=molecules[j].atoms[k]=new structures.Atom(label,x,y,z);idmap[k]=currentCMLAtom.attr('id');// charge\nif(currentCMLAtom.attr('formalCharge')!=undefined){currentAtom.charge=currentCMLAtom.attr('formalCharge');}}var cmlBonds=q(allMolecules[j]).find('bond');for(var k=0,kk=cmlBonds.length;k<kk;k++){var currentCMLBond=q(cmlBonds[k]);var atomRefs2=currentCMLBond.attr('atomRefs2').split(' ');var a1,a2,order;a1=currentMolecule.atoms[q.inArray(atomRefs2[0],idmap)];a2=currentMolecule.atoms[q.inArray(atomRefs2[1],idmap)];switch(currentCMLBond.attr('order')){case'2':case'D':order=2;break;case'3':case'T':order=3;break;case'A':order=1.5;break;default:order=1;}var currentBond=molecules[j].bonds[k]=new structures.Bond(a1,a2,order);// check stereo... only support W or H\nswitch(currentCMLBond.find('bondStereo').text()){case'W':currentBond.stereo=structures.Bond.STEREO_PROTRUDING;break;case'H':currentBond.stereo=structures.Bond.STEREO_RECESSED;break;}}}}return molecules;};_.write=function(molecules){var sb=[];sb.push('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n');sb.push('<cml convention=\"conventions:molecular\" xmlns=\"http://www.xml-cml.org/schema\" xmlns:conventions=\"http://www.xml-cml.org/convention/\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\\n');// TODO: Metadata\nfor(var i=0,ii=molecules.length;i<ii;i++){sb.push('<molecule id=\"m');sb.push(i);sb.push('\">');sb.push('<atomArray>');for(var j=0,jj=molecules[i].atoms.length;j<jj;j++){var currentAtom=molecules[i].atoms[j];sb.push('<atom elementType=\"');sb.push(currentAtom.label);sb.push('\" id=\"a');sb.push(j);sb.push('\" ');// Always do 3D coordinates, unless there is a fancy reliable way to tell if the molecule is 2D.\nsb.push('x3=\"');sb.push(currentAtom.x);sb.push('\" y3=\"');sb.push(currentAtom.y);sb.push('\" z3=\"');sb.push(currentAtom.z);sb.push('\" ');if(currentAtom.charge!=0){sb.push('formalCharge=\"');sb.push(currentAtom.charge);sb.push('\" ');}sb.push('/>');}sb.push('</atomArray>');sb.push('<bondArray>');for(var j=0,jj=molecules[i].bonds.length;j<jj;j++){var currentBond=molecules[i].bonds[j];sb.push('<bond atomRefs2=\"a');sb.push(molecules[i].atoms.indexOf(currentBond.a1));sb.push(' a');sb.push(molecules[i].atoms.indexOf(currentBond.a2));sb.push('\" order=\"');switch(currentBond.bondOrder){case 1.5:sb.push('A');break;case 1:case 2:case 3:sb.push(currentBond.bondOrder);break;case 0.5:default:sb.push('S');break;}sb.push('\"/>');}sb.push('</bondArray>');sb.push('</molecule>');}sb.push('</cml>');return sb.join('');};// shortcuts\nvar interpreter=new io.CMLInterpreter();c.readCML=function(content){return interpreter.read(content);};c.writeCML=function(molecules){return interpreter.write(molecules);};})(ChemDoodle,ChemDoodle.io,ChemDoodle.structures,ChemDoodle.lib.jQuery);(function(c,ELEMENT,io,structures,undefined){'use strict';io.MOLInterpreter=function(){};var _=io.MOLInterpreter.prototype=new io._Interpreter();_.read=function(content,multiplier){if(!multiplier){multiplier=c.default_bondLength_2D;}var molecule=new structures.Molecule();if(!content){return molecule;}var currentTagTokens=content.split('\\n');var counts=currentTagTokens[3];var numAtoms=parseInt(counts.substring(0,3));var numBonds=parseInt(counts.substring(3,6));for(var i=0;i<numAtoms;i++){var line=currentTagTokens[4+i];molecule.atoms[i]=new structures.Atom(line.substring(31,34),parseFloat(line.substring(0,10))*multiplier,(multiplier===1?1:-1)*parseFloat(line.substring(10,20))*multiplier,parseFloat(line.substring(20,30))*multiplier);var massDif=parseInt(line.substring(34,36));if(massDif!==0&&ELEMENT[molecule.atoms[i].label]){molecule.atoms[i].mass=ELEMENT[molecule.atoms[i].label].mass+massDif;}switch(parseInt(line.substring(36,39))){case 1:molecule.atoms[i].charge=3;break;case 2:molecule.atoms[i].charge=2;break;case 3:molecule.atoms[i].charge=1;break;case 5:molecule.atoms[i].charge=-1;break;case 6:molecule.atoms[i].charge=-2;break;case 7:molecule.atoms[i].charge=-3;break;}}for(var i=0;i<numBonds;i++){var line=currentTagTokens[4+numAtoms+i];var bondOrder=parseInt(line.substring(6,9));var stereo=parseInt(line.substring(9,12));if(bondOrder>3){switch(bondOrder){case 4:bondOrder=1.5;break;default:bondOrder=1;break;}}var b=new structures.Bond(molecule.atoms[parseInt(line.substring(0,3))-1],molecule.atoms[parseInt(line.substring(3,6))-1],bondOrder);switch(stereo){case 3:b.stereo=structures.Bond.STEREO_AMBIGUOUS;break;case 1:b.stereo=structures.Bond.STEREO_PROTRUDING;break;case 6:b.stereo=structures.Bond.STEREO_RECESSED;break;}molecule.bonds[i]=b;}return molecule;};_.write=function(molecule){var sb=[];sb.push('Molecule from ChemDoodle Web Components\\n\\nhttp://www.ichemlabs.com\\n');sb.push(this.fit(molecule.atoms.length.toString(),3));sb.push(this.fit(molecule.bonds.length.toString(),3));sb.push('  0  0  0  0            999 V2000\\n');var p=molecule.getCenter();for(var i=0,ii=molecule.atoms.length;i<ii;i++){var a=molecule.atoms[i];var mass=' 0';if(a.mass!==-1&&ELEMENT[a.label]){var dif=a.mass-ELEMENT[a.label].mass;if(dif<5&&dif>-4){mass=(dif>-1?' ':'')+dif;}}var charge='  0';if(a.charge!==0){switch(a.charge){case 3:charge='  1';break;case 2:charge='  2';break;case 1:charge='  3';break;case-1:charge='  5';break;case-2:charge='  6';break;case-3:charge='  7';break;}}sb.push(this.fit(((a.x-p.x)/c.default_bondLength_2D).toFixed(4),10));sb.push(this.fit((-(a.y-p.y)/c.default_bondLength_2D).toFixed(4),10));sb.push(this.fit((a.z/c.default_bondLength_2D).toFixed(4),10));sb.push(' ');sb.push(this.fit(a.label,3,true));sb.push(mass);sb.push(charge);sb.push('  0  0  0  0\\n');}for(var i=0,ii=molecule.bonds.length;i<ii;i++){var b=molecule.bonds[i];var stereo=0;if(b.stereo===structures.Bond.STEREO_AMBIGUOUS){stereo=3;}else if(b.stereo===structures.Bond.STEREO_PROTRUDING){stereo=1;}else if(b.stereo===structures.Bond.STEREO_RECESSED){stereo=6;}sb.push(this.fit((molecule.atoms.indexOf(b.a1)+1).toString(),3));sb.push(this.fit((molecule.atoms.indexOf(b.a2)+1).toString(),3));var btype=b.bondOrder;if(btype==1.5){btype=4;}else if(btype>3||btype%1!=0){btype=1;}sb.push(this.fit(btype.toString(),3));sb.push('  ');sb.push(stereo);sb.push('  0  0  0\\n');}sb.push('M  END');return sb.join('');};// shortcuts\nvar interpreter=new io.MOLInterpreter();c.readMOL=function(content,multiplier){return interpreter.read(content,multiplier);};c.writeMOL=function(mol){return interpreter.write(mol);};})(ChemDoodle,ChemDoodle.ELEMENT,ChemDoodle.io,ChemDoodle.structures);(function(c,extensions,io,structures,ELEMENT,trim,m,undefined){'use strict';function checkContained(residue,set,chainID,index,helix){for(var j=0,jj=set.length;j<jj;j++){var check=set[j];if(check.id===chainID&&index>=check.start&&index<=check.end){if(helix){residue.helix=true;}else{residue.sheet=true;}if(index===check.end){residue.arrow=true;}return;}}}io.PDBInterpreter=function(){};var _=io.PDBInterpreter.prototype=new io._Interpreter();_.calculateRibbonDistances=false;_.deduceResidueBonds=false;_.read=function(content,multiplier){var molecule=new structures.Molecule();molecule.chains=[];if(!content){return molecule;}var currentTagTokens=content.split('\\n');if(!multiplier){multiplier=1;}var helices=[];var sheets=[];var lastC;var currentChain=[];var resatoms=[];var atomSerials=[];for(var i=0,ii=currentTagTokens.length;i<ii;i++){var line=currentTagTokens[i];if(extensions.stringStartsWith(line,'HELIX')){helices.push({id:line.substring(19,20),start:parseInt(line.substring(21,25)),end:parseInt(line.substring(33,37))});}else if(extensions.stringStartsWith(line,'SHEET')){sheets.push({id:line.substring(21,22),start:parseInt(line.substring(22,26)),end:parseInt(line.substring(33,37))});}else if(extensions.stringStartsWith(line,'ATOM')){var altLoc=line.substring(16,17);if(altLoc===' '||altLoc==='A'){var label=trim(line.substring(76,78));if(label.length===0){var s=trim(line.substring(12,14));if(s==='HD'){label='H';}else if(s.length>0){if(s.length>1){label=s.charAt(0)+s.substring(1).toLowerCase();}else{label=s;}}}var a=new structures.Atom(label,parseFloat(line.substring(30,38))*multiplier,parseFloat(line.substring(38,46))*multiplier,parseFloat(line.substring(46,54))*multiplier);a.hetatm=false;resatoms.push(a);// set up residue\nvar resSeq=parseInt(line.substring(22,26));if(currentChain.length===0){for(var j=0;j<3;j++){var dummyFront=new structures.Residue(-1);dummyFront.cp1=a;dummyFront.cp2=a;currentChain.push(dummyFront);}}if(resSeq!==Number.NaN&&currentChain[currentChain.length-1].resSeq!==resSeq){var r=new structures.Residue(resSeq);r.name=trim(line.substring(17,20));if(r.name.length===3){r.name=r.name.substring(0,1)+r.name.substring(1).toLowerCase();}else{if(r.name.length===2&&r.name.charAt(0)==='D'){r.name=r.name.substring(1);}}currentChain.push(r);var chainID=line.substring(21,22);checkContained(r,helices,chainID,resSeq,true);checkContained(r,sheets,chainID,resSeq,false);}// end residue setup\nvar atomName=trim(line.substring(12,16));var currentResidue=currentChain[currentChain.length-1];if(atomName==='CA'||atomName==='P'||atomName==='O5\\''){if(!currentResidue.cp1){currentResidue.cp1=a;}}else if(atomName==='N3'&&(currentResidue.name==='C'||currentResidue.name==='U'||currentResidue.name==='T')||atomName==='N1'&&(currentResidue.name==='A'||currentResidue.name==='G')){// control points for base platform direction\ncurrentResidue.cp3=a;}else if(atomName==='C2'){// control points for base platform orientation\ncurrentResidue.cp4=a;}else if(atomName==='C4'&&(currentResidue.name==='C'||currentResidue.name==='U'||currentResidue.name==='T')||atomName==='C6'&&(currentResidue.name==='A'||currentResidue.name==='G')){// control points for base platform orientation\ncurrentResidue.cp5=a;}else if(atomName==='O'||atomName==='C6'&&(currentResidue.name==='C'||currentResidue.name==='U'||currentResidue.name==='T')||atomName==='N9'){if(!currentChain[currentChain.length-1].cp2){if(atomName==='C6'||atomName==='N9'){lastC=a;}currentResidue.cp2=a;}}else if(atomName==='C'){lastC=a;}}}else if(extensions.stringStartsWith(line,'HETATM')){var symbol=trim(line.substring(76,78));if(symbol.length===0){// handle the case where an improperly formatted PDB\n// file states the element label in the atom name column\nsymbol=trim(line.substring(12,16));}if(symbol.length>1){symbol=symbol.substring(0,1)+symbol.substring(1).toLowerCase();}var het=new structures.Atom(symbol,parseFloat(line.substring(30,38))*multiplier,parseFloat(line.substring(38,46))*multiplier,parseFloat(line.substring(46,54))*multiplier);het.hetatm=true;var residueName=trim(line.substring(17,20));if(residueName==='HOH'){het.isWater=true;}molecule.atoms.push(het);atomSerials[parseInt(trim(line.substring(6,11)))]=het;}else if(extensions.stringStartsWith(line,'CONECT')){var oid=parseInt(trim(line.substring(6,11)));if(atomSerials[oid]){var origin=atomSerials[oid];for(var k=0;k<4;k++){var next=trim(line.substring(11+k*5,16+k*5));if(next.length!==0){var nid=parseInt(next);if(atomSerials[nid]){var a2=atomSerials[nid];var found=false;for(var j=0,jj=molecule.bonds.length;j<jj;j++){var b=molecule.bonds[j];if(b.a1===origin&&b.a2===a2||b.a1===a2&&b.a2===origin){found=true;break;}}if(!found){molecule.bonds.push(new structures.Bond(origin,a2));}}}}}}else if(extensions.stringStartsWith(line,'TER')){this.endChain(molecule,currentChain,lastC,resatoms);currentChain=[];}else if(extensions.stringStartsWith(line,'ENDMDL')){break;}}this.endChain(molecule,currentChain,lastC,resatoms);if(molecule.bonds.size===0){new c.informatics.BondDeducer().deduceCovalentBonds(molecule,multiplier);}if(this.deduceResidueBonds){for(var i=0,ii=resatoms.length;i<ii;i++){var max=m.min(ii,i+20);for(var j=i+1;j<max;j++){var first=resatoms[i];var second=resatoms[j];if(first.distance3D(second)<(ELEMENT[first.label].covalentRadius+ELEMENT[second.label].covalentRadius)*1.1){molecule.bonds.push(new structures.Bond(first,second,1));}}}}molecule.atoms=molecule.atoms.concat(resatoms);if(this.calculateRibbonDistances){this.calculateDistances(molecule,resatoms);}return molecule;};_.endChain=function(molecule,chain,lastC,resatoms){if(chain.length>0){var last=chain[chain.length-1];if(!last.cp1){last.cp1=resatoms[resatoms.length-2];}if(!last.cp2){last.cp2=resatoms[resatoms.length-1];}for(var i=0;i<4;i++){var dummyEnd=new structures.Residue(-1);dummyEnd.cp1=lastC;dummyEnd.cp2=chain[chain.length-1].cp2;chain.push(dummyEnd);}molecule.chains.push(chain);}};_.calculateDistances=function(molecule,resatoms){var hetatm=[];for(var i=0,ii=molecule.atoms.length;i<ii;i++){var a=molecule.atoms[i];if(a.hetatm){if(!a.isWater){hetatm.push(a);}}}for(var i=0,ii=resatoms.length;i<ii;i++){var a=resatoms[i];a.closestDistance=Number.POSITIVE_INFINITY;if(hetatm.length===0){a.closestDistance=0;}else{for(var j=0,jj=hetatm.length;j<jj;j++){a.closestDistance=Math.min(a.closestDistance,a.distance3D(hetatm[j]));}}}};// shortcuts\nvar interpreter=new io.PDBInterpreter();c.readPDB=function(content,multiplier){return interpreter.read(content,multiplier);};})(ChemDoodle,ChemDoodle.extensions,ChemDoodle.io,ChemDoodle.structures,ChemDoodle.ELEMENT,ChemDoodle.lib.jQuery.trim,Math);(function(c,extensions,io,structures,q,undefined){'use strict';var SQZ_HASH={'@':0,'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'H':8,'I':9,'a':-1,'b':-2,'c':-3,'d':-4,'e':-5,'f':-6,'g':-7,'h':-8,'i':-9},DIF_HASH={'%':0,'J':1,'K':2,'L':3,'M':4,'N':5,'O':6,'P':7,'Q':8,'R':9,'j':-1,'k':-2,'l':-3,'m':-4,'n':-5,'o':-6,'p':-7,'q':-8,'r':-9},DUP_HASH={'S':1,'T':2,'U':3,'V':4,'W':5,'X':6,'Y':7,'Z':8,'s':9};io.JCAMPInterpreter=function(){};var _=io.JCAMPInterpreter.prototype=new io._Interpreter();_.convertHZ2PPM=false;_.read=function(content){this.isBreak=function(c){// some of these arrays may return zero, so check if undefined\nreturn SQZ_HASH[c]!==undefined||DIF_HASH[c]!==undefined||DUP_HASH[c]!==undefined||c===' '||c==='-'||c==='+';};this.getValue=function(decipher,lastDif){var first=decipher.charAt(0);var rest=decipher.substring(1);// some of these arrays may return zero, so check if undefined\nif(SQZ_HASH[first]!==undefined){return parseFloat(SQZ_HASH[first]+rest);}else if(DIF_HASH[first]!==undefined){return parseFloat(DIF_HASH[first]+rest)+lastDif;}return parseFloat(rest);};var spectrum=new structures.Spectrum();if(content===undefined||content.length===0){return spectrum;}var lines=content.split('\\n');var sb=[];var xLast,xFirst,yFirst,nPoints,xFactor=1,yFactor=1,observeFrequency=1,deltaX=-1,shiftOffsetNum=-1,shiftOffsetVal=-1;var recordMeta=true,divideByFrequency=false;for(var i=0,ii=lines.length;i<ii;i++){var use=lines[i].trim();var index=use.indexOf('$$');if(index!==-1){use=use.substring(0,index);}if(sb.length===0||!extensions.stringStartsWith(lines[i],'##')){var trimmed=use.trim();if(sb.length!==0&&trimmed.length!==0){sb.push('\\n');}sb.push(trimmed);}else{var currentRecord=sb.join('');if(recordMeta&&currentRecord.length<100){spectrum.metadata.push(currentRecord);}sb=[use];if(extensions.stringStartsWith(currentRecord,'##TITLE=')){spectrum.title=currentRecord.substring(8).trim();}else if(extensions.stringStartsWith(currentRecord,'##XUNITS=')){spectrum.xUnit=currentRecord.substring(9).trim();if(this.convertHZ2PPM&&spectrum.xUnit.toUpperCase()==='HZ'){spectrum.xUnit='PPM';divideByFrequency=true;}}else if(extensions.stringStartsWith(currentRecord,'##YUNITS=')){spectrum.yUnit=currentRecord.substring(9).trim();}else if(extensions.stringStartsWith(currentRecord,'##XYPAIRS=')){// spectrum.yUnit = currentRecord.substring(9).trim();\n}else if(extensions.stringStartsWith(currentRecord,'##FIRSTX=')){xFirst=parseFloat(currentRecord.substring(9).trim());}else if(extensions.stringStartsWith(currentRecord,'##LASTX=')){xLast=parseFloat(currentRecord.substring(8).trim());}else if(extensions.stringStartsWith(currentRecord,'##FIRSTY=')){yFirst=parseFloat(currentRecord.substring(9).trim());}else if(extensions.stringStartsWith(currentRecord,'##NPOINTS=')){nPoints=parseFloat(currentRecord.substring(10).trim());}else if(extensions.stringStartsWith(currentRecord,'##XFACTOR=')){xFactor=parseFloat(currentRecord.substring(10).trim());}else if(extensions.stringStartsWith(currentRecord,'##YFACTOR=')){yFactor=parseFloat(currentRecord.substring(10).trim());}else if(extensions.stringStartsWith(currentRecord,'##DELTAX=')){deltaX=parseFloat(currentRecord.substring(9).trim());}else if(extensions.stringStartsWith(currentRecord,'##.OBSERVE FREQUENCY=')){if(this.convertHZ2PPM){observeFrequency=parseFloat(currentRecord.substring(21).trim());}}else if(extensions.stringStartsWith(currentRecord,'##.SHIFT REFERENCE=')){if(this.convertHZ2PPM){var parts=currentRecord.substring(19).split(',');shiftOffsetNum=parseInt(parts[2].trim());shiftOffsetVal=parseFloat(parts[3].trim());}}else if(extensions.stringStartsWith(currentRecord,'##XYDATA=')){if(!divideByFrequency){observeFrequency=1;}recordMeta=false;var lastWasDif=false;var innerLines=currentRecord.split('\\n');var abscissaSpacing=(xLast-xFirst)/(nPoints-1);var lastX=xFirst-abscissaSpacing;var lastY=yFirst;var lastDif=0;var lastOrdinate;for(var j=1,jj=innerLines.length;j<jj;j++){var data=[];var read=innerLines[j].trim();var sb=[];for(var k=0,kk=read.length;k<kk;k++){if(this.isBreak(read.charAt(k))){if(sb.length>0&&!(sb.length===1&&sb[0]===' ')){data.push(sb.join(''));}sb=[read.charAt(k)];}else{sb.push(read.charAt(k));}}data.push(sb.join(''));lastX=parseFloat(data[0])*xFactor-abscissaSpacing;for(var k=1,kk=data.length;k<kk;k++){var decipher=data[k];// some of these arrays may return zero, so\n// check if undefined\nif(DUP_HASH[decipher.charAt(0)]!==undefined){// be careful when reading this, to keep\n// spectra efficient, DUPS are actually\n// discarded, except the last y!\nvar dup=parseInt(DUP_HASH[decipher.charAt(0)]+decipher.substring(1))-1;for(var l=0;l<dup;l++){lastX+=abscissaSpacing;lastDif=this.getValue(lastOrdinate,lastDif);lastY=lastDif*yFactor;count++;spectrum.data[spectrum.data.length-1]=new structures.Point(lastX/observeFrequency,lastY);}}else{// some of these arrays may return zero, so\n// check if undefined\nif(!(SQZ_HASH[decipher.charAt(0)]!==undefined&&lastWasDif)){lastWasDif=DIF_HASH[decipher.charAt(0)]!==undefined;lastOrdinate=decipher;lastX+=abscissaSpacing;lastDif=this.getValue(decipher,lastDif);lastY=lastDif*yFactor;count++;spectrum.data.push(new structures.Point(lastX/observeFrequency,lastY));}else{lastY=this.getValue(decipher,lastDif)*yFactor;}}}}if(shiftOffsetNum!==-1){var dif=shiftOffsetVal-spectrum.data[shiftOffsetNum-1].x;for(var i=0,ii=spectrum.data.length;i<ii;i++){spectrum.data[i].x+=dif;}}}else if(extensions.stringStartsWith(currentRecord,'##PEAK TABLE=')){recordMeta=false;spectrum.continuous=false;var innerLines=currentRecord.split('\\n');var count=0;var reg=/[\\s,]+/;for(var j=1,jj=innerLines.length;j<jj;j++){var items=innerLines[j].split(reg);count+=items.length/2;for(var k=0,kk=items.length;k+1<kk;k+=2){spectrum.data.push(new structures.Point(parseFloat(items[k].trim()),parseFloat(items[k+1].trim())));}}}else if(extensions.stringStartsWith(currentRecord,'##ATOMLIST=')){spectrum.molecule=new structures.Molecule();var innerLines=currentRecord.split('\\n');var reg=/[\\s]+/;for(var j=1,jj=innerLines.length;j<jj;j++){var items=innerLines[j].split(reg);spectrum.molecule.atoms.push(new structures.Atom(items[1]));}}else if(extensions.stringStartsWith(currentRecord,'##BONDLIST=')){var innerLines=currentRecord.split('\\n');var reg=/[\\s]+/;for(var j=1,jj=innerLines.length;j<jj;j++){var items=innerLines[j].split(reg);var order=1;if(items[2]==='D'){order=2;}else if(items[2]==='T'){order=3;}spectrum.molecule.bonds.push(new structures.Bond(spectrum.molecule.atoms[parseInt(items[0])-1],spectrum.molecule.atoms[parseInt(items[1])-1],order));}}else if(spectrum.molecule&&extensions.stringStartsWith(currentRecord,'##XY_RASTER=')){var innerLines=currentRecord.split('\\n');var reg=/[\\s]+/;for(var j=1,jj=innerLines.length;j<jj;j++){var items=innerLines[j].split(reg);var a=spectrum.molecule.atoms[parseInt(items[0])-1];a.x=parseInt(items[1]);a.y=parseInt(items[2]);if(items.length==4){a.z=parseInt(items[3]);}}spectrum.molecule.scaleToAverageBondLength(20);}else if(extensions.stringStartsWith(currentRecord,'##PEAK ASSIGNMENTS=')){var innerLines=currentRecord.split('\\n');var reg=/[\\s,()<>]+/;spectrum.assignments=[];for(var j=1,jj=innerLines.length;j<jj;j++){var items=innerLines[j].split(reg);var x=parseFloat(items[1]);var y=parseFloat(items[2]);var a=spectrum.molecule.atoms[parseInt(items[3])-1];var used=false;for(var k=0,kk=spectrum.assignments.length;k<kk;k++){var assign=spectrum.assignments[k];if(assign.x===x){assign.as.push(a);a.assigned=assign;used=true;break;}}if(!used){var assign={x:x,y:y,as:[a]};a.assigned=assign;spectrum.assignments.push(assign);}}}}}spectrum.setup();return spectrum;};_.makeStructureSpectrumSet=function(id,content){this.convertHZ2PPM=true;var spectrum=this.read(content);var mcanvas=new c.ViewerCanvas(id+'_molecule',200,200);mcanvas.specs.atoms_displayTerminalCarbonLabels_2D=true;mcanvas.specs.atoms_displayImplicitHydrogens_2D=true;mcanvas.mouseout=function(e){if(this.molecules.length!==0){for(var i=0,ii=this.molecules[0].atoms.length;i<ii;i++){this.molecules[0].atoms[i].isHover=false;}spectrum.hovered=undefined;this.repaint();scanvas.repaint();}};mcanvas.touchend=mcanvas.mouseout;mcanvas.mousemove=function(e){if(this.molecules.length!==0){var closest=undefined;for(var i=0,ii=this.molecules[0].atoms.length;i<ii;i++){var a=this.molecules[0].atoms[i];a.isHover=false;if(a.assigned&&(closest===undefined||e.p.distance(a)<e.p.distance(closest))){closest=a;}}spectrum.hovered=undefined;if(e.p.distance(closest)<20){for(var i=0,ii=closest.assigned.as.length;i<ii;i++){closest.assigned.as[i].isHover=true;}scanvas.spectrum.hovered=closest.assigned;}this.repaint();scanvas.repaint();}};mcanvas.touchmove=mcanvas.mousemove;mcanvas.drawChildExtras=function(ctx,specs){if(this.molecules.length!==0){for(var i=0,ii=this.molecules[0].atoms.length;i<ii;i++){this.molecules[0].atoms[i].drawDecorations(ctx,specs);}}};var scanvas=new c.ObserverCanvas(id+'_spectrum',400,200);scanvas.specs.plots_showYAxis=false;scanvas.specs.plots_flipXAxis=true;scanvas.mouseout=function(e){if(this.spectrum&&this.spectrum.assignments){for(var i=0,ii=mcanvas.molecules[0].atoms.length;i<ii;i++){mcanvas.molecules[0].atoms[i].isHover=false;}this.spectrum.hovered=undefined;mcanvas.repaint();this.repaint();}};scanvas.touchend=scanvas.mouseout;scanvas.mousemove=function(e){if(this.spectrum&&this.spectrum.assignments){var closest=undefined;for(var i=0,ii=mcanvas.molecules[0].atoms.length;i<ii;i++){mcanvas.molecules[0].atoms[i].isHover=false;}this.spectrum.hovered=undefined;for(var i=0,ii=this.spectrum.assignments.length;i<ii;i++){var a=this.spectrum.assignments[i];if(closest===undefined||Math.abs(this.spectrum.getTransformedX(a.x,this.specs,this.spectrum.memory.width,this.spectrum.memory.offsetLeft)-e.p.x)<Math.abs(this.spectrum.getTransformedX(closest.x,this.specs,this.spectrum.memory.width,this.spectrum.memory.offsetLeft)-e.p.x)){closest=a;}}if(Math.abs(this.spectrum.getTransformedX(closest.x,this.specs,this.spectrum.memory.width,this.spectrum.memory.offsetLeft)-e.p.x)<20){for(var i=0,ii=closest.as.length;i<ii;i++){closest.as[i].isHover=true;}this.spectrum.hovered=closest;}mcanvas.repaint();this.repaint();}};scanvas.touchmove=scanvas.mousemove;scanvas.drawChildExtras=function(ctx){if(this.spectrum&&this.spectrum.hovered){var x=this.spectrum.getTransformedX(this.spectrum.hovered.x,scanvas.specs,this.spectrum.memory.width,this.spectrum.memory.offsetLeft);if(x>=this.spectrum.memory.offsetLeft&&x<this.spectrum.memory.width){ctx.save();ctx.strokeStyle='#885110';ctx.lineWidth=3;ctx.beginPath();ctx.moveTo(x,this.spectrum.memory.height-this.spectrum.memory.offsetBottom);ctx.lineTo(x,this.spectrum.getTransformedY(this.spectrum.hovered.y,scanvas.specs,this.spectrum.memory.height,this.spectrum.memory.offsetBottom,this.spectrum.memory.offsetTop));ctx.stroke();ctx.restore();}}};if(spectrum){scanvas.loadSpectrum(spectrum);if(spectrum.molecule){mcanvas.loadMolecule(spectrum.molecule);}}return[mcanvas,scanvas];};// shortcuts\nvar interpreter=new io.JCAMPInterpreter();interpreter.convertHZ2PPM=true;c.readJCAMP=function(content){return interpreter.read(content);};})(ChemDoodle,ChemDoodle.extensions,ChemDoodle.io,ChemDoodle.structures,ChemDoodle.lib.jQuery);(function(c,io,structures,d2,d3,JSON,undefined){'use strict';io.JSONInterpreter=function(){};var _=io.JSONInterpreter.prototype;_.contentTo=function(mols,shapes){if(!mols){mols=[];}if(!shapes){shapes=[];}var count1=0,count2=0;for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){mol.atoms[j].tmpid='a'+count1++;}for(var j=0,jj=mol.bonds.length;j<jj;j++){mol.bonds[j].tmpid='b'+count2++;}}count1=0;for(var i=0,ii=shapes.length;i<ii;i++){shapes[i].tmpid='s'+count1++;}var dummy={};if(mols&&mols.length>0){dummy.m=[];for(var i=0,ii=mols.length;i<ii;i++){dummy.m.push(this.molTo(mols[i]));}}if(shapes&&shapes.length>0){dummy.s=[];for(var i=0,ii=shapes.length;i<ii;i++){dummy.s.push(this.shapeTo(shapes[i]));}}for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){mol.atoms[j].tmpid=undefined;}for(var j=0,jj=mol.bonds.length;j<jj;j++){mol.bonds[j].tmpid=undefined;}}for(var i=0,ii=shapes.length;i<ii;i++){shapes[i].tmpid=undefined;}return dummy;};_.contentFrom=function(dummy){var obj={molecules:[],shapes:[]};if(dummy.m){for(var i=0,ii=dummy.m.length;i<ii;i++){obj.molecules.push(this.molFrom(dummy.m[i]));}}if(dummy.s){for(var i=0,ii=dummy.s.length;i<ii;i++){obj.shapes.push(this.shapeFrom(dummy.s[i],obj.molecules));}}for(var i=0,ii=obj.molecules.length;i<ii;i++){var mol=obj.molecules[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){mol.atoms[j].tmpid=undefined;}for(var j=0,jj=mol.bonds.length;j<jj;j++){mol.bonds[j].tmpid=undefined;}}for(var i=0,ii=obj.shapes.length;i<ii;i++){obj.shapes[i].tmpid=undefined;}return obj;};_.queryTo=function(query){var q={};var appendProperty=function appendProperty(q,p,name,isRange){if(p){q[name]={v:isRange?query.outputRange(p.v):p.v,n:p.not};}};if(query.type===structures.Query.TYPE_ATOM){appendProperty(q,query.elements,'as');appendProperty(q,query.chirality,'@');appendProperty(q,query.aromatic,'A');appendProperty(q,query.charge,'C',true);appendProperty(q,query.hydrogens,'H',true);appendProperty(q,query.ringCount,'R',true);appendProperty(q,query.saturation,'S');appendProperty(q,query.connectivity,'X',true);appendProperty(q,query.connectivityNoH,'x',true);}else{appendProperty(q,query.orders,'bs');appendProperty(q,query.stereo,'@');appendProperty(q,query.aromatic,'A');appendProperty(q,query.ringCount,'R',true);}return q;};_.molTo=function(mol){var dummy={a:[]};for(var i=0,ii=mol.atoms.length;i<ii;i++){var a=mol.atoms[i];var da={x:a.x,y:a.y};if(a.tmpid){da.i=a.tmpid;}if(a.label!=='C'){da.l=a.label;}if(a.z!==0){da.z=a.z;}if(a.charge!==0){da.c=a.charge;}if(a.mass!==-1){da.m=a.mass;}if(a.implicitH!==-1){da.h=a.implicitH;}if(a.numRadical!==0){da.r=a.numRadical;}if(a.numLonePair!==0){da.p=a.numLonePair;}if(a.query){da.q=this.queryTo(a.query);}dummy.a.push(da);}if(mol.bonds.length>0){dummy.b=[];for(var i=0,ii=mol.bonds.length;i<ii;i++){var b=mol.bonds[i];var db={b:mol.atoms.indexOf(b.a1),e:mol.atoms.indexOf(b.a2)};if(b.tmpid){db.i=b.tmpid;}if(b.bondOrder!==1){db.o=b.bondOrder;}if(b.stereo!==structures.Bond.STEREO_NONE){db.s=b.stereo;}if(b.query){db.q=this.queryTo(b.query);}dummy.b.push(db);}}return dummy;};_.queryFrom=function(json){var query=new structures.Query(json.as?structures.Query.TYPE_ATOM:structures.Query.TYPE_BOND);var setupProperty=function setupProperty(query,json,name,isRange){if(json){query[name]={};query[name].v=isRange?query.parseRange(json.v):json.v;if(json.n){query[name].not=true;}}};if(query.type===structures.Query.TYPE_ATOM){setupProperty(query,json.as,'elements');setupProperty(query,json['@'],'chirality');setupProperty(query,json.A,'aromatic');setupProperty(query,json.C,'charge',true);setupProperty(query,json.H,'hydrogens',true);setupProperty(query,json.R,'ringCount',true);setupProperty(query,json.S,'saturation');setupProperty(query,json.X,'connectivity',true);setupProperty(query,json.x,'connectivityNoH',true);}else{setupProperty(query,json.bs,'orders');setupProperty(query,json['@'],'stereo');setupProperty(query,json.A,'aromatic');setupProperty(query,json.R,'ringCount',true);}return query;};_.molFrom=function(json){var molecule=new structures.Molecule();for(var i=0,ii=json.a.length;i<ii;i++){var c=json.a[i];var a=new structures.Atom(c.l?c.l:'C',c.x,c.y);if(c.i){a.tmpid=c.i;}if(c.z){a.z=c.z;}if(c.c){a.charge=c.c;}if(c.m){a.mass=c.m;}if(c.h){a.implicitH=c.h;}if(c.r){a.numRadical=c.r;}if(c.p){a.numLonePair=c.p;}if(c.q){a.query=this.queryFrom(c.q);}// these are booleans or numbers, so check if undefined\nif(c.p_h!==undefined){a.hetatm=c.p_h;}if(c.p_w!==undefined){a.isWater=c.p_w;}if(c.p_d!==undefined){a.closestDistance=c.p_d;}molecule.atoms.push(a);}if(json.b){for(var i=0,ii=json.b.length;i<ii;i++){var c=json.b[i];// order can be 0, so check against undefined\nvar b=new structures.Bond(molecule.atoms[c.b],molecule.atoms[c.e],c.o===undefined?1:c.o);if(c.i){b.tmpid=c.i;}if(c.s){b.stereo=c.s;}if(c.q){b.query=this.queryFrom(c.q);}molecule.bonds.push(b);}}return molecule;};_.shapeTo=function(shape){var dummy={};if(shape.tmpid){dummy.i=shape.tmpid;}if(shape instanceof d2.Line){dummy.t='Line';dummy.x1=shape.p1.x;dummy.y1=shape.p1.y;dummy.x2=shape.p2.x;dummy.y2=shape.p2.y;dummy.a=shape.arrowType;}else if(shape instanceof d2.Pusher){dummy.t='Pusher';dummy.o1=shape.o1.tmpid;dummy.o2=shape.o2.tmpid;if(shape.numElectron!==1){dummy.e=shape.numElectron;}}else if(shape instanceof d2.AtomMapping){dummy.t='AtomMapping';dummy.a1=shape.o1.tmpid;dummy.a2=shape.o2.tmpid;}else if(shape instanceof d2.Bracket){dummy.t='Bracket';dummy.x1=shape.p1.x;dummy.y1=shape.p1.y;dummy.x2=shape.p2.x;dummy.y2=shape.p2.y;if(shape.charge!==0){dummy.c=shape.charge;}if(shape.mult!==0){dummy.m=shape.mult;}if(shape.repeat!==0){dummy.r=shape.repeat;}}else if(shape instanceof d2.DynamicBracket){dummy.t='DynamicBracket';dummy.b1=shape.b1.tmpid;dummy.b2=shape.b2.tmpid;dummy.n1=shape.n1;dummy.n2=shape.n2;if(shape.flip===true){dummy.f=true;}}else if(shape instanceof d2.VAP){dummy.t='VAP';dummy.x=shape.asterisk.x;dummy.y=shape.asterisk.y;if(shape.bondType!==1){dummy.o=shape.bondType;}if(shape.substituent){dummy.s=shape.substituent.tmpid;}dummy.a=[];for(var i=0,ii=shape.attachments.length;i<ii;i++){dummy.a.push(shape.attachments[i].tmpid);}}else if(shape instanceof d3.Distance){dummy.t='Distance';dummy.a1=shape.a1.tmpid;dummy.a2=shape.a2.tmpid;if(shape.node){dummy.n=shape.node;dummy.o=shape.offset;}}else if(shape instanceof d3.Angle){dummy.t='Angle';dummy.a1=shape.a1.tmpid;dummy.a2=shape.a2.tmpid;dummy.a3=shape.a3.tmpid;}else if(shape instanceof d3.Torsion){dummy.t='Torsion';dummy.a1=shape.a1.tmpid;dummy.a2=shape.a2.tmpid;dummy.a3=shape.a3.tmpid;dummy.a4=shape.a4.tmpid;}else if(shape instanceof d3._Surface){dummy.t='Surface';dummy.a=[];for(var i=0,ii=shape.atoms.length;i<ii;i++){dummy.a.push(shape.atoms[i].tmpid);}if(!(shape instanceof d3.VDWSurface)){dummy.p=shape.probeRadius;}dummy.r=shape.resolution;var type='vdw';if(shape instanceof d3.SASSurface){type='sas';}else if(d3.SESSurface&&shape instanceof d3.SESSurface){type='ses';}dummy.f=type;}else if(shape instanceof d3.UnitCell){dummy.t='UnitCell';for(var p in shape.unitCell){dummy[p]=shape.unitCell[p];}}return dummy;};_.shapeFrom=function(dummy,mols){var shape;if(dummy.t==='Line'){shape=new d2.Line(new structures.Point(dummy.x1,dummy.y1),new structures.Point(dummy.x2,dummy.y2));shape.arrowType=dummy.a;}else if(dummy.t==='Pusher'){var o1,o2;for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];if(a.tmpid===dummy.o1){o1=a;}else if(a.tmpid===dummy.o2){o2=a;}}for(var j=0,jj=mol.bonds.length;j<jj;j++){var b=mol.bonds[j];if(b.tmpid===dummy.o1){o1=b;}else if(b.tmpid===dummy.o2){o2=b;}}}shape=new d2.Pusher(o1,o2);if(dummy.e){shape.numElectron=dummy.e;}}else if(dummy.t==='AtomMapping'){var a1,a2;for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];if(a.tmpid===dummy.a1){a1=a;}else if(a.tmpid===dummy.a2){a2=a;}}}shape=new d2.AtomMapping(a1,a2);}else if(dummy.t==='Bracket'){shape=new d2.Bracket(new structures.Point(dummy.x1,dummy.y1),new structures.Point(dummy.x2,dummy.y2));if(dummy.c!==undefined){// have to check against undefined as it is an integer that can\n// be 0\nshape.charge=dummy.c;}if(dummy.m!==undefined){// have to check against undefined as it is an integer that can\n// be 0\nshape.mult=dummy.m;}if(dummy.r!==undefined){// have to check against undefined as it is an integer that can\n// be 0\nshape.repeat=dummy.r;}}else if(dummy.t==='DynamicBracket'){var b1,b2;for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.bonds.length;j<jj;j++){var b=mol.bonds[j];if(b.tmpid===dummy.b1){b1=b;}else if(b.tmpid===dummy.b2){b2=b;}}}shape=new d2.DynamicBracket(b1,b2);shape.n1=dummy.n1;shape.n2=dummy.n2;if(dummy.f){shape.flip=true;}}else if(dummy.t==='VAP'){shape=new d2.VAP(dummy.x,dummy.y);if(dummy.o){shape.bondType=dummy.o;}for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];if(a.tmpid===dummy.s){shape.substituent=a;}else{for(var k=0,kk=dummy.a.length;k<kk;k++){if(a.tmpid===dummy.a[k]){shape.attachments.push(a);}}}}}}else if(dummy.t==='Distance'){var a1,a2;for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];if(a.tmpid===dummy.a1){a1=a;}else if(a.tmpid===dummy.a2){a2=a;}}}shape=new d3.Distance(a1,a2,dummy.n,dummy.o);}else if(dummy.t==='Angle'){var a1,a2,a3;for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];if(a.tmpid===dummy.a1){a1=a;}else if(a.tmpid===dummy.a2){a2=a;}else if(a.tmpid===dummy.a3){a3=a;}}}shape=new d3.Angle(a1,a2,a3);}else if(dummy.t==='Torsion'){var a1,a2,a3,a4;for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];if(a.tmpid===dummy.a1){a1=a;}else if(a.tmpid===dummy.a2){a2=a;}else if(a.tmpid===dummy.a3){a3=a;}else if(a.tmpid===dummy.a4){a4=a;}}}shape=new d3.Torsion(a1,a2,a3,a4);}else if(dummy.t==='Surface'){var atoms=[];for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];for(var k=0,kk=dummy.a.length;k<kk;k++){if(a.tmpid===dummy.a[k]){atoms.push(a);}}}}var probeRadius=dummy.p?dummy.p:1.4;var resolution=dummy.r?dummy.r:30;if(dummy.f==='vdw'){shape=new d3.VDWSurface(atoms,resolution);}else if(dummy.f==='sas'){shape=new d3.SASSurface(atoms,probeRadius,resolution);}else if(dummy.f==='ses'){shape=new d3.SESSurface(atoms,probeRadius,resolution);}}else if(dummy.t==='UnitCell'){var unitCellVectors={};for(var p in dummy){unitCellVectors[p]=dummy[p];}shape=new d3.UnitCell(unitCellVectors);}return shape;};_.pdbFrom=function(content){var mol=this.molFrom(content.mol);mol.findRings=false;// mark from JSON to note to algorithms that atoms in chain are not\n// same\n// objects as in atom array\nmol.fromJSON=true;mol.chains=this.chainsFrom(content.ribbons);return mol;};_.chainsFrom=function(content){var chains=[];for(var i=0,ii=content.cs.length;i<ii;i++){var chain=content.cs[i];var c=[];for(var j=0,jj=chain.length;j<jj;j++){var convert=chain[j];var r=new structures.Residue();r.name=convert.n;r.cp1=new structures.Atom('',convert.x1,convert.y1,convert.z1);r.cp2=new structures.Atom('',convert.x2,convert.y2,convert.z2);if(convert.x3){r.cp3=new structures.Atom('',convert.x3,convert.y3,convert.z3);r.cp4=new structures.Atom('',convert.x4,convert.y4,convert.z4);r.cp5=new structures.Atom('',convert.x5,convert.y5,convert.z5);}r.helix=convert.h;r.sheet=convert.s;r.arrow=j>0&&chain[j-1].a;c.push(r);}chains.push(c);}return chains;};// shortcuts\nvar interpreter=new io.JSONInterpreter();c.readJSON=function(string){var obj;try{obj=JSON.parse(string);}catch(e){// not json\nreturn undefined;}if(obj){if(obj.m||obj.s){return interpreter.contentFrom(obj);}else if(obj.a){return obj={molecules:[interpreter.molFrom(obj)],shapes:[]};}else{return obj={molecules:[],shapes:[]};}}return undefined;};c.writeJSON=function(mols,shapes){return JSON.stringify(interpreter.contentTo(mols,shapes));};})(ChemDoodle,ChemDoodle.io,ChemDoodle.structures,ChemDoodle.structures.d2,ChemDoodle.structures.d3,JSON);(function(c,io,structures,undefined){'use strict';io.RXNInterpreter=function(){};var _=io.RXNInterpreter.prototype=new io._Interpreter();_.read=function(content,multiplier){if(!multiplier){multiplier=c.default_bondLength_2D;}var molecules=[];var line;if(!content){molecules.push(new structures.Molecule());line=new structures.d2.Line(new structures.Point(-20,0),new structures.Point(20,0));}else{var contentTokens=content.split('$MOL\\n');var headerTokens=contentTokens[0].split('\\n');var counts=headerTokens[4];var numReactants=parseInt(counts.substring(0,3));var numProducts=parseInt(counts.substring(3,6));var currentMolecule=1;var start=0;for(var i=0,ii=numReactants+numProducts;i<ii;i++){molecules[i]=c.readMOL(contentTokens[currentMolecule],multiplier);var b=molecules[i].getBounds();var width=b.maxX-b.minX;start-=width+40;currentMolecule++;}for(var i=0,ii=numReactants;i<ii;i++){var b=molecules[i].getBounds();var width=b.maxX-b.minX;var center=molecules[i].getCenter();for(var j=0,jj=molecules[i].atoms.length;j<jj;j++){var a=molecules[i].atoms[j];a.x+=start+width/2-center.x;a.y-=center.y;}start+=width+40;}line=new structures.d2.Line(new structures.Point(start,0),new structures.Point(start+40,0));start+=80;for(var i=numReactants,ii=numReactants+numProducts;i<ii;i++){var b=molecules[i].getBounds();var width=b.maxX-b.minX;var center=molecules[i].getCenter();for(var j=0;j<molecules[i].atoms.length;j++){var a=molecules[i].atoms[j];a.x+=start+width/2-center.x;a.y-=center.y;}start+=width+40;}}line.arrowType=structures.d2.Line.ARROW_SYNTHETIC;return{'molecules':molecules,'shapes':[line]};};_.write=function(mols,shapes){var molecules=[[],[]];var ps=undefined;if(!mols||!shapes){return;}for(i=0,ii=shapes.length;i<ii;i++){if(shapes[i]instanceof structures.d2.Line){ps=shapes[i].getPoints();break;}}if(!ps){return'';}for(var i=0,ii=mols.length;i<ii;i++){var center=mols[i].getCenter();if(center.x<ps[1].x){molecules[0].push(mols[i]);}else{molecules[1].push(mols[i]);}}var sb=[];sb.push('$RXN\\nReaction from ChemDoodle Web Components\\n\\nhttp://www.ichemlabs.com\\n');sb.push(this.fit(molecules[0].length.toString(),3));sb.push(this.fit(molecules[1].length.toString(),3));sb.push('\\n');for(var i=0;i<2;i++){for(var j=0,jj=molecules[i].length;j<jj;j++){sb.push('$MOL\\n');sb.push(c.writeMOL(molecules[i][j]));sb.push('\\n');}}return sb.join('');};// shortcuts\nvar interpreter=new io.RXNInterpreter();c.readRXN=function(content,multiplier){return interpreter.read(content,multiplier);};c.writeRXN=function(mols,shapes){return interpreter.write(mols,shapes);};})(ChemDoodle,ChemDoodle.io,ChemDoodle.structures);(function(c,ELEMENT,SYMBOLS,io,structures,trim,undefined){'use strict';io.XYZInterpreter=function(){};var _=io.XYZInterpreter.prototype=new io._Interpreter();_.deduceCovalentBonds=true;_.read=function(content){var molecule=new structures.Molecule();if(!content){return molecule;}var lines=content.split('\\n');var numAtoms=parseInt(trim(lines[0]));for(var i=0;i<numAtoms;i++){var line=lines[i+2];var tokens=line.split(/\\s+/g);molecule.atoms[i]=new structures.Atom(isNaN(tokens[0])?tokens[0]:SYMBOLS[parseInt(tokens[0])-1],parseFloat(tokens[1]),parseFloat(tokens[2]),parseFloat(tokens[3]));}if(this.deduceCovalentBonds){new c.informatics.BondDeducer().deduceCovalentBonds(molecule,1);}return molecule;};// shortcuts\nvar interpreter=new io.XYZInterpreter();c.readXYZ=function(content){return interpreter.read(content);};})(ChemDoodle,ChemDoodle.ELEMENT,ChemDoodle.SYMBOLS,ChemDoodle.io,ChemDoodle.structures,ChemDoodle.lib.jQuery.trim);ChemDoodle.monitor=function(featureDetection,q,document,undefined){'use strict';var m={};m.CANVAS_DRAGGING=undefined;m.CANVAS_OVER=undefined;m.ALT=false;m.SHIFT=false;m.META=false;if(!featureDetection.supports_touch()){q(document).ready(function(){// handles dragging beyond the canvas bounds\nq(document).mousemove(function(e){if(m.CANVAS_DRAGGING){if(m.CANVAS_DRAGGING.drag){m.CANVAS_DRAGGING.prehandleEvent(e);m.CANVAS_DRAGGING.drag(e);}}});q(document).mouseup(function(e){if(m.CANVAS_DRAGGING&&m.CANVAS_DRAGGING!==m.CANVAS_OVER){if(m.CANVAS_DRAGGING.mouseup){m.CANVAS_DRAGGING.prehandleEvent(e);m.CANVAS_DRAGGING.mouseup(e);}}m.CANVAS_DRAGGING=undefined;});// handles modifier keys from a single keyboard\nq(document).keydown(function(e){m.SHIFT=e.shiftKey;m.ALT=e.altKey;m.META=e.metaKey||e.ctrlKey;var affecting=m.CANVAS_OVER;if(m.CANVAS_DRAGGING){affecting=m.CANVAS_DRAGGING;}if(affecting){if(affecting.keydown){affecting.prehandleEvent(e);affecting.keydown(e);}}});q(document).keypress(function(e){var affecting=m.CANVAS_OVER;if(m.CANVAS_DRAGGING){affecting=m.CANVAS_DRAGGING;}if(affecting){if(affecting.keypress){affecting.prehandleEvent(e);affecting.keypress(e);}}});q(document).keyup(function(e){m.SHIFT=e.shiftKey;m.ALT=e.altKey;m.META=e.metaKey||e.ctrlKey;var affecting=m.CANVAS_OVER;if(m.CANVAS_DRAGGING){affecting=m.CANVAS_DRAGGING;}if(affecting){if(affecting.keyup){affecting.prehandleEvent(e);affecting.keyup(e);}}});});}return m;}(ChemDoodle.featureDetection,ChemDoodle.lib.jQuery,document);(function(c,featureDetection,math,monitor,structures,q,m,document,window,userAgent,undefined){'use strict';c._Canvas=function(){};var _=c._Canvas.prototype;_.molecules=undefined;_.shapes=undefined;_.emptyMessage=undefined;_.image=undefined;_.repaint=function(){if(this.test){return;}var canvas=document.getElementById(this.id);if(canvas.getContext){var ctx=canvas.getContext('2d');if(this.pixelRatio!==1&&canvas.width===this.width){canvas.width=this.width*this.pixelRatio;canvas.height=this.height*this.pixelRatio;ctx.scale(this.pixelRatio,this.pixelRatio);}if(!this.image){if(this.specs.backgroundColor&&this.bgCache!==canvas.style.backgroundColor){canvas.style.backgroundColor=this.specs.backgroundColor;this.bgCache=canvas.style.backgroundColor;}// clearRect is correct, but doesn't work as expected on Android\n// ctx.clearRect(0, 0, this.width, this.height);\nctx.fillStyle=this.specs.backgroundColor;ctx.fillRect(0,0,this.width,this.height);}else{ctx.drawImage(this.image,0,0);}if(this.innerRepaint){this.innerRepaint(ctx);}else{if(this.molecules.length!==0||this.shapes.length!==0){ctx.save();ctx.translate(this.width/2,this.height/2);ctx.rotate(this.specs.rotateAngle);ctx.scale(this.specs.scale,this.specs.scale);ctx.translate(-this.width/2,-this.height/2);for(var i=0,ii=this.molecules.length;i<ii;i++){this.molecules[i].check(true);this.molecules[i].draw(ctx,this.specs);}if(this.checksOnAction){// checksOnAction() must be called after checking molecules, as it depends on molecules being correct\n// this function is only used by the uis\nthis.checksOnAction(true);}for(var i=0,ii=this.shapes.length;i<ii;i++){this.shapes[i].draw(ctx,this.specs);}ctx.restore();}else if(this.emptyMessage){ctx.fillStyle='#737683';ctx.textAlign='center';ctx.textBaseline='middle';ctx.font='18px Helvetica, Verdana, Arial, Sans-serif';ctx.fillText(this.emptyMessage,this.width/2,this.height/2);}}if(this.drawChildExtras){this.drawChildExtras(ctx,this.specs);}}};_.resize=function(w,h){var cap=q('#'+this.id);cap.attr({width:w,height:h});cap.css('width',w);cap.css('height',h);this.width=w;this.height=h;if(c._Canvas3D&&this instanceof c._Canvas3D){var wu=w;var hu=h;if(this.pixelRatio!==1){wu*=this.pixelRatio;hu*=this.pixelRatio;this.gl.canvas.width=wu;this.gl.canvas.height=hu;}this.gl.viewport(0,0,wu,hu);this.afterLoadContent();}else if(this.molecules.length>0){this.center();for(var i=0,ii=this.molecules.length;i<ii;i++){this.molecules[i].check();}}this.repaint();};_.setBackgroundImage=function(path){this.image=new Image();// Create new Image object\nvar me=this;this.image.onload=function(){me.repaint();};this.image.src=path;// Set source path\n};_.loadMolecule=function(molecule){this.clear();this.molecules.push(molecule);// do this twice to center based on atom labels, which must be first rendered to be considered in bounds\nfor(var i=0;i<2;i++){this.center();if(!(c._Canvas3D&&this instanceof c._Canvas3D)){molecule.check();}if(this.afterLoadContent){this.afterLoadContent();}this.repaint();}};_.loadContent=function(mols,shapes){this.molecules=mols?mols:[];this.shapes=shapes?shapes:[];// do this twice to center based on atom labels, which must be first rendered to be considered in bounds\nfor(var i=0;i<2;i++){this.center();if(!(c._Canvas3D&&this instanceof c._Canvas3D)){for(var i=0,ii=this.molecules.length;i<ii;i++){this.molecules[i].check();}}if(this.afterLoadContent){this.afterLoadContent();}this.repaint();}};_.addMolecule=function(molecule){this.molecules.push(molecule);if(!(c._Canvas3D&&this instanceof c._Canvas3D)){molecule.check();}this.repaint();};_.removeMolecule=function(mol){this.molecules=q.grep(this.molecules,function(value){return value!==mol;});this.repaint();};_.getMolecule=function(){return this.molecules.length>0?this.molecules[0]:undefined;};_.getMolecules=function(){return this.molecules;};_.addShape=function(shape){this.shapes.push(shape);this.repaint();};_.removeShape=function(shape){this.shapes=q.grep(this.shapes,function(value){return value!==shape;});this.repaint();};_.getShapes=function(){return this.shapes;};_.clear=function(){this.molecules=[];this.shapes=[];this.specs.scale=1;this.repaint();};_.center=function(){var bounds=this.getContentBounds();var center=new structures.Point((this.width-bounds.minX-bounds.maxX)/2,(this.height-bounds.minY-bounds.maxY)/2);for(var i=0,ii=this.molecules.length;i<ii;i++){var mol=this.molecules[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){mol.atoms[j].add(center);}}for(var i=0,ii=this.shapes.length;i<ii;i++){var sps=this.shapes[i].getPoints();for(var j=0,jj=sps.length;j<jj;j++){sps[j].add(center);}}this.specs.scale=1;var difX=bounds.maxX-bounds.minX;var difY=bounds.maxY-bounds.minY;if(difX>this.width-20||difY>this.height-20){this.specs.scale=m.min(this.width/difX,this.height/difY)*.85;}};_.bondExists=function(a1,a2){for(var i=0,ii=this.molecules.length;i<ii;i++){var mol=this.molecules[i];for(var j=0,jj=mol.bonds.length;j<jj;j++){var b=mol.bonds[j];if(b.contains(a1)&&b.contains(a2)){return true;}}}return false;};_.getBond=function(a1,a2){for(var i=0,ii=this.molecules.length;i<ii;i++){var mol=this.molecules[i];for(var j=0,jj=mol.bonds.length;j<jj;j++){var b=mol.bonds[j];if(b.contains(a1)&&b.contains(a2)){return b;}}}return undefined;};_.getMoleculeByAtom=function(a){for(var i=0,ii=this.molecules.length;i<ii;i++){var mol=this.molecules[i];if(mol.atoms.indexOf(a)!==-1){return mol;}}return undefined;};_.getAllAtoms=function(){var as=[];for(var i=0,ii=this.molecules.length;i<ii;i++){as=as.concat(this.molecules[i].atoms);}return as;};_.getAllBonds=function(){var bs=[];for(var i=0,ii=this.molecules.length;i<ii;i++){bs=bs.concat(this.molecules[i].bonds);}return bs;};_.getAllPoints=function(){var ps=[];for(var i=0,ii=this.molecules.length;i<ii;i++){ps=ps.concat(this.molecules[i].atoms);}for(var i=0,ii=this.shapes.length;i<ii;i++){ps=ps.concat(this.shapes[i].getPoints());}return ps;};_.getContentBounds=function(){var bounds=new math.Bounds();for(var i=0,ii=this.molecules.length;i<ii;i++){bounds.expand(this.molecules[i].getBounds());}for(var i=0,ii=this.shapes.length;i<ii;i++){bounds.expand(this.shapes[i].getBounds());}return bounds;};_.create=function(id,width,height){this.id=id;this.width=width;this.height=height;this.molecules=[];this.shapes=[];if(document.getElementById(id)){var canvas=q('#'+id);if(!width){this.width=canvas.attr('width');}else{canvas.attr('width',width);}if(!height){this.height=canvas.attr('height');}else{canvas.attr('height',height);}// If the canvas is pre-created, make sure that the class attribute\n// is specified.\ncanvas.attr('class','ChemDoodleWebComponent');}else if(!c.featureDetection.supports_canvas_text()&&userAgent.indexOf(\"MSIE\")!=-1){// Install Google Chrome Frame\ndocument.writeln('<div style=\"border: 1px solid black;\" width=\"'+width+'\" height=\"'+height+'\">Please install <a href=\"http://code.google.com/chrome/chromeframe/\">Google Chrome Frame</a>, then restart Internet Explorer.</div>');return;}else{document.writeln('<canvas class=\"ChemDoodleWebComponent\" id=\"'+id+'\" width=\"'+width+'\" height=\"'+height+'\" alt=\"ChemDoodle Web Component\">This browser does not support HTML5/Canvas.</canvas>');}var jqCapsule=q('#'+id);jqCapsule.css('width',this.width);jqCapsule.css('height',this.height);this.pixelRatio=window.devicePixelRatio?window.devicePixelRatio:1;this.specs=new structures.VisualSpecifications();// setup input events\n// make sure prehandle events are only in if statements if handled, so\n// as not to block browser events\nvar me=this;if(featureDetection.supports_touch()){// for iPhone OS and Android devices (and other mobile browsers that\n// support mobile events)\njqCapsule.bind('touchstart',function(e){var time=new Date().getTime();if(!featureDetection.supports_gesture()&&e.originalEvent.touches.length===2){// on some platforms, like Android, there is no gesture\n// support, so we have to implement it\nvar ts=e.originalEvent.touches;var p1=new structures.Point(ts[0].pageX,ts[0].pageY);var p2=new structures.Point(ts[1].pageX,ts[1].pageY);me.implementedGestureDist=p1.distance(p2);me.implementedGestureAngle=p1.angle(p2);if(me.gesturestart){me.prehandleEvent(e);me.gesturestart(e);}}if(me.lastTouch&&e.originalEvent.touches.length===1&&time-me.lastTouch<500){if(me.dbltap){me.prehandleEvent(e);me.dbltap(e);}else if(me.dblclick){me.prehandleEvent(e);me.dblclick(e);}else if(me.touchstart){me.prehandleEvent(e);me.touchstart(e);}else if(me.mousedown){me.prehandleEvent(e);me.mousedown(e);}}else if(me.touchstart){me.prehandleEvent(e);me.touchstart(e);if(this.hold){clearTimeout(this.hold);}if(this.touchhold){this.hold=setTimeout(function(){me.touchhold(e);},1000);}}else if(me.mousedown){me.prehandleEvent(e);me.mousedown(e);}me.lastTouch=time;});jqCapsule.bind('touchmove',function(e){if(this.hold){clearTimeout(this.hold);this.hold=undefined;}if(!featureDetection.supports_gesture()&&e.originalEvent.touches.length===2){// on some platforms, like Android, there is no gesture\n// support, so we have to implement it\nif(me.gesturechange){var ts=e.originalEvent.touches;var p1=new structures.Point(ts[0].pageX,ts[0].pageY);var p2=new structures.Point(ts[1].pageX,ts[1].pageY);var newDist=p1.distance(p2);var newAngle=p1.angle(p2);e.originalEvent.scale=newDist/me.implementedGestureDist;e.originalEvent.rotation=180*(me.implementedGestureAngle-newAngle)/m.PI;me.prehandleEvent(e);me.gesturechange(e);}}if(e.originalEvent.touches.length>1&&me.multitouchmove){var numFingers=e.originalEvent.touches.length;me.prehandleEvent(e);var center=new structures.Point(-e.offset.left*numFingers,-e.offset.top*numFingers);for(var i=0;i<numFingers;i++){center.x+=e.originalEvent.changedTouches[i].pageX;center.y+=e.originalEvent.changedTouches[i].pageY;}center.x/=numFingers;center.y/=numFingers;e.p=center;me.multitouchmove(e,numFingers);}else if(me.touchmove){me.prehandleEvent(e);me.touchmove(e);}else if(me.drag){me.prehandleEvent(e);me.drag(e);}});jqCapsule.bind('touchend',function(e){if(this.hold){clearTimeout(this.hold);this.hold=undefined;}if(!featureDetection.supports_gesture()&&me.implementedGestureDist){// on some platforms, like Android, there is no gesture\n// support, so we have to implement it\nme.implementedGestureDist=undefined;me.implementedGestureAngle=undefined;if(me.gestureend){me.prehandleEvent(e);me.gestureend(e);}}if(me.touchend){me.prehandleEvent(e);me.touchend(e);}else if(me.mouseup){me.prehandleEvent(e);me.mouseup(e);}if(new Date().getTime()-me.lastTouch<250){if(me.tap){me.prehandleEvent(e);me.tap(e);}else if(me.click){me.prehandleEvent(e);me.click(e);}}});jqCapsule.bind('gesturestart',function(e){if(me.gesturestart){me.prehandleEvent(e);me.gesturestart(e);}});jqCapsule.bind('gesturechange',function(e){if(me.gesturechange){me.prehandleEvent(e);me.gesturechange(e);}});jqCapsule.bind('gestureend',function(e){if(me.gestureend){me.prehandleEvent(e);me.gestureend(e);}});}else{// normal events\n// some mobile browsers will simulate mouse events, so do not set\n// these\n// events if mobile, or it will interfere with the handling of touch\n// events\njqCapsule.click(function(e){switch(e.which){case 1:// left mouse button pressed\nif(me.click){me.prehandleEvent(e);me.click(e);}break;case 2:// middle mouse button pressed\nif(me.middleclick){me.prehandleEvent(e);me.middleclick(e);}break;case 3:// right mouse button pressed\nif(me.rightclick){me.prehandleEvent(e);me.rightclick(e);}break;}});jqCapsule.dblclick(function(e){if(me.dblclick){me.prehandleEvent(e);me.dblclick(e);}});jqCapsule.mousedown(function(e){switch(e.which){case 1:// left mouse button pressed\nmonitor.CANVAS_DRAGGING=me;if(me.mousedown){me.prehandleEvent(e);me.mousedown(e);}break;case 2:// middle mouse button pressed\nif(me.middlemousedown){me.prehandleEvent(e);me.middlemousedown(e);}break;case 3:// right mouse button pressed\nif(me.rightmousedown){me.prehandleEvent(e);me.rightmousedown(e);}break;}});jqCapsule.mousemove(function(e){if(!monitor.CANVAS_DRAGGING&&me.mousemove){me.prehandleEvent(e);me.mousemove(e);}});jqCapsule.mouseout(function(e){monitor.CANVAS_OVER=undefined;if(me.mouseout){me.prehandleEvent(e);me.mouseout(e);}});jqCapsule.mouseover(function(e){monitor.CANVAS_OVER=me;if(me.mouseover){me.prehandleEvent(e);me.mouseover(e);}});jqCapsule.mouseup(function(e){switch(e.which){case 1:// left mouse button pressed\nif(me.mouseup){me.prehandleEvent(e);me.mouseup(e);}break;case 2:// middle mouse button pressed\nif(me.middlemouseup){me.prehandleEvent(e);me.middlemouseup(e);}break;case 3:// right mouse button pressed\nif(me.rightmouseup){me.prehandleEvent(e);me.rightmouseup(e);}break;}});jqCapsule.mousewheel(function(e,delta){if(me.mousewheel){me.prehandleEvent(e);me.mousewheel(e,delta);}});}if(this.subCreate){this.subCreate();}};_.prehandleEvent=function(e){if(e.originalEvent.changedTouches){e.pageX=e.originalEvent.changedTouches[0].pageX;e.pageY=e.originalEvent.changedTouches[0].pageY;}if(!this.doEventDefault){e.preventDefault();e.returnValue=false;}e.offset=q('#'+this.id).offset();e.p=new structures.Point(e.pageX-e.offset.left,e.pageY-e.offset.top);};})(ChemDoodle,ChemDoodle.featureDetection,ChemDoodle.math,ChemDoodle.monitor,ChemDoodle.structures,ChemDoodle.lib.jQuery,Math,document,window,navigator.userAgent);(function(c,animations,undefined){'use strict';c._AnimatorCanvas=function(id,width,height){if(id){this.create(id,width,height);}};var _=c._AnimatorCanvas.prototype=new c._Canvas();_.timeout=33;_.startAnimation=function(){this.stopAnimation();this.lastTime=new Date().getTime();var me=this;if(this.nextFrame){this.handle=animations.requestInterval(function(){// advance clock\nvar timeNow=new Date().getTime();// update and repaint\nme.nextFrame(timeNow-me.lastTime);me.repaint();me.lastTime=timeNow;},this.timeout);}};_.stopAnimation=function(){if(this.handle){animations.clearRequestInterval(this.handle);this.handle=undefined;}};_.isRunning=function(){// must compare to undefined here to return a boolean\nreturn this.handle!==undefined;};})(ChemDoodle,ChemDoodle.animations);(function(c,document,undefined){'use strict';c.FileCanvas=function(id,width,height,action){if(id){this.create(id,width,height);}var form='<br><form name=\"FileForm\" enctype=\"multipart/form-data\" method=\"POST\" action=\"'+action+'\" target=\"HiddenFileFrame\"><input type=\"file\" name=\"f\" /><input type=\"submit\" name=\"submitbutton\" value=\"Show File\" /></form><iframe id=\"HFF-'+id+'\" name=\"HiddenFileFrame\" height=\"0\" width=\"0\" style=\"display:none;\" onLoad=\"GetMolFromFrame(\\'HFF-'+id+'\\', '+id+')\"></iframe>';document.writeln(form);this.emptyMessage='Click below to load file';this.repaint();};c.FileCanvas.prototype=new c._Canvas();})(ChemDoodle,document);(function(c,undefined){'use strict';c.HyperlinkCanvas=function(id,width,height,urlOrFunction,color,size){if(id){this.create(id,width,height);}this.urlOrFunction=urlOrFunction;this.color=color?color:'blue';this.size=size?size:2;};var _=c.HyperlinkCanvas.prototype=new c._Canvas();_.openInNewWindow=true;_.hoverImage=undefined;_.drawChildExtras=function(ctx){if(this.e){if(this.hoverImage){ctx.drawImage(this.hoverImage,0,0);}else{ctx.strokeStyle=this.color;ctx.lineWidth=this.size*2;ctx.strokeRect(0,0,this.width,this.height);}}};_.setHoverImage=function(url){this.hoverImage=new Image();this.hoverImage.src=url;};_.click=function(p){this.e=undefined;this.repaint();if(this.urlOrFunction instanceof Function){this.urlOrFunction();}else{if(this.openInNewWindow){window.open(this.urlOrFunction);}else{location.href=this.urlOrFunction;}}};_.mouseout=function(e){this.e=undefined;this.repaint();};_.mouseover=function(e){this.e=e;this.repaint();};})(ChemDoodle);(function(c,iChemLabs,q,document,undefined){'use strict';c.MolGrabberCanvas=function(id,width,height){if(id){this.create(id,width,height);}var sb=[];sb.push('<br><input type=\"text\" id=\"');sb.push(id);sb.push('_query\" size=\"32\" value=\"\" />');sb.push(this.getInputFields());// Don't use document.writeln here, it breaks the whole page after\n// document is closed.\ndocument.getElementById(id);var canvas=q('#'+id);canvas.after(sb.join(''));var self=this;q('#'+id+'_submit').click(function(){self.search();});q('#'+id+'_query').keypress(function(e){if(e.which===13){self.search();}});this.emptyMessage='Enter search term below';this.repaint();};var _=c.MolGrabberCanvas.prototype=new c._Canvas();_.setSearchTerm=function(term){q('#'+this.id+'_query').val(term);this.search();};_.getInputFields=function(){var sb=[];sb.push('<br><nobr>');sb.push('<select id=\"');sb.push(this.id);sb.push('_select\">');sb.push('<option value=\"chemexper\">ChemExper');sb.push('<option value=\"chemspider\">ChemSpider');sb.push('<option value=\"pubchem\" selected>PubChem');sb.push('</select>');sb.push('<button id=\"');sb.push(this.id);sb.push('_submit\">Show Molecule</button>');sb.push('</nobr>');return sb.join('');};_.search=function(){this.emptyMessage='Searching...';this.clear();var self=this;iChemLabs.getMoleculeFromDatabase(q('#'+this.id+'_query').val(),{database:q('#'+this.id+'_select').val()},function(mol){self.loadMolecule(mol);});};})(ChemDoodle,ChemDoodle.iChemLabs,ChemDoodle.lib.jQuery,document);(function(c,m,m4,undefined){'use strict';// keep these declaration outside the loop to avoid overhead\nvar matrix=[];var xAxis=[1,0,0];var yAxis=[0,1,0];var zAxis=[0,0,1];c.RotatorCanvas=function(id,width,height,rotate3D){if(id){this.create(id,width,height);}this.rotate3D=rotate3D;};var _=c.RotatorCanvas.prototype=new c._AnimatorCanvas();var increment=m.PI/15;_.xIncrement=increment;_.yIncrement=increment;_.zIncrement=increment;_.nextFrame=function(delta){if(this.molecules.length===0&&this.shapes.length===0){this.stopAnimation();return;}var change=delta/1000;if(this.rotate3D){m4.identity(matrix);m4.rotate(matrix,this.xIncrement*change,xAxis);m4.rotate(matrix,this.yIncrement*change,yAxis);m4.rotate(matrix,this.zIncrement*change,zAxis);for(var i=0,ii=this.molecules.length;i<ii;i++){var m=this.molecules[i];for(var j=0,jj=m.atoms.length;j<jj;j++){var a=m.atoms[j];var p=[a.x-this.width/2,a.y-this.height/2,a.z];m4.multiplyVec3(matrix,p);a.x=p[0]+this.width/2;a.y=p[1]+this.height/2;a.z=p[2];}for(var j=0,jj=m.rings.length;j<jj;j++){m.rings[j].center=m.rings[j].getCenter();}if(this.specs.atoms_display&&this.specs.atoms_circles_2D){m.sortAtomsByZ();}if(this.specs.bonds_display&&this.specs.bonds_clearOverlaps_2D){m.sortBondsByZ();}}for(var i=0,ii=this.shapes.length;i<ii;i++){var sps=this.shapes[i].getPoints();for(var j=0,jj=sps.length;j<jj;j++){var a=sps[j];var p=[a.x-this.width/2,a.y-this.height/2,0];m4.multiplyVec3(matrix,p);a.x=p[0]+this.width/2;a.y=p[1]+this.height/2;}}}else{this.specs.rotateAngle+=this.zIncrement*change;}};_.dblclick=function(e){if(this.isRunning()){this.stopAnimation();}else{this.startAnimation();}};})(ChemDoodle,Math,ChemDoodle.lib.mat4);(function(c,animations,math,undefined){'use strict';c.SlideshowCanvas=function(id,width,height){if(id){this.create(id,width,height);}};var _=c.SlideshowCanvas.prototype=new c._AnimatorCanvas();_.frames=[];_.curIndex=0;_.timeout=5000;_.alpha=0;_.innerHandle=undefined;_.phase=0;_.drawChildExtras=function(ctx){var rgb=math.getRGB(this.specs.backgroundColor,255);ctx.fillStyle='rgba('+rgb[0]+', '+rgb[1]+', '+rgb[2]+', '+this.alpha+')';ctx.fillRect(0,0,this.width,this.height);};_.nextFrame=function(delta){if(this.frames.length===0){this.stopAnimation();return;}this.phase=0;var me=this;var count=1;this.innerHandle=setInterval(function(){me.alpha=count/15;me.repaint();if(count===15){me.breakInnerHandle();}count++;},33);};_.breakInnerHandle=function(){if(this.innerHandle){clearInterval(this.innerHandle);this.innerHandle=undefined;}if(this.phase===0){this.curIndex++;if(this.curIndex>this.frames.length-1){this.curIndex=0;}this.alpha=1;var f=this.frames[this.curIndex];this.loadContent(f.mols,f.shapes);this.phase=1;var me=this;var count=1;this.innerHandle=setInterval(function(){me.alpha=(15-count)/15;me.repaint();if(count===15){me.breakInnerHandle();}count++;},33);}else if(this.phase===1){this.alpha=0;this.repaint();}};_.addFrame=function(molecules,shapes){if(this.frames.length===0){this.loadContent(molecules,shapes);}this.frames.push({mols:molecules,shapes:shapes});};})(ChemDoodle,ChemDoodle.animations,ChemDoodle.math);(function(c,monitor,structures,m,m4,undefined){'use strict';c.TransformCanvas=function(id,width,height,rotate3D){if(id){this.create(id,width,height);}this.rotate3D=rotate3D;};var _=c.TransformCanvas.prototype=new c._Canvas();_.lastPoint=undefined;_.rotationMultMod=1.3;_.lastPinchScale=1;_.lastGestureRotate=0;_.mousedown=function(e){this.lastPoint=e.p;};_.dblclick=function(e){// center structure\nthis.center();this.repaint();};_.drag=function(e){if(!this.lastPoint.multi){if(monitor.ALT){var t=new structures.Point(e.p.x,e.p.y);t.sub(this.lastPoint);for(var i=0,ii=this.molecules.length;i<ii;i++){var mol=this.molecules[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){mol.atoms[j].add(t);}mol.check();}for(var i=0,ii=this.shapes.length;i<ii;i++){var sps=this.shapes[i].getPoints();for(var j=0,jj=sps.length;j<jj;j++){sps[j].add(t);}}this.lastPoint=e.p;this.repaint();}else{if(this.rotate3D===true){var diameter=m.max(this.width/4,this.height/4);var difx=e.p.x-this.lastPoint.x;var dify=e.p.y-this.lastPoint.y;var yIncrement=difx/diameter*this.rotationMultMod;var xIncrement=-dify/diameter*this.rotationMultMod;var matrix=[];m4.identity(matrix);m4.rotate(matrix,xIncrement,[1,0,0]);m4.rotate(matrix,yIncrement,[0,1,0]);for(var i=0,ii=this.molecules.length;i<ii;i++){var mol=this.molecules[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];var p=[a.x-this.width/2,a.y-this.height/2,a.z];m4.multiplyVec3(matrix,p);a.x=p[0]+this.width/2;a.y=p[1]+this.height/2;a.z=p[2];}for(var i=0,ii=mol.rings.length;i<ii;i++){mol.rings[i].center=mol.rings[i].getCenter();}this.lastPoint=e.p;if(this.specs.atoms_display&&this.specs.atoms_circles_2D){mol.sortAtomsByZ();}if(this.specs.bonds_display&&this.specs.bonds_clearOverlaps_2D){mol.sortBondsByZ();}}this.repaint();}else{var center=new structures.Point(this.width/2,this.height/2);var before=center.angle(this.lastPoint);var after=center.angle(e.p);this.specs.rotateAngle-=after-before;this.lastPoint=e.p;this.repaint();}}}};_.mousewheel=function(e,delta){this.specs.scale+=delta/50;if(this.specs.scale<.01){this.specs.scale=.01;}this.repaint();};_.multitouchmove=function(e,numFingers){if(numFingers===2){if(this.lastPoint.multi){var t=new structures.Point(e.p.x,e.p.y);t.sub(this.lastPoint);for(var i=0,ii=this.molecules.length;i<ii;i++){var m=this.molecules[i];for(var j=0,jj=m.atoms.length;j<jj;j++){m.atoms[j].add(t);}m.check();}for(var i=0,ii=this.shapes.length;i<ii;i++){var sps=this.shapes[i].getPoints();for(var j=0,jj=sps.length;j<jj;j++){sps[j].add(t);}}this.lastPoint=e.p;this.lastPoint.multi=true;this.repaint();}else{this.lastPoint=e.p;this.lastPoint.multi=true;}}};_.gesturechange=function(e){if(e.originalEvent.scale-this.lastPinchScale!==0){this.specs.scale*=e.originalEvent.scale/this.lastPinchScale;if(this.specs.scale<.01){this.specs.scale=.01;}this.lastPinchScale=e.originalEvent.scale;}if(this.lastGestureRotate-e.originalEvent.rotation!==0){var rot=(this.lastGestureRotate-e.originalEvent.rotation)/180*m.PI;var center=new structures.Point(this.width/2,this.height/2);for(var i=0,ii=this.molecules.length;i<ii;i++){var mol=this.molecules[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];var dist=center.distance(a);var angle=center.angle(a)+rot;a.x=center.x+dist*m.cos(angle);a.y=center.y-dist*m.sin(angle);}mol.check();}this.lastGestureRotate=e.originalEvent.rotation;}this.repaint();};_.gestureend=function(e){this.lastPinchScale=1;this.lastGestureRotate=0;};})(ChemDoodle,ChemDoodle.monitor,ChemDoodle.structures,Math,ChemDoodle.lib.mat4);(function(c,undefined){'use strict';c.ViewerCanvas=function(id,width,height){if(id){this.create(id,width,height);}};c.ViewerCanvas.prototype=new c._Canvas();})(ChemDoodle);(function(c,document,undefined){'use strict';c._SpectrumCanvas=function(id,width,height){if(id){this.create(id,width,height);}};var _=c._SpectrumCanvas.prototype=new c._Canvas();_.spectrum=undefined;_.emptyMessage='No Spectrum Loaded or Recognized';_.loadMolecule=undefined;_.getMolecule=undefined;_.innerRepaint=function(ctx){if(this.spectrum&&this.spectrum.data.length>0){this.spectrum.draw(ctx,this.specs,this.width,this.height);}else if(this.emptyMessage){ctx.fillStyle='#737683';ctx.textAlign='center';ctx.textBaseline='middle';ctx.font='18px Helvetica, Verdana, Arial, Sans-serif';ctx.fillText(this.emptyMessage,this.width/2,this.height/2);}};_.loadSpectrum=function(spectrum){this.spectrum=spectrum;this.repaint();};_.getSpectrum=function(){return this.spectrum;};_.getSpectrumCoordinates=function(x,y){return spectrum.getInternalCoordinates(x,y,this.width,this.height);};})(ChemDoodle,document);(function(c,undefined){'use strict';c.ObserverCanvas=function(id,width,height){if(id){this.create(id,width,height);}};c.ObserverCanvas.prototype=new c._SpectrumCanvas();})(ChemDoodle);(function(c,undefined){'use strict';c.OverlayCanvas=function(id,width,height){if(id){this.create(id,width,height);}};var _=c.OverlayCanvas.prototype=new c._SpectrumCanvas();_.overlaySpectra=[];_.superRepaint=_.innerRepaint;_.innerRepaint=function(ctx){this.superRepaint(ctx);if(this.spectrum&&this.spectrum.data.length>0){for(var i=0,ii=this.overlaySpectra.length;i<ii;i++){var s=this.overlaySpectra[i];if(s&&s.data.length>0){s.minX=this.spectrum.minX;s.maxX=this.spectrum.maxX;s.drawPlot(ctx,this.specs,this.width,this.height,this.spectrum.memory.offsetTop,this.spectrum.memory.offsetLeft,this.spectrum.memory.offsetBottom);}}}};_.addSpectrum=function(spectrum){if(!this.spectrum){this.spectrum=spectrum;}else{this.overlaySpectra.push(spectrum);}};})(ChemDoodle);(function(c,monitor,m,undefined){'use strict';c.PerspectiveCanvas=function(id,width,height){if(id){this.create(id,width,height);}};var _=c.PerspectiveCanvas.prototype=new c._SpectrumCanvas();_.dragRange=undefined;_.rescaleYAxisOnZoom=true;_.lastPinchScale=1;_.mousedown=function(e){this.dragRange=new c.structures.Point(e.p.x,e.p.x);};_.mouseup=function(e){if(this.dragRange&&this.dragRange.x!==this.dragRange.y){if(!this.dragRange.multi){var newScale=this.spectrum.zoom(this.dragRange.x,e.p.x,this.width,this.rescaleYAxisOnZoom);if(this.rescaleYAxisOnZoom){this.specs.scale=newScale;}}this.dragRange=undefined;this.repaint();}};_.drag=function(e){if(this.dragRange){if(this.dragRange.multi){this.dragRange=undefined;}else if(monitor.SHIFT){this.spectrum.translate(e.p.x-this.dragRange.x,this.width);this.dragRange.x=e.p.x;this.dragRange.y=e.p.x;}else{this.dragRange.y=e.p.x;}this.repaint();}};_.drawChildExtras=function(ctx){if(this.dragRange){var xs=m.min(this.dragRange.x,this.dragRange.y);var xe=m.max(this.dragRange.x,this.dragRange.y);ctx.strokeStyle='gray';ctx.lineStyle=1;ctx.beginPath();ctx.moveTo(xs,this.height/2);for(var i=xs;i<=xe;i++){if(i%10<5){ctx.lineTo(i,m.round(this.height/2));}else{ctx.moveTo(i,m.round(this.height/2));}}ctx.stroke();}};_.mousewheel=function(e,delta){this.specs.scale+=delta/10;if(this.specs.scale<.01){this.specs.scale=.01;}this.repaint();};_.dblclick=function(e){this.spectrum.setup();this.specs.scale=1;this.repaint();};_.multitouchmove=function(e,numFingers){if(numFingers===2){if(!this.dragRange||!this.dragRange.multi){this.dragRange=new c.structures.Point(e.p.x,e.p.x);this.dragRange.multi=true;}else{this.spectrum.translate(e.p.x-this.dragRange.x,this.width);this.dragRange.x=e.p.x;this.dragRange.y=e.p.x;this.repaint();}}};_.gesturechange=function(e){this.specs.scale*=e.originalEvent.scale/this.lastPinchScale;if(this.specs.scale<.01){this.specs.scale=.01;}this.lastPinchScale=e.originalEvent.scale;this.repaint();};_.gestureend=function(e){this.lastPinchScale=1;};})(ChemDoodle,ChemDoodle.monitor,Math);(function(c,extensions,m,undefined){'use strict';c.SeekerCanvas=function(id,width,height,seekType){if(id){this.create(id,width,height);}this.seekType=seekType;};var _=c.SeekerCanvas.prototype=new c._SpectrumCanvas();_.superRepaint=_.innerRepaint;_.innerRepaint=function(ctx){this.superRepaint(ctx);if(this.spectrum&&this.spectrum.data.length>0&&this.p){// set up coords\nvar renderP;var internalP;if(this.seekType===c.SeekerCanvas.SEEK_POINTER){renderP=this.p;internalP=this.spectrum.getInternalCoordinates(renderP.x,renderP.y);}else if(this.seekType===c.SeekerCanvas.SEEK_PLOT||this.seekType===c.SeekerCanvas.SEEK_PEAK){internalP=this.seekType===c.SeekerCanvas.SEEK_PLOT?this.spectrum.getClosestPlotInternalCoordinates(this.p.x):this.spectrum.getClosestPeakInternalCoordinates(this.p.x);if(!internalP){return;}renderP={x:this.spectrum.getTransformedX(internalP.x,this.specs,this.width,this.spectrum.memory.offsetLeft),y:this.spectrum.getTransformedY(internalP.y/100,this.specs,this.height,this.spectrum.memory.offsetBottom,this.spectrum.memory.offsetTop)};}// draw point\nctx.fillStyle='white';ctx.strokeStyle=this.specs.plots_color;ctx.lineWidth=this.specs.plots_width;ctx.beginPath();ctx.arc(renderP.x,renderP.y,3,0,m.PI*2,false);ctx.fill();ctx.stroke();// draw internal coordinates\nctx.font=extensions.getFontString(this.specs.text_font_size,this.specs.text_font_families);ctx.textAlign='left';ctx.textBaseline='bottom';var s='x:'+internalP.x.toFixed(3)+', y:'+internalP.y.toFixed(3);var x=renderP.x+3;var w=ctx.measureText(s).width;if(x+w>this.width-2){x-=6+w;}var y=renderP.y;if(y-this.specs.text_font_size-2<0){y+=this.specs.text_font_size;}ctx.fillRect(x,y-this.specs.text_font_size,w,this.specs.text_font_size);ctx.fillStyle='black';ctx.fillText(s,x,y);}};_.mouseout=function(e){this.p=undefined;this.repaint();};_.mousemove=function(e){this.p={x:e.p.x-2,y:e.p.y-3};this.repaint();};_.touchstart=function(e){this.mousemove(e);};_.touchmove=function(e){this.mousemove(e);};_.touchend=function(e){this.mouseout(e);};c.SeekerCanvas.SEEK_POINTER='pointer';c.SeekerCanvas.SEEK_PLOT='plot';c.SeekerCanvas.SEEK_PEAK='peak';})(ChemDoodle,ChemDoodle.extensions,Math);(function(c,extensions,math,structures,d3,RESIDUE,m,document,m4,m3,v3,q,window,undefined){'use strict';c._Canvas3D=function(id,width,height){if(id){this.create(id,width,height);}};var _=c._Canvas3D.prototype=new c._Canvas();var _super=c._Canvas.prototype;_.rotationMatrix=undefined;_.lastPoint=undefined;_.emptyMessage='WebGL is Unavailable!';_.lastPinchScale=1;_.lastGestureRotate=0;_.afterLoadContent=function(){var bounds=new math.Bounds();for(var i=0,ii=this.molecules.length;i<ii;i++){bounds.expand(this.molecules[i].getBounds3D());}// build fog parameter\nvar maxDimension3D=v3.dist([bounds.maxX,bounds.maxY,bounds.maxZ],[bounds.minX,bounds.minY,bounds.minZ])/2+1.5;if(maxDimension3D===Infinity){// there is no content\nmaxDimension3D=10;}this.maxDimension=m.max(bounds.maxX-bounds.minX,bounds.maxY-bounds.minY);var fov=m.min(179.9,m.max(this.specs.projectionPerspectiveVerticalFieldOfView_3D,0.1));var theta=fov/360*m.PI;var tanTheta=m.tan(theta)/0.8;var top=maxDimension3D;var focalLength=top/tanTheta;var near=focalLength-top;var far=focalLength+top;var aspect=this.width/this.height;this.camera.fieldOfView=fov;this.camera.near=near;this.camera.far=far;this.camera.aspect=aspect;m4.translate(m4.identity(this.camera.viewMatrix),[0,0,-focalLength]);var lightFocalLength=top/m.tan(theta);this.lighting.camera.fieldOfView=fov;this.lighting.camera.near=lightFocalLength-top;this.lighting.camera.far=lightFocalLength+top;this.lighting.updateView();this.setupScene();};_.renderDepthMap=function(){if(this.specs.shadow_3D&&d3.DepthShader){var cullFaceEnabled=this.gl.isEnabled(this.gl.CULL_FACE);if(!cullFaceEnabled){this.gl.enable(this.gl.CULL_FACE);}this.depthShader.useShaderProgram(this.gl);// current clear color\nvar cs=this.gl.getParameter(this.gl.COLOR_CLEAR_VALUE);this.gl.clearColor(1.0,1.0,1.0,0.0);this.lightDepthMapFramebuffer.bind(this.gl,this.shadowTextureSize,this.shadowTextureSize);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);// use light projection matrix to draw the molecule\nthis.depthShader.setProjectionMatrix(this.gl,this.lighting.camera.projectionMatrix);this.depthShader.enableAttribsArray(this.gl);for(var i=0,ii=this.molecules.length;i<ii;i++){this.molecules[i].render(this.gl,this.specs);}this.gl.flush();this.depthShader.disableAttribsArray(this.gl);this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null);// set back the clear color\nthis.gl.clearColor(cs[0],cs[1],cs[2],cs[3]);if(!cullFaceEnabled){this.gl.disable(this.gl.CULL_FACE);}}};// draw anything those not molecules, example compass, shapes, text etc.\n_.renderExtras=function(){this.phongShader.useShaderProgram(this.gl);this.phongShader.enableAttribsArray(this.gl);var transparentShapes=[];for(var i=0,ii=this.shapes.length;i<ii;i++){var s=this.shapes[i];if(s instanceof d3._Surface&&(!s.specs&&this.specs.surfaces_alpha!==1||s.specs&&s.specs.surfaces_alpha!==1)){transparentShapes.push(s);}else{s.render(this.gl,this.specs);}}// transparent shapes\nif(transparentShapes.length!==0){//this.gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\nthis.gl.blendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA);this.gl.enable(this.gl.BLEND);this.gl.depthMask(false);for(var i=0,ii=transparentShapes.length;i<ii;i++){var s=transparentShapes[i];s.render(this.gl,this.specs);}this.gl.depthMask(true);this.gl.disable(this.gl.BLEND);this.gl.blendFuncSeparate(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA,this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA);}this.phongShader.setShadow(this.gl,false);this.phongShader.setFogMode(this.gl,0);this.phongShader.setFlatColor(this.gl,false);// compass use its own model view and projection matrix\n// so it need to use back the default matrix for other\n// rendering process (ex. render arbitrary text).\nif(this.specs.compass_display){this.phongShader.setLightDirection(this.gl,[0,0,-1]);this.compass.render(this.gl,this.specs);}this.phongShader.disableAttribsArray(this.gl);this.gl.flush();// enable blend and depth mask set to false\nthis.gl.enable(this.gl.BLEND);this.gl.depthMask(false);this.labelShader.useShaderProgram(this.gl);// use back the default model view matrix\nthis.labelShader.setMatrixUniforms(this.gl,this.gl.modelViewMatrix);// use back the default projection matrix\nthis.labelShader.setProjectionMatrix(this.gl,this.camera.projectionMatrix);this.labelShader.setDimension(this.gl,this.gl.canvas.clientWidth,this.gl.canvas.clientHeight);// enable vertex for draw text\nthis.labelShader.enableAttribsArray(this.gl);// draw label molecule\nif(this.specs.atoms_displayLabels_3D){this.label3D.render(this.gl,this.specs,this.getMolecules());}// draw measurement text\nif(this.specs.measurement_displayText_3D){for(var i=0,ii=this.shapes.length;i<ii;i++){var s=this.shapes[i];if(s.renderText){s.renderText(this.gl,this.specs);}}}// draw compass X Y Z text\nif(this.specs.compass_display&&this.specs.compass_displayText_3D){this.compass.renderAxis(this.gl);}// disable vertex for draw text\nthis.labelShader.disableAttribsArray(this.gl);// disable blend and depth mask set to true\nthis.gl.disable(this.gl.BLEND);this.gl.depthMask(true);this.gl.flush();if(this.drawChildExtras){this.drawChildExtras(this.gl);}this.gl.flush();};// molecule colors rendeing will both use on forward and deferred rendering\n_.renderColor=function(){this.phongShader.useShaderProgram(this.gl);this.gl.uniform1i(this.phongShader.shadowDepthSampleUniform,0);this.gl.activeTexture(this.gl.TEXTURE0);this.gl.bindTexture(this.gl.TEXTURE_2D,this.lightDepthMapTexture.texture);this.phongShader.setProjectionMatrix(this.gl,this.camera.projectionMatrix);this.phongShader.setShadow(this.gl,this.specs.shadow_3D);this.phongShader.setFlatColor(this.gl,this.specs.flat_color_3D);this.phongShader.setGammaCorrection(this.gl,this.specs.gammaCorrection_3D);this.phongShader.setShadowTextureSize(this.gl,this.shadowTextureSize,this.shadowTextureSize);this.phongShader.setShadowIntensity(this.gl,this.specs.shadow_intensity_3D);this.phongShader.setFogMode(this.gl,this.specs.fog_mode_3D);this.phongShader.setFogColor(this.gl,this.fogging.colorRGB);this.phongShader.setFogStart(this.gl,this.fogging.fogStart);this.phongShader.setFogEnd(this.gl,this.fogging.fogEnd);this.phongShader.setFogDensity(this.gl,this.fogging.density);this.phongShader.setLightProjectionMatrix(this.gl,this.lighting.camera.projectionMatrix);this.phongShader.setLightDiffuseColor(this.gl,this.lighting.diffuseRGB);this.phongShader.setLightSpecularColor(this.gl,this.lighting.specularRGB);this.phongShader.setLightDirection(this.gl,this.lighting.direction);this.phongShader.enableAttribsArray(this.gl);for(var i=0,ii=this.molecules.length;i<ii;i++){this.molecules[i].render(this.gl,this.specs);}this.phongShader.disableAttribsArray(this.gl);this.gl.flush();};_.renderPosition=function(){this.positionShader.useShaderProgram(this.gl);this.positionShader.setProjectionMatrix(this.gl,this.camera.projectionMatrix);this.positionShader.enableAttribsArray(this.gl);for(var i=0,ii=this.molecules.length;i<ii;i++){this.molecules[i].render(this.gl,this.specs);}this.positionShader.disableAttribsArray(this.gl);this.gl.flush();};_.renderNormal=function(){this.normalShader.useShaderProgram(this.gl);this.normalShader.setProjectionMatrix(this.gl,this.camera.projectionMatrix);this.normalShader.enableAttribsArray(this.gl);for(var i=0,ii=this.molecules.length;i<ii;i++){this.molecules[i].render(this.gl,this.specs);}this.normalShader.disableAttribsArray(this.gl);this.gl.flush();};_.renderSSAO=function(){this.ssaoShader.useShaderProgram(this.gl);this.ssaoShader.setProjectionMatrix(this.gl,this.camera.projectionMatrix);this.ssaoShader.setSampleKernel(this.gl,this.ssao.sampleKernel);this.ssaoShader.setKernelRadius(this.gl,this.specs.ssao_kernel_radius);this.ssaoShader.setPower(this.gl,this.specs.ssao_power);this.ssaoShader.setGbufferTextureSize(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.uniform1i(this.ssaoShader.positionSampleUniform,0);this.gl.uniform1i(this.ssaoShader.normalSampleUniform,1);this.gl.uniform1i(this.ssaoShader.noiseSampleUniform,2);this.gl.activeTexture(this.gl.TEXTURE0);this.gl.bindTexture(this.gl.TEXTURE_2D,this.positionTexture.texture);this.gl.activeTexture(this.gl.TEXTURE1);this.gl.bindTexture(this.gl.TEXTURE_2D,this.normalTexture.texture);this.gl.activeTexture(this.gl.TEXTURE2);this.gl.bindTexture(this.gl.TEXTURE_2D,this.ssao.noiseTexture);this.gl.activeTexture(this.gl.TEXTURE0);this.ssaoShader.enableAttribsArray(this.gl);this.gl.quadBuffer.bindBuffers(this.gl);this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.gl.quadBuffer.vertexPositionBuffer.numItems);this.ssaoShader.disableAttribsArray(this.gl);this.gl.flush();// render ssao blur shader\nthis.ssaoFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clear(this.gl.COLOR_BUFFER_BIT);this.ssaoBlurShader.useShaderProgram(this.gl);this.ssaoBlurShader.setGbufferTextureSize(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.uniform1i(this.ssaoBlurShader.aoSampleUniform,0);this.gl.uniform1i(this.ssaoBlurShader.depthSampleUniform,1);this.gl.activeTexture(this.gl.TEXTURE0);this.gl.bindTexture(this.gl.TEXTURE_2D,this.imageTexture.texture);this.gl.activeTexture(this.gl.TEXTURE1);this.gl.bindTexture(this.gl.TEXTURE_2D,this.depthTexture.texture);this.gl.activeTexture(this.gl.TEXTURE0);this.ssaoBlurShader.enableAttribsArray(this.gl);this.gl.quadBuffer.bindBuffers(this.gl);this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.gl.quadBuffer.vertexPositionBuffer.numItems);this.ssaoBlurShader.disableAttribsArray(this.gl);this.gl.activeTexture(this.gl.TEXTURE0);this.gl.flush();};_.renderOutline=function(){this.outlineShader.useShaderProgram(this.gl);this.outlineShader.setGbufferTextureSize(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.outlineShader.setNormalThreshold(this.gl,this.specs.outline_normal_threshold);this.outlineShader.setDepthThreshold(this.gl,this.specs.outline_depth_threshold);this.outlineShader.setThickness(this.gl,this.specs.outline_thickness);this.gl.uniform1i(this.outlineShader.normalSampleUniform,0);this.gl.uniform1i(this.outlineShader.depthSampleUniform,1);this.gl.activeTexture(this.gl.TEXTURE0);this.gl.bindTexture(this.gl.TEXTURE_2D,this.normalTexture.texture);this.gl.activeTexture(this.gl.TEXTURE1);this.gl.bindTexture(this.gl.TEXTURE_2D,this.depthTexture.texture);this.gl.activeTexture(this.gl.TEXTURE0);this.outlineShader.enableAttribsArray(this.gl);this.gl.quadBuffer.bindBuffers(this.gl);this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.gl.quadBuffer.vertexPositionBuffer.numItems);this.outlineShader.disableAttribsArray(this.gl);this.gl.flush();};_.deferredRender=function(){// get backdground color\nvar bgColor=this.gl.getParameter(this.gl.COLOR_CLEAR_VALUE);// set background to black\nthis.gl.clearColor(0.0,0.0,0.0,0.0);// render color\nthis.colorFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);this.renderColor();// render position\nthis.positionFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);this.renderPosition();// render normals\nthis.normalFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);this.renderNormal();// render ssao\nif(this.specs.ssao_3D&&d3.SSAOShader){// render ssao shading\nthis.quadFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clear(this.gl.COLOR_BUFFER_BIT);this.renderSSAO();}else{this.ssaoFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clearColor(1.0,1.0,1.0,1.0);this.gl.clear(this.gl.COLOR_BUFFER_BIT);}// render outline\nthis.outlineFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clearColor(1.0,1.0,1.0,1.0);this.gl.clear(this.gl.COLOR_BUFFER_BIT);if(this.specs.outline_3D){this.renderOutline();}// set back background color\nthis.gl.clearColor(bgColor[0],bgColor[1],bgColor[2],bgColor[3]);// composite render\nthis.quadFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clear(this.gl.COLOR_BUFFER_BIT);this.lightingShader.useShaderProgram(this.gl);this.gl.uniform1i(this.lightingShader.positionSampleUniform,0);this.gl.uniform1i(this.lightingShader.colorSampleUniform,1);this.gl.uniform1i(this.lightingShader.ssaoSampleUniform,2);this.gl.uniform1i(this.lightingShader.outlineSampleUniform,3);this.gl.activeTexture(this.gl.TEXTURE0);this.gl.bindTexture(this.gl.TEXTURE_2D,this.positionTexture.texture);this.gl.activeTexture(this.gl.TEXTURE1);this.gl.bindTexture(this.gl.TEXTURE_2D,this.colorTexture.texture);this.gl.activeTexture(this.gl.TEXTURE2);this.gl.bindTexture(this.gl.TEXTURE_2D,this.ssaoTexture.texture);this.gl.activeTexture(this.gl.TEXTURE3);this.gl.bindTexture(this.gl.TEXTURE_2D,this.outlineTexture.texture);this.gl.activeTexture(this.gl.TEXTURE0);this.lightingShader.enableAttribsArray(this.gl);this.gl.quadBuffer.bindBuffers(this.gl);this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.gl.quadBuffer.vertexPositionBuffer.numItems);this.lightingShader.disableAttribsArray(this.gl);this.gl.flush();// final render\nthis.fxaaFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);// setup viewport\nthis.gl.viewport(0,0,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.bindTexture(this.gl.TEXTURE_2D,this.imageTexture.texture);this.fxaaShader.useShaderProgram(this.gl);this.fxaaShader.setBuffersize(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.fxaaShader.setAntialias(this.gl,this.specs.antialias_3D);this.fxaaShader.setEdgeThreshold(this.gl,this.specs.fxaa_edgeThreshold);this.fxaaShader.setEdgeThresholdMin(this.gl,this.specs.fxaa_edgeThresholdMin);this.fxaaShader.setSearchSteps(this.gl,this.specs.fxaa_searchSteps);this.fxaaShader.setSearchThreshold(this.gl,this.specs.fxaa_searchThreshold);this.fxaaShader.setSubpixCap(this.gl,this.specs.fxaa_subpixCap);this.fxaaShader.setSubpixTrim(this.gl,this.specs.fxaa_subpixTrim);this.fxaaShader.enableAttribsArray(this.gl);this.gl.quadBuffer.bindBuffers(this.gl);this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.gl.quadBuffer.vertexPositionBuffer.numItems);this.fxaaShader.disableAttribsArray(this.gl);this.gl.flush();// final render\nthis.finalFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.renderExtras();// set back background color\nthis.gl.clearColor(bgColor[0],bgColor[1],bgColor[2],bgColor[3]);// last render\nthis.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);// setup viewport\nthis.gl.viewport(0,0,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.bindTexture(this.gl.TEXTURE_2D,this.fxaaTexture.texture);this.quadShader.useShaderProgram(this.gl);this.quadShader.enableAttribsArray(this.gl);this.gl.quadBuffer.bindBuffers(this.gl);this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.gl.quadBuffer.vertexPositionBuffer.numItems);this.quadShader.disableAttribsArray(this.gl);this.gl.flush();};_.forwardRender=function(){// last render\nthis.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);// setup viewport\nthis.gl.viewport(0,0,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.renderColor();this.renderExtras();};_.repaint=function(){if(this.gl){// set up the model view matrix to the specified transformations\nthis.gl.lightViewMatrix=m4.multiply(this.lighting.camera.viewMatrix,this.rotationMatrix,[]);this.gl.rotationMatrix=this.rotationMatrix;this.gl.modelViewMatrix=this.gl.lightViewMatrix;this.renderDepthMap();this.gl.modelViewMatrix=m4.multiply(this.camera.viewMatrix,this.rotationMatrix,[]);if(this.isSupportDeferred()&&(this.specs.ssao_3D||this.specs.outline_3D)){this.deferredRender();}else{this.forwardRender();}}};_.pick=function(x,y,includeAtoms,includeBonds){if(this.gl){// draw with pick framebuffer\nvar xu=x;var yu=this.height-y;if(this.pixelRatio!==1){xu*=this.pixelRatio;yu*=this.pixelRatio;}// set up the model view matrix to the specified transformations\nm4.multiply(this.camera.viewMatrix,this.rotationMatrix,this.gl.modelViewMatrix);this.gl.rotationMatrix=this.rotationMatrix;this.pickShader.useShaderProgram(this.gl);// current clear color\nvar cs=this.gl.getParameter(this.gl.COLOR_CLEAR_VALUE);this.gl.clearColor(1.0,1.0,1.0,0.0);this.pickerFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);// use default projection matrix to draw the molecule\nthis.pickShader.setProjectionMatrix(this.gl,this.camera.projectionMatrix);// not need the normal for diffuse light, we need flat color\nthis.pickShader.enableAttribsArray(this.gl);var objects=[];for(var i=0,ii=this.molecules.length;i<ii;i++){this.molecules[i].renderPickFrame(this.gl,this.specs,objects,includeAtoms,includeBonds);}this.pickShader.disableAttribsArray(this.gl);this.gl.flush();var rgba=new Uint8Array(4);this.gl.readPixels(xu-2,yu+2,1,1,this.gl.RGBA,this.gl.UNSIGNED_BYTE,rgba);var object=undefined;var idxMolecule=rgba[3];if(idxMolecule>0){var idxAtom=rgba[2]|rgba[1]<<8|rgba[0]<<16;object=objects[idxAtom];}this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null);// set back the clear color\nthis.gl.clearColor(cs[0],cs[1],cs[2],cs[3]);return object;}return undefined;};_.center=function(){var p=new structures.Atom();for(var k=0,kk=this.molecules.length;k<kk;k++){var m=this.molecules[k];p.add3D(m.getCenter3D());}p.x/=this.molecules.length;p.y/=this.molecules.length;for(var k=0,kk=this.molecules.length;k<kk;k++){var m=this.molecules[k];for(var i=0,ii=m.atoms.length;i<ii;i++){m.atoms[i].sub3D(p);}if(m.chains&&m.fromJSON){for(var i=0,ii=m.chains.length;i<ii;i++){var chain=m.chains[i];for(var j=0,jj=chain.length;j<jj;j++){var residue=chain[j];residue.cp1.sub3D(p);residue.cp2.sub3D(p);if(residue.cp3){residue.cp3.sub3D(p);residue.cp4.sub3D(p);residue.cp5.sub3D(p);}}}}}};_.isSupportDeferred=function(){return this.gl.textureFloatExt&&this.gl.depthTextureExt;};_.create=function(id,width,height){_super.create.call(this,id,width,height);// setup gl object\ntry{var canvas=document.getElementById(this.id);this.gl=canvas.getContext('webgl');if(!this.gl){this.gl=canvas.getContext('experimental-webgl');}}catch(e){}if(this.gl){if(this.pixelRatio!==1&&this.gl.canvas.width===this.width){this.gl.canvas.style.width=this.width+'px';this.gl.canvas.style.height=this.height+'px';this.gl.canvas.width=this.width*this.pixelRatio;this.gl.canvas.height=this.height*this.pixelRatio;}this.gl.enable(this.gl.DEPTH_TEST);this.gl.depthFunc(this.gl.LEQUAL);this.gl.blendFuncSeparate(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA,this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA);this.gl.clearDepth(1.0);// size of texture for render depth map from light view\nthis.shadowTextureSize=1024;// setup matrices\nthis.rotationMatrix=m4.identity([]);// set up camera\nthis.camera=new d3.Camera();this.label3D=new d3.Label();this.lighting=new d3.Light(this.specs.lightDiffuseColor_3D,this.specs.lightSpecularColor_3D,this.specs.lightDirection_3D);this.fogging=new d3.Fog(this.specs.fog_color_3D||this.specs.backgroundColor,this.specs.fog_start_3D,this.specs.fog_end_3D,this.specs.fog_density_3D);// uncomment this line to see shadow without depth texture extension\nthis.gl.depthTextureExt=this.gl.getExtension('WEBGL_depth_texture')||this.gl.getExtension('WEBKIT_WEBGL_depth_texture')||this.gl.getExtension('MOZ_WEBGL_depth_texture');this.gl.textureFloatExt=this.gl.getExtension('OES_texture_float')||this.gl.getExtension('WEBKIT_OES_texture_float')||this.gl.getExtension('MOZ_OES_texture_float');// this.gl.shaderTextureLodExt = this.gl.getExtension('EXT_shader_texture_lod') || this.gl.getExtension('WEBKIT_EXT_shader_texture_lod') || this.gl.getExtension('MOZ_EXT_shader_texture_lod');\n// this.gl.drawBuffersExt = this.gl.getExtension('WEBGL_draw_buffers');\nthis.ssao=new d3.SSAO();// set picker color attachment\nthis.pickerColorTexture=new d3.Texture();this.pickerColorTexture.init(this.gl,this.gl.UNSIGNED_BYTE,this.gl.RGBA,this.gl.RGBA);// set picker depth attachment \nthis.pickerDepthRenderbuffer=new d3.Renderbuffer();this.pickerDepthRenderbuffer.init(this.gl,this.gl.DEPTH_COMPONENT16);// set picker framebuffer\nthis.pickerFramebuffer=new d3.Framebuffer();this.pickerFramebuffer.init(this.gl);this.pickerFramebuffer.setColorTexture(this.gl,this.pickerColorTexture.texture);this.pickerFramebuffer.setDepthRenderbuffer(this.gl,this.pickerDepthRenderbuffer.renderbuffer);// depth map for shadowing\nthis.lightDepthMapTexture=new d3.Texture();this.lightDepthMapRenderbuffer=new d3.Renderbuffer();this.lightDepthMapFramebuffer=new d3.Framebuffer();this.lightDepthMapFramebuffer.init(this.gl);if(this.gl.depthTextureExt){this.lightDepthMapTexture.init(this.gl,this.gl.UNSIGNED_SHORT,this.gl.DEPTH_COMPONENT);this.lightDepthMapRenderbuffer.init(this.gl,this.gl.RGBA4);this.lightDepthMapFramebuffer.setColorRenderbuffer(this.gl,this.lightDepthMapRenderbuffer.renderbuffer);this.lightDepthMapFramebuffer.setDepthTexture(this.gl,this.lightDepthMapTexture.texture);}else{this.lightDepthMapTexture.init(this.gl,this.gl.UNSIGNED_BYTE,this.gl.RGBA,this.gl.RGBA);this.lightDepthMapRenderbuffer.init(this.gl,this.gl.DEPTH_COMPONENT16);this.lightDepthMapFramebuffer.setColorTexture(this.gl,this.lightDepthMapTexture.texture);this.lightDepthMapFramebuffer.setDepthRenderbuffer(this.gl,this.lightDepthMapRenderbuffer.renderbuffer);}// deferred shading textures, renderbuffers, framebuffers and shaders\nif(this.isSupportDeferred()){// g-buffer\nthis.depthTexture=new d3.Texture();this.depthTexture.init(this.gl,this.gl.UNSIGNED_SHORT,this.gl.DEPTH_COMPONENT);this.colorTexture=new d3.Texture();this.colorTexture.init(this.gl,this.gl.UNSIGNED_BYTE,this.gl.RGBA);this.positionTexture=new d3.Texture();this.positionTexture.init(this.gl,this.gl.FLOAT,this.gl.RGBA);this.normalTexture=new d3.Texture();this.normalTexture.init(this.gl,this.gl.FLOAT,this.gl.RGBA);// postprocesing effect\n// ssao\nthis.ssaoTexture=new d3.Texture();this.ssaoTexture.init(this.gl,this.gl.FLOAT,this.gl.RGBA);// outline\nthis.outlineTexture=new d3.Texture();this.outlineTexture.init(this.gl,this.gl.UNSIGNED_BYTE,this.gl.RGBA);this.fxaaTexture=new d3.Texture();this.fxaaTexture.init(this.gl,this.gl.FLOAT,this.gl.RGBA);// temp texture\nthis.imageTexture=new d3.Texture();this.imageTexture.init(this.gl,this.gl.FLOAT,this.gl.RGBA);// framebuffer\nthis.colorFramebuffer=new d3.Framebuffer();this.colorFramebuffer.init(this.gl);this.colorFramebuffer.setColorTexture(this.gl,this.colorTexture.texture);this.colorFramebuffer.setDepthTexture(this.gl,this.depthTexture.texture);this.normalFramebuffer=new d3.Framebuffer();this.normalFramebuffer.init(this.gl);this.normalFramebuffer.setColorTexture(this.gl,this.normalTexture.texture);this.normalFramebuffer.setDepthTexture(this.gl,this.depthTexture.texture);this.positionFramebuffer=new d3.Framebuffer();this.positionFramebuffer.init(this.gl);this.positionFramebuffer.setColorTexture(this.gl,this.positionTexture.texture);this.positionFramebuffer.setDepthTexture(this.gl,this.depthTexture.texture);this.ssaoFramebuffer=new d3.Framebuffer();this.ssaoFramebuffer.init(this.gl);this.ssaoFramebuffer.setColorTexture(this.gl,this.ssaoTexture.texture);this.outlineFramebuffer=new d3.Framebuffer();this.outlineFramebuffer.init(this.gl);this.outlineFramebuffer.setColorTexture(this.gl,this.outlineTexture.texture);this.fxaaFramebuffer=new d3.Framebuffer();this.fxaaFramebuffer.init(this.gl);this.fxaaFramebuffer.setColorTexture(this.gl,this.fxaaTexture.texture);this.quadFramebuffer=new d3.Framebuffer();this.quadFramebuffer.init(this.gl);this.quadFramebuffer.setColorTexture(this.gl,this.imageTexture.texture);this.finalFramebuffer=new d3.Framebuffer();this.finalFramebuffer.init(this.gl);this.finalFramebuffer.setColorTexture(this.gl,this.fxaaTexture.texture);this.finalFramebuffer.setDepthTexture(this.gl,this.depthTexture.texture);this.normalShader=new d3.NormalShader();this.normalShader.init(this.gl);this.positionShader=new d3.PositionShader();this.positionShader.init(this.gl);if(d3.SSAOShader){this.ssaoShader=new d3.SSAOShader();this.ssaoShader.init(this.gl);this.ssaoBlurShader=new d3.SSAOBlurShader();this.ssaoBlurShader.init(this.gl);}this.outlineShader=new d3.OutlineShader();this.outlineShader.init(this.gl);this.lightingShader=new d3.LightingShader();this.lightingShader.init(this.gl);this.fxaaShader=new d3.FXAAShader();this.fxaaShader.init(this.gl);this.quadShader=new d3.QuadShader();this.quadShader.init(this.gl);}// this is the shaders\nthis.labelShader=new d3.LabelShader();this.labelShader.init(this.gl);this.pickShader=new d3.PickShader();this.pickShader.init(this.gl);this.phongShader=new d3.PhongShader();this.phongShader.init(this.gl);if(d3.DepthShader){this.depthShader=new d3.DepthShader();this.depthShader.init(this.gl);}this.textTextImage=new d3.TextImage();this.textTextImage.init(this.gl);this.gl.textImage=new d3.TextImage();this.gl.textImage.init(this.gl);this.gl.textMesh=new d3.TextMesh();this.gl.textMesh.init(this.gl);// set up material\nthis.gl.material=new d3.Material();this.setupScene();}else{this.displayMessage();}};_.displayMessage=function(){var canvas=document.getElementById(this.id);if(canvas.getContext){var ctx=canvas.getContext('2d');if(this.specs.backgroundColor){ctx.fillStyle=this.specs.backgroundColor;ctx.fillRect(0,0,this.width,this.height);}if(this.emptyMessage){ctx.fillStyle='#737683';ctx.textAlign='center';ctx.textBaseline='middle';ctx.font='18px Helvetica, Verdana, Arial, Sans-serif';ctx.fillText(this.emptyMessage,this.width/2,this.height/2);}}};_.renderText=function(text,position){var vertexData={position:[],texCoord:[],translation:[]};this.textTextImage.pushVertexData(text,position,0,vertexData);this.gl.textMesh.storeData(this.gl,vertexData.position,vertexData.texCoord,vertexData.translation);this.textTextImage.useTexture(this.gl);this.gl.textMesh.render(this.gl);};_.setupScene=function(){if(this.gl){// clear the canvas\n// set background color for IE's sake, seems like an IE bug where half the repaints don't render a background\nvar jqCapsule=q('#'+this.id);jqCapsule.css('background-color',this.specs.backgroundColor);var cs=math.getRGB(this.specs.backgroundColor,1);this.gl.clearColor(cs[0],cs[1],cs[2],1.0);this.specs.cullBackFace_3D?this.gl.enable(this.gl.CULL_FACE):this.gl.disable(this.gl.CULL_FACE);// here is the sphere buffer to be drawn, make it once, then scale\n// and translate to draw atoms\nthis.gl.sphereBuffer=new d3.Sphere(1,this.specs.atoms_resolution_3D,this.specs.atoms_resolution_3D);this.gl.starBuffer=new d3.Star();this.gl.cylinderBuffer=new d3.Cylinder(1,1,this.specs.bonds_resolution_3D);this.gl.cylinderClosedBuffer=new d3.Cylinder(1,1,this.specs.bonds_resolution_3D,true);this.gl.boxBuffer=new d3.Box(1,1,1);this.gl.pillBuffer=new d3.Pill(this.specs.bonds_pillDiameter_3D/2,this.specs.bonds_pillHeight_3D,this.specs.bonds_pillLatitudeResolution_3D,this.specs.bonds_pillLongitudeResolution_3D);this.gl.lineBuffer=new d3.Line();this.gl.lineArrowBuffer=new d3.LineArrow();this.gl.arrowBuffer=new d3.Arrow(0.3,this.specs.compass_resolution_3D);this.gl.quadBuffer=new d3.Quad();// texture for rendering text\nthis.gl.textImage.updateFont(this.gl,this.specs.text_font_size,this.specs.text_font_families,this.specs.text_font_bold,this.specs.text_font_italic,this.specs.text_font_stroke_3D);// set up lighting\nthis.lighting.lightScene(this.specs.lightDiffuseColor_3D,this.specs.lightSpecularColor_3D,this.specs.lightDirection_3D);// set up fogging\nthis.fogging.fogScene(this.specs.fog_color_3D||this.specs.backgroundColor,this.specs.fog_start_3D,this.specs.fog_end_3D,this.specs.fog_density_3D);// set up compass\nthis.compass=new d3.Compass(this.gl,this.specs);// set texture and renderbuffer parameter\nthis.lightDepthMapTexture.setParameter(this.gl,this.shadowTextureSize,this.shadowTextureSize);this.lightDepthMapRenderbuffer.setParameter(this.gl,this.shadowTextureSize,this.shadowTextureSize);this.pickerColorTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.pickerDepthRenderbuffer.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);if(this.isSupportDeferred()){this.depthTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.colorTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.imageTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.positionTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.normalTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.ssaoTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.outlineTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.fxaaTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);// set SSAO parameter\nthis.ssao.initSampleKernel(this.specs.ssao_kernel_samples);this.ssao.initNoiseTexture(this.gl);}this.camera.updateProjectionMatrix(this.specs.projectionPerspective_3D);for(var k=0,kk=this.molecules.length;k<kk;k++){var mol=this.molecules[k];if(!(mol.labelMesh instanceof d3.TextMesh)){mol.labelMesh=new d3.TextMesh();mol.labelMesh.init(this.gl);}if(mol.chains){mol.ribbons=[];mol.cartoons=[];mol.tubes=[];mol.pipePlanks=[];// set up ribbon diagram if available and not already setup\nfor(var j=0,jj=mol.chains.length;j<jj;j++){var rs=mol.chains[j];for(var i=0,ii=rs.length-1;i<ii;i++){rs[i].Test=i;}var isNucleotide=rs.length>3&&RESIDUE[rs[3].name]&&RESIDUE[rs[3].name].aminoColor==='#BEA06E';if(rs.length>0&&!rs[0].lineSegments){for(var i=0,ii=rs.length-1;i<ii;i++){rs[i].setup(rs[i+1].cp1,isNucleotide?1:this.specs.proteins_horizontalResolution);}if(!isNucleotide){for(var i=1,ii=rs.length-1;i<ii;i++){// reverse guide points if carbonyl\n// orientation flips\nif(extensions.vec3AngleFrom(rs[i-1].D,rs[i].D)>m.PI/2){rs[i].guidePointsSmall.reverse();rs[i].guidePointsLarge.reverse();v3.scale(rs[i].D,-1);}}}for(var i=2,ii=rs.length-3;i<ii;i++){// compute line segments\nrs[i].computeLineSegments(rs[i-2],rs[i-1],rs[i+1],!isNucleotide,isNucleotide?this.specs.nucleics_verticalResolution:this.specs.proteins_verticalResolution);}// remove unneeded dummies\nrs.pop();rs.pop();rs.pop();rs.shift();rs.shift();}// create the hsl color for the chain\nvar rgb=math.hsl2rgb(jj===1?.5:j/jj,1,.5);var chainColor='rgb('+rgb[0]+','+rgb[1]+','+rgb[2]+')';rs.chainColor=chainColor;if(isNucleotide){var t=new d3.Tube(rs,this.specs.nucleics_tubeThickness,this.specs.nucleics_tubeResolution_3D);t.chainColor=chainColor;mol.tubes.push(t);}else{var t=new d3.PipePlank(rs,this.specs);mol.pipePlanks.push(t);var res=rs.shift();var r={front:new d3.Ribbon(rs,this.specs.proteins_ribbonThickness,false),back:new d3.Ribbon(rs,-this.specs.proteins_ribbonThickness,false)};r.front.chainColor=chainColor;r.back.chainColor=chainColor;mol.ribbons.push(r);var d={front:new d3.Ribbon(rs,this.specs.proteins_ribbonThickness,true),back:new d3.Ribbon(rs,-this.specs.proteins_ribbonThickness,true)};d.front.chainColor=chainColor;d.back.chainColor=chainColor;mol.cartoons.push(d);rs.unshift(res);}}}}this.label3D.updateVerticesBuffer(this.gl,this.getMolecules(),this.specs);// the molecules in frame of MovieCanvas3D must be handled\nif(this instanceof c.MovieCanvas3D&&this.frames){for(var i=0,ii=this.frames.length;i<ii;i++){var f=this.frames[i];for(var j=0,jj=f.mols.length;j<jj;j++){var mol=f.mols[j];if(!(mol.labelMesh instanceof structures.d3.TextMesh)){mol.labelMesh=new structures.d3.TextMesh();mol.labelMesh.init(this.gl);}}this.label3D.updateVerticesBuffer(this.gl,f.mols,this.specs);}}}};_.updateScene=function(){this.camera.updateProjectionMatrix(this.specs.projectionPerspective_3D);this.lighting.lightScene(this.specs.lightDiffuseColor_3D,this.specs.lightSpecularColor_3D,this.specs.lightDirection_3D);this.fogging.fogScene(this.specs.fog_color_3D||this.specs.backgroundColor,this.specs.fog_start_3D,this.specs.fog_end_3D,this.specs.fog_density_3D);this.repaint();};_.mousedown=function(e){this.lastPoint=e.p;};_.mouseup=function(e){this.lastPoint=undefined;};_.rightmousedown=function(e){this.lastPoint=e.p;};_.drag=function(e){if(this.lastPoint){if(c.monitor.ALT){var t=new structures.Point(e.p.x,e.p.y);t.sub(this.lastPoint);var theta=this.camera.fieldOfView/360*m.PI;var tanTheta=m.tan(theta);var topScreen=this.height/2/this.camera.zoom;var nearScreen=topScreen/tanTheta;var nearRatio=this.camera.focalLength()/nearScreen;m4.translate(this.camera.viewMatrix,[t.x*nearRatio,-t.y*nearRatio,0]);}else{var difx=e.p.x-this.lastPoint.x;var dify=e.p.y-this.lastPoint.y;var rotation=m4.rotate(m4.identity([]),difx*m.PI/180.0,[0,1,0]);m4.rotate(rotation,dify*m.PI/180.0,[1,0,0]);this.rotationMatrix=m4.multiply(rotation,this.rotationMatrix);}this.lastPoint=e.p;this.repaint();}};_.mousewheel=function(e,delta){delta>0?this.camera.zoomIn():this.camera.zoomOut();this.updateScene();};_.multitouchmove=function(e,numFingers){if(numFingers===2){if(this.lastPoint&&this.lastPoint.multi){var t=new structures.Point(e.p.x,e.p.y);t.sub(this.lastPoint);var theta=this.camera.fieldOfView/360*m.PI;var tanTheta=m.tan(theta);var topScreen=this.height/2/this.camera.zoom;var nearScreen=topScreen/tanTheta;var nearRatio=this.camera.focalLength()/nearScreen;m4.translate(this.camera.viewMatrix,[t.x*nearRatio,-t.y*nearRatio,0]);this.lastPoint=e.p;this.repaint();}else{this.lastPoint=e.p;this.lastPoint.multi=true;}}};_.gesturechange=function(e){if(e.originalEvent.scale-this.lastPinchScale!==0){var minFov=0.1;var maxFov=179.9;var dz=-(e.originalEvent.scale/this.lastPinchScale-1)*30;if(isNaN(dz)){// this seems to happen on Android when using multiple fingers\nreturn;}dz>0?this.camera.zoomIn():this.camera.zoomOut();this.updateScene();this.lastPinchScale=e.originalEvent.scale;}this.repaint();};_.gestureend=function(e){this.lastPinchScale=1;this.lastGestureRotate=0;};})(ChemDoodle,ChemDoodle.extensions,ChemDoodle.math,ChemDoodle.structures,ChemDoodle.structures.d3,ChemDoodle.RESIDUE,Math,document,ChemDoodle.lib.mat4,ChemDoodle.lib.mat3,ChemDoodle.lib.vec3,ChemDoodle.lib.jQuery,window);(function(c,iChemLabs,q,document,undefined){'use strict';c.MolGrabberCanvas3D=function(id,width,height){if(id){this.create(id,width,height);}var sb=[];sb.push('<br><input type=\"text\" id=\"');sb.push(id);sb.push('_query\" size=\"32\" value=\"\" />');sb.push('<br><nobr>');sb.push('<select id=\"');sb.push(id);sb.push('_select\">');// sb.push('<option value=\"chemexper\">ChemExper');\n// sb.push('<option value=\"chemspider\">ChemSpider');\nsb.push('<option value=\"pubchem\" selected>PubChem');sb.push('</select>');sb.push('<button id=\"');sb.push(id);sb.push('_submit\">Show Molecule</button>');sb.push('</nobr>');document.writeln(sb.join(''));var self=this;q('#'+id+'_submit').click(function(){self.search();});q('#'+id+'_query').keypress(function(e){if(e.which===13){self.search();}});};var _=c.MolGrabberCanvas3D.prototype=new c._Canvas3D();_.setSearchTerm=function(term){q('#'+this.id+'_query').val(term);this.search();};_.search=function(){var self=this;iChemLabs.getMoleculeFromDatabase(q('#'+this.id+'_query').val(),{database:q('#'+this.id+'_select').val(),dimension:3},function(mol){self.loadMolecule(mol);});};})(ChemDoodle,ChemDoodle.iChemLabs,ChemDoodle.lib.jQuery,document);(function(c,structures,undefined){'use strict';c.MovieCanvas3D=function(id,width,height){if(id){this.create(id,width,height);}this.frames=[];};c.MovieCanvas3D.PLAY_ONCE=0;c.MovieCanvas3D.PLAY_LOOP=1;c.MovieCanvas3D.PLAY_SPRING=2;var _=c.MovieCanvas3D.prototype=new c._Canvas3D();_.timeout=50;_.frameNumber=0;_.playMode=2;_.reverse=false;_.startAnimation=c._AnimatorCanvas.prototype.startAnimation;_.stopAnimation=c._AnimatorCanvas.prototype.stopAnimation;_.isRunning=c._AnimatorCanvas.prototype.isRunning;_.dblclick=c.RotatorCanvas.prototype.dblclick;_.nextFrame=function(delta){var f=this.frames[this.frameNumber];this.molecules=f.mols;this.shapes=f.shapes;if(this.playMode===2&&this.reverse){this.frameNumber--;if(this.frameNumber<0){this.frameNumber=1;this.reverse=false;}}else{this.frameNumber++;if(this.frameNumber>=this.frames.length){if(this.playMode===2){this.frameNumber-=2;this.reverse=true;}else{this.frameNumber=0;if(this.playMode===0){this.stopAnimation();}}}}};_.center=function(){// override this function to center the entire movie\nvar p=new structures.Atom();var first=this.frames[0];for(var j=0,jj=first.mols.length;j<jj;j++){p.add3D(first.mols[j].getCenter3D());}p.x/=first.mols.length;p.y/=first.mols.length;var center=new structures.Atom();center.sub3D(p);for(var i=0,ii=this.frames.length;i<ii;i++){var f=this.frames[i];for(var j=0,jj=f.mols.length;j<jj;j++){var mol=f.mols[j];for(var k=0,kk=mol.atoms.length;k<kk;k++){mol.atoms[k].add3D(center);}}}};_.addFrame=function(molecules,shapes){this.frames.push({mols:molecules,shapes:shapes});};})(ChemDoodle,ChemDoodle.structures);(function(c,m,m4,undefined){'use strict';// keep these declaration outside the loop to avoid overhead\nvar matrix=[];var xAxis=[1,0,0];var yAxis=[0,1,0];var zAxis=[0,0,1];c.RotatorCanvas3D=function(id,width,height){if(id){this.create(id,width,height);}};var _=c.RotatorCanvas3D.prototype=new c._Canvas3D();_.timeout=33;var increment=m.PI/15;_.xIncrement=increment;_.yIncrement=increment;_.zIncrement=increment;_.startAnimation=c._AnimatorCanvas.prototype.startAnimation;_.stopAnimation=c._AnimatorCanvas.prototype.stopAnimation;_.isRunning=c._AnimatorCanvas.prototype.isRunning;_.dblclick=c.RotatorCanvas.prototype.dblclick;_.mousedown=undefined;_.rightmousedown=undefined;_.drag=undefined;_.mousewheel=undefined;_.nextFrame=function(delta){if(this.molecules.length===0&&this.shapes.length===0){this.stopAnimation();return;}m4.identity(matrix);var change=delta/1000;m4.rotate(matrix,this.xIncrement*change,xAxis);m4.rotate(matrix,this.yIncrement*change,yAxis);m4.rotate(matrix,this.zIncrement*change,zAxis);m4.multiply(this.rotationMatrix,matrix);};})(ChemDoodle,Math,ChemDoodle.lib.mat4);(function(c,undefined){'use strict';c.TransformCanvas3D=function(id,width,height){if(id){this.create(id,width,height);}};c.TransformCanvas3D.prototype=new c._Canvas3D();})(ChemDoodle);(function(c,undefined){'use strict';c.ViewerCanvas3D=function(id,width,height){if(id){this.create(id,width,height);}};var _=c.ViewerCanvas3D.prototype=new c._Canvas3D();_.mousedown=undefined;_.rightmousedown=undefined;_.drag=undefined;_.mousewheel=undefined;})(ChemDoodle);(function(c,extensions,math,document,undefined){'use strict';function PeriodicCell(element,x,y,dimension){this.element=element;this.x=x;this.y=y;this.dimension=dimension;this.allowMultipleSelections=false;}c.PeriodicTableCanvas=function(id,cellDimension){this.padding=5;if(id){this.create(id,cellDimension*18+this.padding*2,cellDimension*10+this.padding*2);}this.cellDimension=cellDimension?cellDimension:20;this.setupTable();this.repaint();};var _=c.PeriodicTableCanvas.prototype=new c._Canvas();_.loadMolecule=undefined;_.getMolecule=undefined;_.getHoveredElement=function(){if(this.hovered){return this.hovered.element;}return undefined;};_.innerRepaint=function(ctx){for(var i=0,ii=this.cells.length;i<ii;i++){this.drawCell(ctx,this.specs,this.cells[i]);}if(this.hovered){this.drawCell(ctx,this.specs,this.hovered);}if(this.selected){this.drawCell(ctx,this.specs,this.selected);}};_.setupTable=function(){this.cells=[];var x=this.padding;var y=this.padding;var count=0;for(var i=0,ii=c.SYMBOLS.length;i<ii;i++){if(count===18){count=0;y+=this.cellDimension;x=this.padding;}var e=c.ELEMENT[c.SYMBOLS[i]];if(e.atomicNumber===2){x+=16*this.cellDimension;count+=16;}else if(e.atomicNumber===5||e.atomicNumber===13){x+=10*this.cellDimension;count+=10;}if((e.atomicNumber<58||e.atomicNumber>71&&e.atomicNumber<90||e.atomicNumber>103)&&e.atomicNumber<=118){this.cells.push(new PeriodicCell(e,x,y,this.cellDimension));x+=this.cellDimension;count++;}}y+=2*this.cellDimension;x=3*this.cellDimension+this.padding;for(var i=57;i<104;i++){var e=c.ELEMENT[c.SYMBOLS[i]];if(e.atomicNumber===90){y+=this.cellDimension;x=3*this.cellDimension+this.padding;}if(e.atomicNumber>=58&&e.atomicNumber<=71||e.atomicNumber>=90&&e.atomicNumber<=103){this.cells.push(new PeriodicCell(e,x,y,this.cellDimension));x+=this.cellDimension;}}};_.drawCell=function(ctx,specs,cell){var radgrad=ctx.createRadialGradient(cell.x+cell.dimension/3,cell.y+cell.dimension/3,cell.dimension*1.5,cell.x+cell.dimension/3,cell.y+cell.dimension/3,cell.dimension/10);radgrad.addColorStop(0,'#000000');radgrad.addColorStop(.7,cell.element.jmolColor);radgrad.addColorStop(1,'#FFFFFF');ctx.fillStyle=radgrad;extensions.contextRoundRect(ctx,cell.x,cell.y,cell.dimension,cell.dimension,cell.dimension/8);if(cell===this.hovered||cell===this.selected||cell.selected){ctx.lineWidth=2;ctx.strokeStyle='#c10000';ctx.stroke();ctx.fillStyle='white';}ctx.fill();ctx.font=extensions.getFontString(specs.text_font_size,specs.text_font_families);ctx.fillStyle=specs.text_color;ctx.textAlign='center';ctx.textBaseline='middle';ctx.fillText(cell.element.symbol,cell.x+cell.dimension/2,cell.y+cell.dimension/2);};_.click=function(e){if(this.hovered){if(this.allowMultipleSelections){this.hovered.selected=!this.hovered.selected;}else{this.selected=this.hovered;}this.repaint();}};_.touchstart=function(e){// try to hover an element\nthis.mousemove(e);};_.mousemove=function(e){var x=e.p.x;var y=e.p.y;this.hovered=undefined;for(var i=0,ii=this.cells.length;i<ii;i++){var c=this.cells[i];if(math.isBetween(x,c.x,c.x+c.dimension)&&math.isBetween(y,c.y,c.y+c.dimension)){this.hovered=c;break;}}this.repaint();};_.mouseout=function(e){this.hovered=undefined;this.repaint();};})(ChemDoodle,ChemDoodle.extensions,ChemDoodle.math,document);(function(io,document,window,undefined){'use strict';io.png={};io.png.string=function(canvas){// this will not work for WebGL canvases in some browsers\n// to fix that you need to set the \"preserveDrawingBuffer\" to true when\n// creating the WebGL context\n// note that this will cause performance issues on some platforms and is\n// therefore not done by default\nreturn document.getElementById(canvas.id).toDataURL('image/png');};io.png.open=function(canvas){window.open(this.string(canvas));};})(ChemDoodle.io,document,window);(function(io,q,undefined){'use strict';io.file={};// this function will only work with files from the same origin it is being\n// called from, unless the receiving server supports XHR2\nio.file.content=function(url,callback){q.get(url,'',callback);};})(ChemDoodle.io,ChemDoodle.lib.jQuery);(function(c,iChemLabs,io,structures,q,location,undefined){'use strict';iChemLabs.SERVER_URL='https://ichemlabs.cloud.chemdoodle.com/icl_cdc_v070001/WebHQ';iChemLabs.inRelay=false;iChemLabs.asynchronous=true;iChemLabs.INFO={userAgent:navigator.userAgent,v_cwc:c.getVersion(),v_jQuery:q.fn.jquery,v_jQuery_ui:q.ui?q.ui.version:'N/A'};var JSON_INTERPRETER=new io.JSONInterpreter();var queue=new structures.Queue();iChemLabs._contactServer=function(call,content,options,callback,errorback){if(this.inRelay){queue.enqueue({'call':call,'content':content,'options':options,'callback':callback,'errorback':errorback});}else{iChemLabs.inRelay=true;q.ajax({dataType:'text',type:'POST',data:JSON.stringify({'call':call,'content':content,'options':options,'info':iChemLabs.INFO}),url:this.SERVER_URL,success:function success(data){var o=JSON.parse(data);if(o.message){alert(o.message);}iChemLabs.inRelay=false;if(callback&&o.content&&!o.stop){callback(o.content);}if(o.stop&&errorback){errorback();}if(!queue.isEmpty()){var next=queue.dequeue();iChemLabs._contactServer(next.call,next.content,next.options,next.callback,next.errorback);}},error:function error(xhr,status,_error){if(call!='checkForUpdates'){alert('Call failed. Please try again. If you continue to see this message, please contact iChemLabs customer support.');}iChemLabs.inRelay=false;if(errorback){errorback();}if(!queue.isEmpty()){var next=queue.dequeue();iChemLabs._contactServer(next.call,next.content,next.options,next.callback,next.errorback);}},xhrFields:{withCredentials:true},async:iChemLabs.asynchronous});}};// undocumented, this call is for clients that have licensed cloud for their\n// own servers\niChemLabs.authenticate=function(credential,options,callback,errorback){this._contactServer('authenticate',{'credential':credential},options,function(content){callback(content);},errorback);};iChemLabs.calculate=function(mol,options,callback,errorback){this._contactServer('calculate',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(content);},errorback);};iChemLabs.createLewisDotStructure=function(mol,options,callback,errorback){this._contactServer('createLewisDot',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(JSON_INTERPRETER.molFrom(content.mol));},errorback);};iChemLabs.generateImage=function(mol,options,callback,errorback){this._contactServer('generateImage',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(content.link);},errorback);};iChemLabs.generateIUPACName=function(mol,options,callback,errorback){this._contactServer('generateIUPACName',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(content.iupac);},errorback);};iChemLabs.getAd=function(callback,errorback){this._contactServer('getAd',{},{},function(content){callback(content.image_url,content.target_url);},errorback);};iChemLabs.getMoleculeFromContent=function(input,options,callback,errorback){this._contactServer('getMoleculeFromContent',{'content':input},options,function(content){var z=false;for(var i=0,ii=content.mol.a.length;i<ii;i++){if(content.mol.a[i].z!==0){z=true;break;}}if(z){for(var i=0,ii=content.mol.a.length;i<ii;i++){content.mol.a[i].x/=20;content.mol.a[i].y/=20;content.mol.a[i].z/=20;}}callback(JSON_INTERPRETER.molFrom(content.mol));},errorback);};iChemLabs.getMoleculeFromDatabase=function(query,options,callback,errorback){this._contactServer('getMoleculeFromDatabase',{'query':query},options,function(content){if(options.dimension===3){for(var i=0,ii=content.mol.a.length;i<ii;i++){content.mol.a[i].x/=20;content.mol.a[i].y/=-20;content.mol.a[i].z/=20;}}callback(JSON_INTERPRETER.molFrom(content.mol));},errorback);};iChemLabs.getOptimizedPDBStructure=function(id,options,callback,errorback){this._contactServer('getOptimizedPDBStructure',{'id':id},options,function(content){var mol;if(content.mol){mol=JSON_INTERPRETER.molFrom(content.mol);}else{mol=new structures.Molecule();}mol.chains=JSON_INTERPRETER.chainsFrom(content.ribbons);mol.fromJSON=true;callback(mol);},errorback);};iChemLabs.getZeoliteFromIZA=function(query,options,callback,errorback){this._contactServer('getZeoliteFromIZA',{'query':query},options,function(content){callback(ChemDoodle.readCIF(content.cif,options.xSuper,options.ySuper,options.zSuper));},errorback);};iChemLabs.isGraphIsomorphism=function(arrow,target,options,callback,errorback){this._contactServer('isGraphIsomorphism',{'arrow':JSON_INTERPRETER.molTo(arrow),'target':JSON_INTERPRETER.molTo(target)},options,function(content){callback(content.value);},errorback);};iChemLabs.isSubgraphIsomorphism=function(arrow,target,options,callback,errorback){this._contactServer('isSubgraphIsomorphism',{'arrow':JSON_INTERPRETER.molTo(arrow),'target':JSON_INTERPRETER.molTo(target)},options,function(content){callback(content.value);},errorback);};iChemLabs.isSupergraphIsomorphism=function(arrow,target,options,callback,errorback){this._contactServer('isSupergraphIsomorphism',{'arrow':JSON_INTERPRETER.molTo(arrow),'target':JSON_INTERPRETER.molTo(target)},options,function(content){callback(content.value);},errorback);};iChemLabs.getSimilarityMeasure=function(first,second,options,callback,errorback){this._contactServer('getSimilarityMeasure',{'first':JSON_INTERPRETER.molTo(first),'second':JSON_INTERPRETER.molTo(second)},options,function(content){callback(content.value);},errorback);};iChemLabs.kekulize=function(mol,options,callback,errorback){this._contactServer('kekulize',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(JSON_INTERPRETER.molFrom(content.mol));},errorback);};iChemLabs.mechanismMatch=function(arrow,targets,options,callback,errorback){this._contactServer('matchMechanism',{'arrow':arrow,'targets':targets},options,function(content){callback(content);},errorback);};iChemLabs.optimize=function(mol,options,callback,errorback){this._contactServer('optimize',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){var optimized=JSON_INTERPRETER.molFrom(content.mol);if(options.dimension===2){for(var i=0,ii=optimized.atoms.length;i<ii;i++){mol.atoms[i].x=optimized.atoms[i].x;mol.atoms[i].y=optimized.atoms[i].y;}callback();}else if(options.dimension===3){for(var i=0,ii=optimized.atoms.length;i<ii;i++){optimized.atoms[i].x/=20;optimized.atoms[i].y/=-20;optimized.atoms[i].z/=20;}callback(optimized);}},errorback);};iChemLabs.readIUPACName=function(iupac,options,callback,errorback){this._contactServer('readIUPACName',{'iupac':iupac},options,function(content){callback(JSON_INTERPRETER.molFrom(content.mol));},errorback);};iChemLabs.readSMILES=function(smiles,options,callback,errorback){this._contactServer('readSMILES',{'smiles':smiles},options,function(content){callback(JSON_INTERPRETER.molFrom(content.mol));},errorback);};iChemLabs.saveFile=function(mol,options,callback,errorback){this._contactServer('saveFile',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(content.link);},errorback);};iChemLabs.simulate13CNMR=function(mol,options,callback,errorback){options.nucleus='C';options.isotope=13;this._contactServer('simulateNMR',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(c.readJCAMP(content.jcamp));},errorback);};iChemLabs.simulate1HNMR=function(mol,options,callback,errorback){options.nucleus='H';options.isotope=1;this._contactServer('simulateNMR',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(c.readJCAMP(content.jcamp));},errorback);};iChemLabs.simulateMassParentPeak=function(mol,options,callback,errorback){this._contactServer('simulateMassParentPeak',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(c.readJCAMP(content.jcamp));},errorback);};iChemLabs.writeSMILES=function(mol,options,callback,errorback){this._contactServer('writeSMILES',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(content.smiles);},errorback);};iChemLabs.version=function(options,callback,errorback){this._contactServer('version',{},options,function(content){callback(content.value);},errorback);};iChemLabs.checkForUpdates=function(options){this._contactServer('checkForUpdates',{'value':location.href},options,function(content){},function(){});};})(ChemDoodle,ChemDoodle.iChemLabs,ChemDoodle.io,ChemDoodle.structures,ChemDoodle.lib.jQuery,location);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGVXZWItdW5wYWNrZWQuanM/YTNjZiJdLCJuYW1lcyI6WyJDaGVtRG9vZGxlIiwiYyIsImlDaGVtTGFicyIsImluZm9ybWF0aWNzIiwiaW8iLCJsaWIiLCJub3RhdGlvbnMiLCJzdHJ1Y3R1cmVzIiwiZDIiLCJkMyIsIlZFUlNJT04iLCJnZXRWZXJzaW9uIiwicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZ2xvYmFsIiwiZGVmaW5lIiwiRkxPQVRfRVBTSUxPTiIsImdsTWF0aCIsIkZsb2F0MzJBcnJheSIsInkiLCJpIiwiSW50MzJBcnJheSIsImJ1ZmZlciIsImludnNxcnQiLCJudW1iZXIiLCJ4MiIsInRocmVlaGFsZnMiLCJudW1iZXIyIiwiTWF0aCIsInNxcnQiLCJNYXRyaXhBcnJheSIsInNldE1hdHJpeEFycmF5VHlwZSIsInR5cGUiLCJkZXRlcm1pbmVNYXRyaXhBcnJheVR5cGUiLCJBcnJheSIsInZlYzMiLCJjcmVhdGUiLCJ2ZWMiLCJkZXN0IiwiY3JlYXRlRnJvbSIsIngiLCJ6Iiwic2V0IiwiZXF1YWwiLCJhIiwiYiIsImFicyIsImFkZCIsInZlYzIiLCJzdWJ0cmFjdCIsIm11bHRpcGx5IiwibmVnYXRlIiwic2NhbGUiLCJ2YWwiLCJub3JtYWxpemUiLCJsZW4iLCJjcm9zcyIsInkyIiwiejIiLCJsZW5ndGgiLCJzcXVhcmVkTGVuZ3RoIiwiZG90IiwiZGlyZWN0aW9uIiwibGVycCIsImRpc3QiLCJ1bnByb2plY3RNYXQiLCJ1bnByb2plY3RWZWMiLCJ1bnByb2plY3QiLCJ2aWV3IiwicHJvaiIsInZpZXdwb3J0IiwibWF0NCIsIm0iLCJ2IiwiaW52ZXJzZSIsIm11bHRpcGx5VmVjNCIsInhVbml0VmVjMyIsInlVbml0VmVjMyIsInpVbml0VmVjMyIsInRtcHZlYzMiLCJyb3RhdGlvblRvIiwicXVhdDQiLCJkIiwiYXhpcyIsImlkZW50aXR5UXVhdDQiLCJmcm9tQW5nbGVBeGlzIiwiUEkiLCJzIiwic0ludiIsInN0ciIsIm1hdDMiLCJtYXQiLCJtMDAiLCJtMDEiLCJtMDIiLCJtMTAiLCJtMTEiLCJtMTIiLCJtMjAiLCJtMjEiLCJtMjIiLCJkZXRlcm1pbmFudCIsImEwMCIsImEwMSIsImEwMiIsImExMCIsImExMSIsImExMiIsImEyMCIsImEyMSIsImEyMiIsImIwMSIsImIxMSIsImIyMSIsImlkIiwibWF0MiIsImIwMCIsImIwMiIsImIxMCIsImIxMiIsImIyMCIsImIyMiIsIm11bHRpcGx5VmVjMiIsIm1hdHJpeCIsIm11bHRpcGx5VmVjMyIsImlkZW50aXR5IiwidHJhbnNwb3NlIiwidG9NYXQ0IiwibTAzIiwibTEzIiwibTIzIiwibTMwIiwibTMxIiwibTMyIiwibTMzIiwiYTAzIiwiYTEzIiwiYTIzIiwiYTMwIiwiYTMxIiwiYTMyIiwiYTMzIiwiYjAzIiwiYjA0IiwiYjA1IiwiYjA2IiwiYjA3IiwiYjA4IiwiYjA5IiwiaW52RGV0IiwidG9Sb3RhdGlvbk1hdCIsInRvTWF0MyIsInRvSW52ZXJzZU1hdDMiLCJiMCIsImIxIiwiYjIiLCJiMyIsInciLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJhbmdsZSIsInQiLCJzaW4iLCJjb3MiLCJyb3RhdGVYIiwicm90YXRlWSIsInJvdGF0ZVoiLCJmcnVzdHVtIiwibGVmdCIsInJpZ2h0IiwiYm90dG9tIiwidG9wIiwibmVhciIsImZhciIsInJsIiwidGIiLCJmbiIsInBlcnNwZWN0aXZlIiwiZm92eSIsImFzcGVjdCIsInRhbiIsIm9ydGhvIiwibG9va0F0IiwiZXllIiwiY2VudGVyIiwidXAiLCJ4MCIsIngxIiwieTAiLCJ5MSIsInowIiwiejEiLCJleWV4IiwiZXlleSIsImV5ZXoiLCJ1cHgiLCJ1cHkiLCJ1cHoiLCJjZW50ZXJ4IiwiY2VudGVyeSIsImNlbnRlcnoiLCJmcm9tUm90YXRpb25UcmFuc2xhdGlvbiIsInF1YXQiLCJ4eCIsInh5IiwieHoiLCJ5eSIsInl6IiwienoiLCJ3eCIsInd5Iiwid3oiLCJjYWxjdWxhdGVXIiwicXVhdDIiLCJxMCIsInExIiwicTIiLCJxMyIsImludkRvdCIsImNvbmp1Z2F0ZSIsInFheCIsInFheSIsInFheiIsInFhdyIsInFieCIsInFieSIsInFieiIsInFidyIsInF4IiwicXkiLCJxeiIsInF3IiwiaXgiLCJpeSIsIml6IiwiaXciLCJzbGVycCIsImNvc0hhbGZUaGV0YSIsImhhbGZUaGV0YSIsInNpbkhhbGZUaGV0YSIsInJhdGlvQSIsInJhdGlvQiIsImFjb3MiLCJmcm9tUm90YXRpb25NYXRyaXgiLCJmVHJhY2UiLCJmUm9vdCIsInNfaU5leHQiLCJqIiwiayIsInRvUXVhdDQiLCJmcm9tQXhlcyIsImhhbGYiLCJ0b0FuZ2xlQXhpcyIsInNyYyIsInNxcmxlbiIsImludmxlbiIsInZlY0EiLCJ2ZWNCIiwiZGl2aWRlIiwic2NhbGFyIiwibWFnIiwiYTAiLCJhMSIsImEyIiwiYTMiLCJkZXQiLCJtYXRBIiwibWF0QiIsInZlYzQiLCJnbE1hdHJpeEFycmF5VHlwZSIsInNnbiIsIlZlY3RvcnMiLCJ2MSIsInYyIiwiZG90UHJvZHVjdCIsInNxdWFyZSIsIm1heFJlY3Vyc2lvbiIsImZsYXRuZXNzVG9sZXJhbmNlIiwicG93IiwiX2Rpc3RhbmNlRnJvbUN1cnZlIiwicG9pbnQiLCJjdXJ2ZSIsImNhbmRpZGF0ZXMiLCJfY29udmVydFRvQmV6aWVyIiwiZGVncmVlIiwiaGlnaGVyRGVncmVlIiwibnVtU29sdXRpb25zIiwiX2ZpbmRSb290cyIsIl9iZXppZXIiLCJuZXdEaXN0IiwibG9jYXRpb24iLCJkaXN0YW5jZSIsIl9uZWFyZXN0UG9pbnRPbkN1cnZlIiwidGQiLCJjZFRhYmxlIiwicm93IiwiY29sdW1uIiwicGFyc2VGbG9hdCIsIm4iLCJsYiIsIm1heCIsInViIiwibWluIiwiZGVwdGgiLCJsZWZ0X2NvdW50IiwicmlnaHRfY291bnQiLCJsZWZ0X3QiLCJyaWdodF90IiwiX2dldENyb3NzaW5nQ291bnQiLCJfaXNGbGF0RW5vdWdoIiwiX2NvbXB1dGVYSW50ZXJjZXB0Iiwibl9jcm9zc2luZ3MiLCJzaWduIiwib2xkX3NpZ24iLCJlcnJvciIsImludGVyY2VwdF8xIiwiaW50ZXJjZXB0XzIiLCJsZWZ0X2ludGVyY2VwdCIsInJpZ2h0X2ludGVyY2VwdCIsImRJbnYiLCJjMSIsImMyIiwibWF4X2Rpc3RhbmNlX2Fib3ZlIiwibWF4X2Rpc3RhbmNlX2JlbG93IiwidmFsdWUiLCJYTEsiLCJZTEsiLCJYTk0iLCJZTk0iLCJYTUsiLCJZTUsiLCJkZXRJbnYiLCJTIiwidGVtcCIsIl9jdXJ2ZUZ1bmN0aW9uQ2FjaGUiLCJfZ2V0Q3VydmVGdW5jdGlvbnMiLCJvcmRlciIsImZucyIsImZfdGVybSIsImxfdGVybSIsImNfdGVybSIsInRfdGVybSIsIm9uZV9taW51c190X3Rlcm0iLCJfdGVybUZ1bmMiLCJ0ZXJtcyIsInAiLCJwdXNoIiwiX3BvaW50T25QYXRoIiwiY2MiLCJfeCIsIl95IiwiX2Rpc3QiLCJwMSIsInAyIiwiX3BvaW50QWxvbmdQYXRoIiwicHJldiIsInRhbGx5IiwiY3VyTG9jIiwiY3VyIiwiX2xlbmd0aCIsIl9wb2ludEFsb25nUGF0aEZyb20iLCJfbG9jYXRpb25BbG9uZ1BhdGhGcm9tIiwiX2dyYWRpZW50QXRQb2ludCIsInNsaWNlIiwiZHkiLCJkeCIsIkluZmluaXR5IiwiYXRhbiIsIl9ncmFkaWVudEF0UG9pbnRBbG9uZ1BhdGhGcm9tIiwiX3BlcnBlbmRpY3VsYXJUb1BhdGhBdCIsIl90aGV0YTIiLCJqc0JlemllciIsImRpc3RhbmNlRnJvbUN1cnZlIiwiZ3JhZGllbnRBdFBvaW50IiwiZ3JhZGllbnRBdFBvaW50QWxvbmdDdXJ2ZUZyb20iLCJuZWFyZXN0UG9pbnRPbkN1cnZlIiwicG9pbnRPbkN1cnZlIiwicG9pbnRBbG9uZ0N1cnZlRnJvbSIsInBlcnBlbmRpY3VsYXJUb0N1cnZlQXQiLCJsb2NhdGlvbkFsb25nQ3VydmVGcm9tIiwiZ2V0TGVuZ3RoIiwiTWFyY2hpbmdDdWJlcyIsImVkZ2VUYWJsZSIsIlVpbnQzMkFycmF5IiwidHJpVGFibGUiLCJjdWJlVmVydHMiLCJlZGdlSW5kZXgiLCJkYXRhIiwiZGltcyIsInZlcnRpY2VzIiwiZmFjZXMiLCJncmlkIiwiZWRnZXMiLCJjdWJlX2luZGV4IiwiZWRnZV9tYXNrIiwibnYiLCJlIiwicDAiLCJmIiwiYW5pbWF0aW9ucyIsIndpbmRvdyIsInVuZGVmaW5lZCIsImV4dCIsInJlcXVlc3RBbmltRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsImVsZW1lbnQiLCJzZXRUaW1lb3V0IiwicmVxdWVzdEludGVydmFsIiwiZGVsYXkiLCJtb3pDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRJbnRlcnZhbCIsInN0YXJ0IiwiRGF0ZSIsImdldFRpbWUiLCJoYW5kbGUiLCJPYmplY3QiLCJsb29wIiwiY3VycmVudCIsImRlbHRhIiwiY2FsbCIsImNsZWFyUmVxdWVzdEludGVydmFsIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9DYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNsZWFySW50ZXJ2YWwiLCJyZXF1ZXN0VGltZW91dCIsImNsZWFyUmVxdWVzdFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJleHRlbnNpb25zIiwidjMiLCJzdHJpbmdTdGFydHNXaXRoIiwibWF0Y2giLCJ2ZWMzQW5nbGVGcm9tIiwibGVuZ3RoMSIsImxlbmd0aDIiLCJjb3NpbmUiLCJjb250ZXh0Um91bmRSZWN0IiwiY3R4Iiwid2lkdGgiLCJoZWlnaHQiLCJyYWRpdXMiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiY2xvc2VQYXRoIiwiY29udGV4dEVsbGlwc2UiLCJoIiwia2FwcGEiLCJveCIsIm95IiwieGUiLCJ5ZSIsInhtIiwieW0iLCJiZXppZXJDdXJ2ZVRvIiwiZ2V0Rm9udFN0cmluZyIsInNpemUiLCJmYW1pbGllcyIsImJvbGQiLCJpdGFsaWMiLCJzYiIsImlpIiwidXNlIiwiaW5kZXhPZiIsImpvaW4iLCJtYXRoIiwicSIsInBhY2siLCJuYW1lZENvbG9ycyIsImFuZ2xlQmV0d2Vlbkxhcmdlc3QiLCJhbmdsZXMiLCJsYXJnZXN0IiwiZGlmIiwibGFzdCIsImlzQmV0d2VlbiIsInRtcCIsImRvY3VtZW50IiwicmVhZHkiLCJjaGVja0ZvclVwZGF0ZXMiLCJnZXRSR0IiLCJjb2xvciIsIm11bHRpcGxpZXIiLCJlcnIiLCJ0b0xvd2VyQ2FzZSIsImNoYXJBdCIsInBhcnNlSW50Iiwic3Vic3RyaW5nIiwiY3MiLCJyZXBsYWNlIiwic3BsaXQiLCJoc2wycmdiIiwibCIsImh1ZTJyZ2IiLCJyIiwiZyIsImlkeDJjb2xvciIsImhleCIsInRvU3RyaW5nIiwiZGlzdGFuY2VGcm9tUG9pbnRUb0xpbmVJbmNsdXNpdmUiLCJsMSIsImwyIiwicmV0cmFjdCIsImFuZ2xlRGlmIiwibmV3QW5nbGVQIiwicERpc3QiLCJwY29wUm90IiwiUG9pbnQiLCJwdWxsIiwiY2FsY3VsYXRlRGlzdGFuY2VJbnRlcmlvciIsInRvIiwiZnJvbSIsImxpbmVzIiwiaW50ZXJzZWN0aW9ucyIsImludGVyc2VjdExpbmVzIiwiYXgiLCJheSIsImJ4IiwiYnkiLCJjeCIsImN5IiwiZGVub21pbmF0b3IiLCJjbGFtcCIsInJhaW5ib3dBdCIsImNvbG9ycyIsInN0ZXAiLCJmbG9vciIsInN0YXJ0Q29sb3IiLCJlbmRDb2xvciIsImxlcnBDb2xvciIsImFuZ2xlQm91bmRzIiwiY29udmVydFRvRGVncmVlcyIsImxpbWl0VG9QaSIsImZ1bGwiLCJpc1BvaW50SW5Qb2x5IiwicG9seSIsInB0IiwialF1ZXJ5IiwiQm91bmRzIiwiXyIsInByb3RvdHlwZSIsIm1pblgiLCJtaW5ZIiwibWluWiIsIm1heFgiLCJtYXhZIiwibWF4WiIsImV4cGFuZCIsImV4cGFuZDNEIiwiZmVhdHVyZURldGVjdGlvbiIsImZlYXR1cmVzIiwic3VwcG9ydHNfY2FudmFzIiwiY3JlYXRlRWxlbWVudCIsImdldENvbnRleHQiLCJzdXBwb3J0c19jYW52YXNfdGV4dCIsImR1bW15X2NhbnZhcyIsImNvbnRleHQiLCJmaWxsVGV4dCIsInN1cHBvcnRzX3dlYmdsIiwic3VwcG9ydHNfeGhyMiIsInN1cHBvcnQiLCJjb3JzIiwic3VwcG9ydHNfdG91Y2giLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJzdXBwb3J0c19nZXN0dXJlIiwiU1lNQk9MUyIsIkVMRU1FTlQiLCJFIiwiRWxlbWVudCIsInN5bWJvbCIsIm5hbWUiLCJhdG9taWNOdW1iZXIiLCJhZGRIIiwiY292YWxlbnRSYWRpdXMiLCJ2ZFdSYWRpdXMiLCJ2YWxlbmN5IiwibWFzcyIsImptb2xDb2xvciIsInB5bW9sQ29sb3IiLCJIIiwiSGUiLCJMaSIsIkJlIiwiQiIsIkMiLCJOIiwiTyIsIkYiLCJOZSIsIk5hIiwiTWciLCJBbCIsIlNpIiwiUCIsIkNsIiwiQXIiLCJLIiwiQ2EiLCJTYyIsIlRpIiwiViIsIkNyIiwiTW4iLCJGZSIsIkNvIiwiTmkiLCJDdSIsIlpuIiwiR2EiLCJHZSIsIkFzIiwiU2UiLCJCciIsIktyIiwiUmIiLCJTciIsIlkiLCJaciIsIk5iIiwiTW8iLCJUYyIsIlJ1IiwiUmgiLCJQZCIsIkFnIiwiQ2QiLCJJbiIsIlNuIiwiU2IiLCJUZSIsIkkiLCJYZSIsIkNzIiwiQmEiLCJMYSIsIkNlIiwiUHIiLCJOZCIsIlBtIiwiU20iLCJFdSIsIkdkIiwiVGIiLCJEeSIsIkhvIiwiRXIiLCJUbSIsIlliIiwiTHUiLCJIZiIsIlRhIiwiVyIsIlJlIiwiT3MiLCJJciIsIlB0IiwiQXUiLCJIZyIsIlRsIiwiUGIiLCJCaSIsIlBvIiwiQXQiLCJSbiIsIkZyIiwiUmEiLCJBYyIsIlRoIiwiUGEiLCJVIiwiTnAiLCJQdSIsIkFtIiwiQ20iLCJCayIsIkNmIiwiRXMiLCJGbSIsIk1kIiwiTm8iLCJMciIsIlJmIiwiRGIiLCJTZyIsIkJoIiwiSHMiLCJNdCIsIkRzIiwiUmciLCJDbiIsIk5oIiwiRmwiLCJNYyIsIkx2IiwiVHMiLCJPZyIsIlJFU0lEVUUiLCJSIiwiUmVzaWR1ZSIsInBvbGFyIiwiYW1pbm9Db2xvciIsInNoYXBlbHlDb2xvciIsImFjaWRpdHkiLCJBbGEiLCJBcmciLCJBc24iLCJBc3AiLCJDeXMiLCJHbG4iLCJHbHUiLCJHbHkiLCJIaXMiLCJJbGUiLCJMZXUiLCJMeXMiLCJNZXQiLCJQaGUiLCJQcm8iLCJTZXIiLCJUaHIiLCJUcnAiLCJUeXIiLCJWYWwiLCJBc3giLCJHbHgiLCJBIiwiRyIsIlQiLCJRdWV1ZSIsInF1ZXVlIiwicXVldWVTcGFjZSIsImdldFNpemUiLCJpc0VtcHR5IiwiZW5xdWV1ZSIsImRlcXVldWUiLCJnZXRPbGRlc3RFbGVtZW50Iiwic3ViIiwiYW5nbGVGb3JTdHVwaWRDYW52YXNBcmNzIiwiQ09NTUFfU1BBQ0VfUkVHRVgiLCJDT01NQV9EQVNIX1JFR0VYIiwiRk9OVFMiLCJRdWVyeSIsImVsZW1lbnRzIiwibm90IiwiY2hhcmdlIiwiY2hpcmFsaXR5IiwiY29ubmVjdGl2aXR5IiwiY29ubmVjdGl2aXR5Tm9IIiwiaHlkcm9nZW5zIiwic2F0dXJhdGlvbiIsIm9yZGVycyIsInN0ZXJlbyIsImFyb21hdGljIiwicmluZ0NvdW50IiwiY2FjaGUiLCJUWVBFX0FUT00iLCJUWVBFX0JPTkQiLCJwYXJzZVJhbmdlIiwicmFuZ2UiLCJwb2ludHMiLCJzcGxpdHMiLCJuZWciLCJuZWcyIiwicGFydHMiLCJkcmF3Iiwic3BlY3MiLCJwb3MiLCJ0ZXh0QWxpZ24iLCJ0ZXh0QmFzZWxpbmUiLCJmb250IiwidHciLCJtZWFzdXJlVGV4dCIsImZpbGxTdHlsZSIsImJhY2tncm91bmRDb2xvciIsImZpbGxSZWN0Iiwib3V0cHV0UmFuZ2UiLCJhcnJheSIsImNvbW1hIiwiYXR0cmlidXRlcyIsIm00IiwiQXRvbSIsImxhYmVsIiwibnVtTG9uZVBhaXIiLCJudW1SYWRpY2FsIiwiaW1wbGljaXRIIiwiY29vcmRpbmF0aW9uTnVtYmVyIiwiYm9uZE51bWJlciIsImFuZ2xlT2ZMZWFzdEludGVyZmVyZW5jZSIsImlzSGlkZGVuIiwiYWx0TGFiZWwiLCJpc0xvbmUiLCJpc0hvdmVyIiwiaXNTZWxlY3RlZCIsImFkZDNEIiwic3ViM0QiLCJkaXN0YW5jZTNEIiwiZHoiLCJkb250RHJhdyIsImlzTGFzc29lZCIsImdyZCIsImNyZWF0ZVJhZGlhbEdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwiYXJjIiwiZmlsbCIsInF1ZXJ5IiwidGV4dEJvdW5kcyIsImF0b21zX2ZvbnRfc2l6ZV8yRCIsImF0b21zX2ZvbnRfZmFtaWxpZXNfMkQiLCJhdG9tc19mb250X2JvbGRfMkQiLCJhdG9tc19mb250X2l0YWxpY18yRCIsImdldEVsZW1lbnRDb2xvciIsImF0b21zX3VzZUpNT0xDb2xvcnMiLCJhdG9tc191c2VQWU1PTENvbG9ycyIsImF0b21zX2NvbG9yIiwiYXRvbXNfSEJsYWNrXzJEIiwiY29sb3JFcnJvciIsImhBbmdsZSIsImxhYmVsVmlzaWJsZSIsImlzTGFiZWxWaXNpYmxlIiwiYXRvbXNfY2lyY2xlc18yRCIsImF0b21zX2NpcmNsZURpYW1ldGVyXzJEIiwiYXRvbXNfY2lyY2xlQm9yZGVyV2lkdGhfMkQiLCJsaW5lV2lkdGgiLCJzdHJva2VTdHlsZSIsInN0cm9rZSIsInN5bWJvbFdpZHRoIiwiQ29uZGVuc2VkTGFiZWwiLCJjb25kZW5zZWQiLCJ0ZXh0IiwibWFzc1dpZHRoIiwiZm9udFNhdmUiLCJjaGFyZ2VPZmZzZXQiLCJudW1IcyIsImdldEltcGxpY2l0SHlkcm9nZW5Db3VudCIsImF0b21zX2ltcGxpY2l0SHlkcm9nZW5zXzJEIiwiaFdpZHRoIiwibW92ZUNoYXJnZSIsInhvZmZzZXQiLCJ5b2Zmc2V0Iiwic3ViRm9udCIsIm51bVdpZHRoIiwidG9GaXhlZCIsImNoYXJnZVdpZHRoIiwiYXMiLCJhbGkiLCJsYSIsImxhcmdlc3RBbmdsZSIsInNvcnQiLCJhbmdsZURhdGEiLCJ0aGluZ3MiLCJtaWQiLCJjZWlsIiwiZHJhd0VsZWN0cm9ucyIsInNlZ21lbnQiLCJib25kcyIsImFuZ2xlU3RhcnQiLCJwMXgiLCJhdG9tc19sb25lUGFpckRpc3RhbmNlXzJEIiwicDF5IiwicGVycCIsImRpZngiLCJhdG9tc19sb25lUGFpclNwcmVhZF8yRCIsImRpZnkiLCJhdG9tc19sb25lUGFpckRpYW1ldGVyXzJEIiwiZHJhd0RlY29yYXRpb25zIiwiY29sb3JIb3ZlciIsImNvbG9yU2VsZWN0IiwiaXNPdmVybGFwIiwicmVuZGVyIiwiZ2wiLCJub0NvbG9yIiwidHJhbnNmb3JtIiwiYXRvbXNfdXNlVkRXRGlhbWV0ZXJzXzNEIiwiYXRvbXNfdmR3TXVsdGlwbGllcl8zRCIsImF0b21zX3NwaGVyZURpYW1ldGVyXzNEIiwibWF0ZXJpYWwiLCJzZXREaWZmdXNlQ29sb3IiLCJzaGFkZXIiLCJzZXRNYXRyaXhVbmlmb3JtcyIsInJlbmRlckFzU3RhciIsInN0YXJCdWZmZXIiLCJzcGhlcmVCdWZmZXIiLCJkcmF3RWxlbWVudHMiLCJUUklBTkdMRVMiLCJ2ZXJ0ZXhJbmRleEJ1ZmZlciIsIm51bUl0ZW1zIiwiVU5TSUdORURfU0hPUlQiLCJyZW5kZXJIaWdobGlnaHQiLCJhdG9tc19kaXNwbGF5QWxsQ2FyYm9uTGFiZWxzXzJEIiwiYXRvbXNfc2hvd0F0dHJpYnV0ZWRDYXJib25zXzJEIiwiYXRvbXNfc2hvd0hpZGRlbkNhcmJvbnNfMkQiLCJhdG9tc19kaXNwbGF5VGVybWluYWxDYXJib25MYWJlbHNfMkQiLCJ2YWxlbmNlIiwidmRpZiIsImdldEJvdW5kcyIsImJvdW5kcyIsImdldEJvdW5kczNEIiwidXNlSk1PTENvbG9ycyIsInVzZVBZTU9MQ29sb3JzIiwiQm9uZCIsImJvbmRPcmRlciIsIlNURVJFT19OT05FIiwiU1RFUkVPX1BST1RSVURJTkciLCJTVEVSRU9fUkVDRVNTRUQiLCJTVEVSRU9fQU1CSUdVT1VTIiwicmluZyIsImdldENlbnRlciIsImdldExlbmd0aDNEIiwiY29udGFpbnMiLCJnZXROZWlnaGJvciIsImRpZlgiLCJkaWZZIiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJ1c2VEaXN0IiwicGVycGVuZGljdWxhciIsIm1jb3NwIiwibXNpbnAiLCJjeDEiLCJjeTEiLCJjeDIiLCJjeTIiLCJjeDMiLCJjeTMiLCJjeDQiLCJjeTQiLCJhdG9tc19kaXNwbGF5IiwiZGlzdFNocmluayIsImJvbmRzX2F0b21MYWJlbEJ1ZmZlcl8yRCIsInBlcmMiLCJib25kc19jbGVhck92ZXJsYXBzXzJEIiwieHMiLCJ5cyIsInhmIiwieWYiLCJib25kc193aWR0aF8yRCIsImJvbmRzX292ZXJsYXBDbGVhcldpZHRoXzJEIiwibGluZUNhcCIsImJvbmRzX2NvbG9yIiwiYm9uZHNfZW5kc18yRCIsImJvbmRzX3NwbGl0Q29sb3IiLCJsaW5lYXJHcmFkaWVudCIsInNwZWNzMSIsInNwZWNzMiIsImNvbG9yMSIsImNvbG9yMiIsImJvbmRzX2NvbG9yR3JhZGllbnQiLCJib25kc19sZXdpc1N0eWxlXzJEIiwiZHJhd0xld2lzU3R5bGUiLCJpbm5lckRpc3QiLCJudW0iLCJib25kc19kb3RTaXplXzJEIiwicmVtYWluZGVyIiwic2V0TGluZURhc2giLCJib25kc19oYXNoU3BhY2luZ18yRCIsInRoaW5TcHJlYWQiLCJib25kc193ZWRnZVRoaWNrbmVzc18yRCIsInNhdmUiLCJjbGlwIiwiYm9uZHNfaGFzaFdpZHRoXzJEIiwicmVzdG9yZSIsImN1cnZlcyIsImJvbmRzX3dhdnlMZW5ndGhfMkQiLCJjdXJ2ZVgiLCJjdXJ2ZVkiLCJjcHgxIiwiY3B4MiIsImNweTEiLCJjcHkyIiwiYm9uZHNfdXNlQWJzb2x1dGVTYXR1cmF0aW9uV2lkdGhzXzJEIiwiYm9uZHNfc2F0dXJhdGlvbldpZHRoQWJzXzJEIiwiYm9uZHNfc2F0dXJhdGlvbldpZHRoXzJEIiwiYm9uZHNfc3ltbWV0cmljYWxfMkQiLCJjbGlwQW5nbGUiLCJib25kc19zYXR1cmF0aW9uQW5nbGVfMkQiLCJ4dXNlMSIsInh1c2UyIiwieXVzZTEiLCJ5dXNlMiIsImZsaXAiLCJwaTIiLCJhbmdsZVRvIiwiaW5jcmVtZW50IiwieGkiLCJ5aSIsInNlcCIsImFzU2VnbWVudHMiLCJyYWRpdXNTY2FsZSIsImJvbmRzX2N5bGluZGVyRGlhbWV0ZXJfM0QiLCJhMUNvbG9yIiwiYTJDb2xvciIsInRyYW5zZm9ybU9wcG9zaXRlIiwiYTJiIiwiYW5nIiwib3RoZXJzIiwic2F0dXJhdGVkQ3Jvc3MiLCJib25kc19zaG93Qm9uZE9yZGVyc18zRCIsInJvdGF0aW9uTWF0cml4Iiwic2VnbWVudFNjYWxlIiwic3BhY2VCZXR3ZWVuUGlsbCIsImJvbmRzX3BpbGxTcGFjaW5nXzNEIiwicGlsbEhlaWdodCIsImJvbmRzX3BpbGxIZWlnaHRfM0QiLCJib25kc19yZW5kZXJBc0xpbmVzXzNEIiwiYm9uZHNfcGlsbERpYW1ldGVyXzNEIiwidG90YWxTcGFjZUZvclBpbGwiLCJ0b3RhbFBpbGxzUGVyQm9uZCIsInBpbGxzUGVyQm9uZCIsImV4dHJhU2VnbWVudGVkU3BhY2UiLCJwYWRkaW5nU3BhY2UiLCJwaWxsU2VnbWVudHNMZW5ndGgiLCJ0cmFuc2Zvcm1Vc2UiLCJkcmF3QXJyYXlzIiwiUE9JTlRTIiwiTElORVMiLCJsaW5lQnVmZmVyIiwidmVydGV4UG9zaXRpb25CdWZmZXIiLCJwaWxsQnVmZmVyIiwic2NhbGVZIiwiaGFsZk9uZU1pblNjYWxlWSIsInNjYWxlVmVjdG9yIiwiVFJJQU5HTEVfU1RSSVAiLCJjeWxpbmRlckJ1ZmZlciIsInJlbmRlclBpY2tlciIsIlJpbmciLCJhdG9tcyIsInNldHVwQm9uZHMiLCJNb2xlY3VsZSIsInJpbmdzIiwiZmluZFJpbmdzIiwiYm9uZHNfZGlzcGxheSIsImlzTWFjcm8iLCJoZXRhdG0iLCJtYWNyb19kaXNwbGF5Qm9uZHMiLCJyZXNpZHVlU3BlY3MiLCJiaW5kQnVmZmVycyIsInNldFRlbXBDb2xvcnMiLCJib25kc19tYXRlcmlhbEFtYmllbnRDb2xvcl8zRCIsImJvbmRzX21hdGVyaWFsU3BlY3VsYXJDb2xvcl8zRCIsImJvbmRzX21hdGVyaWFsU2hpbmluZXNzXzNEIiwibWFjcm9fYXRvbVRvTGlnYW5kRGlzdGFuY2UiLCJjbG9zZXN0RGlzdGFuY2UiLCJtYWNyb19kaXNwbGF5QXRvbXMiLCJhdG9tc19tYXRlcmlhbEFtYmllbnRDb2xvcl8zRCIsImF0b21zX21hdGVyaWFsU3BlY3VsYXJDb2xvcl8zRCIsImF0b21zX21hdGVyaWFsU2hpbmluZXNzXzNEIiwiYXNQaWxscyIsImFzU3BoZXJlcyIsImFzU3RhcnMiLCJtYWNyb19zaG93V2F0ZXIiLCJpc1dhdGVyIiwiYXRvbXNfbm9uQm9uZGVkQXNTdGFyc18zRCIsImNoYWlucyIsInByb3RlaW5zX2Rpc3BsYXlSaWJib24iLCJwcm90ZWluc19tYXRlcmlhbEFtYmllbnRDb2xvcl8zRCIsInByb3RlaW5zX21hdGVyaWFsU3BlY3VsYXJDb2xvcl8zRCIsInByb3RlaW5zX21hdGVyaWFsU2hpbmluZXNzXzNEIiwidXNlcyIsInByb3RlaW5zX3JpYmJvbkNhcnRvb25pemUiLCJjYXJ0b29ucyIsInJpYmJvbnMiLCJqaiIsInByb3RlaW5zX3Jlc2lkdWVDb2xvciIsImZyb250IiwicmFpbmJvdyIsInNlZ21lbnRzIiwibWFjcm9fcmFpbmJvd0NvbG9ycyIsImJhY2siLCJwcm90ZWluc19kaXNwbGF5UGlwZVBsYW5rIiwicGlwZVBsYW5rcyIsInByb3RlaW5zX2Rpc3BsYXlCYWNrYm9uZSIsImFscGhhQ2FyYm9uVHJhY2UiLCJub2RlcyIsInJzIiwiaXNOdWNsZW90aWRlIiwiY3AxIiwiY2hhaW5Db2xvciIsInJlc2lkdWVOYW1lIiwidHJhY2VTcGVjcyIsIlZpc3VhbFNwZWNpZmljYXRpb25zIiwicHJvdGVpbnNfYmFja2JvbmVUaGlja25lc3MiLCJwcm90ZWluc19iYWNrYm9uZUNvbG9yIiwibWFjcm9fY29sb3JCeUNoYWluIiwibnVjbGVpY3NfZGlzcGxheSIsIm51Y2xlaWNzX21hdGVyaWFsQW1iaWVudENvbG9yXzNEIiwibnVjbGVpY3NfbWF0ZXJpYWxTcGVjdWxhckNvbG9yXzNEIiwibnVjbGVpY3NfbWF0ZXJpYWxTaGluaW5lc3NfM0QiLCJ0dWJlcyIsImhpZ2hsaWdodCIsImJsZW5kRnVuYyIsIlNSQ19BTFBIQSIsIk9ORSIsImVuYWJsZSIsIkJMRU5EIiwiZGVwdGhNYXNrIiwic2V0QWxwaGEiLCJkaXNhYmxlIiwiYmxlbmRGdW5jU2VwYXJhdGUiLCJPTkVfTUlOVVNfU1JDX0FMUEhBIiwicmVuZGVyUGlja0ZyYW1lIiwib2JqZWN0cyIsImluY2x1ZGVBdG9tcyIsImluY2x1ZGVCb25kcyIsImdldENlbnRlcjNEIiwiY2hhaW4iLCJyZXNpZHVlIiwiY3AyIiwiZ2V0RGltZW5zaW9uIiwiY2hlY2siLCJmb3JjZSIsImRvQ2hlY2tzIiwiZmpOdW1DYWNoZSIsIlNTU1JGaW5kZXIiLCJjb3VudGVyIiwic29ydEF0b21zQnlaIiwic29ydEJvbmRzQnlaIiwic2V0dXBNZXRhRGF0YSIsImF0b21OdW1DYWNoZSIsImJvbmROdW1DYWNoZSIsImdldEFuZ2xlcyIsImdldENvb3JkaW5hdGlvbk51bWJlciIsImJzIiwiZ2V0Qm9uZHMiLCJpbmRleCIsImhvbGQiLCJtb2xDZW50ZXIiLCJzY2FsZVRvQXZlcmFnZUJvbmRMZW5ndGgiLCJhdkJvbmRMZW5ndGgiLCJnZXRBdmVyYWdlQm9uZExlbmd0aCIsInRvdCIsImdldEF0b21Hcm91cCIsInZpc2l0ZWQiLCJhdG9tIiwiZ2V0Qm9uZEdyb3VwIiwiY29udGFpbmVkIiwiYmkiLCJib25kIiwiU0IiLCJsYXN0VmVydGljYWxSZXNvbHV0aW9uIiwic2V0dXBNYXRyaWNlcyIsInZlcnRpY2FsUmVzb2x1dGlvbiIsIm4yIiwibjMiLCJCbSIsInJlc1NlcSIsInNldHVwIiwibmV4dEFscGhhIiwiaG9yaXpvbnRhbFJlc29sdXRpb24iLCJEIiwiZ3VpZGVQb2ludHNTbWFsbCIsImd1aWRlUG9pbnRzTGFyZ2UiLCJoZWxpeCIsImdldEd1aWRlUG9pbnRTZXQiLCJzaGVldCIsImNvbXB1dGVMaW5lU2VnbWVudHMiLCJkb0NhcnRvb24iLCJzZXRWZXJ0aWNhbFJlc29sdXRpb24iLCJsaW5lU2VnbWVudHMiLCJpbm5lckNvbXB1dGUiLCJsaW5lU2VnbWVudHNDYXJ0b29uIiwidXNlQXJyb3dzIiwidXNlYjIiLCJ1c2ViMSIsInVzZWExIiwibGwiLCJNIiwic3RyYW5kIiwiYXJyb3ciLCJtdWx0IiwibyIsIlNwZWN0cnVtIiwibWV0YWRhdGEiLCJkYXRhRGlzcGxheSIsIm1lbW9yeSIsIm9mZnNldFRvcCIsIm9mZnNldExlZnQiLCJvZmZzZXRCb3R0b20iLCJmbGlwWEF4aXMiLCJ0aXRsZSIsInhVbml0IiwieVVuaXQiLCJjb250aW51b3VzIiwiaW50ZWdyYXRpb25TZW5zaXRpdml0eSIsInRleHRfY29sb3IiLCJ0ZXh0X2ZvbnRfc2l6ZSIsInRleHRfZm9udF9mYW1pbGllcyIsInBsb3RzX3Nob3dZQXhpcyIsInBsb3RzX3Nob3dHcmlkIiwicGxvdHNfZ3JpZENvbG9yIiwicGxvdHNfZ3JpZExpbmVXaWR0aCIsInN0cm9rZVJlY3QiLCJzcGFuIiwibWFqb3IiLCJvdmVybGFwWCIsInBsb3RzX2ZsaXBYQXhpcyIsInJvdW5kIiwiZ2V0VHJhbnNmb3JtZWRYIiwibHMiLCJzcGFueSIsInl2YWwiLCJjdXRvZmYiLCJtY291bnQiLCJkaXNwbGF5IiwidGFnIiwiZHJhd1Bsb3QiLCJwbG90c19jb2xvciIsInBsb3RzX3dpZHRoIiwiaW50ZWdyYXRpb24iLCJyZWN0Iiwic3RhcnRlZCIsInN0b3AiLCJ4bmV4dCIsImdldFRyYW5zZm9ybWVkWSIsInBsb3RzX3Nob3dJbnRlZ3JhdGlvbiIsInBsb3RzX2ludGVncmF0aW9uQ29sb3IiLCJwbG90c19pbnRlZ3JhdGlvbkxpbmVXaWR0aCIsImFzY2VuZGluZyIsImdldEludmVyc2VUcmFuc2Zvcm1lZFkiLCJyZXR1cm5pbmciLCJnZXRJbnZlcnNlVHJhbnNmb3JtZWRYIiwieG1pbiIsIk51bWJlciIsIk1BWF9WQUxVRSIsInhtYXgiLCJNSU5fVkFMVUUiLCJ5bWF4Iiwiem9vbSIsInBpeGVsMSIsInBpeGVsMiIsInJlc2NhbGVZIiwiYWxlcnRNZXRhZGF0YSIsImFsZXJ0IiwiZ2V0SW50ZXJuYWxDb29yZGluYXRlcyIsImdldENsb3Nlc3RQbG90SW50ZXJuYWxDb29yZGluYXRlcyIsInh0bCIsInh0ciIsImhpZ2hlc3QiLCJpblJhbmdlIiwiZ2V0Q2xvc2VzdFBlYWtJbnRlcm5hbENvb3JkaW5hdGVzIiwieHQiLCJjbG9zZXN0IiwiaGlnaGVzdExlZnQiLCJoaWdoZXN0UmlnaHQiLCJtYXhMZWZ0IiwibWF4UmlnaHQiLCJfU2hhcGUiLCJwcyIsImdldFBvaW50cyIsImRyYXdBbmNob3IiLCJob3ZlclBvaW50IiwiaG92ZXJlZCIsImJveFJhZGl1cyIsImlubmVyUmFkaXVzIiwiQXRvbU1hcHBpbmciLCJvMSIsIm8yIiwidGV4dF9mb250X2JvbGQiLCJ0ZXh0X2ZvbnRfaXRhbGljIiwic2hhcGVzX2NvbG9yIiwiaXNPdmVyIiwiYmFycmllciIsIkJyYWNrZXQiLCJyZXBlYXQiLCJsaXAiLCJzaGFwZXNfbGluZVdpZHRoIiwibGluZUpvaW4iLCJqc2IiLCJEeW5hbWljQnJhY2tldCIsIm4xIiwiY29udGVudHMiLCJkcmF3RW5kIiwic3RyZXRjaCIsImFybSIsInBzeCIsInBzeSIsInNjb3MiLCJzc2luIiwicDJ4IiwicDJ5IiwiYXNpbiIsInAxYXgiLCJwMWF5IiwicDJheCIsInAyYXkiLCJwczEiLCJwczIiLCJjb25jYXQiLCJ0ZXh0UG9zIiwic2V0Q29udGVudHMiLCJza2V0Y2hlciIsIm0xIiwiZ2V0TW9sZWN1bGVCeUF0b20iLCJtMiIsInJiIiwic2FtZVNpbmdsZVJpbmciLCJmbGlwcGFibGUiLCJyZWFjaGVkMSIsInJlYWNoZWQyIiwicmVhY2hlZElubmVyIiwiTGluZSIsIkFSUk9XX1NZTlRIRVRJQyIsIkFSUk9XX1JFVFJPU1lOVEhFVElDIiwiQVJST1dfUkVTT05BTkNFIiwiQVJST1dfRVFVSUxJQlJJVU0iLCJhcnJvd1R5cGUiLCJ0b3BUZXh0IiwiYm90dG9tVGV4dCIsInIyIiwic2hhcGVzX2Fycm93TGVuZ3RoXzJEIiwibWNvc2EiLCJtc2luYSIsImF4MSIsImF5MSIsImF4MiIsImF5MiIsInJ4MSIsInJ5MSIsImdldFBvc3NpYmxlQW5nbGVzIiwiZmlyc3RJbmNyZWFzZWQiLCJnZXRQdWxsQmFjayIsInB1bGxiYWNrIiwiZHJhd1B1c2hlciIsIm51bUVsZWN0cm9uIiwiY2FjaGVzIiwiYW5nbGUxIiwiYW5nbGUyIiwicHVsbEJhY2siLCJuYXAiLCJpbmNsdWRlMSIsImluY2x1ZGUyIiwiUHVzaGVyIiwiY29udHJvbERpc3QiLCJhczEiLCJhczIiLCJtaW5EaWYiLCJjMWMiLCJjMmMiLCJjbTEiLCJjbTIiLCJCT05EIiwiVkFQIiwiYXN0ZXJpc2siLCJzdWJzdGl0dWVudCIsImJvbmRUeXBlIiwiYXR0YWNobWVudHMiLCJob3ZlckJvbmQiLCJzcXJ0MyIsImJjc2F2ZSIsIl9NZXNoIiwic3RvcmVEYXRhIiwicG9zaXRpb25EYXRhIiwibm9ybWFsRGF0YSIsImluZGV4RGF0YSIsInNldHVwQnVmZmVycyIsImNyZWF0ZUJ1ZmZlciIsImJpbmRCdWZmZXIiLCJBUlJBWV9CVUZGRVIiLCJidWZmZXJEYXRhIiwiU1RBVElDX0RSQVciLCJpdGVtU2l6ZSIsInZlcnRleE5vcm1hbEJ1ZmZlciIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSIiwiVWludDE2QXJyYXkiLCJwYXJ0aXRpb25zIiwiYnVmZmVycyIsImdlbmVyYXRlQnVmZmVycyIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJ2ZXJ0ZXhQb3NpdGlvbkF0dHJpYnV0ZSIsIkZMT0FUIiwidmVydGV4Tm9ybWFsQXR0cmlidXRlIiwiX01lYXN1cmVtZW50IiwibWVhc3VyZW1lbnRfdXBkYXRlXzNEIiwiY2FsY3VsYXRlRGF0YSIsInJlbmRlclRleHQiLCJnZXRUZXh0IiwidmVydGV4RGF0YSIsInBvc2l0aW9uIiwidGV4Q29vcmQiLCJ0cmFuc2xhdGlvbiIsInRleHRJbWFnZSIsInB1c2hWZXJ0ZXhEYXRhIiwidGV4dE1lc2giLCJ1c2VUZXh0dXJlIiwiQW5nbGUiLCJkaXN0MSIsImRpc3QyIiwiZGlzdFVzZSIsInZlYzEiLCJiYW5kcyIsIm1lYXN1cmVtZW50X2FuZ2xlQmFuZHNfM0QiLCJ0aGV0YSIsInZlY0NvcyIsInZlY1NpbiIsIm5vcm0iLCJ2ZWNDZW50ZXIiLCJBcnJvdyIsImxvbmdpdHVkZUJhbmRzIiwibG9uZ051bWJlciIsInNpblRoZXRhIiwiY29zVGhldGEiLCJvZmZzZXQiLCJmaXJzdCIsInNlY29uZCIsInRoaXJkIiwiZm9ydGgiLCJCb3giLCJDYW1lcmEiLCJmaWVsZE9mVmlldyIsInZpZXdNYXRyaXgiLCJwcm9qZWN0aW9uTWF0cml4IiwicGVyc3BlY3RpdmVQcm9qZWN0aW9uTWF0cml4Iiwib3J0aG9nb25hbFByb2plY3Rpb25NYXRyaXgiLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4IiwiaXNQZXJzcGVjdGl2ZSIsImZvY2FsTGVuZ3RoIiwiem9vbUluIiwiem9vbU91dCIsIkxpbmVBcnJvdyIsIkNvbXBhc3MiLCJUZXh0SW1hZ2UiLCJpbml0IiwidXBkYXRlRm9udCIsInRleHRfZm9udF9zdHJva2VfM0QiLCJUZXh0TWVzaCIsInNjcmVlblJhdGlvSGVpZ2h0IiwiY29tcGFzc19zaXplXzNEIiwiY2FudmFzIiwiY2xpZW50SGVpZ2h0IiwidGFuVGhldGEiLCJwcm9qZWN0aW9uUGVyc3BlY3RpdmVWZXJ0aWNhbEZpZWxkT2ZWaWV3XzNEIiwiYXNwZWMiLCJjbGllbnRXaWR0aCIsImZuUHJvamVjdGlvbiIsInByb2plY3Rpb25QZXJzcGVjdGl2ZV8zRCIsIm5lYXJSYXRpbyIsImNvbXBhc3NfdHlwZV8zRCIsImRlbHRhWCIsImNoYXJIZWlnaHQiLCJkZWx0YVkiLCJ0cmFuc2xhdGlvbk1hdHJpeCIsInJlbmRlckFycm93IiwibXZNYXRyaXgiLCJzZXRNb2RlbFZpZXdNYXRyaXgiLCJsaW5lQXJyb3dCdWZmZXIiLCJhcnJvd0J1ZmZlciIsInNldFByb2plY3Rpb25NYXRyaXgiLCJtb2RlbE1hdHJpeCIsImNvbXBhc3NfYXhpc1hDb2xvcl8zRCIsImNvbXBhc3NfYXhpc1lDb2xvcl8zRCIsImNvbXBhc3NfYXhpc1pDb2xvcl8zRCIsInJlbmRlckF4aXMiLCJDeWxpbmRlciIsImNsb3NlZCIsIkRpc3RhbmNlIiwibm9kZSIsInIxIiwibW92ZSIsImRpc3BsYWNlbWVudCIsImNoYW5nZSIsIkZvZyIsImZvZ1N0YXJ0IiwiZm9nRW5kIiwiZGVuc2l0eSIsImZvZ1NjZW5lIiwiY29sb3JSR0IiLCJMYWJlbCIsInVwZGF0ZVZlcnRpY2VzQnVmZmVyIiwibW9sZWN1bGVzIiwibW9sZWN1bGUiLCJtb2xlY3VsZUxhYmVsIiwibGFiZWxNZXNoIiwiYXRvbUxhYmVsIiwiekRlcHRoIiwibWFjcm9fc2hvd1dhdGVycyIsImtrIiwiU3BoZXJlIiwibGF0aXR1ZGVCYW5kcyIsImxhdE51bWJlciIsInBoaSIsInNpblBoaSIsImNvc1BoaSIsImxvYWRQYXJ0aXRpb24iLCJTdWJSaWJib24iLCJlbnRpcmUiLCJpbmRleGVzIiwicGkiLCJfMiIsImdldENvbG9yIiwiZ2V0UmVzaWR1ZUNvbG9yIiwicHJvdGVpbnNfcmliYm9uQ2FydG9vbkhlbGl4UHJpbWFyeUNvbG9yIiwicHJvdGVpbnNfcmliYm9uQ2FydG9vbkhlbGl4U2Vjb25kYXJ5Q29sb3IiLCJwcm90ZWluc19yaWJib25DYXJ0b29uU2hlZXRDb2xvciIsInByb3RlaW5zX3ByaW1hcnlDb2xvciIsInByb3RlaW5zX3NlY29uZGFyeUNvbG9yIiwibGFzdFJlbmRlciIsIlJpYmJvbiIsImNhcnRvb24iLCJsaW5lU2VnbWVudE51bSIsImxpbmVTZWdtZW50TGVuZ3RoIiwiY3VycmVudFBhcnRpdGlvbiIsImNvdW50IiwibGluZVNlZ21lbnQiLCJkb1NpZGUxIiwiZG9TaWRlMiIsImFib3ZlaSIsImFib3ZlayIsImFib3ZlIiwibmV4dGoiLCJzaWRlIiwidG9BYm92ZSIsInRvU2lkZSIsIm5vcm1hbCIsInBhcnRpdGlvblNlZ21lbnRzIiwibm4iLCJwYXJ0aXRpb25TZWdtZW50SW5kZXhEYXRhIiwiY2hhaW5JbmRleCIsInJlc2lkdWVJbmRleFN0YXJ0IiwiaW5kaXZpZHVhbEluZGV4RGF0YSIsInNlZ21lbnRJbmRleFN0YXJ0IiwibmV4dFJlcyIsImp1bXAiLCJzciIsIkxpZ2h0IiwiZGlmZnVzZUNvbG9yIiwic3BlY3VsYXJDb2xvciIsImNhbWVyYSIsImxpZ2h0U2NlbmUiLCJkaWZmdXNlUkdCIiwic3BlY3VsYXJSR0IiLCJ1cGRhdGVWaWV3IiwibGlnaHREaXIiLCJleWVQb3MiLCJNYXRlcmlhbCIsImFtYmllbnRDb2xvciIsInNoaW5pbmVzcyIsInNldE1hdGVyaWFsQW1iaWVudENvbG9yIiwic2V0TWF0ZXJpYWxEaWZmdXNlQ29sb3IiLCJzZXRNYXRlcmlhbFNwZWN1bGFyQ29sb3IiLCJzZXRNYXRlcmlhbFNoaW5pbmVzcyIsInNldE1hdGVyaWFsQWxwaGEiLCJhbHBoYSIsIlBpY2tlciIsImZyYW1lYnVmZmVyIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJ0ZXh0dXJlMkQiLCJjcmVhdGVUZXh0dXJlIiwicmVuZGVyYnVmZmVyIiwiY3JlYXRlUmVuZGVyYnVmZmVyIiwiYmluZFRleHR1cmUiLCJURVhUVVJFXzJEIiwidGV4UGFyYW1ldGVyaSIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsIk5FQVJFU1QiLCJURVhUVVJFX01JTl9GSUxURVIiLCJURVhUVVJFX1dSQVBfUyIsIkNMQU1QX1RPX0VER0UiLCJURVhUVVJFX1dSQVBfVCIsImJpbmRSZW5kZXJidWZmZXIiLCJSRU5ERVJCVUZGRVIiLCJiaW5kRnJhbWVidWZmZXIiLCJGUkFNRUJVRkZFUiIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiQ09MT1JfQVRUQUNITUVOVDAiLCJmcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciIsIkRFUFRIX0FUVEFDSE1FTlQiLCJzZXREaW1lbnNpb24iLCJnZXRGcmFtZWJ1ZmZlckF0dGFjaG1lbnRQYXJhbWV0ZXIiLCJGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX09CSkVDVF9OQU1FIiwiaXNSZW5kZXJidWZmZXIiLCJyZW5kZXJidWZmZXJTdG9yYWdlIiwiREVQVEhfQ09NUE9ORU5UMTYiLCJpc1RleHR1cmUiLCJ0ZXhJbWFnZTJEIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJQaWxsIiwiY2FwSGVpZ2h0U2NhbGUiLCJjYXBEaWFtZXRlciIsImNyZWF0ZUR1bW15UmVzaWR1ZSIsImR1bW15UmVzIiwiUGlwZSIsInByb3RlaW5zX2N5bGluZGVySGVsaXhEaWFtZXRlciIsImN5bGluZGVyQ2xvc2VkQnVmZmVyIiwiUGxhbmsiLCJ2eCIsImRpcnkiLCJkaXJ6IiwiZGlyeCIsInByb3RlaW5zX3BsYW5rU2hlZXRXaWR0aCIsInByb3RlaW5zX3R1YmVUaGlja25lc3MiLCJib3hCdWZmZXIiLCJQaXBlUGxhbmsiLCJoZWxpeEN5bGluZGVycyIsInNoZWV0UGxhbmtzIiwiY2hhaW5Ob1NTIiwibm9TU1Jlc2lkdWVzIiwiaGVsaXhSZXNpZHVlcyIsInNoZWV0UmVzaWR1ZXMiLCJyMCIsInN0YXJ0UG9pbnQiLCJlbmRQb2ludCIsInVuc2hpZnQiLCJQcyIsIlZzIiwiaGgiLCJjYWkiLCJCbCIsImF4ZXMiLCJQMSIsIlYxIiwiUDIiLCJWMiIsIlAyc3ViUDEiLCJkSCIsImRIbCIsIlAyc3ViUDFsIiwiSDEiLCJIMiIsImZpcnN0UG9pbnQiLCJzZWNvbmRQb2ludCIsInNlY29uZFRvRmlyc3QiLCJzdGFydEF0b20iLCJlbmRBdG9tIiwiaGVsaXhEaXIiLCJhZGRpdGlvbkNwIiwicHJldlJlc0NwIiwiaGVsaXhEaXJUb1ByZXZSZXMiLCJybSIsIm5leHRSZXNDcCIsImhlbGl4RGlyVG9OZXh0UmVzIiwiZ3VpZGVQb2ludHMiLCJncDEiLCJncDIiLCJmaXJzdFJzIiwibGFzdFJzIiwiZmlyc3RHdWlkZVBvaW50cyIsImxhc3RHdWlkZVBvaW50cyIsImNoYWluU2VnbWVudHMiLCJuaHMiLCJsaW5lU2VnbWVudHNMaXN0IiwiQ2F0bXVsbFR1YmUiLCJwcm90ZWluc190dWJlUmVzb2x1dGlvbl8zRCIsInByb3RlaW5zX2hvcml6b250YWxSZXNvbHV0aW9uIiwicHJvdGVpbnNfdHViZUNvbG9yIiwiUXVhZCIsIlNoYXBlIiwidGhpY2tuZXNzIiwibnVtUG9pbnRzIiwibmV4dCIsImN1cnJlbnRQb2ludCIsIm5leHRQb2ludCIsImNlbnRlckluZGV4IiwiU3RhciIsImlzIiwiajEiLCJqMiIsImozIiwicDMiLCJyYXRpbyIsImRldmljZVBpeGVsUmF0aW8iLCJ0ZXh0dXJlSW1hZ2UiLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJjaGFyRGF0YSIsImNoYXJhY3RlciIsImZvbnRTaXplIiwiZm9udEZhbWlsaWVzIiwiZm9udEJvbGQiLCJmb250SXRhbGljIiwiZm9udFN0cm9rZSIsImNvbnRleHRGb250IiwidG90YWxXaWR0aCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNoYXJzIiwiYXJlYUltYWdlIiwic3FydEFyZWEiLCJ0b3RhbFJvd3MiLCJtYXhXaWR0aCIsIm9mZnNldFJvdyIsInBvc1giLCJjaGFyV2lkdGgiLCJjaGFyVGV4dCIsIndpbGxXaWR0aCIsInBvc1kiLCJzdHJva2VUZXh0IiwidGV4dFBpZWNlIiwiaGVpZ2h0SW1hZ2UiLCJnZXRIZWlnaHQiLCJ3aWR0aEltYWdlIiwiZ2V0V2lkdGgiLCJ0ZXh0V2lkdGgiLCJnZXRDYW52YXMiLCJ0ZXN0IiwiYm9keSIsImFwcGVuZENoaWxkIiwidmVydGV4VGV4Q29vcmRCdWZmZXIiLCJ2ZXJ0ZXhUcmFuc2xhdGlvbkJ1ZmZlciIsInNldFZlcnRleERhdGEiLCJ2ZXJ0ZXhCdWZmZXIiLCJ2ZXJ0ZXhQb3NpdGlvbkRhdGEiLCJ2ZXJ0ZXhUZXhDb29yZERhdGEiLCJ2ZXJ0ZXhUcmFuc2xhdGlvbkRhdGEiLCJ2ZXJ0ZXhUZXhDb29yZEF0dHJpYnV0ZSIsIlRvcnNpb24iLCJhNCIsImNyb3NzMTIiLCJjcm9zczIzIiwidG9yc2lvbiIsImF0YW4yIiwidmVjMCIsInZlY1RleHQiLCJhcnJvd0xlbmd0aCIsImIyTm9ybSIsIlBvaW50Um90YXRvciIsIlJ4IiwiUnhUIiwiUnkiLCJSeVQiLCJSeiIsIlR1YmUiLCJjeWxpbmRlclJlc29sdXRpb24iLCJlbmRzIiwic3RhcnRWZWN0b3IiLCJyb3RhdG9yIiwicFBvaW50IiwiaW5kZXhTdGFydCIsInNrIiwicGxhdGZvcm0iLCJudWNsZWljc190dWJlQ29sb3IiLCJudWNsZWljc19yZXNpZHVlQ29sb3IiLCJudWNsZWljc19iYXNlQ29sb3IiLCJjcDMiLCJyTSIsInA0IiwiY3A0IiwicDUiLCJjcDUiLCJwaXZvdCIsImFuZzIiLCJVbml0Q2VsbCIsInVuaXRDZWxsVmVjdG9ycyIsInVuaXRDZWxsIiwicHVzaFNpZGUiLCJ4eXoiLCJGcmFtZWJ1ZmZlciIsInNldENvbG9yVGV4dHVyZSIsInRleHR1cmUiLCJhdHRhY2htZW50Iiwic2V0Q29sb3JSZW5kZXJidWZmZXIiLCJzZXREZXB0aFRleHR1cmUiLCJzZXREZXB0aFJlbmRlcmJ1ZmZlciIsImJpbmQiLCJSZW5kZXJidWZmZXIiLCJmb3JtYXQiLCJzZXRQYXJhbWV0ZXIiLCJTU0FPIiwiaW5pdFNhbXBsZUtlcm5lbCIsImtlcm5lbFNpemUiLCJzYW1wbGVLZXJuZWwiLCJyYW5kb20iLCJzY2FsZTIiLCJpbml0Tm9pc2VUZXh0dXJlIiwibm9pc2VTaXplIiwic3Nhb05vaXNlIiwibm9pc2VUZXh0dXJlIiwiUkdCIiwiUkVQRUFUIiwiVGV4dHVyZSIsImludGVybmFsRm9ybWF0IiwibTMiLCJfU2hhZGVyIiwidXNlU2hhZGVyUHJvZ3JhbSIsInVzZVByb2dyYW0iLCJnUHJvZ3JhbSIsInZlcnRleFNoYWRlciIsImdldFNoYWRlciIsImxvYWREZWZhdWx0VmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJsb2FkRGVmYXVsdEZyYWdtZW50U2hhZGVyIiwiY3JlYXRlUHJvZ3JhbSIsImF0dGFjaFNoYWRlciIsIm9uU2hhZGVyQXR0YWNoZWQiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImdldFByb2dyYW1JbmZvTG9nIiwiaW5pdFVuaWZvcm1Mb2NhdGlvbnMiLCJiaW5kQXR0cmliTG9jYXRpb24iLCJnZXRTaGFkZXJGcm9tU3RyIiwic2hhZGVyVHlwZSIsInN0clNyYyIsImNyZWF0ZVNoYWRlciIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsInNoYWRlclNjcmlwdCIsImdldFNoYWRlckluZm9Mb2ciLCJkZWxldGVTaGFkZXIiLCJlbmFibGVBdHRyaWJzQXJyYXkiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsImRpc2FibGVBdHRyaWJzQXJyYXkiLCJkaXNhYmxlVmVydGV4QXR0cmliQXJyYXkiLCJnZXRFbGVtZW50QnlJZCIsImZpcnN0Q2hpbGQiLCJub2RlVHlwZSIsInRleHRDb250ZW50IiwibmV4dFNpYmxpbmciLCJzZHJTcmMiLCJGUkFHTUVOVF9TSEFERVIiLCJWRVJURVhfU0hBREVSIiwibW9kZWxWaWV3TWF0cml4VW5pZm9ybSIsImdldFVuaWZvcm1Mb2NhdGlvbiIsInByb2plY3Rpb25NYXRyaXhVbmlmb3JtIiwibW9kZWxWaWV3TWF0cml4IiwidW5pZm9ybU1hdHJpeDRmdiIsImFtYmllbnQiLCJkaWZmdXNlIiwic3BlY3VsYXIiLCJGWEFBU2hhZGVyIiwiX3N1cGVyIiwiYnVmZmVyc2l6ZVVuaWZvcm0iLCJhbnRpYWxpYXNVbmlmb3JtIiwiZWRnZVRocmVzaG9sZFVuaWZvcm0iLCJlZGdlVGhyZXNob2xkTWluVW5pZm9ybSIsInNlYXJjaFN0ZXBzVW5pZm9ybSIsInNlYXJjaFRocmVzaG9sZFVuaWZvcm0iLCJzdWJwaXhDYXBVbmlmb3JtIiwic3VicGl4VHJpbVVuaWZvcm0iLCJzZXRCdWZmZXJzaXplIiwidW5pZm9ybTJmIiwic2V0QW50aWFsaWFzIiwidW5pZm9ybTFmIiwic2V0RWRnZVRocmVzaG9sZCIsInNldEVkZ2VUaHJlc2hvbGRNaW4iLCJzZXRTZWFyY2hTdGVwcyIsInVuaWZvcm0xaSIsInNldFNlYXJjaFRocmVzaG9sZCIsInNldFN1YnBpeENhcCIsInNldFN1YnBpeFRyaW0iLCJMYWJlbFNoYWRlciIsImRpbWVuc2lvblVuaWZvcm0iLCJkZXB0aFRleHR1cmVFeHQiLCJMaWdodGluZ1NoYWRlciIsInBvc2l0aW9uU2FtcGxlVW5pZm9ybSIsImNvbG9yU2FtcGxlVW5pZm9ybSIsInNzYW9TYW1wbGVVbmlmb3JtIiwib3V0bGluZVNhbXBsZVVuaWZvcm0iLCJOb3JtYWxTaGFkZXIiLCJub3JtYWxNYXRyaXhVbmlmb3JtIiwibm9ybWFsTWF0cml4IiwidW5pZm9ybU1hdHJpeDNmdiIsIk91dGxpbmVTaGFkZXIiLCJub3JtYWxTYW1wbGVVbmlmb3JtIiwiZGVwdGhTYW1wbGVVbmlmb3JtIiwiZ2J1ZmZlclRleHR1cmVTaXplVW5pZm9ybSIsIm5vcm1hbFRocmVzaG9sZFVuaWZvcm0iLCJkZXB0aFRocmVzaG9sZFVuaWZvcm0iLCJ0aGlja25lc3NVbmlmb3JtIiwic2V0R2J1ZmZlclRleHR1cmVTaXplIiwic2V0Tm9ybWFsVGhyZXNob2xkIiwic2V0RGVwdGhUaHJlc2hvbGQiLCJzZXRUaGlja25lc3MiLCJQaG9uZ1NoYWRlciIsInNoYWRvd1VuaWZvcm0iLCJmbGF0Q29sb3JVbmlmb3JtIiwibGlnaHRNb2RlbFZpZXdNYXRyaXhVbmlmb3JtIiwibGlnaHRQcm9qZWN0aW9uTWF0cml4VW5pZm9ybSIsImxpZ2h0RGlmZnVzZUNvbG9yVW5pZm9ybSIsImxpZ2h0U3BlY3VsYXJDb2xvclVuaWZvcm0iLCJsaWdodERpcmVjdGlvblVuaWZvcm0iLCJtYXRlcmlhbEFtYmllbnRDb2xvclVuaWZvcm0iLCJtYXRlcmlhbERpZmZ1c2VDb2xvclVuaWZvcm0iLCJtYXRlcmlhbFNwZWN1bGFyQ29sb3JVbmlmb3JtIiwibWF0ZXJpYWxTaGluaW5lc3NVbmlmb3JtIiwibWF0ZXJpYWxBbHBoYVVuaWZvcm0iLCJmb2dNb2RlVW5pZm9ybSIsImZvZ0NvbG9yVW5pZm9ybSIsImZvZ1N0YXJ0VW5pZm9ybSIsImZvZ0VuZFVuaWZvcm0iLCJmb2dEZW5zaXR5VW5pZm9ybSIsInNoYWRvd0RlcHRoU2FtcGxlVW5pZm9ybSIsInNoYWRvd1RleHR1cmVTaXplVW5pZm9ybSIsInNoYWRvd0ludGVuc2l0eVVuaWZvcm0iLCJnYW1tYUNvcnJlY3Rpb25Vbmlmb3JtIiwicG9pbnRTaXplVW5pZm9ybSIsInNldExpZ2h0TW9kZWxWaWV3TWF0cml4IiwibGlnaHRWaWV3TWF0cml4IiwibGlnaHRNb2RlbFZpZXdNYXRyaXgiLCJzZXRGbGF0Q29sb3IiLCJlbmFibGVkIiwic2V0U2hhZG93Iiwic2V0Rm9nTW9kZSIsIm1vZGUiLCJzZXRGb2dDb2xvciIsInVuaWZvcm0zZnYiLCJzZXRGb2dTdGFydCIsInNldEZvZ0VuZCIsInNldEZvZ0RlbnNpdHkiLCJzZXRMaWdodERpZmZ1c2VDb2xvciIsInNldExpZ2h0U3BlY3VsYXJDb2xvciIsInNldExpZ2h0RGlyZWN0aW9uIiwic2V0TGlnaHRQcm9qZWN0aW9uTWF0cml4Iiwic2V0U2hhZG93VGV4dHVyZVNpemUiLCJzZXRTaGFkb3dJbnRlbnNpdHkiLCJpbnRlbnNpdHkiLCJzZXRHYW1tYUNvcnJlY3Rpb24iLCJnYW1tYUNvcnJlY3Rpb24iLCJzZXRQb2ludFNpemUiLCJwb2ludFNpemUiLCJQaWNrU2hhZGVyIiwiUG9zaXRpb25TaGFkZXIiLCJRdWFkU2hhZGVyIiwiVHJpYW5nbGUiLCJpMSIsImkyIiwiaTMiLCJnZXRSYW5nZSIsInByb2JlUmFkaXVzIiwiYWRkUG9pbnQiLCJ6cyIsInB4IiwicHkiLCJweiIsInBqIiwiX1N1cmZhY2UiLCJnZW5lcmF0ZSIsInhkaWYiLCJ5ZGlmIiwiemRpZiIsInhzdGVwcyIsInlzdGVwcyIsInpzdGVwcyIsInZhbHMiLCJjYWxjdWxhdGUiLCJidWlsZCIsInJlc29sdXRpb24iLCJtZXNoIiwidHJpYW5nbGVzIiwic2F2ZWRDb25uZWN0aW9ucyIsImNvbm5lY3Rpb25zIiwid3QiLCJwYyIsInYxMiIsInYxMyIsImlzTmFOIiwic3VtIiwic3VyZmFjZXNfZGlzcGxheSIsInN1cmZhY2VzX21hdGVyaWFsQW1iaWVudENvbG9yXzNEIiwic3VyZmFjZXNfY29sb3IiLCJzdXJmYWNlc19tYXRlcmlhbFNwZWN1bGFyQ29sb3JfM0QiLCJzdXJmYWNlc19tYXRlcmlhbFNoaW5pbmVzc18zRCIsInN1cmZhY2VzX2FscGhhIiwic3VyZmFjZXNfc3R5bGUiLCJzaGFwZXNfcG9pbnRTaXplIiwiU0FTU3VyZmFjZSIsInZkd1JhZGl1cyIsImRpc3RhbmNlQ2VudGVyIiwiZGlzdGFuY2VTdXJmYWNlIiwiVkRXU3VyZmFjZSIsIlBsYXRlIiwibGFuZXMiLCJvcmlnaW4iLCJsYW5lTGVuZ3RoIiwibGFuZVgiLCJzcyIsInNwb3RZIiwicmYiLCJzdHlsZSIsIlNwb3QiLCJKU09OIiwiZGVmYXVsdF9iYWNrZ3JvdW5kQ29sb3IiLCJkZWZhdWx0X3NjYWxlIiwiZGVmYXVsdF9yb3RhdGVBbmdsZSIsImRlZmF1bHRfYm9uZExlbmd0aF8yRCIsImRlZmF1bHRfYW5nc3Ryb21zUGVyQm9uZExlbmd0aCIsImRlZmF1bHRfbGlnaHREaXJlY3Rpb25fM0QiLCJkZWZhdWx0X2xpZ2h0RGlmZnVzZUNvbG9yXzNEIiwiZGVmYXVsdF9saWdodFNwZWN1bGFyQ29sb3JfM0QiLCJkZWZhdWx0X3Byb2plY3Rpb25QZXJzcGVjdGl2ZV8zRCIsImRlZmF1bHRfcHJvamVjdGlvblBlcnNwZWN0aXZlVmVydGljYWxGaWVsZE9mVmlld18zRCIsImRlZmF1bHRfcHJvamVjdGlvbk9ydGhvV2lkdGhfM0QiLCJkZWZhdWx0X3Byb2plY3Rpb25XaWR0aEhlaWdodFJhdGlvXzNEIiwiZGVmYXVsdF9wcm9qZWN0aW9uRnJvbnRDdWxsaW5nXzNEIiwiZGVmYXVsdF9wcm9qZWN0aW9uQmFja0N1bGxpbmdfM0QiLCJkZWZhdWx0X2N1bGxCYWNrRmFjZV8zRCIsImRlZmF1bHRfZm9nX21vZGVfM0QiLCJkZWZhdWx0X2ZvZ19jb2xvcl8zRCIsImRlZmF1bHRfZm9nX3N0YXJ0XzNEIiwiZGVmYXVsdF9mb2dfZW5kXzNEIiwiZGVmYXVsdF9mb2dfZGVuc2l0eV8zRCIsImRlZmF1bHRfc2hhZG93XzNEIiwiZGVmYXVsdF9zaGFkb3dfaW50ZW5zaXR5XzNEIiwiZGVmYXVsdF9mbGF0X2NvbG9yXzNEIiwiZGVmYXVsdF9hbnRpYWxpYXNfM0QiLCJkZWZhdWx0X2dhbW1hQ29ycmVjdGlvbl8zRCIsImRlZmF1bHRfY29sb3JIb3ZlciIsImRlZmF1bHRfY29sb3JTZWxlY3QiLCJkZWZhdWx0X2NvbG9yRXJyb3IiLCJkZWZhdWx0X2NvbG9yUHJldmlldyIsImRlZmF1bHRfc3Nhb18zRCIsImRlZmF1bHRfc3Nhb19rZXJuZWxfcmFkaXVzIiwiZGVmYXVsdF9zc2FvX2tlcm5lbF9zYW1wbGVzIiwiZGVmYXVsdF9zc2FvX3Bvd2VyIiwiZGVmYXVsdF9vdXRsaW5lXzNEIiwiZGVmYXVsdF9vdXRsaW5lX3RoaWNrbmVzcyIsImRlZmF1bHRfb3V0bGluZV9ub3JtYWxfdGhyZXNob2xkIiwiZGVmYXVsdF9vdXRsaW5lX2RlcHRoX3RocmVzaG9sZCIsImRlZmF1bHRfZnhhYV9lZGdlVGhyZXNob2xkIiwiZGVmYXVsdF9meGFhX2VkZ2VUaHJlc2hvbGRNaW4iLCJkZWZhdWx0X2Z4YWFfc2VhcmNoU3RlcHMiLCJkZWZhdWx0X2Z4YWFfc2VhcmNoVGhyZXNob2xkIiwiZGVmYXVsdF9meGFhX3N1YnBpeENhcCIsImRlZmF1bHRfZnhhYV9zdWJwaXhUcmltIiwiZGVmYXVsdF9hdG9tc19kaXNwbGF5IiwiZGVmYXVsdF9hdG9tc19jb2xvciIsImRlZmF1bHRfYXRvbXNfZm9udF9zaXplXzJEIiwiZGVmYXVsdF9hdG9tc19mb250X2ZhbWlsaWVzXzJEIiwiZGVmYXVsdF9hdG9tc19mb250X2JvbGRfMkQiLCJkZWZhdWx0X2F0b21zX2ZvbnRfaXRhbGljXzJEIiwiZGVmYXVsdF9hdG9tc19jaXJjbGVzXzJEIiwiZGVmYXVsdF9hdG9tc19jaXJjbGVEaWFtZXRlcl8yRCIsImRlZmF1bHRfYXRvbXNfY2lyY2xlQm9yZGVyV2lkdGhfMkQiLCJkZWZhdWx0X2F0b21zX2xvbmVQYWlyRGlzdGFuY2VfMkQiLCJkZWZhdWx0X2F0b21zX2xvbmVQYWlyU3ByZWFkXzJEIiwiZGVmYXVsdF9hdG9tc19sb25lUGFpckRpYW1ldGVyXzJEIiwiZGVmYXVsdF9hdG9tc191c2VKTU9MQ29sb3JzIiwiZGVmYXVsdF9hdG9tc191c2VQWU1PTENvbG9ycyIsImRlZmF1bHRfYXRvbXNfSEJsYWNrXzJEIiwiZGVmYXVsdF9hdG9tc19pbXBsaWNpdEh5ZHJvZ2Vuc18yRCIsImRlZmF1bHRfYXRvbXNfZGlzcGxheVRlcm1pbmFsQ2FyYm9uTGFiZWxzXzJEIiwiZGVmYXVsdF9hdG9tc19zaG93SGlkZGVuQ2FyYm9uc18yRCIsImRlZmF1bHRfYXRvbXNfc2hvd0F0dHJpYnV0ZWRDYXJib25zXzJEIiwiZGVmYXVsdF9hdG9tc19kaXNwbGF5QWxsQ2FyYm9uTGFiZWxzXzJEIiwiZGVmYXVsdF9hdG9tc19yZXNvbHV0aW9uXzNEIiwiZGVmYXVsdF9hdG9tc19zcGhlcmVEaWFtZXRlcl8zRCIsImRlZmF1bHRfYXRvbXNfdXNlVkRXRGlhbWV0ZXJzXzNEIiwiZGVmYXVsdF9hdG9tc192ZHdNdWx0aXBsaWVyXzNEIiwiZGVmYXVsdF9hdG9tc19tYXRlcmlhbEFtYmllbnRDb2xvcl8zRCIsImRlZmF1bHRfYXRvbXNfbWF0ZXJpYWxTcGVjdWxhckNvbG9yXzNEIiwiZGVmYXVsdF9hdG9tc19tYXRlcmlhbFNoaW5pbmVzc18zRCIsImRlZmF1bHRfYXRvbXNfbm9uQm9uZGVkQXNTdGFyc18zRCIsImRlZmF1bHRfYXRvbXNfZGlzcGxheUxhYmVsc18zRCIsImRlZmF1bHRfYm9uZHNfZGlzcGxheSIsImRlZmF1bHRfYm9uZHNfY29sb3IiLCJkZWZhdWx0X2JvbmRzX3dpZHRoXzJEIiwiZGVmYXVsdF9ib25kc191c2VBYnNvbHV0ZVNhdHVyYXRpb25XaWR0aHNfMkQiLCJkZWZhdWx0X2JvbmRzX3NhdHVyYXRpb25XaWR0aF8yRCIsImRlZmF1bHRfYm9uZHNfc2F0dXJhdGlvbldpZHRoQWJzXzJEIiwiZGVmYXVsdF9ib25kc19lbmRzXzJEIiwiZGVmYXVsdF9ib25kc19zcGxpdENvbG9yIiwiZGVmYXVsdF9ib25kc19jb2xvckdyYWRpZW50IiwiZGVmYXVsdF9ib25kc19zYXR1cmF0aW9uQW5nbGVfMkQiLCJkZWZhdWx0X2JvbmRzX3N5bW1ldHJpY2FsXzJEIiwiZGVmYXVsdF9ib25kc19jbGVhck92ZXJsYXBzXzJEIiwiZGVmYXVsdF9ib25kc19vdmVybGFwQ2xlYXJXaWR0aF8yRCIsImRlZmF1bHRfYm9uZHNfYXRvbUxhYmVsQnVmZmVyXzJEIiwiZGVmYXVsdF9ib25kc193ZWRnZVRoaWNrbmVzc18yRCIsImRlZmF1bHRfYm9uZHNfd2F2eUxlbmd0aF8yRCIsImRlZmF1bHRfYm9uZHNfaGFzaFdpZHRoXzJEIiwiZGVmYXVsdF9ib25kc19oYXNoU3BhY2luZ18yRCIsImRlZmF1bHRfYm9uZHNfZG90U2l6ZV8yRCIsImRlZmF1bHRfYm9uZHNfbGV3aXNTdHlsZV8yRCIsImRlZmF1bHRfYm9uZHNfc2hvd0JvbmRPcmRlcnNfM0QiLCJkZWZhdWx0X2JvbmRzX3Jlc29sdXRpb25fM0QiLCJkZWZhdWx0X2JvbmRzX3JlbmRlckFzTGluZXNfM0QiLCJkZWZhdWx0X2JvbmRzX2N5bGluZGVyRGlhbWV0ZXJfM0QiLCJkZWZhdWx0X2JvbmRzX3BpbGxMYXRpdHVkZVJlc29sdXRpb25fM0QiLCJkZWZhdWx0X2JvbmRzX3BpbGxMb25naXR1ZGVSZXNvbHV0aW9uXzNEIiwiZGVmYXVsdF9ib25kc19waWxsSGVpZ2h0XzNEIiwiZGVmYXVsdF9ib25kc19waWxsU3BhY2luZ18zRCIsImRlZmF1bHRfYm9uZHNfcGlsbERpYW1ldGVyXzNEIiwiZGVmYXVsdF9ib25kc19tYXRlcmlhbEFtYmllbnRDb2xvcl8zRCIsImRlZmF1bHRfYm9uZHNfbWF0ZXJpYWxTcGVjdWxhckNvbG9yXzNEIiwiZGVmYXVsdF9ib25kc19tYXRlcmlhbFNoaW5pbmVzc18zRCIsImRlZmF1bHRfcHJvdGVpbnNfZGlzcGxheVJpYmJvbiIsImRlZmF1bHRfcHJvdGVpbnNfZGlzcGxheUJhY2tib25lIiwiZGVmYXVsdF9wcm90ZWluc19iYWNrYm9uZVRoaWNrbmVzcyIsImRlZmF1bHRfcHJvdGVpbnNfYmFja2JvbmVDb2xvciIsImRlZmF1bHRfcHJvdGVpbnNfcmliYm9uQ2FydG9vbml6ZSIsImRlZmF1bHRfcHJvdGVpbnNfZGlzcGxheVBpcGVQbGFuayIsImRlZmF1bHRfcHJvdGVpbnNfcmVzaWR1ZUNvbG9yIiwiZGVmYXVsdF9wcm90ZWluc19wcmltYXJ5Q29sb3IiLCJkZWZhdWx0X3Byb3RlaW5zX3NlY29uZGFyeUNvbG9yIiwiZGVmYXVsdF9wcm90ZWluc19yaWJib25DYXJ0b29uSGVsaXhQcmltYXJ5Q29sb3IiLCJkZWZhdWx0X3Byb3RlaW5zX3JpYmJvbkNhcnRvb25IZWxpeFNlY29uZGFyeUNvbG9yIiwiZGVmYXVsdF9wcm90ZWluc19yaWJib25DYXJ0b29uU2hlZXRDb2xvciIsImRlZmF1bHRfcHJvdGVpbnNfdHViZUNvbG9yIiwiZGVmYXVsdF9wcm90ZWluc190dWJlUmVzb2x1dGlvbl8zRCIsImRlZmF1bHRfcHJvdGVpbnNfcmliYm9uVGhpY2tuZXNzIiwiZGVmYXVsdF9wcm90ZWluc190dWJlVGhpY2tuZXNzIiwiZGVmYXVsdF9wcm90ZWluc19wbGFua1NoZWV0V2lkdGgiLCJkZWZhdWx0X3Byb3RlaW5zX2N5bGluZGVySGVsaXhEaWFtZXRlciIsImRlZmF1bHRfcHJvdGVpbnNfdmVydGljYWxSZXNvbHV0aW9uIiwiZGVmYXVsdF9wcm90ZWluc19ob3Jpem9udGFsUmVzb2x1dGlvbiIsImRlZmF1bHRfcHJvdGVpbnNfbWF0ZXJpYWxBbWJpZW50Q29sb3JfM0QiLCJkZWZhdWx0X3Byb3RlaW5zX21hdGVyaWFsU3BlY3VsYXJDb2xvcl8zRCIsImRlZmF1bHRfcHJvdGVpbnNfbWF0ZXJpYWxTaGluaW5lc3NfM0QiLCJkZWZhdWx0X251Y2xlaWNzX2Rpc3BsYXkiLCJkZWZhdWx0X251Y2xlaWNzX3R1YmVDb2xvciIsImRlZmF1bHRfbnVjbGVpY3NfYmFzZUNvbG9yIiwiZGVmYXVsdF9udWNsZWljc19yZXNpZHVlQ29sb3IiLCJkZWZhdWx0X251Y2xlaWNzX3R1YmVUaGlja25lc3MiLCJkZWZhdWx0X251Y2xlaWNzX3R1YmVSZXNvbHV0aW9uXzNEIiwiZGVmYXVsdF9udWNsZWljc192ZXJ0aWNhbFJlc29sdXRpb24iLCJkZWZhdWx0X251Y2xlaWNzX21hdGVyaWFsQW1iaWVudENvbG9yXzNEIiwiZGVmYXVsdF9udWNsZWljc19tYXRlcmlhbFNwZWN1bGFyQ29sb3JfM0QiLCJkZWZhdWx0X251Y2xlaWNzX21hdGVyaWFsU2hpbmluZXNzXzNEIiwiZGVmYXVsdF9tYWNyb19kaXNwbGF5QXRvbXMiLCJkZWZhdWx0X21hY3JvX2Rpc3BsYXlCb25kcyIsImRlZmF1bHRfbWFjcm9fYXRvbVRvTGlnYW5kRGlzdGFuY2UiLCJkZWZhdWx0X21hY3JvX3Nob3dXYXRlciIsImRlZmF1bHRfbWFjcm9fY29sb3JCeUNoYWluIiwiZGVmYXVsdF9tYWNyb19yYWluYm93Q29sb3JzIiwiZGVmYXVsdF9zdXJmYWNlc19kaXNwbGF5IiwiZGVmYXVsdF9zdXJmYWNlc19hbHBoYSIsImRlZmF1bHRfc3VyZmFjZXNfc3R5bGUiLCJkZWZhdWx0X3N1cmZhY2VzX2NvbG9yIiwiZGVmYXVsdF9zdXJmYWNlc19tYXRlcmlhbEFtYmllbnRDb2xvcl8zRCIsImRlZmF1bHRfc3VyZmFjZXNfbWF0ZXJpYWxTcGVjdWxhckNvbG9yXzNEIiwiZGVmYXVsdF9zdXJmYWNlc19tYXRlcmlhbFNoaW5pbmVzc18zRCIsImRlZmF1bHRfcGxvdHNfY29sb3IiLCJkZWZhdWx0X3Bsb3RzX3dpZHRoIiwiZGVmYXVsdF9wbG90c19zaG93SW50ZWdyYXRpb24iLCJkZWZhdWx0X3Bsb3RzX2ludGVncmF0aW9uQ29sb3IiLCJkZWZhdWx0X3Bsb3RzX2ludGVncmF0aW9uTGluZVdpZHRoIiwiZGVmYXVsdF9wbG90c19zaG93R3JpZCIsImRlZmF1bHRfcGxvdHNfZ3JpZENvbG9yIiwiZGVmYXVsdF9wbG90c19ncmlkTGluZVdpZHRoIiwiZGVmYXVsdF9wbG90c19zaG93WUF4aXMiLCJkZWZhdWx0X3Bsb3RzX2ZsaXBYQXhpcyIsImRlZmF1bHRfdGV4dF9mb250X3NpemUiLCJkZWZhdWx0X3RleHRfZm9udF9mYW1pbGllcyIsImRlZmF1bHRfdGV4dF9mb250X2JvbGQiLCJkZWZhdWx0X3RleHRfZm9udF9pdGFsaWMiLCJkZWZhdWx0X3RleHRfZm9udF9zdHJva2VfM0QiLCJkZWZhdWx0X3RleHRfY29sb3IiLCJkZWZhdWx0X3NoYXBlc19jb2xvciIsImRlZmF1bHRfc2hhcGVzX2xpbmVXaWR0aCIsImRlZmF1bHRfc2hhcGVzX3BvaW50U2l6ZSIsImRlZmF1bHRfc2hhcGVzX2Fycm93TGVuZ3RoXzJEIiwiZGVmYXVsdF9jb21wYXNzX2Rpc3BsYXkiLCJkZWZhdWx0X2NvbXBhc3NfYXhpc1hDb2xvcl8zRCIsImRlZmF1bHRfY29tcGFzc19heGlzWUNvbG9yXzNEIiwiZGVmYXVsdF9jb21wYXNzX2F4aXNaQ29sb3JfM0QiLCJkZWZhdWx0X2NvbXBhc3Nfc2l6ZV8zRCIsImRlZmF1bHRfY29tcGFzc19yZXNvbHV0aW9uXzNEIiwiZGVmYXVsdF9jb21wYXNzX2Rpc3BsYXlUZXh0XzNEIiwiZGVmYXVsdF9jb21wYXNzX3R5cGVfM0QiLCJkZWZhdWx0X21lYXN1cmVtZW50X3VwZGF0ZV8zRCIsImRlZmF1bHRfbWVhc3VyZW1lbnRfYW5nbGVCYW5kc18zRCIsImRlZmF1bHRfbWVhc3VyZW1lbnRfZGlzcGxheVRleHRfM0QiLCJyb3RhdGVBbmdsZSIsImJvbmRMZW5ndGhfMkQiLCJhbmdzdHJvbXNQZXJCb25kTGVuZ3RoIiwibGlnaHREaXJlY3Rpb25fM0QiLCJsaWdodERpZmZ1c2VDb2xvcl8zRCIsImxpZ2h0U3BlY3VsYXJDb2xvcl8zRCIsInByb2plY3Rpb25PcnRob1dpZHRoXzNEIiwicHJvamVjdGlvbldpZHRoSGVpZ2h0UmF0aW9fM0QiLCJwcm9qZWN0aW9uRnJvbnRDdWxsaW5nXzNEIiwicHJvamVjdGlvbkJhY2tDdWxsaW5nXzNEIiwiY3VsbEJhY2tGYWNlXzNEIiwiZm9nX21vZGVfM0QiLCJmb2dfY29sb3JfM0QiLCJmb2dfc3RhcnRfM0QiLCJmb2dfZW5kXzNEIiwiZm9nX2RlbnNpdHlfM0QiLCJzaGFkb3dfM0QiLCJzaGFkb3dfaW50ZW5zaXR5XzNEIiwiZmxhdF9jb2xvcl8zRCIsImFudGlhbGlhc18zRCIsImdhbW1hQ29ycmVjdGlvbl8zRCIsImNvbG9yUHJldmlldyIsInNzYW9fM0QiLCJzc2FvX2tlcm5lbF9yYWRpdXMiLCJzc2FvX2tlcm5lbF9zYW1wbGVzIiwic3Nhb19wb3dlciIsIm91dGxpbmVfM0QiLCJvdXRsaW5lX25vcm1hbF90aHJlc2hvbGQiLCJvdXRsaW5lX2RlcHRoX3RocmVzaG9sZCIsIm91dGxpbmVfdGhpY2tuZXNzIiwiZnhhYV9lZGdlVGhyZXNob2xkIiwiZnhhYV9lZGdlVGhyZXNob2xkTWluIiwiZnhhYV9zZWFyY2hTdGVwcyIsImZ4YWFfc2VhcmNoVGhyZXNob2xkIiwiZnhhYV9zdWJwaXhDYXAiLCJmeGFhX3N1YnBpeFRyaW0iLCJhdG9tc19yZXNvbHV0aW9uXzNEIiwiYXRvbXNfZGlzcGxheUxhYmVsc18zRCIsImJvbmRzX3Jlc29sdXRpb25fM0QiLCJib25kc19waWxsTGF0aXR1ZGVSZXNvbHV0aW9uXzNEIiwiYm9uZHNfcGlsbExvbmdpdHVkZVJlc29sdXRpb25fM0QiLCJwcm90ZWluc19yaWJib25UaGlja25lc3MiLCJwcm90ZWluc192ZXJ0aWNhbFJlc29sdXRpb24iLCJudWNsZWljc190dWJlVGhpY2tuZXNzIiwibnVjbGVpY3NfdHViZVJlc29sdXRpb25fM0QiLCJudWNsZWljc192ZXJ0aWNhbFJlc29sdXRpb24iLCJjb21wYXNzX2Rpc3BsYXkiLCJjb21wYXNzX3Jlc29sdXRpb25fM0QiLCJjb21wYXNzX2Rpc3BsYXlUZXh0XzNEIiwibWVhc3VyZW1lbnRfZGlzcGxheVRleHRfM0QiLCJzZXQzRFJlcHJlc2VudGF0aW9uIiwicmVwcmVzZW50YXRpb24iLCJjb3B5IiwicGFyc2UiLCJzdHJpbmdpZnkiLCJnZXRQb2ludHNQZXJBbmdzdHJvbSIsIkJvbmREZWR1Y2VyIiwibWFyZ2luIiwiZGVkdWNlQ292YWxlbnRCb25kcyIsImN1c3RvbVBvaW50c1BlckFuZ3N0cm9tIiwicG9pbnRzUGVyQW5nc3Ryb20iLCJIeWRyb2dlbkRlZHVjZXIiLCJyZW1vdmVIeWRyb2dlbnMiLCJyZW1vdmVTdGVyZW8iLCJyZW1vdmUiLCJTcGxpdHRlciIsIm1vbHMiLCJuZXdNb2wiLCJuZWlnaCIsIlN0cnVjdHVyZUJ1aWxkZXIiLCJqc29uIiwiSlNPTkludGVycHJldGVyIiwibW9sRnJvbSIsIm1vbFRvIiwiX0NvdW50ZXIiLCJzZXRNb2xlY3VsZSIsImlubmVyQ2FsY3VsYXRlIiwiRnJlcmVqYWNxdWVOdW1iZXJDb3VudGVyIiwiTnVtYmVyT2ZNb2xlY3VsZXNDb3VudGVyIiwiX1JpbmdGaW5kZXIiLCJyZWR1Y2UiLCJjb250IiwiaW5uZXJHZXRSaW5ncyIsImZ1c2UiLCJGaW5nZXIiLCJncm93IiwiYmxvY2tlcnMiLCJuZWlnaHMiLCJmaW5nZXIiLCJlbmRib25kcyIsIkV1bGVyRmFjZXRSaW5nRmluZGVyIiwiZmluZ2VyQnJlYWsiLCJmaW5nZXJzIiwiZm91bmQiLCJ0aHJlZSIsIm5ld2ZpbmdlcnMiLCJhZGRpbmciLCJtbSIsIm5ld0Jsb2NrZXJzIiwiYWxyZWFkeSIsImFsbCIsImZyZXJlamFjcXVlTnVtYmVyIiwiX0ludGVycHJldGVyIiwiZml0IiwibGVmdEFsaWduIiwicGFkZGluZyIsIndoaXRlc3BhY2VSZWdleCIsIndoaXRlc3BhY2VBbmRQYXJlbnRoZXNpc1JlZ2V4Iiwid2hpdGVzcGFjZUFuZFF1b3RlUmVnZXgiLCJ3aGl0ZXNwYWNlQW5kUXVvdGVBbmRDb21tYVJlZ2V4IiwibGVhZGluZ1doaXRlc3BhY2VSZWdleCIsImRpZ2l0c1JlZ2V4IiwiZGlnaXRzU3ltYm9sUmVnZXgiLCJmaWx0ZXIiLCJoYWxsVHJhbnNsYXRpb25zIiwicGFyc2VUcmFuc2Zvcm0iLCJpbmRleHgiLCJpbmRleHkiLCJpbmRleHoiLCJvcCIsImdlbmVyYXRlQUJDMlhZWiIsImJldGEiLCJnYW1tYSIsIkNJRkludGVycHJldGVyIiwicmVhZCIsImNvbnRlbnQiLCJ4U3VwZXIiLCJ5U3VwZXIiLCJ6U3VwZXIiLCJhTGVuZ3RoIiwiYkxlbmd0aCIsImNMZW5ndGgiLCJhbHBoYUFuZ2xlIiwiYmV0YUFuZ2xlIiwiZ2FtbWFBbmdsZSIsImhhbGxDbGFzcyIsInRyYW5zZm9ybUxvb3AiLCJhdG9tTG9vcCIsImJvbmRMb29wIiwibGluZSIsInNoaWZ0IiwiZmllbGRzIiwicHVzaGluZ0xpbmVzIiwiYWJjMnh5eiIsImxhYmVsSW5kZXgiLCJhbHRMYWJlbEluZGV4IiwieEluZGV4IiwieUluZGV4IiwiekluZGV4IiwiZmllbGQiLCJ0b2tlbnMiLCJjaWZJZCIsImNpZlBhcnQiLCJzeW1JbmRleCIsImltcGxpZWRUcmFuc2xhdGlvbnMiLCJtdWx0eCIsIm11bHR5IiwibXVsdHoiLCJjb3B5MSIsInRyYW5zIiwiY29weTIiLCJub092ZXJsYXBzIiwib3ZlcmxhcCIsImV4dHJhcyIsImF0b20xIiwiYXRvbTIiLCJpZDEiLCJpZDIiLCJhaSIsImFqIiwiaW50ZXJwcmV0ZXIiLCJyZWFkQ0lGIiwiQ01MSW50ZXJwcmV0ZXIiLCJ4bWwiLCJwYXJzZVhNTCIsImFsbENtbCIsImZpbmQiLCJhbGxNb2xlY3VsZXMiLCJjdXJyZW50TW9sZWN1bGUiLCJpZG1hcCIsImNtbEF0b21zIiwiY3VycmVudENNTEF0b20iLCJhdHRyIiwiY3VycmVudEF0b20iLCJjbWxCb25kcyIsImN1cnJlbnRDTUxCb25kIiwiYXRvbVJlZnMyIiwiaW5BcnJheSIsImN1cnJlbnRCb25kIiwid3JpdGUiLCJyZWFkQ01MIiwid3JpdGVDTUwiLCJNT0xJbnRlcnByZXRlciIsImN1cnJlbnRUYWdUb2tlbnMiLCJjb3VudHMiLCJudW1BdG9tcyIsIm51bUJvbmRzIiwibWFzc0RpZiIsImJ0eXBlIiwicmVhZE1PTCIsIndyaXRlTU9MIiwibW9sIiwidHJpbSIsImNoZWNrQ29udGFpbmVkIiwiY2hhaW5JRCIsImVuZCIsIlBEQkludGVycHJldGVyIiwiY2FsY3VsYXRlUmliYm9uRGlzdGFuY2VzIiwiZGVkdWNlUmVzaWR1ZUJvbmRzIiwiaGVsaWNlcyIsInNoZWV0cyIsImxhc3RDIiwiY3VycmVudENoYWluIiwicmVzYXRvbXMiLCJhdG9tU2VyaWFscyIsImFsdExvYyIsImR1bW15RnJvbnQiLCJOYU4iLCJhdG9tTmFtZSIsImN1cnJlbnRSZXNpZHVlIiwiaGV0Iiwib2lkIiwibmlkIiwiZW5kQ2hhaW4iLCJjYWxjdWxhdGVEaXN0YW5jZXMiLCJkdW1teUVuZCIsIlBPU0lUSVZFX0lORklOSVRZIiwicmVhZFBEQiIsIlNRWl9IQVNIIiwiRElGX0hBU0giLCJEVVBfSEFTSCIsIkpDQU1QSW50ZXJwcmV0ZXIiLCJjb252ZXJ0SFoyUFBNIiwiaXNCcmVhayIsImdldFZhbHVlIiwiZGVjaXBoZXIiLCJsYXN0RGlmIiwicmVzdCIsInNwZWN0cnVtIiwieExhc3QiLCJ4Rmlyc3QiLCJ5Rmlyc3QiLCJuUG9pbnRzIiwieEZhY3RvciIsInlGYWN0b3IiLCJvYnNlcnZlRnJlcXVlbmN5Iiwic2hpZnRPZmZzZXROdW0iLCJzaGlmdE9mZnNldFZhbCIsInJlY29yZE1ldGEiLCJkaXZpZGVCeUZyZXF1ZW5jeSIsInRyaW1tZWQiLCJjdXJyZW50UmVjb3JkIiwidG9VcHBlckNhc2UiLCJsYXN0V2FzRGlmIiwiaW5uZXJMaW5lcyIsImFic2Npc3NhU3BhY2luZyIsImxhc3RYIiwibGFzdFkiLCJsYXN0T3JkaW5hdGUiLCJkdXAiLCJyZWciLCJpdGVtcyIsImFzc2lnbm1lbnRzIiwidXNlZCIsImFzc2lnbiIsImFzc2lnbmVkIiwibWFrZVN0cnVjdHVyZVNwZWN0cnVtU2V0IiwibWNhbnZhcyIsIlZpZXdlckNhbnZhcyIsImF0b21zX2Rpc3BsYXlJbXBsaWNpdEh5ZHJvZ2Vuc18yRCIsIm1vdXNlb3V0IiwicmVwYWludCIsInNjYW52YXMiLCJ0b3VjaGVuZCIsIm1vdXNlbW92ZSIsInRvdWNobW92ZSIsImRyYXdDaGlsZEV4dHJhcyIsIk9ic2VydmVyQ2FudmFzIiwibG9hZFNwZWN0cnVtIiwibG9hZE1vbGVjdWxlIiwicmVhZEpDQU1QIiwiY29udGVudFRvIiwic2hhcGVzIiwiY291bnQxIiwiY291bnQyIiwidG1waWQiLCJkdW1teSIsInNoYXBlVG8iLCJjb250ZW50RnJvbSIsIm9iaiIsInNoYXBlRnJvbSIsInF1ZXJ5VG8iLCJhcHBlbmRQcm9wZXJ0eSIsImlzUmFuZ2UiLCJkYSIsImRiIiwicXVlcnlGcm9tIiwic2V0dXBQcm9wZXJ0eSIsIlgiLCJwX2giLCJwX3ciLCJwX2QiLCJzaGFwZSIsIlNFU1N1cmZhY2UiLCJwZGJGcm9tIiwiZnJvbUpTT04iLCJjaGFpbnNGcm9tIiwiY29udmVydCIsIngzIiwieTMiLCJ6MyIsIng0IiwieTQiLCJ6NCIsIng1IiwieTUiLCJ6NSIsInJlYWRKU09OIiwic3RyaW5nIiwid3JpdGVKU09OIiwiUlhOSW50ZXJwcmV0ZXIiLCJjb250ZW50VG9rZW5zIiwiaGVhZGVyVG9rZW5zIiwibnVtUmVhY3RhbnRzIiwibnVtUHJvZHVjdHMiLCJyZWFkUlhOIiwid3JpdGVSWE4iLCJYWVpJbnRlcnByZXRlciIsInJlYWRYWVoiLCJtb25pdG9yIiwiQ0FOVkFTX0RSQUdHSU5HIiwiQ0FOVkFTX09WRVIiLCJBTFQiLCJTSElGVCIsIk1FVEEiLCJkcmFnIiwicHJlaGFuZGxlRXZlbnQiLCJtb3VzZXVwIiwia2V5ZG93biIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImN0cmxLZXkiLCJhZmZlY3RpbmciLCJrZXlwcmVzcyIsImtleXVwIiwiX0NhbnZhcyIsImVtcHR5TWVzc2FnZSIsImltYWdlIiwicGl4ZWxSYXRpbyIsImJnQ2FjaGUiLCJkcmF3SW1hZ2UiLCJpbm5lclJlcGFpbnQiLCJjaGVja3NPbkFjdGlvbiIsInJlc2l6ZSIsImNhcCIsImNzcyIsIl9DYW52YXMzRCIsInd1IiwiaHUiLCJhZnRlckxvYWRDb250ZW50Iiwic2V0QmFja2dyb3VuZEltYWdlIiwicGF0aCIsIkltYWdlIiwibWUiLCJvbmxvYWQiLCJjbGVhciIsImxvYWRDb250ZW50IiwiYWRkTW9sZWN1bGUiLCJyZW1vdmVNb2xlY3VsZSIsImdyZXAiLCJnZXRNb2xlY3VsZSIsImdldE1vbGVjdWxlcyIsImFkZFNoYXBlIiwicmVtb3ZlU2hhcGUiLCJnZXRTaGFwZXMiLCJnZXRDb250ZW50Qm91bmRzIiwic3BzIiwiYm9uZEV4aXN0cyIsImdldEJvbmQiLCJnZXRBbGxBdG9tcyIsImdldEFsbEJvbmRzIiwiZ2V0QWxsUG9pbnRzIiwid3JpdGVsbiIsImpxQ2Fwc3VsZSIsInRpbWUiLCJvcmlnaW5hbEV2ZW50IiwidG91Y2hlcyIsInRzIiwicGFnZVgiLCJwYWdlWSIsImltcGxlbWVudGVkR2VzdHVyZURpc3QiLCJpbXBsZW1lbnRlZEdlc3R1cmVBbmdsZSIsImdlc3R1cmVzdGFydCIsImxhc3RUb3VjaCIsImRibHRhcCIsImRibGNsaWNrIiwidG91Y2hzdGFydCIsIm1vdXNlZG93biIsInRvdWNoaG9sZCIsImdlc3R1cmVjaGFuZ2UiLCJuZXdBbmdsZSIsInJvdGF0aW9uIiwibXVsdGl0b3VjaG1vdmUiLCJudW1GaW5nZXJzIiwiY2hhbmdlZFRvdWNoZXMiLCJnZXN0dXJlZW5kIiwidGFwIiwiY2xpY2siLCJ3aGljaCIsIm1pZGRsZWNsaWNrIiwicmlnaHRjbGljayIsIm1pZGRsZW1vdXNlZG93biIsInJpZ2h0bW91c2Vkb3duIiwibW91c2VvdmVyIiwibWlkZGxlbW91c2V1cCIsInJpZ2h0bW91c2V1cCIsIm1vdXNld2hlZWwiLCJzdWJDcmVhdGUiLCJkb0V2ZW50RGVmYXVsdCIsInByZXZlbnREZWZhdWx0IiwicmV0dXJuVmFsdWUiLCJfQW5pbWF0b3JDYW52YXMiLCJ0aW1lb3V0Iiwic3RhcnRBbmltYXRpb24iLCJzdG9wQW5pbWF0aW9uIiwibGFzdFRpbWUiLCJuZXh0RnJhbWUiLCJ0aW1lTm93IiwiaXNSdW5uaW5nIiwiRmlsZUNhbnZhcyIsImFjdGlvbiIsImZvcm0iLCJIeXBlcmxpbmtDYW52YXMiLCJ1cmxPckZ1bmN0aW9uIiwib3BlbkluTmV3V2luZG93IiwiaG92ZXJJbWFnZSIsInNldEhvdmVySW1hZ2UiLCJ1cmwiLCJGdW5jdGlvbiIsIm9wZW4iLCJocmVmIiwiTW9sR3JhYmJlckNhbnZhcyIsImdldElucHV0RmllbGRzIiwiYWZ0ZXIiLCJzZWxmIiwic2VhcmNoIiwic2V0U2VhcmNoVGVybSIsInRlcm0iLCJnZXRNb2xlY3VsZUZyb21EYXRhYmFzZSIsImRhdGFiYXNlIiwieEF4aXMiLCJ5QXhpcyIsInpBeGlzIiwiUm90YXRvckNhbnZhcyIsInJvdGF0ZTNEIiwieEluY3JlbWVudCIsInlJbmNyZW1lbnQiLCJ6SW5jcmVtZW50IiwiU2xpZGVzaG93Q2FudmFzIiwiZnJhbWVzIiwiY3VySW5kZXgiLCJpbm5lckhhbmRsZSIsInBoYXNlIiwicmdiIiwiYnJlYWtJbm5lckhhbmRsZSIsImFkZEZyYW1lIiwiVHJhbnNmb3JtQ2FudmFzIiwibGFzdFBvaW50Iiwicm90YXRpb25NdWx0TW9kIiwibGFzdFBpbmNoU2NhbGUiLCJsYXN0R2VzdHVyZVJvdGF0ZSIsIm11bHRpIiwiZGlhbWV0ZXIiLCJiZWZvcmUiLCJyb3QiLCJfU3BlY3RydW1DYW52YXMiLCJnZXRTcGVjdHJ1bSIsImdldFNwZWN0cnVtQ29vcmRpbmF0ZXMiLCJPdmVybGF5Q2FudmFzIiwib3ZlcmxheVNwZWN0cmEiLCJzdXBlclJlcGFpbnQiLCJhZGRTcGVjdHJ1bSIsIlBlcnNwZWN0aXZlQ2FudmFzIiwiZHJhZ1JhbmdlIiwicmVzY2FsZVlBeGlzT25ab29tIiwibmV3U2NhbGUiLCJsaW5lU3R5bGUiLCJTZWVrZXJDYW52YXMiLCJzZWVrVHlwZSIsInJlbmRlclAiLCJpbnRlcm5hbFAiLCJTRUVLX1BPSU5URVIiLCJTRUVLX1BMT1QiLCJTRUVLX1BFQUsiLCJtYXhEaW1lbnNpb24zRCIsIm1heERpbWVuc2lvbiIsImZvdiIsImxpZ2h0Rm9jYWxMZW5ndGgiLCJsaWdodGluZyIsInNldHVwU2NlbmUiLCJyZW5kZXJEZXB0aE1hcCIsIkRlcHRoU2hhZGVyIiwiY3VsbEZhY2VFbmFibGVkIiwiaXNFbmFibGVkIiwiQ1VMTF9GQUNFIiwiZGVwdGhTaGFkZXIiLCJnZXRQYXJhbWV0ZXIiLCJDT0xPUl9DTEVBUl9WQUxVRSIsImNsZWFyQ29sb3IiLCJsaWdodERlcHRoTWFwRnJhbWVidWZmZXIiLCJzaGFkb3dUZXh0dXJlU2l6ZSIsIkNPTE9SX0JVRkZFUl9CSVQiLCJERVBUSF9CVUZGRVJfQklUIiwiZmx1c2giLCJyZW5kZXJFeHRyYXMiLCJwaG9uZ1NoYWRlciIsInRyYW5zcGFyZW50U2hhcGVzIiwiY29tcGFzcyIsImxhYmVsU2hhZGVyIiwibGFiZWwzRCIsInJlbmRlckNvbG9yIiwiYWN0aXZlVGV4dHVyZSIsIlRFWFRVUkUwIiwibGlnaHREZXB0aE1hcFRleHR1cmUiLCJmb2dnaW5nIiwicmVuZGVyUG9zaXRpb24iLCJwb3NpdGlvblNoYWRlciIsInJlbmRlck5vcm1hbCIsIm5vcm1hbFNoYWRlciIsInJlbmRlclNTQU8iLCJzc2FvU2hhZGVyIiwic2V0U2FtcGxlS2VybmVsIiwic3NhbyIsInNldEtlcm5lbFJhZGl1cyIsInNldFBvd2VyIiwiZHJhd2luZ0J1ZmZlcldpZHRoIiwiZHJhd2luZ0J1ZmZlckhlaWdodCIsIm5vaXNlU2FtcGxlVW5pZm9ybSIsInBvc2l0aW9uVGV4dHVyZSIsIlRFWFRVUkUxIiwibm9ybWFsVGV4dHVyZSIsIlRFWFRVUkUyIiwicXVhZEJ1ZmZlciIsInNzYW9GcmFtZWJ1ZmZlciIsInNzYW9CbHVyU2hhZGVyIiwiYW9TYW1wbGVVbmlmb3JtIiwiaW1hZ2VUZXh0dXJlIiwiZGVwdGhUZXh0dXJlIiwicmVuZGVyT3V0bGluZSIsIm91dGxpbmVTaGFkZXIiLCJkZWZlcnJlZFJlbmRlciIsImJnQ29sb3IiLCJjb2xvckZyYW1lYnVmZmVyIiwicG9zaXRpb25GcmFtZWJ1ZmZlciIsIm5vcm1hbEZyYW1lYnVmZmVyIiwiU1NBT1NoYWRlciIsInF1YWRGcmFtZWJ1ZmZlciIsIm91dGxpbmVGcmFtZWJ1ZmZlciIsImxpZ2h0aW5nU2hhZGVyIiwiY29sb3JUZXh0dXJlIiwic3Nhb1RleHR1cmUiLCJURVhUVVJFMyIsIm91dGxpbmVUZXh0dXJlIiwiZnhhYUZyYW1lYnVmZmVyIiwiZnhhYVNoYWRlciIsImZpbmFsRnJhbWVidWZmZXIiLCJmeGFhVGV4dHVyZSIsInF1YWRTaGFkZXIiLCJmb3J3YXJkUmVuZGVyIiwiaXNTdXBwb3J0RGVmZXJyZWQiLCJwaWNrIiwieHUiLCJ5dSIsInBpY2tTaGFkZXIiLCJwaWNrZXJGcmFtZWJ1ZmZlciIsInJnYmEiLCJVaW50OEFycmF5IiwicmVhZFBpeGVscyIsIm9iamVjdCIsImlkeE1vbGVjdWxlIiwiaWR4QXRvbSIsInRleHR1cmVGbG9hdEV4dCIsIkRFUFRIX1RFU1QiLCJkZXB0aEZ1bmMiLCJMRVFVQUwiLCJjbGVhckRlcHRoIiwiZ2V0RXh0ZW5zaW9uIiwicGlja2VyQ29sb3JUZXh0dXJlIiwicGlja2VyRGVwdGhSZW5kZXJidWZmZXIiLCJsaWdodERlcHRoTWFwUmVuZGVyYnVmZmVyIiwiREVQVEhfQ09NUE9ORU5UIiwiUkdCQTQiLCJTU0FPQmx1clNoYWRlciIsInRleHRUZXh0SW1hZ2UiLCJkaXNwbGF5TWVzc2FnZSIsIlRlc3QiLCJyZXZlcnNlIiwicG9wIiwicmVzIiwiTW92aWVDYW52YXMzRCIsInVwZGF0ZVNjZW5lIiwidG9wU2NyZWVuIiwibmVhclNjcmVlbiIsIm1pbkZvdiIsIm1heEZvdiIsIk1vbEdyYWJiZXJDYW52YXMzRCIsImRpbWVuc2lvbiIsIlBMQVlfT05DRSIsIlBMQVlfTE9PUCIsIlBMQVlfU1BSSU5HIiwiZnJhbWVOdW1iZXIiLCJwbGF5TW9kZSIsIlJvdGF0b3JDYW52YXMzRCIsIlRyYW5zZm9ybUNhbnZhczNEIiwiVmlld2VyQ2FudmFzM0QiLCJQZXJpb2RpY0NlbGwiLCJhbGxvd011bHRpcGxlU2VsZWN0aW9ucyIsIlBlcmlvZGljVGFibGVDYW52YXMiLCJjZWxsRGltZW5zaW9uIiwic2V0dXBUYWJsZSIsImdldEhvdmVyZWRFbGVtZW50IiwiY2VsbHMiLCJkcmF3Q2VsbCIsInNlbGVjdGVkIiwiY2VsbCIsInJhZGdyYWQiLCJwbmciLCJ0b0RhdGFVUkwiLCJmaWxlIiwiZ2V0IiwiU0VSVkVSX1VSTCIsImluUmVsYXkiLCJhc3luY2hyb25vdXMiLCJJTkZPIiwidl9jd2MiLCJ2X2pRdWVyeSIsImpxdWVyeSIsInZfalF1ZXJ5X3VpIiwidWkiLCJ2ZXJzaW9uIiwiSlNPTl9JTlRFUlBSRVRFUiIsIl9jb250YWN0U2VydmVyIiwib3B0aW9ucyIsImVycm9yYmFjayIsImFqYXgiLCJkYXRhVHlwZSIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwieGhyIiwic3RhdHVzIiwieGhyRmllbGRzIiwid2l0aENyZWRlbnRpYWxzIiwiYXN5bmMiLCJhdXRoZW50aWNhdGUiLCJjcmVkZW50aWFsIiwiY3JlYXRlTGV3aXNEb3RTdHJ1Y3R1cmUiLCJnZW5lcmF0ZUltYWdlIiwibGluayIsImdlbmVyYXRlSVVQQUNOYW1lIiwiaXVwYWMiLCJnZXRBZCIsImltYWdlX3VybCIsInRhcmdldF91cmwiLCJnZXRNb2xlY3VsZUZyb21Db250ZW50IiwiaW5wdXQiLCJnZXRPcHRpbWl6ZWRQREJTdHJ1Y3R1cmUiLCJnZXRaZW9saXRlRnJvbUlaQSIsImNpZiIsImlzR3JhcGhJc29tb3JwaGlzbSIsInRhcmdldCIsImlzU3ViZ3JhcGhJc29tb3JwaGlzbSIsImlzU3VwZXJncmFwaElzb21vcnBoaXNtIiwiZ2V0U2ltaWxhcml0eU1lYXN1cmUiLCJrZWt1bGl6ZSIsIm1lY2hhbmlzbU1hdGNoIiwidGFyZ2V0cyIsIm9wdGltaXplIiwib3B0aW1pemVkIiwicmVhZElVUEFDTmFtZSIsInJlYWRTTUlMRVMiLCJzbWlsZXMiLCJzYXZlRmlsZSIsInNpbXVsYXRlMTNDTk1SIiwibnVjbGV1cyIsImlzb3RvcGUiLCJqY2FtcCIsInNpbXVsYXRl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Q0FBSixDQUFVNkQsR0FBVixDQUNBN0QsSUFBSSxDQUFDLEVBQUQsQ0FBSixDQUFXOEQsR0FBWCxDQUNBOUQsSUFBSSxDQUFDLEVBQUQsQ0FBSixDQUFXNEYsR0FBWCxDQUNBNUYsSUFBSSxDQUFDLEVBQUQsQ0FBSixDQUFXNkYsR0FBWCxDQUNBN0YsSUFBSSxDQUFDLEVBQUQsQ0FBSixDQUFXOEYsR0FBWCxDQUNBOUYsSUFBSSxDQUFDLEVBQUQsQ0FBSixDQUFXK0YsR0FBWCxDQUNBL0YsSUFBSSxDQUFDLEVBQUQsQ0FBSixDQUFXZ0csR0FBWCxDQUVBLE1BQU9oRyxLQUFQLENBQ0gsQ0FyQkQsQ0F1QkE7Ozs7Ozs7T0FRQWlDLElBQUksQ0FBQzdCLEdBQUwsQ0FBVyxTQUFVaUQsR0FBVixDQUFlckQsSUFBZixDQUFxQixDQUM1QkEsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFVcUQsR0FBRyxDQUFDLENBQUQsQ0FBYixDQUNBckQsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFVcUQsR0FBRyxDQUFDLENBQUQsQ0FBYixDQUNBckQsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFVcUQsR0FBRyxDQUFDLENBQUQsQ0FBYixDQUNBckQsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFVcUQsR0FBRyxDQUFDLENBQUQsQ0FBYixDQUNBckQsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFVcUQsR0FBRyxDQUFDLENBQUQsQ0FBYixDQUNBckQsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFVcUQsR0FBRyxDQUFDLENBQUQsQ0FBYixDQUNBckQsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFVcUQsR0FBRyxDQUFDLENBQUQsQ0FBYixDQUNBckQsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFVcUQsR0FBRyxDQUFDLENBQUQsQ0FBYixDQUNBckQsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFVcUQsR0FBRyxDQUFDLENBQUQsQ0FBYixDQUNBckQsSUFBSSxDQUFDLENBQUQsQ0FBSixDQUFVcUQsR0FBRyxDQUFDLENBQUQsQ0FBYixDQUNBckQsSUFBSSxDQUFDLEVBQUQsQ0FBSixDQUFXcUQsR0FBRyxDQUFDLEVBQUQsQ0FBZCxDQUNBckQsSUFBSSxDQUFDLEVBQUQsQ0FBSixDQUFXcUQsR0FBRyxDQUFDLEVBQUQsQ0FBZCxDQUNBckQsSUFBSSxDQUFDLEVBQUQsQ0FBSixDQUFXcUQsR0FBRyxDQUFDLEVBQUQsQ0FBZCxDQUNBckQsSUFBSSxDQUFDLEVBQUQsQ0FBSixDQUFXcUQsR0FBRyxDQUFDLEVBQUQsQ0FBZCxDQUNBckQsSUFBSSxDQUFDLEVBQUQsQ0FBSixDQUFXcUQsR0FBRyxDQUFDLEVBQUQsQ0FBZCxDQUNBckQsSUFBSSxDQUFDLEVBQUQsQ0FBSixDQUFXcUQsR0FBRyxDQUFDLEVBQUQsQ0FBZCxDQUNBLE1BQU9yRCxLQUFQLENBQ0gsQ0FsQkQsQ0FvQkE7Ozs7Ozs7T0FRQWlDLElBQUksQ0FBQzVCLEtBQUwsQ0FBYSxTQUFVQyxDQUFWLENBQWFDLENBQWIsQ0FBZ0IsQ0FDekIsTUFBT0QsRUFBQyxHQUFLQyxDQUFOLEVBQ0hqQixJQUFJLENBQUNrQixHQUFMLENBQVNGLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBT0MsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBd0I3QixhQUF4QixFQUNBWSxJQUFJLENBQUNrQixHQUFMLENBQVNGLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBT0MsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBd0I3QixhQUR4QixFQUVBWSxJQUFJLENBQUNrQixHQUFMLENBQVNGLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBT0MsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBd0I3QixhQUZ4QixFQUdBWSxJQUFJLENBQUNrQixHQUFMLENBQVNGLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBT0MsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBd0I3QixhQUh4QixFQUlBWSxJQUFJLENBQUNrQixHQUFMLENBQVNGLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBT0MsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBd0I3QixhQUp4QixFQUtBWSxJQUFJLENBQUNrQixHQUFMLENBQVNGLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBT0MsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBd0I3QixhQUx4QixFQU1BWSxJQUFJLENBQUNrQixHQUFMLENBQVNGLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBT0MsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBd0I3QixhQU54QixFQU9BWSxJQUFJLENBQUNrQixHQUFMLENBQVNGLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBT0MsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBd0I3QixhQVB4QixFQVFBWSxJQUFJLENBQUNrQixHQUFMLENBQVNGLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBT0MsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBd0I3QixhQVJ4QixFQVNBWSxJQUFJLENBQUNrQixHQUFMLENBQVNGLENBQUMsQ0FBQyxDQUFELENBQUQsQ0FBT0MsQ0FBQyxDQUFDLENBQUQsQ0FBakIsRUFBd0I3QixhQVR4QixFQVVBWSxJQUFJLENBQUNrQixHQUFMLENBQVNGLENBQUMsQ0FBQyxFQUFELENBQUQsQ0FBUUMsQ0FBQyxDQUFDLEVBQUQsQ0FBbEIsRUFBMEI3QixhQVYxQixFQVdBWSxJQUFJLENBQUNrQixHQUFMLENBQVNGLENBQUMsQ0FBQyxFQUFELENBQUQsQ0FBUUMsQ0FBQyxDQUFDLEVBQUQsQ0FBbEIsRUFBMEI3QixhQVgxQixFQVlBWSxJQUFJLENBQUNrQixHQUFMLENBQVNGLENBQUMsQ0FBQyxFQUFELENBQUQsQ0FBUUMsQ0FBQyxDQUFDLEVBQUQsQ0FBbEIsRUFBMEI3QixhQVoxQixFQWFBWSxJQUFJLENBQUNrQixHQUFMLENBQVNGLENBQUMsQ0FBQyxFQUFELENBQUQsQ0FBUUMsQ0FBQyxDQUFDLEVBQUQsQ0FBbEIsRUFBMEI3QixhQWIxQixFQWNBWSxJQUFJLENBQUNrQixHQUFMLENBQVNGLENBQUMsQ0FBQyxFQUFELENBQUQsQ0FBUUMsQ0FBQyxDQUFDLEVBQUQsQ0FBbEIsRUFBMEI3QixhQWQxQixFQWVBWSxJQUFJ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QUFHLENBQUMsQ0FBRCxDQUFiLENBQ0FyRCxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVVxRCxHQUFHLENBQUMsQ0FBRCxDQUFiLENBQ0FyRCxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVVxRCxHQUFHLENBQUMsQ0FBRCxDQUFiLENBQ0FyRCxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVVxRCxHQUFHLENBQUMsRUFBRCxDQUFiLENBQ0FyRCxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVVxRCxHQUFHLENBQUMsQ0FBRCxDQUFiLENBQ0FyRCxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVVxRCxHQUFHLENBQUMsQ0FBRCxDQUFiLENBQ0FyRCxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVVxRCxHQUFHLENBQUMsQ0FBRCxDQUFiLENBQ0FyRCxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVVxRCxHQUFHLENBQUMsRUFBRCxDQUFiLENBQ0FyRCxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVVxRCxHQUFHLENBQUMsQ0FBRCxDQUFiLENBQ0FyRCxJQUFJLENBQUMsQ0FBRCxDQUFKLENBQVVxRCxHQUFHLENBQUMsQ0FBRCxDQUFiLENBQ0FyRCxJQUFJLENBQUMsRUFBRCxDQUFKLENBQVdxRCxHQUFHLENBQUMsRUFBRCxDQUFkLENBQ0FyRCxJQUFJLENBQUMsRUFBRCxDQUFKLENBQVdxRCxHQUFHLENBQUMsRUFBRCxDQUFkLENBQ0FyRCxJQUFJLENBQUMsRUFBRCxDQUFKLENBQVdxRCxHQUFHLENBQUMsQ0FBRCxDQUFkLENBQ0FyRCxJQUFJLENBQUMsRUFBRCxDQUFKLENBQVdxRCxHQUFHLENBQUMsQ0FBRCxDQUFkLENBQ0FyRCxJQUFJLENBQUMsRUFBRCxDQUFKLENBQVdxRCxHQUFHLENBQUMsRUFBRCxDQUFkLENBQ0FyRCxJQUFJLENBQUMsRUFBRCxDQUFKLENBQVdxRCxHQUFHLENBQUMsRUFBRCxDQUFkLENBQ0EsTUFBT3JELEtBQVAsQ0FDSCxDQXZDRCxDQXlDQTs7Ozs7O09BT0FpQyxJQUFJLENBQUM4QixXQUFMLENBQW1CLFNB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MEssQ0FEMUssQ0FDNkssQ0FBQyxDQUQ5SyxDQUNpTCxDQURqTCxDQUFULENBRUEsR0FBSXVaLEdBQUUsQ0FBRyxDQUFFLENBQUYsQ0FBSyxDQUFMLENBQVEsQ0FBUixDQUFXLENBQVgsQ0FBYyxDQUFkLENBQWlCLENBQWpCLENBQW9CLENBQXBCLENBQXVCLENBQXZCLENBQTBCLENBQTFCLENBQTZCLENBQTdCLENBQWdDLENBQWhDLENBQW1DLENBQW5DLENBQXNDLENBQXRDLENBQXlDLENBQXpDLENBQTRDLENBQTVDLENBQStDLENBQS9DLENBQWtELENBQWxELENBQXFELEVBQXJELENBQXlELEVBQXpELENBQTZELENBQTdELENBQWdFLENBQWhFLENBQW1FLENBQW5FLENBQXNFLEVBQXRFLENBQTBFLENBQTFFLENBQTZFLEVBQTdFLENBQWlGLEVBQWpGLENBQXFGLEVBQXJGLENBQXlGLEVBQXpGLENBQTZGLEVBQTdGLENBQWlHLEVBQWpHLENBQXFHLENBQXJHLENBQXdHLENBQXhHLENBQTJHLEVBQTNHLENBQStHLEVBQS9HLENBQW1ILENBQW5ILENBQXNILENBQXRILENBQXlILENBQXpILENBQTRILEVBQTVILENBQWdJLENBQWhJLENBQW1JLEVBQW5JLENBQXVJLEVBQXZJLENBQTJJLEVBQTNJLENBQStJLEVBQS9JLENBQW1KLEVBQW5KLENBQXVKLEVBQXZKLENBQTJKLENBQTNKLENBQThKLENBQTlKLENBQWlLLEVBQWpLLENBQXFLLEVBQXJLLENBQXlLLENBQXpLLENBQTRLLENBQTVLLENBQStLLENBQS9LLENBQWtMLEVBQWxMLENBQXNMLENBQXRMLENBQXlMLEVBQXpMLENBQTZMLEVBQTdMLENBQWlNLEVBQWpNLENBQXFNLEVBQXJNLENBQXlNLEVBQXpNLENBQTZNLEVBQTdNLENBQWlOLENBQWpOLENBQW9OLENBQXBOLENBQXVOLEVBQXZOLENBQTJOLEVBQTNOLENBQStOLENBQS9OLENBQWtPLENBQWxPLENBQXFPLENBQXJPLENBQXdPLEVBQXhPLENBQTRPLENBQTVPLENBQStPLEVBQS9PLENBQW1Q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Q0FBNEMsU0FBU3RnQixPQUFULENBQWtCLENBQzdEcDFELFFBQVEsQ0FBQ28xRCxPQUFPLENBQUN6NkQsS0FBVCxDQUFSLENBQ0EsQ0FGRCxDQUVHZzdFLFNBRkgsRUFHQSxDQUpELENBTUFwdkYsU0FBUyxDQUFDc2UsZUFBVixDQUE0QixTQUFTNndFLE9BQVQsQ0FBa0IsQ0FDN0MsS0FBS0QsY0FBTCxDQUFvQixpQkFBcEIsQ0FBdUMsQ0FDdEMsUUFBVWg5RSxRQUFRLENBQUN1d0UsSUFEbUIsQ0FBdkMsQ0FFRzBNLE9BRkgsQ0FFWSxTQUFTdGdCLE9BQVQsQ0FBa0IsQ0FBRSxDQUZoQyxDQUVrQyxVQUFVLENBQUUsQ0FGOUMsRUFHQSxDQUpELENBT0EsQ0E3VUQsRUE2VUcvdUUsVUE3VUgsQ0E2VWVBLFVBQVUsQ0FBQ0UsU0E3VTFCLENBNlVxQ0YsVUFBVSxDQUFDSSxFQTdVaEQsQ0E2VW9ESixVQUFVLENBQUNPLFVBN1UvRCxDQTZVMkVQLFVBQVUsQ0FBQ0ssR0FBWCxDQUFlNmhCLE1BN1UxRixDQTZVa0c5UCxRQTdVbEcsRSIsImZpbGUiOiIuL3NyYy9DaGVtRG9vZGxlV2ViLXVucGFja2VkLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9cbi8vIENoZW1Eb29kbGUgV2ViIENvbXBvbmVudHMgOC4wLjBcbi8vXG4vLyBodHRwOi8vd2ViLmNoZW1kb29kbGUuY29tXG4vL1xuLy8gQ29weXJpZ2h0IDIwMDktMjAxNyBpQ2hlbUxhYnMsIExMQy4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vL1xuLy8gVGhlIENoZW1Eb29kbGUgV2ViIENvbXBvbmVudHMgbGlicmFyeSBpcyBsaWNlbnNlZCB1bmRlciB2ZXJzaW9uIDNcbi8vIG9mIHRoZSBHTlUgR0VORVJBTCBQVUJMSUMgTElDRU5TRS5cbi8vXG4vLyBZb3UgbWF5IHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGVcbi8vIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLFxuLy8gZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbi8vXG4vLyBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbi8vIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4vLyBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4vLyBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuLy9cbi8vIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4vLyBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbi8vXG4vLyBQbGVhc2UgY29udGFjdCBpQ2hlbUxhYnMgPGh0dHA6Ly93d3cuaWNoZW1sYWJzLmNvbS9jb250YWN0LXVzPiBmb3Jcbi8vIGFsdGVybmF0ZSBsaWNlbnNpbmcgb3B0aW9ucy5cbi8vXG5cbmltcG9ydCAqIGFzIGxpYiBmcm9tICcuL0NoZW1Eb29kbGUvbGliJztcblxuLy8gZ29vZ2xlIGNsb3N1cmUgZmFpbHMgaWYgdW5kZWZpbmVkIGlzIHByb3ZpZGVkIHRvIHRoaXMgbW9kdWxlLi4uIGJ1dCBpdCBpcyBub3QgbmVlZGVkIHNvIHdoYXRldmVyLi4uXG5leHBvcnQgdmFyIENoZW1Eb29kbGUgPSAoZnVuY3Rpb24oKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIGMgPSB7fTtcblxuXHRjLmlDaGVtTGFicyA9IHt9O1xuXHRjLmluZm9ybWF0aWNzID0ge307XG5cdGMuaW8gPSB7fTtcblx0Yy5saWIgPSBsaWI7XG5cdGMubm90YXRpb25zID0ge307XG5cdGMuc3RydWN0dXJlcyA9IHt9O1xuXHRjLnN0cnVjdHVyZXMuZDIgPSB7fTtcblx0Yy5zdHJ1Y3R1cmVzLmQzID0ge307XG5cblx0dmFyIFZFUlNJT04gPSAnOC4wLjAnO1xuXG5cdGMuZ2V0VmVyc2lvbiA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBWRVJTSU9OO1xuXHR9O1xuXG5cdHJldHVybiBjO1xuXG59KSgpO1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGdsLW1hdHJpeCAtIEhpZ2ggcGVyZm9ybWFuY2UgbWF0cml4IGFuZCB2ZWN0b3Igb3BlcmF0aW9ucyBmb3IgV2ViR0xcbiAqIEBhdXRob3IgQnJhbmRvbiBKb25lc1xuICogQGF1dGhvciBDb2xpbiBNYWNLZW56aWUgSVZcbiAqIEB2ZXJzaW9uIDEuMy43XG4gKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxMiBCcmFuZG9uIEpvbmVzLCBDb2xpbiBNYWNLZW56aWUgSVZcbiAqXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuICogd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4gKiBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuICogaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuICogZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuICpcbiAqICAgIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4gKiAgICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuICogICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4gKiAgICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuICpcbiAqICAgIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90XG4gKiAgICBiZSBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4gKlxuICogICAgMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlXG4gKiAgICBkaXN0cmlidXRpb24uXG4gKi9cblxuLy8gVXBkYXRlZCB0byB1c2UgYSBtb2RpZmljYXRpb24gb2YgdGhlIFwicmV0dXJuRXhwb3J0c0dsb2JhbFwiIHBhdHRlcm4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vdW1kanMvdW1kXG5cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgLy8gTm9kZS4gRG9lcyBub3Qgd29yayB3aXRoIHN0cmljdCBDb21tb25KUywgYnV0XG4gICAgICAgIC8vIG9ubHkgQ29tbW9uSlMtbGlrZSBlbnZpcm9tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMsXG4gICAgICAgIC8vIGxpa2UgTm9kZS5cbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KGdsb2JhbCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoW10sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWN0b3J5KHJvb3QpO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICAgICAgZmFjdG9yeShyb290KTtcbiAgICB9XG59KENoZW1Eb29kbGUubGliLCBmdW5jdGlvbiAocm9vdCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgLy8gVHdlYWsgdG8geW91ciBsaWtpbmdcbiAgICB2YXIgRkxPQVRfRVBTSUxPTiA9IDAuMDAwMDAxO1xuXG4gICAgdmFyIGdsTWF0aCA9IHt9O1xuICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHR5cGVvZihGbG9hdDMyQXJyYXkpICE9ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB2YXIgeSA9IG5ldyBGbG9hdDMyQXJyYXkoMSk7XG4gICAgICAgICAgICB2YXIgaSA9IG5ldyBJbnQzMkFycmF5KHkuYnVmZmVyKTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGYXN0IHdheSB0byBjYWxjdWxhdGUgdGhlIGludmVyc2Ugc3F1YXJlIHJvb3QsXG4gICAgICAgICAgICAgKiBzZWUgaHR0cDovL2pzcGVyZi5jb20vaW52ZXJzZS1zcXVhcmUtcm9vdC81XG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogSWYgdHlwZWQgYXJyYXlzIGFyZSBub3QgYXZhaWxhYmxlLCBhIHNsb3dlclxuICAgICAgICAgICAgICogaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBudW1iZXIgdGhlIG51bWJlclxuICAgICAgICAgICAgICogQHJldHVybnMge051bWJlcn0gSW52ZXJzZSBzcXVhcmUgcm9vdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnbE1hdGguaW52c3FydCA9IGZ1bmN0aW9uKG51bWJlcikge1xuICAgICAgICAgICAgICB2YXIgeDIgPSBudW1iZXIgKiAwLjU7XG4gICAgICAgICAgICAgIHlbMF0gPSBudW1iZXI7XG4gICAgICAgICAgICAgIHZhciB0aHJlZWhhbGZzID0gMS41O1xuXG4gICAgICAgICAgICAgIGlbMF0gPSAweDVmMzc1OWRmIC0gKGlbMF0gPj4gMSk7XG5cbiAgICAgICAgICAgICAgdmFyIG51bWJlcjIgPSB5WzBdO1xuXG4gICAgICAgICAgICAgIHJldHVybiBudW1iZXIyICogKHRocmVlaGFsZnMgLSAoeDIgKiBudW1iZXIyICogbnVtYmVyMikpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsTWF0aC5pbnZzcXJ0ID0gZnVuY3Rpb24obnVtYmVyKSB7IHJldHVybiAxLjAgLyBNYXRoLnNxcnQobnVtYmVyKTsgfTtcbiAgICAgICAgfVxuICAgIH0pKCk7XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgU3lzdGVtLXNwZWNpZmljIG9wdGltYWwgYXJyYXkgdHlwZVxuICAgICAqIEBuYW1lIE1hdHJpeEFycmF5XG4gICAgICovXG4gICAgdmFyIE1hdHJpeEFycmF5ID0gbnVsbDtcbiAgICBcbiAgICAvLyBleHBsaWNpdGx5IHNldHMgYW5kIHJldHVybnMgdGhlIHR5cGUgb2YgYXJyYXkgdG8gdXNlIHdpdGhpbiBnbE1hdHJpeFxuICAgIGZ1bmN0aW9uIHNldE1hdHJpeEFycmF5VHlwZSh0eXBlKSB7XG4gICAgICAgIE1hdHJpeEFycmF5ID0gdHlwZTtcbiAgICAgICAgcmV0dXJuIE1hdHJpeEFycmF5O1xuICAgIH1cblxuICAgIC8vIGF1dG8tZGV0ZWN0cyBhbmQgcmV0dXJucyB0aGUgYmVzdCB0eXBlIG9mIGFycmF5IHRvIHVzZSB3aXRoaW4gZ2xNYXRyaXgsIGZhbGxpbmdcbiAgICAvLyBiYWNrIHRvIEFycmF5IGlmIHR5cGVkIGFycmF5cyBhcmUgdW5zdXBwb3J0ZWRcbiAgICBmdW5jdGlvbiBkZXRlcm1pbmVNYXRyaXhBcnJheVR5cGUoKSB7XG4gICAgICAgIE1hdHJpeEFycmF5ID0gKHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09ICd1bmRlZmluZWQnKSA/IEZsb2F0MzJBcnJheSA6IEFycmF5O1xuICAgICAgICByZXR1cm4gTWF0cml4QXJyYXk7XG4gICAgfVxuICAgIFxuICAgIGRldGVybWluZU1hdHJpeEFycmF5VHlwZSgpO1xuXG4gICAgLyoqXG4gICAgICogQGNsYXNzIDMgRGltZW5zaW9uYWwgVmVjdG9yXG4gICAgICogQG5hbWUgdmVjM1xuICAgICAqL1xuICAgIHZhciB2ZWMzID0ge307XG4gICAgIFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSB2ZWMzIHVzaW5nIHRoZSBkZWZhdWx0IGFycmF5IHR5cGVcbiAgICAgKiBBbnkgamF2YXNjcmlwdCBhcnJheS1saWtlIG9iamVjdHMgY29udGFpbmluZyBhdCBsZWFzdCAzIG51bWVyaWMgZWxlbWVudHMgY2FuIHNlcnZlIGFzIGEgdmVjM1xuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWMzfSBbdmVjXSB2ZWMzIGNvbnRhaW5pbmcgdmFsdWVzIHRvIGluaXRpYWxpemUgd2l0aFxuICAgICAqXG4gICAgICogQHJldHVybnMge3ZlYzN9IE5ldyB2ZWMzXG4gICAgICovXG4gICAgdmVjMy5jcmVhdGUgPSBmdW5jdGlvbiAodmVjKSB7XG4gICAgICAgIHZhciBkZXN0ID0gbmV3IE1hdHJpeEFycmF5KDMpO1xuXG4gICAgICAgIGlmICh2ZWMpIHtcbiAgICAgICAgICAgIGRlc3RbMF0gPSB2ZWNbMF07XG4gICAgICAgICAgICBkZXN0WzFdID0gdmVjWzFdO1xuICAgICAgICAgICAgZGVzdFsyXSA9IHZlY1syXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlc3RbMF0gPSBkZXN0WzFdID0gZGVzdFsyXSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIHZlYzMsIGluaXRpYWxpemluZyBpdCB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4IFggdmFsdWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geSBZIHZhbHVlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHogWiB2YWx1ZVxuXG4gICAgICogQHJldHVybnMge3ZlYzN9IE5ldyB2ZWMzXG4gICAgICovXG4gICAgdmVjMy5jcmVhdGVGcm9tID0gZnVuY3Rpb24gKHgsIHksIHopIHtcbiAgICAgICAgdmFyIGRlc3QgPSBuZXcgTWF0cml4QXJyYXkoMyk7XG5cbiAgICAgICAgZGVzdFswXSA9IHg7XG4gICAgICAgIGRlc3RbMV0gPSB5O1xuICAgICAgICBkZXN0WzJdID0gejtcblxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2Ygb25lIHZlYzMgdG8gYW5vdGhlclxuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWMzfSB2ZWMgdmVjMyBjb250YWluaW5nIHZhbHVlcyB0byBjb3B5XG4gICAgICogQHBhcmFtIHt2ZWMzfSBkZXN0IHZlYzMgcmVjZWl2aW5nIGNvcGllZCB2YWx1ZXNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBkZXN0XG4gICAgICovXG4gICAgdmVjMy5zZXQgPSBmdW5jdGlvbiAodmVjLCBkZXN0KSB7XG4gICAgICAgIGRlc3RbMF0gPSB2ZWNbMF07XG4gICAgICAgIGRlc3RbMV0gPSB2ZWNbMV07XG4gICAgICAgIGRlc3RbMl0gPSB2ZWNbMl07XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbXBhcmVzIHR3byB2ZWN0b3JzIGZvciBlcXVhbGl0eSB3aXRoaW4gYSBjZXJ0YWluIG1hcmdpbiBvZiBlcnJvclxuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWMzfSBhIEZpcnN0IHZlY3RvclxuICAgICAqIEBwYXJhbSB7dmVjM30gYiBTZWNvbmQgdmVjdG9yXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiBhIGlzIGVxdWl2YWxlbnQgdG8gYlxuICAgICAqL1xuICAgIHZlYzMuZXF1YWwgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICByZXR1cm4gYSA9PT0gYiB8fCAoXG4gICAgICAgICAgICBNYXRoLmFicyhhWzBdIC0gYlswXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhWzFdIC0gYlsxXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhWzJdIC0gYlsyXSkgPCBGTE9BVF9FUFNJTE9OXG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgdmVjdG9yIGFkZGl0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyBGaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHt2ZWMzfSB2ZWMyIFNlY29uZCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHt2ZWMzfSBbZGVzdF0gdmVjMyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byB2ZWNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBkZXN0IGlmIHNwZWNpZmllZCwgdmVjIG90aGVyd2lzZVxuICAgICAqL1xuICAgIHZlYzMuYWRkID0gZnVuY3Rpb24gKHZlYywgdmVjMiwgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QgfHwgdmVjID09PSBkZXN0KSB7XG4gICAgICAgICAgICB2ZWNbMF0gKz0gdmVjMlswXTtcbiAgICAgICAgICAgIHZlY1sxXSArPSB2ZWMyWzFdO1xuICAgICAgICAgICAgdmVjWzJdICs9IHZlYzJbMl07XG4gICAgICAgICAgICByZXR1cm4gdmVjO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVzdFswXSA9IHZlY1swXSArIHZlYzJbMF07XG4gICAgICAgIGRlc3RbMV0gPSB2ZWNbMV0gKyB2ZWMyWzFdO1xuICAgICAgICBkZXN0WzJdID0gdmVjWzJdICsgdmVjMlsyXTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgdmVjdG9yIHN1YnRyYWN0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyBGaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHt2ZWMzfSB2ZWMyIFNlY29uZCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHt2ZWMzfSBbZGVzdF0gdmVjMyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byB2ZWNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBkZXN0IGlmIHNwZWNpZmllZCwgdmVjIG90aGVyd2lzZVxuICAgICAqL1xuICAgIHZlYzMuc3VidHJhY3QgPSBmdW5jdGlvbiAodmVjLCB2ZWMyLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCB8fCB2ZWMgPT09IGRlc3QpIHtcbiAgICAgICAgICAgIHZlY1swXSAtPSB2ZWMyWzBdO1xuICAgICAgICAgICAgdmVjWzFdIC09IHZlYzJbMV07XG4gICAgICAgICAgICB2ZWNbMl0gLT0gdmVjMlsyXTtcbiAgICAgICAgICAgIHJldHVybiB2ZWM7XG4gICAgICAgIH1cblxuICAgICAgICBkZXN0WzBdID0gdmVjWzBdIC0gdmVjMlswXTtcbiAgICAgICAgZGVzdFsxXSA9IHZlY1sxXSAtIHZlYzJbMV07XG4gICAgICAgIGRlc3RbMl0gPSB2ZWNbMl0gLSB2ZWMyWzJdO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSB2ZWN0b3IgbXVsdGlwbGljYXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dmVjM30gdmVjIEZpcnN0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHZlYzIgU2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IFtkZXN0XSB2ZWMzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHZlY1xuICAgICAqXG4gICAgICogQHJldHVybnMge3ZlYzN9IGRlc3QgaWYgc3BlY2lmaWVkLCB2ZWMgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgdmVjMy5tdWx0aXBseSA9IGZ1bmN0aW9uICh2ZWMsIHZlYzIsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0IHx8IHZlYyA9PT0gZGVzdCkge1xuICAgICAgICAgICAgdmVjWzBdICo9IHZlYzJbMF07XG4gICAgICAgICAgICB2ZWNbMV0gKj0gdmVjMlsxXTtcbiAgICAgICAgICAgIHZlY1syXSAqPSB2ZWMyWzJdO1xuICAgICAgICAgICAgcmV0dXJuIHZlYztcbiAgICAgICAgfVxuXG4gICAgICAgIGRlc3RbMF0gPSB2ZWNbMF0gKiB2ZWMyWzBdO1xuICAgICAgICBkZXN0WzFdID0gdmVjWzFdICogdmVjMlsxXTtcbiAgICAgICAgZGVzdFsyXSA9IHZlY1syXSAqIHZlYzJbMl07XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBOZWdhdGVzIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWMzfSB2ZWMgdmVjMyB0byBuZWdhdGVcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IFtkZXN0XSB2ZWMzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHZlY1xuICAgICAqXG4gICAgICogQHJldHVybnMge3ZlYzN9IGRlc3QgaWYgc3BlY2lmaWVkLCB2ZWMgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgdmVjMy5uZWdhdGUgPSBmdW5jdGlvbiAodmVjLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gdmVjOyB9XG5cbiAgICAgICAgZGVzdFswXSA9IC12ZWNbMF07XG4gICAgICAgIGRlc3RbMV0gPSAtdmVjWzFdO1xuICAgICAgICBkZXN0WzJdID0gLXZlY1syXTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE11bHRpcGxpZXMgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzIGJ5IGEgc2NhbGFyIHZhbHVlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyB2ZWMzIHRvIHNjYWxlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbCBWYWx1ZSB0byBzY2FsZSBieVxuICAgICAqIEBwYXJhbSB7dmVjM30gW2Rlc3RdIHZlYzMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gdmVjXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7dmVjM30gZGVzdCBpZiBzcGVjaWZpZWQsIHZlYyBvdGhlcndpc2VcbiAgICAgKi9cbiAgICB2ZWMzLnNjYWxlID0gZnVuY3Rpb24gKHZlYywgdmFsLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCB8fCB2ZWMgPT09IGRlc3QpIHtcbiAgICAgICAgICAgIHZlY1swXSAqPSB2YWw7XG4gICAgICAgICAgICB2ZWNbMV0gKj0gdmFsO1xuICAgICAgICAgICAgdmVjWzJdICo9IHZhbDtcbiAgICAgICAgICAgIHJldHVybiB2ZWM7XG4gICAgICAgIH1cblxuICAgICAgICBkZXN0WzBdID0gdmVjWzBdICogdmFsO1xuICAgICAgICBkZXN0WzFdID0gdmVjWzFdICogdmFsO1xuICAgICAgICBkZXN0WzJdID0gdmVjWzJdICogdmFsO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pdCB2ZWN0b3Igb2YgdGhlIHNhbWUgZGlyZWN0aW9uIGFzIHRoZSBwcm92aWRlZCB2ZWMzXG4gICAgICogSWYgdmVjdG9yIGxlbmd0aCBpcyAwLCByZXR1cm5zIFswLCAwLCAwXVxuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWMzfSB2ZWMgdmVjMyB0byBub3JtYWxpemVcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IFtkZXN0XSB2ZWMzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHZlY1xuICAgICAqXG4gICAgICogQHJldHVybnMge3ZlYzN9IGRlc3QgaWYgc3BlY2lmaWVkLCB2ZWMgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgdmVjMy5ub3JtYWxpemUgPSBmdW5jdGlvbiAodmVjLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gdmVjOyB9XG5cbiAgICAgICAgdmFyIHggPSB2ZWNbMF0sIHkgPSB2ZWNbMV0sIHogPSB2ZWNbMl0sXG4gICAgICAgICAgICBsZW4gPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcblxuICAgICAgICBpZiAoIWxlbikge1xuICAgICAgICAgICAgZGVzdFswXSA9IDA7XG4gICAgICAgICAgICBkZXN0WzFdID0gMDtcbiAgICAgICAgICAgIGRlc3RbMl0gPSAwO1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH0gZWxzZSBpZiAobGVuID09PSAxKSB7XG4gICAgICAgICAgICBkZXN0WzBdID0geDtcbiAgICAgICAgICAgIGRlc3RbMV0gPSB5O1xuICAgICAgICAgICAgZGVzdFsyXSA9IHo7XG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxlbiA9IDEgLyBsZW47XG4gICAgICAgIGRlc3RbMF0gPSB4ICogbGVuO1xuICAgICAgICBkZXN0WzFdID0geSAqIGxlbjtcbiAgICAgICAgZGVzdFsyXSA9IHogKiBsZW47XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdHdvIHZlYzNzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyBGaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHt2ZWMzfSB2ZWMyIFNlY29uZCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHt2ZWMzfSBbZGVzdF0gdmVjMyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byB2ZWNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBkZXN0IGlmIHNwZWNpZmllZCwgdmVjIG90aGVyd2lzZVxuICAgICAqL1xuICAgIHZlYzMuY3Jvc3MgPSBmdW5jdGlvbiAodmVjLCB2ZWMyLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gdmVjOyB9XG5cbiAgICAgICAgdmFyIHggPSB2ZWNbMF0sIHkgPSB2ZWNbMV0sIHogPSB2ZWNbMl0sXG4gICAgICAgICAgICB4MiA9IHZlYzJbMF0sIHkyID0gdmVjMlsxXSwgejIgPSB2ZWMyWzJdO1xuXG4gICAgICAgIGRlc3RbMF0gPSB5ICogejIgLSB6ICogeTI7XG4gICAgICAgIGRlc3RbMV0gPSB6ICogeDIgLSB4ICogejI7XG4gICAgICAgIGRlc3RbMl0gPSB4ICogeTIgLSB5ICogeDI7XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWNsdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWMzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyB2ZWMzIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IExlbmd0aCBvZiB2ZWNcbiAgICAgKi9cbiAgICB2ZWMzLmxlbmd0aCA9IGZ1bmN0aW9uICh2ZWMpIHtcbiAgICAgICAgdmFyIHggPSB2ZWNbMF0sIHkgPSB2ZWNbMV0sIHogPSB2ZWNbMl07XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FjbHVsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWMzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyB2ZWMzIHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxuICAgICAqXG4gICAgICogQHJldHVybnMge251bWJlcn0gU3F1YXJlZCBMZW5ndGggb2YgdmVjXG4gICAgICovXG4gICAgdmVjMy5zcXVhcmVkTGVuZ3RoID0gZnVuY3Rpb24gKHZlYykge1xuICAgICAgICB2YXIgeCA9IHZlY1swXSwgeSA9IHZlY1sxXSwgeiA9IHZlY1syXTtcbiAgICAgICAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogejtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FjbHVsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzNzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyBGaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHt2ZWMzfSB2ZWMyIFNlY29uZCBvcGVyYW5kXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBEb3QgcHJvZHVjdCBvZiB2ZWMgYW5kIHZlYzJcbiAgICAgKi9cbiAgICB2ZWMzLmRvdCA9IGZ1bmN0aW9uICh2ZWMsIHZlYzIpIHtcbiAgICAgICAgcmV0dXJuIHZlY1swXSAqIHZlYzJbMF0gKyB2ZWNbMV0gKiB2ZWMyWzFdICsgdmVjWzJdICogdmVjMlsyXTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgdW5pdCB2ZWN0b3IgcG9pbnRpbmcgZnJvbSBvbmUgdmVjdG9yIHRvIGFub3RoZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dmVjM30gdmVjIE9yaWdpbiB2ZWMzXG4gICAgICogQHBhcmFtIHt2ZWMzfSB2ZWMyIHZlYzMgdG8gcG9pbnQgdG9cbiAgICAgKiBAcGFyYW0ge3ZlYzN9IFtkZXN0XSB2ZWMzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHZlY1xuICAgICAqXG4gICAgICogQHJldHVybnMge3ZlYzN9IGRlc3QgaWYgc3BlY2lmaWVkLCB2ZWMgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgdmVjMy5kaXJlY3Rpb24gPSBmdW5jdGlvbiAodmVjLCB2ZWMyLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gdmVjOyB9XG5cbiAgICAgICAgdmFyIHggPSB2ZWNbMF0gLSB2ZWMyWzBdLFxuICAgICAgICAgICAgeSA9IHZlY1sxXSAtIHZlYzJbMV0sXG4gICAgICAgICAgICB6ID0gdmVjWzJdIC0gdmVjMlsyXSxcbiAgICAgICAgICAgIGxlbiA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopO1xuXG4gICAgICAgIGlmICghbGVuKSB7XG4gICAgICAgICAgICBkZXN0WzBdID0gMDtcbiAgICAgICAgICAgIGRlc3RbMV0gPSAwO1xuICAgICAgICAgICAgZGVzdFsyXSA9IDA7XG4gICAgICAgICAgICByZXR1cm4gZGVzdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxlbiA9IDEgLyBsZW47XG4gICAgICAgIGRlc3RbMF0gPSB4ICogbGVuO1xuICAgICAgICBkZXN0WzFdID0geSAqIGxlbjtcbiAgICAgICAgZGVzdFsyXSA9IHogKiBsZW47XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlYzNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dmVjM30gdmVjIEZpcnN0IHZlY3RvclxuICAgICAqIEBwYXJhbSB7dmVjM30gdmVjMiBTZWNvbmQgdmVjdG9yXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxlcnAgSW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICAgICAqIEBwYXJhbSB7dmVjM30gW2Rlc3RdIHZlYzMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gdmVjXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7dmVjM30gZGVzdCBpZiBzcGVjaWZpZWQsIHZlYyBvdGhlcndpc2VcbiAgICAgKi9cbiAgICB2ZWMzLmxlcnAgPSBmdW5jdGlvbiAodmVjLCB2ZWMyLCBsZXJwLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gdmVjOyB9XG5cbiAgICAgICAgZGVzdFswXSA9IHZlY1swXSArIGxlcnAgKiAodmVjMlswXSAtIHZlY1swXSk7XG4gICAgICAgIGRlc3RbMV0gPSB2ZWNbMV0gKyBsZXJwICogKHZlYzJbMV0gLSB2ZWNbMV0pO1xuICAgICAgICBkZXN0WzJdID0gdmVjWzJdICsgbGVycCAqICh2ZWMyWzJdIC0gdmVjWzJdKTtcblxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzNcbiAgICAgKlxuICAgICAqIFBhcmFtczpcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyBGaXJzdCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHZlYzIgU2Vjb25kIHZlY3RvclxuICAgICAqXG4gICAgICogQHJldHVybnMge251bWJlcn0gRGlzdGFuY2UgYmV0d2VlbiB2ZWMgYW5kIHZlYzJcbiAgICAgKi9cbiAgICB2ZWMzLmRpc3QgPSBmdW5jdGlvbiAodmVjLCB2ZWMyKSB7XG4gICAgICAgIHZhciB4ID0gdmVjMlswXSAtIHZlY1swXSxcbiAgICAgICAgICAgIHkgPSB2ZWMyWzFdIC0gdmVjWzFdLFxuICAgICAgICAgICAgeiA9IHZlYzJbMl0gLSB2ZWNbMl07XG4gICAgICAgICAgICBcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCh4KnggKyB5KnkgKyB6KnopO1xuICAgIH07XG5cbiAgICAvLyBQcmUtYWxsb2NhdGVkIHRvIHByZXZlbnQgdW5lY2Vzc2FyeSBnYXJiYWdlIGNvbGxlY3Rpb25cbiAgICB2YXIgdW5wcm9qZWN0TWF0ID0gbnVsbDtcbiAgICB2YXIgdW5wcm9qZWN0VmVjID0gbmV3IE1hdHJpeEFycmF5KDQpO1xuICAgIC8qKlxuICAgICAqIFByb2plY3RzIHRoZSBzcGVjaWZpZWQgdmVjMyBmcm9tIHNjcmVlbiBzcGFjZSBpbnRvIG9iamVjdCBzcGFjZVxuICAgICAqIEJhc2VkIG9uIHRoZSA8YSBocmVmPVwiaHR0cDovL3dlYmN2cy5mcmVlZGVza3RvcC5vcmcvbWVzYS9NZXNhL3NyYy9nbHUvbWVzYS9wcm9qZWN0LmM/cmV2aXNpb249MS40JnZpZXc9bWFya3VwXCI+TWVzYSBnbHVVblByb2plY3QgaW1wbGVtZW50YXRpb248L2E+XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyBTY3JlZW4tc3BhY2UgdmVjdG9yIHRvIHByb2plY3RcbiAgICAgKiBAcGFyYW0ge21hdDR9IHZpZXcgVmlldyBtYXRyaXhcbiAgICAgKiBAcGFyYW0ge21hdDR9IHByb2ogUHJvamVjdGlvbiBtYXRyaXhcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IHZpZXdwb3J0IFZpZXdwb3J0IGFzIGdpdmVuIHRvIGdsLnZpZXdwb3J0IFt4LCB5LCB3aWR0aCwgaGVpZ2h0XVxuICAgICAqIEBwYXJhbSB7dmVjM30gW2Rlc3RdIHZlYzMgcmVjZWl2aW5nIHVucHJvamVjdGVkIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byB2ZWNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBkZXN0IGlmIHNwZWNpZmllZCwgdmVjIG90aGVyd2lzZVxuICAgICAqL1xuICAgIHZlYzMudW5wcm9qZWN0ID0gZnVuY3Rpb24gKHZlYywgdmlldywgcHJvaiwgdmlld3BvcnQsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSB2ZWM7IH1cblxuICAgICAgICBpZighdW5wcm9qZWN0TWF0KSB7XG4gICAgICAgICAgICB1bnByb2plY3RNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG0gPSB1bnByb2plY3RNYXQ7XG4gICAgICAgIHZhciB2ID0gdW5wcm9qZWN0VmVjO1xuICAgICAgICBcbiAgICAgICAgdlswXSA9ICh2ZWNbMF0gLSB2aWV3cG9ydFswXSkgKiAyLjAgLyB2aWV3cG9ydFsyXSAtIDEuMDtcbiAgICAgICAgdlsxXSA9ICh2ZWNbMV0gLSB2aWV3cG9ydFsxXSkgKiAyLjAgLyB2aWV3cG9ydFszXSAtIDEuMDtcbiAgICAgICAgdlsyXSA9IDIuMCAqIHZlY1syXSAtIDEuMDtcbiAgICAgICAgdlszXSA9IDEuMDtcbiAgICAgICAgXG4gICAgICAgIG1hdDQubXVsdGlwbHkocHJvaiwgdmlldywgbSk7XG4gICAgICAgIGlmKCFtYXQ0LmludmVyc2UobSkpIHsgcmV0dXJuIG51bGw7IH1cbiAgICAgICAgXG4gICAgICAgIG1hdDQubXVsdGlwbHlWZWM0KG0sIHYpO1xuICAgICAgICBpZih2WzNdID09PSAwLjApIHsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgICBkZXN0WzBdID0gdlswXSAvIHZbM107XG4gICAgICAgIGRlc3RbMV0gPSB2WzFdIC8gdlszXTtcbiAgICAgICAgZGVzdFsyXSA9IHZbMl0gLyB2WzNdO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIHZhciB4VW5pdFZlYzMgPSB2ZWMzLmNyZWF0ZUZyb20oMSwwLDApO1xuICAgIHZhciB5VW5pdFZlYzMgPSB2ZWMzLmNyZWF0ZUZyb20oMCwxLDApO1xuICAgIHZhciB6VW5pdFZlYzMgPSB2ZWMzLmNyZWF0ZUZyb20oMCwwLDEpO1xuXG4gICAgdmFyIHRtcHZlYzMgPSB2ZWMzLmNyZWF0ZSgpO1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIHF1YXRlcm5pb24gb2Ygcm90YXRpb24gYmV0d2VlbiB0d28gZ2l2ZW4gbm9ybWFsaXplZCB2ZWN0b3JzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGEgTm9ybWFsaXplZCBzb3VyY2UgdmVjdG9yXG4gICAgICogQHBhcmFtIHt2ZWMzfSBiIE5vcm1hbGl6ZWQgdGFyZ2V0IHZlY3RvclxuICAgICAqIEBwYXJhbSB7cXVhdDR9IFtkZXN0XSBxdWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtxdWF0NH0gZGVzdCBpZiBzcGVjaWZpZWQsIGEgbmV3IHF1YXQ0IG90aGVyd2lzZVxuICAgICAqL1xuICAgIHZlYzMucm90YXRpb25UbyA9IGZ1bmN0aW9uIChhLCBiLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gcXVhdDQuY3JlYXRlKCk7IH1cbiAgICAgICAgXG4gICAgICAgIHZhciBkID0gdmVjMy5kb3QoYSwgYik7XG4gICAgICAgIHZhciBheGlzID0gdG1wdmVjMztcbiAgICAgICAgaWYgKGQgPj0gMS4wKSB7XG4gICAgICAgICAgICBxdWF0NC5zZXQoaWRlbnRpdHlRdWF0NCwgZGVzdCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZCA8ICgwLjAwMDAwMSAtIDEuMCkpIHtcbiAgICAgICAgICAgIHZlYzMuY3Jvc3MoeFVuaXRWZWMzLCBhLCBheGlzKTtcbiAgICAgICAgICAgIGlmICh2ZWMzLmxlbmd0aChheGlzKSA8IDAuMDAwMDAxKVxuICAgICAgICAgICAgICAgIHZlYzMuY3Jvc3MoeVVuaXRWZWMzLCBhLCBheGlzKTtcbiAgICAgICAgICAgIGlmICh2ZWMzLmxlbmd0aChheGlzKSA8IDAuMDAwMDAxKVxuICAgICAgICAgICAgICAgIHZlYzMuY3Jvc3MoelVuaXRWZWMzLCBhLCBheGlzKTtcbiAgICAgICAgICAgIHZlYzMubm9ybWFsaXplKGF4aXMpO1xuICAgICAgICAgICAgcXVhdDQuZnJvbUFuZ2xlQXhpcyhNYXRoLlBJLCBheGlzLCBkZXN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBzID0gTWF0aC5zcXJ0KCgxLjAgKyBkKSAqIDIuMCk7XG4gICAgICAgICAgICB2YXIgc0ludiA9IDEuMCAvIHM7XG4gICAgICAgICAgICB2ZWMzLmNyb3NzKGEsIGIsIGF4aXMpO1xuICAgICAgICAgICAgZGVzdFswXSA9IGF4aXNbMF0gKiBzSW52O1xuICAgICAgICAgICAgZGVzdFsxXSA9IGF4aXNbMV0gKiBzSW52O1xuICAgICAgICAgICAgZGVzdFsyXSA9IGF4aXNbMl0gKiBzSW52O1xuICAgICAgICAgICAgZGVzdFszXSA9IHMgKiAwLjU7XG4gICAgICAgICAgICBxdWF0NC5ub3JtYWxpemUoZGVzdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlc3RbM10gPiAxLjApIGRlc3RbM10gPSAxLjA7XG4gICAgICAgIGVsc2UgaWYgKGRlc3RbM10gPCAtMS4wKSBkZXN0WzNdID0gLTEuMDtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSB2ZWN0b3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dmVjM30gdmVjIFZlY3RvciB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB2ZWNcbiAgICAgKi9cbiAgICB2ZWMzLnN0ciA9IGZ1bmN0aW9uICh2ZWMpIHtcbiAgICAgICAgcmV0dXJuICdbJyArIHZlY1swXSArICcsICcgKyB2ZWNbMV0gKyAnLCAnICsgdmVjWzJdICsgJ10nO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgM3gzIE1hdHJpeFxuICAgICAqIEBuYW1lIG1hdDNcbiAgICAgKi9cbiAgICB2YXIgbWF0MyA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIG1hdDMgdXNpbmcgdGhlIGRlZmF1bHQgYXJyYXkgdHlwZVxuICAgICAqIEFueSBqYXZhc2NyaXB0IGFycmF5LWxpa2Ugb2JqZWN0IGNvbnRhaW5pbmcgYXQgbGVhc3QgOSBudW1lcmljIGVsZW1lbnRzIGNhbiBzZXJ2ZSBhcyBhIG1hdDNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0M30gW21hdF0gbWF0MyBjb250YWluaW5nIHZhbHVlcyB0byBpbml0aWFsaXplIHdpdGhcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHttYXQzfSBOZXcgbWF0M1xuICAgICAqL1xuICAgIG1hdDMuY3JlYXRlID0gZnVuY3Rpb24gKG1hdCkge1xuICAgICAgICB2YXIgZGVzdCA9IG5ldyBNYXRyaXhBcnJheSg5KTtcblxuICAgICAgICBpZiAobWF0KSB7XG4gICAgICAgICAgICBkZXN0WzBdID0gbWF0WzBdO1xuICAgICAgICAgICAgZGVzdFsxXSA9IG1hdFsxXTtcbiAgICAgICAgICAgIGRlc3RbMl0gPSBtYXRbMl07XG4gICAgICAgICAgICBkZXN0WzNdID0gbWF0WzNdO1xuICAgICAgICAgICAgZGVzdFs0XSA9IG1hdFs0XTtcbiAgICAgICAgICAgIGRlc3RbNV0gPSBtYXRbNV07XG4gICAgICAgICAgICBkZXN0WzZdID0gbWF0WzZdO1xuICAgICAgICAgICAgZGVzdFs3XSA9IG1hdFs3XTtcbiAgICAgICAgICAgIGRlc3RbOF0gPSBtYXRbOF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXN0WzBdID0gZGVzdFsxXSA9XG4gICAgICAgICAgICBkZXN0WzJdID0gZGVzdFszXSA9XG4gICAgICAgICAgICBkZXN0WzRdID0gZGVzdFs1XSA9XG4gICAgICAgICAgICBkZXN0WzZdID0gZGVzdFs3XSA9XG4gICAgICAgICAgICBkZXN0WzhdID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgbWF0MywgaW5pdGlhbGl6aW5nIGl0IHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG0wMFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtMDFcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbTAyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG0xMFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtMTFcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbTEyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG0yMFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtMjFcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbTIyXG5cbiAgICAgKiBAcmV0dXJucyB7bWF0M30gTmV3IG1hdDNcbiAgICAgKi9cbiAgICBtYXQzLmNyZWF0ZUZyb20gPSBmdW5jdGlvbiAobTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMikge1xuICAgICAgICB2YXIgZGVzdCA9IG5ldyBNYXRyaXhBcnJheSg5KTtcblxuICAgICAgICBkZXN0WzBdID0gbTAwO1xuICAgICAgICBkZXN0WzFdID0gbTAxO1xuICAgICAgICBkZXN0WzJdID0gbTAyO1xuICAgICAgICBkZXN0WzNdID0gbTEwO1xuICAgICAgICBkZXN0WzRdID0gbTExO1xuICAgICAgICBkZXN0WzVdID0gbTEyO1xuICAgICAgICBkZXN0WzZdID0gbTIwO1xuICAgICAgICBkZXN0WzddID0gbTIxO1xuICAgICAgICBkZXN0WzhdID0gbTIyO1xuXG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0M30gbWF0IG1hdDMgdG8gY2FsY3VsYXRlIGRldGVybWluYW50IG9mXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBkZXRlcm1pbmFudCBvZiBtYXRcbiAgICAgKi9cbiAgICBtYXQzLmRldGVybWluYW50ID0gZnVuY3Rpb24gKG1hdCkge1xuICAgICAgICB2YXIgYTAwID0gbWF0WzBdLCBhMDEgPSBtYXRbMV0sIGEwMiA9IG1hdFsyXSxcbiAgICAgICAgICAgIGExMCA9IG1hdFszXSwgYTExID0gbWF0WzRdLCBhMTIgPSBtYXRbNV0sXG4gICAgICAgICAgICBhMjAgPSBtYXRbNl0sIGEyMSA9IG1hdFs3XSwgYTIyID0gbWF0WzhdO1xuXG4gICAgICAgIHJldHVybiBhMDAgKiAoYTIyICogYTExIC0gYTEyICogYTIxKSArIGEwMSAqICgtYTIyICogYTEwICsgYTEyICogYTIwKSArIGEwMiAqIChhMjEgKiBhMTAgLSBhMTEgKiBhMjApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIG1hdHJpeCBvZiBhIG1hdDNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0M30gbWF0IG1hdDMgdG8gY2FsY3VsYXRlIGludmVyc2Ugb2ZcbiAgICAgKiBAcGFyYW0ge21hdDN9IFtkZXN0XSBtYXQzIHJlY2VpdmluZyBpbnZlcnNlIG1hdHJpeC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byBtYXRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0M30gZGVzdCBpcyBzcGVjaWZpZWQsIG1hdCBvdGhlcndpc2UsIG51bGwgaWYgbWF0cml4IGNhbm5vdCBiZSBpbnZlcnRlZFxuICAgICAqL1xuICAgIG1hdDMuaW52ZXJzZSA9IGZ1bmN0aW9uIChtYXQsIGRlc3QpIHtcbiAgICAgICAgdmFyIGEwMCA9IG1hdFswXSwgYTAxID0gbWF0WzFdLCBhMDIgPSBtYXRbMl0sXG4gICAgICAgICAgICBhMTAgPSBtYXRbM10sIGExMSA9IG1hdFs0XSwgYTEyID0gbWF0WzVdLFxuICAgICAgICAgICAgYTIwID0gbWF0WzZdLCBhMjEgPSBtYXRbN10sIGEyMiA9IG1hdFs4XSxcblxuICAgICAgICAgICAgYjAxID0gYTIyICogYTExIC0gYTEyICogYTIxLFxuICAgICAgICAgICAgYjExID0gLWEyMiAqIGExMCArIGExMiAqIGEyMCxcbiAgICAgICAgICAgIGIyMSA9IGEyMSAqIGExMCAtIGExMSAqIGEyMCxcblxuICAgICAgICAgICAgZCA9IGEwMCAqIGIwMSArIGEwMSAqIGIxMSArIGEwMiAqIGIyMSxcbiAgICAgICAgICAgIGlkO1xuXG4gICAgICAgIGlmICghZCkgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICBpZCA9IDEgLyBkO1xuXG4gICAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gbWF0My5jcmVhdGUoKTsgfVxuXG4gICAgICAgIGRlc3RbMF0gPSBiMDEgKiBpZDtcbiAgICAgICAgZGVzdFsxXSA9ICgtYTIyICogYTAxICsgYTAyICogYTIxKSAqIGlkO1xuICAgICAgICBkZXN0WzJdID0gKGExMiAqIGEwMSAtIGEwMiAqIGExMSkgKiBpZDtcbiAgICAgICAgZGVzdFszXSA9IGIxMSAqIGlkO1xuICAgICAgICBkZXN0WzRdID0gKGEyMiAqIGEwMCAtIGEwMiAqIGEyMCkgKiBpZDtcbiAgICAgICAgZGVzdFs1XSA9ICgtYTEyICogYTAwICsgYTAyICogYTEwKSAqIGlkO1xuICAgICAgICBkZXN0WzZdID0gYjIxICogaWQ7XG4gICAgICAgIGRlc3RbN10gPSAoLWEyMSAqIGEwMCArIGEwMSAqIGEyMCkgKiBpZDtcbiAgICAgICAgZGVzdFs4XSA9IChhMTEgKiBhMDAgLSBhMDEgKiBhMTApICogaWQ7XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0M30gbWF0IEZpcnN0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0ge21hdDN9IG1hdDIgU2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0ge21hdDN9IFtkZXN0XSBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIG1hdFxuICAgICAqXG4gICAgICogQHJldHVybnMge21hdDN9IGRlc3QgaWYgc3BlY2lmaWVkLCBtYXQgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgbWF0My5tdWx0aXBseSA9IGZ1bmN0aW9uIChtYXQsIG1hdDIsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBtYXQ7IH1cbiAgICAgICAgXG5cbiAgICAgICAgLy8gQ2FjaGUgdGhlIG1hdHJpeCB2YWx1ZXMgKG1ha2VzIGZvciBodWdlIHNwZWVkIGluY3JlYXNlcyEpXG4gICAgICAgIHZhciBhMDAgPSBtYXRbMF0sIGEwMSA9IG1hdFsxXSwgYTAyID0gbWF0WzJdLFxuICAgICAgICAgICAgYTEwID0gbWF0WzNdLCBhMTEgPSBtYXRbNF0sIGExMiA9IG1hdFs1XSxcbiAgICAgICAgICAgIGEyMCA9IG1hdFs2XSwgYTIxID0gbWF0WzddLCBhMjIgPSBtYXRbOF0sXG5cbiAgICAgICAgICAgIGIwMCA9IG1hdDJbMF0sIGIwMSA9IG1hdDJbMV0sIGIwMiA9IG1hdDJbMl0sXG4gICAgICAgICAgICBiMTAgPSBtYXQyWzNdLCBiMTEgPSBtYXQyWzRdLCBiMTIgPSBtYXQyWzVdLFxuICAgICAgICAgICAgYjIwID0gbWF0Mls2XSwgYjIxID0gbWF0Mls3XSwgYjIyID0gbWF0Mls4XTtcblxuICAgICAgICBkZXN0WzBdID0gYjAwICogYTAwICsgYjAxICogYTEwICsgYjAyICogYTIwO1xuICAgICAgICBkZXN0WzFdID0gYjAwICogYTAxICsgYjAxICogYTExICsgYjAyICogYTIxO1xuICAgICAgICBkZXN0WzJdID0gYjAwICogYTAyICsgYjAxICogYTEyICsgYjAyICogYTIyO1xuXG4gICAgICAgIGRlc3RbM10gPSBiMTAgKiBhMDAgKyBiMTEgKiBhMTAgKyBiMTIgKiBhMjA7XG4gICAgICAgIGRlc3RbNF0gPSBiMTAgKiBhMDEgKyBiMTEgKiBhMTEgKyBiMTIgKiBhMjE7XG4gICAgICAgIGRlc3RbNV0gPSBiMTAgKiBhMDIgKyBiMTEgKiBhMTIgKyBiMTIgKiBhMjI7XG5cbiAgICAgICAgZGVzdFs2XSA9IGIyMCAqIGEwMCArIGIyMSAqIGExMCArIGIyMiAqIGEyMDtcbiAgICAgICAgZGVzdFs3XSA9IGIyMCAqIGEwMSArIGIyMSAqIGExMSArIGIyMiAqIGEyMTtcbiAgICAgICAgZGVzdFs4XSA9IGIyMCAqIGEwMiArIGIyMSAqIGExMiArIGIyMiAqIGEyMjtcblxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNmb3JtcyB0aGUgdmVjMiBhY2NvcmRpbmcgdG8gdGhlIGdpdmVuIG1hdDMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDN9IG1hdHJpeCBtYXQzIHRvIG11bHRpcGx5IGFnYWluc3RcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IHZlYyAgICB0aGUgdmVjdG9yIHRvIG11bHRpcGx5XG4gICAgICogQHBhcmFtIHt2ZWMyfSBbZGVzdF0gYW4gb3B0aW9uYWwgcmVjZWl2aW5nIHZlY3Rvci4gSWYgbm90IGdpdmVuLCB2ZWMgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt2ZWMyfSBUaGUgbXVsdGlwbGljYXRpb24gcmVzdWx0XG4gICAgICoqL1xuICAgIG1hdDMubXVsdGlwbHlWZWMyID0gZnVuY3Rpb24obWF0cml4LCB2ZWMsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgZGVzdCA9IHZlYztcbiAgICAgIHZhciB4ID0gdmVjWzBdLCB5ID0gdmVjWzFdO1xuICAgICAgZGVzdFswXSA9IHggKiBtYXRyaXhbMF0gKyB5ICogbWF0cml4WzNdICsgbWF0cml4WzZdO1xuICAgICAgZGVzdFsxXSA9IHggKiBtYXRyaXhbMV0gKyB5ICogbWF0cml4WzRdICsgbWF0cml4WzddO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgYWNjb3JkaW5nIHRvIHRoZSBnaXZlbiBtYXQzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDN9IG1hdHJpeCBtYXQzIHRvIG11bHRpcGx5IGFnYWluc3RcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyAgICB0aGUgdmVjdG9yIHRvIG11bHRpcGx5XG4gICAgICogQHBhcmFtIHt2ZWMzfSBbZGVzdF0gYW4gb3B0aW9uYWwgcmVjZWl2aW5nIHZlY3Rvci4gSWYgbm90IGdpdmVuLCB2ZWMgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt2ZWMzfSBUaGUgbXVsdGlwbGljYXRpb24gcmVzdWx0XG4gICAgICoqL1xuICAgIG1hdDMubXVsdGlwbHlWZWMzID0gZnVuY3Rpb24obWF0cml4LCB2ZWMsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgZGVzdCA9IHZlYztcbiAgICAgIHZhciB4ID0gdmVjWzBdLCB5ID0gdmVjWzFdLCB6ID0gdmVjWzJdO1xuICAgICAgZGVzdFswXSA9IHggKiBtYXRyaXhbMF0gKyB5ICogbWF0cml4WzNdICsgeiAqIG1hdHJpeFs2XTtcbiAgICAgIGRlc3RbMV0gPSB4ICogbWF0cml4WzFdICsgeSAqIG1hdHJpeFs0XSArIHogKiBtYXRyaXhbN107XG4gICAgICBkZXN0WzJdID0geCAqIG1hdHJpeFsyXSArIHkgKiBtYXRyaXhbNV0gKyB6ICogbWF0cml4WzhdO1xuICAgICAgXG4gICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2Ygb25lIG1hdDMgdG8gYW5vdGhlclxuICAgICAqXG4gICAgICogQHBhcmFtIHttYXQzfSBtYXQgbWF0MyBjb250YWluaW5nIHZhbHVlcyB0byBjb3B5XG4gICAgICogQHBhcmFtIHttYXQzfSBkZXN0IG1hdDMgcmVjZWl2aW5nIGNvcGllZCB2YWx1ZXNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHttYXQzfSBkZXN0XG4gICAgICovXG4gICAgbWF0My5zZXQgPSBmdW5jdGlvbiAobWF0LCBkZXN0KSB7XG4gICAgICAgIGRlc3RbMF0gPSBtYXRbMF07XG4gICAgICAgIGRlc3RbMV0gPSBtYXRbMV07XG4gICAgICAgIGRlc3RbMl0gPSBtYXRbMl07XG4gICAgICAgIGRlc3RbM10gPSBtYXRbM107XG4gICAgICAgIGRlc3RbNF0gPSBtYXRbNF07XG4gICAgICAgIGRlc3RbNV0gPSBtYXRbNV07XG4gICAgICAgIGRlc3RbNl0gPSBtYXRbNl07XG4gICAgICAgIGRlc3RbN10gPSBtYXRbN107XG4gICAgICAgIGRlc3RbOF0gPSBtYXRbOF07XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB0d28gbWF0cmljZXMgZm9yIGVxdWFsaXR5IHdpdGhpbiBhIGNlcnRhaW4gbWFyZ2luIG9mIGVycm9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDN9IGEgRmlyc3QgbWF0cml4XG4gICAgICogQHBhcmFtIHttYXQzfSBiIFNlY29uZCBtYXRyaXhcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIGEgaXMgZXF1aXZhbGVudCB0byBiXG4gICAgICovXG4gICAgbWF0My5lcXVhbCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhID09PSBiIHx8IChcbiAgICAgICAgICAgIE1hdGguYWJzKGFbMF0gLSBiWzBdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbMV0gLSBiWzFdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbMl0gLSBiWzJdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbM10gLSBiWzNdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbNF0gLSBiWzRdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbNV0gLSBiWzVdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbNl0gLSBiWzZdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbN10gLSBiWzddKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbOF0gLSBiWzhdKSA8IEZMT0FUX0VQU0lMT05cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyBhIG1hdDMgdG8gYW4gaWRlbnRpdHkgbWF0cml4XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDN9IGRlc3QgbWF0MyB0byBzZXRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGRlc3QgaWYgc3BlY2lmaWVkLCBvdGhlcndpc2UgYSBuZXcgbWF0M1xuICAgICAqL1xuICAgIG1hdDMuaWRlbnRpdHkgPSBmdW5jdGlvbiAoZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IG1hdDMuY3JlYXRlKCk7IH1cbiAgICAgICAgZGVzdFswXSA9IDE7XG4gICAgICAgIGRlc3RbMV0gPSAwO1xuICAgICAgICBkZXN0WzJdID0gMDtcbiAgICAgICAgZGVzdFszXSA9IDA7XG4gICAgICAgIGRlc3RbNF0gPSAxO1xuICAgICAgICBkZXN0WzVdID0gMDtcbiAgICAgICAgZGVzdFs2XSA9IDA7XG4gICAgICAgIGRlc3RbN10gPSAwO1xuICAgICAgICBkZXN0WzhdID0gMTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zcG9zZXMgYSBtYXQzIChmbGlwcyB0aGUgdmFsdWVzIG92ZXIgdGhlIGRpYWdvbmFsKVxuICAgICAqXG4gICAgICogUGFyYW1zOlxuICAgICAqIEBwYXJhbSB7bWF0M30gbWF0IG1hdDMgdG8gdHJhbnNwb3NlXG4gICAgICogQHBhcmFtIHttYXQzfSBbZGVzdF0gbWF0MyByZWNlaXZpbmcgdHJhbnNwb3NlZCB2YWx1ZXMuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gbWF0XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7bWF0M30gZGVzdCBpcyBzcGVjaWZpZWQsIG1hdCBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBtYXQzLnRyYW5zcG9zZSA9IGZ1bmN0aW9uIChtYXQsIGRlc3QpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlIHRyYW5zcG9zaW5nIG91cnNlbHZlcyB3ZSBjYW4gc2tpcCBhIGZldyBzdGVwcyBidXQgaGF2ZSB0byBjYWNoZSBzb21lIHZhbHVlc1xuICAgICAgICBpZiAoIWRlc3QgfHwgbWF0ID09PSBkZXN0KSB7XG4gICAgICAgICAgICB2YXIgYTAxID0gbWF0WzFdLCBhMDIgPSBtYXRbMl0sXG4gICAgICAgICAgICAgICAgYTEyID0gbWF0WzVdO1xuXG4gICAgICAgICAgICBtYXRbMV0gPSBtYXRbM107XG4gICAgICAgICAgICBtYXRbMl0gPSBtYXRbNl07XG4gICAgICAgICAgICBtYXRbM10gPSBhMDE7XG4gICAgICAgICAgICBtYXRbNV0gPSBtYXRbN107XG4gICAgICAgICAgICBtYXRbNl0gPSBhMDI7XG4gICAgICAgICAgICBtYXRbN10gPSBhMTI7XG4gICAgICAgICAgICByZXR1cm4gbWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgZGVzdFswXSA9IG1hdFswXTtcbiAgICAgICAgZGVzdFsxXSA9IG1hdFszXTtcbiAgICAgICAgZGVzdFsyXSA9IG1hdFs2XTtcbiAgICAgICAgZGVzdFszXSA9IG1hdFsxXTtcbiAgICAgICAgZGVzdFs0XSA9IG1hdFs0XTtcbiAgICAgICAgZGVzdFs1XSA9IG1hdFs3XTtcbiAgICAgICAgZGVzdFs2XSA9IG1hdFsyXTtcbiAgICAgICAgZGVzdFs3XSA9IG1hdFs1XTtcbiAgICAgICAgZGVzdFs4XSA9IG1hdFs4XTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgZWxlbWVudHMgb2YgYSBtYXQzIGludG8gdGhlIHVwcGVyIDN4MyBlbGVtZW50cyBvZiBhIG1hdDRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0M30gbWF0IG1hdDMgY29udGFpbmluZyB2YWx1ZXMgdG8gY29weVxuICAgICAqIEBwYXJhbSB7bWF0NH0gW2Rlc3RdIG1hdDQgcmVjZWl2aW5nIGNvcGllZCB2YWx1ZXNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgYSBuZXcgbWF0NCBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBtYXQzLnRvTWF0NCA9IGZ1bmN0aW9uIChtYXQsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBtYXQ0LmNyZWF0ZSgpOyB9XG5cbiAgICAgICAgZGVzdFsxNV0gPSAxO1xuICAgICAgICBkZXN0WzE0XSA9IDA7XG4gICAgICAgIGRlc3RbMTNdID0gMDtcbiAgICAgICAgZGVzdFsxMl0gPSAwO1xuXG4gICAgICAgIGRlc3RbMTFdID0gMDtcbiAgICAgICAgZGVzdFsxMF0gPSBtYXRbOF07XG4gICAgICAgIGRlc3RbOV0gPSBtYXRbN107XG4gICAgICAgIGRlc3RbOF0gPSBtYXRbNl07XG5cbiAgICAgICAgZGVzdFs3XSA9IDA7XG4gICAgICAgIGRlc3RbNl0gPSBtYXRbNV07XG4gICAgICAgIGRlc3RbNV0gPSBtYXRbNF07XG4gICAgICAgIGRlc3RbNF0gPSBtYXRbM107XG5cbiAgICAgICAgZGVzdFszXSA9IDA7XG4gICAgICAgIGRlc3RbMl0gPSBtYXRbMl07XG4gICAgICAgIGRlc3RbMV0gPSBtYXRbMV07XG4gICAgICAgIGRlc3RbMF0gPSBtYXRbMF07XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDN9IG1hdCBtYXQzIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBtYXRcbiAgICAgKi9cbiAgICBtYXQzLnN0ciA9IGZ1bmN0aW9uIChtYXQpIHtcbiAgICAgICAgcmV0dXJuICdbJyArIG1hdFswXSArICcsICcgKyBtYXRbMV0gKyAnLCAnICsgbWF0WzJdICtcbiAgICAgICAgICAgICcsICcgKyBtYXRbM10gKyAnLCAnICsgbWF0WzRdICsgJywgJyArIG1hdFs1XSArXG4gICAgICAgICAgICAnLCAnICsgbWF0WzZdICsgJywgJyArIG1hdFs3XSArICcsICcgKyBtYXRbOF0gKyAnXSc7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBjbGFzcyA0eDQgTWF0cml4XG4gICAgICogQG5hbWUgbWF0NFxuICAgICAqL1xuICAgIHZhciBtYXQ0ID0ge307XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgbWF0NCB1c2luZyB0aGUgZGVmYXVsdCBhcnJheSB0eXBlXG4gICAgICogQW55IGphdmFzY3JpcHQgYXJyYXktbGlrZSBvYmplY3QgY29udGFpbmluZyBhdCBsZWFzdCAxNiBudW1lcmljIGVsZW1lbnRzIGNhbiBzZXJ2ZSBhcyBhIG1hdDRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0NH0gW21hdF0gbWF0NCBjb250YWluaW5nIHZhbHVlcyB0byBpbml0aWFsaXplIHdpdGhcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBOZXcgbWF0NFxuICAgICAqL1xuICAgIG1hdDQuY3JlYXRlID0gZnVuY3Rpb24gKG1hdCkge1xuICAgICAgICB2YXIgZGVzdCA9IG5ldyBNYXRyaXhBcnJheSgxNik7XG5cbiAgICAgICAgaWYgKG1hdCkge1xuICAgICAgICAgICAgZGVzdFswXSA9IG1hdFswXTtcbiAgICAgICAgICAgIGRlc3RbMV0gPSBtYXRbMV07XG4gICAgICAgICAgICBkZXN0WzJdID0gbWF0WzJdO1xuICAgICAgICAgICAgZGVzdFszXSA9IG1hdFszXTtcbiAgICAgICAgICAgIGRlc3RbNF0gPSBtYXRbNF07XG4gICAgICAgICAgICBkZXN0WzVdID0gbWF0WzVdO1xuICAgICAgICAgICAgZGVzdFs2XSA9IG1hdFs2XTtcbiAgICAgICAgICAgIGRlc3RbN10gPSBtYXRbN107XG4gICAgICAgICAgICBkZXN0WzhdID0gbWF0WzhdO1xuICAgICAgICAgICAgZGVzdFs5XSA9IG1hdFs5XTtcbiAgICAgICAgICAgIGRlc3RbMTBdID0gbWF0WzEwXTtcbiAgICAgICAgICAgIGRlc3RbMTFdID0gbWF0WzExXTtcbiAgICAgICAgICAgIGRlc3RbMTJdID0gbWF0WzEyXTtcbiAgICAgICAgICAgIGRlc3RbMTNdID0gbWF0WzEzXTtcbiAgICAgICAgICAgIGRlc3RbMTRdID0gbWF0WzE0XTtcbiAgICAgICAgICAgIGRlc3RbMTVdID0gbWF0WzE1XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgbWF0NCwgaW5pdGlhbGl6aW5nIGl0IHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG0wMFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtMDFcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbTAyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG0wM1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtMTBcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbTExXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG0xMlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtMTNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbTIwXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG0yMVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtMjJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbTIzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG0zMFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtMzFcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbTMyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG0zM1xuXG4gICAgICogQHJldHVybnMge21hdDR9IE5ldyBtYXQ0XG4gICAgICovXG4gICAgbWF0NC5jcmVhdGVGcm9tID0gZnVuY3Rpb24gKG0wMCwgbTAxLCBtMDIsIG0wMywgbTEwLCBtMTEsIG0xMiwgbTEzLCBtMjAsIG0yMSwgbTIyLCBtMjMsIG0zMCwgbTMxLCBtMzIsIG0zMykge1xuICAgICAgICB2YXIgZGVzdCA9IG5ldyBNYXRyaXhBcnJheSgxNik7XG5cbiAgICAgICAgZGVzdFswXSA9IG0wMDtcbiAgICAgICAgZGVzdFsxXSA9IG0wMTtcbiAgICAgICAgZGVzdFsyXSA9IG0wMjtcbiAgICAgICAgZGVzdFszXSA9IG0wMztcbiAgICAgICAgZGVzdFs0XSA9IG0xMDtcbiAgICAgICAgZGVzdFs1XSA9IG0xMTtcbiAgICAgICAgZGVzdFs2XSA9IG0xMjtcbiAgICAgICAgZGVzdFs3XSA9IG0xMztcbiAgICAgICAgZGVzdFs4XSA9IG0yMDtcbiAgICAgICAgZGVzdFs5XSA9IG0yMTtcbiAgICAgICAgZGVzdFsxMF0gPSBtMjI7XG4gICAgICAgIGRlc3RbMTFdID0gbTIzO1xuICAgICAgICBkZXN0WzEyXSA9IG0zMDtcbiAgICAgICAgZGVzdFsxM10gPSBtMzE7XG4gICAgICAgIGRlc3RbMTRdID0gbTMyO1xuICAgICAgICBkZXN0WzE1XSA9IG0zMztcblxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2Ygb25lIG1hdDQgdG8gYW5vdGhlclxuICAgICAqXG4gICAgICogQHBhcmFtIHttYXQ0fSBtYXQgbWF0NCBjb250YWluaW5nIHZhbHVlcyB0byBjb3B5XG4gICAgICogQHBhcmFtIHttYXQ0fSBkZXN0IG1hdDQgcmVjZWl2aW5nIGNvcGllZCB2YWx1ZXNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBkZXN0XG4gICAgICovXG4gICAgbWF0NC5zZXQgPSBmdW5jdGlvbiAobWF0LCBkZXN0KSB7XG4gICAgICAgIGRlc3RbMF0gPSBtYXRbMF07XG4gICAgICAgIGRlc3RbMV0gPSBtYXRbMV07XG4gICAgICAgIGRlc3RbMl0gPSBtYXRbMl07XG4gICAgICAgIGRlc3RbM10gPSBtYXRbM107XG4gICAgICAgIGRlc3RbNF0gPSBtYXRbNF07XG4gICAgICAgIGRlc3RbNV0gPSBtYXRbNV07XG4gICAgICAgIGRlc3RbNl0gPSBtYXRbNl07XG4gICAgICAgIGRlc3RbN10gPSBtYXRbN107XG4gICAgICAgIGRlc3RbOF0gPSBtYXRbOF07XG4gICAgICAgIGRlc3RbOV0gPSBtYXRbOV07XG4gICAgICAgIGRlc3RbMTBdID0gbWF0WzEwXTtcbiAgICAgICAgZGVzdFsxMV0gPSBtYXRbMTFdO1xuICAgICAgICBkZXN0WzEyXSA9IG1hdFsxMl07XG4gICAgICAgIGRlc3RbMTNdID0gbWF0WzEzXTtcbiAgICAgICAgZGVzdFsxNF0gPSBtYXRbMTRdO1xuICAgICAgICBkZXN0WzE1XSA9IG1hdFsxNV07XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB0d28gbWF0cmljZXMgZm9yIGVxdWFsaXR5IHdpdGhpbiBhIGNlcnRhaW4gbWFyZ2luIG9mIGVycm9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDR9IGEgRmlyc3QgbWF0cml4XG4gICAgICogQHBhcmFtIHttYXQ0fSBiIFNlY29uZCBtYXRyaXhcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIGEgaXMgZXF1aXZhbGVudCB0byBiXG4gICAgICovXG4gICAgbWF0NC5lcXVhbCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhID09PSBiIHx8IChcbiAgICAgICAgICAgIE1hdGguYWJzKGFbMF0gLSBiWzBdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbMV0gLSBiWzFdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbMl0gLSBiWzJdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbM10gLSBiWzNdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbNF0gLSBiWzRdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbNV0gLSBiWzVdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbNl0gLSBiWzZdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbN10gLSBiWzddKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbOF0gLSBiWzhdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbOV0gLSBiWzldKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbMTBdIC0gYlsxMF0pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgICAgTWF0aC5hYnMoYVsxMV0gLSBiWzExXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhWzEyXSAtIGJbMTJdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbMTNdIC0gYlsxM10pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgICAgTWF0aC5hYnMoYVsxNF0gLSBiWzE0XSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgICBNYXRoLmFicyhhWzE1XSAtIGJbMTVdKSA8IEZMT0FUX0VQU0lMT05cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyBhIG1hdDQgdG8gYW4gaWRlbnRpdHkgbWF0cml4XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDR9IGRlc3QgbWF0NCB0byBzZXRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBkZXN0XG4gICAgICovXG4gICAgbWF0NC5pZGVudGl0eSA9IGZ1bmN0aW9uIChkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gbWF0NC5jcmVhdGUoKTsgfVxuICAgICAgICBkZXN0WzBdID0gMTtcbiAgICAgICAgZGVzdFsxXSA9IDA7XG4gICAgICAgIGRlc3RbMl0gPSAwO1xuICAgICAgICBkZXN0WzNdID0gMDtcbiAgICAgICAgZGVzdFs0XSA9IDA7XG4gICAgICAgIGRlc3RbNV0gPSAxO1xuICAgICAgICBkZXN0WzZdID0gMDtcbiAgICAgICAgZGVzdFs3XSA9IDA7XG4gICAgICAgIGRlc3RbOF0gPSAwO1xuICAgICAgICBkZXN0WzldID0gMDtcbiAgICAgICAgZGVzdFsxMF0gPSAxO1xuICAgICAgICBkZXN0WzExXSA9IDA7XG4gICAgICAgIGRlc3RbMTJdID0gMDtcbiAgICAgICAgZGVzdFsxM10gPSAwO1xuICAgICAgICBkZXN0WzE0XSA9IDA7XG4gICAgICAgIGRlc3RbMTVdID0gMTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zcG9zZXMgYSBtYXQ0IChmbGlwcyB0aGUgdmFsdWVzIG92ZXIgdGhlIGRpYWdvbmFsKVxuICAgICAqXG4gICAgICogQHBhcmFtIHttYXQ0fSBtYXQgbWF0NCB0byB0cmFuc3Bvc2VcbiAgICAgKiBAcGFyYW0ge21hdDR9IFtkZXN0XSBtYXQ0IHJlY2VpdmluZyB0cmFuc3Bvc2VkIHZhbHVlcy4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byBtYXRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0NH0gZGVzdCBpcyBzcGVjaWZpZWQsIG1hdCBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBtYXQ0LnRyYW5zcG9zZSA9IGZ1bmN0aW9uIChtYXQsIGRlc3QpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlIHRyYW5zcG9zaW5nIG91cnNlbHZlcyB3ZSBjYW4gc2tpcCBhIGZldyBzdGVwcyBidXQgaGF2ZSB0byBjYWNoZSBzb21lIHZhbHVlc1xuICAgICAgICBpZiAoIWRlc3QgfHwgbWF0ID09PSBkZXN0KSB7XG4gICAgICAgICAgICB2YXIgYTAxID0gbWF0WzFdLCBhMDIgPSBtYXRbMl0sIGEwMyA9IG1hdFszXSxcbiAgICAgICAgICAgICAgICBhMTIgPSBtYXRbNl0sIGExMyA9IG1hdFs3XSxcbiAgICAgICAgICAgICAgICBhMjMgPSBtYXRbMTFdO1xuXG4gICAgICAgICAgICBtYXRbMV0gPSBtYXRbNF07XG4gICAgICAgICAgICBtYXRbMl0gPSBtYXRbOF07XG4gICAgICAgICAgICBtYXRbM10gPSBtYXRbMTJdO1xuICAgICAgICAgICAgbWF0WzRdID0gYTAxO1xuICAgICAgICAgICAgbWF0WzZdID0gbWF0WzldO1xuICAgICAgICAgICAgbWF0WzddID0gbWF0WzEzXTtcbiAgICAgICAgICAgIG1hdFs4XSA9IGEwMjtcbiAgICAgICAgICAgIG1hdFs5XSA9IGExMjtcbiAgICAgICAgICAgIG1hdFsxMV0gPSBtYXRbMTRdO1xuICAgICAgICAgICAgbWF0WzEyXSA9IGEwMztcbiAgICAgICAgICAgIG1hdFsxM10gPSBhMTM7XG4gICAgICAgICAgICBtYXRbMTRdID0gYTIzO1xuICAgICAgICAgICAgcmV0dXJuIG1hdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlc3RbMF0gPSBtYXRbMF07XG4gICAgICAgIGRlc3RbMV0gPSBtYXRbNF07XG4gICAgICAgIGRlc3RbMl0gPSBtYXRbOF07XG4gICAgICAgIGRlc3RbM10gPSBtYXRbMTJdO1xuICAgICAgICBkZXN0WzRdID0gbWF0WzFdO1xuICAgICAgICBkZXN0WzVdID0gbWF0WzVdO1xuICAgICAgICBkZXN0WzZdID0gbWF0WzldO1xuICAgICAgICBkZXN0WzddID0gbWF0WzEzXTtcbiAgICAgICAgZGVzdFs4XSA9IG1hdFsyXTtcbiAgICAgICAgZGVzdFs5XSA9IG1hdFs2XTtcbiAgICAgICAgZGVzdFsxMF0gPSBtYXRbMTBdO1xuICAgICAgICBkZXN0WzExXSA9IG1hdFsxNF07XG4gICAgICAgIGRlc3RbMTJdID0gbWF0WzNdO1xuICAgICAgICBkZXN0WzEzXSA9IG1hdFs3XTtcbiAgICAgICAgZGVzdFsxNF0gPSBtYXRbMTFdO1xuICAgICAgICBkZXN0WzE1XSA9IG1hdFsxNV07XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0NH0gbWF0IG1hdDQgdG8gY2FsY3VsYXRlIGRldGVybWluYW50IG9mXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBkZXRlcm1pbmFudCBvZiBtYXRcbiAgICAgKi9cbiAgICBtYXQ0LmRldGVybWluYW50ID0gZnVuY3Rpb24gKG1hdCkge1xuICAgICAgICAvLyBDYWNoZSB0aGUgbWF0cml4IHZhbHVlcyAobWFrZXMgZm9yIGh1Z2Ugc3BlZWQgaW5jcmVhc2VzISlcbiAgICAgICAgdmFyIGEwMCA9IG1hdFswXSwgYTAxID0gbWF0WzFdLCBhMDIgPSBtYXRbMl0sIGEwMyA9IG1hdFszXSxcbiAgICAgICAgICAgIGExMCA9IG1hdFs0XSwgYTExID0gbWF0WzVdLCBhMTIgPSBtYXRbNl0sIGExMyA9IG1hdFs3XSxcbiAgICAgICAgICAgIGEyMCA9IG1hdFs4XSwgYTIxID0gbWF0WzldLCBhMjIgPSBtYXRbMTBdLCBhMjMgPSBtYXRbMTFdLFxuICAgICAgICAgICAgYTMwID0gbWF0WzEyXSwgYTMxID0gbWF0WzEzXSwgYTMyID0gbWF0WzE0XSwgYTMzID0gbWF0WzE1XTtcblxuICAgICAgICByZXR1cm4gKGEzMCAqIGEyMSAqIGExMiAqIGEwMyAtIGEyMCAqIGEzMSAqIGExMiAqIGEwMyAtIGEzMCAqIGExMSAqIGEyMiAqIGEwMyArIGExMCAqIGEzMSAqIGEyMiAqIGEwMyArXG4gICAgICAgICAgICAgICAgYTIwICogYTExICogYTMyICogYTAzIC0gYTEwICogYTIxICogYTMyICogYTAzIC0gYTMwICogYTIxICogYTAyICogYTEzICsgYTIwICogYTMxICogYTAyICogYTEzICtcbiAgICAgICAgICAgICAgICBhMzAgKiBhMDEgKiBhMjIgKiBhMTMgLSBhMDAgKiBhMzEgKiBhMjIgKiBhMTMgLSBhMjAgKiBhMDEgKiBhMzIgKiBhMTMgKyBhMDAgKiBhMjEgKiBhMzIgKiBhMTMgK1xuICAgICAgICAgICAgICAgIGEzMCAqIGExMSAqIGEwMiAqIGEyMyAtIGExMCAqIGEzMSAqIGEwMiAqIGEyMyAtIGEzMCAqIGEwMSAqIGExMiAqIGEyMyArIGEwMCAqIGEzMSAqIGExMiAqIGEyMyArXG4gICAgICAgICAgICAgICAgYTEwICogYTAxICogYTMyICogYTIzIC0gYTAwICogYTExICogYTMyICogYTIzIC0gYTIwICogYTExICogYTAyICogYTMzICsgYTEwICogYTIxICogYTAyICogYTMzICtcbiAgICAgICAgICAgICAgICBhMjAgKiBhMDEgKiBhMTIgKiBhMzMgLSBhMDAgKiBhMjEgKiBhMTIgKiBhMzMgLSBhMTAgKiBhMDEgKiBhMjIgKiBhMzMgKyBhMDAgKiBhMTEgKiBhMjIgKiBhMzMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIG1hdHJpeCBvZiBhIG1hdDRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0NH0gbWF0IG1hdDQgdG8gY2FsY3VsYXRlIGludmVyc2Ugb2ZcbiAgICAgKiBAcGFyYW0ge21hdDR9IFtkZXN0XSBtYXQ0IHJlY2VpdmluZyBpbnZlcnNlIG1hdHJpeC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byBtYXRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0NH0gZGVzdCBpcyBzcGVjaWZpZWQsIG1hdCBvdGhlcndpc2UsIG51bGwgaWYgbWF0cml4IGNhbm5vdCBiZSBpbnZlcnRlZFxuICAgICAqL1xuICAgIG1hdDQuaW52ZXJzZSA9IGZ1bmN0aW9uIChtYXQsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBtYXQ7IH1cblxuICAgICAgICAvLyBDYWNoZSB0aGUgbWF0cml4IHZhbHVlcyAobWFrZXMgZm9yIGh1Z2Ugc3BlZWQgaW5jcmVhc2VzISlcbiAgICAgICAgdmFyIGEwMCA9IG1hdFswXSwgYTAxID0gbWF0WzFdLCBhMDIgPSBtYXRbMl0sIGEwMyA9IG1hdFszXSxcbiAgICAgICAgICAgIGExMCA9IG1hdFs0XSwgYTExID0gbWF0WzVdLCBhMTIgPSBtYXRbNl0sIGExMyA9IG1hdFs3XSxcbiAgICAgICAgICAgIGEyMCA9IG1hdFs4XSwgYTIxID0gbWF0WzldLCBhMjIgPSBtYXRbMTBdLCBhMjMgPSBtYXRbMTFdLFxuICAgICAgICAgICAgYTMwID0gbWF0WzEyXSwgYTMxID0gbWF0WzEzXSwgYTMyID0gbWF0WzE0XSwgYTMzID0gbWF0WzE1XSxcblxuICAgICAgICAgICAgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwLFxuICAgICAgICAgICAgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwLFxuICAgICAgICAgICAgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwLFxuICAgICAgICAgICAgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExLFxuICAgICAgICAgICAgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExLFxuICAgICAgICAgICAgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyLFxuICAgICAgICAgICAgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwLFxuICAgICAgICAgICAgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwLFxuICAgICAgICAgICAgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwLFxuICAgICAgICAgICAgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxLFxuICAgICAgICAgICAgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxLFxuICAgICAgICAgICAgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyLFxuXG4gICAgICAgICAgICBkID0gKGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNiksXG4gICAgICAgICAgICBpbnZEZXQ7XG5cbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcbiAgICAgICAgICAgIGlmICghZCkgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICAgICAgaW52RGV0ID0gMSAvIGQ7XG5cbiAgICAgICAgZGVzdFswXSA9IChhMTEgKiBiMTEgLSBhMTIgKiBiMTAgKyBhMTMgKiBiMDkpICogaW52RGV0O1xuICAgICAgICBkZXN0WzFdID0gKC1hMDEgKiBiMTEgKyBhMDIgKiBiMTAgLSBhMDMgKiBiMDkpICogaW52RGV0O1xuICAgICAgICBkZXN0WzJdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBpbnZEZXQ7XG4gICAgICAgIGRlc3RbM10gPSAoLWEyMSAqIGIwNSArIGEyMiAqIGIwNCAtIGEyMyAqIGIwMykgKiBpbnZEZXQ7XG4gICAgICAgIGRlc3RbNF0gPSAoLWExMCAqIGIxMSArIGExMiAqIGIwOCAtIGExMyAqIGIwNykgKiBpbnZEZXQ7XG4gICAgICAgIGRlc3RbNV0gPSAoYTAwICogYjExIC0gYTAyICogYjA4ICsgYTAzICogYjA3KSAqIGludkRldDtcbiAgICAgICAgZGVzdFs2XSA9ICgtYTMwICogYjA1ICsgYTMyICogYjAyIC0gYTMzICogYjAxKSAqIGludkRldDtcbiAgICAgICAgZGVzdFs3XSA9IChhMjAgKiBiMDUgLSBhMjIgKiBiMDIgKyBhMjMgKiBiMDEpICogaW52RGV0O1xuICAgICAgICBkZXN0WzhdID0gKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBpbnZEZXQ7XG4gICAgICAgIGRlc3RbOV0gPSAoLWEwMCAqIGIxMCArIGEwMSAqIGIwOCAtIGEwMyAqIGIwNikgKiBpbnZEZXQ7XG4gICAgICAgIGRlc3RbMTBdID0gKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBpbnZEZXQ7XG4gICAgICAgIGRlc3RbMTFdID0gKC1hMjAgKiBiMDQgKyBhMjEgKiBiMDIgLSBhMjMgKiBiMDApICogaW52RGV0O1xuICAgICAgICBkZXN0WzEyXSA9ICgtYTEwICogYjA5ICsgYTExICogYjA3IC0gYTEyICogYjA2KSAqIGludkRldDtcbiAgICAgICAgZGVzdFsxM10gPSAoYTAwICogYjA5IC0gYTAxICogYjA3ICsgYTAyICogYjA2KSAqIGludkRldDtcbiAgICAgICAgZGVzdFsxNF0gPSAoLWEzMCAqIGIwMyArIGEzMSAqIGIwMSAtIGEzMiAqIGIwMCkgKiBpbnZEZXQ7XG4gICAgICAgIGRlc3RbMTVdID0gKGEyMCAqIGIwMyAtIGEyMSAqIGIwMSArIGEyMiAqIGIwMCkgKiBpbnZEZXQ7XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgdXBwZXIgM3gzIGVsZW1lbnRzIG9mIGEgbWF0NCBpbnRvIGFub3RoZXIgbWF0NFxuICAgICAqXG4gICAgICogQHBhcmFtIHttYXQ0fSBtYXQgbWF0NCBjb250YWluaW5nIHZhbHVlcyB0byBjb3B5XG4gICAgICogQHBhcmFtIHttYXQ0fSBbZGVzdF0gbWF0NCByZWNlaXZpbmcgY29waWVkIHZhbHVlc1xuICAgICAqXG4gICAgICogQHJldHVybnMge21hdDR9IGRlc3QgaXMgc3BlY2lmaWVkLCBhIG5ldyBtYXQ0IG90aGVyd2lzZVxuICAgICAqL1xuICAgIG1hdDQudG9Sb3RhdGlvbk1hdCA9IGZ1bmN0aW9uIChtYXQsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBtYXQ0LmNyZWF0ZSgpOyB9XG5cbiAgICAgICAgZGVzdFswXSA9IG1hdFswXTtcbiAgICAgICAgZGVzdFsxXSA9IG1hdFsxXTtcbiAgICAgICAgZGVzdFsyXSA9IG1hdFsyXTtcbiAgICAgICAgZGVzdFszXSA9IG1hdFszXTtcbiAgICAgICAgZGVzdFs0XSA9IG1hdFs0XTtcbiAgICAgICAgZGVzdFs1XSA9IG1hdFs1XTtcbiAgICAgICAgZGVzdFs2XSA9IG1hdFs2XTtcbiAgICAgICAgZGVzdFs3XSA9IG1hdFs3XTtcbiAgICAgICAgZGVzdFs4XSA9IG1hdFs4XTtcbiAgICAgICAgZGVzdFs5XSA9IG1hdFs5XTtcbiAgICAgICAgZGVzdFsxMF0gPSBtYXRbMTBdO1xuICAgICAgICBkZXN0WzExXSA9IG1hdFsxMV07XG4gICAgICAgIGRlc3RbMTJdID0gMDtcbiAgICAgICAgZGVzdFsxM10gPSAwO1xuICAgICAgICBkZXN0WzE0XSA9IDA7XG4gICAgICAgIGRlc3RbMTVdID0gMTtcblxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB1cHBlciAzeDMgZWxlbWVudHMgb2YgYSBtYXQ0IGludG8gYSBtYXQzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDR9IG1hdCBtYXQ0IGNvbnRhaW5pbmcgdmFsdWVzIHRvIGNvcHlcbiAgICAgKiBAcGFyYW0ge21hdDN9IFtkZXN0XSBtYXQzIHJlY2VpdmluZyBjb3BpZWQgdmFsdWVzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7bWF0M30gZGVzdCBpcyBzcGVjaWZpZWQsIGEgbmV3IG1hdDMgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgbWF0NC50b01hdDMgPSBmdW5jdGlvbiAobWF0LCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gbWF0My5jcmVhdGUoKTsgfVxuXG4gICAgICAgIGRlc3RbMF0gPSBtYXRbMF07XG4gICAgICAgIGRlc3RbMV0gPSBtYXRbMV07XG4gICAgICAgIGRlc3RbMl0gPSBtYXRbMl07XG4gICAgICAgIGRlc3RbM10gPSBtYXRbNF07XG4gICAgICAgIGRlc3RbNF0gPSBtYXRbNV07XG4gICAgICAgIGRlc3RbNV0gPSBtYXRbNl07XG4gICAgICAgIGRlc3RbNl0gPSBtYXRbOF07XG4gICAgICAgIGRlc3RbN10gPSBtYXRbOV07XG4gICAgICAgIGRlc3RbOF0gPSBtYXRbMTBdO1xuXG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIG9mIHRoZSB1cHBlciAzeDMgZWxlbWVudHMgb2YgYSBtYXQ0IGFuZCBjb3BpZXMgdGhlIHJlc3VsdCBpbnRvIGEgbWF0M1xuICAgICAqIFRoZSByZXN1bHRpbmcgbWF0cml4IGlzIHVzZWZ1bCBmb3IgY2FsY3VsYXRpbmcgdHJhbnNmb3JtZWQgbm9ybWFsc1xuICAgICAqXG4gICAgICogUGFyYW1zOlxuICAgICAqIEBwYXJhbSB7bWF0NH0gbWF0IG1hdDQgY29udGFpbmluZyB2YWx1ZXMgdG8gaW52ZXJ0IGFuZCBjb3B5XG4gICAgICogQHBhcmFtIHttYXQzfSBbZGVzdF0gbWF0MyByZWNlaXZpbmcgdmFsdWVzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7bWF0M30gZGVzdCBpcyBzcGVjaWZpZWQsIGEgbmV3IG1hdDMgb3RoZXJ3aXNlLCBudWxsIGlmIHRoZSBtYXRyaXggY2Fubm90IGJlIGludmVydGVkXG4gICAgICovXG4gICAgbWF0NC50b0ludmVyc2VNYXQzID0gZnVuY3Rpb24gKG1hdCwgZGVzdCkge1xuICAgICAgICAvLyBDYWNoZSB0aGUgbWF0cml4IHZhbHVlcyAobWFrZXMgZm9yIGh1Z2Ugc3BlZWQgaW5jcmVhc2VzISlcbiAgICAgICAgdmFyIGEwMCA9IG1hdFswXSwgYTAxID0gbWF0WzFdLCBhMDIgPSBtYXRbMl0sXG4gICAgICAgICAgICBhMTAgPSBtYXRbNF0sIGExMSA9IG1hdFs1XSwgYTEyID0gbWF0WzZdLFxuICAgICAgICAgICAgYTIwID0gbWF0WzhdLCBhMjEgPSBtYXRbOV0sIGEyMiA9IG1hdFsxMF0sXG5cbiAgICAgICAgICAgIGIwMSA9IGEyMiAqIGExMSAtIGExMiAqIGEyMSxcbiAgICAgICAgICAgIGIxMSA9IC1hMjIgKiBhMTAgKyBhMTIgKiBhMjAsXG4gICAgICAgICAgICBiMjEgPSBhMjEgKiBhMTAgLSBhMTEgKiBhMjAsXG5cbiAgICAgICAgICAgIGQgPSBhMDAgKiBiMDEgKyBhMDEgKiBiMTEgKyBhMDIgKiBiMjEsXG4gICAgICAgICAgICBpZDtcblxuICAgICAgICBpZiAoIWQpIHsgcmV0dXJuIG51bGw7IH1cbiAgICAgICAgaWQgPSAxIC8gZDtcblxuICAgICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IG1hdDMuY3JlYXRlKCk7IH1cblxuICAgICAgICBkZXN0WzBdID0gYjAxICogaWQ7XG4gICAgICAgIGRlc3RbMV0gPSAoLWEyMiAqIGEwMSArIGEwMiAqIGEyMSkgKiBpZDtcbiAgICAgICAgZGVzdFsyXSA9IChhMTIgKiBhMDEgLSBhMDIgKiBhMTEpICogaWQ7XG4gICAgICAgIGRlc3RbM10gPSBiMTEgKiBpZDtcbiAgICAgICAgZGVzdFs0XSA9IChhMjIgKiBhMDAgLSBhMDIgKiBhMjApICogaWQ7XG4gICAgICAgIGRlc3RbNV0gPSAoLWExMiAqIGEwMCArIGEwMiAqIGExMCkgKiBpZDtcbiAgICAgICAgZGVzdFs2XSA9IGIyMSAqIGlkO1xuICAgICAgICBkZXN0WzddID0gKC1hMjEgKiBhMDAgKyBhMDEgKiBhMjApICogaWQ7XG4gICAgICAgIGRlc3RbOF0gPSAoYTExICogYTAwIC0gYTAxICogYTEwKSAqIGlkO1xuXG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIHttYXQ0fSBtYXQgRmlyc3Qgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB7bWF0NH0gbWF0MiBTZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB7bWF0NH0gW2Rlc3RdIG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gbWF0XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7bWF0NH0gZGVzdCBpZiBzcGVjaWZpZWQsIG1hdCBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBtYXQ0Lm11bHRpcGx5ID0gZnVuY3Rpb24gKG1hdCwgbWF0MiwgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IG1hdDsgfVxuXG4gICAgICAgIC8vIENhY2hlIHRoZSBtYXRyaXggdmFsdWVzIChtYWtlcyBmb3IgaHVnZSBzcGVlZCBpbmNyZWFzZXMhKVxuICAgICAgICB2YXIgYTAwID0gbWF0WyAwXSwgYTAxID0gbWF0WyAxXSwgYTAyID0gbWF0WyAyXSwgYTAzID0gbWF0WzNdO1xuICAgICAgICB2YXIgYTEwID0gbWF0WyA0XSwgYTExID0gbWF0WyA1XSwgYTEyID0gbWF0WyA2XSwgYTEzID0gbWF0WzddO1xuICAgICAgICB2YXIgYTIwID0gbWF0WyA4XSwgYTIxID0gbWF0WyA5XSwgYTIyID0gbWF0WzEwXSwgYTIzID0gbWF0WzExXTtcbiAgICAgICAgdmFyIGEzMCA9IG1hdFsxMl0sIGEzMSA9IG1hdFsxM10sIGEzMiA9IG1hdFsxNF0sIGEzMyA9IG1hdFsxNV07XG5cbiAgICAgICAgLy8gQ2FjaGUgb25seSB0aGUgY3VycmVudCBsaW5lIG9mIHRoZSBzZWNvbmQgbWF0cml4XG4gICAgICAgIHZhciBiMCAgPSBtYXQyWzBdLCBiMSA9IG1hdDJbMV0sIGIyID0gbWF0MlsyXSwgYjMgPSBtYXQyWzNdOyAgXG4gICAgICAgIGRlc3RbMF0gPSBiMCphMDAgKyBiMSphMTAgKyBiMiphMjAgKyBiMyphMzA7XG4gICAgICAgIGRlc3RbMV0gPSBiMCphMDEgKyBiMSphMTEgKyBiMiphMjEgKyBiMyphMzE7XG4gICAgICAgIGRlc3RbMl0gPSBiMCphMDIgKyBiMSphMTIgKyBiMiphMjIgKyBiMyphMzI7XG4gICAgICAgIGRlc3RbM10gPSBiMCphMDMgKyBiMSphMTMgKyBiMiphMjMgKyBiMyphMzM7XG5cbiAgICAgICAgYjAgPSBtYXQyWzRdO1xuICAgICAgICBiMSA9IG1hdDJbNV07XG4gICAgICAgIGIyID0gbWF0Mls2XTtcbiAgICAgICAgYjMgPSBtYXQyWzddO1xuICAgICAgICBkZXN0WzRdID0gYjAqYTAwICsgYjEqYTEwICsgYjIqYTIwICsgYjMqYTMwO1xuICAgICAgICBkZXN0WzVdID0gYjAqYTAxICsgYjEqYTExICsgYjIqYTIxICsgYjMqYTMxO1xuICAgICAgICBkZXN0WzZdID0gYjAqYTAyICsgYjEqYTEyICsgYjIqYTIyICsgYjMqYTMyO1xuICAgICAgICBkZXN0WzddID0gYjAqYTAzICsgYjEqYTEzICsgYjIqYTIzICsgYjMqYTMzO1xuXG4gICAgICAgIGIwID0gbWF0Mls4XTtcbiAgICAgICAgYjEgPSBtYXQyWzldO1xuICAgICAgICBiMiA9IG1hdDJbMTBdO1xuICAgICAgICBiMyA9IG1hdDJbMTFdO1xuICAgICAgICBkZXN0WzhdID0gYjAqYTAwICsgYjEqYTEwICsgYjIqYTIwICsgYjMqYTMwO1xuICAgICAgICBkZXN0WzldID0gYjAqYTAxICsgYjEqYTExICsgYjIqYTIxICsgYjMqYTMxO1xuICAgICAgICBkZXN0WzEwXSA9IGIwKmEwMiArIGIxKmExMiArIGIyKmEyMiArIGIzKmEzMjtcbiAgICAgICAgZGVzdFsxMV0gPSBiMCphMDMgKyBiMSphMTMgKyBiMiphMjMgKyBiMyphMzM7XG5cbiAgICAgICAgYjAgPSBtYXQyWzEyXTtcbiAgICAgICAgYjEgPSBtYXQyWzEzXTtcbiAgICAgICAgYjIgPSBtYXQyWzE0XTtcbiAgICAgICAgYjMgPSBtYXQyWzE1XTtcbiAgICAgICAgZGVzdFsxMl0gPSBiMCphMDAgKyBiMSphMTAgKyBiMiphMjAgKyBiMyphMzA7XG4gICAgICAgIGRlc3RbMTNdID0gYjAqYTAxICsgYjEqYTExICsgYjIqYTIxICsgYjMqYTMxO1xuICAgICAgICBkZXN0WzE0XSA9IGIwKmEwMiArIGIxKmExMiArIGIyKmEyMiArIGIzKmEzMjtcbiAgICAgICAgZGVzdFsxNV0gPSBiMCphMDMgKyBiMSphMTMgKyBiMiphMjMgKyBiMyphMzM7XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgYSB2ZWMzIHdpdGggdGhlIGdpdmVuIG1hdHJpeFxuICAgICAqIDR0aCB2ZWN0b3IgY29tcG9uZW50IGlzIGltcGxpY2l0bHkgJzEnXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDR9IG1hdCBtYXQ0IHRvIHRyYW5zZm9ybSB0aGUgdmVjdG9yIHdpdGhcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyB2ZWMzIHRvIHRyYW5zZm9ybVxuICAgICAqIEBwYXJhbSB7dmVjM30gW2Rlc3RdIHZlYzMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gdmVjXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7dmVjM30gZGVzdCBpZiBzcGVjaWZpZWQsIHZlYyBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBtYXQ0Lm11bHRpcGx5VmVjMyA9IGZ1bmN0aW9uIChtYXQsIHZlYywgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IHZlYzsgfVxuXG4gICAgICAgIHZhciB4ID0gdmVjWzBdLCB5ID0gdmVjWzFdLCB6ID0gdmVjWzJdO1xuXG4gICAgICAgIGRlc3RbMF0gPSBtYXRbMF0gKiB4ICsgbWF0WzRdICogeSArIG1hdFs4XSAqIHogKyBtYXRbMTJdO1xuICAgICAgICBkZXN0WzFdID0gbWF0WzFdICogeCArIG1hdFs1XSAqIHkgKyBtYXRbOV0gKiB6ICsgbWF0WzEzXTtcbiAgICAgICAgZGVzdFsyXSA9IG1hdFsyXSAqIHggKyBtYXRbNl0gKiB5ICsgbWF0WzEwXSAqIHogKyBtYXRbMTRdO1xuXG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm1zIGEgdmVjNCB3aXRoIHRoZSBnaXZlbiBtYXRyaXhcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0NH0gbWF0IG1hdDQgdG8gdHJhbnNmb3JtIHRoZSB2ZWN0b3Igd2l0aFxuICAgICAqIEBwYXJhbSB7dmVjNH0gdmVjIHZlYzQgdG8gdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHt2ZWM0fSBbZGVzdF0gdmVjNCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byB2ZWNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt2ZWM0fSBkZXN0IGlmIHNwZWNpZmllZCwgdmVjIG90aGVyd2lzZVxuICAgICAqL1xuICAgIG1hdDQubXVsdGlwbHlWZWM0ID0gZnVuY3Rpb24gKG1hdCwgdmVjLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gdmVjOyB9XG5cbiAgICAgICAgdmFyIHggPSB2ZWNbMF0sIHkgPSB2ZWNbMV0sIHogPSB2ZWNbMl0sIHcgPSB2ZWNbM107XG5cbiAgICAgICAgZGVzdFswXSA9IG1hdFswXSAqIHggKyBtYXRbNF0gKiB5ICsgbWF0WzhdICogeiArIG1hdFsxMl0gKiB3O1xuICAgICAgICBkZXN0WzFdID0gbWF0WzFdICogeCArIG1hdFs1XSAqIHkgKyBtYXRbOV0gKiB6ICsgbWF0WzEzXSAqIHc7XG4gICAgICAgIGRlc3RbMl0gPSBtYXRbMl0gKiB4ICsgbWF0WzZdICogeSArIG1hdFsxMF0gKiB6ICsgbWF0WzE0XSAqIHc7XG4gICAgICAgIGRlc3RbM10gPSBtYXRbM10gKiB4ICsgbWF0WzddICogeSArIG1hdFsxMV0gKiB6ICsgbWF0WzE1XSAqIHc7XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIHZlY3RvclxuICAgICAqXG4gICAgICogQHBhcmFtIHttYXQ0fSBtYXQgbWF0NCB0byB0cmFuc2xhdGVcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyB2ZWMzIHNwZWNpZnlpbmcgdGhlIHRyYW5zbGF0aW9uXG4gICAgICogQHBhcmFtIHttYXQ0fSBbZGVzdF0gbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byBtYXRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgbWF0IG90aGVyd2lzZVxuICAgICAqL1xuICAgIG1hdDQudHJhbnNsYXRlID0gZnVuY3Rpb24gKG1hdCwgdmVjLCBkZXN0KSB7XG4gICAgICAgIHZhciB4ID0gdmVjWzBdLCB5ID0gdmVjWzFdLCB6ID0gdmVjWzJdLFxuICAgICAgICAgICAgYTAwLCBhMDEsIGEwMiwgYTAzLFxuICAgICAgICAgICAgYTEwLCBhMTEsIGExMiwgYTEzLFxuICAgICAgICAgICAgYTIwLCBhMjEsIGEyMiwgYTIzO1xuXG4gICAgICAgIGlmICghZGVzdCB8fCBtYXQgPT09IGRlc3QpIHtcbiAgICAgICAgICAgIG1hdFsxMl0gPSBtYXRbMF0gKiB4ICsgbWF0WzRdICogeSArIG1hdFs4XSAqIHogKyBtYXRbMTJdO1xuICAgICAgICAgICAgbWF0WzEzXSA9IG1hdFsxXSAqIHggKyBtYXRbNV0gKiB5ICsgbWF0WzldICogeiArIG1hdFsxM107XG4gICAgICAgICAgICBtYXRbMTRdID0gbWF0WzJdICogeCArIG1hdFs2XSAqIHkgKyBtYXRbMTBdICogeiArIG1hdFsxNF07XG4gICAgICAgICAgICBtYXRbMTVdID0gbWF0WzNdICogeCArIG1hdFs3XSAqIHkgKyBtYXRbMTFdICogeiArIG1hdFsxNV07XG4gICAgICAgICAgICByZXR1cm4gbWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgYTAwID0gbWF0WzBdOyBhMDEgPSBtYXRbMV07IGEwMiA9IG1hdFsyXTsgYTAzID0gbWF0WzNdO1xuICAgICAgICBhMTAgPSBtYXRbNF07IGExMSA9IG1hdFs1XTsgYTEyID0gbWF0WzZdOyBhMTMgPSBtYXRbN107XG4gICAgICAgIGEyMCA9IG1hdFs4XTsgYTIxID0gbWF0WzldOyBhMjIgPSBtYXRbMTBdOyBhMjMgPSBtYXRbMTFdO1xuXG4gICAgICAgIGRlc3RbMF0gPSBhMDA7IGRlc3RbMV0gPSBhMDE7IGRlc3RbMl0gPSBhMDI7IGRlc3RbM10gPSBhMDM7XG4gICAgICAgIGRlc3RbNF0gPSBhMTA7IGRlc3RbNV0gPSBhMTE7IGRlc3RbNl0gPSBhMTI7IGRlc3RbN10gPSBhMTM7XG4gICAgICAgIGRlc3RbOF0gPSBhMjA7IGRlc3RbOV0gPSBhMjE7IGRlc3RbMTBdID0gYTIyOyBkZXN0WzExXSA9IGEyMztcblxuICAgICAgICBkZXN0WzEyXSA9IGEwMCAqIHggKyBhMTAgKiB5ICsgYTIwICogeiArIG1hdFsxMl07XG4gICAgICAgIGRlc3RbMTNdID0gYTAxICogeCArIGExMSAqIHkgKyBhMjEgKiB6ICsgbWF0WzEzXTtcbiAgICAgICAgZGVzdFsxNF0gPSBhMDIgKiB4ICsgYTEyICogeSArIGEyMiAqIHogKyBtYXRbMTRdO1xuICAgICAgICBkZXN0WzE1XSA9IGEwMyAqIHggKyBhMTMgKiB5ICsgYTIzICogeiArIG1hdFsxNV07XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTY2FsZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIHZlY3RvclxuICAgICAqXG4gICAgICogQHBhcmFtIHttYXQ0fSBtYXQgbWF0NCB0byBzY2FsZVxuICAgICAqIEBwYXJhbSB7dmVjM30gdmVjIHZlYzMgc3BlY2lmeWluZyB0aGUgc2NhbGUgZm9yIGVhY2ggYXhpc1xuICAgICAqIEBwYXJhbSB7bWF0NH0gW2Rlc3RdIG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gbWF0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDR9IGRlc3QgaWYgc3BlY2lmaWVkLCBtYXQgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgbWF0NC5zY2FsZSA9IGZ1bmN0aW9uIChtYXQsIHZlYywgZGVzdCkge1xuICAgICAgICB2YXIgeCA9IHZlY1swXSwgeSA9IHZlY1sxXSwgeiA9IHZlY1syXTtcblxuICAgICAgICBpZiAoIWRlc3QgfHwgbWF0ID09PSBkZXN0KSB7XG4gICAgICAgICAgICBtYXRbMF0gKj0geDtcbiAgICAgICAgICAgIG1hdFsxXSAqPSB4O1xuICAgICAgICAgICAgbWF0WzJdICo9IHg7XG4gICAgICAgICAgICBtYXRbM10gKj0geDtcbiAgICAgICAgICAgIG1hdFs0XSAqPSB5O1xuICAgICAgICAgICAgbWF0WzVdICo9IHk7XG4gICAgICAgICAgICBtYXRbNl0gKj0geTtcbiAgICAgICAgICAgIG1hdFs3XSAqPSB5O1xuICAgICAgICAgICAgbWF0WzhdICo9IHo7XG4gICAgICAgICAgICBtYXRbOV0gKj0gejtcbiAgICAgICAgICAgIG1hdFsxMF0gKj0gejtcbiAgICAgICAgICAgIG1hdFsxMV0gKj0gejtcbiAgICAgICAgICAgIHJldHVybiBtYXQ7XG4gICAgICAgIH1cblxuICAgICAgICBkZXN0WzBdID0gbWF0WzBdICogeDtcbiAgICAgICAgZGVzdFsxXSA9IG1hdFsxXSAqIHg7XG4gICAgICAgIGRlc3RbMl0gPSBtYXRbMl0gKiB4O1xuICAgICAgICBkZXN0WzNdID0gbWF0WzNdICogeDtcbiAgICAgICAgZGVzdFs0XSA9IG1hdFs0XSAqIHk7XG4gICAgICAgIGRlc3RbNV0gPSBtYXRbNV0gKiB5O1xuICAgICAgICBkZXN0WzZdID0gbWF0WzZdICogeTtcbiAgICAgICAgZGVzdFs3XSA9IG1hdFs3XSAqIHk7XG4gICAgICAgIGRlc3RbOF0gPSBtYXRbOF0gKiB6O1xuICAgICAgICBkZXN0WzldID0gbWF0WzldICogejtcbiAgICAgICAgZGVzdFsxMF0gPSBtYXRbMTBdICogejtcbiAgICAgICAgZGVzdFsxMV0gPSBtYXRbMTFdICogejtcbiAgICAgICAgZGVzdFsxMl0gPSBtYXRbMTJdO1xuICAgICAgICBkZXN0WzEzXSA9IG1hdFsxM107XG4gICAgICAgIGRlc3RbMTRdID0gbWF0WzE0XTtcbiAgICAgICAgZGVzdFsxNV0gPSBtYXRbMTVdO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBzcGVjaWZpZWQgYXhpc1xuICAgICAqIElmIHJvdGF0aW5nIGFyb3VuZCBhIHByaW1hcnkgYXhpcyAoWCxZLFopIG9uZSBvZiB0aGUgc3BlY2lhbGl6ZWQgcm90YXRpb24gZnVuY3Rpb25zIHNob3VsZCBiZSB1c2VkIGluc3RlYWQgZm9yIHBlcmZvcm1hbmNlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDR9IG1hdCBtYXQ0IHRvIHJvdGF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSBBbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gICAgICogQHBhcmFtIHt2ZWMzfSBheGlzIHZlYzMgcmVwcmVzZW50aW5nIHRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmRcbiAgICAgKiBAcGFyYW0ge21hdDR9IFtkZXN0XSBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIG1hdFxuICAgICAqXG4gICAgICogQHJldHVybnMge21hdDR9IGRlc3QgaWYgc3BlY2lmaWVkLCBtYXQgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgbWF0NC5yb3RhdGUgPSBmdW5jdGlvbiAobWF0LCBhbmdsZSwgYXhpcywgZGVzdCkge1xuICAgICAgICB2YXIgeCA9IGF4aXNbMF0sIHkgPSBheGlzWzFdLCB6ID0gYXhpc1syXSxcbiAgICAgICAgICAgIGxlbiA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopLFxuICAgICAgICAgICAgcywgYywgdCxcbiAgICAgICAgICAgIGEwMCwgYTAxLCBhMDIsIGEwMyxcbiAgICAgICAgICAgIGExMCwgYTExLCBhMTIsIGExMyxcbiAgICAgICAgICAgIGEyMCwgYTIxLCBhMjIsIGEyMyxcbiAgICAgICAgICAgIGIwMCwgYjAxLCBiMDIsXG4gICAgICAgICAgICBiMTAsIGIxMSwgYjEyLFxuICAgICAgICAgICAgYjIwLCBiMjEsIGIyMjtcblxuICAgICAgICBpZiAoIWxlbikgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICBpZiAobGVuICE9PSAxKSB7XG4gICAgICAgICAgICBsZW4gPSAxIC8gbGVuO1xuICAgICAgICAgICAgeCAqPSBsZW47XG4gICAgICAgICAgICB5ICo9IGxlbjtcbiAgICAgICAgICAgIHogKj0gbGVuO1xuICAgICAgICB9XG5cbiAgICAgICAgcyA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgYyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgdCA9IDEgLSBjO1xuXG4gICAgICAgIGEwMCA9IG1hdFswXTsgYTAxID0gbWF0WzFdOyBhMDIgPSBtYXRbMl07IGEwMyA9IG1hdFszXTtcbiAgICAgICAgYTEwID0gbWF0WzRdOyBhMTEgPSBtYXRbNV07IGExMiA9IG1hdFs2XTsgYTEzID0gbWF0WzddO1xuICAgICAgICBhMjAgPSBtYXRbOF07IGEyMSA9IG1hdFs5XTsgYTIyID0gbWF0WzEwXTsgYTIzID0gbWF0WzExXTtcblxuICAgICAgICAvLyBDb25zdHJ1Y3QgdGhlIGVsZW1lbnRzIG9mIHRoZSByb3RhdGlvbiBtYXRyaXhcbiAgICAgICAgYjAwID0geCAqIHggKiB0ICsgYzsgYjAxID0geSAqIHggKiB0ICsgeiAqIHM7IGIwMiA9IHogKiB4ICogdCAtIHkgKiBzO1xuICAgICAgICBiMTAgPSB4ICogeSAqIHQgLSB6ICogczsgYjExID0geSAqIHkgKiB0ICsgYzsgYjEyID0geiAqIHkgKiB0ICsgeCAqIHM7XG4gICAgICAgIGIyMCA9IHggKiB6ICogdCArIHkgKiBzOyBiMjEgPSB5ICogeiAqIHQgLSB4ICogczsgYjIyID0geiAqIHogKiB0ICsgYztcblxuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSBtYXQ7XG4gICAgICAgIH0gZWxzZSBpZiAobWF0ICE9PSBkZXN0KSB7IC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIGxhc3Qgcm93XG4gICAgICAgICAgICBkZXN0WzEyXSA9IG1hdFsxMl07XG4gICAgICAgICAgICBkZXN0WzEzXSA9IG1hdFsxM107XG4gICAgICAgICAgICBkZXN0WzE0XSA9IG1hdFsxNF07XG4gICAgICAgICAgICBkZXN0WzE1XSA9IG1hdFsxNV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgICAgICBkZXN0WzBdID0gYTAwICogYjAwICsgYTEwICogYjAxICsgYTIwICogYjAyO1xuICAgICAgICBkZXN0WzFdID0gYTAxICogYjAwICsgYTExICogYjAxICsgYTIxICogYjAyO1xuICAgICAgICBkZXN0WzJdID0gYTAyICogYjAwICsgYTEyICogYjAxICsgYTIyICogYjAyO1xuICAgICAgICBkZXN0WzNdID0gYTAzICogYjAwICsgYTEzICogYjAxICsgYTIzICogYjAyO1xuXG4gICAgICAgIGRlc3RbNF0gPSBhMDAgKiBiMTAgKyBhMTAgKiBiMTEgKyBhMjAgKiBiMTI7XG4gICAgICAgIGRlc3RbNV0gPSBhMDEgKiBiMTAgKyBhMTEgKiBiMTEgKyBhMjEgKiBiMTI7XG4gICAgICAgIGRlc3RbNl0gPSBhMDIgKiBiMTAgKyBhMTIgKiBiMTEgKyBhMjIgKiBiMTI7XG4gICAgICAgIGRlc3RbN10gPSBhMDMgKiBiMTAgKyBhMTMgKiBiMTEgKyBhMjMgKiBiMTI7XG5cbiAgICAgICAgZGVzdFs4XSA9IGEwMCAqIGIyMCArIGExMCAqIGIyMSArIGEyMCAqIGIyMjtcbiAgICAgICAgZGVzdFs5XSA9IGEwMSAqIGIyMCArIGExMSAqIGIyMSArIGEyMSAqIGIyMjtcbiAgICAgICAgZGVzdFsxMF0gPSBhMDIgKiBiMjAgKyBhMTIgKiBiMjEgKyBhMjIgKiBiMjI7XG4gICAgICAgIGRlc3RbMTFdID0gYTAzICogYjIwICsgYTEzICogYjIxICsgYTIzICogYjIyO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBYIGF4aXNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0NH0gbWF0IG1hdDQgdG8gcm90YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIEFuZ2xlIChpbiByYWRpYW5zKSB0byByb3RhdGVcbiAgICAgKiBAcGFyYW0ge21hdDR9IFtkZXN0XSBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIG1hdFxuICAgICAqXG4gICAgICogQHJldHVybnMge21hdDR9IGRlc3QgaWYgc3BlY2lmaWVkLCBtYXQgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgbWF0NC5yb3RhdGVYID0gZnVuY3Rpb24gKG1hdCwgYW5nbGUsIGRlc3QpIHtcbiAgICAgICAgdmFyIHMgPSBNYXRoLnNpbihhbmdsZSksXG4gICAgICAgICAgICBjID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICAgICAgYTEwID0gbWF0WzRdLFxuICAgICAgICAgICAgYTExID0gbWF0WzVdLFxuICAgICAgICAgICAgYTEyID0gbWF0WzZdLFxuICAgICAgICAgICAgYTEzID0gbWF0WzddLFxuICAgICAgICAgICAgYTIwID0gbWF0WzhdLFxuICAgICAgICAgICAgYTIxID0gbWF0WzldLFxuICAgICAgICAgICAgYTIyID0gbWF0WzEwXSxcbiAgICAgICAgICAgIGEyMyA9IG1hdFsxMV07XG5cbiAgICAgICAgaWYgKCFkZXN0KSB7XG4gICAgICAgICAgICBkZXN0ID0gbWF0O1xuICAgICAgICB9IGVsc2UgaWYgKG1hdCAhPT0gZGVzdCkgeyAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCByb3dzXG4gICAgICAgICAgICBkZXN0WzBdID0gbWF0WzBdO1xuICAgICAgICAgICAgZGVzdFsxXSA9IG1hdFsxXTtcbiAgICAgICAgICAgIGRlc3RbMl0gPSBtYXRbMl07XG4gICAgICAgICAgICBkZXN0WzNdID0gbWF0WzNdO1xuXG4gICAgICAgICAgICBkZXN0WzEyXSA9IG1hdFsxMl07XG4gICAgICAgICAgICBkZXN0WzEzXSA9IG1hdFsxM107XG4gICAgICAgICAgICBkZXN0WzE0XSA9IG1hdFsxNF07XG4gICAgICAgICAgICBkZXN0WzE1XSA9IG1hdFsxNV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXG4gICAgICAgIGRlc3RbNF0gPSBhMTAgKiBjICsgYTIwICogcztcbiAgICAgICAgZGVzdFs1XSA9IGExMSAqIGMgKyBhMjEgKiBzO1xuICAgICAgICBkZXN0WzZdID0gYTEyICogYyArIGEyMiAqIHM7XG4gICAgICAgIGRlc3RbN10gPSBhMTMgKiBjICsgYTIzICogcztcblxuICAgICAgICBkZXN0WzhdID0gYTEwICogLXMgKyBhMjAgKiBjO1xuICAgICAgICBkZXN0WzldID0gYTExICogLXMgKyBhMjEgKiBjO1xuICAgICAgICBkZXN0WzEwXSA9IGExMiAqIC1zICsgYTIyICogYztcbiAgICAgICAgZGVzdFsxMV0gPSBhMTMgKiAtcyArIGEyMyAqIGM7XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGVzIGEgbWF0cml4IGJ5IHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFkgYXhpc1xuICAgICAqXG4gICAgICogQHBhcmFtIHttYXQ0fSBtYXQgbWF0NCB0byByb3RhdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgQW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICAgICAqIEBwYXJhbSB7bWF0NH0gW2Rlc3RdIG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gbWF0XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7bWF0NH0gZGVzdCBpZiBzcGVjaWZpZWQsIG1hdCBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBtYXQ0LnJvdGF0ZVkgPSBmdW5jdGlvbiAobWF0LCBhbmdsZSwgZGVzdCkge1xuICAgICAgICB2YXIgcyA9IE1hdGguc2luKGFuZ2xlKSxcbiAgICAgICAgICAgIGMgPSBNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgICAgICBhMDAgPSBtYXRbMF0sXG4gICAgICAgICAgICBhMDEgPSBtYXRbMV0sXG4gICAgICAgICAgICBhMDIgPSBtYXRbMl0sXG4gICAgICAgICAgICBhMDMgPSBtYXRbM10sXG4gICAgICAgICAgICBhMjAgPSBtYXRbOF0sXG4gICAgICAgICAgICBhMjEgPSBtYXRbOV0sXG4gICAgICAgICAgICBhMjIgPSBtYXRbMTBdLFxuICAgICAgICAgICAgYTIzID0gbWF0WzExXTtcblxuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSBtYXQ7XG4gICAgICAgIH0gZWxzZSBpZiAobWF0ICE9PSBkZXN0KSB7IC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIHJvd3NcbiAgICAgICAgICAgIGRlc3RbNF0gPSBtYXRbNF07XG4gICAgICAgICAgICBkZXN0WzVdID0gbWF0WzVdO1xuICAgICAgICAgICAgZGVzdFs2XSA9IG1hdFs2XTtcbiAgICAgICAgICAgIGRlc3RbN10gPSBtYXRbN107XG5cbiAgICAgICAgICAgIGRlc3RbMTJdID0gbWF0WzEyXTtcbiAgICAgICAgICAgIGRlc3RbMTNdID0gbWF0WzEzXTtcbiAgICAgICAgICAgIGRlc3RbMTRdID0gbWF0WzE0XTtcbiAgICAgICAgICAgIGRlc3RbMTVdID0gbWF0WzE1XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgICAgICAgZGVzdFswXSA9IGEwMCAqIGMgKyBhMjAgKiAtcztcbiAgICAgICAgZGVzdFsxXSA9IGEwMSAqIGMgKyBhMjEgKiAtcztcbiAgICAgICAgZGVzdFsyXSA9IGEwMiAqIGMgKyBhMjIgKiAtcztcbiAgICAgICAgZGVzdFszXSA9IGEwMyAqIGMgKyBhMjMgKiAtcztcblxuICAgICAgICBkZXN0WzhdID0gYTAwICogcyArIGEyMCAqIGM7XG4gICAgICAgIGRlc3RbOV0gPSBhMDEgKiBzICsgYTIxICogYztcbiAgICAgICAgZGVzdFsxMF0gPSBhMDIgKiBzICsgYTIyICogYztcbiAgICAgICAgZGVzdFsxMV0gPSBhMDMgKiBzICsgYTIzICogYztcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWiBheGlzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDR9IG1hdCBtYXQ0IHRvIHJvdGF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSBBbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gICAgICogQHBhcmFtIHttYXQ0fSBbZGVzdF0gbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byBtYXRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgbWF0IG90aGVyd2lzZVxuICAgICAqL1xuICAgIG1hdDQucm90YXRlWiA9IGZ1bmN0aW9uIChtYXQsIGFuZ2xlLCBkZXN0KSB7XG4gICAgICAgIHZhciBzID0gTWF0aC5zaW4oYW5nbGUpLFxuICAgICAgICAgICAgYyA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgICAgIGEwMCA9IG1hdFswXSxcbiAgICAgICAgICAgIGEwMSA9IG1hdFsxXSxcbiAgICAgICAgICAgIGEwMiA9IG1hdFsyXSxcbiAgICAgICAgICAgIGEwMyA9IG1hdFszXSxcbiAgICAgICAgICAgIGExMCA9IG1hdFs0XSxcbiAgICAgICAgICAgIGExMSA9IG1hdFs1XSxcbiAgICAgICAgICAgIGExMiA9IG1hdFs2XSxcbiAgICAgICAgICAgIGExMyA9IG1hdFs3XTtcblxuICAgICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICAgIGRlc3QgPSBtYXQ7XG4gICAgICAgIH0gZWxzZSBpZiAobWF0ICE9PSBkZXN0KSB7IC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIGxhc3Qgcm93XG4gICAgICAgICAgICBkZXN0WzhdID0gbWF0WzhdO1xuICAgICAgICAgICAgZGVzdFs5XSA9IG1hdFs5XTtcbiAgICAgICAgICAgIGRlc3RbMTBdID0gbWF0WzEwXTtcbiAgICAgICAgICAgIGRlc3RbMTFdID0gbWF0WzExXTtcblxuICAgICAgICAgICAgZGVzdFsxMl0gPSBtYXRbMTJdO1xuICAgICAgICAgICAgZGVzdFsxM10gPSBtYXRbMTNdO1xuICAgICAgICAgICAgZGVzdFsxNF0gPSBtYXRbMTRdO1xuICAgICAgICAgICAgZGVzdFsxNV0gPSBtYXRbMTVdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgICAgICBkZXN0WzBdID0gYTAwICogYyArIGExMCAqIHM7XG4gICAgICAgIGRlc3RbMV0gPSBhMDEgKiBjICsgYTExICogcztcbiAgICAgICAgZGVzdFsyXSA9IGEwMiAqIGMgKyBhMTIgKiBzO1xuICAgICAgICBkZXN0WzNdID0gYTAzICogYyArIGExMyAqIHM7XG5cbiAgICAgICAgZGVzdFs0XSA9IGEwMCAqIC1zICsgYTEwICogYztcbiAgICAgICAgZGVzdFs1XSA9IGEwMSAqIC1zICsgYTExICogYztcbiAgICAgICAgZGVzdFs2XSA9IGEwMiAqIC1zICsgYTEyICogYztcbiAgICAgICAgZGVzdFs3XSA9IGEwMyAqIC1zICsgYTEzICogYztcblxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgZnJ1c3R1bSBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVmdCBMZWZ0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJpZ2h0IFJpZ2h0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJvdHRvbSBCb3R0b20gYm91bmQgb2YgdGhlIGZydXN0dW1cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdG9wIFRvcCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICAgICAqIEBwYXJhbSB7bWF0NH0gW2Rlc3RdIG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgYSBuZXcgbWF0NCBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBtYXQ0LmZydXN0dW0gPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBtYXQ0LmNyZWF0ZSgpOyB9XG4gICAgICAgIHZhciBybCA9IChyaWdodCAtIGxlZnQpLFxuICAgICAgICAgICAgdGIgPSAodG9wIC0gYm90dG9tKSxcbiAgICAgICAgICAgIGZuID0gKGZhciAtIG5lYXIpO1xuICAgICAgICBkZXN0WzBdID0gKG5lYXIgKiAyKSAvIHJsO1xuICAgICAgICBkZXN0WzFdID0gMDtcbiAgICAgICAgZGVzdFsyXSA9IDA7XG4gICAgICAgIGRlc3RbM10gPSAwO1xuICAgICAgICBkZXN0WzRdID0gMDtcbiAgICAgICAgZGVzdFs1XSA9IChuZWFyICogMikgLyB0YjtcbiAgICAgICAgZGVzdFs2XSA9IDA7XG4gICAgICAgIGRlc3RbN10gPSAwO1xuICAgICAgICBkZXN0WzhdID0gKHJpZ2h0ICsgbGVmdCkgLyBybDtcbiAgICAgICAgZGVzdFs5XSA9ICh0b3AgKyBib3R0b20pIC8gdGI7XG4gICAgICAgIGRlc3RbMTBdID0gLShmYXIgKyBuZWFyKSAvIGZuO1xuICAgICAgICBkZXN0WzExXSA9IC0xO1xuICAgICAgICBkZXN0WzEyXSA9IDA7XG4gICAgICAgIGRlc3RbMTNdID0gMDtcbiAgICAgICAgZGVzdFsxNF0gPSAtKGZhciAqIG5lYXIgKiAyKSAvIGZuO1xuICAgICAgICBkZXN0WzE1XSA9IDA7XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBwZXJzcGVjdGl2ZSBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBmb3Z5IFZlcnRpY2FsIGZpZWxkIG9mIHZpZXdcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXNwZWN0IEFzcGVjdCByYXRpby4gdHlwaWNhbGx5IHZpZXdwb3J0IHdpZHRoL2hlaWdodFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICAgICAqIEBwYXJhbSB7bWF0NH0gW2Rlc3RdIG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgYSBuZXcgbWF0NCBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBtYXQ0LnBlcnNwZWN0aXZlID0gZnVuY3Rpb24gKGZvdnksIGFzcGVjdCwgbmVhciwgZmFyLCBkZXN0KSB7XG4gICAgICAgIHZhciB0b3AgPSBuZWFyICogTWF0aC50YW4oZm92eSAqIE1hdGguUEkgLyAzNjAuMCksXG4gICAgICAgICAgICByaWdodCA9IHRvcCAqIGFzcGVjdDtcbiAgICAgICAgcmV0dXJuIG1hdDQuZnJ1c3R1bSgtcmlnaHQsIHJpZ2h0LCAtdG9wLCB0b3AsIG5lYXIsIGZhciwgZGVzdCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIG9ydGhvZ29uYWwgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVmdCBMZWZ0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJpZ2h0IFJpZ2h0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJvdHRvbSBCb3R0b20gYm91bmQgb2YgdGhlIGZydXN0dW1cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdG9wIFRvcCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICAgICAqIEBwYXJhbSB7bWF0NH0gW2Rlc3RdIG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgYSBuZXcgbWF0NCBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBtYXQ0Lm9ydGhvID0gZnVuY3Rpb24gKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gbWF0NC5jcmVhdGUoKTsgfVxuICAgICAgICB2YXIgcmwgPSAocmlnaHQgLSBsZWZ0KSxcbiAgICAgICAgICAgIHRiID0gKHRvcCAtIGJvdHRvbSksXG4gICAgICAgICAgICBmbiA9IChmYXIgLSBuZWFyKTtcbiAgICAgICAgZGVzdFswXSA9IDIgLyBybDtcbiAgICAgICAgZGVzdFsxXSA9IDA7XG4gICAgICAgIGRlc3RbMl0gPSAwO1xuICAgICAgICBkZXN0WzNdID0gMDtcbiAgICAgICAgZGVzdFs0XSA9IDA7XG4gICAgICAgIGRlc3RbNV0gPSAyIC8gdGI7XG4gICAgICAgIGRlc3RbNl0gPSAwO1xuICAgICAgICBkZXN0WzddID0gMDtcbiAgICAgICAgZGVzdFs4XSA9IDA7XG4gICAgICAgIGRlc3RbOV0gPSAwO1xuICAgICAgICBkZXN0WzEwXSA9IC0yIC8gZm47XG4gICAgICAgIGRlc3RbMTFdID0gMDtcbiAgICAgICAgZGVzdFsxMl0gPSAtKGxlZnQgKyByaWdodCkgLyBybDtcbiAgICAgICAgZGVzdFsxM10gPSAtKHRvcCArIGJvdHRvbSkgLyB0YjtcbiAgICAgICAgZGVzdFsxNF0gPSAtKGZhciArIG5lYXIpIC8gZm47XG4gICAgICAgIGRlc3RbMTVdID0gMTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIGxvb2stYXQgbWF0cml4IHdpdGggdGhlIGdpdmVuIGV5ZSBwb3NpdGlvbiwgZm9jYWwgcG9pbnQsIGFuZCB1cCBheGlzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3ZlYzN9IGV5ZSBQb3NpdGlvbiBvZiB0aGUgdmlld2VyXG4gICAgICogQHBhcmFtIHt2ZWMzfSBjZW50ZXIgUG9pbnQgdGhlIHZpZXdlciBpcyBsb29raW5nIGF0XG4gICAgICogQHBhcmFtIHt2ZWMzfSB1cCB2ZWMzIHBvaW50aW5nIFwidXBcIlxuICAgICAqIEBwYXJhbSB7bWF0NH0gW2Rlc3RdIG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgYSBuZXcgbWF0NCBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBtYXQ0Lmxvb2tBdCA9IGZ1bmN0aW9uIChleWUsIGNlbnRlciwgdXAsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBtYXQ0LmNyZWF0ZSgpOyB9XG5cbiAgICAgICAgdmFyIHgwLCB4MSwgeDIsIHkwLCB5MSwgeTIsIHowLCB6MSwgejIsIGxlbixcbiAgICAgICAgICAgIGV5ZXggPSBleWVbMF0sXG4gICAgICAgICAgICBleWV5ID0gZXllWzFdLFxuICAgICAgICAgICAgZXlleiA9IGV5ZVsyXSxcbiAgICAgICAgICAgIHVweCA9IHVwWzBdLFxuICAgICAgICAgICAgdXB5ID0gdXBbMV0sXG4gICAgICAgICAgICB1cHogPSB1cFsyXSxcbiAgICAgICAgICAgIGNlbnRlcnggPSBjZW50ZXJbMF0sXG4gICAgICAgICAgICBjZW50ZXJ5ID0gY2VudGVyWzFdLFxuICAgICAgICAgICAgY2VudGVyeiA9IGNlbnRlclsyXTtcblxuICAgICAgICBpZiAoZXlleCA9PT0gY2VudGVyeCAmJiBleWV5ID09PSBjZW50ZXJ5ICYmIGV5ZXogPT09IGNlbnRlcnopIHtcbiAgICAgICAgICAgIHJldHVybiBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy92ZWMzLmRpcmVjdGlvbihleWUsIGNlbnRlciwgeik7XG4gICAgICAgIHowID0gZXlleCAtIGNlbnRlcng7XG4gICAgICAgIHoxID0gZXlleSAtIGNlbnRlcnk7XG4gICAgICAgIHoyID0gZXlleiAtIGNlbnRlcno7XG5cbiAgICAgICAgLy8gbm9ybWFsaXplIChubyBjaGVjayBuZWVkZWQgZm9yIDAgYmVjYXVzZSBvZiBlYXJseSByZXR1cm4pXG4gICAgICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQoejAgKiB6MCArIHoxICogejEgKyB6MiAqIHoyKTtcbiAgICAgICAgejAgKj0gbGVuO1xuICAgICAgICB6MSAqPSBsZW47XG4gICAgICAgIHoyICo9IGxlbjtcblxuICAgICAgICAvL3ZlYzMubm9ybWFsaXplKHZlYzMuY3Jvc3ModXAsIHosIHgpKTtcbiAgICAgICAgeDAgPSB1cHkgKiB6MiAtIHVweiAqIHoxO1xuICAgICAgICB4MSA9IHVweiAqIHowIC0gdXB4ICogejI7XG4gICAgICAgIHgyID0gdXB4ICogejEgLSB1cHkgKiB6MDtcbiAgICAgICAgbGVuID0gTWF0aC5zcXJ0KHgwICogeDAgKyB4MSAqIHgxICsgeDIgKiB4Mik7XG4gICAgICAgIGlmICghbGVuKSB7XG4gICAgICAgICAgICB4MCA9IDA7XG4gICAgICAgICAgICB4MSA9IDA7XG4gICAgICAgICAgICB4MiA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZW4gPSAxIC8gbGVuO1xuICAgICAgICAgICAgeDAgKj0gbGVuO1xuICAgICAgICAgICAgeDEgKj0gbGVuO1xuICAgICAgICAgICAgeDIgKj0gbGVuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy92ZWMzLm5vcm1hbGl6ZSh2ZWMzLmNyb3NzKHosIHgsIHkpKTtcbiAgICAgICAgeTAgPSB6MSAqIHgyIC0gejIgKiB4MTtcbiAgICAgICAgeTEgPSB6MiAqIHgwIC0gejAgKiB4MjtcbiAgICAgICAgeTIgPSB6MCAqIHgxIC0gejEgKiB4MDtcblxuICAgICAgICBsZW4gPSBNYXRoLnNxcnQoeTAgKiB5MCArIHkxICogeTEgKyB5MiAqIHkyKTtcbiAgICAgICAgaWYgKCFsZW4pIHtcbiAgICAgICAgICAgIHkwID0gMDtcbiAgICAgICAgICAgIHkxID0gMDtcbiAgICAgICAgICAgIHkyID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxlbiA9IDEgLyBsZW47XG4gICAgICAgICAgICB5MCAqPSBsZW47XG4gICAgICAgICAgICB5MSAqPSBsZW47XG4gICAgICAgICAgICB5MiAqPSBsZW47XG4gICAgICAgIH1cblxuICAgICAgICBkZXN0WzBdID0geDA7XG4gICAgICAgIGRlc3RbMV0gPSB5MDtcbiAgICAgICAgZGVzdFsyXSA9IHowO1xuICAgICAgICBkZXN0WzNdID0gMDtcbiAgICAgICAgZGVzdFs0XSA9IHgxO1xuICAgICAgICBkZXN0WzVdID0geTE7XG4gICAgICAgIGRlc3RbNl0gPSB6MTtcbiAgICAgICAgZGVzdFs3XSA9IDA7XG4gICAgICAgIGRlc3RbOF0gPSB4MjtcbiAgICAgICAgZGVzdFs5XSA9IHkyO1xuICAgICAgICBkZXN0WzEwXSA9IHoyO1xuICAgICAgICBkZXN0WzExXSA9IDA7XG4gICAgICAgIGRlc3RbMTJdID0gLSh4MCAqIGV5ZXggKyB4MSAqIGV5ZXkgKyB4MiAqIGV5ZXopO1xuICAgICAgICBkZXN0WzEzXSA9IC0oeTAgKiBleWV4ICsgeTEgKiBleWV5ICsgeTIgKiBleWV6KTtcbiAgICAgICAgZGVzdFsxNF0gPSAtKHowICogZXlleCArIHoxICogZXlleSArIHoyICogZXlleik7XG4gICAgICAgIGRlc3RbMTVdID0gMTtcblxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiByb3RhdGlvbiBhbmQgdmVjdG9yIHRyYW5zbGF0aW9uXG4gICAgICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XG4gICAgICpcbiAgICAgKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAgICAgKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgdmVjKTtcbiAgICAgKiAgICAgdmFyIHF1YXRNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xuICAgICAqICAgICBxdWF0NC50b01hdDQocXVhdCwgcXVhdE1hdCk7XG4gICAgICogICAgIG1hdDQubXVsdGlwbHkoZGVzdCwgcXVhdE1hdCk7XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3F1YXQ0fSBxdWF0IFJvdGF0aW9uIHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyBUcmFuc2xhdGlvbiB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge21hdDR9IFtkZXN0XSBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIGEgbmV3IG1hdDRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHttYXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgYSBuZXcgbWF0NCBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBtYXQ0LmZyb21Sb3RhdGlvblRyYW5zbGF0aW9uID0gZnVuY3Rpb24gKHF1YXQsIHZlYywgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IG1hdDQuY3JlYXRlKCk7IH1cblxuICAgICAgICAvLyBRdWF0ZXJuaW9uIG1hdGhcbiAgICAgICAgdmFyIHggPSBxdWF0WzBdLCB5ID0gcXVhdFsxXSwgeiA9IHF1YXRbMl0sIHcgPSBxdWF0WzNdLFxuICAgICAgICAgICAgeDIgPSB4ICsgeCxcbiAgICAgICAgICAgIHkyID0geSArIHksXG4gICAgICAgICAgICB6MiA9IHogKyB6LFxuXG4gICAgICAgICAgICB4eCA9IHggKiB4MixcbiAgICAgICAgICAgIHh5ID0geCAqIHkyLFxuICAgICAgICAgICAgeHogPSB4ICogejIsXG4gICAgICAgICAgICB5eSA9IHkgKiB5MixcbiAgICAgICAgICAgIHl6ID0geSAqIHoyLFxuICAgICAgICAgICAgenogPSB6ICogejIsXG4gICAgICAgICAgICB3eCA9IHcgKiB4MixcbiAgICAgICAgICAgIHd5ID0gdyAqIHkyLFxuICAgICAgICAgICAgd3ogPSB3ICogejI7XG5cbiAgICAgICAgZGVzdFswXSA9IDEgLSAoeXkgKyB6eik7XG4gICAgICAgIGRlc3RbMV0gPSB4eSArIHd6O1xuICAgICAgICBkZXN0WzJdID0geHogLSB3eTtcbiAgICAgICAgZGVzdFszXSA9IDA7XG4gICAgICAgIGRlc3RbNF0gPSB4eSAtIHd6O1xuICAgICAgICBkZXN0WzVdID0gMSAtICh4eCArIHp6KTtcbiAgICAgICAgZGVzdFs2XSA9IHl6ICsgd3g7XG4gICAgICAgIGRlc3RbN10gPSAwO1xuICAgICAgICBkZXN0WzhdID0geHogKyB3eTtcbiAgICAgICAgZGVzdFs5XSA9IHl6IC0gd3g7XG4gICAgICAgIGRlc3RbMTBdID0gMSAtICh4eCArIHl5KTtcbiAgICAgICAgZGVzdFsxMV0gPSAwO1xuICAgICAgICBkZXN0WzEyXSA9IHZlY1swXTtcbiAgICAgICAgZGVzdFsxM10gPSB2ZWNbMV07XG4gICAgICAgIGRlc3RbMTRdID0gdmVjWzJdO1xuICAgICAgICBkZXN0WzE1XSA9IDE7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIG1hdDRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0NH0gbWF0IG1hdDQgdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgbWF0XG4gICAgICovXG4gICAgbWF0NC5zdHIgPSBmdW5jdGlvbiAobWF0KSB7XG4gICAgICAgIHJldHVybiAnWycgKyBtYXRbMF0gKyAnLCAnICsgbWF0WzFdICsgJywgJyArIG1hdFsyXSArICcsICcgKyBtYXRbM10gK1xuICAgICAgICAgICAgJywgJyArIG1hdFs0XSArICcsICcgKyBtYXRbNV0gKyAnLCAnICsgbWF0WzZdICsgJywgJyArIG1hdFs3XSArXG4gICAgICAgICAgICAnLCAnICsgbWF0WzhdICsgJywgJyArIG1hdFs5XSArICcsICcgKyBtYXRbMTBdICsgJywgJyArIG1hdFsxMV0gK1xuICAgICAgICAgICAgJywgJyArIG1hdFsxMl0gKyAnLCAnICsgbWF0WzEzXSArICcsICcgKyBtYXRbMTRdICsgJywgJyArIG1hdFsxNV0gKyAnXSc7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBjbGFzcyBRdWF0ZXJuaW9uXG4gICAgICogQG5hbWUgcXVhdDRcbiAgICAgKi9cbiAgICB2YXIgcXVhdDQgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBxdWF0NCB1c2luZyB0aGUgZGVmYXVsdCBhcnJheSB0eXBlXG4gICAgICogQW55IGphdmFzY3JpcHQgYXJyYXkgY29udGFpbmluZyBhdCBsZWFzdCA0IG51bWVyaWMgZWxlbWVudHMgY2FuIHNlcnZlIGFzIGEgcXVhdDRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7cXVhdDR9IFtxdWF0XSBxdWF0NCBjb250YWluaW5nIHZhbHVlcyB0byBpbml0aWFsaXplIHdpdGhcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtxdWF0NH0gTmV3IHF1YXQ0XG4gICAgICovXG4gICAgcXVhdDQuY3JlYXRlID0gZnVuY3Rpb24gKHF1YXQpIHtcbiAgICAgICAgdmFyIGRlc3QgPSBuZXcgTWF0cml4QXJyYXkoNCk7XG5cbiAgICAgICAgaWYgKHF1YXQpIHtcbiAgICAgICAgICAgIGRlc3RbMF0gPSBxdWF0WzBdO1xuICAgICAgICAgICAgZGVzdFsxXSA9IHF1YXRbMV07XG4gICAgICAgICAgICBkZXN0WzJdID0gcXVhdFsyXTtcbiAgICAgICAgICAgIGRlc3RbM10gPSBxdWF0WzNdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVzdFswXSA9IGRlc3RbMV0gPSBkZXN0WzJdID0gZGVzdFszXSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIHF1YXQ0LCBpbml0aWFsaXppbmcgaXQgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geCBYIHZhbHVlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkgWSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB6IFogdmFsdWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdyBXIHZhbHVlXG5cbiAgICAgKiBAcmV0dXJucyB7cXVhdDR9IE5ldyBxdWF0NFxuICAgICAqL1xuICAgIHF1YXQ0LmNyZWF0ZUZyb20gPSBmdW5jdGlvbiAoeCwgeSwgeiwgdykge1xuICAgICAgICB2YXIgZGVzdCA9IG5ldyBNYXRyaXhBcnJheSg0KTtcblxuICAgICAgICBkZXN0WzBdID0geDtcbiAgICAgICAgZGVzdFsxXSA9IHk7XG4gICAgICAgIGRlc3RbMl0gPSB6O1xuICAgICAgICBkZXN0WzNdID0gdztcblxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2Ygb25lIHF1YXQ0IHRvIGFub3RoZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7cXVhdDR9IHF1YXQgcXVhdDQgY29udGFpbmluZyB2YWx1ZXMgdG8gY29weVxuICAgICAqIEBwYXJhbSB7cXVhdDR9IGRlc3QgcXVhdDQgcmVjZWl2aW5nIGNvcGllZCB2YWx1ZXNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtxdWF0NH0gZGVzdFxuICAgICAqL1xuICAgIHF1YXQ0LnNldCA9IGZ1bmN0aW9uIChxdWF0LCBkZXN0KSB7XG4gICAgICAgIGRlc3RbMF0gPSBxdWF0WzBdO1xuICAgICAgICBkZXN0WzFdID0gcXVhdFsxXTtcbiAgICAgICAgZGVzdFsyXSA9IHF1YXRbMl07XG4gICAgICAgIGRlc3RbM10gPSBxdWF0WzNdO1xuXG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB0d28gcXVhdGVybmlvbnMgZm9yIGVxdWFsaXR5IHdpdGhpbiBhIGNlcnRhaW4gbWFyZ2luIG9mIGVycm9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3F1YXQ0fSBhIEZpcnN0IHZlY3RvclxuICAgICAqIEBwYXJhbSB7cXVhdDR9IGIgU2Vjb25kIHZlY3RvclxuICAgICAqXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgYSBpcyBlcXVpdmFsZW50IHRvIGJcbiAgICAgKi9cbiAgICBxdWF0NC5lcXVhbCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhID09PSBiIHx8IChcbiAgICAgICAgICAgIE1hdGguYWJzKGFbMF0gLSBiWzBdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbMV0gLSBiWzFdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbMl0gLSBiWzJdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbM10gLSBiWzNdKSA8IEZMT0FUX0VQU0lMT05cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBRdWF0NFxuICAgICAqXG4gICAgICogQHBhcmFtIHtxdWF0NH0gW2Rlc3RdIHF1YXQ0IHJlY2VpdmluZyBjb3BpZWQgdmFsdWVzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7cXVhdDR9IGRlc3QgaXMgc3BlY2lmaWVkLCBuZXcgcXVhdDQgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgcXVhdDQuaWRlbnRpdHkgPSBmdW5jdGlvbiAoZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IHF1YXQ0LmNyZWF0ZSgpOyB9XG4gICAgICAgIGRlc3RbMF0gPSAwO1xuICAgICAgICBkZXN0WzFdID0gMDtcbiAgICAgICAgZGVzdFsyXSA9IDA7XG4gICAgICAgIGRlc3RbM10gPSAxO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgdmFyIGlkZW50aXR5UXVhdDQgPSBxdWF0NC5pZGVudGl0eSgpO1xuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgVyBjb21wb25lbnQgb2YgYSBxdWF0NCBmcm9tIHRoZSBYLCBZLCBhbmQgWiBjb21wb25lbnRzLlxuICAgICAqIEFzc3VtZXMgdGhhdCBxdWF0ZXJuaW9uIGlzIDEgdW5pdCBpbiBsZW5ndGguXG4gICAgICogQW55IGV4aXN0aW5nIFcgY29tcG9uZW50IHdpbGwgYmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7cXVhdDR9IHF1YXQgcXVhdDQgdG8gY2FsY3VsYXRlIFcgY29tcG9uZW50IG9mXG4gICAgICogQHBhcmFtIHtxdWF0NH0gW2Rlc3RdIHF1YXQ0IHJlY2VpdmluZyBjYWxjdWxhdGVkIHZhbHVlcy4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byBxdWF0XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7cXVhdDR9IGRlc3QgaWYgc3BlY2lmaWVkLCBxdWF0IG90aGVyd2lzZVxuICAgICAqL1xuICAgIHF1YXQ0LmNhbGN1bGF0ZVcgPSBmdW5jdGlvbiAocXVhdCwgZGVzdCkge1xuICAgICAgICB2YXIgeCA9IHF1YXRbMF0sIHkgPSBxdWF0WzFdLCB6ID0gcXVhdFsyXTtcblxuICAgICAgICBpZiAoIWRlc3QgfHwgcXVhdCA9PT0gZGVzdCkge1xuICAgICAgICAgICAgcXVhdFszXSA9IC1NYXRoLnNxcnQoTWF0aC5hYnMoMS4wIC0geCAqIHggLSB5ICogeSAtIHogKiB6KSk7XG4gICAgICAgICAgICByZXR1cm4gcXVhdDtcbiAgICAgICAgfVxuICAgICAgICBkZXN0WzBdID0geDtcbiAgICAgICAgZGVzdFsxXSA9IHk7XG4gICAgICAgIGRlc3RbMl0gPSB6O1xuICAgICAgICBkZXN0WzNdID0gLU1hdGguc3FydChNYXRoLmFicygxLjAgLSB4ICogeCAtIHkgKiB5IC0geiAqIHopKTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byBxdWF0ZXJuaW9uc1xuICAgICAqXG4gICAgICogQHBhcmFtIHtxdWF0NH0gcXVhdCBGaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHtxdWF0NH0gcXVhdDIgU2Vjb25kIG9wZXJhbmRcbiAgICAgKlxuICAgICAqIEByZXR1cm4ge251bWJlcn0gRG90IHByb2R1Y3Qgb2YgcXVhdCBhbmQgcXVhdDJcbiAgICAgKi9cbiAgICBxdWF0NC5kb3QgPSBmdW5jdGlvbihxdWF0LCBxdWF0Mil7XG4gICAgICAgIHJldHVybiBxdWF0WzBdKnF1YXQyWzBdICsgcXVhdFsxXSpxdWF0MlsxXSArIHF1YXRbMl0qcXVhdDJbMl0gKyBxdWF0WzNdKnF1YXQyWzNdO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIG9mIGEgcXVhdDRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7cXVhdDR9IHF1YXQgcXVhdDQgdG8gY2FsY3VsYXRlIGludmVyc2Ugb2ZcbiAgICAgKiBAcGFyYW0ge3F1YXQ0fSBbZGVzdF0gcXVhdDQgcmVjZWl2aW5nIGludmVyc2UgdmFsdWVzLiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHF1YXRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtxdWF0NH0gZGVzdCBpZiBzcGVjaWZpZWQsIHF1YXQgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgcXVhdDQuaW52ZXJzZSA9IGZ1bmN0aW9uKHF1YXQsIGRlc3QpIHtcbiAgICAgICAgdmFyIHEwID0gcXVhdFswXSwgcTEgPSBxdWF0WzFdLCBxMiA9IHF1YXRbMl0sIHEzID0gcXVhdFszXSxcbiAgICAgICAgICAgIGRvdCA9IHEwKnEwICsgcTEqcTEgKyBxMipxMiArIHEzKnEzLFxuICAgICAgICAgICAgaW52RG90ID0gZG90ID8gMS4wL2RvdCA6IDA7XG4gICAgICAgIFxuICAgICAgICAvLyBUT0RPOiBXb3VsZCBiZSBmYXN0ZXIgdG8gcmV0dXJuIFswLDAsMCwwXSBpbW1lZGlhdGVseSBpZiBkb3QgPT0gMFxuICAgICAgICBcbiAgICAgICAgaWYoIWRlc3QgfHwgcXVhdCA9PT0gZGVzdCkge1xuICAgICAgICAgICAgcXVhdFswXSAqPSAtaW52RG90O1xuICAgICAgICAgICAgcXVhdFsxXSAqPSAtaW52RG90O1xuICAgICAgICAgICAgcXVhdFsyXSAqPSAtaW52RG90O1xuICAgICAgICAgICAgcXVhdFszXSAqPSBpbnZEb3Q7XG4gICAgICAgICAgICByZXR1cm4gcXVhdDtcbiAgICAgICAgfVxuICAgICAgICBkZXN0WzBdID0gLXF1YXRbMF0qaW52RG90O1xuICAgICAgICBkZXN0WzFdID0gLXF1YXRbMV0qaW52RG90O1xuICAgICAgICBkZXN0WzJdID0gLXF1YXRbMl0qaW52RG90O1xuICAgICAgICBkZXN0WzNdID0gcXVhdFszXSppbnZEb3Q7XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGNvbmp1Z2F0ZSBvZiBhIHF1YXQ0XG4gICAgICogSWYgdGhlIHF1YXRlcm5pb24gaXMgbm9ybWFsaXplZCwgdGhpcyBmdW5jdGlvbiBpcyBmYXN0ZXIgdGhhbiBxdWF0NC5pbnZlcnNlIGFuZCBwcm9kdWNlcyB0aGUgc2FtZSByZXN1bHQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3F1YXQ0fSBxdWF0IHF1YXQ0IHRvIGNhbGN1bGF0ZSBjb25qdWdhdGUgb2ZcbiAgICAgKiBAcGFyYW0ge3F1YXQ0fSBbZGVzdF0gcXVhdDQgcmVjZWl2aW5nIGNvbmp1Z2F0ZSB2YWx1ZXMuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gcXVhdFxuICAgICAqXG4gICAgICogQHJldHVybnMge3F1YXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgcXVhdCBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBxdWF0NC5jb25qdWdhdGUgPSBmdW5jdGlvbiAocXVhdCwgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QgfHwgcXVhdCA9PT0gZGVzdCkge1xuICAgICAgICAgICAgcXVhdFswXSAqPSAtMTtcbiAgICAgICAgICAgIHF1YXRbMV0gKj0gLTE7XG4gICAgICAgICAgICBxdWF0WzJdICo9IC0xO1xuICAgICAgICAgICAgcmV0dXJuIHF1YXQ7XG4gICAgICAgIH1cbiAgICAgICAgZGVzdFswXSA9IC1xdWF0WzBdO1xuICAgICAgICBkZXN0WzFdID0gLXF1YXRbMV07XG4gICAgICAgIGRlc3RbMl0gPSAtcXVhdFsyXTtcbiAgICAgICAgZGVzdFszXSA9IHF1YXRbM107XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSBxdWF0NFxuICAgICAqXG4gICAgICogUGFyYW1zOlxuICAgICAqIEBwYXJhbSB7cXVhdDR9IHF1YXQgcXVhdDQgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICAgICAqXG4gICAgICogQHJldHVybnMgTGVuZ3RoIG9mIHF1YXRcbiAgICAgKi9cbiAgICBxdWF0NC5sZW5ndGggPSBmdW5jdGlvbiAocXVhdCkge1xuICAgICAgICB2YXIgeCA9IHF1YXRbMF0sIHkgPSBxdWF0WzFdLCB6ID0gcXVhdFsyXSwgdyA9IHF1YXRbM107XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHcpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSB1bml0IHF1YXRlcm5pb24gb2YgdGhlIHNhbWUgZGlyZWN0aW9uIGFzIHRoZSBwcm92aWRlZCBxdWF0NFxuICAgICAqIElmIHF1YXRlcm5pb24gbGVuZ3RoIGlzIDAsIHJldHVybnMgWzAsIDAsIDAsIDBdXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3F1YXQ0fSBxdWF0IHF1YXQ0IHRvIG5vcm1hbGl6ZVxuICAgICAqIEBwYXJhbSB7cXVhdDR9IFtkZXN0XSBxdWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byBxdWF0XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7cXVhdDR9IGRlc3QgaWYgc3BlY2lmaWVkLCBxdWF0IG90aGVyd2lzZVxuICAgICAqL1xuICAgIHF1YXQ0Lm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChxdWF0LCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gcXVhdDsgfVxuXG4gICAgICAgIHZhciB4ID0gcXVhdFswXSwgeSA9IHF1YXRbMV0sIHogPSBxdWF0WzJdLCB3ID0gcXVhdFszXSxcbiAgICAgICAgICAgIGxlbiA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdyk7XG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcbiAgICAgICAgICAgIGRlc3RbMF0gPSAwO1xuICAgICAgICAgICAgZGVzdFsxXSA9IDA7XG4gICAgICAgICAgICBkZXN0WzJdID0gMDtcbiAgICAgICAgICAgIGRlc3RbM10gPSAwO1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH1cbiAgICAgICAgbGVuID0gMSAvIGxlbjtcbiAgICAgICAgZGVzdFswXSA9IHggKiBsZW47XG4gICAgICAgIGRlc3RbMV0gPSB5ICogbGVuO1xuICAgICAgICBkZXN0WzJdID0geiAqIGxlbjtcbiAgICAgICAgZGVzdFszXSA9IHcgKiBsZW47XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIHF1YXRlcm5pb24gYWRkaXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7cXVhdDR9IHF1YXQgRmlyc3Qgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB7cXVhdDR9IHF1YXQyIFNlY29uZCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHtxdWF0NH0gW2Rlc3RdIHF1YXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHF1YXRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtxdWF0NH0gZGVzdCBpZiBzcGVjaWZpZWQsIHF1YXQgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgcXVhdDQuYWRkID0gZnVuY3Rpb24gKHF1YXQsIHF1YXQyLCBkZXN0KSB7XG4gICAgICAgIGlmKCFkZXN0IHx8IHF1YXQgPT09IGRlc3QpIHtcbiAgICAgICAgICAgIHF1YXRbMF0gKz0gcXVhdDJbMF07XG4gICAgICAgICAgICBxdWF0WzFdICs9IHF1YXQyWzFdO1xuICAgICAgICAgICAgcXVhdFsyXSArPSBxdWF0MlsyXTtcbiAgICAgICAgICAgIHF1YXRbM10gKz0gcXVhdDJbM107XG4gICAgICAgICAgICByZXR1cm4gcXVhdDtcbiAgICAgICAgfVxuICAgICAgICBkZXN0WzBdID0gcXVhdFswXStxdWF0MlswXTtcbiAgICAgICAgZGVzdFsxXSA9IHF1YXRbMV0rcXVhdDJbMV07XG4gICAgICAgIGRlc3RbMl0gPSBxdWF0WzJdK3F1YXQyWzJdO1xuICAgICAgICBkZXN0WzNdID0gcXVhdFszXStxdWF0MlszXTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcXVhdGVybmlvbiBtdWx0aXBsaWNhdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIHtxdWF0NH0gcXVhdCBGaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHtxdWF0NH0gcXVhdDIgU2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0ge3F1YXQ0fSBbZGVzdF0gcXVhdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gcXVhdFxuICAgICAqXG4gICAgICogQHJldHVybnMge3F1YXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgcXVhdCBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBxdWF0NC5tdWx0aXBseSA9IGZ1bmN0aW9uIChxdWF0LCBxdWF0MiwgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IHF1YXQ7IH1cblxuICAgICAgICB2YXIgcWF4ID0gcXVhdFswXSwgcWF5ID0gcXVhdFsxXSwgcWF6ID0gcXVhdFsyXSwgcWF3ID0gcXVhdFszXSxcbiAgICAgICAgICAgIHFieCA9IHF1YXQyWzBdLCBxYnkgPSBxdWF0MlsxXSwgcWJ6ID0gcXVhdDJbMl0sIHFidyA9IHF1YXQyWzNdO1xuXG4gICAgICAgIGRlc3RbMF0gPSBxYXggKiBxYncgKyBxYXcgKiBxYnggKyBxYXkgKiBxYnogLSBxYXogKiBxYnk7XG4gICAgICAgIGRlc3RbMV0gPSBxYXkgKiBxYncgKyBxYXcgKiBxYnkgKyBxYXogKiBxYnggLSBxYXggKiBxYno7XG4gICAgICAgIGRlc3RbMl0gPSBxYXogKiBxYncgKyBxYXcgKiBxYnogKyBxYXggKiBxYnkgLSBxYXkgKiBxYng7XG4gICAgICAgIGRlc3RbM10gPSBxYXcgKiBxYncgLSBxYXggKiBxYnggLSBxYXkgKiBxYnkgLSBxYXogKiBxYno7XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybXMgYSB2ZWMzIHdpdGggdGhlIGdpdmVuIHF1YXRlcm5pb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7cXVhdDR9IHF1YXQgcXVhdDQgdG8gdHJhbnNmb3JtIHRoZSB2ZWN0b3Igd2l0aFxuICAgICAqIEBwYXJhbSB7dmVjM30gdmVjIHZlYzMgdG8gdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHt2ZWMzfSBbZGVzdF0gdmVjMyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byB2ZWNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGRlc3QgaWYgc3BlY2lmaWVkLCB2ZWMgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgcXVhdDQubXVsdGlwbHlWZWMzID0gZnVuY3Rpb24gKHF1YXQsIHZlYywgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IHZlYzsgfVxuXG4gICAgICAgIHZhciB4ID0gdmVjWzBdLCB5ID0gdmVjWzFdLCB6ID0gdmVjWzJdLFxuICAgICAgICAgICAgcXggPSBxdWF0WzBdLCBxeSA9IHF1YXRbMV0sIHF6ID0gcXVhdFsyXSwgcXcgPSBxdWF0WzNdLFxuXG4gICAgICAgICAgICAvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY1xuICAgICAgICAgICAgaXggPSBxdyAqIHggKyBxeSAqIHogLSBxeiAqIHksXG4gICAgICAgICAgICBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogeixcbiAgICAgICAgICAgIGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4LFxuICAgICAgICAgICAgaXcgPSAtcXggKiB4IC0gcXkgKiB5IC0gcXogKiB6O1xuXG4gICAgICAgIC8vIGNhbGN1bGF0ZSByZXN1bHQgKiBpbnZlcnNlIHF1YXRcbiAgICAgICAgZGVzdFswXSA9IGl4ICogcXcgKyBpdyAqIC1xeCArIGl5ICogLXF6IC0gaXogKiAtcXk7XG4gICAgICAgIGRlc3RbMV0gPSBpeSAqIHF3ICsgaXcgKiAtcXkgKyBpeiAqIC1xeCAtIGl4ICogLXF6O1xuICAgICAgICBkZXN0WzJdID0gaXogKiBxdyArIGl3ICogLXF6ICsgaXggKiAtcXkgLSBpeSAqIC1xeDtcblxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyB0aGUgY29tcG9uZW50cyBvZiBhIHF1YXRlcm5pb24gYnkgYSBzY2FsYXIgdmFsdWVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7cXVhdDR9IHF1YXQgdG8gc2NhbGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHNjYWxlIGJ5XG4gICAgICogQHBhcmFtIHtxdWF0NH0gW2Rlc3RdIHF1YXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHF1YXRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtxdWF0NH0gZGVzdCBpZiBzcGVjaWZpZWQsIHF1YXQgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgcXVhdDQuc2NhbGUgPSBmdW5jdGlvbiAocXVhdCwgdmFsLCBkZXN0KSB7XG4gICAgICAgIGlmKCFkZXN0IHx8IHF1YXQgPT09IGRlc3QpIHtcbiAgICAgICAgICAgIHF1YXRbMF0gKj0gdmFsO1xuICAgICAgICAgICAgcXVhdFsxXSAqPSB2YWw7XG4gICAgICAgICAgICBxdWF0WzJdICo9IHZhbDtcbiAgICAgICAgICAgIHF1YXRbM10gKj0gdmFsO1xuICAgICAgICAgICAgcmV0dXJuIHF1YXQ7XG4gICAgICAgIH1cbiAgICAgICAgZGVzdFswXSA9IHF1YXRbMF0qdmFsO1xuICAgICAgICBkZXN0WzFdID0gcXVhdFsxXSp2YWw7XG4gICAgICAgIGRlc3RbMl0gPSBxdWF0WzJdKnZhbDtcbiAgICAgICAgZGVzdFszXSA9IHF1YXRbM10qdmFsO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyBhIDN4MyBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gcXVhdDRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7cXVhdDR9IHF1YXQgcXVhdDQgdG8gY3JlYXRlIG1hdHJpeCBmcm9tXG4gICAgICogQHBhcmFtIHttYXQzfSBbZGVzdF0gbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxuICAgICAqXG4gICAgICogQHJldHVybnMge21hdDN9IGRlc3QgaWYgc3BlY2lmaWVkLCBhIG5ldyBtYXQzIG90aGVyd2lzZVxuICAgICAqL1xuICAgIHF1YXQ0LnRvTWF0MyA9IGZ1bmN0aW9uIChxdWF0LCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gbWF0My5jcmVhdGUoKTsgfVxuXG4gICAgICAgIHZhciB4ID0gcXVhdFswXSwgeSA9IHF1YXRbMV0sIHogPSBxdWF0WzJdLCB3ID0gcXVhdFszXSxcbiAgICAgICAgICAgIHgyID0geCArIHgsXG4gICAgICAgICAgICB5MiA9IHkgKyB5LFxuICAgICAgICAgICAgejIgPSB6ICsgeixcblxuICAgICAgICAgICAgeHggPSB4ICogeDIsXG4gICAgICAgICAgICB4eSA9IHggKiB5MixcbiAgICAgICAgICAgIHh6ID0geCAqIHoyLFxuICAgICAgICAgICAgeXkgPSB5ICogeTIsXG4gICAgICAgICAgICB5eiA9IHkgKiB6MixcbiAgICAgICAgICAgIHp6ID0geiAqIHoyLFxuICAgICAgICAgICAgd3ggPSB3ICogeDIsXG4gICAgICAgICAgICB3eSA9IHcgKiB5MixcbiAgICAgICAgICAgIHd6ID0gdyAqIHoyO1xuXG4gICAgICAgIGRlc3RbMF0gPSAxIC0gKHl5ICsgenopO1xuICAgICAgICBkZXN0WzFdID0geHkgKyB3ejtcbiAgICAgICAgZGVzdFsyXSA9IHh6IC0gd3k7XG5cbiAgICAgICAgZGVzdFszXSA9IHh5IC0gd3o7XG4gICAgICAgIGRlc3RbNF0gPSAxIC0gKHh4ICsgenopO1xuICAgICAgICBkZXN0WzVdID0geXogKyB3eDtcblxuICAgICAgICBkZXN0WzZdID0geHogKyB3eTtcbiAgICAgICAgZGVzdFs3XSA9IHl6IC0gd3g7XG4gICAgICAgIGRlc3RbOF0gPSAxIC0gKHh4ICsgeXkpO1xuXG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIGEgNHg0IG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBxdWF0NFxuICAgICAqXG4gICAgICogQHBhcmFtIHtxdWF0NH0gcXVhdCBxdWF0NCB0byBjcmVhdGUgbWF0cml4IGZyb21cbiAgICAgKiBAcGFyYW0ge21hdDR9IFtkZXN0XSBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7bWF0NH0gZGVzdCBpZiBzcGVjaWZpZWQsIGEgbmV3IG1hdDQgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgcXVhdDQudG9NYXQ0ID0gZnVuY3Rpb24gKHF1YXQsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBtYXQ0LmNyZWF0ZSgpOyB9XG5cbiAgICAgICAgdmFyIHggPSBxdWF0WzBdLCB5ID0gcXVhdFsxXSwgeiA9IHF1YXRbMl0sIHcgPSBxdWF0WzNdLFxuICAgICAgICAgICAgeDIgPSB4ICsgeCxcbiAgICAgICAgICAgIHkyID0geSArIHksXG4gICAgICAgICAgICB6MiA9IHogKyB6LFxuXG4gICAgICAgICAgICB4eCA9IHggKiB4MixcbiAgICAgICAgICAgIHh5ID0geCAqIHkyLFxuICAgICAgICAgICAgeHogPSB4ICogejIsXG4gICAgICAgICAgICB5eSA9IHkgKiB5MixcbiAgICAgICAgICAgIHl6ID0geSAqIHoyLFxuICAgICAgICAgICAgenogPSB6ICogejIsXG4gICAgICAgICAgICB3eCA9IHcgKiB4MixcbiAgICAgICAgICAgIHd5ID0gdyAqIHkyLFxuICAgICAgICAgICAgd3ogPSB3ICogejI7XG5cbiAgICAgICAgZGVzdFswXSA9IDEgLSAoeXkgKyB6eik7XG4gICAgICAgIGRlc3RbMV0gPSB4eSArIHd6O1xuICAgICAgICBkZXN0WzJdID0geHogLSB3eTtcbiAgICAgICAgZGVzdFszXSA9IDA7XG5cbiAgICAgICAgZGVzdFs0XSA9IHh5IC0gd3o7XG4gICAgICAgIGRlc3RbNV0gPSAxIC0gKHh4ICsgenopO1xuICAgICAgICBkZXN0WzZdID0geXogKyB3eDtcbiAgICAgICAgZGVzdFs3XSA9IDA7XG5cbiAgICAgICAgZGVzdFs4XSA9IHh6ICsgd3k7XG4gICAgICAgIGRlc3RbOV0gPSB5eiAtIHd4O1xuICAgICAgICBkZXN0WzEwXSA9IDEgLSAoeHggKyB5eSk7XG4gICAgICAgIGRlc3RbMTFdID0gMDtcblxuICAgICAgICBkZXN0WzEyXSA9IDA7XG4gICAgICAgIGRlc3RbMTNdID0gMDtcbiAgICAgICAgZGVzdFsxNF0gPSAwO1xuICAgICAgICBkZXN0WzE1XSA9IDE7XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgc3BoZXJpY2FsIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHF1YXQ0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3F1YXQ0fSBxdWF0IEZpcnN0IHF1YXRlcm5pb25cbiAgICAgKiBAcGFyYW0ge3F1YXQ0fSBxdWF0MiBTZWNvbmQgcXVhdGVybmlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzbGVycCBJbnRlcnBvbGF0aW9uIGFtb3VudCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gICAgICogQHBhcmFtIHtxdWF0NH0gW2Rlc3RdIHF1YXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHF1YXRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtxdWF0NH0gZGVzdCBpZiBzcGVjaWZpZWQsIHF1YXQgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgcXVhdDQuc2xlcnAgPSBmdW5jdGlvbiAocXVhdCwgcXVhdDIsIHNsZXJwLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gcXVhdDsgfVxuXG4gICAgICAgIHZhciBjb3NIYWxmVGhldGEgPSBxdWF0WzBdICogcXVhdDJbMF0gKyBxdWF0WzFdICogcXVhdDJbMV0gKyBxdWF0WzJdICogcXVhdDJbMl0gKyBxdWF0WzNdICogcXVhdDJbM10sXG4gICAgICAgICAgICBoYWxmVGhldGEsXG4gICAgICAgICAgICBzaW5IYWxmVGhldGEsXG4gICAgICAgICAgICByYXRpb0EsXG4gICAgICAgICAgICByYXRpb0I7XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKGNvc0hhbGZUaGV0YSkgPj0gMS4wKSB7XG4gICAgICAgICAgICBpZiAoZGVzdCAhPT0gcXVhdCkge1xuICAgICAgICAgICAgICAgIGRlc3RbMF0gPSBxdWF0WzBdO1xuICAgICAgICAgICAgICAgIGRlc3RbMV0gPSBxdWF0WzFdO1xuICAgICAgICAgICAgICAgIGRlc3RbMl0gPSBxdWF0WzJdO1xuICAgICAgICAgICAgICAgIGRlc3RbM10gPSBxdWF0WzNdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBoYWxmVGhldGEgPSBNYXRoLmFjb3MoY29zSGFsZlRoZXRhKTtcbiAgICAgICAgc2luSGFsZlRoZXRhID0gTWF0aC5zcXJ0KDEuMCAtIGNvc0hhbGZUaGV0YSAqIGNvc0hhbGZUaGV0YSk7XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKHNpbkhhbGZUaGV0YSkgPCAwLjAwMSkge1xuICAgICAgICAgICAgZGVzdFswXSA9IChxdWF0WzBdICogMC41ICsgcXVhdDJbMF0gKiAwLjUpO1xuICAgICAgICAgICAgZGVzdFsxXSA9IChxdWF0WzFdICogMC41ICsgcXVhdDJbMV0gKiAwLjUpO1xuICAgICAgICAgICAgZGVzdFsyXSA9IChxdWF0WzJdICogMC41ICsgcXVhdDJbMl0gKiAwLjUpO1xuICAgICAgICAgICAgZGVzdFszXSA9IChxdWF0WzNdICogMC41ICsgcXVhdDJbM10gKiAwLjUpO1xuICAgICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICAgIH1cblxuICAgICAgICByYXRpb0EgPSBNYXRoLnNpbigoMSAtIHNsZXJwKSAqIGhhbGZUaGV0YSkgLyBzaW5IYWxmVGhldGE7XG4gICAgICAgIHJhdGlvQiA9IE1hdGguc2luKHNsZXJwICogaGFsZlRoZXRhKSAvIHNpbkhhbGZUaGV0YTtcblxuICAgICAgICBkZXN0WzBdID0gKHF1YXRbMF0gKiByYXRpb0EgKyBxdWF0MlswXSAqIHJhdGlvQik7XG4gICAgICAgIGRlc3RbMV0gPSAocXVhdFsxXSAqIHJhdGlvQSArIHF1YXQyWzFdICogcmF0aW9CKTtcbiAgICAgICAgZGVzdFsyXSA9IChxdWF0WzJdICogcmF0aW9BICsgcXVhdDJbMl0gKiByYXRpb0IpO1xuICAgICAgICBkZXN0WzNdID0gKHF1YXRbM10gKiByYXRpb0EgKyBxdWF0MlszXSAqIHJhdGlvQik7XG5cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIDN4MyByb3RhdGlvbiBtYXRyaXguXG4gICAgICogSWYgZGVzdCBpcyBvbWl0dGVkLCBhIG5ldyBxdWF0ZXJuaW9uIHdpbGwgYmUgY3JlYXRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0M30gIG1hdCAgICB0aGUgcm90YXRpb24gbWF0cml4XG4gICAgICogQHBhcmFtIHtxdWF0NH0gW2Rlc3RdIGFuIG9wdGlvbmFsIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7cXVhdDR9IHRoZSBxdWF0ZXJuaW9uIGNvbnN0cnVjdGVkIGZyb20gdGhlIHJvdGF0aW9uIG1hdHJpeFxuICAgICAqXG4gICAgICovXG4gICAgcXVhdDQuZnJvbVJvdGF0aW9uTWF0cml4ID0gZnVuY3Rpb24obWF0LCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgZGVzdCA9IHF1YXQ0LmNyZWF0ZSgpO1xuICAgICAgICBcbiAgICAgICAgLy8gQWxnb3JpdGhtIGluIEtlbiBTaG9lbWFrZSdzIGFydGljbGUgaW4gMTk4NyBTSUdHUkFQSCBjb3Vyc2Ugbm90ZXNcbiAgICAgICAgLy8gYXJ0aWNsZSBcIlF1YXRlcm5pb24gQ2FsY3VsdXMgYW5kIEZhc3QgQW5pbWF0aW9uXCIuXG5cbiAgICAgICAgdmFyIGZUcmFjZSA9IG1hdFswXSArIG1hdFs0XSArIG1hdFs4XTtcbiAgICAgICAgdmFyIGZSb290O1xuXG4gICAgICAgIGlmICggZlRyYWNlID4gMC4wICkge1xuICAgICAgICAgICAgLy8gfHd8ID4gMS8yLCBtYXkgYXMgd2VsbCBjaG9vc2UgdyA+IDEvMlxuICAgICAgICAgICAgZlJvb3QgPSBNYXRoLnNxcnQoZlRyYWNlICsgMS4wKTsgIC8vIDJ3XG4gICAgICAgICAgICBkZXN0WzNdID0gMC41ICogZlJvb3Q7XG4gICAgICAgICAgICBmUm9vdCA9IDAuNS9mUm9vdDsgIC8vIDEvKDR3KVxuICAgICAgICAgICAgZGVzdFswXSA9IChtYXRbN10tbWF0WzVdKSpmUm9vdDtcbiAgICAgICAgICAgIGRlc3RbMV0gPSAobWF0WzJdLW1hdFs2XSkqZlJvb3Q7XG4gICAgICAgICAgICBkZXN0WzJdID0gKG1hdFszXS1tYXRbMV0pKmZSb290O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gfHd8IDw9IDEvMlxuICAgICAgICAgICAgdmFyIHNfaU5leHQgPSBxdWF0NC5mcm9tUm90YXRpb25NYXRyaXguc19pTmV4dCA9IHF1YXQ0LmZyb21Sb3RhdGlvbk1hdHJpeC5zX2lOZXh0IHx8IFsxLDIsMF07XG4gICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICBpZiAoIG1hdFs0XSA+IG1hdFswXSApXG4gICAgICAgICAgICAgIGkgPSAxO1xuICAgICAgICAgICAgaWYgKCBtYXRbOF0gPiBtYXRbaSozK2ldIClcbiAgICAgICAgICAgICAgaSA9IDI7XG4gICAgICAgICAgICB2YXIgaiA9IHNfaU5leHRbaV07XG4gICAgICAgICAgICB2YXIgayA9IHNfaU5leHRbal07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZSb290ID0gTWF0aC5zcXJ0KG1hdFtpKjMraV0tbWF0W2oqMytqXS1tYXRbayozK2tdICsgMS4wKTtcbiAgICAgICAgICAgIGRlc3RbaV0gPSAwLjUgKiBmUm9vdDtcbiAgICAgICAgICAgIGZSb290ID0gMC41IC8gZlJvb3Q7XG4gICAgICAgICAgICBkZXN0WzNdID0gKG1hdFtrKjMral0gLSBtYXRbaiozK2tdKSAqIGZSb290O1xuICAgICAgICAgICAgZGVzdFtqXSA9IChtYXRbaiozK2ldICsgbWF0W2kqMytqXSkgKiBmUm9vdDtcbiAgICAgICAgICAgIGRlc3Rba10gPSAobWF0W2sqMytpXSArIG1hdFtpKjMra10pICogZlJvb3Q7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBbGlhcy4gU2VlIHRoZSBkZXNjcmlwdGlvbiBmb3IgcXVhdDQuZnJvbVJvdGF0aW9uTWF0cml4KCkuXG4gICAgICovXG4gICAgbWF0My50b1F1YXQ0ID0gcXVhdDQuZnJvbVJvdGF0aW9uTWF0cml4O1xuXG4gICAgKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbWF0ID0gbWF0My5jcmVhdGUoKTtcbiAgICAgICAgXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgcXVhdGVybmlvbiBmcm9tIHRoZSAzIGdpdmVuIHZlY3RvcnMuIFRoZXkgbXVzdCBiZSBwZXJwZW5kaWN1bGFyXG4gICAgICAgICAqIHRvIG9uZSBhbm90aGVyIGFuZCByZXByZXNlbnQgdGhlIFgsIFkgYW5kIFogYXhlcy5cbiAgICAgICAgICpcbiAgICAgICAgICogSWYgZGVzdCBpcyBvbWl0dGVkLCBhIG5ldyBxdWF0NCB3aWxsIGJlIGNyZWF0ZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEV4YW1wbGU6IFRoZSBkZWZhdWx0IE9wZW5HTCBvcmllbnRhdGlvbiBoYXMgYSB2aWV3IHZlY3RvciBbMCwgMCwgLTFdLFxuICAgICAgICAgKiByaWdodCB2ZWN0b3IgWzEsIDAsIDBdLCBhbmQgdXAgdmVjdG9yIFswLCAxLCAwXS4gQSBxdWF0ZXJuaW9uIHJlcHJlc2VudGluZ1xuICAgICAgICAgKiB0aGlzIG9yaWVudGF0aW9uIGNvdWxkIGJlIGNvbnN0cnVjdGVkIHdpdGg6XG4gICAgICAgICAqXG4gICAgICAgICAqICAgcXVhdCA9IHF1YXQ0LmZyb21BeGVzKFswLCAwLCAtMV0sIFsxLCAwLCAwXSwgWzAsIDEsIDBdLCBxdWF0NC5jcmVhdGUoKSk7XG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7dmVjM30gIHZpZXcgICB0aGUgdmlldyB2ZWN0b3IsIG9yIGRpcmVjdGlvbiB0aGUgb2JqZWN0IGlzIHBvaW50aW5nIGluXG4gICAgICAgICAqIEBwYXJhbSB7dmVjM30gIHJpZ2h0ICB0aGUgcmlnaHQgdmVjdG9yLCBvciBkaXJlY3Rpb24gdG8gdGhlIFwicmlnaHRcIiBvZiB0aGUgb2JqZWN0XG4gICAgICAgICAqIEBwYXJhbSB7dmVjM30gIHVwICAgICB0aGUgdXAgdmVjdG9yLCBvciBkaXJlY3Rpb24gdG93YXJkcyB0aGUgb2JqZWN0J3MgXCJ1cFwiXG4gICAgICAgICAqIEBwYXJhbSB7cXVhdDR9IFtkZXN0XSBhbiBvcHRpb25hbCByZWNlaXZpbmcgcXVhdDRcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybnMge3F1YXQ0fSBkZXN0XG4gICAgICAgICAqKi9cbiAgICAgICAgcXVhdDQuZnJvbUF4ZXMgPSBmdW5jdGlvbih2aWV3LCByaWdodCwgdXAsIGRlc3QpIHtcbiAgICAgICAgICAgIG1hdFswXSA9IHJpZ2h0WzBdO1xuICAgICAgICAgICAgbWF0WzNdID0gcmlnaHRbMV07XG4gICAgICAgICAgICBtYXRbNl0gPSByaWdodFsyXTtcblxuICAgICAgICAgICAgbWF0WzFdID0gdXBbMF07XG4gICAgICAgICAgICBtYXRbNF0gPSB1cFsxXTtcbiAgICAgICAgICAgIG1hdFs3XSA9IHVwWzJdO1xuXG4gICAgICAgICAgICBtYXRbMl0gPSB2aWV3WzBdO1xuICAgICAgICAgICAgbWF0WzVdID0gdmlld1sxXTtcbiAgICAgICAgICAgIG1hdFs4XSA9IHZpZXdbMl07XG5cbiAgICAgICAgICAgIHJldHVybiBxdWF0NC5mcm9tUm90YXRpb25NYXRyaXgobWF0LCBkZXN0KTtcbiAgICAgICAgfTtcbiAgICB9KSgpO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyBhIHF1YXQ0IHRvIHRoZSBJZGVudGl0eSBhbmQgcmV0dXJucyBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7cXVhdDR9IFtkZXN0XSBxdWF0NCB0byBzZXQuIElmIG9taXR0ZWQsIGFcbiAgICAgKiBuZXcgcXVhdDQgd2lsbCBiZSBjcmVhdGVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3F1YXQ0fSBkZXN0XG4gICAgICovXG4gICAgcXVhdDQuaWRlbnRpdHkgPSBmdW5jdGlvbihkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgZGVzdCA9IHF1YXQ0LmNyZWF0ZSgpO1xuICAgICAgICBkZXN0WzBdID0gMDtcbiAgICAgICAgZGVzdFsxXSA9IDA7XG4gICAgICAgIGRlc3RbMl0gPSAwO1xuICAgICAgICBkZXN0WzNdID0gMTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgYSBxdWF0NCBmcm9tIHRoZSBnaXZlbiBhbmdsZSBhbmQgcm90YXRpb24gYXhpcyxcbiAgICAgKiB0aGVuIHJldHVybnMgaXQuIElmIGRlc3QgaXMgbm90IGdpdmVuLCBhIG5ldyBxdWF0NCBpcyBjcmVhdGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGFuZ2xlICB0aGUgYW5nbGUgaW4gcmFkaWFuc1xuICAgICAqIEBwYXJhbSB7dmVjM30gICBheGlzICAgdGhlIGF4aXMgYXJvdW5kIHdoaWNoIHRvIHJvdGF0ZVxuICAgICAqIEBwYXJhbSB7cXVhdDR9ICBbZGVzdF0gdGhlIG9wdGlvbmFsIHF1YXQ0IHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtxdWF0NH0gZGVzdFxuICAgICAqKi9cbiAgICBxdWF0NC5mcm9tQW5nbGVBeGlzID0gZnVuY3Rpb24oYW5nbGUsIGF4aXMsIGRlc3QpIHtcbiAgICAgICAgLy8gVGhlIHF1YXRlcm5pb24gcmVwcmVzZW50aW5nIHRoZSByb3RhdGlvbiBpc1xuICAgICAgICAvLyAgIHEgPSBjb3MoQS8yKStzaW4oQS8yKSooeCppK3kqait6KmspXG4gICAgICAgIGlmICghZGVzdCkgZGVzdCA9IHF1YXQ0LmNyZWF0ZSgpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGhhbGYgPSBhbmdsZSAqIDAuNTtcbiAgICAgICAgdmFyIHMgPSBNYXRoLnNpbihoYWxmKTtcbiAgICAgICAgZGVzdFszXSA9IE1hdGguY29zKGhhbGYpO1xuICAgICAgICBkZXN0WzBdID0gcyAqIGF4aXNbMF07XG4gICAgICAgIGRlc3RbMV0gPSBzICogYXhpc1sxXTtcbiAgICAgICAgZGVzdFsyXSA9IHMgKiBheGlzWzJdO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN0b3JlcyB0aGUgYW5nbGUgYW5kIGF4aXMgaW4gYSB2ZWM0LCB3aGVyZSB0aGUgWFlaIGNvbXBvbmVudHMgcmVwcmVzZW50XG4gICAgICogdGhlIGF4aXMgYW5kIHRoZSBXICg0dGgpIGNvbXBvbmVudCBpcyB0aGUgYW5nbGUgaW4gcmFkaWFucy5cbiAgICAgKlxuICAgICAqIElmIGRlc3QgaXMgbm90IGdpdmVuLCBzcmMgd2lsbCBiZSBtb2RpZmllZCBpbiBwbGFjZSBhbmQgcmV0dXJuZWQsIGFmdGVyXG4gICAgICogd2hpY2ggaXQgc2hvdWxkIG5vdCBiZSBjb25zaWRlcmVkIG5vdCBhIHF1YXRlcm5pb24gKGp1c3QgYW4gYXhpcyBhbmQgYW5nbGUpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtxdWF0NH0gcXVhdCAgIHRoZSBxdWF0ZXJuaW9uIHdob3NlIGFuZ2xlIGFuZCBheGlzIHRvIHN0b3JlXG4gICAgICogQHBhcmFtIHt2ZWM0fSAgW2Rlc3RdIHRoZSBvcHRpb25hbCB2ZWM0IHRvIHJlY2VpdmUgdGhlIGRhdGFcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt2ZWM0fSBkZXN0XG4gICAgICovXG4gICAgcXVhdDQudG9BbmdsZUF4aXMgPSBmdW5jdGlvbihzcmMsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSBkZXN0ID0gc3JjO1xuICAgICAgICAvLyBUaGUgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIHJvdGF0aW9uIGlzXG4gICAgICAgIC8vICAgcSA9IGNvcyhBLzIpK3NpbihBLzIpKih4KmkreSpqK3oqaylcblxuICAgICAgICB2YXIgc3FybGVuID0gc3JjWzBdKnNyY1swXStzcmNbMV0qc3JjWzFdK3NyY1syXSpzcmNbMl07XG4gICAgICAgIGlmIChzcXJsZW4gPiAwKVxuICAgICAgICB7XG4gICAgICAgICAgICBkZXN0WzNdID0gMiAqIE1hdGguYWNvcyhzcmNbM10pO1xuICAgICAgICAgICAgdmFyIGludmxlbiA9IGdsTWF0aC5pbnZzcXJ0KHNxcmxlbik7XG4gICAgICAgICAgICBkZXN0WzBdID0gc3JjWzBdKmludmxlbjtcbiAgICAgICAgICAgIGRlc3RbMV0gPSBzcmNbMV0qaW52bGVuO1xuICAgICAgICAgICAgZGVzdFsyXSA9IHNyY1syXSppbnZsZW47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBhbmdsZSBpcyAwIChtb2QgMipwaSksIHNvIGFueSBheGlzIHdpbGwgZG9cbiAgICAgICAgICAgIGRlc3RbM10gPSAwO1xuICAgICAgICAgICAgZGVzdFswXSA9IDE7XG4gICAgICAgICAgICBkZXN0WzFdID0gMDtcbiAgICAgICAgICAgIGRlc3RbMl0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHF1YXRlcm5pb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7cXVhdDR9IHF1YXQgcXVhdDQgdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgcXVhdFxuICAgICAqL1xuICAgIHF1YXQ0LnN0ciA9IGZ1bmN0aW9uIChxdWF0KSB7XG4gICAgICAgIHJldHVybiAnWycgKyBxdWF0WzBdICsgJywgJyArIHF1YXRbMV0gKyAnLCAnICsgcXVhdFsyXSArICcsICcgKyBxdWF0WzNdICsgJ10nO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogQGNsYXNzIDIgRGltZW5zaW9uYWwgVmVjdG9yXG4gICAgICogQG5hbWUgdmVjMlxuICAgICAqL1xuICAgIHZhciB2ZWMyID0ge307XG4gICAgIFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgdmVjMiwgaW5pdGlhbGl6aW5nIGl0IGZyb20gdmVjIGlmIHZlY1xuICAgICAqIGlzIGdpdmVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWMyfSBbdmVjXSB0aGUgdmVjdG9yJ3MgaW5pdGlhbCBjb250ZW50c1xuICAgICAqIEByZXR1cm5zIHt2ZWMyfSBhIG5ldyAyRCB2ZWN0b3JcbiAgICAgKi9cbiAgICB2ZWMyLmNyZWF0ZSA9IGZ1bmN0aW9uKHZlYykge1xuICAgICAgICB2YXIgZGVzdCA9IG5ldyBNYXRyaXhBcnJheSgyKTtcblxuICAgICAgICBpZiAodmVjKSB7XG4gICAgICAgICAgICBkZXN0WzBdID0gdmVjWzBdO1xuICAgICAgICAgICAgZGVzdFsxXSA9IHZlY1sxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlc3RbMF0gPSAwO1xuICAgICAgICAgICAgZGVzdFsxXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSB2ZWMyLCBpbml0aWFsaXppbmcgaXQgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geCBYIHZhbHVlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkgWSB2YWx1ZVxuXG4gICAgICogQHJldHVybnMge3ZlYzJ9IE5ldyB2ZWMyXG4gICAgICovXG4gICAgdmVjMi5jcmVhdGVGcm9tID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgdmFyIGRlc3QgPSBuZXcgTWF0cml4QXJyYXkoMik7XG5cbiAgICAgICAgZGVzdFswXSA9IHg7XG4gICAgICAgIGRlc3RbMV0gPSB5O1xuXG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgdmVjMidzIHRvZ2V0aGVyLiBJZiBkZXN0IGlzIGdpdmVuLCB0aGUgcmVzdWx0XG4gICAgICogaXMgc3RvcmVkIHRoZXJlLiBPdGhlcndpc2UsIHRoZSByZXN1bHQgaXMgc3RvcmVkIGluIHZlY0IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IHZlY0EgdGhlIGZpcnN0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IHZlY0IgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHt2ZWMyfSBbZGVzdF0gdGhlIG9wdGlvbmFsIHJlY2VpdmluZyB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyB7dmVjMn0gZGVzdFxuICAgICAqL1xuICAgIHZlYzIuYWRkID0gZnVuY3Rpb24odmVjQSwgdmVjQiwgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIGRlc3QgPSB2ZWNCO1xuICAgICAgICBkZXN0WzBdID0gdmVjQVswXSArIHZlY0JbMF07XG4gICAgICAgIGRlc3RbMV0gPSB2ZWNBWzFdICsgdmVjQlsxXTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBTdWJ0cmFjdHMgdmVjQiBmcm9tIHZlY0EuIElmIGRlc3QgaXMgZ2l2ZW4sIHRoZSByZXN1bHRcbiAgICAgKiBpcyBzdG9yZWQgdGhlcmUuIE90aGVyd2lzZSwgdGhlIHJlc3VsdCBpcyBzdG9yZWQgaW4gdmVjQi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dmVjMn0gdmVjQSB0aGUgZmlyc3Qgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB7dmVjMn0gdmVjQiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IFtkZXN0XSB0aGUgb3B0aW9uYWwgcmVjZWl2aW5nIHZlY3RvclxuICAgICAqIEByZXR1cm5zIHt2ZWMyfSBkZXN0XG4gICAgICovXG4gICAgdmVjMi5zdWJ0cmFjdCA9IGZ1bmN0aW9uKHZlY0EsIHZlY0IsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSBkZXN0ID0gdmVjQjtcbiAgICAgICAgZGVzdFswXSA9IHZlY0FbMF0gLSB2ZWNCWzBdO1xuICAgICAgICBkZXN0WzFdID0gdmVjQVsxXSAtIHZlY0JbMV07XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyB2ZWNBIHdpdGggdmVjQi4gSWYgZGVzdCBpcyBnaXZlbiwgdGhlIHJlc3VsdFxuICAgICAqIGlzIHN0b3JlZCB0aGVyZS4gT3RoZXJ3aXNlLCB0aGUgcmVzdWx0IGlzIHN0b3JlZCBpbiB2ZWNCLlxuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWMyfSB2ZWNBIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHt2ZWMyfSB2ZWNCIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB7dmVjMn0gW2Rlc3RdIHRoZSBvcHRpb25hbCByZWNlaXZpbmcgdmVjdG9yXG4gICAgICogQHJldHVybnMge3ZlYzJ9IGRlc3RcbiAgICAgKi9cbiAgICB2ZWMyLm11bHRpcGx5ID0gZnVuY3Rpb24odmVjQSwgdmVjQiwgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIGRlc3QgPSB2ZWNCO1xuICAgICAgICBkZXN0WzBdID0gdmVjQVswXSAqIHZlY0JbMF07XG4gICAgICAgIGRlc3RbMV0gPSB2ZWNBWzFdICogdmVjQlsxXTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBEaXZpZGVzIHZlY0EgYnkgdmVjQi4gSWYgZGVzdCBpcyBnaXZlbiwgdGhlIHJlc3VsdFxuICAgICAqIGlzIHN0b3JlZCB0aGVyZS4gT3RoZXJ3aXNlLCB0aGUgcmVzdWx0IGlzIHN0b3JlZCBpbiB2ZWNCLlxuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWMyfSB2ZWNBIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHt2ZWMyfSB2ZWNCIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB7dmVjMn0gW2Rlc3RdIHRoZSBvcHRpb25hbCByZWNlaXZpbmcgdmVjdG9yXG4gICAgICogQHJldHVybnMge3ZlYzJ9IGRlc3RcbiAgICAgKi9cbiAgICB2ZWMyLmRpdmlkZSA9IGZ1bmN0aW9uKHZlY0EsIHZlY0IsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSBkZXN0ID0gdmVjQjtcbiAgICAgICAgZGVzdFswXSA9IHZlY0FbMF0gLyB2ZWNCWzBdO1xuICAgICAgICBkZXN0WzFdID0gdmVjQVsxXSAvIHZlY0JbMV07XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogU2NhbGVzIHZlY0EgYnkgc29tZSBzY2FsYXIgbnVtYmVyLiBJZiBkZXN0IGlzIGdpdmVuLCB0aGUgcmVzdWx0XG4gICAgICogaXMgc3RvcmVkIHRoZXJlLiBPdGhlcndpc2UsIHRoZSByZXN1bHQgaXMgc3RvcmVkIGluIHZlY0EuXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIHRoZSBzYW1lIGFzIG11bHRpcGx5aW5nIGVhY2ggY29tcG9uZW50IG9mIHZlY0FcbiAgICAgKiBieSB0aGUgZ2l2ZW4gc2NhbGFyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWMyfSAgIHZlY0EgdGhlIHZlY3RvciB0byBiZSBzY2FsZWRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGFyIHRoZSBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICAgICAqIEBwYXJhbSB7dmVjMn0gICBbZGVzdF0gdGhlIG9wdGlvbmFsIHJlY2VpdmluZyB2ZWN0b3JcbiAgICAgKiBAcmV0dXJucyB7dmVjMn0gZGVzdFxuICAgICAqL1xuICAgIHZlYzIuc2NhbGUgPSBmdW5jdGlvbih2ZWNBLCBzY2FsYXIsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSBkZXN0ID0gdmVjQTtcbiAgICAgICAgZGVzdFswXSA9IHZlY0FbMF0gKiBzY2FsYXI7XG4gICAgICAgIGRlc3RbMV0gPSB2ZWNBWzFdICogc2NhbGFyO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzJcbiAgICAgKlxuICAgICAqIFBhcmFtczpcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IHZlY0EgRmlyc3QgdmVjdG9yXG4gICAgICogQHBhcmFtIHt2ZWMyfSB2ZWNCIFNlY29uZCB2ZWN0b3JcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IERpc3RhbmNlIGJldHdlZW4gdmVjQSBhbmQgdmVjQlxuICAgICAqL1xuICAgIHZlYzIuZGlzdCA9IGZ1bmN0aW9uICh2ZWNBLCB2ZWNCKSB7XG4gICAgICAgIHZhciB4ID0gdmVjQlswXSAtIHZlY0FbMF0sXG4gICAgICAgICAgICB5ID0gdmVjQlsxXSAtIHZlY0FbMV07XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoeCp4ICsgeSp5KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2Ygb25lIHZlYzIgdG8gYW5vdGhlclxuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWMyfSB2ZWMgdmVjMiBjb250YWluaW5nIHZhbHVlcyB0byBjb3B5XG4gICAgICogQHBhcmFtIHt2ZWMyfSBkZXN0IHZlYzIgcmVjZWl2aW5nIGNvcGllZCB2YWx1ZXNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt2ZWMyfSBkZXN0XG4gICAgICovXG4gICAgdmVjMi5zZXQgPSBmdW5jdGlvbiAodmVjLCBkZXN0KSB7XG4gICAgICAgIGRlc3RbMF0gPSB2ZWNbMF07XG4gICAgICAgIGRlc3RbMV0gPSB2ZWNbMV07XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB0d28gdmVjdG9ycyBmb3IgZXF1YWxpdHkgd2l0aGluIGEgY2VydGFpbiBtYXJnaW4gb2YgZXJyb3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dmVjMn0gYSBGaXJzdCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IGIgU2Vjb25kIHZlY3RvclxuICAgICAqXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgYSBpcyBlcXVpdmFsZW50IHRvIGJcbiAgICAgKi9cbiAgICB2ZWMyLmVxdWFsID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGEgPT09IGIgfHwgKFxuICAgICAgICAgICAgTWF0aC5hYnMoYVswXSAtIGJbMF0pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgICAgTWF0aC5hYnMoYVsxXSAtIGJbMV0pIDwgRkxPQVRfRVBTSUxPTlxuICAgICAgICApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBOZWdhdGVzIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMlxuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWMyfSB2ZWMgdmVjMiB0byBuZWdhdGVcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IFtkZXN0XSB2ZWMyIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHZlY1xuICAgICAqXG4gICAgICogQHJldHVybnMge3ZlYzJ9IGRlc3QgaWYgc3BlY2lmaWVkLCB2ZWMgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgdmVjMi5uZWdhdGUgPSBmdW5jdGlvbiAodmVjLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gdmVjOyB9XG4gICAgICAgIGRlc3RbMF0gPSAtdmVjWzBdO1xuICAgICAgICBkZXN0WzFdID0gLXZlY1sxXTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE5vcm1saXplIGEgdmVjMlxuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWMyfSB2ZWMgdmVjMiB0byBub3JtYWxpemVcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IFtkZXN0XSB2ZWMyIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHZlY1xuICAgICAqXG4gICAgICogQHJldHVybnMge3ZlYzJ9IGRlc3QgaWYgc3BlY2lmaWVkLCB2ZWMgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgdmVjMi5ub3JtYWxpemUgPSBmdW5jdGlvbiAodmVjLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gdmVjOyB9XG4gICAgICAgIHZhciBtYWcgPSB2ZWNbMF0gKiB2ZWNbMF0gKyB2ZWNbMV0gKiB2ZWNbMV07XG4gICAgICAgIGlmIChtYWcgPiAwKSB7XG4gICAgICAgICAgICBtYWcgPSBNYXRoLnNxcnQobWFnKTtcbiAgICAgICAgICAgIGRlc3RbMF0gPSB2ZWNbMF0gLyBtYWc7XG4gICAgICAgICAgICBkZXN0WzFdID0gdmVjWzFdIC8gbWFnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVzdFswXSA9IGRlc3RbMV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMidzLiBOb3RlIHRoYXQgdGhlIGNyb3NzIHByb2R1Y3QgbXVzdCBieSBkZWZpbml0aW9uXG4gICAgICogcHJvZHVjZSBhIDNEIHZlY3Rvci4gSWYgYSBkZXN0IHZlY3RvciBpcyBnaXZlbiwgaXQgd2lsbCBjb250YWluIHRoZSByZXN1bHRhbnQgM0QgdmVjdG9yLlxuICAgICAqIE90aGVyd2lzZSwgYSBzY2FsYXIgbnVtYmVyIHdpbGwgYmUgcmV0dXJuZWQsIHJlcHJlc2VudGluZyB0aGUgdmVjdG9yJ3MgWiBjb29yZGluYXRlLCBzaW5jZVxuICAgICAqIGl0cyBYIGFuZCBZIG11c3QgYWx3YXlzIGVxdWFsIDAuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlczpcbiAgICAgKiAgICB2YXIgY3Jvc3NSZXN1bHQgPSB2ZWMzLmNyZWF0ZSgpO1xuICAgICAqICAgIHZlYzIuY3Jvc3MoWzEsIDJdLCBbMywgNF0sIGNyb3NzUmVzdWx0KTtcbiAgICAgKiAgICAvLz0+IFswLCAwLCAtMl1cbiAgICAgKlxuICAgICAqICAgIHZlYzIuY3Jvc3MoWzEsIDJdLCBbMywgNF0pO1xuICAgICAqICAgIC8vPT4gLTJcbiAgICAgKlxuICAgICAqIFNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI0Mzk0NS9jYWxjdWxhdGluZy1hLTJkLXZlY3RvcnMtY3Jvc3MtcHJvZHVjdFxuICAgICAqIGZvciBzb21lIGludGVyZXN0aW5nIGZhY3RzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWMyfSB2ZWNBIGxlZnQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB7dmVjMn0gdmVjQiByaWdodCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHt2ZWMyfSBbZGVzdF0gb3B0aW9uYWwgdmVjMiByZWNlaXZpbmcgcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIGEgc2NhbGFyIGlzIHJldHVybmVkXG4gICAgICpcbiAgICAgKi9cbiAgICB2ZWMyLmNyb3NzID0gZnVuY3Rpb24gKHZlY0EsIHZlY0IsIGRlc3QpIHtcbiAgICAgICAgdmFyIHogPSB2ZWNBWzBdICogdmVjQlsxXSAtIHZlY0FbMV0gKiB2ZWNCWzBdO1xuICAgICAgICBpZiAoIWRlc3QpIHJldHVybiB6O1xuICAgICAgICBkZXN0WzBdID0gZGVzdFsxXSA9IDA7XG4gICAgICAgIGRlc3RbMl0gPSB6O1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIENhY2x1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlYzJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dmVjMn0gdmVjIHZlYzIgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICAgICAqXG4gICAgICogQHJldHVybnMge051bWJlcn0gTGVuZ3RoIG9mIHZlY1xuICAgICAqL1xuICAgIHZlYzIubGVuZ3RoID0gZnVuY3Rpb24gKHZlYykge1xuICAgICAgdmFyIHggPSB2ZWNbMF0sIHkgPSB2ZWNbMV07XG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWNsdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiBhIHZlYzJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dmVjMn0gdmVjIHZlYzIgdG8gY2FsY3VsYXRlIHNxdWFyZWQgbGVuZ3RoIG9mXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBTcXVhcmVkIExlbmd0aCBvZiB2ZWNcbiAgICAgKi9cbiAgICB2ZWMyLnNxdWFyZWRMZW5ndGggPSBmdW5jdGlvbiAodmVjKSB7XG4gICAgICB2YXIgeCA9IHZlY1swXSwgeSA9IHZlY1sxXTtcbiAgICAgIHJldHVybiB4ICogeCArIHkgKiB5O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDYWNsdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjMnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dmVjMn0gdmVjQSBGaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHt2ZWMyfSB2ZWNCIFNlY29uZCBvcGVyYW5kXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBEb3QgcHJvZHVjdCBvZiB2ZWNBIGFuZCB2ZWNCXG4gICAgICovXG4gICAgdmVjMi5kb3QgPSBmdW5jdGlvbiAodmVjQSwgdmVjQikge1xuICAgICAgICByZXR1cm4gdmVjQVswXSAqIHZlY0JbMF0gKyB2ZWNBWzFdICogdmVjQlsxXTtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIDJEIHVuaXQgdmVjdG9yIHBvaW50aW5nIGZyb20gb25lIHZlY3RvciB0byBhbm90aGVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IHZlY0EgT3JpZ2luIHZlYzJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IHZlY0IgdmVjMiB0byBwb2ludCB0b1xuICAgICAqIEBwYXJhbSB7dmVjMn0gW2Rlc3RdIHZlYzIgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gdmVjQVxuICAgICAqXG4gICAgICogQHJldHVybnMge3ZlYzJ9IGRlc3QgaWYgc3BlY2lmaWVkLCB2ZWNBIG90aGVyd2lzZVxuICAgICAqL1xuICAgIHZlYzIuZGlyZWN0aW9uID0gZnVuY3Rpb24gKHZlY0EsIHZlY0IsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSB2ZWNBOyB9XG5cbiAgICAgICAgdmFyIHggPSB2ZWNBWzBdIC0gdmVjQlswXSxcbiAgICAgICAgICAgIHkgPSB2ZWNBWzFdIC0gdmVjQlsxXSxcbiAgICAgICAgICAgIGxlbiA9IHggKiB4ICsgeSAqIHk7XG5cbiAgICAgICAgaWYgKCFsZW4pIHtcbiAgICAgICAgICAgIGRlc3RbMF0gPSAwO1xuICAgICAgICAgICAgZGVzdFsxXSA9IDA7XG4gICAgICAgICAgICBkZXN0WzJdID0gMDtcbiAgICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgICB9XG5cbiAgICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgICAgICBkZXN0WzBdID0geCAqIGxlbjtcbiAgICAgICAgZGVzdFsxXSA9IHkgKiBsZW47XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlYzJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dmVjMn0gdmVjQSBGaXJzdCB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IHZlY0IgU2Vjb25kIHZlY3RvclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBsZXJwIEludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IFtkZXN0XSB2ZWMyIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHZlY0FcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt2ZWMyfSBkZXN0IGlmIHNwZWNpZmllZCwgdmVjQSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICB2ZWMyLmxlcnAgPSBmdW5jdGlvbiAodmVjQSwgdmVjQiwgbGVycCwgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IHZlY0E7IH1cbiAgICAgICAgZGVzdFswXSA9IHZlY0FbMF0gKyBsZXJwICogKHZlY0JbMF0gLSB2ZWNBWzBdKTtcbiAgICAgICAgZGVzdFsxXSA9IHZlY0FbMV0gKyBsZXJwICogKHZlY0JbMV0gLSB2ZWNBWzFdKTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSB2ZWN0b3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dmVjMn0gdmVjIFZlY3RvciB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB2ZWNcbiAgICAgKi9cbiAgICB2ZWMyLnN0ciA9IGZ1bmN0aW9uICh2ZWMpIHtcbiAgICAgICAgcmV0dXJuICdbJyArIHZlY1swXSArICcsICcgKyB2ZWNbMV0gKyAnXSc7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBAY2xhc3MgMngyIE1hdHJpeFxuICAgICAqIEBuYW1lIG1hdDJcbiAgICAgKi9cbiAgICB2YXIgbWF0MiA9IHt9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgMngyIG1hdHJpeC4gSWYgc3JjIGlzIGdpdmVuLCB0aGUgbmV3IG1hdHJpeFxuICAgICAqIGlzIGluaXRpYWxpemVkIHRvIHRob3NlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0Mn0gW3NyY10gdGhlIHNlZWQgdmFsdWVzIGZvciB0aGUgbmV3IG1hdHJpeCwgaWYgYW55XG4gICAgICogQHJldHVybnMge21hdDJ9IGEgbmV3IG1hdHJpeFxuICAgICAqL1xuICAgIG1hdDIuY3JlYXRlID0gZnVuY3Rpb24oc3JjKSB7XG4gICAgICAgIHZhciBkZXN0ID0gbmV3IE1hdHJpeEFycmF5KDQpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgZGVzdFswXSA9IHNyY1swXTtcbiAgICAgICAgICAgIGRlc3RbMV0gPSBzcmNbMV07XG4gICAgICAgICAgICBkZXN0WzJdID0gc3JjWzJdO1xuICAgICAgICAgICAgZGVzdFszXSA9IHNyY1szXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlc3RbMF0gPSBkZXN0WzFdID0gZGVzdFsyXSA9IGRlc3RbM10gPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgbWF0MiwgaW5pdGlhbGl6aW5nIGl0IHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG0wMFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtMDFcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbTEwXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG0xMVxuXG4gICAgICogQHJldHVybnMge21hdDJ9IE5ldyBtYXQyXG4gICAgICovXG4gICAgbWF0Mi5jcmVhdGVGcm9tID0gZnVuY3Rpb24gKG0wMCwgbTAxLCBtMTAsIG0xMSkge1xuICAgICAgICB2YXIgZGVzdCA9IG5ldyBNYXRyaXhBcnJheSg0KTtcblxuICAgICAgICBkZXN0WzBdID0gbTAwO1xuICAgICAgICBkZXN0WzFdID0gbTAxO1xuICAgICAgICBkZXN0WzJdID0gbTEwO1xuICAgICAgICBkZXN0WzNdID0gbTExO1xuXG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2Ygb25lIG1hdDIgdG8gYW5vdGhlclxuICAgICAqXG4gICAgICogQHBhcmFtIHttYXQyfSBtYXQgbWF0MiBjb250YWluaW5nIHZhbHVlcyB0byBjb3B5XG4gICAgICogQHBhcmFtIHttYXQyfSBkZXN0IG1hdDIgcmVjZWl2aW5nIGNvcGllZCB2YWx1ZXNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHttYXQyfSBkZXN0XG4gICAgICovXG4gICAgbWF0Mi5zZXQgPSBmdW5jdGlvbiAobWF0LCBkZXN0KSB7XG4gICAgICAgIGRlc3RbMF0gPSBtYXRbMF07XG4gICAgICAgIGRlc3RbMV0gPSBtYXRbMV07XG4gICAgICAgIGRlc3RbMl0gPSBtYXRbMl07XG4gICAgICAgIGRlc3RbM10gPSBtYXRbM107XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB0d28gbWF0cmljZXMgZm9yIGVxdWFsaXR5IHdpdGhpbiBhIGNlcnRhaW4gbWFyZ2luIG9mIGVycm9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDJ9IGEgRmlyc3QgbWF0cml4XG4gICAgICogQHBhcmFtIHttYXQyfSBiIFNlY29uZCBtYXRyaXhcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIGEgaXMgZXF1aXZhbGVudCB0byBiXG4gICAgICovXG4gICAgbWF0Mi5lcXVhbCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhID09PSBiIHx8IChcbiAgICAgICAgICAgIE1hdGguYWJzKGFbMF0gLSBiWzBdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbMV0gLSBiWzFdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbMl0gLSBiWzJdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbM10gLSBiWzNdKSA8IEZMT0FUX0VQU0lMT05cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyBhIG1hdDIgdG8gYW4gaWRlbnRpdHkgbWF0cml4XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDJ9IFtkZXN0XSBtYXQyIHRvIHNldC4gSWYgb21pdHRlZCBhIG5ldyBvbmUgd2lsbCBiZSBjcmVhdGVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge21hdDJ9IGRlc3RcbiAgICAgKi9cbiAgICBtYXQyLmlkZW50aXR5ID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBtYXQyLmNyZWF0ZSgpOyB9XG4gICAgICAgIGRlc3RbMF0gPSAxO1xuICAgICAgICBkZXN0WzFdID0gMDtcbiAgICAgICAgZGVzdFsyXSA9IDA7XG4gICAgICAgIGRlc3RbM10gPSAxO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNwb3NlcyBhIG1hdDIgKGZsaXBzIHRoZSB2YWx1ZXMgb3ZlciB0aGUgZGlhZ29uYWwpXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDJ9IG1hdCBtYXQyIHRvIHRyYW5zcG9zZVxuICAgICAqIEBwYXJhbSB7bWF0Mn0gW2Rlc3RdIG1hdDIgcmVjZWl2aW5nIHRyYW5zcG9zZWQgdmFsdWVzLiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIG1hdFxuICAgICAqXG4gICAgICogQHBhcmFtIHttYXQyfSBkZXN0IGlmIHNwZWNpZmllZCwgbWF0IG90aGVyd2lzZVxuICAgICAqL1xuICAgIG1hdDIudHJhbnNwb3NlID0gZnVuY3Rpb24gKG1hdCwgZGVzdCkge1xuICAgICAgICAvLyBJZiB3ZSBhcmUgdHJhbnNwb3Npbmcgb3Vyc2VsdmVzIHdlIGNhbiBza2lwIGEgZmV3IHN0ZXBzIGJ1dCBoYXZlIHRvIGNhY2hlIHNvbWUgdmFsdWVzXG4gICAgICAgIGlmICghZGVzdCB8fCBtYXQgPT09IGRlc3QpIHtcbiAgICAgICAgICAgIHZhciBhMDAgPSBtYXRbMV07XG4gICAgICAgICAgICBtYXRbMV0gPSBtYXRbMl07XG4gICAgICAgICAgICBtYXRbMl0gPSBhMDA7XG4gICAgICAgICAgICByZXR1cm4gbWF0O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBkZXN0WzBdID0gbWF0WzBdO1xuICAgICAgICBkZXN0WzFdID0gbWF0WzJdO1xuICAgICAgICBkZXN0WzJdID0gbWF0WzFdO1xuICAgICAgICBkZXN0WzNdID0gbWF0WzNdO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlcyB0aGUgZGV0ZXJtaW5hbnQgb2YgYSBtYXQyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDJ9IG1hdCBtYXQyIHRvIGNhbGN1bGF0ZSBkZXRlcm1pbmFudCBvZlxuICAgICAqXG4gICAgICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgbWF0XG4gICAgICovXG4gICAgbWF0Mi5kZXRlcm1pbmFudCA9IGZ1bmN0aW9uIChtYXQpIHtcbiAgICAgIHJldHVybiBtYXRbMF0gKiBtYXRbM10gLSBtYXRbMl0gKiBtYXRbMV07XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIG1hdHJpeCBvZiBhIG1hdDJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0Mn0gbWF0IG1hdDIgdG8gY2FsY3VsYXRlIGludmVyc2Ugb2ZcbiAgICAgKiBAcGFyYW0ge21hdDJ9IFtkZXN0XSBtYXQyIHJlY2VpdmluZyBpbnZlcnNlIG1hdHJpeC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byBtYXRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bWF0Mn0gZGVzdCBpcyBzcGVjaWZpZWQsIG1hdCBvdGhlcndpc2UsIG51bGwgaWYgbWF0cml4IGNhbm5vdCBiZSBpbnZlcnRlZFxuICAgICAqL1xuICAgIG1hdDIuaW52ZXJzZSA9IGZ1bmN0aW9uIChtYXQsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBtYXQ7IH1cbiAgICAgICAgdmFyIGEwID0gbWF0WzBdLCBhMSA9IG1hdFsxXSwgYTIgPSBtYXRbMl0sIGEzID0gbWF0WzNdO1xuICAgICAgICB2YXIgZGV0ID0gYTAgKiBhMyAtIGEyICogYTE7XG4gICAgICAgIGlmICghZGV0KSByZXR1cm4gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIGRldCA9IDEuMCAvIGRldDtcbiAgICAgICAgZGVzdFswXSA9ICBhMyAqIGRldDtcbiAgICAgICAgZGVzdFsxXSA9IC1hMSAqIGRldDtcbiAgICAgICAgZGVzdFsyXSA9IC1hMiAqIGRldDtcbiAgICAgICAgZGVzdFszXSA9ICBhMCAqIGRldDtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgICAqXG4gICAgICogQHBhcmFtIHttYXQyfSBtYXRBIEZpcnN0IG9wZXJhbmRcbiAgICAgKiBAcGFyYW0ge21hdDJ9IG1hdEIgU2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0ge21hdDJ9IFtkZXN0XSBtYXQyIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIG1hdEFcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHttYXQyfSBkZXN0IGlmIHNwZWNpZmllZCwgbWF0QSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBtYXQyLm11bHRpcGx5ID0gZnVuY3Rpb24gKG1hdEEsIG1hdEIsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBtYXRBOyB9XG4gICAgICAgIHZhciBhMTEgPSBtYXRBWzBdLFxuICAgICAgICAgICAgYTEyID0gbWF0QVsxXSxcbiAgICAgICAgICAgIGEyMSA9IG1hdEFbMl0sXG4gICAgICAgICAgICBhMjIgPSBtYXRBWzNdO1xuICAgICAgICBkZXN0WzBdID0gYTExICogbWF0QlswXSArIGExMiAqIG1hdEJbMl07XG4gICAgICAgIGRlc3RbMV0gPSBhMTEgKiBtYXRCWzFdICsgYTEyICogbWF0QlszXTtcbiAgICAgICAgZGVzdFsyXSA9IGEyMSAqIG1hdEJbMF0gKyBhMjIgKiBtYXRCWzJdO1xuICAgICAgICBkZXN0WzNdID0gYTIxICogbWF0QlsxXSArIGEyMiAqIG1hdEJbM107XG4gICAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGVzIGEgMngyIG1hdHJpeCBieSBhbiBhbmdsZVxuICAgICAqXG4gICAgICogQHBhcmFtIHttYXQyfSAgIG1hdCAgIFRoZSBtYXRyaXggdG8gcm90YXRlXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGFuZ2xlIFRoZSBhbmdsZSBpbiByYWRpYW5zXG4gICAgICogQHBhcmFtIHttYXQyfSBbZGVzdF0gIE9wdGlvbmFsIG1hdDIgcmVjZWl2aW5nIHRoZSByZXN1bHQuIElmIG9taXR0ZWQgbWF0IHdpbGwgYmUgdXNlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHttYXQyfSBkZXN0IGlmIHNwZWNpZmllZCwgbWF0IG90aGVyd2lzZVxuICAgICAqL1xuICAgIG1hdDIucm90YXRlID0gZnVuY3Rpb24gKG1hdCwgYW5nbGUsIGRlc3QpIHtcbiAgICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBtYXQ7IH1cbiAgICAgICAgdmFyIGExMSA9IG1hdFswXSxcbiAgICAgICAgICAgIGExMiA9IG1hdFsxXSxcbiAgICAgICAgICAgIGEyMSA9IG1hdFsyXSxcbiAgICAgICAgICAgIGEyMiA9IG1hdFszXSxcbiAgICAgICAgICAgIHMgPSBNYXRoLnNpbihhbmdsZSksXG4gICAgICAgICAgICBjID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICBkZXN0WzBdID0gYTExICogIGMgKyBhMTIgKiBzO1xuICAgICAgICBkZXN0WzFdID0gYTExICogLXMgKyBhMTIgKiBjO1xuICAgICAgICBkZXN0WzJdID0gYTIxICogIGMgKyBhMjIgKiBzO1xuICAgICAgICBkZXN0WzNdID0gYTIxICogLXMgKyBhMjIgKiBjO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyB0aGUgdmVjMiBieSB0aGUgZ2l2ZW4gMngyIG1hdHJpeFxuICAgICAqXG4gICAgICogQHBhcmFtIHttYXQyfSBtYXRyaXggdGhlIDJ4MiBtYXRyaXggdG8gbXVsdGlwbHkgYWdhaW5zdFxuICAgICAqIEBwYXJhbSB7dmVjMn0gdmVjICAgIHRoZSB2ZWN0b3IgdG8gbXVsdGlwbHlcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IFtkZXN0XSBhbiBvcHRpb25hbCByZWNlaXZpbmcgdmVjdG9yLiBJZiBub3QgZ2l2ZW4sIHZlYyBpcyB1c2VkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3ZlYzJ9IFRoZSBtdWx0aXBsaWNhdGlvbiByZXN1bHRcbiAgICAgKiovXG4gICAgbWF0Mi5tdWx0aXBseVZlYzIgPSBmdW5jdGlvbihtYXRyaXgsIHZlYywgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSBkZXN0ID0gdmVjO1xuICAgICAgdmFyIHggPSB2ZWNbMF0sIHkgPSB2ZWNbMV07XG4gICAgICBkZXN0WzBdID0geCAqIG1hdHJpeFswXSArIHkgKiBtYXRyaXhbMV07XG4gICAgICBkZXN0WzFdID0geCAqIG1hdHJpeFsyXSArIHkgKiBtYXRyaXhbM107XG4gICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIFNjYWxlcyB0aGUgbWF0MiBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMlxuICAgICAqXG4gICAgICogQHBhcmFtIHttYXQyfSBtYXRyaXggdGhlIDJ4MiBtYXRyaXggdG8gc2NhbGVcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IHZlYyAgICB0aGUgdmVjdG9yIGNvbnRhaW5pbmcgdGhlIGRpbWVuc2lvbnMgdG8gc2NhbGUgYnlcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IFtkZXN0XSBhbiBvcHRpb25hbCByZWNlaXZpbmcgbWF0Mi4gSWYgbm90IGdpdmVuLCBtYXRyaXggaXMgdXNlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHttYXQyfSBkZXN0IGlmIHNwZWNpZmllZCwgbWF0cml4IG90aGVyd2lzZVxuICAgICAqKi9cbiAgICBtYXQyLnNjYWxlID0gZnVuY3Rpb24obWF0cml4LCB2ZWMsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gbWF0cml4OyB9XG4gICAgICB2YXIgYTExID0gbWF0cml4WzBdLFxuICAgICAgICAgIGExMiA9IG1hdHJpeFsxXSxcbiAgICAgICAgICBhMjEgPSBtYXRyaXhbMl0sXG4gICAgICAgICAgYTIyID0gbWF0cml4WzNdLFxuICAgICAgICAgIGIxMSA9IHZlY1swXSxcbiAgICAgICAgICBiMjIgPSB2ZWNbMV07XG4gICAgICBkZXN0WzBdID0gYTExICogYjExO1xuICAgICAgZGVzdFsxXSA9IGExMiAqIGIyMjtcbiAgICAgIGRlc3RbMl0gPSBhMjEgKiBiMTE7XG4gICAgICBkZXN0WzNdID0gYTIyICogYjIyO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge21hdDJ9IG1hdCBtYXQyIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBtYXRcbiAgICAgKi9cbiAgICBtYXQyLnN0ciA9IGZ1bmN0aW9uIChtYXQpIHtcbiAgICAgICAgcmV0dXJuICdbJyArIG1hdFswXSArICcsICcgKyBtYXRbMV0gKyAnLCAnICsgbWF0WzJdICsgJywgJyArIG1hdFszXSArICddJztcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIEBjbGFzcyA0IERpbWVuc2lvbmFsIFZlY3RvclxuICAgICAqIEBuYW1lIHZlYzRcbiAgICAgKi9cbiAgICB2YXIgdmVjNCA9IHt9O1xuICAgICBcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHZlYzQsIGluaXRpYWxpemluZyBpdCBmcm9tIHZlYyBpZiB2ZWNcbiAgICAgKiBpcyBnaXZlbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dmVjNH0gW3ZlY10gdGhlIHZlY3RvcidzIGluaXRpYWwgY29udGVudHNcbiAgICAgKiBAcmV0dXJucyB7dmVjNH0gYSBuZXcgMkQgdmVjdG9yXG4gICAgICovXG4gICAgdmVjNC5jcmVhdGUgPSBmdW5jdGlvbih2ZWMpIHtcbiAgICAgICAgdmFyIGRlc3QgPSBuZXcgTWF0cml4QXJyYXkoNCk7XG4gICAgICAgIFxuICAgICAgICBpZiAodmVjKSB7XG4gICAgICAgICAgICBkZXN0WzBdID0gdmVjWzBdO1xuICAgICAgICAgICAgZGVzdFsxXSA9IHZlY1sxXTtcbiAgICAgICAgICAgIGRlc3RbMl0gPSB2ZWNbMl07XG4gICAgICAgICAgICBkZXN0WzNdID0gdmVjWzNdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVzdFswXSA9IDA7XG4gICAgICAgICAgICBkZXN0WzFdID0gMDtcbiAgICAgICAgICAgIGRlc3RbMl0gPSAwO1xuICAgICAgICAgICAgZGVzdFszXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSB2ZWM0LCBpbml0aWFsaXppbmcgaXQgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geCBYIHZhbHVlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHkgWSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB6IFogdmFsdWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdyBXIHZhbHVlXG5cbiAgICAgKiBAcmV0dXJucyB7dmVjNH0gTmV3IHZlYzRcbiAgICAgKi9cbiAgICB2ZWM0LmNyZWF0ZUZyb20gPSBmdW5jdGlvbiAoeCwgeSwgeiwgdykge1xuICAgICAgICB2YXIgZGVzdCA9IG5ldyBNYXRyaXhBcnJheSg0KTtcblxuICAgICAgICBkZXN0WzBdID0geDtcbiAgICAgICAgZGVzdFsxXSA9IHk7XG4gICAgICAgIGRlc3RbMl0gPSB6O1xuICAgICAgICBkZXN0WzNdID0gdztcblxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIHZlYzQncyB0b2dldGhlci4gSWYgZGVzdCBpcyBnaXZlbiwgdGhlIHJlc3VsdFxuICAgICAqIGlzIHN0b3JlZCB0aGVyZS4gT3RoZXJ3aXNlLCB0aGUgcmVzdWx0IGlzIHN0b3JlZCBpbiB2ZWNCLlxuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWM0fSB2ZWNBIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHt2ZWM0fSB2ZWNCIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB7dmVjNH0gW2Rlc3RdIHRoZSBvcHRpb25hbCByZWNlaXZpbmcgdmVjdG9yXG4gICAgICogQHJldHVybnMge3ZlYzR9IGRlc3RcbiAgICAgKi9cbiAgICB2ZWM0LmFkZCA9IGZ1bmN0aW9uKHZlY0EsIHZlY0IsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgZGVzdCA9IHZlY0I7XG4gICAgICBkZXN0WzBdID0gdmVjQVswXSArIHZlY0JbMF07XG4gICAgICBkZXN0WzFdID0gdmVjQVsxXSArIHZlY0JbMV07XG4gICAgICBkZXN0WzJdID0gdmVjQVsyXSArIHZlY0JbMl07XG4gICAgICBkZXN0WzNdID0gdmVjQVszXSArIHZlY0JbM107XG4gICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0cyB2ZWNCIGZyb20gdmVjQS4gSWYgZGVzdCBpcyBnaXZlbiwgdGhlIHJlc3VsdFxuICAgICAqIGlzIHN0b3JlZCB0aGVyZS4gT3RoZXJ3aXNlLCB0aGUgcmVzdWx0IGlzIHN0b3JlZCBpbiB2ZWNCLlxuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWM0fSB2ZWNBIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHt2ZWM0fSB2ZWNCIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB7dmVjNH0gW2Rlc3RdIHRoZSBvcHRpb25hbCByZWNlaXZpbmcgdmVjdG9yXG4gICAgICogQHJldHVybnMge3ZlYzR9IGRlc3RcbiAgICAgKi9cbiAgICB2ZWM0LnN1YnRyYWN0ID0gZnVuY3Rpb24odmVjQSwgdmVjQiwgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSBkZXN0ID0gdmVjQjtcbiAgICAgIGRlc3RbMF0gPSB2ZWNBWzBdIC0gdmVjQlswXTtcbiAgICAgIGRlc3RbMV0gPSB2ZWNBWzFdIC0gdmVjQlsxXTtcbiAgICAgIGRlc3RbMl0gPSB2ZWNBWzJdIC0gdmVjQlsyXTtcbiAgICAgIGRlc3RbM10gPSB2ZWNBWzNdIC0gdmVjQlszXTtcbiAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyB2ZWNBIHdpdGggdmVjQi4gSWYgZGVzdCBpcyBnaXZlbiwgdGhlIHJlc3VsdFxuICAgICAqIGlzIHN0b3JlZCB0aGVyZS4gT3RoZXJ3aXNlLCB0aGUgcmVzdWx0IGlzIHN0b3JlZCBpbiB2ZWNCLlxuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWM0fSB2ZWNBIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAgICogQHBhcmFtIHt2ZWM0fSB2ZWNCIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB7dmVjNH0gW2Rlc3RdIHRoZSBvcHRpb25hbCByZWNlaXZpbmcgdmVjdG9yXG4gICAgICogQHJldHVybnMge3ZlYzR9IGRlc3RcbiAgICAgKi9cbiAgICB2ZWM0Lm11bHRpcGx5ID0gZnVuY3Rpb24odmVjQSwgdmVjQiwgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSBkZXN0ID0gdmVjQjtcbiAgICAgIGRlc3RbMF0gPSB2ZWNBWzBdICogdmVjQlswXTtcbiAgICAgIGRlc3RbMV0gPSB2ZWNBWzFdICogdmVjQlsxXTtcbiAgICAgIGRlc3RbMl0gPSB2ZWNBWzJdICogdmVjQlsyXTtcbiAgICAgIGRlc3RbM10gPSB2ZWNBWzNdICogdmVjQlszXTtcbiAgICAgIHJldHVybiBkZXN0O1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogRGl2aWRlcyB2ZWNBIGJ5IHZlY0IuIElmIGRlc3QgaXMgZ2l2ZW4sIHRoZSByZXN1bHRcbiAgICAgKiBpcyBzdG9yZWQgdGhlcmUuIE90aGVyd2lzZSwgdGhlIHJlc3VsdCBpcyBzdG9yZWQgaW4gdmVjQi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dmVjNH0gdmVjQSB0aGUgZmlyc3Qgb3BlcmFuZFxuICAgICAqIEBwYXJhbSB7dmVjNH0gdmVjQiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IFtkZXN0XSB0aGUgb3B0aW9uYWwgcmVjZWl2aW5nIHZlY3RvclxuICAgICAqIEByZXR1cm5zIHt2ZWM0fSBkZXN0XG4gICAgICovXG4gICAgdmVjNC5kaXZpZGUgPSBmdW5jdGlvbih2ZWNBLCB2ZWNCLCBkZXN0KSB7XG4gICAgICBpZiAoIWRlc3QpIGRlc3QgPSB2ZWNCO1xuICAgICAgZGVzdFswXSA9IHZlY0FbMF0gLyB2ZWNCWzBdO1xuICAgICAgZGVzdFsxXSA9IHZlY0FbMV0gLyB2ZWNCWzFdO1xuICAgICAgZGVzdFsyXSA9IHZlY0FbMl0gLyB2ZWNCWzJdO1xuICAgICAgZGVzdFszXSA9IHZlY0FbM10gLyB2ZWNCWzNdO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBTY2FsZXMgdmVjQSBieSBzb21lIHNjYWxhciBudW1iZXIuIElmIGRlc3QgaXMgZ2l2ZW4sIHRoZSByZXN1bHRcbiAgICAgKiBpcyBzdG9yZWQgdGhlcmUuIE90aGVyd2lzZSwgdGhlIHJlc3VsdCBpcyBzdG9yZWQgaW4gdmVjQS5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgdGhlIHNhbWUgYXMgbXVsdGlwbHlpbmcgZWFjaCBjb21wb25lbnQgb2YgdmVjQVxuICAgICAqIGJ5IHRoZSBnaXZlbiBzY2FsYXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3ZlYzR9ICAgdmVjQSB0aGUgdmVjdG9yIHRvIGJlIHNjYWxlZFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsYXIgdGhlIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gICAgICogQHBhcmFtIHt2ZWM0fSAgIFtkZXN0XSB0aGUgb3B0aW9uYWwgcmVjZWl2aW5nIHZlY3RvclxuICAgICAqIEByZXR1cm5zIHt2ZWM0fSBkZXN0XG4gICAgICovXG4gICAgdmVjNC5zY2FsZSA9IGZ1bmN0aW9uKHZlY0EsIHNjYWxhciwgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSBkZXN0ID0gdmVjQTtcbiAgICAgIGRlc3RbMF0gPSB2ZWNBWzBdICogc2NhbGFyO1xuICAgICAgZGVzdFsxXSA9IHZlY0FbMV0gKiBzY2FsYXI7XG4gICAgICBkZXN0WzJdID0gdmVjQVsyXSAqIHNjYWxhcjtcbiAgICAgIGRlc3RbM10gPSB2ZWNBWzNdICogc2NhbGFyO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgdmFsdWVzIG9mIG9uZSB2ZWM0IHRvIGFub3RoZXJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dmVjNH0gdmVjIHZlYzQgY29udGFpbmluZyB2YWx1ZXMgdG8gY29weVxuICAgICAqIEBwYXJhbSB7dmVjNH0gZGVzdCB2ZWM0IHJlY2VpdmluZyBjb3BpZWQgdmFsdWVzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7dmVjNH0gZGVzdFxuICAgICAqL1xuICAgIHZlYzQuc2V0ID0gZnVuY3Rpb24gKHZlYywgZGVzdCkge1xuICAgICAgICBkZXN0WzBdID0gdmVjWzBdO1xuICAgICAgICBkZXN0WzFdID0gdmVjWzFdO1xuICAgICAgICBkZXN0WzJdID0gdmVjWzJdO1xuICAgICAgICBkZXN0WzNdID0gdmVjWzNdO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29tcGFyZXMgdHdvIHZlY3RvcnMgZm9yIGVxdWFsaXR5IHdpdGhpbiBhIGNlcnRhaW4gbWFyZ2luIG9mIGVycm9yXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IGEgRmlyc3QgdmVjdG9yXG4gICAgICogQHBhcmFtIHt2ZWM0fSBiIFNlY29uZCB2ZWN0b3JcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIGEgaXMgZXF1aXZhbGVudCB0byBiXG4gICAgICovXG4gICAgdmVjNC5lcXVhbCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhID09PSBiIHx8IChcbiAgICAgICAgICAgIE1hdGguYWJzKGFbMF0gLSBiWzBdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbMV0gLSBiWzFdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbMl0gLSBiWzJdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICAgIE1hdGguYWJzKGFbM10gLSBiWzNdKSA8IEZMT0FUX0VQU0lMT05cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dmVjNH0gdmVjIHZlYzQgdG8gbmVnYXRlXG4gICAgICogQHBhcmFtIHt2ZWM0fSBbZGVzdF0gdmVjNCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byB2ZWNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt2ZWM0fSBkZXN0IGlmIHNwZWNpZmllZCwgdmVjIG90aGVyd2lzZVxuICAgICAqL1xuICAgIHZlYzQubmVnYXRlID0gZnVuY3Rpb24gKHZlYywgZGVzdCkge1xuICAgICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IHZlYzsgfVxuICAgICAgICBkZXN0WzBdID0gLXZlY1swXTtcbiAgICAgICAgZGVzdFsxXSA9IC12ZWNbMV07XG4gICAgICAgIGRlc3RbMl0gPSAtdmVjWzJdO1xuICAgICAgICBkZXN0WzNdID0gLXZlY1szXTtcbiAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENhY2x1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlYzJcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7dmVjMn0gdmVjIHZlYzIgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICAgICAqXG4gICAgICogQHJldHVybnMge051bWJlcn0gTGVuZ3RoIG9mIHZlY1xuICAgICAqL1xuICAgIHZlYzQubGVuZ3RoID0gZnVuY3Rpb24gKHZlYykge1xuICAgICAgdmFyIHggPSB2ZWNbMF0sIHkgPSB2ZWNbMV0sIHogPSB2ZWNbMl0sIHcgPSB2ZWNbM107XG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FjbHVsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWM0XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3ZlYzR9IHZlYyB2ZWM0IHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxuICAgICAqXG4gICAgICogQHJldHVybnMge051bWJlcn0gU3F1YXJlZCBMZW5ndGggb2YgdmVjXG4gICAgICovXG4gICAgdmVjNC5zcXVhcmVkTGVuZ3RoID0gZnVuY3Rpb24gKHZlYykge1xuICAgICAgdmFyIHggPSB2ZWNbMF0sIHkgPSB2ZWNbMV0sIHogPSB2ZWNbMl0sIHcgPSB2ZWNbM107XG4gICAgICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjNFxuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWM0fSB2ZWNBIEZpcnN0IHZlY3RvclxuICAgICAqIEBwYXJhbSB7dmVjNH0gdmVjQiBTZWNvbmQgdmVjdG9yXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGxlcnAgSW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICAgICAqIEBwYXJhbSB7dmVjNH0gW2Rlc3RdIHZlYzQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gdmVjQVxuICAgICAqXG4gICAgICogQHJldHVybnMge3ZlYzR9IGRlc3QgaWYgc3BlY2lmaWVkLCB2ZWNBIG90aGVyd2lzZVxuICAgICAqL1xuICAgIHZlYzQubGVycCA9IGZ1bmN0aW9uICh2ZWNBLCB2ZWNCLCBsZXJwLCBkZXN0KSB7XG4gICAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gdmVjQTsgfVxuICAgICAgICBkZXN0WzBdID0gdmVjQVswXSArIGxlcnAgKiAodmVjQlswXSAtIHZlY0FbMF0pO1xuICAgICAgICBkZXN0WzFdID0gdmVjQVsxXSArIGxlcnAgKiAodmVjQlsxXSAtIHZlY0FbMV0pO1xuICAgICAgICBkZXN0WzJdID0gdmVjQVsyXSArIGxlcnAgKiAodmVjQlsyXSAtIHZlY0FbMl0pO1xuICAgICAgICBkZXN0WzNdID0gdmVjQVszXSArIGxlcnAgKiAodmVjQlszXSAtIHZlY0FbM10pO1xuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHZlY3RvclxuICAgICAqXG4gICAgICogQHBhcmFtIHt2ZWM0fSB2ZWMgVmVjdG9yIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICAgICAqXG4gICAgICogQHJldHVybnMge1N0cmluZ30gU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHZlY1xuICAgICAqL1xuICAgIHZlYzQuc3RyID0gZnVuY3Rpb24gKHZlYykge1xuICAgICAgICByZXR1cm4gJ1snICsgdmVjWzBdICsgJywgJyArIHZlY1sxXSArICcsICcgKyB2ZWNbMl0gKyAnLCAnICsgdmVjWzNdICsgJ10nO1xuICAgIH07XG5cbiAgICAvKlxuICAgICAqIEV4cG9ydHNcbiAgICAgKi9cblxuICAgIGlmKHJvb3QpIHtcbiAgICAgICAgcm9vdC5nbE1hdHJpeEFycmF5VHlwZSA9IE1hdHJpeEFycmF5O1xuICAgICAgICByb290Lk1hdHJpeEFycmF5ID0gTWF0cml4QXJyYXk7XG4gICAgICAgIHJvb3Quc2V0TWF0cml4QXJyYXlUeXBlID0gc2V0TWF0cml4QXJyYXlUeXBlO1xuICAgICAgICByb290LmRldGVybWluZU1hdHJpeEFycmF5VHlwZSA9IGRldGVybWluZU1hdHJpeEFycmF5VHlwZTtcbiAgICAgICAgcm9vdC5nbE1hdGggPSBnbE1hdGg7XG4gICAgICAgIHJvb3QudmVjMiA9IHZlYzI7XG4gICAgICAgIHJvb3QudmVjMyA9IHZlYzM7XG4gICAgICAgIHJvb3QudmVjNCA9IHZlYzQ7XG4gICAgICAgIHJvb3QubWF0MiA9IG1hdDI7XG4gICAgICAgIHJvb3QubWF0MyA9IG1hdDM7XG4gICAgICAgIHJvb3QubWF0NCA9IG1hdDQ7XG4gICAgICAgIHJvb3QucXVhdDQgPSBxdWF0NDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnbE1hdHJpeEFycmF5VHlwZTogTWF0cml4QXJyYXksXG4gICAgICAgIE1hdHJpeEFycmF5OiBNYXRyaXhBcnJheSxcbiAgICAgICAgc2V0TWF0cml4QXJyYXlUeXBlOiBzZXRNYXRyaXhBcnJheVR5cGUsXG4gICAgICAgIGRldGVybWluZU1hdHJpeEFycmF5VHlwZTogZGV0ZXJtaW5lTWF0cml4QXJyYXlUeXBlLFxuICAgICAgICBnbE1hdGg6IGdsTWF0aCxcbiAgICAgICAgdmVjMjogdmVjMixcbiAgICAgICAgdmVjMzogdmVjMyxcbiAgICAgICAgdmVjNDogdmVjNCxcbiAgICAgICAgbWF0MjogbWF0MixcbiAgICAgICAgbWF0MzogbWF0MyxcbiAgICAgICAgbWF0NDogbWF0NCxcbiAgICAgICAgcXVhdDQ6IHF1YXQ0XG4gICAgfTtcbn0pKTtcblxuLyoqXG4gKiBqc0Jlemllci0wLjVcbiAqIFxuICogQ29weXJpZ2h0IChjKSAyMDEwIC0gMjAxMSBTaW1vbiBQb3JyaXR0IChzaW1vbi5wb3JyaXR0QGdtYWlsLmNvbSlcbiAqIFxuICogbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICogXG4gKiBhIHNldCBvZiBCZXppZXIgY3VydmUgZnVuY3Rpb25zIHRoYXQgZGVhbCB3aXRoIEJlemllcnMsIHVzZWQgYnkganNQbHVtYiwgYW5kXG4gKiBwZXJoYXBzIHVzZWZ1bCBmb3Igb3RoZXIgcGVvcGxlLiBUaGVzZSBmdW5jdGlvbnMgd29yayB3aXRoIEJlemllciBjdXJ2ZXMgb2ZcbiAqIGFyYml0cmFyeSBkZWdyZWUuXG4gKiAgLSBmdW5jdGlvbnMgYXJlIGFsbCBpbiB0aGUgJ2pzQmV6aWVyJyBuYW1lc3BhY2UuXG4gKiAgLSBhbGwgaW5wdXQgcG9pbnRzIHNob3VsZCBiZSBpbiB0aGUgZm9ybWF0IHt4Oi4uLCB5Oi4ufS4gYWxsIG91dHB1dCBwb2ludHNcbiAqIGFyZSBpbiB0aGlzIGZvcm1hdCB0b28uXG4gKiAgLSBhbGwgaW5wdXQgY3VydmVzIHNob3VsZCBiZSBpbiB0aGUgZm9ybWF0IFsge3g6Li4sIHk6Li59LCB7eDouLiwgeTouLn0sXG4gKiB7eDouLiwgeTouLn0sIHt4Oi4uLCB5Oi4ufSBdXG4gKiAgLSAnbG9jYXRpb24nIGFzIHVzZWQgYXMgYW4gaW5wdXQgaGVyZSByZWZlcnMgdG8gYSBkZWNpbWFsIGluIHRoZSByYW5nZSAwLTFcbiAqIGluY2x1c2l2ZSwgd2hpY2ggaW5kaWNhdGVzIGEgcG9pbnQgc29tZSBwcm9wb3J0aW9uIGFsb25nIHRoZSBsZW5ndGggb2YgdGhlXG4gKiBjdXJ2ZS4gbG9jYXRpb24gYXMgb3V0cHV0IGhhcyB0aGUgc2FtZSBmb3JtYXQgYW5kIG1lYW5pbmcuXG4gKiBcbiAqIFxuICogRnVuY3Rpb24gTGlzdDogLS0tLS0tLS0tLS0tLS1cbiAqIFxuICogZGlzdGFuY2VGcm9tQ3VydmUocG9pbnQsIGN1cnZlKVxuICogXG4gKiBDYWxjdWxhdGVzIHRoZSBkaXN0YW5jZSB0aGF0IHRoZSBnaXZlbiBwb2ludCBsaWVzIGZyb20gdGhlIGdpdmVuIEJlemllci4gTm90ZVxuICogdGhhdCBpdCBpcyBjb21wdXRlZCByZWxhdGl2ZSB0byB0aGUgY2VudGVyIG9mIHRoZSBCZXppZXIsIHNvIGlmIHlvdSBoYXZlXG4gKiBzdHJva2VkIHRoZSBjdXJ2ZSB3aXRoIGEgd2lkZSBwZW4geW91IG1heSB3aXNoIHRvIHRha2UgdGhhdCBpbnRvIGFjY291bnQhIFRoZVxuICogZGlzdGFuY2UgcmV0dXJuZWQgaXMgcmVsYXRpdmUgdG8gdGhlIHZhbHVlcyBvZiB0aGUgY3VydmUgYW5kIHRoZSBwb2ludCAtIGl0XG4gKiB3aWxsIG1vc3QgbGlrZWx5IGJlIHBpeGVscy5cbiAqIFxuICogZ3JhZGllbnRBdFBvaW50KGN1cnZlLCBsb2NhdGlvbilcbiAqIFxuICogQ2FsY3VsYXRlcyB0aGUgZ3JhZGllbnQgdG8gdGhlIGN1cnZlIGF0IHRoZSBnaXZlbiBsb2NhdGlvbiwgYXMgYSBkZWNpbWFsXG4gKiBiZXR3ZWVuIDAgYW5kIDEgaW5jbHVzaXZlLlxuICogXG4gKiBncmFkaWVudEF0UG9pbnRBbG9uZ0N1cnZlRnJvbSAoY3VydmUsIGxvY2F0aW9uKVxuICogXG4gKiBDYWxjdWxhdGVzIHRoZSBncmFkaWVudCBhdCB0aGUgcG9pbnQgb24gdGhlIGdpdmVuIGN1cnZlIHRoYXQgaXMgJ2Rpc3RhbmNlJ1xuICogdW5pdHMgZnJvbSBsb2NhdGlvbi5cbiAqIFxuICogbmVhcmVzdFBvaW50T25DdXJ2ZShwb2ludCwgY3VydmUpXG4gKiBcbiAqIENhbGN1bGF0ZXMgdGhlIG5lYXJlc3QgcG9pbnQgdG8gdGhlIGdpdmVuIHBvaW50IG9uIHRoZSBnaXZlbiBjdXJ2ZS4gVGhlXG4gKiByZXR1cm4gdmFsdWUgb2YgdGhpcyBpcyBhIEpTIG9iamVjdCBsaXRlcmFsLCBjb250YWluaW5nIGJvdGggdGhlIHBvaW50J3NcbiAqIGNvb3JkaW5hdGVzIGFuZCBhbHNvIHRoZSAnbG9jYXRpb24nIG9mIHRoZSBwb2ludCAoc2VlIGFib3ZlKSwgZm9yIGV4YW1wbGU6IHtcbiAqIHBvaW50Ont4OjU1MSx5OjE1MH0sIGxvY2F0aW9uOjAuMjYzMzY1IH0uXG4gKiBcbiAqIHBvaW50T25DdXJ2ZShjdXJ2ZSwgbG9jYXRpb24pXG4gKiBcbiAqIENhbGN1bGF0ZXMgdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBwb2ludCBvbiB0aGUgZ2l2ZW4gQmV6aWVyIGN1cnZlIGF0IHRoZVxuICogZ2l2ZW4gbG9jYXRpb24uXG4gKiBcbiAqIHBvaW50QWxvbmdDdXJ2ZUZyb20oY3VydmUsIGxvY2F0aW9uLCBkaXN0YW5jZSlcbiAqIFxuICogQ2FsY3VsYXRlcyB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIHBvaW50IG9uIHRoZSBnaXZlbiBjdXJ2ZSB0aGF0IGlzICdkaXN0YW5jZSdcbiAqIHVuaXRzIGZyb20gbG9jYXRpb24uICdkaXN0YW5jZScgc2hvdWxkIGJlIGluIHRoZSBzYW1lIGNvb3JkaW5hdGUgc3BhY2UgYXNcbiAqIHRoYXQgdXNlZCB0byBjb25zdHJ1Y3QgdGhlIEJlemllciBjdXJ2ZS4gRm9yIGFuIEhUTUwgQ2FudmFzIHVzYWdlLCBmb3JcbiAqIGV4YW1wbGUsIGRpc3RhbmNlIHdvdWxkIGJlIGEgbWVhc3VyZSBvZiBwaXhlbHMuXG4gKiBcbiAqIGxvY2F0aW9uQWxvbmdDdXJ2ZUZyb20oY3VydmUsIGxvY2F0aW9uLCBkaXN0YW5jZSlcbiAqIFxuICogQ2FsY3VsYXRlcyB0aGUgbG9jYXRpb24gb24gdGhlIGdpdmVuIGN1cnZlIHRoYXQgaXMgJ2Rpc3RhbmNlJyB1bml0cyBmcm9tXG4gKiBsb2NhdGlvbi4gJ2Rpc3RhbmNlJyBzaG91bGQgYmUgaW4gdGhlIHNhbWUgY29vcmRpbmF0ZSBzcGFjZSBhcyB0aGF0IHVzZWQgdG9cbiAqIGNvbnN0cnVjdCB0aGUgQmV6aWVyIGN1cnZlLiBGb3IgYW4gSFRNTCBDYW52YXMgdXNhZ2UsIGZvciBleGFtcGxlLCBkaXN0YW5jZVxuICogd291bGQgYmUgYSBtZWFzdXJlIG9mIHBpeGVscy5cbiAqIFxuICogcGVycGVuZGljdWxhclRvQ3VydmVBdChjdXJ2ZSwgbG9jYXRpb24sIGxlbmd0aCwgZGlzdGFuY2UpXG4gKiBcbiAqIENhbGN1bGF0ZXMgdGhlIHBlcnBlbmRpY3VsYXIgdG8gdGhlIGdpdmVuIGN1cnZlIGF0IHRoZSBnaXZlbiBsb2NhdGlvbi4gbGVuZ3RoXG4gKiBpcyB0aGUgbGVuZ3RoIG9mIHRoZSBsaW5lIHlvdSB3aXNoIGZvciAoaXQgd2lsbCBiZSBjZW50ZXJlZCBvbiB0aGUgcG9pbnQgYXRcbiAqICdsb2NhdGlvbicpLiBkaXN0YW5jZSBpcyBvcHRpb25hbCwgYW5kIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBhIHBvaW50IGFsb25nXG4gKiB0aGUgcGF0aCBmcm9tIHRoZSBnaXZlbiBsb2NhdGlvbiBhcyB0aGUgY2VudGVyIG9mIHRoZSBwZXJwZW5kaWN1bGFyIHJldHVybmVkLlxuICogVGhlIHJldHVybiB2YWx1ZSBvZiB0aGlzIGlzIGFuIGFycmF5IG9mIHR3byBwb2ludHM6IFsge3g6Li4uLHk6Li4ufSxcbiAqIHt4Oi4uLix5Oi4uLn0gXS5cbiAqIFxuICogXG4gKi9cblxuKGZ1bmN0aW9uKGxpYikge1xuXHQndXNlIHN0cmljdCc7XG5cdGZ1bmN0aW9uIHNnbih4KSB7XG5cdFx0cmV0dXJuIHggPT0gMCA/IDAgOiB4ID4gMCA/IDEgOiAtMTtcblx0fVxuXG5cdHZhciBWZWN0b3JzID0ge1xuXHRcdHN1YnRyYWN0IDogZnVuY3Rpb24odjEsIHYyKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR4IDogdjEueCAtIHYyLngsXG5cdFx0XHRcdHkgOiB2MS55IC0gdjIueVxuXHRcdFx0fTtcblx0XHR9LFxuXHRcdGRvdFByb2R1Y3QgOiBmdW5jdGlvbih2MSwgdjIpIHtcblx0XHRcdHJldHVybiAodjEueCAqIHYyLngpICsgKHYxLnkgKiB2Mi55KTtcblx0XHR9LFxuXHRcdHNxdWFyZSA6IGZ1bmN0aW9uKHYpIHtcblx0XHRcdHJldHVybiBNYXRoLnNxcnQoKHYueCAqIHYueCkgKyAodi55ICogdi55KSk7XG5cdFx0fSxcblx0XHRzY2FsZSA6IGZ1bmN0aW9uKHYsIHMpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHggOiB2LnggKiBzLFxuXHRcdFx0XHR5IDogdi55ICogc1xuXHRcdFx0fTtcblx0XHR9XG5cdH0sXG5cblx0bWF4UmVjdXJzaW9uID0gNjQsIGZsYXRuZXNzVG9sZXJhbmNlID0gTWF0aC5wb3coMi4wLCAtbWF4UmVjdXJzaW9uIC0gMSk7XG5cblx0LyoqXG5cdCAqIENhbGN1bGF0ZXMgdGhlIGRpc3RhbmNlIHRoYXQgdGhlIHBvaW50IGxpZXMgZnJvbSB0aGUgY3VydmUuXG5cdCAqIFxuXHQgKiBAcGFyYW0gcG9pbnRcblx0ICogICAgICAgICAgICBhIHBvaW50IGluIHRoZSBmb3JtIHt4OjU2NywgeTozMzQyfVxuXHQgKiBAcGFyYW0gY3VydmVcblx0ICogICAgICAgICAgICBhIEJlemllciBjdXJ2ZSBpbiB0aGUgZm9ybSBbe3g6Li4uLCB5Oi4uLn0sIHt4Oi4uLiwgeTouLi59LFxuXHQgKiAgICAgICAgICAgIHt4Oi4uLiwgeTouLi59LCB7eDouLi4sIHk6Li4ufV0uIG5vdGUgdGhhdCB0aGlzIGlzIGN1cnJlbnRseVxuXHQgKiAgICAgICAgICAgIGhhcmRjb2RlZCB0byBhc3N1bWUgY3ViaXogYmV6aWVycywgYnV0IHdvdWxkIGJlIGJldHRlciBvZmZcblx0ICogICAgICAgICAgICBzdXBwb3J0aW5nIGFueSBkZWdyZWUuXG5cdCAqIEByZXR1cm4gYSBKUyBvYmplY3QgbGl0ZXJhbCBjb250YWluaW5nIGxvY2F0aW9uIGFuZCBkaXN0YW5jZSwgZm9yXG5cdCAqICAgICAgICAgZXhhbXBsZToge2xvY2F0aW9uOjAuMzUsIGRpc3RhbmNlOjEwfS4gTG9jYXRpb24gaXMgYW5hbG9nb3VzIHRvXG5cdCAqICAgICAgICAgdGhlIGxvY2F0aW9uIGFyZ3VtZW50IHlvdSBwYXNzIHRvIHRoZSBwb2ludE9uUGF0aCBmdW5jdGlvbjogaXQgaXNcblx0ICogICAgICAgICBhIHJhdGlvIG9mIGRpc3RhbmNlIHRyYXZlbGxlZCBhbG9uZyB0aGUgY3VydmUuIERpc3RhbmNlIGlzIHRoZVxuXHQgKiAgICAgICAgIGRpc3RhbmNlIGluIHBpeGVscyBmcm9tIHRoZSBwb2ludCB0byB0aGUgY3VydmUuXG5cdCAqL1xuXHR2YXIgX2Rpc3RhbmNlRnJvbUN1cnZlID0gZnVuY3Rpb24ocG9pbnQsIGN1cnZlKSB7XG5cdFx0dmFyIGNhbmRpZGF0ZXMgPSBbXSwgdyA9IF9jb252ZXJ0VG9CZXppZXIocG9pbnQsIGN1cnZlKSwgZGVncmVlID0gY3VydmUubGVuZ3RoIC0gMSwgaGlnaGVyRGVncmVlID0gKDIgKiBkZWdyZWUpIC0gMSwgbnVtU29sdXRpb25zID0gX2ZpbmRSb290cyh3LCBoaWdoZXJEZWdyZWUsIGNhbmRpZGF0ZXMsIDApLCB2ID0gVmVjdG9ycy5zdWJ0cmFjdChwb2ludCwgY3VydmVbMF0pLCBkaXN0ID0gVmVjdG9ycy5zcXVhcmUodiksIHQgPSAwLjA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBudW1Tb2x1dGlvbnM7IGkrKykge1xuXHRcdFx0diA9IFZlY3RvcnMuc3VidHJhY3QocG9pbnQsIF9iZXppZXIoY3VydmUsIGRlZ3JlZSwgY2FuZGlkYXRlc1tpXSwgbnVsbCwgbnVsbCkpO1xuXHRcdFx0dmFyIG5ld0Rpc3QgPSBWZWN0b3JzLnNxdWFyZSh2KTtcblx0XHRcdGlmIChuZXdEaXN0IDwgZGlzdCkge1xuXHRcdFx0XHRkaXN0ID0gbmV3RGlzdDtcblx0XHRcdFx0dCA9IGNhbmRpZGF0ZXNbaV07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHYgPSBWZWN0b3JzLnN1YnRyYWN0KHBvaW50LCBjdXJ2ZVtkZWdyZWVdKTtcblx0XHRuZXdEaXN0ID0gVmVjdG9ycy5zcXVhcmUodik7XG5cdFx0aWYgKG5ld0Rpc3QgPCBkaXN0KSB7XG5cdFx0XHRkaXN0ID0gbmV3RGlzdDtcblx0XHRcdHQgPSAxLjA7XG5cdFx0fVxuXHRcdHJldHVybiB7XG5cdFx0XHRsb2NhdGlvbiA6IHQsXG5cdFx0XHRkaXN0YW5jZSA6IGRpc3Rcblx0XHR9O1xuXHR9O1xuXHQvKipcblx0ICogZmluZHMgdGhlIG5lYXJlc3QgcG9pbnQgb24gdGhlIGN1cnZlIHRvIHRoZSBnaXZlbiBwb2ludC5cblx0ICovXG5cdHZhciBfbmVhcmVzdFBvaW50T25DdXJ2ZSA9IGZ1bmN0aW9uKHBvaW50LCBjdXJ2ZSkge1xuXHRcdHZhciB0ZCA9IF9kaXN0YW5jZUZyb21DdXJ2ZShwb2ludCwgY3VydmUpO1xuXHRcdHJldHVybiB7XG5cdFx0XHRwb2ludCA6IF9iZXppZXIoY3VydmUsIGN1cnZlLmxlbmd0aCAtIDEsIHRkLmxvY2F0aW9uLCBudWxsLCBudWxsKSxcblx0XHRcdGxvY2F0aW9uIDogdGQubG9jYXRpb25cblx0XHR9O1xuXHR9O1xuXHR2YXIgX2NvbnZlcnRUb0JlemllciA9IGZ1bmN0aW9uKHBvaW50LCBjdXJ2ZSkge1xuXHRcdHZhciBkZWdyZWUgPSBjdXJ2ZS5sZW5ndGggLSAxLCBoaWdoZXJEZWdyZWUgPSAoMiAqIGRlZ3JlZSkgLSAxLCBjID0gW10sIGQgPSBbXSwgY2RUYWJsZSA9IFtdLCB3ID0gW10sIHogPSBbIFsgMS4wLCAwLjYsIDAuMywgMC4xIF0sIFsgMC40LCAwLjYsIDAuNiwgMC40IF0sIFsgMC4xLCAwLjMsIDAuNiwgMS4wIF0gXTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8PSBkZWdyZWU7IGkrKylcblx0XHRcdGNbaV0gPSBWZWN0b3JzLnN1YnRyYWN0KGN1cnZlW2ldLCBwb2ludCk7XG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDw9IGRlZ3JlZSAtIDE7IGkrKykge1xuXHRcdFx0ZFtpXSA9IFZlY3RvcnMuc3VidHJhY3QoY3VydmVbaSArIDFdLCBjdXJ2ZVtpXSk7XG5cdFx0XHRkW2ldID0gVmVjdG9ycy5zY2FsZShkW2ldLCAzLjApO1xuXHRcdH1cblx0XHRmb3IgKCB2YXIgcm93ID0gMDsgcm93IDw9IGRlZ3JlZSAtIDE7IHJvdysrKSB7XG5cdFx0XHRmb3IgKCB2YXIgY29sdW1uID0gMDsgY29sdW1uIDw9IGRlZ3JlZTsgY29sdW1uKyspIHtcblx0XHRcdFx0aWYgKCFjZFRhYmxlW3Jvd10pXG5cdFx0XHRcdFx0Y2RUYWJsZVtyb3ddID0gW107XG5cdFx0XHRcdGNkVGFibGVbcm93XVtjb2x1bW5dID0gVmVjdG9ycy5kb3RQcm9kdWN0KGRbcm93XSwgY1tjb2x1bW5dKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Zm9yIChpID0gMDsgaSA8PSBoaWdoZXJEZWdyZWU7IGkrKykge1xuXHRcdFx0aWYgKCF3W2ldKVxuXHRcdFx0XHR3W2ldID0gW107XG5cdFx0XHR3W2ldLnkgPSAwLjA7XG5cdFx0XHR3W2ldLnggPSBwYXJzZUZsb2F0KGkpIC8gaGlnaGVyRGVncmVlO1xuXHRcdH1cblx0XHR2YXIgbiA9IGRlZ3JlZSwgbSA9IGRlZ3JlZSAtIDE7XG5cdFx0Zm9yICggdmFyIGsgPSAwOyBrIDw9IG4gKyBtOyBrKyspIHtcblx0XHRcdHZhciBsYiA9IE1hdGgubWF4KDAsIGsgLSBtKSwgdWIgPSBNYXRoLm1pbihrLCBuKTtcblx0XHRcdGZvciAoaSA9IGxiOyBpIDw9IHViOyBpKyspIHtcblx0XHRcdFx0dmFyIGogPSBrIC0gaTtcblx0XHRcdFx0d1tpICsgal0ueSArPSBjZFRhYmxlW2pdW2ldICogeltqXVtpXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHc7XG5cdH07XG5cdC8qKlxuXHQgKiBjb3VudHMgaG93IG1hbnkgcm9vdHMgdGhlcmUgYXJlLlxuXHQgKi9cblx0dmFyIF9maW5kUm9vdHMgPSBmdW5jdGlvbih3LCBkZWdyZWUsIHQsIGRlcHRoKSB7XG5cdFx0dmFyIGxlZnQgPSBbXSwgcmlnaHQgPSBbXSwgbGVmdF9jb3VudCwgcmlnaHRfY291bnQsIGxlZnRfdCA9IFtdLCByaWdodF90ID0gW107XG5cblx0XHRzd2l0Y2ggKF9nZXRDcm9zc2luZ0NvdW50KHcsIGRlZ3JlZSkpIHtcblx0XHRjYXNlIDA6IHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0XHRjYXNlIDE6IHtcblx0XHRcdGlmIChkZXB0aCA+PSBtYXhSZWN1cnNpb24pIHtcblx0XHRcdFx0dFswXSA9ICh3WzBdLnggKyB3W2RlZ3JlZV0ueCkgLyAyLjA7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXHRcdFx0aWYgKF9pc0ZsYXRFbm91Z2godywgZGVncmVlKSkge1xuXHRcdFx0XHR0WzBdID0gX2NvbXB1dGVYSW50ZXJjZXB0KHcsIGRlZ3JlZSk7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdH1cblx0XHRfYmV6aWVyKHcsIGRlZ3JlZSwgMC41LCBsZWZ0LCByaWdodCk7XG5cdFx0bGVmdF9jb3VudCA9IF9maW5kUm9vdHMobGVmdCwgZGVncmVlLCBsZWZ0X3QsIGRlcHRoICsgMSk7XG5cdFx0cmlnaHRfY291bnQgPSBfZmluZFJvb3RzKHJpZ2h0LCBkZWdyZWUsIHJpZ2h0X3QsIGRlcHRoICsgMSk7XG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbGVmdF9jb3VudDsgaSsrKVxuXHRcdFx0dFtpXSA9IGxlZnRfdFtpXTtcblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCByaWdodF9jb3VudDsgaSsrKVxuXHRcdFx0dFtpICsgbGVmdF9jb3VudF0gPSByaWdodF90W2ldO1xuXHRcdHJldHVybiAobGVmdF9jb3VudCArIHJpZ2h0X2NvdW50KTtcblx0fTtcblx0dmFyIF9nZXRDcm9zc2luZ0NvdW50ID0gZnVuY3Rpb24oY3VydmUsIGRlZ3JlZSkge1xuXHRcdHZhciBuX2Nyb3NzaW5ncyA9IDAsIHNpZ24sIG9sZF9zaWduO1xuXHRcdHNpZ24gPSBvbGRfc2lnbiA9IHNnbihjdXJ2ZVswXS55KTtcblx0XHRmb3IgKCB2YXIgaSA9IDE7IGkgPD0gZGVncmVlOyBpKyspIHtcblx0XHRcdHNpZ24gPSBzZ24oY3VydmVbaV0ueSk7XG5cdFx0XHRpZiAoc2lnbiAhPSBvbGRfc2lnbilcblx0XHRcdFx0bl9jcm9zc2luZ3MrKztcblx0XHRcdG9sZF9zaWduID0gc2lnbjtcblx0XHR9XG5cdFx0cmV0dXJuIG5fY3Jvc3NpbmdzO1xuXHR9O1xuXHR2YXIgX2lzRmxhdEVub3VnaCA9IGZ1bmN0aW9uKGN1cnZlLCBkZWdyZWUpIHtcblx0XHR2YXIgZXJyb3IsIGludGVyY2VwdF8xLCBpbnRlcmNlcHRfMiwgbGVmdF9pbnRlcmNlcHQsIHJpZ2h0X2ludGVyY2VwdCwgYSwgYiwgYywgZGV0LCBkSW52LCBhMSwgYjEsIGMxLCBhMiwgYjIsIGMyO1xuXHRcdGEgPSBjdXJ2ZVswXS55IC0gY3VydmVbZGVncmVlXS55O1xuXHRcdGIgPSBjdXJ2ZVtkZWdyZWVdLnggLSBjdXJ2ZVswXS54O1xuXHRcdGMgPSBjdXJ2ZVswXS54ICogY3VydmVbZGVncmVlXS55IC0gY3VydmVbZGVncmVlXS54ICogY3VydmVbMF0ueTtcblxuXHRcdHZhciBtYXhfZGlzdGFuY2VfYWJvdmUgPSAwLjAsIG1heF9kaXN0YW5jZV9iZWxvdyA9IDAuMDtcblxuXHRcdGZvciAoIHZhciBpID0gMTsgaSA8IGRlZ3JlZTsgaSsrKSB7XG5cdFx0XHR2YXIgdmFsdWUgPSBhICogY3VydmVbaV0ueCArIGIgKiBjdXJ2ZVtpXS55ICsgYztcblx0XHRcdGlmICh2YWx1ZSA+IG1heF9kaXN0YW5jZV9hYm92ZSlcblx0XHRcdFx0bWF4X2Rpc3RhbmNlX2Fib3ZlID0gdmFsdWU7XG5cdFx0XHRlbHNlIGlmICh2YWx1ZSA8IG1heF9kaXN0YW5jZV9iZWxvdylcblx0XHRcdFx0bWF4X2Rpc3RhbmNlX2JlbG93ID0gdmFsdWU7XG5cdFx0fVxuXG5cdFx0YTEgPSAwLjA7XG5cdFx0YjEgPSAxLjA7XG5cdFx0YzEgPSAwLjA7XG5cdFx0YTIgPSBhO1xuXHRcdGIyID0gYjtcblx0XHRjMiA9IGMgLSBtYXhfZGlzdGFuY2VfYWJvdmU7XG5cdFx0ZGV0ID0gYTEgKiBiMiAtIGEyICogYjE7XG5cdFx0ZEludiA9IDEuMCAvIGRldDtcblx0XHRpbnRlcmNlcHRfMSA9IChiMSAqIGMyIC0gYjIgKiBjMSkgKiBkSW52O1xuXHRcdGEyID0gYTtcblx0XHRiMiA9IGI7XG5cdFx0YzIgPSBjIC0gbWF4X2Rpc3RhbmNlX2JlbG93O1xuXHRcdGRldCA9IGExICogYjIgLSBhMiAqIGIxO1xuXHRcdGRJbnYgPSAxLjAgLyBkZXQ7XG5cdFx0aW50ZXJjZXB0XzIgPSAoYjEgKiBjMiAtIGIyICogYzEpICogZEludjtcblx0XHRsZWZ0X2ludGVyY2VwdCA9IE1hdGgubWluKGludGVyY2VwdF8xLCBpbnRlcmNlcHRfMik7XG5cdFx0cmlnaHRfaW50ZXJjZXB0ID0gTWF0aC5tYXgoaW50ZXJjZXB0XzEsIGludGVyY2VwdF8yKTtcblx0XHRlcnJvciA9IHJpZ2h0X2ludGVyY2VwdCAtIGxlZnRfaW50ZXJjZXB0O1xuXHRcdHJldHVybiAoZXJyb3IgPCBmbGF0bmVzc1RvbGVyYW5jZSkgPyAxIDogMDtcblx0fTtcblx0dmFyIF9jb21wdXRlWEludGVyY2VwdCA9IGZ1bmN0aW9uKGN1cnZlLCBkZWdyZWUpIHtcblx0XHR2YXIgWExLID0gMS4wLCBZTEsgPSAwLjAsIFhOTSA9IGN1cnZlW2RlZ3JlZV0ueCAtIGN1cnZlWzBdLngsIFlOTSA9IGN1cnZlW2RlZ3JlZV0ueSAtIGN1cnZlWzBdLnksIFhNSyA9IGN1cnZlWzBdLnggLSAwLjAsIFlNSyA9IGN1cnZlWzBdLnkgLSAwLjAsIGRldCA9IFhOTSAqIFlMSyAtIFlOTSAqIFhMSywgZGV0SW52ID0gMS4wIC8gZGV0LCBTID0gKFhOTSAqIFlNSyAtIFlOTSAqIFhNSykgKiBkZXRJbnY7XG5cdFx0cmV0dXJuIDAuMCArIFhMSyAqIFM7XG5cdH07XG5cdHZhciBfYmV6aWVyID0gZnVuY3Rpb24oY3VydmUsIGRlZ3JlZSwgdCwgbGVmdCwgcmlnaHQpIHtcblx0XHR2YXIgdGVtcCA9IFsgW10gXTtcblx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPD0gZGVncmVlOyBqKyspXG5cdFx0XHR0ZW1wWzBdW2pdID0gY3VydmVbal07XG5cdFx0Zm9yICggdmFyIGkgPSAxOyBpIDw9IGRlZ3JlZTsgaSsrKSB7XG5cdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPD0gZGVncmVlIC0gaTsgaisrKSB7XG5cdFx0XHRcdGlmICghdGVtcFtpXSlcblx0XHRcdFx0XHR0ZW1wW2ldID0gW107XG5cdFx0XHRcdGlmICghdGVtcFtpXVtqXSlcblx0XHRcdFx0XHR0ZW1wW2ldW2pdID0ge307XG5cdFx0XHRcdHRlbXBbaV1bal0ueCA9ICgxLjAgLSB0KSAqIHRlbXBbaSAtIDFdW2pdLnggKyB0ICogdGVtcFtpIC0gMV1baiArIDFdLng7XG5cdFx0XHRcdHRlbXBbaV1bal0ueSA9ICgxLjAgLSB0KSAqIHRlbXBbaSAtIDFdW2pdLnkgKyB0ICogdGVtcFtpIC0gMV1baiArIDFdLnk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChsZWZ0ICE9IG51bGwpXG5cdFx0XHRmb3IgKGogPSAwOyBqIDw9IGRlZ3JlZTsgaisrKVxuXHRcdFx0XHRsZWZ0W2pdID0gdGVtcFtqXVswXTtcblx0XHRpZiAocmlnaHQgIT0gbnVsbClcblx0XHRcdGZvciAoaiA9IDA7IGogPD0gZGVncmVlOyBqKyspXG5cdFx0XHRcdHJpZ2h0W2pdID0gdGVtcFtkZWdyZWUgLSBqXVtqXTtcblxuXHRcdHJldHVybiAodGVtcFtkZWdyZWVdWzBdKTtcblx0fTtcblxuXHR2YXIgX2N1cnZlRnVuY3Rpb25DYWNoZSA9IHt9O1xuXHR2YXIgX2dldEN1cnZlRnVuY3Rpb25zID0gZnVuY3Rpb24ob3JkZXIpIHtcblx0XHR2YXIgZm5zID0gX2N1cnZlRnVuY3Rpb25DYWNoZVtvcmRlcl07XG5cdFx0aWYgKCFmbnMpIHtcblx0XHRcdGZucyA9IFtdO1xuXHRcdFx0dmFyIGZfdGVybSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24odCkge1xuXHRcdFx0XHRcdHJldHVybiBNYXRoLnBvdyh0LCBvcmRlcik7XG5cdFx0XHRcdH07XG5cdFx0XHR9LCBsX3Rlcm0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5wb3coKDEgLSB0KSwgb3JkZXIpO1xuXHRcdFx0XHR9O1xuXHRcdFx0fSwgY190ZXJtID0gZnVuY3Rpb24oYykge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24odCkge1xuXHRcdFx0XHRcdHJldHVybiBjO1xuXHRcdFx0XHR9O1xuXHRcdFx0fSwgdF90ZXJtID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbih0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHQ7XG5cdFx0XHRcdH07XG5cdFx0XHR9LCBvbmVfbWludXNfdF90ZXJtID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbih0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDEgLSB0O1xuXHRcdFx0XHR9O1xuXHRcdFx0fSwgX3Rlcm1GdW5jID0gZnVuY3Rpb24odGVybXMpIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKHQpIHtcblx0XHRcdFx0XHR2YXIgcCA9IDE7XG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGVybXMubGVuZ3RoOyBpKyspXG5cdFx0XHRcdFx0XHRwID0gcCAqIHRlcm1zW2ldKHQpO1xuXHRcdFx0XHRcdHJldHVybiBwO1xuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdFx0Zm5zLnB1c2gobmV3IGZfdGVybSgpKTsgLy8gZmlyc3QgaXMgdCB0byB0aGUgcG93ZXIgb2YgdGhlIGN1cnZlXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBvcmRlclxuXHRcdFx0Zm9yICggdmFyIGkgPSAxOyBpIDwgb3JkZXI7IGkrKykge1xuXHRcdFx0XHR2YXIgdGVybXMgPSBbIG5ldyBjX3Rlcm0ob3JkZXIpIF07XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMDsgaiA8IChvcmRlciAtIGkpOyBqKyspXG5cdFx0XHRcdFx0dGVybXMucHVzaChuZXcgdF90ZXJtKCkpO1xuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCBpOyBqKyspXG5cdFx0XHRcdFx0dGVybXMucHVzaChuZXcgb25lX21pbnVzX3RfdGVybSgpKTtcblx0XHRcdFx0Zm5zLnB1c2gobmV3IF90ZXJtRnVuYyh0ZXJtcykpO1xuXHRcdFx0fVxuXHRcdFx0Zm5zLnB1c2gobmV3IGxfdGVybSgpKTsgLy8gbGFzdCBpcyAoMS10KSB0byB0aGUgcG93ZXIgb2YgdGhlIGN1cnZlXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBvcmRlclxuXG5cdFx0XHRfY3VydmVGdW5jdGlvbkNhY2hlW29yZGVyXSA9IGZucztcblx0XHR9XG5cblx0XHRyZXR1cm4gZm5zO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBjYWxjdWxhdGVzIGEgcG9pbnQgb24gdGhlIGN1cnZlLCBmb3IgYSBCZXppZXIgb2YgYXJiaXRyYXJ5IG9yZGVyLlxuXHQgKiBcblx0ICogQHBhcmFtIGN1cnZlXG5cdCAqICAgICAgICAgICAgYW4gYXJyYXkgb2YgY29udHJvbCBwb2ludHMsIGVnIFt7eDoxMCx5OjIwfSwge3g6NTAseTo1MH0sXG5cdCAqICAgICAgICAgICAge3g6MTAwLHk6MTAwfSwge3g6MTIwLHk6MTAwfV0uIEZvciBhIGN1YmljIGJlemllciB0aGlzIHNob3VsZFxuXHQgKiAgICAgICAgICAgIGhhdmUgZm91ciBwb2ludHMuXG5cdCAqIEBwYXJhbSBsb2NhdGlvblxuXHQgKiAgICAgICAgICAgIGEgZGVjaW1hbCBpbmRpY2F0aW5nIHRoZSBkaXN0YW5jZSBhbG9uZyB0aGUgY3VydmUgdGhlIHBvaW50XG5cdCAqICAgICAgICAgICAgc2hvdWxkIGJlIGxvY2F0ZWQgYXQuIHRoaXMgaXMgdGhlIGRpc3RhbmNlIGFsb25nIHRoZSBjdXJ2ZSBhc1xuXHQgKiAgICAgICAgICAgIGl0IHRyYXZlbHMsIHRha2luZyB0aGUgd2F5IGl0IGJlbmRzIGludG8gYWNjb3VudC4gc2hvdWxkIGJlIGFcblx0ICogICAgICAgICAgICBudW1iZXIgZnJvbSAwIHRvIDEsIGluY2x1c2l2ZS5cblx0ICovXG5cdHZhciBfcG9pbnRPblBhdGggPSBmdW5jdGlvbihjdXJ2ZSwgbG9jYXRpb24pIHtcblx0XHR2YXIgY2MgPSBfZ2V0Q3VydmVGdW5jdGlvbnMoY3VydmUubGVuZ3RoIC0gMSksIF94ID0gMCwgX3kgPSAwO1xuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGN1cnZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRfeCA9IF94ICsgKGN1cnZlW2ldLnggKiBjY1tpXShsb2NhdGlvbikpO1xuXHRcdFx0X3kgPSBfeSArIChjdXJ2ZVtpXS55ICogY2NbaV0obG9jYXRpb24pKTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0eCA6IF94LFxuXHRcdFx0eSA6IF95XG5cdFx0fTtcblx0fTtcblxuXHR2YXIgX2Rpc3QgPSBmdW5jdGlvbihwMSwgcDIpIHtcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHAxLnggLSBwMi54LCAyKSArIE1hdGgucG93KHAxLnkgLSBwMi55LCAyKSk7XG5cdH07XG5cblx0LyoqXG5cdCAqIGZpbmRzIHRoZSBwb2ludCB0aGF0IGlzICdkaXN0YW5jZScgYWxvbmcgdGhlIHBhdGggZnJvbSAnbG9jYXRpb24nLiB0aGlzXG5cdCAqIG1ldGhvZCByZXR1cm5zIGJvdGggdGhlIHgseSBsb2NhdGlvbiBvZiB0aGUgcG9pbnQgYW5kIGFsc28gaXRzICdsb2NhdGlvbidcblx0ICogKHByb3BvcnRpb24gb2YgdHJhdmVsIGFsb25nIHRoZSBwYXRoKTsgdGhlIG1ldGhvZCBiZWxvdyAtXG5cdCAqIF9wb2ludEFsb25nUGF0aEZyb20gLSBjYWxscyB0aGlzIG1ldGhvZCBhbmQganVzdCByZXR1cm5zIHRoZSBwb2ludC5cblx0ICovXG5cdHZhciBfcG9pbnRBbG9uZ1BhdGggPSBmdW5jdGlvbihjdXJ2ZSwgbG9jYXRpb24sIGRpc3RhbmNlKSB7XG5cdFx0dmFyIHByZXYgPSBfcG9pbnRPblBhdGgoY3VydmUsIGxvY2F0aW9uKSwgdGFsbHkgPSAwLCBjdXJMb2MgPSBsb2NhdGlvbiwgZGlyZWN0aW9uID0gZGlzdGFuY2UgPiAwID8gMSA6IC0xLCBjdXIgPSBudWxsO1xuXG5cdFx0d2hpbGUgKHRhbGx5IDwgTWF0aC5hYnMoZGlzdGFuY2UpKSB7XG5cdFx0XHRjdXJMb2MgKz0gKDAuMDA1ICogZGlyZWN0aW9uKTtcblx0XHRcdGN1ciA9IF9wb2ludE9uUGF0aChjdXJ2ZSwgY3VyTG9jKTtcblx0XHRcdHRhbGx5ICs9IF9kaXN0KGN1ciwgcHJldik7XG5cdFx0XHRwcmV2ID0gY3VyO1xuXHRcdH1cblx0XHRyZXR1cm4ge1xuXHRcdFx0cG9pbnQgOiBjdXIsXG5cdFx0XHRsb2NhdGlvbiA6IGN1ckxvY1xuXHRcdH07XG5cdH07XG5cblx0dmFyIF9sZW5ndGggPSBmdW5jdGlvbihjdXJ2ZSkge1xuXHRcdHZhciBwcmV2ID0gX3BvaW50T25QYXRoKGN1cnZlLCAwKSwgdGFsbHkgPSAwLCBjdXJMb2MgPSAwLCBkaXJlY3Rpb24gPSAxLCBjdXIgPSBudWxsO1xuXG5cdFx0d2hpbGUgKGN1ckxvYyA8IDEpIHtcblx0XHRcdGN1ckxvYyArPSAoMC4wMDUgKiBkaXJlY3Rpb24pO1xuXHRcdFx0Y3VyID0gX3BvaW50T25QYXRoKGN1cnZlLCBjdXJMb2MpO1xuXHRcdFx0dGFsbHkgKz0gX2Rpc3QoY3VyLCBwcmV2KTtcblx0XHRcdHByZXYgPSBjdXI7XG5cdFx0fVxuXHRcdHJldHVybiB0YWxseTtcblx0fTtcblxuXHQvKipcblx0ICogZmluZHMgdGhlIHBvaW50IHRoYXQgaXMgJ2Rpc3RhbmNlJyBhbG9uZyB0aGUgcGF0aCBmcm9tICdsb2NhdGlvbicuXG5cdCAqL1xuXHR2YXIgX3BvaW50QWxvbmdQYXRoRnJvbSA9IGZ1bmN0aW9uKGN1cnZlLCBsb2NhdGlvbiwgZGlzdGFuY2UpIHtcblx0XHRyZXR1cm4gX3BvaW50QWxvbmdQYXRoKGN1cnZlLCBsb2NhdGlvbiwgZGlzdGFuY2UpLnBvaW50O1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBmaW5kcyB0aGUgbG9jYXRpb24gdGhhdCBpcyAnZGlzdGFuY2UnIGFsb25nIHRoZSBwYXRoIGZyb20gJ2xvY2F0aW9uJy5cblx0ICovXG5cdHZhciBfbG9jYXRpb25BbG9uZ1BhdGhGcm9tID0gZnVuY3Rpb24oY3VydmUsIGxvY2F0aW9uLCBkaXN0YW5jZSkge1xuXHRcdHJldHVybiBfcG9pbnRBbG9uZ1BhdGgoY3VydmUsIGxvY2F0aW9uLCBkaXN0YW5jZSkubG9jYXRpb247XG5cdH07XG5cblx0LyoqXG5cdCAqIHJldHVybnMgdGhlIGdyYWRpZW50IG9mIHRoZSBjdXJ2ZSBhdCB0aGUgZ2l2ZW4gbG9jYXRpb24sIHdoaWNoIGlzIGFcblx0ICogZGVjaW1hbCBiZXR3ZWVuIDAgYW5kIDEgaW5jbHVzaXZlLlxuXHQgKiBcblx0ICogdGhhbmtzIC8vIGh0dHA6Ly9iaW1peHVhbC5vcmcvQW5pbWF0aW9uTGlicmFyeS9iZXppZXJ0YW5nZW50cy5odG1sXG5cdCAqL1xuXHR2YXIgX2dyYWRpZW50QXRQb2ludCA9IGZ1bmN0aW9uKGN1cnZlLCBsb2NhdGlvbikge1xuXHRcdHZhciBwMSA9IF9wb2ludE9uUGF0aChjdXJ2ZSwgbG9jYXRpb24pLCBwMiA9IF9wb2ludE9uUGF0aChjdXJ2ZS5zbGljZSgwLCBjdXJ2ZS5sZW5ndGggLSAxKSwgbG9jYXRpb24pLCBkeSA9IHAyLnkgLSBwMS55LCBkeCA9IHAyLnggLSBwMS54O1xuXHRcdHJldHVybiBkeSA9PSAwID8gSW5maW5pdHkgOiBNYXRoLmF0YW4oZHkgLyBkeCk7XG5cdH07XG5cblx0LyoqXG5cdCAqIHJldHVybnMgdGhlIGdyYWRpZW50IG9mIHRoZSBjdXJ2ZSBhdCB0aGUgcG9pbnQgd2hpY2ggaXMgJ2Rpc3RhbmNlJyBmcm9tXG5cdCAqIHRoZSBnaXZlbiBsb2NhdGlvbi4gaWYgdGhpcyBwb2ludCBpcyBncmVhdGVyIHRoYW4gbG9jYXRpb24gMSwgdGhlXG5cdCAqIGdyYWRpZW50IGF0IGxvY2F0aW9uIDEgaXMgcmV0dXJuZWQuIGlmIHRoaXMgcG9pbnQgaXMgbGVzcyB0aGFuIGxvY2F0aW9uXG5cdCAqIDAsIHRoZSBncmFkaWVudCBhdCBsb2NhdGlvbiAwIGlzIHJldHVybmVkLlxuXHQgKi9cblx0dmFyIF9ncmFkaWVudEF0UG9pbnRBbG9uZ1BhdGhGcm9tID0gZnVuY3Rpb24oY3VydmUsIGxvY2F0aW9uLCBkaXN0YW5jZSkge1xuXHRcdHZhciBwID0gX3BvaW50QWxvbmdQYXRoKGN1cnZlLCBsb2NhdGlvbiwgZGlzdGFuY2UpO1xuXHRcdGlmIChwLmxvY2F0aW9uID4gMSlcblx0XHRcdHAubG9jYXRpb24gPSAxO1xuXHRcdGlmIChwLmxvY2F0aW9uIDwgMClcblx0XHRcdHAubG9jYXRpb24gPSAwO1xuXHRcdHJldHVybiBfZ3JhZGllbnRBdFBvaW50KGN1cnZlLCBwLmxvY2F0aW9uKTtcblx0fTtcblxuXHQvKipcblx0ICogY2FsY3VsYXRlcyBhIGxpbmUgdGhhdCBpcyAnbGVuZ3RoJyBwaXhlbHMgbG9uZywgcGVycGVuZGljdWxhciB0bywgYW5kXG5cdCAqIGNlbnRlcmVkIG9uLCB0aGUgcGF0aCBhdCAnZGlzdGFuY2UnIHBpeGVscyBmcm9tIHRoZSBnaXZlbiBsb2NhdGlvbi4gaWZcblx0ICogZGlzdGFuY2UgaXMgbm90IHN1cHBsaWVkLCB0aGUgcGVycGVuZGljdWxhciBmb3IgdGhlIGdpdmVuIGxvY2F0aW9uIGlzXG5cdCAqIGNvbXB1dGVkIChpZS4gd2Ugc2V0IGRpc3RhbmNlIHRvIHplcm8pLlxuXHQgKi9cblx0dmFyIF9wZXJwZW5kaWN1bGFyVG9QYXRoQXQgPSBmdW5jdGlvbihjdXJ2ZSwgbG9jYXRpb24sIGxlbmd0aCwgZGlzdGFuY2UpIHtcblx0XHRkaXN0YW5jZSA9IGRpc3RhbmNlID09IG51bGwgPyAwIDogZGlzdGFuY2U7XG5cdFx0dmFyIHAgPSBfcG9pbnRBbG9uZ1BhdGgoY3VydmUsIGxvY2F0aW9uLCBkaXN0YW5jZSksIG0gPSBfZ3JhZGllbnRBdFBvaW50KGN1cnZlLCBwLmxvY2F0aW9uKSwgX3RoZXRhMiA9IE1hdGguYXRhbigtMSAvIG0pLCB5ID0gbGVuZ3RoIC8gMiAqIE1hdGguc2luKF90aGV0YTIpLCB4ID0gbGVuZ3RoIC8gMiAqIE1hdGguY29zKF90aGV0YTIpO1xuXHRcdHJldHVybiBbIHtcblx0XHRcdHggOiBwLnBvaW50LnggKyB4LFxuXHRcdFx0eSA6IHAucG9pbnQueSArIHlcblx0XHR9LCB7XG5cdFx0XHR4IDogcC5wb2ludC54IC0geCxcblx0XHRcdHkgOiBwLnBvaW50LnkgLSB5XG5cdFx0fSBdO1xuXHR9O1xuXG5cdENoZW1Eb29kbGUubGliLmpzQmV6aWVyID0ge1xuXHRcdGRpc3RhbmNlRnJvbUN1cnZlIDogX2Rpc3RhbmNlRnJvbUN1cnZlLFxuXHRcdGdyYWRpZW50QXRQb2ludCA6IF9ncmFkaWVudEF0UG9pbnQsXG5cdFx0Z3JhZGllbnRBdFBvaW50QWxvbmdDdXJ2ZUZyb20gOiBfZ3JhZGllbnRBdFBvaW50QWxvbmdQYXRoRnJvbSxcblx0XHRuZWFyZXN0UG9pbnRPbkN1cnZlIDogX25lYXJlc3RQb2ludE9uQ3VydmUsXG5cdFx0cG9pbnRPbkN1cnZlIDogX3BvaW50T25QYXRoLFxuXHRcdHBvaW50QWxvbmdDdXJ2ZUZyb20gOiBfcG9pbnRBbG9uZ1BhdGhGcm9tLFxuXHRcdHBlcnBlbmRpY3VsYXJUb0N1cnZlQXQgOiBfcGVycGVuZGljdWxhclRvUGF0aEF0LFxuXHRcdGxvY2F0aW9uQWxvbmdDdXJ2ZUZyb20gOiBfbG9jYXRpb25BbG9uZ1BhdGhGcm9tLFxuXHRcdGdldExlbmd0aCA6IF9sZW5ndGhcblx0fTtcbn0pKENoZW1Eb29kbGUubGliKTtcbi8vIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuLy8gQ29weXJpZ2h0IChjKSAyMDEyLTIwMTMgTWlrb2xhIEx5c2Vua29cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG4vKipcbiAqIEphdmFzY3JpcHQgTWFyY2hpbmcgQ3ViZXNcbiAqXG4gKiBCYXNlZCBvbiBQYXVsIEJvdXJrZSdzIGNsYXNzaWMgaW1wbGVtZW50YXRpb246XG4gKiAgICBodHRwOi8vbG9jYWwud2FzcC51d2EuZWR1LmF1L35wYm91cmtlL2dlb21ldHJ5L3BvbHlnb25pc2UvXG4gKlxuICogSlMgcG9ydCBieSBNaWtvbGEgTHlzZW5rb1xuICovXG5cbkNoZW1Eb29kbGUubGliLk1hcmNoaW5nQ3ViZXMgPSAoZnVuY3Rpb24oKSB7XG52YXIgZWRnZVRhYmxlPSBuZXcgVWludDMyQXJyYXkoW1xuICAgICAgMHgwICAsIDB4MTA5LCAweDIwMywgMHgzMGEsIDB4NDA2LCAweDUwZiwgMHg2MDUsIDB4NzBjLFxuICAgICAgMHg4MGMsIDB4OTA1LCAweGEwZiwgMHhiMDYsIDB4YzBhLCAweGQwMywgMHhlMDksIDB4ZjAwLFxuICAgICAgMHgxOTAsIDB4OTkgLCAweDM5MywgMHgyOWEsIDB4NTk2LCAweDQ5ZiwgMHg3OTUsIDB4NjljLFxuICAgICAgMHg5OWMsIDB4ODk1LCAweGI5ZiwgMHhhOTYsIDB4ZDlhLCAweGM5MywgMHhmOTksIDB4ZTkwLFxuICAgICAgMHgyMzAsIDB4MzM5LCAweDMzICwgMHgxM2EsIDB4NjM2LCAweDczZiwgMHg0MzUsIDB4NTNjLFxuICAgICAgMHhhM2MsIDB4YjM1LCAweDgzZiwgMHg5MzYsIDB4ZTNhLCAweGYzMywgMHhjMzksIDB4ZDMwLFxuICAgICAgMHgzYTAsIDB4MmE5LCAweDFhMywgMHhhYSAsIDB4N2E2LCAweDZhZiwgMHg1YTUsIDB4NGFjLFxuICAgICAgMHhiYWMsIDB4YWE1LCAweDlhZiwgMHg4YTYsIDB4ZmFhLCAweGVhMywgMHhkYTksIDB4Y2EwLFxuICAgICAgMHg0NjAsIDB4NTY5LCAweDY2MywgMHg3NmEsIDB4NjYgLCAweDE2ZiwgMHgyNjUsIDB4MzZjLFxuICAgICAgMHhjNmMsIDB4ZDY1LCAweGU2ZiwgMHhmNjYsIDB4ODZhLCAweDk2MywgMHhhNjksIDB4YjYwLFxuICAgICAgMHg1ZjAsIDB4NGY5LCAweDdmMywgMHg2ZmEsIDB4MWY2LCAweGZmICwgMHgzZjUsIDB4MmZjLFxuICAgICAgMHhkZmMsIDB4Y2Y1LCAweGZmZiwgMHhlZjYsIDB4OWZhLCAweDhmMywgMHhiZjksIDB4YWYwLFxuICAgICAgMHg2NTAsIDB4NzU5LCAweDQ1MywgMHg1NWEsIDB4MjU2LCAweDM1ZiwgMHg1NSAsIDB4MTVjLFxuICAgICAgMHhlNWMsIDB4ZjU1LCAweGM1ZiwgMHhkNTYsIDB4YTVhLCAweGI1MywgMHg4NTksIDB4OTUwLFxuICAgICAgMHg3YzAsIDB4NmM5LCAweDVjMywgMHg0Y2EsIDB4M2M2LCAweDJjZiwgMHgxYzUsIDB4Y2MgLFxuICAgICAgMHhmY2MsIDB4ZWM1LCAweGRjZiwgMHhjYzYsIDB4YmNhLCAweGFjMywgMHg5YzksIDB4OGMwLFxuICAgICAgMHg4YzAsIDB4OWM5LCAweGFjMywgMHhiY2EsIDB4Y2M2LCAweGRjZiwgMHhlYzUsIDB4ZmNjLFxuICAgICAgMHhjYyAsIDB4MWM1LCAweDJjZiwgMHgzYzYsIDB4NGNhLCAweDVjMywgMHg2YzksIDB4N2MwLFxuICAgICAgMHg5NTAsIDB4ODU5LCAweGI1MywgMHhhNWEsIDB4ZDU2LCAweGM1ZiwgMHhmNTUsIDB4ZTVjLFxuICAgICAgMHgxNWMsIDB4NTUgLCAweDM1ZiwgMHgyNTYsIDB4NTVhLCAweDQ1MywgMHg3NTksIDB4NjUwLFxuICAgICAgMHhhZjAsIDB4YmY5LCAweDhmMywgMHg5ZmEsIDB4ZWY2LCAweGZmZiwgMHhjZjUsIDB4ZGZjLFxuICAgICAgMHgyZmMsIDB4M2Y1LCAweGZmICwgMHgxZjYsIDB4NmZhLCAweDdmMywgMHg0ZjksIDB4NWYwLFxuICAgICAgMHhiNjAsIDB4YTY5LCAweDk2MywgMHg4NmEsIDB4ZjY2LCAweGU2ZiwgMHhkNjUsIDB4YzZjLFxuICAgICAgMHgzNmMsIDB4MjY1LCAweDE2ZiwgMHg2NiAsIDB4NzZhLCAweDY2MywgMHg1NjksIDB4NDYwLFxuICAgICAgMHhjYTAsIDB4ZGE5LCAweGVhMywgMHhmYWEsIDB4OGE2LCAweDlhZiwgMHhhYTUsIDB4YmFjLFxuICAgICAgMHg0YWMsIDB4NWE1LCAweDZhZiwgMHg3YTYsIDB4YWEgLCAweDFhMywgMHgyYTksIDB4M2EwLFxuICAgICAgMHhkMzAsIDB4YzM5LCAweGYzMywgMHhlM2EsIDB4OTM2LCAweDgzZiwgMHhiMzUsIDB4YTNjLFxuICAgICAgMHg1M2MsIDB4NDM1LCAweDczZiwgMHg2MzYsIDB4MTNhLCAweDMzICwgMHgzMzksIDB4MjMwLFxuICAgICAgMHhlOTAsIDB4Zjk5LCAweGM5MywgMHhkOWEsIDB4YTk2LCAweGI5ZiwgMHg4OTUsIDB4OTljLFxuICAgICAgMHg2OWMsIDB4Nzk1LCAweDQ5ZiwgMHg1OTYsIDB4MjlhLCAweDM5MywgMHg5OSAsIDB4MTkwLFxuICAgICAgMHhmMDAsIDB4ZTA5LCAweGQwMywgMHhjMGEsIDB4YjA2LCAweGEwZiwgMHg5MDUsIDB4ODBjLFxuICAgICAgMHg3MGMsIDB4NjA1LCAweDUwZiwgMHg0MDYsIDB4MzBhLCAweDIwMywgMHgxMDksIDB4MCAgIF0pXG4gICwgdHJpVGFibGUgPSBbXG4gICAgICBbXSxcbiAgICAgIFswLCA4LCAzXSxcbiAgICAgIFswLCAxLCA5XSxcbiAgICAgIFsxLCA4LCAzLCA5LCA4LCAxXSxcbiAgICAgIFsxLCAyLCAxMF0sXG4gICAgICBbMCwgOCwgMywgMSwgMiwgMTBdLFxuICAgICAgWzksIDIsIDEwLCAwLCAyLCA5XSxcbiAgICAgIFsyLCA4LCAzLCAyLCAxMCwgOCwgMTAsIDksIDhdLFxuICAgICAgWzMsIDExLCAyXSxcbiAgICAgIFswLCAxMSwgMiwgOCwgMTEsIDBdLFxuICAgICAgWzEsIDksIDAsIDIsIDMsIDExXSxcbiAgICAgIFsxLCAxMSwgMiwgMSwgOSwgMTEsIDksIDgsIDExXSxcbiAgICAgIFszLCAxMCwgMSwgMTEsIDEwLCAzXSxcbiAgICAgIFswLCAxMCwgMSwgMCwgOCwgMTAsIDgsIDExLCAxMF0sXG4gICAgICBbMywgOSwgMCwgMywgMTEsIDksIDExLCAxMCwgOV0sXG4gICAgICBbOSwgOCwgMTAsIDEwLCA4LCAxMV0sXG4gICAgICBbNCwgNywgOF0sXG4gICAgICBbNCwgMywgMCwgNywgMywgNF0sXG4gICAgICBbMCwgMSwgOSwgOCwgNCwgN10sXG4gICAgICBbNCwgMSwgOSwgNCwgNywgMSwgNywgMywgMV0sXG4gICAgICBbMSwgMiwgMTAsIDgsIDQsIDddLFxuICAgICAgWzMsIDQsIDcsIDMsIDAsIDQsIDEsIDIsIDEwXSxcbiAgICAgIFs5LCAyLCAxMCwgOSwgMCwgMiwgOCwgNCwgN10sXG4gICAgICBbMiwgMTAsIDksIDIsIDksIDcsIDIsIDcsIDMsIDcsIDksIDRdLFxuICAgICAgWzgsIDQsIDcsIDMsIDExLCAyXSxcbiAgICAgIFsxMSwgNCwgNywgMTEsIDIsIDQsIDIsIDAsIDRdLFxuICAgICAgWzksIDAsIDEsIDgsIDQsIDcsIDIsIDMsIDExXSxcbiAgICAgIFs0LCA3LCAxMSwgOSwgNCwgMTEsIDksIDExLCAyLCA5LCAyLCAxXSxcbiAgICAgIFszLCAxMCwgMSwgMywgMTEsIDEwLCA3LCA4LCA0XSxcbiAgICAgIFsxLCAxMSwgMTAsIDEsIDQsIDExLCAxLCAwLCA0LCA3LCAxMSwgNF0sXG4gICAgICBbNCwgNywgOCwgOSwgMCwgMTEsIDksIDExLCAxMCwgMTEsIDAsIDNdLFxuICAgICAgWzQsIDcsIDExLCA0LCAxMSwgOSwgOSwgMTEsIDEwXSxcbiAgICAgIFs5LCA1LCA0XSxcbiAgICAgIFs5LCA1LCA0LCAwLCA4LCAzXSxcbiAgICAgIFswLCA1LCA0LCAxLCA1LCAwXSxcbiAgICAgIFs4LCA1LCA0LCA4LCAzLCA1LCAzLCAxLCA1XSxcbiAgICAgIFsxLCAyLCAxMCwgOSwgNSwgNF0sXG4gICAgICBbMywgMCwgOCwgMSwgMiwgMTAsIDQsIDksIDVdLFxuICAgICAgWzUsIDIsIDEwLCA1LCA0LCAyLCA0LCAwLCAyXSxcbiAgICAgIFsyLCAxMCwgNSwgMywgMiwgNSwgMywgNSwgNCwgMywgNCwgOF0sXG4gICAgICBbOSwgNSwgNCwgMiwgMywgMTFdLFxuICAgICAgWzAsIDExLCAyLCAwLCA4LCAxMSwgNCwgOSwgNV0sXG4gICAgICBbMCwgNSwgNCwgMCwgMSwgNSwgMiwgMywgMTFdLFxuICAgICAgWzIsIDEsIDUsIDIsIDUsIDgsIDIsIDgsIDExLCA0LCA4LCA1XSxcbiAgICAgIFsxMCwgMywgMTEsIDEwLCAxLCAzLCA5LCA1LCA0XSxcbiAgICAgIFs0LCA5LCA1LCAwLCA4LCAxLCA4LCAxMCwgMSwgOCwgMTEsIDEwXSxcbiAgICAgIFs1LCA0LCAwLCA1LCAwLCAxMSwgNSwgMTEsIDEwLCAxMSwgMCwgM10sXG4gICAgICBbNSwgNCwgOCwgNSwgOCwgMTAsIDEwLCA4LCAxMV0sXG4gICAgICBbOSwgNywgOCwgNSwgNywgOV0sXG4gICAgICBbOSwgMywgMCwgOSwgNSwgMywgNSwgNywgM10sXG4gICAgICBbMCwgNywgOCwgMCwgMSwgNywgMSwgNSwgN10sXG4gICAgICBbMSwgNSwgMywgMywgNSwgN10sXG4gICAgICBbOSwgNywgOCwgOSwgNSwgNywgMTAsIDEsIDJdLFxuICAgICAgWzEwLCAxLCAyLCA5LCA1LCAwLCA1LCAzLCAwLCA1LCA3LCAzXSxcbiAgICAgIFs4LCAwLCAyLCA4LCAyLCA1LCA4LCA1LCA3LCAxMCwgNSwgMl0sXG4gICAgICBbMiwgMTAsIDUsIDIsIDUsIDMsIDMsIDUsIDddLFxuICAgICAgWzcsIDksIDUsIDcsIDgsIDksIDMsIDExLCAyXSxcbiAgICAgIFs5LCA1LCA3LCA5LCA3LCAyLCA5LCAyLCAwLCAyLCA3LCAxMV0sXG4gICAgICBbMiwgMywgMTEsIDAsIDEsIDgsIDEsIDcsIDgsIDEsIDUsIDddLFxuICAgICAgWzExLCAyLCAxLCAxMSwgMSwgNywgNywgMSwgNV0sXG4gICAgICBbOSwgNSwgOCwgOCwgNSwgNywgMTAsIDEsIDMsIDEwLCAzLCAxMV0sXG4gICAgICBbNSwgNywgMCwgNSwgMCwgOSwgNywgMTEsIDAsIDEsIDAsIDEwLCAxMSwgMTAsIDBdLFxuICAgICAgWzExLCAxMCwgMCwgMTEsIDAsIDMsIDEwLCA1LCAwLCA4LCAwLCA3LCA1LCA3LCAwXSxcbiAgICAgIFsxMSwgMTAsIDUsIDcsIDExLCA1XSxcbiAgICAgIFsxMCwgNiwgNV0sXG4gICAgICBbMCwgOCwgMywgNSwgMTAsIDZdLFxuICAgICAgWzksIDAsIDEsIDUsIDEwLCA2XSxcbiAgICAgIFsxLCA4LCAzLCAxLCA5LCA4LCA1LCAxMCwgNl0sXG4gICAgICBbMSwgNiwgNSwgMiwgNiwgMV0sXG4gICAgICBbMSwgNiwgNSwgMSwgMiwgNiwgMywgMCwgOF0sXG4gICAgICBbOSwgNiwgNSwgOSwgMCwgNiwgMCwgMiwgNl0sXG4gICAgICBbNSwgOSwgOCwgNSwgOCwgMiwgNSwgMiwgNiwgMywgMiwgOF0sXG4gICAgICBbMiwgMywgMTEsIDEwLCA2LCA1XSxcbiAgICAgIFsxMSwgMCwgOCwgMTEsIDIsIDAsIDEwLCA2LCA1XSxcbiAgICAgIFswLCAxLCA5LCAyLCAzLCAxMSwgNSwgMTAsIDZdLFxuICAgICAgWzUsIDEwLCA2LCAxLCA5LCAyLCA5LCAxMSwgMiwgOSwgOCwgMTFdLFxuICAgICAgWzYsIDMsIDExLCA2LCA1LCAzLCA1LCAxLCAzXSxcbiAgICAgIFswLCA4LCAxMSwgMCwgMTEsIDUsIDAsIDUsIDEsIDUsIDExLCA2XSxcbiAgICAgIFszLCAxMSwgNiwgMCwgMywgNiwgMCwgNiwgNSwgMCwgNSwgOV0sXG4gICAgICBbNiwgNSwgOSwgNiwgOSwgMTEsIDExLCA5LCA4XSxcbiAgICAgIFs1LCAxMCwgNiwgNCwgNywgOF0sXG4gICAgICBbNCwgMywgMCwgNCwgNywgMywgNiwgNSwgMTBdLFxuICAgICAgWzEsIDksIDAsIDUsIDEwLCA2LCA4LCA0LCA3XSxcbiAgICAgIFsxMCwgNiwgNSwgMSwgOSwgNywgMSwgNywgMywgNywgOSwgNF0sXG4gICAgICBbNiwgMSwgMiwgNiwgNSwgMSwgNCwgNywgOF0sXG4gICAgICBbMSwgMiwgNSwgNSwgMiwgNiwgMywgMCwgNCwgMywgNCwgN10sXG4gICAgICBbOCwgNCwgNywgOSwgMCwgNSwgMCwgNiwgNSwgMCwgMiwgNl0sXG4gICAgICBbNywgMywgOSwgNywgOSwgNCwgMywgMiwgOSwgNSwgOSwgNiwgMiwgNiwgOV0sXG4gICAgICBbMywgMTEsIDIsIDcsIDgsIDQsIDEwLCA2LCA1XSxcbiAgICAgIFs1LCAxMCwgNiwgNCwgNywgMiwgNCwgMiwgMCwgMiwgNywgMTFdLFxuICAgICAgWzAsIDEsIDksIDQsIDcsIDgsIDIsIDMsIDExLCA1LCAxMCwgNl0sXG4gICAgICBbOSwgMiwgMSwgOSwgMTEsIDIsIDksIDQsIDExLCA3LCAxMSwgNCwgNSwgMTAsIDZdLFxuICAgICAgWzgsIDQsIDcsIDMsIDExLCA1LCAzLCA1LCAxLCA1LCAxMSwgNl0sXG4gICAgICBbNSwgMSwgMTEsIDUsIDExLCA2LCAxLCAwLCAxMSwgNywgMTEsIDQsIDAsIDQsIDExXSxcbiAgICAgIFswLCA1LCA5LCAwLCA2LCA1LCAwLCAzLCA2LCAxMSwgNiwgMywgOCwgNCwgN10sXG4gICAgICBbNiwgNSwgOSwgNiwgOSwgMTEsIDQsIDcsIDksIDcsIDExLCA5XSxcbiAgICAgIFsxMCwgNCwgOSwgNiwgNCwgMTBdLFxuICAgICAgWzQsIDEwLCA2LCA0LCA5LCAxMCwgMCwgOCwgM10sXG4gICAgICBbMTAsIDAsIDEsIDEwLCA2LCAwLCA2LCA0LCAwXSxcbiAgICAgIFs4LCAzLCAxLCA4LCAxLCA2LCA4LCA2LCA0LCA2LCAxLCAxMF0sXG4gICAgICBbMSwgNCwgOSwgMSwgMiwgNCwgMiwgNiwgNF0sXG4gICAgICBbMywgMCwgOCwgMSwgMiwgOSwgMiwgNCwgOSwgMiwgNiwgNF0sXG4gICAgICBbMCwgMiwgNCwgNCwgMiwgNl0sXG4gICAgICBbOCwgMywgMiwgOCwgMiwgNCwgNCwgMiwgNl0sXG4gICAgICBbMTAsIDQsIDksIDEwLCA2LCA0LCAxMSwgMiwgM10sXG4gICAgICBbMCwgOCwgMiwgMiwgOCwgMTEsIDQsIDksIDEwLCA0LCAxMCwgNl0sXG4gICAgICBbMywgMTEsIDIsIDAsIDEsIDYsIDAsIDYsIDQsIDYsIDEsIDEwXSxcbiAgICAgIFs2LCA0LCAxLCA2LCAxLCAxMCwgNCwgOCwgMSwgMiwgMSwgMTEsIDgsIDExLCAxXSxcbiAgICAgIFs5LCA2LCA0LCA5LCAzLCA2LCA5LCAxLCAzLCAxMSwgNiwgM10sXG4gICAgICBbOCwgMTEsIDEsIDgsIDEsIDAsIDExLCA2LCAxLCA5LCAxLCA0LCA2LCA0LCAxXSxcbiAgICAgIFszLCAxMSwgNiwgMywgNiwgMCwgMCwgNiwgNF0sXG4gICAgICBbNiwgNCwgOCwgMTEsIDYsIDhdLFxuICAgICAgWzcsIDEwLCA2LCA3LCA4LCAxMCwgOCwgOSwgMTBdLFxuICAgICAgWzAsIDcsIDMsIDAsIDEwLCA3LCAwLCA5LCAxMCwgNiwgNywgMTBdLFxuICAgICAgWzEwLCA2LCA3LCAxLCAxMCwgNywgMSwgNywgOCwgMSwgOCwgMF0sXG4gICAgICBbMTAsIDYsIDcsIDEwLCA3LCAxLCAxLCA3LCAzXSxcbiAgICAgIFsxLCAyLCA2LCAxLCA2LCA4LCAxLCA4LCA5LCA4LCA2LCA3XSxcbiAgICAgIFsyLCA2LCA5LCAyLCA5LCAxLCA2LCA3LCA5LCAwLCA5LCAzLCA3LCAzLCA5XSxcbiAgICAgIFs3LCA4LCAwLCA3LCAwLCA2LCA2LCAwLCAyXSxcbiAgICAgIFs3LCAzLCAyLCA2LCA3LCAyXSxcbiAgICAgIFsyLCAzLCAxMSwgMTAsIDYsIDgsIDEwLCA4LCA5LCA4LCA2LCA3XSxcbiAgICAgIFsyLCAwLCA3LCAyLCA3LCAxMSwgMCwgOSwgNywgNiwgNywgMTAsIDksIDEwLCA3XSxcbiAgICAgIFsxLCA4LCAwLCAxLCA3LCA4LCAxLCAxMCwgNywgNiwgNywgMTAsIDIsIDMsIDExXSxcbiAgICAgIFsxMSwgMiwgMSwgMTEsIDEsIDcsIDEwLCA2LCAxLCA2LCA3LCAxXSxcbiAgICAgIFs4LCA5LCA2LCA4LCA2LCA3LCA5LCAxLCA2LCAxMSwgNiwgMywgMSwgMywgNl0sXG4gICAgICBbMCwgOSwgMSwgMTEsIDYsIDddLFxuICAgICAgWzcsIDgsIDAsIDcsIDAsIDYsIDMsIDExLCAwLCAxMSwgNiwgMF0sXG4gICAgICBbNywgMTEsIDZdLFxuICAgICAgWzcsIDYsIDExXSxcbiAgICAgIFszLCAwLCA4LCAxMSwgNywgNl0sXG4gICAgICBbMCwgMSwgOSwgMTEsIDcsIDZdLFxuICAgICAgWzgsIDEsIDksIDgsIDMsIDEsIDExLCA3LCA2XSxcbiAgICAgIFsxMCwgMSwgMiwgNiwgMTEsIDddLFxuICAgICAgWzEsIDIsIDEwLCAzLCAwLCA4LCA2LCAxMSwgN10sXG4gICAgICBbMiwgOSwgMCwgMiwgMTAsIDksIDYsIDExLCA3XSxcbiAgICAgIFs2LCAxMSwgNywgMiwgMTAsIDMsIDEwLCA4LCAzLCAxMCwgOSwgOF0sXG4gICAgICBbNywgMiwgMywgNiwgMiwgN10sXG4gICAgICBbNywgMCwgOCwgNywgNiwgMCwgNiwgMiwgMF0sXG4gICAgICBbMiwgNywgNiwgMiwgMywgNywgMCwgMSwgOV0sXG4gICAgICBbMSwgNiwgMiwgMSwgOCwgNiwgMSwgOSwgOCwgOCwgNywgNl0sXG4gICAgICBbMTAsIDcsIDYsIDEwLCAxLCA3LCAxLCAzLCA3XSxcbiAgICAgIFsxMCwgNywgNiwgMSwgNywgMTAsIDEsIDgsIDcsIDEsIDAsIDhdLFxuICAgICAgWzAsIDMsIDcsIDAsIDcsIDEwLCAwLCAxMCwgOSwgNiwgMTAsIDddLFxuICAgICAgWzcsIDYsIDEwLCA3LCAxMCwgOCwgOCwgMTAsIDldLFxuICAgICAgWzYsIDgsIDQsIDExLCA4LCA2XSxcbiAgICAgIFszLCA2LCAxMSwgMywgMCwgNiwgMCwgNCwgNl0sXG4gICAgICBbOCwgNiwgMTEsIDgsIDQsIDYsIDksIDAsIDFdLFxuICAgICAgWzksIDQsIDYsIDksIDYsIDMsIDksIDMsIDEsIDExLCAzLCA2XSxcbiAgICAgIFs2LCA4LCA0LCA2LCAxMSwgOCwgMiwgMTAsIDFdLFxuICAgICAgWzEsIDIsIDEwLCAzLCAwLCAxMSwgMCwgNiwgMTEsIDAsIDQsIDZdLFxuICAgICAgWzQsIDExLCA4LCA0LCA2LCAxMSwgMCwgMiwgOSwgMiwgMTAsIDldLFxuICAgICAgWzEwLCA5LCAzLCAxMCwgMywgMiwgOSwgNCwgMywgMTEsIDMsIDYsIDQsIDYsIDNdLFxuICAgICAgWzgsIDIsIDMsIDgsIDQsIDIsIDQsIDYsIDJdLFxuICAgICAgWzAsIDQsIDIsIDQsIDYsIDJdLFxuICAgICAgWzEsIDksIDAsIDIsIDMsIDQsIDIsIDQsIDYsIDQsIDMsIDhdLFxuICAgICAgWzEsIDksIDQsIDEsIDQsIDIsIDIsIDQsIDZdLFxuICAgICAgWzgsIDEsIDMsIDgsIDYsIDEsIDgsIDQsIDYsIDYsIDEwLCAxXSxcbiAgICAgIFsxMCwgMSwgMCwgMTAsIDAsIDYsIDYsIDAsIDRdLFxuICAgICAgWzQsIDYsIDMsIDQsIDMsIDgsIDYsIDEwLCAzLCAwLCAzLCA5LCAxMCwgOSwgM10sXG4gICAgICBbMTAsIDksIDQsIDYsIDEwLCA0XSxcbiAgICAgIFs0LCA5LCA1LCA3LCA2LCAxMV0sXG4gICAgICBbMCwgOCwgMywgNCwgOSwgNSwgMTEsIDcsIDZdLFxuICAgICAgWzUsIDAsIDEsIDUsIDQsIDAsIDcsIDYsIDExXSxcbiAgICAgIFsxMSwgNywgNiwgOCwgMywgNCwgMywgNSwgNCwgMywgMSwgNV0sXG4gICAgICBbOSwgNSwgNCwgMTAsIDEsIDIsIDcsIDYsIDExXSxcbiAgICAgIFs2LCAxMSwgNywgMSwgMiwgMTAsIDAsIDgsIDMsIDQsIDksIDVdLFxuICAgICAgWzcsIDYsIDExLCA1LCA0LCAxMCwgNCwgMiwgMTAsIDQsIDAsIDJdLFxuICAgICAgWzMsIDQsIDgsIDMsIDUsIDQsIDMsIDIsIDUsIDEwLCA1LCAyLCAxMSwgNywgNl0sXG4gICAgICBbNywgMiwgMywgNywgNiwgMiwgNSwgNCwgOV0sXG4gICAgICBbOSwgNSwgNCwgMCwgOCwgNiwgMCwgNiwgMiwgNiwgOCwgN10sXG4gICAgICBbMywgNiwgMiwgMywgNywgNiwgMSwgNSwgMCwgNSwgNCwgMF0sXG4gICAgICBbNiwgMiwgOCwgNiwgOCwgNywgMiwgMSwgOCwgNCwgOCwgNSwgMSwgNSwgOF0sXG4gICAgICBbOSwgNSwgNCwgMTAsIDEsIDYsIDEsIDcsIDYsIDEsIDMsIDddLFxuICAgICAgWzEsIDYsIDEwLCAxLCA3LCA2LCAxLCAwLCA3LCA4LCA3LCAwLCA5LCA1LCA0XSxcbiAgICAgIFs0LCAwLCAxMCwgNCwgMTAsIDUsIDAsIDMsIDEwLCA2LCAxMCwgNywgMywgNywgMTBdLFxuICAgICAgWzcsIDYsIDEwLCA3LCAxMCwgOCwgNSwgNCwgMTAsIDQsIDgsIDEwXSxcbiAgICAgIFs2LCA5LCA1LCA2LCAxMSwgOSwgMTEsIDgsIDldLFxuICAgICAgWzMsIDYsIDExLCAwLCA2LCAzLCAwLCA1LCA2LCAwLCA5LCA1XSxcbiAgICAgIFswLCAxMSwgOCwgMCwgNSwgMTEsIDAsIDEsIDUsIDUsIDYsIDExXSxcbiAgICAgIFs2LCAxMSwgMywgNiwgMywgNSwgNSwgMywgMV0sXG4gICAgICBbMSwgMiwgMTAsIDksIDUsIDExLCA5LCAxMSwgOCwgMTEsIDUsIDZdLFxuICAgICAgWzAsIDExLCAzLCAwLCA2LCAxMSwgMCwgOSwgNiwgNSwgNiwgOSwgMSwgMiwgMTBdLFxuICAgICAgWzExLCA4LCA1LCAxMSwgNSwgNiwgOCwgMCwgNSwgMTAsIDUsIDIsIDAsIDIsIDVdLFxuICAgICAgWzYsIDExLCAzLCA2LCAzLCA1LCAyLCAxMCwgMywgMTAsIDUsIDNdLFxuICAgICAgWzUsIDgsIDksIDUsIDIsIDgsIDUsIDYsIDIsIDMsIDgsIDJdLFxuICAgICAgWzksIDUsIDYsIDksIDYsIDAsIDAsIDYsIDJdLFxuICAgICAgWzEsIDUsIDgsIDEsIDgsIDAsIDUsIDYsIDgsIDMsIDgsIDIsIDYsIDIsIDhdLFxuICAgICAgWzEsIDUsIDYsIDIsIDEsIDZdLFxuICAgICAgWzEsIDMsIDYsIDEsIDYsIDEwLCAzLCA4LCA2LCA1LCA2LCA5LCA4LCA5LCA2XSxcbiAgICAgIFsxMCwgMSwgMCwgMTAsIDAsIDYsIDksIDUsIDAsIDUsIDYsIDBdLFxuICAgICAgWzAsIDMsIDgsIDUsIDYsIDEwXSxcbiAgICAgIFsxMCwgNSwgNl0sXG4gICAgICBbMTEsIDUsIDEwLCA3LCA1LCAxMV0sXG4gICAgICBbMTEsIDUsIDEwLCAxMSwgNywgNSwgOCwgMywgMF0sXG4gICAgICBbNSwgMTEsIDcsIDUsIDEwLCAxMSwgMSwgOSwgMF0sXG4gICAgICBbMTAsIDcsIDUsIDEwLCAxMSwgNywgOSwgOCwgMSwgOCwgMywgMV0sXG4gICAgICBbMTEsIDEsIDIsIDExLCA3LCAxLCA3LCA1LCAxXSxcbiAgICAgIFswLCA4LCAzLCAxLCAyLCA3LCAxLCA3LCA1LCA3LCAyLCAxMV0sXG4gICAgICBbOSwgNywgNSwgOSwgMiwgNywgOSwgMCwgMiwgMiwgMTEsIDddLFxuICAgICAgWzcsIDUsIDIsIDcsIDIsIDExLCA1LCA5LCAyLCAzLCAyLCA4LCA5LCA4LCAyXSxcbiAgICAgIFsyLCA1LCAxMCwgMiwgMywgNSwgMywgNywgNV0sXG4gICAgICBbOCwgMiwgMCwgOCwgNSwgMiwgOCwgNywgNSwgMTAsIDIsIDVdLFxuICAgICAgWzksIDAsIDEsIDUsIDEwLCAzLCA1LCAzLCA3LCAzLCAxMCwgMl0sXG4gICAgICBbOSwgOCwgMiwgOSwgMiwgMSwgOCwgNywgMiwgMTAsIDIsIDUsIDcsIDUsIDJdLFxuICAgICAgWzEsIDMsIDUsIDMsIDcsIDVdLFxuICAgICAgWzAsIDgsIDcsIDAsIDcsIDEsIDEsIDcsIDVdLFxuICAgICAgWzksIDAsIDMsIDksIDMsIDUsIDUsIDMsIDddLFxuICAgICAgWzksIDgsIDcsIDUsIDksIDddLFxuICAgICAgWzUsIDgsIDQsIDUsIDEwLCA4LCAxMCwgMTEsIDhdLFxuICAgICAgWzUsIDAsIDQsIDUsIDExLCAwLCA1LCAxMCwgMTEsIDExLCAzLCAwXSxcbiAgICAgIFswLCAxLCA5LCA4LCA0LCAxMCwgOCwgMTAsIDExLCAxMCwgNCwgNV0sXG4gICAgICBbMTAsIDExLCA0LCAxMCwgNCwgNSwgMTEsIDMsIDQsIDksIDQsIDEsIDMsIDEsIDRdLFxuICAgICAgWzIsIDUsIDEsIDIsIDgsIDUsIDIsIDExLCA4LCA0LCA1LCA4XSxcbiAgICAgIFswLCA0LCAxMSwgMCwgMTEsIDMsIDQsIDUsIDExLCAyLCAxMSwgMSwgNSwgMSwgMTFdLFxuICAgICAgWzAsIDIsIDUsIDAsIDUsIDksIDIsIDExLCA1LCA0LCA1LCA4LCAxMSwgOCwgNV0sXG4gICAgICBbOSwgNCwgNSwgMiwgMTEsIDNdLFxuICAgICAgWzIsIDUsIDEwLCAzLCA1LCAyLCAzLCA0LCA1LCAzLCA4LCA0XSxcbiAgICAgIFs1LCAxMCwgMiwgNSwgMiwgNCwgNCwgMiwgMF0sXG4gICAgICBbMywgMTAsIDIsIDMsIDUsIDEwLCAzLCA4LCA1LCA0LCA1LCA4LCAwLCAxLCA5XSxcbiAgICAgIFs1LCAxMCwgMiwgNSwgMiwgNCwgMSwgOSwgMiwgOSwgNCwgMl0sXG4gICAgICBbOCwgNCwgNSwgOCwgNSwgMywgMywgNSwgMV0sXG4gICAgICBbMCwgNCwgNSwgMSwgMCwgNV0sXG4gICAgICBbOCwgNCwgNSwgOCwgNSwgMywgOSwgMCwgNSwgMCwgMywgNV0sXG4gICAgICBbOSwgNCwgNV0sXG4gICAgICBbNCwgMTEsIDcsIDQsIDksIDExLCA5LCAxMCwgMTFdLFxuICAgICAgWzAsIDgsIDMsIDQsIDksIDcsIDksIDExLCA3LCA5LCAxMCwgMTFdLFxuICAgICAgWzEsIDEwLCAxMSwgMSwgMTEsIDQsIDEsIDQsIDAsIDcsIDQsIDExXSxcbiAgICAgIFszLCAxLCA0LCAzLCA0LCA4LCAxLCAxMCwgNCwgNywgNCwgMTEsIDEwLCAxMSwgNF0sXG4gICAgICBbNCwgMTEsIDcsIDksIDExLCA0LCA5LCAyLCAxMSwgOSwgMSwgMl0sXG4gICAgICBbOSwgNywgNCwgOSwgMTEsIDcsIDksIDEsIDExLCAyLCAxMSwgMSwgMCwgOCwgM10sXG4gICAgICBbMTEsIDcsIDQsIDExLCA0LCAyLCAyLCA0LCAwXSxcbiAgICAgIFsxMSwgNywgNCwgMTEsIDQsIDIsIDgsIDMsIDQsIDMsIDIsIDRdLFxuICAgICAgWzIsIDksIDEwLCAyLCA3LCA5LCAyLCAzLCA3LCA3LCA0LCA5XSxcbiAgICAgIFs5LCAxMCwgNywgOSwgNywgNCwgMTAsIDIsIDcsIDgsIDcsIDAsIDIsIDAsIDddLFxuICAgICAgWzMsIDcsIDEwLCAzLCAxMCwgMiwgNywgNCwgMTAsIDEsIDEwLCAwLCA0LCAwLCAxMF0sXG4gICAgICBbMSwgMTAsIDIsIDgsIDcsIDRdLFxuICAgICAgWzQsIDksIDEsIDQsIDEsIDcsIDcsIDEsIDNdLFxuICAgICAgWzQsIDksIDEsIDQsIDEsIDcsIDAsIDgsIDEsIDgsIDcsIDFdLFxuICAgICAgWzQsIDAsIDMsIDcsIDQsIDNdLFxuICAgICAgWzQsIDgsIDddLFxuICAgICAgWzksIDEwLCA4LCAxMCwgMTEsIDhdLFxuICAgICAgWzMsIDAsIDksIDMsIDksIDExLCAxMSwgOSwgMTBdLFxuICAgICAgWzAsIDEsIDEwLCAwLCAxMCwgOCwgOCwgMTAsIDExXSxcbiAgICAgIFszLCAxLCAxMCwgMTEsIDMsIDEwXSxcbiAgICAgIFsxLCAyLCAxMSwgMSwgMTEsIDksIDksIDExLCA4XSxcbiAgICAgIFszLCAwLCA5LCAzLCA5LCAxMSwgMSwgMiwgOSwgMiwgMTEsIDldLFxuICAgICAgWzAsIDIsIDExLCA4LCAwLCAxMV0sXG4gICAgICBbMywgMiwgMTFdLFxuICAgICAgWzIsIDMsIDgsIDIsIDgsIDEwLCAxMCwgOCwgOV0sXG4gICAgICBbOSwgMTAsIDIsIDAsIDksIDJdLFxuICAgICAgWzIsIDMsIDgsIDIsIDgsIDEwLCAwLCAxLCA4LCAxLCAxMCwgOF0sXG4gICAgICBbMSwgMTAsIDJdLFxuICAgICAgWzEsIDMsIDgsIDksIDEsIDhdLFxuICAgICAgWzAsIDksIDFdLFxuICAgICAgWzAsIDMsIDhdLFxuICAgICAgW11dXG4gICwgY3ViZVZlcnRzID0gW1xuICAgICBbMCwwLDBdXG4gICAgLFsxLDAsMF1cbiAgICAsWzEsMSwwXVxuICAgICxbMCwxLDBdXG4gICAgLFswLDAsMV1cbiAgICAsWzEsMCwxXVxuICAgICxbMSwxLDFdXG4gICAgLFswLDEsMV1dXG4gICwgZWRnZUluZGV4ID0gWyBbMCwxXSxbMSwyXSxbMiwzXSxbMywwXSxbNCw1XSxbNSw2XSxbNiw3XSxbNyw0XSxbMCw0XSxbMSw1XSxbMiw2XSxbMyw3XSBdO1xuXG5yZXR1cm4gZnVuY3Rpb24oZGF0YSwgZGltcykge1xuICB2YXIgdmVydGljZXMgPSBbXVxuICAgICwgZmFjZXMgPSBbXVxuICAgICwgbiA9IDBcbiAgICAsIGdyaWQgPSBuZXcgRmxvYXQzMkFycmF5KDgpXG4gICAgLCBlZGdlcyA9IG5ldyBJbnQzMkFycmF5KDEyKVxuICAgICwgeCA9IG5ldyBJbnQzMkFycmF5KDMpO1xuICAvL01hcmNoIG92ZXIgdGhlIHZvbHVtZVxuICBmb3IoeFsyXT0wOyB4WzJdPGRpbXNbMl0tMTsgKyt4WzJdLCBuKz1kaW1zWzBdKVxuICBmb3IoeFsxXT0wOyB4WzFdPGRpbXNbMV0tMTsgKyt4WzFdLCArK24pXG4gIGZvcih4WzBdPTA7IHhbMF08ZGltc1swXS0xOyArK3hbMF0sICsrbikge1xuICAgIC8vRm9yIGVhY2ggY2VsbCwgY29tcHV0ZSBjdWJlIG1hc2tcbiAgICB2YXIgY3ViZV9pbmRleCA9IDA7XG4gICAgZm9yKHZhciBpPTA7IGk8ODsgKytpKSB7XG4gICAgICB2YXIgdiA9IGN1YmVWZXJ0c1tpXVxuICAgICAgICAsIHMgPSBkYXRhW24gKyB2WzBdICsgZGltc1swXSAqICh2WzFdICsgZGltc1sxXSAqIHZbMl0pXTtcbiAgICAgIGdyaWRbaV0gPSBzO1xuICAgICAgY3ViZV9pbmRleCB8PSAocyA+IDApID8gMSA8PCBpIDogMDtcbiAgICB9XG4gICAgLy9Db21wdXRlIHZlcnRpY2VzXG4gICAgdmFyIGVkZ2VfbWFzayA9IGVkZ2VUYWJsZVtjdWJlX2luZGV4XTtcbiAgICBpZihlZGdlX21hc2sgPT09IDApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBmb3IodmFyIGk9MDsgaTwxMjsgKytpKSB7XG4gICAgICBpZigoZWRnZV9tYXNrICYgKDE8PGkpKSA9PT0gMCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGVkZ2VzW2ldID0gdmVydGljZXMubGVuZ3RoO1xuICAgICAgdmFyIG52ID0gWzAsMCwwXVxuICAgICAgICAsIGUgPSBlZGdlSW5kZXhbaV1cbiAgICAgICAgLCBwMCA9IGN1YmVWZXJ0c1tlWzBdXVxuICAgICAgICAsIHAxID0gY3ViZVZlcnRzW2VbMV1dXG4gICAgICAgICwgYSA9IGdyaWRbZVswXV1cbiAgICAgICAgLCBiID0gZ3JpZFtlWzFdXVxuICAgICAgICAsIGQgPSBhIC0gYlxuICAgICAgICAsIHQgPSAwO1xuICAgICAgaWYoTWF0aC5hYnMoZCkgPiAxZS02KSB7XG4gICAgICAgIHQgPSBhIC8gZDtcbiAgICAgIH1cbiAgICAgIGZvcih2YXIgaj0wOyBqPDM7ICsraikge1xuICAgICAgICBudltqXSA9ICh4W2pdICsgcDBbal0pICsgdCAqIChwMVtqXSAtIHAwW2pdKTtcbiAgICAgIH1cbiAgICAgIHZlcnRpY2VzLnB1c2gobnYpO1xuICAgIH1cbiAgICAvL0FkZCBmYWNlc1xuICAgIHZhciBmID0gdHJpVGFibGVbY3ViZV9pbmRleF07XG4gICAgZm9yKHZhciBpPTA7IGk8Zi5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgZmFjZXMucHVzaChbZWRnZXNbZltpXV0sIGVkZ2VzW2ZbaSsxXV0sIGVkZ2VzW2ZbaSsyXV1dKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHsgdmVydGljZXM6IHZlcnRpY2VzLCBmYWNlczogZmFjZXMgfTtcbn07XG59KSgpO1xuXG5cbkNoZW1Eb29kbGUuYW5pbWF0aW9ucyA9IChmdW5jdGlvbih3aW5kb3csIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdHZhciBleHQgPSB7fTtcblxuXHQvLyBEcm9wIGluIHJlcGxhY2UgZnVuY3Rpb25zIGZvciBzZXRUaW1lb3V0KCkgJiBzZXRJbnRlcnZhbCgpIHRoYXQgXG5cdC8vIG1ha2UgdXNlIG9mIHJlcXVlc3RBbmltYXRpb25GcmFtZSgpIGZvciBwZXJmb3JtYW5jZSB3aGVyZSBhdmFpbGFibGVcblx0Ly8gaHR0cDovL3d3dy5qb2VsYW1iZXJ0LmNvLnVrXG5cdCBcblx0Ly8gQ29weXJpZ2h0IDIwMTEsIEpvZSBMYW1iZXJ0LlxuXHQvLyBGcmVlIHRvIHVzZSB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cdC8vIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdFxuXHQvLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKSBzaGltIGJ5IFBhdWwgSXJpc2hcblx0Ly8gaHR0cDovL3BhdWxpcmlzaC5jb20vMjAxMS9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtZm9yLXNtYXJ0LWFuaW1hdGluZy9cblx0d2luZG93LnJlcXVlc3RBbmltRnJhbWUgPSAoZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICAgICAgIHx8IFxuXHRcdFx0XHR3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IFxuXHRcdFx0XHR3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lICAgIHx8IFxuXHRcdFx0XHR3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSAgICAgIHx8IFxuXHRcdFx0XHR3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgIHx8IFxuXHRcdFx0XHRmdW5jdGlvbigvKiBmdW5jdGlvbiAqLyBjYWxsYmFjaywgLyogRE9NRWxlbWVudCAqLyBlbGVtZW50KXtcblx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKTtcblx0XHRcdFx0fTtcblx0fSkoKTtcblx0XG5cdC8qKlxuXHQgKiBCZWhhdmVzIHRoZSBzYW1lIGFzIHNldEludGVydmFsIGV4Y2VwdCB1c2VzIHJlcXVlc3RBbmltYXRpb25GcmFtZSgpIHdoZXJlIHBvc3NpYmxlIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2Vcblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG5cdCAqIEBwYXJhbSB7aW50fSBkZWxheSBUaGUgZGVsYXkgaW4gbWlsbGlzZWNvbmRzXG5cdCAqL1xuXHRleHQucmVxdWVzdEludGVydmFsID0gZnVuY3Rpb24oZm4sIGRlbGF5KSB7XG5cdFx0aWYoICF3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICAgICAgICYmIFxuXHRcdFx0IXdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgJiYgXG5cdFx0XHQhKHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgJiYgd2luZG93Lm1vekNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSkgJiYgLy8gRmlyZWZveCA1IHNoaXBzIHdpdGhvdXQgY2FuY2VsIHN1cHBvcnRcblx0XHRcdCF3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSAgICAgICYmIFxuXHRcdFx0IXdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSlcblx0XHRcdFx0cmV0dXJuIHdpbmRvdy5zZXRJbnRlcnZhbChmbiwgZGVsYXkpO1xuXHRcdFx0XHRcblx0XHR2YXIgc3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcblx0XHRcdGhhbmRsZSA9IG5ldyBPYmplY3QoKTtcblx0XHRcdFxuXHRcdGZ1bmN0aW9uIGxvb3AoKSB7XG5cdFx0XHR2YXIgY3VycmVudCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuXHRcdFx0XHRkZWx0YSA9IGN1cnJlbnQgLSBzdGFydDtcblx0XHRcdFx0XG5cdFx0XHRpZihkZWx0YSA+PSBkZWxheSkge1xuXHRcdFx0XHRmbi5jYWxsKCk7XG5cdFx0XHRcdHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cdFx0XHR9XG5cdCBcblx0XHRcdGhhbmRsZS52YWx1ZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbUZyYW1lKGxvb3ApO1xuXHRcdH07XG5cdFx0XG5cdFx0aGFuZGxlLnZhbHVlID0gd2luZG93LnJlcXVlc3RBbmltRnJhbWUobG9vcCk7XG5cdFx0cmV0dXJuIGhhbmRsZTtcblx0fTtcblx0IFxuXHQvKipcblx0ICogQmVoYXZlcyB0aGUgc2FtZSBhcyBjbGVhckludGVydmFsIGV4Y2VwdCB1c2VzIGNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSgpIHdoZXJlIHBvc3NpYmxlIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2Vcblx0ICogQHBhcmFtIHtpbnR8b2JqZWN0fSBmbiBUaGUgY2FsbGJhY2sgZnVuY3Rpb25cblx0ICovXG5cdGV4dC5jbGVhclJlcXVlc3RJbnRlcnZhbCA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuXHQgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID8gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKGhhbmRsZS52YWx1ZSkgOlxuXHQgICAgd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lID8gd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lKGhhbmRsZS52YWx1ZSkgOlxuXHQgICAgd2luZG93LndlYmtpdENhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSA/IHdpbmRvdy53ZWJraXRDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUoaGFuZGxlLnZhbHVlKSA6IC8qIFN1cHBvcnQgZm9yIGxlZ2FjeSBBUEkgKi9cblx0ICAgIHdpbmRvdy5tb3pDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cubW96Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lKGhhbmRsZS52YWx1ZSkgOlxuXHQgICAgd2luZG93Lm9DYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcdD8gd2luZG93Lm9DYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUoaGFuZGxlLnZhbHVlKSA6XG5cdCAgICB3aW5kb3cubXNDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cubXNDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUoaGFuZGxlLnZhbHVlKSA6XG5cdCAgICBjbGVhckludGVydmFsKGhhbmRsZSk7XG5cdH07XG5cdFxuXHQvKipcblx0ICogQmVoYXZlcyB0aGUgc2FtZSBhcyBzZXRUaW1lb3V0IGV4Y2VwdCB1c2VzIHJlcXVlc3RBbmltYXRpb25GcmFtZSgpIHdoZXJlIHBvc3NpYmxlIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2Vcblx0ICogQHBhcmFtIHtmdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uXG5cdCAqIEBwYXJhbSB7aW50fSBkZWxheSBUaGUgZGVsYXkgaW4gbWlsbGlzZWNvbmRzXG5cdCAqL1xuXHQgXG5cdGV4dC5yZXF1ZXN0VGltZW91dCA9IGZ1bmN0aW9uKGZuLCBkZWxheSkge1xuXHRcdGlmKCAhd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSAgICAgIFx0JiYgXG5cdFx0XHQhd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSAmJiBcblx0XHRcdCEod2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSAmJiB3aW5kb3cubW96Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lKSAmJiAvLyBGaXJlZm94IDUgc2hpcHMgd2l0aG91dCBjYW5jZWwgc3VwcG9ydFxuXHRcdFx0IXdpbmRvdy5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lICAgICAgJiYgXG5cdFx0XHQhd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lKVxuXHRcdFx0XHRyZXR1cm4gd2luZG93LnNldFRpbWVvdXQoZm4sIGRlbGF5KTtcblx0XHRcdFx0XG5cdFx0dmFyIHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCksXG5cdFx0XHRoYW5kbGUgPSBuZXcgT2JqZWN0KCk7XG5cdFx0XHRcblx0XHRmdW5jdGlvbiBsb29wKCl7XG5cdFx0XHR2YXIgY3VycmVudCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuXHRcdFx0XHRkZWx0YSA9IGN1cnJlbnQgLSBzdGFydDtcblx0XHRcdFx0XG5cdFx0XHRkZWx0YSA+PSBkZWxheSA/IGZuLmNhbGwoKSA6IGhhbmRsZS52YWx1ZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbUZyYW1lKGxvb3ApO1xuXHRcdH07XG5cdFx0XG5cdFx0aGFuZGxlLnZhbHVlID0gd2luZG93LnJlcXVlc3RBbmltRnJhbWUobG9vcCk7XG5cdFx0cmV0dXJuIGhhbmRsZTtcblx0fTtcblx0IFxuXHQvKipcblx0ICogQmVoYXZlcyB0aGUgc2FtZSBhcyBjbGVhclRpbWVvdXQgZXhjZXB0IHVzZXMgY2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkgd2hlcmUgcG9zc2libGUgZm9yIGJldHRlciBwZXJmb3JtYW5jZVxuXHQgKiBAcGFyYW0ge2ludHxvYmplY3R9IGZuIFRoZSBjYWxsYmFjayBmdW5jdGlvblxuXHQgKi9cblx0ZXh0LmNsZWFyUmVxdWVzdFRpbWVvdXQgPSBmdW5jdGlvbihoYW5kbGUpIHtcblx0ICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA/IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShoYW5kbGUudmFsdWUpIDpcblx0ICAgIHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSA/IHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZShoYW5kbGUudmFsdWUpIDpcblx0ICAgIHdpbmRvdy53ZWJraXRDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cud2Via2l0Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lKGhhbmRsZS52YWx1ZSkgOiAvKiBTdXBwb3J0IGZvciBsZWdhY3kgQVBJICovXG5cdCAgICB3aW5kb3cubW96Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lID8gd2luZG93Lm1vekNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZShoYW5kbGUudmFsdWUpIDpcblx0ICAgIHdpbmRvdy5vQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lXHQ/IHdpbmRvdy5vQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lKGhhbmRsZS52YWx1ZSkgOlxuXHQgICAgd2luZG93Lm1zQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lID8gd2luZG93Lm1zQ2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lKGhhbmRsZS52YWx1ZSkgOlxuXHQgICAgY2xlYXJUaW1lb3V0KGhhbmRsZSk7XG5cdH07XG5cblx0cmV0dXJuIGV4dDtcblxufSkod2luZG93KTtcblxuQ2hlbURvb2RsZS5leHRlbnNpb25zID0gKGZ1bmN0aW9uKHN0cnVjdHVyZXMsIHYzLCBtLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgZXh0ID0ge307XG5cblx0ZXh0LnN0cmluZ1N0YXJ0c1dpdGggPSBmdW5jdGlvbihzdHIsIG1hdGNoKSB7XG5cdFx0cmV0dXJuIHN0ci5zbGljZSgwLCBtYXRjaC5sZW5ndGgpID09PSBtYXRjaDtcblx0fTtcblxuXHRleHQudmVjM0FuZ2xlRnJvbSA9IGZ1bmN0aW9uKHYxLCB2Mikge1xuXHRcdHZhciBsZW5ndGgxID0gdjMubGVuZ3RoKHYxKTtcblx0XHR2YXIgbGVuZ3RoMiA9IHYzLmxlbmd0aCh2Mik7XG5cdFx0dmFyIGRvdCA9IHYzLmRvdCh2MSwgdjIpO1xuXHRcdHZhciBjb3NpbmUgPSBkb3QgLyBsZW5ndGgxIC8gbGVuZ3RoMjtcblx0XHRyZXR1cm4gbS5hY29zKGNvc2luZSk7XG5cdH07XG5cblx0ZXh0LmNvbnRleHRSb3VuZFJlY3QgPSBmdW5jdGlvbihjdHgsIHgsIHksIHdpZHRoLCBoZWlnaHQsIHJhZGl1cykge1xuXHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRjdHgubW92ZVRvKHggKyByYWRpdXMsIHkpO1xuXHRcdGN0eC5saW5lVG8oeCArIHdpZHRoIC0gcmFkaXVzLCB5KTtcblx0XHRjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHksIHggKyB3aWR0aCwgeSArIHJhZGl1cyk7XG5cdFx0Y3R4LmxpbmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQgLSByYWRpdXMpO1xuXHRcdGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCwgeCArIHdpZHRoIC0gcmFkaXVzLCB5ICsgaGVpZ2h0KTtcblx0XHRjdHgubGluZVRvKHggKyByYWRpdXMsIHkgKyBoZWlnaHQpO1xuXHRcdGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHkgKyBoZWlnaHQsIHgsIHkgKyBoZWlnaHQgLSByYWRpdXMpO1xuXHRcdGN0eC5saW5lVG8oeCwgeSArIHJhZGl1cyk7XG5cdFx0Y3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSwgeCArIHJhZGl1cywgeSk7XG5cdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHR9O1xuXG5cdGV4dC5jb250ZXh0RWxsaXBzZSA9IGZ1bmN0aW9uKGN0eCwgeCwgeSwgdywgaCkge1xuXHRcdHZhciBrYXBwYSA9IC41NTIyODQ4O1xuXHRcdHZhciBveCA9ICh3IC8gMikgKiBrYXBwYTtcblx0XHR2YXIgb3kgPSAoaCAvIDIpICoga2FwcGE7XG5cdFx0dmFyIHhlID0geCArIHc7XG5cdFx0dmFyIHllID0geSArIGg7XG5cdFx0dmFyIHhtID0geCArIHcgLyAyO1xuXHRcdHZhciB5bSA9IHkgKyBoIC8gMjtcblxuXHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRjdHgubW92ZVRvKHgsIHltKTtcblx0XHRjdHguYmV6aWVyQ3VydmVUbyh4LCB5bSAtIG95LCB4bSAtIG94LCB5LCB4bSwgeSk7XG5cdFx0Y3R4LmJlemllckN1cnZlVG8oeG0gKyBveCwgeSwgeGUsIHltIC0gb3ksIHhlLCB5bSk7XG5cdFx0Y3R4LmJlemllckN1cnZlVG8oeGUsIHltICsgb3ksIHhtICsgb3gsIHllLCB4bSwgeWUpO1xuXHRcdGN0eC5iZXppZXJDdXJ2ZVRvKHhtIC0gb3gsIHllLCB4LCB5bSArIG95LCB4LCB5bSk7XG5cdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHR9O1xuXG5cdGV4dC5nZXRGb250U3RyaW5nID0gZnVuY3Rpb24oc2l6ZSwgZmFtaWxpZXMsIGJvbGQsIGl0YWxpYykge1xuXHRcdHZhciBzYiA9IFtdO1xuXHRcdGlmIChib2xkKSB7XG5cdFx0XHRzYi5wdXNoKCdib2xkICcpO1xuXHRcdH1cblx0XHRpZiAoaXRhbGljKSB7XG5cdFx0XHRzYi5wdXNoKCdpdGFsaWMgJyk7XG5cdFx0fVxuXHRcdHNiLnB1c2goc2l6ZSArICdweCAnKTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gZmFtaWxpZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIHVzZSA9IGZhbWlsaWVzW2ldO1xuXHRcdFx0aWYgKHVzZS5pbmRleE9mKCcgJykgIT09IC0xKSB7XG5cdFx0XHRcdHVzZSA9ICdcIicgKyB1c2UgKyAnXCInO1xuXHRcdFx0fVxuXHRcdFx0c2IucHVzaCgoaSAhPT0gMCA/ICcsJyA6ICcnKSArIHVzZSk7XG5cdFx0fVxuXHRcdHJldHVybiBzYi5qb2luKCcnKTtcblx0fTtcblxuXHRyZXR1cm4gZXh0O1xuXG59KShDaGVtRG9vZGxlLnN0cnVjdHVyZXMsIENoZW1Eb29kbGUubGliLnZlYzMsIE1hdGgpO1xuXG5DaGVtRG9vZGxlLm1hdGggPSAoZnVuY3Rpb24oYywgZXh0ZW5zaW9ucywgc3RydWN0dXJlcywgcSwgbSwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIHBhY2sgPSB7fTtcblxuXHR2YXIgbmFtZWRDb2xvcnMgPSB7XG5cdFx0J2FsaWNlYmx1ZScgOiAnI2YwZjhmZicsXG5cdFx0J2FudGlxdWV3aGl0ZScgOiAnI2ZhZWJkNycsXG5cdFx0J2FxdWEnIDogJyMwMGZmZmYnLFxuXHRcdCdhcXVhbWFyaW5lJyA6ICcjN2ZmZmQ0Jyxcblx0XHQnYXp1cmUnIDogJyNmMGZmZmYnLFxuXHRcdCdiZWlnZScgOiAnI2Y1ZjVkYycsXG5cdFx0J2Jpc3F1ZScgOiAnI2ZmZTRjNCcsXG5cdFx0J2JsYWNrJyA6ICcjMDAwMDAwJyxcblx0XHQnYmxhbmNoZWRhbG1vbmQnIDogJyNmZmViY2QnLFxuXHRcdCdibHVlJyA6ICcjMDAwMGZmJyxcblx0XHQnYmx1ZXZpb2xldCcgOiAnIzhhMmJlMicsXG5cdFx0J2Jyb3duJyA6ICcjYTUyYTJhJyxcblx0XHQnYnVybHl3b29kJyA6ICcjZGViODg3Jyxcblx0XHQnY2FkZXRibHVlJyA6ICcjNWY5ZWEwJyxcblx0XHQnY2hhcnRyZXVzZScgOiAnIzdmZmYwMCcsXG5cdFx0J2Nob2NvbGF0ZScgOiAnI2QyNjkxZScsXG5cdFx0J2NvcmFsJyA6ICcjZmY3ZjUwJyxcblx0XHQnY29ybmZsb3dlcmJsdWUnIDogJyM2NDk1ZWQnLFxuXHRcdCdjb3Juc2lsaycgOiAnI2ZmZjhkYycsXG5cdFx0J2NyaW1zb24nIDogJyNkYzE0M2MnLFxuXHRcdCdjeWFuJyA6ICcjMDBmZmZmJyxcblx0XHQnZGFya2JsdWUnIDogJyMwMDAwOGInLFxuXHRcdCdkYXJrY3lhbicgOiAnIzAwOGI4YicsXG5cdFx0J2Rhcmtnb2xkZW5yb2QnIDogJyNiODg2MGInLFxuXHRcdCdkYXJrZ3JheScgOiAnI2E5YTlhOScsXG5cdFx0J2RhcmtncmVlbicgOiAnIzAwNjQwMCcsXG5cdFx0J2RhcmtraGFraScgOiAnI2JkYjc2YicsXG5cdFx0J2RhcmttYWdlbnRhJyA6ICcjOGIwMDhiJyxcblx0XHQnZGFya29saXZlZ3JlZW4nIDogJyM1NTZiMmYnLFxuXHRcdCdkYXJrb3JhbmdlJyA6ICcjZmY4YzAwJyxcblx0XHQnZGFya29yY2hpZCcgOiAnIzk5MzJjYycsXG5cdFx0J2RhcmtyZWQnIDogJyM4YjAwMDAnLFxuXHRcdCdkYXJrc2FsbW9uJyA6ICcjZTk5NjdhJyxcblx0XHQnZGFya3NlYWdyZWVuJyA6ICcjOGZiYzhmJyxcblx0XHQnZGFya3NsYXRlYmx1ZScgOiAnIzQ4M2Q4YicsXG5cdFx0J2RhcmtzbGF0ZWdyYXknIDogJyMyZjRmNGYnLFxuXHRcdCdkYXJrdHVycXVvaXNlJyA6ICcjMDBjZWQxJyxcblx0XHQnZGFya3Zpb2xldCcgOiAnIzk0MDBkMycsXG5cdFx0J2RlZXBwaW5rJyA6ICcjZmYxNDkzJyxcblx0XHQnZGVlcHNreWJsdWUnIDogJyMwMGJmZmYnLFxuXHRcdCdkaW1ncmF5JyA6ICcjNjk2OTY5Jyxcblx0XHQnZG9kZ2VyYmx1ZScgOiAnIzFlOTBmZicsXG5cdFx0J2ZpcmVicmljaycgOiAnI2IyMjIyMicsXG5cdFx0J2Zsb3JhbHdoaXRlJyA6ICcjZmZmYWYwJyxcblx0XHQnZm9yZXN0Z3JlZW4nIDogJyMyMjhiMjInLFxuXHRcdCdmdWNoc2lhJyA6ICcjZmYwMGZmJyxcblx0XHQnZ2FpbnNib3JvJyA6ICcjZGNkY2RjJyxcblx0XHQnZ2hvc3R3aGl0ZScgOiAnI2Y4ZjhmZicsXG5cdFx0J2dvbGQnIDogJyNmZmQ3MDAnLFxuXHRcdCdnb2xkZW5yb2QnIDogJyNkYWE1MjAnLFxuXHRcdCdncmF5JyA6ICcjODA4MDgwJyxcblx0XHQnZ3JlZW4nIDogJyMwMDgwMDAnLFxuXHRcdCdncmVlbnllbGxvdycgOiAnI2FkZmYyZicsXG5cdFx0J2hvbmV5ZGV3JyA6ICcjZjBmZmYwJyxcblx0XHQnaG90cGluaycgOiAnI2ZmNjliNCcsXG5cdFx0J2luZGlhbnJlZCAnIDogJyNjZDVjNWMnLFxuXHRcdCdpbmRpZ28gJyA6ICcjNGIwMDgyJyxcblx0XHQnaXZvcnknIDogJyNmZmZmZjAnLFxuXHRcdCdraGFraScgOiAnI2YwZTY4YycsXG5cdFx0J2xhdmVuZGVyJyA6ICcjZTZlNmZhJyxcblx0XHQnbGF2ZW5kZXJibHVzaCcgOiAnI2ZmZjBmNScsXG5cdFx0J2xhd25ncmVlbicgOiAnIzdjZmMwMCcsXG5cdFx0J2xlbW9uY2hpZmZvbicgOiAnI2ZmZmFjZCcsXG5cdFx0J2xpZ2h0Ymx1ZScgOiAnI2FkZDhlNicsXG5cdFx0J2xpZ2h0Y29yYWwnIDogJyNmMDgwODAnLFxuXHRcdCdsaWdodGN5YW4nIDogJyNlMGZmZmYnLFxuXHRcdCdsaWdodGdvbGRlbnJvZHllbGxvdycgOiAnI2ZhZmFkMicsXG5cdFx0J2xpZ2h0Z3JleScgOiAnI2QzZDNkMycsXG5cdFx0J2xpZ2h0Z3JlZW4nIDogJyM5MGVlOTAnLFxuXHRcdCdsaWdodHBpbmsnIDogJyNmZmI2YzEnLFxuXHRcdCdsaWdodHNhbG1vbicgOiAnI2ZmYTA3YScsXG5cdFx0J2xpZ2h0c2VhZ3JlZW4nIDogJyMyMGIyYWEnLFxuXHRcdCdsaWdodHNreWJsdWUnIDogJyM4N2NlZmEnLFxuXHRcdCdsaWdodHNsYXRlZ3JheScgOiAnIzc3ODg5OScsXG5cdFx0J2xpZ2h0c3RlZWxibHVlJyA6ICcjYjBjNGRlJyxcblx0XHQnbGlnaHR5ZWxsb3cnIDogJyNmZmZmZTAnLFxuXHRcdCdsaW1lJyA6ICcjMDBmZjAwJyxcblx0XHQnbGltZWdyZWVuJyA6ICcjMzJjZDMyJyxcblx0XHQnbGluZW4nIDogJyNmYWYwZTYnLFxuXHRcdCdtYWdlbnRhJyA6ICcjZmYwMGZmJyxcblx0XHQnbWFyb29uJyA6ICcjODAwMDAwJyxcblx0XHQnbWVkaXVtYXF1YW1hcmluZScgOiAnIzY2Y2RhYScsXG5cdFx0J21lZGl1bWJsdWUnIDogJyMwMDAwY2QnLFxuXHRcdCdtZWRpdW1vcmNoaWQnIDogJyNiYTU1ZDMnLFxuXHRcdCdtZWRpdW1wdXJwbGUnIDogJyM5MzcwZDgnLFxuXHRcdCdtZWRpdW1zZWFncmVlbicgOiAnIzNjYjM3MScsXG5cdFx0J21lZGl1bXNsYXRlYmx1ZScgOiAnIzdiNjhlZScsXG5cdFx0J21lZGl1bXNwcmluZ2dyZWVuJyA6ICcjMDBmYTlhJyxcblx0XHQnbWVkaXVtdHVycXVvaXNlJyA6ICcjNDhkMWNjJyxcblx0XHQnbWVkaXVtdmlvbGV0cmVkJyA6ICcjYzcxNTg1Jyxcblx0XHQnbWlkbmlnaHRibHVlJyA6ICcjMTkxOTcwJyxcblx0XHQnbWludGNyZWFtJyA6ICcjZjVmZmZhJyxcblx0XHQnbWlzdHlyb3NlJyA6ICcjZmZlNGUxJyxcblx0XHQnbW9jY2FzaW4nIDogJyNmZmU0YjUnLFxuXHRcdCduYXZham93aGl0ZScgOiAnI2ZmZGVhZCcsXG5cdFx0J25hdnknIDogJyMwMDAwODAnLFxuXHRcdCdvbGRsYWNlJyA6ICcjZmRmNWU2Jyxcblx0XHQnb2xpdmUnIDogJyM4MDgwMDAnLFxuXHRcdCdvbGl2ZWRyYWInIDogJyM2YjhlMjMnLFxuXHRcdCdvcmFuZ2UnIDogJyNmZmE1MDAnLFxuXHRcdCdvcmFuZ2VyZWQnIDogJyNmZjQ1MDAnLFxuXHRcdCdvcmNoaWQnIDogJyNkYTcwZDYnLFxuXHRcdCdwYWxlZ29sZGVucm9kJyA6ICcjZWVlOGFhJyxcblx0XHQncGFsZWdyZWVuJyA6ICcjOThmYjk4Jyxcblx0XHQncGFsZXR1cnF1b2lzZScgOiAnI2FmZWVlZScsXG5cdFx0J3BhbGV2aW9sZXRyZWQnIDogJyNkODcwOTMnLFxuXHRcdCdwYXBheWF3aGlwJyA6ICcjZmZlZmQ1Jyxcblx0XHQncGVhY2hwdWZmJyA6ICcjZmZkYWI5Jyxcblx0XHQncGVydScgOiAnI2NkODUzZicsXG5cdFx0J3BpbmsnIDogJyNmZmMwY2InLFxuXHRcdCdwbHVtJyA6ICcjZGRhMGRkJyxcblx0XHQncG93ZGVyYmx1ZScgOiAnI2IwZTBlNicsXG5cdFx0J3B1cnBsZScgOiAnIzgwMDA4MCcsXG5cdFx0J3JlZCcgOiAnI2ZmMDAwMCcsXG5cdFx0J3Jvc3licm93bicgOiAnI2JjOGY4ZicsXG5cdFx0J3JveWFsYmx1ZScgOiAnIzQxNjllMScsXG5cdFx0J3NhZGRsZWJyb3duJyA6ICcjOGI0NTEzJyxcblx0XHQnc2FsbW9uJyA6ICcjZmE4MDcyJyxcblx0XHQnc2FuZHlicm93bicgOiAnI2Y0YTQ2MCcsXG5cdFx0J3NlYWdyZWVuJyA6ICcjMmU4YjU3Jyxcblx0XHQnc2Vhc2hlbGwnIDogJyNmZmY1ZWUnLFxuXHRcdCdzaWVubmEnIDogJyNhMDUyMmQnLFxuXHRcdCdzaWx2ZXInIDogJyNjMGMwYzAnLFxuXHRcdCdza3libHVlJyA6ICcjODdjZWViJyxcblx0XHQnc2xhdGVibHVlJyA6ICcjNmE1YWNkJyxcblx0XHQnc2xhdGVncmF5JyA6ICcjNzA4MDkwJyxcblx0XHQnc25vdycgOiAnI2ZmZmFmYScsXG5cdFx0J3NwcmluZ2dyZWVuJyA6ICcjMDBmZjdmJyxcblx0XHQnc3RlZWxibHVlJyA6ICcjNDY4MmI0Jyxcblx0XHQndGFuJyA6ICcjZDJiNDhjJyxcblx0XHQndGVhbCcgOiAnIzAwODA4MCcsXG5cdFx0J3RoaXN0bGUnIDogJyNkOGJmZDgnLFxuXHRcdCd0b21hdG8nIDogJyNmZjYzNDcnLFxuXHRcdCd0dXJxdW9pc2UnIDogJyM0MGUwZDAnLFxuXHRcdCd2aW9sZXQnIDogJyNlZTgyZWUnLFxuXHRcdCd3aGVhdCcgOiAnI2Y1ZGViMycsXG5cdFx0J3doaXRlJyA6ICcjZmZmZmZmJyxcblx0XHQnd2hpdGVzbW9rZScgOiAnI2Y1ZjVmNScsXG5cdFx0J3llbGxvdycgOiAnI2ZmZmYwMCcsXG5cdFx0J3llbGxvd2dyZWVuJyA6ICcjOWFjZDMyJ1xuXHR9O1xuXG5cdHBhY2suYW5nbGVCZXR3ZWVuTGFyZ2VzdCA9IGZ1bmN0aW9uKGFuZ2xlcykge1xuXHRcdGlmIChhbmdsZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRhbmdsZSA6IDAsXG5cdFx0XHRcdGxhcmdlc3QgOiBtLlBJICogMlxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aWYgKGFuZ2xlcy5sZW5ndGggPT09IDEpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGFuZ2xlIDogYW5nbGVzWzBdICsgbS5QSSxcblx0XHRcdFx0bGFyZ2VzdCA6IG0uUEkgKiAyXG5cdFx0XHR9O1xuXHRcdH1cblx0XHR2YXIgbGFyZ2VzdCA9IDA7XG5cdFx0dmFyIGFuZ2xlID0gMDtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gYW5nbGVzLmxlbmd0aCAtIDE7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgZGlmID0gYW5nbGVzW2kgKyAxXSAtIGFuZ2xlc1tpXTtcblx0XHRcdGlmIChkaWYgPiBsYXJnZXN0KSB7XG5cdFx0XHRcdGxhcmdlc3QgPSBkaWY7XG5cdFx0XHRcdGFuZ2xlID0gKGFuZ2xlc1tpICsgMV0gKyBhbmdsZXNbaV0pIC8gMjtcblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIGxhc3QgPSBhbmdsZXNbMF0gKyBtLlBJICogMiAtIGFuZ2xlc1thbmdsZXMubGVuZ3RoIC0gMV07XG5cdFx0aWYgKGxhc3QgPiBsYXJnZXN0KSB7XG5cdFx0XHRhbmdsZSA9IGFuZ2xlc1swXSAtIGxhc3QgLyAyO1xuXHRcdFx0bGFyZ2VzdCA9IGxhc3Q7XG5cdFx0XHRpZiAoYW5nbGUgPCAwKSB7XG5cdFx0XHRcdGFuZ2xlICs9IG0uUEkgKiAyO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4ge1xuXHRcdFx0YW5nbGUgOiBhbmdsZSxcblx0XHRcdGxhcmdlc3QgOiBsYXJnZXN0XG5cdFx0fTtcblx0fTtcblxuXHRwYWNrLmlzQmV0d2VlbiA9IGZ1bmN0aW9uKHgsIGxlZnQsIHJpZ2h0KSB7XG5cdFx0aWYgKGxlZnQgPiByaWdodCkge1xuXHRcdFx0dmFyIHRtcCA9IGxlZnQ7XG5cdFx0XHRsZWZ0ID0gcmlnaHQ7XG5cdFx0XHRyaWdodCA9IHRtcDtcblx0XHR9XG5cdFx0cmV0dXJuIHggPj0gbGVmdCAmJiB4IDw9IHJpZ2h0O1xuXHR9O1xuXG5cdC8vIGJlIGNhcmVmdWwgbm90IHRvIHJlbW92ZSB0aGlzLCBhcyB0aGlzIHdpbGwgY2F1c2UgY29ycnVwdGlvbiBpc3N1ZXNcblx0Ly8gY29udGFjdCBpQ2hlbUxhYnMgZm9yIGluc3RydWN0aW9ucyB0byByZW1vdmUgdGhpc1xuXHRxKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHRpZihjICYmIGMuaUNoZW1MYWJzICYmIGMuaUNoZW1MYWJzLmNoZWNrRm9yVXBkYXRlcyl7XG5cdFx0XHRjLmlDaGVtTGFicy5jaGVja0ZvclVwZGF0ZXMoe30pO1xuXHRcdH1cblx0fSk7XG5cblx0cGFjay5nZXRSR0IgPSBmdW5jdGlvbihjb2xvciwgbXVsdGlwbGllcikge1xuXHRcdHZhciBlcnIgPSBbIDAsIDAsIDAgXTtcblx0XHRpZiAobmFtZWRDb2xvcnNbY29sb3IudG9Mb3dlckNhc2UoKV0pIHtcblx0XHRcdGNvbG9yID0gbmFtZWRDb2xvcnNbY29sb3IudG9Mb3dlckNhc2UoKV07XG5cdFx0fVxuXHRcdGlmIChjb2xvci5jaGFyQXQoMCkgPT09ICcjJykge1xuXHRcdFx0aWYgKGNvbG9yLmxlbmd0aCA9PT0gNCkge1xuXHRcdFx0XHRjb2xvciA9ICcjJyArIGNvbG9yLmNoYXJBdCgxKSArIGNvbG9yLmNoYXJBdCgxKSArIGNvbG9yLmNoYXJBdCgyKSArIGNvbG9yLmNoYXJBdCgyKSArIGNvbG9yLmNoYXJBdCgzKSArIGNvbG9yLmNoYXJBdCgzKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBbIHBhcnNlSW50KGNvbG9yLnN1YnN0cmluZygxLCAzKSwgMTYpIC8gMjU1LjAgKiBtdWx0aXBsaWVyLCBwYXJzZUludChjb2xvci5zdWJzdHJpbmcoMywgNSksIDE2KSAvIDI1NS4wICogbXVsdGlwbGllciwgcGFyc2VJbnQoY29sb3Iuc3Vic3RyaW5nKDUsIDcpLCAxNikgLyAyNTUuMCAqIG11bHRpcGxpZXIgXTtcblx0XHR9IGVsc2UgaWYgKGV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChjb2xvciwgJ3JnYicpKSB7XG5cdFx0XHR2YXIgY3MgPSBjb2xvci5yZXBsYWNlKC9yZ2JcXCh8XFwpL2csICcnKS5zcGxpdCgnLCcpO1xuXHRcdFx0aWYgKGNzLmxlbmd0aCAhPT0gMykge1xuXHRcdFx0XHRyZXR1cm4gZXJyO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIFsgcGFyc2VJbnQoY3NbMF0pIC8gMjU1LjAgKiBtdWx0aXBsaWVyLCBwYXJzZUludChjc1sxXSkgLyAyNTUuMCAqIG11bHRpcGxpZXIsIHBhcnNlSW50KGNzWzJdKSAvIDI1NS4wICogbXVsdGlwbGllciBdO1xuXHRcdH1cblx0XHRyZXR1cm4gZXJyO1xuXHR9O1xuXG5cdHBhY2suaHNsMnJnYiA9IGZ1bmN0aW9uKGgsIHMsIGwpIHtcblx0XHR2YXIgaHVlMnJnYiA9IGZ1bmN0aW9uKHAsIHEsIHQpIHtcblx0XHRcdGlmICh0IDwgMCkge1xuXHRcdFx0XHR0ICs9IDE7XG5cdFx0XHR9IGVsc2UgaWYgKHQgPiAxKSB7XG5cdFx0XHRcdHQgLT0gMTtcblx0XHRcdH1cblx0XHRcdGlmICh0IDwgMSAvIDYpIHtcblx0XHRcdFx0cmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7XG5cdFx0XHR9IGVsc2UgaWYgKHQgPCAxIC8gMikge1xuXHRcdFx0XHRyZXR1cm4gcTtcblx0XHRcdH0gZWxzZSBpZiAodCA8IDIgLyAzKSB7XG5cdFx0XHRcdHJldHVybiBwICsgKHEgLSBwKSAqICgyIC8gMyAtIHQpICogNjtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwO1xuXHRcdH07XG5cdFx0dmFyIHIsIGcsIGI7XG5cdFx0aWYgKHMgPT09IDApIHtcblx0XHRcdHIgPSBnID0gYiA9IGw7IC8vIGFjaHJvbWF0aWNcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHEgPSBsIDwgMC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuXHRcdFx0dmFyIHAgPSAyICogbCAtIHE7XG5cdFx0XHRyID0gaHVlMnJnYihwLCBxLCBoICsgMSAvIDMpO1xuXHRcdFx0ZyA9IGh1ZTJyZ2IocCwgcSwgaCk7XG5cdFx0XHRiID0gaHVlMnJnYihwLCBxLCBoIC0gMSAvIDMpO1xuXHRcdH1cblx0XHRyZXR1cm4gWyByICogMjU1LCBnICogMjU1LCBiICogMjU1IF07XG5cdH07XG5cblx0cGFjay5pZHgyY29sb3IgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdHZhciBoZXggPSB2YWx1ZS50b1N0cmluZygxNik7XG5cblx0XHQvLyBhZGQgJzAnIHBhZGRpbmdcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gNiAtIGhleC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRoZXggPSBcIjBcIiArIGhleDtcblx0XHR9XG5cblx0XHRyZXR1cm4gXCIjXCIgKyBoZXg7XG5cdH07XG5cblx0cGFjay5kaXN0YW5jZUZyb21Qb2ludFRvTGluZUluY2x1c2l2ZSA9IGZ1bmN0aW9uKHAsIGwxLCBsMiwgcmV0cmFjdCkge1xuXHRcdHZhciBsZW5ndGggPSBsMS5kaXN0YW5jZShsMik7XG5cdFx0dmFyIGFuZ2xlID0gbDEuYW5nbGUobDIpO1xuXHRcdHZhciBhbmdsZURpZiA9IG0uUEkgLyAyIC0gYW5nbGU7XG5cdFx0dmFyIG5ld0FuZ2xlUCA9IGwxLmFuZ2xlKHApICsgYW5nbGVEaWY7XG5cdFx0dmFyIHBEaXN0ID0gbDEuZGlzdGFuY2UocCk7XG5cdFx0dmFyIHBjb3BSb3QgPSBuZXcgc3RydWN0dXJlcy5Qb2ludChwRGlzdCAqIG0uY29zKG5ld0FuZ2xlUCksIC1wRGlzdCAqIG0uc2luKG5ld0FuZ2xlUCkpO1xuXHRcdHZhciBwdWxsID0gcmV0cmFjdD9yZXRyYWN0OjA7XG5cdFx0aWYgKHBhY2suaXNCZXR3ZWVuKC1wY29wUm90LnksIHB1bGwsIGxlbmd0aC1wdWxsKSkge1xuXHRcdFx0cmV0dXJuIG0uYWJzKHBjb3BSb3QueCk7XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fTtcblxuXHRwYWNrLmNhbGN1bGF0ZURpc3RhbmNlSW50ZXJpb3IgPSBmdW5jdGlvbih0bywgZnJvbSwgcikge1xuXHRcdGlmICh0aGlzLmlzQmV0d2Vlbihmcm9tLngsIHIueCwgci54ICsgci53KSAmJiB0aGlzLmlzQmV0d2Vlbihmcm9tLnksIHIueSwgci55ICsgci5oKSkge1xuXHRcdFx0cmV0dXJuIHRvLmRpc3RhbmNlKGZyb20pO1xuXHRcdH1cblx0XHQvLyBjYWxjdWxhdGVzIHRoZSBkaXN0YW5jZSB0aGF0IGEgbGluZSBuZWVkcyB0byByZW1vdmUgZnJvbSBpdHNlbGYgdG8gYmVcblx0XHQvLyBvdXRzaWRlIHRoYXQgcmVjdGFuZ2xlXG5cdFx0dmFyIGxpbmVzID0gW107XG5cdFx0Ly8gdG9wXG5cdFx0bGluZXMucHVzaCh7XG5cdFx0XHR4MSA6IHIueCxcblx0XHRcdHkxIDogci55LFxuXHRcdFx0eDIgOiByLnggKyByLncsXG5cdFx0XHR5MiA6IHIueVxuXHRcdH0pO1xuXHRcdC8vIGJvdHRvbVxuXHRcdGxpbmVzLnB1c2goe1xuXHRcdFx0eDEgOiByLngsXG5cdFx0XHR5MSA6IHIueSArIHIuaCxcblx0XHRcdHgyIDogci54ICsgci53LFxuXHRcdFx0eTIgOiByLnkgKyByLmhcblx0XHR9KTtcblx0XHQvLyBsZWZ0XG5cdFx0bGluZXMucHVzaCh7XG5cdFx0XHR4MSA6IHIueCxcblx0XHRcdHkxIDogci55LFxuXHRcdFx0eDIgOiByLngsXG5cdFx0XHR5MiA6IHIueSArIHIuaFxuXHRcdH0pO1xuXHRcdC8vIHJpZ2h0XG5cdFx0bGluZXMucHVzaCh7XG5cdFx0XHR4MSA6IHIueCArIHIudyxcblx0XHRcdHkxIDogci55LFxuXHRcdFx0eDIgOiByLnggKyByLncsXG5cdFx0XHR5MiA6IHIueSArIHIuaFxuXHRcdH0pO1xuXG5cdFx0dmFyIGludGVyc2VjdGlvbnMgPSBbXTtcblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0XHRcdHZhciBsID0gbGluZXNbaV07XG5cdFx0XHR2YXIgcCA9IHRoaXMuaW50ZXJzZWN0TGluZXMoZnJvbS54LCBmcm9tLnksIHRvLngsIHRvLnksIGwueDEsIGwueTEsIGwueDIsIGwueTIpO1xuXHRcdFx0aWYgKHApIHtcblx0XHRcdFx0aW50ZXJzZWN0aW9ucy5wdXNoKHApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoaW50ZXJzZWN0aW9ucy5sZW5ndGggPT09IDApIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0XHR2YXIgbWF4ID0gMDtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gaW50ZXJzZWN0aW9ucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgcCA9IGludGVyc2VjdGlvbnNbaV07XG5cdFx0XHR2YXIgZHggPSB0by54IC0gcC54O1xuXHRcdFx0dmFyIGR5ID0gdG8ueSAtIHAueTtcblx0XHRcdG1heCA9IG0ubWF4KG1heCwgbS5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KSk7XG5cdFx0fVxuXHRcdHJldHVybiBtYXg7XG5cdH07XG5cblx0cGFjay5pbnRlcnNlY3RMaW5lcyA9IGZ1bmN0aW9uKGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIGR4LCBkeSkge1xuXHRcdC8vIGNhbGN1bGF0ZSB0aGUgZGlyZWN0aW9uIHZlY3RvcnNcblx0XHRieCAtPSBheDtcblx0XHRieSAtPSBheTtcblx0XHRkeCAtPSBjeDtcblx0XHRkeSAtPSBjeTtcblxuXHRcdC8vIGFyZSB0aGV5IHBhcmFsbGVsP1xuXHRcdHZhciBkZW5vbWluYXRvciA9IGJ5ICogZHggLSBieCAqIGR5O1xuXHRcdGlmIChkZW5vbWluYXRvciA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGNhbGN1bGF0ZSBwb2ludCBvZiBpbnRlcnNlY3Rpb25cblx0XHR2YXIgciA9IChkeSAqIChheCAtIGN4KSAtIGR4ICogKGF5IC0gY3kpKSAvIGRlbm9taW5hdG9yO1xuXHRcdHZhciBzID0gKGJ5ICogKGF4IC0gY3gpIC0gYnggKiAoYXkgLSBjeSkpIC8gZGVub21pbmF0b3I7XG5cdFx0aWYgKChzID49IDApICYmIChzIDw9IDEpICYmIChyID49IDApICYmIChyIDw9IDEpKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR4IDogKGF4ICsgciAqIGJ4KSxcblx0XHRcdFx0eSA6IChheSArIHIgKiBieSlcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH07XG5cblx0cGFjay5jbGFtcCA9IGZ1bmN0aW9uKHZhbHVlLCBtaW4sIG1heCkge1xuXHRcdHJldHVybiB2YWx1ZSA8IG1pbiA/IG1pbiA6IHZhbHVlID4gbWF4ID8gbWF4IDogdmFsdWU7XG5cdH07XG5cblx0cGFjay5yYWluYm93QXQgPSBmdW5jdGlvbihpLCBpaSwgY29sb3JzKSB7XG5cblx0XHQvLyBUaGUgcmFpbmJvdyBjb2xvcnMgbGVuZ3RoIG11c3QgYmUgbW9yZSB0aGFuIG9uZSBjb2xvclxuXHRcdGlmIChjb2xvcnMubGVuZ3RoIDwgMSkge1xuXHRcdFx0Y29sb3JzLnB1c2goJyMwMDAwMDAnLCAnI0ZGRkZGRicpO1xuXHRcdH0gZWxzZSBpZiAoY29sb3JzLmxlbmd0aCA8IDIpIHtcblx0XHRcdGNvbG9ycy5wdXNoKCcjRkZGRkZGJyk7XG5cdFx0fVxuXG5cdFx0dmFyIHN0ZXAgPSBpaSAvIChjb2xvcnMubGVuZ3RoIC0gMSk7XG5cdFx0dmFyIGogPSBtLmZsb29yKGkgLyBzdGVwKTtcblx0XHR2YXIgdCA9IChpIC0gaiAqIHN0ZXApIC8gc3RlcDtcblx0XHR2YXIgc3RhcnRDb2xvciA9IHBhY2suZ2V0UkdCKGNvbG9yc1tqXSwgMSk7XG5cdFx0dmFyIGVuZENvbG9yID0gcGFjay5nZXRSR0IoY29sb3JzW2ogKyAxXSwgMSk7XG5cblx0XHR2YXIgbGVycENvbG9yID0gWyAoc3RhcnRDb2xvclswXSArIChlbmRDb2xvclswXSAtIHN0YXJ0Q29sb3JbMF0pICogdCkgKiAyNTUsIChzdGFydENvbG9yWzFdICsgKGVuZENvbG9yWzFdIC0gc3RhcnRDb2xvclsxXSkgKiB0KSAqIDI1NSwgKHN0YXJ0Q29sb3JbMl0gKyAoZW5kQ29sb3JbMl0gLSBzdGFydENvbG9yWzJdKSAqIHQpICogMjU1IF07XG5cblx0XHRyZXR1cm4gJ3JnYignICsgbGVycENvbG9yLmpvaW4oJywnKSArICcpJztcblx0fTtcblxuXHRwYWNrLmFuZ2xlQm91bmRzID0gZnVuY3Rpb24oYW5nbGUsIGNvbnZlcnRUb0RlZ3JlZXMsIGxpbWl0VG9QaSkge1xuXHRcdHZhciBmdWxsID0gbS5QSSoyO1xuXHRcdHdoaWxlKGFuZ2xlPDApe1xuXHRcdFx0YW5nbGUrPWZ1bGw7XG5cdFx0fVxuXHRcdHdoaWxlKGFuZ2xlPmZ1bGwpe1xuXHRcdFx0YW5nbGUtPWZ1bGw7XG5cdFx0fVxuXHRcdGlmKGxpbWl0VG9QaSAmJiBhbmdsZT5tLlBJKXtcblx0XHRcdGFuZ2xlID0gMiptLlBJLWFuZ2xlO1xuXHRcdH1cblx0XHRpZihjb252ZXJ0VG9EZWdyZWVzKXtcblx0XHRcdGFuZ2xlID0gMTgwKmFuZ2xlL20uUEk7XG5cdFx0fVxuXHRcdHJldHVybiBhbmdsZTtcblx0fTtcblxuXHRwYWNrLmlzUG9pbnRJblBvbHkgPSBmdW5jdGlvbihwb2x5LCBwdCkge1xuXHRcdGZvciAoIHZhciBjID0gZmFsc2UsIGkgPSAtMSwgbCA9IHBvbHkubGVuZ3RoLCBqID0gbCAtIDE7ICsraSA8IGw7IGogPSBpKSB7XG5cdFx0XHQoKHBvbHlbaV0ueSA8PSBwdC55ICYmIHB0LnkgPCBwb2x5W2pdLnkpIHx8IChwb2x5W2pdLnkgPD0gcHQueSAmJiBwdC55IDwgcG9seVtpXS55KSkgJiYgKHB0LnggPCAocG9seVtqXS54IC0gcG9seVtpXS54KSAqIChwdC55IC0gcG9seVtpXS55KSAvIChwb2x5W2pdLnkgLSBwb2x5W2ldLnkpICsgcG9seVtpXS54KSAmJiAoYyA9ICFjKTtcblx0XHR9XG5cdFx0cmV0dXJuIGM7XG5cdH07XG5cblx0cmV0dXJuIHBhY2s7XG5cbn0pKENoZW1Eb29kbGUsIENoZW1Eb29kbGUuZXh0ZW5zaW9ucywgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLCBDaGVtRG9vZGxlLmxpYi5qUXVlcnksIE1hdGgpO1xuXG4oZnVuY3Rpb24obWF0aCwgbSwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0bWF0aC5Cb3VuZHMgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF8gPSBtYXRoLkJvdW5kcy5wcm90b3R5cGU7XG5cdF8ubWluWCA9IF8ubWluWSA9IF8ubWluWiA9IEluZmluaXR5O1xuXHRfLm1heFggPSBfLm1heFkgPSBfLm1heFogPSAtSW5maW5pdHk7XG5cdF8uZXhwYW5kID0gZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIpIHtcblx0XHRpZiAoeDEgaW5zdGFuY2VvZiBtYXRoLkJvdW5kcykge1xuXHRcdFx0Ly8gb25seSBuZWVkIHRvIGNvbXBhcmUgbWluIGFuZCBtYXggc2luY2UgYm91bmRzIGFscmVhZHkgaGFzXG5cdFx0XHQvLyB0aGVtIG9yZGVyZWRcblx0XHRcdHRoaXMubWluWCA9IG0ubWluKHRoaXMubWluWCwgeDEubWluWCk7XG5cdFx0XHR0aGlzLm1pblkgPSBtLm1pbih0aGlzLm1pblksIHgxLm1pblkpO1xuXHRcdFx0dGhpcy5tYXhYID0gbS5tYXgodGhpcy5tYXhYLCB4MS5tYXhYKTtcblx0XHRcdHRoaXMubWF4WSA9IG0ubWF4KHRoaXMubWF4WSwgeDEubWF4WSk7XG5cdFx0XHRpZih4MS5tYXhaIT09SW5maW5pdHkpe1xuXHRcdFx0XHR0aGlzLm1pblogPSBtLm1pbih0aGlzLm1pblosIHgxLm1pblopO1xuXHRcdFx0XHR0aGlzLm1heFogPSBtLm1heCh0aGlzLm1heFosIHgxLm1heFopO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLm1pblggPSBtLm1pbih0aGlzLm1pblgsIHgxKTtcblx0XHRcdHRoaXMubWF4WCA9IG0ubWF4KHRoaXMubWF4WCwgeDEpO1xuXHRcdFx0dGhpcy5taW5ZID0gbS5taW4odGhpcy5taW5ZLCB5MSk7XG5cdFx0XHR0aGlzLm1heFkgPSBtLm1heCh0aGlzLm1heFksIHkxKTtcblx0XHRcdC8vIHRoZXNlIHR3byB2YWx1ZXMgY291bGQgYmUgMCwgc28gY2hlY2sgaWYgdW5kZWZpbmVkXG5cdFx0XHRpZiAoeDIgIT09IHVuZGVmaW5lZCAmJiB5MiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHRoaXMubWluWCA9IG0ubWluKHRoaXMubWluWCwgeDIpO1xuXHRcdFx0XHR0aGlzLm1heFggPSBtLm1heCh0aGlzLm1heFgsIHgyKTtcblx0XHRcdFx0dGhpcy5taW5ZID0gbS5taW4odGhpcy5taW5ZLCB5Mik7XG5cdFx0XHRcdHRoaXMubWF4WSA9IG0ubWF4KHRoaXMubWF4WSwgeTIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0Xy5leHBhbmQzRCA9IGZ1bmN0aW9uKHgxLCB5MSwgejEsIHgyLCB5MiwgejIpIHtcblx0XHR0aGlzLm1pblggPSBtLm1pbih0aGlzLm1pblgsIHgxKTtcblx0XHR0aGlzLm1heFggPSBtLm1heCh0aGlzLm1heFgsIHgxKTtcblx0XHR0aGlzLm1pblkgPSBtLm1pbih0aGlzLm1pblksIHkxKTtcblx0XHR0aGlzLm1heFkgPSBtLm1heCh0aGlzLm1heFksIHkxKTtcblx0XHR0aGlzLm1pblogPSBtLm1pbih0aGlzLm1pblosIHoxKTtcblx0XHR0aGlzLm1heFogPSBtLm1heCh0aGlzLm1heFosIHoxKTtcblx0XHQvLyB0aGVzZSB0d28gdmFsdWVzIGNvdWxkIGJlIDAsIHNvIGNoZWNrIGlmIHVuZGVmaW5lZFxuXHRcdGlmICh4MiAhPT0gdW5kZWZpbmVkICYmIHkyICE9PSB1bmRlZmluZWQgJiYgejIgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5taW5YID0gbS5taW4odGhpcy5taW5YLCB4Mik7XG5cdFx0XHR0aGlzLm1heFggPSBtLm1heCh0aGlzLm1heFgsIHgyKTtcblx0XHRcdHRoaXMubWluWSA9IG0ubWluKHRoaXMubWluWSwgeTIpO1xuXHRcdFx0dGhpcy5tYXhZID0gbS5tYXgodGhpcy5tYXhZLCB5Mik7XG5cdFx0XHR0aGlzLm1pblogPSBtLm1pbih0aGlzLm1pblosIHoyKTtcblx0XHRcdHRoaXMubWF4WiA9IG0ubWF4KHRoaXMubWF4WiwgejIpO1xuXHRcdH1cblx0fTtcblxufSkoQ2hlbURvb2RsZS5tYXRoLCBNYXRoKTtcblxuQ2hlbURvb2RsZS5mZWF0dXJlRGV0ZWN0aW9uID0gKGZ1bmN0aW9uKGlDaGVtTGFicywgcSwgZG9jdW1lbnQsIHdpbmRvdywgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIGZlYXR1cmVzID0ge307XG5cblx0ZmVhdHVyZXMuc3VwcG9ydHNfY2FudmFzID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykuZ2V0Q29udGV4dDtcblx0fTtcblxuXHRmZWF0dXJlcy5zdXBwb3J0c19jYW52YXNfdGV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICghZmVhdHVyZXMuc3VwcG9ydHNfY2FudmFzKCkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0dmFyIGR1bW15X2NhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuXHRcdHZhciBjb250ZXh0ID0gZHVtbXlfY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cdFx0cmV0dXJuIHR5cGVvZiBjb250ZXh0LmZpbGxUZXh0ID09PSAnZnVuY3Rpb24nO1xuXHR9O1xuXG5cdGZlYXR1cmVzLnN1cHBvcnRzX3dlYmdsID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGR1bW15X2NhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuXHRcdHRyeSB7XG5cdFx0XHRpZiAoZHVtbXlfY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJykpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZHVtbXlfY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGIpIHtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cdGZlYXR1cmVzLnN1cHBvcnRzX3hocjIgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gcS5zdXBwb3J0LmNvcnM7XG5cdH07XG5cblx0ZmVhdHVyZXMuc3VwcG9ydHNfdG91Y2ggPSBmdW5jdGlvbigpIHtcblx0XHQvLyBjaGVjayB0aGUgbW9iaWxlIG9zIHNvIHdlIGRvbid0IGludGVyZmVyZSB3aXRoIGh5YnJpZCBwY3Ncblx0XHRyZXR1cm4gJ29udG91Y2hzdGFydCcgaW4gd2luZG93ICYmICEhbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBob25lfGlQYWR8aVBvZHxBbmRyb2lkfEJsYWNrQmVycnl8QkIxMC9pKTtcblx0fTtcblxuXHRmZWF0dXJlcy5zdXBwb3J0c19nZXN0dXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICdvbmdlc3R1cmVzdGFydCcgaW4gd2luZG93O1xuXHR9O1xuXG5cdHJldHVybiBmZWF0dXJlcztcblxufSkoQ2hlbURvb2RsZS5pQ2hlbUxhYnMsIENoZW1Eb29kbGUubGliLmpRdWVyeSwgZG9jdW1lbnQsIHdpbmRvdyk7XG5cbi8vIGFsbCBzeW1ib2xzXG5DaGVtRG9vZGxlLlNZTUJPTFMgPSBbICdIJywgJ0hlJywgJ0xpJywgJ0JlJywgJ0InLCAnQycsICdOJywgJ08nLCAnRicsICdOZScsICdOYScsICdNZycsICdBbCcsICdTaScsICdQJywgJ1MnLCAnQ2wnLCAnQXInLCAnSycsICdDYScsICdTYycsICdUaScsICdWJywgJ0NyJywgJ01uJywgJ0ZlJywgJ0NvJywgJ05pJywgJ0N1JywgJ1puJywgJ0dhJywgJ0dlJywgJ0FzJywgJ1NlJywgJ0JyJywgJ0tyJywgJ1JiJywgJ1NyJywgJ1knLCAnWnInLCAnTmInLCAnTW8nLCAnVGMnLCAnUnUnLCAnUmgnLCAnUGQnLCAnQWcnLCAnQ2QnLCAnSW4nLCAnU24nLCAnU2InLCAnVGUnLCAnSScsICdYZScsICdDcycsICdCYScsICdMYScsICdDZScsICdQcicsICdOZCcsICdQbScsICdTbScsICdFdScsICdHZCcsICdUYicsICdEeScsICdIbycsICdFcicsICdUbScsICdZYicsICdMdScsICdIZicsICdUYScsICdXJywgJ1JlJywgJ09zJywgJ0lyJywgJ1B0JywgJ0F1JywgJ0hnJywgJ1RsJyxcblx0XHQnUGInLCAnQmknLCAnUG8nLCAnQXQnLCAnUm4nLCAnRnInLCAnUmEnLCAnQWMnLCAnVGgnLCAnUGEnLCAnVScsICdOcCcsICdQdScsICdBbScsICdDbScsICdCaycsICdDZicsICdFcycsICdGbScsICdNZCcsICdObycsICdMcicsICdSZicsICdEYicsICdTZycsICdCaCcsICdIcycsICdNdCcsICdEcycsICdSZycsICdDbicsICdOaCcsICdGbCcsICdNYycsICdMdicsICdUcycsICdPZycgXTtcblxuQ2hlbURvb2RsZS5FTEVNRU5UID0gKGZ1bmN0aW9uKFNZTUJPTFMsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdHZhciBFID0gW107XG5cblx0ZnVuY3Rpb24gRWxlbWVudChzeW1ib2wsIG5hbWUsIGF0b21pY051bWJlciwgYWRkSCwgY29sb3IsIGNvdmFsZW50UmFkaXVzLCB2ZFdSYWRpdXMsIHZhbGVuY3ksIG1hc3MpIHtcblx0XHR0aGlzLnN5bWJvbCA9IHN5bWJvbDtcblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXHRcdHRoaXMuYXRvbWljTnVtYmVyID0gYXRvbWljTnVtYmVyO1xuXHRcdHRoaXMuYWRkSCA9IGFkZEg7XG5cdFx0dGhpcy5qbW9sQ29sb3IgPSB0aGlzLnB5bW9sQ29sb3IgPSBjb2xvcjtcblx0XHR0aGlzLmNvdmFsZW50UmFkaXVzID0gY292YWxlbnRSYWRpdXM7XG5cdFx0dGhpcy52ZFdSYWRpdXMgPSB2ZFdSYWRpdXM7XG5cdFx0dGhpcy52YWxlbmN5ID0gdmFsZW5jeTtcblx0XHR0aGlzLm1hc3MgPSBtYXNzO1xuXHR9XG5cblx0RS5IID0gbmV3IEVsZW1lbnQoJ0gnLCAnSHlkcm9nZW4nLCAxLCBmYWxzZSwgJyNGRkZGRkYnLCAwLjMxLCAxLjEsIDEsIDEpO1xuXHRFLkhlID0gbmV3IEVsZW1lbnQoJ0hlJywgJ0hlbGl1bScsIDIsIGZhbHNlLCAnI0Q5RkZGRicsIDAuMjgsIDEuNCwgMCwgNCk7XG5cdEUuTGkgPSBuZXcgRWxlbWVudCgnTGknLCAnTGl0aGl1bScsIDMsIGZhbHNlLCAnI0NDODBGRicsIDEuMjgsIDEuODIsIDEsIDcpO1xuXHRFLkJlID0gbmV3IEVsZW1lbnQoJ0JlJywgJ0JlcnlsbGl1bScsIDQsIGZhbHNlLCAnI0MyRkYwMCcsIDAuOTYsIDEuNTMsIDIsIDkpO1xuXHRFLkIgPSBuZXcgRWxlbWVudCgnQicsICdCb3JvbicsIDUsIHRydWUsICcjRkZCNUI1JywgMC44NCwgMS45MiwgMywgMTEpO1xuXHRFLkMgPSBuZXcgRWxlbWVudCgnQycsICdDYXJib24nLCA2LCB0cnVlLCAnIzkwOTA5MCcsIDAuNzYsIDEuNywgNCwgMTIpO1xuXHRFLk4gPSBuZXcgRWxlbWVudCgnTicsICdOaXRyb2dlbicsIDcsIHRydWUsICcjMzA1MEY4JywgMC43MSwgMS41NSwgMywgMTQpO1xuXHRFLk8gPSBuZXcgRWxlbWVudCgnTycsICdPeHlnZW4nLCA4LCB0cnVlLCAnI0ZGMEQwRCcsIDAuNjYsIDEuNTIsIDIsIDE2KTtcblx0RS5GID0gbmV3IEVsZW1lbnQoJ0YnLCAnRmx1b3JpbmUnLCA5LCB0cnVlLCAnIzkwRTA1MCcsIDAuNTcsIDEuNDcsIDEsIDE5KTtcblx0RS5OZSA9IG5ldyBFbGVtZW50KCdOZScsICdOZW9uJywgMTAsIGZhbHNlLCAnI0IzRTNGNScsIDAuNTgsIDEuNTQsIDAsIDIwKTtcblx0RS5OYSA9IG5ldyBFbGVtZW50KCdOYScsICdTb2RpdW0nLCAxMSwgZmFsc2UsICcjQUI1Q0YyJywgMS42NiwgMi4yNywgMSwgMjMpO1xuXHRFLk1nID0gbmV3IEVsZW1lbnQoJ01nJywgJ01hZ25lc2l1bScsIDEyLCBmYWxzZSwgJyM4QUZGMDAnLCAxLjQxLCAxLjczLCAwLCAyNCk7XG5cdEUuQWwgPSBuZXcgRWxlbWVudCgnQWwnLCAnQWx1bWludW0nLCAxMywgZmFsc2UsICcjQkZBNkE2JywgMS4yMSwgMS44NCwgMCwgMjcpO1xuXHRFLlNpID0gbmV3IEVsZW1lbnQoJ1NpJywgJ1NpbGljb24nLCAxNCwgdHJ1ZSwgJyNGMEM4QTAnLCAxLjExLCAyLjEsIDQsIDI4KTtcblx0RS5QID0gbmV3IEVsZW1lbnQoJ1AnLCAnUGhvc3Bob3J1cycsIDE1LCB0cnVlLCAnI0ZGODAwMCcsIDEuMDcsIDEuOCwgMywgMzEpO1xuXHRFLlMgPSBuZXcgRWxlbWVudCgnUycsICdTdWxmdXInLCAxNiwgdHJ1ZSwgJyNGRkZGMzAnLCAxLjA1LCAxLjgsIDIsIDMyKTtcblx0RS5DbCA9IG5ldyBFbGVtZW50KCdDbCcsICdDaGxvcmluZScsIDE3LCB0cnVlLCAnIzFGRjAxRicsIDEuMDIsIDEuNzUsIDEsIDM1KTtcblx0RS5BciA9IG5ldyBFbGVtZW50KCdBcicsICdBcmdvbicsIDE4LCBmYWxzZSwgJyM4MEQxRTMnLCAxLjA2LCAxLjg4LCAwLCA0MCk7XG5cdEUuSyA9IG5ldyBFbGVtZW50KCdLJywgJ1BvdGFzc2l1bScsIDE5LCBmYWxzZSwgJyM4RjQwRDQnLCAyLjAzLCAyLjc1LCAwLCAzOSk7XG5cdEUuQ2EgPSBuZXcgRWxlbWVudCgnQ2EnLCAnQ2FsY2l1bScsIDIwLCBmYWxzZSwgJyMzREZGMDAnLCAxLjc2LCAyLjMxLCAwLCA0MCk7XG5cdEUuU2MgPSBuZXcgRWxlbWVudCgnU2MnLCAnU2NhbmRpdW0nLCAyMSwgZmFsc2UsICcjRTZFNkU2JywgMS43LCAwLCAwLCA0NSk7XG5cdEUuVGkgPSBuZXcgRWxlbWVudCgnVGknLCAnVGl0YW5pdW0nLCAyMiwgZmFsc2UsICcjQkZDMkM3JywgMS42LCAwLCAxLCA0OCk7XG5cdEUuViA9IG5ldyBFbGVtZW50KCdWJywgJ1ZhbmFkaXVtJywgMjMsIGZhbHNlLCAnI0E2QTZBQicsIDEuNTMsIDAsIDEsIDUxKTtcblx0RS5DciA9IG5ldyBFbGVtZW50KCdDcicsICdDaHJvbWl1bScsIDI0LCBmYWxzZSwgJyM4QTk5QzcnLCAxLjM5LCAwLCAyLCA1Mik7XG5cdEUuTW4gPSBuZXcgRWxlbWVudCgnTW4nLCAnTWFuZ2FuZXNlJywgMjUsIGZhbHNlLCAnIzlDN0FDNycsIDEuMzksIDAsIDMsIDU1KTtcblx0RS5GZSA9IG5ldyBFbGVtZW50KCdGZScsICdJcm9uJywgMjYsIGZhbHNlLCAnI0UwNjYzMycsIDEuMzIsIDAsIDIsIDU2KTtcblx0RS5DbyA9IG5ldyBFbGVtZW50KCdDbycsICdDb2JhbHQnLCAyNywgZmFsc2UsICcjRjA5MEEwJywgMS4yNiwgMCwgMSwgNTkpO1xuXHRFLk5pID0gbmV3IEVsZW1lbnQoJ05pJywgJ05pY2tlbCcsIDI4LCBmYWxzZSwgJyM1MEQwNTAnLCAxLjI0LCAxLjYzLCAxLCA1OCk7XG5cdEUuQ3UgPSBuZXcgRWxlbWVudCgnQ3UnLCAnQ29wcGVyJywgMjksIGZhbHNlLCAnI0M4ODAzMycsIDEuMzIsIDEuNCwgMCwgNjMpO1xuXHRFLlpuID0gbmV3IEVsZW1lbnQoJ1puJywgJ1ppbmMnLCAzMCwgZmFsc2UsICcjN0Q4MEIwJywgMS4yMiwgMS4zOSwgMCwgNjQpO1xuXHRFLkdhID0gbmV3IEVsZW1lbnQoJ0dhJywgJ0dhbGxpdW0nLCAzMSwgZmFsc2UsICcjQzI4RjhGJywgMS4yMiwgMS44NywgMCwgNjkpO1xuXHRFLkdlID0gbmV3IEVsZW1lbnQoJ0dlJywgJ0dlcm1hbml1bScsIDMyLCBmYWxzZSwgJyM2NjhGOEYnLCAxLjIsIDIuMTEsIDQsIDc0KTtcblx0RS5BcyA9IG5ldyBFbGVtZW50KCdBcycsICdBcnNlbmljJywgMzMsIHRydWUsICcjQkQ4MEUzJywgMS4xOSwgMS44NSwgMywgNzUpO1xuXHRFLlNlID0gbmV3IEVsZW1lbnQoJ1NlJywgJ1NlbGVuaXVtJywgMzQsIHRydWUsICcjRkZBMTAwJywgMS4yLCAxLjksIDIsIDgwKTtcblx0RS5CciA9IG5ldyBFbGVtZW50KCdCcicsICdCcm9taW5lJywgMzUsIHRydWUsICcjQTYyOTI5JywgMS4yLCAxLjg1LCAxLCA3OSk7XG5cdEUuS3IgPSBuZXcgRWxlbWVudCgnS3InLCAnS3J5cHRvbicsIDM2LCBmYWxzZSwgJyM1Q0I4RDEnLCAxLjE2LCAyLjAyLCAwLCA4NCk7XG5cdEUuUmIgPSBuZXcgRWxlbWVudCgnUmInLCAnUnViaWRpdW0nLCAzNywgZmFsc2UsICcjNzAyRUIwJywgMi4yLCAzLjAzLCAwLCA4NSk7XG5cdEUuU3IgPSBuZXcgRWxlbWVudCgnU3InLCAnU3Ryb250aXVtJywgMzgsIGZhbHNlLCAnIzAwRkYwMCcsIDEuOTUsIDIuNDksIDAsIDg4KTtcblx0RS5ZID0gbmV3IEVsZW1lbnQoJ1knLCAnWXR0cml1bScsIDM5LCBmYWxzZSwgJyM5NEZGRkYnLCAxLjksIDAsIDAsIDg5KTtcblx0RS5aciA9IG5ldyBFbGVtZW50KCdacicsICdaaXJjb25pdW0nLCA0MCwgZmFsc2UsICcjOTRFMEUwJywgMS43NSwgMCwgMCwgOTApO1xuXHRFLk5iID0gbmV3IEVsZW1lbnQoJ05iJywgJ05pb2JpdW0nLCA0MSwgZmFsc2UsICcjNzNDMkM5JywgMS42NCwgMCwgMSwgOTMpO1xuXHRFLk1vID0gbmV3IEVsZW1lbnQoJ01vJywgJ01vbHliZGVudW0nLCA0MiwgZmFsc2UsICcjNTRCNUI1JywgMS41NCwgMCwgMiwgOTgpO1xuXHRFLlRjID0gbmV3IEVsZW1lbnQoJ1RjJywgJ1RlY2huZXRpdW0nLCA0MywgZmFsc2UsICcjM0I5RTlFJywgMS40NywgMCwgMywgMCk7XG5cdEUuUnUgPSBuZXcgRWxlbWVudCgnUnUnLCAnUnV0aGVuaXVtJywgNDQsIGZhbHNlLCAnIzI0OEY4RicsIDEuNDYsIDAsIDIsIDEwMik7XG5cdEUuUmggPSBuZXcgRWxlbWVudCgnUmgnLCAnUmhvZGl1bScsIDQ1LCBmYWxzZSwgJyMwQTdEOEMnLCAxLjQyLCAwLCAxLCAxMDMpO1xuXHRFLlBkID0gbmV3IEVsZW1lbnQoJ1BkJywgJ1BhbGxhZGl1bScsIDQ2LCBmYWxzZSwgJyMwMDY5ODUnLCAxLjM5LCAxLjYzLCAwLCAxMDYpO1xuXHRFLkFnID0gbmV3IEVsZW1lbnQoJ0FnJywgJ1NpbHZlcicsIDQ3LCBmYWxzZSwgJyNDMEMwQzAnLCAxLjQ1LCAxLjcyLCAwLCAxMDcpO1xuXHRFLkNkID0gbmV3IEVsZW1lbnQoJ0NkJywgJ0NhZG1pdW0nLCA0OCwgZmFsc2UsICcjRkZEOThGJywgMS40NCwgMS41OCwgMCwgMTE0KTtcblx0RS5JbiA9IG5ldyBFbGVtZW50KCdJbicsICdJbmRpdW0nLCA0OSwgZmFsc2UsICcjQTY3NTczJywgMS40MiwgMS45MywgMCwgMTE1KTtcblx0RS5TbiA9IG5ldyBFbGVtZW50KCdTbicsICdUaW4nLCA1MCwgZmFsc2UsICcjNjY4MDgwJywgMS4zOSwgMi4xNywgNCwgMTIwKTtcblx0RS5TYiA9IG5ldyBFbGVtZW50KCdTYicsICdBbnRpbW9ueScsIDUxLCBmYWxzZSwgJyM5RTYzQjUnLCAxLjM5LCAyLjA2LCAzLCAxMjEpO1xuXHRFLlRlID0gbmV3IEVsZW1lbnQoJ1RlJywgJ1RlbGx1cml1bScsIDUyLCB0cnVlLCAnI0Q0N0EwMCcsIDEuMzgsIDIuMDYsIDIsIDEzMCk7XG5cdEUuSSA9IG5ldyBFbGVtZW50KCdJJywgJ0lvZGluZScsIDUzLCB0cnVlLCAnIzk0MDA5NCcsIDEuMzksIDEuOTgsIDEsIDEyNyk7XG5cdEUuWGUgPSBuZXcgRWxlbWVudCgnWGUnLCAnWGVub24nLCA1NCwgZmFsc2UsICcjNDI5RUIwJywgMS40LCAyLjE2LCAwLCAxMzIpO1xuXHRFLkNzID0gbmV3IEVsZW1lbnQoJ0NzJywgJ0Nlc2l1bScsIDU1LCBmYWxzZSwgJyM1NzE3OEYnLCAyLjQ0LCAzLjQzLCAwLCAxMzMpO1xuXHRFLkJhID0gbmV3IEVsZW1lbnQoJ0JhJywgJ0Jhcml1bScsIDU2LCBmYWxzZSwgJyMwMEM5MDAnLCAyLjE1LCAyLjY4LCAwLCAxMzgpO1xuXHRFLkxhID0gbmV3IEVsZW1lbnQoJ0xhJywgJ0xhbnRoYW51bScsIDU3LCBmYWxzZSwgJyM3MEQ0RkYnLCAyLjA3LCAwLCAwLCAxMzkpO1xuXHRFLkNlID0gbmV3IEVsZW1lbnQoJ0NlJywgJ0Nlcml1bScsIDU4LCBmYWxzZSwgJyNGRkZGQzcnLCAyLjA0LCAwLCAwLCAxNDApO1xuXHRFLlByID0gbmV3IEVsZW1lbnQoJ1ByJywgJ1ByYXNlb2R5bWl1bScsIDU5LCBmYWxzZSwgJyNEOUZGQzcnLCAyLjAzLCAwLCAwLCAxNDEpO1xuXHRFLk5kID0gbmV3IEVsZW1lbnQoJ05kJywgJ05lb2R5bWl1bScsIDYwLCBmYWxzZSwgJyNDN0ZGQzcnLCAyLjAxLCAwLCAwLCAxNDIpO1xuXHRFLlBtID0gbmV3IEVsZW1lbnQoJ1BtJywgJ1Byb21ldGhpdW0nLCA2MSwgZmFsc2UsICcjQTNGRkM3JywgMS45OSwgMCwgMCwgMCk7XG5cdEUuU20gPSBuZXcgRWxlbWVudCgnU20nLCAnU2FtYXJpdW0nLCA2MiwgZmFsc2UsICcjOEZGRkM3JywgMS45OCwgMCwgMCwgMTUyKTtcblx0RS5FdSA9IG5ldyBFbGVtZW50KCdFdScsICdFdXJvcGl1bScsIDYzLCBmYWxzZSwgJyM2MUZGQzcnLCAxLjk4LCAwLCAwLCAxNTMpO1xuXHRFLkdkID0gbmV3IEVsZW1lbnQoJ0dkJywgJ0dhZG9saW5pdW0nLCA2NCwgZmFsc2UsICcjNDVGRkM3JywgMS45NiwgMCwgMCwgMTU4KTtcblx0RS5UYiA9IG5ldyBFbGVtZW50KCdUYicsICdUZXJiaXVtJywgNjUsIGZhbHNlLCAnIzMwRkZDNycsIDEuOTQsIDAsIDAsIDE1OSk7XG5cdEUuRHkgPSBuZXcgRWxlbWVudCgnRHknLCAnRHlzcHJvc2l1bScsIDY2LCBmYWxzZSwgJyMxRkZGQzcnLCAxLjkyLCAwLCAwLCAxNjQpO1xuXHRFLkhvID0gbmV3IEVsZW1lbnQoJ0hvJywgJ0hvbG1pdW0nLCA2NywgZmFsc2UsICcjMDBGRjlDJywgMS45MiwgMCwgMCwgMTY1KTtcblx0RS5FciA9IG5ldyBFbGVtZW50KCdFcicsICdFcmJpdW0nLCA2OCwgZmFsc2UsICcjMDBFNjc1JywgMS44OSwgMCwgMCwgMTY2KTtcblx0RS5UbSA9IG5ldyBFbGVtZW50KCdUbScsICdUaHVsaXVtJywgNjksIGZhbHNlLCAnIzAwRDQ1MicsIDEuOSwgMCwgMCwgMTY5KTtcblx0RS5ZYiA9IG5ldyBFbGVtZW50KCdZYicsICdZdHRlcmJpdW0nLCA3MCwgZmFsc2UsICcjMDBCRjM4JywgMS44NywgMCwgMCwgMTc0KTtcblx0RS5MdSA9IG5ldyBFbGVtZW50KCdMdScsICdMdXRldGl1bScsIDcxLCBmYWxzZSwgJyMwMEFCMjQnLCAxLjg3LCAwLCAwLCAxNzUpO1xuXHRFLkhmID0gbmV3IEVsZW1lbnQoJ0hmJywgJ0hhZm5pdW0nLCA3MiwgZmFsc2UsICcjNERDMkZGJywgMS43NSwgMCwgMCwgMTgwKTtcblx0RS5UYSA9IG5ldyBFbGVtZW50KCdUYScsICdUYW50YWx1bScsIDczLCBmYWxzZSwgJyM0REE2RkYnLCAxLjcsIDAsIDEsIDE4MSk7XG5cdEUuVyA9IG5ldyBFbGVtZW50KCdXJywgJ1R1bmdzdGVuJywgNzQsIGZhbHNlLCAnIzIxOTRENicsIDEuNjIsIDAsIDIsIDE4NCk7XG5cdEUuUmUgPSBuZXcgRWxlbWVudCgnUmUnLCAnUmhlbml1bScsIDc1LCBmYWxzZSwgJyMyNjdEQUInLCAxLjUxLCAwLCAzLCAxODcpO1xuXHRFLk9zID0gbmV3IEVsZW1lbnQoJ09zJywgJ09zbWl1bScsIDc2LCBmYWxzZSwgJyMyNjY2OTYnLCAxLjQ0LCAwLCAyLCAxOTIpO1xuXHRFLklyID0gbmV3IEVsZW1lbnQoJ0lyJywgJ0lyaWRpdW0nLCA3NywgZmFsc2UsICcjMTc1NDg3JywgMS40MSwgMCwgMywgMTkzKTtcblx0RS5QdCA9IG5ldyBFbGVtZW50KCdQdCcsICdQbGF0aW51bScsIDc4LCBmYWxzZSwgJyNEMEQwRTAnLCAxLjM2LCAxLjc1LCAwLCAxOTUpO1xuXHRFLkF1ID0gbmV3IEVsZW1lbnQoJ0F1JywgJ0dvbGQnLCA3OSwgZmFsc2UsICcjRkZEMTIzJywgMS4zNiwgMS42NiwgMSwgMTk3KTtcblx0RS5IZyA9IG5ldyBFbGVtZW50KCdIZycsICdNZXJjdXJ5JywgODAsIGZhbHNlLCAnI0I4QjhEMCcsIDEuMzIsIDEuNTUsIDAsIDIwMik7XG5cdEUuVGwgPSBuZXcgRWxlbWVudCgnVGwnLCAnVGhhbGxpdW0nLCA4MSwgZmFsc2UsICcjQTY1NDREJywgMS40NSwgMS45NiwgMCwgMjA1KTtcblx0RS5QYiA9IG5ldyBFbGVtZW50KCdQYicsICdMZWFkJywgODIsIGZhbHNlLCAnIzU3NTk2MScsIDEuNDYsIDIuMDIsIDQsIDIwOCk7XG5cdEUuQmkgPSBuZXcgRWxlbWVudCgnQmknLCAnQmlzbXV0aCcsIDgzLCBmYWxzZSwgJyM5RTRGQjUnLCAxLjQ4LCAyLjA3LCAzLCAyMDkpO1xuXHRFLlBvID0gbmV3IEVsZW1lbnQoJ1BvJywgJ1BvbG9uaXVtJywgODQsIGZhbHNlLCAnI0FCNUMwMCcsIDEuNCwgMS45NywgMiwgMCk7XG5cdEUuQXQgPSBuZXcgRWxlbWVudCgnQXQnLCAnQXN0YXRpbmUnLCA4NSwgdHJ1ZSwgJyM3NTRGNDUnLCAxLjUsIDIuMDIsIDEsIDApO1xuXHRFLlJuID0gbmV3IEVsZW1lbnQoJ1JuJywgJ1JhZG9uJywgODYsIGZhbHNlLCAnIzQyODI5NicsIDEuNSwgMi4yLCAwLCAwKTtcblx0RS5GciA9IG5ldyBFbGVtZW50KCdGcicsICdGcmFuY2l1bScsIDg3LCBmYWxzZSwgJyM0MjAwNjYnLCAyLjYsIDMuNDgsIDAsIDApO1xuXHRFLlJhID0gbmV3IEVsZW1lbnQoJ1JhJywgJ1JhZGl1bScsIDg4LCBmYWxzZSwgJyMwMDdEMDAnLCAyLjIxLCAyLjgzLCAwLCAwKTtcblx0RS5BYyA9IG5ldyBFbGVtZW50KCdBYycsICdBY3Rpbml1bScsIDg5LCBmYWxzZSwgJyM3MEFCRkEnLCAyLjE1LCAwLCAwLCAwKTtcblx0RS5UaCA9IG5ldyBFbGVtZW50KCdUaCcsICdUaG9yaXVtJywgOTAsIGZhbHNlLCAnIzAwQkFGRicsIDIuMDYsIDAsIDAsIDIzMik7XG5cdEUuUGEgPSBuZXcgRWxlbWVudCgnUGEnLCAnUHJvdGFjdGluaXVtJywgOTEsIGZhbHNlLCAnIzAwQTFGRicsIDIsIDAsIDAsIDIzMSk7XG5cdEUuVSA9IG5ldyBFbGVtZW50KCdVJywgJ1VyYW5pdW0nLCA5MiwgZmFsc2UsICcjMDA4RkZGJywgMS45NiwgMS44NiwgMCwgMjM4KTtcblx0RS5OcCA9IG5ldyBFbGVtZW50KCdOcCcsICdOZXB0dW5pdW0nLCA5MywgZmFsc2UsICcjMDA4MEZGJywgMS45LCAwLCAwLCAwKTtcblx0RS5QdSA9IG5ldyBFbGVtZW50KCdQdScsICdQbHV0b25pdW0nLCA5NCwgZmFsc2UsICcjMDA2QkZGJywgMS44NywgMCwgMCwgMCk7XG5cdEUuQW0gPSBuZXcgRWxlbWVudCgnQW0nLCAnQW1lcmljaXVtJywgOTUsIGZhbHNlLCAnIzU0NUNGMicsIDEuOCwgMCwgMCwgMCk7XG5cdEUuQ20gPSBuZXcgRWxlbWVudCgnQ20nLCAnQ3VyaXVtJywgOTYsIGZhbHNlLCAnIzc4NUNFMycsIDEuNjksIDAsIDAsIDApO1xuXHRFLkJrID0gbmV3IEVsZW1lbnQoJ0JrJywgJ0JlcmtlbGl1bScsIDk3LCBmYWxzZSwgJyM4QTRGRTMnLCAwLCAwLCAwLCAwKTtcblx0RS5DZiA9IG5ldyBFbGVtZW50KCdDZicsICdDYWxpZm9ybml1bScsIDk4LCBmYWxzZSwgJyNBMTM2RDQnLCAwLCAwLCAwLCAwKTtcblx0RS5FcyA9IG5ldyBFbGVtZW50KCdFcycsICdFaW5zdGVpbml1bScsIDk5LCBmYWxzZSwgJyNCMzFGRDQnLCAwLCAwLCAwLCAwKTtcblx0RS5GbSA9IG5ldyBFbGVtZW50KCdGbScsICdGZXJtaXVtJywgMTAwLCBmYWxzZSwgJyNCMzFGQkEnLCAwLCAwLCAwLCAwKTtcblx0RS5NZCA9IG5ldyBFbGVtZW50KCdNZCcsICdNZW5kZWxldml1bScsIDEwMSwgZmFsc2UsICcjQjMwREE2JywgMCwgMCwgMCwgMCk7XG5cdEUuTm8gPSBuZXcgRWxlbWVudCgnTm8nLCAnTm9iZWxpdW0nLCAxMDIsIGZhbHNlLCAnI0JEMEQ4NycsIDAsIDAsIDAsIDApO1xuXHRFLkxyID0gbmV3IEVsZW1lbnQoJ0xyJywgJ0xhd3JlbmNpdW0nLCAxMDMsIGZhbHNlLCAnI0M3MDA2NicsIDAsIDAsIDAsIDApO1xuXHRFLlJmID0gbmV3IEVsZW1lbnQoJ1JmJywgJ1J1dGhlcmZvcmRpdW0nLCAxMDQsIGZhbHNlLCAnI0NDMDA1OScsIDAsIDAsIDAsIDApO1xuXHRFLkRiID0gbmV3IEVsZW1lbnQoJ0RiJywgJ0R1Ym5pdW0nLCAxMDUsIGZhbHNlLCAnI0QxMDA0RicsIDAsIDAsIDAsIDApO1xuXHRFLlNnID0gbmV3IEVsZW1lbnQoJ1NnJywgJ1NlYWJvcmdpdW0nLCAxMDYsIGZhbHNlLCAnI0Q5MDA0NScsIDAsIDAsIDAsIDApO1xuXHRFLkJoID0gbmV3IEVsZW1lbnQoJ0JoJywgJ0JvaHJpdW0nLCAxMDcsIGZhbHNlLCAnI0UwMDAzOCcsIDAsIDAsIDAsIDApO1xuXHRFLkhzID0gbmV3IEVsZW1lbnQoJ0hzJywgJ0hhc3NpdW0nLCAxMDgsIGZhbHNlLCAnI0U2MDAyRScsIDAsIDAsIDAsIDApO1xuXHRFLk10ID0gbmV3IEVsZW1lbnQoJ010JywgJ01laXRuZXJpdW0nLCAxMDksIGZhbHNlLCAnI0VCMDAyNicsIDAsIDAsIDAsIDApO1xuXHRFLkRzID0gbmV3IEVsZW1lbnQoJ0RzJywgJ0Rhcm1zdGFkdGl1bScsIDExMCwgZmFsc2UsICcjMDAwMDAwJywgMCwgMCwgMCwgMCk7XG5cdEUuUmcgPSBuZXcgRWxlbWVudCgnUmcnLCAnUm9lbnRnZW5pdW0nLCAxMTEsIGZhbHNlLCAnIzAwMDAwMCcsIDAsIDAsIDAsIDApO1xuXHRFLkNuID0gbmV3IEVsZW1lbnQoJ0NuJywgJ0NvcGVybmljaXVtJywgMTEyLCBmYWxzZSwgJyMwMDAwMDAnLCAwLCAwLCAwLCAwKTtcblx0RS5OaCA9IG5ldyBFbGVtZW50KCdOaCcsICdOaWhvbml1bScsIDExMywgZmFsc2UsICcjMDAwMDAwJywgMCwgMCwgMCwgMCk7XG5cdEUuRmwgPSBuZXcgRWxlbWVudCgnRmwnLCAnRmxlcm92aXVtJywgMTE0LCBmYWxzZSwgJyMwMDAwMDAnLCAwLCAwLCAwLCAwKTtcblx0RS5NYyA9IG5ldyBFbGVtZW50KCdNYycsICdNb3Njb3ZpdW0nLCAxMTUsIGZhbHNlLCAnIzAwMDAwMCcsIDAsIDAsIDAsIDApO1xuXHRFLkx2ID0gbmV3IEVsZW1lbnQoJ0x2JywgJ0xpdmVybW9yaXVtJywgMTE2LCBmYWxzZSwgJyMwMDAwMDAnLCAwLCAwLCAwLCAwKTtcblx0RS5UcyA9IG5ldyBFbGVtZW50KCdUcycsICdUZW5uZXNzaW5lJywgMTE3LCBmYWxzZSwgJyMwMDAwMDAnLCAwLCAwLCAwLCAwKTtcblx0RS5PZyA9IG5ldyBFbGVtZW50KCdPZycsICdPZ2FuZXNzb24nLCAxMTgsIGZhbHNlLCAnIzAwMDAwMCcsIDAsIDAsIDAsIDApO1xuXG5cdEUuSC5weW1vbENvbG9yID0gJyNFNkU2RTYnO1xuXHRFLkMucHltb2xDb2xvciA9ICcjMzNGRjMzJztcblx0RS5OLnB5bW9sQ29sb3IgPSAnIzMzMzNGRic7XG5cdEUuTy5weW1vbENvbG9yID0gJyNGRjRENEQnO1xuXHRFLkYucHltb2xDb2xvciA9ICcjQjNGRkZGJztcblx0RS5TLnB5bW9sQ29sb3IgPSAnI0U2QzY0MCc7XG5cblx0cmV0dXJuIEU7XG5cbn0pKENoZW1Eb29kbGUuU1lNQk9MUyk7XG5DaGVtRG9vZGxlLlJFU0lEVUUgPSAoZnVuY3Rpb24odW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIFIgPSBbXTtcblxuXHRmdW5jdGlvbiBSZXNpZHVlKHN5bWJvbCwgbmFtZSwgcG9sYXIsIGFtaW5vQ29sb3IsIHNoYXBlbHlDb2xvciwgYWNpZGl0eSkge1xuXHRcdHRoaXMuc3ltYm9sID0gc3ltYm9sO1xuXHRcdHRoaXMubmFtZSA9IG5hbWU7XG5cdFx0dGhpcy5wb2xhciA9IHBvbGFyO1xuXHRcdHRoaXMuYW1pbm9Db2xvciA9IGFtaW5vQ29sb3I7XG5cdFx0dGhpcy5zaGFwZWx5Q29sb3IgPSBzaGFwZWx5Q29sb3I7XG5cdFx0dGhpcy5hY2lkaXR5ID0gYWNpZGl0eTtcblx0fVxuXG5cdFIuQWxhID0gbmV3IFJlc2lkdWUoJ0FsYScsICdBbGFuaW5lJywgZmFsc2UsICcjQzhDOEM4JywgJyM4Q0ZGOEMnLCAwKTtcblx0Ui5BcmcgPSBuZXcgUmVzaWR1ZSgnQXJnJywgJ0FyZ2luaW5lJywgdHJ1ZSwgJyMxNDVBRkYnLCAnIzAwMDA3QycsIDEpO1xuXHRSLkFzbiA9IG5ldyBSZXNpZHVlKCdBc24nLCAnQXNwYXJhZ2luZScsIHRydWUsICcjMDBEQ0RDJywgJyNGRjdDNzAnLCAwKTtcblx0Ui5Bc3AgPSBuZXcgUmVzaWR1ZSgnQXNwJywgJ0FzcGFydGljIEFjaWQnLCB0cnVlLCAnI0U2MEEwQScsICcjQTAwMDQyJywgLTEpO1xuXHRSLkN5cyA9IG5ldyBSZXNpZHVlKCdDeXMnLCAnQ3lzdGVpbmUnLCB0cnVlLCAnI0U2RTYwMCcsICcjRkZGRjcwJywgMCk7XG5cdFIuR2xuID0gbmV3IFJlc2lkdWUoJ0dsbicsICdHbHV0YW1pbmUnLCB0cnVlLCAnIzAwRENEQycsICcjRkY0QzRDJywgMCk7XG5cdFIuR2x1ID0gbmV3IFJlc2lkdWUoJ0dsdScsICdHbHV0YW1pYyBBY2lkJywgdHJ1ZSwgJyNFNjBBMEEnLCAnIzY2MDAwMCcsIC0xKTtcblx0Ui5HbHkgPSBuZXcgUmVzaWR1ZSgnR2x5JywgJ0dseWNpbmUnLCBmYWxzZSwgJyNFQkVCRUInLCAnI0ZGRkZGRicsIDApO1xuXHRSLkhpcyA9IG5ldyBSZXNpZHVlKCdIaXMnLCAnSGlzdGlkaW5lJywgdHJ1ZSwgJyM4MjgyRDInLCAnIzcwNzBGRicsIDEpO1xuXHRSLklsZSA9IG5ldyBSZXNpZHVlKCdJbGUnLCAnSXNvbGV1Y2luZScsIGZhbHNlLCAnIzBGODIwRicsICcjMDA0QzAwJywgMCk7XG5cdFIuTGV1ID0gbmV3IFJlc2lkdWUoJ0xldScsICdMZXVjaW5lJywgZmFsc2UsICcjMEY4MjBGJywgJyM0NTVFNDUnLCAwKTtcblx0Ui5MeXMgPSBuZXcgUmVzaWR1ZSgnTHlzJywgJ0x5c2luZScsIHRydWUsICcjMTQ1QUZGJywgJyM0NzQ3QjgnLCAxKTtcblx0Ui5NZXQgPSBuZXcgUmVzaWR1ZSgnTWV0JywgJ01ldGhpb25pbmUnLCBmYWxzZSwgJyNFNkU2MDAnLCAnI0I4QTA0MicsIDApO1xuXHRSLlBoZSA9IG5ldyBSZXNpZHVlKCdQaGUnLCAnUGhlbnlsYWxhbmluZScsIGZhbHNlLCAnIzMyMzJBQScsICcjNTM0QzUyJywgMCk7XG5cdFIuUHJvID0gbmV3IFJlc2lkdWUoJ1BybycsICdQcm9saW5lJywgZmFsc2UsICcjREM5NjgyJywgJyM1MjUyNTInLCAwKTtcblx0Ui5TZXIgPSBuZXcgUmVzaWR1ZSgnU2VyJywgJ1NlcmluZScsIHRydWUsICcjRkE5NjAwJywgJyNGRjcwNDInLCAwKTtcblx0Ui5UaHIgPSBuZXcgUmVzaWR1ZSgnVGhyJywgJ1RocmVvbmluZScsIHRydWUsICcjRkE5NjAwJywgJyNCODRDMDAnLCAwKTtcblx0Ui5UcnAgPSBuZXcgUmVzaWR1ZSgnVHJwJywgJ1RyeXB0b3BoYW4nLCB0cnVlLCAnI0I0NUFCNCcsICcjNEY0NjAwJywgMCk7XG5cdFIuVHlyID0gbmV3IFJlc2lkdWUoJ1R5cicsICdUeXJvc2luZScsIHRydWUsICcjMzIzMkFBJywgJyM4QzcwNEMnLCAwKTtcblx0Ui5WYWwgPSBuZXcgUmVzaWR1ZSgnVmFsJywgJ1ZhbGluZScsIGZhbHNlLCAnIzBGODIwRicsICcjRkY4Q0ZGJywgMCk7XG5cdFIuQXN4ID0gbmV3IFJlc2lkdWUoJ0FzeCcsICdBc3BhcmFnaW5lL0FzcGFydGljIEFjaWQnLCB0cnVlLCAnI0ZGNjlCNCcsICcjRkYwMEZGJywgMCk7XG5cdFIuR2x4ID0gbmV3IFJlc2lkdWUoJ0dseCcsICdHbHV0YW1pbmUvR2x1dGFtaWMgQWNpZCcsIHRydWUsICcjRkY2OUI0JywgJyNGRjAwRkYnLCAwKTtcblx0UlsnKiddID0gbmV3IFJlc2lkdWUoJyonLCAnT3RoZXInLCBmYWxzZSwgJyNCRUEwNkUnLCAnI0ZGMDBGRicsIDApO1xuXHRSLkEgPSBuZXcgUmVzaWR1ZSgnQScsICdBZGVuaW5lJywgZmFsc2UsICcjQkVBMDZFJywgJyNBMEEwRkYnLCAwKTtcblx0Ui5HID0gbmV3IFJlc2lkdWUoJ0cnLCAnR3VhbmluZScsIGZhbHNlLCAnI0JFQTA2RScsICcjRkY3MDcwJywgMCk7XG5cdFIuSSA9IG5ldyBSZXNpZHVlKCdJJywgJycsIGZhbHNlLCAnI0JFQTA2RScsICcjODBGRkZGJywgMCk7XG5cdFIuQyA9IG5ldyBSZXNpZHVlKCdDJywgJ0N5dG9zaW5lJywgZmFsc2UsICcjQkVBMDZFJywgJyNGRjhDNEInLCAwKTtcblx0Ui5UID0gbmV3IFJlc2lkdWUoJ1QnLCAnVGh5bWluZScsIGZhbHNlLCAnI0JFQTA2RScsICcjQTBGRkEwJywgMCk7XG5cdFIuVSA9IG5ldyBSZXNpZHVlKCdVJywgJ1VyYWNpbCcsIGZhbHNlLCAnI0JFQTA2RScsICcjRkY4MDgwJywgMCk7XG5cblx0cmV0dXJuIFI7XG5cbn0pKCk7XG5cbihmdW5jdGlvbihzdHJ1Y3R1cmVzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0Ly8gVGhpcyBpcyBhIG1vcmUgZWZmaWNpZW50IFF1ZXVlIGltcGxlbWVudGF0aW9uIG90aGVyIHRoYW4gdXNpbmcgQXJyYXkuc2hpZnQoKSBvbiBlYWNoIGRlcXVldWUsIHdoaWNoIGlzIHZlcnkgZXhwZW5zaXZlXG5cdC8vIHRoaXMgaXMgMi0zeCBmYXN0ZXJcblx0XG5cdC8qXG5cdCAqIENyZWF0ZXMgYSBuZXcgUXVldWUuIEEgUXVldWUgaXMgYSBmaXJzdC1pbi1maXJzdC1vdXQgKEZJRk8pIGRhdGFcblx0ICogc3RydWN0dXJlLiBGdW5jdGlvbnMgb2YgdGhlIFF1ZXVlIG9iamVjdCBhbGxvdyBlbGVtZW50cyB0byBiZVxuXHQgKiBlbnRoaXMucXVldWVkIGFuZCBkZXRoaXMucXVldWVkLCB0aGUgZmlyc3QgZWxlbWVudCB0byBiZSBvYnRhaW5lZCB3aXRob3V0XG5cdCAqIGRlcXVldWluZywgYW5kIGZvciB0aGUgY3VycmVudCBzaXplIG9mIHRoZSBRdWV1ZSBhbmQgZW1wdHkvbm9uLWVtcHR5XG5cdCAqIHN0YXR1cyB0byBiZSBvYnRhaW5lZC5cblx0ICovXG5cdHN0cnVjdHVyZXMuUXVldWUgPSBmdW5jdGlvbigpIHtcblx0XHQvLyB0aGUgbGlzdCBvZiBlbGVtZW50cywgaW5pdGlhbGlzZWQgdG8gdGhlIGVtcHR5IGFycmF5XG5cdFx0dGhpcy5xdWV1ZSA9IFtdO1xuXHR9O1xuXHR2YXIgXyA9IHN0cnVjdHVyZXMuUXVldWUucHJvdG90eXBlO1xuXG5cdC8vIHRoZSBhbW91bnQgb2Ygc3BhY2UgYXQgdGhlIGZyb250IG9mIHRoZSB0aGlzLnF1ZXVlLCBpbml0aWFsaXNlZCB0byB6ZXJvXG5cdF8ucXVldWVTcGFjZSA9IDA7XG5cblx0Lypcblx0ICogUmV0dXJucyB0aGUgc2l6ZSBvZiB0aGlzIFF1ZXVlLiBUaGUgc2l6ZSBvZiBhIFF1ZXVlIGlzIGVxdWFsIHRvIHRoZVxuXHQgKiBudW1iZXIgb2YgZWxlbWVudHMgdGhhdCBoYXZlIGJlZW4gZW50aGlzLnF1ZXVlZCBtaW51cyB0aGUgbnVtYmVyIG9mXG5cdCAqIGVsZW1lbnRzIHRoYXQgaGF2ZSBiZWVuIGRldGhpcy5xdWV1ZWQuXG5cdCAqL1xuXHRfLmdldFNpemUgPSBmdW5jdGlvbigpIHtcblxuXHRcdC8vIHJldHVybiB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSB0aGlzLnF1ZXVlXG5cdFx0cmV0dXJuIHRoaXMucXVldWUubGVuZ3RoIC0gdGhpcy5xdWV1ZVNwYWNlO1xuXG5cdH07XG5cblx0Lypcblx0ICogUmV0dXJucyB0cnVlIGlmIHRoaXMgUXVldWUgaXMgZW1wdHksIGFuZCBmYWxzZSBvdGhlcndpc2UuIEEgUXVldWUgaXNcblx0ICogZW1wdHkgaWYgdGhlIG51bWJlciBvZiBlbGVtZW50cyB0aGF0IGhhdmUgYmVlbiBlbnRoaXMucXVldWVkIGVxdWFscyB0aGVcblx0ICogbnVtYmVyIG9mIGVsZW1lbnRzIHRoYXQgaGF2ZSBiZWVuIGRldGhpcy5xdWV1ZWQuXG5cdCAqL1xuXHRfLmlzRW1wdHkgPSBmdW5jdGlvbigpIHtcblxuXHRcdC8vIHJldHVybiB0cnVlIGlmIHRoZSB0aGlzLnF1ZXVlIGlzIGVtcHR5LCBhbmQgZmFsc2Ugb3RoZXJ3aXNlXG5cdFx0cmV0dXJuIHRoaXMucXVldWUubGVuZ3RoID09PSAwO1xuXG5cdH07XG5cblx0Lypcblx0ICogRW50aGlzLnF1ZXVlcyB0aGUgc3BlY2lmaWVkIGVsZW1lbnQgaW4gdGhpcyBRdWV1ZS4gVGhlIHBhcmFtZXRlciBpczpcblx0ICogXG5cdCAqIGVsZW1lbnQgLSB0aGUgZWxlbWVudCB0byBlbnRoaXMucXVldWVcblx0ICovXG5cdF8uZW5xdWV1ZSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHR0aGlzLnF1ZXVlLnB1c2goZWxlbWVudCk7XG5cdH07XG5cblx0Lypcblx0ICogRGV0aGlzLnF1ZXVlcyBhbiBlbGVtZW50IGZyb20gdGhpcyBRdWV1ZS4gVGhlIG9sZGVzdCBlbGVtZW50IGluIHRoaXNcblx0ICogUXVldWUgaXMgcmVtb3ZlZCBhbmQgcmV0dXJuZWQuIElmIHRoaXMgUXVldWUgaXMgZW1wdHkgdGhlbiB1bmRlZmluZWQgaXNcblx0ICogcmV0dXJuZWQuXG5cdCAqL1xuXHRfLmRlcXVldWUgPSBmdW5jdGlvbigpIHtcblxuXHRcdC8vIGluaXRpYWxpc2UgdGhlIGVsZW1lbnQgdG8gcmV0dXJuIHRvIGJlIHVuZGVmaW5lZFxuXHRcdHZhciBlbGVtZW50O1xuXG5cdFx0Ly8gY2hlY2sgd2hldGhlciB0aGUgdGhpcy5xdWV1ZSBpcyBlbXB0eVxuXHRcdGlmICh0aGlzLnF1ZXVlLmxlbmd0aCkge1xuXG5cdFx0XHQvLyBmZXRjaCB0aGUgb2xkZXN0IGVsZW1lbnQgaW4gdGhlIHRoaXMucXVldWVcblx0XHRcdGVsZW1lbnQgPSB0aGlzLnF1ZXVlW3RoaXMucXVldWVTcGFjZV07XG5cblx0XHRcdC8vIHVwZGF0ZSB0aGUgYW1vdW50IG9mIHNwYWNlIGFuZCBjaGVjayB3aGV0aGVyIGEgc2hpZnQgc2hvdWxkXG5cdFx0XHQvLyBvY2N1clxuXHRcdFx0aWYgKCsrdGhpcy5xdWV1ZVNwYWNlICogMiA+PSB0aGlzLnF1ZXVlLmxlbmd0aCkge1xuXG5cdFx0XHRcdC8vIHNldCB0aGUgdGhpcy5xdWV1ZSBlcXVhbCB0byB0aGUgbm9uLWVtcHR5IHBvcnRpb24gb2YgdGhlXG5cdFx0XHRcdC8vIHRoaXMucXVldWVcblx0XHRcdFx0dGhpcy5xdWV1ZSA9IHRoaXMucXVldWUuc2xpY2UodGhpcy5xdWV1ZVNwYWNlKTtcblxuXHRcdFx0XHQvLyByZXNldCB0aGUgYW1vdW50IG9mIHNwYWNlIGF0IHRoZSBmcm9udCBvZiB0aGUgdGhpcy5xdWV1ZVxuXHRcdFx0XHR0aGlzLnF1ZXVlU3BhY2UgPSAwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyByZXR1cm4gdGhlIHJlbW92ZWQgZWxlbWVudFxuXHRcdHJldHVybiBlbGVtZW50O1xuXG5cdH07XG5cblx0Lypcblx0ICogUmV0dXJucyB0aGUgb2xkZXN0IGVsZW1lbnQgaW4gdGhpcyBRdWV1ZS4gSWYgdGhpcyBRdWV1ZSBpcyBlbXB0eSB0aGVuXG5cdCAqIHVuZGVmaW5lZCBpcyByZXR1cm5lZC4gVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBzYW1lIHZhbHVlIGFzIHRoZVxuXHQgKiBkZXRoaXMucXVldWUgZnVuY3Rpb24sIGJ1dCBkb2VzIG5vdCByZW1vdmUgdGhlIHJldHVybmVkIGVsZW1lbnQgZnJvbSB0aGlzXG5cdCAqIFF1ZXVlLlxuXHQgKi9cblx0Xy5nZXRPbGRlc3RFbGVtZW50ID0gZnVuY3Rpb24oKSB7XG5cblx0XHQvLyBpbml0aWFsaXNlIHRoZSBlbGVtZW50IHRvIHJldHVybiB0byBiZSB1bmRlZmluZWRcblx0XHR2YXIgZWxlbWVudDtcblxuXHRcdC8vIGlmIHRoZSB0aGlzLnF1ZXVlIGlzIG5vdCBlbGVtZW50IHRoZW4gZmV0Y2ggdGhlIG9sZGVzdCBlbGVtZW50IGluIHRoZVxuXHRcdC8vIHRoaXMucXVldWVcblx0XHRpZiAodGhpcy5xdWV1ZS5sZW5ndGgpIHtcblx0XHRcdGVsZW1lbnQgPSB0aGlzLnF1ZXVlW3RoaXMucXVldWVTcGFjZV07XG5cdFx0fVxuXG5cdFx0Ly8gcmV0dXJuIHRoZSBvbGRlc3QgZWxlbWVudFxuXHRcdHJldHVybiBlbGVtZW50O1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLnN0cnVjdHVyZXMpO1xuXG4oZnVuY3Rpb24oc3RydWN0dXJlcywgbSwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0c3RydWN0dXJlcy5Qb2ludCA9IGZ1bmN0aW9uKHgsIHkpIHtcblx0XHR0aGlzLnggPSB4ID8geCA6IDA7XG5cdFx0dGhpcy55ID0geSA/IHkgOiAwO1xuXHR9O1xuXHR2YXIgXyA9IHN0cnVjdHVyZXMuUG9pbnQucHJvdG90eXBlO1xuXHRfLnN1YiA9IGZ1bmN0aW9uKHApIHtcblx0XHR0aGlzLnggLT0gcC54O1xuXHRcdHRoaXMueSAtPSBwLnk7XG5cdH07XG5cdF8uYWRkID0gZnVuY3Rpb24ocCkge1xuXHRcdHRoaXMueCArPSBwLng7XG5cdFx0dGhpcy55ICs9IHAueTtcblx0fTtcblx0Xy5kaXN0YW5jZSA9IGZ1bmN0aW9uKHApIHtcblx0XHR2YXIgZHggPSBwLnggLSB0aGlzLng7XG5cdFx0dmFyIGR5ID0gcC55IC0gdGhpcy55O1xuXHRcdHJldHVybiBtLnNxcnQoZHggKiBkeCArIGR5ICogZHkpO1xuXHR9O1xuXHRfLmFuZ2xlRm9yU3R1cGlkQ2FudmFzQXJjcyA9IGZ1bmN0aW9uKHApIHtcblx0XHR2YXIgZHggPSBwLnggLSB0aGlzLng7XG5cdFx0dmFyIGR5ID0gcC55IC0gdGhpcy55O1xuXHRcdHZhciBhbmdsZSA9IDA7XG5cdFx0Ly8gQ2FsY3VsYXRlIGFuZ2xlXG5cdFx0aWYgKGR4ID09PSAwKSB7XG5cdFx0XHRpZiAoZHkgPT09IDApIHtcblx0XHRcdFx0YW5nbGUgPSAwO1xuXHRcdFx0fSBlbHNlIGlmIChkeSA+IDApIHtcblx0XHRcdFx0YW5nbGUgPSBtLlBJIC8gMjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGFuZ2xlID0gMyAqIG0uUEkgLyAyO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoZHkgPT09IDApIHtcblx0XHRcdGlmIChkeCA+IDApIHtcblx0XHRcdFx0YW5nbGUgPSAwO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YW5nbGUgPSBtLlBJO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoZHggPCAwKSB7XG5cdFx0XHRcdGFuZ2xlID0gbS5hdGFuKGR5IC8gZHgpICsgbS5QSTtcblx0XHRcdH0gZWxzZSBpZiAoZHkgPCAwKSB7XG5cdFx0XHRcdGFuZ2xlID0gbS5hdGFuKGR5IC8gZHgpICsgMiAqIG0uUEk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRhbmdsZSA9IG0uYXRhbihkeSAvIGR4KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKGFuZ2xlIDwgMCkge1xuXHRcdFx0YW5nbGUgKz0gbS5QSSAqIDI7XG5cdFx0fVxuXHRcdGFuZ2xlID0gYW5nbGUgJSAobS5QSSAqIDIpO1xuXHRcdHJldHVybiBhbmdsZTtcblx0fTtcblx0Xy5hbmdsZSA9IGZ1bmN0aW9uKHApIHtcblx0XHQvLyB5IGlzIHVwc2lkZSBkb3duIHRvIGFjY291bnQgZm9yIGludmVydGVkIGNhbnZhc1xuXHRcdHZhciBkeCA9IHAueCAtIHRoaXMueDtcblx0XHR2YXIgZHkgPSB0aGlzLnkgLSBwLnk7XG5cdFx0dmFyIGFuZ2xlID0gMDtcblx0XHQvLyBDYWxjdWxhdGUgYW5nbGVcblx0XHRpZiAoZHggPT09IDApIHtcblx0XHRcdGlmIChkeSA9PT0gMCkge1xuXHRcdFx0XHRhbmdsZSA9IDA7XG5cdFx0XHR9IGVsc2UgaWYgKGR5ID4gMCkge1xuXHRcdFx0XHRhbmdsZSA9IG0uUEkgLyAyO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YW5nbGUgPSAzICogbS5QSSAvIDI7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChkeSA9PT0gMCkge1xuXHRcdFx0aWYgKGR4ID4gMCkge1xuXHRcdFx0XHRhbmdsZSA9IDA7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRhbmdsZSA9IG0uUEk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmIChkeCA8IDApIHtcblx0XHRcdFx0YW5nbGUgPSBtLmF0YW4oZHkgLyBkeCkgKyBtLlBJO1xuXHRcdFx0fSBlbHNlIGlmIChkeSA8IDApIHtcblx0XHRcdFx0YW5nbGUgPSBtLmF0YW4oZHkgLyBkeCkgKyAyICogbS5QSTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGFuZ2xlID0gbS5hdGFuKGR5IC8gZHgpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoYW5nbGUgPCAwKSB7XG5cdFx0XHRhbmdsZSArPSBtLlBJICogMjtcblx0XHR9XG5cdFx0YW5nbGUgPSBhbmdsZSAlIChtLlBJICogMik7XG5cdFx0cmV0dXJuIGFuZ2xlO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLnN0cnVjdHVyZXMsIE1hdGgpO1xuXG4oZnVuY3Rpb24oZXh0ZW5zaW9ucywgc3RydWN0dXJlcywgbSwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBDT01NQV9TUEFDRV9SRUdFWCA9IC9bICxdKy87XG5cdHZhciBDT01NQV9EQVNIX1JFR0VYID0gL1xcLSsvO1xuXHR2YXIgRk9OVFMgPSBbICdIZWx2ZXRpY2EnLCAnQXJpYWwnLCAnRGlhbG9nJyBdO1xuXHRcblx0c3RydWN0dXJlcy5RdWVyeSA9IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdC8vIGF0b20gcHJvcGVydGllc1xuXHRcdHRoaXMuZWxlbWVudHMgPSB7djpbXSxub3Q6ZmFsc2V9O1xuXHRcdHRoaXMuY2hhcmdlID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuY2hpcmFsaXR5ID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuY29ubmVjdGl2aXR5ID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuY29ubmVjdGl2aXR5Tm9IID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuaHlkcm9nZW5zID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMuc2F0dXJhdGlvbiA9IHVuZGVmaW5lZDtcblx0XHQvLyBib25kIHByb3BlcnRpZXNcblx0XHR0aGlzLm9yZGVycyA9IHt2OltdLG5vdDpmYWxzZX07XG5cdFx0dGhpcy5zdGVyZW8gPSB1bmRlZmluZWQ7XG5cdFx0Ly8gZ2VuZXJpYyBwcm9wZXJ0aWVzXG5cdFx0dGhpcy5hcm9tYXRpYyA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLnJpbmdDb3VudCA9IHVuZGVmaW5lZDtcblx0XHQvLyBjYWNoZSB0aGUgc3RyaW5nIHZhbHVlXG5cdFx0dGhpcy5jYWNoZSA9IHVuZGVmaW5lZDtcblx0fTtcblx0c3RydWN0dXJlcy5RdWVyeS5UWVBFX0FUT00gPSAwO1xuXHRzdHJ1Y3R1cmVzLlF1ZXJ5LlRZUEVfQk9ORCA9IDE7XG5cdHZhciBfID0gc3RydWN0dXJlcy5RdWVyeS5wcm90b3R5cGU7XG5cdF8ucGFyc2VSYW5nZSA9IGZ1bmN0aW9uKHJhbmdlKXtcblx0XHR2YXIgcG9pbnRzID0gW107XG5cdFx0dmFyIHNwbGl0cyA9IHJhbmdlLnNwbGl0KENPTU1BX1NQQUNFX1JFR0VYKTtcblx0XHRmb3IodmFyIGkgPSAwLCBpaSA9IHNwbGl0cy5sZW5ndGg7IGk8aWk7IGkrKyl7XG5cdFx0XHR2YXIgdCA9IHNwbGl0c1tpXTtcblx0XHRcdHZhciBuZWcgPSBmYWxzZTtcblx0XHRcdHZhciBuZWcyID0gZmFsc2U7XG5cdFx0XHRpZih0LmNoYXJBdCgwKT09PSctJyl7XG5cdFx0XHRcdG5lZyA9IHRydWU7XG5cdFx0XHRcdHQgPSB0LnN1YnN0cmluZygxKTtcblx0XHRcdH1cblx0XHRcdGlmICh0LmluZGV4T2YoJy0tJykhPS0xKSB7XG5cdFx0XHRcdG5lZzIgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHQuaW5kZXhPZignLScpIT0tMSkge1xuXHRcdFx0XHR2YXIgcGFydHMgPSB0LnNwbGl0KENPTU1BX0RBU0hfUkVHRVgpO1xuXHRcdFx0XHR2YXIgcCA9IHt4OnBhcnNlSW50KHBhcnRzWzBdKSAqIChuZWcgPyAtMSA6IDEpLHk6cGFyc2VJbnQocGFydHNbMV0pICogKG5lZzIgPyAtMSA6IDEpfTtcblx0XHRcdFx0aWYgKHAueSA8IHAueCkge1xuXHRcdFx0XHRcdHZhciB0bXAgPSBwLnk7XG5cdFx0XHRcdFx0cC55ID0gcC54O1xuXHRcdFx0XHRcdHAueCA9IHRtcDtcblx0XHRcdFx0fVxuXHRcdFx0XHRwb2ludHMucHVzaChwKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHBvaW50cy5wdXNoKHt4OnBhcnNlSW50KHQpICogKG5lZyA/IC0xIDogMSl9KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHBvaW50cztcblx0fTtcblx0Xy5kcmF3ID0gZnVuY3Rpb24oY3R4LCBzcGVjcywgcG9zKSB7XG5cdFx0aWYoIXRoaXMuY2FjaGUpe1xuXHRcdFx0dGhpcy5jYWNoZSA9IHRoaXMudG9TdHJpbmcoKTtcblx0XHR9XG5cdFx0dmFyIHRvcCA9IHRoaXMuY2FjaGU7XG5cdFx0dmFyIGJvdHRvbSA9IHVuZGVmaW5lZDtcblx0XHR2YXIgc3BsaXQgPSB0b3AuaW5kZXhPZignKCcpO1xuXHRcdGlmKHNwbGl0IT0tMSl7XG5cdFx0XHR0b3AgPSB0aGlzLmNhY2hlLnN1YnN0cmluZygwLCBzcGxpdCk7XG5cdFx0XHRib3R0b20gPSB0aGlzLmNhY2hlLnN1YnN0cmluZyhzcGxpdCwgdGhpcy5jYWNoZS5sZW5ndGgpO1xuXHRcdH1cblx0XHRjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cdFx0Y3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuXHRcdGN0eC5mb250ID0gZXh0ZW5zaW9ucy5nZXRGb250U3RyaW5nKDEyLCBGT05UUywgdHJ1ZSwgZmFsc2UpO1xuXHRcdHZhciB0dyA9IGN0eC5tZWFzdXJlVGV4dCh0b3ApLndpZHRoO1xuXHRcdGN0eC5maWxsU3R5bGUgPSBzcGVjcy5iYWNrZ3JvdW5kQ29sb3I7XG5cdFx0Y3R4LmZpbGxSZWN0KHBvcy54LXR3LzIsIHBvcy55LTYsIHR3LCAxMik7XG5cdFx0Y3R4LmZpbGxTdHlsZSA9ICdibGFjayc7XG5cdFx0Y3R4LmZpbGxUZXh0KHRvcCwgcG9zLngsIHBvcy55KTtcblx0XHRpZihib3R0b20pe1xuXHRcdFx0Y3R4LmZvbnQgPSBleHRlbnNpb25zLmdldEZvbnRTdHJpbmcoMTAsIEZPTlRTLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0XHR0dyA9IGN0eC5tZWFzdXJlVGV4dChib3R0b20pLndpZHRoO1xuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHNwZWNzLmJhY2tncm91bmRDb2xvcjtcblx0XHRcdGN0eC5maWxsUmVjdChwb3MueC10dy8yLCBwb3MueSs2LCB0dywgMTEpO1xuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9ICdibGFjayc7XG5cdFx0XHRjdHguZmlsbFRleHQoYm90dG9tLCBwb3MueCwgcG9zLnkrMTEpO1xuXHRcdH1cblx0fTtcblx0Xy5vdXRwdXRSYW5nZSA9IGZ1bmN0aW9uKGFycmF5KXtcblx0XHR2YXIgY29tbWEgPSBmYWxzZTtcblx0XHR2YXIgc2IgPSBbXTtcblx0XHRmb3IodmFyIGkgPSAwLCBpaSA9IGFycmF5Lmxlbmd0aDsgaTxpaTsgaSsrKXtcblx0XHRcdGlmKGNvbW1hKXtcblx0XHRcdFx0c2IucHVzaCgnLCcpO1xuXHRcdFx0fVxuXHRcdFx0Y29tbWEgPSB0cnVlO1xuXHRcdFx0dmFyIHAgPSBhcnJheVtpXTtcblx0XHRcdGlmKHAueSl7XG5cdFx0XHRcdHNiLnB1c2gocC54KTtcblx0XHRcdFx0c2IucHVzaCgnLScpO1xuXHRcdFx0XHRzYi5wdXNoKHAueSk7XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0c2IucHVzaChwLngpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gc2Iuam9pbignJyk7XG5cdH07XG5cdF8udG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgc2IgPSBbXTtcblx0XHR2YXIgYXR0cmlidXRlcyA9IFtdO1xuXHRcdGlmKHRoaXMudHlwZT09PXN0cnVjdHVyZXMuUXVlcnkuVFlQRV9BVE9NKXtcblx0XHRcdGlmKCF0aGlzLmVsZW1lbnRzIHx8IHRoaXMuZWxlbWVudHMudi5sZW5ndGg9PT0wKXtcblx0XHRcdFx0c2IucHVzaCgnW2FdJyk7XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0aWYodGhpcy5lbGVtZW50cy5ub3Qpe1xuXHRcdFx0XHRcdHNiLnB1c2goJyEnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzYi5wdXNoKCdbJyk7XG5cdFx0XHRcdHNiLnB1c2godGhpcy5lbGVtZW50cy52LmpvaW4oJywnKSk7XG5cdFx0XHRcdHNiLnB1c2goJ10nKTtcblx0XHRcdH1cblx0XHRcdGlmKHRoaXMuY2hpcmFsaXR5KXtcblx0XHRcdFx0YXR0cmlidXRlcy5wdXNoKCh0aGlzLmNoaXJhbGl0eS5ub3Q/JyEnOicnKSsnQD0nK3RoaXMuY2hpcmFsaXR5LnYpO1xuXHRcdFx0fVxuXHRcdFx0aWYodGhpcy5hcm9tYXRpYyl7XG5cdFx0XHRcdGF0dHJpYnV0ZXMucHVzaCgodGhpcy5hcm9tYXRpYy5ub3Q/JyEnOicnKSsnQScpO1xuXHRcdFx0fVxuXHRcdFx0aWYodGhpcy5jaGFyZ2Upe1xuXHRcdFx0XHRhdHRyaWJ1dGVzLnB1c2goKHRoaXMuY2hhcmdlLm5vdD8nISc6JycpKydDPScrdGhpcy5vdXRwdXRSYW5nZSh0aGlzLmNoYXJnZS52KSk7XG5cdFx0XHR9XG5cdFx0XHRpZih0aGlzLmh5ZHJvZ2Vucyl7XG5cdFx0XHRcdGF0dHJpYnV0ZXMucHVzaCgodGhpcy5oeWRyb2dlbnMubm90PychJzonJykrJ0g9Jyt0aGlzLm91dHB1dFJhbmdlKHRoaXMuaHlkcm9nZW5zLnYpKTtcblx0XHRcdH1cblx0XHRcdGlmKHRoaXMucmluZ0NvdW50KXtcblx0XHRcdFx0YXR0cmlidXRlcy5wdXNoKCh0aGlzLnJpbmdDb3VudC5ub3Q/JyEnOicnKSsnUj0nK3RoaXMub3V0cHV0UmFuZ2UodGhpcy5yaW5nQ291bnQudikpO1xuXHRcdFx0fVxuXHRcdFx0aWYodGhpcy5zYXR1cmF0aW9uKXtcblx0XHRcdFx0YXR0cmlidXRlcy5wdXNoKCh0aGlzLnNhdHVyYXRpb24ubm90PychJzonJykrJ1MnKTtcblx0XHRcdH1cblx0XHRcdGlmKHRoaXMuY29ubmVjdGl2aXR5KXtcblx0XHRcdFx0YXR0cmlidXRlcy5wdXNoKCh0aGlzLmNvbm5lY3Rpdml0eS5ub3Q/JyEnOicnKSsnWD0nK3RoaXMub3V0cHV0UmFuZ2UodGhpcy5jb25uZWN0aXZpdHkudikpO1xuXHRcdFx0fVxuXHRcdFx0aWYodGhpcy5jb25uZWN0aXZpdHlOb0gpe1xuXHRcdFx0XHRhdHRyaWJ1dGVzLnB1c2goKHRoaXMuY29ubmVjdGl2aXR5Tm9ILm5vdD8nISc6JycpKyd4PScrdGhpcy5vdXRwdXRSYW5nZSh0aGlzLmNvbm5lY3Rpdml0eU5vSC52KSk7XG5cdFx0XHR9XG5cdFx0fWVsc2UgaWYodGhpcy50eXBlPT09c3RydWN0dXJlcy5RdWVyeS5UWVBFX0JPTkQpe1xuXHRcdFx0aWYoIXRoaXMub3JkZXJzIHx8IHRoaXMub3JkZXJzLnYubGVuZ3RoPT09MCl7XG5cdFx0XHRcdHNiLnB1c2goJ1thXScpO1xuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdGlmKHRoaXMub3JkZXJzLm5vdCl7XG5cdFx0XHRcdFx0c2IucHVzaCgnIScpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNiLnB1c2goJ1snKTtcblx0XHRcdFx0c2IucHVzaCh0aGlzLm9yZGVycy52LmpvaW4oJywnKSk7XG5cdFx0XHRcdHNiLnB1c2goJ10nKTtcblx0XHRcdH1cblx0XHRcdGlmKHRoaXMuc3RlcmVvKXtcblx0XHRcdFx0YXR0cmlidXRlcy5wdXNoKCh0aGlzLnN0ZXJlby5ub3Q/JyEnOicnKSsnQD0nK3RoaXMuc3RlcmVvLnYpO1xuXHRcdFx0fVxuXHRcdFx0aWYodGhpcy5hcm9tYXRpYyl7XG5cdFx0XHRcdGF0dHJpYnV0ZXMucHVzaCgodGhpcy5hcm9tYXRpYy5ub3Q/JyEnOicnKSsnQScpO1xuXHRcdFx0fVxuXHRcdFx0aWYodGhpcy5yaW5nQ291bnQpe1xuXHRcdFx0XHRhdHRyaWJ1dGVzLnB1c2goKHRoaXMucmluZ0NvdW50Lm5vdD8nISc6JycpKydSPScrdGhpcy5vdXRwdXRSYW5nZSh0aGlzLnJpbmdDb3VudC52KSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKGF0dHJpYnV0ZXMubGVuZ3RoPjApe1xuXHRcdFx0c2IucHVzaCgnKCcpO1xuXHRcdFx0c2IucHVzaChhdHRyaWJ1dGVzLmpvaW4oJywnKSk7XG5cdFx0XHRzYi5wdXNoKCcpJyk7XG5cdFx0fVxuXHRcdHJldHVybiBzYi5qb2luKCcnKTtcblx0fTtcblxufSkoQ2hlbURvb2RsZS5leHRlbnNpb25zLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMsIE1hdGgpO1xuXG4oZnVuY3Rpb24oRUxFTUVOVCwgZXh0ZW5zaW9ucywgbWF0aCwgc3RydWN0dXJlcywgbSwgbTQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdHN0cnVjdHVyZXMuQXRvbSA9IGZ1bmN0aW9uKGxhYmVsLCB4LCB5LCB6KSB7XG5cdFx0dGhpcy5sYWJlbCA9IGxhYmVsID8gbGFiZWwucmVwbGFjZSgvXFxzL2csICcnKSA6ICdDJztcblx0XHR0aGlzLnggPSB4ID8geCA6IDA7XG5cdFx0dGhpcy55ID0geSA/IHkgOiAwO1xuXHRcdHRoaXMueiA9IHogPyB6IDogMDtcblx0fTtcblx0dmFyIF8gPSBzdHJ1Y3R1cmVzLkF0b20ucHJvdG90eXBlID0gbmV3IHN0cnVjdHVyZXMuUG9pbnQoMCwgMCk7XG5cdF8uY2hhcmdlID0gMDtcblx0Xy5udW1Mb25lUGFpciA9IDA7XG5cdF8ubnVtUmFkaWNhbCA9IDA7XG5cdF8ubWFzcyA9IC0xO1xuXHRfLmltcGxpY2l0SCA9IC0xO1xuXHRfLmNvb3JkaW5hdGlvbk51bWJlciA9IDA7XG5cdF8uYm9uZE51bWJlciA9IDA7XG5cdF8uYW5nbGVPZkxlYXN0SW50ZXJmZXJlbmNlID0gMDtcblx0Xy5pc0hpZGRlbiA9IGZhbHNlO1xuXHRfLmFsdExhYmVsID0gdW5kZWZpbmVkO1xuXHRfLmlzTG9uZSA9IGZhbHNlO1xuXHRfLmlzSG92ZXIgPSBmYWxzZTtcblx0Xy5pc1NlbGVjdGVkID0gZmFsc2U7XG5cdF8uYWRkM0QgPSBmdW5jdGlvbihwKSB7XG5cdFx0dGhpcy54ICs9IHAueDtcblx0XHR0aGlzLnkgKz0gcC55O1xuXHRcdHRoaXMueiArPSBwLno7XG5cdH07XG5cdF8uc3ViM0QgPSBmdW5jdGlvbihwKSB7XG5cdFx0dGhpcy54IC09IHAueDtcblx0XHR0aGlzLnkgLT0gcC55O1xuXHRcdHRoaXMueiAtPSBwLno7XG5cdH07XG5cdF8uZGlzdGFuY2UzRCA9IGZ1bmN0aW9uKHApIHtcblx0XHR2YXIgZHggPSBwLnggLSB0aGlzLng7XG5cdFx0dmFyIGR5ID0gcC55IC0gdGhpcy55O1xuXHRcdHZhciBkeiA9IHAueiAtIHRoaXMuejtcblx0XHRyZXR1cm4gbS5zcXJ0KGR4ICogZHggKyBkeSAqIGR5ICsgZHogKiBkeik7XG5cdH07XG5cdF8uZHJhdyA9IGZ1bmN0aW9uKGN0eCwgc3BlY3MpIHtcblx0XHRpZih0aGlzLmRvbnREcmF3KXtcblx0XHRcdC8vIHRoaXMgaXMgdXNlZCB3aGVuIHRoZSBhdG9tIHNob3VsZG4ndCBiZSB2aXNpYmxlLCBzdWNoIGFzIHdoZW4gdGhlIHRleHQgaW5wdXQgZmllbGQgaXMgb3BlbiBvdmVyIHRoaXMgYXRvbVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAodGhpcy5pc0xhc3NvZWQpIHtcblx0XHRcdHZhciBncmQgPSBjdHguY3JlYXRlUmFkaWFsR3JhZGllbnQodGhpcy54IC0gMSwgdGhpcy55IC0gMSwgMCwgdGhpcy54LCB0aGlzLnksIDcpO1xuXHRcdFx0Z3JkLmFkZENvbG9yU3RvcCgwLCAncmdiYSgyMTIsIDk5LCAwLCAwKScpO1xuXHRcdFx0Z3JkLmFkZENvbG9yU3RvcCgwLjcsICdyZ2JhKDIxMiwgOTksIDAsIDAuOCknKTtcblx0XHRcdGN0eC5maWxsU3R5bGUgPSBncmQ7XG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRjdHguYXJjKHRoaXMueCwgdGhpcy55LCA1LCAwLCBtLlBJICogMiwgZmFsc2UpO1xuXHRcdFx0Y3R4LmZpbGwoKTtcblx0XHR9XG5cdFx0aWYodGhpcy5xdWVyeSl7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMudGV4dEJvdW5kcyA9IFtdO1xuXHRcdGlmICh0aGlzLnNwZWNzKSB7XG5cdFx0XHRzcGVjcyA9IHRoaXMuc3BlY3M7XG5cdFx0fVxuXHRcdHZhciBmb250ID0gZXh0ZW5zaW9ucy5nZXRGb250U3RyaW5nKHNwZWNzLmF0b21zX2ZvbnRfc2l6ZV8yRCwgc3BlY3MuYXRvbXNfZm9udF9mYW1pbGllc18yRCwgc3BlY3MuYXRvbXNfZm9udF9ib2xkXzJELCBzcGVjcy5hdG9tc19mb250X2l0YWxpY18yRCk7XG5cdFx0Y3R4LmZvbnQgPSBmb250O1xuXHRcdGN0eC5maWxsU3R5bGUgPSB0aGlzLmdldEVsZW1lbnRDb2xvcihzcGVjcy5hdG9tc191c2VKTU9MQ29sb3JzLCBzcGVjcy5hdG9tc191c2VQWU1PTENvbG9ycywgc3BlY3MuYXRvbXNfY29sb3IsIDIpO1xuXHRcdGlmKHRoaXMubGFiZWw9PT0nSCcgJiYgc3BlY3MuYXRvbXNfSEJsYWNrXzJEKXtcblx0XHRcdGN0eC5maWxsU3R5bGUgPSAnYmxhY2snO1xuXHRcdH1cblx0XHRpZih0aGlzLmVycm9yKXtcblx0XHRcdGN0eC5maWxsU3R5bGUgPSBzcGVjcy5jb2xvckVycm9yO1xuXHRcdH1cblx0XHR2YXIgaEFuZ2xlO1xuXHRcdHZhciBsYWJlbFZpc2libGUgPSB0aGlzLmlzTGFiZWxWaXNpYmxlKHNwZWNzKTtcblx0XHRpZiAodGhpcy5pc0xvbmUgJiYgIWxhYmVsVmlzaWJsZSB8fCBzcGVjcy5hdG9tc19jaXJjbGVzXzJEKSB7XG5cdFx0XHQvLyBhbHdheXMgdXNlIGNhcmJvbiBncmF5IGZvciBsb25lIGNhcmJvbiBhdG9tIGRvdHNcblx0XHRcdGlmKHRoaXMuaXNMb25lKXtcblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9ICcjOTA5MDkwJztcblx0XHRcdH1cblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdGN0eC5hcmModGhpcy54LCB0aGlzLnksIHNwZWNzLmF0b21zX2NpcmNsZURpYW1ldGVyXzJEIC8gMiwgMCwgbS5QSSAqIDIsIGZhbHNlKTtcblx0XHRcdGN0eC5maWxsKCk7XG5cdFx0XHRpZiAoc3BlY3MuYXRvbXNfY2lyY2xlQm9yZGVyV2lkdGhfMkQgPiAwKSB7XG5cdFx0XHRcdGN0eC5saW5lV2lkdGggPSBzcGVjcy5hdG9tc19jaXJjbGVCb3JkZXJXaWR0aF8yRDtcblx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gJ2JsYWNrJztcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAobGFiZWxWaXNpYmxlKSB7XG5cdFx0XHRjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cdFx0XHQvLyBrZWVwIGNoZWNrIHRvIHVuZGVmaW5lZCBoZXJlIGFzIGRldiBtYXkgc2V0IGFsdExhYmVsIHRvIGVtcHR5XG5cdFx0XHQvLyBzdHJpbmdcblx0XHRcdGlmICh0aGlzLmFsdExhYmVsICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Ly8gYWx0TGFiZWwgY2FuIGJlIDAsIHNvIGNoZWNrIGlmIHVuZGVmaW5lZFxuXHRcdFx0XHRjdHguZmlsbFRleHQodGhpcy5hbHRMYWJlbCwgdGhpcy54LCB0aGlzLnkpO1xuXHRcdFx0XHR2YXIgc3ltYm9sV2lkdGggPSBjdHgubWVhc3VyZVRleHQodGhpcy5hbHRMYWJlbCkud2lkdGg7XG5cdFx0XHRcdHRoaXMudGV4dEJvdW5kcy5wdXNoKHtcblx0XHRcdFx0XHR4IDogdGhpcy54IC0gc3ltYm9sV2lkdGggLyAyLFxuXHRcdFx0XHRcdHkgOiB0aGlzLnkgLSBzcGVjcy5hdG9tc19mb250X3NpemVfMkQgLyAyICsgMSxcblx0XHRcdFx0XHR3IDogc3ltYm9sV2lkdGgsXG5cdFx0XHRcdFx0aCA6IHNwZWNzLmF0b21zX2ZvbnRfc2l6ZV8yRCAtIDJcblx0XHRcdFx0fSk7XG5cdFx0XHR9ZWxzZSBpZighRUxFTUVOVFt0aGlzLmxhYmVsXSl7XG5cdFx0XHRcdGlmKHN0cnVjdHVyZXMuQ29uZGVuc2VkTGFiZWwpe1xuXHRcdFx0XHRcdC8vIENvbmRlbnNlZExhYmVsIGlzIHByb3ByaWV0YXJ5IGFuZCBub3QgaW5jbHVkZWQgaW4gdGhlIEdQTCB2ZXJzaW9uXG5cdFx0XHRcdFx0aWYoIXRoaXMuY29uZGVuc2VkIHx8IHRoaXMuY29uZGVuc2VkLnRleHQgIT09IHRoaXMubGFiZWwpe1xuXHRcdFx0XHRcdFx0dGhpcy5jb25kZW5zZWQgPSBuZXcgc3RydWN0dXJlcy5Db25kZW5zZWRMYWJlbCh0aGlzLCB0aGlzLmxhYmVsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5jb25kZW5zZWQuZHJhdyhjdHgsIHNwZWNzKTtcblx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0Y3R4LmZpbGxUZXh0KHRoaXMubGFiZWwsIHRoaXMueCwgdGhpcy55KTtcblx0XHRcdFx0XHR2YXIgc3ltYm9sV2lkdGggPSBjdHgubWVhc3VyZVRleHQodGhpcy5sYWJlbCkud2lkdGg7XG5cdFx0XHRcdFx0dGhpcy50ZXh0Qm91bmRzLnB1c2goe1xuXHRcdFx0XHRcdFx0eCA6IHRoaXMueCAtIHN5bWJvbFdpZHRoIC8gMixcblx0XHRcdFx0XHRcdHkgOiB0aGlzLnkgLSBzcGVjcy5hdG9tc19mb250X3NpemVfMkQgLyAyICsgMSxcblx0XHRcdFx0XHRcdHcgOiBzeW1ib2xXaWR0aCxcblx0XHRcdFx0XHRcdGggOiBzcGVjcy5hdG9tc19mb250X3NpemVfMkQgLSAyXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGN0eC5maWxsVGV4dCh0aGlzLmxhYmVsLCB0aGlzLngsIHRoaXMueSk7XG5cdFx0XHRcdHZhciBzeW1ib2xXaWR0aCA9IGN0eC5tZWFzdXJlVGV4dCh0aGlzLmxhYmVsKS53aWR0aDtcblx0XHRcdFx0dGhpcy50ZXh0Qm91bmRzLnB1c2goe1xuXHRcdFx0XHRcdHggOiB0aGlzLnggLSBzeW1ib2xXaWR0aCAvIDIsXG5cdFx0XHRcdFx0eSA6IHRoaXMueSAtIHNwZWNzLmF0b21zX2ZvbnRfc2l6ZV8yRCAvIDIgKyAxLFxuXHRcdFx0XHRcdHcgOiBzeW1ib2xXaWR0aCxcblx0XHRcdFx0XHRoIDogc3BlY3MuYXRvbXNfZm9udF9zaXplXzJEIC0gMlxuXHRcdFx0XHR9KTtcblx0XHRcdFx0Ly8gbWFzc1xuXHRcdFx0XHR2YXIgbWFzc1dpZHRoID0gMDtcblx0XHRcdFx0aWYgKHRoaXMubWFzcyAhPT0gLTEpIHtcblx0XHRcdFx0XHR2YXIgZm9udFNhdmUgPSBjdHguZm9udDtcblx0XHRcdFx0XHRjdHguZm9udCA9IGV4dGVuc2lvbnMuZ2V0Rm9udFN0cmluZyhzcGVjcy5hdG9tc19mb250X3NpemVfMkQgKiAuNywgc3BlY3MuYXRvbXNfZm9udF9mYW1pbGllc18yRCwgc3BlY3MuYXRvbXNfZm9udF9ib2xkXzJELCBzcGVjcy5hdG9tc19mb250X2l0YWxpY18yRCk7XG5cdFx0XHRcdFx0bWFzc1dpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KHRoaXMubWFzcykud2lkdGg7XG5cdFx0XHRcdFx0Y3R4LmZpbGxUZXh0KHRoaXMubWFzcywgdGhpcy54IC0gbWFzc1dpZHRoIC0gLjUsIHRoaXMueSAtIHNwZWNzLmF0b21zX2ZvbnRfc2l6ZV8yRCAvIDIgKyAxKTtcblx0XHRcdFx0XHR0aGlzLnRleHRCb3VuZHMucHVzaCh7XG5cdFx0XHRcdFx0XHR4IDogdGhpcy54IC0gc3ltYm9sV2lkdGggLyAyIC0gbWFzc1dpZHRoIC0gLjUsXG5cdFx0XHRcdFx0XHR5IDogdGhpcy55IC0gKHNwZWNzLmF0b21zX2ZvbnRfc2l6ZV8yRCAqIDEuNykgLyAyICsgMSxcblx0XHRcdFx0XHRcdHcgOiBtYXNzV2lkdGgsXG5cdFx0XHRcdFx0XHRoIDogc3BlY3MuYXRvbXNfZm9udF9zaXplXzJEIC8gMiAtIDFcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRjdHguZm9udCA9IGZvbnRTYXZlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGltcGxpY2l0IGh5ZHJvZ2Vuc1xuXHRcdFx0XHR2YXIgY2hhcmdlT2Zmc2V0ID0gc3ltYm9sV2lkdGggLyAyO1xuXHRcdFx0XHR2YXIgbnVtSHMgPSB0aGlzLmdldEltcGxpY2l0SHlkcm9nZW5Db3VudCgpO1xuXHRcdFx0XHRpZiAoc3BlY3MuYXRvbXNfaW1wbGljaXRIeWRyb2dlbnNfMkQgJiYgbnVtSHMgPiAwKSB7XG5cdFx0XHRcdFx0aEFuZ2xlID0gMDtcblx0XHRcdFx0XHR2YXIgaFdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KCdIJykud2lkdGg7XG5cdFx0XHRcdFx0dmFyIG1vdmVDaGFyZ2UgPSB0cnVlO1xuXHRcdFx0XHRcdGlmIChudW1IcyA+IDEpIHtcblx0XHRcdFx0XHRcdHZhciB4b2Zmc2V0ID0gc3ltYm9sV2lkdGggLyAyICsgaFdpZHRoIC8gMjtcblx0XHRcdFx0XHRcdHZhciB5b2Zmc2V0ID0gMDtcblx0XHRcdFx0XHRcdHZhciBzdWJGb250ID0gZXh0ZW5zaW9ucy5nZXRGb250U3RyaW5nKHNwZWNzLmF0b21zX2ZvbnRfc2l6ZV8yRCAqIC44LCBzcGVjcy5hdG9tc19mb250X2ZhbWlsaWVzXzJELCBzcGVjcy5hdG9tc19mb250X2JvbGRfMkQsIHNwZWNzLmF0b21zX2ZvbnRfaXRhbGljXzJEKTtcblx0XHRcdFx0XHRcdGN0eC5mb250ID0gc3ViRm9udDtcblx0XHRcdFx0XHRcdHZhciBudW1XaWR0aCA9IGN0eC5tZWFzdXJlVGV4dChudW1Icykud2lkdGg7XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5ib25kTnVtYmVyID09PSAxKSB7XG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLmFuZ2xlT2ZMZWFzdEludGVyZmVyZW5jZSA+IG0uUEkgLyAyICYmIHRoaXMuYW5nbGVPZkxlYXN0SW50ZXJmZXJlbmNlIDwgMyAqIG0uUEkgLyAyKSB7XG5cdFx0XHRcdFx0XHRcdFx0eG9mZnNldCA9IC1zeW1ib2xXaWR0aCAvIDIgLSBudW1XaWR0aCAtIGhXaWR0aCAvIDIgLSBtYXNzV2lkdGggLyAyO1xuXHRcdFx0XHRcdFx0XHRcdG1vdmVDaGFyZ2UgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRoQW5nbGUgPSBtLlBJO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRpZiAodGhpcy5hbmdsZU9mTGVhc3RJbnRlcmZlcmVuY2UgPD0gbS5QSSAvIDQpIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBkZWZhdWx0XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5hbmdsZU9mTGVhc3RJbnRlcmZlcmVuY2UgPCAzICogbS5QSSAvIDQpIHtcblx0XHRcdFx0XHRcdFx0XHR4b2Zmc2V0ID0gMDtcblx0XHRcdFx0XHRcdFx0XHR5b2Zmc2V0ID0gLXNwZWNzLmF0b21zX2ZvbnRfc2l6ZV8yRCAqIC45O1xuXHRcdFx0XHRcdFx0XHRcdGlmICh0aGlzLmNoYXJnZSAhPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0eW9mZnNldCAtPSBzcGVjcy5hdG9tc19mb250X3NpemVfMkQgKiAuMztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0bW92ZUNoYXJnZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdGhBbmdsZSA9IG0uUEkgLyAyO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuYW5nbGVPZkxlYXN0SW50ZXJmZXJlbmNlIDw9IDUgKiBtLlBJIC8gNCkge1xuXHRcdFx0XHRcdFx0XHRcdHhvZmZzZXQgPSAtc3ltYm9sV2lkdGggLyAyIC0gbnVtV2lkdGggLSBoV2lkdGggLyAyIC0gbWFzc1dpZHRoIC8gMjtcblx0XHRcdFx0XHRcdFx0XHRtb3ZlQ2hhcmdlID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0aEFuZ2xlID0gbS5QSTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLmFuZ2xlT2ZMZWFzdEludGVyZmVyZW5jZSA8IDcgKiBtLlBJIC8gNCkge1xuXHRcdFx0XHRcdFx0XHRcdHhvZmZzZXQgPSAwO1xuXHRcdFx0XHRcdFx0XHRcdHlvZmZzZXQgPSBzcGVjcy5hdG9tc19mb250X3NpemVfMkQgKiAuOTtcblx0XHRcdFx0XHRcdFx0XHRtb3ZlQ2hhcmdlID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0aEFuZ2xlID0gMyAqIG0uUEkgLyAyO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjdHguZm9udCA9IGZvbnQ7XG5cdFx0XHRcdFx0XHRjdHguZmlsbFRleHQoJ0gnLCB0aGlzLnggKyB4b2Zmc2V0LCB0aGlzLnkgKyB5b2Zmc2V0KTtcblx0XHRcdFx0XHRcdGN0eC5mb250ID0gc3ViRm9udDtcblx0XHRcdFx0XHRcdGN0eC5maWxsVGV4dChudW1IcywgdGhpcy54ICsgeG9mZnNldCArIGhXaWR0aCAvIDIgKyBudW1XaWR0aCAvIDIsIHRoaXMueSArIHlvZmZzZXQgKyBzcGVjcy5hdG9tc19mb250X3NpemVfMkQgKiAuMyk7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRCb3VuZHMucHVzaCh7XG5cdFx0XHRcdFx0XHRcdHggOiB0aGlzLnggKyB4b2Zmc2V0IC0gaFdpZHRoIC8gMixcblx0XHRcdFx0XHRcdFx0eSA6IHRoaXMueSArIHlvZmZzZXQgLSBzcGVjcy5hdG9tc19mb250X3NpemVfMkQgLyAyICsgMSxcblx0XHRcdFx0XHRcdFx0dyA6IGhXaWR0aCxcblx0XHRcdFx0XHRcdFx0aCA6IHNwZWNzLmF0b21zX2ZvbnRfc2l6ZV8yRCAtIDJcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Qm91bmRzLnB1c2goe1xuXHRcdFx0XHRcdFx0XHR4IDogdGhpcy54ICsgeG9mZnNldCArIGhXaWR0aCAvIDIsXG5cdFx0XHRcdFx0XHRcdHkgOiB0aGlzLnkgKyB5b2Zmc2V0ICsgc3BlY3MuYXRvbXNfZm9udF9zaXplXzJEICogLjMgLSBzcGVjcy5hdG9tc19mb250X3NpemVfMkQgLyAyICsgMSxcblx0XHRcdFx0XHRcdFx0dyA6IG51bVdpZHRoLFxuXHRcdFx0XHRcdFx0XHRoIDogc3BlY3MuYXRvbXNfZm9udF9zaXplXzJEICogLjggLSAyXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dmFyIHhvZmZzZXQgPSBzeW1ib2xXaWR0aCAvIDIgKyBoV2lkdGggLyAyO1xuXHRcdFx0XHRcdFx0dmFyIHlvZmZzZXQgPSAwO1xuXHRcdFx0XHRcdFx0aWYgKHRoaXMuYm9uZE51bWJlciA9PT0gMSkge1xuXHRcdFx0XHRcdFx0XHRpZiAodGhpcy5hbmdsZU9mTGVhc3RJbnRlcmZlcmVuY2UgPiBtLlBJIC8gMiAmJiB0aGlzLmFuZ2xlT2ZMZWFzdEludGVyZmVyZW5jZSA8IDMgKiBtLlBJIC8gMikge1xuXHRcdFx0XHRcdFx0XHRcdHhvZmZzZXQgPSAtc3ltYm9sV2lkdGggLyAyIC0gaFdpZHRoIC8gMiAtIG1hc3NXaWR0aCAvIDI7XG5cdFx0XHRcdFx0XHRcdFx0bW92ZUNoYXJnZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdGhBbmdsZSA9IG0uUEk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLmFuZ2xlT2ZMZWFzdEludGVyZmVyZW5jZSA8PSBtLlBJIC8gNCkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIGRlZmF1bHRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLmFuZ2xlT2ZMZWFzdEludGVyZmVyZW5jZSA8IDMgKiBtLlBJIC8gNCkge1xuXHRcdFx0XHRcdFx0XHRcdHhvZmZzZXQgPSAwO1xuXHRcdFx0XHRcdFx0XHRcdHlvZmZzZXQgPSAtc3BlY3MuYXRvbXNfZm9udF9zaXplXzJEICogLjk7XG5cdFx0XHRcdFx0XHRcdFx0bW92ZUNoYXJnZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdGhBbmdsZSA9IG0uUEkgLyAyO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuYW5nbGVPZkxlYXN0SW50ZXJmZXJlbmNlIDw9IDUgKiBtLlBJIC8gNCkge1xuXHRcdFx0XHRcdFx0XHRcdHhvZmZzZXQgPSAtc3ltYm9sV2lkdGggLyAyIC0gaFdpZHRoIC8gMiAtIG1hc3NXaWR0aCAvIDI7XG5cdFx0XHRcdFx0XHRcdFx0bW92ZUNoYXJnZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdGhBbmdsZSA9IG0uUEk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5hbmdsZU9mTGVhc3RJbnRlcmZlcmVuY2UgPCA3ICogbS5QSSAvIDQpIHtcblx0XHRcdFx0XHRcdFx0XHR4b2Zmc2V0ID0gMDtcblx0XHRcdFx0XHRcdFx0XHR5b2Zmc2V0ID0gc3BlY3MuYXRvbXNfZm9udF9zaXplXzJEICogLjk7XG5cdFx0XHRcdFx0XHRcdFx0bW92ZUNoYXJnZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdGhBbmdsZSA9IDMgKiBtLlBJIC8gMjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y3R4LmZpbGxUZXh0KCdIJywgdGhpcy54ICsgeG9mZnNldCwgdGhpcy55ICsgeW9mZnNldCk7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRCb3VuZHMucHVzaCh7XG5cdFx0XHRcdFx0XHRcdHggOiB0aGlzLnggKyB4b2Zmc2V0IC0gaFdpZHRoIC8gMixcblx0XHRcdFx0XHRcdFx0eSA6IHRoaXMueSArIHlvZmZzZXQgLSBzcGVjcy5hdG9tc19mb250X3NpemVfMkQgLyAyICsgMSxcblx0XHRcdFx0XHRcdFx0dyA6IGhXaWR0aCxcblx0XHRcdFx0XHRcdFx0aCA6IHNwZWNzLmF0b21zX2ZvbnRfc2l6ZV8yRCAtIDJcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAobW92ZUNoYXJnZSkge1xuXHRcdFx0XHRcdFx0Y2hhcmdlT2Zmc2V0ICs9IGhXaWR0aDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gYWRqdXN0IHRoZSBhbmdsZXMgbWV0YWRhdGEgdG8gYWNjb3VudCBmb3IgaHlkcm9nZW5cblx0XHRcdFx0XHQvLyBwbGFjZW1lbnRcblx0XHRcdFx0XHQvKlxuXHRcdFx0XHRcdCAqIHRoaXMuYW5nbGVzLnB1c2goaEFuZ2xlKTsgdmFyIGFuZ2xlRGF0YSA9XG5cdFx0XHRcdFx0ICogbWF0aC5hbmdsZUJldHdlZW5MYXJnZXN0KHRoaXMuYW5nbGVzKTtcblx0XHRcdFx0XHQgKiB0aGlzLmFuZ2xlT2ZMZWFzdEludGVyZmVyZW5jZSA9IGFuZ2xlRGF0YS5hbmdsZSAlIChtLlBJICpcblx0XHRcdFx0XHQgKiAyKTsgdGhpcy5sYXJnZXN0QW5nbGUgPSBhbmdsZURhdGEubGFyZ2VzdDtcblx0XHRcdFx0XHQgKi9cblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBjaGFyZ2Vcblx0XHRcdFx0aWYgKHRoaXMuY2hhcmdlICE9PSAwKSB7XG5cdFx0XHRcdFx0dmFyIHMgPSB0aGlzLmNoYXJnZS50b0ZpeGVkKDApO1xuXHRcdFx0XHRcdGlmIChzID09PSAnMScpIHtcblx0XHRcdFx0XHRcdHMgPSAnKyc7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChzID09PSAnLTEnKSB7XG5cdFx0XHRcdFx0XHRzID0gJ1xcdTIwMTMnO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoZXh0ZW5zaW9ucy5zdHJpbmdTdGFydHNXaXRoKHMsICctJykpIHtcblx0XHRcdFx0XHRcdHMgPSBzLnN1YnN0cmluZygxKSArICdcXHUyMDEzJztcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cyArPSAnKyc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciBjaGFyZ2VXaWR0aCA9IGN0eC5tZWFzdXJlVGV4dChzKS53aWR0aDtcblx0XHRcdFx0XHRjaGFyZ2VPZmZzZXQgKz0gY2hhcmdlV2lkdGggLyAyO1xuXHRcdFx0XHRcdGN0eC50ZXh0QWxpZ24gPSAnY2VudGVyJztcblx0XHRcdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cdFx0XHRcdFx0Y3R4LmZvbnQgPSBleHRlbnNpb25zLmdldEZvbnRTdHJpbmcobS5mbG9vcihzcGVjcy5hdG9tc19mb250X3NpemVfMkQgKiAuOCksIHNwZWNzLmF0b21zX2ZvbnRfZmFtaWxpZXNfMkQsIHNwZWNzLmF0b21zX2ZvbnRfYm9sZF8yRCwgc3BlY3MuYXRvbXNfZm9udF9pdGFsaWNfMkQpO1xuXHRcdFx0XHRcdGN0eC5maWxsVGV4dChzLCB0aGlzLnggKyBjaGFyZ2VPZmZzZXQgLSAxLCB0aGlzLnkgLSBzcGVjcy5hdG9tc19mb250X3NpemVfMkQgLyAyICsgMSk7XG5cdFx0XHRcdFx0dGhpcy50ZXh0Qm91bmRzLnB1c2goe1xuXHRcdFx0XHRcdFx0eCA6IHRoaXMueCArIGNoYXJnZU9mZnNldCAtIGNoYXJnZVdpZHRoIC8gMiAtIDEsXG5cdFx0XHRcdFx0XHR5IDogdGhpcy55IC0gKHNwZWNzLmF0b21zX2ZvbnRfc2l6ZV8yRCAqIDEuOCkgLyAyICsgNSxcblx0XHRcdFx0XHRcdHcgOiBjaGFyZ2VXaWR0aCxcblx0XHRcdFx0XHRcdGggOiBzcGVjcy5hdG9tc19mb250X3NpemVfMkQgLyAyIC0gMVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICh0aGlzLm51bUxvbmVQYWlyID4gMCB8fCB0aGlzLm51bVJhZGljYWwgPiAwKSB7XG5cdFx0XHRjdHguZmlsbFN0eWxlID0gJ2JsYWNrJztcblx0XHRcdHZhciBhcyA9IHRoaXMuYW5nbGVzLnNsaWNlKDApO1xuXHRcdFx0dmFyIGFsaSA9IHRoaXMuYW5nbGVPZkxlYXN0SW50ZXJmZXJlbmNlO1xuXHRcdFx0dmFyIGxhID0gdGhpcy5sYXJnZXN0QW5nbGU7XG5cdFx0XHRpZiAoaEFuZ2xlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Ly8gaGF2ZSB0byBjaGVjayBmb3IgdW5kZWZpbmVkIGhlcmUgYXMgdGhpcyBudW1iZXIgY2FuIGJlIDBcblx0XHRcdFx0YXMucHVzaChoQW5nbGUpO1xuXHRcdFx0XHRhcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdFx0XHRyZXR1cm4gYSAtIGI7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR2YXIgYW5nbGVEYXRhID0gbWF0aC5hbmdsZUJldHdlZW5MYXJnZXN0KGFzKTtcblx0XHRcdFx0YWxpID0gYW5nbGVEYXRhLmFuZ2xlICUgKG0uUEkgKiAyKTtcblx0XHRcdFx0bGEgPSBhbmdsZURhdGEubGFyZ2VzdDtcblx0XHRcdH1cblx0XHRcdHZhciB0aGluZ3MgPSBbXTtcblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMubnVtTG9uZVBhaXI7IGkrKykge1xuXHRcdFx0XHR0aGluZ3MucHVzaCh7XG5cdFx0XHRcdFx0dCA6IDJcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLm51bVJhZGljYWw7IGkrKykge1xuXHRcdFx0XHR0aGluZ3MucHVzaCh7XG5cdFx0XHRcdFx0dCA6IDFcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoaEFuZ2xlID09PSB1bmRlZmluZWQgJiYgbS5hYnMobGEgLSAyICogbS5QSSAvIGFzLmxlbmd0aCkgPCBtLlBJIC8gNjApIHtcblx0XHRcdFx0dmFyIG1pZCA9IG0uY2VpbCh0aGluZ3MubGVuZ3RoIC8gYXMubGVuZ3RoKTtcblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaW5ncy5sZW5ndGg7IGkgPCBpaTsgaSArPSBtaWQsIGFsaSArPSBsYSkge1xuXHRcdFx0XHRcdHRoaXMuZHJhd0VsZWN0cm9ucyhjdHgsIHNwZWNzLCB0aGluZ3Muc2xpY2UoaSwgbS5taW4odGhpbmdzLmxlbmd0aCwgaSArIG1pZCkpLCBhbGksIGxhLCBoQW5nbGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmRyYXdFbGVjdHJvbnMoY3R4LCBzcGVjcywgdGhpbmdzLCBhbGksIGxhLCBoQW5nbGUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyBmb3IgZGVidWdnaW5nIGF0b20gbGFiZWwgZGltZW5zaW9uc1xuXHRcdC8vY3R4LnN0cm9rZVN0eWxlID0gJ3JlZCc7IGZvcih2YXIgaSA9IDAsIGlpID0gdGhpcy50ZXh0Qm91bmRzLmxlbmd0aDtpPGlpOyBpKyspeyB2YXIgciA9IHRoaXMudGV4dEJvdW5kc1tpXTtjdHguYmVnaW5QYXRoKCk7Y3R4LnJlY3Qoci54LCByLnksIHIudywgci5oKTsgY3R4LnN0cm9rZSgpOyB9XG5cblx0fTtcblx0Xy5kcmF3RWxlY3Ryb25zID0gZnVuY3Rpb24oY3R4LCBzcGVjcywgdGhpbmdzLCBhbmdsZSwgbGFyZ2VzdCwgaEFuZ2xlKSB7XG5cdFx0dmFyIHNlZ21lbnQgPSBsYXJnZXN0IC8gKHRoaW5ncy5sZW5ndGggKyAodGhpcy5ib25kcy5sZW5ndGggPT09IDAgJiYgaEFuZ2xlID09PSB1bmRlZmluZWQgPyAwIDogMSkpO1xuXHRcdHZhciBhbmdsZVN0YXJ0ID0gYW5nbGUgLSBsYXJnZXN0IC8gMiArIHNlZ21lbnQ7XG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpbmdzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgdCA9IHRoaW5nc1tpXTtcblx0XHRcdHZhciBhbmdsZSA9IGFuZ2xlU3RhcnQgKyBpICogc2VnbWVudDtcblx0XHRcdHZhciBwMXggPSB0aGlzLnggKyBNYXRoLmNvcyhhbmdsZSkgKiBzcGVjcy5hdG9tc19sb25lUGFpckRpc3RhbmNlXzJEO1xuXHRcdFx0dmFyIHAxeSA9IHRoaXMueSAtIE1hdGguc2luKGFuZ2xlKSAqIHNwZWNzLmF0b21zX2xvbmVQYWlyRGlzdGFuY2VfMkQ7XG5cdFx0XHRpZiAodC50ID09PSAyKSB7XG5cdFx0XHRcdHZhciBwZXJwID0gYW5nbGUgKyBNYXRoLlBJIC8gMjtcblx0XHRcdFx0dmFyIGRpZnggPSBNYXRoLmNvcyhwZXJwKSAqIHNwZWNzLmF0b21zX2xvbmVQYWlyU3ByZWFkXzJEIC8gMjtcblx0XHRcdFx0dmFyIGRpZnkgPSAtTWF0aC5zaW4ocGVycCkgKiBzcGVjcy5hdG9tc19sb25lUGFpclNwcmVhZF8yRCAvIDI7XG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0Y3R4LmFyYyhwMXggKyBkaWZ4LCBwMXkgKyBkaWZ5LCBzcGVjcy5hdG9tc19sb25lUGFpckRpYW1ldGVyXzJELCAwLCBtLlBJICogMiwgZmFsc2UpO1xuXHRcdFx0XHRjdHguZmlsbCgpO1xuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdGN0eC5hcmMocDF4IC0gZGlmeCwgcDF5IC0gZGlmeSwgc3BlY3MuYXRvbXNfbG9uZVBhaXJEaWFtZXRlcl8yRCwgMCwgbS5QSSAqIDIsIGZhbHNlKTtcblx0XHRcdFx0Y3R4LmZpbGwoKTtcblx0XHRcdH0gZWxzZSBpZiAodC50ID09PSAxKSB7XG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0Y3R4LmFyYyhwMXgsIHAxeSwgc3BlY3MuYXRvbXNfbG9uZVBhaXJEaWFtZXRlcl8yRCwgMCwgbS5QSSAqIDIsIGZhbHNlKTtcblx0XHRcdFx0Y3R4LmZpbGwoKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdF8uZHJhd0RlY29yYXRpb25zID0gZnVuY3Rpb24oY3R4LCBzcGVjcykge1xuXHRcdGlmICh0aGlzLmlzSG92ZXIgfHwgdGhpcy5pc1NlbGVjdGVkKSB7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmlzSG92ZXIgPyBzcGVjcy5jb2xvckhvdmVyIDogc3BlY3MuY29sb3JTZWxlY3Q7XG5cdFx0XHRjdHgubGluZVdpZHRoID0gMS4yO1xuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0dmFyIHJhZGl1cyA9IHRoaXMuaXNIb3ZlciA/IDcgOiAxNTtcblx0XHRcdGN0eC5hcmModGhpcy54LCB0aGlzLnksIHJhZGl1cywgMCwgbS5QSSAqIDIsIGZhbHNlKTtcblx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuaXNPdmVybGFwKSB7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSBzcGVjcy5jb2xvckVycm9yO1xuXHRcdFx0Y3R4LmxpbmVXaWR0aCA9IDEuMjtcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdGN0eC5hcmModGhpcy54LCB0aGlzLnksIDcsIDAsIG0uUEkgKiAyLCBmYWxzZSk7XG5cdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0fVxuXHR9O1xuXHRfLnJlbmRlciA9IGZ1bmN0aW9uKGdsLCBzcGVjcywgbm9Db2xvcikge1xuXHRcdGlmICh0aGlzLnNwZWNzKSB7XG5cdFx0XHRzcGVjcyA9IHRoaXMuc3BlY3M7XG5cdFx0fVxuXHRcdHZhciB0cmFuc2Zvcm0gPSBtNC50cmFuc2xhdGUobTQuaWRlbnRpdHkoKSwgWyB0aGlzLngsIHRoaXMueSwgdGhpcy56IF0pO1xuXHRcdHZhciByYWRpdXMgPSBzcGVjcy5hdG9tc191c2VWRFdEaWFtZXRlcnNfM0QgPyBFTEVNRU5UW3RoaXMubGFiZWxdLnZkV1JhZGl1cyAqIHNwZWNzLmF0b21zX3Zkd011bHRpcGxpZXJfM0QgOiBzcGVjcy5hdG9tc19zcGhlcmVEaWFtZXRlcl8zRCAvIDI7XG5cdFx0aWYgKHJhZGl1cyA9PT0gMCkge1xuXHRcdFx0cmFkaXVzID0gMTtcblx0XHR9XG5cdFx0bTQuc2NhbGUodHJhbnNmb3JtLCBbIHJhZGl1cywgcmFkaXVzLCByYWRpdXMgXSk7XG5cblx0XHQvLyBjb2xvcnNcblx0XHRpZiAoIW5vQ29sb3IpIHtcblx0XHRcdHZhciBjb2xvciA9IHNwZWNzLmF0b21zX2NvbG9yO1xuXHRcdFx0aWYgKHNwZWNzLmF0b21zX3VzZUpNT0xDb2xvcnMpIHtcblx0XHRcdFx0Y29sb3IgPSBFTEVNRU5UW3RoaXMubGFiZWxdLmptb2xDb2xvcjtcblx0XHRcdH0gZWxzZSBpZiAoc3BlY3MuYXRvbXNfdXNlUFlNT0xDb2xvcnMpIHtcblx0XHRcdFx0Y29sb3IgPSBFTEVNRU5UW3RoaXMubGFiZWxdLnB5bW9sQ29sb3I7XG5cdFx0XHR9XG5cdFx0XHRnbC5tYXRlcmlhbC5zZXREaWZmdXNlQ29sb3IoZ2wsIGNvbG9yKTtcblx0XHR9XG5cblx0XHQvLyByZW5kZXJcblx0XHRnbC5zaGFkZXIuc2V0TWF0cml4VW5pZm9ybXMoZ2wsIHRyYW5zZm9ybSk7XG5cdFx0dmFyIGJ1ZmZlciA9IHRoaXMucmVuZGVyQXNTdGFyID8gZ2wuc3RhckJ1ZmZlciA6IGdsLnNwaGVyZUJ1ZmZlcjtcblx0XHRnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCBidWZmZXIudmVydGV4SW5kZXhCdWZmZXIubnVtSXRlbXMsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcblx0fTtcblx0Xy5yZW5kZXJIaWdobGlnaHQgPSBmdW5jdGlvbihnbCwgc3BlY3MpIHtcblx0XHRpZiAodGhpcy5pc1NlbGVjdGVkIHx8IHRoaXMuaXNIb3Zlcikge1xuXHRcdFx0aWYgKHRoaXMuc3BlY3MpIHtcblx0XHRcdFx0c3BlY3MgPSB0aGlzLnNwZWNzO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHRyYW5zZm9ybSA9IG00LnRyYW5zbGF0ZShtNC5pZGVudGl0eSgpLCBbIHRoaXMueCwgdGhpcy55LCB0aGlzLnogXSk7XG5cdFx0XHR2YXIgcmFkaXVzID0gc3BlY3MuYXRvbXNfdXNlVkRXRGlhbWV0ZXJzXzNEID8gRUxFTUVOVFt0aGlzLmxhYmVsXS52ZFdSYWRpdXMgKiBzcGVjcy5hdG9tc192ZHdNdWx0aXBsaWVyXzNEIDogc3BlY3MuYXRvbXNfc3BoZXJlRGlhbWV0ZXJfM0QgLyAyO1xuXHRcdFx0aWYgKHJhZGl1cyA9PT0gMCkge1xuXHRcdFx0XHRyYWRpdXMgPSAxO1xuXHRcdFx0fVxuXHRcdFx0cmFkaXVzICo9IDEuMztcblx0XHRcdG00LnNjYWxlKHRyYW5zZm9ybSwgWyByYWRpdXMsIHJhZGl1cywgcmFkaXVzIF0pO1xuXG5cdFx0XHRnbC5zaGFkZXIuc2V0TWF0cml4VW5pZm9ybXMoZ2wsIHRyYW5zZm9ybSk7XG5cdFx0XHRnbC5tYXRlcmlhbC5zZXREaWZmdXNlQ29sb3IoZ2wsIHRoaXMuaXNIb3ZlciA/IHNwZWNzLmNvbG9ySG92ZXIgOiBzcGVjcy5jb2xvclNlbGVjdCk7XG5cdFx0XHR2YXIgYnVmZmVyID0gdGhpcy5yZW5kZXJBc1N0YXIgPyBnbC5zdGFyQnVmZmVyIDogZ2wuc3BoZXJlQnVmZmVyO1xuXHRcdFx0Z2wuZHJhd0VsZW1lbnRzKGdsLlRSSUFOR0xFUywgYnVmZmVyLnZlcnRleEluZGV4QnVmZmVyLm51bUl0ZW1zLCBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XG5cdFx0fVxuXHR9O1xuXHRfLmlzTGFiZWxWaXNpYmxlID0gZnVuY3Rpb24oc3BlY3MpIHtcblx0XHRpZiAoc3BlY3MuYXRvbXNfZGlzcGxheUFsbENhcmJvbkxhYmVsc18yRCkge1xuXHRcdFx0Ly8gc2hvdyBhbGwgY2FyYm9uc1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmxhYmVsICE9PSAnQycpIHtcblx0XHRcdC8vIG5vdCBhIGNhcmJvblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmFsdExhYmVsIHx8ICFFTEVNRU5UW3RoaXMubGFiZWxdKSB7XG5cdFx0XHQvLyB0aGVyZSBpcyBhbiBhbHRlcm5hdGl2ZSBvciBjb25kZW5zZWQgbGFiZWxcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRpZiAodGhpcy5tYXNzICE9PSAtMSB8fCB0aGlzLmltcGxpY2l0SCAhPT0tMSB8fCB0aGlzLmNoYXJnZSAhPT0gMCkge1xuXHRcdFx0Ly8gYW4gaXNvdG9wZSBvciBjaGFyZ2Ugb3IgaW1wbGljaXQgaHlkcm9nZW4gb3ZlcnJpZGUgZGVzaWduYXRpb24sIHNvIGxhYmVsIG11c3QgYmUgc2hvd25cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRpZiAoc3BlY3MuYXRvbXNfc2hvd0F0dHJpYnV0ZWRDYXJib25zXzJEICYmICh0aGlzLm51bVJhZGljYWwgIT09IDAgfHwgdGhpcy5udW1Mb25lUGFpciAhPT0gMCkpIHtcblx0XHRcdC8vIHRoZXJlIGFyZSBhdHRyaWJ1dGVzIGFuZCB3ZSB3YW50IHRvIHNob3cgdGhlIGFzc29jaWF0ZWQgbGFiZWxcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRpZiAodGhpcy5pc0hpZGRlbiAmJiBzcGVjcy5hdG9tc19zaG93SGlkZGVuQ2FyYm9uc18yRCkge1xuXHRcdFx0Ly8gaWYgaXQgaXMgaGlkZGVuIGFuZCB3ZSB3YW50IHRvIHNob3cgdGhlbVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdGlmIChzcGVjcy5hdG9tc19kaXNwbGF5VGVybWluYWxDYXJib25MYWJlbHNfMkQgJiYgdGhpcy5ib25kTnVtYmVyID09PSAxKSB7XG5cdFx0XHQvLyBpZiBpdCBpcyB0ZXJtaW5hbCBhbmQgd2Ugd2FudCB0byBzaG93IHRoZW1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cdF8uZ2V0SW1wbGljaXRIeWRyb2dlbkNvdW50ID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoIUVMRU1FTlRbdGhpcy5sYWJlbF0gfHwgIUVMRU1FTlRbdGhpcy5sYWJlbF0uYWRkSCl7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cdFx0aWYodGhpcy5pbXBsaWNpdEggIT09IC0xKXtcblx0XHRcdHJldHVybiB0aGlzLmltcGxpY2l0SDtcblx0XHR9XG5cdFx0aWYgKHRoaXMubGFiZWwgPT09ICdIJykge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXHRcdHZhciB2YWxlbmNlID0gRUxFTUVOVFt0aGlzLmxhYmVsXS52YWxlbmN5O1xuXHRcdHZhciBkaWYgPSB2YWxlbmNlIC0gdGhpcy5jb29yZGluYXRpb25OdW1iZXI7XG5cdFx0aWYgKHRoaXMubnVtUmFkaWNhbCA+IDApIHtcblx0XHRcdGRpZiA9IG0ubWF4KDAsIGRpZiAtIHRoaXMubnVtUmFkaWNhbCk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmNoYXJnZSA+IDApIHtcblx0XHRcdHZhciB2ZGlmID0gNCAtIHZhbGVuY2U7XG5cdFx0XHRpZiAodGhpcy5jaGFyZ2UgPD0gdmRpZikge1xuXHRcdFx0XHRkaWYgKz0gdGhpcy5jaGFyZ2U7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkaWYgPSA0IC0gdGhpcy5jb29yZGluYXRpb25OdW1iZXIgLSB0aGlzLmNoYXJnZSArIHZkaWY7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRpZiArPSB0aGlzLmNoYXJnZTtcblx0XHR9XG5cdFx0cmV0dXJuIGRpZiA8IDAgPyAwIDogbS5mbG9vcihkaWYpO1xuXHR9O1xuXHRfLmdldEJvdW5kcyA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBib3VuZHMgPSBuZXcgbWF0aC5Cb3VuZHMoKTtcblx0XHRib3VuZHMuZXhwYW5kKHRoaXMueCwgdGhpcy55KTtcblx0XHRpZiAodGhpcy50ZXh0Qm91bmRzKSB7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy50ZXh0Qm91bmRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIHRiID0gdGhpcy50ZXh0Qm91bmRzW2ldO1xuXHRcdFx0XHRib3VuZHMuZXhwYW5kKHRiLngsIHRiLnksIHRiLnggKyB0Yi53LCB0Yi55ICsgdGIuaCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBib3VuZHM7XG5cdH07XG5cdF8uZ2V0Qm91bmRzM0QgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgYm91bmRzID0gbmV3IG1hdGguQm91bmRzKCk7XG5cdFx0Ym91bmRzLmV4cGFuZDNEKHRoaXMueCwgdGhpcy55LCB0aGlzLnopO1xuXHRcdHJldHVybiBib3VuZHM7XG5cdH07XG5cdC8qKlxuXHQgKiBHZXQgQ29sb3IgYnkgYXRvbSBlbGVtZW50LlxuXHQgKiBcblx0ICogQHBhcmFtIHtib29sZWFufVxuXHQgKiAgICAgICAgICAgIHVzZUpNT0xDb2xvcnNcblx0ICogQHBhcmFtIHtib29sZWFufVxuXHQgKiAgICAgICAgICAgIHVzZVBZTU9MQ29sb3JzXG5cdCAqIEBwYXJhbSB7c3RyaW5nfVxuXHQgKiAgICAgICAgICAgIGNvbG9yIFRoZSBkZWZhdWx0IGNvbG9yXG5cdCAqIEBwYXJhbSB7bnVtYmVyfVxuXHQgKiAgICAgICAgICAgIGRpbSBUaGUgcmVuZGVyIGRpbWVuc2lvblxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBhdG9tIGVsZW1lbnQgY29sb3Jcblx0ICovXG5cdF8uZ2V0RWxlbWVudENvbG9yID0gZnVuY3Rpb24odXNlSk1PTENvbG9ycywgdXNlUFlNT0xDb2xvcnMsIGNvbG9yKSB7XG5cdFx0aWYoIUVMRU1FTlRbdGhpcy5sYWJlbF0pe1xuXHRcdFx0cmV0dXJuICcjMDAwJztcblx0XHR9XG5cdFx0aWYgKHVzZUpNT0xDb2xvcnMpIHtcblx0XHRcdGNvbG9yID0gRUxFTUVOVFt0aGlzLmxhYmVsXS5qbW9sQ29sb3I7XG5cdFx0fSBlbHNlIGlmICh1c2VQWU1PTENvbG9ycykge1xuXHRcdFx0Y29sb3IgPSBFTEVNRU5UW3RoaXMubGFiZWxdLnB5bW9sQ29sb3I7XG5cdFx0fVxuXHRcdHJldHVybiBjb2xvcjtcblx0fTtcblxufSkoQ2hlbURvb2RsZS5FTEVNRU5ULCBDaGVtRG9vZGxlLmV4dGVuc2lvbnMsIENoZW1Eb29kbGUubWF0aCwgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLCBNYXRoLCBDaGVtRG9vZGxlLmxpYi5tYXQ0KTtcblxuKGZ1bmN0aW9uKEVMRU1FTlQsIGV4dGVuc2lvbnMsIHN0cnVjdHVyZXMsIG1hdGgsIG0sIG00LCB2MywgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0c3RydWN0dXJlcy5Cb25kID0gZnVuY3Rpb24oYTEsIGEyLCBib25kT3JkZXIpIHtcblx0XHR0aGlzLmExID0gYTE7XG5cdFx0dGhpcy5hMiA9IGEyO1xuXHRcdC8vIGJvbmRPcmRlciBjYW4gYmUgMCwgc28gbmVlZCB0byBjaGVjayBhZ2FpbnN0IHVuZGVmaW5lZFxuXHRcdHRoaXMuYm9uZE9yZGVyID0gYm9uZE9yZGVyICE9PSB1bmRlZmluZWQgPyBib25kT3JkZXIgOiAxO1xuXHR9O1xuXHRzdHJ1Y3R1cmVzLkJvbmQuU1RFUkVPX05PTkUgPSAnbm9uZSc7XG5cdHN0cnVjdHVyZXMuQm9uZC5TVEVSRU9fUFJPVFJVRElORyA9ICdwcm90cnVkaW5nJztcblx0c3RydWN0dXJlcy5Cb25kLlNURVJFT19SRUNFU1NFRCA9ICdyZWNlc3NlZCc7XG5cdHN0cnVjdHVyZXMuQm9uZC5TVEVSRU9fQU1CSUdVT1VTID0gJ2FtYmlndW91cyc7XG5cdHZhciBfID0gc3RydWN0dXJlcy5Cb25kLnByb3RvdHlwZTtcblx0Xy5zdGVyZW8gPSBzdHJ1Y3R1cmVzLkJvbmQuU1RFUkVPX05PTkU7XG5cdF8uaXNIb3ZlciA9IGZhbHNlO1xuXHRfLnJpbmcgPSB1bmRlZmluZWQ7XG5cdF8uZ2V0Q2VudGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIG5ldyBzdHJ1Y3R1cmVzLlBvaW50KCh0aGlzLmExLnggKyB0aGlzLmEyLngpIC8gMiwgKHRoaXMuYTEueSArIHRoaXMuYTIueSkgLyAyKTtcblx0fTtcblx0Xy5nZXRMZW5ndGggPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5hMS5kaXN0YW5jZSh0aGlzLmEyKTtcblx0fTtcblx0Xy5nZXRMZW5ndGgzRCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmExLmRpc3RhbmNlM0QodGhpcy5hMik7XG5cdH07XG5cdF8uY29udGFpbnMgPSBmdW5jdGlvbihhKSB7XG5cdFx0cmV0dXJuIGEgPT09IHRoaXMuYTEgfHwgYSA9PT0gdGhpcy5hMjtcblx0fTtcblx0Xy5nZXROZWlnaGJvciA9IGZ1bmN0aW9uKGEpIHtcblx0XHRpZiAoYSA9PT0gdGhpcy5hMSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYTI7XG5cdFx0fSBlbHNlIGlmIChhID09PSB0aGlzLmEyKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hMTtcblx0XHR9XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fTtcblx0Xy5kcmF3ID0gZnVuY3Rpb24oY3R4LCBzcGVjcykge1xuXHRcdGlmICh0aGlzLmExLnggPT09IHRoaXMuYTIueCAmJiB0aGlzLmExLnkgPT09IHRoaXMuYTIueSkge1xuXHRcdFx0Ly8gcmV0dXJuLCBhcyB0aGVyZSBpcyBub3RoaW5nIHRvIHJlbmRlciwgd2lsbCBvbmx5IGNhdXNlIGZpbGxcblx0XHRcdC8vIG92ZXJmbG93c1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRpZiAodGhpcy5zcGVjcykge1xuXHRcdFx0c3BlY3MgPSB0aGlzLnNwZWNzO1xuXHRcdH1cblx0XHR2YXIgeDEgPSB0aGlzLmExLng7XG5cdFx0dmFyIHgyID0gdGhpcy5hMi54O1xuXHRcdHZhciB5MSA9IHRoaXMuYTEueTtcblx0XHR2YXIgeTIgPSB0aGlzLmEyLnk7XG5cdFx0dmFyIGRpc3QgPSB0aGlzLmExLmRpc3RhbmNlKHRoaXMuYTIpO1xuXHRcdHZhciBkaWZYID0geDIgLSB4MTtcblx0XHR2YXIgZGlmWSA9IHkyIC0geTE7XG5cdFx0aWYgKHRoaXMuYTEuaXNMYXNzb2VkICYmIHRoaXMuYTIuaXNMYXNzb2VkKSB7XG5cdFx0XHR2YXIgZ3JkID0gY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KHgxLCB5MSwgeDIsIHkyKTtcblx0XHRcdGdyZC5hZGRDb2xvclN0b3AoMCwgJ3JnYmEoMjEyLCA5OSwgMCwgMCknKTtcblx0XHRcdGdyZC5hZGRDb2xvclN0b3AoMC41LCAncmdiYSgyMTIsIDk5LCAwLCAwLjgpJyk7XG5cdFx0XHRncmQuYWRkQ29sb3JTdG9wKDEsICdyZ2JhKDIxMiwgOTksIDAsIDApJyk7XG5cdFx0XHR2YXIgdXNlRGlzdCA9IDIuNTtcblx0XHRcdHZhciBwZXJwZW5kaWN1bGFyID0gdGhpcy5hMS5hbmdsZSh0aGlzLmEyKSArIG0uUEkgLyAyO1xuXHRcdFx0dmFyIG1jb3NwID0gbS5jb3MocGVycGVuZGljdWxhcik7XG5cdFx0XHR2YXIgbXNpbnAgPSBtLnNpbihwZXJwZW5kaWN1bGFyKTtcblx0XHRcdHZhciBjeDEgPSB4MSAtIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdHZhciBjeTEgPSB5MSArIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdHZhciBjeDIgPSB4MSArIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdHZhciBjeTIgPSB5MSAtIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdHZhciBjeDMgPSB4MiArIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdHZhciBjeTMgPSB5MiAtIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdHZhciBjeDQgPSB4MiAtIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdHZhciBjeTQgPSB5MiArIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdGN0eC5maWxsU3R5bGUgPSBncmQ7XG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRjdHgubW92ZVRvKGN4MSwgY3kxKTtcblx0XHRcdGN0eC5saW5lVG8oY3gyLCBjeTIpO1xuXHRcdFx0Y3R4LmxpbmVUbyhjeDMsIGN5Myk7XG5cdFx0XHRjdHgubGluZVRvKGN4NCwgY3k0KTtcblx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdGN0eC5maWxsKCk7XG5cdFx0fVxuXHRcdGlmIChzcGVjcy5hdG9tc19kaXNwbGF5ICYmICFzcGVjcy5hdG9tc19jaXJjbGVzXzJEICYmIHRoaXMuYTEuaXNMYWJlbFZpc2libGUoc3BlY3MpICYmIHRoaXMuYTEudGV4dEJvdW5kcykge1xuXHRcdFx0dmFyIGRpc3RTaHJpbmsgPSAwO1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuYTEudGV4dEJvdW5kcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdGRpc3RTaHJpbmsgPSBNYXRoLm1heChkaXN0U2hyaW5rLCBtYXRoLmNhbGN1bGF0ZURpc3RhbmNlSW50ZXJpb3IodGhpcy5hMSwgdGhpcy5hMiwgdGhpcy5hMS50ZXh0Qm91bmRzW2ldKSk7XG5cdFx0XHR9XG5cdFx0XHRkaXN0U2hyaW5rICs9IHNwZWNzLmJvbmRzX2F0b21MYWJlbEJ1ZmZlcl8yRDtcblx0XHRcdHZhciBwZXJjID0gZGlzdFNocmluayAvIGRpc3Q7XG5cdFx0XHR4MSArPSBkaWZYICogcGVyYztcblx0XHRcdHkxICs9IGRpZlkgKiBwZXJjO1xuXHRcdH1cblx0XHRpZiAoc3BlY3MuYXRvbXNfZGlzcGxheSAmJiAhc3BlY3MuYXRvbXNfY2lyY2xlc18yRCAmJiB0aGlzLmEyLmlzTGFiZWxWaXNpYmxlKHNwZWNzKSAmJiB0aGlzLmEyLnRleHRCb3VuZHMpIHtcblx0XHRcdHZhciBkaXN0U2hyaW5rID0gMDtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmEyLnRleHRCb3VuZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRkaXN0U2hyaW5rID0gTWF0aC5tYXgoZGlzdFNocmluaywgbWF0aC5jYWxjdWxhdGVEaXN0YW5jZUludGVyaW9yKHRoaXMuYTIsIHRoaXMuYTEsIHRoaXMuYTIudGV4dEJvdW5kc1tpXSkpO1xuXHRcdFx0fVxuXHRcdFx0ZGlzdFNocmluayArPSBzcGVjcy5ib25kc19hdG9tTGFiZWxCdWZmZXJfMkQ7XG5cdFx0XHR2YXIgcGVyYyA9IGRpc3RTaHJpbmsgLyBkaXN0O1xuXHRcdFx0eDIgLT0gZGlmWCAqIHBlcmM7XG5cdFx0XHR5MiAtPSBkaWZZICogcGVyYztcblx0XHR9XG5cdFx0aWYgKHNwZWNzLmJvbmRzX2NsZWFyT3ZlcmxhcHNfMkQpIHtcblx0XHRcdHZhciB4cyA9IHgxICsgZGlmWCAqIC4xNTtcblx0XHRcdHZhciB5cyA9IHkxICsgZGlmWSAqIC4xNTtcblx0XHRcdHZhciB4ZiA9IHgyIC0gZGlmWCAqIC4xNTtcblx0XHRcdHZhciB5ZiA9IHkyIC0gZGlmWSAqIC4xNTtcblx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IHNwZWNzLmJhY2tncm91bmRDb2xvcjtcblx0XHRcdGN0eC5saW5lV2lkdGggPSBzcGVjcy5ib25kc193aWR0aF8yRCArIHNwZWNzLmJvbmRzX292ZXJsYXBDbGVhcldpZHRoXzJEICogMjtcblx0XHRcdGN0eC5saW5lQ2FwID0gJ3JvdW5kJztcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdGN0eC5tb3ZlVG8oeHMsIHlzKTtcblx0XHRcdGN0eC5saW5lVG8oeGYsIHlmKTtcblx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHR9XG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5lcnJvcj9zcGVjcy5jb2xvckVycm9yOnNwZWNzLmJvbmRzX2NvbG9yO1xuXHRcdGN0eC5maWxsU3R5bGUgPSB0aGlzLmVycm9yP3NwZWNzLmNvbG9yRXJyb3I6c3BlY3MuYm9uZHNfY29sb3I7XG5cdFx0Y3R4LmxpbmVXaWR0aCA9IHNwZWNzLmJvbmRzX3dpZHRoXzJEO1xuXHRcdGN0eC5saW5lQ2FwID0gc3BlY3MuYm9uZHNfZW5kc18yRDtcblx0XHRpZiAoc3BlY3MuYm9uZHNfc3BsaXRDb2xvcikge1xuXHRcdFx0dmFyIGxpbmVhckdyYWRpZW50ID0gY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KHgxLCB5MSwgeDIsIHkyKTtcblx0XHRcdHZhciBzcGVjczEgPSB0aGlzLmExLnNwZWNzP3RoaXMuYTEuc3BlY3M6c3BlY3M7XG5cdFx0XHR2YXIgc3BlY3MyID0gdGhpcy5hMi5zcGVjcz90aGlzLmEyLnNwZWNzOnNwZWNzO1xuXHRcdFx0dmFyIGNvbG9yMSA9IHRoaXMuYTEuZ2V0RWxlbWVudENvbG9yKHNwZWNzMS5hdG9tc191c2VKTU9MQ29sb3JzLCBzcGVjczEuYXRvbXNfdXNlUFlNT0xDb2xvcnMsIHNwZWNzMS5hdG9tc19jb2xvciwgMik7XG5cdFx0XHR2YXIgY29sb3IyID0gdGhpcy5hMi5nZXRFbGVtZW50Q29sb3Ioc3BlY3MyLmF0b21zX3VzZUpNT0xDb2xvcnMsIHNwZWNzMi5hdG9tc191c2VQWU1PTENvbG9ycywgc3BlY3MyLmF0b21zX2NvbG9yLCAyKTtcblx0XHRcdGxpbmVhckdyYWRpZW50LmFkZENvbG9yU3RvcCgwLCBjb2xvcjEpO1xuXHRcdFx0aWYgKCFzcGVjcy5ib25kc19jb2xvckdyYWRpZW50KSB7XG5cdFx0XHRcdGxpbmVhckdyYWRpZW50LmFkZENvbG9yU3RvcCgwLjUsIGNvbG9yMSk7XG5cdFx0XHRcdGxpbmVhckdyYWRpZW50LmFkZENvbG9yU3RvcCgwLjUxLCBjb2xvcjIpO1xuXHRcdFx0fVxuXHRcdFx0bGluZWFyR3JhZGllbnQuYWRkQ29sb3JTdG9wKDEsIGNvbG9yMik7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSBsaW5lYXJHcmFkaWVudDtcblx0XHRcdGN0eC5maWxsU3R5bGUgPSBsaW5lYXJHcmFkaWVudDtcblx0XHR9XG5cdFx0aWYgKHNwZWNzLmJvbmRzX2xld2lzU3R5bGVfMkQgJiYgdGhpcy5ib25kT3JkZXIgJSAxID09PSAwKSB7XG5cdFx0XHR0aGlzLmRyYXdMZXdpc1N0eWxlKGN0eCwgc3BlY3MsIHgxLCB5MSwgeDIsIHkyKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3dpdGNoICh0aGlzLnF1ZXJ5PzE6dGhpcy5ib25kT3JkZXIpIHtcblx0XHRcdGNhc2UgMDpcblx0XHRcdFx0dmFyIGR4ID0geDIgLSB4MTtcblx0XHRcdFx0dmFyIGR5ID0geTIgLSB5MTtcblx0XHRcdFx0dmFyIGlubmVyRGlzdCA9IG0uc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cdFx0XHRcdHZhciBudW0gPSBtLmZsb29yKGlubmVyRGlzdCAvIHNwZWNzLmJvbmRzX2RvdFNpemVfMkQpO1xuXHRcdFx0XHR2YXIgcmVtYWluZGVyID0gKGlubmVyRGlzdCAtIChudW0gLSAxKSAqIHNwZWNzLmJvbmRzX2RvdFNpemVfMkQpIC8gMjtcblx0XHRcdFx0aWYgKG51bSAlIDIgPT09IDEpIHtcblx0XHRcdFx0XHRyZW1haW5kZXIgKz0gc3BlY3MuYm9uZHNfZG90U2l6ZV8yRCAvIDQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmVtYWluZGVyIC09IHNwZWNzLmJvbmRzX2RvdFNpemVfMkQgLyA0O1xuXHRcdFx0XHRcdG51bSArPSAyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG51bSAvPSAyO1xuXHRcdFx0XHR2YXIgYW5nbGUgPSB0aGlzLmExLmFuZ2xlKHRoaXMuYTIpO1xuXHRcdFx0XHR2YXIgeHMgPSB4MSArIHJlbWFpbmRlciAqIE1hdGguY29zKGFuZ2xlKTtcblx0XHRcdFx0dmFyIHlzID0geTEgLSByZW1haW5kZXIgKiBNYXRoLnNpbihhbmdsZSk7XG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbnVtOyBpKyspIHtcblx0XHRcdFx0XHRjdHguYXJjKHhzLCB5cywgc3BlY3MuYm9uZHNfZG90U2l6ZV8yRCAvIDIsIDAsIG0uUEkgKiAyLCBmYWxzZSk7XG5cdFx0XHRcdFx0eHMgKz0gMiAqIHNwZWNzLmJvbmRzX2RvdFNpemVfMkQgKiBNYXRoLmNvcyhhbmdsZSk7XG5cdFx0XHRcdFx0eXMgLT0gMiAqIHNwZWNzLmJvbmRzX2RvdFNpemVfMkQgKiBNYXRoLnNpbihhbmdsZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y3R4LmZpbGwoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDAuNTpcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRjdHgubW92ZVRvKHgxLCB5MSk7XG5cdFx0XHRcdGN0eC5saW5lVG8oeDIsIHkyKTtcblx0XHRcdFx0Y3R4LnNldExpbmVEYXNoKFtzcGVjcy5ib25kc19oYXNoU3BhY2luZ18yRCwgc3BlY3MuYm9uZHNfaGFzaFNwYWNpbmdfMkRdKTtcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRjdHguc2V0TGluZURhc2goW10pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMTpcblx0XHRcdFx0aWYgKCF0aGlzLnF1ZXJ5ICYmICh0aGlzLnN0ZXJlbyA9PT0gc3RydWN0dXJlcy5Cb25kLlNURVJFT19QUk9UUlVESU5HIHx8IHRoaXMuc3RlcmVvID09PSBzdHJ1Y3R1cmVzLkJvbmQuU1RFUkVPX1JFQ0VTU0VEKSkge1xuXHRcdFx0XHRcdHZhciB0aGluU3ByZWFkID0gc3BlY3MuYm9uZHNfd2lkdGhfMkQgLyAyO1xuXHRcdFx0XHRcdHZhciB1c2VEaXN0ID0gc3BlY3MuYm9uZHNfd2VkZ2VUaGlja25lc3NfMkQvMjtcblx0XHRcdFx0XHR2YXIgcGVycGVuZGljdWxhciA9IHRoaXMuYTEuYW5nbGUodGhpcy5hMikgKyBtLlBJIC8gMjtcblx0XHRcdFx0XHR2YXIgbWNvc3AgPSBtLmNvcyhwZXJwZW5kaWN1bGFyKTtcblx0XHRcdFx0XHR2YXIgbXNpbnAgPSBtLnNpbihwZXJwZW5kaWN1bGFyKTtcblx0XHRcdFx0XHR2YXIgY3gxID0geDEgLSBtY29zcCAqIHRoaW5TcHJlYWQ7XG5cdFx0XHRcdFx0dmFyIGN5MSA9IHkxICsgbXNpbnAgKiB0aGluU3ByZWFkO1xuXHRcdFx0XHRcdHZhciBjeDIgPSB4MSArIG1jb3NwICogdGhpblNwcmVhZDtcblx0XHRcdFx0XHR2YXIgY3kyID0geTEgLSBtc2lucCAqIHRoaW5TcHJlYWQ7XG5cdFx0XHRcdFx0dmFyIGN4MyA9IHgyICsgbWNvc3AgKiB1c2VEaXN0O1xuXHRcdFx0XHRcdHZhciBjeTMgPSB5MiAtIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdFx0XHR2YXIgY3g0ID0geDIgLSBtY29zcCAqIHVzZURpc3Q7XG5cdFx0XHRcdFx0dmFyIGN5NCA9IHkyICsgbXNpbnAgKiB1c2VEaXN0O1xuXHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHRjdHgubW92ZVRvKGN4MSwgY3kxKTtcblx0XHRcdFx0XHRjdHgubGluZVRvKGN4MiwgY3kyKTtcblx0XHRcdFx0XHRjdHgubGluZVRvKGN4MywgY3kzKTtcblx0XHRcdFx0XHRjdHgubGluZVRvKGN4NCwgY3k0KTtcblx0XHRcdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRcdFx0aWYgKHRoaXMuc3RlcmVvID09PSBzdHJ1Y3R1cmVzLkJvbmQuU1RFUkVPX1BST1RSVURJTkcpIHtcblx0XHRcdFx0XHRcdGN0eC5maWxsKCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGN0eC5zYXZlKCk7XG5cdFx0XHRcdFx0XHRjdHguY2xpcCgpO1xuXHRcdFx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IHVzZURpc3QgKiAyO1xuXHRcdFx0XHRcdFx0Y3R4LmxpbmVDYXAgPSAnYnV0dCc7XG5cdFx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0XHRjdHgubW92ZVRvKHgxLCB5MSk7XG5cdFx0XHRcdFx0XHQvLyB3b3JrYXJvdW5kIHRvIGxlbmd0aGVuIGRpc3RhbmNlIGZvciBGaXJlZm94IGFzIHRoZXJlIGlzIGEgYnVnLCBzaG91bGRuJ3QgYWZmZWN0IHJlbmRlcmluZyBvciBwZXJmb3JtYW5jZVxuXHRcdFx0XHRcdFx0dmFyIGR4ID0geDIgLSB4MTtcblx0XHRcdFx0XHRcdHZhciBkeSA9IHkyIC0geTE7XG5cdFx0XHRcdFx0XHRjdHgubGluZVRvKHgyKzUqZHgsIHkyKzUqZHkpO1xuXHRcdFx0XHRcdFx0Y3R4LnNldExpbmVEYXNoKFtzcGVjcy5ib25kc19oYXNoV2lkdGhfMkQsIHNwZWNzLmJvbmRzX2hhc2hTcGFjaW5nXzJEXSk7XG5cdFx0XHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHRcdFx0XHRjdHguc2V0TGluZURhc2goW10pO1xuXHRcdFx0XHRcdFx0Y3R4LnJlc3RvcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoIXRoaXMucXVlcnkgJiYgdGhpcy5zdGVyZW8gPT09IHN0cnVjdHVyZXMuQm9uZC5TVEVSRU9fQU1CSUdVT1VTKSB7XG5cdFx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRcdGN0eC5tb3ZlVG8oeDEsIHkxKTtcblx0XHRcdFx0XHR2YXIgY3VydmVzID0gbS5mbG9vcihtLnNxcnQoZGlmWCAqIGRpZlggKyBkaWZZICogZGlmWSkgLyBzcGVjcy5ib25kc193YXZ5TGVuZ3RoXzJEKTtcblx0XHRcdFx0XHR2YXIgeCA9IHgxO1xuXHRcdFx0XHRcdHZhciB5ID0geTE7XG5cdFx0XHRcdFx0dmFyIHBlcnBlbmRpY3VsYXIgPSB0aGlzLmExLmFuZ2xlKHRoaXMuYTIpICsgbS5QSSAvIDI7XG5cdFx0XHRcdFx0dmFyIG1jb3NwID0gbS5jb3MocGVycGVuZGljdWxhcik7XG5cdFx0XHRcdFx0dmFyIG1zaW5wID0gbS5zaW4ocGVycGVuZGljdWxhcik7XG5cblx0XHRcdFx0XHR2YXIgY3VydmVYID0gZGlmWCAvIGN1cnZlcztcblx0XHRcdFx0XHR2YXIgY3VydmVZID0gZGlmWSAvIGN1cnZlcztcblx0XHRcdFx0XHR2YXIgY3B4MSwgY3B4MiwgY3B5MSwgY3B5Mjtcblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gY3VydmVzOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRcdFx0eCArPSBjdXJ2ZVg7XG5cdFx0XHRcdFx0XHR5ICs9IGN1cnZlWTtcblx0XHRcdFx0XHRcdGNweDEgPSBzcGVjcy5ib25kc193YXZ5TGVuZ3RoXzJEICogbWNvc3AgKyB4IC0gY3VydmVYICogMC41O1xuXHRcdFx0XHRcdFx0Y3B5MSA9IHNwZWNzLmJvbmRzX3dhdnlMZW5ndGhfMkQgKiAtbXNpbnAgKyB5IC0gY3VydmVZICogMC41O1xuXHRcdFx0XHRcdFx0Y3B4MiA9IHNwZWNzLmJvbmRzX3dhdnlMZW5ndGhfMkQgKiAtbWNvc3AgKyB4IC0gY3VydmVYICogMC41O1xuXHRcdFx0XHRcdFx0Y3B5MiA9IHNwZWNzLmJvbmRzX3dhdnlMZW5ndGhfMkQgKiBtc2lucCArIHkgLSBjdXJ2ZVkgKiAwLjU7XG5cdFx0XHRcdFx0XHRpZiAoaSAlIDIgPT09IDApIHtcblx0XHRcdFx0XHRcdFx0Y3R4LnF1YWRyYXRpY0N1cnZlVG8oY3B4MSwgY3B5MSwgeCwgeSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjdHgucXVhZHJhdGljQ3VydmVUbyhjcHgyLCBjcHkyLCB4LCB5KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHRjdHgubW92ZVRvKHgxLCB5MSk7XG5cdFx0XHRcdFx0Y3R4LmxpbmVUbyh4MiwgeTIpO1xuXHRcdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdFx0XHRpZih0aGlzLnF1ZXJ5KXtcblx0XHRcdFx0XHRcdHRoaXMucXVlcnkuZHJhdyhjdHgsIHNwZWNzLCB0aGlzLmdldENlbnRlcigpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDEuNTpcblx0XHRcdGNhc2UgMjpcblx0XHRcdFx0dmFyIGFuZ2xlID0gdGhpcy5hMS5hbmdsZSh0aGlzLmEyKTtcblx0XHRcdFx0dmFyIHBlcnBlbmRpY3VsYXIgPSBhbmdsZSArIG0uUEkgLyAyO1xuXHRcdFx0XHR2YXIgbWNvc3AgPSBtLmNvcyhwZXJwZW5kaWN1bGFyKTtcblx0XHRcdFx0dmFyIG1zaW5wID0gbS5zaW4ocGVycGVuZGljdWxhcik7XG5cdFx0XHRcdHZhciBkaXN0ID0gdGhpcy5hMS5kaXN0YW5jZSh0aGlzLmEyKTtcblx0XHRcdFx0dmFyIHVzZURpc3QgPSBzcGVjcy5ib25kc191c2VBYnNvbHV0ZVNhdHVyYXRpb25XaWR0aHNfMkQ/c3BlY3MuYm9uZHNfc2F0dXJhdGlvbldpZHRoQWJzXzJELzI6ZGlzdCAqIHNwZWNzLmJvbmRzX3NhdHVyYXRpb25XaWR0aF8yRCAvIDI7XG5cdFx0XHRcdGlmICh0aGlzLnN0ZXJlbyA9PT0gc3RydWN0dXJlcy5Cb25kLlNURVJFT19BTUJJR1VPVVMpIHtcblx0XHRcdFx0XHR2YXIgY3gxID0geDEgLSBtY29zcCAqIHVzZURpc3Q7XG5cdFx0XHRcdFx0dmFyIGN5MSA9IHkxICsgbXNpbnAgKiB1c2VEaXN0O1xuXHRcdFx0XHRcdHZhciBjeDIgPSB4MSArIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdFx0XHR2YXIgY3kyID0geTEgLSBtc2lucCAqIHVzZURpc3Q7XG5cdFx0XHRcdFx0dmFyIGN4MyA9IHgyICsgbWNvc3AgKiB1c2VEaXN0O1xuXHRcdFx0XHRcdHZhciBjeTMgPSB5MiAtIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdFx0XHR2YXIgY3g0ID0geDIgLSBtY29zcCAqIHVzZURpc3Q7XG5cdFx0XHRcdFx0dmFyIGN5NCA9IHkyICsgbXNpbnAgKiB1c2VEaXN0O1xuXHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHRjdHgubW92ZVRvKGN4MSwgY3kxKTtcblx0XHRcdFx0XHRjdHgubGluZVRvKGN4MywgY3kzKTtcblx0XHRcdFx0XHRjdHgubW92ZVRvKGN4MiwgY3kyKTtcblx0XHRcdFx0XHRjdHgubGluZVRvKGN4NCwgY3k0KTtcblx0XHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIXNwZWNzLmJvbmRzX3N5bW1ldHJpY2FsXzJEICYmICh0aGlzLnJpbmcgfHwgdGhpcy5hMS5sYWJlbCA9PT0gJ0MnICYmIHRoaXMuYTIubGFiZWwgPT09ICdDJykpIHtcblx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0Y3R4Lm1vdmVUbyh4MSwgeTEpO1xuXHRcdFx0XHRcdGN0eC5saW5lVG8oeDIsIHkyKTtcblx0XHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHRcdFx0dmFyIGNsaXAgPSAwO1xuXHRcdFx0XHRcdHVzZURpc3QqPTI7XG5cdFx0XHRcdFx0dmFyIGNsaXBBbmdsZSA9IHNwZWNzLmJvbmRzX3NhdHVyYXRpb25BbmdsZV8yRDtcblx0XHRcdFx0XHRpZiAoY2xpcEFuZ2xlIDwgbS5QSSAvIDIpIHtcblx0XHRcdFx0XHRcdGNsaXAgPSAtKHVzZURpc3QgLyBtLnRhbihjbGlwQW5nbGUpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKG0uYWJzKGNsaXApIDwgZGlzdCAvIDIpIHtcblx0XHRcdFx0XHRcdHZhciB4dXNlMSA9IHgxIC0gbS5jb3MoYW5nbGUpICogY2xpcDtcblx0XHRcdFx0XHRcdHZhciB4dXNlMiA9IHgyICsgbS5jb3MoYW5nbGUpICogY2xpcDtcblx0XHRcdFx0XHRcdHZhciB5dXNlMSA9IHkxICsgbS5zaW4oYW5nbGUpICogY2xpcDtcblx0XHRcdFx0XHRcdHZhciB5dXNlMiA9IHkyIC0gbS5zaW4oYW5nbGUpICogY2xpcDtcblx0XHRcdFx0XHRcdHZhciBjeDEgPSB4dXNlMSAtIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdFx0XHRcdHZhciBjeTEgPSB5dXNlMSArIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdFx0XHRcdHZhciBjeDIgPSB4dXNlMSArIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdFx0XHRcdHZhciBjeTIgPSB5dXNlMSAtIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdFx0XHRcdHZhciBjeDMgPSB4dXNlMiAtIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdFx0XHRcdHZhciBjeTMgPSB5dXNlMiArIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdFx0XHRcdHZhciBjeDQgPSB4dXNlMiArIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdFx0XHRcdHZhciBjeTQgPSB5dXNlMiAtIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdFx0XHRcdHZhciBmbGlwID0gIXRoaXMucmluZyB8fCAodGhpcy5yaW5nLmNlbnRlci5hbmdsZSh0aGlzLmExKSA+IHRoaXMucmluZy5jZW50ZXIuYW5nbGUodGhpcy5hMikgJiYgISh0aGlzLnJpbmcuY2VudGVyLmFuZ2xlKHRoaXMuYTEpIC0gdGhpcy5yaW5nLmNlbnRlci5hbmdsZSh0aGlzLmEyKSA+IG0uUEkpIHx8ICh0aGlzLnJpbmcuY2VudGVyLmFuZ2xlKHRoaXMuYTEpIC0gdGhpcy5yaW5nLmNlbnRlci5hbmdsZSh0aGlzLmEyKSA8IC1tLlBJKSk7XG5cdFx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0XHRpZiAoZmxpcCkge1xuXHRcdFx0XHRcdFx0XHRjdHgubW92ZVRvKGN4MSwgY3kxKTtcblx0XHRcdFx0XHRcdFx0Y3R4LmxpbmVUbyhjeDMsIGN5Myk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjdHgubW92ZVRvKGN4MiwgY3kyKTtcblx0XHRcdFx0XHRcdFx0Y3R4LmxpbmVUbyhjeDQsIGN5NCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5ib25kT3JkZXIgIT09IDIpIHtcblx0XHRcdFx0XHRcdFx0Y3R4LnNldExpbmVEYXNoKFtzcGVjcy5ib25kc19oYXNoU3BhY2luZ18yRCwgc3BlY3MuYm9uZHNfaGFzaFNwYWNpbmdfMkRdKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdFx0XHRcdGN0eC5zZXRMaW5lRGFzaChbXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBjeDEgPSB4MSAtIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdFx0XHR2YXIgY3kxID0geTEgKyBtc2lucCAqIHVzZURpc3Q7XG5cdFx0XHRcdFx0dmFyIGN4MiA9IHgxICsgbWNvc3AgKiB1c2VEaXN0O1xuXHRcdFx0XHRcdHZhciBjeTIgPSB5MSAtIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdFx0XHR2YXIgY3gzID0geDIgKyBtY29zcCAqIHVzZURpc3Q7XG5cdFx0XHRcdFx0dmFyIGN5MyA9IHkyIC0gbXNpbnAgKiB1c2VEaXN0O1xuXHRcdFx0XHRcdHZhciBjeDQgPSB4MiAtIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdFx0XHR2YXIgY3k0ID0geTIgKyBtc2lucCAqIHVzZURpc3Q7XG5cdFx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRcdGN0eC5tb3ZlVG8oY3gxLCBjeTEpO1xuXHRcdFx0XHRcdGN0eC5saW5lVG8oY3g0LCBjeTQpO1xuXHRcdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0Y3R4Lm1vdmVUbyhjeDIsIGN5Mik7XG5cdFx0XHRcdFx0Y3R4LmxpbmVUbyhjeDMsIGN5Myk7XG5cdFx0XHRcdFx0aWYgKHRoaXMuYm9uZE9yZGVyICE9PSAyKSB7XG5cdFx0XHRcdFx0XHRjdHguc2V0TGluZURhc2goW3NwZWNzLmJvbmRzX2hhc2hXaWR0aF8yRCwgc3BlY3MuYm9uZHNfaGFzaFNwYWNpbmdfMkRdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRcdGN0eC5zZXRMaW5lRGFzaChbXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDM6XG5cdFx0XHRcdHZhciB1c2VEaXN0ID0gc3BlY3MuYm9uZHNfdXNlQWJzb2x1dGVTYXR1cmF0aW9uV2lkdGhzXzJEP3NwZWNzLmJvbmRzX3NhdHVyYXRpb25XaWR0aEFic18yRDp0aGlzLmExLmRpc3RhbmNlKHRoaXMuYTIpICogc3BlY3MuYm9uZHNfc2F0dXJhdGlvbldpZHRoXzJEO1xuXHRcdFx0XHR2YXIgcGVycGVuZGljdWxhciA9IHRoaXMuYTEuYW5nbGUodGhpcy5hMikgKyBtLlBJIC8gMjtcblx0XHRcdFx0dmFyIG1jb3NwID0gbS5jb3MocGVycGVuZGljdWxhcik7XG5cdFx0XHRcdHZhciBtc2lucCA9IG0uc2luKHBlcnBlbmRpY3VsYXIpO1xuXHRcdFx0XHR2YXIgY3gxID0geDEgLSBtY29zcCAqIHVzZURpc3Q7XG5cdFx0XHRcdHZhciBjeTEgPSB5MSArIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdFx0dmFyIGN4MiA9IHgxICsgbWNvc3AgKiB1c2VEaXN0O1xuXHRcdFx0XHR2YXIgY3kyID0geTEgLSBtc2lucCAqIHVzZURpc3Q7XG5cdFx0XHRcdHZhciBjeDMgPSB4MiArIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdFx0dmFyIGN5MyA9IHkyIC0gbXNpbnAgKiB1c2VEaXN0O1xuXHRcdFx0XHR2YXIgY3g0ID0geDIgLSBtY29zcCAqIHVzZURpc3Q7XG5cdFx0XHRcdHZhciBjeTQgPSB5MiArIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRjdHgubW92ZVRvKGN4MSwgY3kxKTtcblx0XHRcdFx0Y3R4LmxpbmVUbyhjeDQsIGN5NCk7XG5cdFx0XHRcdGN0eC5tb3ZlVG8oY3gyLCBjeTIpO1xuXHRcdFx0XHRjdHgubGluZVRvKGN4MywgY3kzKTtcblx0XHRcdFx0Y3R4Lm1vdmVUbyh4MSwgeTEpO1xuXHRcdFx0XHRjdHgubGluZVRvKHgyLCB5Mik7XG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRfLmRyYXdEZWNvcmF0aW9ucyA9IGZ1bmN0aW9uKGN0eCwgc3BlY3MpIHtcblx0XHRpZiAodGhpcy5pc0hvdmVyIHx8IHRoaXMuaXNTZWxlY3RlZCkge1xuXHRcdFx0dmFyIHBpMiA9IDIgKiBtLlBJO1xuXHRcdFx0dmFyIGFuZ2xlID0gKHRoaXMuYTEuYW5nbGVGb3JTdHVwaWRDYW52YXNBcmNzKHRoaXMuYTIpICsgbS5QSSAvIDIpICUgcGkyO1xuXHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5pc0hvdmVyID8gc3BlY3MuY29sb3JIb3ZlciA6IHNwZWNzLmNvbG9yU2VsZWN0O1xuXHRcdFx0Y3R4LmxpbmVXaWR0aCA9IDEuMjtcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdHZhciBhbmdsZVRvID0gKGFuZ2xlICsgbS5QSSkgJSBwaTI7XG5cdFx0XHRhbmdsZVRvID0gYW5nbGVUbyAlIChtLlBJICogMik7XG5cdFx0XHRjdHguYXJjKHRoaXMuYTEueCwgdGhpcy5hMS55LCA3LCBhbmdsZSwgYW5nbGVUbywgZmFsc2UpO1xuXHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0YW5nbGUgKz0gbS5QSTtcblx0XHRcdGFuZ2xlVG8gPSAoYW5nbGUgKyBtLlBJKSAlIHBpMjtcblx0XHRcdGN0eC5hcmModGhpcy5hMi54LCB0aGlzLmEyLnksIDcsIGFuZ2xlLCBhbmdsZVRvLCBmYWxzZSk7XG5cdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0fVxuXHR9O1xuXHRfLmRyYXdMZXdpc1N0eWxlID0gZnVuY3Rpb24oY3R4LCBzcGVjcywgeDEsIHkxLCB4MiwgeTIpIHtcblx0XHR2YXIgYW5nbGUgPSB0aGlzLmExLmFuZ2xlKHRoaXMuYTIpO1xuXHRcdHZhciBwZXJwID0gYW5nbGUgKyBtLlBJLzI7XG5cdFx0dmFyIGRpZnggPSB4MiAtIHgxO1xuXHRcdHZhciBkaWZ5ID0geTIgLSB5MTtcblx0XHR2YXIgaW5jcmVtZW50ID0gbS5zcXJ0KGRpZnggKiBkaWZ4ICsgZGlmeSAqIGRpZnkpIC8gKHRoaXMuYm9uZE9yZGVyICsgMSk7XG5cdFx0dmFyIHhpID0gaW5jcmVtZW50ICogbS5jb3MoYW5nbGUpO1xuXHRcdHZhciB5aSA9IC1pbmNyZW1lbnQgKiBtLnNpbihhbmdsZSk7XG5cdFx0dmFyIHggPSB4MSArIHhpO1xuXHRcdHZhciB5ID0geTEgKyB5aTtcblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLmJvbmRPcmRlcjsgaSsrKSB7XG5cdFx0XHR2YXIgc2VwID0gc3BlY3MuYXRvbXNfbG9uZVBhaXJTcHJlYWRfMkQgLyAyO1xuXHRcdFx0dmFyIGN4MSA9IHggLSBtLmNvcyhwZXJwKSAqIHNlcDtcblx0XHRcdHZhciBjeTEgPSB5ICsgbS5zaW4ocGVycCkgKiBzZXA7XG5cdFx0XHR2YXIgY3gyID0geCArIG0uY29zKHBlcnApICogc2VwO1xuXHRcdFx0dmFyIGN5MiA9IHkgLSBtLnNpbihwZXJwKSAqIHNlcDtcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdGN0eC5hcmMoY3gxIC0gc3BlY3MuYXRvbXNfbG9uZVBhaXJEaWFtZXRlcl8yRCAvIDIsIGN5MSAtIHNwZWNzLmF0b21zX2xvbmVQYWlyRGlhbWV0ZXJfMkQgLyAyLCBzcGVjcy5hdG9tc19sb25lUGFpckRpYW1ldGVyXzJELCAwLCBtLlBJICogMiwgZmFsc2UpO1xuXHRcdFx0Y3R4LmZpbGwoKTtcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdGN0eC5hcmMoY3gyIC0gc3BlY3MuYXRvbXNfbG9uZVBhaXJEaWFtZXRlcl8yRCAvIDIsIGN5MiAtIHNwZWNzLmF0b21zX2xvbmVQYWlyRGlhbWV0ZXJfMkQgLyAyLCBzcGVjcy5hdG9tc19sb25lUGFpckRpYW1ldGVyXzJELCAwLCBtLlBJICogMiwgZmFsc2UpO1xuXHRcdFx0Y3R4LmZpbGwoKTtcblx0XHRcdHggKz0geGk7XG5cdFx0XHR5ICs9IHlpO1xuXHRcdH1cblx0fTtcblx0LyoqXG5cdCAqIFxuXHQgKiBAcGFyYW0ge1dlZ0dMUmVuZGVyaW5nQ29udGV4dH1cblx0ICogICAgICAgICAgICBnbFxuXHQgKiBAcGFyYW0ge3N0cnVjdHVyZXMuVmlzdWFsU3BlY2lmaWNhdGlvbnN9XG5cdCAqICAgICAgICAgICAgc3BlY3Ncblx0ICogQHBhcmFtIHtib29sZWFufVxuXHQgKiAgICAgICAgICAgIGFzU2VnbWVudHMgVXNpbmcgY3lsaW5kZXIvc29saWQgbGluZSBvciBzZWdtZW50ZWQgcGlsbHMvZGFzaGVkXG5cdCAqICAgICAgICAgICAgbGluZVxuXHQgKiBAcmV0dXJuIHt2b2lkfVxuXHQgKi9cblx0Xy5yZW5kZXIgPSBmdW5jdGlvbihnbCwgc3BlY3MsIGFzU2VnbWVudHMpIHtcblx0XHRpZiAodGhpcy5zcGVjcykge1xuXHRcdFx0c3BlY3MgPSB0aGlzLnNwZWNzO1xuXHRcdH1cblx0XHQvLyB0aGlzIGlzIHRoZSBlbG9uZ2F0aW9uIHZlY3RvciBmb3IgdGhlIGN5bGluZGVyXG5cdFx0dmFyIGhlaWdodCA9IHRoaXMuYTEuZGlzdGFuY2UzRCh0aGlzLmEyKTtcblx0XHRpZiAoaGVpZ2h0ID09PSAwKSB7XG5cdFx0XHQvLyBpZiB0aGVyZSBpcyBubyBoZWlnaHQsIHRoZW4gbm8gcG9pbnQgaW4gcmVuZGVyaW5nIHRoaXMgYm9uZCxcblx0XHRcdC8vIGp1c3QgcmV0dXJuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gc2NhbGUgZmFjdG9yIGZvciBjeWxpbmRlci9waWxsIHJhZGl1cy5cblx0XHQvLyB3aGVuIHNjYWxlIHBpbGwsIHRoZSBjYXAgd2lsbCBhZmZlY3RlZCB0b28uXG5cdFx0dmFyIHJhZGl1c1NjYWxlID0gc3BlY3MuYm9uZHNfY3lsaW5kZXJEaWFtZXRlcl8zRCAvIDI7XG5cblx0XHQvLyBhdG9tMSBjb2xvciBhbmQgYXRvbTIgY29sb3Jcblx0XHR2YXIgYTFDb2xvciA9IHNwZWNzLmJvbmRzX2NvbG9yO1xuXHRcdHZhciBhMkNvbG9yO1xuXG5cdFx0Ly8gdHJhbnNmb3JtIHRvIHRoZSBhdG9tIGFzIHdlbGwgYXMgdGhlIG9wcG9zaXRlIGF0b20gKGZvciBKbW9sIGFuZFxuXHRcdC8vIFB5TU9MXG5cdFx0Ly8gY29sb3Igc3BsaXRzKVxuXHRcdHZhciB0cmFuc2Zvcm0gPSBtNC50cmFuc2xhdGUobTQuaWRlbnRpdHkoKSwgWyB0aGlzLmExLngsIHRoaXMuYTEueSwgdGhpcy5hMS56IF0pO1xuXHRcdHZhciB0cmFuc2Zvcm1PcHBvc2l0ZTtcblxuXHRcdC8vIHZlY3RvciBmcm9tIGF0b20xIHRvIGF0b20yXG5cdFx0dmFyIGEyYiA9IFsgdGhpcy5hMi54IC0gdGhpcy5hMS54LCB0aGlzLmEyLnkgLSB0aGlzLmExLnksIHRoaXMuYTIueiAtIHRoaXMuYTEueiBdO1xuXG5cdFx0Ly8gY2FsY3VsYXRlIHRoZSByb3RhdGlvblxuXHRcdHZhciB5ID0gWyAwLCAxLCAwIF07XG5cdFx0dmFyIGFuZyA9IDA7XG5cdFx0dmFyIGF4aXM7XG5cdFx0aWYgKHRoaXMuYTEueCA9PT0gdGhpcy5hMi54ICYmIHRoaXMuYTEueiA9PT0gdGhpcy5hMi56KSB7XG5cdFx0XHRheGlzID0gWyAwLCAwLCAxIF07XG5cdFx0XHRpZiAodGhpcy5hMi55IDwgdGhpcy5hMS55KSB7XG5cdFx0XHRcdGFuZyA9IG0uUEk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFuZyA9IGV4dGVuc2lvbnMudmVjM0FuZ2xlRnJvbSh5LCBhMmIpO1xuXHRcdFx0YXhpcyA9IHYzLmNyb3NzKHksIGEyYiwgW10pO1xuXHRcdH1cblxuXHRcdC8vIHRoZSBzcGVjcyB3aWxsIHNwbGl0IGNvbG9yIGFyZVxuXHRcdC8vIC0gTGluZVxuXHRcdC8vIC0gU3RpY2tcblx0XHQvLyAtIFdpcmVmcmFtZVxuXHRcdGlmIChzcGVjcy5ib25kc19zcGxpdENvbG9yKSB7XG5cdFx0XHR2YXIgc3BlY3MxID0gdGhpcy5hMS5zcGVjcz90aGlzLmExLnNwZWNzOnNwZWNzO1xuXHRcdFx0dmFyIHNwZWNzMiA9IHRoaXMuYTIuc3BlY3M/dGhpcy5hMi5zcGVjczpzcGVjcztcblx0XHRcdGExQ29sb3IgPSB0aGlzLmExLmdldEVsZW1lbnRDb2xvcihzcGVjczEuYXRvbXNfdXNlSk1PTENvbG9ycywgc3BlY3MxLmF0b21zX3VzZVBZTU9MQ29sb3JzLCBzcGVjczEuYXRvbXNfY29sb3IpO1xuXHRcdFx0YTJDb2xvciA9IHRoaXMuYTIuZ2V0RWxlbWVudENvbG9yKHNwZWNzMi5hdG9tc191c2VKTU9MQ29sb3JzLCBzcGVjczIuYXRvbXNfdXNlUFlNT0xDb2xvcnMsIHNwZWNzMi5hdG9tc19jb2xvcik7XG5cblx0XHRcdC8vIHRoZSB0cmFuc2Zvcm1PcHBvc2l0ZSB3aWxsIHVzZSBmb3Igc3BsaXQgY29sb3IuXG5cdFx0XHQvLyBqdXN0IG1ha2UgaXQgc3BsaXRlZCBpZiB0aGUgY29sb3IgZGlmZmVyZW50LlxuXHRcdFx0aWYgKGExQ29sb3IgIT0gYTJDb2xvcikge1xuXHRcdFx0XHR0cmFuc2Zvcm1PcHBvc2l0ZSA9IG00LnRyYW5zbGF0ZShtNC5pZGVudGl0eSgpLCBbIHRoaXMuYTIueCwgdGhpcy5hMi55LCB0aGlzLmEyLnogXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gY2FsY3VsYXRlIHRoZSB0cmFuc2xhdGlvbnMgZm9yIHVuc2F0dXJhdGVkIGJvbmRzLlxuXHRcdC8vIHJlcHJlc2VuYXR0aW8gdXNlIHNhdHVyYXRlZENyb3NzIGFyZVxuXHRcdC8vIC0gTGluZVxuXHRcdC8vIC0gV2lyZWZyYW1lXG5cdFx0Ly8gLSBCYWxsIGFuZCBTdGlja1xuXHRcdC8vIGp1c3QgU3RpY2sgd2lsbCBzZXQgYm9uZHNfc2hvd0JvbmRPcmRlcnNfM0QgdG8gZmFsc2Vcblx0XHR2YXIgb3RoZXJzID0gWyAwIF07XG5cdFx0dmFyIHNhdHVyYXRlZENyb3NzO1xuXG5cdFx0aWYgKGFzU2VnbWVudHMpIHsgLy8gYmxvY2sgZm9yIGRyYXcgYm9uZCBhcyBzZWdtZW50ZWQgbGluZS9waWxsXG5cblx0XHRcdGlmIChzcGVjcy5ib25kc19zaG93Qm9uZE9yZGVyc18zRCAmJiB0aGlzLmJvbmRPcmRlciA+IDEpIHtcblxuXHRcdFx0XHQvLyBUaGUgXCIwLjVcIiBwYXJ0IHNldCBoZXJlLFxuXHRcdFx0XHQvLyB0aGUgb3RoZXIgcGFydCAoMSkgd2lsbCByZW5kZXIgYXMgY3lsaW5kZXJcblx0XHRcdFx0b3RoZXJzID0gWy8qLXNwZWNzLmJvbmRzX2N5bGluZGVyRGlhbWV0ZXJfM0QsICovc3BlY3MuYm9uZHNfY3lsaW5kZXJEaWFtZXRlcl8zRCBdO1xuXG5cdFx0XHRcdHZhciB6ID0gWyAwLCAwLCAxIF07XG5cdFx0XHRcdHZhciBpbnZlcnNlID0gbTQuaW52ZXJzZShnbC5yb3RhdGlvbk1hdHJpeCwgW10pO1xuXHRcdFx0XHRtNC5tdWx0aXBseVZlYzMoaW52ZXJzZSwgeik7XG5cdFx0XHRcdHNhdHVyYXRlZENyb3NzID0gdjMuY3Jvc3MoYTJiLCB6LCBbXSk7XG5cdFx0XHRcdHYzLm5vcm1hbGl6ZShzYXR1cmF0ZWRDcm9zcyk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBzZWdtZW50U2NhbGUgPSAxO1xuXG5cdFx0XHR2YXIgc3BhY2VCZXR3ZWVuUGlsbCA9IHNwZWNzLmJvbmRzX3BpbGxTcGFjaW5nXzNEO1xuXG5cdFx0XHR2YXIgcGlsbEhlaWdodCA9IHNwZWNzLmJvbmRzX3BpbGxIZWlnaHRfM0Q7XG5cblx0XHRcdGlmICh0aGlzLmJvbmRPcmRlciA9PSAwKSB7XG5cblx0XHRcdFx0aWYgKHNwZWNzLmJvbmRzX3JlbmRlckFzTGluZXNfM0QpIHtcblx0XHRcdFx0XHRwaWxsSGVpZ2h0ID0gc3BhY2VCZXR3ZWVuUGlsbDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwaWxsSGVpZ2h0ID0gc3BlY3MuYm9uZHNfcGlsbERpYW1ldGVyXzNEO1xuXG5cdFx0XHRcdFx0Ly8gRGV0ZWN0IEJhbGwgYW5kIFN0aWNrIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdFx0aWYgKHBpbGxIZWlnaHQgPCBzcGVjcy5ib25kc19jeWxpbmRlckRpYW1ldGVyXzNEKSB7XG5cdFx0XHRcdFx0XHRwaWxsSGVpZ2h0IC89IDI7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c2VnbWVudFNjYWxlID0gcGlsbEhlaWdodCAvIDI7XG5cdFx0XHRcdFx0aGVpZ2h0IC89IHNlZ21lbnRTY2FsZTtcblx0XHRcdFx0XHRzcGFjZUJldHdlZW5QaWxsIC89IHNlZ21lbnRTY2FsZSAvIDI7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyB0b3RhbCBzcGFjZSBuZWVkIGZvciBvbmUgcGlsbCwgaWNsdWRlIHRoZSBzcGFjZS5cblx0XHRcdHZhciB0b3RhbFNwYWNlRm9yUGlsbCA9IHBpbGxIZWlnaHQgKyBzcGFjZUJldHdlZW5QaWxsO1xuXG5cdFx0XHQvLyBzZWdtZW50ZWQgcGlsbHMgZm9yIG9uZSBib25kLlxuXHRcdFx0dmFyIHRvdGFsUGlsbHNQZXJCb25kID0gaGVpZ2h0IC8gdG90YWxTcGFjZUZvclBpbGw7XG5cblx0XHRcdC8vIHNlZ21lbnRlZCBvbmUgdW5pdCBwaWxsIGZvciBvbmUgYm9uZFxuXHRcdFx0dmFyIHBpbGxzUGVyQm9uZCA9IG0uZmxvb3IodG90YWxQaWxsc1BlckJvbmQpO1xuXG5cdFx0XHR2YXIgZXh0cmFTZWdtZW50ZWRTcGFjZSA9IGhlaWdodCAtIHRvdGFsU3BhY2VGb3JQaWxsICogcGlsbHNQZXJCb25kO1xuXG5cdFx0XHR2YXIgcGFkZGluZ1NwYWNlID0gKHNwYWNlQmV0d2VlblBpbGwgKyBzcGVjcy5ib25kc19waWxsRGlhbWV0ZXJfM0QgKyBleHRyYVNlZ21lbnRlZFNwYWNlKSAvIDI7XG5cblx0XHRcdC8vIHBpbGxTZWdtZW50c0xlbmd0aCB3aWxsIGNoYW5nZSBpZiBib3RoIGF0b20xIGFuZCBhdG9tMiBjb2xvciB1c2VkXG5cdFx0XHQvLyBmb3IgcmVuZGVyaW5nXG5cdFx0XHR2YXIgcGlsbFNlZ21lbnRzTGVuZ3RoID0gcGlsbHNQZXJCb25kO1xuXG5cdFx0XHRpZiAodHJhbnNmb3JtT3Bwb3NpdGUpIHtcblx0XHRcdFx0Ly8gZmxvb3Igd2lsbCBlZmZlY3RlZCBmb3Igb2RkIHBpbGxzLCBiZWNhdXNlIG9uZSBwaWxsIGF0IHRoZVxuXHRcdFx0XHQvLyBjZW50ZXJcblx0XHRcdFx0Ly8gd2lsbCByZXBsYWNlIHdpdGggc3BsaXRlZCBwaWxsc1xuXHRcdFx0XHRwaWxsU2VnbWVudHNMZW5ndGggPSBtLmZsb29yKHBpbGxzUGVyQm9uZCAvIDIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyByZW5kZXIgYm9uZHNcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBvdGhlcnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgdHJhbnNmb3JtVXNlID0gbTQuc2V0KHRyYW5zZm9ybSwgW10pO1xuXG5cdFx0XHRcdGlmIChvdGhlcnNbaV0gIT09IDApIHtcblx0XHRcdFx0XHRtNC50cmFuc2xhdGUodHJhbnNmb3JtVXNlLCB2My5zY2FsZShzYXR1cmF0ZWRDcm9zcywgb3RoZXJzW2ldLCBbXSkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChhbmcgIT09IDApIHtcblx0XHRcdFx0XHRtNC5yb3RhdGUodHJhbnNmb3JtVXNlLCBhbmcsIGF4aXMpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHNlZ21lbnRTY2FsZSAhPSAxKSB7XG5cdFx0XHRcdFx0bTQuc2NhbGUodHJhbnNmb3JtVXNlLCBbIHNlZ21lbnRTY2FsZSwgc2VnbWVudFNjYWxlLCBzZWdtZW50U2NhbGUgXSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBjb2xvcnNcblx0XHRcdFx0aWYgKGExQ29sb3IpXG5cdFx0XHRcdFx0Z2wubWF0ZXJpYWwuc2V0RGlmZnVzZUNvbG9yKGdsLCBhMUNvbG9yKTtcblxuXHRcdFx0XHRtNC50cmFuc2xhdGUodHJhbnNmb3JtVXNlLCBbIDAsIHBhZGRpbmdTcGFjZSwgMCBdKTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCBwaWxsU2VnbWVudHNMZW5ndGg7IGorKykge1xuXG5cdFx0XHRcdFx0aWYgKHNwZWNzLmJvbmRzX3JlbmRlckFzTGluZXNfM0QpIHtcblx0XHRcdFx0XHRcdGlmICh0aGlzLmJvbmRPcmRlciA9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCwgdHJhbnNmb3JtVXNlKTtcblx0XHRcdFx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5QT0lOVFMsIDAsIDEpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0bTQuc2NhbGUodHJhbnNmb3JtVXNlLCBbIDEsIHBpbGxIZWlnaHQsIDEgXSk7XG5cblx0XHRcdFx0XHRcdFx0Z2wuc2hhZGVyLnNldE1hdHJpeFVuaWZvcm1zKGdsLCB0cmFuc2Zvcm1Vc2UpO1xuXHRcdFx0XHRcdFx0XHRnbC5kcmF3QXJyYXlzKGdsLkxJTkVTLCAwLCBnbC5saW5lQnVmZmVyLnZlcnRleFBvc2l0aW9uQnVmZmVyLm51bUl0ZW1zKTtcblxuXHRcdFx0XHRcdFx0XHRtNC5zY2FsZSh0cmFuc2Zvcm1Vc2UsIFsgMSwgMSAvIHBpbGxIZWlnaHQsIDEgXSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCwgdHJhbnNmb3JtVXNlKTtcblx0XHRcdFx0XHRcdGlmICh0aGlzLmJvbmRPcmRlciA9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdGdsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRVMsIGdsLnNwaGVyZUJ1ZmZlci52ZXJ0ZXhJbmRleEJ1ZmZlci5udW1JdGVtcywgZ2wuVU5TSUdORURfU0hPUlQsIDApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Z2wuZHJhd0VsZW1lbnRzKGdsLlRSSUFOR0xFUywgZ2wucGlsbEJ1ZmZlci52ZXJ0ZXhJbmRleEJ1ZmZlci5udW1JdGVtcywgZ2wuVU5TSUdORURfU0hPUlQsIDApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG00LnRyYW5zbGF0ZSh0cmFuc2Zvcm1Vc2UsIFsgMCwgdG90YWxTcGFjZUZvclBpbGwsIDAgXSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiByZW5kZXJpbmcgc2VnbWVudGVkIHBpbGwgdXNlIGF0b20xIGFuZCBhdG9tMiBjb2xvclxuXHRcdFx0XHRpZiAodHJhbnNmb3JtT3Bwb3NpdGUpIHtcblx0XHRcdFx0XHQvLyBwYXJhbWV0ZXIgZm9yIGNhbGN1bGF0ZSBzcGxpdGVkIHBpbGxzXG5cdFx0XHRcdFx0dmFyIHNjYWxlWSwgaGFsZk9uZU1pblNjYWxlWTtcblxuXHRcdFx0XHRcdGlmIChzcGVjcy5ib25kc19yZW5kZXJBc0xpbmVzXzNEKSB7XG5cdFx0XHRcdFx0XHRzY2FsZVkgPSBwaWxsSGVpZ2h0O1xuXHRcdFx0XHRcdFx0Ly8gaWYodGhpcy5ib25kT3JkZXIgIT0gMCkge1xuXHRcdFx0XHRcdFx0Ly8gc2NhbGVZIC09IHNwYWNlQmV0d2VlblBpbGw7XG5cdFx0XHRcdFx0XHQvLyB9XG5cdFx0XHRcdFx0XHRzY2FsZVkgLz0gMjtcblx0XHRcdFx0XHRcdGhhbGZPbmVNaW5TY2FsZVkgPSAwO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzY2FsZVkgPSAyIC8gMztcblx0XHRcdFx0XHRcdGhhbGZPbmVNaW5TY2FsZVkgPSAoMSAtIHNjYWxlWSkgLyAyO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIGlmIGNvdW50IG9mIHBpbGxzIHBlciBib3VuZCBpcyBvZGQsXG5cdFx0XHRcdFx0Ly8gdGhlbiBkcmF3IHRoZSBzcGxpdGVkIHBpbGxzIG9mIGF0b20xXG5cdFx0XHRcdFx0aWYgKHBpbGxzUGVyQm9uZCAlIDIgIT0gMCkge1xuXG5cdFx0XHRcdFx0XHRtNC5zY2FsZSh0cmFuc2Zvcm1Vc2UsIFsgMSwgc2NhbGVZLCAxIF0pO1xuXG5cdFx0XHRcdFx0XHRnbC5zaGFkZXIuc2V0TWF0cml4VW5pZm9ybXMoZ2wsIHRyYW5zZm9ybVVzZSk7XG5cblx0XHRcdFx0XHRcdGlmIChzcGVjcy5ib25kc19yZW5kZXJBc0xpbmVzXzNEKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKHRoaXMuYm9uZE9yZGVyID09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRnbC5kcmF3QXJyYXlzKGdsLlBPSU5UUywgMCwgMSk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5MSU5FUywgMCwgZ2wubGluZUJ1ZmZlci52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5udW1JdGVtcyk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRpZiAodGhpcy5ib25kT3JkZXIgPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdGdsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRVMsIGdsLnNwaGVyZUJ1ZmZlci52ZXJ0ZXhJbmRleEJ1ZmZlci5udW1JdGVtcywgZ2wuVU5TSUdORURfU0hPUlQsIDApO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGdsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRVMsIGdsLnBpbGxCdWZmZXIudmVydGV4SW5kZXhCdWZmZXIubnVtSXRlbXMsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdG00LnRyYW5zbGF0ZSh0cmFuc2Zvcm1Vc2UsIFsgMCwgdG90YWxTcGFjZUZvclBpbGwgKiAoMSArIGhhbGZPbmVNaW5TY2FsZVkpLCAwIF0pO1xuXG5cdFx0XHRcdFx0XHRtNC5zY2FsZSh0cmFuc2Zvcm1Vc2UsIFsgMSwgMSAvIHNjYWxlWSwgMSBdKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBwcmVwYXJlIHRvIHJlbmRlciB0aGUgYXRvbTJcblxuXHRcdFx0XHRcdG00LnNldCh0cmFuc2Zvcm1PcHBvc2l0ZSwgdHJhbnNmb3JtVXNlKTtcblx0XHRcdFx0XHRpZiAob3RoZXJzW2ldICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRtNC50cmFuc2xhdGUodHJhbnNmb3JtVXNlLCB2My5zY2FsZShzYXR1cmF0ZWRDcm9zcywgb3RoZXJzW2ldLCBbXSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBkb24ndCBjaGVjayBmb3IgMCBoZXJlIGFzIHRoYXQgbWVhbnMgaXQgc2hvdWxkIGJlIHJvdGF0ZWRcblx0XHRcdFx0XHQvLyBieSBQSSwgYnV0IFBJIHdpbGwgYmUgbmVnYXRlZFxuXHRcdFx0XHRcdG00LnJvdGF0ZSh0cmFuc2Zvcm1Vc2UsIGFuZyArIG0uUEksIGF4aXMpO1xuXG5cdFx0XHRcdFx0aWYgKHNlZ21lbnRTY2FsZSAhPSAxKSB7XG5cdFx0XHRcdFx0XHRtNC5zY2FsZSh0cmFuc2Zvcm1Vc2UsIFsgc2VnbWVudFNjYWxlLCBzZWdtZW50U2NhbGUsIHNlZ21lbnRTY2FsZSBdKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBjb2xvcnNcblx0XHRcdFx0XHRpZiAoYTJDb2xvcil7XG5cdFx0XHRcdFx0XHRnbC5tYXRlcmlhbC5zZXREaWZmdXNlQ29sb3IoZ2wsIGEyQ29sb3IpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG00LnRyYW5zbGF0ZSh0cmFuc2Zvcm1Vc2UsIFsgMCwgcGFkZGluZ1NwYWNlLCAwIF0pO1xuXG5cdFx0XHRcdFx0Ly8gZHJhdyB0aGUgcmVtYWluIHBpbGxzIHdoaWNoIHVzZSB0aGUgYXRvbTIgY29sb3Jcblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCBwaWxsU2VnbWVudHNMZW5ndGg7IGorKykge1xuXG5cdFx0XHRcdFx0XHRpZiAoc3BlY3MuYm9uZHNfcmVuZGVyQXNMaW5lc18zRCkge1xuXHRcdFx0XHRcdFx0XHRpZiAodGhpcy5ib25kT3JkZXIgPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCwgdHJhbnNmb3JtVXNlKTtcblx0XHRcdFx0XHRcdFx0XHRnbC5kcmF3QXJyYXlzKGdsLlBPSU5UUywgMCwgMSk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0bTQuc2NhbGUodHJhbnNmb3JtVXNlLCBbIDEsIHBpbGxIZWlnaHQsIDEgXSk7XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5zaGFkZXIuc2V0TWF0cml4VW5pZm9ybXMoZ2wsIHRyYW5zZm9ybVVzZSk7XG5cdFx0XHRcdFx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5MSU5FUywgMCwgZ2wubGluZUJ1ZmZlci52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5udW1JdGVtcyk7XG5cblx0XHRcdFx0XHRcdFx0XHRtNC5zY2FsZSh0cmFuc2Zvcm1Vc2UsIFsgMSwgMSAvIHBpbGxIZWlnaHQsIDEgXSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCwgdHJhbnNmb3JtVXNlKTtcblx0XHRcdFx0XHRcdFx0aWYgKHRoaXMuYm9uZE9yZGVyID09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCBnbC5zcGhlcmVCdWZmZXIudmVydGV4SW5kZXhCdWZmZXIubnVtSXRlbXMsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCBnbC5waWxsQnVmZmVyLnZlcnRleEluZGV4QnVmZmVyLm51bUl0ZW1zLCBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bTQudHJhbnNsYXRlKHRyYW5zZm9ybVVzZSwgWyAwLCB0b3RhbFNwYWNlRm9yUGlsbCwgMCBdKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBkcmF3IHRoZSBzcGxpdGVkIGNlbnRlciBwaWxscyBvZiBhdG9tMlxuXHRcdFx0XHRcdGlmIChwaWxsc1BlckJvbmQgJSAyICE9IDApIHtcblxuXHRcdFx0XHRcdFx0bTQuc2NhbGUodHJhbnNmb3JtVXNlLCBbIDEsIHNjYWxlWSwgMSBdKTtcblxuXHRcdFx0XHRcdFx0Z2wuc2hhZGVyLnNldE1hdHJpeFVuaWZvcm1zKGdsLCB0cmFuc2Zvcm1Vc2UpO1xuXG5cdFx0XHRcdFx0XHRpZiAoc3BlY3MuYm9uZHNfcmVuZGVyQXNMaW5lc18zRCkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLmJvbmRPcmRlciA9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5QT0lOVFMsIDAsIDEpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGdsLmRyYXdBcnJheXMoZ2wuTElORVMsIDAsIGdsLmxpbmVCdWZmZXIudmVydGV4UG9zaXRpb25CdWZmZXIubnVtSXRlbXMpO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKHRoaXMuYm9uZE9yZGVyID09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCBnbC5zcGhlcmVCdWZmZXIudmVydGV4SW5kZXhCdWZmZXIubnVtSXRlbXMsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCBnbC5waWxsQnVmZmVyLnZlcnRleEluZGV4QnVmZmVyLm51bUl0ZW1zLCBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRtNC50cmFuc2xhdGUodHJhbnNmb3JtVXNlLCBbIDAsIHRvdGFsU3BhY2VGb3JQaWxsICogKDEgKyBoYWxmT25lTWluU2NhbGVZKSwgMCBdKTtcblxuXHRcdFx0XHRcdFx0bTQuc2NhbGUodHJhbnNmb3JtVXNlLCBbIDEsIDEgLyBzY2FsZVksIDEgXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGNhbGN1bGF0ZSB0aGUgdHJhbnNsYXRpb25zIGZvciB1bnNhdHVyYXRlZCBib25kcy5cblx0XHRcdC8vIHJlcHJlc2VuYXRpb24gdGhhdCB1c2Ugc2F0dXJhdGVkQ3Jvc3MgYXJlXG5cdFx0XHQvLyAtIExpbmVcblx0XHRcdC8vIC0gV2lyZWZyYW1lXG5cdFx0XHQvLyAtIEJhbGwgYW5kIFN0aWNrXG5cdFx0XHQvLyBqdXN0IFN0aWNrIHdpbGwgc2V0IGJvbmRzX3Nob3dCb25kT3JkZXJzXzNEIHRvIGZhbHNlXG5cdFx0XHRpZiAoc3BlY3MuYm9uZHNfc2hvd0JvbmRPcmRlcnNfM0QpIHtcblxuXHRcdFx0XHRzd2l0Y2ggKHRoaXMuYm9uZE9yZGVyKSB7XG5cdFx0XHRcdC8vIHRoZSAwIGFuZCAwLjUgYm9uZCBvcmRlciB3aWxsIGRyYXcgYXMgc2VnbWVudGVkIHBpbGwuXG5cdFx0XHRcdC8vIHNvIHdlIG5vdCBzZXQgdGhhdCBoZXJlLlxuXHRcdFx0XHQvLyBjYXNlIDA6XG5cdFx0XHRcdC8vIGNhc2UgMC41OiBicmVhaztcblxuXHRcdFx0XHRjYXNlIDEuNTpcblx0XHRcdFx0XHQvLyBUaGUgXCIxXCIgcGFydCBzZXQgaGVyZSxcblx0XHRcdFx0XHQvLyB0aGUgb3RoZXIgcGFydCAoMC41KSB3aWxsIHJlbmRlciBhcyBzZWdtZW50ZWQgcGlsbFxuXHRcdFx0XHRcdG90aGVycyA9IFsgLXNwZWNzLmJvbmRzX2N5bGluZGVyRGlhbWV0ZXJfM0QgLypcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ICogLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQgKiBzcGVjcy5ib25kc19jeWxpbmRlckRpYW1ldGVyXzNEXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCAqL107XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRvdGhlcnMgPSBbIC1zcGVjcy5ib25kc19jeWxpbmRlckRpYW1ldGVyXzNELCBzcGVjcy5ib25kc19jeWxpbmRlckRpYW1ldGVyXzNEIF07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRvdGhlcnMgPSBbIC0xLjIgKiBzcGVjcy5ib25kc19jeWxpbmRlckRpYW1ldGVyXzNELCAwLCAxLjIgKiBzcGVjcy5ib25kc19jeWxpbmRlckRpYW1ldGVyXzNEIF07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBzYXR1cmF0ZWRDcm9zcyBqdXN0IG5lZWQgZm9yIG5lZWQgZm9yIGJvbmRvcmRlciBncmVhdGhlciB0aGFuXG5cdFx0XHRcdC8vIDFcblx0XHRcdFx0aWYgKHRoaXMuYm9uZE9yZGVyID4gMSkge1xuXHRcdFx0XHRcdHZhciB6ID0gWyAwLCAwLCAxIF07XG5cdFx0XHRcdFx0dmFyIGludmVyc2UgPSBtNC5pbnZlcnNlKGdsLnJvdGF0aW9uTWF0cml4LCBbXSk7XG5cdFx0XHRcdFx0bTQubXVsdGlwbHlWZWMzKGludmVyc2UsIHopO1xuXHRcdFx0XHRcdHNhdHVyYXRlZENyb3NzID0gdjMuY3Jvc3MoYTJiLCB6LCBbXSk7XG5cdFx0XHRcdFx0djMubm9ybWFsaXplKHNhdHVyYXRlZENyb3NzKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Ly8gZm9yIFN0aWNrIHJlcHJlc2VudGF0aW9uLCB3ZSBqdXN0IGNoYW5nZSB0aGUgY3lsaW5kZXIgcmFkaXVzXG5cdFx0XHRlbHNlIHtcblxuXHRcdFx0XHRzd2l0Y2ggKHRoaXMuYm9uZE9yZGVyKSB7XG5cdFx0XHRcdGNhc2UgMDpcblx0XHRcdFx0XHRyYWRpdXNTY2FsZSAqPSAwLjI1O1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDAuNTpcblx0XHRcdFx0Y2FzZSAxLjU6XG5cdFx0XHRcdFx0cmFkaXVzU2NhbGUgKj0gMC41O1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGlmIHRyYW5zZm9ybU9wcG9zaXRlIGlzIHNldCwgdGhlIGl0IG1lYW4gdGhlIGNvbG9yIG11c3QgYmVcblx0XHRcdC8vIHNwbGl0ZWQuXG5cdFx0XHQvLyBzbyB0aGUgaGVpZ2ggb2YgY3lsaW5kZXIgd2lsbCBiZSBoYWxmLlxuXHRcdFx0Ly8gb25lIGhhbGYgZm9yIGF0b20xIGNvbG9yIHRoZSBvdGhlciBmb3IgYXRvbTIgY29sb3Jcblx0XHRcdGlmICh0cmFuc2Zvcm1PcHBvc2l0ZSkge1xuXHRcdFx0XHRoZWlnaHQgLz0gMjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmFkaXVzIG9mIGN5bGluZGVyIGFscmVhZHkgZGVmaW5lZCB3aGVuIGluaXRpYWxpemUgY3lsaW5kZXIgbWVzaCxcblx0XHRcdC8vIHNvIGF0IHRoaXMgcmF0ZSwgdGhlIHNjYWxlIGp1c3QgbmVlZGVkIGZvciBZIHRvIHN0cmVjaFxuXHRcdFx0Ly8gY3lsaW5kZXIgdG8gYm9uZCBsZW5ndGggKGhlaWdodCkgYW5kIFggYW5kIFogZm9yIHJhZGl1cy5cblx0XHRcdHZhciBzY2FsZVZlY3RvciA9IFsgcmFkaXVzU2NhbGUsIGhlaWdodCwgcmFkaXVzU2NhbGUgXTtcblxuXHRcdFx0Ly8gcmVuZGVyIGJvbmRzXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gb3RoZXJzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIHRyYW5zZm9ybVVzZSA9IG00LnNldCh0cmFuc2Zvcm0sIFtdKTtcblx0XHRcdFx0aWYgKG90aGVyc1tpXSAhPT0gMCkge1xuXHRcdFx0XHRcdG00LnRyYW5zbGF0ZSh0cmFuc2Zvcm1Vc2UsIHYzLnNjYWxlKHNhdHVyYXRlZENyb3NzLCBvdGhlcnNbaV0sIFtdKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGFuZyAhPT0gMCkge1xuXHRcdFx0XHRcdG00LnJvdGF0ZSh0cmFuc2Zvcm1Vc2UsIGFuZywgYXhpcyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bTQuc2NhbGUodHJhbnNmb3JtVXNlLCBzY2FsZVZlY3Rvcik7XG5cblx0XHRcdFx0Ly8gY29sb3JzXG5cdFx0XHRcdGlmIChhMUNvbG9yKVxuXHRcdFx0XHRcdGdsLm1hdGVyaWFsLnNldERpZmZ1c2VDb2xvcihnbCwgYTFDb2xvcik7XG5cblx0XHRcdFx0Ly8gcmVuZGVyXG5cdFx0XHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCwgdHJhbnNmb3JtVXNlKTtcblx0XHRcdFx0aWYgKHNwZWNzLmJvbmRzX3JlbmRlckFzTGluZXNfM0QpIHtcblx0XHRcdFx0XHRnbC5kcmF3QXJyYXlzKGdsLkxJTkVTLCAwLCBnbC5saW5lQnVmZmVyLnZlcnRleFBvc2l0aW9uQnVmZmVyLm51bUl0ZW1zKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCBnbC5jeWxpbmRlckJ1ZmZlci52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5udW1JdGVtcyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiB0cmFuc2Zvcm1PcHBvc2l0ZSBpcyBzZXQsIHRoZW4gYTJDb2xvciBhbHNvIHNob3VkbCBiZVxuXHRcdFx0XHQvLyBzZXRlZCBhcyB3ZWxsLlxuXHRcdFx0XHRpZiAodHJhbnNmb3JtT3Bwb3NpdGUpIHtcblx0XHRcdFx0XHRtNC5zZXQodHJhbnNmb3JtT3Bwb3NpdGUsIHRyYW5zZm9ybVVzZSk7XG5cdFx0XHRcdFx0aWYgKG90aGVyc1tpXSAhPT0gMCkge1xuXHRcdFx0XHRcdFx0bTQudHJhbnNsYXRlKHRyYW5zZm9ybVVzZSwgdjMuc2NhbGUoc2F0dXJhdGVkQ3Jvc3MsIG90aGVyc1tpXSwgW10pKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gZG9uJ3QgY2hlY2sgZm9yIDAgaGVyZSBhcyB0aGF0IG1lYW5zIGl0IHNob3VsZCBiZSByb3RhdGVkXG5cdFx0XHRcdFx0Ly8gYnkgUEksIGJ1dCBQSSB3aWxsIGJlIG5lZ2F0ZWRcblx0XHRcdFx0XHRtNC5yb3RhdGUodHJhbnNmb3JtVXNlLCBhbmcgKyBtLlBJLCBheGlzKTtcblx0XHRcdFx0XHRtNC5zY2FsZSh0cmFuc2Zvcm1Vc2UsIHNjYWxlVmVjdG9yKTtcblxuXHRcdFx0XHRcdC8vIGNvbG9yc1xuXHRcdFx0XHRcdGlmIChhMkNvbG9yKVxuXHRcdFx0XHRcdFx0Z2wubWF0ZXJpYWwuc2V0RGlmZnVzZUNvbG9yKGdsLCBhMkNvbG9yKTtcblxuXHRcdFx0XHRcdC8vIHJlbmRlclxuXHRcdFx0XHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCwgdHJhbnNmb3JtVXNlKTtcblx0XHRcdFx0XHRpZiAoc3BlY3MuYm9uZHNfcmVuZGVyQXNMaW5lc18zRCkge1xuXHRcdFx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5MSU5FUywgMCwgZ2wubGluZUJ1ZmZlci52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5udW1JdGVtcyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVfU1RSSVAsIDAsIGdsLmN5bGluZGVyQnVmZmVyLnZlcnRleFBvc2l0aW9uQnVmZmVyLm51bUl0ZW1zKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdF8ucmVuZGVySGlnaGxpZ2h0ID0gZnVuY3Rpb24oZ2wsIHNwZWNzKSB7XG5cdFx0aWYgKHRoaXMuaXNTZWxlY3RlZCB8fCB0aGlzLmlzSG92ZXIpIHtcblx0XHRcdGlmICh0aGlzLnNwZWNzKSB7XG5cdFx0XHRcdHNwZWNzID0gdGhpcy5zcGVjcztcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLnNwZWNzKSB7XG5cdFx0XHRcdHNwZWNzID0gdGhpcy5zcGVjcztcblx0XHRcdH1cblx0XHRcdC8vIHRoaXMgaXMgdGhlIGVsb25nYXRpb24gdmVjdG9yIGZvciB0aGUgY3lsaW5kZXJcblx0XHRcdHZhciBoZWlnaHQgPSB0aGlzLmExLmRpc3RhbmNlM0QodGhpcy5hMik7XG5cdFx0XHRpZiAoaGVpZ2h0ID09PSAwKSB7XG5cdFx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIGhlaWdodCwgdGhlbiBubyBwb2ludCBpbiByZW5kZXJpbmcgdGhpcyBib25kLFxuXHRcdFx0XHQvLyBqdXN0IHJldHVyblxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIHNjYWxlIGZhY3RvciBmb3IgY3lsaW5kZXIvcGlsbCByYWRpdXMuXG5cdFx0XHQvLyB3aGVuIHNjYWxlIHBpbGwsIHRoZSBjYXAgd2lsbCBhZmZlY3RlZCB0b28uXG5cdFx0XHR2YXIgcmFkaXVzU2NhbGUgPSBzcGVjcy5ib25kc19jeWxpbmRlckRpYW1ldGVyXzNEIC8gMS4yO1xuXHRcdFx0dmFyIHRyYW5zZm9ybSA9IG00LnRyYW5zbGF0ZShtNC5pZGVudGl0eSgpLCBbIHRoaXMuYTEueCwgdGhpcy5hMS55LCB0aGlzLmExLnogXSk7XG5cblx0XHRcdC8vIHZlY3RvciBmcm9tIGF0b20xIHRvIGF0b20yXG5cdFx0XHR2YXIgYTJiID0gWyB0aGlzLmEyLnggLSB0aGlzLmExLngsIHRoaXMuYTIueSAtIHRoaXMuYTEueSwgdGhpcy5hMi56IC0gdGhpcy5hMS56IF07XG5cblx0XHRcdC8vIGNhbGN1bGF0ZSB0aGUgcm90YXRpb25cblx0XHRcdHZhciB5ID0gWyAwLCAxLCAwIF07XG5cdFx0XHR2YXIgYW5nID0gMDtcblx0XHRcdHZhciBheGlzO1xuXHRcdFx0aWYgKHRoaXMuYTEueCA9PT0gdGhpcy5hMi54ICYmIHRoaXMuYTEueiA9PT0gdGhpcy5hMi56KSB7XG5cdFx0XHRcdGF4aXMgPSBbIDAsIDAsIDEgXTtcblx0XHRcdFx0aWYgKHRoaXMuYTIueSA8IHRoaXMuYTEueSkge1xuXHRcdFx0XHRcdGFuZyA9IG0uUEk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGFuZyA9IGV4dGVuc2lvbnMudmVjM0FuZ2xlRnJvbSh5LCBhMmIpO1xuXHRcdFx0XHRheGlzID0gdjMuY3Jvc3MoeSwgYTJiLCBbXSk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgc2NhbGVWZWN0b3IgPSBbIHJhZGl1c1NjYWxlLCBoZWlnaHQsIHJhZGl1c1NjYWxlIF07XG5cdFx0XHRcblx0XHRcdGlmIChhbmcgIT09IDApIHtcblx0XHRcdFx0bTQucm90YXRlKHRyYW5zZm9ybSwgYW5nLCBheGlzKTtcblx0XHRcdH1cblx0XHRcdG00LnNjYWxlKHRyYW5zZm9ybSwgc2NhbGVWZWN0b3IpO1xuXHRcdFx0Z2wuc2hhZGVyLnNldE1hdHJpeFVuaWZvcm1zKGdsLCB0cmFuc2Zvcm0pO1xuXHRcdFx0Z2wubWF0ZXJpYWwuc2V0RGlmZnVzZUNvbG9yKGdsLCB0aGlzLmlzSG92ZXIgPyBzcGVjcy5jb2xvckhvdmVyIDogc3BlY3MuY29sb3JTZWxlY3QpO1xuXHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgMCwgZ2wuY3lsaW5kZXJCdWZmZXIudmVydGV4UG9zaXRpb25CdWZmZXIubnVtSXRlbXMpO1xuXHRcdH1cblx0fTtcblx0LyoqXG5cdCAqIFxuXHQgKiBAcGFyYW0ge1dlZ0dMUmVuZGVyaW5nQ29udGV4dH1cblx0ICogICAgICAgICAgICBnbFxuXHQgKiBAcGFyYW0ge3N0cnVjdHVyZXMuVmlzdWFsU3BlY2lmaWNhdGlvbnN9XG5cdCAqICAgICAgICAgICAgc3BlY3Ncblx0ICogQHJldHVybiB7dm9pZH1cblx0ICovXG5cdF8ucmVuZGVyUGlja2VyID0gZnVuY3Rpb24oZ2wsIHNwZWNzKSB7XG5cblx0XHQvLyBnbC5jeWxpbmRlckJ1ZmZlci5iaW5kQnVmZmVycyhnbCk7XG5cdFx0Ly8gZ2wubWF0ZXJpYWwuc2V0RGlmZnVzZUNvbG9yKFxuXHRcdC8vIHRoaXMuYm9uZE9yZGVyID09IDAgPyAnI0ZGMDAwMCcgOiAvLyBtZXJhaFxuXHRcdC8vIHRoaXMuYm9uZE9yZGVyID09IDAuNSA/ICcjRkZGRjAwJyA6IC8vIGt1bmluZ1xuXHRcdC8vIHRoaXMuYm9uZE9yZGVyID09IDEgPyAnI0ZGMDBGRicgOiAvLyB1bmd1XG5cdFx0Ly8gdGhpcy5ib25kT3JkZXIgPT0gMS41ID8gJyMwMEZGMDAnIDogLy8gaGlqYXVcblx0XHQvLyB0aGlzLmJvbmRPcmRlciA9PSAyID8gJyMwMEZGRkYnIDogLy8gY3lhblxuXHRcdC8vIHRoaXMuYm9uZE9yZGVyID09IDMgPyAnIzAwMDBGRicgOiAvLyBiaXJ1XG5cdFx0Ly8gJyNGRkZGRkYnKTtcblx0XHQvLyBnbC5tYXRlcmlhbC5zZXRBbHBoYSgxKTtcblxuXHRcdGlmICh0aGlzLnNwZWNzKSB7XG5cdFx0XHRzcGVjcyA9IHRoaXMuc3BlY3M7XG5cdFx0fVxuXHRcdC8vIHRoaXMgaXMgdGhlIGVsb25nYXRpb24gdmVjdG9yIGZvciB0aGUgY3lsaW5kZXJcblx0XHR2YXIgaGVpZ2h0ID0gdGhpcy5hMS5kaXN0YW5jZTNEKHRoaXMuYTIpO1xuXHRcdGlmIChoZWlnaHQgPT09IDApIHtcblx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIGhlaWdodCwgdGhlbiBubyBwb2ludCBpbiByZW5kZXJpbmcgdGhpcyBib25kLFxuXHRcdFx0Ly8ganVzdCByZXR1cm5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBzY2FsZSBmYWN0b3IgZm9yIGN5bGluZGVyL3BpbGwgcmFkaXVzLlxuXHRcdC8vIHdoZW4gc2NhbGUgcGlsbCwgdGhlIGNhcCB3aWxsIGFmZmVjdGVkIHRvby5cblx0XHR2YXIgcmFkaXVzU2NhbGUgPSBzcGVjcy5ib25kc19jeWxpbmRlckRpYW1ldGVyXzNEIC8gMjtcblxuXHRcdC8vIHRyYW5zZm9ybSB0byB0aGUgYXRvbSBhcyB3ZWxsIGFzIHRoZSBvcHBvc2l0ZSBhdG9tIChmb3IgSm1vbCBhbmRcblx0XHQvLyBQeU1PTFxuXHRcdC8vIGNvbG9yIHNwbGl0cylcblx0XHR2YXIgdHJhbnNmb3JtID0gbTQudHJhbnNsYXRlKG00LmlkZW50aXR5KCksIFsgdGhpcy5hMS54LCB0aGlzLmExLnksIHRoaXMuYTEueiBdKTtcblxuXHRcdC8vIHZlY3RvciBmcm9tIGF0b20xIHRvIGF0b20yXG5cdFx0dmFyIGEyYiA9IFsgdGhpcy5hMi54IC0gdGhpcy5hMS54LCB0aGlzLmEyLnkgLSB0aGlzLmExLnksIHRoaXMuYTIueiAtIHRoaXMuYTEueiBdO1xuXG5cdFx0Ly8gY2FsY3VsYXRlIHRoZSByb3RhdGlvblxuXHRcdHZhciB5ID0gWyAwLCAxLCAwIF07XG5cdFx0dmFyIGFuZyA9IDA7XG5cdFx0dmFyIGF4aXM7XG5cdFx0aWYgKHRoaXMuYTEueCA9PT0gdGhpcy5hMi54ICYmIHRoaXMuYTEueiA9PT0gdGhpcy5hMi56KSB7XG5cdFx0XHRheGlzID0gWyAwLCAwLCAxIF07XG5cdFx0XHRpZiAodGhpcy5hMi55IDwgdGhpcy5hMS55KSB7XG5cdFx0XHRcdGFuZyA9IG0uUEk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFuZyA9IGV4dGVuc2lvbnMudmVjM0FuZ2xlRnJvbSh5LCBhMmIpO1xuXHRcdFx0YXhpcyA9IHYzLmNyb3NzKHksIGEyYiwgW10pO1xuXHRcdH1cblxuXHRcdC8vIGNhbGN1bGF0ZSB0aGUgdHJhbnNsYXRpb25zIGZvciB1bnNhdHVyYXRlZCBib25kcy5cblx0XHQvLyByZXByZXNlbmF0dGlvIHVzZSBzYXR1cmF0ZWRDcm9zcyBhcmVcblx0XHQvLyAtIExpbmVcblx0XHQvLyAtIFdJcmVmcmFtZVxuXHRcdC8vIC0gQmFsbCBhbmQgU3RpY2tcblx0XHQvLyBqdXN0IFN0aWNrIHdpbGwgc2V0IGJvbmRzX3Nob3dCb25kT3JkZXJzXzNEIHRvIGZhbHNlXG5cdFx0dmFyIG90aGVycyA9IFsgMCBdO1xuXHRcdHZhciBzYXR1cmF0ZWRDcm9zcztcblxuXHRcdGlmIChzcGVjcy5ib25kc19zaG93Qm9uZE9yZGVyc18zRCkge1xuXG5cdFx0XHRpZiAoc3BlY3MuYm9uZHNfcmVuZGVyQXNMaW5lc18zRCkge1xuXG5cdFx0XHRcdHN3aXRjaCAodGhpcy5ib25kT3JkZXIpIHtcblxuXHRcdFx0XHRjYXNlIDEuNTpcblx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdG90aGVycyA9IFsgLXNwZWNzLmJvbmRzX2N5bGluZGVyRGlhbWV0ZXJfM0QsIHNwZWNzLmJvbmRzX2N5bGluZGVyRGlhbWV0ZXJfM0QgXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdG90aGVycyA9IFsgLTEuMiAqIHNwZWNzLmJvbmRzX2N5bGluZGVyRGlhbWV0ZXJfM0QsIDAsIDEuMiAqIHNwZWNzLmJvbmRzX2N5bGluZGVyRGlhbWV0ZXJfM0QgXTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIHNhdHVyYXRlZENyb3NzIGp1c3QgbmVlZCBmb3IgbmVlZCBmb3IgYm9uZG9yZGVyIGdyZWF0aGVyIHRoYW5cblx0XHRcdFx0Ly8gMVxuXHRcdFx0XHRpZiAodGhpcy5ib25kT3JkZXIgPiAxKSB7XG5cdFx0XHRcdFx0dmFyIHogPSBbIDAsIDAsIDEgXTtcblx0XHRcdFx0XHR2YXIgaW52ZXJzZSA9IG00LmludmVyc2UoZ2wucm90YXRpb25NYXRyaXgsIFtdKTtcblx0XHRcdFx0XHRtNC5tdWx0aXBseVZlYzMoaW52ZXJzZSwgeik7XG5cdFx0XHRcdFx0c2F0dXJhdGVkQ3Jvc3MgPSB2My5jcm9zcyhhMmIsIHosIFtdKTtcblx0XHRcdFx0XHR2My5ub3JtYWxpemUoc2F0dXJhdGVkQ3Jvc3MpO1xuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0c3dpdGNoICh0aGlzLmJvbmRPcmRlcikge1xuXHRcdFx0XHRjYXNlIDEuNTpcblx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdHJhZGl1c1NjYWxlICo9IDM7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRyYWRpdXNTY2FsZSAqPSAzLjQ7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHRoaXMgaXMgZm9yIFN0aWNrIHJlcGVyc2VudGF0aW9uIGJlY2F1c2UgU3RpY2sgbm90IGhhdmVcblx0XHRcdC8vIGJvbmRzX3Nob3dCb25kT3JkZXJzXzNEXG5cblx0XHRcdHN3aXRjaCAodGhpcy5ib25kT3JkZXIpIHtcblxuXHRcdFx0Y2FzZSAwOlxuXHRcdFx0XHRyYWRpdXNTY2FsZSAqPSAwLjI1O1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMC41OlxuXHRcdFx0Y2FzZSAxLjU6XG5cdFx0XHRcdHJhZGl1c1NjYWxlICo9IDAuNTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBSYWRpdXMgb2YgY3lsaW5kZXIgYWxyZWFkeSBkZWZpbmVkIHdoZW4gaW5pdGlhbGl6ZSBjeWxpbmRlciBtZXNoLFxuXHRcdC8vIHNvIGF0IHRoaXMgcmF0ZSwgdGhlIHNjYWxlIGp1c3QgbmVlZGVkIGZvciBZIHRvIHN0cmVjaFxuXHRcdC8vIGN5bGluZGVyIHRvIGJvbmQgbGVuZ3RoIChoZWlnaHQpIGFuZCBYIGFuZCBaIGZvciByYWRpdXMuXG5cdFx0dmFyIHNjYWxlVmVjdG9yID0gWyByYWRpdXNTY2FsZSwgaGVpZ2h0LCByYWRpdXNTY2FsZSBdO1xuXG5cdFx0Ly8gcmVuZGVyIGJvbmRzXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IG90aGVycy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgdHJhbnNmb3JtVXNlID0gbTQuc2V0KHRyYW5zZm9ybSwgW10pO1xuXHRcdFx0aWYgKG90aGVyc1tpXSAhPT0gMCkge1xuXHRcdFx0XHRtNC50cmFuc2xhdGUodHJhbnNmb3JtVXNlLCB2My5zY2FsZShzYXR1cmF0ZWRDcm9zcywgb3RoZXJzW2ldLCBbXSkpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGFuZyAhPT0gMCkge1xuXHRcdFx0XHRtNC5yb3RhdGUodHJhbnNmb3JtVXNlLCBhbmcsIGF4aXMpO1xuXHRcdFx0fVxuXHRcdFx0bTQuc2NhbGUodHJhbnNmb3JtVXNlLCBzY2FsZVZlY3Rvcik7XG5cblx0XHRcdC8vIHJlbmRlclxuXHRcdFx0Z2wuc2hhZGVyLnNldE1hdHJpeFVuaWZvcm1zKGdsLCB0cmFuc2Zvcm1Vc2UpO1xuXHRcdFx0aWYgKHNwZWNzLmJvbmRzX3JlbmRlckFzTGluZXNfM0QpIHtcblx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5MSU5FUywgMCwgZ2wubGluZUJ1ZmZlci52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5udW1JdGVtcyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCBnbC5jeWxpbmRlckJ1ZmZlci52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5udW1JdGVtcyk7XG5cdFx0XHR9XG5cblx0XHR9XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuRUxFTUVOVCwgQ2hlbURvb2RsZS5leHRlbnNpb25zLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMsIENoZW1Eb29kbGUubWF0aCwgTWF0aCwgQ2hlbURvb2RsZS5saWIubWF0NCwgQ2hlbURvb2RsZS5saWIudmVjMyk7XG5cbihmdW5jdGlvbihzdHJ1Y3R1cmVzLCBtLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRzdHJ1Y3R1cmVzLlJpbmcgPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmF0b21zID0gW107XG5cdFx0dGhpcy5ib25kcyA9IFtdO1xuXHR9O1xuXHR2YXIgXyA9IHN0cnVjdHVyZXMuUmluZy5wcm90b3R5cGU7XG5cdF8uY2VudGVyID0gdW5kZWZpbmVkO1xuXHRfLnNldHVwQm9uZHMgPSBmdW5jdGlvbigpIHtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5ib25kcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR0aGlzLmJvbmRzW2ldLnJpbmcgPSB0aGlzO1xuXHRcdH1cblx0XHR0aGlzLmNlbnRlciA9IHRoaXMuZ2V0Q2VudGVyKCk7XG5cdH07XG5cdF8uZ2V0Q2VudGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1pblggPSBJbmZpbml0eSwgbWluWSA9IEluZmluaXR5LCBtYXhYID0gLUluZmluaXR5LCBtYXhZID0gLUluZmluaXR5O1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdG1pblggPSBtLm1pbih0aGlzLmF0b21zW2ldLngsIG1pblgpO1xuXHRcdFx0bWluWSA9IG0ubWluKHRoaXMuYXRvbXNbaV0ueSwgbWluWSk7XG5cdFx0XHRtYXhYID0gbS5tYXgodGhpcy5hdG9tc1tpXS54LCBtYXhYKTtcblx0XHRcdG1heFkgPSBtLm1heCh0aGlzLmF0b21zW2ldLnksIG1heFkpO1xuXHRcdH1cblx0XHRyZXR1cm4gbmV3IHN0cnVjdHVyZXMuUG9pbnQoKG1heFggKyBtaW5YKSAvIDIsIChtYXhZICsgbWluWSkgLyAyKTtcblx0fTtcblxufSkoQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLCBNYXRoKTtcblxuKGZ1bmN0aW9uKGMsIG1hdGgsIHN0cnVjdHVyZXMsIFJFU0lEVUUsIG0sIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdHN0cnVjdHVyZXMuTW9sZWN1bGUgPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmF0b21zID0gW107XG5cdFx0dGhpcy5ib25kcyA9IFtdO1xuXHRcdHRoaXMucmluZ3MgPSBbXTtcblx0fTtcblx0dmFyIF8gPSBzdHJ1Y3R1cmVzLk1vbGVjdWxlLnByb3RvdHlwZTtcblx0Ly8gdGhpcyBjYW4gYmUgYW4gZXh0ZW5zaXZlIGFsZ29yaXRobSBmb3IgbGFyZ2UgbW9sZWN1bGVzLCB5b3UgbWF5IHdhbnRcblx0Ly8gdG8gdHVybiB0aGlzIG9mZlxuXHRfLmZpbmRSaW5ncyA9IHRydWU7XG5cdF8uZHJhdyA9IGZ1bmN0aW9uKGN0eCwgc3BlY3MpIHtcblx0XHRpZiAodGhpcy5zcGVjcykge1xuXHRcdFx0c3BlY3MgPSB0aGlzLnNwZWNzO1xuXHRcdH1cblx0XHQvLyBkcmF3XG5cdFx0Ly8gbmVlZCB0aGlzIHdlaXJkIHJlbmRlciBvZiBhdG9tcyBiZWZvcmUgYW5kIGFmdGVyLCBqdXN0IGluIGNhc2Vcblx0XHQvLyBjaXJjbGVzIGFyZSByZW5kZXJlZCwgYXMgdGhvc2Ugc2hvdWxkIGJlIG9uIHRvcFxuXHRcdGlmIChzcGVjcy5hdG9tc19kaXNwbGF5ICYmICFzcGVjcy5hdG9tc19jaXJjbGVzXzJEKSB7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHRoaXMuYXRvbXNbaV0uZHJhdyhjdHgsIHNwZWNzKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHNwZWNzLmJvbmRzX2Rpc3BsYXkpIHtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmJvbmRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dGhpcy5ib25kc1tpXS5kcmF3KGN0eCwgc3BlY3MpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoc3BlY3MuYXRvbXNfZGlzcGxheSkge1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuYXRvbXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgYSA9IHRoaXMuYXRvbXNbaV07XG5cdFx0XHRcdGlmKHNwZWNzLmF0b21zX2NpcmNsZXNfMkQpe1xuXHRcdFx0XHRcdGEuZHJhdyhjdHgsIHNwZWNzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZihhLnF1ZXJ5KXtcblx0XHRcdFx0XHRhLnF1ZXJ5LmRyYXcoY3R4LCBzcGVjcywgYSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdF8ucmVuZGVyID0gZnVuY3Rpb24oZ2wsIHNwZWNzKSB7XG5cdFx0Ly8gdW5jb21tZW50IHRoaXMgdG8gcmVuZGVyIHRoZSBwaWNraW5nIGZyYW1lXG5cdFx0Ly8gcmV0dXJuIHRoaXMucmVuZGVyUGlja0ZyYW1lKGdsLCBzcGVjcywgW10pO1xuXHRcdGlmICh0aGlzLnNwZWNzKSB7XG5cdFx0XHRzcGVjcyA9IHRoaXMuc3BlY3M7XG5cdFx0fVxuXHRcdC8vIGNoZWNrIGV4cGxpY2l0bHkgaWYgaXQgaXMgdW5kZWZpbmVkIGhlcmUsIHNpbmNlIGhldGF0bSBpcyBhXG5cdFx0Ly8gYm9vbGVhbiB0aGF0IGNhbiBiZSB0cnVlIG9yIGZhbHNlLCBhcyBsb25nIGFzIGl0IGlzIHNldCwgaXQgaXNcblx0XHQvLyBtYWNyb1xuXHRcdHZhciBpc01hY3JvID0gdGhpcy5hdG9tcy5sZW5ndGggPiAwICYmIHRoaXMuYXRvbXNbMF0uaGV0YXRtICE9PSB1bmRlZmluZWQ7XG5cdFx0aWYgKGlzTWFjcm8pIHtcblx0XHRcdGlmIChzcGVjcy5tYWNyb19kaXNwbGF5Qm9uZHMpIHtcblx0XHRcdFx0aWYgKHRoaXMuYm9uZHMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdGlmIChzcGVjcy5ib25kc19yZW5kZXJBc0xpbmVzXzNEICYmICF0aGlzLnJlc2lkdWVTcGVjcyB8fCB0aGlzLnJlc2lkdWVTcGVjcyAmJiB0aGlzLnJlc2lkdWVTcGVjcy5ib25kc19yZW5kZXJBc0xpbmVzXzNEKSB7XG5cdFx0XHRcdFx0XHRnbC5saW5lV2lkdGgodGhpcy5yZXNpZHVlU3BlY3MgPyB0aGlzLnJlc2lkdWVTcGVjcy5ib25kc193aWR0aF8yRCA6IHNwZWNzLmJvbmRzX3dpZHRoXzJEKTtcblx0XHRcdFx0XHRcdGdsLmxpbmVCdWZmZXIuYmluZEJ1ZmZlcnMoZ2wpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRnbC5jeWxpbmRlckJ1ZmZlci5iaW5kQnVmZmVycyhnbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIGNvbG9yc1xuXHRcdFx0XHRcdGdsLm1hdGVyaWFsLnNldFRlbXBDb2xvcnMoZ2wsIHNwZWNzLmJvbmRzX21hdGVyaWFsQW1iaWVudENvbG9yXzNELCB1bmRlZmluZWQsIHNwZWNzLmJvbmRzX21hdGVyaWFsU3BlY3VsYXJDb2xvcl8zRCwgc3BlY3MuYm9uZHNfbWF0ZXJpYWxTaGluaW5lc3NfM0QpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmJvbmRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgYiA9IHRoaXMuYm9uZHNbaV07XG5cdFx0XHRcdFx0Ly8gY2xvc2VzdERpc3RhbmNlIG1heSBiZSAwLCBzbyBjaGVjayBpZiB1bmRlZmluZWRcblx0XHRcdFx0XHRpZiAoIWIuYTEuaGV0YXRtICYmIChzcGVjcy5tYWNyb19hdG9tVG9MaWdhbmREaXN0YW5jZSA9PT0gLTEgfHwgKGIuYTEuY2xvc2VzdERpc3RhbmNlICE9PSB1bmRlZmluZWQgJiYgc3BlY3MubWFjcm9fYXRvbVRvTGlnYW5kRGlzdGFuY2UgPj0gYi5hMS5jbG9zZXN0RGlzdGFuY2UgJiYgc3BlY3MubWFjcm9fYXRvbVRvTGlnYW5kRGlzdGFuY2UgPj0gYi5hMi5jbG9zZXN0RGlzdGFuY2UpKSkge1xuXHRcdFx0XHRcdFx0Yi5yZW5kZXIoZ2wsIHRoaXMucmVzaWR1ZVNwZWNzID8gdGhpcy5yZXNpZHVlU3BlY3MgOiBzcGVjcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoc3BlY3MubWFjcm9fZGlzcGxheUF0b21zKSB7XG5cdFx0XHRcdGlmICh0aGlzLmF0b21zLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRnbC5zcGhlcmVCdWZmZXIuYmluZEJ1ZmZlcnMoZ2wpO1xuXHRcdFx0XHRcdC8vIGNvbG9yc1xuXHRcdFx0XHRcdGdsLm1hdGVyaWFsLnNldFRlbXBDb2xvcnMoZ2wsIHNwZWNzLmF0b21zX21hdGVyaWFsQW1iaWVudENvbG9yXzNELCB1bmRlZmluZWQsIHNwZWNzLmF0b21zX21hdGVyaWFsU3BlY3VsYXJDb2xvcl8zRCwgc3BlY3MuYXRvbXNfbWF0ZXJpYWxTaGluaW5lc3NfM0QpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgYSA9IHRoaXMuYXRvbXNbaV07XG5cdFx0XHRcdFx0Ly8gY2xvc2VzdERpc3RhbmNlIG1heSBiZSAwLCBzbyBjaGVjayBpZiB1bmRlZmluZWRcblx0XHRcdFx0XHRpZiAoIWEuaGV0YXRtICYmIChzcGVjcy5tYWNyb19hdG9tVG9MaWdhbmREaXN0YW5jZSA9PT0gLTEgfHwgKGEuY2xvc2VzdERpc3RhbmNlICE9PSB1bmRlZmluZWQgJiYgc3BlY3MubWFjcm9fYXRvbVRvTGlnYW5kRGlzdGFuY2UgPj0gYS5jbG9zZXN0RGlzdGFuY2UpKSkge1xuXHRcdFx0XHRcdFx0YS5yZW5kZXIoZ2wsIHRoaXMucmVzaWR1ZVNwZWNzID8gdGhpcy5yZXNpZHVlU3BlY3MgOiBzcGVjcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChzcGVjcy5ib25kc19kaXNwbGF5KSB7XG5cdFx0XHQvLyBBcnJheSBmb3IgSGFsZiBCb25kcy4gSXQgaXMgbmVlZGVkIGJlY2F1c2UgSGFsZiBCb25kcyB1c2UgdGhlXG5cdFx0XHQvLyBwaWxsIGJ1ZmZlci5cblx0XHRcdHZhciBhc1BpbGxzID0gW107XG5cdFx0XHQvLyBBcnJheSBmb3IgMCBib25kIG9yZGVyLlxuXHRcdFx0dmFyIGFzU3BoZXJlcyA9IFtdO1xuXHRcdFx0aWYgKHRoaXMuYm9uZHMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRpZiAoc3BlY3MuYm9uZHNfcmVuZGVyQXNMaW5lc18zRCkge1xuXHRcdFx0XHRcdGdsLmxpbmVXaWR0aChzcGVjcy5ib25kc193aWR0aF8yRCk7XG5cdFx0XHRcdFx0Z2wubGluZUJ1ZmZlci5iaW5kQnVmZmVycyhnbCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Z2wuY3lsaW5kZXJCdWZmZXIuYmluZEJ1ZmZlcnMoZ2wpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGNvbG9yc1xuXHRcdFx0XHRnbC5tYXRlcmlhbC5zZXRUZW1wQ29sb3JzKGdsLCBzcGVjcy5ib25kc19tYXRlcmlhbEFtYmllbnRDb2xvcl8zRCwgdW5kZWZpbmVkLCBzcGVjcy5ib25kc19tYXRlcmlhbFNwZWN1bGFyQ29sb3JfM0QsIHNwZWNzLmJvbmRzX21hdGVyaWFsU2hpbmluZXNzXzNEKTtcblx0XHRcdH1cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmJvbmRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIGIgPSB0aGlzLmJvbmRzW2ldO1xuXHRcdFx0XHRpZiAoIWlzTWFjcm8gfHwgYi5hMS5oZXRhdG0pIHtcblx0XHRcdFx0XHQvLyBDaGVjayBpZiByZW5kZXIgYXMgc2VnbWVudGVkIHBpbGwgd2lsbCB1c2VkLlxuXHRcdFx0XHRcdGlmIChzcGVjcy5ib25kc19zaG93Qm9uZE9yZGVyc18zRCkge1xuXHRcdFx0XHRcdFx0aWYgKGIuYm9uZE9yZGVyID09IDApIHtcblx0XHRcdFx0XHRcdFx0Ly8gMCBib25kIG9yZGVyXG5cdFx0XHRcdFx0XHRcdGFzU3BoZXJlcy5wdXNoKGIpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChiLmJvbmRPcmRlciA9PSAwLjUpIHtcblx0XHRcdFx0XHRcdFx0Ly8gMC41IGJvbmQgb3JkZXJcblx0XHRcdFx0XHRcdFx0YXNQaWxscy5wdXNoKGIpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0aWYgKGIuYm9uZE9yZGVyID09IDEuNSkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIEZvciAxLjUgYm9uZCBvcmRlciwgdGhlIFwiMVwiIHBhcnQgd2lsbCByZW5kZXJcblx0XHRcdFx0XHRcdFx0XHQvLyBhcyBjeWxpbmRlciwgYW5kIHRoZSBcIjAuNVwiIHBhcnQgd2lsbCByZW5kZXJcblx0XHRcdFx0XHRcdFx0XHQvLyBhcyBzZWdtZW50ZWQgcGlsbHNcblx0XHRcdFx0XHRcdFx0XHRhc1BpbGxzLnB1c2goYik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0Yi5yZW5kZXIoZ2wsIHNwZWNzKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ly8gdGhpcyB3aWxsIHJlbmRlciB0aGUgU3RpY2sgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0XHRcdGIucmVuZGVyKGdsLCBzcGVjcyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIFJlbmRlciB0aGUgSGFsZiBCb25kXG5cdFx0XHRpZiAoYXNQaWxscy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdC8vIGlmIGJvbmRzX3JlbmRlckFzTGluZXNfM0QgaXMgdHJ1ZSwgdGhlbiBsaW5lQnVmZmVyIHdpbGxcblx0XHRcdFx0Ly8gYmluZGVkLlxuXHRcdFx0XHQvLyBzbyBpbiBoZXJlIHdlIGp1c3QgbmVlZCB0byBjaGVjayBpZiB3ZSBuZWVkIHRvIGNoYW5nZVxuXHRcdFx0XHQvLyB0aGUgYmluZGluZyBidWZmZXIgdG8gcGlsbEJ1ZmZlciBvciBub3QuXG5cdFx0XHRcdGlmICghc3BlY3MuYm9uZHNfcmVuZGVyQXNMaW5lc18zRCkge1xuXHRcdFx0XHRcdGdsLnBpbGxCdWZmZXIuYmluZEJ1ZmZlcnMoZ2wpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBhc1BpbGxzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHRhc1BpbGxzW2ldLnJlbmRlcihnbCwgc3BlY3MsIHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyBSZW5kZXIgemVybyBib25kIG9yZGVyXG5cdFx0XHRpZiAoYXNTcGhlcmVzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0Ly8gaWYgYm9uZHNfcmVuZGVyQXNMaW5lc18zRCBpcyB0cnVlLCB0aGVuIGxpbmVCdWZmZXIgd2lsbFxuXHRcdFx0XHQvLyBiaW5kZWQuXG5cdFx0XHRcdC8vIHNvIGluIGhlcmUgd2UganVzdCBuZWVkIHRvIGNoZWNrIGlmIHdlIG5lZWQgdG8gY2hhbmdlXG5cdFx0XHRcdC8vIHRoZSBiaW5kaW5nIGJ1ZmZlciB0byBwaWxsQnVmZmVyIG9yIG5vdC5cblx0XHRcdFx0aWYgKCFzcGVjcy5ib25kc19yZW5kZXJBc0xpbmVzXzNEKSB7XG5cdFx0XHRcdFx0Z2wuc3BoZXJlQnVmZmVyLmJpbmRCdWZmZXJzKGdsKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gYXNTcGhlcmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHRhc1NwaGVyZXNbaV0ucmVuZGVyKGdsLCBzcGVjcywgdHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHNwZWNzLmF0b21zX2Rpc3BsYXkpIHtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIGEgPSB0aGlzLmF0b21zW2ldO1xuXHRcdFx0XHRhLmJvbmROdW1iZXIgPSAwO1xuXHRcdFx0XHRhLnJlbmRlckFzU3RhciA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuYm9uZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgYiA9IHRoaXMuYm9uZHNbaV07XG5cdFx0XHRcdGIuYTEuYm9uZE51bWJlcisrO1xuXHRcdFx0XHRiLmEyLmJvbmROdW1iZXIrKztcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLmF0b21zLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0Z2wuc3BoZXJlQnVmZmVyLmJpbmRCdWZmZXJzKGdsKTtcblx0XHRcdFx0Ly8gY29sb3JzXG5cdFx0XHRcdGdsLm1hdGVyaWFsLnNldFRlbXBDb2xvcnMoZ2wsIHNwZWNzLmF0b21zX21hdGVyaWFsQW1iaWVudENvbG9yXzNELCB1bmRlZmluZWQsIHNwZWNzLmF0b21zX21hdGVyaWFsU3BlY3VsYXJDb2xvcl8zRCwgc3BlY3MuYXRvbXNfbWF0ZXJpYWxTaGluaW5lc3NfM0QpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGFzU3RhcnMgPSBbXTtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIGEgPSB0aGlzLmF0b21zW2ldO1xuXHRcdFx0XHRpZiAoIWlzTWFjcm8gfHwgKGEuaGV0YXRtICYmIChzcGVjcy5tYWNyb19zaG93V2F0ZXIgfHwgIWEuaXNXYXRlcikpKSB7XG5cdFx0XHRcdFx0aWYgKHNwZWNzLmF0b21zX25vbkJvbmRlZEFzU3RhcnNfM0QgJiYgYS5ib25kTnVtYmVyID09PSAwKSB7XG5cdFx0XHRcdFx0XHRhLnJlbmRlckFzU3RhciA9IHRydWU7XG5cdFx0XHRcdFx0XHRhc1N0YXJzLnB1c2goYSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGEucmVuZGVyKGdsLCBzcGVjcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoYXNTdGFycy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdGdsLnN0YXJCdWZmZXIuYmluZEJ1ZmZlcnMoZ2wpO1xuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gYXNTdGFycy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdFx0YXNTdGFyc1tpXS5yZW5kZXIoZ2wsIHNwZWNzKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAodGhpcy5jaGFpbnMpIHtcblx0XHRcdC8vIHNldCB1cCB0aGUgbW9kZWwgdmlldyBtYXRyaXgsIHNpbmNlIGl0IHdvbid0IGJlIG1vZGlmaWVkXG5cdFx0XHQvLyBmb3IgbWFjcm9tb2xlY3VsZXNcblx0XHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCk7XG5cdFx0XHQvLyByZW5kZXIgY2hhaW5zXG5cdFx0XHRpZiAoc3BlY3MucHJvdGVpbnNfZGlzcGxheVJpYmJvbikge1xuXHRcdFx0XHQvLyBwcm90ZWluc1xuXHRcdFx0XHQvLyBjb2xvcnNcblx0XHRcdFx0Z2wubWF0ZXJpYWwuc2V0VGVtcENvbG9ycyhnbCwgc3BlY3MucHJvdGVpbnNfbWF0ZXJpYWxBbWJpZW50Q29sb3JfM0QsIHVuZGVmaW5lZCwgc3BlY3MucHJvdGVpbnNfbWF0ZXJpYWxTcGVjdWxhckNvbG9yXzNELCBzcGVjcy5wcm90ZWluc19tYXRlcmlhbFNoaW5pbmVzc18zRCk7XG5cdFx0XHRcdHZhciB1c2VzID0gc3BlY3MucHJvdGVpbnNfcmliYm9uQ2FydG9vbml6ZSA/IHRoaXMuY2FydG9vbnMgOiB0aGlzLnJpYmJvbnM7XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSB1c2VzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgdXNlID0gdXNlc1tqXTtcblx0XHRcdFx0XHRpZiAoc3BlY3MucHJvdGVpbnNfcmVzaWR1ZUNvbG9yICE9PSAnbm9uZScpIHtcblx0XHRcdFx0XHRcdHVzZS5mcm9udC5iaW5kQnVmZmVycyhnbCk7XG5cdFx0XHRcdFx0XHR2YXIgcmFpbmJvdyA9IChzcGVjcy5wcm90ZWluc19yZXNpZHVlQ29sb3IgPT09ICdyYWluYm93Jyk7XG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdXNlLmZyb250LnNlZ21lbnRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0aWYgKHJhaW5ib3cpIHtcblx0XHRcdFx0XHRcdFx0XHRnbC5tYXRlcmlhbC5zZXREaWZmdXNlQ29sb3IoZ2wsIG1hdGgucmFpbmJvd0F0KGksIGlpLCBzcGVjcy5tYWNyb19yYWluYm93Q29sb3JzKSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dXNlLmZyb250LnNlZ21lbnRzW2ldLnJlbmRlcihnbCwgc3BlY3MpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dXNlLmJhY2suYmluZEJ1ZmZlcnMoZ2wpO1xuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHVzZS5iYWNrLnNlZ21lbnRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0aWYgKHJhaW5ib3cpIHtcblx0XHRcdFx0XHRcdFx0XHRnbC5tYXRlcmlhbC5zZXREaWZmdXNlQ29sb3IoZ2wsIG1hdGgucmFpbmJvd0F0KGksIGlpLCBzcGVjcy5tYWNyb19yYWluYm93Q29sb3JzKSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dXNlLmJhY2suc2VnbWVudHNbaV0ucmVuZGVyKGdsLCBzcGVjcyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHVzZS5mcm9udC5yZW5kZXIoZ2wsIHNwZWNzKTtcblx0XHRcdFx0XHRcdHVzZS5iYWNrLnJlbmRlcihnbCwgc3BlY3MpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZihzcGVjcy5wcm90ZWluc19kaXNwbGF5UGlwZVBsYW5rKSB7XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSB0aGlzLnBpcGVQbGFua3MubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdHRoaXMucGlwZVBsYW5rc1tqXS5yZW5kZXIoZ2wsIHNwZWNzKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoc3BlY3MucHJvdGVpbnNfZGlzcGxheUJhY2tib25lKSB7XG5cdFx0XHRcdGlmICghdGhpcy5hbHBoYUNhcmJvblRyYWNlKSB7XG5cdFx0XHRcdFx0Ly8gY2FjaGUgdGhlIGFscGhhIGNhcmJvbiB0cmFjZVxuXHRcdFx0XHRcdHRoaXMuYWxwaGFDYXJib25UcmFjZSA9IHtcblx0XHRcdFx0XHRcdG5vZGVzIDogW10sXG5cdFx0XHRcdFx0XHRlZGdlcyA6IFtdXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gdGhpcy5jaGFpbnMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdFx0dmFyIHJzID0gdGhpcy5jaGFpbnNbal07XG5cdFx0XHRcdFx0XHR2YXIgaXNOdWNsZW90aWRlID0gcnMubGVuZ3RoID4gMiAmJiBSRVNJRFVFW3JzWzJdLm5hbWVdICYmIFJFU0lEVUVbcnNbMl0ubmFtZV0uYW1pbm9Db2xvciA9PT0gJyNCRUEwNkUnO1xuXHRcdFx0XHRcdFx0aWYgKCFpc051Y2xlb3RpZGUgJiYgcnMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gcnMubGVuZ3RoIC0gMjsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgbiA9IHJzW2ldLmNwMTtcblx0XHRcdFx0XHRcdFx0XHRuLmNoYWluQ29sb3IgPSBycy5jaGFpbkNvbG9yO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYWxwaGFDYXJib25UcmFjZS5ub2Rlcy5wdXNoKG4pO1xuXHRcdFx0XHRcdFx0XHRcdHZhciBiID0gbmV3IHN0cnVjdHVyZXMuQm9uZChyc1tpXS5jcDEsIHJzW2kgKyAxXS5jcDEpO1xuXHRcdFx0XHRcdFx0XHRcdGIucmVzaWR1ZU5hbWUgPSByc1tpXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRcdGIuY2hhaW5Db2xvciA9IHJzLmNoYWluQ29sb3I7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hbHBoYUNhcmJvblRyYWNlLmVkZ2VzLnB1c2goYik7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGkgPT09IHJzLmxlbmd0aCAtIDMpIHtcblx0XHRcdFx0XHRcdFx0XHRcdG4gPSByc1tpICsgMV0uY3AxO1xuXHRcdFx0XHRcdFx0XHRcdFx0bi5jaGFpbkNvbG9yID0gcnMuY2hhaW5Db2xvcjtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuYWxwaGFDYXJib25UcmFjZS5ub2Rlcy5wdXNoKG4pO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5hbHBoYUNhcmJvblRyYWNlLm5vZGVzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHR2YXIgdHJhY2VTcGVjcyA9IG5ldyBzdHJ1Y3R1cmVzLlZpc3VhbFNwZWNpZmljYXRpb25zKCk7XG5cdFx0XHRcdFx0dHJhY2VTcGVjcy5hdG9tc19kaXNwbGF5ID0gdHJ1ZTtcblx0XHRcdFx0XHR0cmFjZVNwZWNzLmJvbmRzX2Rpc3BsYXkgPSB0cnVlO1xuXHRcdFx0XHRcdHRyYWNlU3BlY3MuYXRvbXNfc3BoZXJlRGlhbWV0ZXJfM0QgPSBzcGVjcy5wcm90ZWluc19iYWNrYm9uZVRoaWNrbmVzcztcblx0XHRcdFx0XHR0cmFjZVNwZWNzLmJvbmRzX2N5bGluZGVyRGlhbWV0ZXJfM0QgPSBzcGVjcy5wcm90ZWluc19iYWNrYm9uZVRoaWNrbmVzcztcblx0XHRcdFx0XHR0cmFjZVNwZWNzLmJvbmRzX3NwbGl0Q29sb3IgPSBmYWxzZTtcblx0XHRcdFx0XHR0cmFjZVNwZWNzLmF0b21zX2NvbG9yID0gc3BlY3MucHJvdGVpbnNfYmFja2JvbmVDb2xvcjtcblx0XHRcdFx0XHR0cmFjZVNwZWNzLmJvbmRzX2NvbG9yID0gc3BlY3MucHJvdGVpbnNfYmFja2JvbmVDb2xvcjtcblx0XHRcdFx0XHR0cmFjZVNwZWNzLmF0b21zX3VzZVZEV0RpYW1ldGVyc18zRCA9IGZhbHNlO1xuXHRcdFx0XHRcdC8vIGNvbG9yc1xuXHRcdFx0XHRcdGdsLm1hdGVyaWFsLnNldFRlbXBDb2xvcnMoZ2wsIHNwZWNzLnByb3RlaW5zX21hdGVyaWFsQW1iaWVudENvbG9yXzNELCB1bmRlZmluZWQsIHNwZWNzLnByb3RlaW5zX21hdGVyaWFsU3BlY3VsYXJDb2xvcl8zRCwgc3BlY3MucHJvdGVpbnNfbWF0ZXJpYWxTaGluaW5lc3NfM0QpO1xuXHRcdFx0XHRcdGdsLm1hdGVyaWFsLnNldERpZmZ1c2VDb2xvcihnbCwgc3BlY3MucHJvdGVpbnNfYmFja2JvbmVDb2xvcik7XG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuYWxwaGFDYXJib25UcmFjZS5ub2Rlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdFx0XHR2YXIgbiA9IHRoaXMuYWxwaGFDYXJib25UcmFjZS5ub2Rlc1tpXTtcblx0XHRcdFx0XHRcdGlmIChzcGVjcy5tYWNyb19jb2xvckJ5Q2hhaW4pIHtcblx0XHRcdFx0XHRcdFx0dHJhY2VTcGVjcy5hdG9tc19jb2xvciA9IG4uY2hhaW5Db2xvcjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGdsLnNwaGVyZUJ1ZmZlci5iaW5kQnVmZmVycyhnbCk7XG5cdFx0XHRcdFx0XHRuLnJlbmRlcihnbCwgdHJhY2VTcGVjcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmFscGhhQ2FyYm9uVHJhY2UuZWRnZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRcdFx0dmFyIGUgPSB0aGlzLmFscGhhQ2FyYm9uVHJhY2UuZWRnZXNbaV07XG5cdFx0XHRcdFx0XHR2YXIgY29sb3I7XG5cdFx0XHRcdFx0XHR2YXIgciA9IFJFU0lEVUVbZS5yZXNpZHVlTmFtZV0gPyBSRVNJRFVFW2UucmVzaWR1ZU5hbWVdIDogUkVTSURVRVsnKiddO1xuXHRcdFx0XHRcdFx0aWYgKHNwZWNzLm1hY3JvX2NvbG9yQnlDaGFpbikge1xuXHRcdFx0XHRcdFx0XHRjb2xvciA9IGUuY2hhaW5Db2xvcjtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoc3BlY3MucHJvdGVpbnNfcmVzaWR1ZUNvbG9yID09PSAnc2hhcGVseScpIHtcblx0XHRcdFx0XHRcdFx0Y29sb3IgPSByLnNoYXBlbHlDb2xvcjtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoc3BlY3MucHJvdGVpbnNfcmVzaWR1ZUNvbG9yID09PSAnYW1pbm8nKSB7XG5cdFx0XHRcdFx0XHRcdGNvbG9yID0gci5hbWlub0NvbG9yO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChzcGVjcy5wcm90ZWluc19yZXNpZHVlQ29sb3IgPT09ICdwb2xhcml0eScpIHtcblx0XHRcdFx0XHRcdFx0aWYgKHIucG9sYXIpIHtcblx0XHRcdFx0XHRcdFx0XHRjb2xvciA9ICcjQzEwMDAwJztcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb2xvciA9ICcjRkZGRkZGJztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChzcGVjcy5wcm90ZWluc19yZXNpZHVlQ29sb3IgPT09ICdhY2lkaXR5Jykge1xuXHRcdFx0XHRcdFx0XHRpZihyLmFjaWRpdHkgPT09IDEpe1xuXHRcdFx0XHRcdFx0XHRcdGNvbG9yID0gJyMwMDAwRkYnO1xuXHRcdFx0XHRcdFx0XHR9ZWxzZSBpZihyLmFjaWRpdHkgPT09IC0xKXtcblx0XHRcdFx0XHRcdFx0XHRjb2xvciA9ICcjRkYwMDAwJztcblx0XHRcdFx0XHRcdFx0fWVsc2UgaWYgKHIucG9sYXIpIHtcblx0XHRcdFx0XHRcdFx0XHRjb2xvciA9ICcjRkZGRkZGJztcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb2xvciA9ICcjNzczMzAwJztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChzcGVjcy5wcm90ZWluc19yZXNpZHVlQ29sb3IgPT09ICdyYWluYm93Jykge1xuXHRcdFx0XHRcdFx0XHRjb2xvciA9IG1hdGgucmFpbmJvd0F0KGksIGlpLCBzcGVjcy5tYWNyb19yYWluYm93Q29sb3JzKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChjb2xvcikge1xuXHRcdFx0XHRcdFx0XHR0cmFjZVNwZWNzLmJvbmRzX2NvbG9yID0gY29sb3I7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRnbC5jeWxpbmRlckJ1ZmZlci5iaW5kQnVmZmVycyhnbCk7XG5cdFx0XHRcdFx0XHRlLnJlbmRlcihnbCwgdHJhY2VTcGVjcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoc3BlY3MubnVjbGVpY3NfZGlzcGxheSkge1xuXHRcdFx0XHQvLyBudWNsZWljIGFjaWRzXG5cdFx0XHRcdC8vIGNvbG9yc1xuXHRcdFx0XHRnbC5tYXRlcmlhbC5zZXRUZW1wQ29sb3JzKGdsLCBzcGVjcy5udWNsZWljc19tYXRlcmlhbEFtYmllbnRDb2xvcl8zRCwgdW5kZWZpbmVkLCBzcGVjcy5udWNsZWljc19tYXRlcmlhbFNwZWN1bGFyQ29sb3JfM0QsIHNwZWNzLm51Y2xlaWNzX21hdGVyaWFsU2hpbmluZXNzXzNEKTtcblx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IHRoaXMudHViZXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCk7XG5cdFx0XHRcdFx0dmFyIHVzZSA9IHRoaXMudHViZXNbal07XG5cdFx0XHRcdFx0dXNlLnJlbmRlcihnbCwgc3BlY3MpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChzcGVjcy5hdG9tc19kaXNwbGF5KSB7XG5cdFx0XHR2YXIgaGlnaGxpZ2h0ID0gZmFsc2U7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBhID0gdGhpcy5hdG9tc1tpXTtcblx0XHRcdFx0aWYoYS5pc0hvdmVyIHx8IGEuaXNTZWxlY3RlZCl7XG5cdFx0XHRcdFx0aGlnaGxpZ2h0ID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYoIWhpZ2hsaWdodCl7XG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmJvbmRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgYiA9IHRoaXMuYm9uZHNbaV07XG5cdFx0XHRcdFx0aWYoYi5pc0hvdmVyIHx8IGIuaXNTZWxlY3RlZCl7XG5cdFx0XHRcdFx0XHRoaWdobGlnaHQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZihoaWdobGlnaHQpe1xuXHRcdFx0XHRnbC5zcGhlcmVCdWZmZXIuYmluZEJ1ZmZlcnMoZ2wpO1xuXHRcdFx0XHQvLyBjb2xvcnNcblx0XHRcdFx0Z2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FKTtcblx0XHRcdFx0Z2wubWF0ZXJpYWwuc2V0VGVtcENvbG9ycyhnbCwgc3BlY3MuYXRvbXNfbWF0ZXJpYWxBbWJpZW50Q29sb3JfM0QsIHVuZGVmaW5lZCwgJyMwMDAwMDAnLCAwKTtcblx0XHRcdFx0Z2wuZW5hYmxlKGdsLkJMRU5EKTtcblx0XHRcdFx0Z2wuZGVwdGhNYXNrKGZhbHNlKTtcblx0XHRcdFx0Z2wubWF0ZXJpYWwuc2V0QWxwaGEoZ2wsIC40KTtcblx0XHRcdFx0Z2wuc3BoZXJlQnVmZmVyLmJpbmRCdWZmZXJzKGdsKTtcblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuYXRvbXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRcdHZhciBhID0gdGhpcy5hdG9tc1tpXTtcblx0XHRcdFx0XHRpZihhLmlzSG92ZXIgfHwgYS5pc1NlbGVjdGVkKXtcblx0XHRcdFx0XHRcdGEucmVuZGVySGlnaGxpZ2h0KGdsLCBzcGVjcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGdsLmN5bGluZGVyQnVmZmVyLmJpbmRCdWZmZXJzKGdsKTtcblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuYm9uZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRcdHZhciBiID0gdGhpcy5ib25kc1tpXTtcblx0XHRcdFx0XHRpZihiLmlzSG92ZXIgfHwgYi5pc1NlbGVjdGVkKXtcblx0XHRcdFx0XHRcdGIucmVuZGVySGlnaGxpZ2h0KGdsLCBzcGVjcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGdsLmRlcHRoTWFzayh0cnVlKTtcblx0XHRcdFx0Z2wuZGlzYWJsZShnbC5CTEVORCk7XG5cdFx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSwgZ2wuT05FLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcdFx0XHRcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdF8ucmVuZGVyUGlja0ZyYW1lID0gZnVuY3Rpb24oZ2wsIHNwZWNzLCBvYmplY3RzLCBpbmNsdWRlQXRvbXMsIGluY2x1ZGVCb25kcykge1xuXHRcdGlmICh0aGlzLnNwZWNzKSB7XG5cdFx0XHRzcGVjcyA9IHRoaXMuc3BlY3M7XG5cdFx0fVxuXHRcdHZhciBpc01hY3JvID0gdGhpcy5hdG9tcy5sZW5ndGggPiAwICYmIHRoaXMuYXRvbXNbMF0uaGV0YXRtICE9PSB1bmRlZmluZWQ7XG5cdFx0aWYgKGluY2x1ZGVCb25kcyAmJiBzcGVjcy5ib25kc19kaXNwbGF5KSB7XG5cdFx0XHRpZiAodGhpcy5ib25kcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdGlmIChzcGVjcy5ib25kc19yZW5kZXJBc0xpbmVzXzNEKSB7XG5cdFx0XHRcdFx0Z2wubGluZVdpZHRoKHNwZWNzLmJvbmRzX3dpZHRoXzJEKTtcblx0XHRcdFx0XHRnbC5saW5lQnVmZmVyLmJpbmRCdWZmZXJzKGdsKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRnbC5jeWxpbmRlckJ1ZmZlci5iaW5kQnVmZmVycyhnbCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmJvbmRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIGIgPSB0aGlzLmJvbmRzW2ldO1xuXHRcdFx0XHRpZiAoIWlzTWFjcm8gfHwgYi5hMS5oZXRhdG0pIHtcblx0XHRcdFx0XHRnbC5tYXRlcmlhbC5zZXREaWZmdXNlQ29sb3IoZ2wsIG1hdGguaWR4MmNvbG9yKG9iamVjdHMubGVuZ3RoKSk7XG5cdFx0XHRcdFx0Yi5yZW5kZXJQaWNrZXIoZ2wsIHNwZWNzKTtcblx0XHRcdFx0XHRvYmplY3RzLnB1c2goYik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGluY2x1ZGVBdG9tcyAmJiBzcGVjcy5hdG9tc19kaXNwbGF5KSB7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBhID0gdGhpcy5hdG9tc1tpXTtcblx0XHRcdFx0YS5ib25kTnVtYmVyID0gMDtcblx0XHRcdFx0YS5yZW5kZXJBc1N0YXIgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmJvbmRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIGIgPSB0aGlzLmJvbmRzW2ldO1xuXHRcdFx0XHRiLmExLmJvbmROdW1iZXIrKztcblx0XHRcdFx0Yi5hMi5ib25kTnVtYmVyKys7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5hdG9tcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdGdsLnNwaGVyZUJ1ZmZlci5iaW5kQnVmZmVycyhnbCk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgYXNTdGFycyA9IFtdO1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuYXRvbXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgYSA9IHRoaXMuYXRvbXNbaV07XG5cdFx0XHRcdGlmICghaXNNYWNybyB8fCAoYS5oZXRhdG0gJiYgKHNwZWNzLm1hY3JvX3Nob3dXYXRlciB8fCAhYS5pc1dhdGVyKSkpIHtcblx0XHRcdFx0XHRpZiAoc3BlY3MuYXRvbXNfbm9uQm9uZGVkQXNTdGFyc18zRCAmJiBhLmJvbmROdW1iZXIgPT09IDApIHtcblx0XHRcdFx0XHRcdGEucmVuZGVyQXNTdGFyID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGFzU3RhcnMucHVzaChhKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Z2wubWF0ZXJpYWwuc2V0RGlmZnVzZUNvbG9yKGdsLCBtYXRoLmlkeDJjb2xvcihvYmplY3RzLmxlbmd0aCkpO1xuXHRcdFx0XHRcdFx0YS5yZW5kZXIoZ2wsIHNwZWNzLCB0cnVlKTtcblx0XHRcdFx0XHRcdG9iamVjdHMucHVzaChhKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChhc1N0YXJzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0Z2wuc3RhckJ1ZmZlci5iaW5kQnVmZmVycyhnbCk7XG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBhc1N0YXJzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgYSA9IGFzU3RhcnNbaV07XG5cdFx0XHRcdFx0Z2wubWF0ZXJpYWwuc2V0RGlmZnVzZUNvbG9yKGdsLCBtYXRoLmlkeDJjb2xvcihvYmplY3RzLmxlbmd0aCkpO1xuXHRcdFx0XHRcdGEucmVuZGVyKGdsLCBzcGVjcywgdHJ1ZSk7XG5cdFx0XHRcdFx0b2JqZWN0cy5wdXNoKGEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRfLmdldENlbnRlcjNEID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHRoaXMuYXRvbXMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRyZXR1cm4gbmV3IHN0cnVjdHVyZXMuQXRvbSgnQycsIHRoaXMuYXRvbXNbMF0ueCwgdGhpcy5hdG9tc1swXS55LCB0aGlzLmF0b21zWzBdLnopO1xuXHRcdH1cblx0XHR2YXIgbWluWCA9IEluZmluaXR5LCBtaW5ZID0gSW5maW5pdHksIG1pblogPSBJbmZpbml0eTtcblx0XHR2YXIgbWF4WCA9IC1JbmZpbml0eSwgbWF4WSA9IC1JbmZpbml0eSwgbWF4WiA9IC1JbmZpbml0eTtcblx0XHRpZiAodGhpcy5jaGFpbnMpIHtcblx0XHRcdC8vIHJlc2lkdWVzXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5jaGFpbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgY2hhaW4gPSB0aGlzLmNoYWluc1tpXTtcblx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IGNoYWluLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgcmVzaWR1ZSA9IGNoYWluW2pdO1xuXHRcdFx0XHRcdG1pblggPSBtLm1pbihyZXNpZHVlLmNwMS54LCByZXNpZHVlLmNwMi54LCBtaW5YKTtcblx0XHRcdFx0XHRtaW5ZID0gbS5taW4ocmVzaWR1ZS5jcDEueSwgcmVzaWR1ZS5jcDIueSwgbWluWSk7XG5cdFx0XHRcdFx0bWluWiA9IG0ubWluKHJlc2lkdWUuY3AxLnosIHJlc2lkdWUuY3AyLnosIG1pblopO1xuXHRcdFx0XHRcdG1heFggPSBtLm1heChyZXNpZHVlLmNwMS54LCByZXNpZHVlLmNwMi54LCBtYXhYKTtcblx0XHRcdFx0XHRtYXhZID0gbS5tYXgocmVzaWR1ZS5jcDEueSwgcmVzaWR1ZS5jcDIueSwgbWF4WSk7XG5cdFx0XHRcdFx0bWF4WiA9IG0ubWF4KHJlc2lkdWUuY3AxLnosIHJlc2lkdWUuY3AyLnosIG1heFopO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdG1pblggPSBtLm1pbih0aGlzLmF0b21zW2ldLngsIG1pblgpO1xuXHRcdFx0bWluWSA9IG0ubWluKHRoaXMuYXRvbXNbaV0ueSwgbWluWSk7XG5cdFx0XHRtaW5aID0gbS5taW4odGhpcy5hdG9tc1tpXS56LCBtaW5aKTtcblx0XHRcdG1heFggPSBtLm1heCh0aGlzLmF0b21zW2ldLngsIG1heFgpO1xuXHRcdFx0bWF4WSA9IG0ubWF4KHRoaXMuYXRvbXNbaV0ueSwgbWF4WSk7XG5cdFx0XHRtYXhaID0gbS5tYXgodGhpcy5hdG9tc1tpXS56LCBtYXhaKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5ldyBzdHJ1Y3R1cmVzLkF0b20oJ0MnLCAobWF4WCArIG1pblgpIC8gMiwgKG1heFkgKyBtaW5ZKSAvIDIsIChtYXhaICsgbWluWikgLyAyKTtcblx0fTtcblx0Xy5nZXRDZW50ZXIgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAodGhpcy5hdG9tcy5sZW5ndGggPT09IDEpIHtcblx0XHRcdHJldHVybiBuZXcgc3RydWN0dXJlcy5Qb2ludCh0aGlzLmF0b21zWzBdLngsIHRoaXMuYXRvbXNbMF0ueSk7XG5cdFx0fVxuXHRcdHZhciBtaW5YID0gSW5maW5pdHksIG1pblkgPSBJbmZpbml0eTtcblx0XHR2YXIgbWF4WCA9IC1JbmZpbml0eSwgbWF4WSA9IC1JbmZpbml0eTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRtaW5YID0gbS5taW4odGhpcy5hdG9tc1tpXS54LCBtaW5YKTtcblx0XHRcdG1pblkgPSBtLm1pbih0aGlzLmF0b21zW2ldLnksIG1pblkpO1xuXHRcdFx0bWF4WCA9IG0ubWF4KHRoaXMuYXRvbXNbaV0ueCwgbWF4WCk7XG5cdFx0XHRtYXhZID0gbS5tYXgodGhpcy5hdG9tc1tpXS55LCBtYXhZKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5ldyBzdHJ1Y3R1cmVzLlBvaW50KChtYXhYICsgbWluWCkgLyAyLCAobWF4WSArIG1pblkpIC8gMik7XG5cdH07XG5cdF8uZ2V0RGltZW5zaW9uID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHRoaXMuYXRvbXMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRyZXR1cm4gbmV3IHN0cnVjdHVyZXMuUG9pbnQoMCwgMCk7XG5cdFx0fVxuXHRcdHZhciBtaW5YID0gSW5maW5pdHksIG1pblkgPSBJbmZpbml0eTtcblx0XHR2YXIgbWF4WCA9IC1JbmZpbml0eSwgbWF4WSA9IC1JbmZpbml0eTtcblx0XHRpZiAodGhpcy5jaGFpbnMpIHtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmNoYWlucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBjaGFpbiA9IHRoaXMuY2hhaW5zW2ldO1xuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gY2hhaW4ubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdHZhciByZXNpZHVlID0gY2hhaW5bal07XG5cdFx0XHRcdFx0bWluWCA9IG0ubWluKHJlc2lkdWUuY3AxLngsIHJlc2lkdWUuY3AyLngsIG1pblgpO1xuXHRcdFx0XHRcdG1pblkgPSBtLm1pbihyZXNpZHVlLmNwMS55LCByZXNpZHVlLmNwMi55LCBtaW5ZKTtcblx0XHRcdFx0XHRtYXhYID0gbS5tYXgocmVzaWR1ZS5jcDEueCwgcmVzaWR1ZS5jcDIueCwgbWF4WCk7XG5cdFx0XHRcdFx0bWF4WSA9IG0ubWF4KHJlc2lkdWUuY3AxLnksIHJlc2lkdWUuY3AyLnksIG1heFkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtaW5YIC09IDMwO1xuXHRcdFx0bWluWSAtPSAzMDtcblx0XHRcdG1heFggKz0gMzA7XG5cdFx0XHRtYXhZICs9IDMwO1xuXHRcdH1cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRtaW5YID0gbS5taW4odGhpcy5hdG9tc1tpXS54LCBtaW5YKTtcblx0XHRcdG1pblkgPSBtLm1pbih0aGlzLmF0b21zW2ldLnksIG1pblkpO1xuXHRcdFx0bWF4WCA9IG0ubWF4KHRoaXMuYXRvbXNbaV0ueCwgbWF4WCk7XG5cdFx0XHRtYXhZID0gbS5tYXgodGhpcy5hdG9tc1tpXS55LCBtYXhZKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5ldyBzdHJ1Y3R1cmVzLlBvaW50KG1heFggLSBtaW5YLCBtYXhZIC0gbWluWSk7XG5cdH07XG5cdF8uY2hlY2sgPSBmdW5jdGlvbihmb3JjZSkge1xuXHRcdC8vIHVzaW5nIGZvcmNlIGltcHJvdmVzIGVmZmljaWVuY3ksIHNvIGNoYW5nZXMgd2lsbCBub3QgYmUgY2hlY2tlZFxuXHRcdC8vIHVudGlsIGEgcmVuZGVyIG9jY3Vyc1xuXHRcdC8vIHlvdSBjYW4gZm9yY2UgYSBjaGVjayBieSBzZW5kaW5nIHRydWUgdG8gdGhpcyBmdW5jdGlvbiBhZnRlclxuXHRcdC8vIGNhbGxpbmcgY2hlY2sgd2l0aCBhIGZhbHNlXG5cdFx0aWYgKGZvcmNlICYmIHRoaXMuZG9DaGVja3MpIHtcblx0XHRcdC8vIG9ubHkgY2hlY2sgaWYgdGhlIG51bWJlciBvZiBib25kcyBoYXMgY2hhbmdlZFxuXHRcdFx0aWYgKHRoaXMuZmluZFJpbmdzKSB7XG5cdFx0XHRcdGlmICh0aGlzLmJvbmRzLmxlbmd0aCAtIHRoaXMuYXRvbXMubGVuZ3RoICE9PSB0aGlzLmZqTnVtQ2FjaGUpIHtcblx0XHRcdFx0XHQvLyBmaW5kIHJpbmdzXG5cdFx0XHRcdFx0dGhpcy5yaW5ncyA9IG5ldyBjLmluZm9ybWF0aWNzLlNTU1JGaW5kZXIodGhpcykucmluZ3M7XG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuYm9uZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRcdFx0dGhpcy5ib25kc1tpXS5yaW5nID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5yaW5ncy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnJpbmdzW2ldLnNldHVwQm9uZHMoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gdXBkYXRlIHJpbmdzIGlmIGFueVxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLnJpbmdzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHRcdHZhciByID0gdGhpcy5yaW5nc1tpXTtcblx0XHRcdFx0XHRcdHIuY2VudGVyID0gci5nZXRDZW50ZXIoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIGZpbmQgbG9uZXNcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dGhpcy5hdG9tc1tpXS5pc0xvbmUgPSBmYWxzZTtcblx0XHRcdFx0aWYgKHRoaXMuYXRvbXNbaV0ubGFiZWwgPT09ICdDJykge1xuXHRcdFx0XHRcdHZhciBjb3VudGVyID0gMDtcblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gdGhpcy5ib25kcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5ib25kc1tqXS5hMSA9PT0gdGhpcy5hdG9tc1tpXSB8fCB0aGlzLmJvbmRzW2pdLmEyID09PSB0aGlzLmF0b21zW2ldKSB7XG5cdFx0XHRcdFx0XHRcdGNvdW50ZXIrKztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGNvdW50ZXIgPT09IDApIHtcblx0XHRcdFx0XHRcdHRoaXMuYXRvbXNbaV0uaXNMb25lID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIHNvcnRcblx0XHRcdHZhciBzb3J0ID0gZmFsc2U7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdGlmICh0aGlzLmF0b21zW2ldLnogIT09IDApIHtcblx0XHRcdFx0XHRzb3J0ID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKHNvcnQpIHtcblx0XHRcdFx0dGhpcy5zb3J0QXRvbXNCeVooKTtcblx0XHRcdFx0dGhpcy5zb3J0Qm9uZHNCeVooKTtcblx0XHRcdH1cblx0XHRcdC8vIHNldHVwIG1ldGFkYXRhXG5cdFx0XHR0aGlzLnNldHVwTWV0YURhdGEoKTtcblx0XHRcdHRoaXMuYXRvbU51bUNhY2hlID0gdGhpcy5hdG9tcy5sZW5ndGg7XG5cdFx0XHR0aGlzLmJvbmROdW1DYWNoZSA9IHRoaXMuYm9uZHMubGVuZ3RoO1xuXHRcdFx0Ly8gZmogbnVtYmVyIGNhY2hlIGRvZXNudCBjYXJlIGlmIHRoZXJlIGFyZSBzZXBhcmF0ZSBtb2xlY3VsZXMsXG5cdFx0XHQvLyBhcyB0aGUgY2hhbmdlIHdpbGwgc2lnbmFsIGEgbmVlZCB0byBjaGVjayBmb3IgcmluZ3M7IHRoZVxuXHRcdFx0Ly8gYWNjdXJhY3kgZG9lc24ndCBtYXR0ZXJcblx0XHRcdHRoaXMuZmpOdW1DYWNoZSA9IHRoaXMuYm9uZHMubGVuZ3RoIC0gdGhpcy5hdG9tcy5sZW5ndGg7XG5cdFx0fVxuXHRcdHRoaXMuZG9DaGVja3MgPSAhZm9yY2U7XG5cdH07XG5cdF8uZ2V0QW5nbGVzID0gZnVuY3Rpb24oYSkge1xuXHRcdHZhciBhbmdsZXMgPSBbXTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5ib25kcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRpZiAodGhpcy5ib25kc1tpXS5jb250YWlucyhhKSkge1xuXHRcdFx0XHRhbmdsZXMucHVzaChhLmFuZ2xlKHRoaXMuYm9uZHNbaV0uZ2V0TmVpZ2hib3IoYSkpKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0YW5nbGVzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0cmV0dXJuIGEgLSBiO1xuXHRcdH0pO1xuXHRcdHJldHVybiBhbmdsZXM7XG5cdH07XG5cdF8uZ2V0Q29vcmRpbmF0aW9uTnVtYmVyID0gZnVuY3Rpb24oYnMpIHtcblx0XHR2YXIgY29vcmRpbmF0aW9uTnVtYmVyID0gMDtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gYnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0Y29vcmRpbmF0aW9uTnVtYmVyICs9IGJzW2ldLmJvbmRPcmRlcjtcblx0XHR9XG5cdFx0cmV0dXJuIGNvb3JkaW5hdGlvbk51bWJlcjtcblx0fTtcblx0Xy5nZXRCb25kcyA9IGZ1bmN0aW9uKGEpIHtcblx0XHR2YXIgYm9uZHMgPSBbXTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5ib25kcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRpZiAodGhpcy5ib25kc1tpXS5jb250YWlucyhhKSkge1xuXHRcdFx0XHRib25kcy5wdXNoKHRoaXMuYm9uZHNbaV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gYm9uZHM7XG5cdH07XG5cdF8uc29ydEF0b21zQnlaID0gZnVuY3Rpb24oKSB7XG5cdFx0Zm9yICggdmFyIGkgPSAxLCBpaSA9IHRoaXMuYXRvbXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIGluZGV4ID0gaTtcblx0XHRcdHdoaWxlIChpbmRleCA+IDAgJiYgdGhpcy5hdG9tc1tpbmRleF0ueiA8IHRoaXMuYXRvbXNbaW5kZXggLSAxXS56KSB7XG5cdFx0XHRcdHZhciBob2xkID0gdGhpcy5hdG9tc1tpbmRleF07XG5cdFx0XHRcdHRoaXMuYXRvbXNbaW5kZXhdID0gdGhpcy5hdG9tc1tpbmRleCAtIDFdO1xuXHRcdFx0XHR0aGlzLmF0b21zW2luZGV4IC0gMV0gPSBob2xkO1xuXHRcdFx0XHRpbmRleC0tO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0Xy5zb3J0Qm9uZHNCeVogPSBmdW5jdGlvbigpIHtcblx0XHRmb3IgKCB2YXIgaSA9IDEsIGlpID0gdGhpcy5ib25kcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgaW5kZXggPSBpO1xuXHRcdFx0d2hpbGUgKGluZGV4ID4gMCAmJiAodGhpcy5ib25kc1tpbmRleF0uYTEueiArIHRoaXMuYm9uZHNbaW5kZXhdLmEyLnopIDwgKHRoaXMuYm9uZHNbaW5kZXggLSAxXS5hMS56ICsgdGhpcy5ib25kc1tpbmRleCAtIDFdLmEyLnopKSB7XG5cdFx0XHRcdHZhciBob2xkID0gdGhpcy5ib25kc1tpbmRleF07XG5cdFx0XHRcdHRoaXMuYm9uZHNbaW5kZXhdID0gdGhpcy5ib25kc1tpbmRleCAtIDFdO1xuXHRcdFx0XHR0aGlzLmJvbmRzW2luZGV4IC0gMV0gPSBob2xkO1xuXHRcdFx0XHRpbmRleC0tO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0Xy5zZXR1cE1ldGFEYXRhID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNlbnRlciA9IHRoaXMuZ2V0Q2VudGVyKCk7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuYXRvbXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIGEgPSB0aGlzLmF0b21zW2ldO1xuXHRcdFx0YS5ib25kcyA9IHRoaXMuZ2V0Qm9uZHMoYSk7XG5cdFx0XHRhLmFuZ2xlcyA9IHRoaXMuZ2V0QW5nbGVzKGEpO1xuXHRcdFx0YS5pc0hpZGRlbiA9IGEuYm9uZHMubGVuZ3RoID09PSAyICYmIG0uYWJzKG0uYWJzKGEuYW5nbGVzWzFdIC0gYS5hbmdsZXNbMF0pIC0gbS5QSSkgPCBtLlBJIC8gMzAgJiYgYS5ib25kc1swXS5ib25kT3JkZXIgPT09IGEuYm9uZHNbMV0uYm9uZE9yZGVyO1xuXHRcdFx0dmFyIGFuZ2xlRGF0YSA9IG1hdGguYW5nbGVCZXR3ZWVuTGFyZ2VzdChhLmFuZ2xlcyk7XG5cdFx0XHRhLmFuZ2xlT2ZMZWFzdEludGVyZmVyZW5jZSA9IGFuZ2xlRGF0YS5hbmdsZSAlIChtLlBJICogMik7XG5cdFx0XHRhLmxhcmdlc3RBbmdsZSA9IGFuZ2xlRGF0YS5sYXJnZXN0O1xuXHRcdFx0YS5jb29yZGluYXRpb25OdW1iZXIgPSB0aGlzLmdldENvb3JkaW5hdGlvbk51bWJlcihhLmJvbmRzKTtcblx0XHRcdGEuYm9uZE51bWJlciA9IGEuYm9uZHMubGVuZ3RoO1xuXHRcdFx0YS5tb2xDZW50ZXIgPSBjZW50ZXI7XG5cdFx0fVxuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmJvbmRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBiID0gdGhpcy5ib25kc1tpXTtcblx0XHRcdGIubW9sQ2VudGVyID0gY2VudGVyO1xuXHRcdH1cblx0fTtcblx0Xy5zY2FsZVRvQXZlcmFnZUJvbmRMZW5ndGggPSBmdW5jdGlvbihsZW5ndGgpIHtcblx0XHR2YXIgYXZCb25kTGVuZ3RoID0gdGhpcy5nZXRBdmVyYWdlQm9uZExlbmd0aCgpO1xuXHRcdGlmIChhdkJvbmRMZW5ndGggIT09IDApIHtcblx0XHRcdHZhciBzY2FsZSA9IGxlbmd0aCAvIGF2Qm9uZExlbmd0aDtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dGhpcy5hdG9tc1tpXS54ICo9IHNjYWxlO1xuXHRcdFx0XHR0aGlzLmF0b21zW2ldLnkgKj0gc2NhbGU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRfLmdldEF2ZXJhZ2VCb25kTGVuZ3RoID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHRoaXMuYm9uZHMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cdFx0dmFyIHRvdCA9IDA7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuYm9uZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dG90ICs9IHRoaXMuYm9uZHNbaV0uZ2V0TGVuZ3RoKCk7XG5cdFx0fVxuXHRcdHRvdCAvPSB0aGlzLmJvbmRzLmxlbmd0aDtcblx0XHRyZXR1cm4gdG90O1xuXHR9O1xuXHRfLmdldEJvdW5kcyA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBib3VuZHMgPSBuZXcgbWF0aC5Cb3VuZHMoKTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRib3VuZHMuZXhwYW5kKHRoaXMuYXRvbXNbaV0uZ2V0Qm91bmRzKCkpO1xuXHRcdH1cblx0XHRpZiAodGhpcy5jaGFpbnMpIHtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmNoYWlucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBjaGFpbiA9IHRoaXMuY2hhaW5zW2ldO1xuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gY2hhaW4ubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdHZhciByZXNpZHVlID0gY2hhaW5bal07XG5cdFx0XHRcdFx0Ym91bmRzLmV4cGFuZChyZXNpZHVlLmNwMS54LCByZXNpZHVlLmNwMS55KTtcblx0XHRcdFx0XHRib3VuZHMuZXhwYW5kKHJlc2lkdWUuY3AyLngsIHJlc2lkdWUuY3AyLnkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRib3VuZHMubWluWCAtPSAzMDtcblx0XHRcdGJvdW5kcy5taW5ZIC09IDMwO1xuXHRcdFx0Ym91bmRzLm1heFggKz0gMzA7XG5cdFx0XHRib3VuZHMubWF4WSArPSAzMDtcblx0XHR9XG5cdFx0cmV0dXJuIGJvdW5kcztcblx0fTtcblx0Xy5nZXRCb3VuZHMzRCA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBib3VuZHMgPSBuZXcgbWF0aC5Cb3VuZHMoKTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRib3VuZHMuZXhwYW5kKHRoaXMuYXRvbXNbaV0uZ2V0Qm91bmRzM0QoKSk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmNoYWlucykge1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuY2hhaW5zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIGNoYWluID0gdGhpcy5jaGFpbnNbaV07XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBjaGFpbi5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIHJlc2lkdWUgPSBjaGFpbltqXTtcblx0XHRcdFx0XHRib3VuZHMuZXhwYW5kM0QocmVzaWR1ZS5jcDEueCwgcmVzaWR1ZS5jcDEueSwgcmVzaWR1ZS5jcDEueik7XG5cdFx0XHRcdFx0Ym91bmRzLmV4cGFuZDNEKHJlc2lkdWUuY3AyLngsIHJlc2lkdWUuY3AyLnksIHJlc2lkdWUuY3AyLnopO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBib3VuZHM7XG5cdH07XG5cdF8uZ2V0QXRvbUdyb3VwID0gZnVuY3Rpb24oYSkge1xuXHRcdHZhciByaW5nID0gZmFsc2U7XG5cdFx0Zm9yKHZhciBpID0gMCwgaWkgPSB0aGlzLmF0b21zLmxlbmd0aDsgaTxpaTsgaSsrKXtcblx0XHRcdHRoaXMuYXRvbXNbaV0udmlzaXRlZCA9IGZhbHNlO1xuXHRcdH1cblx0XHRmb3IodmFyIGkgPSAwLCBpaSA9IHRoaXMuYm9uZHMubGVuZ3RoOyBpPGlpOyBpKyspe1xuXHRcdFx0dmFyIGIgPSB0aGlzLmJvbmRzW2ldO1xuXHRcdFx0aWYoIXJpbmcgJiYgYi5jb250YWlucyhhKSAmJiBiLnJpbmchPT11bmRlZmluZWQpe1xuXHRcdFx0XHRyaW5nID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoIXJpbmcpe1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dmFyIHNldCA9IFthXTtcblx0XHRhLnZpc2l0ZWQgPSB0cnVlO1xuXHRcdHZhciBxID0gbmV3IHN0cnVjdHVyZXMuUXVldWUoKTtcblx0XHRxLmVucXVldWUoYSk7XG5cdFx0d2hpbGUgKCFxLmlzRW1wdHkoKSkge1xuXHRcdFx0dmFyIGF0b20gPSBxLmRlcXVldWUoKTtcblx0XHRcdGZvcih2YXIgaSA9IDAsIGlpID0gdGhpcy5ib25kcy5sZW5ndGg7IGk8aWk7IGkrKyl7XG5cdFx0XHRcdHZhciBiID0gdGhpcy5ib25kc1tpXTtcblx0XHRcdFx0aWYoYi5jb250YWlucyhhdG9tKSAmJiByaW5nPT09KGIucmluZyE9PXVuZGVmaW5lZCkpe1xuXHRcdFx0XHRcdHZhciBuID0gYi5nZXROZWlnaGJvcihhdG9tKTtcblx0XHRcdFx0XHRpZighbi52aXNpdGVkKXtcblx0XHRcdFx0XHRcdG4udmlzaXRlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRzZXQucHVzaChuKTtcblx0XHRcdFx0XHRcdHEuZW5xdWV1ZShuKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHNldDtcblx0fTtcblx0Xy5nZXRCb25kR3JvdXAgPSBmdW5jdGlvbihiKSB7XG5cdFx0dmFyIHJpbmcgPSBiLnJpbmchPT11bmRlZmluZWQ7XG5cdFx0dmFyIGNvbnRhaW5lZCA9IGZhbHNlO1xuXHRcdGZvcih2YXIgaSA9IDAsIGlpID0gdGhpcy5ib25kcy5sZW5ndGg7IGk8aWk7IGkrKyl7XG5cdFx0XHR2YXIgYmkgPSB0aGlzLmJvbmRzW2ldO1xuXHRcdFx0aWYoYmk9PT1iKXtcblx0XHRcdFx0Y29udGFpbmVkID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGJpLnZpc2l0ZWQgPSBmYWxzZTtcblx0XHR9XG5cdFx0aWYoIWNvbnRhaW5lZCl7XG5cdFx0XHQvLyB0aGlzIGJvbmQgaXNuJ3QgcGFydCBvZiB0aGUgbW9sZWN1bGVcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHZhciBzZXQgPSBbYl07XG5cdFx0Yi52aXNpdGVkID0gdHJ1ZTtcblx0XHR2YXIgcSA9IG5ldyBzdHJ1Y3R1cmVzLlF1ZXVlKCk7XG5cdFx0cS5lbnF1ZXVlKGIpO1xuXHRcdHdoaWxlICghcS5pc0VtcHR5KCkpIHtcblx0XHRcdHZhciBib25kID0gcS5kZXF1ZXVlKCk7XG5cdFx0XHRmb3IodmFyIGkgPSAwLCBpaSA9IHRoaXMuYm9uZHMubGVuZ3RoOyBpPGlpOyBpKyspe1xuXHRcdFx0XHR2YXIgbiA9IHRoaXMuYm9uZHNbaV07XG5cdFx0XHRcdGlmKCFuLnZpc2l0ZWQgJiYgKG4uYTE9PT1ib25kLmExfHxuLmEyPT09Ym9uZC5hMXx8bi5hMT09PWJvbmQuYTJ8fG4uYTI9PT1ib25kLmEyKSAmJiAobi5yaW5nIT09dW5kZWZpbmVkKT09PXJpbmcpe1xuXHRcdFx0XHRcdG4udmlzaXRlZCA9IHRydWU7XG5cdFx0XHRcdFx0c2V0LnB1c2gobik7XG5cdFx0XHRcdFx0cS5lbnF1ZXVlKG4pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBzZXQ7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUsIENoZW1Eb29kbGUubWF0aCwgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLCBDaGVtRG9vZGxlLlJFU0lEVUUsIE1hdGgpO1xuXG4oZnVuY3Rpb24oc3RydWN0dXJlcywgbSwgbTQsIHYzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgU0I7XG5cdHZhciBsYXN0VmVydGljYWxSZXNvbHV0aW9uID0gLTE7XG5cblx0ZnVuY3Rpb24gc2V0dXBNYXRyaWNlcyh2ZXJ0aWNhbFJlc29sdXRpb24pIHtcblx0XHR2YXIgbjIgPSB2ZXJ0aWNhbFJlc29sdXRpb24gKiB2ZXJ0aWNhbFJlc29sdXRpb247XG5cdFx0dmFyIG4zID0gdmVydGljYWxSZXNvbHV0aW9uICogdmVydGljYWxSZXNvbHV0aW9uICogdmVydGljYWxSZXNvbHV0aW9uO1xuXHRcdHZhciBTID0gWyA2IC8gbjMsIDAsIDAsIDAsIDYgLyBuMywgMiAvIG4yLCAwLCAwLCAxIC8gbjMsIDEgLyBuMiwgMSAvIHZlcnRpY2FsUmVzb2x1dGlvbiwgMCwgMCwgMCwgMCwgMSBdO1xuXHRcdHZhciBCbSA9IFsgLTEgLyA2LCAxIC8gMiwgLTEgLyAyLCAxIC8gNiwgMSAvIDIsIC0xLCAxIC8gMiwgMCwgLTEgLyAyLCAwLCAxIC8gMiwgMCwgMSAvIDYsIDIgLyAzLCAxIC8gNiwgMCBdO1xuXHRcdFNCID0gbTQubXVsdGlwbHkoQm0sIFMsIFtdKTtcblx0XHRsYXN0VmVydGljYWxSZXNvbHV0aW9uID0gdmVydGljYWxSZXNvbHV0aW9uO1xuXHR9XG5cblx0c3RydWN0dXJlcy5SZXNpZHVlID0gZnVuY3Rpb24ocmVzU2VxKSB7XG5cdFx0Ly8gbnVtYmVyIG9mIHZlcnRpY2FsIHNsYXNoZXMgcGVyIHNlZ21lbnRcblx0XHR0aGlzLnJlc1NlcSA9IHJlc1NlcTtcblx0fTtcblx0dmFyIF8gPSBzdHJ1Y3R1cmVzLlJlc2lkdWUucHJvdG90eXBlO1xuXHRfLnNldHVwID0gZnVuY3Rpb24obmV4dEFscGhhLCBob3Jpem9udGFsUmVzb2x1dGlvbikge1xuXHRcdHRoaXMuaG9yaXpvbnRhbFJlc29sdXRpb24gPSBob3Jpem9udGFsUmVzb2x1dGlvbjtcblx0XHQvLyBkZWZpbmUgcGxhbmVcblx0XHR2YXIgQSA9IFsgbmV4dEFscGhhLnggLSB0aGlzLmNwMS54LCBuZXh0QWxwaGEueSAtIHRoaXMuY3AxLnksIG5leHRBbHBoYS56IC0gdGhpcy5jcDEueiBdO1xuXHRcdHZhciBCID0gWyB0aGlzLmNwMi54IC0gdGhpcy5jcDEueCwgdGhpcy5jcDIueSAtIHRoaXMuY3AxLnksIHRoaXMuY3AyLnogLSB0aGlzLmNwMS56IF07XG5cdFx0dmFyIEMgPSB2My5jcm9zcyhBLCBCLCBbXSk7XG5cdFx0dGhpcy5EID0gdjMuY3Jvc3MoQywgQSwgW10pO1xuXHRcdHYzLm5vcm1hbGl6ZShDKTtcblx0XHR2My5ub3JtYWxpemUodGhpcy5EKTtcblx0XHQvLyBnZW5lcmF0ZSBndWlkZSBjb29yZGluYXRlc1xuXHRcdC8vIGd1aWRlcyBmb3IgdGhlIG5hcnJvdyBwYXJ0cyBvZiB0aGUgcmliYm9uc1xuXHRcdHRoaXMuZ3VpZGVQb2ludHNTbWFsbCA9IFtdO1xuXHRcdC8vIGd1aWRlcyBmb3IgdGhlIHdpZGUgcGFydHMgb2YgdGhlIHJpYmJvbnNcblx0XHR0aGlzLmd1aWRlUG9pbnRzTGFyZ2UgPSBbXTtcblx0XHQvLyBndWlkZXMgZm9yIHRoZSByaWJib24gcGFydCBvZiBoZWxpeCBhcyBjeWxpbmRlciBtb2RlbFxuXHRcdHZhciBQID0gWyAobmV4dEFscGhhLnggKyB0aGlzLmNwMS54KSAvIDIsIChuZXh0QWxwaGEueSArIHRoaXMuY3AxLnkpIC8gMiwgKG5leHRBbHBoYS56ICsgdGhpcy5jcDEueikgLyAyIF07XG5cdFx0aWYgKHRoaXMuaGVsaXgpIHtcblx0XHRcdC8vIGV4cGFuZCBoZWxpY2VzXG5cdFx0XHR2My5zY2FsZShDLCAxLjUpO1xuXHRcdFx0djMuYWRkKFAsIEMpO1xuXHRcdH1cblx0XHR0aGlzLmd1aWRlUG9pbnRzU21hbGxbMF0gPSBuZXcgc3RydWN0dXJlcy5BdG9tKCcnLCBQWzBdIC0gdGhpcy5EWzBdIC8gMiwgUFsxXSAtIHRoaXMuRFsxXSAvIDIsIFBbMl0gLSB0aGlzLkRbMl0gLyAyKTtcblx0XHRmb3IgKCB2YXIgaSA9IDE7IGkgPCBob3Jpem9udGFsUmVzb2x1dGlvbjsgaSsrKSB7XG5cdFx0XHR0aGlzLmd1aWRlUG9pbnRzU21hbGxbaV0gPSBuZXcgc3RydWN0dXJlcy5BdG9tKCcnLCB0aGlzLmd1aWRlUG9pbnRzU21hbGxbMF0ueCArIHRoaXMuRFswXSAqIGkgLyBob3Jpem9udGFsUmVzb2x1dGlvbiwgdGhpcy5ndWlkZVBvaW50c1NtYWxsWzBdLnkgKyB0aGlzLkRbMV0gKiBpIC8gaG9yaXpvbnRhbFJlc29sdXRpb24sIHRoaXMuZ3VpZGVQb2ludHNTbWFsbFswXS56ICsgdGhpcy5EWzJdICogaSAvIGhvcml6b250YWxSZXNvbHV0aW9uKTtcblx0XHR9XG5cdFx0djMuc2NhbGUodGhpcy5ELCA0KTtcblx0XHR0aGlzLmd1aWRlUG9pbnRzTGFyZ2VbMF0gPSBuZXcgc3RydWN0dXJlcy5BdG9tKCcnLCBQWzBdIC0gdGhpcy5EWzBdIC8gMiwgUFsxXSAtIHRoaXMuRFsxXSAvIDIsIFBbMl0gLSB0aGlzLkRbMl0gLyAyKTtcblx0XHRmb3IgKCB2YXIgaSA9IDE7IGkgPCBob3Jpem9udGFsUmVzb2x1dGlvbjsgaSsrKSB7XG5cdFx0XHR0aGlzLmd1aWRlUG9pbnRzTGFyZ2VbaV0gPSBuZXcgc3RydWN0dXJlcy5BdG9tKCcnLCB0aGlzLmd1aWRlUG9pbnRzTGFyZ2VbMF0ueCArIHRoaXMuRFswXSAqIGkgLyBob3Jpem9udGFsUmVzb2x1dGlvbiwgdGhpcy5ndWlkZVBvaW50c0xhcmdlWzBdLnkgKyB0aGlzLkRbMV0gKiBpIC8gaG9yaXpvbnRhbFJlc29sdXRpb24sIHRoaXMuZ3VpZGVQb2ludHNMYXJnZVswXS56ICsgdGhpcy5EWzJdICogaSAvIGhvcml6b250YWxSZXNvbHV0aW9uKTtcblx0XHR9XG5cdH07XG5cdF8uZ2V0R3VpZGVQb2ludFNldCA9IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHRpZiAodHlwZSA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuaGVsaXggfHwgdGhpcy5zaGVldCA/IHRoaXMuZ3VpZGVQb2ludHNMYXJnZSA6IHRoaXMuZ3VpZGVQb2ludHNTbWFsbDtcblx0XHR9IGVsc2UgaWYgKHR5cGUgPT09IDEpIHtcblx0XHRcdHJldHVybiB0aGlzLmd1aWRlUG9pbnRzU21hbGw7XG5cdFx0fSBlbHNlIGlmICh0eXBlID09PSAyKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5ndWlkZVBvaW50c0xhcmdlO1xuXHRcdH1cblx0fTtcblx0Xy5jb21wdXRlTGluZVNlZ21lbnRzID0gZnVuY3Rpb24oYjIsIGIxLCBhMSwgZG9DYXJ0b29uLCB2ZXJ0aWNhbFJlc29sdXRpb24pIHtcblx0XHR0aGlzLnNldFZlcnRpY2FsUmVzb2x1dGlvbih2ZXJ0aWNhbFJlc29sdXRpb24pO1xuXHRcdHRoaXMuc3BsaXQgPSBhMS5oZWxpeCAhPT0gdGhpcy5oZWxpeCB8fCBhMS5zaGVldCAhPT0gdGhpcy5zaGVldDtcblx0XHR0aGlzLmxpbmVTZWdtZW50cyA9IHRoaXMuaW5uZXJDb21wdXRlKDAsIGIyLCBiMSwgYTEsIGZhbHNlLCB2ZXJ0aWNhbFJlc29sdXRpb24pO1xuXHRcdGlmIChkb0NhcnRvb24pIHtcblx0XHRcdHRoaXMubGluZVNlZ21lbnRzQ2FydG9vbiA9IHRoaXMuaW5uZXJDb21wdXRlKHRoaXMuaGVsaXggfHwgdGhpcy5zaGVldCA/IDIgOiAxLCBiMiwgYjEsIGExLCB0cnVlLCB2ZXJ0aWNhbFJlc29sdXRpb24pO1xuXHRcdH1cblx0fTtcblx0Xy5pbm5lckNvbXB1dGUgPSBmdW5jdGlvbihzZXQsIGIyLCBiMSwgYTEsIHVzZUFycm93cywgdmVydGljYWxSZXNvbHV0aW9uKSB7XG5cdFx0dmFyIHNlZ21lbnRzID0gW107XG5cdFx0dmFyIHVzZSA9IHRoaXMuZ2V0R3VpZGVQb2ludFNldChzZXQpO1xuXHRcdHZhciB1c2ViMiA9IGIyLmdldEd1aWRlUG9pbnRTZXQoc2V0KTtcblx0XHR2YXIgdXNlYjEgPSBiMS5nZXRHdWlkZVBvaW50U2V0KHNldCk7XG5cdFx0dmFyIHVzZWExID0gYTEuZ2V0R3VpZGVQb2ludFNldChzZXQpO1xuXHRcdGZvciAoIHZhciBsID0gMCwgbGwgPSB1c2UubGVuZ3RoOyBsIDwgbGw7IGwrKykge1xuXHRcdFx0dmFyIEcgPSBbIHVzZWIyW2xdLngsIHVzZWIyW2xdLnksIHVzZWIyW2xdLnosIDEsIHVzZWIxW2xdLngsIHVzZWIxW2xdLnksIHVzZWIxW2xdLnosIDEsIHVzZVtsXS54LCB1c2VbbF0ueSwgdXNlW2xdLnosIDEsIHVzZWExW2xdLngsIHVzZWExW2xdLnksIHVzZWExW2xdLnosIDEgXTtcblx0XHRcdHZhciBNID0gbTQubXVsdGlwbHkoRywgU0IsIFtdKTtcblx0XHRcdHZhciBzdHJhbmQgPSBbXTtcblx0XHRcdGZvciAoIHZhciBrID0gMDsgayA8IHZlcnRpY2FsUmVzb2x1dGlvbjsgaysrKSB7XG5cdFx0XHRcdGZvciAoIHZhciBpID0gMzsgaSA+IDA7IGktLSkge1xuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMDsgaiA8IDQ7IGorKykge1xuXHRcdFx0XHRcdFx0TVtpICogNCArIGpdICs9IE1bKGkgLSAxKSAqIDQgKyBqXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RyYW5kW2tdID0gbmV3IHN0cnVjdHVyZXMuQXRvbSgnJywgTVsxMl0gLyBNWzE1XSwgTVsxM10gLyBNWzE1XSwgTVsxNF0gLyBNWzE1XSk7XG5cdFx0XHR9XG5cdFx0XHRzZWdtZW50c1tsXSA9IHN0cmFuZDtcblx0XHR9XG5cdFx0aWYgKHVzZUFycm93cyAmJiB0aGlzLmFycm93KSB7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdmVydGljYWxSZXNvbHV0aW9uOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgbXVsdCA9IDEuNSAtIDEuMyAqIGkgLyB2ZXJ0aWNhbFJlc29sdXRpb247XG5cdFx0XHRcdHZhciBtaWQgPSBtLmZsb29yKHRoaXMuaG9yaXpvbnRhbFJlc29sdXRpb24gLyAyKTtcblx0XHRcdFx0dmFyIGNlbnRlciA9IHNlZ21lbnRzW21pZF07XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBzZWdtZW50cy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0aWYgKGogIT09IG1pZCkge1xuXHRcdFx0XHRcdFx0dmFyIG8gPSBjZW50ZXJbaV07XG5cdFx0XHRcdFx0XHR2YXIgZiA9IHNlZ21lbnRzW2pdW2ldO1xuXHRcdFx0XHRcdFx0dmFyIHZlYyA9IFsgZi54IC0gby54LCBmLnkgLSBvLnksIGYueiAtIG8ueiBdO1xuXHRcdFx0XHRcdFx0djMuc2NhbGUodmVjLCBtdWx0KTtcblx0XHRcdFx0XHRcdGYueCA9IG8ueCArIHZlY1swXTtcblx0XHRcdFx0XHRcdGYueSA9IG8ueSArIHZlY1sxXTtcblx0XHRcdFx0XHRcdGYueiA9IG8ueiArIHZlY1syXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHNlZ21lbnRzO1xuXHR9O1xuXHRfLnNldFZlcnRpY2FsUmVzb2x1dGlvbiA9IGZ1bmN0aW9uKHZlcnRpY2FsUmVzb2x1dGlvbikge1xuXHRcdGlmICh2ZXJ0aWNhbFJlc29sdXRpb24gIT09IGxhc3RWZXJ0aWNhbFJlc29sdXRpb24pIHtcblx0XHRcdHNldHVwTWF0cmljZXModmVydGljYWxSZXNvbHV0aW9uKTtcblx0XHR9XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuc3RydWN0dXJlcywgTWF0aCwgQ2hlbURvb2RsZS5saWIubWF0NCwgQ2hlbURvb2RsZS5saWIudmVjMyk7XG5cbihmdW5jdGlvbihleHRlbnNpb25zLCBzdHJ1Y3R1cmVzLCBtYXRoLCBxLCBtLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRzdHJ1Y3R1cmVzLlNwZWN0cnVtID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5kYXRhID0gW107XG5cdFx0dGhpcy5tZXRhZGF0YSA9IFtdO1xuXHRcdHRoaXMuZGF0YURpc3BsYXkgPSBbXTtcblx0XHR0aGlzLm1lbW9yeSA9IHtcblx0XHRcdG9mZnNldFRvcCA6IDAsXG5cdFx0XHRvZmZzZXRMZWZ0IDogMCxcblx0XHRcdG9mZnNldEJvdHRvbSA6IDAsXG5cdFx0XHRmbGlwWEF4aXMgOiBmYWxzZSxcblx0XHRcdHNjYWxlIDogMSxcblx0XHRcdHdpZHRoIDogMCxcblx0XHRcdGhlaWdodCA6IDBcblx0XHR9O1xuXHR9O1xuXHR2YXIgXyA9IHN0cnVjdHVyZXMuU3BlY3RydW0ucHJvdG90eXBlO1xuXHRfLnRpdGxlID0gdW5kZWZpbmVkO1xuXHRfLnhVbml0ID0gdW5kZWZpbmVkO1xuXHRfLnlVbml0ID0gdW5kZWZpbmVkO1xuXHRfLmNvbnRpbnVvdXMgPSB0cnVlO1xuXHRfLmludGVncmF0aW9uU2Vuc2l0aXZpdHkgPSAwLjAxO1xuXHRfLmRyYXcgPSBmdW5jdGlvbihjdHgsIHNwZWNzLCB3aWR0aCwgaGVpZ2h0KSB7XG5cdFx0aWYgKHRoaXMuc3BlY3MpIHtcblx0XHRcdHNwZWNzID0gdGhpcy5zcGVjcztcblx0XHR9XG5cdFx0dmFyIG9mZnNldFRvcCA9IDU7XG5cdFx0dmFyIG9mZnNldExlZnQgPSAwO1xuXHRcdHZhciBvZmZzZXRCb3R0b20gPSAwO1xuXHRcdC8vIGRyYXcgZGVjb3JhdGlvbnNcblx0XHRjdHguZmlsbFN0eWxlID0gc3BlY3MudGV4dF9jb2xvcjtcblx0XHRjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cdFx0Y3R4LnRleHRCYXNlbGluZSA9ICdhbHBoYWJldGljJztcblx0XHRjdHguZm9udCA9IGV4dGVuc2lvbnMuZ2V0Rm9udFN0cmluZyhzcGVjcy50ZXh0X2ZvbnRfc2l6ZSwgc3BlY3MudGV4dF9mb250X2ZhbWlsaWVzKTtcblx0XHRpZiAodGhpcy54VW5pdCkge1xuXHRcdFx0b2Zmc2V0Qm90dG9tICs9IHNwZWNzLnRleHRfZm9udF9zaXplO1xuXHRcdFx0Y3R4LmZpbGxUZXh0KHRoaXMueFVuaXQsIHdpZHRoIC8gMiwgaGVpZ2h0IC0gMik7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnlVbml0ICYmIHNwZWNzLnBsb3RzX3Nob3dZQXhpcykge1xuXHRcdFx0b2Zmc2V0TGVmdCArPSBzcGVjcy50ZXh0X2ZvbnRfc2l6ZTtcblx0XHRcdGN0eC5zYXZlKCk7XG5cdFx0XHRjdHgudHJhbnNsYXRlKHNwZWNzLnRleHRfZm9udF9zaXplLCBoZWlnaHQgLyAyKTtcblx0XHRcdGN0eC5yb3RhdGUoLW0uUEkgLyAyKTtcblx0XHRcdGN0eC5maWxsVGV4dCh0aGlzLnlVbml0LCAwLCAwKTtcblx0XHRcdGN0eC5yZXN0b3JlKCk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnRpdGxlKSB7XG5cdFx0XHRvZmZzZXRUb3AgKz0gc3BlY3MudGV4dF9mb250X3NpemU7XG5cdFx0XHRjdHguZmlsbFRleHQodGhpcy50aXRsZSwgd2lkdGggLyAyLCBzcGVjcy50ZXh0X2ZvbnRfc2l6ZSk7XG5cdFx0fVxuXHRcdC8vIGRyYXcgdGlja3Ncblx0XHRjdHgubGluZUNhcCA9ICdzcXVhcmUnO1xuXHRcdG9mZnNldEJvdHRvbSArPSA1ICsgc3BlY3MudGV4dF9mb250X3NpemU7XG5cdFx0aWYgKHNwZWNzLnBsb3RzX3Nob3dZQXhpcykge1xuXHRcdFx0b2Zmc2V0TGVmdCArPSA1ICsgY3R4Lm1lYXN1cmVUZXh0KCcxMDAwJykud2lkdGg7XG5cdFx0fVxuXHRcdGlmIChzcGVjcy5wbG90c19zaG93R3JpZCkge1xuXHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gc3BlY3MucGxvdHNfZ3JpZENvbG9yO1xuXHRcdFx0Y3R4LmxpbmVXaWR0aCA9IHNwZWNzLnBsb3RzX2dyaWRMaW5lV2lkdGg7XG5cdFx0XHRjdHguc3Ryb2tlUmVjdChvZmZzZXRMZWZ0LCBvZmZzZXRUb3AsIHdpZHRoIC0gb2Zmc2V0TGVmdCwgaGVpZ2h0IC0gb2Zmc2V0Qm90dG9tIC0gb2Zmc2V0VG9wKTtcblx0XHR9XG5cdFx0Y3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJztcblx0XHR2YXIgc3BhbiA9IHRoaXMubWF4WCAtIHRoaXMubWluWDtcblx0XHR2YXIgdCA9IHNwYW4gLyAxMDA7XG5cdFx0dmFyIG1ham9yID0gLjAwMTtcblx0XHR3aGlsZSAobWFqb3IgPCB0IHx8IHNwYW4gLyBtYWpvciA+IDI1KSB7XG5cdFx0XHRtYWpvciAqPSAxMDtcblx0XHR9XG5cdFx0dmFyIGNvdW50ZXIgPSAwO1xuXHRcdHZhciBvdmVybGFwWCA9IHNwZWNzLnBsb3RzX2ZsaXBYQXhpcyA/IHdpZHRoIDogMDtcblx0XHRmb3IgKCB2YXIgaSA9IG0ucm91bmQodGhpcy5taW5YIC8gbWFqb3IpICogbWFqb3I7IGkgPD0gdGhpcy5tYXhYOyBpICs9IG1ham9yIC8gMikge1xuXHRcdFx0dmFyIHggPSB0aGlzLmdldFRyYW5zZm9ybWVkWChpLCBzcGVjcywgd2lkdGgsIG9mZnNldExlZnQpO1xuXHRcdFx0aWYgKHggPiBvZmZzZXRMZWZ0KSB7XG5cdFx0XHRcdGN0eC5zdHJva2VTdHlsZSA9ICdibGFjayc7XG5cdFx0XHRcdGN0eC5saW5lV2lkdGggPSAxO1xuXHRcdFx0XHRpZiAoY291bnRlciAlIDIgPT09IDApIHtcblx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0Y3R4Lm1vdmVUbyh4LCBoZWlnaHQgLSBvZmZzZXRCb3R0b20pO1xuXHRcdFx0XHRcdGN0eC5saW5lVG8oeCwgaGVpZ2h0IC0gb2Zmc2V0Qm90dG9tICsgMik7XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRcdHZhciBzID0gaS50b0ZpeGVkKDUpO1xuXHRcdFx0XHRcdHdoaWxlIChzLmNoYXJBdChzLmxlbmd0aCAtIDEpID09PSAnMCcpIHtcblx0XHRcdFx0XHRcdHMgPSBzLnN1YnN0cmluZygwLCBzLmxlbmd0aCAtIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocy5jaGFyQXQocy5sZW5ndGggLSAxKSA9PT0gJy4nKSB7XG5cdFx0XHRcdFx0XHRzID0gcy5zdWJzdHJpbmcoMCwgcy5sZW5ndGggLSAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gZG8gdGhpcyB0byBhdm9pZCBsYWJlbCBvdmVybGFwXG5cdFx0XHRcdFx0dmFyIG51bVdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KHMpLndpZHRoO1xuXHRcdFx0XHRcdGlmIChzcGVjcy5wbG90c19mbGlwWEF4aXMpIHtcblx0XHRcdFx0XHRcdG51bVdpZHRoICo9IC0xO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2YXIgbHMgPSB4IC0gbnVtV2lkdGggLyAyO1xuXHRcdFx0XHRcdGlmIChzcGVjcy5wbG90c19mbGlwWEF4aXMgPyBscyA8IG92ZXJsYXBYIDogbHMgPiBvdmVybGFwWCkge1xuXHRcdFx0XHRcdFx0Y3R4LmZpbGxUZXh0KHMsIHgsIGhlaWdodCAtIG9mZnNldEJvdHRvbSArIDIpO1xuXHRcdFx0XHRcdFx0b3ZlcmxhcFggPSB4ICsgbnVtV2lkdGggLyAyO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoc3BlY3MucGxvdHNfc2hvd0dyaWQpIHtcblx0XHRcdFx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IHNwZWNzLnBsb3RzX2dyaWRDb2xvcjtcblx0XHRcdFx0XHRcdGN0eC5saW5lV2lkdGggPSBzcGVjcy5wbG90c19ncmlkTGluZVdpZHRoO1xuXHRcdFx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRcdFx0Y3R4Lm1vdmVUbyh4LCBoZWlnaHQgLSBvZmZzZXRCb3R0b20pO1xuXHRcdFx0XHRcdFx0Y3R4LmxpbmVUbyh4LCBvZmZzZXRUb3ApO1xuXHRcdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0Y3R4Lm1vdmVUbyh4LCBoZWlnaHQgLSBvZmZzZXRCb3R0b20pO1xuXHRcdFx0XHRcdGN0eC5saW5lVG8oeCwgaGVpZ2h0IC0gb2Zmc2V0Qm90dG9tICsgMik7XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRjb3VudGVyKys7XG5cdFx0fVxuXHRcdGlmIChzcGVjcy5wbG90c19zaG93WUF4aXMgfHwgc3BlY3MucGxvdHNfc2hvd0dyaWQpIHtcblx0XHRcdHZhciBzcGFueSA9IDEgLyBzcGVjcy5zY2FsZTtcblx0XHRcdGN0eC50ZXh0QWxpZ24gPSAncmlnaHQnO1xuXHRcdFx0Y3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDw9IDEwOyBpKyspIHtcblx0XHRcdFx0dmFyIHl2YWwgPSBzcGFueSAvIDEwICogaTtcblx0XHRcdFx0dmFyIHkgPSBvZmZzZXRUb3AgKyAoaGVpZ2h0IC0gb2Zmc2V0Qm90dG9tIC0gb2Zmc2V0VG9wKSAqICgxIC0geXZhbCAqIHNwZWNzLnNjYWxlKTtcblx0XHRcdFx0aWYgKHNwZWNzLnBsb3RzX3Nob3dHcmlkKSB7XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gc3BlY3MucGxvdHNfZ3JpZENvbG9yO1xuXHRcdFx0XHRcdGN0eC5saW5lV2lkdGggPSBzcGVjcy5wbG90c19ncmlkTGluZVdpZHRoO1xuXHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHRjdHgubW92ZVRvKG9mZnNldExlZnQsIHkpO1xuXHRcdFx0XHRcdGN0eC5saW5lVG8od2lkdGgsIHkpO1xuXHRcdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoc3BlY3MucGxvdHNfc2hvd1lBeGlzKSB7XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gJ2JsYWNrJztcblx0XHRcdFx0XHRjdHgubGluZVdpZHRoID0gMTtcblx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0Y3R4Lm1vdmVUbyhvZmZzZXRMZWZ0LCB5KTtcblx0XHRcdFx0XHRjdHgubGluZVRvKG9mZnNldExlZnQgLSAzLCB5KTtcblx0XHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IHl2YWwgKiAxMDA7XG5cdFx0XHRcdFx0dmFyIGN1dG9mZiA9IG0ubWF4KDAsIDMgLSBtLmZsb29yKHZhbCkudG9TdHJpbmcoKS5sZW5ndGgpO1xuXHRcdFx0XHRcdHZhciBzID0gdmFsLnRvRml4ZWQoY3V0b2ZmKTtcblx0XHRcdFx0XHRpZiAoY3V0b2ZmID4gMCkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKHMuY2hhckF0KHMubGVuZ3RoIC0gMSkgPT09ICcwJykge1xuXHRcdFx0XHRcdFx0XHRzID0gcy5zdWJzdHJpbmcoMCwgcy5sZW5ndGggLSAxKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHMuY2hhckF0KHMubGVuZ3RoIC0gMSkgPT09ICcuJykge1xuXHRcdFx0XHRcdFx0cyA9IHMuc3Vic3RyaW5nKDAsIHMubGVuZ3RoIC0gMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGN0eC5maWxsVGV4dChzLCBvZmZzZXRMZWZ0IC0gMywgeSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gZHJhdyBheGVzXG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gJ2JsYWNrJztcblx0XHRjdHgubGluZVdpZHRoID0gMTtcblx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0Ly8gZHJhdyB4IGF4aXNcblx0XHRjdHgubW92ZVRvKHdpZHRoLCBoZWlnaHQgLSBvZmZzZXRCb3R0b20pO1xuXHRcdGN0eC5saW5lVG8ob2Zmc2V0TGVmdCwgaGVpZ2h0IC0gb2Zmc2V0Qm90dG9tKTtcblx0XHQvLyBkcmF3IHkgYXhpc1xuXHRcdGlmIChzcGVjcy5wbG90c19zaG93WUF4aXMpIHtcblx0XHRcdGN0eC5saW5lVG8ob2Zmc2V0TGVmdCwgb2Zmc2V0VG9wKTtcblx0XHR9XG5cdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdC8vIGRyYXcgbWV0YWRhdGFcblx0XHRpZiAodGhpcy5kYXRhRGlzcGxheS5sZW5ndGggPiAwKSB7XG5cdFx0XHRjdHgudGV4dEFsaWduID0gJ2xlZnQnO1xuXHRcdFx0Y3R4LnRleHRCYXNlbGluZSA9ICd0b3AnO1xuXHRcdFx0dmFyIG1jb3VudCA9IDA7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5kYXRhRGlzcGxheS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdGlmICh0aGlzLmRhdGFEaXNwbGF5W2ldLnZhbHVlKSB7XG5cdFx0XHRcdFx0Y3R4LmZpbGxUZXh0KFsgdGhpcy5kYXRhRGlzcGxheVtpXS5kaXNwbGF5LCAnOiAnLCB0aGlzLmRhdGFEaXNwbGF5W2ldLnZhbHVlIF0uam9pbignJyksIG9mZnNldExlZnQgKyAxMCwgb2Zmc2V0VG9wICsgMTAgKyBtY291bnQgKiAoc3BlY3MudGV4dF9mb250X3NpemUgKyA1KSk7XG5cdFx0XHRcdFx0bWNvdW50Kys7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5kYXRhRGlzcGxheVtpXS50YWcpIHtcblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gdGhpcy5tZXRhZGF0YS5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0XHRpZiAoZXh0ZW5zaW9ucy5zdHJpbmdTdGFydHNXaXRoKHRoaXMubWV0YWRhdGFbal0sIHRoaXMuZGF0YURpc3BsYXlbaV0udGFnKSkge1xuXHRcdFx0XHRcdFx0XHR2YXIgZHJhdyA9IHRoaXMubWV0YWRhdGFbal07XG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLmRhdGFEaXNwbGF5W2ldLmRpc3BsYXkpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgaW5kZXggPSB0aGlzLm1ldGFkYXRhW2pdLmluZGV4T2YoJz0nKTtcblx0XHRcdFx0XHRcdFx0XHRkcmF3ID0gWyB0aGlzLmRhdGFEaXNwbGF5W2ldLmRpc3BsYXksICc6ICcsIGluZGV4ID4gLTEgPyB0aGlzLm1ldGFkYXRhW2pdLnN1YnN0cmluZyhpbmRleCArIDIpIDogdGhpcy5tZXRhZGF0YVtqXSBdLmpvaW4oJycpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGN0eC5maWxsVGV4dChkcmF3LCBvZmZzZXRMZWZ0ICsgMTAsIG9mZnNldFRvcCArIDEwICsgbWNvdW50ICogKHNwZWNzLnRleHRfZm9udF9zaXplICsgNSkpO1xuXHRcdFx0XHRcdFx0XHRtY291bnQrKztcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuZHJhd1Bsb3QoY3R4LCBzcGVjcywgd2lkdGgsIGhlaWdodCwgb2Zmc2V0VG9wLCBvZmZzZXRMZWZ0LCBvZmZzZXRCb3R0b20pO1xuXHRcdHRoaXMubWVtb3J5Lm9mZnNldFRvcCA9IG9mZnNldFRvcDtcblx0XHR0aGlzLm1lbW9yeS5vZmZzZXRMZWZ0ID0gb2Zmc2V0TGVmdDtcblx0XHR0aGlzLm1lbW9yeS5vZmZzZXRCb3R0b20gPSBvZmZzZXRCb3R0b207XG5cdFx0dGhpcy5tZW1vcnkuZmxpcFhBeGlzID0gc3BlY3MucGxvdHNfZmxpcFhBeGlzO1xuXHRcdHRoaXMubWVtb3J5LnNjYWxlID0gc3BlY3Muc2NhbGU7XG5cdFx0dGhpcy5tZW1vcnkud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLm1lbW9yeS5oZWlnaHQgPSBoZWlnaHQ7XG5cdH07XG5cdF8uZHJhd1Bsb3QgPSBmdW5jdGlvbihjdHgsIHNwZWNzLCB3aWR0aCwgaGVpZ2h0LCBvZmZzZXRUb3AsIG9mZnNldExlZnQsIG9mZnNldEJvdHRvbSkge1xuXHRcdGlmICh0aGlzLnNwZWNzKSB7XG5cdFx0XHRzcGVjcyA9IHRoaXMuc3BlY3M7XG5cdFx0fVxuXHRcdGN0eC5zdHJva2VTdHlsZSA9IHNwZWNzLnBsb3RzX2NvbG9yO1xuXHRcdGN0eC5saW5lV2lkdGggPSBzcGVjcy5wbG90c193aWR0aDtcblx0XHR2YXIgaW50ZWdyYXRpb24gPSBbXTtcblx0XHQvLyBjbGlwIHRoZSBzcGVjdHJ1bSBkaXNwbGF5IGJvdW5kcyBoZXJlIHRvIG5vdCBkcmF3IG92ZXIgdGhlIGF4ZXNcblx0XHQvLyB3ZSBkbyB0aGlzIGJlY2F1c2Ugd2Ugd2FudCB0byBjb250aW51ZSBkcmF3aW5nIHNlZ21lbnRzIHRvIHRoZWlyIG5hdHVyYWwgZW5kcyB0byBiZSBhY2N1cmF0ZSwgYnV0IGRvbid0IHdhbnQgdG8gc2VlIHRoZW0gcGFzdCB0aGUgZGlzcGxheSBhcmVhXG5cdFx0Y3R4LnNhdmUoKTtcblx0XHRjdHgucmVjdChvZmZzZXRMZWZ0LCBvZmZzZXRUb3AsIHdpZHRoLW9mZnNldExlZnQsIGhlaWdodC1vZmZzZXRCb3R0b20tb2Zmc2V0VG9wKTtcblx0XHRjdHguY2xpcCgpO1xuXHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRpZiAodGhpcy5jb250aW51b3VzKSB7XG5cdFx0XHR2YXIgc3RhcnRlZCA9IGZhbHNlO1xuXHRcdFx0dmFyIGNvdW50ZXIgPSAwO1xuXHRcdFx0dmFyIHN0b3AgPSBmYWxzZTtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmRhdGEubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgeCA9IHRoaXMuZ2V0VHJhbnNmb3JtZWRYKHRoaXMuZGF0YVtpXS54LCBzcGVjcywgd2lkdGgsIG9mZnNldExlZnQpO1xuXHRcdFx0XHR2YXIgeG5leHQ7XG5cdFx0XHRcdGlmIChpIDwgaWkgJiYgIXN0YXJ0ZWQgJiYgdGhpcy5kYXRhW2krMV0pIHtcblx0XHRcdFx0XHQvLyBzZWUgaWYgeW91IHNob3VsZCByZW5kZXIgdGhpcyBmaXJzdCBzZWdtZW50XG5cdFx0XHRcdFx0eG5leHQgPSB0aGlzLmdldFRyYW5zZm9ybWVkWCh0aGlzLmRhdGFbaSArIDFdLngsIHNwZWNzLCB3aWR0aCwgb2Zmc2V0TGVmdCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gY2hlY2sgeG5leHQgYWdhaW5zdCB1bmRlZmluZWQgYXMgaXQgY2FuIGJlIDAvMVxuXHRcdFx0XHRpZiAoeCA+PSBvZmZzZXRMZWZ0ICYmIHggPCB3aWR0aCB8fCB4bmV4dCAhPT0gdW5kZWZpbmVkICYmIHhuZXh0ID49IG9mZnNldExlZnQgJiYgeG5leHQgPCB3aWR0aCkge1xuXHRcdFx0XHRcdHZhciB5ID0gdGhpcy5nZXRUcmFuc2Zvcm1lZFkodGhpcy5kYXRhW2ldLnksIHNwZWNzLCBoZWlnaHQsIG9mZnNldEJvdHRvbSwgb2Zmc2V0VG9wKTtcblx0XHRcdFx0XHRpZiAoc3BlY3MucGxvdHNfc2hvd0ludGVncmF0aW9uICYmIG0uYWJzKHRoaXMuZGF0YVtpXS55KSA+IHRoaXMuaW50ZWdyYXRpb25TZW5zaXRpdml0eSkge1xuXHRcdFx0XHRcdFx0aW50ZWdyYXRpb24ucHVzaChuZXcgc3RydWN0dXJlcy5Qb2ludCh0aGlzLmRhdGFbaV0ueCwgdGhpcy5kYXRhW2ldLnkpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCFzdGFydGVkKSB7XG5cdFx0XHRcdFx0XHRjdHgubW92ZVRvKHgsIHkpO1xuXHRcdFx0XHRcdFx0c3RhcnRlZCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGN0eC5saW5lVG8oeCwgeSk7XG5cdFx0XHRcdFx0Y291bnRlcisrO1xuXHRcdFx0XHRcdGlmIChjb3VudGVyICUgMTAwMCA9PT0gMCkge1xuXHRcdFx0XHRcdFx0Ly8gc2VnbWVudCB0aGUgcGF0aCB0byBhdm9pZCBjcmFzaGluZyBzYWZhcmkgb24gbWFjIG9zIHhcblx0XHRcdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHRcdGN0eC5tb3ZlVG8oeCwgeSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChzdG9wKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoc3RhcnRlZCkge1xuXHRcdFx0XHRcdC8vIHJlbmRlciBvbmUgbW9yZSBzZWdtZW50XG5cdFx0XHRcdFx0c3RvcCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuZGF0YS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciB4ID0gdGhpcy5nZXRUcmFuc2Zvcm1lZFgodGhpcy5kYXRhW2ldLngsIHNwZWNzLCB3aWR0aCwgb2Zmc2V0TGVmdCk7XG5cdFx0XHRcdGlmICh4ID49IG9mZnNldExlZnQgJiYgeCA8IHdpZHRoKSB7XG5cdFx0XHRcdFx0Y3R4Lm1vdmVUbyh4LCBoZWlnaHQgLSBvZmZzZXRCb3R0b20pO1xuXHRcdFx0XHRcdGN0eC5saW5lVG8oeCwgdGhpcy5nZXRUcmFuc2Zvcm1lZFkodGhpcy5kYXRhW2ldLnksIHNwZWNzLCBoZWlnaHQsIG9mZnNldEJvdHRvbSwgb2Zmc2V0VG9wKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdGlmIChzcGVjcy5wbG90c19zaG93SW50ZWdyYXRpb24gJiYgaW50ZWdyYXRpb24ubGVuZ3RoID4gMSkge1xuXHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gc3BlY3MucGxvdHNfaW50ZWdyYXRpb25Db2xvcjtcblx0XHRcdGN0eC5saW5lV2lkdGggPSBzcGVjcy5wbG90c19pbnRlZ3JhdGlvbkxpbmVXaWR0aDtcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdHZhciBhc2NlbmRpbmcgPSBpbnRlZ3JhdGlvblsxXS54ID4gaW50ZWdyYXRpb25bMF0ueDtcblx0XHRcdHZhciBtYXg7XG5cdFx0XHRpZiAodGhpcy5mbGlwWEF4aXMgJiYgIWFzY2VuZGluZyB8fCAhdGhpcy5mbGlwWEF4aXMgJiYgYXNjZW5kaW5nKSB7XG5cdFx0XHRcdGZvciAoIHZhciBpID0gaW50ZWdyYXRpb24ubGVuZ3RoIC0gMjsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdFx0XHRpbnRlZ3JhdGlvbltpXS55ID0gaW50ZWdyYXRpb25baV0ueSArIGludGVncmF0aW9uW2kgKyAxXS55O1xuXHRcdFx0XHR9XG5cdFx0XHRcdG1heCA9IGludGVncmF0aW9uWzBdLnk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDEsIGlpID0gaW50ZWdyYXRpb24ubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRcdGludGVncmF0aW9uW2ldLnkgPSBpbnRlZ3JhdGlvbltpXS55ICsgaW50ZWdyYXRpb25baSAtIDFdLnk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bWF4ID0gaW50ZWdyYXRpb25baW50ZWdyYXRpb24ubGVuZ3RoIC0gMV0ueTtcblx0XHRcdH1cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBpbnRlZ3JhdGlvbi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciB4ID0gdGhpcy5nZXRUcmFuc2Zvcm1lZFgoaW50ZWdyYXRpb25baV0ueCwgc3BlY3MsIHdpZHRoLCBvZmZzZXRMZWZ0KTtcblx0XHRcdFx0dmFyIHkgPSB0aGlzLmdldFRyYW5zZm9ybWVkWShpbnRlZ3JhdGlvbltpXS55IC8gc3BlY3Muc2NhbGUgLyBtYXgsIHNwZWNzLCBoZWlnaHQsIG9mZnNldEJvdHRvbSwgb2Zmc2V0VG9wKTtcblx0XHRcdFx0aWYgKGkgPT09IDApIHtcblx0XHRcdFx0XHRjdHgubW92ZVRvKHgsIHkpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGN0eC5saW5lVG8oeCwgeSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHR9XG5cdFx0Y3R4LnJlc3RvcmUoKTtcblx0fTtcblx0Xy5nZXRUcmFuc2Zvcm1lZFkgPSBmdW5jdGlvbih5LCBzcGVjcywgaGVpZ2h0LCBvZmZzZXRCb3R0b20sIG9mZnNldFRvcCkge1xuXHRcdHJldHVybiBvZmZzZXRUb3AgKyAoaGVpZ2h0IC0gb2Zmc2V0Qm90dG9tIC0gb2Zmc2V0VG9wKSAqICgxIC0geSAqIHNwZWNzLnNjYWxlKTtcblx0fTtcblx0Xy5nZXRJbnZlcnNlVHJhbnNmb3JtZWRZID0gZnVuY3Rpb24oeSkge1xuXHRcdC8vIGNhbiBvbmx5IGJlIGNhbGxlZCBhZnRlciBhIHJlbmRlciB3aGVuIG1lbW9yeSBpcyBzZXQsIHRoaXNcblx0XHQvLyBmdW5jdGlvbiBkb2Vzbid0IG1ha2Ugc2Vuc2Ugd2l0aG91dCBhIHJlbmRlciBmaXJzdCBhbnl3YXlcblx0XHRyZXR1cm4gKDEgLSAoeSAtIHRoaXMubWVtb3J5Lm9mZnNldFRvcCkgLyAodGhpcy5tZW1vcnkuaGVpZ2h0IC0gdGhpcy5tZW1vcnkub2Zmc2V0Qm90dG9tIC0gdGhpcy5tZW1vcnkub2Zmc2V0VG9wKSkgLyB0aGlzLm1lbW9yeS5zY2FsZSAqIDEwMDtcblx0fTtcblx0Xy5nZXRUcmFuc2Zvcm1lZFggPSBmdW5jdGlvbih4LCBzcGVjcywgd2lkdGgsIG9mZnNldExlZnQpIHtcblx0XHR2YXIgcmV0dXJuaW5nID0gb2Zmc2V0TGVmdCArICh4IC0gdGhpcy5taW5YKSAvICh0aGlzLm1heFggLSB0aGlzLm1pblgpICogKHdpZHRoIC0gb2Zmc2V0TGVmdCk7XG5cdFx0aWYgKHNwZWNzLnBsb3RzX2ZsaXBYQXhpcykge1xuXHRcdFx0cmV0dXJuaW5nID0gd2lkdGggKyBvZmZzZXRMZWZ0IC0gcmV0dXJuaW5nO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0dXJuaW5nO1xuXHR9O1xuXHRfLmdldEludmVyc2VUcmFuc2Zvcm1lZFggPSBmdW5jdGlvbih4KSB7XG5cdFx0Ly8gY2FuIG9ubHkgYmUgY2FsbGVkIGFmdGVyIGEgcmVuZGVyIHdoZW4gbWVtb3J5IGlzIHNldCwgdGhpc1xuXHRcdC8vIGZ1bmN0aW9uIGRvZXNuJ3QgbWFrZSBzZW5zZSB3aXRob3V0IGEgcmVuZGVyIGZpcnN0IGFueXdheVxuXHRcdGlmICh0aGlzLm1lbW9yeS5mbGlwWEF4aXMpIHtcblx0XHRcdHggPSB0aGlzLm1lbW9yeS53aWR0aCArIHRoaXMubWVtb3J5Lm9mZnNldExlZnQgLSB4O1xuXHRcdH1cblx0XHRyZXR1cm4gKHggLSB0aGlzLm1lbW9yeS5vZmZzZXRMZWZ0KSAqICh0aGlzLm1heFggLSB0aGlzLm1pblgpIC8gKHRoaXMubWVtb3J5LndpZHRoIC0gdGhpcy5tZW1vcnkub2Zmc2V0TGVmdCkgKyB0aGlzLm1pblg7XG5cdH07XG5cdF8uc2V0dXAgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgeG1pbiA9IE51bWJlci5NQVhfVkFMVUU7XG5cdFx0dmFyIHhtYXggPSBOdW1iZXIuTUlOX1ZBTFVFO1xuXHRcdHZhciB5bWF4ID0gTnVtYmVyLk1JTl9WQUxVRTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5kYXRhLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHhtaW4gPSBtLm1pbih4bWluLCB0aGlzLmRhdGFbaV0ueCk7XG5cdFx0XHR4bWF4ID0gbS5tYXgoeG1heCwgdGhpcy5kYXRhW2ldLngpO1xuXHRcdFx0eW1heCA9IG0ubWF4KHltYXgsIHRoaXMuZGF0YVtpXS55KTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuY29udGludW91cykge1xuXHRcdFx0dGhpcy5taW5YID0geG1pbjtcblx0XHRcdHRoaXMubWF4WCA9IHhtYXg7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMubWluWCA9IHhtaW4gLSAxO1xuXHRcdFx0dGhpcy5tYXhYID0geG1heCArIDE7XG5cdFx0fVxuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmRhdGEubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dGhpcy5kYXRhW2ldLnkgLz0geW1heDtcblx0XHR9XG5cdH07XG5cdF8uem9vbSA9IGZ1bmN0aW9uKHBpeGVsMSwgcGl4ZWwyLCB3aWR0aCwgcmVzY2FsZVkpIHtcblx0XHR2YXIgcDEgPSB0aGlzLmdldEludmVyc2VUcmFuc2Zvcm1lZFgocGl4ZWwxKTtcblx0XHR2YXIgcDIgPSB0aGlzLmdldEludmVyc2VUcmFuc2Zvcm1lZFgocGl4ZWwyKTtcblx0XHR0aGlzLm1pblggPSBtLm1pbihwMSwgcDIpO1xuXHRcdHRoaXMubWF4WCA9IG0ubWF4KHAxLCBwMik7XG5cdFx0aWYgKHJlc2NhbGVZKSB7XG5cdFx0XHR2YXIgeW1heCA9IE51bWJlci5NSU5fVkFMVUU7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5kYXRhLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0aWYgKG1hdGguaXNCZXR3ZWVuKHRoaXMuZGF0YVtpXS54LCB0aGlzLm1pblgsIHRoaXMubWF4WCkpIHtcblx0XHRcdFx0XHR5bWF4ID0gbS5tYXgoeW1heCwgdGhpcy5kYXRhW2ldLnkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gMSAvIHltYXg7XG5cdFx0fVxuXHR9O1xuXHRfLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKGRpZiwgd2lkdGgpIHtcblx0XHR2YXIgZGlzdCA9IGRpZiAvICh3aWR0aCAtIHRoaXMubWVtb3J5Lm9mZnNldExlZnQpICogKHRoaXMubWF4WCAtIHRoaXMubWluWCkgKiAodGhpcy5tZW1vcnkuZmxpcFhBeGlzID8gMSA6IC0xKTtcblx0XHR0aGlzLm1pblggKz0gZGlzdDtcblx0XHR0aGlzLm1heFggKz0gZGlzdDtcblx0fTtcblx0Xy5hbGVydE1ldGFkYXRhID0gZnVuY3Rpb24oKSB7XG5cdFx0YWxlcnQodGhpcy5tZXRhZGF0YS5qb2luKCdcXG4nKSk7XG5cdH07XG5cdF8uZ2V0SW50ZXJuYWxDb29yZGluYXRlcyA9IGZ1bmN0aW9uKHgsIHkpIHtcblx0XHRyZXR1cm4gbmV3IENoZW1Eb29kbGUuc3RydWN0dXJlcy5Qb2ludCh0aGlzLmdldEludmVyc2VUcmFuc2Zvcm1lZFgoeCksIHRoaXMuZ2V0SW52ZXJzZVRyYW5zZm9ybWVkWSh5KSk7XG5cdH07XG5cdF8uZ2V0Q2xvc2VzdFBsb3RJbnRlcm5hbENvb3JkaW5hdGVzID0gZnVuY3Rpb24oeCkge1xuXHRcdHZhciB4dGwgPSB0aGlzLmdldEludmVyc2VUcmFuc2Zvcm1lZFgoeCAtIDEpO1xuXHRcdHZhciB4dHIgPSB0aGlzLmdldEludmVyc2VUcmFuc2Zvcm1lZFgoeCArIDEpO1xuXHRcdGlmICh4dGwgPiB4dHIpIHtcblx0XHRcdHZhciB0ZW1wID0geHRsO1xuXHRcdFx0eHRsID0geHRyO1xuXHRcdFx0eHRyID0gdGVtcDtcblx0XHR9XG5cdFx0dmFyIGhpZ2hlc3QgPSAtMTtcblx0XHR2YXIgbWF4ID0gLUluZmluaXR5O1xuXHRcdHZhciBpblJhbmdlID0gZmFsc2U7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuZGF0YS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgcCA9IHRoaXMuZGF0YVtpXTtcblx0XHRcdGlmIChtYXRoLmlzQmV0d2VlbihwLngsIHh0bCwgeHRyKSkge1xuXHRcdFx0XHRpZiAocC55ID4gbWF4KSB7XG5cdFx0XHRcdFx0aW5SYW5nZSA9IHRydWU7XG5cdFx0XHRcdFx0bWF4ID0gcC55O1xuXHRcdFx0XHRcdGhpZ2hlc3QgPSBpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGluUmFuZ2UpIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChoaWdoZXN0ID09PSAtMSkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dmFyIHAgPSB0aGlzLmRhdGFbaGlnaGVzdF07XG5cdFx0cmV0dXJuIG5ldyBDaGVtRG9vZGxlLnN0cnVjdHVyZXMuUG9pbnQocC54LCBwLnkgKiAxMDApO1xuXHR9O1xuXHRfLmdldENsb3Nlc3RQZWFrSW50ZXJuYWxDb29yZGluYXRlcyA9IGZ1bmN0aW9uKHgpIHtcblx0XHR2YXIgeHQgPSB0aGlzLmdldEludmVyc2VUcmFuc2Zvcm1lZFgoeCk7XG5cdFx0dmFyIGNsb3Nlc3QgPSAwO1xuXHRcdHZhciBkaWYgPSBJbmZpbml0eTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5kYXRhLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBzdWIgPSBtLmFicyh0aGlzLmRhdGFbaV0ueCAtIHh0KTtcblx0XHRcdGlmIChzdWIgPD0gZGlmKSB7XG5cdFx0XHRcdGRpZiA9IHN1Yjtcblx0XHRcdFx0Y2xvc2VzdCA9IGk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIGhpZ2hlc3RMZWZ0ID0gY2xvc2VzdCwgaGlnaGVzdFJpZ2h0ID0gY2xvc2VzdDtcblx0XHR2YXIgbWF4TGVmdCA9IHRoaXMuZGF0YVtjbG9zZXN0XS55LCBtYXhSaWdodCA9IHRoaXMuZGF0YVtjbG9zZXN0XS55O1xuXHRcdGZvciAoIHZhciBpID0gY2xvc2VzdCArIDEsIGlpID0gdGhpcy5kYXRhLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdGlmICh0aGlzLmRhdGFbaV0ueSArIC4wNSA+IG1heFJpZ2h0KSB7XG5cdFx0XHRcdG1heFJpZ2h0ID0gdGhpcy5kYXRhW2ldLnk7XG5cdFx0XHRcdGhpZ2hlc3RSaWdodCA9IGk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0Zm9yICggdmFyIGkgPSBjbG9zZXN0IC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdGlmICh0aGlzLmRhdGFbaV0ueSArIC4wNSA+IG1heExlZnQpIHtcblx0XHRcdFx0bWF4TGVmdCA9IHRoaXMuZGF0YVtpXS55O1xuXHRcdFx0XHRoaWdoZXN0TGVmdCA9IGk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIHAgPSB0aGlzLmRhdGFbaGlnaGVzdExlZnQgLSBjbG9zZXN0ID4gaGlnaGVzdFJpZ2h0IC0gY2xvc2VzdCA/IGhpZ2hlc3RSaWdodCA6IGhpZ2hlc3RMZWZ0XTtcblx0XHRyZXR1cm4gbmV3IENoZW1Eb29kbGUuc3RydWN0dXJlcy5Qb2ludChwLngsIHAueSAqIDEwMCk7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuZXh0ZW5zaW9ucywgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLCBDaGVtRG9vZGxlLm1hdGgsIENoZW1Eb29kbGUubGliLmpRdWVyeSwgTWF0aCk7XG5cbihmdW5jdGlvbihtYXRoLCBkMiwgbSwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDIuX1NoYXBlID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfID0gZDIuX1NoYXBlLnByb3RvdHlwZTtcblx0Xy5kcmF3RGVjb3JhdGlvbnMgPSBmdW5jdGlvbihjdHgsIHNwZWNzKSB7XG5cdFx0aWYgKHRoaXMuaXNIb3Zlcikge1xuXHRcdFx0dmFyIHBzID0gdGhpcy5nZXRQb2ludHMoKTtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBwcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBwID0gcHNbaV07XG5cdFx0XHRcdHRoaXMuZHJhd0FuY2hvcihjdHgsIHNwZWNzLCBwLCBwID09PSB0aGlzLmhvdmVyUG9pbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0Xy5nZXRCb3VuZHMgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgYm91bmRzID0gbmV3IG1hdGguQm91bmRzKCk7XG5cdFx0dmFyIHBzID0gdGhpcy5nZXRQb2ludHMoKTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gcHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIHAgPSBwc1tpXTtcblx0XHRcdGJvdW5kcy5leHBhbmQocC54LCBwLnkpO1xuXHRcdH1cblx0XHRyZXR1cm4gYm91bmRzO1xuXHR9O1xuXHRfLmRyYXdBbmNob3IgPSBmdW5jdGlvbihjdHgsIHNwZWNzLCBwLCBob3ZlcmVkKSB7XG5cdFx0Y3R4LnNhdmUoKTtcblx0XHRjdHgudHJhbnNsYXRlKHAueCwgcC55KTtcblx0XHRjdHgucm90YXRlKG0uUEkgLyA0KTtcblx0XHRjdHguc2NhbGUoMSAvIHNwZWNzLnNjYWxlLCAxIC8gc3BlY3Muc2NhbGUpO1xuXHRcdHZhciBib3hSYWRpdXMgPSA0O1xuXHRcdHZhciBpbm5lclJhZGl1cyA9IGJveFJhZGl1cyAvIDI7XG5cblx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0Y3R4Lm1vdmVUbygtYm94UmFkaXVzLCAtYm94UmFkaXVzKTtcblx0XHRjdHgubGluZVRvKGJveFJhZGl1cywgLWJveFJhZGl1cyk7XG5cdFx0Y3R4LmxpbmVUbyhib3hSYWRpdXMsIGJveFJhZGl1cyk7XG5cdFx0Y3R4LmxpbmVUbygtYm94UmFkaXVzLCBib3hSYWRpdXMpO1xuXHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRpZiAoaG92ZXJlZCkge1xuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHNwZWNzLmNvbG9ySG92ZXI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGN0eC5maWxsU3R5bGUgPSAnd2hpdGUnO1xuXHRcdH1cblx0XHRjdHguZmlsbCgpO1xuXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdGN0eC5tb3ZlVG8oLWJveFJhZGl1cywgLWlubmVyUmFkaXVzKTtcblx0XHRjdHgubGluZVRvKC1ib3hSYWRpdXMsIC1ib3hSYWRpdXMpO1xuXHRcdGN0eC5saW5lVG8oLWlubmVyUmFkaXVzLCAtYm94UmFkaXVzKTtcblx0XHRjdHgubW92ZVRvKGlubmVyUmFkaXVzLCAtYm94UmFkaXVzKTtcblx0XHRjdHgubGluZVRvKGJveFJhZGl1cywgLWJveFJhZGl1cyk7XG5cdFx0Y3R4LmxpbmVUbyhib3hSYWRpdXMsIC1pbm5lclJhZGl1cyk7XG5cdFx0Y3R4Lm1vdmVUbyhib3hSYWRpdXMsIGlubmVyUmFkaXVzKTtcblx0XHRjdHgubGluZVRvKGJveFJhZGl1cywgYm94UmFkaXVzKTtcblx0XHRjdHgubGluZVRvKGlubmVyUmFkaXVzLCBib3hSYWRpdXMpO1xuXHRcdGN0eC5tb3ZlVG8oLWlubmVyUmFkaXVzLCBib3hSYWRpdXMpO1xuXHRcdGN0eC5saW5lVG8oLWJveFJhZGl1cywgYm94UmFkaXVzKTtcblx0XHRjdHgubGluZVRvKC1ib3hSYWRpdXMsIGlubmVyUmFkaXVzKTtcblx0XHRjdHgubW92ZVRvKC1ib3hSYWRpdXMsIC1pbm5lclJhZGl1cyk7XG5cblx0XHRjdHguc3Ryb2tlU3R5bGUgPSAncmdiYSgwLDAsMCwuMiknO1xuXHRcdGN0eC5saW5lV2lkdGggPSA1O1xuXHRcdGN0eC5zdHJva2UoKTtcblx0XHRjdHguc3Ryb2tlU3R5bGUgPSAnYmx1ZSc7XG5cdFx0Y3R4LmxpbmVXaWR0aCA9IDE7XG5cdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdGN0eC5yZXN0b3JlKCk7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUubWF0aCwgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLmQyLCBNYXRoKTtcblxuKGZ1bmN0aW9uKGV4dGVuc2lvbnMsIG1hdGgsIHN0cnVjdHVyZXMsIGQyLCBtLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0ZDIuQXRvbU1hcHBpbmcgPSBmdW5jdGlvbihvMSwgbzIpIHtcblx0XHQvLyB0aGVzZSBuZWVkIHRvIGJlIG5hbWVkICdvJywgbm90ICdhJyBvciB0aGUgZ2VuZXJpYyBlcmFzZSBmdW5jdGlvbiB3b24ndCB3b3JrIGZvciB0aGVtXG5cdFx0dGhpcy5vMSA9IG8xO1xuXHRcdHRoaXMubzIgPSBvMjtcblx0XHR0aGlzLmxhYmVsID0gJzAnO1xuXHRcdHRoaXMuZXJyb3IgPSBmYWxzZTtcblx0fTtcblx0dmFyIF8gPSBkMi5BdG9tTWFwcGluZy5wcm90b3R5cGUgPSBuZXcgZDIuX1NoYXBlKCk7XG5cdF8uZHJhd0RlY29yYXRpb25zID0gZnVuY3Rpb24oY3R4LCBzcGVjcykge1xuXHRcdGlmICh0aGlzLmlzSG92ZXIgfHwgdGhpcy5pc1NlbGVjdGVkKSB7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmlzSG92ZXIgPyBzcGVjcy5jb2xvckhvdmVyIDogc3BlY3MuY29sb3JTZWxlY3Q7XG5cdFx0XHRjdHgubGluZVdpZHRoID0gMTtcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdGN0eC5tb3ZlVG8odGhpcy5vMS54LCB0aGlzLm8xLnkpO1xuXHRcdFx0Y3R4LmxpbmVUbyh0aGlzLm8yLngsIHRoaXMubzIueSk7XG5cdFx0XHRjdHguc2V0TGluZURhc2goWzJdKTtcblx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdGN0eC5zZXRMaW5lRGFzaChbXSk7XG5cdFx0fVxuXHR9O1xuXHRfLmRyYXcgPSBmdW5jdGlvbihjdHgsIHNwZWNzKSB7XG5cdFx0aWYgKHRoaXMubzEgJiYgdGhpcy5vMikge1xuXHRcdFx0dmFyIHNlcCA9IDE0O1xuXHRcdFx0dGhpcy54MSA9IHRoaXMubzEueCtzZXAqbS5jb3ModGhpcy5vMS5hbmdsZU9mTGVhc3RJbnRlcmZlcmVuY2UpO1xuXHRcdFx0dGhpcy55MSA9IHRoaXMubzEueS1zZXAqbS5zaW4odGhpcy5vMS5hbmdsZU9mTGVhc3RJbnRlcmZlcmVuY2UpO1xuXHRcdFx0dGhpcy54MiA9IHRoaXMubzIueCtzZXAqbS5jb3ModGhpcy5vMi5hbmdsZU9mTGVhc3RJbnRlcmZlcmVuY2UpO1xuXHRcdFx0dGhpcy55MiA9IHRoaXMubzIueS1zZXAqbS5zaW4odGhpcy5vMi5hbmdsZU9mTGVhc3RJbnRlcmZlcmVuY2UpO1xuXHRcdFx0Y3R4LmZvbnQgPSBleHRlbnNpb25zLmdldEZvbnRTdHJpbmcoc3BlY3MudGV4dF9mb250X3NpemUsIHNwZWNzLnRleHRfZm9udF9mYW1pbGllcywgc3BlY3MudGV4dF9mb250X2JvbGQsIHNwZWNzLnRleHRfZm9udF9pdGFsaWMpO1xuXHRcdFx0dmFyIGxhYmVsID0gdGhpcy5sYWJlbDtcblx0XHRcdHZhciB3ID0gY3R4Lm1lYXN1cmVUZXh0KGxhYmVsKS53aWR0aDtcblx0XHRcdGlmICh0aGlzLmlzTGFzc29lZCkge1xuXHRcdFx0XHRjdHguZmlsbFN0eWxlID0gc3BlY3MuY29sb3JIb3Zlcjtcblx0XHRcdFx0Y3R4LmZpbGxSZWN0KHRoaXMueDEtdy8yLTMsIHRoaXMueTEtc3BlY3MudGV4dF9mb250X3NpemUvMi0zLCB3KzYsIHNwZWNzLnRleHRfZm9udF9zaXplKzYpO1xuXHRcdFx0XHRjdHguZmlsbFJlY3QodGhpcy54Mi13LzItMywgdGhpcy55Mi1zcGVjcy50ZXh0X2ZvbnRfc2l6ZS8yLTMsIHcrNiwgc3BlY3MudGV4dF9mb250X3NpemUrNik7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY29sb3IgPSB0aGlzLmVycm9yP3NwZWNzLmNvbG9yRXJyb3I6c3BlY3Muc2hhcGVzX2NvbG9yO1xuXHRcdFx0aWYgKHRoaXMuaXNIb3ZlciB8fCB0aGlzLmlzU2VsZWN0ZWQpIHtcblx0XHRcdFx0Y29sb3IgPSB0aGlzLmlzSG92ZXIgPyBzcGVjcy5jb2xvckhvdmVyIDogc3BlY3MuY29sb3JTZWxlY3Q7XG5cdFx0XHR9XG5cdFx0XHRjdHguZmlsbFN0eWxlID0gY29sb3I7XG5cdFx0XHRjdHguZmlsbFJlY3QodGhpcy54MS13LzItMSwgdGhpcy55MS1zcGVjcy50ZXh0X2ZvbnRfc2l6ZS8yLTEsIHcrMiwgc3BlY3MudGV4dF9mb250X3NpemUrMik7XG5cdFx0XHRjdHguZmlsbFJlY3QodGhpcy54Mi13LzItMSwgdGhpcy55Mi1zcGVjcy50ZXh0X2ZvbnRfc2l6ZS8yLTEsIHcrMiwgc3BlY3MudGV4dF9mb250X3NpemUrMik7XG5cdFx0XHRjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cdFx0XHRjdHguZmlsbFN0eWxlID0gc3BlY3MuYmFja2dyb3VuZENvbG9yO1xuXHRcdFx0Y3R4LmZpbGxUZXh0KGxhYmVsLCB0aGlzLngxLCB0aGlzLnkxKTtcblx0XHRcdGN0eC5maWxsVGV4dChsYWJlbCwgdGhpcy54MiwgdGhpcy55Mik7XG5cdFx0fVxuXHR9O1xuXHRfLmdldFBvaW50cyA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBbbmV3IHN0cnVjdHVyZXMuUG9pbnQodGhpcy54MSwgdGhpcy55MSksIG5ldyBzdHJ1Y3R1cmVzLlBvaW50KHRoaXMueDIsIHRoaXMueTIpXTtcblx0fTtcblx0Xy5pc092ZXIgPSBmdW5jdGlvbihwLCBiYXJyaWVyKSB7XG5cdFx0aWYodGhpcy54MSl7XG5cdFx0XHRyZXR1cm4gcC5kaXN0YW5jZSh7eDp0aGlzLngxLCB5OnRoaXMueTF9KTxiYXJyaWVyIHx8IHAuZGlzdGFuY2Uoe3g6dGhpcy54MiwgeTp0aGlzLnkyfSk8YmFycmllcjtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLmV4dGVuc2lvbnMsIENoZW1Eb29kbGUubWF0aCwgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDIsIE1hdGgpO1xuXG4oZnVuY3Rpb24oZXh0ZW5zaW9ucywgbWF0aCwgc3RydWN0dXJlcywgZDIsIG0sIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQyLkJyYWNrZXQgPSBmdW5jdGlvbihwMSwgcDIpIHtcblx0XHR0aGlzLnAxID0gcDEgPyBwMSA6IG5ldyBzdHJ1Y3R1cmVzLlBvaW50KCk7XG5cdFx0dGhpcy5wMiA9IHAyID8gcDIgOiBuZXcgc3RydWN0dXJlcy5Qb2ludCgpO1xuXHR9O1xuXHR2YXIgXyA9IGQyLkJyYWNrZXQucHJvdG90eXBlID0gbmV3IGQyLl9TaGFwZSgpO1xuXHRfLmNoYXJnZSA9IDA7XG5cdF8ubXVsdCA9IDA7XG5cdF8ucmVwZWF0ID0gMDtcblx0Xy5kcmF3ID0gZnVuY3Rpb24oY3R4LCBzcGVjcykge1xuXHRcdHZhciBtaW5YID0gbS5taW4odGhpcy5wMS54LCB0aGlzLnAyLngpO1xuXHRcdHZhciBtYXhYID0gbS5tYXgodGhpcy5wMS54LCB0aGlzLnAyLngpO1xuXHRcdHZhciBtaW5ZID0gbS5taW4odGhpcy5wMS55LCB0aGlzLnAyLnkpO1xuXHRcdHZhciBtYXhZID0gbS5tYXgodGhpcy5wMS55LCB0aGlzLnAyLnkpO1xuXHRcdHZhciBoID0gbWF4WSAtIG1pblk7XG5cdFx0dmFyIGxpcCA9IGggLyAxMDtcblx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0Y3R4Lm1vdmVUbyhtaW5YICsgbGlwLCBtaW5ZKTtcblx0XHRjdHgubGluZVRvKG1pblgsIG1pblkpO1xuXHRcdGN0eC5saW5lVG8obWluWCwgbWF4WSk7XG5cdFx0Y3R4LmxpbmVUbyhtaW5YICsgbGlwLCBtYXhZKTtcblx0XHRjdHgubW92ZVRvKG1heFggLSBsaXAsIG1heFkpO1xuXHRcdGN0eC5saW5lVG8obWF4WCwgbWF4WSk7XG5cdFx0Y3R4LmxpbmVUbyhtYXhYLCBtaW5ZKTtcblx0XHRjdHgubGluZVRvKG1heFggLSBsaXAsIG1pblkpO1xuXHRcdGlmICh0aGlzLmlzTGFzc29lZCkge1xuXHRcdFx0dmFyIGdyZCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCh0aGlzLnAxLngsIHRoaXMucDEueSwgdGhpcy5wMi54LCB0aGlzLnAyLnkpO1xuXHRcdFx0Z3JkLmFkZENvbG9yU3RvcCgwLCAncmdiYSgyMTIsIDk5LCAwLCAwKScpO1xuXHRcdFx0Z3JkLmFkZENvbG9yU3RvcCgwLjUsICdyZ2JhKDIxMiwgOTksIDAsIDAuOCknKTtcblx0XHRcdGdyZC5hZGRDb2xvclN0b3AoMSwgJ3JnYmEoMjEyLCA5OSwgMCwgMCknKTtcblx0XHRcdGN0eC5saW5lV2lkdGggPSBzcGVjcy5zaGFwZXNfbGluZVdpZHRoICsgNTtcblx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IGdyZDtcblx0XHRcdGN0eC5saW5lSm9pbiA9ICdtaXRlcic7XG5cdFx0XHRjdHgubGluZUNhcCA9ICdzcXVhcmUnO1xuXHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdH1cblx0XHRjdHguc3Ryb2tlU3R5bGUgPSBzcGVjcy5zaGFwZXNfY29sb3I7XG5cdFx0Y3R4LmxpbmVXaWR0aCA9IHNwZWNzLnNoYXBlc19saW5lV2lkdGg7XG5cdFx0Y3R4LmxpbmVKb2luID0gJ21pdGVyJztcblx0XHRjdHgubGluZUNhcCA9ICdidXR0Jztcblx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0aWYgKHRoaXMuY2hhcmdlICE9PSAwKSB7XG5cdFx0XHRjdHguZmlsbFN0eWxlID0gc3BlY3MudGV4dF9jb2xvcjtcblx0XHRcdGN0eC50ZXh0QWxpZ24gPSAnbGVmdCc7XG5cdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ2FscGhhYmV0aWMnO1xuXHRcdFx0Y3R4LmZvbnQgPSBleHRlbnNpb25zLmdldEZvbnRTdHJpbmcoc3BlY3MudGV4dF9mb250X3NpemUsIHNwZWNzLnRleHRfZm9udF9mYW1pbGllcyk7XG5cdFx0XHR2YXIgcyA9IHRoaXMuY2hhcmdlLnRvRml4ZWQoMCk7XG5cdFx0XHRpZiAocyA9PT0gJzEnKSB7XG5cdFx0XHRcdHMgPSAnKyc7XG5cdFx0XHR9IGVsc2UgaWYgKHMgPT09ICctMScpIHtcblx0XHRcdFx0cyA9ICdcXHUyMDEzJztcblx0XHRcdH0gZWxzZSBpZiAoZXh0ZW5zaW9ucy5zdHJpbmdTdGFydHNXaXRoKHMsICctJykpIHtcblx0XHRcdFx0cyA9IHMuc3Vic3RyaW5nKDEpICsgJ1xcdTIwMTMnO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cyArPSAnKyc7XG5cdFx0XHR9XG5cdFx0XHRjdHguZmlsbFRleHQocywgbWF4WCArIDUsIG1pblkgKyA1KTtcblx0XHR9XG5cdFx0aWYgKHRoaXMubXVsdCAhPT0gMCkge1xuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHNwZWNzLnRleHRfY29sb3I7XG5cdFx0XHRjdHgudGV4dEFsaWduID0gJ3JpZ2h0Jztcblx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblx0XHRcdGN0eC5mb250ID0gZXh0ZW5zaW9ucy5nZXRGb250U3RyaW5nKHNwZWNzLnRleHRfZm9udF9zaXplLCBzcGVjcy50ZXh0X2ZvbnRfZmFtaWxpZXMpO1xuXHRcdFx0Y3R4LmZpbGxUZXh0KHRoaXMubXVsdC50b0ZpeGVkKDApLCBtaW5YIC0gNSwgbWluWSArIGggLyAyKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMucmVwZWF0ICE9PSAwKSB7XG5cdFx0XHRjdHguZmlsbFN0eWxlID0gc3BlY3MudGV4dF9jb2xvcjtcblx0XHRcdGN0eC50ZXh0QWxpZ24gPSAnbGVmdCc7XG5cdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ3RvcCc7XG5cdFx0XHRjdHguZm9udCA9IGV4dGVuc2lvbnMuZ2V0Rm9udFN0cmluZyhzcGVjcy50ZXh0X2ZvbnRfc2l6ZSwgc3BlY3MudGV4dF9mb250X2ZhbWlsaWVzKTtcblx0XHRcdHZhciBzID0gdGhpcy5yZXBlYXQudG9GaXhlZCgwKTtcblx0XHRcdGN0eC5maWxsVGV4dChzLCBtYXhYICsgNSwgbWF4WSAtIDUpO1xuXHRcdH1cblx0fTtcblx0Xy5nZXRQb2ludHMgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gWyB0aGlzLnAxLCB0aGlzLnAyIF07XG5cdH07XG5cdF8uaXNPdmVyID0gZnVuY3Rpb24ocCwgYmFycmllcikge1xuXHRcdHJldHVybiBtYXRoLmlzQmV0d2VlbihwLngsIHRoaXMucDEueCwgdGhpcy5wMi54KSAmJiBtYXRoLmlzQmV0d2VlbihwLnksIHRoaXMucDEueSwgdGhpcy5wMi55KTtcblx0fTtcblxufSkoQ2hlbURvb2RsZS5leHRlbnNpb25zLCBDaGVtRG9vZGxlLm1hdGgsIENoZW1Eb29kbGUuc3RydWN0dXJlcywgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLmQyLCBNYXRoKTtcblxuKGZ1bmN0aW9uKGV4dGVuc2lvbnMsIG1hdGgsIGpzYiwgc3RydWN0dXJlcywgZDIsIG0sIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0ZDIuRHluYW1pY0JyYWNrZXQgPSBmdW5jdGlvbihiMSwgYjIpIHtcblx0XHR0aGlzLmIxID0gYjE7XG5cdFx0dGhpcy5iMiA9IGIyO1xuXHRcdHRoaXMubjEgPSAxO1xuXHRcdHRoaXMubjIgPSA0O1xuXHRcdHRoaXMuY29udGVudHMgPSBbXTtcblx0XHR0aGlzLnBzID0gW107XG5cdH07XG5cdHZhciBfID0gZDIuRHluYW1pY0JyYWNrZXQucHJvdG90eXBlID0gbmV3IGQyLl9TaGFwZSgpO1xuXHRfLmRyYXdEZWNvcmF0aW9ucyA9IGZ1bmN0aW9uKGN0eCwgc3BlY3MpIHtcblx0XHRpZiAodGhpcy5pc0hvdmVyKSB7XG5cdFx0XHRmb3IodmFyIGkgPSAwLCBpaSA9IHRoaXMuY29udGVudHMubGVuZ3RoOyBpPGlpOyBpKyspe1xuXHRcdFx0XHR2YXIgYSA9IHRoaXMuY29udGVudHNbaV07XG5cdFx0XHRcdHZhciBncmQgPSBjdHguY3JlYXRlUmFkaWFsR3JhZGllbnQoYS54IC0gMSwgYS55IC0gMSwgMCwgYS54LCBhLnksIDcpO1xuXHRcdFx0XHRncmQuYWRkQ29sb3JTdG9wKDAsICdyZ2JhKDIxMiwgOTksIDAsIDApJyk7XG5cdFx0XHRcdGdyZC5hZGRDb2xvclN0b3AoMC43LCAncmdiYSgyMTIsIDk5LCAwLCAwLjgpJyk7XG5cdFx0XHRcdGN0eC5maWxsU3R5bGUgPSBncmQ7XG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0Y3R4LmFyYyhhLngsIGEueSwgNSwgMCwgbS5QSSAqIDIsIGZhbHNlKTtcblx0XHRcdFx0Y3R4LmZpbGwoKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHZhciBkcmF3RW5kID0gZnVuY3Rpb24oY3R4LCBzcGVjcywgYiwgYjIsIGNvbnRlbnRzKSB7XG5cdFx0dmFyIHBzID0gW107XG5cdFx0dmFyIHN0cmV0Y2ggPSAxMDtcblx0XHR2YXIgYXJtID0gNDtcblx0XHR2YXIgYSA9IGNvbnRlbnRzLmxlbmd0aD4wPyhjb250ZW50cy5pbmRleE9mKGIuYTEpPT09LTE/Yi5hMjpiLmExKTooYi5hMS5kaXN0YW5jZShiMi5nZXRDZW50ZXIoKSk8Yi5hMi5kaXN0YW5jZShiMi5nZXRDZW50ZXIoKSk/Yi5hMTpiLmEyKTtcblx0XHR2YXIgYW5nbGUgPSBhLmFuZ2xlKGIuZ2V0TmVpZ2hib3IoYSkpO1xuXHRcdHZhciBwZXJwID0gYW5nbGUrbS5QSS8yO1xuXHRcdHZhciBsZW5ndGggPSBiLmdldExlbmd0aCgpLyhjb250ZW50cy5sZW5ndGg+MT80OjIpO1xuXHRcdHZhciBwc3ggPSBhLngrbGVuZ3RoKm0uY29zKGFuZ2xlKTtcblx0XHR2YXIgcHN5ID0gYS55LWxlbmd0aCptLnNpbihhbmdsZSk7XG5cdFx0dmFyIHNjb3MgPSBzdHJldGNoKm0uY29zKHBlcnApO1xuXHRcdHZhciBzc2luID0gc3RyZXRjaCptLnNpbihwZXJwKTtcblx0XHR2YXIgcDF4ID0gcHN4K3Njb3M7XG5cdFx0dmFyIHAxeSA9IHBzeS1zc2luO1xuXHRcdHZhciBwMnggPSBwc3gtc2Nvcztcblx0XHR2YXIgcDJ5ID0gcHN5K3NzaW47XG5cdFx0dmFyIGFjb3MgPSAtYXJtKm0uY29zKGFuZ2xlKTtcblx0XHR2YXIgYXNpbiA9IC1hcm0qbS5zaW4oYW5nbGUpO1xuXHRcdHZhciBwMWF4ID0gcDF4K2Fjb3M7XG5cdFx0dmFyIHAxYXkgPSBwMXktYXNpbjtcblx0XHR2YXIgcDJheCA9IHAyeCthY29zO1xuXHRcdHZhciBwMmF5ID0gcDJ5LWFzaW47XG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdGN0eC5tb3ZlVG8ocDFheCwgcDFheSk7XG5cdFx0Y3R4LmxpbmVUbyhwMXgsIHAxeSk7XG5cdFx0Y3R4LmxpbmVUbyhwMngsIHAyeSk7XG5cdFx0Y3R4LmxpbmVUbyhwMmF4LCBwMmF5KTtcblx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0cHMucHVzaChuZXcgc3RydWN0dXJlcy5Qb2ludChwMXgsIHAxeSkpO1xuXHRcdHBzLnB1c2gobmV3IHN0cnVjdHVyZXMuUG9pbnQocDJ4LCBwMnkpKTtcblx0XHRyZXR1cm4gcHM7XG5cdH07XG5cdF8uZHJhdyA9IGZ1bmN0aW9uKGN0eCwgc3BlY3MpIHtcblx0XHRpZiAodGhpcy5iMSAmJiB0aGlzLmIyKSB7XG5cdFx0XHR2YXIgY29sb3IgPSB0aGlzLmVycm9yP3NwZWNzLmNvbG9yRXJyb3I6c3BlY3Muc2hhcGVzX2NvbG9yO1xuXHRcdFx0aWYgKHRoaXMuaXNIb3ZlciB8fCB0aGlzLmlzU2VsZWN0ZWQpIHtcblx0XHRcdFx0Y29sb3IgPSB0aGlzLmlzSG92ZXIgPyBzcGVjcy5jb2xvckhvdmVyIDogc3BlY3MuY29sb3JTZWxlY3Q7XG5cdFx0XHR9XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSBjb2xvcjtcblx0XHRcdGN0eC5maWxsU3R5bGUgPSBjdHguc3Ryb2tlU3R5bGU7XG5cdFx0XHRjdHgubGluZVdpZHRoID0gc3BlY3Muc2hhcGVzX2xpbmVXaWR0aDtcblx0XHRcdGN0eC5saW5lSm9pbiA9ICdtaXRlcic7XG5cdFx0XHRjdHgubGluZUNhcCA9ICdidXR0Jztcblx0XHRcdHZhciBwczEgPSBkcmF3RW5kKGN0eCwgc3BlY3MsIHRoaXMuYjEsIHRoaXMuYjIsIHRoaXMuY29udGVudHMpO1xuXHRcdFx0dmFyIHBzMiA9IGRyYXdFbmQoY3R4LCBzcGVjcywgdGhpcy5iMiwgdGhpcy5iMSwgdGhpcy5jb250ZW50cyk7XG5cdFx0XHR0aGlzLnBzID0gcHMxLmNvbmNhdChwczIpO1xuXHRcdFx0aWYodGhpcy5iMS5nZXRDZW50ZXIoKS54PnRoaXMuYjIuZ2V0Q2VudGVyKCkueCl7XG5cdFx0XHRcdGlmKHRoaXMucHNbMF0ueD50aGlzLnBzWzFdLngrNSl7XG5cdFx0XHRcdFx0dGhpcy50ZXh0UG9zID0gdGhpcy5wc1swXTtcblx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0dGhpcy50ZXh0UG9zID0gdGhpcy5wc1sxXTtcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdGlmKHRoaXMucHNbMl0ueD50aGlzLnBzWzNdLngrNSl7XG5cdFx0XHRcdFx0dGhpcy50ZXh0UG9zID0gdGhpcy5wc1syXTtcblx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0dGhpcy50ZXh0UG9zID0gdGhpcy5wc1szXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYoIXRoaXMuZXJyb3IgJiYgdGhpcy5jb250ZW50cy5sZW5ndGg+MCl7XG5cdFx0XHRcdGN0eC5mb250ID0gZXh0ZW5zaW9ucy5nZXRGb250U3RyaW5nKHNwZWNzLnRleHRfZm9udF9zaXplLCBzcGVjcy50ZXh0X2ZvbnRfZmFtaWxpZXMsIHNwZWNzLnRleHRfZm9udF9ib2xkLCBzcGVjcy50ZXh0X2ZvbnRfaXRhbGljKTtcblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRoaXMuaXNIb3Zlcj9zcGVjcy5jb2xvckhvdmVyOnNwZWNzLnRleHRfY29sb3I7XG5cdFx0XHRcdGN0eC50ZXh0QWxpZ24gPSAnbGVmdCc7XG5cdFx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnYm90dG9tJztcblx0XHRcdFx0Y3R4LmZpbGxUZXh0KHRoaXMubjErJy0nK3RoaXMubjIsIHRoaXMudGV4dFBvcy54KzIsIHRoaXMudGV4dFBvcy55KzIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0Xy5nZXRQb2ludHMgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcztcblx0fTtcblx0Xy5pc092ZXIgPSBmdW5jdGlvbihwLCBiYXJyaWVyKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXHRfLnNldENvbnRlbnRzID0gZnVuY3Rpb24oc2tldGNoZXIpe1xuXHRcdHRoaXMuY29udGVudHMgPSBbXTtcblx0XHR2YXIgbTEgPSBza2V0Y2hlci5nZXRNb2xlY3VsZUJ5QXRvbSh0aGlzLmIxLmExKTtcblx0XHR2YXIgbTIgPSBza2V0Y2hlci5nZXRNb2xlY3VsZUJ5QXRvbSh0aGlzLmIyLmExKTtcblx0XHQvLyBtYWtlIHN1cmUgYm90aCBiMSBhbmQgYjIgYXJlIHBhcnQgb2YgdGhlIHNhbWUgbW9sZWN1bGVcblx0XHRpZihtMSAmJiBtMT09PW0yKXtcblx0XHRcdC8vIGlmIGVpdGhlciBiMSBvciBiMiBpcyBpbiBhIHJpbmcsIHRoZW4gc3RvcCwgYXMgdGhpcyBpcyBhIHZpb2xhdGlvblxuXHRcdFx0Ly8gdW5sZXNzIGIxIGFuZCBiMiBhcmUgcGFydCBvZiB0aGUgc2FtZSByaW5nIGFuZCBhcmUgcGFydCBvZiBubyBvdGhlciByaW5nc1xuXHRcdFx0dmFyIGMxID0gMDtcblx0XHRcdHZhciBjMiA9IDA7XG5cdFx0XHRmb3IodmFyIGkgPSAwLCBpaSA9IG0xLnJpbmdzLmxlbmd0aDsgaTxpaTsgaSsrKXtcblx0XHRcdFx0dmFyIHIgPSBtMS5yaW5nc1tpXTtcblx0XHRcdFx0Zm9yKHZhciBqID0gMCwgamogPSByLmJvbmRzLmxlbmd0aDsgajxqajsgaisrKXtcblx0XHRcdFx0XHR2YXIgcmIgPSByLmJvbmRzW2pdO1xuXHRcdFx0XHRcdGlmKHJiPT09dGhpcy5iMSl7XG5cdFx0XHRcdFx0XHRjMSsrO1xuXHRcdFx0XHRcdH1lbHNlIGlmKHJiPT09dGhpcy5iMil7XG5cdFx0XHRcdFx0XHRjMisrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dmFyIHNhbWVTaW5nbGVSaW5nID0gYzE9PT0xICYmIGMyPT09MSAmJiB0aGlzLmIxLnJpbmc9PT10aGlzLmIyLnJpbmc7XG5cdFx0XHR0aGlzLmNvbnRlbnRzLmZsaXBwYWJsZSA9IHNhbWVTaW5nbGVSaW5nO1xuXHRcdFx0aWYodGhpcy5iMS5yaW5nPT09dW5kZWZpbmVkICYmIHRoaXMuYjIucmluZz09PXVuZGVmaW5lZCB8fCBzYW1lU2luZ2xlUmluZyl7XG5cdFx0XHRcdGZvcih2YXIgaSA9IDAsIGlpID0gbTEuYXRvbXMubGVuZ3RoOyBpPGlpOyBpKyspe1xuXHRcdFx0XHRcdHZhciByZWFjaGVkMSA9IGZhbHNlOyBcblx0XHRcdFx0XHR2YXIgcmVhY2hlZDIgPSBmYWxzZTtcblx0XHRcdFx0XHR2YXIgcmVhY2hlZElubmVyID0gZmFsc2U7XG5cdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDAsIGpqID0gbTEuYm9uZHMubGVuZ3RoOyBqPGpqOyBqKyspIHtcblx0XHRcdFx0XHRcdG0xLmJvbmRzW2pdLnZpc2l0ZWQgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFyIHEgPSBuZXcgc3RydWN0dXJlcy5RdWV1ZSgpO1xuXHRcdFx0XHRcdHZhciBhID0gbTEuYXRvbXNbaV07XG5cdFx0XHRcdFx0cS5lbnF1ZXVlKGEpO1xuXHRcdFx0XHRcdHdoaWxlICghcS5pc0VtcHR5KCkgJiYgIShyZWFjaGVkMSAmJiByZWFjaGVkMikpIHtcblx0XHRcdFx0XHRcdHZhciBjaGVjayA9IHEuZGVxdWV1ZSgpO1xuXHRcdFx0XHRcdFx0aWYoc2FtZVNpbmdsZVJpbmcgJiYgKCF0aGlzLmZsaXAgJiYgY2hlY2s9PT10aGlzLmIxLmExIHx8IHRoaXMuZmxpcCAmJiBjaGVjaz09PXRoaXMuYjEuYTIpKXtcblx0XHRcdFx0XHRcdFx0cmVhY2hlZElubmVyID0gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGZvciAodmFyIGogPSAwLCBqaiA9IG0xLmJvbmRzLmxlbmd0aDsgajxqajsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBiID0gbTEuYm9uZHNbal07XG5cdFx0XHRcdFx0XHRcdGlmKGIuYTE9PT1jaGVjayB8fCBiLmEyPT09Y2hlY2spe1xuXHRcdFx0XHRcdFx0XHRcdGlmIChiID09PSB0aGlzLmIxKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZWFjaGVkMSA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChiID09PSB0aGlzLmIyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZWFjaGVkMiA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICghYi52aXNpdGVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRiLnZpc2l0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdFx0cS5lbnF1ZXVlKGIuZ2V0TmVpZ2hib3IoY2hlY2spKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYocmVhY2hlZDEgJiYgcmVhY2hlZDIgJiYgKCFzYW1lU2luZ2xlUmluZyB8fCByZWFjaGVkSW5uZXIpKXtcblx0XHRcdFx0XHRcdHRoaXMuY29udGVudHMucHVzaChhKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuZXh0ZW5zaW9ucywgQ2hlbURvb2RsZS5tYXRoLCBDaGVtRG9vZGxlLmxpYi5qc0JlemllciwgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDIsIE1hdGgpO1xuXG4oZnVuY3Rpb24oZXh0ZW5zaW9ucywgbWF0aCwgc3RydWN0dXJlcywgZDIsIG0sIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQyLkxpbmUgPSBmdW5jdGlvbihwMSwgcDIpIHtcblx0XHR0aGlzLnAxID0gcDEgPyBwMSA6IG5ldyBzdHJ1Y3R1cmVzLlBvaW50KCk7XG5cdFx0dGhpcy5wMiA9IHAyID8gcDIgOiBuZXcgc3RydWN0dXJlcy5Qb2ludCgpO1xuXHR9O1xuXHRkMi5MaW5lLkFSUk9XX1NZTlRIRVRJQyA9ICdzeW50aGV0aWMnO1xuXHRkMi5MaW5lLkFSUk9XX1JFVFJPU1lOVEhFVElDID0gJ3JldHJvc3ludGhldGljJztcblx0ZDIuTGluZS5BUlJPV19SRVNPTkFOQ0UgPSAncmVzb25hbmNlJztcblx0ZDIuTGluZS5BUlJPV19FUVVJTElCUklVTSA9ICdlcXVpbGlicml1bSc7XG5cdHZhciBfID0gZDIuTGluZS5wcm90b3R5cGUgPSBuZXcgZDIuX1NoYXBlKCk7XG5cdF8uYXJyb3dUeXBlID0gdW5kZWZpbmVkO1xuXHRfLnRvcFRleHQgPSB1bmRlZmluZWQ7XG5cdF8uYm90dG9tVGV4dCA9IHVuZGVmaW5lZDtcblx0Xy5kcmF3ID0gZnVuY3Rpb24oY3R4LCBzcGVjcykge1xuXHRcdGlmICh0aGlzLmlzTGFzc29lZCkge1xuXHRcdFx0dmFyIGdyZCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCh0aGlzLnAxLngsIHRoaXMucDEueSwgdGhpcy5wMi54LCB0aGlzLnAyLnkpO1xuXHRcdFx0Z3JkLmFkZENvbG9yU3RvcCgwLCAncmdiYSgyMTIsIDk5LCAwLCAwKScpO1xuXHRcdFx0Z3JkLmFkZENvbG9yU3RvcCgwLjUsICdyZ2JhKDIxMiwgOTksIDAsIDAuOCknKTtcblx0XHRcdGdyZC5hZGRDb2xvclN0b3AoMSwgJ3JnYmEoMjEyLCA5OSwgMCwgMCknKTtcblx0XHRcdHZhciB1c2VEaXN0ID0gMi41O1xuXHRcdFx0dmFyIHBlcnBlbmRpY3VsYXIgPSB0aGlzLnAxLmFuZ2xlKHRoaXMucDIpICsgbS5QSSAvIDI7XG5cdFx0XHR2YXIgbWNvc3AgPSBtLmNvcyhwZXJwZW5kaWN1bGFyKTtcblx0XHRcdHZhciBtc2lucCA9IG0uc2luKHBlcnBlbmRpY3VsYXIpO1xuXHRcdFx0dmFyIGN4MSA9IHRoaXMucDEueCAtIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdHZhciBjeTEgPSB0aGlzLnAxLnkgKyBtc2lucCAqIHVzZURpc3Q7XG5cdFx0XHR2YXIgY3gyID0gdGhpcy5wMS54ICsgbWNvc3AgKiB1c2VEaXN0O1xuXHRcdFx0dmFyIGN5MiA9IHRoaXMucDEueSAtIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdHZhciBjeDMgPSB0aGlzLnAyLnggKyBtY29zcCAqIHVzZURpc3Q7XG5cdFx0XHR2YXIgY3kzID0gdGhpcy5wMi55IC0gbXNpbnAgKiB1c2VEaXN0O1xuXHRcdFx0dmFyIGN4NCA9IHRoaXMucDIueCAtIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdHZhciBjeTQgPSB0aGlzLnAyLnkgKyBtc2lucCAqIHVzZURpc3Q7XG5cdFx0XHRjdHguZmlsbFN0eWxlID0gZ3JkO1xuXHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0Y3R4Lm1vdmVUbyhjeDEsIGN5MSk7XG5cdFx0XHRjdHgubGluZVRvKGN4MiwgY3kyKTtcblx0XHRcdGN0eC5saW5lVG8oY3gzLCBjeTMpO1xuXHRcdFx0Y3R4LmxpbmVUbyhjeDQsIGN5NCk7XG5cdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRjdHguZmlsbCgpO1xuXHRcdH1cblx0XHRjdHguc3Ryb2tlU3R5bGUgPSBzcGVjcy5zaGFwZXNfY29sb3I7XG5cdFx0Y3R4LmZpbGxTdHlsZSA9IHNwZWNzLnNoYXBlc19jb2xvcjtcblx0XHRjdHgubGluZVdpZHRoID0gc3BlY3Muc2hhcGVzX2xpbmVXaWR0aDtcblx0XHRjdHgubGluZUpvaW4gPSAnbWl0ZXInO1xuXHRcdGN0eC5saW5lQ2FwID0gJ2J1dHQnO1xuXHRcdGlmICh0aGlzLnAxLnggIT09IHRoaXMucDIueCB8fCB0aGlzLnAxLnkgIT09IHRoaXMucDIueSkge1xuXHRcdFx0Ly8gb25seSByZW5kZXIgaWYgdGhlIHBvaW50cyBhcmUgZGlmZmVyZW50LCBvdGhlcndpc2UgdGhpcyB3aWxsXG5cdFx0XHQvLyBjYXVzZSBmaWxsIG92ZXJmbG93c1xuXHRcdFx0aWYgKHRoaXMuYXJyb3dUeXBlID09PSBkMi5MaW5lLkFSUk9XX1JFVFJPU1lOVEhFVElDKSB7XG5cdFx0XHRcdHZhciByMiA9IG0uc3FydCgyKSAqIDI7XG5cdFx0XHRcdHZhciB1c2VEaXN0ID0gc3BlY3Muc2hhcGVzX2Fycm93TGVuZ3RoXzJEIC8gcjI7XG5cdFx0XHRcdHZhciBhbmdsZSA9IHRoaXMucDEuYW5nbGUodGhpcy5wMik7XG5cdFx0XHRcdHZhciBwZXJwZW5kaWN1bGFyID0gYW5nbGUgKyBtLlBJIC8gMjtcblx0XHRcdFx0dmFyIHJldHJhY3QgPSBzcGVjcy5zaGFwZXNfYXJyb3dMZW5ndGhfMkQgLyByMjtcblx0XHRcdFx0dmFyIG1jb3NhID0gbS5jb3MoYW5nbGUpO1xuXHRcdFx0XHR2YXIgbXNpbmEgPSBtLnNpbihhbmdsZSk7XG5cdFx0XHRcdHZhciBtY29zcCA9IG0uY29zKHBlcnBlbmRpY3VsYXIpO1xuXHRcdFx0XHR2YXIgbXNpbnAgPSBtLnNpbihwZXJwZW5kaWN1bGFyKTtcblx0XHRcdFx0dmFyIGN4MSA9IHRoaXMucDEueCAtIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdFx0dmFyIGN5MSA9IHRoaXMucDEueSArIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdFx0dmFyIGN4MiA9IHRoaXMucDEueCArIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdFx0dmFyIGN5MiA9IHRoaXMucDEueSAtIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdFx0dmFyIGN4MyA9IHRoaXMucDIueCArIG1jb3NwICogdXNlRGlzdCAtIG1jb3NhICogcmV0cmFjdDtcblx0XHRcdFx0dmFyIGN5MyA9IHRoaXMucDIueSAtIG1zaW5wICogdXNlRGlzdCArIG1zaW5hICogcmV0cmFjdDtcblx0XHRcdFx0dmFyIGN4NCA9IHRoaXMucDIueCAtIG1jb3NwICogdXNlRGlzdCAtIG1jb3NhICogcmV0cmFjdDtcblx0XHRcdFx0dmFyIGN5NCA9IHRoaXMucDIueSArIG1zaW5wICogdXNlRGlzdCArIG1zaW5hICogcmV0cmFjdDtcblx0XHRcdFx0dmFyIGF4MSA9IHRoaXMucDIueCArIG1jb3NwICogdXNlRGlzdCAqIDIgLSBtY29zYSAqIHJldHJhY3QgKiAyO1xuXHRcdFx0XHR2YXIgYXkxID0gdGhpcy5wMi55IC0gbXNpbnAgKiB1c2VEaXN0ICogMiArIG1zaW5hICogcmV0cmFjdCAqIDI7XG5cdFx0XHRcdHZhciBheDIgPSB0aGlzLnAyLnggLSBtY29zcCAqIHVzZURpc3QgKiAyIC0gbWNvc2EgKiByZXRyYWN0ICogMjtcblx0XHRcdFx0dmFyIGF5MiA9IHRoaXMucDIueSArIG1zaW5wICogdXNlRGlzdCAqIDIgKyBtc2luYSAqIHJldHJhY3QgKiAyO1xuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdGN0eC5tb3ZlVG8oY3gyLCBjeTIpO1xuXHRcdFx0XHRjdHgubGluZVRvKGN4MywgY3kzKTtcblx0XHRcdFx0Y3R4Lm1vdmVUbyhheDEsIGF5MSk7XG5cdFx0XHRcdGN0eC5saW5lVG8odGhpcy5wMi54LCB0aGlzLnAyLnkpO1xuXHRcdFx0XHRjdHgubGluZVRvKGF4MiwgYXkyKTtcblx0XHRcdFx0Y3R4Lm1vdmVUbyhjeDQsIGN5NCk7XG5cdFx0XHRcdGN0eC5saW5lVG8oY3gxLCBjeTEpO1xuXHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMuYXJyb3dUeXBlID09PSBkMi5MaW5lLkFSUk9XX0VRVUlMSUJSSVVNKSB7XG5cdFx0XHRcdHZhciByMiA9IG0uc3FydCgyKSAqIDI7XG5cdFx0XHRcdHZhciB1c2VEaXN0ID0gc3BlY3Muc2hhcGVzX2Fycm93TGVuZ3RoXzJEIC8gcjIgLyAyO1xuXHRcdFx0XHR2YXIgYW5nbGUgPSB0aGlzLnAxLmFuZ2xlKHRoaXMucDIpO1xuXHRcdFx0XHR2YXIgcGVycGVuZGljdWxhciA9IGFuZ2xlICsgbS5QSSAvIDI7XG5cdFx0XHRcdHZhciByZXRyYWN0ID0gc3BlY3Muc2hhcGVzX2Fycm93TGVuZ3RoXzJEICogMiAvIG0uc3FydCgzKTtcblx0XHRcdFx0dmFyIG1jb3NhID0gbS5jb3MoYW5nbGUpO1xuXHRcdFx0XHR2YXIgbXNpbmEgPSBtLnNpbihhbmdsZSk7XG5cdFx0XHRcdHZhciBtY29zcCA9IG0uY29zKHBlcnBlbmRpY3VsYXIpO1xuXHRcdFx0XHR2YXIgbXNpbnAgPSBtLnNpbihwZXJwZW5kaWN1bGFyKTtcblx0XHRcdFx0dmFyIGN4MSA9IHRoaXMucDEueCAtIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdFx0dmFyIGN5MSA9IHRoaXMucDEueSArIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdFx0dmFyIGN4MiA9IHRoaXMucDEueCArIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdFx0dmFyIGN5MiA9IHRoaXMucDEueSAtIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdFx0dmFyIGN4MyA9IHRoaXMucDIueCArIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdFx0dmFyIGN5MyA9IHRoaXMucDIueSAtIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdFx0dmFyIGN4NCA9IHRoaXMucDIueCAtIG1jb3NwICogdXNlRGlzdDtcblx0XHRcdFx0dmFyIGN5NCA9IHRoaXMucDIueSArIG1zaW5wICogdXNlRGlzdDtcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRjdHgubW92ZVRvKGN4MiwgY3kyKTtcblx0XHRcdFx0Y3R4LmxpbmVUbyhjeDMsIGN5Myk7XG5cdFx0XHRcdGN0eC5tb3ZlVG8oY3g0LCBjeTQpO1xuXHRcdFx0XHRjdHgubGluZVRvKGN4MSwgY3kxKTtcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHQvLyByaWdodCBhcnJvd1xuXHRcdFx0XHR2YXIgcngxID0gY3gzIC0gbWNvc2EgKiByZXRyYWN0ICogLjg7XG5cdFx0XHRcdHZhciByeTEgPSBjeTMgKyBtc2luYSAqIHJldHJhY3QgKiAuODtcblx0XHRcdFx0dmFyIGF4MSA9IGN4MyArIG1jb3NwICogc3BlY3Muc2hhcGVzX2Fycm93TGVuZ3RoXzJEIC8gMyAtIG1jb3NhICogcmV0cmFjdDtcblx0XHRcdFx0dmFyIGF5MSA9IGN5MyAtIG1zaW5wICogc3BlY3Muc2hhcGVzX2Fycm93TGVuZ3RoXzJEIC8gMyArIG1zaW5hICogcmV0cmFjdDtcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRjdHgubW92ZVRvKGN4MywgY3kzKTtcblx0XHRcdFx0Y3R4LmxpbmVUbyhheDEsIGF5MSk7XG5cdFx0XHRcdGN0eC5saW5lVG8ocngxLCByeTEpO1xuXHRcdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRcdGN0eC5maWxsKCk7XG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdFx0Ly8gbGVmdCBhcnJvd1xuXHRcdFx0XHRyeDEgPSBjeDEgKyBtY29zYSAqIHJldHJhY3QgKiAuODtcblx0XHRcdFx0cnkxID0gY3kxIC0gbXNpbmEgKiByZXRyYWN0ICogLjg7XG5cdFx0XHRcdGF4MSA9IGN4MSAtIG1jb3NwICogc3BlY3Muc2hhcGVzX2Fycm93TGVuZ3RoXzJEIC8gMyArIG1jb3NhICogcmV0cmFjdDtcblx0XHRcdFx0YXkxID0gY3kxICsgbXNpbnAgKiBzcGVjcy5zaGFwZXNfYXJyb3dMZW5ndGhfMkQgLyAzIC0gbXNpbmEgKiByZXRyYWN0O1xuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdGN0eC5tb3ZlVG8oY3gxLCBjeTEpO1xuXHRcdFx0XHRjdHgubGluZVRvKGF4MSwgYXkxKTtcblx0XHRcdFx0Y3R4LmxpbmVUbyhyeDEsIHJ5MSk7XG5cdFx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdFx0Y3R4LmZpbGwoKTtcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLmFycm93VHlwZSA9PT0gZDIuTGluZS5BUlJPV19TWU5USEVUSUMpIHtcblx0XHRcdFx0dmFyIGFuZ2xlID0gdGhpcy5wMS5hbmdsZSh0aGlzLnAyKTtcblx0XHRcdFx0dmFyIHBlcnBlbmRpY3VsYXIgPSBhbmdsZSArIG0uUEkgLyAyO1xuXHRcdFx0XHR2YXIgcmV0cmFjdCA9IHNwZWNzLnNoYXBlc19hcnJvd0xlbmd0aF8yRCAqIDIgLyBtLnNxcnQoMyk7XG5cdFx0XHRcdHZhciBtY29zYSA9IG0uY29zKGFuZ2xlKTtcblx0XHRcdFx0dmFyIG1zaW5hID0gbS5zaW4oYW5nbGUpO1xuXHRcdFx0XHR2YXIgbWNvc3AgPSBtLmNvcyhwZXJwZW5kaWN1bGFyKTtcblx0XHRcdFx0dmFyIG1zaW5wID0gbS5zaW4ocGVycGVuZGljdWxhcik7XG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0Y3R4Lm1vdmVUbyh0aGlzLnAxLngsIHRoaXMucDEueSk7XG5cdFx0XHRcdGN0eC5saW5lVG8odGhpcy5wMi54IC0gbWNvc2EgKiByZXRyYWN0IC8gMiwgdGhpcy5wMi55ICsgbXNpbmEgKiByZXRyYWN0IC8gMik7XG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdFx0dmFyIHJ4MSA9IHRoaXMucDIueCAtIG1jb3NhICogcmV0cmFjdCAqIC44O1xuXHRcdFx0XHR2YXIgcnkxID0gdGhpcy5wMi55ICsgbXNpbmEgKiByZXRyYWN0ICogLjg7XG5cdFx0XHRcdHZhciBheDEgPSB0aGlzLnAyLnggKyBtY29zcCAqIHNwZWNzLnNoYXBlc19hcnJvd0xlbmd0aF8yRCAvIDMgLSBtY29zYSAqIHJldHJhY3Q7XG5cdFx0XHRcdHZhciBheTEgPSB0aGlzLnAyLnkgLSBtc2lucCAqIHNwZWNzLnNoYXBlc19hcnJvd0xlbmd0aF8yRCAvIDMgKyBtc2luYSAqIHJldHJhY3Q7XG5cdFx0XHRcdHZhciBheDIgPSB0aGlzLnAyLnggLSBtY29zcCAqIHNwZWNzLnNoYXBlc19hcnJvd0xlbmd0aF8yRCAvIDMgLSBtY29zYSAqIHJldHJhY3Q7XG5cdFx0XHRcdHZhciBheTIgPSB0aGlzLnAyLnkgKyBtc2lucCAqIHNwZWNzLnNoYXBlc19hcnJvd0xlbmd0aF8yRCAvIDMgKyBtc2luYSAqIHJldHJhY3Q7XG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0Y3R4Lm1vdmVUbyh0aGlzLnAyLngsIHRoaXMucDIueSk7XG5cdFx0XHRcdGN0eC5saW5lVG8oYXgyLCBheTIpO1xuXHRcdFx0XHRjdHgubGluZVRvKHJ4MSwgcnkxKTtcblx0XHRcdFx0Y3R4LmxpbmVUbyhheDEsIGF5MSk7XG5cdFx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdFx0Y3R4LmZpbGwoKTtcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLmFycm93VHlwZSA9PT0gZDIuTGluZS5BUlJPV19SRVNPTkFOQ0UpIHtcblx0XHRcdFx0dmFyIGFuZ2xlID0gdGhpcy5wMS5hbmdsZSh0aGlzLnAyKTtcblx0XHRcdFx0dmFyIHBlcnBlbmRpY3VsYXIgPSBhbmdsZSArIG0uUEkgLyAyO1xuXHRcdFx0XHR2YXIgcmV0cmFjdCA9IHNwZWNzLnNoYXBlc19hcnJvd0xlbmd0aF8yRCAqIDIgLyBtLnNxcnQoMyk7XG5cdFx0XHRcdHZhciBtY29zYSA9IG0uY29zKGFuZ2xlKTtcblx0XHRcdFx0dmFyIG1zaW5hID0gbS5zaW4oYW5nbGUpO1xuXHRcdFx0XHR2YXIgbWNvc3AgPSBtLmNvcyhwZXJwZW5kaWN1bGFyKTtcblx0XHRcdFx0dmFyIG1zaW5wID0gbS5zaW4ocGVycGVuZGljdWxhcik7XG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0Y3R4Lm1vdmVUbyh0aGlzLnAxLnggKyBtY29zYSAqIHJldHJhY3QgLyAyLCB0aGlzLnAxLnkgLSBtc2luYSAqIHJldHJhY3QgLyAyKTtcblx0XHRcdFx0Y3R4LmxpbmVUbyh0aGlzLnAyLnggLSBtY29zYSAqIHJldHJhY3QgLyAyLCB0aGlzLnAyLnkgKyBtc2luYSAqIHJldHJhY3QgLyAyKTtcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHQvLyByaWdodCBhcnJvd1xuXHRcdFx0XHR2YXIgcngxID0gdGhpcy5wMi54IC0gbWNvc2EgKiByZXRyYWN0ICogLjg7XG5cdFx0XHRcdHZhciByeTEgPSB0aGlzLnAyLnkgKyBtc2luYSAqIHJldHJhY3QgKiAuODtcblx0XHRcdFx0dmFyIGF4MSA9IHRoaXMucDIueCArIG1jb3NwICogc3BlY3Muc2hhcGVzX2Fycm93TGVuZ3RoXzJEIC8gMyAtIG1jb3NhICogcmV0cmFjdDtcblx0XHRcdFx0dmFyIGF5MSA9IHRoaXMucDIueSAtIG1zaW5wICogc3BlY3Muc2hhcGVzX2Fycm93TGVuZ3RoXzJEIC8gMyArIG1zaW5hICogcmV0cmFjdDtcblx0XHRcdFx0dmFyIGF4MiA9IHRoaXMucDIueCAtIG1jb3NwICogc3BlY3Muc2hhcGVzX2Fycm93TGVuZ3RoXzJEIC8gMyAtIG1jb3NhICogcmV0cmFjdDtcblx0XHRcdFx0dmFyIGF5MiA9IHRoaXMucDIueSArIG1zaW5wICogc3BlY3Muc2hhcGVzX2Fycm93TGVuZ3RoXzJEIC8gMyArIG1zaW5hICogcmV0cmFjdDtcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRjdHgubW92ZVRvKHRoaXMucDIueCwgdGhpcy5wMi55KTtcblx0XHRcdFx0Y3R4LmxpbmVUbyhheDIsIGF5Mik7XG5cdFx0XHRcdGN0eC5saW5lVG8ocngxLCByeTEpO1xuXHRcdFx0XHRjdHgubGluZVRvKGF4MSwgYXkxKTtcblx0XHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0XHRjdHguZmlsbCgpO1xuXHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHRcdC8vIGxlZnQgYXJyb3dcblx0XHRcdFx0cngxID0gdGhpcy5wMS54ICsgbWNvc2EgKiByZXRyYWN0ICogLjg7XG5cdFx0XHRcdHJ5MSA9IHRoaXMucDEueSAtIG1zaW5hICogcmV0cmFjdCAqIC44O1xuXHRcdFx0XHRheDEgPSB0aGlzLnAxLnggLSBtY29zcCAqIHNwZWNzLnNoYXBlc19hcnJvd0xlbmd0aF8yRCAvIDMgKyBtY29zYSAqIHJldHJhY3Q7XG5cdFx0XHRcdGF5MSA9IHRoaXMucDEueSArIG1zaW5wICogc3BlY3Muc2hhcGVzX2Fycm93TGVuZ3RoXzJEIC8gMyAtIG1zaW5hICogcmV0cmFjdDtcblx0XHRcdFx0YXgyID0gdGhpcy5wMS54ICsgbWNvc3AgKiBzcGVjcy5zaGFwZXNfYXJyb3dMZW5ndGhfMkQgLyAzICsgbWNvc2EgKiByZXRyYWN0O1xuXHRcdFx0XHRheTIgPSB0aGlzLnAxLnkgLSBtc2lucCAqIHNwZWNzLnNoYXBlc19hcnJvd0xlbmd0aF8yRCAvIDMgLSBtc2luYSAqIHJldHJhY3Q7XG5cdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0Y3R4Lm1vdmVUbyh0aGlzLnAxLngsIHRoaXMucDEueSk7XG5cdFx0XHRcdGN0eC5saW5lVG8oYXgyLCBheTIpO1xuXHRcdFx0XHRjdHgubGluZVRvKHJ4MSwgcnkxKTtcblx0XHRcdFx0Y3R4LmxpbmVUbyhheDEsIGF5MSk7XG5cdFx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdFx0Y3R4LmZpbGwoKTtcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRjdHgubW92ZVRvKHRoaXMucDEueCwgdGhpcy5wMS55KTtcblx0XHRcdFx0Y3R4LmxpbmVUbyh0aGlzLnAyLngsIHRoaXMucDIueSk7XG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdH1cblx0XHRcdGlmKHRoaXMudG9wVGV4dCB8fCB0aGlzLmJvdHRvbVRleHQpe1xuXHRcdFx0XHRjdHguZm9udCA9IGV4dGVuc2lvbnMuZ2V0Rm9udFN0cmluZyhzcGVjcy50ZXh0X2ZvbnRfc2l6ZSwgc3BlY3MudGV4dF9mb250X2ZhbWlsaWVzLCBzcGVjcy50ZXh0X2ZvbnRfYm9sZCwgc3BlY3MudGV4dF9mb250X2l0YWxpYyk7XG5cdFx0XHRcdGN0eC5maWxsU3R5bGUgPSBzcGVjcy50ZXh0X2NvbG9yO1xuXHRcdFx0fVxuXHRcdFx0aWYodGhpcy50b3BUZXh0KXtcblx0XHRcdFx0Y3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHRcdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ2JvdHRvbSc7XG5cdFx0XHRcdGN0eC5maWxsVGV4dCh0aGlzLnRvcFRleHQsICh0aGlzLnAxLngrdGhpcy5wMi54KS8yLCB0aGlzLnAxLnktNSk7XG5cdFx0XHR9XG5cdFx0XHRpZih0aGlzLmJvdHRvbVRleHQpe1xuXHRcdFx0XHRjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cdFx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJztcblx0XHRcdFx0Y3R4LmZpbGxUZXh0KHRoaXMuYm90dG9tVGV4dCwgKHRoaXMucDEueCt0aGlzLnAyLngpLzIsIHRoaXMucDEueSs1KTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdF8uZ2V0UG9pbnRzID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIFsgdGhpcy5wMSwgdGhpcy5wMiBdO1xuXHR9O1xuXHRfLmlzT3ZlciA9IGZ1bmN0aW9uKHAsIGJhcnJpZXIpIHtcblx0XHR2YXIgZGlzdCA9IG1hdGguZGlzdGFuY2VGcm9tUG9pbnRUb0xpbmVJbmNsdXNpdmUocCwgdGhpcy5wMSwgdGhpcy5wMik7XG5cdFx0cmV0dXJuIGRpc3QgIT09IC0xICYmIGRpc3QgPCBiYXJyaWVyO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLmV4dGVuc2lvbnMsIENoZW1Eb29kbGUubWF0aCwgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDIsIE1hdGgpO1xuXG4oZnVuY3Rpb24obWF0aCwganNiLCBzdHJ1Y3R1cmVzLCBkMiwgbSwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIGdldFBvc3NpYmxlQW5nbGVzID0gZnVuY3Rpb24obykge1xuXHRcdHZhciBhcyA9IFtdO1xuXHRcdGlmIChvIGluc3RhbmNlb2Ygc3RydWN0dXJlcy5BdG9tKSB7XG5cdFx0XHRpZiAoby5ib25kTnVtYmVyID09PSAwKSB7XG5cdFx0XHRcdGFzLnB1c2gobS5QSSk7XG5cdFx0XHR9IGVsc2UgaWYgKG8uYW5nbGVzKSB7XG5cdFx0XHRcdGlmIChvLmFuZ2xlcy5sZW5ndGggPT09IDEpIHtcblx0XHRcdFx0XHRhcy5wdXNoKG8uYW5nbGVzWzBdICsgbS5QSSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAxLCBpaSA9IG8uYW5nbGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHRcdGFzLnB1c2goby5hbmdsZXNbaSAtIDFdICsgKG8uYW5nbGVzW2ldIC0gby5hbmdsZXNbaSAtIDFdKSAvIDIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2YXIgZmlyc3RJbmNyZWFzZWQgPSBvLmFuZ2xlc1swXSArIG0uUEkgKiAyO1xuXHRcdFx0XHRcdHZhciBsYXN0ID0gby5hbmdsZXNbby5hbmdsZXMubGVuZ3RoIC0gMV07XG5cdFx0XHRcdFx0YXMucHVzaChsYXN0ICsgKGZpcnN0SW5jcmVhc2VkIC0gbGFzdCkgLyAyKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoby5sYXJnZXN0QW5nbGUgPiBtLlBJKSB7XG5cdFx0XHRcdFx0Ly8gYWx3YXlzIHVzZSBhbmdsZSBvZiBsZWFzdCBpbnRlcmZlYXJlbmNlIGlmIGl0IGlzIGdyZWF0ZXJcblx0XHRcdFx0XHQvLyB0aGFuIDEyMFxuXHRcdFx0XHRcdGFzID0gWyBvLmFuZ2xlT2ZMZWFzdEludGVyZmVyZW5jZSBdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChvLmJvbmRzKSB7XG5cdFx0XHRcdFx0Ly8gcG9pbnQgdXAgdG93YXJkcyBhIGNhcmJvbnlsXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IG8uYm9uZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRcdFx0dmFyIGIgPSBvLmJvbmRzW2ldO1xuXHRcdFx0XHRcdFx0aWYgKGIuYm9uZE9yZGVyID09PSAyKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBuID0gYi5nZXROZWlnaGJvcihvKTtcblx0XHRcdFx0XHRcdFx0aWYgKG4ubGFiZWwgPT09ICdPJykge1xuXHRcdFx0XHRcdFx0XHRcdGFzID0gWyBuLmFuZ2xlKG8pIF07XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGFuZ2xlID0gby5hMS5hbmdsZShvLmEyKTtcblx0XHRcdGFzLnB1c2goYW5nbGUgKyBtLlBJIC8gMik7XG5cdFx0XHRhcy5wdXNoKGFuZ2xlICsgMyAqIG0uUEkgLyAyKTtcblx0XHR9XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IGFzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHdoaWxlIChhc1tpXSA+IG0uUEkgKiAyKSB7XG5cdFx0XHRcdGFzW2ldIC09IG0uUEkgKiAyO1xuXHRcdFx0fVxuXHRcdFx0d2hpbGUgKGFzW2ldIDwgMCkge1xuXHRcdFx0XHRhc1tpXSArPSBtLlBJICogMjtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGFzO1xuXHR9O1xuXHR2YXIgZ2V0UHVsbEJhY2sgPSBmdW5jdGlvbihvLCBzcGVjcykge1xuXHRcdHZhciBwdWxsYmFjayA9IDM7XG5cdFx0aWYgKG8gaW5zdGFuY2VvZiBzdHJ1Y3R1cmVzLkF0b20pIHtcblx0XHRcdGlmIChvLmlzTGFiZWxWaXNpYmxlKHNwZWNzKSkge1xuXHRcdFx0XHRwdWxsYmFjayA9IDg7XG5cdFx0XHR9XG5cdFx0XHRpZiAoby5jaGFyZ2UgIT09IDAgfHwgby5udW1SYWRpY2FsICE9PSAwIHx8IG8ubnVtTG9uZVBhaXIgIT09IDApIHtcblx0XHRcdFx0cHVsbGJhY2sgPSAxMztcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKG8gaW5zdGFuY2VvZiBzdHJ1Y3R1cmVzLlBvaW50KSB7XG5cdFx0XHQvLyB0aGlzIGlzIHRoZSBtaWRwb2ludCBvZiBhIGJvbmQgZm9ybWluZyBwdXNoZXJcblx0XHRcdHB1bGxiYWNrID0gMDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKG8uYm9uZE9yZGVyID4gMSkge1xuXHRcdFx0XHRwdWxsYmFjayA9IDU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBwdWxsYmFjaztcblx0fTtcblx0dmFyIGRyYXdQdXNoZXIgPSBmdW5jdGlvbihjdHgsIHNwZWNzLCBvMSwgbzIsIHAxLCBjMSwgYzIsIHAyLCBudW1FbGVjdHJvbiwgY2FjaGVzKSB7XG5cdFx0dmFyIGFuZ2xlMSA9IGMxLmFuZ2xlKHAxKTtcblx0XHR2YXIgYW5nbGUyID0gYzIuYW5nbGUocDIpO1xuXHRcdHZhciBtY29zYSA9IG0uY29zKGFuZ2xlMSk7XG5cdFx0dmFyIG1zaW5hID0gbS5zaW4oYW5nbGUxKTtcblx0XHQvLyBwdWxsIGJhY2sgZnJvbSBzdGFydFxuXHRcdHZhciBwdWxsQmFjayA9IGdldFB1bGxCYWNrKG8xLCBzcGVjcyk7XG5cdFx0cDEueCAtPSBtY29zYSAqIHB1bGxCYWNrO1xuXHRcdHAxLnkgKz0gbXNpbmEgKiBwdWxsQmFjaztcblx0XHQvLyBhcnJvd1xuXHRcdHZhciBwZXJwZW5kaWN1bGFyID0gYW5nbGUyICsgbS5QSSAvIDI7XG5cdFx0dmFyIHJldHJhY3QgPSBzcGVjcy5zaGFwZXNfYXJyb3dMZW5ndGhfMkQgKiAyIC8gbS5zcXJ0KDMpO1xuXHRcdHZhciBtY29zYSA9IG0uY29zKGFuZ2xlMik7XG5cdFx0dmFyIG1zaW5hID0gbS5zaW4oYW5nbGUyKTtcblx0XHR2YXIgbWNvc3AgPSBtLmNvcyhwZXJwZW5kaWN1bGFyKTtcblx0XHR2YXIgbXNpbnAgPSBtLnNpbihwZXJwZW5kaWN1bGFyKTtcblx0XHRwMi54IC09IG1jb3NhICogNTtcblx0XHRwMi55ICs9IG1zaW5hICogNTtcblx0XHR2YXIgbmFwID0gbmV3IHN0cnVjdHVyZXMuUG9pbnQocDIueCwgcDIueSk7XG5cdFx0Ly8gcHVsbCBiYWNrIGZyb20gZW5kXG5cdFx0cHVsbEJhY2sgPSBnZXRQdWxsQmFjayhvMiwgc3BlY3MpIC8gMztcblx0XHRuYXAueCAtPSBtY29zYSAqIHB1bGxCYWNrO1xuXHRcdG5hcC55ICs9IG1zaW5hICogcHVsbEJhY2s7XG5cdFx0cDIueCAtPSBtY29zYSAqIChyZXRyYWN0ICogMC44ICsgcHVsbEJhY2spO1xuXHRcdHAyLnkgKz0gbXNpbmEgKiAocmV0cmFjdCAqIDAuOCArIHB1bGxCYWNrKTtcblx0XHR2YXIgcngxID0gbmFwLnggLSBtY29zYSAqIHJldHJhY3QgKiAwLjg7XG5cdFx0dmFyIHJ5MSA9IG5hcC55ICsgbXNpbmEgKiByZXRyYWN0ICogMC44O1xuXHRcdHZhciBhMSA9IG5ldyBzdHJ1Y3R1cmVzLlBvaW50KG5hcC54ICsgbWNvc3AgKiBzcGVjcy5zaGFwZXNfYXJyb3dMZW5ndGhfMkQgLyAzIC0gbWNvc2EgKiByZXRyYWN0LCBuYXAueSAtIG1zaW5wICogc3BlY3Muc2hhcGVzX2Fycm93TGVuZ3RoXzJEIC8gMyArIG1zaW5hICogcmV0cmFjdCk7XG5cdFx0dmFyIGEyID0gbmV3IHN0cnVjdHVyZXMuUG9pbnQobmFwLnggLSBtY29zcCAqIHNwZWNzLnNoYXBlc19hcnJvd0xlbmd0aF8yRCAvIDMgLSBtY29zYSAqIHJldHJhY3QsIG5hcC55ICsgbXNpbnAgKiBzcGVjcy5zaGFwZXNfYXJyb3dMZW5ndGhfMkQgLyAzICsgbXNpbmEgKiByZXRyYWN0KTtcblx0XHR2YXIgaW5jbHVkZTEgPSB0cnVlLCBpbmNsdWRlMiA9IHRydWU7XG5cdFx0aWYgKG51bUVsZWN0cm9uID09PSAxKSB7XG5cdFx0XHRpZiAoYTEuZGlzdGFuY2UoYzEpID4gYTIuZGlzdGFuY2UoYzEpKSB7XG5cdFx0XHRcdGluY2x1ZGUyID0gZmFsc2U7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpbmNsdWRlMSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0Y3R4Lm1vdmVUbyhuYXAueCwgbmFwLnkpO1xuXHRcdGlmIChpbmNsdWRlMikge1xuXHRcdFx0Y3R4LmxpbmVUbyhhMi54LCBhMi55KTtcblx0XHR9XG5cdFx0Y3R4LmxpbmVUbyhyeDEsIHJ5MSk7XG5cdFx0aWYgKGluY2x1ZGUxKSB7XG5cdFx0XHRjdHgubGluZVRvKGExLngsIGExLnkpO1xuXHRcdH1cblx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0Y3R4LmZpbGwoKTtcblx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0Ly8gYmV6aWVyXG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdGN0eC5tb3ZlVG8ocDEueCwgcDEueSk7XG5cdFx0Y3R4LmJlemllckN1cnZlVG8oYzEueCwgYzEueSwgYzIueCwgYzIueSwgcDIueCwgcDIueSk7XG5cdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdGNhY2hlcy5wdXNoKFsgcDEsIGMxLCBjMiwgcDIgXSk7XG5cdH07XG5cblx0ZDIuUHVzaGVyID0gZnVuY3Rpb24obzEsIG8yLCBudW1FbGVjdHJvbikge1xuXHRcdHRoaXMubzEgPSBvMTtcblx0XHR0aGlzLm8yID0gbzI7XG5cdFx0dGhpcy5udW1FbGVjdHJvbiA9IG51bUVsZWN0cm9uID8gbnVtRWxlY3Ryb24gOiAxO1xuXHR9O1xuXHR2YXIgXyA9IGQyLlB1c2hlci5wcm90b3R5cGUgPSBuZXcgZDIuX1NoYXBlKCk7XG5cdF8uZHJhd0RlY29yYXRpb25zID0gZnVuY3Rpb24oY3R4LCBzcGVjcykge1xuXHRcdGlmICh0aGlzLmlzSG92ZXIpIHtcblx0XHRcdHZhciBwMSA9IHRoaXMubzEgaW5zdGFuY2VvZiBzdHJ1Y3R1cmVzLkF0b20gPyBuZXcgc3RydWN0dXJlcy5Qb2ludCh0aGlzLm8xLngsIHRoaXMubzEueSkgOiB0aGlzLm8xLmdldENlbnRlcigpO1xuXHRcdFx0dmFyIHAyID0gdGhpcy5vMiBpbnN0YW5jZW9mIHN0cnVjdHVyZXMuQXRvbSA/IG5ldyBzdHJ1Y3R1cmVzLlBvaW50KHRoaXMubzIueCwgdGhpcy5vMi55KSA6IHRoaXMubzIuZ2V0Q2VudGVyKCk7XG5cdFx0XHR2YXIgcHMgPSBbIHAxLCBwMiBdO1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHBzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIHAgPSBwc1tpXTtcblx0XHRcdFx0dGhpcy5kcmF3QW5jaG9yKGN0eCwgc3BlY3MsIHAsIHAgPT09IHRoaXMuaG92ZXJQb2ludCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRfLmRyYXcgPSBmdW5jdGlvbihjdHgsIHNwZWNzKSB7XG5cdFx0aWYgKHRoaXMubzEgJiYgdGhpcy5vMikge1xuXHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gc3BlY3Muc2hhcGVzX2NvbG9yO1xuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHNwZWNzLnNoYXBlc19jb2xvcjtcblx0XHRcdGN0eC5saW5lV2lkdGggPSBzcGVjcy5zaGFwZXNfbGluZVdpZHRoO1xuXHRcdFx0Y3R4LmxpbmVKb2luID0gJ21pdGVyJztcblx0XHRcdGN0eC5saW5lQ2FwID0gJ2J1dHQnO1xuXHRcdFx0dmFyIHAxID0gdGhpcy5vMSBpbnN0YW5jZW9mIHN0cnVjdHVyZXMuQXRvbSA/IG5ldyBzdHJ1Y3R1cmVzLlBvaW50KHRoaXMubzEueCwgdGhpcy5vMS55KSA6IHRoaXMubzEuZ2V0Q2VudGVyKCk7XG5cdFx0XHR2YXIgcDIgPSB0aGlzLm8yIGluc3RhbmNlb2Ygc3RydWN0dXJlcy5BdG9tID8gbmV3IHN0cnVjdHVyZXMuUG9pbnQodGhpcy5vMi54LCB0aGlzLm8yLnkpIDogdGhpcy5vMi5nZXRDZW50ZXIoKTtcblx0XHRcdHZhciBjb250cm9sRGlzdCA9IDM1O1xuXHRcdFx0dmFyIGFzMSA9IGdldFBvc3NpYmxlQW5nbGVzKHRoaXMubzEpO1xuXHRcdFx0dmFyIGFzMiA9IGdldFBvc3NpYmxlQW5nbGVzKHRoaXMubzIpO1xuXHRcdFx0dmFyIGMxLCBjMjtcblx0XHRcdHZhciBtaW5EaWYgPSBJbmZpbml0eTtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBhczEubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gYXMyLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgYzFjID0gbmV3IHN0cnVjdHVyZXMuUG9pbnQocDEueCArIGNvbnRyb2xEaXN0ICogbS5jb3MoYXMxW2ldKSwgcDEueSAtIGNvbnRyb2xEaXN0ICogbS5zaW4oYXMxW2ldKSk7XG5cdFx0XHRcdFx0dmFyIGMyYyA9IG5ldyBzdHJ1Y3R1cmVzLlBvaW50KHAyLnggKyBjb250cm9sRGlzdCAqIG0uY29zKGFzMltqXSksIHAyLnkgLSBjb250cm9sRGlzdCAqIG0uc2luKGFzMltqXSkpO1xuXHRcdFx0XHRcdHZhciBkaWYgPSBjMWMuZGlzdGFuY2UoYzJjKTtcblx0XHRcdFx0XHRpZiAoZGlmIDwgbWluRGlmKSB7XG5cdFx0XHRcdFx0XHRtaW5EaWYgPSBkaWY7XG5cdFx0XHRcdFx0XHRjMSA9IGMxYztcblx0XHRcdFx0XHRcdGMyID0gYzJjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5jYWNoZXMgPSBbXTtcblx0XHRcdGlmICh0aGlzLm51bUVsZWN0cm9uID09PSAtMSkge1xuXHRcdFx0XHR2YXIgZGlzdCA9IHAxLmRpc3RhbmNlKHAyKS8yO1xuXHRcdFx0XHR2YXIgYW5nbGUgPSBwMS5hbmdsZShwMik7XG5cdFx0XHRcdHZhciBwZXJwID0gYW5nbGUrbS5QSS8yO1xuXHRcdFx0XHR2YXIgbWNvc2EgPSBtLmNvcyhhbmdsZSk7XG5cdFx0XHRcdHZhciBtc2luYSA9IG0uc2luKGFuZ2xlKTtcblx0XHRcdFx0dmFyIG0xID0gbmV3IHN0cnVjdHVyZXMuUG9pbnQocDEueCsoZGlzdC0xKSptY29zYSwgcDEueS0oZGlzdC0xKSptc2luYSk7XG5cdFx0XHRcdHZhciBjbTEgPSBuZXcgc3RydWN0dXJlcy5Qb2ludChtMS54K20uY29zKHBlcnArbS5QSS82KSpjb250cm9sRGlzdCwgbTEueSAtIG0uc2luKHBlcnArbS5QSS82KSpjb250cm9sRGlzdCk7XG5cdFx0XHRcdHZhciBtMiA9IG5ldyBzdHJ1Y3R1cmVzLlBvaW50KHAxLngrKGRpc3QrMSkqbWNvc2EsIHAxLnktKGRpc3QrMSkqbXNpbmEpO1xuXHRcdFx0XHR2YXIgY20yID0gbmV3IHN0cnVjdHVyZXMuUG9pbnQobTIueCttLmNvcyhwZXJwLW0uUEkvNikqY29udHJvbERpc3QsIG0yLnkgLSBtLnNpbihwZXJwLW0uUEkvNikqY29udHJvbERpc3QpO1xuXHRcdFx0XHRkcmF3UHVzaGVyKGN0eCwgc3BlY3MsIHRoaXMubzEsIG0xLCBwMSwgYzEsIGNtMSwgbTEsIDEsIHRoaXMuY2FjaGVzKTtcblx0XHRcdFx0ZHJhd1B1c2hlcihjdHgsIHNwZWNzLCB0aGlzLm8yLCBtMiwgcDIsIGMyLCBjbTIsIG0yLCAxLCB0aGlzLmNhY2hlcyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAobWF0aC5pbnRlcnNlY3RMaW5lcyhwMS54LCBwMS55LCBjMS54LCBjMS55LCBwMi54LCBwMi55LCBjMi54LCBjMi55KSkge1xuXHRcdFx0XHRcdHZhciB0bXAgPSBjMTtcblx0XHRcdFx0XHRjMSA9IGMyO1xuXHRcdFx0XHRcdGMyID0gdG1wO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIHRyeSB0byBjbGVhbiB1cCBwcm9ibGVtcywgbGlrZSBsb29wc1xuXHRcdFx0XHR2YXIgYW5nbGUxID0gYzEuYW5nbGUocDEpO1xuXHRcdFx0XHR2YXIgYW5nbGUyID0gYzIuYW5nbGUocDIpO1xuXHRcdFx0XHR2YXIgYW5nbGVEaWYgPSAobS5tYXgoYW5nbGUxLCBhbmdsZTIpIC0gbS5taW4oYW5nbGUxLCBhbmdsZTIpKTtcblx0XHRcdFx0aWYgKG0uYWJzKGFuZ2xlRGlmIC0gbS5QSSkgPCAuMDAxICYmIHRoaXMubzEubW9sQ2VudGVyID09PSB0aGlzLm8yLm1vbENlbnRlcikge1xuXHRcdFx0XHRcdC8vIGluIHRoZSBjYXNlIHdoZXJlIHRoZSBjb250cm9sIHRhbmdlbnRzIGFyZSBwYXJhbGxlbFxuXHRcdFx0XHRcdGFuZ2xlMSArPSBtLlBJIC8gMjtcblx0XHRcdFx0XHRhbmdsZTIgLT0gbS5QSSAvIDI7XG5cdFx0XHRcdFx0YzEueCA9IHAxLnggKyBjb250cm9sRGlzdCAqIG0uY29zKGFuZ2xlMSArIG0uUEkpO1xuXHRcdFx0XHRcdGMxLnkgPSBwMS55IC0gY29udHJvbERpc3QgKiBtLnNpbihhbmdsZTEgKyBtLlBJKTtcblx0XHRcdFx0XHRjMi54ID0gcDIueCArIGNvbnRyb2xEaXN0ICogbS5jb3MoYW5nbGUyICsgbS5QSSk7XG5cdFx0XHRcdFx0YzIueSA9IHAyLnkgLSBjb250cm9sRGlzdCAqIG0uc2luKGFuZ2xlMiArIG0uUEkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRyYXdQdXNoZXIoY3R4LCBzcGVjcywgdGhpcy5vMSwgdGhpcy5vMiwgcDEsIGMxLCBjMiwgcDIsIHRoaXMubnVtRWxlY3Ryb24sIHRoaXMuY2FjaGVzKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdF8uZ2V0UG9pbnRzID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9O1xuXHRfLmlzT3ZlciA9IGZ1bmN0aW9uKHAsIGJhcnJpZXIpIHtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5jYWNoZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIHIgPSBqc2IuZGlzdGFuY2VGcm9tQ3VydmUocCwgdGhpcy5jYWNoZXNbaV0pO1xuXHRcdFx0aWYgKHIuZGlzdGFuY2UgPCBiYXJyaWVyKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUubWF0aCwgQ2hlbURvb2RsZS5saWIuanNCZXppZXIsIENoZW1Eb29kbGUuc3RydWN0dXJlcywgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLmQyLCBNYXRoKTtcblxuKGZ1bmN0aW9uKG1hdGgsIHN0cnVjdHVyZXMsIGQyLCBtLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIEJPTkQgPSBuZXcgc3RydWN0dXJlcy5Cb25kKCk7XG5cdFxuXHRkMi5WQVAgPSBmdW5jdGlvbih4LCB5KSB7XG5cdFx0dGhpcy5hc3RlcmlzayA9IG5ldyBzdHJ1Y3R1cmVzLkF0b20oJ08nLCB4LCB5KTtcblx0XHR0aGlzLnN1YnN0aXR1ZW50O1xuXHRcdHRoaXMuYm9uZFR5cGUgPSAxO1xuXHRcdHRoaXMuYXR0YWNobWVudHMgPSBbXTtcblx0fTtcblx0dmFyIF8gPSBkMi5WQVAucHJvdG90eXBlID0gbmV3IGQyLl9TaGFwZSgpO1xuXHRfLmRyYXdEZWNvcmF0aW9ucyA9IGZ1bmN0aW9uKGN0eCwgc3BlY3MpIHtcblx0XHRpZiAodGhpcy5pc0hvdmVyIHx8IHRoaXMuaXNTZWxlY3RlZCkge1xuXHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5pc0hvdmVyID8gc3BlY3MuY29sb3JIb3ZlciA6IHNwZWNzLmNvbG9yU2VsZWN0O1xuXHRcdFx0Y3R4LmxpbmVXaWR0aCA9IDEuMjtcblx0XHRcdHZhciByYWRpdXMgPSA3O1xuXHRcdFx0aWYodGhpcy5ob3ZlckJvbmQpe1xuXHRcdFx0XHR2YXIgcGkyID0gMiAqIG0uUEk7XG5cdFx0XHRcdHZhciBhbmdsZSA9ICh0aGlzLmFzdGVyaXNrLmFuZ2xlRm9yU3R1cGlkQ2FudmFzQXJjcyh0aGlzLmhvdmVyQm9uZCkgKyBtLlBJIC8gMikgJSBwaTI7XG5cdFx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuaXNIb3ZlciA/IHNwZWNzLmNvbG9ySG92ZXIgOiBzcGVjcy5jb2xvclNlbGVjdDtcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHR2YXIgYW5nbGVUbyA9IChhbmdsZSArIG0uUEkpICUgcGkyO1xuXHRcdFx0XHRhbmdsZVRvID0gYW5nbGVUbyAlIChtLlBJICogMik7XG5cdFx0XHRcdGN0eC5hcmModGhpcy5hc3Rlcmlzay54LCB0aGlzLmFzdGVyaXNrLnksIHJhZGl1cywgYW5nbGUsIGFuZ2xlVG8sIGZhbHNlKTtcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdGFuZ2xlICs9IG0uUEk7XG5cdFx0XHRcdGFuZ2xlVG8gPSAoYW5nbGUgKyBtLlBJKSAlIHBpMjtcblx0XHRcdFx0Y3R4LmFyYyh0aGlzLmhvdmVyQm9uZC54LCB0aGlzLmhvdmVyQm9uZC55LCByYWRpdXMsIGFuZ2xlLCBhbmdsZVRvLCBmYWxzZSk7XG5cdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdH1lbHNle1xuXHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdGN0eC5hcmModGhpcy5hc3Rlcmlzay54LCB0aGlzLmFzdGVyaXNrLnksIHJhZGl1cywgMCwgbS5QSSAqIDIsIGZhbHNlKTtcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0Xy5kcmF3ID0gZnVuY3Rpb24oY3R4LCBzcGVjcykge1xuXHRcdC8vIGFzdGVyaXNrXG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5lcnJvcj9zcGVjcy5jb2xvckVycm9yOnNwZWNzLnNoYXBlc19jb2xvcjtcblx0XHRjdHgubGluZVdpZHRoID0gMTtcblx0XHR2YXIgbGVuZ3RoID0gNDtcblx0XHR2YXIgc3FydDMgPSBtLnNxcnQoMykvMjtcblx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0Y3R4Lm1vdmVUbyh0aGlzLmFzdGVyaXNrLngsIHRoaXMuYXN0ZXJpc2sueS1sZW5ndGgpO1xuXHRcdGN0eC5saW5lVG8odGhpcy5hc3Rlcmlzay54LCB0aGlzLmFzdGVyaXNrLnkrbGVuZ3RoKTtcblx0XHRjdHgubW92ZVRvKHRoaXMuYXN0ZXJpc2sueC1zcXJ0MypsZW5ndGgsIHRoaXMuYXN0ZXJpc2sueS1sZW5ndGgvMik7XG5cdFx0Y3R4LmxpbmVUbyh0aGlzLmFzdGVyaXNrLngrc3FydDMqbGVuZ3RoLCB0aGlzLmFzdGVyaXNrLnkrbGVuZ3RoLzIpO1xuXHRcdGN0eC5tb3ZlVG8odGhpcy5hc3Rlcmlzay54LXNxcnQzKmxlbmd0aCwgdGhpcy5hc3Rlcmlzay55K2xlbmd0aC8yKTtcblx0XHRjdHgubGluZVRvKHRoaXMuYXN0ZXJpc2sueCtzcXJ0MypsZW5ndGgsIHRoaXMuYXN0ZXJpc2sueS1sZW5ndGgvMik7XG5cdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdHRoaXMuYXN0ZXJpc2sudGV4dEJvdW5kcyA9IFtdO1xuXHRcdHRoaXMuYXN0ZXJpc2sudGV4dEJvdW5kcy5wdXNoKHtcblx0XHRcdHggOiB0aGlzLmFzdGVyaXNrLnggLSBsZW5ndGgsXG5cdFx0XHR5IDogdGhpcy5hc3Rlcmlzay55IC0gbGVuZ3RoLFxuXHRcdFx0dyA6IGxlbmd0aCoyLFxuXHRcdFx0aCA6IGxlbmd0aCoyXG5cdFx0fSk7XG5cdFx0dmFyIGJjc2F2ZSA9IHNwZWNzLmJvbmRzX2NvbG9yO1xuXHRcdGlmKHRoaXMuZXJyb3Ipe1xuXHRcdFx0c3BlY3MuYm9uZHNfY29sb3IgPSBzcGVjcy5jb2xvckVycm9yO1xuXHRcdH1cblx0XHRCT05ELmExID0gdGhpcy5hc3Rlcmlzaztcblx0XHQvLyBzdWJzdGl0dWVudCBib25kXG5cdFx0aWYodGhpcy5zdWJzdGl0dWVudCl7XG5cdFx0XHRCT05ELmEyID0gdGhpcy5zdWJzdGl0dWVudDtcblx0XHRcdEJPTkQuYm9uZE9yZGVyID0gdGhpcy5ib25kVHlwZTtcblx0XHRcdEJPTkQuZHJhdyhjdHgsIHNwZWNzKTtcblx0XHR9XG5cdFx0Ly8gYXR0YWNobWVudCBib25kc1xuXHRcdEJPTkQuYm9uZE9yZGVyID0gMDtcblx0XHRpZighdGhpcy5lcnJvcil7XG5cdFx0XHRzcGVjcy5ib25kc19jb2xvciA9IHNwZWNzLnNoYXBlc19jb2xvcjtcblx0XHR9XG5cdFx0Zm9yKHZhciBpID0gMCwgaWkgPSB0aGlzLmF0dGFjaG1lbnRzLmxlbmd0aDsgaTxpaTsgaSsrKXtcblx0XHRcdEJPTkQuYTIgPSB0aGlzLmF0dGFjaG1lbnRzW2ldO1xuXHRcdFx0Qk9ORC5kcmF3KGN0eCwgc3BlY3MpO1xuXHRcdH1cblx0XHRzcGVjcy5ib25kc19jb2xvciA9IGJjc2F2ZTtcblx0fTtcblx0Xy5nZXRQb2ludHMgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gW3RoaXMuYXN0ZXJpc2tdO1xuXHR9O1xuXHRfLmlzT3ZlciA9IGZ1bmN0aW9uKHAsIGJhcnJpZXIpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUubWF0aCwgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDIsIE1hdGgpO1xuXG4oZnVuY3Rpb24oZDMsIG0sIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLl9NZXNoID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfID0gZDMuX01lc2gucHJvdG90eXBlO1xuXHRfLnN0b3JlRGF0YSA9IGZ1bmN0aW9uKHBvc2l0aW9uRGF0YSwgbm9ybWFsRGF0YSwgaW5kZXhEYXRhKSB7XG5cdFx0dGhpcy5wb3NpdGlvbkRhdGEgPSBwb3NpdGlvbkRhdGE7XG5cdFx0dGhpcy5ub3JtYWxEYXRhID0gbm9ybWFsRGF0YTtcblx0XHR0aGlzLmluZGV4RGF0YSA9IGluZGV4RGF0YTtcblx0fTtcblx0Xy5zZXR1cEJ1ZmZlcnMgPSBmdW5jdGlvbihnbCkge1xuXHRcdHRoaXMudmVydGV4UG9zaXRpb25CdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlcik7XG5cdFx0Z2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkodGhpcy5wb3NpdGlvbkRhdGEpLCBnbC5TVEFUSUNfRFJBVyk7XG5cdFx0dGhpcy52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5pdGVtU2l6ZSA9IDM7XG5cdFx0dGhpcy52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5udW1JdGVtcyA9IHRoaXMucG9zaXRpb25EYXRhLmxlbmd0aCAvIDM7XG5cblx0XHR0aGlzLnZlcnRleE5vcm1hbEJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnZlcnRleE5vcm1hbEJ1ZmZlcik7XG5cdFx0Z2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkodGhpcy5ub3JtYWxEYXRhKSwgZ2wuU1RBVElDX0RSQVcpO1xuXHRcdHRoaXMudmVydGV4Tm9ybWFsQnVmZmVyLml0ZW1TaXplID0gMztcblx0XHR0aGlzLnZlcnRleE5vcm1hbEJ1ZmZlci5udW1JdGVtcyA9IHRoaXMubm9ybWFsRGF0YS5sZW5ndGggLyAzO1xuXG5cdFx0aWYgKHRoaXMuaW5kZXhEYXRhKSB7XG5cdFx0XHR0aGlzLnZlcnRleEluZGV4QnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0XHRnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLnZlcnRleEluZGV4QnVmZmVyKTtcblx0XHRcdGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG5ldyBVaW50MTZBcnJheSh0aGlzLmluZGV4RGF0YSksIGdsLlNUQVRJQ19EUkFXKTtcblx0XHRcdHRoaXMudmVydGV4SW5kZXhCdWZmZXIuaXRlbVNpemUgPSAxO1xuXHRcdFx0dGhpcy52ZXJ0ZXhJbmRleEJ1ZmZlci5udW1JdGVtcyA9IHRoaXMuaW5kZXhEYXRhLmxlbmd0aDtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5wYXJ0aXRpb25zKSB7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5wYXJ0aXRpb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIHAgPSB0aGlzLnBhcnRpdGlvbnNbaV07XG5cdFx0XHRcdHZhciBidWZmZXJzID0gdGhpcy5nZW5lcmF0ZUJ1ZmZlcnMoZ2wsIHAucG9zaXRpb25EYXRhLCBwLm5vcm1hbERhdGEsIHAuaW5kZXhEYXRhKTtcblx0XHRcdFx0cC52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlciA9IGJ1ZmZlcnNbMF07XG5cdFx0XHRcdHAudmVydGV4Tm9ybWFsQnVmZmVyID0gYnVmZmVyc1sxXTtcblx0XHRcdFx0cC52ZXJ0ZXhJbmRleEJ1ZmZlciA9IGJ1ZmZlcnNbMl07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRfLmdlbmVyYXRlQnVmZmVycyA9IGZ1bmN0aW9uKGdsLCBwb3NpdGlvbkRhdGEsIG5vcm1hbERhdGEsIGluZGV4RGF0YSkge1xuXHRcdHZhciB2ZXJ0ZXhQb3NpdGlvbkJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB2ZXJ0ZXhQb3NpdGlvbkJ1ZmZlcik7XG5cdFx0Z2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkocG9zaXRpb25EYXRhKSwgZ2wuU1RBVElDX0RSQVcpO1xuXHRcdHZlcnRleFBvc2l0aW9uQnVmZmVyLml0ZW1TaXplID0gMztcblx0XHR2ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5udW1JdGVtcyA9IHBvc2l0aW9uRGF0YS5sZW5ndGggLyAzO1xuXG5cdFx0dmFyIHZlcnRleE5vcm1hbEJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB2ZXJ0ZXhOb3JtYWxCdWZmZXIpO1xuXHRcdGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KG5vcm1hbERhdGEpLCBnbC5TVEFUSUNfRFJBVyk7XG5cdFx0dmVydGV4Tm9ybWFsQnVmZmVyLml0ZW1TaXplID0gMztcblx0XHR2ZXJ0ZXhOb3JtYWxCdWZmZXIubnVtSXRlbXMgPSBub3JtYWxEYXRhLmxlbmd0aCAvIDM7XG5cblx0XHR2YXIgdmVydGV4SW5kZXhCdWZmZXI7XG5cdFx0aWYgKGluZGV4RGF0YSkge1xuXHRcdFx0dmVydGV4SW5kZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcblx0XHRcdGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHZlcnRleEluZGV4QnVmZmVyKTtcblx0XHRcdGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG5ldyBVaW50MTZBcnJheShpbmRleERhdGEpLCBnbC5TVEFUSUNfRFJBVyk7XG5cdFx0XHR2ZXJ0ZXhJbmRleEJ1ZmZlci5pdGVtU2l6ZSA9IDE7XG5cdFx0XHR2ZXJ0ZXhJbmRleEJ1ZmZlci5udW1JdGVtcyA9IGluZGV4RGF0YS5sZW5ndGg7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFsgdmVydGV4UG9zaXRpb25CdWZmZXIsIHZlcnRleE5vcm1hbEJ1ZmZlciwgdmVydGV4SW5kZXhCdWZmZXIgXTtcblx0fTtcblx0Xy5iaW5kQnVmZmVycyA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0aWYgKCF0aGlzLnZlcnRleFBvc2l0aW9uQnVmZmVyKSB7XG5cdFx0XHR0aGlzLnNldHVwQnVmZmVycyhnbCk7XG5cdFx0fVxuXHRcdC8vIHBvc2l0aW9uc1xuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnZlcnRleFBvc2l0aW9uQnVmZmVyKTtcblx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGdsLnNoYWRlci52ZXJ0ZXhQb3NpdGlvbkF0dHJpYnV0ZSwgdGhpcy52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5pdGVtU2l6ZSwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcblx0XHQvLyBub3JtYWxzXG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMudmVydGV4Tm9ybWFsQnVmZmVyKTtcblx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGdsLnNoYWRlci52ZXJ0ZXhOb3JtYWxBdHRyaWJ1dGUsIHRoaXMudmVydGV4Tm9ybWFsQnVmZmVyLml0ZW1TaXplLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXHRcdGlmICh0aGlzLnZlcnRleEluZGV4QnVmZmVyKSB7XG5cdFx0XHQvLyBpbmRleGVzXG5cdFx0XHRnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLnZlcnRleEluZGV4QnVmZmVyKTtcblx0XHR9XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgTWF0aCk7XG5cbihmdW5jdGlvbihkMywgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDMuX01lYXN1cmVtZW50ID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfID0gZDMuX01lYXN1cmVtZW50LnByb3RvdHlwZSA9IG5ldyBkMy5fTWVzaCgpO1xuXHRfLnJlbmRlciA9IGZ1bmN0aW9uKGdsLCBzcGVjcykge1xuXHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCk7XG5cdFx0Ly8gc2V0dGluZyB0aGUgdmVydGV4IHBvc2l0aW9uIGJ1ZmZlciB0byB1bmRlZmluZWQgcmVzZXRzIHRoZSBidWZmZXJzLCBzbyB0aGlzIHNoYXBlIGNhbiBiZSBkeW5hbWljYWxseSB1cGRhdGVkIHdpdGggdGhlIG1vbGVjdWxlXG5cdFx0aWYoc3BlY3MubWVhc3VyZW1lbnRfdXBkYXRlXzNEKXtcblx0XHRcdHRoaXMudmVydGV4UG9zaXRpb25CdWZmZXIgPSB1bmRlZmluZWQ7XG5cdFx0XHR0aGlzLnRleHQgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmKCF0aGlzLnZlcnRleFBvc2l0aW9uQnVmZmVyKXtcblx0XHRcdHRoaXMuY2FsY3VsYXRlRGF0YShzcGVjcyk7XG5cdFx0fVxuXHRcdHRoaXMuYmluZEJ1ZmZlcnMoZ2wpO1xuXHRcdC8vIGNvbG9yc1xuXHRcdGdsLm1hdGVyaWFsLnNldERpZmZ1c2VDb2xvcihnbCwgc3BlY3Muc2hhcGVzX2NvbG9yKTtcblx0XHRnbC5saW5lV2lkdGgoc3BlY3Muc2hhcGVzX2xpbmVXaWR0aCk7XG5cdFx0Ly8gcmVuZGVyXG5cdFx0Z2wuZHJhd0VsZW1lbnRzKGdsLkxJTkVTLCB0aGlzLnZlcnRleEluZGV4QnVmZmVyLm51bUl0ZW1zLCBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XG5cdH07XG5cdF8ucmVuZGVyVGV4dCA9IGZ1bmN0aW9uKGdsLCBzcGVjcykge1xuXHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCk7XG5cdFx0Ly8gcmVuZGVyIHRoZSB0ZXh0XG5cdFx0aWYoIXRoaXMudGV4dCl7XG5cdFx0XHR0aGlzLnRleHQgPSB0aGlzLmdldFRleHQoc3BlY3MpO1xuXHRcdH1cblx0XHRcblx0XHR2YXIgdmVydGV4RGF0YSA9IHtcblx0XHRcdHBvc2l0aW9uIDogW10sXG5cdFx0XHR0ZXhDb29yZCA6IFtdLFxuXHRcdFx0dHJhbnNsYXRpb24gOiBbXVxuXHRcdH07XG5cblx0XHRnbC50ZXh0SW1hZ2UucHVzaFZlcnRleERhdGEodGhpcy50ZXh0LnZhbHVlLCB0aGlzLnRleHQucG9zLCAxLCB2ZXJ0ZXhEYXRhKTtcblx0XHRnbC50ZXh0TWVzaC5zdG9yZURhdGEoZ2wsIHZlcnRleERhdGEucG9zaXRpb24sIHZlcnRleERhdGEudGV4Q29vcmQsIHZlcnRleERhdGEudHJhbnNsYXRpb24pO1xuXHRcdFxuXHRcdGdsLnRleHRJbWFnZS51c2VUZXh0dXJlKGdsKTtcblx0XHRnbC50ZXh0TWVzaC5yZW5kZXIoZ2wpO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDMpO1xuXG4oZnVuY3Rpb24oRUxFTUVOVCwgZXh0ZW5zaW9ucywgZDMsIG1hdGgsIG0sIG00LCB2MywgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDMuQW5nbGUgPSBmdW5jdGlvbihhMSwgYTIsIGEzKSB7XG5cdFx0dGhpcy5hMSA9IGExO1xuXHRcdHRoaXMuYTIgPSBhMjtcblx0XHR0aGlzLmEzID0gYTM7XG5cdH07XG5cdHZhciBfID0gZDMuQW5nbGUucHJvdG90eXBlID0gbmV3IGQzLl9NZWFzdXJlbWVudCgpO1xuXHRfLmNhbGN1bGF0ZURhdGEgPSBmdW5jdGlvbihzcGVjcykge1xuXHRcdHZhciBwb3NpdGlvbkRhdGEgPSBbXTtcblx0XHR2YXIgbm9ybWFsRGF0YSA9IFtdO1xuXHRcdHZhciBpbmRleERhdGEgPSBbXTtcblx0XHR2YXIgZGlzdDEgPSB0aGlzLmEyLmRpc3RhbmNlM0QodGhpcy5hMSk7XG5cdFx0dmFyIGRpc3QyID0gdGhpcy5hMi5kaXN0YW5jZTNEKHRoaXMuYTMpO1xuXHRcdHRoaXMuZGlzdFVzZSA9IG0ubWluKGRpc3QxLCBkaXN0MikgLyAyO1xuXHRcdC8vIGRhdGEgZm9yIHRoZSBhbmdsZVxuXHRcdHRoaXMudmVjMSA9IHYzLm5vcm1hbGl6ZShbIHRoaXMuYTEueCAtIHRoaXMuYTIueCwgdGhpcy5hMS55IC0gdGhpcy5hMi55LCB0aGlzLmExLnogLSB0aGlzLmEyLnogXSk7XG5cdFx0dGhpcy52ZWMyID0gdjMubm9ybWFsaXplKFsgdGhpcy5hMy54IC0gdGhpcy5hMi54LCB0aGlzLmEzLnkgLSB0aGlzLmEyLnksIHRoaXMuYTMueiAtIHRoaXMuYTIueiBdKTtcblx0XHR0aGlzLmFuZ2xlID0gZXh0ZW5zaW9ucy52ZWMzQW5nbGVGcm9tKHRoaXMudmVjMSwgdGhpcy52ZWMyKTtcblxuXHRcdHZhciBheGlzID0gdjMubm9ybWFsaXplKHYzLmNyb3NzKHRoaXMudmVjMSwgdGhpcy52ZWMyLCBbXSkpO1xuXHRcdHZhciB2ZWMzID0gdjMubm9ybWFsaXplKHYzLmNyb3NzKGF4aXMsIHRoaXMudmVjMSwgW10pKTtcblxuXHRcdHZhciBiYW5kcyA9IHNwZWNzLm1lYXN1cmVtZW50X2FuZ2xlQmFuZHNfM0Q7XG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDw9IGJhbmRzOyArK2kpIHtcblx0XHRcdHZhciB0aGV0YSA9IHRoaXMuYW5nbGUgKiBpIC8gYmFuZHM7XG5cdFx0XHR2YXIgdmVjQ29zID0gdjMuc2NhbGUodGhpcy52ZWMxLCBtLmNvcyh0aGV0YSksIFtdKTtcblx0XHRcdHZhciB2ZWNTaW4gPSB2My5zY2FsZSh2ZWMzLCBtLnNpbih0aGV0YSksIFtdKTtcblx0XHRcdHZhciBub3JtID0gdjMuc2NhbGUodjMubm9ybWFsaXplKHYzLmFkZCh2ZWNDb3MsIHZlY1NpbiwgW10pKSwgdGhpcy5kaXN0VXNlKTtcblxuXHRcdFx0cG9zaXRpb25EYXRhLnB1c2godGhpcy5hMi54ICsgbm9ybVswXSwgdGhpcy5hMi55ICsgbm9ybVsxXSwgdGhpcy5hMi56ICsgbm9ybVsyXSk7XG5cdFx0XHRub3JtYWxEYXRhLnB1c2goMCwgMCwgMCk7XG5cdFx0XHRpZiAoaSA8IGJhbmRzKSB7XG5cdFx0XHRcdGluZGV4RGF0YS5wdXNoKGksIGkgKyAxKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnN0b3JlRGF0YShwb3NpdGlvbkRhdGEsIG5vcm1hbERhdGEsIGluZGV4RGF0YSk7XG5cdH07XG5cdF8uZ2V0VGV4dCA9IGZ1bmN0aW9uKHNwZWNzKSB7XG5cdFx0dmFyIHZlY0NlbnRlciA9IHYzLnNjYWxlKHYzLm5vcm1hbGl6ZSh2My5hZGQodGhpcy52ZWMxLCB0aGlzLnZlYzIsIFtdKSksIHRoaXMuZGlzdFVzZSArIDAuMyk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHBvcyA6IFsgdGhpcy5hMi54ICsgdmVjQ2VudGVyWzBdLCB0aGlzLmEyLnkgKyB2ZWNDZW50ZXJbMV0sIHRoaXMuYTIueiArIHZlY0NlbnRlclsyXSBdLFxuXHRcdFx0dmFsdWUgOiBbIG1hdGguYW5nbGVCb3VuZHModGhpcy5hbmdsZSwgdHJ1ZSkudG9GaXhlZCgyKSwgJyBcXHUwMGIwJyBdLmpvaW4oJycpXG5cdFx0fTtcblx0fTtcblxufSkoQ2hlbURvb2RsZS5FTEVNRU5ULCBDaGVtRG9vZGxlLmV4dGVuc2lvbnMsIENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgQ2hlbURvb2RsZS5tYXRoLCBNYXRoLCBDaGVtRG9vZGxlLmxpYi5tYXQ0LCBDaGVtRG9vZGxlLmxpYi52ZWMzKTtcblxuKGZ1bmN0aW9uKGQzLCBtLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRkMy5BcnJvdyA9IGZ1bmN0aW9uKHJhZGl1cywgbG9uZ2l0dWRlQmFuZHMpIHtcblx0XHR2YXIgcG9zaXRpb25EYXRhID0gW107XG5cdFx0dmFyIG5vcm1hbERhdGEgPSBbXTtcblxuXHRcdGZvciAoIHZhciBsb25nTnVtYmVyID0gMDsgbG9uZ051bWJlciA8PSBsb25naXR1ZGVCYW5kczsgbG9uZ051bWJlcisrKSB7XG5cdFx0XHR2YXIgdGhldGEgPSBsb25nTnVtYmVyICogMiAqIG0uUEkgLyBsb25naXR1ZGVCYW5kcztcblx0XHRcdHZhciBzaW5UaGV0YSA9IG0uc2luKHRoZXRhKTtcblx0XHRcdHZhciBjb3NUaGV0YSA9IG0uY29zKHRoZXRhKTtcblxuXHRcdFx0dmFyIHggPSBjb3NUaGV0YTtcblx0XHRcdHZhciB5ID0gc2luVGhldGE7XG5cblx0XHRcdG5vcm1hbERhdGEucHVzaChcblx0XHRcdC8vIGJhc2UgY3lsaW5kZXJcblx0XHRcdDAsIDAsIC0xLCAwLCAwLCAtMSxcblx0XHRcdC8vIGN5bGluZGVyXG5cdFx0XHR4LCB5LCAwLCB4LCB5LCAwLFxuXHRcdFx0Ly8gYmFzZSBjb25lXG5cdFx0XHQwLCAwLCAtMSwgMCwgMCwgLTEsXG5cdFx0XHQvLyBjb25lXG5cdFx0XHR4LCB5LCAxLCB4LCB5LCAxKTtcblxuXHRcdFx0cG9zaXRpb25EYXRhLnB1c2goXG5cdFx0XHQvLyBiYXNlIGN5bGluZGVyXG5cdFx0XHQwLCAwLCAwLCByYWRpdXMgKiB4LCByYWRpdXMgKiB5LCAwLFxuXHRcdFx0Ly8gY3lsaW5kZXJcblx0XHRcdHJhZGl1cyAqIHgsIHJhZGl1cyAqIHksIDAsIHJhZGl1cyAqIHgsIHJhZGl1cyAqIHksIDIsXG5cdFx0XHQvLyBiYXNlIGNvbmVcblx0XHRcdHJhZGl1cyAqIHgsIHJhZGl1cyAqIHksIDIsIHJhZGl1cyAqIHggKiAyLCByYWRpdXMgKiB5ICogMiwgMixcblx0XHRcdC8vIGNvbmVcblx0XHRcdHJhZGl1cyAqIHggKiAyLCByYWRpdXMgKiB5ICogMiwgMiwgMCwgMCwgMyk7XG5cdFx0fVxuXG5cdFx0dmFyIGluZGV4RGF0YSA9IFtdO1xuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGxvbmdpdHVkZUJhbmRzOyBpKyspIHtcblx0XHRcdHZhciBvZmZzZXQgPSBpICogODtcblx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSA3OyBqIDwgamo7IGorKykge1xuXHRcdFx0XHR2YXIgZmlyc3QgPSBqICsgb2Zmc2V0O1xuXHRcdFx0XHR2YXIgc2Vjb25kID0gZmlyc3QgKyAxO1xuXHRcdFx0XHR2YXIgdGhpcmQgPSBmaXJzdCArIGpqICsgMjtcblx0XHRcdFx0dmFyIGZvcnRoID0gdGhpcmQgLSAxO1xuXHRcdFx0XHRpbmRleERhdGEucHVzaChmaXJzdCwgdGhpcmQsIHNlY29uZCwgdGhpcmQsIGZpcnN0LCBmb3J0aCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9yZURhdGEocG9zaXRpb25EYXRhLCBub3JtYWxEYXRhLCBpbmRleERhdGEpO1xuXHR9O1xuXHRkMy5BcnJvdy5wcm90b3R5cGUgPSBuZXcgZDMuX01lc2goKTtcblxufSkoQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLmQzLCBNYXRoKTtcblxuKGZ1bmN0aW9uKGQzLCBtLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRkMy5Cb3ggPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0LCBkZXB0aCkge1xuXHRcdHdpZHRoIC89IDI7XG5cdFx0ZGVwdGggLz0gMjtcblxuXHRcdHZhciBwb3NpdGlvbkRhdGEgPSBbXTtcblx0XHR2YXIgbm9ybWFsRGF0YSA9IFtdO1xuXG5cdFx0Ly8gdG9wXG5cdFx0cG9zaXRpb25EYXRhLnB1c2god2lkdGgsIGhlaWdodCwgLWRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCh3aWR0aCwgaGVpZ2h0LCAtZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKC13aWR0aCwgaGVpZ2h0LCAtZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKHdpZHRoLCBoZWlnaHQsIGRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCgtd2lkdGgsIGhlaWdodCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKC13aWR0aCwgaGVpZ2h0LCBkZXB0aCk7XG5cdFx0Zm9yKHZhciBpID0gNjsgaS0tOyBub3JtYWxEYXRhLnB1c2goMCAsIDEsIDApKTtcblxuXHRcdC8vIGZyb250XG5cdFx0cG9zaXRpb25EYXRhLnB1c2goLXdpZHRoLCBoZWlnaHQsIGRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCgtd2lkdGgsIGhlaWdodCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKC13aWR0aCwgMCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKHdpZHRoLCBoZWlnaHQsIGRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCh3aWR0aCwgMCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKHdpZHRoLCAwLCBkZXB0aCk7XG5cdFx0Zm9yKHZhciBpID0gNjsgaS0tOyBub3JtYWxEYXRhLnB1c2goMCAsIDAsIDEpKTtcblxuXHRcdC8vIHJpZ2h0XG5cdFx0cG9zaXRpb25EYXRhLnB1c2god2lkdGgsIGhlaWdodCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKHdpZHRoLCBoZWlnaHQsIGRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCh3aWR0aCwgMCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKHdpZHRoLCBoZWlnaHQsIC1kZXB0aCk7XG5cdFx0cG9zaXRpb25EYXRhLnB1c2god2lkdGgsIDAsIC1kZXB0aCk7XG5cdFx0cG9zaXRpb25EYXRhLnB1c2god2lkdGgsIDAsIC1kZXB0aCk7XG5cdFx0Zm9yKHZhciBpID0gNjsgaS0tOyBub3JtYWxEYXRhLnB1c2goMSAsIDAsIDApKTtcblxuXHRcdC8vIGJhY2tcblx0XHRwb3NpdGlvbkRhdGEucHVzaCh3aWR0aCwgaGVpZ2h0LCAtZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKHdpZHRoLCBoZWlnaHQsIC1kZXB0aCk7XG5cdFx0cG9zaXRpb25EYXRhLnB1c2god2lkdGgsIDAsIC1kZXB0aCk7XG5cdFx0cG9zaXRpb25EYXRhLnB1c2goLXdpZHRoLCBoZWlnaHQsIC1kZXB0aCk7XG5cdFx0cG9zaXRpb25EYXRhLnB1c2goLXdpZHRoLCAwLCAtZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKC13aWR0aCwgMCwgLWRlcHRoKTtcblx0XHRmb3IodmFyIGkgPSA2OyBpLS07IG5vcm1hbERhdGEucHVzaCgwICwgMCwgLTEpKTtcblxuXHRcdC8vIGxlZnRcblx0XHRwb3NpdGlvbkRhdGEucHVzaCgtd2lkdGgsIGhlaWdodCwgLWRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCgtd2lkdGgsIGhlaWdodCwgLWRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCgtd2lkdGgsIDAsIC1kZXB0aCk7XG5cdFx0cG9zaXRpb25EYXRhLnB1c2goLXdpZHRoLCBoZWlnaHQsIGRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCgtd2lkdGgsIDAsIGRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCgtd2lkdGgsIDAsIGRlcHRoKTtcblx0XHRmb3IodmFyIGkgPSA2OyBpLS07IG5vcm1hbERhdGEucHVzaCgtMSAsIDAsIDApKTtcblxuXHRcdC8vIGJvdHRvbVxuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKC13aWR0aCwgMCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKC13aWR0aCwgMCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKC13aWR0aCwgMCwgLWRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCh3aWR0aCwgMCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKHdpZHRoLCAwLCAtZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKHdpZHRoLCAwLCAtZGVwdGgpO1xuXHRcdGZvcih2YXIgaSA9IDY7IGktLTsgbm9ybWFsRGF0YS5wdXNoKDAgLCAtMSwgMCkpO1xuXG5cdFx0dGhpcy5zdG9yZURhdGEocG9zaXRpb25EYXRhLCBub3JtYWxEYXRhKTtcblx0fTtcblx0ZDMuQm94LnByb3RvdHlwZSA9IG5ldyBkMy5fTWVzaCgpO1xuXG59KShDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDMsIE1hdGgpO1xuXG4oZnVuY3Rpb24obWF0aCwgZDMsIHYzLCBtNCwgbSwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDMuQ2FtZXJhID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5maWVsZE9mVmlldyA9IDQ1O1xuXHRcdHRoaXMuYXNwZWN0ID0gMTtcblx0XHR0aGlzLm5lYXIgPSAwLjE7XG5cdFx0dGhpcy5mYXIgPSAxMDAwMDtcblx0XHR0aGlzLnpvb20gPSAxO1xuXHRcdHRoaXMudmlld01hdHJpeCA9IG00LmlkZW50aXR5KFtdKTtcblx0XHR0aGlzLnByb2plY3Rpb25NYXRyaXggPSBtNC5pZGVudGl0eShbXSk7XG5cdH07XG5cdHZhciBfID0gZDMuQ2FtZXJhLnByb3RvdHlwZTtcblx0Xy5wZXJzcGVjdGl2ZVByb2plY3Rpb25NYXRyaXggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRvcCA9IG0udGFuKHRoaXMuZmllbGRPZlZpZXcgLyAzNjAgKiBtLlBJKSAqIHRoaXMubmVhciAqIHRoaXMuem9vbTtcbiAgICAgICAgdmFyIHJpZ2h0ID0gdGhpcy5hc3BlY3QgKiB0b3A7XG4gICAgICAgIHJldHVybiBtNC5mcnVzdHVtKC1yaWdodCwgcmlnaHQsIC10b3AsIHRvcCwgdGhpcy5uZWFyLCB0aGlzLmZhciwgdGhpcy5wcm9qZWN0aW9uTWF0cml4KTtcblx0fTtcblx0Xy5vcnRob2dvbmFsUHJvamVjdGlvbk1hdHJpeCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdG9wID0gbS50YW4odGhpcy5maWVsZE9mVmlldyAvIDM2MCAqIG0uUEkpICogKCh0aGlzLmZhciAtIHRoaXMubmVhcikgLyAyICsgdGhpcy5uZWFyKSAqIHRoaXMuem9vbTtcbiAgICAgICAgdmFyIHJpZ2h0ID0gdGhpcy5hc3BlY3QgKiB0b3A7XG4gICAgICAgIHJldHVybiBtNC5vcnRobygtcmlnaHQsIHJpZ2h0LCAtdG9wLCB0b3AsIHRoaXMubmVhciwgdGhpcy5mYXIsIHRoaXMucHJvamVjdGlvbk1hdHJpeCk7XG5cdH07XG5cdF8udXBkYXRlUHJvamVjdGlvbk1hdHJpeCA9IGZ1bmN0aW9uKGlzUGVyc3BlY3RpdmUpIHtcblx0XHRyZXR1cm4gaXNQZXJzcGVjdGl2ZSA/IHRoaXMucGVyc3BlY3RpdmVQcm9qZWN0aW9uTWF0cml4KCkgOiB0aGlzLm9ydGhvZ29uYWxQcm9qZWN0aW9uTWF0cml4KCk7XG5cdH07XG5cdF8uZm9jYWxMZW5ndGggPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gKHRoaXMuZmFyIC0gdGhpcy5uZWFyKSAvIDIgKyB0aGlzLm5lYXI7XG5cdH07XG4gICAgXy56b29tSW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy56b29tID0gbS5taW4odGhpcy56b29tICogMS4yNSwgMjAwKTtcbiAgICB9O1xuICAgIF8uem9vbU91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnpvb20gPSBtLm1heCh0aGlzLnpvb20gLyAxLjI1LCAxIC8gNDAwKTtcbiAgICB9O1xuXG59KShDaGVtRG9vZGxlLm1hdGgsIENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgQ2hlbURvb2RsZS5saWIudmVjMywgQ2hlbURvb2RsZS5saWIubWF0NCwgd2luZG93Lk1hdGgpO1xuXG4oZnVuY3Rpb24oZDMsIG0sIG00LCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRkMy5MaW5lQXJyb3cgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZCA9IDIuODtcblx0XHR2YXIgdyA9IDAuMTtcblxuXHRcdHRoaXMuc3RvcmVEYXRhKFtcblx0XHRcdFx0MCwgMCwgLTMsIHcsIDAsIC1kLFxuXHRcdFx0XHQwLCAwLCAtMywgLXcsIDAsIC1kLFxuXG5cdFx0XHRcdDAsIDAsIC0zLCAwLCAwLCAzLFxuXG5cdFx0XHRcdDAsIDAsIDMsIHcsIDAsIGQsXG5cdFx0XHRcdDAsIDAsIDMsIC13LCAwLCBkXG5cdFx0XHRdLFxuXHRcdFx0W1xuXHRcdFx0XHQwLCAwLCAwLCAwLCAwLCAwLFxuXHRcdFx0XHQwLCAwLCAwLCAwLCAwLCAwLFxuXHRcdFx0XHQwLCAwLCAwLCAwLCAwLCAwLFxuXHRcdFx0XHQwLCAwLCAwLCAwLCAwLCAwLFxuXHRcdFx0XHQwLCAwLCAwLCAwLCAwLCAwXG5cdFx0XHRdKTtcblx0fTtcblx0ZDMuTGluZUFycm93LnByb3RvdHlwZSA9IG5ldyBkMy5fTWVzaCgpO1xuXHRcblx0ZDMuQ29tcGFzcyA9IGZ1bmN0aW9uKGdsLCBzcGVjcykge1xuXG5cdFx0Ly8gc2V0dXAgdGV4dCBYIFkgWlxuXHRcdHRoaXMudGV4dEltYWdlID0gbmV3IGQzLlRleHRJbWFnZSgpO1xuXHRcdHRoaXMudGV4dEltYWdlLmluaXQoZ2wpO1xuXHRcdHRoaXMudGV4dEltYWdlLnVwZGF0ZUZvbnQoZ2wsIHNwZWNzLnRleHRfZm9udF9zaXplLCBzcGVjcy50ZXh0X2ZvbnRfZmFtaWxpZXMsIHNwZWNzLnRleHRfZm9udF9ib2xkLCBzcGVjcy50ZXh0X2ZvbnRfaXRhbGljLCBzcGVjcy50ZXh0X2ZvbnRfc3Ryb2tlXzNEKTtcblxuXHRcdHRoaXMudGV4dE1lc2ggPSBuZXcgZDMuVGV4dE1lc2goKTtcblx0XHR0aGlzLnRleHRNZXNoLmluaXQoZ2wpO1xuXG5cdFx0dmFyIHNjcmVlblJhdGlvSGVpZ2h0ID0gc3BlY3MuY29tcGFzc19zaXplXzNEIC8gZ2wuY2FudmFzLmNsaWVudEhlaWdodDtcblxuXHRcdHZhciBoZWlnaHQgPSAzIC8gc2NyZWVuUmF0aW9IZWlnaHQ7XG5cdFx0dmFyIHRhblRoZXRhID0gbS50YW4oc3BlY3MucHJvamVjdGlvblBlcnNwZWN0aXZlVmVydGljYWxGaWVsZE9mVmlld18zRCAvIDM2MCAqIG0uUEkpO1xuXHRcdHZhciBkZXB0aCA9IGhlaWdodCAvIHRhblRoZXRhO1xuXHRcdHZhciBuZWFyID0gbS5tYXgoZGVwdGggLSBoZWlnaHQsIDAuMSk7XG5cdFx0dmFyIGZhciA9IGRlcHRoICsgaGVpZ2h0O1xuXG5cdFx0dmFyIGFzcGVjID0gZ2wuY2FudmFzLmNsaWVudFdpZHRoIC8gZ2wuY2FudmFzLmNsaWVudEhlaWdodDtcblxuXHRcdHZhciBmblByb2plY3Rpb24sIHo7XG5cblx0XHRpZiAoc3BlY3MucHJvamVjdGlvblBlcnNwZWN0aXZlXzNEKSB7XG5cdFx0XHR6ID0gbmVhcjtcblx0XHRcdGZuUHJvamVjdGlvbiA9IG00LmZydXN0dW07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHogPSBkZXB0aDtcblx0XHRcdGZuUHJvamVjdGlvbiA9IG00Lm9ydGhvO1xuXHRcdH1cblxuXHRcdHZhciBuZWFyUmF0aW8gPSB6IC8gZ2wuY2FudmFzLmNsaWVudEhlaWdodCAqIDIgKiB0YW5UaGV0YTtcblx0XHR2YXIgdG9wID0gdGFuVGhldGEgKiB6O1xuXHRcdHZhciBib3R0b20gPSAtdG9wO1xuXHRcdHZhciBsZWZ0ID0gYXNwZWMgKiBib3R0b207XG5cdFx0dmFyIHJpZ2h0ID0gYXNwZWMgKiB0b3A7XG5cblx0XHRpZihzcGVjcy5jb21wYXNzX3R5cGVfM0QgPT09IDApIHtcblx0XHRcdHZhciBkZWx0YVggPSAtKGdsLmNhbnZhcy5jbGllbnRXaWR0aCAtIHNwZWNzLmNvbXBhc3Nfc2l6ZV8zRCkgLyAyICsgdGhpcy50ZXh0SW1hZ2UuY2hhckhlaWdodDtcblx0XHRcdHZhciBkZWx0YVkgPSAtKGdsLmNhbnZhcy5jbGllbnRIZWlnaHQgLSBzcGVjcy5jb21wYXNzX3NpemVfM0QpIC8gMiArIHRoaXMudGV4dEltYWdlLmNoYXJIZWlnaHQ7XG5cblx0XHRcdHZhciB4ID0gZGVsdGFYICogbmVhclJhdGlvO1xuXHRcdFx0dmFyIHkgPSBkZWx0YVkgKiBuZWFyUmF0aW87XG5cblx0XHRcdGxlZnQgLT0geDtcblx0XHRcdHJpZ2h0IC09IHg7XG5cdFx0XHRib3R0b20gLT0geTtcblx0XHRcdHRvcCAtPSB5O1xuXHRcdH1cblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeCA9IGZuUHJvamVjdGlvbihsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcik7XG5cdFx0dGhpcy50cmFuc2xhdGlvbk1hdHJpeCA9IG00LnRyYW5zbGF0ZShtNC5pZGVudGl0eShbXSksIFsgMCwgMCwgLWRlcHRoIF0pO1xuXG5cdFx0Ly8gdmVydGV4IGRhdGEgZm9yIFggWSBaIHRleHQgbGFiZWxcblx0XHR2YXIgdmVydGV4RGF0YSA9IHtcblx0XHRcdHBvc2l0aW9uIDogW10sXG5cdFx0XHR0ZXhDb29yZCA6IFtdLFxuXHRcdFx0dHJhbnNsYXRpb24gOiBbXVxuXHRcdH07XG5cblx0XHQvLyBpdCBuZWVkIHRvIGF1dG8gY2FsY3VsYXRlZCBzb21laG93XG5cdFx0dmFyIHRleHRQb3MgPSAzLjU7XG5cblx0XHR0aGlzLnRleHRJbWFnZS5wdXNoVmVydGV4RGF0YSgnWCcsIFsgdGV4dFBvcywgMCwgMCBdLCAwLCB2ZXJ0ZXhEYXRhKTtcblx0XHR0aGlzLnRleHRJbWFnZS5wdXNoVmVydGV4RGF0YSgnWScsIFsgMCwgdGV4dFBvcywgMCBdLCAwLCB2ZXJ0ZXhEYXRhKTtcblx0XHR0aGlzLnRleHRJbWFnZS5wdXNoVmVydGV4RGF0YSgnWicsIFsgMCwgMCwgdGV4dFBvcyBdLCAwLCB2ZXJ0ZXhEYXRhKTtcblxuXHRcdHRoaXMudGV4dE1lc2guc3RvcmVEYXRhKGdsLCB2ZXJ0ZXhEYXRhLnBvc2l0aW9uLCB2ZXJ0ZXhEYXRhLnRleENvb3JkLCB2ZXJ0ZXhEYXRhLnRyYW5zbGF0aW9uKTtcblx0fTtcblxuXHR2YXIgXyA9IGQzLkNvbXBhc3MucHJvdG90eXBlO1xuXHRfLnJlbmRlckFycm93ID0gZnVuY3Rpb24oZ2wsIHR5cGUsIGNvbG9yLCBtdk1hdHJpeCkge1xuXHRcdGdsLm1hdGVyaWFsLnNldERpZmZ1c2VDb2xvcihnbCwgY29sb3IpO1xuXHRcdGdsLnNoYWRlci5zZXRNb2RlbFZpZXdNYXRyaXgoZ2wsIG12TWF0cml4KTtcblx0XHRpZih0eXBlID09PSAxKSB7XG5cdFx0XHRnbC5kcmF3QXJyYXlzKGdsLkxJTkVTLCAwLCBnbC5saW5lQXJyb3dCdWZmZXIudmVydGV4UG9zaXRpb25CdWZmZXIubnVtSXRlbXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCBnbC5hcnJvd0J1ZmZlci52ZXJ0ZXhJbmRleEJ1ZmZlci5udW1JdGVtcywgZ2wuVU5TSUdORURfU0hPUlQsIDApO1xuXHRcdH1cblx0fTtcblx0Xy5yZW5kZXIgPSBmdW5jdGlvbihnbCwgc3BlY3MpIHtcblx0XHRnbC5zaGFkZXIuc2V0UHJvamVjdGlvbk1hdHJpeChnbCwgdGhpcy5wcm9qZWN0aW9uTWF0cml4KTtcblx0XHRzcGVjcy5jb21wYXNzX3R5cGVfM0QgPT09IDEgPyBnbC5saW5lQXJyb3dCdWZmZXIuYmluZEJ1ZmZlcnMoZ2wpIDogZ2wuYXJyb3dCdWZmZXIuYmluZEJ1ZmZlcnMoZ2wpO1xuXG5cdFx0Z2wubWF0ZXJpYWwuc2V0VGVtcENvbG9ycyhnbCwgc3BlY3MuYm9uZHNfbWF0ZXJpYWxBbWJpZW50Q29sb3JfM0QsIHVuZGVmaW5lZCwgc3BlY3MuYm9uZHNfbWF0ZXJpYWxTcGVjdWxhckNvbG9yXzNELCBzcGVjcy5ib25kc19tYXRlcmlhbFNoaW5pbmVzc18zRCk7XG5cblx0XHR2YXIgbW9kZWxNYXRyaXggPSBtNC5tdWx0aXBseSh0aGlzLnRyYW5zbGF0aW9uTWF0cml4LCBnbC5yb3RhdGlvbk1hdHJpeCwgW10pO1xuXHRcdHZhciBhbmdsZSA9IG0uUEkgLyAyO1xuXG5cdFx0Ly8geCAtIGF4aXNcblx0XHR0aGlzLnJlbmRlckFycm93KGdsLCBzcGVjcy5jb21wYXNzX3R5cGVfM0QsIHNwZWNzLmNvbXBhc3NfYXhpc1hDb2xvcl8zRCwgbTQucm90YXRlWShtb2RlbE1hdHJpeCwgYW5nbGUsIFtdKSk7XG5cblx0XHQvLyB5IC0gYXhpc1xuXHRcdHRoaXMucmVuZGVyQXJyb3coZ2wsIHNwZWNzLmNvbXBhc3NfdHlwZV8zRCwgc3BlY3MuY29tcGFzc19heGlzWUNvbG9yXzNELCBtNC5yb3RhdGVYKG1vZGVsTWF0cml4LCAtYW5nbGUsIFtdKSk7XG5cblx0XHQvLyB6IC0gYXhpc1xuXHRcdHRoaXMucmVuZGVyQXJyb3coZ2wsIHNwZWNzLmNvbXBhc3NfdHlwZV8zRCwgc3BlY3MuY29tcGFzc19heGlzWkNvbG9yXzNELCBtb2RlbE1hdHJpeCk7XG5cdH07XG5cdF8ucmVuZGVyQXhpcyA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0Z2wuc2hhZGVyLnNldFByb2plY3Rpb25NYXRyaXgoZ2wsIHRoaXMucHJvamVjdGlvbk1hdHJpeCk7XG5cdFx0dmFyIG12TWF0cml4ID0gbTQubXVsdGlwbHkodGhpcy50cmFuc2xhdGlvbk1hdHJpeCwgZ2wucm90YXRpb25NYXRyaXgsIFtdKTtcblx0XHRnbC5zaGFkZXIuc2V0TW9kZWxWaWV3TWF0cml4KGdsLCBtdk1hdHJpeCk7XG5cblx0XHR0aGlzLnRleHRJbWFnZS51c2VUZXh0dXJlKGdsKTtcblx0XHR0aGlzLnRleHRNZXNoLnJlbmRlcihnbCk7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgTWF0aCwgQ2hlbURvb2RsZS5saWIubWF0NCk7XG5cbihmdW5jdGlvbihkMywgbSwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDMuQ3lsaW5kZXIgPSBmdW5jdGlvbihyYWRpdXMsIGhlaWdodCwgYmFuZHMsIGNsb3NlZCkge1xuXHRcdHZhciBwb3NpdGlvbkRhdGEgPSBbXTtcblx0XHR2YXIgbm9ybWFsRGF0YSA9IFtdO1xuXG5cdFx0aWYgKGNsb3NlZCkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPD0gYmFuZHM7IGkrKykge1xuXHRcdFx0XHR2YXIgdGhldGEgPSBpICUgYmFuZHMgKiAyICogbS5QSSAvIGJhbmRzO1xuXHRcdFx0XHR2YXIgY29zVGhldGEgPSBtLmNvcyh0aGV0YSk7XG5cdFx0XHRcdHZhciBzaW5UaGV0YSA9IG0uc2luKHRoZXRhKTtcblxuXHRcdFx0XHRub3JtYWxEYXRhLnB1c2goMCwgLTEsIDApO1xuXHRcdFx0XHRwb3NpdGlvbkRhdGEucHVzaCgwLCAwLCAwKTtcblx0XHRcdFx0bm9ybWFsRGF0YS5wdXNoKDAsIC0xLCAwKTtcblx0XHRcdFx0cG9zaXRpb25EYXRhLnB1c2gocmFkaXVzICogY29zVGhldGEsIDAsIHJhZGl1cyAqIHNpblRoZXRhKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8PSBiYW5kczsgaSsrKSB7XG5cdFx0XHRcdHZhciB0aGV0YSA9IGkgJSBiYW5kcyAqIDIgKiBtLlBJIC8gYmFuZHM7XG5cdFx0XHRcdHZhciBjb3NUaGV0YSA9IG0uY29zKHRoZXRhKTtcblx0XHRcdFx0dmFyIHNpblRoZXRhID0gbS5zaW4odGhldGEpO1xuXG5cdFx0XHRcdG5vcm1hbERhdGEucHVzaChjb3NUaGV0YSwgMCwgc2luVGhldGEpO1xuXHRcdFx0XHRwb3NpdGlvbkRhdGEucHVzaChyYWRpdXMgKiBjb3NUaGV0YSwgMCwgcmFkaXVzICogc2luVGhldGEpO1xuXG5cdFx0XHRcdG5vcm1hbERhdGEucHVzaChjb3NUaGV0YSwgMCwgc2luVGhldGEpO1xuXHRcdFx0XHRwb3NpdGlvbkRhdGEucHVzaChyYWRpdXMgKiBjb3NUaGV0YSwgaGVpZ2h0LCByYWRpdXMgKiBzaW5UaGV0YSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDw9IGJhbmRzOyBpKyspIHtcblx0XHRcdFx0dmFyIHRoZXRhID0gaSAlIGJhbmRzICogMiAqIG0uUEkgLyBiYW5kcztcblx0XHRcdFx0dmFyIGNvc1RoZXRhID0gbS5jb3ModGhldGEpO1xuXHRcdFx0XHR2YXIgc2luVGhldGEgPSBtLnNpbih0aGV0YSk7XG5cblx0XHRcdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDEsIDApO1xuXHRcdFx0XHRwb3NpdGlvbkRhdGEucHVzaChyYWRpdXMgKiBjb3NUaGV0YSwgaGVpZ2h0LCByYWRpdXMgKiBzaW5UaGV0YSk7XG5cblx0XHRcdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDEsIDApO1xuXHRcdFx0XHRwb3NpdGlvbkRhdGEucHVzaCgwLCBoZWlnaHQsIDApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGJhbmRzOyBpKyspIHtcblx0XHRcdFx0dmFyIHRoZXRhID0gaSAqIDIgKiBtLlBJIC8gYmFuZHM7XG5cdFx0XHRcdHZhciBjb3NUaGV0YSA9IG0uY29zKHRoZXRhKTtcblx0XHRcdFx0dmFyIHNpblRoZXRhID0gbS5zaW4odGhldGEpO1xuXHRcdFx0XHRub3JtYWxEYXRhLnB1c2goY29zVGhldGEsIDAsIHNpblRoZXRhKTtcblx0XHRcdFx0cG9zaXRpb25EYXRhLnB1c2gocmFkaXVzICogY29zVGhldGEsIDAsIHJhZGl1cyAqIHNpblRoZXRhKTtcblx0XHRcdFx0bm9ybWFsRGF0YS5wdXNoKGNvc1RoZXRhLCAwLCBzaW5UaGV0YSk7XG5cdFx0XHRcdHBvc2l0aW9uRGF0YS5wdXNoKHJhZGl1cyAqIGNvc1RoZXRhLCBoZWlnaHQsIHJhZGl1cyAqIHNpblRoZXRhKTtcblx0XHRcdH1cblx0XHRcdG5vcm1hbERhdGEucHVzaCgxLCAwLCAwKTtcblx0XHRcdHBvc2l0aW9uRGF0YS5wdXNoKHJhZGl1cywgMCwgMCk7XG5cdFx0XHRub3JtYWxEYXRhLnB1c2goMSwgMCwgMCk7XG5cdFx0XHRwb3NpdGlvbkRhdGEucHVzaChyYWRpdXMsIGhlaWdodCwgMCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9yZURhdGEocG9zaXRpb25EYXRhLCBub3JtYWxEYXRhKTtcblx0fTtcblx0ZDMuQ3lsaW5kZXIucHJvdG90eXBlID0gbmV3IGQzLl9NZXNoKCk7XG5cbn0pKENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgTWF0aCk7XG5cbihmdW5jdGlvbihFTEVNRU5ULCBkMywgbSwgdjMsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLkRpc3RhbmNlID0gZnVuY3Rpb24oYTEsIGEyLCBub2RlLCBvZmZzZXQpIHtcblx0XHR0aGlzLmExID0gYTE7XG5cdFx0dGhpcy5hMiA9IGEyO1xuXHRcdHRoaXMubm9kZSA9IG5vZGU7XG5cdFx0dGhpcy5vZmZzZXQgPSBvZmZzZXQgPyBvZmZzZXQgOiAwO1xuXHR9O1xuXHR2YXIgXyA9IGQzLkRpc3RhbmNlLnByb3RvdHlwZSA9IG5ldyBkMy5fTWVhc3VyZW1lbnQoKTtcblx0Xy5jYWxjdWxhdGVEYXRhID0gZnVuY3Rpb24oc3BlY3MpIHtcblx0XHR2YXIgcG9zaXRpb25EYXRhID0gWyB0aGlzLmExLngsIHRoaXMuYTEueSwgdGhpcy5hMS56LCB0aGlzLmEyLngsIHRoaXMuYTIueSwgdGhpcy5hMi56IF07XG5cdFx0aWYgKHRoaXMubm9kZSkge1xuXHRcdFx0dmFyIHIxID0gc3BlY3MuYXRvbXNfdXNlVkRXRGlhbWV0ZXJzXzNEID8gRUxFTUVOVFt0aGlzLmExLmxhYmVsXS52ZFdSYWRpdXMgKiBzcGVjcy5hdG9tc192ZHdNdWx0aXBsaWVyXzNEIDogc3BlY3MuYXRvbXNfc3BoZXJlRGlhbWV0ZXJfM0QgLyAyO1xuXHRcdFx0dmFyIHIyID0gc3BlY3MuYXRvbXNfdXNlVkRXRGlhbWV0ZXJzXzNEID8gRUxFTUVOVFt0aGlzLmEyLmxhYmVsXS52ZFdSYWRpdXMgKiBzcGVjcy5hdG9tc192ZHdNdWx0aXBsaWVyXzNEIDogc3BlY3MuYXRvbXNfc3BoZXJlRGlhbWV0ZXJfM0QgLyAyO1xuXHRcdFx0dGhpcy5tb3ZlID0gdGhpcy5vZmZzZXQgKyBtLm1heChyMSwgcjIpO1xuXHRcdFx0dGhpcy5kaXNwbGFjZW1lbnQgPSBbICh0aGlzLmExLnggKyB0aGlzLmEyLngpIC8gMiAtIHRoaXMubm9kZS54LCAodGhpcy5hMS55ICsgdGhpcy5hMi55KSAvIDIgLSB0aGlzLm5vZGUueSwgKHRoaXMuYTEueiArIHRoaXMuYTIueikgLyAyIC0gdGhpcy5ub2RlLnogXTtcblx0XHRcdHYzLm5vcm1hbGl6ZSh0aGlzLmRpc3BsYWNlbWVudCk7XG5cdFx0XHR2YXIgY2hhbmdlID0gdjMuc2NhbGUodGhpcy5kaXNwbGFjZW1lbnQsIHRoaXMubW92ZSwgW10pO1xuXHRcdFx0cG9zaXRpb25EYXRhWzBdICs9IGNoYW5nZVswXTtcblx0XHRcdHBvc2l0aW9uRGF0YVsxXSArPSBjaGFuZ2VbMV07XG5cdFx0XHRwb3NpdGlvbkRhdGFbMl0gKz0gY2hhbmdlWzJdO1xuXHRcdFx0cG9zaXRpb25EYXRhWzNdICs9IGNoYW5nZVswXTtcblx0XHRcdHBvc2l0aW9uRGF0YVs0XSArPSBjaGFuZ2VbMV07XG5cdFx0XHRwb3NpdGlvbkRhdGFbNV0gKz0gY2hhbmdlWzJdO1xuXHRcdH1cblx0XHR2YXIgbm9ybWFsRGF0YSA9IFsgMCwgMCwgMCwgMCwgMCwgMCBdO1xuXHRcdHZhciBpbmRleERhdGEgPSBbIDAsIDEgXTtcblx0XHR0aGlzLnN0b3JlRGF0YShwb3NpdGlvbkRhdGEsIG5vcm1hbERhdGEsIGluZGV4RGF0YSk7XG5cdH07XG5cdF8uZ2V0VGV4dCA9IGZ1bmN0aW9uKHNwZWNzKSB7XG5cdFx0dmFyIGRpc3QgPSB0aGlzLmExLmRpc3RhbmNlM0QodGhpcy5hMik7XG5cdFx0dmFyIGNlbnRlciA9IFsgKHRoaXMuYTEueCArIHRoaXMuYTIueCkgLyAyLCAodGhpcy5hMS55ICsgdGhpcy5hMi55KSAvIDIsICh0aGlzLmExLnogKyB0aGlzLmEyLnopIC8gMiBdO1xuXHRcdGlmICh0aGlzLm5vZGUpIHtcblx0XHRcdHZhciBjaGFuZ2UgPSB2My5zY2FsZSh0aGlzLmRpc3BsYWNlbWVudCwgdGhpcy5tb3ZlKy4xLCBbXSk7XG5cdFx0XHRjZW50ZXJbMF0gKz0gY2hhbmdlWzBdO1xuXHRcdFx0Y2VudGVyWzFdICs9IGNoYW5nZVsxXTtcblx0XHRcdGNlbnRlclsyXSArPSBjaGFuZ2VbMl07XG5cdFx0fVxuXHRcdHJldHVybiB7XG5cdFx0XHRwb3MgOiBjZW50ZXIsXG5cdFx0XHR2YWx1ZSA6IFsgZGlzdC50b0ZpeGVkKDIpLCAnIFxcdTIxMmInIF0uam9pbignJylcblx0XHR9O1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLkVMRU1FTlQsIENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgTWF0aCwgQ2hlbURvb2RsZS5saWIudmVjMyk7XG5cbihmdW5jdGlvbihtYXRoLCBkMywgdjMsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0ZDMuRm9nID0gZnVuY3Rpb24oY29sb3IsIGZvZ1N0YXJ0LCBmb2dFbmQsIGRlbnNpdHkpIHtcblx0XHR0aGlzLmZvZ1NjZW5lKGNvbG9yLCBmb2dTdGFydCwgZm9nRW5kLCBkZW5zaXR5KTtcblx0fTtcblx0dmFyIF8gPSBkMy5Gb2cucHJvdG90eXBlO1xuXHRfLmZvZ1NjZW5lID0gZnVuY3Rpb24oY29sb3IsIGZvZ1N0YXJ0LCBmb2dFbmQsIGRlbnNpdHkpIHtcblx0XHR0aGlzLmNvbG9yUkdCID0gbWF0aC5nZXRSR0IoY29sb3IsIDEpO1xuXHRcdHRoaXMuZm9nU3RhcnQgPSBmb2dTdGFydDtcblx0XHR0aGlzLmZvZ0VuZCA9IGZvZ0VuZDtcblx0XHR0aGlzLmRlbnNpdHkgPSBkZW5zaXR5O1xuXHR9O1xuXHRcbn0pKENoZW1Eb29kbGUubWF0aCwgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLmQzLCBDaGVtRG9vZGxlLmxpYi52ZWMzKTtcblxuKGZ1bmN0aW9uKEVMRU1FTlQsIGQzLCB1bmRlZmluZWQpIHtcblxuXHRkMy5MYWJlbCA9IGZ1bmN0aW9uKHRleHRJbWFnZSkge1xuXHR9O1xuXHR2YXIgXyA9IGQzLkxhYmVsLnByb3RvdHlwZTtcblx0Xy51cGRhdGVWZXJ0aWNlc0J1ZmZlciA9IGZ1bmN0aW9uKGdsLCBtb2xlY3VsZXMsIHNwZWNzKSB7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IG1vbGVjdWxlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgbW9sZWN1bGUgPSBtb2xlY3VsZXNbaV07XG5cdFx0XHR2YXIgbW9sZWN1bGVMYWJlbCA9IG1vbGVjdWxlLmxhYmVsTWVzaDtcblx0XHRcdHZhciBhdG9tcyA9IG1vbGVjdWxlLmF0b21zO1xuXHRcdFx0dmFyIHZlcnRleERhdGEgPSB7XG5cdFx0XHRcdHBvc2l0aW9uIDogW10sXG5cdFx0XHRcdHRleENvb3JkIDogW10sXG5cdFx0XHRcdHRyYW5zbGF0aW9uIDogW11cblx0XHRcdH07XG5cblx0XHRcdHZhciBpc01hY3JvID0gYXRvbXMubGVuZ3RoID4gMCAmJiBhdG9tc1swXS5oZXRhdG0gIT0gdW5kZWZpbmVkO1xuXG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gYXRvbXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHR2YXIgYXRvbSA9IGF0b21zW2pdO1xuXHRcdFx0XHRcblx0XHRcdFx0dmFyIGF0b21MYWJlbCA9IGF0b20ubGFiZWw7XG5cdFx0XHRcdHZhciB6RGVwdGggPSAwLjA1O1xuXG5cdFx0XHRcdC8vIFNwaGVyZSBvciBCYWxsIGFuZCBTdGlja1xuXHRcdFx0XHRpZiAoc3BlY3MuYXRvbXNfdXNlVkRXRGlhbWV0ZXJzXzNEKSB7XG5cdFx0XHRcdFx0dmFyIGFkZCA9IEVMRU1FTlRbYXRvbUxhYmVsXS52ZFdSYWRpdXMgKiBzcGVjcy5hdG9tc192ZHdNdWx0aXBsaWVyXzNEO1xuXHRcdFx0XHRcdGlmIChhZGQgPT09IDApIHtcblx0XHRcdFx0XHRcdGFkZCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHpEZXB0aCArPSBhZGQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gaWYgU3RpY2sgb3IgV2lyZWZyYW1lXG5cdFx0XHRcdGVsc2UgaWYgKHNwZWNzLmF0b21zX3NwaGVyZURpYW1ldGVyXzNEKSB7XG5cdFx0XHRcdFx0ekRlcHRoICs9IHNwZWNzLmF0b21zX3NwaGVyZURpYW1ldGVyXzNEIC8gMiAqIDEuNTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChpc01hY3JvKSB7XG5cdFx0XHRcdFx0aWYgKCFhdG9tLmhldGF0bSkge1xuXHRcdFx0XHRcdFx0aWYgKCFzcGVjcy5tYWNyb19kaXNwbGF5QXRvbXMpIHtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChhdG9tLmlzV2F0ZXIpIHtcblx0XHRcdFx0XHRcdGlmICghc3BlY3MubWFjcm9fc2hvd1dhdGVycykge1xuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGdsLnRleHRJbWFnZS5wdXNoVmVydGV4RGF0YShhdG9tLmFsdExhYmVsID8gYXRvbS5hbHRMYWJlbCA6IGF0b20ubGFiZWwsIFsgYXRvbS54LCBhdG9tLnksIGF0b20ueiBdLCB6RGVwdGgsIHZlcnRleERhdGEpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBjaGFpbnMgPSBtb2xlY3VsZS5jaGFpbnM7XG5cblx0XHRcdGlmIChjaGFpbnMgJiYgKHNwZWNzLnByb3RlaW5zX2Rpc3BsYXlSaWJib24gfHwgc3BlY3MucHJvdGVpbnNfZGlzcGxheUJhY2tib25lKSkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBjaGFpbnMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdHZhciBjaGFpbiA9IGNoYWluc1tqXTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBrID0gMCwga2sgPSBjaGFpbi5sZW5ndGg7IGsgPCBrazsgaysrKSB7XG5cdFx0XHRcdFx0XHR2YXIgcmVzaWR1ZSA9IGNoYWluW2tdO1xuXG5cdFx0XHRcdFx0XHRpZiAocmVzaWR1ZS5uYW1lKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBhdG9tID0gcmVzaWR1ZS5jcDE7XG5cdFx0XHRcdFx0XHRcdGdsLnRleHRJbWFnZS5wdXNoVmVydGV4RGF0YShyZXNpZHVlLm5hbWUsIFsgYXRvbS54LCBhdG9tLnksIGF0b20ueiBdLCAyLCB2ZXJ0ZXhEYXRhKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRtb2xlY3VsZUxhYmVsLnN0b3JlRGF0YShnbCwgdmVydGV4RGF0YS5wb3NpdGlvbiwgdmVydGV4RGF0YS50ZXhDb29yZCwgdmVydGV4RGF0YS50cmFuc2xhdGlvbiwgdmVydGV4RGF0YS56RGVwdGgpO1xuXHRcdH1cblx0fTtcblx0Xy5yZW5kZXIgPSBmdW5jdGlvbihnbCwgc3BlY3MsIG1vbGVjdWxlcykge1xuXHRcdC8vIHVzZSBwcm9qZWN0aW9uIGZvciBzaGFkZXIgdGV4dC5cblx0XHRnbC5zaGFkZXIuc2V0TWF0cml4VW5pZm9ybXMoZ2wpO1xuXG5cdFx0Z2wudGV4dEltYWdlLnVzZVRleHR1cmUoZ2wpO1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xlY3VsZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0aWYgKG1vbGVjdWxlc1tpXS5sYWJlbE1lc2gpIHtcblx0XHRcdFx0bW9sZWN1bGVzW2ldLmxhYmVsTWVzaC5yZW5kZXIoZ2wpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxufSkoQ2hlbURvb2RsZS5FTEVNRU5ULCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDMpO1xuXG4oZnVuY3Rpb24oZDMsIG0sIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLlNwaGVyZSA9IGZ1bmN0aW9uKHJhZGl1cywgbGF0aXR1ZGVCYW5kcywgbG9uZ2l0dWRlQmFuZHMpIHtcblx0XHR2YXIgcG9zaXRpb25EYXRhID0gW107XG5cdFx0dmFyIG5vcm1hbERhdGEgPSBbXTtcblx0XHRmb3IgKCB2YXIgbGF0TnVtYmVyID0gMDsgbGF0TnVtYmVyIDw9IGxhdGl0dWRlQmFuZHM7IGxhdE51bWJlcisrKSB7XG5cdFx0XHR2YXIgdGhldGEgPSBsYXROdW1iZXIgKiBtLlBJIC8gbGF0aXR1ZGVCYW5kcztcblx0XHRcdHZhciBzaW5UaGV0YSA9IG0uc2luKHRoZXRhKTtcblx0XHRcdHZhciBjb3NUaGV0YSA9IG0uY29zKHRoZXRhKTtcblxuXHRcdFx0Zm9yICggdmFyIGxvbmdOdW1iZXIgPSAwOyBsb25nTnVtYmVyIDw9IGxvbmdpdHVkZUJhbmRzOyBsb25nTnVtYmVyKyspIHtcblx0XHRcdFx0dmFyIHBoaSA9IGxvbmdOdW1iZXIgKiAyICogbS5QSSAvIGxvbmdpdHVkZUJhbmRzO1xuXHRcdFx0XHR2YXIgc2luUGhpID0gbS5zaW4ocGhpKTtcblx0XHRcdFx0dmFyIGNvc1BoaSA9IG0uY29zKHBoaSk7XG5cblx0XHRcdFx0dmFyIHggPSBjb3NQaGkgKiBzaW5UaGV0YTtcblx0XHRcdFx0dmFyIHkgPSBjb3NUaGV0YTtcblx0XHRcdFx0dmFyIHogPSBzaW5QaGkgKiBzaW5UaGV0YTtcblxuXHRcdFx0XHRub3JtYWxEYXRhLnB1c2goeCwgeSwgeik7XG5cdFx0XHRcdHBvc2l0aW9uRGF0YS5wdXNoKHJhZGl1cyAqIHgsIHJhZGl1cyAqIHksIHJhZGl1cyAqIHopO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBpbmRleERhdGEgPSBbXTtcblx0XHRsb25naXR1ZGVCYW5kcyArPSAxO1xuXHRcdGZvciAoIHZhciBsYXROdW1iZXIgPSAwOyBsYXROdW1iZXIgPCBsYXRpdHVkZUJhbmRzOyBsYXROdW1iZXIrKykge1xuXHRcdFx0Zm9yICggdmFyIGxvbmdOdW1iZXIgPSAwOyBsb25nTnVtYmVyIDwgbG9uZ2l0dWRlQmFuZHM7IGxvbmdOdW1iZXIrKykge1xuXHRcdFx0XHR2YXIgZmlyc3QgPSAobGF0TnVtYmVyICogbG9uZ2l0dWRlQmFuZHMpICsgKGxvbmdOdW1iZXIgJSBsb25naXR1ZGVCYW5kcyk7XG5cdFx0XHRcdHZhciBzZWNvbmQgPSBmaXJzdCArIGxvbmdpdHVkZUJhbmRzO1xuXHRcdFx0XHRpbmRleERhdGEucHVzaChmaXJzdCwgZmlyc3QgKyAxLCBzZWNvbmQpO1xuXHRcdFx0XHRpZiAobG9uZ051bWJlciA8IGxvbmdpdHVkZUJhbmRzIC0gMSkge1xuXHRcdFx0XHRcdGluZGV4RGF0YS5wdXNoKHNlY29uZCwgZmlyc3QgKyAxLCBzZWNvbmQgKyAxKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuc3RvcmVEYXRhKHBvc2l0aW9uRGF0YSwgbm9ybWFsRGF0YSwgaW5kZXhEYXRhKTtcblx0fTtcblx0ZDMuU3BoZXJlLnByb3RvdHlwZSA9IG5ldyBkMy5fTWVzaCgpO1xuXG59KShDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDMsIE1hdGgpO1xuXG4oZnVuY3Rpb24oUkVTSURVRSwgZDMsIG0sIHYzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgbG9hZFBhcnRpdGlvbiA9IGZ1bmN0aW9uKGdsLCBwKSB7XG5cdFx0Ly8gcG9zaXRpb25zXG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHAudmVydGV4UG9zaXRpb25CdWZmZXIpO1xuXHRcdGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoZ2wuc2hhZGVyLnZlcnRleFBvc2l0aW9uQXR0cmlidXRlLCBwLnZlcnRleFBvc2l0aW9uQnVmZmVyLml0ZW1TaXplLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXHRcdC8vIG5vcm1hbHNcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgcC52ZXJ0ZXhOb3JtYWxCdWZmZXIpO1xuXHRcdGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoZ2wuc2hhZGVyLnZlcnRleE5vcm1hbEF0dHJpYnV0ZSwgcC52ZXJ0ZXhOb3JtYWxCdWZmZXIuaXRlbVNpemUsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG5cdFx0Ly8gaW5kZXhlc1xuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHAudmVydGV4SW5kZXhCdWZmZXIpO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIFN1YlJpYmJvbihlbnRpcmUsIG5hbWUsIGluZGV4ZXMsIHBpKSB7XG5cdFx0dGhpcy5lbnRpcmUgPSBlbnRpcmU7XG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblx0XHR0aGlzLmluZGV4ZXMgPSBpbmRleGVzO1xuXHRcdHRoaXMucGkgPSBwaTtcblx0fVxuXHR2YXIgXzIgPSBTdWJSaWJib24ucHJvdG90eXBlO1xuXHQvLyBOT1RFOiBUbyB1c2UgcmFpbmJvdyBjb2xvcmluZyBmb3IgY2hhaW5zLCBpdCBuZWVkcyBjb2xvcmluZyBlYWNoIHJlc2lkdWUgd2l0aCB0b3RhbCByZXNpZHVlIGNvdW50XG5cdC8vIGFuZCBjdXJyZW50IGluZGV4IHJlc2lkdWUgaW4gY2hhaW4gcGFyYW1ldGVycy5cblx0XzIuZ2V0Q29sb3IgPSBmdW5jdGlvbihzcGVjcykge1xuXHRcdGlmIChzcGVjcy5tYWNyb19jb2xvckJ5Q2hhaW4pIHtcblx0XHRcdHJldHVybiB0aGlzLmVudGlyZS5jaGFpbkNvbG9yO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5uYW1lKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRSZXNpZHVlQ29sb3IoUkVTSURVRVt0aGlzLm5hbWVdID8gdGhpcy5uYW1lIDogJyonLCBzcGVjcyk7XG5cdFx0fSBlbHNlIGlmICh0aGlzLmhlbGl4KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lbnRpcmUuZnJvbnQgPyBzcGVjcy5wcm90ZWluc19yaWJib25DYXJ0b29uSGVsaXhQcmltYXJ5Q29sb3IgOiBzcGVjcy5wcm90ZWluc19yaWJib25DYXJ0b29uSGVsaXhTZWNvbmRhcnlDb2xvcjtcblx0XHR9IGVsc2UgaWYgKHRoaXMuc2hlZXQpIHtcblx0XHRcdHJldHVybiBzcGVjcy5wcm90ZWluc19yaWJib25DYXJ0b29uU2hlZXRDb2xvcjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuZW50aXJlLmZyb250ID8gc3BlY3MucHJvdGVpbnNfcHJpbWFyeUNvbG9yIDogc3BlY3MucHJvdGVpbnNfc2Vjb25kYXJ5Q29sb3I7XG5cdFx0fVxuXHR9O1xuXHRfMi5nZXRSZXNpZHVlQ29sb3IgPSBmdW5jdGlvbihuYW1lLCBzcGVjcykge1xuXHRcdHZhciByID0gUkVTSURVRVtuYW1lXTtcblx0XHRpZiAoc3BlY3MucHJvdGVpbnNfcmVzaWR1ZUNvbG9yID09PSAnc2hhcGVseScpIHtcblx0XHRcdHJldHVybiByLnNoYXBlbHlDb2xvcjtcblx0XHR9IGVsc2UgaWYgKHNwZWNzLnByb3RlaW5zX3Jlc2lkdWVDb2xvciA9PT0gJ2FtaW5vJykge1xuXHRcdFx0cmV0dXJuIHIuYW1pbm9Db2xvcjtcblx0XHR9IGVsc2UgaWYgKHNwZWNzLnByb3RlaW5zX3Jlc2lkdWVDb2xvciA9PT0gJ3BvbGFyaXR5Jykge1xuXHRcdFx0aWYgKHIucG9sYXIpIHtcblx0XHRcdFx0cmV0dXJuICcjQzEwMDAwJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiAnI0ZGRkZGRic7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChzcGVjcy5wcm90ZWluc19yZXNpZHVlQ29sb3IgPT09ICdhY2lkaXR5Jykge1xuXHRcdFx0aWYoci5hY2lkaXR5ID09PSAxKXtcblx0XHRcdFx0cmV0dXJuICcjMDAwMEZGJztcblx0XHRcdH1lbHNlIGlmKHIuYWNpZGl0eSA9PT0gLTEpe1xuXHRcdFx0XHRyZXR1cm4gJyNGRjAwMDAnO1xuXHRcdFx0fWVsc2UgaWYgKHIucG9sYXIpIHtcblx0XHRcdFx0cmV0dXJuICcjRkZGRkZGJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiAnIzc3MzMwMCc7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAnI0ZGRkZGRic7XG5cdH07XG5cdF8yLnJlbmRlciA9IGZ1bmN0aW9uKGdsLCBzcGVjcywgbm9Db2xvcikge1xuXHRcdGlmICh0aGlzLmVudGlyZS5wYXJ0aXRpb25zICYmIHRoaXMucGkgIT09IHRoaXMuZW50aXJlLnBhcnRpdGlvbnMubGFzdFJlbmRlcikge1xuXHRcdFx0bG9hZFBhcnRpdGlvbihnbCwgdGhpcy5lbnRpcmUucGFydGl0aW9uc1t0aGlzLnBpXSk7XG5cdFx0XHR0aGlzLmVudGlyZS5wYXJ0aXRpb25zLmxhc3RSZW5kZXIgPSB0aGlzLnBpO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMudmVydGV4SW5kZXhCdWZmZXIpIHtcblx0XHRcdHRoaXMudmVydGV4SW5kZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcblx0XHRcdGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMudmVydGV4SW5kZXhCdWZmZXIpO1xuXHRcdFx0Z2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbmV3IFVpbnQxNkFycmF5KHRoaXMuaW5kZXhlcyksIGdsLlNUQVRJQ19EUkFXKTtcblx0XHRcdHRoaXMudmVydGV4SW5kZXhCdWZmZXIuaXRlbVNpemUgPSAxO1xuXHRcdFx0dGhpcy52ZXJ0ZXhJbmRleEJ1ZmZlci5udW1JdGVtcyA9IHRoaXMuaW5kZXhlcy5sZW5ndGg7XG5cdFx0fVxuXHRcdC8vIGluZGV4ZXNcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLnZlcnRleEluZGV4QnVmZmVyKTtcblx0XHQvLyBjb2xvcnNcblx0XHRpZiAoIW5vQ29sb3IgJiYgc3BlY3MucHJvdGVpbnNfcmVzaWR1ZUNvbG9yICE9PSAncmFpbmJvdycpIHtcblx0XHRcdGdsLm1hdGVyaWFsLnNldERpZmZ1c2VDb2xvcihnbCwgdGhpcy5nZXRDb2xvcihzcGVjcykpO1xuXHRcdH1cblx0XHQvLyByZW5kZXJcblx0XHRnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCB0aGlzLnZlcnRleEluZGV4QnVmZmVyLm51bUl0ZW1zLCBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XG5cdH07XG5cblx0ZDMuUmliYm9uID0gZnVuY3Rpb24oY2hhaW4sIG9mZnNldCwgY2FydG9vbikge1xuXHRcdC8vIHJpYmJvbiBtZXNoZXMgYnVpbGQgZnJvbnQgdG8gYmFjaywgbm90IHNpZGUgdG8gc2lkZSwgc28ga2VlcCB0aGlzIGluXG5cdFx0Ly8gbWluZFxuXHRcdHZhciBsaW5lU2VnbWVudE51bSA9IGNoYWluWzBdLmxpbmVTZWdtZW50cy5sZW5ndGg7XG5cdFx0dmFyIGxpbmVTZWdtZW50TGVuZ3RoID0gY2hhaW5bMF0ubGluZVNlZ21lbnRzWzBdLmxlbmd0aDtcblx0XHR0aGlzLnBhcnRpdGlvbnMgPSBbXTtcblx0XHR0aGlzLnBhcnRpdGlvbnMubGFzdFJlbmRlciA9IDA7XG5cdFx0dmFyIGN1cnJlbnRQYXJ0aXRpb247XG5cdFx0dGhpcy5mcm9udCA9IG9mZnNldCA+IDA7XG5cdFx0Ly8gY2FsY3VsYXRlIHZlcnRleCBhbmQgbm9ybWFsIHBvaW50c1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBjaGFpbi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRpZiAoIWN1cnJlbnRQYXJ0aXRpb24gfHwgY3VycmVudFBhcnRpdGlvbi5wb3NpdGlvbkRhdGEubGVuZ3RoID4gNjUwMDApIHtcblx0XHRcdFx0aWYgKHRoaXMucGFydGl0aW9ucy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0aS0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24gPSB7XG5cdFx0XHRcdFx0Y291bnQgOiAwLFxuXHRcdFx0XHRcdHBvc2l0aW9uRGF0YSA6IFtdLFxuXHRcdFx0XHRcdG5vcm1hbERhdGEgOiBbXVxuXHRcdFx0XHR9O1xuXHRcdFx0XHR0aGlzLnBhcnRpdGlvbnMucHVzaChjdXJyZW50UGFydGl0aW9uKTtcblx0XHRcdH1cblx0XHRcdHZhciByZXNpZHVlID0gY2hhaW5baV07XG5cdFx0XHRjdXJyZW50UGFydGl0aW9uLmNvdW50Kys7XG5cdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCBsaW5lU2VnbWVudE51bTsgaisrKSB7XG5cdFx0XHRcdHZhciBsaW5lU2VnbWVudCA9IGNhcnRvb24gPyByZXNpZHVlLmxpbmVTZWdtZW50c0NhcnRvb25bal0gOiByZXNpZHVlLmxpbmVTZWdtZW50c1tqXTtcblx0XHRcdFx0dmFyIGRvU2lkZTEgPSBqID09PSAwO1xuXHRcdFx0XHR2YXIgZG9TaWRlMiA9IGZhbHNlO1xuXHRcdFx0XHRmb3IgKCB2YXIgayA9IDA7IGsgPCBsaW5lU2VnbWVudExlbmd0aDsgaysrKSB7XG5cdFx0XHRcdFx0dmFyIGEgPSBsaW5lU2VnbWVudFtrXTtcblx0XHRcdFx0XHQvLyBub3JtYWxzXG5cdFx0XHRcdFx0dmFyIGFib3ZlaSA9IGk7XG5cdFx0XHRcdFx0dmFyIGFib3ZlayA9IGsgKyAxO1xuXHRcdFx0XHRcdGlmIChpID09PSBjaGFpbi5sZW5ndGggLSAxICYmIGsgPT09IGxpbmVTZWdtZW50TGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRcdFx0YWJvdmVrLS07XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChrID09PSBsaW5lU2VnbWVudExlbmd0aCAtIDEpIHtcblx0XHRcdFx0XHRcdGFib3ZlaSsrO1xuXHRcdFx0XHRcdFx0YWJvdmVrID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFyIGFib3ZlID0gY2FydG9vbiA/IGNoYWluW2Fib3ZlaV0ubGluZVNlZ21lbnRzQ2FydG9vbltqXVthYm92ZWtdIDogY2hhaW5bYWJvdmVpXS5saW5lU2VnbWVudHNbal1bYWJvdmVrXTtcblx0XHRcdFx0XHR2YXIgbmVnYXRlID0gZmFsc2U7XG5cdFx0XHRcdFx0dmFyIG5leHRqID0gaiArIDE7XG5cdFx0XHRcdFx0aWYgKGogPT09IGxpbmVTZWdtZW50TnVtIC0gMSkge1xuXHRcdFx0XHRcdFx0bmV4dGogLT0gMjtcblx0XHRcdFx0XHRcdG5lZ2F0ZSA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciBzaWRlID0gY2FydG9vbiA/IHJlc2lkdWUubGluZVNlZ21lbnRzQ2FydG9vbltuZXh0al1ba10gOiByZXNpZHVlLmxpbmVTZWdtZW50c1tuZXh0al1ba107XG5cdFx0XHRcdFx0dmFyIHRvQWJvdmUgPSBbIGFib3ZlLnggLSBhLngsIGFib3ZlLnkgLSBhLnksIGFib3ZlLnogLSBhLnogXTtcblx0XHRcdFx0XHR2YXIgdG9TaWRlID0gWyBzaWRlLnggLSBhLngsIHNpZGUueSAtIGEueSwgc2lkZS56IC0gYS56IF07XG5cdFx0XHRcdFx0dmFyIG5vcm1hbCA9IHYzLmNyb3NzKHRvQWJvdmUsIHRvU2lkZSwgW10pO1xuXHRcdFx0XHRcdC8vIHBvc2l0aW9uc1xuXHRcdFx0XHRcdGlmIChrID09PSAwKSB7XG5cdFx0XHRcdFx0XHQvLyB0aXBcblx0XHRcdFx0XHRcdHYzLm5vcm1hbGl6ZSh0b0Fib3ZlKTtcblx0XHRcdFx0XHRcdHYzLnNjYWxlKHRvQWJvdmUsIC0xKTtcblx0XHRcdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24ubm9ybWFsRGF0YS5wdXNoKHRvQWJvdmVbMF0sIHRvQWJvdmVbMV0sIHRvQWJvdmVbMl0pO1xuXHRcdFx0XHRcdFx0Y3VycmVudFBhcnRpdGlvbi5wb3NpdGlvbkRhdGEucHVzaChhLngsIGEueSwgYS56KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGRvU2lkZTEgfHwgZG9TaWRlMikge1xuXHRcdFx0XHRcdFx0Ly8gc2lkZXNcblx0XHRcdFx0XHRcdHYzLm5vcm1hbGl6ZSh0b1NpZGUpO1xuXHRcdFx0XHRcdFx0djMuc2NhbGUodG9TaWRlLCAtMSk7XG5cdFx0XHRcdFx0XHRjdXJyZW50UGFydGl0aW9uLm5vcm1hbERhdGEucHVzaCh0b1NpZGVbMF0sIHRvU2lkZVsxXSwgdG9TaWRlWzJdKTtcblx0XHRcdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24ucG9zaXRpb25EYXRhLnB1c2goYS54LCBhLnksIGEueik7XG5cdFx0XHRcdFx0XHRpZiAoZG9TaWRlMSAmJiBrID09PSBsaW5lU2VnbWVudExlbmd0aCAtIDEpIHtcblx0XHRcdFx0XHRcdFx0ZG9TaWRlMSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRrID0gLTE7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdC8vIGNlbnRlciBzdHJpcHNcblx0XHRcdFx0XHRcdHYzLm5vcm1hbGl6ZShub3JtYWwpO1xuXHRcdFx0XHRcdFx0aWYgKG5lZ2F0ZSAmJiAhdGhpcy5mcm9udCB8fCAhbmVnYXRlICYmIHRoaXMuZnJvbnQpIHtcblx0XHRcdFx0XHRcdFx0djMuc2NhbGUobm9ybWFsLCAtMSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjdXJyZW50UGFydGl0aW9uLm5vcm1hbERhdGEucHVzaChub3JtYWxbMF0sIG5vcm1hbFsxXSwgbm9ybWFsWzJdKTtcblx0XHRcdFx0XHRcdHYzLnNjYWxlKG5vcm1hbCwgbS5hYnMob2Zmc2V0KSk7XG5cdFx0XHRcdFx0XHRjdXJyZW50UGFydGl0aW9uLnBvc2l0aW9uRGF0YS5wdXNoKGEueCArIG5vcm1hbFswXSwgYS55ICsgbm9ybWFsWzFdLCBhLnogKyBub3JtYWxbMl0pO1xuXHRcdFx0XHRcdFx0aWYgKGogPT09IGxpbmVTZWdtZW50TnVtIC0gMSAmJiBrID09PSBsaW5lU2VnbWVudExlbmd0aCAtIDEpIHtcblx0XHRcdFx0XHRcdFx0ZG9TaWRlMiA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdGsgPSAtMTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGsgPT09IC0xIHx8IGsgPT09IGxpbmVTZWdtZW50TGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRcdFx0Ly8gZW5kXG5cdFx0XHRcdFx0XHR2My5ub3JtYWxpemUodG9BYm92ZSk7XG5cdFx0XHRcdFx0XHRjdXJyZW50UGFydGl0aW9uLm5vcm1hbERhdGEucHVzaCh0b0Fib3ZlWzBdLCB0b0Fib3ZlWzFdLCB0b0Fib3ZlWzJdKTtcblx0XHRcdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24ucG9zaXRpb25EYXRhLnB1c2goYS54LCBhLnksIGEueik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdC8vIGJ1aWxkIG1lc2ggY29ubmVjdGl2aXR5XG5cdFx0Ly8gYWRkIDIgdG8gbGluZVNlZ21lbnROdW0gYW5kIGxpbmVTZWdtZW50TGVuZ3RoIHRvIGFjY291bnQgZm9yIHNpZGVzXG5cdFx0Ly8gYW5kIGVuZHNcblx0XHRsaW5lU2VnbWVudE51bSArPSAyO1xuXHRcdGxpbmVTZWdtZW50TGVuZ3RoICs9IDI7XG5cdFx0dGhpcy5zZWdtZW50cyA9IFtdO1xuXHRcdHRoaXMucGFydGl0aW9uU2VnbWVudHMgPSBbXTtcblx0XHRmb3IgKCB2YXIgbiA9IDAsIG5uID0gdGhpcy5wYXJ0aXRpb25zLmxlbmd0aDsgbiA8IG5uOyBuKyspIHtcblx0XHRcdHZhciBjdXJyZW50UGFydGl0aW9uID0gdGhpcy5wYXJ0aXRpb25zW25dO1xuXHRcdFx0dmFyIHBhcnRpdGlvblNlZ21lbnRJbmRleERhdGEgPSBbXTtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBjdXJyZW50UGFydGl0aW9uLmNvdW50IC0gMTsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIGNoYWluSW5kZXggPSBpO1xuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCBuOyBqKyspIHtcblx0XHRcdFx0XHRjaGFpbkluZGV4ICs9IHRoaXMucGFydGl0aW9uc1tqXS5jb3VudCAtIDE7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGMgPSBjaGFpbltjaGFpbkluZGV4XTtcblx0XHRcdFx0dmFyIHJlc2lkdWVJbmRleFN0YXJ0ID0gaSAqIGxpbmVTZWdtZW50TnVtICogbGluZVNlZ21lbnRMZW5ndGg7XG5cdFx0XHRcdHZhciBpbmRpdmlkdWFsSW5kZXhEYXRhID0gW107XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBsaW5lU2VnbWVudE51bSAtIDE7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIHNlZ21lbnRJbmRleFN0YXJ0ID0gcmVzaWR1ZUluZGV4U3RhcnQgKyBqICogbGluZVNlZ21lbnRMZW5ndGg7XG5cdFx0XHRcdFx0Zm9yICggdmFyIGsgPSAwOyBrIDwgbGluZVNlZ21lbnRMZW5ndGgtMTsgaysrKSB7XG5cdFx0XHRcdFx0XHR2YXIgbmV4dFJlcyA9IDE7XG5cdFx0XHRcdFx0XHRpZiAoaSA9PT0gaWkpIHtcblx0XHRcdFx0XHRcdFx0bmV4dFJlcyA9IDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR2YXIgYWRkID0gWyBzZWdtZW50SW5kZXhTdGFydCArIGssIHNlZ21lbnRJbmRleFN0YXJ0ICsgbGluZVNlZ21lbnRMZW5ndGggKyBrLCBzZWdtZW50SW5kZXhTdGFydCArIGxpbmVTZWdtZW50TGVuZ3RoICsgayArIG5leHRSZXMsIHNlZ21lbnRJbmRleFN0YXJ0ICsgaywgc2VnbWVudEluZGV4U3RhcnQgKyBrICsgbmV4dFJlcywgc2VnbWVudEluZGV4U3RhcnQgKyBsaW5lU2VnbWVudExlbmd0aCArIGsgKyBuZXh0UmVzIF07XG5cdFx0XHRcdFx0XHRpZiAoayAhPT0gbGluZVNlZ21lbnRMZW5ndGggLSAxKSB7XG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLmZyb250KSB7XG5cdFx0XHRcdFx0XHRcdFx0aW5kaXZpZHVhbEluZGV4RGF0YS5wdXNoKGFkZFswXSwgYWRkWzFdLCBhZGRbMl0sIGFkZFszXSwgYWRkWzVdLCBhZGRbNF0pO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGluZGl2aWR1YWxJbmRleERhdGEucHVzaChhZGRbMF0sIGFkZFsyXSwgYWRkWzFdLCBhZGRbM10sIGFkZFs0XSwgYWRkWzVdKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGsgPT09IGxpbmVTZWdtZW50TGVuZ3RoIC0gMiAmJiAhKGkgPT09IGN1cnJlbnRQYXJ0aXRpb24uY291bnQgLSAyICYmIG4gPT09IHRoaXMucGFydGl0aW9ucy5sZW5ndGggLSAxKSkge1xuXHRcdFx0XHRcdFx0XHQvLyBqdW1wIHRoZSBnYXAsIHRoZSBvdGhlciBtZXNoIHBvaW50cyB3aWxsIGJlXG5cdFx0XHRcdFx0XHRcdC8vIGNvdmVyZWQsXG5cdFx0XHRcdFx0XHRcdC8vIHNvIG5vIG5lZWQgdG8gZXhwbGljaXRseSBza2lwIHRoZW1cblx0XHRcdFx0XHRcdFx0dmFyIGp1bXAgPSBsaW5lU2VnbWVudE51bSAqIGxpbmVTZWdtZW50TGVuZ3RoIC0gaztcblx0XHRcdFx0XHRcdFx0YWRkWzJdICs9IGp1bXA7XG5cdFx0XHRcdFx0XHRcdGFkZFs0XSArPSBqdW1wO1xuXHRcdFx0XHRcdFx0XHRhZGRbNV0gKz0ganVtcDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICh0aGlzLmZyb250KSB7XG5cdFx0XHRcdFx0XHRcdHBhcnRpdGlvblNlZ21lbnRJbmRleERhdGEucHVzaChhZGRbMF0sIGFkZFsxXSwgYWRkWzJdLCBhZGRbM10sIGFkZFs1XSwgYWRkWzRdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHBhcnRpdGlvblNlZ21lbnRJbmRleERhdGEucHVzaChhZGRbMF0sIGFkZFsyXSwgYWRkWzFdLCBhZGRbM10sIGFkZFs0XSwgYWRkWzVdKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY2FydG9vbiAmJiBjLnNwbGl0KSB7XG5cdFx0XHRcdFx0dmFyIHNyID0gbmV3IFN1YlJpYmJvbih0aGlzLCB1bmRlZmluZWQsIHBhcnRpdGlvblNlZ21lbnRJbmRleERhdGEsIG4pO1xuXHRcdFx0XHRcdHNyLmhlbGl4ID0gYy5oZWxpeDtcblx0XHRcdFx0XHRzci5zaGVldCA9IGMuc2hlZXQ7XG5cdFx0XHRcdFx0dGhpcy5wYXJ0aXRpb25TZWdtZW50cy5wdXNoKHNyKTtcblx0XHRcdFx0XHRwYXJ0aXRpb25TZWdtZW50SW5kZXhEYXRhID0gW107XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLnNlZ21lbnRzLnB1c2gobmV3IFN1YlJpYmJvbih0aGlzLCBjLm5hbWUsIGluZGl2aWR1YWxJbmRleERhdGEsIG4pKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHNyID0gbmV3IFN1YlJpYmJvbih0aGlzLCB1bmRlZmluZWQsIHBhcnRpdGlvblNlZ21lbnRJbmRleERhdGEsIG4pO1xuXHRcdFx0c3IuaGVsaXggPSBjLmhlbGl4O1xuXHRcdFx0c3Iuc2hlZXQgPSBjLnNoZWV0O1xuXHRcdFx0dGhpcy5wYXJ0aXRpb25TZWdtZW50cy5wdXNoKHNyKTtcblx0XHR9XG5cdFx0dGhpcy5zdG9yZURhdGEodGhpcy5wYXJ0aXRpb25zWzBdLnBvc2l0aW9uRGF0YSwgdGhpcy5wYXJ0aXRpb25zWzBdLm5vcm1hbERhdGEpO1xuXHRcdGlmICh0aGlzLnBhcnRpdGlvbnMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHQvLyBjbGVhciBwYXJ0aXRpb25zIHRvIHJlZHVjZSBvdmVyaGVhZFxuXHRcdFx0dGhpcy5wYXJ0aXRpb25zID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fTtcblx0dmFyIF8gPSBkMy5SaWJib24ucHJvdG90eXBlID0gbmV3IGQzLl9NZXNoKCk7XG5cdF8ucmVuZGVyID0gZnVuY3Rpb24oZ2wsIHNwZWNzKSB7XG5cdFx0dGhpcy5iaW5kQnVmZmVycyhnbCk7XG5cdFx0Ly8gY29sb3JzXG5cdFx0dmFyIGNvbG9yID0gc3BlY3MubWFjcm9fY29sb3JCeUNoYWluID8gdGhpcy5jaGFpbkNvbG9yIDogdW5kZWZpbmVkO1xuXHRcdGlmICghY29sb3IpIHtcblx0XHRcdGNvbG9yID0gdGhpcy5mcm9udCA/IHNwZWNzLnByb3RlaW5zX3ByaW1hcnlDb2xvciA6IHNwZWNzLnByb3RlaW5zX3NlY29uZGFyeUNvbG9yO1xuXHRcdH1cblx0XHRnbC5tYXRlcmlhbC5zZXREaWZmdXNlQ29sb3IoZ2wsIGNvbG9yKTtcblx0XHRcdFxuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLnBhcnRpdGlvblNlZ21lbnRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHRoaXMucGFydGl0aW9uU2VnbWVudHNbaV0ucmVuZGVyKGdsLCBzcGVjcywgIXNwZWNzLnByb3RlaW5zX3JpYmJvbkNhcnRvb25pemUpO1xuXHRcdH1cblx0fTtcblxufSkoQ2hlbURvb2RsZS5SRVNJRFVFLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDMsIE1hdGgsIENoZW1Eb29kbGUubGliLnZlYzMpO1xuXG4oZnVuY3Rpb24obWF0aCwgZDMsIHYzLCBtNCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDMuTGlnaHQgPSBmdW5jdGlvbihkaWZmdXNlQ29sb3IsIHNwZWN1bGFyQ29sb3IsIGRpcmVjdGlvbikge1xuXHRcdHRoaXMuY2FtZXJhID0gbmV3IGQzLkNhbWVyYSgpO1xuXHRcdHRoaXMubGlnaHRTY2VuZShkaWZmdXNlQ29sb3IsIHNwZWN1bGFyQ29sb3IsIGRpcmVjdGlvbik7XG5cdH07XG5cdHZhciBfID0gZDMuTGlnaHQucHJvdG90eXBlO1xuXHRfLmxpZ2h0U2NlbmUgPSBmdW5jdGlvbihkaWZmdXNlQ29sb3IsIHNwZWN1bGFyQ29sb3IsIGRpcmVjdGlvbikge1xuXHRcdHRoaXMuZGlmZnVzZVJHQiA9IG1hdGguZ2V0UkdCKGRpZmZ1c2VDb2xvciwgMSk7XG5cdFx0dGhpcy5zcGVjdWxhclJHQiA9IG1hdGguZ2V0UkdCKHNwZWN1bGFyQ29sb3IsIDEpO1xuXHRcdHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuXHRcdHRoaXMudXBkYXRlVmlldygpO1xuXHR9O1xuXHRfLnVwZGF0ZVZpZXcgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgbGlnaHREaXIgPSB2My5ub3JtYWxpemUodGhpcy5kaXJlY3Rpb24sIFtdKTtcblx0XHR2YXIgZXllUG9zID0gdjMuc2NhbGUobGlnaHREaXIsICh0aGlzLmNhbWVyYS5uZWFyIC0gdGhpcy5jYW1lcmEuZmFyKSAvIDIgLSB0aGlzLmNhbWVyYS5uZWFyLCBbXSk7XG5cdFx0dmFyIHVwID0gdjMuZXF1YWwobGlnaHREaXIsIFswLCAxLCAwXSkgPyBbMCwgMCwgMV0gOiBbMCwgMSwgMF07XG5cdFx0bTQubG9va0F0KGV5ZVBvcywgWzAsIDAsIDBdLCB1cCwgdGhpcy5jYW1lcmEudmlld01hdHJpeCk7XG5cdFx0dGhpcy5jYW1lcmEub3J0aG9nb25hbFByb2plY3Rpb25NYXRyaXgoKTtcblx0fTtcblxufSkoQ2hlbURvb2RsZS5tYXRoLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDMsIENoZW1Eb29kbGUubGliLnZlYzMsIENoZW1Eb29kbGUubGliLm1hdDQpO1xuXG4oZnVuY3Rpb24oZDMsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLkxpbmUgPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnN0b3JlRGF0YShbIDAsIDAsIDAsIDAsIDEsIDAgXSwgWyAwLCAwLCAwLCAwLCAwLCAwIF0pO1xuXHR9O1xuXHRkMy5MaW5lLnByb3RvdHlwZSA9IG5ldyBkMy5fTWVzaCgpO1xuXG59KShDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDMpO1xuXG4oZnVuY3Rpb24obWF0aCwgZDMsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLk1hdGVyaWFsID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfID0gZDMuTWF0ZXJpYWwucHJvdG90eXBlO1xuXHRfLnNldFRlbXBDb2xvcnMgPSBmdW5jdGlvbihnbCwgYW1iaWVudENvbG9yLCBkaWZmdXNlQ29sb3IsIHNwZWN1bGFyQ29sb3IsIHNoaW5pbmVzcykge1xuXHRcdGlmIChhbWJpZW50Q29sb3IpIHtcblx0XHRcdGdsLnNoYWRlci5zZXRNYXRlcmlhbEFtYmllbnRDb2xvcihnbCwgbWF0aC5nZXRSR0IoYW1iaWVudENvbG9yLCAxKSk7XG5cdFx0fVxuXHRcdGlmIChkaWZmdXNlQ29sb3IpIHtcblx0XHRcdGdsLnNoYWRlci5zZXRNYXRlcmlhbERpZmZ1c2VDb2xvcihnbCwgbWF0aC5nZXRSR0IoZGlmZnVzZUNvbG9yLCAxKSk7XG5cdFx0fVxuXHRcdGlmIChzcGVjdWxhckNvbG9yKSB7XG5cdFx0XHRnbC5zaGFkZXIuc2V0TWF0ZXJpYWxTcGVjdWxhckNvbG9yKGdsLCBtYXRoLmdldFJHQihzcGVjdWxhckNvbG9yLCAxKSk7XG5cdFx0fVxuXHRcdGdsLnNoYWRlci5zZXRNYXRlcmlhbFNoaW5pbmVzcyhnbCwgc2hpbmluZXNzKTtcblx0XHRnbC5zaGFkZXIuc2V0TWF0ZXJpYWxBbHBoYShnbCwgMSk7XG5cdH07XG5cdF8uc2V0RGlmZnVzZUNvbG9yID0gZnVuY3Rpb24oZ2wsIGRpZmZ1c2VDb2xvcikge1xuXHRcdGdsLnNoYWRlci5zZXRNYXRlcmlhbERpZmZ1c2VDb2xvcihnbCwgbWF0aC5nZXRSR0IoZGlmZnVzZUNvbG9yLCAxKSk7XG5cdH07XG5cdF8uc2V0QWxwaGEgPSBmdW5jdGlvbihnbCwgYWxwaGEpIHtcblx0XHRnbC5zaGFkZXIuc2V0TWF0ZXJpYWxBbHBoYShnbCwgYWxwaGEpO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLm1hdGgsIENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMyk7XG5cbihmdW5jdGlvbihkMywgbWF0aCwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLlBpY2tlciA9IGZ1bmN0aW9uKCkge1xuXHR9O1xuXHR2YXIgXyA9IGQzLlBpY2tlci5wcm90b3R5cGU7XG5cblx0Xy5pbml0ID0gZnVuY3Rpb24oZ2wpIHtcblx0XHQvLyBzZXR1cCBmb3IgcGlja2luZyBzeXN0ZW1cblx0XHR0aGlzLmZyYW1lYnVmZmVyID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblxuXHRcdC8vIHNldCBwaWNrIHRleHR1cmVcblx0XHR2YXIgdGV4dHVyZTJEID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXHRcdHZhciByZW5kZXJidWZmZXIgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcblxuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUyRCk7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QpO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5ORUFSRVNUKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcblxuXHRcdGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIpO1xuXG5cdFx0Ly8gc2V0IGZyYW1lYnVmZmVyIGFuZCBiaW5kIHRoZSB0ZXh0dXJlIGFuZCByZW5kZXJidWZmZXJcblx0XHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHRoaXMuZnJhbWVidWZmZXIpO1xuXHRcdGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGdsLkZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCwgZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZTJELCAwKTtcblx0XHRnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfQVRUQUNITUVOVCwgZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIpO1xuXG5cdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XG5cdFx0Z2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIG51bGwpO1xuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG5cdH07XG5cblx0Xy5zZXREaW1lbnNpb24gPSBmdW5jdGlvbihnbCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5mcmFtZWJ1ZmZlcik7XG5cblx0XHQvLyBnZXQgYmluZGVkIGRlcHRoIGF0dGFjaG1lbnQgcmVuZGVyYnVmZmVyXG5cdFx0dmFyIHJlbmRlcmJ1ZmZlciA9IGdsLmdldEZyYW1lYnVmZmVyQXR0YWNobWVudFBhcmFtZXRlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfQVRUQUNITUVOVCwgZ2wuRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9PQkpFQ1RfTkFNRSk7XG5cdFx0aWYgKGdsLmlzUmVuZGVyYnVmZmVyKHJlbmRlcmJ1ZmZlcikpIHtcblx0XHRcdC8vIHNldCByZW5kZXJidWZmZXIgZGltZW5zaW9uXG5cdFx0XHRnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgcmVuZGVyYnVmZmVyKTtcblx0XHRcdGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoZ2wuUkVOREVSQlVGRkVSLCBnbC5ERVBUSF9DT01QT05FTlQxNiwgd2lkdGgsIGhlaWdodCk7XG5cdFx0XHRnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgbnVsbCk7XG5cdFx0fVxuXG5cdFx0Ly8gZ2V0IGJpbmRlZCBjb2xvciBhdHRhY2htZW50IHRleHR1cmUgMmRcblx0XHR2YXIgdGV4dHVyZTJEID0gZ2wuZ2V0RnJhbWVidWZmZXJBdHRhY2htZW50UGFyYW1ldGVyKGdsLkZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCwgZ2wuRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9PQkpFQ1RfTkFNRSk7XG5cdFx0aWYgKGdsLmlzVGV4dHVyZSh0ZXh0dXJlMkQpKSB7XG5cdFx0XHQvLyBzZXQgdGV4dHVyZSBkaW1lbnNpb25cblx0XHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUyRCk7XG5cdFx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIHdpZHRoLCBoZWlnaHQsIDAsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIG51bGwpO1xuXHRcdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XG5cdFx0fVxuXG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcblx0fTtcblxufSkoQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLmQzLCBDaGVtRG9vZGxlLm1hdGgsIGRvY3VtZW50KTtcblxuKGZ1bmN0aW9uKGQzLCBtLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGQzLlBpbGwgPSBmdW5jdGlvbihyYWRpdXMsIGhlaWdodCwgbGF0aXR1ZGVCYW5kcywgbG9uZ2l0dWRlQmFuZHMpIHtcblxuXHRcdHZhciBjYXBIZWlnaHRTY2FsZSA9IDE7XG5cdFx0dmFyIGNhcERpYW1ldGVyID0gMiAqIHJhZGl1cztcblxuXHRcdGhlaWdodCAtPSBjYXBEaWFtZXRlcjtcblxuXHRcdGlmIChoZWlnaHQgPCAwKSB7XG5cdFx0XHRjYXBIZWlnaHRTY2FsZSA9IDA7XG5cdFx0XHRoZWlnaHQgKz0gY2FwRGlhbWV0ZXI7XG5cdFx0fSBlbHNlIGlmIChoZWlnaHQgPCBjYXBEaWFtZXRlcikge1xuXHRcdFx0Y2FwSGVpZ2h0U2NhbGUgPSBoZWlnaHQgLyBjYXBEaWFtZXRlcjtcblx0XHRcdGhlaWdodCA9IGNhcERpYW1ldGVyO1xuXHRcdH1cblxuXHRcdC8vIHVwZGF0ZSBsYXRpdHVkZSBhbmQgbG9naW50dWRlIGJhbmQgZm9yIHR3byBjYXBzLlxuXHRcdC8vIGxhdGl0dWRlQmFuZHMgKj0gMjtcblx0XHQvLyBsb25naXR1ZGVCYW5kcyAqPSAyO1xuXG5cdFx0dmFyIHBvc2l0aW9uRGF0YSA9IFtdO1xuXHRcdHZhciBub3JtYWxEYXRhID0gW107XG5cdFx0Zm9yICggdmFyIGxhdE51bWJlciA9IDA7IGxhdE51bWJlciA8PSBsYXRpdHVkZUJhbmRzOyBsYXROdW1iZXIrKykge1xuXHRcdFx0dmFyIHRoZXRhID0gbGF0TnVtYmVyICogbS5QSSAvIGxhdGl0dWRlQmFuZHM7XG5cdFx0XHR2YXIgc2luVGhldGEgPSBtLnNpbih0aGV0YSk7XG5cdFx0XHR2YXIgY29zVGhldGEgPSBtLmNvcyh0aGV0YSkgKiBjYXBIZWlnaHRTY2FsZTtcblxuXHRcdFx0Zm9yICggdmFyIGxvbmdOdW1iZXIgPSAwOyBsb25nTnVtYmVyIDw9IGxvbmdpdHVkZUJhbmRzOyBsb25nTnVtYmVyKyspIHtcblx0XHRcdFx0dmFyIHBoaSA9IGxvbmdOdW1iZXIgKiAyICogbS5QSSAvIGxvbmdpdHVkZUJhbmRzO1xuXHRcdFx0XHR2YXIgc2luUGhpID0gbS5zaW4ocGhpKTtcblx0XHRcdFx0dmFyIGNvc1BoaSA9IG0uY29zKHBoaSk7XG5cblx0XHRcdFx0dmFyIHggPSBjb3NQaGkgKiBzaW5UaGV0YTtcblx0XHRcdFx0dmFyIHkgPSBjb3NUaGV0YTtcblx0XHRcdFx0dmFyIHogPSBzaW5QaGkgKiBzaW5UaGV0YTtcblxuXHRcdFx0XHRub3JtYWxEYXRhLnB1c2goeCwgeSwgeik7XG5cdFx0XHRcdHBvc2l0aW9uRGF0YS5wdXNoKHJhZGl1cyAqIHgsIHJhZGl1cyAqIHkgKyAobGF0TnVtYmVyIDwgbGF0aXR1ZGVCYW5kcyAvIDIgPyBoZWlnaHQgOiAwKSwgcmFkaXVzICogeik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dmFyIGluZGV4RGF0YSA9IFtdO1xuXHRcdGxvbmdpdHVkZUJhbmRzICs9IDE7XG5cdFx0Zm9yICggdmFyIGxhdE51bWJlciA9IDA7IGxhdE51bWJlciA8IGxhdGl0dWRlQmFuZHM7IGxhdE51bWJlcisrKSB7XG5cdFx0XHRmb3IgKCB2YXIgbG9uZ051bWJlciA9IDA7IGxvbmdOdW1iZXIgPCBsb25naXR1ZGVCYW5kczsgbG9uZ051bWJlcisrKSB7XG5cdFx0XHRcdHZhciBmaXJzdCA9IChsYXROdW1iZXIgKiBsb25naXR1ZGVCYW5kcykgKyAobG9uZ051bWJlciAlIGxvbmdpdHVkZUJhbmRzKTtcblx0XHRcdFx0dmFyIHNlY29uZCA9IGZpcnN0ICsgbG9uZ2l0dWRlQmFuZHM7XG5cdFx0XHRcdGluZGV4RGF0YS5wdXNoKGZpcnN0LCBmaXJzdCArIDEsIHNlY29uZCk7XG5cdFx0XHRcdGlmIChsb25nTnVtYmVyIDwgbG9uZ2l0dWRlQmFuZHMgLSAxKSB7XG5cdFx0XHRcdFx0aW5kZXhEYXRhLnB1c2goc2Vjb25kLCBmaXJzdCArIDEsIHNlY29uZCArIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9yZURhdGEocG9zaXRpb25EYXRhLCBub3JtYWxEYXRhLCBpbmRleERhdGEpO1xuXHR9O1xuXHRkMy5QaWxsLnByb3RvdHlwZSA9IG5ldyBkMy5fTWVzaCgpO1xuXG59KShDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDMsIE1hdGgpO1xuXG4oZnVuY3Rpb24oZXh0ZW5zaW9ucywgUkVTSURVRSwgc3RydWN0dXJlcywgZDMsIG0sIG00LCB2MywgbWF0aCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdGZ1bmN0aW9uIGNyZWF0ZUR1bW15UmVzaWR1ZSh4LCB5LCB6KSB7XG5cdFx0dmFyIGR1bW15UmVzID0gbmV3IHN0cnVjdHVyZXMuUmVzaWR1ZSgtMSk7XG5cdFx0ZHVtbXlSZXMuY3AxID0gZHVtbXlSZXMuY3AyID0gbmV3IHN0cnVjdHVyZXMuQXRvbSgnJywgeCwgeSwgeik7XG5cdFx0cmV0dXJuIGR1bW15UmVzO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBQaXBlKGExLCBhMikge1xuXHRcdHRoaXMuYTEgPSBhMTtcblx0XHR0aGlzLmEyID0gYTI7XG5cdH07XG5cdHZhciBfID0gUGlwZS5wcm90b3R5cGU7XG5cdF8ucmVuZGVyID0gZnVuY3Rpb24oZ2wsIHNwZWNzKSB7XG5cdFx0dmFyIHAxID0gdGhpcy5hMTtcblx0XHR2YXIgcDIgPSB0aGlzLmEyO1xuXHRcdHZhciBoZWlnaHQgPSAxLjAwMSAqIHAxLmRpc3RhbmNlM0QocDIpO1xuXHRcdHZhciByYWRpdXNTY2FsZSA9IHNwZWNzLnByb3RlaW5zX2N5bGluZGVySGVsaXhEaWFtZXRlciAvIDI7XG5cdFx0dmFyIHNjYWxlVmVjdG9yID0gWyByYWRpdXNTY2FsZSwgaGVpZ2h0LCByYWRpdXNTY2FsZSBdO1xuXHRcdHZhciB0cmFuc2Zvcm0gPSBtNC50cmFuc2xhdGUobTQuaWRlbnRpdHkoKSwgWyBwMS54LCBwMS55LCBwMS56IF0pO1xuXHRcdHZhciB5ID0gWyAwLCAxLCAwIF07XG5cdFx0dmFyIGFuZyA9IDA7XG5cdFx0dmFyIGF4aXM7XG5cdFx0aWYgKHAxLnggPT09IHAyLnggJiYgcDEueiA9PT0gcDIueikge1xuXHRcdFx0YXhpcyA9IFsgMCwgMCwgMSBdO1xuXHRcdFx0aWYgKHAyLnkgPCBwMS55KSB7XG5cdFx0XHRcdGFuZyA9IG0uUEk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBhMmIgPSBbIHAyLnggLSBwMS54LCBwMi55IC0gcDEueSwgcDIueiAtIHAxLnogXTtcblx0XHRcdGFuZyA9IGV4dGVuc2lvbnMudmVjM0FuZ2xlRnJvbSh5LCBhMmIpO1xuXHRcdFx0YXhpcyA9IHYzLmNyb3NzKHksIGEyYiwgW10pO1xuXHRcdH1cblxuXHRcdGlmIChhbmcgIT09IDApIHtcblx0XHRcdG00LnJvdGF0ZSh0cmFuc2Zvcm0sIGFuZywgYXhpcyk7XG5cdFx0fVxuXHRcdG00LnNjYWxlKHRyYW5zZm9ybSwgc2NhbGVWZWN0b3IpO1xuXHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCwgdHJhbnNmb3JtKTtcblx0XHRnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCBnbC5jeWxpbmRlckNsb3NlZEJ1ZmZlci52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5udW1JdGVtcyk7XG5cdH07XG5cblx0ZnVuY3Rpb24gUGxhbmsoYTEsIGEyLCB2eCkge1xuXHRcdHRoaXMuYTEgPSBhMTtcblx0XHR0aGlzLmEyID0gYTI7XG5cdFx0dGhpcy52eCA9IHZ4O1xuXHR9O1xuXHR2YXIgXyA9IFBsYW5rLnByb3RvdHlwZTtcblx0Xy5yZW5kZXIgPSBmdW5jdGlvbihnbCwgc3BlY3MpIHtcblx0XHRpZiAodGhpcy5zcGVjcykge1xuXHRcdFx0c3BlY3MgPSB0aGlzLnNwZWNzO1xuXHRcdH1cblx0XHQvLyB0aGlzIGlzIHRoZSBlbG9uZ2F0aW9uIHZlY3RvciBmb3IgdGhlIHBsYW5rXG5cdFx0dmFyIGhlaWdodCA9IDEuMDAxICogdGhpcy5hMS5kaXN0YW5jZTNEKHRoaXMuYTIpO1xuXG5cdFx0dmFyIGRpcnkgPSBbIHRoaXMuYTIueCAtIHRoaXMuYTEueCwgdGhpcy5hMi55IC0gdGhpcy5hMS55LCB0aGlzLmEyLnogLSB0aGlzLmExLnogXTtcblx0XHR2YXIgZGlyeiA9IHYzLmNyb3NzKGRpcnksIHRoaXMudngsIFtdKTtcblx0XHR2YXIgZGlyeCA9IHYzLmNyb3NzKGRpcnosIGRpcnksIFtdKTtcblxuXHRcdHYzLm5vcm1hbGl6ZShkaXJ4KTtcblx0XHR2My5ub3JtYWxpemUoZGlyeSk7XG5cdFx0djMubm9ybWFsaXplKGRpcnopO1xuXG5cdFx0dmFyIHRyYW5zZm9ybSA9IFtcblx0XHRcdGRpcnhbMF0sIGRpcnhbMV0sIGRpcnhbMl0sIDAsXG5cdFx0XHRkaXJ5WzBdLCBkaXJ5WzFdLCBkaXJ5WzJdLCAwLFxuXHRcdFx0ZGlyelswXSwgZGlyelsxXSwgZGlyelsyXSwgMCxcblx0XHRcdHRoaXMuYTEueCwgdGhpcy5hMS55LCB0aGlzLmExLnosIDFcblx0XHRdO1xuXG5cdFx0dmFyIHNjYWxlVmVjdG9yID0gWyBzcGVjcy5wcm90ZWluc19wbGFua1NoZWV0V2lkdGgsIGhlaWdodCwgc3BlY3MucHJvdGVpbnNfdHViZVRoaWNrbmVzc107XG5cdFx0bTQuc2NhbGUodHJhbnNmb3JtLCBzY2FsZVZlY3Rvcik7XG5cdFx0Z2wuc2hhZGVyLnNldE1hdHJpeFVuaWZvcm1zKGdsLCB0cmFuc2Zvcm0pO1xuXHRcdGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVfU1RSSVAsIDAsIGdsLmJveEJ1ZmZlci52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5udW1JdGVtcyk7XG5cdH07XG5cblxuXHRkMy5QaXBlUGxhbmsgPSBmdW5jdGlvbihycywgc3BlY3MpIHtcblx0XHR0aGlzLnR1YmVzID0gW107XG5cdFx0dGhpcy5oZWxpeEN5bGluZGVycyA9IFtdO1xuXHRcdHRoaXMuc2hlZXRQbGFua3MgPSBbXTtcblx0XHR0aGlzLmNoYWluQ29sb3IgPSBycy5jaGFpbkNvbG9yO1xuXG5cdFx0dmFyIGNoYWluTm9TUyA9IFtdO1xuXHRcdHZhciBub1NTUmVzaWR1ZXMgPSBbXTtcblx0XHR2YXIgaGVsaXhSZXNpZHVlcyA9IFtdO1xuXHRcdHZhciBzaGVldFJlc2lkdWVzID0gW107XG5cblx0XHQvLyB0aGUgZmlyc3QgcmVzaWR1ZSBqdXN0IGEgZHVtbXkgcmVzaWR1ZS5cblx0XHQvLyBzbyBhdCBiZWdpbm5pbmcsIHRoZSBzZWNvbmRhcnkgc3RydWN0dXJlIG9mIHNlY29uZCByZXNpZHVlIG11c3QgYmUgY2hlY2tcblx0XHRpZihycy5sZW5ndGggPiAxKSB7XG5cdFx0XHR2YXIgcjAgPSByc1swXTtcblx0XHRcdHZhciByMSA9IHJzWzFdO1xuXHRcdFx0aWYgKHIxLmhlbGl4KSB7XG5cdFx0XHRcdGhlbGl4UmVzaWR1ZXMucHVzaChyMCk7XG5cdFx0XHR9IGVsc2UgaWYocjEuc2hlZXQpIHtcblx0XHRcdFx0c2hlZXRSZXNpZHVlcy5wdXNoKHIwKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG5vU1NSZXNpZHVlcy5wdXNoKHIwKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBpdGVyYXRlIHJlc2lkdWVzXG5cdFx0Zm9yICggdmFyIGkgPSAxLCBpaSA9IHJzLmxlbmd0aCAtIDE7IGkgPD0gaWk7IGkrKykge1xuXHRcdFx0dmFyIHJlc2lkdWUgPSByc1tpXTtcblx0XHRcdGlmKHJlc2lkdWUuaGVsaXgpIHtcblx0XHRcdFx0aGVsaXhSZXNpZHVlcy5wdXNoKHJlc2lkdWUpO1xuXG5cdFx0XHRcdGlmKHJlc2lkdWUuYXJyb3cpIHtcblx0XHRcdFx0XHR2YXIgc3RhcnRQb2ludCA9IHYzLmNyZWF0ZSgpO1xuXHRcdFx0XHRcdHZhciBlbmRQb2ludCA9IHYzLmNyZWF0ZSgpO1xuXG5cdFx0XHRcdFx0aWYgKGhlbGl4UmVzaWR1ZXMubGVuZ3RoID09IDIpIHtcblx0XHRcdFx0XHRcdC8vIFBEQiBsaWtlIDJQRUMgaGF2ZSBoZWxpeCB3aGljaCBpcyBqdXN0IGhhdmUgMiByZXNpZHVlcyBpbiBpdC5cblx0XHRcdFx0XHRcdHN0YXJ0UG9pbnQgPSBbaGVsaXhSZXNpZHVlc1swXS5jcDEueCwgaGVsaXhSZXNpZHVlc1swXS5jcDEueSwgaGVsaXhSZXNpZHVlc1swXS5jcDEuel07XG5cdFx0XHRcdFx0XHRlbmRQb2ludCA9IFtoZWxpeFJlc2lkdWVzWzFdLmNwMS54LCBoZWxpeFJlc2lkdWVzWzFdLmNwMS55LCBoZWxpeFJlc2lkdWVzWzFdLmNwMS56XTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQvLyBUbyBnZXQgaGVsaXggYXhpcywgd2UgbmVlZCBhdCBsZWFzdCA0IHJlc2lkdWVzLlxuXHRcdFx0XHRcdFx0Ly8gaWYgcmVzaWR1ZXMgbGVuZ2h0IGlzIDMsIHRoZW4gb25lIHJlc2lkdWUgbmVlZCB0byBiZSBhZGRlZC5cblx0XHRcdFx0XHRcdC8vIFRoZSBhZGRlZCByZXNpZHVlIGlzIHJlc2lkdWUgYmVmb3JlIGhlbGl4LlxuXHRcdFx0XHRcdFx0aWYoaGVsaXhSZXNpZHVlcy5sZW5ndGggPT0gMykge1xuXHRcdFx0XHRcdFx0XHRoZWxpeFJlc2lkdWVzLnVuc2hpZnQocnNbbS5tYXgoaSAtIDMsIDApXSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHZhciBQcyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIFZzID0gW107XG5cblx0XHRcdFx0XHRcdGZvciAodmFyIGggPSAxLCBoaCA9IGhlbGl4UmVzaWR1ZXMubGVuZ3RoIC0gMTsgaCA8IGhoOyBoKyspIHtcblx0XHRcdFx0XHRcdFx0dmFyIGNhaSA9IFtoZWxpeFJlc2lkdWVzW2hdLmNwMS54LCBoZWxpeFJlc2lkdWVzW2hdLmNwMS55LCBoZWxpeFJlc2lkdWVzW2hdLmNwMS56XTtcblx0XHRcdFx0XHRcdFx0dmFyIEEgPSBbaGVsaXhSZXNpZHVlc1toLTFdLmNwMS54LCBoZWxpeFJlc2lkdWVzW2gtMV0uY3AxLnksIGhlbGl4UmVzaWR1ZXNbaC0xXS5jcDEuel07XG5cdFx0XHRcdFx0XHRcdHZhciBCID0gW2hlbGl4UmVzaWR1ZXNbaCsxXS5jcDEueCwgaGVsaXhSZXNpZHVlc1toKzFdLmNwMS55LCBoZWxpeFJlc2lkdWVzW2grMV0uY3AxLnpdO1xuXG5cdFx0XHRcdFx0XHRcdHYzLnN1YnRyYWN0KEEsIGNhaSk7XG5cdFx0XHRcdFx0XHRcdHYzLnN1YnRyYWN0KEIsIGNhaSk7XG5cblx0XHRcdFx0XHRcdFx0dmFyIEFsID0gdjMuc2NhbGUoQSwgdjMubGVuZ3RoKEIpLCBbXSk7XG5cdFx0XHRcdFx0XHRcdHZhciBCbCA9IHYzLnNjYWxlKEIsIHYzLmxlbmd0aChBKSwgW10pO1xuXG5cdFx0XHRcdFx0XHRcdHZhciBWID0gdjMubm9ybWFsaXplKHYzLmFkZChBbCwgQmwsIFtdKSk7XG5cblx0XHRcdFx0XHRcdFx0UHMucHVzaChjYWkpO1xuXHRcdFx0XHRcdFx0XHRWcy5wdXNoKFYpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR2YXIgYXhlcyA9IFtdO1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaCA9IDAsIGhoID0gUHMubGVuZ3RoIC0gMTsgaCA8IGhoOyBoKyspIHtcblx0XHRcdFx0XHRcdFx0dmFyIFAxID0gUHNbaF07XG5cdFx0XHRcdFx0XHRcdHZhciBWMSA9IFZzW2hdO1xuXHRcdFx0XHRcdFx0XHR2YXIgUDIgPSBQc1toKzFdO1xuXHRcdFx0XHRcdFx0XHR2YXIgVjIgPSBWc1toKzFdO1xuXG5cdFx0XHRcdFx0XHRcdHZhciBIID0gdjMubm9ybWFsaXplKHYzLmNyb3NzKFYxLCBWMiwgW10pKTtcblxuXHRcdFx0XHRcdFx0XHR2YXIgUDJzdWJQMSA9IHYzLnN1YnRyYWN0KFAyLCBQMSwgW10pO1xuXHRcdFx0XHRcdFx0XHR2YXIgZCA9IHYzLmRvdChQMnN1YlAxLCBIKTtcblxuXHRcdFx0XHRcdFx0XHR2YXIgZEggPSB2My5zY2FsZShILCBkLCBbXSk7XG5cblx0XHRcdFx0XHRcdFx0dmFyIGRIbCA9IHYzLmxlbmd0aChkSCk7XG5cdFx0XHRcdFx0XHRcdHZhciBQMnN1YlAxbCA9IHYzLmxlbmd0aChQMnN1YlAxKTtcblxuXHRcdFx0XHRcdFx0XHR2YXIgciA9IC0oZEhsICogZEhsIC0gUDJzdWJQMWwgKiBQMnN1YlAxbCkgLyAoMiAqIHYzLmRvdCh2My5zdWJ0cmFjdChQMSwgUDIsIFtdKSwgVjIpKTtcblxuXHRcdFx0XHRcdFx0XHR2YXIgSDEgPSB2My5hZGQoUDEsIHYzLnNjYWxlKFYxLCByLCBbXSksIFtdKTtcblx0XHRcdFx0XHRcdFx0dmFyIEgyID0gdjMuYWRkKFAyLCB2My5zY2FsZShWMiwgciwgW10pLCBbXSk7XG5cblx0XHRcdFx0XHRcdFx0YXhlcy5wdXNoKFtIMSwgSDJdKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dmFyIGZpcnN0UG9pbnQgPSBheGVzWzBdWzBdO1xuXHRcdFx0XHRcdFx0dmFyIHNlY29uZFBvaW50ID0gYXhlc1swXVsxXTtcblx0XHRcdFx0XHRcdHZhciBzZWNvbmRUb0ZpcnN0ID0gdjMuc3VidHJhY3QoZmlyc3RQb2ludCwgc2Vjb25kUG9pbnQsIFtdKTtcblx0XHRcdFx0XHRcdHYzLmFkZChmaXJzdFBvaW50LCBzZWNvbmRUb0ZpcnN0LCBzdGFydFBvaW50KTtcblxuXHRcdFx0XHRcdFx0dmFyIGZpcnN0UG9pbnQgPSBheGVzW2F4ZXMubGVuZ3RoLTFdWzFdO1xuXHRcdFx0XHRcdFx0dmFyIHNlY29uZFBvaW50ID0gYXhlc1theGVzLmxlbmd0aC0xXVswXTtcblx0XHRcdFx0XHRcdHZhciBzZWNvbmRUb0ZpcnN0ID0gdjMuc3VidHJhY3QoZmlyc3RQb2ludCwgc2Vjb25kUG9pbnQsIFtdKTtcblx0XHRcdFx0XHRcdHYzLmFkZChmaXJzdFBvaW50LCBzZWNvbmRUb0ZpcnN0LCBlbmRQb2ludCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgc3RhcnRBdG9tID0gbmV3IHN0cnVjdHVyZXMuQXRvbSgnJywgc3RhcnRQb2ludFswXSwgc3RhcnRQb2ludFsxXSwgc3RhcnRQb2ludFsyXSk7XG5cdFx0XHRcdFx0dmFyIGVuZEF0b20gPSBuZXcgc3RydWN0dXJlcy5BdG9tKCcnLCBlbmRQb2ludFswXSwgZW5kUG9pbnRbMV0sIGVuZFBvaW50WzJdKTtcblxuXHRcdFx0XHRcdHRoaXMuaGVsaXhDeWxpbmRlcnMucHVzaChuZXcgUGlwZShzdGFydEF0b20sIGVuZEF0b20pKTtcblxuXHRcdFx0XHRcdGhlbGl4UmVzaWR1ZXMgPSBbXTtcblxuXHRcdFx0XHRcdC8vIGdldCB2ZWN0b3IgZGlyZWN0aW9uIGZyb20gUGlwZSBlbmQgdG8gc3RhcnRcblx0XHRcdFx0XHR2YXIgaGVsaXhEaXIgPSB2My5zdWJ0cmFjdChzdGFydFBvaW50LCBlbmRQb2ludCwgW10pO1xuXHRcdFx0XHRcdHYzLm5vcm1hbGl6ZShoZWxpeERpcik7XG5cdFx0XHRcdFx0djMuc2NhbGUoaGVsaXhEaXIsIC41KTtcblxuXHRcdFx0XHRcdGlmIChub1NTUmVzaWR1ZXMubGVuZ3RoID4gMCkge1xuXG5cdFx0XHRcdFx0XHR2YXIgYWRkaXRpb25DcCA9IHYzLmFkZChzdGFydFBvaW50LCBoZWxpeERpciwgW10pO1xuXHRcdFx0XHRcdFx0dmFyIHByZXZSZXNDcCA9IG5vU1NSZXNpZHVlc1tub1NTUmVzaWR1ZXMubGVuZ3RoIC0gMV0uY3AxO1xuXHRcdFx0XHRcdFx0dmFyIGhlbGl4RGlyVG9QcmV2UmVzID0gdjMuc3VidHJhY3QoW3ByZXZSZXNDcC54LCBwcmV2UmVzQ3AueSwgcHJldlJlc0NwLnpdLCBhZGRpdGlvbkNwLCBbXSk7XG5cdFx0XHRcdFx0XHR2My5ub3JtYWxpemUoaGVsaXhEaXJUb1ByZXZSZXMpO1xuXHRcdFx0XHRcdFx0djMuc2NhbGUoaGVsaXhEaXJUb1ByZXZSZXMsIC41KTtcblx0XHRcdFx0XHRcdHYzLmFkZChhZGRpdGlvbkNwLCBoZWxpeERpclRvUHJldlJlcyk7XG5cdFx0XHRcdFx0XHR2YXIgZHVtbXlSZXMgPSBuZXcgc3RydWN0dXJlcy5SZXNpZHVlKC0xKTtcblx0XHRcdFx0XHRcdGR1bW15UmVzLmNwMSA9IGR1bW15UmVzLmNwMiA9IG5ldyBzdHJ1Y3R1cmVzLkF0b20oJycsIGFkZGl0aW9uQ3BbMF0sIGFkZGl0aW9uQ3BbMV0sIGFkZGl0aW9uQ3BbMl0pO1xuXHRcdFx0XHRcdFx0bm9TU1Jlc2lkdWVzLnB1c2goZHVtbXlSZXMpO1xuXG5cdFx0XHRcdFx0XHQvLyBmb3JjZSB0aGUgbm9uIHNlY29uZGFyeSBzdHJ1Y3R1cmUgc3BsaW5lIHRvIGVuZCBvbiBoZWxpeCBzdGFydCBwb2ludC5cblx0XHRcdFx0XHRcdHZhciBkdW1teVJlcyA9IGNyZWF0ZUR1bW15UmVzaWR1ZShzdGFydFBvaW50WzBdLCBzdGFydFBvaW50WzFdLCBzdGFydFBvaW50WzJdKTtcblx0XHRcdFx0XHRcdG5vU1NSZXNpZHVlcy5wdXNoKGR1bW15UmVzKTtcblxuXHRcdFx0XHRcdFx0Y2hhaW5Ob1NTLnB1c2gobm9TU1Jlc2lkdWVzKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRub1NTUmVzaWR1ZXMgPSBbXTtcblxuXHRcdFx0XHRcdC8vIGNoZWNrIGZvciBuZXh0IHJlc2lkdWVcblx0XHRcdFx0XHRpZiAoaSA8IGlpKSB7XG5cdFx0XHRcdFx0XHQvLyBmb3JjZSB0aGUgbm9uIHNlY29uZGFyeSBzdHJ1Y3R1cmUgc3BsaW5lIHRvIHN0YXJ0IG9uIGhlbGl4IGVuZCBwb2ludC5cblx0XHRcdFx0XHRcdHZhciBkdW1teVJlcyA9IGNyZWF0ZUR1bW15UmVzaWR1ZShlbmRQb2ludFswXSwgZW5kUG9pbnRbMV0sIGVuZFBvaW50WzJdKTtcblx0XHRcdFx0XHRcdG5vU1NSZXNpZHVlcy5wdXNoKGR1bW15UmVzKTtcblxuXHRcdFx0XHRcdFx0dmFyIHJtID0gcnNbaSArIDFdO1xuXHRcdFx0XHRcdFx0aWYgKHJtLnNoZWV0KSB7XG5cdFx0XHRcdFx0XHRcdG5vU1NSZXNpZHVlcy5wdXNoKHJlc2lkdWUpO1xuXHRcdFx0XHRcdFx0XHRub1NTUmVzaWR1ZXMucHVzaChyZXNpZHVlKTtcblx0XHRcdFx0XHRcdFx0Y2hhaW5Ob1NTLnB1c2gobm9TU1Jlc2lkdWVzKTtcblx0XHRcdFx0XHRcdFx0bm9TU1Jlc2lkdWVzID0gW107XG5cblx0XHRcdFx0XHRcdFx0c2hlZXRSZXNpZHVlcy5wdXNoKHJlc2lkdWUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gZm9yY2UgdGhlIG5vbiBzZWNvbmRhcnkgc3RydWN0dXJlIHNwbGluZSB0byBzdGFydCBvbiBoZWxpeCBlbmQgcG9pbnQuXG5cdFx0XHRcdFx0XHRcdHYzLnNjYWxlKGhlbGl4RGlyLCAtMSk7XG5cdFx0XHRcdFx0XHRcdHZhciBhZGRpdGlvbkNwID0gdjMuYWRkKGVuZFBvaW50LCBoZWxpeERpciwgW10pO1xuXHRcdFx0XHRcdFx0XHR2YXIgbmV4dFJlc0NwID0gcm0uY3AxO1xuXHRcdFx0XHRcdFx0XHR2YXIgaGVsaXhEaXJUb05leHRSZXMgPSB2My5zdWJ0cmFjdChbbmV4dFJlc0NwLngsIG5leHRSZXNDcC55LCBuZXh0UmVzQ3Auel0sIGFkZGl0aW9uQ3AsIFtdKTtcblx0XHRcdFx0XHRcdFx0djMubm9ybWFsaXplKGhlbGl4RGlyVG9OZXh0UmVzKTtcblx0XHRcdFx0XHRcdFx0djMuc2NhbGUoaGVsaXhEaXJUb05leHRSZXMsIC41KTtcblx0XHRcdFx0XHRcdFx0djMuYWRkKGFkZGl0aW9uQ3AsIGhlbGl4RGlyVG9OZXh0UmVzKTtcblx0XHRcdFx0XHRcdFx0dmFyIGR1bW15UmVzID0gY3JlYXRlRHVtbXlSZXNpZHVlKGFkZGl0aW9uQ3BbMF0sIGFkZGl0aW9uQ3BbMV0sIGFkZGl0aW9uQ3BbMl0pO1xuXHRcdFx0XHRcdFx0XHRub1NTUmVzaWR1ZXMucHVzaChkdW1teVJlcyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZihyZXNpZHVlLnNoZWV0KSB7XG5cblx0XHRcdFx0c2hlZXRSZXNpZHVlcy5wdXNoKHJlc2lkdWUpO1xuXHRcdFx0XHRpZihyZXNpZHVlLmFycm93KSB7XG5cblx0XHRcdFx0XHR2YXIgcDEgPSBbMCwgMCwgMF07XG5cdFx0XHRcdFx0dmFyIHAyID0gWzAsIDAsIDBdO1xuXHRcdFx0XHRcdGZvcih2YXIgaCA9IDAsIGhoID0gc2hlZXRSZXNpZHVlcy5sZW5ndGg7IGggPCBoaDsgaCsrKSB7XG5cdFx0XHRcdFx0XHR2YXIgZ3VpZGVQb2ludHMgPSBzaGVldFJlc2lkdWVzW2hdLmd1aWRlUG9pbnRzTGFyZ2U7XG5cdFx0XHRcdFx0XHR2YXIgZ3AxID0gZ3VpZGVQb2ludHNbMF07XG5cdFx0XHRcdFx0XHR2YXIgZ3AyID0gZ3VpZGVQb2ludHNbZ3VpZGVQb2ludHMubGVuZ3RoIC0gMV07XG5cblx0XHRcdFx0XHRcdHYzLmFkZChwMSwgW2dwMS54LCBncDEueSwgZ3AxLnpdKTtcblx0XHRcdFx0XHRcdHYzLmFkZChwMiwgW2dwMi54LCBncDIueSwgZ3AyLnpdKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2My5zY2FsZShwMSwgMSAvIGhoKTtcblx0XHRcdFx0XHR2My5zY2FsZShwMiwgMSAvIGhoKTtcblxuXHRcdFx0XHRcdHZhciBkaXJ4ID0gdjMuc3VidHJhY3QocDEsIHAyKTtcblxuXHRcdFx0XHRcdHZhciBmaXJzdFJzID0gc2hlZXRSZXNpZHVlc1swXTtcblx0XHRcdFx0XHR2YXIgbGFzdFJzID0gc2hlZXRSZXNpZHVlc1tzaGVldFJlc2lkdWVzLmxlbmd0aCAtIDFdO1xuXG5cdFx0XHRcdFx0dmFyIGZpcnN0R3VpZGVQb2ludHMgPSBmaXJzdFJzLmd1aWRlUG9pbnRzU21hbGxbMF07XG5cdFx0XHRcdFx0dmFyIGxhc3RHdWlkZVBvaW50cyA9IGxhc3RScy5ndWlkZVBvaW50c1NtYWxsWzBdO1xuXG5cdFx0XHRcdFx0dGhpcy5zaGVldFBsYW5rcy5wdXNoKG5ldyBQbGFuayhmaXJzdEd1aWRlUG9pbnRzLCBsYXN0R3VpZGVQb2ludHMsIGRpcngpKTtcblxuXHRcdFx0XHRcdHNoZWV0UmVzaWR1ZXMgPSBbXTtcblxuXHRcdFx0XHRcdGlmIChpIDwgaWkpIHtcblx0XHRcdFx0XHRcdHZhciBybSA9IHJzW2kgKyAxXTtcblxuXHRcdFx0XHRcdFx0aWYgKHJtLnNoZWV0KSB7XG5cdFx0XHRcdFx0XHRcdHNoZWV0UmVzaWR1ZXMucHVzaChyZXNpZHVlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHZhciBkdW1teVJlcyA9IGNyZWF0ZUR1bW15UmVzaWR1ZShsYXN0R3VpZGVQb2ludHMueCwgbGFzdEd1aWRlUG9pbnRzLnksIGxhc3RHdWlkZVBvaW50cy56KTtcblx0XHRcdFx0XHRcdFx0bm9TU1Jlc2lkdWVzLnB1c2goZHVtbXlSZXMpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRub1NTUmVzaWR1ZXMucHVzaChyZXNpZHVlKTtcblxuXHRcdFx0XHRpZiAoaSA8IGlpKSB7XG5cdFx0XHRcdFx0dmFyIHJtID0gcnNbaSArIDFdO1xuXHRcdFx0XHRcdGlmIChybS5zaGVldCkge1xuXHRcdFx0XHRcdFx0dmFyIGd1aWRlUG9pbnRzID0gcmVzaWR1ZS5ndWlkZVBvaW50c1NtYWxsWzBdO1xuXHRcdFx0XHRcdFx0dmFyIGR1bW15UmVzID0gY3JlYXRlRHVtbXlSZXNpZHVlKGd1aWRlUG9pbnRzLngsIGd1aWRlUG9pbnRzLnksIGd1aWRlUG9pbnRzLnopO1xuXG5cdFx0XHRcdFx0XHRub1NTUmVzaWR1ZXMucHVzaChkdW1teVJlcyk7XG5cblx0XHRcdFx0XHRcdGNoYWluTm9TUy5wdXNoKG5vU1NSZXNpZHVlcyk7XG5cdFx0XHRcdFx0XHRub1NTUmVzaWR1ZXMgPSBbXTtcblxuXHRcdFx0XHRcdFx0c2hlZXRSZXNpZHVlcy5wdXNoKHJlc2lkdWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKG5vU1NSZXNpZHVlcy5sZW5ndGggPiAxKSB7XG5cdFx0XHRpZihub1NTUmVzaWR1ZXMubGVuZ3RoID09IDIpIHtcblx0XHRcdFx0bm9TU1Jlc2lkdWVzLnB1c2gobm9TU1Jlc2lkdWVzW25vU1NSZXNpZHVlcy5sZW5ndGggLSAxXSk7XG5cdFx0XHR9XG5cdFx0XHRjaGFpbk5vU1MucHVzaChub1NTUmVzaWR1ZXMpO1xuXHRcdH1cblx0XHRub1NTUmVzaWR1ZXMgPSBbXTtcblxuXHRcdHZhciBjaGFpblNlZ21lbnRzID0gW107XG5cdFx0Zm9yICggdmFyIG4gPSAwLCBubiA9IGNoYWluTm9TUy5sZW5ndGg7IG4gPCBubjsgbisrKSB7XG5cdFx0XHR2YXIgbmhzID0gY2hhaW5Ob1NTW25dO1xuXHRcdFx0dmFyIGxpbmVTZWdtZW50c0xpc3QgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IG5ocy5sZW5ndGggLSAxOyBpIDw9IGlpOyBpKyspIHtcblx0XHRcdFx0bGluZVNlZ21lbnRzTGlzdC5wdXNoKG5oc1tpXS5jcDEpO1xuXHRcdFx0fVxuXHRcdFx0Y2hhaW5TZWdtZW50cy5wdXNoKGxpbmVTZWdtZW50c0xpc3QpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwLCBpaSA9IGNoYWluU2VnbWVudHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIHQgPSBuZXcgZDMuQ2F0bXVsbFR1YmUoY2hhaW5TZWdtZW50c1tpXSwgc3BlY3MucHJvdGVpbnNfdHViZVRoaWNrbmVzcywgc3BlY3MucHJvdGVpbnNfdHViZVJlc29sdXRpb25fM0QsIHNwZWNzLnByb3RlaW5zX2hvcml6b250YWxSZXNvbHV0aW9uKTtcblx0XHRcdHQuY2hhaW5Db2xvciA9IHJzLmNoYWluQ29sb3I7XG5cdFx0XHR0aGlzLnR1YmVzLnB1c2godCk7XG5cdFx0fVxuXHR9O1xuXHR2YXIgXyA9IGQzLlBpcGVQbGFuay5wcm90b3R5cGUgPSBuZXcgZDMuX01lc2goKTtcblx0Xy5yZW5kZXIgPSBmdW5jdGlvbihnbCwgc3BlY3MpIHtcblx0XHRnbC5tYXRlcmlhbC5zZXRUZW1wQ29sb3JzKGdsLCBzcGVjcy5wcm90ZWluc19tYXRlcmlhbEFtYmllbnRDb2xvcl8zRCwgdW5kZWZpbmVkLCBzcGVjcy5wcm90ZWluc19tYXRlcmlhbFNwZWN1bGFyQ29sb3JfM0QsIHNwZWNzLnByb3RlaW5zX21hdGVyaWFsU2hpbmluZXNzXzNEKTtcblx0XHRcblx0XHQvLyBjb2xvcnNcblx0XHRnbC5tYXRlcmlhbC5zZXREaWZmdXNlQ29sb3IoZ2wsIHNwZWNzLm1hY3JvX2NvbG9yQnlDaGFpbiA/IHRoaXMuY2hhaW5Db2xvciA6IHNwZWNzLnByb3RlaW5zX3R1YmVDb2xvcik7XG5cdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IHRoaXMudHViZXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0Z2wuc2hhZGVyLnNldE1hdHJpeFVuaWZvcm1zKGdsKTtcblx0XHRcdHRoaXMudHViZXNbal0ucmVuZGVyKGdsLCBzcGVjcyk7XG5cdFx0fVxuXG5cdFx0aWYoIXNwZWNzLm1hY3JvX2NvbG9yQnlDaGFpbikge1xuXHRcdFx0Z2wubWF0ZXJpYWwuc2V0RGlmZnVzZUNvbG9yKGdsLCBzcGVjcy5wcm90ZWluc19yaWJib25DYXJ0b29uSGVsaXhTZWNvbmRhcnlDb2xvcik7XG5cdFx0fVxuXG5cdFx0Z2wuY3lsaW5kZXJDbG9zZWRCdWZmZXIuYmluZEJ1ZmZlcnMoZ2wpO1xuXHRcdGZvciAodmFyIGogPSAwLCBqaiA9IHRoaXMuaGVsaXhDeWxpbmRlcnMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0dGhpcy5oZWxpeEN5bGluZGVyc1tqXS5yZW5kZXIoZ2wsIHNwZWNzKTtcblx0XHR9XG5cblx0XHRpZighc3BlY3MubWFjcm9fY29sb3JCeUNoYWluKSB7XG5cdFx0XHRnbC5tYXRlcmlhbC5zZXREaWZmdXNlQ29sb3IoZ2wsIHNwZWNzLnByb3RlaW5zX3JpYmJvbkNhcnRvb25TaGVldENvbG9yKTtcblx0XHR9XG5cblx0XHRnbC5ib3hCdWZmZXIuYmluZEJ1ZmZlcnMoZ2wpO1xuXHRcdGZvciAodmFyIGogPSAwLCBqaiA9IHRoaXMuc2hlZXRQbGFua3MubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0dGhpcy5zaGVldFBsYW5rc1tqXS5yZW5kZXIoZ2wsIHNwZWNzKTtcblx0XHR9XG5cblx0fTtcblxufSkoQ2hlbURvb2RsZS5leHRlbnNpb25zLCBDaGVtRG9vZGxlLlJFU0lEVUUsIENoZW1Eb29kbGUuc3RydWN0dXJlcywgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLmQzLCBNYXRoLCBDaGVtRG9vZGxlLmxpYi5tYXQ0LCBDaGVtRG9vZGxlLmxpYi52ZWMzLCBDaGVtRG9vZGxlLm1hdGgpO1xuXG4oZnVuY3Rpb24oZDMsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLlF1YWQgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgcG9zaXRpb25EYXRhID0gW1xuXHRcdFx0LTEsIDEsIDAsIFxuXHRcdFx0LTEsIC0xLCAwLCBcblx0XHRcdDEsIDEsIDAsIFxuXHRcdFx0MSwgLTEsIDBcblx0XHRdO1xuXHRcdHZhciBub3JtYWxEYXRhID0gW1xuXHRcdFx0MCwgMCwgMCxcblx0XHRcdDAsIDAsIDAsXG5cdFx0XHQwLCAwLCAwLFxuXHRcdFx0MCwgMCwgMFxuXHRcdF07XG5cdFx0dGhpcy5zdG9yZURhdGEocG9zaXRpb25EYXRhLCBub3JtYWxEYXRhKTtcblx0fTtcblx0ZDMuUXVhZC5wcm90b3R5cGUgPSBuZXcgZDMuX01lc2goKTtcblxufSkoQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLmQzKTtcblxuKGZ1bmN0aW9uKHN0cnVjdHVyZXMsIGQzLCB2MywgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDMuU2hhcGUgPSBmdW5jdGlvbihwb2ludHMsIHRoaWNrbmVzcykge1xuXHRcdC8vIHBvaW50cyBtdXN0IGJlIGluIHRoZSB4eS1wbGFuZSwgYWxsIHotY29vcmRzIG11c3QgYmUgMCwgdGhpY2tuZXNzXG5cdFx0Ly8gd2lsbCBiZSBpbiB0aGUgei1wbGFuZVxuXHRcdHZhciBudW1Qb2ludHMgPSBwb2ludHMubGVuZ3RoO1xuXHRcdHZhciBwb3NpdGlvbkRhdGEgPSBbXTtcblx0XHR2YXIgbm9ybWFsRGF0YSA9IFtdO1xuXG5cdFx0Ly8gY2FsY3VsYXRlIHZlcnRleCBhbmQgbm9ybWFsIHBvaW50c1xuXHRcdHZhciBjZW50ZXIgPSBuZXcgc3RydWN0dXJlcy5Qb2ludCgpO1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBudW1Qb2ludHM7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgbmV4dCA9IGkgKyAxO1xuXHRcdFx0aWYgKGkgPT09IGlpIC0gMSkge1xuXHRcdFx0XHRuZXh0ID0gMDtcblx0XHRcdH1cblx0XHRcdHZhciB6ID0gWyAwLCAwLCAxIF07XG5cdFx0XHR2YXIgY3VycmVudFBvaW50ID0gcG9pbnRzW2ldO1xuXHRcdFx0dmFyIG5leHRQb2ludCA9IHBvaW50c1tuZXh0XTtcblx0XHRcdHZhciB2ID0gWyBuZXh0UG9pbnQueCAtIGN1cnJlbnRQb2ludC54LCBuZXh0UG9pbnQueSAtIGN1cnJlbnRQb2ludC55LCAwIF07XG5cdFx0XHR2YXIgbm9ybWFsID0gdjMuY3Jvc3Moeiwgdik7XG5cdFx0XHQvLyBmaXJzdCBmb3VyIGFyZSBmb3IgdGhlIHNpZGUgbm9ybWFsXG5cdFx0XHQvLyBzZWNvbmQgZm91ciB3aWxsIGRvIGJvdGggdGhlIGJvdHRvbSBhbmQgdG9wIHRyaWFuZ2xlIG5vcm1hbHNcblx0XHRcdGZvciAoIHZhciBqID0gMDsgaiA8IDI7IGorKykge1xuXHRcdFx0XHRwb3NpdGlvbkRhdGEucHVzaChjdXJyZW50UG9pbnQueCwgY3VycmVudFBvaW50LnksIHRoaWNrbmVzcyAvIDIpO1xuXHRcdFx0XHRwb3NpdGlvbkRhdGEucHVzaChjdXJyZW50UG9pbnQueCwgY3VycmVudFBvaW50LnksIC10aGlja25lc3MgLyAyKTtcblx0XHRcdFx0cG9zaXRpb25EYXRhLnB1c2gobmV4dFBvaW50LngsIG5leHRQb2ludC55LCB0aGlja25lc3MgLyAyKTtcblx0XHRcdFx0cG9zaXRpb25EYXRhLnB1c2gobmV4dFBvaW50LngsIG5leHRQb2ludC55LCAtdGhpY2tuZXNzIC8gMik7XG5cdFx0XHR9XG5cdFx0XHQvLyBzaWRlIG5vcm1hbHNcblx0XHRcdGZvciAoIHZhciBqID0gMDsgaiA8IDQ7IGorKykge1xuXHRcdFx0XHRub3JtYWxEYXRhLnB1c2gobm9ybWFsWzBdLCBub3JtYWxbMV0sIG5vcm1hbFsyXSk7XG5cdFx0XHR9XG5cdFx0XHQvLyB0b3AgYW5kIGJvdHRvbSBub3JtYWxzXG5cdFx0XHRub3JtYWxEYXRhLnB1c2goMCwgMCwgMSk7XG5cdFx0XHRub3JtYWxEYXRhLnB1c2goMCwgMCwgLTEpO1xuXHRcdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDAsIDEpO1xuXHRcdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDAsIC0xKTtcblx0XHRcdGNlbnRlci5hZGQoY3VycmVudFBvaW50KTtcblx0XHR9XG5cdFx0Ly8gY2VudGVyc1xuXHRcdGNlbnRlci54IC89IG51bVBvaW50cztcblx0XHRjZW50ZXIueSAvPSBudW1Qb2ludHM7XG5cdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDAsIDEpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKGNlbnRlci54LCBjZW50ZXIueSwgdGhpY2tuZXNzIC8gMik7XG5cdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDAsIC0xKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaChjZW50ZXIueCwgY2VudGVyLnksIC10aGlja25lc3MgLyAyKTtcblxuXHRcdC8vIGJ1aWxkIG1lc2ggY29ubmVjdGl2aXR5XG5cdFx0dmFyIGluZGV4RGF0YSA9IFtdO1xuXHRcdHZhciBjZW50ZXJJbmRleCA9IG51bVBvaW50cyAqIDg7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IG51bVBvaW50czsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBzdGFydCA9IGkgKiA4O1xuXHRcdFx0Ly8gc2lkZXNcblx0XHRcdGluZGV4RGF0YS5wdXNoKHN0YXJ0KTtcblx0XHRcdGluZGV4RGF0YS5wdXNoKHN0YXJ0ICsgMyk7XG5cdFx0XHRpbmRleERhdGEucHVzaChzdGFydCArIDEpO1xuXHRcdFx0aW5kZXhEYXRhLnB1c2goc3RhcnQpO1xuXHRcdFx0aW5kZXhEYXRhLnB1c2goc3RhcnQgKyAyKTtcblx0XHRcdGluZGV4RGF0YS5wdXNoKHN0YXJ0ICsgMyk7XG5cdFx0XHQvLyB0b3AgYW5kIGJvdHRvbVxuXHRcdFx0aW5kZXhEYXRhLnB1c2goc3RhcnQgKyA0KTtcblx0XHRcdGluZGV4RGF0YS5wdXNoKGNlbnRlckluZGV4KTtcblx0XHRcdGluZGV4RGF0YS5wdXNoKHN0YXJ0ICsgNik7XG5cdFx0XHRpbmRleERhdGEucHVzaChzdGFydCArIDUpO1xuXHRcdFx0aW5kZXhEYXRhLnB1c2goc3RhcnQgKyA3KTtcblx0XHRcdGluZGV4RGF0YS5wdXNoKGNlbnRlckluZGV4ICsgMSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9yZURhdGEocG9zaXRpb25EYXRhLCBub3JtYWxEYXRhLCBpbmRleERhdGEpO1xuXHR9O1xuXHRkMy5TaGFwZS5wcm90b3R5cGUgPSBuZXcgZDMuX01lc2goKTtcblxufSkoQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDMsIENoZW1Eb29kbGUubGliLnZlYzMpO1xuXG4oZnVuY3Rpb24oZDMsIG0sIHYzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRkMy5TdGFyID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHBzID0gWyAuODk0NCwgLjQ0NzIsIDAsIC4yNzY0LCAuNDQ3MiwgLjg1MDYsIC4yNzY0LCAuNDQ3MiwgLS44NTA2LCAtLjcyMzYsIC40NDcyLCAuNTI1NywgLS43MjM2LCAuNDQ3MiwgLS41MjU3LCAtLjM0MTYsIC40NDcyLCAwLCAtLjEwNTYsIC40NDcyLCAuMzI0OSwgLS4xMDU2LCAuNDQ3MiwgLS4zMjQ5LCAuMjc2NCwgLjQ0NzIsIC4yMDA4LCAuMjc2NCwgLjQ0NzIsIC0uMjAwOCwgLS44OTQ0LCAtLjQ0NzIsIDAsIC0uMjc2NCwgLS40NDcyLCAuODUwNiwgLS4yNzY0LCAtLjQ0NzIsIC0uODUwNiwgLjcyMzYsIC0uNDQ3MiwgLjUyNTcsIC43MjM2LCAtLjQ0NzIsIC0uNTI1NywgLjM0MTYsIC0uNDQ3MiwgMCwgLjEwNTYsIC0uNDQ3MiwgLjMyNDksIC4xMDU2LCAtLjQ0NzIsIC0uMzI0OSwgLS4yNzY0LCAtLjQ0NzIsIC4yMDA4LCAtLjI3NjQsIC0uNDQ3MiwgLS4yMDA4LCAtLjU1MjcsIC4xMDU4LCAwLCAtLjE3MDgsIC4xMDU4LCAuNTUyNywgLS4xNzA4LFxuXHRcdFx0XHQuMTA1OCwgLS41NTI3LCAuNDQ3MSwgLjEwNTgsIC4zMjQ5LCAuNDQ3MSwgLjEwNTgsIC0uMzI0OSwgLjU1MjcsIC0uMTA1OCwgMCwgLjE3MDgsIC0uMTA1OCwgLjU1MjcsIC4xNzA4LCAtLjEwNTgsIC0uNTUyNywgLS40NDcxLCAtLjEwNTgsIC4zMjQ5LCAtLjQ0NzEsIC0uMTA1OCwgLS4zMjQ5LCAwLCAxLCAwLCAwLCAtMSwgMCBdO1xuXHRcdHZhciBpcyA9IFsgMCwgOSwgOCwgMiwgNywgOSwgNCwgNSwgNywgMywgNiwgNSwgMSwgOCwgNiwgMCwgOCwgMjMsIDMwLCA2LCA4LCAzLCAyMSwgNiwgMTEsIDI2LCAyMSwgMTMsIDIzLCAyNiwgMiwgOSwgMjQsIDMwLCA4LCA5LCAxLCAyMywgOCwgMTMsIDI1LCAyMywgMTQsIDI0LCAyNSwgNCwgNywgMjIsIDMwLCA5LCA3LCAwLCAyNCwgOSwgMTQsIDI3LCAyNCwgMTIsIDIyLCAyNywgMywgNSwgMjAsIDMwLCA3LCA1LCAyLCAyMiwgNywgMTIsIDI5LCAyMiwgMTAsIDIwLCAyOSwgMSwgNiwgMjEsIDMwLCA1LCA2LCA0LCAyMCwgNSwgMTAsIDI4LCAyMCwgMTEsIDIxLCAyOCwgMTAsIDE5LCAxOCwgMTIsIDE3LCAxOSwgMTQsIDE1LCAxNywgMTMsIDE2LCAxNSwgMTEsIDE4LCAxNiwgMzEsIDE5LCAxNywgMTQsIDE3LCAyNywgMiwgMjcsIDIyLCA0LCAyMiwgMjksIDEwLCAyOSwgMTksIDMxLCAxOCwgMTksIDEyLCAxOSwgMjksIDQsIDI5LCAyMCwgMywgMjAsIDI4LFxuXHRcdFx0XHQxMSwgMjgsIDE4LCAzMSwgMTYsIDE4LCAxMCwgMTgsIDI4LCAzLCAyOCwgMjEsIDEsIDIxLCAyNiwgMTMsIDI2LCAxNiwgMzEsIDE1LCAxNiwgMTEsIDE2LCAyNiwgMSwgMjYsIDIzLCAwLCAyMywgMjUsIDE0LCAyNSwgMTUsIDMxLCAxNywgMTUsIDEzLCAxNSwgMjUsIDAsIDI1LCAyNCwgMiwgMjQsIDI3LCAxMiwgMjcsIDE3IF07XG5cblx0XHR2YXIgcG9zaXRpb25EYXRhID0gW107XG5cdFx0dmFyIG5vcm1hbERhdGEgPSBbXTtcblx0XHR2YXIgaW5kZXhEYXRhID0gW107XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IGlzLmxlbmd0aDsgaSA8IGlpOyBpICs9IDMpIHtcblx0XHRcdHZhciBqMSA9IGlzW2ldICogMztcblx0XHRcdHZhciBqMiA9IGlzW2kgKyAxXSAqIDM7XG5cdFx0XHR2YXIgajMgPSBpc1tpICsgMl0gKiAzO1xuXG5cdFx0XHR2YXIgcDEgPSBbIHBzW2oxXSwgcHNbajEgKyAxXSwgcHNbajEgKyAyXSBdO1xuXHRcdFx0dmFyIHAyID0gWyBwc1tqMl0sIHBzW2oyICsgMV0sIHBzW2oyICsgMl0gXTtcblx0XHRcdHZhciBwMyA9IFsgcHNbajNdLCBwc1tqMyArIDFdLCBwc1tqMyArIDJdIF07XG5cblx0XHRcdHZhciB0b0Fib3ZlID0gWyBwMVswXSAtIHAyWzBdLCBwMVsxXSAtIHAyWzFdLCBwMVsyXSAtIHAyWzJdIF07XG5cdFx0XHR2YXIgdG9TaWRlID0gWyBwM1swXSAtIHAyWzBdLCBwM1sxXSAtIHAyWzFdLCBwM1syXSAtIHAyWzJdIF07XG5cdFx0XHR2YXIgbm9ybWFsID0gdjMuY3Jvc3ModG9TaWRlLCB0b0Fib3ZlLCBbXSk7XG5cdFx0XHR2My5ub3JtYWxpemUobm9ybWFsKTtcblxuXHRcdFx0cG9zaXRpb25EYXRhLnB1c2gocDFbMF0sIHAxWzFdLCBwMVsyXSwgcDJbMF0sIHAyWzFdLCBwMlsyXSwgcDNbMF0sIHAzWzFdLCBwM1syXSk7XG5cdFx0XHRub3JtYWxEYXRhLnB1c2gobm9ybWFsWzBdLCBub3JtYWxbMV0sIG5vcm1hbFsyXSwgbm9ybWFsWzBdLCBub3JtYWxbMV0sIG5vcm1hbFsyXSwgbm9ybWFsWzBdLCBub3JtYWxbMV0sIG5vcm1hbFsyXSk7XG5cdFx0XHRpbmRleERhdGEucHVzaChpLCBpICsgMSwgaSArIDIpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcmVEYXRhKHBvc2l0aW9uRGF0YSwgbm9ybWFsRGF0YSwgaW5kZXhEYXRhKTtcblx0fTtcblx0ZDMuU3Rhci5wcm90b3R5cGUgPSBuZXcgZDMuX01lc2goKTtcblxufSkoQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLmQzLCBNYXRoLCBDaGVtRG9vZGxlLmxpYi52ZWMzKTtcblxuKGZ1bmN0aW9uKGQzLCBleHRlbnNpb25zLCBkb2N1bWVudCwgd2luZG93LCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgcmF0aW8gPSAxO1xuXHRpZih3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyl7XG5cdFx0cmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcblx0fVxuXHRcblx0ZDMuVGV4dEltYWdlID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5jdHggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKS5nZXRDb250ZXh0KCcyZCcpO1xuXHRcdHRoaXMuZGF0YSA9IFtdO1xuXHRcdHRoaXMudGV4dCA9ICcnO1xuXHRcdHRoaXMuY2hhckhlaWdodCA9IDA7XG5cdH07XG5cblx0dmFyIF8gPSBkMy5UZXh0SW1hZ2UucHJvdG90eXBlO1xuXG5cdF8uaW5pdCA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0Ly8gaW5pdCB0ZXh0dXJlXG5cdFx0dGhpcy50ZXh0dXJlSW1hZ2UgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy50ZXh0dXJlSW1hZ2UpO1xuXG5cdFx0Z2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0ZMSVBfWV9XRUJHTCwgZmFsc2UpO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLkNMQU1QX1RPX0VER0UpO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5ORUFSRVNUKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG5cdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XG5cblx0XHR0aGlzLnVwZGF0ZUZvbnQoZ2wsIDEyLCBbICdTYW5zLXNlcmlmJyBdLCBmYWxzZSwgZmFsc2UsIGZhbHNlKTtcblx0fTtcblxuXHRfLmNoYXJEYXRhID0gZnVuY3Rpb24oY2hhcmFjdGVyKSB7XG5cdFx0dmFyIGluZGV4ID0gdGhpcy50ZXh0LmluZGV4T2YoY2hhcmFjdGVyKTtcblx0XHRyZXR1cm4gaW5kZXggPj0gMCA/IHRoaXMuZGF0YVtpbmRleF0gOiBudWxsO1xuXHR9O1xuXG5cdF8udXBkYXRlRm9udCA9IGZ1bmN0aW9uKGdsLCBmb250U2l6ZSwgZm9udEZhbWlsaWVzLCBmb250Qm9sZCwgZm9udEl0YWxpYywgZm9udFN0cm9rZSkge1xuXHRcdHZhciBjdHggPSB0aGlzLmN0eDtcblx0XHR2YXIgY2FudmFzID0gdGhpcy5jdHguY2FudmFzO1xuXHRcdHZhciBkYXRhID0gW107XG5cdFx0dmFyIHRleHQgPSBcIlwiO1xuXHRcdGZvbnRTaXplICo9IHJhdGlvO1xuXHRcdHZhciBjb250ZXh0Rm9udCA9IGV4dGVuc2lvbnMuZ2V0Rm9udFN0cmluZyhmb250U2l6ZSwgZm9udEZhbWlsaWVzLCBmb250Qm9sZCwgZm9udEl0YWxpYyk7XG5cblx0XHRjdHguZm9udCA9IGNvbnRleHRGb250O1xuXG5cdFx0Y3R4LnNhdmUoKTtcblxuXHRcdHZhciB0b3RhbFdpZHRoID0gMDtcblx0XHR2YXIgY2hhckhlaWdodCA9IGZvbnRTaXplICogMS41O1xuXG5cdFx0Zm9yICggdmFyIGkgPSAzMiwgaWkgPSAxMjc7IGkgPCBpaTsgaSsrKSB7XG5cblx0XHRcdC8vIHNraXAgY29udHJvbCBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBpZihpIDw9IDMxIHx8IGkgPT0gMTI3KSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGNoYXJhY3RlciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoaSksIHdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KGNoYXJhY3Rlcikud2lkdGg7XG5cblx0XHRcdGRhdGEucHVzaCh7XG5cdFx0XHRcdHRleHQgOiBjaGFyYWN0ZXIsXG5cdFx0XHRcdHdpZHRoIDogd2lkdGgsXG5cdFx0XHRcdGhlaWdodCA6IGNoYXJIZWlnaHRcblx0XHRcdH0pO1xuXG5cdFx0XHR0b3RhbFdpZHRoICs9IHdpZHRoICogMjtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gYWRkIG90aGVyIGNoYXJhY3RlcnNcblx0XHR2YXIgY2hhcnMgPSAnXFx1MDBiMFxcdTIxMmJcXHUwMEFFJy5zcGxpdCgnJyk7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IGNoYXJzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblxuXHRcdFx0dmFyIGNoYXJhY3RlciA9IGNoYXJzW2ldLCB3aWR0aCA9IGN0eC5tZWFzdXJlVGV4dChjaGFyYWN0ZXIpLndpZHRoO1xuXG5cdFx0XHRkYXRhLnB1c2goe1xuXHRcdFx0XHR0ZXh0IDogY2hhcmFjdGVyLFxuXHRcdFx0XHR3aWR0aCA6IHdpZHRoLFxuXHRcdFx0XHRoZWlnaHQgOiBjaGFySGVpZ2h0XG5cdFx0XHR9KTtcblxuXHRcdFx0dG90YWxXaWR0aCArPSB3aWR0aCAqIDI7XG5cdFx0fVxuXG5cdFx0dmFyIGFyZWFJbWFnZSA9IHRvdGFsV2lkdGggKiBjaGFySGVpZ2h0O1xuXHRcdHZhciBzcXJ0QXJlYSA9IE1hdGguc3FydChhcmVhSW1hZ2UpO1xuXHRcdHZhciB0b3RhbFJvd3MgPSBNYXRoLmNlaWwoc3FydEFyZWEgLyBjaGFySGVpZ2h0KTtcblx0XHR2YXIgbWF4V2lkdGggPSBNYXRoLmNlaWwodG90YWxXaWR0aCAvICh0b3RhbFJvd3MgLSAxKSk7XG5cblx0XHRjYW52YXMud2lkdGggPSBtYXhXaWR0aDtcblx0XHRjYW52YXMuaGVpZ2h0ID0gdG90YWxSb3dzICogY2hhckhlaWdodDtcblxuXHRcdGN0eC5mb250ID0gY29udGV4dEZvbnQ7XG5cdFx0Y3R4LnRleHRBbGlnbiA9IFwibGVmdFwiO1xuXHRcdGN0eC50ZXh0QmFzZWxpbmUgPSBcIm1pZGRsZVwiO1xuXG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gXCIjMDAwXCI7XG5cdFx0Y3R4LmxpbmVXaWR0aCA9IDEuNDtcblxuXHRcdGN0eC5maWxsU3R5bGUgPSBcIiNmZmZcIjtcblxuXHRcdHZhciBvZmZzZXRSb3cgPSAwO1xuXHRcdHZhciBwb3NYID0gMDtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gZGF0YS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgY2hhckRhdGEgPSBkYXRhW2ldO1xuXHRcdFx0dmFyIGNoYXJXaWR0aCA9IGNoYXJEYXRhLndpZHRoICogMjtcblx0XHRcdHZhciBjaGFySGVpZ2h0ID0gY2hhckRhdGEuaGVpZ2h0O1xuXHRcdFx0dmFyIGNoYXJUZXh0ID0gY2hhckRhdGEudGV4dDtcblx0XHRcdHZhciB3aWxsV2lkdGggPSBwb3NYICsgY2hhcldpZHRoO1xuXG5cdFx0XHRpZiAod2lsbFdpZHRoID4gbWF4V2lkdGgpIHtcblx0XHRcdFx0b2Zmc2V0Um93Kys7XG5cdFx0XHRcdHBvc1ggPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcG9zWSA9IG9mZnNldFJvdyAqIGNoYXJIZWlnaHQ7XG5cblx0XHRcdGlmIChmb250U3Ryb2tlKSB7XG5cdFx0XHRcdC8vIHN0cm9rZSBtdXN0IGRyYXcgYmVmb3JlIGZpbGxcblx0XHRcdFx0Y3R4LnN0cm9rZVRleHQoY2hhclRleHQsIHBvc1gsIHBvc1kgKyAoY2hhckhlaWdodCAvIDIpKTtcblx0XHRcdH1cblxuXHRcdFx0Y3R4LmZpbGxUZXh0KGNoYXJUZXh0LCBwb3NYLCBwb3NZICsgKGNoYXJIZWlnaHQgLyAyKSk7XG5cblx0XHRcdGNoYXJEYXRhLnggPSBwb3NYO1xuXHRcdFx0Y2hhckRhdGEueSA9IHBvc1k7XG5cblx0XHRcdHRleHQgKz0gY2hhclRleHQ7XG5cdFx0XHRwb3NYICs9IGNoYXJXaWR0aDtcblx0XHR9XG5cblx0XHR0aGlzLnRleHQgPSB0ZXh0O1xuXHRcdHRoaXMuZGF0YSA9IGRhdGE7XG5cdFx0dGhpcy5jaGFySGVpZ2h0ID0gY2hhckhlaWdodDtcblxuXHRcdC8vIGFsc28gdXBkYXRlIHRoZSB0ZXh0dXJlXG5cdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy50ZXh0dXJlSW1hZ2UpO1xuXHRcdGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgY2FudmFzKTtcblx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcblx0fTtcblx0Xy5wdXNoVmVydGV4RGF0YSA9IGZ1bmN0aW9uKHRleHQsIHBvc2l0aW9uLCB6RGVwdGgsIGRhdGEpIHtcblx0XHQvLyBjaGFyYWN0ZXJzIG9mIHN0cmluZyB0ZXh0XG5cdFx0dmFyIHRleHRQaWVjZSA9IHRleHQudG9TdHJpbmcoKS5zcGxpdChcIlwiKTtcblxuXHRcdC8vIGhlaWdodCBvZiB0ZXh0dXJlIGltYWdlXG5cdFx0dmFyIGhlaWdodEltYWdlID0gdGhpcy5nZXRIZWlnaHQoKTtcblx0XHR2YXIgd2lkdGhJbWFnZSA9IHRoaXMuZ2V0V2lkdGgoKTtcblxuXHRcdHZhciB4MSA9IC10aGlzLnRleHRXaWR0aCh0ZXh0KSAvIDIgLyByYXRpbztcblx0XHR2YXIgeTEgPSAtdGhpcy5jaGFySGVpZ2h0IC8gMiAvIHJhdGlvO1xuXG5cdFx0Ly8gaXRlcmF0ZSBlYWNoIGNoYXJhY3RlclxuXHRcdGZvciAoIHZhciBqID0gMCwgamogPSB0ZXh0UGllY2UubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0dmFyIGNoYXJEYXRhID0gdGhpcy5jaGFyRGF0YSh0ZXh0UGllY2Vbal0pO1xuXG5cdFx0XHR2YXIgd2lkdGggPSBjaGFyRGF0YS53aWR0aDtcblx0XHRcdHZhciBsZWZ0ID0gY2hhckRhdGEueCAvIHdpZHRoSW1hZ2U7XG5cdFx0XHR2YXIgcmlnaHQgPSBsZWZ0ICsgY2hhckRhdGEud2lkdGggKiAxLjggLyB3aWR0aEltYWdlO1xuXHRcdFx0dmFyIHRvcCA9IGNoYXJEYXRhLnkgLyBoZWlnaHRJbWFnZTtcblx0XHRcdHZhciBib3R0b20gPSB0b3AgKyBjaGFyRGF0YS5oZWlnaHQgLyBoZWlnaHRJbWFnZTtcblxuXHRcdFx0dmFyIHgyID0geDEgKyB3aWR0aCAqIDEuOCAvIHJhdGlvO1xuXHRcdFx0dmFyIHkyID0gdGhpcy5jaGFySGVpZ2h0IC8gMiAvIHJhdGlvO1xuXG5cdFx0XHRkYXRhLnBvc2l0aW9uLnB1c2goXG5cdFx0XHQvLyBsZWZ0IHRvcFxuXHRcdFx0cG9zaXRpb25bMF0sIHBvc2l0aW9uWzFdLCBwb3NpdGlvblsyXSxcblx0XHRcdC8vIHJpZ2h0IHRvcFxuXHRcdFx0cG9zaXRpb25bMF0sIHBvc2l0aW9uWzFdLCBwb3NpdGlvblsyXSxcblx0XHRcdC8vIHJpZ2h0IGJvdHRvbVxuXHRcdFx0cG9zaXRpb25bMF0sIHBvc2l0aW9uWzFdLCBwb3NpdGlvblsyXSxcblxuXHRcdFx0Ly8gbGVmdCB0b3Bcblx0XHRcdHBvc2l0aW9uWzBdLCBwb3NpdGlvblsxXSwgcG9zaXRpb25bMl0sXG5cdFx0XHQvLyBsZWZ0IGJvdHRvbVxuXHRcdFx0cG9zaXRpb25bMF0sIHBvc2l0aW9uWzFdLCBwb3NpdGlvblsyXSxcblx0XHRcdC8vIHJpZ2h0IGJvdHRvbVxuXHRcdFx0cG9zaXRpb25bMF0sIHBvc2l0aW9uWzFdLCBwb3NpdGlvblsyXSk7XG5cblx0XHRcdGRhdGEudGV4Q29vcmQucHVzaChcblx0XHRcdC8vIGxlZnQgdG9wXG5cdFx0XHRsZWZ0LCB0b3AsXG5cdFx0XHQvLyByaWdodCBib3R0b21cblx0XHRcdHJpZ2h0LCBib3R0b20sXG5cdFx0XHQvLyByaWdodCB0b3Bcblx0XHRcdHJpZ2h0LCB0b3AsXG5cblx0XHRcdC8vIGxlZnQgdG9wXG5cdFx0XHRsZWZ0LCB0b3AsXG5cdFx0XHQvLyBsZWZ0IGJvdHRvbVxuXHRcdFx0bGVmdCwgYm90dG9tLFxuXHRcdFx0Ly8gcmlnaHQgYm90dG9tXG5cdFx0XHRyaWdodCwgYm90dG9tKTtcblxuXHRcdFx0ZGF0YS50cmFuc2xhdGlvbi5wdXNoKFxuXHRcdFx0Ly8gbGVmdCB0b3Bcblx0XHRcdHgxLCB5MiwgekRlcHRoLFxuXHRcdFx0Ly8gcmlnaHQgYm90dG9tXG5cdFx0XHR4MiwgeTEsIHpEZXB0aCxcblx0XHRcdC8vIHJpZ2h0IHRvcFxuXHRcdFx0eDIsIHkyLCB6RGVwdGgsXG5cblx0XHRcdC8vIGxlZnQgdG9wXG5cdFx0XHR4MSwgeTIsIHpEZXB0aCxcblx0XHRcdC8vIGxlZnQgYm90dG9tXG5cdFx0XHR4MSwgeTEsIHpEZXB0aCxcblx0XHRcdC8vIHJpZ2h0IGJvdHRvbVxuXHRcdFx0eDIsIHkxLCB6RGVwdGgpO1xuXG5cdFx0XHR4MSA9IHgyICsgKHdpZHRoIC0gd2lkdGggKiAxLjgpIC8gcmF0aW87XG5cdFx0fVxuXG5cdH07XG5cdF8uZ2V0Q2FudmFzID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuY3R4LmNhbnZhcztcblx0fTtcblx0Xy5nZXRIZWlnaHQgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRDYW52YXMoKS5oZWlnaHQ7XG5cdH07XG5cdF8uZ2V0V2lkdGggPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRDYW52YXMoKS53aWR0aDtcblx0fTtcblx0Xy50ZXh0V2lkdGggPSBmdW5jdGlvbih0ZXh0KSB7XG5cdFx0cmV0dXJuIHRoaXMuY3R4Lm1lYXN1cmVUZXh0KHRleHQpLndpZHRoO1xuXHR9O1xuXHRfLnRlc3QgPSBmdW5jdGlvbigpIHtcblx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZ2V0Q2FudmFzKCkpO1xuXHR9O1xuXHRfLnVzZVRleHR1cmUgPSBmdW5jdGlvbihnbCkge1xuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMudGV4dHVyZUltYWdlKTtcblx0fTtcblxufSkoQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLmQzLCBDaGVtRG9vZGxlLmV4dGVuc2lvbnMsIGRvY3VtZW50LCB3aW5kb3cpO1xuXG4oZnVuY3Rpb24oZDMsIG0sIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLlRleHRNZXNoID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfID0gZDMuVGV4dE1lc2gucHJvdG90eXBlO1xuXHRfLmluaXQgPSBmdW5jdGlvbihnbCkge1xuXHRcdC8vIHNldCB2ZXJ0ZXggYnVmZmVyXG5cdFx0dGhpcy52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuXHRcdHRoaXMudmVydGV4VGV4Q29vcmRCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcblx0XHR0aGlzLnZlcnRleFRyYW5zbGF0aW9uQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdH07XG5cdF8uc2V0VmVydGV4RGF0YSA9IGZ1bmN0aW9uKGdsLCB2ZXJ0ZXhCdWZmZXIsIGJ1ZmZlckRhdGEsIGl0ZW1TaXplKSB7XG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHZlcnRleEJ1ZmZlcik7XG5cdFx0Z2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyRGF0YSksIGdsLlNUQVRJQ19EUkFXKTtcblx0XHR2ZXJ0ZXhCdWZmZXIuaXRlbVNpemUgPSBpdGVtU2l6ZTtcblx0XHR2ZXJ0ZXhCdWZmZXIubnVtSXRlbXMgPSBidWZmZXJEYXRhLmxlbmd0aCAvIGl0ZW1TaXplO1xuXHR9O1xuXHRfLnN0b3JlRGF0YSA9IGZ1bmN0aW9uKGdsLCB2ZXJ0ZXhQb3NpdGlvbkRhdGEsIHZlcnRleFRleENvb3JkRGF0YSwgdmVydGV4VHJhbnNsYXRpb25EYXRhKSB7XG5cdFx0dGhpcy5zZXRWZXJ0ZXhEYXRhKGdsLCB0aGlzLnZlcnRleFBvc2l0aW9uQnVmZmVyLCB2ZXJ0ZXhQb3NpdGlvbkRhdGEsIDMpO1xuXHRcdHRoaXMuc2V0VmVydGV4RGF0YShnbCwgdGhpcy52ZXJ0ZXhUZXhDb29yZEJ1ZmZlciwgdmVydGV4VGV4Q29vcmREYXRhLCAyKTtcblx0XHR0aGlzLnNldFZlcnRleERhdGEoZ2wsIHRoaXMudmVydGV4VHJhbnNsYXRpb25CdWZmZXIsIHZlcnRleFRyYW5zbGF0aW9uRGF0YSwgMyk7XG5cdH07XG5cdF8uYmluZEJ1ZmZlcnMgPSBmdW5jdGlvbihnbCkge1xuXHRcdC8vIHBvc2l0aW9uc1xuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnZlcnRleFBvc2l0aW9uQnVmZmVyKTtcblx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGdsLnNoYWRlci52ZXJ0ZXhQb3NpdGlvbkF0dHJpYnV0ZSwgdGhpcy52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5pdGVtU2l6ZSwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcblxuXHRcdC8vIHRleENvb3JkXG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMudmVydGV4VGV4Q29vcmRCdWZmZXIpO1xuXHRcdGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoZ2wuc2hhZGVyLnZlcnRleFRleENvb3JkQXR0cmlidXRlLCB0aGlzLnZlcnRleFRleENvb3JkQnVmZmVyLml0ZW1TaXplLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXG5cdFx0Ly8gdHJhbnNsYXRpb24gYW5kIHogZGVwdGhcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy52ZXJ0ZXhUcmFuc2xhdGlvbkJ1ZmZlcik7XG5cdFx0Z2wudmVydGV4QXR0cmliUG9pbnRlcihnbC5zaGFkZXIudmVydGV4Tm9ybWFsQXR0cmlidXRlLCB0aGlzLnZlcnRleFRyYW5zbGF0aW9uQnVmZmVyLml0ZW1TaXplLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXHR9O1xuXHRfLnJlbmRlciA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIG51bUl0ZW1zID0gdGhpcy52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5udW1JdGVtcztcblxuXHRcdGlmICghbnVtSXRlbXMpIHtcblx0XHRcdC8vIG5vdGhpbmcgdG8gZG8gaGVyZVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuYmluZEJ1ZmZlcnMoZ2wpO1xuXHRcdGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVTLCAwLCBudW1JdGVtcyk7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgTWF0aCk7XG5cbihmdW5jdGlvbihFTEVNRU5ULCBtYXRoLCBkMywgbSwgbTQsIHYzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRkMy5Ub3JzaW9uID0gZnVuY3Rpb24oYTEsIGEyLCBhMywgYTQpIHtcblx0XHR0aGlzLmExID0gYTE7XG5cdFx0dGhpcy5hMiA9IGEyO1xuXHRcdHRoaXMuYTMgPSBhMztcblx0XHR0aGlzLmE0ID0gYTQ7XG5cdH07XG5cdHZhciBfID0gZDMuVG9yc2lvbi5wcm90b3R5cGUgPSBuZXcgZDMuX01lYXN1cmVtZW50KCk7XG5cdF8uY2FsY3VsYXRlRGF0YSA9IGZ1bmN0aW9uKHNwZWNzKSB7XG5cdFx0dmFyIHBvc2l0aW9uRGF0YSA9IFtdO1xuXHRcdHZhciBub3JtYWxEYXRhID0gW107XG5cdFx0dmFyIGluZGV4RGF0YSA9IFtdO1xuXHRcdHZhciBkaXN0MSA9IHRoaXMuYTIuZGlzdGFuY2UzRCh0aGlzLmExKTtcblx0XHR2YXIgZGlzdDIgPSB0aGlzLmEyLmRpc3RhbmNlM0QodGhpcy5hMyk7XG5cdFx0dGhpcy5kaXN0VXNlID0gbS5taW4oZGlzdDEsIGRpc3QyKSAvIDI7XG5cdFx0Ly8gZGF0YSBmb3IgdGhlIGFuZ2xlXG5cdFx0dmFyIGIxID0gWyB0aGlzLmEyLnggLSB0aGlzLmExLngsIHRoaXMuYTIueSAtIHRoaXMuYTEueSwgdGhpcy5hMi56IC0gdGhpcy5hMS56IF07XG5cdFx0dmFyIGIyID0gWyB0aGlzLmEzLnggLSB0aGlzLmEyLngsIHRoaXMuYTMueSAtIHRoaXMuYTIueSwgdGhpcy5hMy56IC0gdGhpcy5hMi56IF07XG5cdFx0dmFyIGIzID0gWyB0aGlzLmE0LnggLSB0aGlzLmEzLngsIHRoaXMuYTQueSAtIHRoaXMuYTMueSwgdGhpcy5hNC56IC0gdGhpcy5hMy56IF07XG5cdFx0dmFyIGNyb3NzMTIgPSB2My5jcm9zcyhiMSwgYjIsIFtdKTtcblx0XHR2YXIgY3Jvc3MyMyA9IHYzLmNyb3NzKGIyLCBiMywgW10pO1xuXHRcdHYzLnNjYWxlKGIxLCB2My5sZW5ndGgoYjIpKTtcblx0XHR0aGlzLnRvcnNpb24gPSBtLmF0YW4yKHYzLmRvdChiMSwgY3Jvc3MyMyksIHYzLmRvdChjcm9zczEyLCBjcm9zczIzKSk7XG5cblx0XHR2YXIgdmVjMSA9IHYzLm5vcm1hbGl6ZSh2My5jcm9zcyhjcm9zczEyLCBiMiwgW10pKTtcblx0XHR2YXIgdmVjMyA9IHYzLm5vcm1hbGl6ZSh2My5jcm9zcyhiMiwgdmVjMSwgW10pKTtcblxuXHRcdHRoaXMucG9zID0gdjMuYWRkKFsgdGhpcy5hMi54LCB0aGlzLmEyLnksIHRoaXMuYTIueiBdLCB2My5zY2FsZSh2My5ub3JtYWxpemUoYjIsIFtdKSwgdGhpcy5kaXN0VXNlKSk7XG5cblx0XHR2YXIgdmVjMCA9IFtdO1xuXG5cdFx0dmFyIGJhbmRzID0gc3BlY3MubWVhc3VyZW1lbnRfYW5nbGVCYW5kc18zRDtcblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPD0gYmFuZHM7ICsraSkge1xuXHRcdFx0dmFyIHRoZXRhID0gdGhpcy50b3JzaW9uICogaSAvIGJhbmRzO1xuXHRcdFx0dmFyIHZlY0NvcyA9IHYzLnNjYWxlKHZlYzEsIG0uY29zKHRoZXRhKSwgW10pO1xuXHRcdFx0dmFyIHZlY1NpbiA9IHYzLnNjYWxlKHZlYzMsIG0uc2luKHRoZXRhKSwgW10pO1xuXHRcdFx0dmFyIG5vcm0gPSB2My5zY2FsZSh2My5ub3JtYWxpemUodjMuYWRkKHZlY0NvcywgdmVjU2luLCBbXSkpLCB0aGlzLmRpc3RVc2UpO1xuXG5cdFx0XHRpZiAoaSA9PSAwKSB7XG5cdFx0XHRcdHZlYzAgPSBub3JtO1xuXHRcdFx0fVxuXG5cdFx0XHRwb3NpdGlvbkRhdGEucHVzaCh0aGlzLnBvc1swXSArIG5vcm1bMF0sIHRoaXMucG9zWzFdICsgbm9ybVsxXSwgdGhpcy5wb3NbMl0gKyBub3JtWzJdKTtcblx0XHRcdG5vcm1hbERhdGEucHVzaCgwLCAwLCAwKTtcblx0XHRcdGlmIChpIDwgYmFuZHMpIHtcblx0XHRcdFx0aW5kZXhEYXRhLnB1c2goaSwgaSArIDEpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMudmVjVGV4dCA9IHYzLm5vcm1hbGl6ZSh2My5hZGQodmVjMCwgbm9ybSwgW10pKTtcblx0XHRcblx0XHR2YXIgYXJyb3dMZW5ndGggPSAwLjI1O1xuXHRcdHZhciBiMk5vcm0gPSB2My5ub3JtYWxpemUoYjIsIFtdKTtcblx0XHR2My5zY2FsZShiMk5vcm0sIGFycm93TGVuZ3RoIC8gNCk7XG5cblx0XHR2YXIgdGhldGEgPSB0aGlzLnRvcnNpb24gLSBtLmFzaW4oYXJyb3dMZW5ndGggLyAyKSAqIDIgKiB0aGlzLnRvcnNpb24gLyBtLmFicyh0aGlzLnRvcnNpb24pO1xuXHRcdHZhciB2ZWNDb3MgPSB2My5zY2FsZSh2ZWMxLCBtLmNvcyh0aGV0YSksIFtdKTtcblx0XHR2YXIgdmVjU2luID0gdjMuc2NhbGUodmVjMywgbS5zaW4odGhldGEpLCBbXSk7XG5cdFx0dmFyIG5vcm0gPSB2My5zY2FsZSh2My5ub3JtYWxpemUodjMuYWRkKHZlY0NvcywgdmVjU2luLCBbXSkpLCB0aGlzLmRpc3RVc2UpO1xuXG5cdFx0cG9zaXRpb25EYXRhLnB1c2godGhpcy5wb3NbMF0gKyBiMk5vcm1bMF0gKyBub3JtWzBdLCB0aGlzLnBvc1sxXSArIGIyTm9ybVsxXSArIG5vcm1bMV0sIHRoaXMucG9zWzJdICsgYjJOb3JtWzJdICsgbm9ybVsyXSk7XG5cdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDAsIDApO1xuXG5cdFx0cG9zaXRpb25EYXRhLnB1c2godGhpcy5wb3NbMF0gLSBiMk5vcm1bMF0gKyBub3JtWzBdLCB0aGlzLnBvc1sxXSAtIGIyTm9ybVsxXSArIG5vcm1bMV0sIHRoaXMucG9zWzJdIC0gYjJOb3JtWzJdICsgbm9ybVsyXSk7XG5cdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDAsIDApO1xuXG5cdFx0aW5kZXhEYXRhLnB1c2goLS1pLCBpICsgMSwgaSwgaSArIDIpO1xuXG5cdFx0dGhpcy5zdG9yZURhdGEocG9zaXRpb25EYXRhLCBub3JtYWxEYXRhLCBpbmRleERhdGEpO1xuXHR9O1xuXHRfLmdldFRleHQgPSBmdW5jdGlvbihzcGVjcykge1xuXHRcdHYzLmFkZCh0aGlzLnBvcywgdjMuc2NhbGUodGhpcy52ZWNUZXh0LCB0aGlzLmRpc3RVc2UgKyAwLjMsIFtdKSk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0cG9zIDogdGhpcy5wb3MsXG5cdFx0XHR2YWx1ZSA6IFsgbWF0aC5hbmdsZUJvdW5kcyh0aGlzLnRvcnNpb24sIHRydWUsIHRydWUpLnRvRml4ZWQoMiksICcgXFx1MDBiMCcgXS5qb2luKCcnKVxuXHRcdH07XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuRUxFTUVOVCwgQ2hlbURvb2RsZS5tYXRoLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDMsIE1hdGgsIENoZW1Eb29kbGUubGliLm1hdDQsIENoZW1Eb29kbGUubGliLnZlYzMpO1xuXG4oZnVuY3Rpb24oZXh0ZW5zaW9ucywgUkVTSURVRSwgc3RydWN0dXJlcywgZDMsIG0sIG00LCB2MywgbWF0aCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIGxvYWRQYXJ0aXRpb24gPSBmdW5jdGlvbihnbCwgcCkge1xuXHRcdC8vIHBvc2l0aW9uc1xuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBwLnZlcnRleFBvc2l0aW9uQnVmZmVyKTtcblx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGdsLnNoYWRlci52ZXJ0ZXhQb3NpdGlvbkF0dHJpYnV0ZSwgcC52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5pdGVtU2l6ZSwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcblx0XHQvLyBub3JtYWxzXG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHAudmVydGV4Tm9ybWFsQnVmZmVyKTtcblx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGdsLnNoYWRlci52ZXJ0ZXhOb3JtYWxBdHRyaWJ1dGUsIHAudmVydGV4Tm9ybWFsQnVmZmVyLml0ZW1TaXplLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXHRcdC8vIGluZGV4ZXNcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBwLnZlcnRleEluZGV4QnVmZmVyKTtcblx0fTtcblxuXHR2YXIgUG9pbnRSb3RhdG9yID0gZnVuY3Rpb24ocG9pbnQsIGF4aXMsIGFuZ2xlKSB7XG5cdFx0dmFyIGQgPSBtLnNxcnQoYXhpc1sxXSAqIGF4aXNbMV0gKyBheGlzWzJdICogYXhpc1syXSk7XG5cdFx0dmFyIFJ4ID0gWyAxLCAwLCAwLCAwLCAwLCBheGlzWzJdIC8gZCwgLWF4aXNbMV0gLyBkLCAwLCAwLCBheGlzWzFdIC8gZCwgYXhpc1syXSAvIGQsIDAsIDAsIDAsIDAsIDEgXTtcblx0XHR2YXIgUnhUID0gWyAxLCAwLCAwLCAwLCAwLCBheGlzWzJdIC8gZCwgYXhpc1sxXSAvIGQsIDAsIDAsIC1heGlzWzFdIC8gZCwgYXhpc1syXSAvIGQsIDAsIDAsIDAsIDAsIDEgXTtcblx0XHR2YXIgUnkgPSBbIGQsIDAsIC1heGlzWzBdLCAwLCAwLCAxLCAwLCAwLCBheGlzWzBdLCAwLCBkLCAwLCAwLCAwLCAwLCAxIF07XG5cdFx0dmFyIFJ5VCA9IFsgZCwgMCwgYXhpc1swXSwgMCwgMCwgMSwgMCwgMCwgLWF4aXNbMF0sIDAsIGQsIDAsIDAsIDAsIDAsIDEgXTtcblx0XHR2YXIgUnogPSBbIG0uY29zKGFuZ2xlKSwgLW0uc2luKGFuZ2xlKSwgMCwgMCwgbS5zaW4oYW5nbGUpLCBtLmNvcyhhbmdsZSksIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEgXTtcblx0XHR2YXIgbWF0cml4ID0gbTQubXVsdGlwbHkoUngsIG00Lm11bHRpcGx5KFJ5LCBtNC5tdWx0aXBseShSeiwgbTQubXVsdGlwbHkoUnlULCBSeFQsIFtdKSkpKTtcblx0XHR0aGlzLnJvdGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIG00Lm11bHRpcGx5VmVjMyhtYXRyaXgsIHBvaW50KTtcblx0XHR9O1xuXHR9O1xuXG5cdGQzLlR1YmUgPSBmdW5jdGlvbihjaGFpbiwgdGhpY2tuZXNzLCBjeWxpbmRlclJlc29sdXRpb24pIHtcblx0XHR2YXIgbGluZVNlZ21lbnROdW0gPSBjaGFpblswXS5saW5lU2VnbWVudHNbMF0ubGVuZ3RoO1xuXHRcdHRoaXMucGFydGl0aW9ucyA9IFtdO1xuXHRcdHZhciBjdXJyZW50UGFydGl0aW9uO1xuXHRcdHRoaXMuZW5kcyA9IFtdO1xuXHRcdHRoaXMuZW5kcy5wdXNoKGNoYWluWzBdLmxpbmVTZWdtZW50c1swXVswXSk7XG5cdFx0dGhpcy5lbmRzLnB1c2goY2hhaW5bY2hhaW4ubGVuZ3RoIC0gMV0ubGluZVNlZ21lbnRzWzBdWzBdKTtcblx0XHQvLyBjYWxjdWxhdGUgdmVydGV4IGFuZCBub3JtYWwgcG9pbnRzXG5cdFx0dmFyIGxhc3QgPSBbIDEsIDAsIDAgXTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gY2hhaW4ubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0aWYgKCFjdXJyZW50UGFydGl0aW9uIHx8IGN1cnJlbnRQYXJ0aXRpb24ucG9zaXRpb25EYXRhLmxlbmd0aCA+IDY1MDAwKSB7XG5cdFx0XHRcdGlmICh0aGlzLnBhcnRpdGlvbnMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdGktLTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjdXJyZW50UGFydGl0aW9uID0ge1xuXHRcdFx0XHRcdGNvdW50IDogMCxcblx0XHRcdFx0XHRwb3NpdGlvbkRhdGEgOiBbXSxcblx0XHRcdFx0XHRub3JtYWxEYXRhIDogW10sXG5cdFx0XHRcdFx0aW5kZXhEYXRhIDogW11cblx0XHRcdFx0fTtcblx0XHRcdFx0dGhpcy5wYXJ0aXRpb25zLnB1c2goY3VycmVudFBhcnRpdGlvbik7XG5cdFx0XHR9XG5cdFx0XHR2YXIgcmVzaWR1ZSA9IGNoYWluW2ldO1xuXHRcdFx0Y3VycmVudFBhcnRpdGlvbi5jb3VudCsrO1xuXHRcdFx0dmFyIG1pbiA9IEluZmluaXR5O1xuXHRcdFx0dmFyIHAgPSBuZXcgc3RydWN0dXJlcy5BdG9tKCcnLCBjaGFpbltpXS5jcDEueCwgY2hhaW5baV0uY3AxLnksIGNoYWluW2ldLmNwMS56KTtcblx0XHRcdGZvciAoIHZhciBqID0gMDsgaiA8IGxpbmVTZWdtZW50TnVtOyBqKyspIHtcblx0XHRcdFx0dmFyIGN1cnJlbnRQb2ludCA9IHJlc2lkdWUubGluZVNlZ21lbnRzWzBdW2pdO1xuXHRcdFx0XHR2YXIgbmV4dFBvaW50O1xuXHRcdFx0XHRpZiAoaiA9PT0gbGluZVNlZ21lbnROdW0gLSAxKSB7XG5cdFx0XHRcdFx0aWYgKGkgPT09IGNoYWluLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0XHRcdG5leHRQb2ludCA9IHJlc2lkdWUubGluZVNlZ21lbnRzWzBdW2ogLSAxXTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bmV4dFBvaW50ID0gY2hhaW5baSArIDFdLmxpbmVTZWdtZW50c1swXVswXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bmV4dFBvaW50ID0gcmVzaWR1ZS5saW5lU2VnbWVudHNbMF1baiArIDFdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBheGlzID0gWyBuZXh0UG9pbnQueCAtIGN1cnJlbnRQb2ludC54LCBuZXh0UG9pbnQueSAtIGN1cnJlbnRQb2ludC55LCBuZXh0UG9pbnQueiAtIGN1cnJlbnRQb2ludC56IF07XG5cdFx0XHRcdHYzLm5vcm1hbGl6ZShheGlzKTtcblx0XHRcdFx0aWYgKGkgPT09IGNoYWluLmxlbmd0aCAtIDEgJiYgaiA9PT0gbGluZVNlZ21lbnROdW0gLSAxKSB7XG5cdFx0XHRcdFx0djMuc2NhbGUoYXhpcywgLTEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBzdGFydFZlY3RvciA9IHYzLmNyb3NzKGF4aXMsIGxhc3QsIFtdKTtcblx0XHRcdFx0djMubm9ybWFsaXplKHN0YXJ0VmVjdG9yKTtcblx0XHRcdFx0djMuc2NhbGUoc3RhcnRWZWN0b3IsIHRoaWNrbmVzcyAvIDIpO1xuXHRcdFx0XHR2YXIgcm90YXRvciA9IG5ldyBQb2ludFJvdGF0b3Ioc3RhcnRWZWN0b3IsIGF4aXMsIDIgKiBNYXRoLlBJIC8gY3lsaW5kZXJSZXNvbHV0aW9uKTtcblx0XHRcdFx0Zm9yICggdmFyIGsgPSAwLCBrayA9IGN5bGluZGVyUmVzb2x1dGlvbjsgayA8IGtrOyBrKyspIHtcblx0XHRcdFx0XHR2YXIgdXNlID0gcm90YXRvci5yb3RhdGUoKTtcblx0XHRcdFx0XHRpZiAoayA9PT0gbS5mbG9vcihjeWxpbmRlclJlc29sdXRpb24gLyA0KSkge1xuXHRcdFx0XHRcdFx0bGFzdCA9IFsgdXNlWzBdLCB1c2VbMV0sIHVzZVsyXSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjdXJyZW50UGFydGl0aW9uLm5vcm1hbERhdGEucHVzaCh1c2VbMF0sIHVzZVsxXSwgdXNlWzJdKTtcblx0XHRcdFx0XHRjdXJyZW50UGFydGl0aW9uLnBvc2l0aW9uRGF0YS5wdXNoKGN1cnJlbnRQb2ludC54ICsgdXNlWzBdLCBjdXJyZW50UG9pbnQueSArIHVzZVsxXSwgY3VycmVudFBvaW50LnogKyB1c2VbMl0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGZpbmQgY2xvc2VzdCBwb2ludCB0byBhdHRhY2ggc3RpY2sgdG9cblx0XHRcdFx0aWYgKHApIHtcblx0XHRcdFx0XHR2YXIgZGlzdCA9IGN1cnJlbnRQb2ludC5kaXN0YW5jZTNEKHApO1xuXHRcdFx0XHRcdGlmIChkaXN0IDwgbWluKSB7XG5cdFx0XHRcdFx0XHRtaW4gPSBkaXN0O1xuXHRcdFx0XHRcdFx0Y2hhaW5baV0ucFBvaW50ID0gY3VycmVudFBvaW50O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIG1lc2ggY29ubmVjdGl2aXR5XG5cdFx0Zm9yICggdmFyIG4gPSAwLCBubiA9IHRoaXMucGFydGl0aW9ucy5sZW5ndGg7IG4gPCBubjsgbisrKSB7XG5cdFx0XHR2YXIgY3VycmVudFBhcnRpdGlvbiA9IHRoaXMucGFydGl0aW9uc1tuXTtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBjdXJyZW50UGFydGl0aW9uLmNvdW50IC0gMTsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIGluZGV4U3RhcnQgPSBpICogbGluZVNlZ21lbnROdW0gKiBjeWxpbmRlclJlc29sdXRpb247XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBsaW5lU2VnbWVudE51bTsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgc2VnbWVudEluZGV4U3RhcnQgPSBpbmRleFN0YXJ0ICsgaiAqIGN5bGluZGVyUmVzb2x1dGlvbjtcblx0XHRcdFx0XHRmb3IgKCB2YXIgayA9IDA7IGsgPCBjeWxpbmRlclJlc29sdXRpb247IGsrKykge1xuXHRcdFx0XHRcdFx0dmFyIG5leHQgPSAxO1xuXHRcdFx0XHRcdFx0dmFyIHNrID0gc2VnbWVudEluZGV4U3RhcnQgKyBrO1xuXHRcdFx0XHRcdFx0Y3VycmVudFBhcnRpdGlvbi5pbmRleERhdGEucHVzaChzayk7XG5cdFx0XHRcdFx0XHRjdXJyZW50UGFydGl0aW9uLmluZGV4RGF0YS5wdXNoKHNrICsgY3lsaW5kZXJSZXNvbHV0aW9uKTtcblx0XHRcdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24uaW5kZXhEYXRhLnB1c2goc2sgKyBjeWxpbmRlclJlc29sdXRpb24gKyBuZXh0KTtcblx0XHRcdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24uaW5kZXhEYXRhLnB1c2goc2spO1xuXHRcdFx0XHRcdFx0Y3VycmVudFBhcnRpdGlvbi5pbmRleERhdGEucHVzaChzayArIGN5bGluZGVyUmVzb2x1dGlvbiArIG5leHQpO1xuXHRcdFx0XHRcdFx0Y3VycmVudFBhcnRpdGlvbi5pbmRleERhdGEucHVzaChzayArIG5leHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuc3RvcmVEYXRhKHRoaXMucGFydGl0aW9uc1swXS5wb3NpdGlvbkRhdGEsIHRoaXMucGFydGl0aW9uc1swXS5ub3JtYWxEYXRhLCB0aGlzLnBhcnRpdGlvbnNbMF0uaW5kZXhEYXRhKTtcblxuXHRcdHZhciBwcyA9IFsgbmV3IHN0cnVjdHVyZXMuUG9pbnQoMiwgMCkgXTtcblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2MDsgaSsrKSB7XG5cdFx0XHR2YXIgYW5nID0gaSAvIDYwICogbS5QSTtcblx0XHRcdHBzLnB1c2gobmV3IHN0cnVjdHVyZXMuUG9pbnQoMiAqIG0uY29zKGFuZyksIC0yICogbS5zaW4oYW5nKSkpO1xuXHRcdH1cblx0XHRwcy5wdXNoKG5ldyBzdHJ1Y3R1cmVzLlBvaW50KC0yLCAwKSwgbmV3IHN0cnVjdHVyZXMuUG9pbnQoLTIsIDQpLCBuZXcgc3RydWN0dXJlcy5Qb2ludCgyLCA0KSk7XG5cdFx0dmFyIHBsYXRmb3JtID0gbmV3IHN0cnVjdHVyZXMuZDMuU2hhcGUocHMsIDEpO1xuXG5cdFx0dGhpcy5yZW5kZXIgPSBmdW5jdGlvbihnbCwgc3BlY3MpIHtcblx0XHRcdC8vIGRyYXcgdHViZVxuXHRcdFx0dGhpcy5iaW5kQnVmZmVycyhnbCk7XG5cdFx0XHQvLyBjb2xvcnNcblx0XHRcdGdsLm1hdGVyaWFsLnNldERpZmZ1c2VDb2xvcihnbCwgc3BlY3MubWFjcm9fY29sb3JCeUNoYWluID8gdGhpcy5jaGFpbkNvbG9yIDogc3BlY3MubnVjbGVpY3NfdHViZUNvbG9yKTtcblx0XHRcdC8vIHJlbmRlclxuXHRcdFx0Z2wuZHJhd0VsZW1lbnRzKGdsLlRSSUFOR0xFUywgdGhpcy52ZXJ0ZXhJbmRleEJ1ZmZlci5udW1JdGVtcywgZ2wuVU5TSUdORURfU0hPUlQsIDApO1xuXHRcdFx0aWYgKHRoaXMucGFydGl0aW9ucykge1xuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDEsIGlpID0gdGhpcy5wYXJ0aXRpb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgcCA9IHRoaXMucGFydGl0aW9uc1tpXTtcblx0XHRcdFx0XHRsb2FkUGFydGl0aW9uKGdsLCBwKTtcblx0XHRcdFx0XHQvLyByZW5kZXJcblx0XHRcdFx0XHRnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCBwLnZlcnRleEluZGV4QnVmZmVyLm51bUl0ZW1zLCBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gZHJhdyBlbmRzXG5cdFx0XHRnbC5zcGhlcmVCdWZmZXIuYmluZEJ1ZmZlcnMoZ2wpO1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgMjsgaSsrKSB7XG5cdFx0XHRcdHZhciBwID0gdGhpcy5lbmRzW2ldO1xuXHRcdFx0XHR2YXIgdHJhbnNmb3JtID0gbTQudHJhbnNsYXRlKG00LmlkZW50aXR5KCksIFsgcC54LCBwLnksIHAueiBdKTtcblx0XHRcdFx0dmFyIHJhZGl1cyA9IHRoaWNrbmVzcyAvIDI7XG5cdFx0XHRcdG00LnNjYWxlKHRyYW5zZm9ybSwgWyByYWRpdXMsIHJhZGl1cywgcmFkaXVzIF0pO1xuXHRcdFx0XHQvLyByZW5kZXJcblx0XHRcdFx0Z2wuc2hhZGVyLnNldE1hdHJpeFVuaWZvcm1zKGdsLCB0cmFuc2Zvcm0pO1xuXHRcdFx0XHRnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCBnbC5zcGhlcmVCdWZmZXIudmVydGV4SW5kZXhCdWZmZXIubnVtSXRlbXMsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gZHJhdyBudWNsZW90aWRlIGhhbmRsZXNcblx0XHRcdGdsLmN5bGluZGVyQnVmZmVyLmJpbmRCdWZmZXJzKGdsKTtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBjaGFpbi5sZW5ndGggLSAxOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgcmVzaWR1ZSA9IGNoYWluW2ldO1xuXHRcdFx0XHR2YXIgcDEgPSByZXNpZHVlLnBQb2ludDtcblx0XHRcdFx0dmFyIHAyID0gbmV3IHN0cnVjdHVyZXMuQXRvbSgnJywgcmVzaWR1ZS5jcDIueCwgcmVzaWR1ZS5jcDIueSwgcmVzaWR1ZS5jcDIueik7XG5cdFx0XHRcdHZhciBoZWlnaHQgPSAxLjAwMSAqIHAxLmRpc3RhbmNlM0QocDIpO1xuXHRcdFx0XHR2YXIgc2NhbGVWZWN0b3IgPSBbIHRoaWNrbmVzcyAvIDQsIGhlaWdodCwgdGhpY2tuZXNzIC8gNCBdO1xuXHRcdFx0XHR2YXIgdHJhbnNmb3JtID0gbTQudHJhbnNsYXRlKG00LmlkZW50aXR5KCksIFsgcDEueCwgcDEueSwgcDEueiBdKTtcblx0XHRcdFx0dmFyIHkgPSBbIDAsIDEsIDAgXTtcblx0XHRcdFx0dmFyIGFuZyA9IDA7XG5cdFx0XHRcdHZhciBheGlzO1xuXHRcdFx0XHR2YXIgYTJiID0gWyBwMi54IC0gcDEueCwgcDIueSAtIHAxLnksIHAyLnogLSBwMS56IF07XG5cdFx0XHRcdGlmIChwMS54ID09PSBwMi54ICYmIHAxLnogPT09IHAyLnopIHtcblx0XHRcdFx0XHRheGlzID0gWyAwLCAwLCAxIF07XG5cdFx0XHRcdFx0aWYgKHAxLnkgPCBwMS55KSB7XG5cdFx0XHRcdFx0XHRhbmcgPSBtLlBJO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRhbmcgPSBleHRlbnNpb25zLnZlYzNBbmdsZUZyb20oeSwgYTJiKTtcblx0XHRcdFx0XHRheGlzID0gdjMuY3Jvc3MoeSwgYTJiLCBbXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGFuZyAhPT0gMCkge1xuXHRcdFx0XHRcdG00LnJvdGF0ZSh0cmFuc2Zvcm0sIGFuZywgYXhpcyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bTQuc2NhbGUodHJhbnNmb3JtLCBzY2FsZVZlY3Rvcik7XG5cdFx0XHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCwgdHJhbnNmb3JtKTtcblx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgMCwgZ2wuY3lsaW5kZXJCdWZmZXIudmVydGV4UG9zaXRpb25CdWZmZXIubnVtSXRlbXMpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBkcmF3IG51Y2xlb3RpZGUgcGxhdGZvcm1zXG5cdFx0XHRwbGF0Zm9ybS5iaW5kQnVmZmVycyhnbCk7XG5cdFx0XHQvLyBjb2xvcnNcblx0XHRcdGlmIChzcGVjcy5udWNsZWljc19yZXNpZHVlQ29sb3IgPT09ICdub25lJyAmJiAhc3BlY3MubWFjcm9fY29sb3JCeUNoYWluKSB7XG5cdFx0XHRcdGdsLm1hdGVyaWFsLnNldERpZmZ1c2VDb2xvcihnbCwgc3BlY3MubnVjbGVpY3NfYmFzZUNvbG9yKTtcblx0XHRcdH1cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBjaGFpbi5sZW5ndGggLSAxOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgcmVzaWR1ZSA9IGNoYWluW2ldO1xuXHRcdFx0XHR2YXIgcDIgPSByZXNpZHVlLmNwMjtcblx0XHRcdFx0dmFyIHRyYW5zZm9ybSA9IG00LnRyYW5zbGF0ZShtNC5pZGVudGl0eSgpLCBbIHAyLngsIHAyLnksIHAyLnogXSk7XG5cdFx0XHRcdC8vIHJvdGF0ZSB0byBkaXJlY3Rpb25cblx0XHRcdFx0dmFyIHkgPSBbIDAsIDEsIDAgXTtcblx0XHRcdFx0dmFyIGFuZyA9IDA7XG5cdFx0XHRcdHZhciBheGlzO1xuXHRcdFx0XHR2YXIgcDMgPSByZXNpZHVlLmNwMztcblx0XHRcdFx0aWYocDMpe1xuXHRcdFx0XHRcdHZhciBhMmIgPSBbIHAzLnggLSBwMi54LCBwMy55IC0gcDIueSwgcDMueiAtIHAyLnogXTtcblx0XHRcdFx0XHRpZiAocDIueCA9PT0gcDMueCAmJiBwMi56ID09PSBwMy56KSB7XG5cdFx0XHRcdFx0XHRheGlzID0gWyAwLCAwLCAxIF07XG5cdFx0XHRcdFx0XHRpZiAocDIueSA8IHAyLnkpIHtcblx0XHRcdFx0XHRcdFx0YW5nID0gbS5QSTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0YW5nID0gZXh0ZW5zaW9ucy52ZWMzQW5nbGVGcm9tKHksIGEyYik7XG5cdFx0XHRcdFx0XHRheGlzID0gdjMuY3Jvc3MoeSwgYTJiLCBbXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChhbmcgIT09IDApIHtcblx0XHRcdFx0XHRcdG00LnJvdGF0ZSh0cmFuc2Zvcm0sIGFuZywgYXhpcyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIHJvdGF0ZSB0byBvcmllbnRhdGlvblxuXHRcdFx0XHRcdHZhciB4ID0gWyAxLCAwLCAwIF07XG5cdFx0XHRcdFx0dmFyIHJNID0gbTQucm90YXRlKG00LmlkZW50aXR5KFtdKSwgYW5nLCBheGlzKTtcblx0XHRcdFx0XHRtNC5tdWx0aXBseVZlYzMock0sIHgpO1xuXHRcdFx0XHRcdHZhciBwNCA9IHJlc2lkdWUuY3A0O1xuXHRcdFx0XHRcdHZhciBwNSA9IHJlc2lkdWUuY3A1O1xuXHRcdFx0XHRcdGlmICghKHA0LnkgPT09IHA1LnkgJiYgcDQueiA9PT0gcDUueikpIHtcblx0XHRcdFx0XHRcdHZhciBwaXZvdCA9IFsgcDUueCAtIHA0LngsIHA1LnkgLSBwNC55LCBwNS56IC0gcDQueiBdO1xuXHRcdFx0XHRcdFx0dmFyIGFuZzIgPSBleHRlbnNpb25zLnZlYzNBbmdsZUZyb20oeCwgcGl2b3QpO1xuXHRcdFx0XHRcdFx0aWYgKHYzLmRvdChhMmIsIHYzLmNyb3NzKHgsIHBpdm90KSkgPCAwKSB7XG5cdFx0XHRcdFx0XHRcdGFuZzIgKj0gLTE7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtNC5yb3RhdGVZKHRyYW5zZm9ybSwgYW5nMik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIGNvbG9yXG5cdFx0XHRcdFx0aWYgKCFzcGVjcy5tYWNyb19jb2xvckJ5Q2hhaW4pIHtcblx0XHRcdFx0XHRcdGlmIChzcGVjcy5udWNsZWljc19yZXNpZHVlQ29sb3IgPT09ICdzaGFwZWx5Jykge1xuXHRcdFx0XHRcdFx0XHRpZiAoUkVTSURVRVtyZXNpZHVlLm5hbWVdKSB7XG5cdFx0XHRcdFx0XHRcdFx0Z2wubWF0ZXJpYWwuc2V0RGlmZnVzZUNvbG9yKGdsLCBSRVNJRFVFW3Jlc2lkdWUubmFtZV0uc2hhcGVseUNvbG9yKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRnbC5tYXRlcmlhbC5zZXREaWZmdXNlQ29sb3IoZ2wsIFJFU0lEVUVbJyonXS5zaGFwZWx5Q29sb3IpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHNwZWNzLm51Y2xlaWNzX3Jlc2lkdWVDb2xvciA9PT0gJ3JhaW5ib3cnKSB7XG5cdFx0XHRcdFx0XHRcdGdsLm1hdGVyaWFsLnNldERpZmZ1c2VDb2xvcihnbCwgbWF0aC5yYWluYm93QXQoaSwgaWksIHNwZWNzLm1hY3JvX3JhaW5ib3dDb2xvcnMpKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gcmVuZGVyXG5cdFx0XHRcdFx0Z2wuc2hhZGVyLnNldE1hdHJpeFVuaWZvcm1zKGdsLCB0cmFuc2Zvcm0pO1xuXHRcdFx0XHRcdGdsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRVMsIHBsYXRmb3JtLnZlcnRleEluZGV4QnVmZmVyLm51bUl0ZW1zLCBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH07XG5cdH07XG5cdGQzLlR1YmUucHJvdG90eXBlID0gbmV3IGQzLl9NZXNoKCk7XG5cblx0ZDMuQ2F0bXVsbFR1YmUgPSBmdW5jdGlvbihjaGFpbnMsIHRoaWNrbmVzcywgY3lsaW5kZXJSZXNvbHV0aW9uLCBob3Jpem9udGFsUmVzb2x1dGlvbikge1xuXHRcdHZhciBjaGFpbiA9IFtdO1xuXHRcdGNoYWlucy5wdXNoKGNoYWluc1tjaGFpbnMubGVuZ3RoIC0gMV0pO1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBjaGFpbnMubGVuZ3RoIC0gMjsgaSA8PSBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgcDAgPSBjaGFpbnNbaSA9PSAwID8gMCA6IGkgLSAxXTtcblx0XHRcdHZhciBwMSA9IGNoYWluc1tpICsgMF07XG5cdFx0XHR2YXIgcDIgPSBjaGFpbnNbaSArIDFdO1xuXHRcdFx0dmFyIHAzID0gY2hhaW5zW2kgPT0gaWkgPyBpICsgMSA6IGkgKyAyXTtcblxuXHRcdFx0dmFyIHNlZ21lbnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBob3Jpem9udGFsUmVzb2x1dGlvbjsgaisrKSB7XG5cblx0XHRcdFx0dmFyIHQgPSBqIC8gaG9yaXpvbnRhbFJlc29sdXRpb247XG5cdFx0XHRcdGlmKGkgPT0gaWkpIHtcblx0XHRcdFx0XHR0ID0gaiAvIChob3Jpem9udGFsUmVzb2x1dGlvbi0xKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciB4ID0gMC41ICogKCgyICogcDEueCkgK1xuICAgICAgICAgICAgICAgICAgICAgIChwMi54IC0gcDAueCkgKiB0ICtcbiAgICAgICAgICAgICAgICAgICAgICAoMipwMC54IC0gNSpwMS54ICsgNCpwMi54IC0gcDMueCkgKiB0ICogdCArXG4gICAgICAgICAgICAgICAgICAgICAgKDMqcDEueCAtIHAwLnggLSAzICogcDIueCArIHAzLngpICogdCAqIHQgKiB0KTtcblx0XHRcdFx0dmFyIHkgPSAwLjUgKiAoKDIgKiBwMS55KSArXG4gICAgICAgICAgICAgICAgICAgICAgKHAyLnkgLSBwMC55KSAqIHQgK1xuICAgICAgICAgICAgICAgICAgICAgICgyKnAwLnkgLSA1KnAxLnkgKyA0KnAyLnkgLSBwMy55KSAqIHQgKiB0ICtcbiAgICAgICAgICAgICAgICAgICAgICAoMypwMS55IC1wMC55IC0gMyAqIHAyLnkgKyBwMy55KSAqIHQgKiB0ICogdCk7XG5cdFx0XHRcdHZhciB6ID0gMC41ICogKCgyICogcDEueikgK1xuICAgICAgICAgICAgICAgICAgICAgIChwMi56IC0gcDAueikgKiB0ICtcbiAgICAgICAgICAgICAgICAgICAgICAoMipwMC56IC0gNSpwMS56ICsgNCpwMi56IC0gcDMueikgKiB0ICogdCArXG4gICAgICAgICAgICAgICAgICAgICAgKDMqcDEueiAtcDAueiAtIDMgKiBwMi56ICsgcDMueikgKiB0ICogdCAqIHQpO1xuXG5cdFx0XHRcdHZhciBvID0gbmV3IHN0cnVjdHVyZXMuQXRvbSgnQycsIHgsIHksIHopO1xuXHRcdFx0XHRzZWdtZW50cy5wdXNoKG8pO1xuXHRcdFx0fVxuXG5cdFx0XHRjaGFpbi5wdXNoKHNlZ21lbnRzKTtcblx0XHR9XG5cblx0XHR2YXIgbGluZVNlZ21lbnROdW0gPSBjaGFpblswXS5sZW5ndGg7XG5cdFx0dGhpcy5wYXJ0aXRpb25zID0gW107XG5cdFx0dmFyIGN1cnJlbnRQYXJ0aXRpb247XG5cdFx0dGhpcy5lbmRzID0gW107XG5cdFx0dGhpcy5lbmRzLnB1c2goY2hhaW5bMF1bMF0pO1xuXHRcdHRoaXMuZW5kcy5wdXNoKGNoYWluW2NoYWluLmxlbmd0aCAtIDFdWzBdKTtcblxuXHRcdC8vIGNhbGN1bGF0ZSB2ZXJ0ZXggYW5kIG5vcm1hbCBwb2ludHNcblx0XHR2YXIgbGFzdCA9IFsgMSwgMCwgMCBdO1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBjaGFpbi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRpZiAoIWN1cnJlbnRQYXJ0aXRpb24gfHwgY3VycmVudFBhcnRpdGlvbi5wb3NpdGlvbkRhdGEubGVuZ3RoID4gNjUwMDApIHtcblx0XHRcdFx0aWYgKHRoaXMucGFydGl0aW9ucy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0aS0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24gPSB7XG5cdFx0XHRcdFx0Y291bnQgOiAwLFxuXHRcdFx0XHRcdHBvc2l0aW9uRGF0YSA6IFtdLFxuXHRcdFx0XHRcdG5vcm1hbERhdGEgOiBbXSxcblx0XHRcdFx0XHRpbmRleERhdGEgOiBbXVxuXHRcdFx0XHR9O1xuXHRcdFx0XHR0aGlzLnBhcnRpdGlvbnMucHVzaChjdXJyZW50UGFydGl0aW9uKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHJlc2lkdWUgPSBjaGFpbltpXTtcblxuXHRcdFx0Y3VycmVudFBhcnRpdGlvbi5jb3VudCsrO1xuXHRcdFx0dmFyIG1pbiA9IEluZmluaXR5O1xuXHRcdFx0Ly8gdmFyIHAgPSBuZXcgc3RydWN0dXJlcy5BdG9tKCcnLCBjaGFpbltpXS5jcDEueCwgY2hhaW5baV0uY3AxLnksIGNoYWluW2ldLmNwMS56KTtcblx0XHRcdGZvciAoIHZhciBqID0gMDsgaiA8IGxpbmVTZWdtZW50TnVtOyBqKyspIHtcblx0XHRcdFx0dmFyIGN1cnJlbnRQb2ludCA9IHJlc2lkdWVbal07XG5cdFx0XHRcdHZhciBuZXh0UG9pbnQ7XG5cdFx0XHRcdGlmIChqID09PSBsaW5lU2VnbWVudE51bSAtIDEpIHtcblx0XHRcdFx0XHRpZiAoaSA9PT0gY2hhaW4ubGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRcdFx0bmV4dFBvaW50ID0gcmVzaWR1ZVtqIC0gMV07XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdG5leHRQb2ludCA9IGNoYWluW2kgKyAxXVswXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bmV4dFBvaW50ID0gcmVzaWR1ZVtqICsgMV07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgYXhpcyA9IFsgbmV4dFBvaW50LnggLSBjdXJyZW50UG9pbnQueCwgbmV4dFBvaW50LnkgLSBjdXJyZW50UG9pbnQueSwgbmV4dFBvaW50LnogLSBjdXJyZW50UG9pbnQueiBdO1xuXHRcdFx0XHR2My5ub3JtYWxpemUoYXhpcyk7XG5cdFx0XHRcdGlmIChpID09PSBjaGFpbi5sZW5ndGggLSAxICYmIGogPT09IGxpbmVTZWdtZW50TnVtIC0gMSkge1xuXHRcdFx0XHRcdHYzLnNjYWxlKGF4aXMsIC0xKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgc3RhcnRWZWN0b3IgPSB2My5jcm9zcyhheGlzLCBsYXN0LCBbXSk7XG5cdFx0XHRcdHYzLm5vcm1hbGl6ZShzdGFydFZlY3Rvcik7XG5cdFx0XHRcdHYzLnNjYWxlKHN0YXJ0VmVjdG9yLCB0aGlja25lc3MgLyAyKTtcblx0XHRcdFx0dmFyIHJvdGF0b3IgPSBuZXcgUG9pbnRSb3RhdG9yKHN0YXJ0VmVjdG9yLCBheGlzLCAyICogTWF0aC5QSSAvIGN5bGluZGVyUmVzb2x1dGlvbik7XG5cdFx0XHRcdGZvciAoIHZhciBrID0gMCwga2sgPSBjeWxpbmRlclJlc29sdXRpb247IGsgPCBrazsgaysrKSB7XG5cdFx0XHRcdFx0dmFyIHVzZSA9IHJvdGF0b3Iucm90YXRlKCk7XG5cdFx0XHRcdFx0aWYgKGsgPT09IG0uZmxvb3IoY3lsaW5kZXJSZXNvbHV0aW9uIC8gNCkpIHtcblx0XHRcdFx0XHRcdGxhc3QgPSBbIHVzZVswXSwgdXNlWzFdLCB1c2VbMl0gXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y3VycmVudFBhcnRpdGlvbi5ub3JtYWxEYXRhLnB1c2godXNlWzBdLCB1c2VbMV0sIHVzZVsyXSk7XG5cdFx0XHRcdFx0Y3VycmVudFBhcnRpdGlvbi5wb3NpdGlvbkRhdGEucHVzaChjdXJyZW50UG9pbnQueCArIHVzZVswXSwgY3VycmVudFBvaW50LnkgKyB1c2VbMV0sIGN1cnJlbnRQb2ludC56ICsgdXNlWzJdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIGJ1aWxkIG1lc2ggY29ubmVjdGl2aXR5XG5cdFx0Zm9yICggdmFyIG4gPSAwLCBubiA9IHRoaXMucGFydGl0aW9ucy5sZW5ndGg7IG4gPCBubjsgbisrKSB7XG5cdFx0XHR2YXIgY3VycmVudFBhcnRpdGlvbiA9IHRoaXMucGFydGl0aW9uc1tuXTtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBjdXJyZW50UGFydGl0aW9uLmNvdW50IC0gMTsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIGluZGV4U3RhcnQgPSBpICogbGluZVNlZ21lbnROdW0gKiBjeWxpbmRlclJlc29sdXRpb247XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBsaW5lU2VnbWVudE51bTsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgc2VnbWVudEluZGV4U3RhcnQgPSBpbmRleFN0YXJ0ICsgaiAqIGN5bGluZGVyUmVzb2x1dGlvbjtcblx0XHRcdFx0XHRmb3IgKCB2YXIgayA9IDA7IGsgPD0gY3lsaW5kZXJSZXNvbHV0aW9uOyBrKyspIHtcblx0XHRcdFx0XHRcdHZhciBzayA9IHNlZ21lbnRJbmRleFN0YXJ0ICsgayAlIGN5bGluZGVyUmVzb2x1dGlvbjtcblx0XHRcdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24uaW5kZXhEYXRhLnB1c2goc2ssIHNrICsgY3lsaW5kZXJSZXNvbHV0aW9uKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnN0b3JlRGF0YSh0aGlzLnBhcnRpdGlvbnNbMF0ucG9zaXRpb25EYXRhLCB0aGlzLnBhcnRpdGlvbnNbMF0ubm9ybWFsRGF0YSwgdGhpcy5wYXJ0aXRpb25zWzBdLmluZGV4RGF0YSk7XG5cdH07XG5cdHZhciBfID0gZDMuQ2F0bXVsbFR1YmUucHJvdG90eXBlID0gbmV3IGQzLl9NZXNoKCk7XG5cdF8ucmVuZGVyID0gZnVuY3Rpb24oZ2wsIHNwZWNzKSB7XG5cdFx0Ly8gZHJhdyB0dWJlXG5cdFx0dGhpcy5iaW5kQnVmZmVycyhnbCk7XG5cblx0XHQvLyByZW5kZXJcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5wYXJ0aXRpb25zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBwID0gdGhpcy5wYXJ0aXRpb25zW2ldO1xuXHRcdFx0bG9hZFBhcnRpdGlvbihnbCwgcCk7XG5cdFx0XHQvLyByZW5kZXJcblx0XHRcdGdsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRV9TVFJJUCwgcC52ZXJ0ZXhJbmRleEJ1ZmZlci5udW1JdGVtcywgZ2wuVU5TSUdORURfU0hPUlQsIDApO1xuXHRcdH1cblxuXHRcdC8vIGRyYXcgZW5kc1xuXHRcdGdsLnNwaGVyZUJ1ZmZlci5iaW5kQnVmZmVycyhnbCk7XG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgMjsgaSsrKSB7XG5cdFx0XHR2YXIgcCA9IHRoaXMuZW5kc1tpXTtcblx0XHRcdHZhciB0cmFuc2Zvcm0gPSBtNC50cmFuc2xhdGUobTQuaWRlbnRpdHkoKSwgWyBwLngsIHAueSwgcC56IF0pO1xuXHRcdFx0dmFyIHJhZGl1cyA9IHNwZWNzLnByb3RlaW5zX3R1YmVUaGlja25lc3MgLyAyO1xuXHRcdFx0bTQuc2NhbGUodHJhbnNmb3JtLCBbIHJhZGl1cywgcmFkaXVzLCByYWRpdXMgXSk7XG5cdFx0XHQvLyByZW5kZXJcblx0XHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCwgdHJhbnNmb3JtKTtcblx0XHRcdGdsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRVMsIGdsLnNwaGVyZUJ1ZmZlci52ZXJ0ZXhJbmRleEJ1ZmZlci5udW1JdGVtcywgZ2wuVU5TSUdORURfU0hPUlQsIDApO1xuXHRcdH1cblx0fTtcblxufSkoQ2hlbURvb2RsZS5leHRlbnNpb25zLCBDaGVtRG9vZGxlLlJFU0lEVUUsIENoZW1Eb29kbGUuc3RydWN0dXJlcywgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLmQzLCBNYXRoLCBDaGVtRG9vZGxlLmxpYi5tYXQ0LCBDaGVtRG9vZGxlLmxpYi52ZWMzLCBDaGVtRG9vZGxlLm1hdGgpO1xuXG4oZnVuY3Rpb24oZDMsIHYzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRkMy5Vbml0Q2VsbCA9IGZ1bmN0aW9uKHVuaXRDZWxsVmVjdG9ycykge1xuXHRcdHRoaXMudW5pdENlbGwgPSB1bml0Q2VsbFZlY3RvcnM7XG5cdFx0dmFyIHBvc2l0aW9uRGF0YSA9IFtdO1xuXHRcdHZhciBub3JtYWxEYXRhID0gW107XG5cdFx0Ly8gY2FsY3VsYXRlIHZlcnRleCBhbmQgbm9ybWFsIHBvaW50c1xuXG5cdFx0dmFyIHB1c2hTaWRlID0gZnVuY3Rpb24ocDEsIHAyLCBwMywgcDQpIHtcblx0XHRcdHBvc2l0aW9uRGF0YS5wdXNoKHAxWzBdLCBwMVsxXSwgcDFbMl0pO1xuXHRcdFx0cG9zaXRpb25EYXRhLnB1c2gocDJbMF0sIHAyWzFdLCBwMlsyXSk7XG5cdFx0XHRwb3NpdGlvbkRhdGEucHVzaChwM1swXSwgcDNbMV0sIHAzWzJdKTtcblx0XHRcdHBvc2l0aW9uRGF0YS5wdXNoKHA0WzBdLCBwNFsxXSwgcDRbMl0pO1xuXHRcdFx0Ly8gcHVzaCAwcyBmb3Igbm9ybWFscyBzbyBzaGFkZXIgZ2l2ZXMgdGhlbSBmdWxsIGNvbG9yXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0XHRcdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDAsIDApO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0cHVzaFNpZGUodW5pdENlbGxWZWN0b3JzLm8sIHVuaXRDZWxsVmVjdG9ycy54LCB1bml0Q2VsbFZlY3RvcnMueHksIHVuaXRDZWxsVmVjdG9ycy55KTtcblx0XHRwdXNoU2lkZSh1bml0Q2VsbFZlY3RvcnMubywgdW5pdENlbGxWZWN0b3JzLnksIHVuaXRDZWxsVmVjdG9ycy55eiwgdW5pdENlbGxWZWN0b3JzLnopO1xuXHRcdHB1c2hTaWRlKHVuaXRDZWxsVmVjdG9ycy5vLCB1bml0Q2VsbFZlY3RvcnMueiwgdW5pdENlbGxWZWN0b3JzLnh6LCB1bml0Q2VsbFZlY3RvcnMueCk7XG5cdFx0cHVzaFNpZGUodW5pdENlbGxWZWN0b3JzLnl6LCB1bml0Q2VsbFZlY3RvcnMueSwgdW5pdENlbGxWZWN0b3JzLnh5LCB1bml0Q2VsbFZlY3RvcnMueHl6KTtcblx0XHRwdXNoU2lkZSh1bml0Q2VsbFZlY3RvcnMueHl6LCB1bml0Q2VsbFZlY3RvcnMueHosIHVuaXRDZWxsVmVjdG9ycy56LCB1bml0Q2VsbFZlY3RvcnMueXopO1xuXHRcdHB1c2hTaWRlKHVuaXRDZWxsVmVjdG9ycy54eSwgdW5pdENlbGxWZWN0b3JzLngsIHVuaXRDZWxsVmVjdG9ycy54eiwgdW5pdENlbGxWZWN0b3JzLnh5eik7XG5cblx0XHQvLyBidWlsZCBtZXNoIGNvbm5lY3Rpdml0eVxuXHRcdHZhciBpbmRleERhdGEgPSBbXTtcblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpKyspIHtcblx0XHRcdHZhciBzdGFydCA9IGkgKiA0O1xuXHRcdFx0Ly8gc2lkZXNcblx0XHRcdGluZGV4RGF0YS5wdXNoKHN0YXJ0LCBzdGFydCArIDEsIHN0YXJ0ICsgMSwgc3RhcnQgKyAyLCBzdGFydCArIDIsIHN0YXJ0ICsgMywgc3RhcnQgKyAzLCBzdGFydCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9yZURhdGEocG9zaXRpb25EYXRhLCBub3JtYWxEYXRhLCBpbmRleERhdGEpO1xuXHR9O1xuXHR2YXIgXyA9IGQzLlVuaXRDZWxsLnByb3RvdHlwZSA9IG5ldyBkMy5fTWVzaCgpO1xuXHRfLnJlbmRlciA9IGZ1bmN0aW9uKGdsLCBzcGVjcykge1xuXHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCk7XG5cdFx0dGhpcy5iaW5kQnVmZmVycyhnbCk7XG5cdFx0Ly8gY29sb3JzXG5cdFx0Z2wubWF0ZXJpYWwuc2V0RGlmZnVzZUNvbG9yKGdsLCBzcGVjcy5zaGFwZXNfY29sb3IpO1xuXHRcdGdsLmxpbmVXaWR0aChzcGVjcy5zaGFwZXNfbGluZVdpZHRoKTtcblx0XHQvLyByZW5kZXJcblx0XHRnbC5kcmF3RWxlbWVudHMoZ2wuTElORVMsIHRoaXMudmVydGV4SW5kZXhCdWZmZXIubnVtSXRlbXMsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcblx0fTtcblxufSkoQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLmQzLCBDaGVtRG9vZGxlLmxpYi52ZWMzKTtcblxuKGZ1bmN0aW9uKGQzLCBtYXRoLCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDMuRnJhbWVidWZmZXIgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF8gPSBkMy5GcmFtZWJ1ZmZlci5wcm90b3R5cGU7XG5cblx0Xy5pbml0ID0gZnVuY3Rpb24oZ2wpIHtcblx0XHR0aGlzLmZyYW1lYnVmZmVyID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblx0fTtcblxuXHRfLnNldENvbG9yVGV4dHVyZSA9IGZ1bmN0aW9uKGdsLCB0ZXh0dXJlLCBhdHRhY2htZW50KSB7XG5cdFx0dmFyIGkgPSBhdHRhY2htZW50ID09PSB1bmRlZmluZWQgPyAwIDogYXR0YWNobWVudDtcblx0XHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHRoaXMuZnJhbWVidWZmZXIpO1xuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuXHRcdGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGdsLkZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksIGdsLlRFWFRVUkVfMkQsIHRleHR1cmUsIDApO1xuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG5cdH07XG5cdF8uc2V0Q29sb3JSZW5kZXJidWZmZXIgPSBmdW5jdGlvbihnbCwgcmVuZGVyYnVmZmVyLCBhdHRhY2htZW50KSB7XG5cdFx0dmFyIGkgPSBhdHRhY2htZW50ID09PSB1bmRlZmluZWQgPyAwIDogYXR0YWNobWVudDtcblx0XHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHRoaXMuZnJhbWVidWZmZXIpO1xuXHRcdGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIpO1xuXHRcdGdsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksIGdsLlJFTkRFUkJVRkZFUiwgcmVuZGVyYnVmZmVyKTtcblx0XHRnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgbnVsbCk7XG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcblx0fTtcblx0Xy5zZXREZXB0aFRleHR1cmUgPSBmdW5jdGlvbihnbCwgdGV4dHVyZSkge1xuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5mcmFtZWJ1ZmZlcik7XG5cdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XG5cdFx0Z2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkRFUFRIX0FUVEFDSE1FTlQsIGdsLlRFWFRVUkVfMkQsIHRleHR1cmUsIDApO1xuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG5cdH07XG5cdF8uc2V0RGVwdGhSZW5kZXJidWZmZXIgPSBmdW5jdGlvbihnbCwgcmVuZGVyYnVmZmVyKSB7XG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB0aGlzLmZyYW1lYnVmZmVyKTtcblx0XHRnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgcmVuZGVyYnVmZmVyKTtcblx0XHRnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfQVRUQUNITUVOVCwgZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIpO1xuXHRcdGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCBudWxsKTtcblx0XHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuXHR9O1xuXHRfLmJpbmQgPSBmdW5jdGlvbihnbCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5mcmFtZWJ1ZmZlcik7XG5cdFx0Z2wudmlld3BvcnQoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgQ2hlbURvb2RsZS5tYXRoLCBkb2N1bWVudCk7XG5cbihmdW5jdGlvbihkMywgbWF0aCwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLlJlbmRlcmJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuXHR9O1xuXHR2YXIgXyA9IGQzLlJlbmRlcmJ1ZmZlci5wcm90b3R5cGU7XG5cblx0Xy5pbml0ID0gZnVuY3Rpb24oZ2wsIGZvcm1hdCkge1xuXHRcdHRoaXMucmVuZGVyYnVmZmVyID0gZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cdFx0dGhpcy5mb3JtYXQgPSBmb3JtYXQ7XG5cdH07XG5cblx0Xy5zZXRQYXJhbWV0ZXIgPSBmdW5jdGlvbihnbCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblx0XHRcblx0XHRnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgdGhpcy5yZW5kZXJidWZmZXIpO1xuXHRcdGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoZ2wuUkVOREVSQlVGRkVSLCB0aGlzLmZvcm1hdCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuXHRcdGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCBudWxsKTtcblx0fTtcblxufSkoQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLmQzLCBDaGVtRG9vZGxlLm1hdGgsIGRvY3VtZW50KTtcblxuKGZ1bmN0aW9uKG1hdGgsIGQzLCBtLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRkMy5TU0FPID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfID0gZDMuU1NBTy5wcm90b3R5cGU7XG5cblx0Xy5pbml0U2FtcGxlS2VybmVsID0gZnVuY3Rpb24oa2VybmVsU2l6ZSkge1xuXHRcdHZhciBzYW1wbGVLZXJuZWwgPSBbXTtcblxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBrZXJuZWxTaXplOyBpKyspIHtcblx0XHRcdHZhciB4ID0gbS5yYW5kb20oKSAqIDIuMCAtIDEuMDtcblx0XHRcdHZhciB5ID0gbS5yYW5kb20oKSAqIDIuMCAtIDEuMDtcblx0XHRcdHZhciB6ID0gbS5yYW5kb20oKSAqIDIuMCAtIDEuMDtcblxuXHRcdFx0dmFyIHNjYWxlID0gaSAvIGtlcm5lbFNpemU7XG5cdFx0XHR2YXIgc2NhbGUyID0gc2NhbGUgKiBzY2FsZTtcblx0XHRcdHZhciBsZXJwID0gMC4xICsgc2NhbGUyICogMC45O1xuXG5cdFx0XHR4ICo9IGxlcnA7XG5cdFx0XHR5ICo9IGxlcnA7XG5cdFx0XHR6ICo9IGxlcnA7XG5cblx0XHRcdHNhbXBsZUtlcm5lbC5wdXNoKHgsIHksIHopO1xuXHRcdH1cblxuXHRcdHRoaXMuc2FtcGxlS2VybmVsID0gbmV3IEZsb2F0MzJBcnJheShzYW1wbGVLZXJuZWwpO1xuXHR9O1xuXG5cdF8uaW5pdE5vaXNlVGV4dHVyZSA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIG5vaXNlU2l6ZSA9IDE2O1xuXHRcdHZhciBzc2FvTm9pc2UgPSBbXTtcblxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBub2lzZVNpemU7IGkrKykge1xuXHRcdFx0c3Nhb05vaXNlLnB1c2gobS5yYW5kb20oKSAqIDIgLSAxKTtcblx0XHRcdHNzYW9Ob2lzZS5wdXNoKG0ucmFuZG9tKCkgKiAyIC0gMSk7XG5cdFx0XHRzc2FvTm9pc2UucHVzaCgwLjApO1xuXHRcdH1cblxuXHRcdHRoaXMubm9pc2VUZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMubm9pc2VUZXh0dXJlKTtcblx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQiwgNCwgNCwgMCwgZ2wuUkdCLCBnbC5GTE9BVCwgbmV3IEZsb2F0MzJBcnJheShzc2FvTm9pc2UpKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QpO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLlJFUEVBVCk7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuUkVQRUFUKTtcblxuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLm1hdGgsIENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgTWF0aCk7XG5cbihmdW5jdGlvbihkMywgbWF0aCwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLlRleHR1cmUgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF8gPSBkMy5UZXh0dXJlLnByb3RvdHlwZTtcblxuXHRfLmluaXQgPSBmdW5jdGlvbihnbCwgdHlwZSwgaW50ZXJuYWxGb3JtYXQsIGZvcm1hdCkge1xuXHRcdHRoaXMudGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdHRoaXMuaW50ZXJuYWxGb3JtYXQgPSBpbnRlcm5hbEZvcm1hdDtcblx0XHR0aGlzLmZvcm1hdCA9IGZvcm1hdCAhPT0gdW5kZWZpbmVkID8gZm9ybWF0IDogaW50ZXJuYWxGb3JtYXQ7XG5cblx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLnRleHR1cmUpO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5ORUFSRVNUKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG5cdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XG5cdH07XG5cdF8uc2V0UGFyYW1ldGVyID0gZnVuY3Rpb24oZ2wsIHdpZHRoLCBoZWlnaHQpIHtcblx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHQvLyBzZXQgdGV4dHVyZSBkaW1lbnNpb25cblx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLnRleHR1cmUpO1xuXHRcdGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgdGhpcy5pbnRlcm5hbEZvcm1hdCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIDAsIHRoaXMuZm9ybWF0LCB0aGlzLnR5cGUsIG51bGwpO1xuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDMsIENoZW1Eb29kbGUubWF0aCwgZG9jdW1lbnQpO1xuXG4oZnVuY3Rpb24oZDMsIG0zLCBtNCwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLl9TaGFkZXIgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF8gPSBkMy5fU2hhZGVyLnByb3RvdHlwZTtcblx0Xy51c2VTaGFkZXJQcm9ncmFtID0gZnVuY3Rpb24oZ2wpIHtcblx0XHRnbC51c2VQcm9ncmFtKHRoaXMuZ1Byb2dyYW0pO1xuXHRcdGdsLnNoYWRlciA9IHRoaXM7XG5cdH07XG5cdF8uaW5pdCA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIHZlcnRleFNoYWRlciA9IHRoaXMuZ2V0U2hhZGVyKGdsLCAndmVydGV4LXNoYWRlcicpO1xuXHRcdGlmICghdmVydGV4U2hhZGVyKSB7XG5cdFx0XHR2ZXJ0ZXhTaGFkZXIgPSB0aGlzLmxvYWREZWZhdWx0VmVydGV4U2hhZGVyKGdsKTtcblx0XHR9XG5cdFx0dmFyIGZyYWdtZW50U2hhZGVyID0gdGhpcy5nZXRTaGFkZXIoZ2wsICdmcmFnbWVudC1zaGFkZXInKTtcblx0XHRpZiAoIWZyYWdtZW50U2hhZGVyKSB7XG5cdFx0XHRmcmFnbWVudFNoYWRlciA9IHRoaXMubG9hZERlZmF1bHRGcmFnbWVudFNoYWRlcihnbCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5nUHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcblxuXHRcdGdsLmF0dGFjaFNoYWRlcih0aGlzLmdQcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xuXHRcdGdsLmF0dGFjaFNoYWRlcih0aGlzLmdQcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XG5cdFx0XG5cdFx0dGhpcy5vblNoYWRlckF0dGFjaGVkKGdsKTtcblxuXHRcdGdsLmxpbmtQcm9ncmFtKHRoaXMuZ1Byb2dyYW0pO1xuXG5cdFx0aWYgKCFnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHRoaXMuZ1Byb2dyYW0sIGdsLkxJTktfU1RBVFVTKSkge1xuXHRcdFx0YWxlcnQoJ0NvdWxkIG5vdCBpbml0aWFsaXplIHNoYWRlcnM6ICcgKyBnbC5nZXRQcm9ncmFtSW5mb0xvZyh0aGlzLmdQcm9ncmFtKSk7XG5cdFx0fVxuXG5cdFx0Z2wudXNlUHJvZ3JhbSh0aGlzLmdQcm9ncmFtKTtcblx0XHR0aGlzLmluaXRVbmlmb3JtTG9jYXRpb25zKGdsKTtcblx0XHRnbC51c2VQcm9ncmFtKG51bGwpO1xuXHR9O1xuXHRfLm9uU2hhZGVyQXR0YWNoZWQgPSBmdW5jdGlvbihnbCkge1xuXHRcdC8vIHNldCB2ZXJ0ZXggYXR0cmlidXRlcyBleHBsaWNpdGx5XG5cdFx0dGhpcy52ZXJ0ZXhQb3NpdGlvbkF0dHJpYnV0ZSA9IDA7XG5cdFx0dGhpcy52ZXJ0ZXhOb3JtYWxBdHRyaWJ1dGUgPSAxO1xuXG5cdFx0Z2wuYmluZEF0dHJpYkxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sIHRoaXMudmVydGV4UG9zaXRpb25BdHRyaWJ1dGUsICdhX3ZlcnRleF9wb3NpdGlvbicpO1xuXHRcdGdsLmJpbmRBdHRyaWJMb2NhdGlvbih0aGlzLmdQcm9ncmFtLCB0aGlzLnZlcnRleE5vcm1hbEF0dHJpYnV0ZSwgJ2FfdmVydGV4X25vcm1hbCcpO1xuXHR9O1xuXHRfLmdldFNoYWRlckZyb21TdHIgPSBmdW5jdGlvbihnbCwgc2hhZGVyVHlwZSwgc3RyU3JjKSB7XG5cdFx0dmFyIHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihzaGFkZXJUeXBlKTtcblx0XHRnbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzdHJTcmMpO1xuXHRcdGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcblx0XHRpZiAoIWdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xuXHRcdFx0YWxlcnQoc2hhZGVyU2NyaXB0LnR5cGUgKyAnICcgKyBnbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcikpO1xuXHRcdFx0Z2wuZGVsZXRlU2hhZGVyKHNoYWRlcik7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRyZXR1cm4gc2hhZGVyO1xuXHR9O1xuXHRfLmVuYWJsZUF0dHJpYnNBcnJheSA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0Z2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy52ZXJ0ZXhQb3NpdGlvbkF0dHJpYnV0ZSk7XG5cdH07XG5cdF8uZGlzYWJsZUF0dHJpYnNBcnJheSA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0Z2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMudmVydGV4UG9zaXRpb25BdHRyaWJ1dGUpO1xuXHR9O1xuXHRfLmdldFNoYWRlciA9IGZ1bmN0aW9uKGdsLCBpZCkge1xuXHRcdHZhciBzaGFkZXJTY3JpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG5cdFx0aWYgKCFzaGFkZXJTY3JpcHQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHZhciBzYiA9IFtdO1xuXHRcdHZhciBrID0gc2hhZGVyU2NyaXB0LmZpcnN0Q2hpbGQ7XG5cdFx0d2hpbGUgKGspIHtcblx0XHRcdGlmIChrLm5vZGVUeXBlID09PSAzKSB7XG5cdFx0XHRcdHNiLnB1c2goay50ZXh0Q29udGVudCk7XG5cdFx0XHR9XG5cdFx0XHRrID0gay5uZXh0U2libGluZztcblx0XHR9XG5cdFx0dmFyIHNkclNyYyA9IHNiLmpvaW4oJycpO1xuXHRcdHZhciBzaGFkZXI7XG5cdFx0aWYgKHNoYWRlclNjcmlwdC50eXBlID09PSAneC1zaGFkZXIveC1mcmFnbWVudCcpIHtcblx0XHRcdHNoYWRlciA9IHRoaXMuZ2V0U2hhZGVyRnJvbVN0cihnbCwgZ2wuRlJBR01FTlRfU0hBREVSLCBzZHJTcmMpO1xuXHRcdH0gZWxzZSBpZiAoc2hhZGVyU2NyaXB0LnR5cGUgPT09ICd4LXNoYWRlci94LXZlcnRleCcpIHtcblx0XHRcdHNoYWRlciA9IHRoaXMuZ2V0U2hhZGVyRnJvbVN0cihnbCwgZ2wuVkVSVEVYX1NIQURFUiwgc2RyU3JjKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0cmV0dXJuIHNoYWRlcjtcblx0fTtcblx0Xy5pbml0VW5pZm9ybUxvY2F0aW9ucyA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dGhpcy5tb2RlbFZpZXdNYXRyaXhVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X21vZGVsX3ZpZXdfbWF0cml4Jyk7XG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4VW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9wcm9qZWN0aW9uX21hdHJpeCcpO1xuXHR9O1xuXHRfLmxvYWREZWZhdWx0VmVydGV4U2hhZGVyID0gZnVuY3Rpb24oZ2wpIHtcblx0fTtcblx0Xy5sb2FkRGVmYXVsdEZyYWdtZW50U2hhZGVyID0gZnVuY3Rpb24oZ2wpIHtcblx0fTtcblx0Xy5zZXRNYXRyaXhVbmlmb3JtcyA9IGZ1bmN0aW9uKGdsLCBtb2RlbE1hdHJpeCkge1xuXHRcdGlmKG1vZGVsTWF0cml4ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXMuc2V0TW9kZWxWaWV3TWF0cml4KGdsLCBnbC5tb2RlbFZpZXdNYXRyaXgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnNldE1vZGVsVmlld01hdHJpeChnbCwgbTQubXVsdGlwbHkoZ2wubW9kZWxWaWV3TWF0cml4LCBtb2RlbE1hdHJpeCwgW10pKTtcblx0XHR9XG5cdH07XG5cdF8uc2V0UHJvamVjdGlvbk1hdHJpeCA9IGZ1bmN0aW9uKGdsLCBtYXRyaXgpIHtcblx0XHRnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMucHJvamVjdGlvbk1hdHJpeFVuaWZvcm0sIGZhbHNlLCBtYXRyaXgpO1xuXHR9O1xuXHRfLnNldE1vZGVsVmlld01hdHJpeCA9IGZ1bmN0aW9uKGdsLCBtdk1hdHJpeCkge1xuXHRcdGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5tb2RlbFZpZXdNYXRyaXhVbmlmb3JtLCBmYWxzZSwgbXZNYXRyaXgpO1xuXHR9O1xuXHRfLnNldE1hdGVyaWFsQW1iaWVudENvbG9yID0gZnVuY3Rpb24oZ2wsIGFtYmllbnQpIHtcblx0fTtcblx0Xy5zZXRNYXRlcmlhbERpZmZ1c2VDb2xvciA9IGZ1bmN0aW9uKGdsLCBkaWZmdXNlKSB7XG5cdH07XG5cdF8uc2V0TWF0ZXJpYWxTcGVjdWxhckNvbG9yID0gZnVuY3Rpb24oZ2wsIHNwZWN1bGFyKSB7XG5cdH07XG5cdF8uc2V0TWF0ZXJpYWxTaGluaW5lc3MgPSBmdW5jdGlvbihnbCwgc2hpbmluZXNzKSB7XG5cdH07XG5cdF8uc2V0TWF0ZXJpYWxBbHBoYSA9IGZ1bmN0aW9uKGdsLCBhbHBoYSkge1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDMsIENoZW1Eb29kbGUubGliLm1hdDMsIENoZW1Eb29kbGUubGliLm1hdDQsIGRvY3VtZW50KTtcblxuKGZ1bmN0aW9uKGQzLCBtMywgbTQsIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGQzLkZYQUFTaGFkZXIgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF9zdXBlciA9IGQzLl9TaGFkZXIucHJvdG90eXBlO1xuXHR2YXIgXyA9IGQzLkZYQUFTaGFkZXIucHJvdG90eXBlID0gbmV3IGQzLl9TaGFkZXIoKTtcblx0Xy5pbml0VW5pZm9ybUxvY2F0aW9ucyA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0Ly8gYXNzaWduIHVuaWZvcm0gcHJvcGVydGllc1xuXHRcdF9zdXBlci5pbml0VW5pZm9ybUxvY2F0aW9ucy5jYWxsKHRoaXMsIGdsKTtcblx0XHR0aGlzLmJ1ZmZlcnNpemVVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X2J1ZmZlcnNpemUnKTtcblx0XHR0aGlzLmFudGlhbGlhc1VuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3VfYW50aWFsaWFzJyk7XG5cblx0XHR0aGlzLmVkZ2VUaHJlc2hvbGRVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X2VkZ2VfdGhyZXNob2xkJyk7XG5cdFx0dGhpcy5lZGdlVGhyZXNob2xkTWluVW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9lZGdlX3RocmVzaG9sZF9taW4nKTtcblx0XHR0aGlzLnNlYXJjaFN0ZXBzVW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9zZWFyY2hfc3RlcHMnKTtcblx0XHR0aGlzLnNlYXJjaFRocmVzaG9sZFVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3Vfc2VhcmNoX3RocmVzaG9sZCcpO1xuXHRcdHRoaXMuc3VicGl4Q2FwVW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9zdWJwaXhfY2FwJyk7XG5cdFx0dGhpcy5zdWJwaXhUcmltVW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9zdWJwaXhfdHJpbScpO1xuXHR9O1xuXHRfLnNldEJ1ZmZlcnNpemUgPSBmdW5jdGlvbihnbCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdGdsLnVuaWZvcm0yZih0aGlzLmJ1ZmZlcnNpemVVbmlmb3JtLCB3aWR0aCwgaGVpZ2h0KTtcblx0fTtcblx0Xy5zZXRBbnRpYWxpYXMgPSBmdW5jdGlvbihnbCwgdmFsKSB7XG5cdFx0Z2wudW5pZm9ybTFmKHRoaXMuYW50aWFsaWFzVW5pZm9ybSwgdmFsKTtcblx0fTtcblx0Xy5zZXRFZGdlVGhyZXNob2xkID0gZnVuY3Rpb24oZ2wsIHZhbCkge1xuXHRcdGdsLnVuaWZvcm0xZih0aGlzLmVkZ2VUaHJlc2hvbGRVbmlmb3JtLCB2YWwpO1xuXHR9O1xuXHRfLnNldEVkZ2VUaHJlc2hvbGRNaW4gPSBmdW5jdGlvbihnbCwgdmFsKSB7XG5cdFx0Z2wudW5pZm9ybTFmKHRoaXMuZWRnZVRocmVzaG9sZE1pblVuaWZvcm0sIHZhbCk7XG5cdH07XG5cdF8uc2V0U2VhcmNoU3RlcHMgPSBmdW5jdGlvbihnbCwgdmFsKSB7XG5cdFx0Z2wudW5pZm9ybTFpKHRoaXMuc2VhcmNoU3RlcHNVbmlmb3JtLCB2YWwpO1xuXHR9O1xuXHRfLnNldFNlYXJjaFRocmVzaG9sZCA9IGZ1bmN0aW9uKGdsLCB2YWwpIHtcblx0XHRnbC51bmlmb3JtMWYodGhpcy5zZWFyY2hUaHJlc2hvbGRVbmlmb3JtLCB2YWwpO1xuXHR9O1xuXHRfLnNldFN1YnBpeENhcCA9IGZ1bmN0aW9uKGdsLCB2YWwpIHtcblx0XHRnbC51bmlmb3JtMWYodGhpcy5zdWJwaXhDYXBVbmlmb3JtLCB2YWwpO1xuXHR9O1xuXHRfLnNldFN1YnBpeFRyaW0gPSBmdW5jdGlvbihnbCwgdmFsKSB7XG5cdFx0Z2wudW5pZm9ybTFmKHRoaXMuc3VicGl4VHJpbVVuaWZvcm0sIHZhbCk7XG5cdH07XG5cdF8ubG9hZERlZmF1bHRWZXJ0ZXhTaGFkZXIgPSBmdW5jdGlvbihnbCkge1xuXHRcdHZhciBzYiA9IFtcblx0XHQncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7Jyxcblx0XHRcblx0XHQvLyBhdHRyaWJ1dGVzIHNldCB3aGVuIHJlbmRlcmluZyBvYmplY3RzXG5cdFx0J2F0dHJpYnV0ZSB2ZWMzIGFfdmVydGV4X3Bvc2l0aW9uOycsXG5cbiAgICBcdCd2YXJ5aW5nIHZlYzIgdl90ZXhjb29yZDsnLFxuXG5cdFx0J3ZvaWQgbWFpbigpIHsnLFxuXHRcdFx0J2dsX1Bvc2l0aW9uID0gdmVjNChhX3ZlcnRleF9wb3NpdGlvbiwgMS4pOycsXG4gICAgICAgIFx0J3ZfdGV4Y29vcmQgPSBhX3ZlcnRleF9wb3NpdGlvbi54eSAqIC41ICsgLjU7Jyxcblx0XHQnfSddLmpvaW4oJycpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0U2hhZGVyRnJvbVN0cihnbCwgZ2wuVkVSVEVYX1NIQURFUiwgc2IpO1xuXHR9O1xuXG5cdF8ubG9hZERlZmF1bHRGcmFnbWVudFNoYWRlciA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIHNiID0gW1xuXHRcdCdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnLFxuXG5cdFx0J2NvbnN0IGludCBmeGFhTWF4U2VhcmNoU3RlcHMgPSAxMjg7JyxcblxuXHRcdCd1bmlmb3JtIGZsb2F0IHVfZWRnZV90aHJlc2hvbGQ7Jyxcblx0XHQndW5pZm9ybSBmbG9hdCB1X2VkZ2VfdGhyZXNob2xkX21pbjsnLFxuXHRcdCd1bmlmb3JtIGludCB1X3NlYXJjaF9zdGVwczsnLFxuXHRcdCd1bmlmb3JtIGZsb2F0IHVfc2VhcmNoX3RocmVzaG9sZDsnLFxuXHRcdCd1bmlmb3JtIGZsb2F0IHVfc3VicGl4X2NhcDsnLFxuXHRcdCd1bmlmb3JtIGZsb2F0IHVfc3VicGl4X3RyaW07JyxcblxuXHRcdCd1bmlmb3JtIHNhbXBsZXIyRCB1X3NhbXBsZXIwOycsXG5cdFx0J3VuaWZvcm0gdmVjMiB1X2J1ZmZlcnNpemU7Jyxcblx0XHQndW5pZm9ybSBib29sIHVfYW50aWFsaWFzOycsXG5cblx0XHQndmFyeWluZyB2ZWMyIHZfdGV4Y29vcmQ7JyxcblxuXHRcdCdmbG9hdCBGeGFhTHVtYSh2ZWMzIHJnYikgeycsXG5cdFx0XHQncmV0dXJuIHJnYi55ICogKDAuNTg3LzAuMjk5KSArIHJnYi54OycsXG5cdFx0J30nLFxuXG5cdFx0J3ZlYzMgRnhhYUxlcnAzKHZlYzMgYSwgdmVjMyBiLCBmbG9hdCBhbW91bnRPZkEpIHsnLFxuXHRcdCAgICAncmV0dXJuICh2ZWMzKC1hbW91bnRPZkEpICogYikgKyAoKGEgKiB2ZWMzKGFtb3VudE9mQSkpICsgYik7Jyxcblx0XHQnfScsXG5cblx0XHQndmVjNCBGeGFhVGV4T2ZmKHNhbXBsZXIyRCB0ZXgsIHZlYzIgcG9zLCB2ZWMyIG9mZiwgdmVjMiByY3BGcmFtZSkgeycsXG5cdFx0ICAgICdyZXR1cm4gdGV4dHVyZTJEKHRleCwgcG9zICsgb2ZmICogcmNwRnJhbWUpOycsXG5cdFx0J30nLFxuXG5cdFx0J3ZlYzMgRnhhYVBpeGVsU2hhZGVyKHZlYzIgcG9zLCBzYW1wbGVyMkQgdGV4LCB2ZWMyIHJjcEZyYW1lKSB7Jyxcblx0XHRcdCdmbG9hdCBzdWJwaXhfdHJpbV9zY2FsZSA9ICgxLjAvKDEuMCAtIHVfc3VicGl4X3RyaW0pKTsnLFxuXHRcdCAgICAndmVjMyByZ2JOID0gRnhhYVRleE9mZih0ZXgsIHBvcy54eSwgdmVjMiggMC4sLTEuKSwgcmNwRnJhbWUpLnh5ejsnLFxuXHRcdCAgICAndmVjMyByZ2JXID0gRnhhYVRleE9mZih0ZXgsIHBvcy54eSwgdmVjMigtMS4sIDAuKSwgcmNwRnJhbWUpLnh5ejsnLFxuXHRcdCAgICAndmVjMyByZ2JNID0gRnhhYVRleE9mZih0ZXgsIHBvcy54eSwgdmVjMiggMC4sIDAuKSwgcmNwRnJhbWUpLnh5ejsnLFxuXHRcdCAgICAndmVjMyByZ2JFID0gRnhhYVRleE9mZih0ZXgsIHBvcy54eSwgdmVjMiggMS4sIDAuKSwgcmNwRnJhbWUpLnh5ejsnLFxuXHRcdCAgICAndmVjMyByZ2JTID0gRnhhYVRleE9mZih0ZXgsIHBvcy54eSwgdmVjMiggMC4sIDEuKSwgcmNwRnJhbWUpLnh5ejsnLFxuXG5cdFx0ICAgICdmbG9hdCBsdW1hTiA9IEZ4YWFMdW1hKHJnYk4pOycsXG5cdFx0ICAgICdmbG9hdCBsdW1hVyA9IEZ4YWFMdW1hKHJnYlcpOycsXG5cdFx0ICAgICdmbG9hdCBsdW1hTSA9IEZ4YWFMdW1hKHJnYk0pOycsXG5cdFx0ICAgICdmbG9hdCBsdW1hRSA9IEZ4YWFMdW1hKHJnYkUpOycsXG5cdFx0ICAgICdmbG9hdCBsdW1hUyA9IEZ4YWFMdW1hKHJnYlMpOycsXG5cdFx0ICAgICdmbG9hdCByYW5nZU1pbiA9IG1pbihsdW1hTSwgbWluKG1pbihsdW1hTiwgbHVtYVcpLCBtaW4obHVtYVMsIGx1bWFFKSkpOycsXG5cdFx0ICAgICdmbG9hdCByYW5nZU1heCA9IG1heChsdW1hTSwgbWF4KG1heChsdW1hTiwgbHVtYVcpLCBtYXgobHVtYVMsIGx1bWFFKSkpOycsXG5cblx0XHQgICAgJ2Zsb2F0IHJhbmdlID0gcmFuZ2VNYXggLSByYW5nZU1pbjsnLFxuXHRcdCAgICAnaWYocmFuZ2UgPCBtYXgodV9lZGdlX3RocmVzaG9sZF9taW4sIHJhbmdlTWF4ICogdV9lZGdlX3RocmVzaG9sZCkpIHsnLFxuXHRcdCAgICAgICAgJ3JldHVybiByZ2JNOycsXG5cdFx0ICAgICd9JyxcblxuXHRcdCAgICAndmVjMyByZ2JMID0gcmdiTiArIHJnYlcgKyByZ2JNICsgcmdiRSArIHJnYlM7JyxcblxuXHRcdCAgICAnZmxvYXQgbHVtYUwgPSAobHVtYU4gKyBsdW1hVyArIGx1bWFFICsgbHVtYVMpICogMC4yNTsnLFxuXHRcdCAgICAnZmxvYXQgcmFuZ2VMID0gYWJzKGx1bWFMIC0gbHVtYU0pOycsXG5cdFx0ICAgICdmbG9hdCBibGVuZEwgPSBtYXgoMC4wLCAocmFuZ2VMIC8gcmFuZ2UpIC0gdV9zdWJwaXhfdHJpbSkgKiBzdWJwaXhfdHJpbV9zY2FsZTsnLFxuXHRcdCAgICAnYmxlbmRMID0gbWluKHVfc3VicGl4X2NhcCwgYmxlbmRMKTsnLFxuXG5cdFx0ICAgICd2ZWMzIHJnYk5XID0gRnhhYVRleE9mZih0ZXgsIHBvcy54eSwgdmVjMigtMS4sLTEuKSwgcmNwRnJhbWUpLnh5ejsnLFxuXHRcdCAgICAndmVjMyByZ2JORSA9IEZ4YWFUZXhPZmYodGV4LCBwb3MueHksIHZlYzIoIDEuLC0xLiksIHJjcEZyYW1lKS54eXo7Jyxcblx0XHQgICAgJ3ZlYzMgcmdiU1cgPSBGeGFhVGV4T2ZmKHRleCwgcG9zLnh5LCB2ZWMyKC0xLiwgMS4pLCByY3BGcmFtZSkueHl6OycsXG5cdFx0ICAgICd2ZWMzIHJnYlNFID0gRnhhYVRleE9mZih0ZXgsIHBvcy54eSwgdmVjMiggMS4sIDEuKSwgcmNwRnJhbWUpLnh5ejsnLFxuXHRcdCAgICAncmdiTCArPSAocmdiTlcgKyByZ2JORSArIHJnYlNXICsgcmdiU0UpOycsXG5cdFx0ICAgICdyZ2JMICo9IHZlYzMoMS4wLzkuMCk7JyxcblxuXHRcdCAgICAnZmxvYXQgbHVtYU5XID0gRnhhYUx1bWEocmdiTlcpOycsXG5cdFx0ICAgICdmbG9hdCBsdW1hTkUgPSBGeGFhTHVtYShyZ2JORSk7Jyxcblx0XHQgICAgJ2Zsb2F0IGx1bWFTVyA9IEZ4YWFMdW1hKHJnYlNXKTsnLFxuXHRcdCAgICAnZmxvYXQgbHVtYVNFID0gRnhhYUx1bWEocmdiU0UpOycsXG5cblx0XHQgICAgJ2Zsb2F0IGVkZ2VWZXJ0ID0nLFxuXHRcdCAgICAgICAgJ2FicygoMC4yNSAqIGx1bWFOVykgKyAoLTAuNSAqIGx1bWFOKSArICgwLjI1ICogbHVtYU5FKSkgKycsXG5cdFx0ICAgICAgICAnYWJzKCgwLjUwICogbHVtYVcgKSArICgtMS4wICogbHVtYU0pICsgKDAuNTAgKiBsdW1hRSApKSArJyxcblx0XHQgICAgICAgICdhYnMoKDAuMjUgKiBsdW1hU1cpICsgKC0wLjUgKiBsdW1hUykgKyAoMC4yNSAqIGx1bWFTRSkpOycsXG5cdFx0ICAgICdmbG9hdCBlZGdlSG9yeiA9Jyxcblx0XHQgICAgICAgICdhYnMoKDAuMjUgKiBsdW1hTlcpICsgKC0wLjUgKiBsdW1hVykgKyAoMC4yNSAqIGx1bWFTVykpICsnLFxuXHRcdCAgICAgICAgJ2FicygoMC41MCAqIGx1bWFOICkgKyAoLTEuMCAqIGx1bWFNKSArICgwLjUwICogbHVtYVMgKSkgKycsXG5cdFx0ICAgICAgICAnYWJzKCgwLjI1ICogbHVtYU5FKSArICgtMC41ICogbHVtYUUpICsgKDAuMjUgKiBsdW1hU0UpKTsnLFxuXG5cdFx0ICAgICdib29sIGhvcnpTcGFuID0gZWRnZUhvcnogPj0gZWRnZVZlcnQ7Jyxcblx0XHQgICAgJ2Zsb2F0IGxlbmd0aFNpZ24gPSBob3J6U3BhbiA/IC1yY3BGcmFtZS55IDogLXJjcEZyYW1lLng7JyxcblxuXHRcdCAgICAnaWYoIWhvcnpTcGFuKSB7Jyxcblx0XHQgICAgICAgICdsdW1hTiA9IGx1bWFXOycsXG5cdFx0ICAgICAgICAnbHVtYVMgPSBsdW1hRTsnLFxuXHRcdCAgICAnfScsXG5cblx0XHQgICAgJ2Zsb2F0IGdyYWRpZW50TiA9IGFicyhsdW1hTiAtIGx1bWFNKTsnLFxuXHRcdCAgICAnZmxvYXQgZ3JhZGllbnRTID0gYWJzKGx1bWFTIC0gbHVtYU0pOycsXG5cdFx0ICAgICdsdW1hTiA9IChsdW1hTiArIGx1bWFNKSAqIDAuNTsnLFxuXHRcdCAgICAnbHVtYVMgPSAobHVtYVMgKyBsdW1hTSkgKiAwLjU7JyxcblxuXHRcdCAgICAnaWYgKGdyYWRpZW50TiA8IGdyYWRpZW50UykgeycsXG5cdFx0ICAgICAgICAnbHVtYU4gPSBsdW1hUzsnLFxuXHRcdCAgICAgICAgJ2x1bWFOID0gbHVtYVM7Jyxcblx0XHQgICAgICAgICdncmFkaWVudE4gPSBncmFkaWVudFM7Jyxcblx0XHQgICAgICAgICdsZW5ndGhTaWduICo9IC0xLjA7Jyxcblx0XHQgICAgJ30nLFxuXG5cdFx0ICAgICd2ZWMyIHBvc047Jyxcblx0XHQgICAgJ3Bvc04ueCA9IHBvcy54ICsgKGhvcnpTcGFuID8gMC4wIDogbGVuZ3RoU2lnbiAqIDAuNSk7Jyxcblx0XHQgICAgJ3Bvc04ueSA9IHBvcy55ICsgKGhvcnpTcGFuID8gbGVuZ3RoU2lnbiAqIDAuNSA6IDAuMCk7JyxcblxuXHRcdCAgICAnZ3JhZGllbnROICo9IHVfc2VhcmNoX3RocmVzaG9sZDsnLFxuXG5cdFx0ICAgICd2ZWMyIHBvc1AgPSBwb3NOOycsXG5cdFx0ICAgICd2ZWMyIG9mZk5QID0gaG9yelNwYW4gPyB2ZWMyKHJjcEZyYW1lLngsIDAuMCkgOiB2ZWMyKDAuMCwgcmNwRnJhbWUueSk7Jyxcblx0XHQgICAgJ2Zsb2F0IGx1bWFFbmROID0gbHVtYU47Jyxcblx0XHQgICAgJ2Zsb2F0IGx1bWFFbmRQID0gbHVtYU47Jyxcblx0XHQgICAgJ2Jvb2wgZG9uZU4gPSBmYWxzZTsnLFxuXHRcdCAgICAnYm9vbCBkb25lUCA9IGZhbHNlOycsXG5cdFx0ICAgICdwb3NOICs9IG9mZk5QICogdmVjMigtMS4wLCAtMS4wKTsnLFxuXHRcdCAgICAncG9zUCArPSBvZmZOUCAqIHZlYzIoIDEuMCwgIDEuMCk7JyxcblxuXHRcdCAgICAnZm9yKGludCBpID0gMDsgaSA8IGZ4YWFNYXhTZWFyY2hTdGVwczsgaSsrKSB7Jyxcblx0XHQgICAgXHQnaWYoaSA+PSB1X3NlYXJjaF9zdGVwcykgYnJlYWs7Jyxcblx0XHQgICAgICAgICdpZighZG9uZU4pIHsnLFxuXHRcdCAgICAgICAgICAgICdsdW1hRW5kTiA9IEZ4YWFMdW1hKHRleHR1cmUyRCh0ZXgsIHBvc04ueHkpLnh5eik7Jyxcblx0XHQgICAgICAgICd9Jyxcblx0XHQgICAgICAgICdpZighZG9uZVApIHsnLFxuXHRcdCAgICAgICAgICAgICdsdW1hRW5kUCA9IEZ4YWFMdW1hKHRleHR1cmUyRCh0ZXgsIHBvc1AueHkpLnh5eik7Jyxcblx0XHQgICAgICAgICd9JyxcblxuXHRcdCAgICAgICAgJ2RvbmVOID0gZG9uZU4gfHwgKGFicyhsdW1hRW5kTiAtIGx1bWFOKSA+PSBncmFkaWVudE4pOycsXG5cdFx0ICAgICAgICAnZG9uZVAgPSBkb25lUCB8fCAoYWJzKGx1bWFFbmRQIC0gbHVtYU4pID49IGdyYWRpZW50Tik7JyxcblxuXHRcdCAgICAgICAgJ2lmKGRvbmVOICYmIGRvbmVQKSB7Jyxcblx0XHQgICAgICAgICAgICAnYnJlYWs7Jyxcblx0XHQgICAgICAgICd9Jyxcblx0XHQgICAgICAgICdpZighZG9uZU4pIHsnLFxuXHRcdCAgICAgICAgICAgICdwb3NOIC09IG9mZk5QOycsXG5cdFx0ICAgICAgICAnfScsXG5cdFx0ICAgICAgICAnaWYoIWRvbmVQKSB7Jyxcblx0XHQgICAgICAgICAgICAncG9zUCArPSBvZmZOUDsnLFxuXHRcdCAgICAgICAgJ30nLFxuXHRcdCAgICAnfScsXG5cblx0XHQgICAgJ2Zsb2F0IGRzdE4gPSBob3J6U3BhbiA/IHBvcy54IC0gcG9zTi54IDogcG9zLnkgLSBwb3NOLnk7Jyxcblx0XHQgICAgJ2Zsb2F0IGRzdFAgPSBob3J6U3BhbiA/IHBvc1AueCAtIHBvcy54IDogcG9zUC55IC0gcG9zLnk7Jyxcblx0XHQgICAgJ2Jvb2wgZGlyZWN0aW9uTiA9IGRzdE4gPCBkc3RQOycsXG5cdFx0ICAgICdsdW1hRW5kTiA9IGRpcmVjdGlvbk4gPyBsdW1hRW5kTiA6IGx1bWFFbmRQOycsXG5cblx0XHQgICAgJ2lmKCgobHVtYU0gLSBsdW1hTikgPCAwLjApID09ICgobHVtYUVuZE4gLSBsdW1hTikgPCAwLjApKSB7Jyxcblx0XHQgICAgICAgICdsZW5ndGhTaWduID0gMC4wOycsXG5cdFx0ICAgICd9JyxcblxuXG5cdFx0ICAgICdmbG9hdCBzcGFuTGVuZ3RoID0gKGRzdFAgKyBkc3ROKTsnLFxuXHRcdCAgICAnZHN0TiA9IGRpcmVjdGlvbk4gPyBkc3ROIDogZHN0UDsnLFxuXHRcdCAgICAnZmxvYXQgc3ViUGl4ZWxPZmZzZXQgPSAoMC41ICsgKGRzdE4gKiAoLTEuMC9zcGFuTGVuZ3RoKSkpICogbGVuZ3RoU2lnbjsnLFxuXHRcdCAgICAndmVjMyByZ2JGID0gdGV4dHVyZTJEKHRleCwgdmVjMignLFxuXHRcdCAgICAgICAgJ3Bvcy54ICsgKGhvcnpTcGFuID8gMC4wIDogc3ViUGl4ZWxPZmZzZXQpLCcsXG5cdFx0ICAgICAgICAncG9zLnkgKyAoaG9yelNwYW4gPyBzdWJQaXhlbE9mZnNldCA6IDAuMCkpKS54eXo7Jyxcblx0XHQgICAgJ3JldHVybiBGeGFhTGVycDMocmdiTCwgcmdiRiwgYmxlbmRMKTsnLFxuXHRcdCd9JyxcblxuXHRcdCd2b2lkIG1haW4oKSB7Jyxcblx0XHRcdCdnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodV9zYW1wbGVyMCwgdl90ZXhjb29yZCk7Jyxcblx0XHRcdCdpZih1X2FudGlhbGlhcykgeycsXG5cdFx0XHRcdCdnbF9GcmFnQ29sb3IueHl6ID0gRnhhYVBpeGVsU2hhZGVyKHZfdGV4Y29vcmQsIHVfc2FtcGxlcjAsIDEuIC8gdV9idWZmZXJzaXplKS54eXo7Jyxcblx0XHRcdCd9Jyxcblx0XHQnfSdcblx0XHRdLmpvaW4oJ1xcbicpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0U2hhZGVyRnJvbVN0cihnbCwgZ2wuRlJBR01FTlRfU0hBREVSLCBzYik7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgQ2hlbURvb2RsZS5saWIubWF0MywgQ2hlbURvb2RsZS5saWIubWF0NCwgZG9jdW1lbnQpO1xuXG4oZnVuY3Rpb24oZDMsIG0zLCBtNCwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLkxhYmVsU2hhZGVyID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfc3VwZXIgPSBkMy5fU2hhZGVyLnByb3RvdHlwZTtcblx0dmFyIF8gPSBkMy5MYWJlbFNoYWRlci5wcm90b3R5cGUgPSBuZXcgZDMuX1NoYWRlcigpO1xuXHRfLmluaXRVbmlmb3JtTG9jYXRpb25zID0gZnVuY3Rpb24oZ2wpIHtcblx0XHRfc3VwZXIuaW5pdFVuaWZvcm1Mb2NhdGlvbnMuY2FsbCh0aGlzLCBnbCk7XG5cdFx0dGhpcy5kaW1lbnNpb25Vbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X2RpbWVuc2lvbicpO1xuXHR9O1xuXHRfLm9uU2hhZGVyQXR0YWNoZWQgPSBmdW5jdGlvbihnbCkge1xuXHRcdF9zdXBlci5vblNoYWRlckF0dGFjaGVkLmNhbGwodGhpcywgZ2wpO1xuXHRcdHRoaXMudmVydGV4VGV4Q29vcmRBdHRyaWJ1dGUgPSAyO1xuXHRcdGdsLmJpbmRBdHRyaWJMb2NhdGlvbih0aGlzLmdQcm9ncmFtLCB0aGlzLnZlcnRleFRleENvb3JkQXR0cmlidXRlLCAnYV92ZXJ0ZXhfdGV4Y29vcmQnKTtcblx0fTtcblx0Xy5sb2FkRGVmYXVsdFZlcnRleFNoYWRlciA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIHNiID0gW1xuXHRcdCdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnLFxuXHRcdFxuXHRcdC8vIGF0dHJpYnV0ZXMgc2V0IHdoZW4gcmVuZGVyaW5nIG9iamVjdHNcblx0XHQnYXR0cmlidXRlIHZlYzMgYV92ZXJ0ZXhfcG9zaXRpb247Jyxcblx0XHQnYXR0cmlidXRlIHZlYzMgYV92ZXJ0ZXhfbm9ybWFsOycsXG5cdFx0J2F0dHJpYnV0ZSB2ZWMyIGFfdmVydGV4X3RleGNvb3JkOycsXG5cblx0XHQvLyBtYXRyaWNlcyBzZXQgYnkgZ2wuc2V0TWF0cml4VW5pZm9ybXNcblx0XHQndW5pZm9ybSBtYXQ0IHVfbW9kZWxfdmlld19tYXRyaXg7Jyxcblx0XHQndW5pZm9ybSBtYXQ0IHVfcHJvamVjdGlvbl9tYXRyaXg7Jyxcblx0XHQndW5pZm9ybSB2ZWMyIHVfZGltZW5zaW9uOycsXG5cblx0XHQvLyBzZW50IHRvIHRoZSBmcmFnbWVudCBzaGFkZXJcblx0XHQndmFyeWluZyB2ZWMyIHZfdGV4Y29vcmQ7JyxcblxuXHRcdCd2b2lkIG1haW4oKSB7JyxcblxuXHRcdFx0J2dsX1Bvc2l0aW9uID0gdV9tb2RlbF92aWV3X21hdHJpeCAqIHZlYzQoYV92ZXJ0ZXhfcG9zaXRpb24sIDEuKTsnLFxuXG5cdFx0XHQndmVjNCBkZXB0aF9wb3MgPSB2ZWM0KGdsX1Bvc2l0aW9uKTsnLFxuXG5cdFx0XHQnZGVwdGhfcG9zLnogKz0gYV92ZXJ0ZXhfbm9ybWFsLno7JyxcblxuXHRcdFx0J2dsX1Bvc2l0aW9uID0gdV9wcm9qZWN0aW9uX21hdHJpeCAqIGdsX1Bvc2l0aW9uOycsXG5cblx0XHRcdCdkZXB0aF9wb3MgPSB1X3Byb2plY3Rpb25fbWF0cml4ICogZGVwdGhfcG9zOycsXG5cblx0XHRcdCdnbF9Qb3NpdGlvbiAvPSBnbF9Qb3NpdGlvbi53OycsXG5cblx0XHRcdCdnbF9Qb3NpdGlvbi54eSArPSBhX3ZlcnRleF9ub3JtYWwueHkgLyB1X2RpbWVuc2lvbiAqIDIuOycsXG5cblx0XHRcdCdnbF9Qb3NpdGlvbi56ID0gZGVwdGhfcG9zLnogLyBkZXB0aF9wb3MudzsnLFxuXG5cdFx0XHQndl90ZXhjb29yZCA9IGFfdmVydGV4X3RleGNvb3JkOycsXG5cblx0XHQnfSddLmpvaW4oJycpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0U2hhZGVyRnJvbVN0cihnbCwgZ2wuVkVSVEVYX1NIQURFUiwgc2IpO1xuXHR9O1xuXHRfLmxvYWREZWZhdWx0RnJhZ21lbnRTaGFkZXIgPSBmdW5jdGlvbihnbCkge1xuXHRcdHZhciBzYiA9IFtcblx0XHQvLyBzZXQgbWFjcm8gZm9yIGRlcHRoIG1tYXAgdGV4dHVyZVxuXHRcdGdsLmRlcHRoVGV4dHVyZUV4dCA/ICcjZGVmaW5lIENXQ19ERVBUSF9URVhcXG4nIDogJycsXG5cdFx0XG5cdFx0Ly8gc2V0IGZsb2F0IHByZWNpc2lvblxuXHRcdCdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnLFxuXG5cdFx0Ly8gdGV4dHVyZSBmb3IgZHJhdyB0ZXh0IG5vciBzaGFkb3cgbWFwXG5cdFx0J3VuaWZvcm0gc2FtcGxlcjJEIHVfaW1hZ2U7Jyxcblx0XHRcdFx0XHRcblx0XHQvLyBmcm9tIHRoZSB2ZXJ0ZXggc2hhZGVyXG5cdFx0J3ZhcnlpbmcgdmVjMiB2X3RleGNvb3JkOycsXG5cblx0XHQndm9pZCBtYWluKHZvaWQpIHsnLFxuXHRcdFx0J2dsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCh1X2ltYWdlLCB2X3RleGNvb3JkKTsnLFxuXHRcdCd9J1xuXHRcdF0uam9pbignJyk7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRTaGFkZXJGcm9tU3RyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIHNiKTtcblx0fTtcblx0Xy5lbmFibGVBdHRyaWJzQXJyYXkgPSBmdW5jdGlvbihnbCkge1xuXHRcdF9zdXBlci5lbmFibGVBdHRyaWJzQXJyYXkuY2FsbCh0aGlzLCBnbCk7XG5cdFx0Z2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy52ZXJ0ZXhOb3JtYWxBdHRyaWJ1dGUpO1xuXHRcdGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMudmVydGV4VGV4Q29vcmRBdHRyaWJ1dGUpO1xuXHR9O1xuXHRfLmRpc2FibGVBdHRyaWJzQXJyYXkgPSBmdW5jdGlvbihnbCkge1xuXHRcdF9zdXBlci5kaXNhYmxlQXR0cmlic0FycmF5LmNhbGwodGhpcywgZ2wpO1xuXHRcdGdsLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLnZlcnRleE5vcm1hbEF0dHJpYnV0ZSk7XG5cdFx0Z2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMudmVydGV4VGV4Q29vcmRBdHRyaWJ1dGUpO1xuXHR9O1xuXHRfLnNldERpbWVuc2lvbiA9IGZ1bmN0aW9uKGdsLCB3aWR0aCwgaGVpZ2h0KSB7XG5cdFx0Z2wudW5pZm9ybTJmKHRoaXMuZGltZW5zaW9uVW5pZm9ybSwgd2lkdGgsIGhlaWdodCk7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgQ2hlbURvb2RsZS5saWIubWF0MywgQ2hlbURvb2RsZS5saWIubWF0NCwgZG9jdW1lbnQpO1xuXG4oZnVuY3Rpb24oZDMsIG0zLCBtNCwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0ZDMuTGlnaHRpbmdTaGFkZXIgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF9zdXBlciA9IGQzLl9TaGFkZXIucHJvdG90eXBlO1xuXHR2YXIgXyA9IGQzLkxpZ2h0aW5nU2hhZGVyLnByb3RvdHlwZSA9IG5ldyBkMy5fU2hhZGVyKCk7XG5cdFxuXHRfLmluaXRVbmlmb3JtTG9jYXRpb25zID0gZnVuY3Rpb24oZ2wpIHtcblx0XHRfc3VwZXIuaW5pdFVuaWZvcm1Mb2NhdGlvbnMuY2FsbCh0aGlzLCBnbCk7XG5cdFx0Ly8gYXNzaWduIHVuaWZvcm0gcHJvcGVydGllc1xuXHRcdHRoaXMucG9zaXRpb25TYW1wbGVVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X3Bvc2l0aW9uX3NhbXBsZScpO1xuXHRcdHRoaXMuY29sb3JTYW1wbGVVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X2NvbG9yX3NhbXBsZScpO1xuXHRcdHRoaXMuc3Nhb1NhbXBsZVVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3Vfc3Nhb19zYW1wbGUnKTtcblx0XHR0aGlzLm91dGxpbmVTYW1wbGVVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X291dGxpbmVfc2FtcGxlJyk7XG5cdH07XG5cdF8ubG9hZERlZmF1bHRWZXJ0ZXhTaGFkZXIgPSBmdW5jdGlvbihnbCkge1xuXHRcdHZhciBzYiA9IFtcblx0XHQncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7Jyxcblx0XHRcblx0XHQvLyBhdHRyaWJ1dGVzIHNldCB3aGVuIHJlbmRlcmluZyBvYmplY3RzXG5cdFx0J2F0dHJpYnV0ZSB2ZWMzIGFfdmVydGV4X3Bvc2l0aW9uOycsXG5cblx0XHQvLyBzZW50IHRvIHRoZSBmcmFnbWVudCBzaGFkZXJcbiAgICBcdCd2YXJ5aW5nIHZlYzIgdl90ZXhjb29yZDsnLFxuXG5cdFx0J3ZvaWQgbWFpbigpIHsnLFxuXHRcdFx0J2dsX1Bvc2l0aW9uID0gdmVjNChhX3ZlcnRleF9wb3NpdGlvbiwgMS4pOycsXG4gICAgICAgIFx0J3ZfdGV4Y29vcmQgPSBhX3ZlcnRleF9wb3NpdGlvbi54eSAqIC41ICsgLjU7Jyxcblx0XHQnfSddLmpvaW4oJycpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0U2hhZGVyRnJvbVN0cihnbCwgZ2wuVkVSVEVYX1NIQURFUiwgc2IpO1xuXHR9O1xuXHRfLmxvYWREZWZhdWx0RnJhZ21lbnRTaGFkZXIgPSBmdW5jdGlvbihnbCkge1xuXHRcdHZhciBzYiA9IFtcblxuXHRcdC8vIHNldCBmbG9hdCBwcmVjaXNpb25cblx0XHQncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyxcblxuXHQgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVfcG9zaXRpb25fc2FtcGxlOycsXG5cdCAgICAndW5pZm9ybSBzYW1wbGVyMkQgdV9jb2xvcl9zYW1wbGU7Jyxcblx0XHQndW5pZm9ybSBzYW1wbGVyMkQgdV9zc2FvX3NhbXBsZTsnLFxuXHRcdCd1bmlmb3JtIHNhbXBsZXIyRCB1X291dGxpbmVfc2FtcGxlOycsXG5cdCAgICBcbiAgICBcdCd2YXJ5aW5nIHZlYzIgdl90ZXhjb29yZDsnLFxuXG5cdCAgICAndm9pZCBtYWluKCkgeycsXG5cdCAgICBcdCd2ZWM0IHBvc2l0aW9uID0gdGV4dHVyZTJEKHVfcG9zaXRpb25fc2FtcGxlLCB2X3RleGNvb3JkKTsnLFxuXHQgICAgXHQndmVjNCBjb2xvciA9IHRleHR1cmUyRCh1X2NvbG9yX3NhbXBsZSwgdl90ZXhjb29yZCk7Jyxcblx0XHRcdCd2ZWM0IGFvID0gdGV4dHVyZTJEKHVfc3Nhb19zYW1wbGUsIHZfdGV4Y29vcmQpOycsXG5cdFx0XHQnZmxvYXQgb3V0bGluZSA9IHRleHR1cmUyRCh1X291dGxpbmVfc2FtcGxlLCB2X3RleGNvb3JkKS5yOycsXG5cblx0XHRcdC8vIHNraXAgYmFja2dyb3VuZCBjb2xvclxuXHQgICAgXHQnaWYocG9zaXRpb24udyA9PSAwLiAmJiBvdXRsaW5lID09IDEuKSB7Jyxcblx0XHRcdFx0Ly8gJ2dsX0ZyYWdDb2xvciA9IHZlYzQoMC4sIDAuLCAwLiwgMS4pOycsXG5cdCAgICBcdFx0J3JldHVybjsnLFxuXHQgICAgXHQnfScsXG5cblx0XHRcdCdnbF9GcmFnQ29sb3IgPSB2ZWM0KGNvbG9yLnJnYiAqIGFvLnIgKiBvdXRsaW5lLCAxLik7Jyxcblx0ICAgICd9J10uam9pbignJyk7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRTaGFkZXJGcm9tU3RyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIHNiKTtcblx0fTtcblxufSkoQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLmQzLCBDaGVtRG9vZGxlLmxpYi5tYXQzLCBDaGVtRG9vZGxlLmxpYi5tYXQ0LCBkb2N1bWVudCk7XG5cbihmdW5jdGlvbihkMywgbTMsIG00LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRkMy5Ob3JtYWxTaGFkZXIgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF9zdXBlciA9IGQzLl9TaGFkZXIucHJvdG90eXBlO1xuXHR2YXIgXyA9IGQzLk5vcm1hbFNoYWRlci5wcm90b3R5cGUgPSBuZXcgZDMuX1NoYWRlcigpO1xuXHRfLmluaXRVbmlmb3JtTG9jYXRpb25zID0gZnVuY3Rpb24oZ2wpIHtcblx0XHRfc3VwZXIuaW5pdFVuaWZvcm1Mb2NhdGlvbnMuY2FsbCh0aGlzLCBnbCk7XG5cdFx0Ly8gYXNzaWduIHVuaWZvcm0gcHJvcGVydGllc1xuXHRcdHRoaXMubm9ybWFsTWF0cml4VW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9ub3JtYWxfbWF0cml4Jyk7XG5cdH07XG5cdF8ubG9hZERlZmF1bHRWZXJ0ZXhTaGFkZXIgPSBmdW5jdGlvbihnbCkge1xuXHRcdHZhciBzYiA9IFtcblx0XHQncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7Jyxcblx0XHRcblx0XHQvLyBhdHRyaWJ1dGVzIHNldCB3aGVuIHJlbmRlcmluZyBvYmplY3RzXG5cdFx0J2F0dHJpYnV0ZSB2ZWMzIGFfdmVydGV4X3Bvc2l0aW9uOycsXG5cdFx0J2F0dHJpYnV0ZSB2ZWMzIGFfdmVydGV4X25vcm1hbDsnLFxuXG5cdFx0Ly8gbWF0cmljZXMgc2V0IGJ5IGdsLnNldE1hdHJpeFVuaWZvcm1zXG5cdFx0J3VuaWZvcm0gbWF0NCB1X21vZGVsX3ZpZXdfbWF0cml4OycsXG5cdFx0J3VuaWZvcm0gbWF0NCB1X3Byb2plY3Rpb25fbWF0cml4OycsXG5cdFx0J3VuaWZvcm0gbWF0MyB1X25vcm1hbF9tYXRyaXg7JyxcblxuXHRcdC8vIHNlbnQgdG8gdGhlIGZyYWdtZW50IHNoYWRlclxuXHRcdCd2YXJ5aW5nIHZlYzMgdl9ub3JtYWw7JyxcblxuXHRcdCd2b2lkIG1haW4oKSB7JyxcblxuXHRcdFx0J3Zfbm9ybWFsID0gbGVuZ3RoKGFfdmVydGV4X25vcm1hbCk9PTAuID8gYV92ZXJ0ZXhfbm9ybWFsIDogdV9ub3JtYWxfbWF0cml4ICogYV92ZXJ0ZXhfbm9ybWFsOycsXG5cdFx0XHRcblx0XHRcdCdnbF9Qb3NpdGlvbiA9IHVfcHJvamVjdGlvbl9tYXRyaXggKiB1X21vZGVsX3ZpZXdfbWF0cml4ICogdmVjNChhX3ZlcnRleF9wb3NpdGlvbiwgMS4pOycsXG5cblx0XHQnfSddLmpvaW4oJycpO1xuXHRcdFxuXHRcdHJldHVybiB0aGlzLmdldFNoYWRlckZyb21TdHIoZ2wsIGdsLlZFUlRFWF9TSEFERVIsIHNiKTtcblx0fTtcblx0Xy5sb2FkRGVmYXVsdEZyYWdtZW50U2hhZGVyID0gZnVuY3Rpb24oZ2wpIHtcblx0XHR2YXIgc2IgPSBbXG5cdFx0XG5cdFx0Ly8gc2V0IGZsb2F0IHByZWNpc2lvblxuXHRcdCdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnLFxuXHRcdFx0XHRcdFxuXHRcdCd2YXJ5aW5nIHZlYzMgdl9ub3JtYWw7JyxcblxuXHRcdCd2b2lkIG1haW4odm9pZCkgeycsXG5cdFx0XHQndmVjMyBub3JtYWwgPSBsZW5ndGgodl9ub3JtYWwpPT0wLiA/IHZlYzMoMC4sIDAuLCAxLikgOiBub3JtYWxpemUodl9ub3JtYWwpOycsXG5cdFx0XHQnZ2xfRnJhZ0NvbG9yID0gdmVjNChub3JtYWwsIDAuKTsnLFxuXHRcdCd9J10uam9pbignJyk7XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuZ2V0U2hhZGVyRnJvbVN0cihnbCwgZ2wuRlJBR01FTlRfU0hBREVSLCBzYik7XG5cdH07XG5cdF8uZW5hYmxlQXR0cmlic0FycmF5ID0gZnVuY3Rpb24oZ2wpIHtcblx0XHRfc3VwZXIuZW5hYmxlQXR0cmlic0FycmF5LmNhbGwodGhpcywgZ2wpO1xuXHRcdGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMudmVydGV4Tm9ybWFsQXR0cmlidXRlKTtcblx0fTtcblx0Xy5kaXNhYmxlQXR0cmlic0FycmF5ID0gZnVuY3Rpb24oZ2wpIHtcblx0XHRfc3VwZXIuZGlzYWJsZUF0dHJpYnNBcnJheS5jYWxsKHRoaXMsIGdsKTtcblx0XHRnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy52ZXJ0ZXhOb3JtYWxBdHRyaWJ1dGUpO1xuXHR9O1xuXHRfLnNldE1vZGVsVmlld01hdHJpeCA9IGZ1bmN0aW9uKGdsLCBtdk1hdHJpeCkge1xuXHRcdF9zdXBlci5zZXRNb2RlbFZpZXdNYXRyaXguY2FsbCh0aGlzLCBnbCwgbXZNYXRyaXgpO1xuXHRcdC8vIGNyZWF0ZSB0aGUgbm9ybWFsIG1hdHJpeCBhbmQgcHVzaCBpdCB0byB0aGUgZ3JhcGhpY3MgY2FyZFxuXHRcdHZhciBub3JtYWxNYXRyaXggPSBtMy50cmFuc3Bvc2UobTQudG9JbnZlcnNlTWF0Myhtdk1hdHJpeCwgW10pKTtcblx0XHRnbC51bmlmb3JtTWF0cml4M2Z2KHRoaXMubm9ybWFsTWF0cml4VW5pZm9ybSwgZmFsc2UsIG5vcm1hbE1hdHJpeCk7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgQ2hlbURvb2RsZS5saWIubWF0MywgQ2hlbURvb2RsZS5saWIubWF0NCwgZG9jdW1lbnQpO1xuXG4oZnVuY3Rpb24oZDMsIG0zLCBtNCwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0ZDMuT3V0bGluZVNoYWRlciA9IGZ1bmN0aW9uKCkge1xuXHR9O1xuXHR2YXIgX3N1cGVyID0gZDMuX1NoYWRlci5wcm90b3R5cGU7XG5cdHZhciBfID0gZDMuT3V0bGluZVNoYWRlci5wcm90b3R5cGUgPSBuZXcgZDMuX1NoYWRlcigpO1xuXG5cdF8uaW5pdFVuaWZvcm1Mb2NhdGlvbnMgPSBmdW5jdGlvbihnbCkge1xuXHRcdF9zdXBlci5pbml0VW5pZm9ybUxvY2F0aW9ucy5jYWxsKHRoaXMsIGdsKTtcblx0XHR0aGlzLm5vcm1hbFNhbXBsZVVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3Vfbm9ybWFsX3NhbXBsZScpO1xuXHRcdHRoaXMuZGVwdGhTYW1wbGVVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X2RlcHRoX3NhbXBsZScpO1xuXHRcdHRoaXMuZ2J1ZmZlclRleHR1cmVTaXplVW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9nYnVmZmVyX3RleHR1cmVfc2l6ZScpO1xuXG5cdFx0dGhpcy5ub3JtYWxUaHJlc2hvbGRVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X25vcm1hbF90aHJlc2hvbGQnKTtcblx0XHR0aGlzLmRlcHRoVGhyZXNob2xkVW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9kZXB0aF90aHJlc2hvbGQnKTtcblx0XHR0aGlzLnRoaWNrbmVzc1VuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3VfdGhpY2tuZXNzJyk7XG5cdH07XG5cdF8ubG9hZERlZmF1bHRWZXJ0ZXhTaGFkZXIgPSBmdW5jdGlvbihnbCkge1xuXHRcdHZhciBzYiA9IFtcblx0XHQncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7Jyxcblx0XHRcblx0XHQvLyBhdHRyaWJ1dGVzIHNldCB3aGVuIHJlbmRlcmluZyBvYmplY3RzXG5cdFx0J2F0dHJpYnV0ZSB2ZWMzIGFfdmVydGV4X3Bvc2l0aW9uOycsXG5cbiAgICBcdCd2YXJ5aW5nIHZlYzIgdl90ZXhjb29yZDsnLFxuXG5cdFx0J3ZvaWQgbWFpbigpIHsnLFxuXHRcdFx0J2dsX1Bvc2l0aW9uID0gdmVjNChhX3ZlcnRleF9wb3NpdGlvbiwgMS4pOycsXG4gICAgICAgIFx0J3ZfdGV4Y29vcmQgPSBhX3ZlcnRleF9wb3NpdGlvbi54eSAqIC41ICsgLjU7Jyxcblx0XHQnfSddLmpvaW4oJycpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0U2hhZGVyRnJvbVN0cihnbCwgZ2wuVkVSVEVYX1NIQURFUiwgc2IpO1xuXHR9O1xuXHRfLmxvYWREZWZhdWx0RnJhZ21lbnRTaGFkZXIgPSBmdW5jdGlvbihnbCkge1xuXHRcdHZhciBzYiA9IFtcblx0XHQvLyBzZXQgZmxvYXQgcHJlY2lzaW9uXG5cdFx0J3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycsXG5cblx0ICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1X25vcm1hbF9zYW1wbGU7Jyxcblx0ICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1X2RlcHRoX3NhbXBsZTsnLFxuXG5cdCAgICAndW5pZm9ybSBmbG9hdCB1X25vcm1hbF90aHJlc2hvbGQ7Jyxcblx0ICAgICd1bmlmb3JtIGZsb2F0IHVfZGVwdGhfdGhyZXNob2xkOycsXG5cblx0ICAgICd1bmlmb3JtIGZsb2F0IHVfdGhpY2tuZXNzOycsXG5cblx0ICAgICd1bmlmb3JtIHZlYzIgdV9nYnVmZmVyX3RleHR1cmVfc2l6ZTsnLFxuXG5cdCAgICBcblx0ICAgICd2YXJ5aW5nIHZlYzIgdl90ZXhjb29yZDsnLFxuXG5cdCAgICAndm9pZCBtYWluKCkgeycsXG5cdCAgICBcdCd2ZWMzIG5vcm1hbCA9IHRleHR1cmUyRCh1X25vcm1hbF9zYW1wbGUsIHZfdGV4Y29vcmQpLnh5ejsnLFxuXHQgICAgXHQnZmxvYXQgZGVwdGggPSB0ZXh0dXJlMkQodV9kZXB0aF9zYW1wbGUsIHZfdGV4Y29vcmQpLnI7JyxcblxuXHQgICAgXHQvLyBjaGVjayBiYWNrZ3JvdW5kIHBpeGVsXG5cdCAgICBcdC8vICdpZihkZXB0aCA9PSAxLikgeycsXG5cdCAgICBcdC8vIFx0J3JldHVybjsnLFxuXHQgICAgXHQvLyAnfScsXG5cblx0ICAgIFx0J3ZlYzIgdGV4ZWxTaXplID0gdV90aGlja25lc3MvdV9nYnVmZmVyX3RleHR1cmVfc2l6ZSAqIC41OycsXG5cdCAgICBcdCd2ZWMyIG9mZnNldHNbOF07JyxcblxuXHRcdFx0J29mZnNldHNbMF0gPSB2ZWMyKC10ZXhlbFNpemUueCwgLXRleGVsU2l6ZS55KTsnLFxuXHRcdFx0J29mZnNldHNbMV0gPSB2ZWMyKC10ZXhlbFNpemUueCwgMCk7Jyxcblx0XHRcdCdvZmZzZXRzWzJdID0gdmVjMigtdGV4ZWxTaXplLngsIHRleGVsU2l6ZS55KTsnLFxuXG5cdFx0XHQnb2Zmc2V0c1szXSA9IHZlYzIoMCwgLXRleGVsU2l6ZS55KTsnLFxuXHRcdFx0J29mZnNldHNbNF0gPSB2ZWMyKDAsICB0ZXhlbFNpemUueSk7JyxcblxuXHRcdFx0J29mZnNldHNbNV0gPSB2ZWMyKHRleGVsU2l6ZS54LCAtdGV4ZWxTaXplLnkpOycsXG5cdFx0XHQnb2Zmc2V0c1s2XSA9IHZlYzIodGV4ZWxTaXplLngsIDApOycsXG5cdFx0XHQnb2Zmc2V0c1s3XSA9IHZlYzIodGV4ZWxTaXplLngsIHRleGVsU2l6ZS55KTsnLFxuXG5cdFx0XHQnZmxvYXQgZWRnZSA9IDAuOycsXG5cblx0XHRcdCdmb3IgKGludCBpID0gMDsgaSA8IDg7IGkrKykgeycsXG5cdFx0XHRcdCd2ZWMzIHNhbXBsZU5vcm0gPSB0ZXh0dXJlMkQodV9ub3JtYWxfc2FtcGxlLCB2X3RleGNvb3JkICsgb2Zmc2V0c1tpXSkueHl6OycsXG5cblx0XHRcdFx0J2lmKG5vcm1hbCA9PSB2ZWMzKC4wLCAuMCwgLjApKSB7Jyxcblx0XHRcdFx0XHQnaWYoc2FtcGxlTm9ybSAhPSB2ZWMzKC4wLCAuMCwgLjApKSB7Jyxcblx0XHRcdFx0XHRcdCdlZGdlID0gMS4wOycsXG5cdFx0XHRcdFx0XHQnYnJlYWs7Jyxcblx0XHRcdFx0XHQnfScsXG5cdFx0XHRcdFx0J2NvbnRpbnVlOycsXG5cdFx0XHRcdCd9JyxcblxuXHRcdFx0XHQnaWYgKGRvdChzYW1wbGVOb3JtLCBub3JtYWwpIDwgdV9ub3JtYWxfdGhyZXNob2xkKSB7Jyxcblx0XHRcdFx0XHQnZWRnZSA9IDEuMDsnLFxuXHRcdFx0XHRcdCdicmVhazsnLFxuXHRcdFx0XHQnfScsXG5cblx0XHRcdFx0J2Zsb2F0IHNhbXBsZURlcHRoID0gdGV4dHVyZTJEKHVfZGVwdGhfc2FtcGxlLCB2X3RleGNvb3JkICsgb2Zmc2V0c1tpXSkucjsnLFxuXHRcdFx0XHQnaWYgKGFicyhzYW1wbGVEZXB0aCAtIGRlcHRoKSA+IHVfZGVwdGhfdGhyZXNob2xkKSB7Jyxcblx0XHRcdFx0XHQnZWRnZSA9IDEuMDsnLFxuXHRcdFx0XHRcdCdicmVhazsnLFxuXHRcdFx0XHQnfScsXG5cdFx0XHQnfScsXG5cblx0XHRcdCdlZGdlID0gMS4gLSBlZGdlOycsXG5cblx0XHQgICAgJ2dsX0ZyYWdDb2xvciA9IHZlYzQoZWRnZSwgZWRnZSwgZWRnZSwgMS4pOycsXG5cdCAgICAnfSddLmpvaW4oJycpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0U2hhZGVyRnJvbVN0cihnbCwgZ2wuRlJBR01FTlRfU0hBREVSLCBzYik7XG5cdH07XG5cdF8uc2V0R2J1ZmZlclRleHR1cmVTaXplID0gZnVuY3Rpb24oZ2wsIHdpZHRoLCBoZWlnaHQpIHtcblx0XHRnbC51bmlmb3JtMmYodGhpcy5nYnVmZmVyVGV4dHVyZVNpemVVbmlmb3JtLCB3aWR0aCwgaGVpZ2h0KTtcblx0fTtcblx0Xy5zZXROb3JtYWxUaHJlc2hvbGQgPSBmdW5jdGlvbihnbCwgdmFsdWUpIHtcblx0XHRnbC51bmlmb3JtMWYodGhpcy5ub3JtYWxUaHJlc2hvbGRVbmlmb3JtLCB2YWx1ZSk7XG5cdH07XG5cdF8uc2V0RGVwdGhUaHJlc2hvbGQgPSBmdW5jdGlvbihnbCwgdmFsdWUpIHtcblx0XHRnbC51bmlmb3JtMWYodGhpcy5kZXB0aFRocmVzaG9sZFVuaWZvcm0sIHZhbHVlKTtcblx0fTtcblx0Xy5zZXRUaGlja25lc3MgPSBmdW5jdGlvbihnbCwgdmFsdWUpIHtcblx0XHRnbC51bmlmb3JtMWYodGhpcy50aGlja25lc3NVbmlmb3JtLCB2YWx1ZSk7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgQ2hlbURvb2RsZS5saWIubWF0MywgQ2hlbURvb2RsZS5saWIubWF0NCwgZG9jdW1lbnQpO1xuXG4oZnVuY3Rpb24oZDMsIG0zLCBtNCwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0ZDMuUGhvbmdTaGFkZXIgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF9zdXBlciA9IGQzLl9TaGFkZXIucHJvdG90eXBlO1xuXHR2YXIgXyA9IGQzLlBob25nU2hhZGVyLnByb3RvdHlwZSA9IG5ldyBkMy5fU2hhZGVyKCk7XG5cdF8uaW5pdFVuaWZvcm1Mb2NhdGlvbnMgPSBmdW5jdGlvbihnbCkge1xuXHRcdF9zdXBlci5pbml0VW5pZm9ybUxvY2F0aW9ucy5jYWxsKHRoaXMsIGdsKTtcblx0XHQvLyBhc3NpZ24gdW5pZm9ybSBwcm9wZXJ0aWVzXG5cdFx0dGhpcy5zaGFkb3dVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X3NoYWRvdycpO1xuXHRcdHRoaXMuZmxhdENvbG9yVW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9mbGF0X2NvbG9yJyk7XG5cdFx0dGhpcy5ub3JtYWxNYXRyaXhVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X25vcm1hbF9tYXRyaXgnKTtcblx0XHRcblx0XHR0aGlzLmxpZ2h0TW9kZWxWaWV3TWF0cml4VW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9saWdodF9tb2RlbF92aWV3X21hdHJpeCcpO1xuXHRcdHRoaXMubGlnaHRQcm9qZWN0aW9uTWF0cml4VW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9saWdodF9wcm9qZWN0aW9uX21hdHJpeCcpO1xuXG5cdFx0dGhpcy5saWdodERpZmZ1c2VDb2xvclVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3VfbGlnaHRfZGlmZnVzZV9jb2xvcicpO1xuXHRcdHRoaXMubGlnaHRTcGVjdWxhckNvbG9yVW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9saWdodF9zcGVjdWxhcl9jb2xvcicpO1xuXHRcdHRoaXMubGlnaHREaXJlY3Rpb25Vbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X2xpZ2h0X2RpcmVjdGlvbicpO1xuXG5cdFx0dGhpcy5tYXRlcmlhbEFtYmllbnRDb2xvclVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3VfbWF0ZXJpYWxfYW1iaWVudF9jb2xvcicpO1xuXHRcdHRoaXMubWF0ZXJpYWxEaWZmdXNlQ29sb3JVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X21hdGVyaWFsX2RpZmZ1c2VfY29sb3InKTtcblx0XHR0aGlzLm1hdGVyaWFsU3BlY3VsYXJDb2xvclVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3VfbWF0ZXJpYWxfc3BlY3VsYXJfY29sb3InKTtcblx0XHR0aGlzLm1hdGVyaWFsU2hpbmluZXNzVW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9tYXRlcmlhbF9zaGluaW5lc3MnKTtcblx0XHR0aGlzLm1hdGVyaWFsQWxwaGFVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X21hdGVyaWFsX2FscGhhJyk7XG5cblx0XHR0aGlzLmZvZ01vZGVVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X2ZvZ19tb2RlJyk7XG5cdFx0dGhpcy5mb2dDb2xvclVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3VfZm9nX2NvbG9yJyk7XG5cdFx0dGhpcy5mb2dTdGFydFVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3VfZm9nX3N0YXJ0Jyk7XG5cdFx0dGhpcy5mb2dFbmRVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X2ZvZ19lbmQnKTtcblx0XHR0aGlzLmZvZ0RlbnNpdHlVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X2ZvZ19kZW5zaXR5Jyk7XG5cblx0XHQvLyB0ZXh0dXJlIGZvciBzaGFkb3cgbWFwXG5cdFx0dGhpcy5zaGFkb3dEZXB0aFNhbXBsZVVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3Vfc2hhZG93X2RlcHRoX3NhbXBsZScpO1xuXHRcdHRoaXMuc2hhZG93VGV4dHVyZVNpemVVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X3NoYWRvd190ZXh0dXJlX3NpemUnKTtcblx0XHR0aGlzLnNoYWRvd0ludGVuc2l0eVVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3Vfc2hhZG93X2ludGVuc2l0eScpO1xuXHRcdFxuXHRcdC8vIGdhbW1hIGNvcnJlY3Rpb25cblx0XHR0aGlzLmdhbW1hQ29ycmVjdGlvblVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3VfZ2FtbWFfaW52ZXJ0ZWQnKTtcblx0XHRcblx0XHQvLyBwb2ludCBzaXplXG5cdFx0dGhpcy5wb2ludFNpemVVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X3BvaW50X3NpemUnKTtcblx0fTtcblx0Xy5sb2FkRGVmYXVsdFZlcnRleFNoYWRlciA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIHNiID0gW1xuXHRcdCdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnLFxuXHRcdFxuXHRcdC8vIGF0dHJpYnV0ZXMgc2V0IHdoZW4gcmVuZGVyaW5nIG9iamVjdHNcblx0XHQnYXR0cmlidXRlIHZlYzMgYV92ZXJ0ZXhfcG9zaXRpb247Jyxcblx0XHQnYXR0cmlidXRlIHZlYzMgYV92ZXJ0ZXhfbm9ybWFsOycsXG5cblx0XHQvLyBzY2VuZSB1bmlmb3Jtc1xuXHRcdCd1bmlmb3JtIHZlYzMgdV9saWdodF9kaWZmdXNlX2NvbG9yOycsXG5cdFx0J3VuaWZvcm0gdmVjMyB1X21hdGVyaWFsX2FtYmllbnRfY29sb3I7Jyxcblx0XHQndW5pZm9ybSB2ZWMzIHVfbWF0ZXJpYWxfZGlmZnVzZV9jb2xvcjsnLFxuXHRcdC8vIG1hdHJpY2VzIHNldCBieSBnbC5zZXRNYXRyaXhVbmlmb3Jtc1xuXHRcdCd1bmlmb3JtIG1hdDQgdV9tb2RlbF92aWV3X21hdHJpeDsnLFxuXHRcdCd1bmlmb3JtIG1hdDQgdV9wcm9qZWN0aW9uX21hdHJpeDsnLFxuXHRcdCd1bmlmb3JtIG1hdDMgdV9ub3JtYWxfbWF0cml4OycsXG5cblx0XHQndW5pZm9ybSBtYXQ0IHVfbGlnaHRfbW9kZWxfdmlld19tYXRyaXg7Jyxcblx0XHQndW5pZm9ybSBtYXQ0IHVfbGlnaHRfcHJvamVjdGlvbl9tYXRyaXg7JyxcblxuXHRcdCd1bmlmb3JtIGJvb2wgdV9zaGFkb3c7JyxcblxuXHRcdC8vIHNlbnQgdG8gdGhlIGZyYWdtZW50IHNoYWRlclxuXHRcdCd2YXJ5aW5nIHZlYzMgdl92aWV3cG9zOycsXG4gIFx0XHQndmFyeWluZyB2ZWM0IHZfc2hhZGNvb3JkOycsXG5cdFx0J3ZhcnlpbmcgdmVjMyB2X2RpZmZ1c2U7Jyxcblx0XHQndmFyeWluZyB2ZWMzIHZfYW1iaWVudDsnLFxuXHRcdCd2YXJ5aW5nIHZlYzMgdl9ub3JtYWw7Jyxcblx0XHRcblx0XHQndW5pZm9ybSBmbG9hdCB1X3BvaW50X3NpemU7JyxcblxuXHRcdCd2b2lkIG1haW4oKSB7JyxcblxuXHRcdFx0J3Zfbm9ybWFsID0gbGVuZ3RoKGFfdmVydGV4X25vcm1hbCk9PTAuID8gYV92ZXJ0ZXhfbm9ybWFsIDogdV9ub3JtYWxfbWF0cml4ICogYV92ZXJ0ZXhfbm9ybWFsOycsXG5cdFx0XHQndl9hbWJpZW50ID0gdV9tYXRlcmlhbF9hbWJpZW50X2NvbG9yOycsXG5cdFx0XHQndl9kaWZmdXNlID0gdV9tYXRlcmlhbF9kaWZmdXNlX2NvbG9yICogdV9saWdodF9kaWZmdXNlX2NvbG9yOycsXG5cblx0XHRcdCdpZih1X3NoYWRvdykgeycsXG5cdFx0XHRcdCd2X3NoYWRjb29yZCA9IHVfbGlnaHRfcHJvamVjdGlvbl9tYXRyaXggKiB1X2xpZ2h0X21vZGVsX3ZpZXdfbWF0cml4ICogdmVjNChhX3ZlcnRleF9wb3NpdGlvbiwgMS4pOycsXG5cdFx0XHRcdCd2X3NoYWRjb29yZCAvPSB2X3NoYWRjb29yZC53OycsXG5cdFx0XHQnfScsXG5cblx0XHRcdCd2ZWM0IHZpZXdQb3MgPSB1X21vZGVsX3ZpZXdfbWF0cml4ICogdmVjNChhX3ZlcnRleF9wb3NpdGlvbiwgMS4pOycsXG5cblx0XHRcdCd2X3ZpZXdwb3MgPSB2aWV3UG9zLnh5eiAvIHZpZXdQb3MudzsnLFxuXHRcdFx0XG5cdFx0XHQnZ2xfUG9zaXRpb24gPSB1X3Byb2plY3Rpb25fbWF0cml4ICogdmlld1BvczsnLFxuXG5cdFx0XHQvLyBqdXN0IHRvIG1ha2Ugc3VyZSB0aGUgdyBpcyAxXG5cdFx0XHQnZ2xfUG9zaXRpb24gLz0gZ2xfUG9zaXRpb24udzsnLFxuXHRcdFx0J2dsX1BvaW50U2l6ZSA9IHVfcG9pbnRfc2l6ZTsnLFxuXG5cdFx0J30nXS5qb2luKCcnKTtcblx0XHRcblx0XHRyZXR1cm4gdGhpcy5nZXRTaGFkZXJGcm9tU3RyKGdsLCBnbC5WRVJURVhfU0hBREVSLCBzYik7XG5cdH07XG5cdF8ubG9hZERlZmF1bHRGcmFnbWVudFNoYWRlciA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIHNiID0gW1xuXHRcdC8vIHNldCBtYWNybyBmb3IgZGVwdGggbW1hcCB0ZXh0dXJlXG5cdFx0Z2wuZGVwdGhUZXh0dXJlRXh0ID8gJyNkZWZpbmUgQ1dDX0RFUFRIX1RFWFxcbicgOiAnJyxcblx0XHRcblx0XHQvLyBzZXQgZmxvYXQgcHJlY2lzaW9uXG5cdFx0J3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycsXG5cdFx0XHRcdFx0XG5cdFx0Ly8gc2NlbmUgdW5pZm9ybXNcblx0XHQndW5pZm9ybSB2ZWMzIHVfbGlnaHRfc3BlY3VsYXJfY29sb3I7Jyxcblx0XHQndW5pZm9ybSB2ZWMzIHVfbGlnaHRfZGlyZWN0aW9uOycsXG5cblx0XHQndW5pZm9ybSB2ZWMzIHVfbWF0ZXJpYWxfc3BlY3VsYXJfY29sb3I7Jyxcblx0XHQndW5pZm9ybSBmbG9hdCB1X21hdGVyaWFsX3NoaW5pbmVzczsnLFxuXHRcdCd1bmlmb3JtIGZsb2F0IHVfbWF0ZXJpYWxfYWxwaGE7JyxcblxuXHRcdCd1bmlmb3JtIGludCB1X2ZvZ19tb2RlOycsXG5cdFx0J3VuaWZvcm0gdmVjMyB1X2ZvZ19jb2xvcjsnLFxuXHRcdCd1bmlmb3JtIGZsb2F0IHVfZm9nX2RlbnNpdHk7Jyxcblx0XHQndW5pZm9ybSBmbG9hdCB1X2ZvZ19zdGFydDsnLFxuXHRcdCd1bmlmb3JtIGZsb2F0IHVfZm9nX2VuZDsnLFxuXG5cdFx0J3VuaWZvcm0gYm9vbCB1X3NoYWRvdzsnLFxuXHRcdCd1bmlmb3JtIGZsb2F0IHVfc2hhZG93X2ludGVuc2l0eTsnLFxuXG5cdFx0J3VuaWZvcm0gYm9vbCB1X2ZsYXRfY29sb3I7Jyxcblx0XHRcblx0XHQndW5pZm9ybSBmbG9hdCB1X2dhbW1hX2ludmVydGVkOycsXG5cblx0XHQvLyB0ZXh0dXJlIGZvciBzaGFkb3cgbWFwXG5cdFx0J3VuaWZvcm0gc2FtcGxlcjJEIHVfc2hhZG93X2RlcHRoX3NhbXBsZTsnLFxuXG5cdFx0J3VuaWZvcm0gdmVjMiB1X3NoYWRvd190ZXh0dXJlX3NpemU7Jyxcblx0XHRcdFx0XHRcblx0XHQvLyBmcm9tIHRoZSB2ZXJ0ZXggc2hhZGVyXG5cdFx0J3ZhcnlpbmcgdmVjMyB2X3ZpZXdwb3M7JyxcbiAgXHRcdCd2YXJ5aW5nIHZlYzQgdl9zaGFkY29vcmQ7Jyxcblx0XHQndmFyeWluZyB2ZWMzIHZfZGlmZnVzZTsnLFxuXHRcdCd2YXJ5aW5nIHZlYzMgdl9hbWJpZW50OycsXG5cdFx0J3ZhcnlpbmcgdmVjMyB2X25vcm1hbDsnLFxuXG5cblx0XHQnXFxuI2lmbmRlZiBDV0NfREVQVEhfVEVYXFxuJyxcblx0XHQnZmxvYXQgdW5wYWNrICh2ZWM0IGNvbG91cikgeycsXG5cdFx0XHQnY29uc3QgdmVjNCBiaXRTaGlmdHMgPSB2ZWM0KDEuLCcsXG5cdFx0XHRcdCcxLiAvIDI1NS4sJyxcblx0XHRcdFx0JzEuIC8gKDI1NS4gKiAyNTUuKSwnLFxuXHRcdFx0XHQnMS4gLyAoMjU1LiAqIDI1NS4gKiAyNTUuKSk7Jyxcblx0XHRcdCdyZXR1cm4gZG90KGNvbG91ciwgYml0U2hpZnRzKTsnLFxuXHRcdCd9Jyxcblx0XHQnXFxuI2VuZGlmXFxuJyxcblxuXHRcdCdmbG9hdCBzaGFkb3dNYXBEZXB0aCh2ZWM0IHNoYWRvd01hcENvbG9yKSB7Jyxcblx0XHRcdCdmbG9hdCB6U2hhZG93TWFwOycsXG5cdFx0XHQnXFxuI2lmZGVmIENXQ19ERVBUSF9URVhcXG4nLFxuXHRcdFx0J3pTaGFkb3dNYXAgPSBzaGFkb3dNYXBDb2xvci5yOycsXG5cdFx0XHQnXFxuI2Vsc2VcXG4nLFxuXHRcdFx0J3pTaGFkb3dNYXAgPSB1bnBhY2soc2hhZG93TWFwQ29sb3IpOycsXG5cdFx0XHQnXFxuI2VuZGlmXFxuJyxcblx0XHRcdCdyZXR1cm4gelNoYWRvd01hcDsnLFxuXHRcdCd9JyxcblxuXHRcdCd2b2lkIG1haW4odm9pZCkgeycsXG5cdFx0XHQndmVjMyBjb2xvciA9IHZfZGlmZnVzZTsnLFxuXHRcdFx0J2lmKGxlbmd0aCh2X25vcm1hbCkhPTAuKXsnLFxuXHRcdFx0XHQndmVjMyBub3JtYWwgPSBub3JtYWxpemUodl9ub3JtYWwpOycsXG5cdFx0XHRcdCd2ZWMzIGxpZ2h0RGlyID0gbm9ybWFsaXplKC11X2xpZ2h0X2RpcmVjdGlvbik7Jyxcblx0XHRcdFx0J2Zsb2F0IG5Eb3RMID0gZG90KG5vcm1hbCwgbGlnaHREaXIpOycsXG5cbiAgICBcdFx0XHQnZmxvYXQgc2hhZG93ID0gMC4wOycsXG4gICAgXHRcdFx0J2lmKHVfc2hhZG93KSB7Jyxcblx0XHRcdFx0XHQndmVjMyBkZXB0aENvb3JkID0gLjUgKyB2X3NoYWRjb29yZC54eXogLyB2X3NoYWRjb29yZC53ICogLjU7JyxcblxuXHRcdFx0XHQgICAgJ2lmKGRlcHRoQ29vcmQueiA8PSAxLiAmJiBkZXB0aENvb3JkLnogPj0gMC4pIHsnLFxuXHRcdFx0XHRcdFx0J2Zsb2F0IGJpYXMgPSBtYXgoLjA1ICogKDEuIC0gbkRvdEwpLCAuMDA1KTsnLFxuXHRcdFx0XHRcdFx0J3ZlYzIgdGV4ZWxTaXplID0gMS4gLyB1X3NoYWRvd190ZXh0dXJlX3NpemU7Jyxcblx0XHRcdFx0XHQgICAgJ2ZvcihpbnQgeCA9IC0xOyB4IDw9IDE7ICsreCkgeycsXG5cdFx0XHRcdFx0ICAgICAgICAnZm9yKGludCB5ID0gLTE7IHkgPD0gMTsgKyt5KSAgeycsXG5cdFx0XHRcdFx0XHRcdFx0J3ZlYzQgc2hhZG93TWFwQ29sb3IgPSB0ZXh0dXJlMkQodV9zaGFkb3dfZGVwdGhfc2FtcGxlLCBkZXB0aENvb3JkLnh5ICsgdmVjMih4LCB5KSAqIHRleGVsU2l6ZSk7Jyxcblx0XHRcdFx0XHRcdFx0XHQnZmxvYXQgelNoYWRvd01hcCA9IHNoYWRvd01hcERlcHRoKHNoYWRvd01hcENvbG9yKTsnLFxuXHRcdFx0XHRcdCAgICAgICAgICAgICdzaGFkb3cgKz0gelNoYWRvd01hcCArIGJpYXMgPCBkZXB0aENvb3JkLnogPyAxLiA6IDAuOycsXG5cdFx0XHRcdFx0ICAgICAgICAnfScsXG5cdFx0XHRcdFx0ICAgICd9Jyxcblx0XHRcdFx0XHQgICAgJ3NoYWRvdyAvPSA5LjsnLFxuXHRcdFx0XHRcdCAgICAnc2hhZG93ICo9IHVfc2hhZG93X2ludGVuc2l0eTsnLFxuXHRcdFx0XHRcdCd9JyxcbiAgICBcdFx0XHQnfScsXG5cbiAgICBcdFx0XHQnaWYoIXVfZmxhdF9jb2xvcikgeycsXG5cdFx0XHRcdFx0J3ZlYzMgdmlld0RpciA9IG5vcm1hbGl6ZSgtdl92aWV3cG9zKTsnLFxuXHRcdFx0XHRcdCd2ZWMzIGhhbGZEaXIgPSBub3JtYWxpemUobGlnaHREaXIgKyB2aWV3RGlyKTsnLFxuXHRcdFx0XHRcdCdmbG9hdCBuRG90SFYgPSBtYXgoZG90KGhhbGZEaXIsIG5vcm1hbCksIDAuKTsnLFxuXHRcdFx0XHRcdCd2ZWMzIHNwZWN1bGFyID0gdV9tYXRlcmlhbF9zcGVjdWxhcl9jb2xvciAqIHVfbGlnaHRfc3BlY3VsYXJfY29sb3I7Jyxcblx0XHRcdFx0XHQnY29sb3IqPW1heChuRG90TCwgMC4pOycsXG5cdFx0XHRcdFx0J2NvbG9yKz1zcGVjdWxhciAqIHBvdyhuRG90SFYsIHVfbWF0ZXJpYWxfc2hpbmluZXNzKTsnLFxuXHRcdFx0XHQnfScsXG5cblx0XHRcdFx0Ly8gc2V0IHRoZSBjb2xvclxuXHRcdFx0XHQnY29sb3IgPSAoMS4tc2hhZG93KSpjb2xvcit2X2FtYmllbnQ7Jyxcblx0XHRcdCd9JyxcblxuXHRcdFx0J2dsX0ZyYWdDb2xvciA9IHZlYzQocG93KGNvbG9yLCB2ZWMzKHVfZ2FtbWFfaW52ZXJ0ZWQpKSwgdV9tYXRlcmlhbF9hbHBoYSk7JyxcblxuXHRcdFx0J2lmKHVfZm9nX21vZGUgIT0gMCl7Jyxcblx0XHRcdFx0J2Zsb2F0IGZvZ0Nvb3JkID0gMS4tY2xhbXAoKHVfZm9nX2VuZCAtIGdsX0ZyYWdDb29yZC56L2dsX0ZyYWdDb29yZC53KSAvICh1X2ZvZ19lbmQgLSB1X2ZvZ19zdGFydCksIDAuLCAxLik7Jyxcblx0XHRcdFx0J2Zsb2F0IGZvZ0ZhY3RvciA9IDEuOycsXG5cblx0XHRcdFx0Ly8gbGluZWFyIGVxdWF0aW9uXG5cdFx0XHRcdCdpZih1X2ZvZ19tb2RlID09IDEpeycsXG5cdFx0XHRcdFx0J2ZvZ0ZhY3RvciA9IDEuLWZvZ0Nvb3JkOycsXG5cdFx0XHRcdCd9Jyxcblx0XHRcdFx0Ly8gZXhwIGVxdWF0aW9uXG5cdFx0XHRcdCdlbHNlIGlmKHVfZm9nX21vZGUgPT0gMikgeycsXG5cdFx0XHRcdFx0J2ZvZ0ZhY3RvciA9IGNsYW1wKGV4cCgtdV9mb2dfZGVuc2l0eSpmb2dDb29yZCksIDAuLCAxLik7Jyxcblx0XHRcdFx0J30nLFxuXHRcdFx0XHQvLyBleHAyIGVxdWF0aW9uXG5cdFx0XHRcdCdlbHNlIGlmKHVfZm9nX21vZGUgPT0gMykgeycsXG5cdFx0XHRcdFx0J2ZvZ0ZhY3RvciA9IGNsYW1wKGV4cCgtcG93KHVfZm9nX2RlbnNpdHkqZm9nQ29vcmQsIDIuKSksIDAuLCAxLik7Jyxcblx0XHRcdFx0J30nLFxuXHRcdFx0XHQnZ2xfRnJhZ0NvbG9yID0gbWl4KHZlYzQodV9mb2dfY29sb3IsIDEuKSwgZ2xfRnJhZ0NvbG9yLCBmb2dGYWN0b3IpOycsXG5cblx0XHRcdFx0Ly8gZm9yIGRlYnVnZ2luZ1xuXHRcdFx0XHQvLyAnZ2xfRnJhZ0NvbG9yID0gdmVjNCh2ZWMzKGZvZ0ZhY3RvciksIDEuKTsnLFxuXHRcdFx0J30nLFxuXHRcdCd9J1xuXHRcdF0uam9pbignJyk7XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuZ2V0U2hhZGVyRnJvbVN0cihnbCwgZ2wuRlJBR01FTlRfU0hBREVSLCBzYik7XG5cdH07XG5cdF8uZW5hYmxlQXR0cmlic0FycmF5ID0gZnVuY3Rpb24oZ2wpIHtcblx0XHRfc3VwZXIuZW5hYmxlQXR0cmlic0FycmF5LmNhbGwodGhpcywgZ2wpO1xuXHRcdGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMudmVydGV4Tm9ybWFsQXR0cmlidXRlKTtcblx0fTtcblx0Xy5kaXNhYmxlQXR0cmlic0FycmF5ID0gZnVuY3Rpb24oZ2wpIHtcblx0XHRfc3VwZXIuZGlzYWJsZUF0dHJpYnNBcnJheS5jYWxsKHRoaXMsIGdsKTtcblx0XHRnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy52ZXJ0ZXhOb3JtYWxBdHRyaWJ1dGUpO1xuXHR9O1xuXHRfLnNldE1hdHJpeFVuaWZvcm1zID0gZnVuY3Rpb24oZ2wsIG1vZGVsTWF0cml4KSB7XG5cdFx0aWYobW9kZWxNYXRyaXggPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5zZXRNb2RlbFZpZXdNYXRyaXgoZ2wsIGdsLm1vZGVsVmlld01hdHJpeCk7XG5cdFx0XHR0aGlzLnNldExpZ2h0TW9kZWxWaWV3TWF0cml4KGdsLCBnbC5saWdodFZpZXdNYXRyaXgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgbXZNYXRyaXggPSBtNC5tdWx0aXBseShnbC5tb2RlbFZpZXdNYXRyaXgsIG1vZGVsTWF0cml4LCBbXSk7XG5cdFx0XHR2YXIgbGlnaHRNb2RlbFZpZXdNYXRyaXggPSBtNC5tdWx0aXBseShnbC5saWdodFZpZXdNYXRyaXgsIG1vZGVsTWF0cml4LCBbXSk7XG5cblx0XHRcdHRoaXMuc2V0TW9kZWxWaWV3TWF0cml4KGdsLCBtdk1hdHJpeCk7XG5cdFx0XHR0aGlzLnNldExpZ2h0TW9kZWxWaWV3TWF0cml4KGdsLCBsaWdodE1vZGVsVmlld01hdHJpeCk7XG5cdFx0fVxuXHR9O1xuXHRfLnNldE1vZGVsVmlld01hdHJpeCA9IGZ1bmN0aW9uKGdsLCBtdk1hdHJpeCkge1xuXHRcdF9zdXBlci5zZXRNb2RlbFZpZXdNYXRyaXguY2FsbCh0aGlzLCBnbCwgbXZNYXRyaXgpO1xuXHRcdC8vIGNyZWF0ZSB0aGUgbm9ybWFsIG1hdHJpeCBhbmQgcHVzaCBpdCB0byB0aGUgZ3JhcGhpY3MgY2FyZFxuXHRcdHZhciBub3JtYWxNYXRyaXggPSBtMy50cmFuc3Bvc2UobTQudG9JbnZlcnNlTWF0Myhtdk1hdHJpeCwgW10pKTtcblx0XHRnbC51bmlmb3JtTWF0cml4M2Z2KHRoaXMubm9ybWFsTWF0cml4VW5pZm9ybSwgZmFsc2UsIG5vcm1hbE1hdHJpeCk7XG5cdH07XG5cdF8uc2V0RmxhdENvbG9yID0gZnVuY3Rpb24oZ2wsIGVuYWJsZWQpIHtcblx0XHRnbC51bmlmb3JtMWkodGhpcy5mbGF0Q29sb3JVbmlmb3JtLCBlbmFibGVkKTtcblx0fTtcblx0Xy5zZXRTaGFkb3cgPSBmdW5jdGlvbihnbCwgZW5hYmxlZCkge1xuXHRcdGdsLnVuaWZvcm0xaSh0aGlzLnNoYWRvd1VuaWZvcm0sIGVuYWJsZWQpO1xuXHR9O1xuXHRfLnNldEZvZ01vZGUgPSBmdW5jdGlvbihnbCwgbW9kZSkge1xuXHRcdGdsLnVuaWZvcm0xaSh0aGlzLmZvZ01vZGVVbmlmb3JtLCBtb2RlKTtcblx0fTtcblx0Xy5zZXRGb2dDb2xvciA9IGZ1bmN0aW9uKGdsLCBjb2xvcikge1xuXHRcdGdsLnVuaWZvcm0zZnYodGhpcy5mb2dDb2xvclVuaWZvcm0sIGNvbG9yKTtcblx0fTtcblx0Xy5zZXRGb2dTdGFydCA9IGZ1bmN0aW9uKGdsLCBmb2dTdGFydCkge1xuXHRcdGdsLnVuaWZvcm0xZih0aGlzLmZvZ1N0YXJ0VW5pZm9ybSwgZm9nU3RhcnQpO1xuXHR9O1xuXHRfLnNldEZvZ0VuZCA9IGZ1bmN0aW9uKGdsLCBmb2dFbmQpIHtcblx0XHRnbC51bmlmb3JtMWYodGhpcy5mb2dFbmRVbmlmb3JtLCBmb2dFbmQpO1xuXHR9O1xuXHRfLnNldEZvZ0RlbnNpdHkgPSBmdW5jdGlvbihnbCwgZGVuc2l0eSkge1xuXHRcdGdsLnVuaWZvcm0xZih0aGlzLmZvZ0RlbnNpdHlVbmlmb3JtLCBkZW5zaXR5KTtcblx0fTtcblx0Xy5zZXRNYXRlcmlhbEFtYmllbnRDb2xvciA9IGZ1bmN0aW9uKGdsLCBhbWJpZW50KSB7XG5cdFx0Z2wudW5pZm9ybTNmdih0aGlzLm1hdGVyaWFsQW1iaWVudENvbG9yVW5pZm9ybSwgYW1iaWVudCk7XG5cdH07XG5cdF8uc2V0TWF0ZXJpYWxEaWZmdXNlQ29sb3IgPSBmdW5jdGlvbihnbCwgZGlmZnVzZSkge1xuXHRcdGdsLnVuaWZvcm0zZnYodGhpcy5tYXRlcmlhbERpZmZ1c2VDb2xvclVuaWZvcm0sIGRpZmZ1c2UpO1xuXHR9O1xuXHRfLnNldE1hdGVyaWFsU3BlY3VsYXJDb2xvciA9IGZ1bmN0aW9uKGdsLCBzcGVjdWxhcikge1xuXHRcdGdsLnVuaWZvcm0zZnYodGhpcy5tYXRlcmlhbFNwZWN1bGFyQ29sb3JVbmlmb3JtLCBzcGVjdWxhcik7XG5cdH07XG5cdF8uc2V0TWF0ZXJpYWxTaGluaW5lc3MgPSBmdW5jdGlvbihnbCwgc2hpbmluZXNzKSB7XG5cdFx0Z2wudW5pZm9ybTFmKHRoaXMubWF0ZXJpYWxTaGluaW5lc3NVbmlmb3JtLCBzaGluaW5lc3MpO1xuXHR9O1xuXHRfLnNldE1hdGVyaWFsQWxwaGEgPSBmdW5jdGlvbihnbCwgYWxwaGEpIHtcblx0XHRnbC51bmlmb3JtMWYodGhpcy5tYXRlcmlhbEFscGhhVW5pZm9ybSwgYWxwaGEpO1xuXHR9O1xuXHRfLnNldExpZ2h0RGlmZnVzZUNvbG9yID0gZnVuY3Rpb24oZ2wsIGRpZmZ1c2UpIHtcblx0XHRnbC51bmlmb3JtM2Z2KHRoaXMubGlnaHREaWZmdXNlQ29sb3JVbmlmb3JtLCBkaWZmdXNlKTtcblx0fTtcblx0Xy5zZXRMaWdodFNwZWN1bGFyQ29sb3IgPSBmdW5jdGlvbihnbCwgc3BlY3VsYXIpIHtcblx0XHRnbC51bmlmb3JtM2Z2KHRoaXMubGlnaHRTcGVjdWxhckNvbG9yVW5pZm9ybSwgc3BlY3VsYXIpO1xuXHR9O1xuXHRfLnNldExpZ2h0RGlyZWN0aW9uID0gZnVuY3Rpb24oZ2wsIGRpcmVjdGlvbikge1xuXHRcdGdsLnVuaWZvcm0zZnYodGhpcy5saWdodERpcmVjdGlvblVuaWZvcm0sIGRpcmVjdGlvbik7XG5cdH07XG5cdF8uc2V0TGlnaHRNb2RlbFZpZXdNYXRyaXggPSBmdW5jdGlvbihnbCwgbXZNYXRyaXgpIHtcblx0XHRnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMubGlnaHRNb2RlbFZpZXdNYXRyaXhVbmlmb3JtLCBmYWxzZSwgbXZNYXRyaXgpO1xuXHR9O1xuXHRfLnNldExpZ2h0UHJvamVjdGlvbk1hdHJpeCA9IGZ1bmN0aW9uKGdsLCBtYXRyaXgpIHtcblx0XHRnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMubGlnaHRQcm9qZWN0aW9uTWF0cml4VW5pZm9ybSwgZmFsc2UsIG1hdHJpeCk7XG5cdH07XG5cdF8uc2V0U2hhZG93VGV4dHVyZVNpemUgPSBmdW5jdGlvbihnbCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdGdsLnVuaWZvcm0yZih0aGlzLnNoYWRvd1RleHR1cmVTaXplVW5pZm9ybSwgd2lkdGgsIGhlaWdodCk7XG5cdH07XG5cdF8uc2V0U2hhZG93SW50ZW5zaXR5ID0gZnVuY3Rpb24oZ2wsIGludGVuc2l0eSkge1xuXHRcdGdsLnVuaWZvcm0xZih0aGlzLnNoYWRvd0ludGVuc2l0eVVuaWZvcm0sIGludGVuc2l0eSk7XG5cdH07XG5cdF8uc2V0R2FtbWFDb3JyZWN0aW9uID0gZnVuY3Rpb24oZ2wsIGdhbW1hQ29ycmVjdGlvbikge1xuXHQgICAgLy8gbWFrZSBzdXJlIGdhbW1hIGNvcnJlY3Rpb24gaXMgaW52ZXJ0ZWQgaGVyZSBhcyBpdCBpcyBtb3JlIGVmZmljaWVudCBpbiB0aGUgc2hhZGVyXG5cdFx0Z2wudW5pZm9ybTFmKHRoaXMuZ2FtbWFDb3JyZWN0aW9uVW5pZm9ybSwgMS4wL2dhbW1hQ29ycmVjdGlvbik7XG5cdH07XG5cdF8uc2V0UG9pbnRTaXplID0gZnVuY3Rpb24oZ2wsIHBvaW50U2l6ZSkge1xuXHRcdGdsLnVuaWZvcm0xZih0aGlzLnBvaW50U2l6ZVVuaWZvcm0sIHBvaW50U2l6ZSk7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgQ2hlbURvb2RsZS5saWIubWF0MywgQ2hlbURvb2RsZS5saWIubWF0NCwgZG9jdW1lbnQpO1xuXG4oZnVuY3Rpb24oZDMsIG0zLCBtNCwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0ZDMuUGlja1NoYWRlciA9IGZ1bmN0aW9uKCkge1xuXHR9O1xuXHR2YXIgX3N1cGVyID0gZDMuX1NoYWRlci5wcm90b3R5cGU7XG5cdHZhciBfID0gZDMuUGlja1NoYWRlci5wcm90b3R5cGUgPSBuZXcgZDMuX1NoYWRlcigpO1xuXHRfLmluaXRVbmlmb3JtTG9jYXRpb25zID0gZnVuY3Rpb24oZ2wpIHtcblx0XHQvLyBhc3NpZ24gdW5pZm9ybSBwcm9wZXJ0aWVzXG5cdFx0X3N1cGVyLmluaXRVbmlmb3JtTG9jYXRpb25zLmNhbGwodGhpcywgZ2wpO1xuXHRcdHRoaXMubWF0ZXJpYWxEaWZmdXNlQ29sb3JVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X21hdGVyaWFsX2RpZmZ1c2VfY29sb3InKTtcblx0fTtcblx0Xy5sb2FkRGVmYXVsdFZlcnRleFNoYWRlciA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIHNiID0gW1xuXHRcdCdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnLFxuXHRcdFxuXHRcdC8vIGF0dHJpYnV0ZXMgc2V0IHdoZW4gcmVuZGVyaW5nIG9iamVjdHNcblx0XHQnYXR0cmlidXRlIHZlYzMgYV92ZXJ0ZXhfcG9zaXRpb247JyxcblxuXHRcdC8vIG1hdHJpY2VzIHNldCBieSBnbC5zZXRNYXRyaXhVbmlmb3Jtc1xuXHRcdCd1bmlmb3JtIG1hdDQgdV9tb2RlbF92aWV3X21hdHJpeDsnLFxuXHRcdCd1bmlmb3JtIG1hdDQgdV9wcm9qZWN0aW9uX21hdHJpeDsnLFxuXG5cdFx0J3ZvaWQgbWFpbigpIHsnLFxuXHRcdFx0XG5cdFx0XHQnZ2xfUG9zaXRpb24gPSB1X3Byb2plY3Rpb25fbWF0cml4ICogdV9tb2RlbF92aWV3X21hdHJpeCAqIHZlYzQoYV92ZXJ0ZXhfcG9zaXRpb24sIDEuKTsnLFxuXG5cdFx0XHQvLyBqdXN0IHRvIG1ha2Ugc3VyZSB0aGUgdyBpcyAxXG5cdFx0XHQnZ2xfUG9zaXRpb24gLz0gZ2xfUG9zaXRpb24udzsnLFxuXG5cdFx0J30nXS5qb2luKCcnKTtcblxuXHRcdHJldHVybiB0aGlzLmdldFNoYWRlckZyb21TdHIoZ2wsIGdsLlZFUlRFWF9TSEFERVIsIHNiKTtcblx0fTtcblx0Xy5sb2FkRGVmYXVsdEZyYWdtZW50U2hhZGVyID0gZnVuY3Rpb24oZ2wpIHtcblx0XHR2YXIgc2IgPSBbXG5cdFx0Ly8gc2V0IG1hY3JvIGZvciBkZXB0aCBtbWFwIHRleHR1cmVcblx0XHRnbC5kZXB0aFRleHR1cmVFeHQgPyAnI2RlZmluZSBDV0NfREVQVEhfVEVYXFxuJyA6ICcnLFxuXHRcdFxuXHRcdC8vIHNldCBmbG9hdCBwcmVjaXNpb25cblx0XHQncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyxcblxuXHRcdCd1bmlmb3JtIHZlYzMgdV9tYXRlcmlhbF9kaWZmdXNlX2NvbG9yOycsXG5cdFx0XHRcdFx0XG5cdFx0J3ZvaWQgbWFpbih2b2lkKSB7Jyxcblx0XHRcdCdnbF9GcmFnQ29sb3IgPSB2ZWM0KHVfbWF0ZXJpYWxfZGlmZnVzZV9jb2xvciwgMS4pOycsXG5cdFx0J30nXG5cdFx0XS5qb2luKCcnKTtcblxuXHRcdHJldHVybiB0aGlzLmdldFNoYWRlckZyb21TdHIoZ2wsIGdsLkZSQUdNRU5UX1NIQURFUiwgc2IpO1xuXHR9O1xuXHRfLnNldE1hdGVyaWFsRGlmZnVzZUNvbG9yID0gZnVuY3Rpb24oZ2wsIGRpZmZ1c2UpIHtcblx0XHRnbC51bmlmb3JtM2Z2KHRoaXMubWF0ZXJpYWxEaWZmdXNlQ29sb3JVbmlmb3JtLCBkaWZmdXNlKTtcblx0fTtcblxufSkoQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLmQzLCBDaGVtRG9vZGxlLmxpYi5tYXQzLCBDaGVtRG9vZGxlLmxpYi5tYXQ0LCBkb2N1bWVudCk7XG5cbihmdW5jdGlvbihkMywgbTMsIG00LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRkMy5Qb3NpdGlvblNoYWRlciA9IGZ1bmN0aW9uKCkge1xuXHR9O1xuXHR2YXIgX3N1cGVyID0gZDMuX1NoYWRlci5wcm90b3R5cGU7XG5cdHZhciBfID0gZDMuUG9zaXRpb25TaGFkZXIucHJvdG90eXBlID0gbmV3IGQzLl9TaGFkZXIoKTtcblxuXHRfLmxvYWREZWZhdWx0VmVydGV4U2hhZGVyID0gZnVuY3Rpb24oZ2wpIHtcblx0XHR2YXIgc2IgPSBbXG5cdFx0J3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycsXG5cdFx0XG5cdFx0Ly8gYXR0cmlidXRlcyBzZXQgd2hlbiByZW5kZXJpbmcgb2JqZWN0c1xuXHRcdCdhdHRyaWJ1dGUgdmVjMyBhX3ZlcnRleF9wb3NpdGlvbjsnLFxuXG5cdFx0Ly8gbWF0cmljZXMgc2V0IGJ5IGdsLnNldE1hdHJpeFVuaWZvcm1zXG5cdFx0J3VuaWZvcm0gbWF0NCB1X21vZGVsX3ZpZXdfbWF0cml4OycsXG5cdFx0J3VuaWZvcm0gbWF0NCB1X3Byb2plY3Rpb25fbWF0cml4OycsXG5cblx0XHQndmFyeWluZyB2ZWM0IHZfcG9zaXRpb247JyxcblxuXHRcdCd2b2lkIG1haW4oKSB7Jyxcblx0XHRcdCd2ZWM0IHZpZXdQb3MgPSB1X21vZGVsX3ZpZXdfbWF0cml4ICogdmVjNChhX3ZlcnRleF9wb3NpdGlvbiwgMS4pOycsXG5cblx0XHRcdCdnbF9Qb3NpdGlvbiA9IHVfcHJvamVjdGlvbl9tYXRyaXggKiB2aWV3UG9zOycsXG5cblx0XHRcdCd2X3Bvc2l0aW9uID0gdmlld1BvcyAvIHZpZXdQb3MudzsnLFxuXG5cdFx0J30nXS5qb2luKCcnKTtcblx0XHRcblx0XHRyZXR1cm4gdGhpcy5nZXRTaGFkZXJGcm9tU3RyKGdsLCBnbC5WRVJURVhfU0hBREVSLCBzYik7XG5cdH07XG5cdF8ubG9hZERlZmF1bHRGcmFnbWVudFNoYWRlciA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIHNiID0gW1xuXHRcdC8vIHNldCBmbG9hdCBwcmVjaXNpb25cblx0XHQncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyxcblxuXHRcdCd2YXJ5aW5nIHZlYzQgdl9wb3NpdGlvbjsnLFxuXG5cdFx0J3ZvaWQgbWFpbih2b2lkKSB7Jyxcblx0XHRcdCdnbF9GcmFnQ29sb3IgPSB2X3Bvc2l0aW9uOycsXG5cdFx0J30nXS5qb2luKCcnKTtcblx0XHRcblx0XHRyZXR1cm4gdGhpcy5nZXRTaGFkZXJGcm9tU3RyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIHNiKTtcblx0fTtcblxufSkoQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLmQzLCBDaGVtRG9vZGxlLmxpYi5tYXQzLCBDaGVtRG9vZGxlLmxpYi5tYXQ0LCBkb2N1bWVudCk7XG5cbihmdW5jdGlvbihkMywgbTMsIG00LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRkMy5RdWFkU2hhZGVyID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfID0gZDMuUXVhZFNoYWRlci5wcm90b3R5cGUgPSBuZXcgZDMuX1NoYWRlcigpO1xuXHRfLmxvYWREZWZhdWx0VmVydGV4U2hhZGVyID0gZnVuY3Rpb24oZ2wpIHtcblx0XHR2YXIgc2IgPSBbXG5cdFx0J3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycsXG5cdFx0XG5cdFx0Ly8gYXR0cmlidXRlcyBzZXQgd2hlbiByZW5kZXJpbmcgb2JqZWN0c1xuXHRcdCdhdHRyaWJ1dGUgdmVjMyBhX3ZlcnRleF9wb3NpdGlvbjsnLFxuXG4gICAgXHQndmFyeWluZyB2ZWMyIHZfdGV4Y29vcmQ7JyxcblxuXHRcdCd2b2lkIG1haW4oKSB7Jyxcblx0XHRcdCdnbF9Qb3NpdGlvbiA9IHZlYzQoYV92ZXJ0ZXhfcG9zaXRpb24sIDEuKTsnLFxuICAgICAgICBcdCd2X3RleGNvb3JkID0gYV92ZXJ0ZXhfcG9zaXRpb24ueHkgKiAuNSArIC41OycsXG5cdFx0J30nXS5qb2luKCcnKTtcblxuXHRcdHJldHVybiB0aGlzLmdldFNoYWRlckZyb21TdHIoZ2wsIGdsLlZFUlRFWF9TSEFERVIsIHNiKTtcblx0fTtcblx0Xy5sb2FkRGVmYXVsdEZyYWdtZW50U2hhZGVyID0gZnVuY3Rpb24oZ2wpIHtcblx0XHR2YXIgc2IgPSBbXG5cblx0XHQvLyBzZXQgZmxvYXQgcHJlY2lzaW9uXG5cdFx0J3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycsXG5cblx0ICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1X2ltYWdlOycsXG5cbiAgICBcdCd2YXJ5aW5nIHZlYzIgdl90ZXhjb29yZDsnLFxuXHQgICAgXG5cdCAgICAndm9pZCBtYWluKCkgeycsXG5cdCAgICAgICAgJ2dsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCh1X2ltYWdlLCB2X3RleGNvb3JkKTsnLFxuXHQgICAgJ30nXS5qb2luKCcnKTtcblxuXHRcdHJldHVybiB0aGlzLmdldFNoYWRlckZyb21TdHIoZ2wsIGdsLkZSQUdNRU5UX1NIQURFUiwgc2IpO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDMsIENoZW1Eb29kbGUubGliLm1hdDMsIENoZW1Eb29kbGUubGliLm1hdDQsIGRvY3VtZW50KTtcblxuKGZ1bmN0aW9uKHN0cnVjdHVyZXMsIGQzLCBFTEVNRU5ULCBNYXJjaGluZ0N1YmVzLCB2MywgbSwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBUcmlhbmdsZSA9IGZ1bmN0aW9uKGkxLCBpMiwgaTMpe1xuXHRcdHRoaXMuaTEgPSBpMTtcblx0XHR0aGlzLmkyID0gaTI7XG5cdFx0dGhpcy5pMyA9IGkzO1xuXHR9O1xuXHRcblx0ZnVuY3Rpb24gZ2V0UmFuZ2UoYXRvbXMsIHByb2JlUmFkaXVzKSB7XG5cdFx0dmFyIHIgPSBbSW5maW5pdHksIC1JbmZpbml0eSwgSW5maW5pdHksIC1JbmZpbml0eSwgSW5maW5pdHksIC1JbmZpbml0eV07XG5cdFx0dmFyIGFkZCA9IHByb2JlUmFkaXVzICsgMjtcblx0XHRmb3IgKHZhciBpID0gMCwgaWkgPSBhdG9tcy5sZW5ndGg7IGk8aWk7IGkrKykge1xuXHRcdFx0dmFyIGEgPSBhdG9tc1tpXTtcblx0XHRcdHJbMF0gPSBtLm1pbihyWzBdLCBhLnggLSBhZGQpO1xuXHRcdFx0clsxXSA9IG0ubWF4KHJbMV0sIGEueCArIGFkZCk7XG5cdFx0XHRyWzJdID0gbS5taW4oclsyXSwgYS55IC0gYWRkKTtcblx0XHRcdHJbM10gPSBtLm1heChyWzNdLCBhLnkgKyBhZGQpO1xuXHRcdFx0cls0XSA9IG0ubWluKHJbNF0sIGEueiAtIGFkZCk7XG5cdFx0XHRyWzVdID0gbS5tYXgocls1XSwgYS56ICsgYWRkKTtcblx0XHR9XG5cdFx0cmV0dXJuIHI7XG5cdH07XG5cdFxuXHRmdW5jdGlvbiBhZGRQb2ludChwLCBwb2ludHMsIHhzLCB5cywgenMsIHN0ZXApIHtcblx0XHQvLyB0cmFuc2Zvcm0gYmFjayBpbnRvIHJlYWwgc3BhY2Vcblx0XHR2YXIgcHggPSBwWzBdICogc3RlcCArIHhzIC0gc3RlcDtcblx0XHR2YXIgcHkgPSBwWzFdICogc3RlcCArIHlzIC0gc3RlcDtcblx0XHR2YXIgcHogPSBwWzJdICogc3RlcCArIHpzIC0gc3RlcDtcblx0XHQvLyBmaW5kIGFueSBwcmV2aW91cyBtYXRjaFxuXHRcdHZhciBpbmRleCA9IC0xO1xuXHRcdHZhciBjdXRvZmYgPSAxRS0zO1xuXHRcdGZvciAodmFyIGogPSAwLCBqaiA9IHBvaW50cy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHR2YXIgcGogPSBwb2ludHNbal07XG5cdFx0XHRpZiAobS5hYnMocGoueCAtIHB4KSA8IGN1dG9mZiAmJiBtLmFicyhwai55IC0gcHkpIDwgY3V0b2ZmICYmIG0uYWJzKHBqLnogLSBweikgPCBjdXRvZmYpIHtcblx0XHRcdFx0aW5kZXggPSBqO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGluZGV4ID09IC0xKSB7XG5cdFx0XHRpbmRleCA9IHBvaW50cy5sZW5ndGg7XG5cdFx0XHRwb2ludHMucHVzaChuZXcgc3RydWN0dXJlcy5BdG9tKCdDJywgcHgsIHB5LCBweikpO1xuXHRcdH1cblx0XHRyZXR1cm4gaW5kZXg7XG5cdH07XG5cdFxuXHRkMy5fU3VyZmFjZSA9IGZ1bmN0aW9uKCkge1xuXHR9O1xuXHR2YXIgXyA9IGQzLl9TdXJmYWNlLnByb3RvdHlwZSA9IG5ldyBkMy5fTWVzaCgpO1xuXHRfLmdlbmVyYXRlID0gZnVuY3Rpb24oeGRpZiwgeWRpZiwgemRpZiwgc3RlcCwgcmFuZ2UsIHhzdGVwcywgeXN0ZXBzLCB6c3RlcHMpe1xuXHRcdC8vIGdlbmVyYXRlIHRoZSBmdW5jdGlvblxuXHRcdHZhciB2YWxzID0gW107XG5cdFx0dmFyIHogPSByYW5nZVs0XSAtIHN0ZXA7XG5cdFx0Zm9yICh2YXIgayA9IDA7IGsgPCB6c3RlcHM7IGsrKykge1xuXHRcdFx0dmFyIHkgPSByYW5nZVsyXSAtIHN0ZXA7XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IHlzdGVwczsgaisrKSB7XG5cdFx0XHRcdHZhciB4ID0gcmFuZ2VbMF0gLSBzdGVwO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHhzdGVwczsgaSsrKSB7XG5cdFx0XHRcdFx0dmFscy5wdXNoKHRoaXMuY2FsY3VsYXRlKHgsIHksIHopKTtcblx0XHRcdFx0XHR4ICs9IHN0ZXA7XG5cdFx0XHRcdH1cblx0XHRcdFx0eSArPSBzdGVwO1xuXHRcdFx0fVxuXHRcdFx0eiArPSBzdGVwO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFscztcblx0fTtcblx0Xy5idWlsZCA9IGZ1bmN0aW9uKGF0b21zLCBwcm9iZVJhZGl1cywgcmVzb2x1dGlvbikge1xuXHRcdHZhciBwb3NpdGlvbkRhdGEgPSBbXTtcblx0XHR2YXIgbm9ybWFsRGF0YSA9IFtdO1xuXHRcdHZhciBpbmRleERhdGEgPSBbXTtcblxuXHRcdC8vIGNhbGN1bGF0ZSB0aGUgcmFuZ2Ugb2YgdGhlIGZ1bmN0aW9uXG5cdFx0dmFyIHJhbmdlID0gZ2V0UmFuZ2UoYXRvbXMsIHByb2JlUmFkaXVzKTtcblx0XHR2YXIgeGRpZiA9IHJhbmdlWzFdIC0gcmFuZ2VbMF07XG5cdFx0dmFyIHlkaWYgPSByYW5nZVszXSAtIHJhbmdlWzJdO1xuXHRcdHZhciB6ZGlmID0gcmFuZ2VbNV0gLSByYW5nZVs0XTtcblx0XHR2YXIgc3RlcCA9IG0ubWluKHhkaWYsIG0ubWluKHlkaWYsIHpkaWYpKSAvIHJlc29sdXRpb247XG5cdFx0XG5cdFx0Ly8gZ2VuZXJhdGUgdGhlIGZ1bmN0aW9uXG5cdFx0dmFyIHhzdGVwcyA9IDIgKyBtLmNlaWwoeGRpZiAvIHN0ZXApO1xuXHRcdHZhciB5c3RlcHMgPSAyICsgbS5jZWlsKHlkaWYgLyBzdGVwKTtcblx0XHR2YXIgenN0ZXBzID0gMiArIG0uY2VpbCh6ZGlmIC8gc3RlcCk7XG5cdFx0dmFyIHZhbHMgPSB0aGlzLmdlbmVyYXRlKHhkaWYsIHlkaWYsIHpkaWYsIHN0ZXAsIHJhbmdlLCB4c3RlcHMsIHlzdGVwcywgenN0ZXBzKTtcblx0XHRcblx0XHQvLyBtYXJjaGluZyBjdWJlc1xuXHRcdHZhciBtZXNoID0gTWFyY2hpbmdDdWJlcyh2YWxzLCBbeHN0ZXBzLCB5c3RlcHMsIHpzdGVwc10pO1xuXHRcdFxuXHRcdC8vIGJ1aWxkIHN1cmZhY2Vcblx0XHR2YXIgcHMgPSBbXTtcblx0XHR2YXIgaXMgPSBbXTtcblx0XHRmb3IgKHZhciBpID0gMCwgaWkgPSBtZXNoLnZlcnRpY2VzLmxlbmd0aDsgaTxpaTsgaSsrKSB7XG5cdFx0XHRpcy5wdXNoKGFkZFBvaW50KG1lc2gudmVydGljZXNbaV0sIHBzLCByYW5nZVswXSwgcmFuZ2VbMl0sIHJhbmdlWzRdLCBzdGVwKSk7XG5cdFx0fVxuXHRcdFxuXHRcdC8vIHRyaWFuZ2xlc1xuXHRcdHZhciB0cmlhbmdsZXMgPSBbXTtcblx0XHRmb3IgKHZhciBpID0gMCwgaWkgPSBtZXNoLmZhY2VzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBmID0gbWVzaC5mYWNlc1tpXTtcblx0XHRcdHZhciBpMSA9IGlzW2ZbMF1dO1xuXHRcdFx0dmFyIGkyID0gaXNbZlsxXV07XG5cdFx0XHR2YXIgaTMgPSBpc1tmWzJdXTtcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKG5ldyBUcmlhbmdsZShpMSwgaTIsIGkzKSk7XG5cdFx0XHRpbmRleERhdGEucHVzaChpMSwgaTIsIGkzKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gc21vb3RoaW5nIC0gMSBwYXNzXG5cdFx0dmFyIHNhdmVkQ29ubmVjdGlvbnMgPSBbXTtcblx0XHRmb3IgKHZhciBpID0gMCwgaWkgPSBwcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgY29ubmVjdGlvbnMgPSBbXTtcblx0XHRcdGZvciAodmFyIGogPSAwLCBqaiA9IHRyaWFuZ2xlcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdHZhciB0ID0gdHJpYW5nbGVzW2pdO1xuXHRcdFx0XHRpZiAodC5pMT09PWkgfHwgdC5pMj09PWkgfHwgdC5pMz09PWkpIHtcblx0XHRcdFx0XHRpZiAodC5pMSAhPSBpICYmIGNvbm5lY3Rpb25zLmluZGV4T2YodC5pMSk9PT0tMSkge1xuXHRcdFx0XHRcdFx0Y29ubmVjdGlvbnMucHVzaCh0LmkxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHQuaTIgIT0gaSAmJiBjb25uZWN0aW9ucy5pbmRleE9mKHQuaTIpPT09LTEpIHtcblx0XHRcdFx0XHRcdGNvbm5lY3Rpb25zLnB1c2godC5pMik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh0LmkzICE9IGkgJiYgY29ubmVjdGlvbnMuaW5kZXhPZih0LmkzKT09PS0xKSB7XG5cdFx0XHRcdFx0XHRjb25uZWN0aW9ucy5wdXNoKHQuaTMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0c2F2ZWRDb25uZWN0aW9ucy5wdXNoKGNvbm5lY3Rpb25zKTtcblx0XHR9XG5cdFx0dmFyIHRtcCA9IFtdO1xuXHRcdGZvciAodmFyIGkgPSAwLCBpaSA9IHBzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBwaSA9IHBzW2ldO1xuXHRcdFx0dmFyIGNvbm5lY3Rpb25zID0gc2F2ZWRDb25uZWN0aW9uc1tpXTtcblx0XHRcdHZhciBwdCA9IG5ldyBzdHJ1Y3R1cmVzLkF0b20oKTtcblx0XHRcdGlmIChjb25uZWN0aW9ucy5sZW5ndGggPCAzKSB7XG5cdFx0XHRcdHB0LnggPSBwaS54O1xuXHRcdFx0XHRwdC55ID0gcGkueTtcblx0XHRcdFx0cHQueiA9IHBpLno7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIgd3QgPSAxO1xuXHRcdFx0XHRpZiAoY29ubmVjdGlvbnMubGVuZ3RoIDwgNSkge1xuXHRcdFx0XHRcdHd0ID0gLjU7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yICh2YXIgaiA9IDAsIGpqID0gY29ubmVjdGlvbnMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdHZhciBwYyA9IHBzW2Nvbm5lY3Rpb25zW2pdXTtcblx0XHRcdFx0XHRwdC54Kz1wYy54O1xuXHRcdFx0XHRcdHB0LnkrPXBjLnk7XG5cdFx0XHRcdFx0cHQueis9cGMuejtcblx0XHRcdFx0fVxuXHRcdFx0XHRwdC54ICs9IHBpLngqd3Q7XG5cdFx0XHRcdHB0LnkgKz0gcGkueSp3dDtcblx0XHRcdFx0cHQueiArPSBwaS56Knd0O1xuXHRcdFx0XHR2YXIgc2NhbGUgPSAxIC8gKHd0ICsgY29ubmVjdGlvbnMubGVuZ3RoKTtcblx0XHRcdFx0cHQueCo9c2NhbGU7XG5cdFx0XHRcdHB0LnkqPXNjYWxlO1xuXHRcdFx0XHRwdC56Kj1zY2FsZTtcblx0XHRcdH1cblx0XHRcdHRtcC5wdXNoKHB0KTtcblx0XHR9XG5cdFx0cHMgPSB0bXA7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlpID0gcHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIHBpID0gcHNbaV07XG5cdFx0XHRwb3NpdGlvbkRhdGEucHVzaChwaS54LCBwaS55LCBwaS56KTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gbm9ybWFsc1xuXHRcdGZvciAodmFyIGkgPSAwLCBpaSA9IHRyaWFuZ2xlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgdCA9IHRyaWFuZ2xlc1tpXTtcblx0XHRcdHZhciBwMSA9IHBzW3QuaTFdO1xuXHRcdFx0dmFyIHAyID0gcHNbdC5pMl07XG5cdFx0XHR2YXIgcDMgPSBwc1t0LmkzXTtcblx0XHRcdHZhciB2MTIgPSBbcDIueC1wMS54LCBwMi55LXAxLnksIHAyLnotcDEuel07XG5cdFx0XHR2YXIgdjEzID0gW3AzLngtcDEueCwgcDMueS1wMS55LCBwMy56LXAxLnpdO1xuXHRcdFx0djMuY3Jvc3ModjEyLCB2MTMpO1xuXHRcdFx0aWYgKGlzTmFOKHYxMlswXSkpIHtcblx0XHRcdFx0Ly8gZm9yIHNvbWUgcmVhc29uLCBvcmlnaW4gc2hvd3MgdXAgYXMgc29tZSBwb2ludHMgYW5kIHNob3VsZCBiZVxuXHRcdFx0XHQvLyBpZ25vcmVkXG5cdFx0XHRcdHYxMiA9IFswLDAsMF07XG5cdFx0XHR9XG5cdFx0XHR0Lm5vcm1hbCA9IHYxMjtcblx0XHR9XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlpID0gcHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIHN1bSA9IFswLCAwLCAwXTtcblx0XHRcdGZvciAodmFyIGogPSAwLCBqaiA9IHRyaWFuZ2xlcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdHZhciB0ID0gdHJpYW5nbGVzW2pdO1xuXHRcdFx0XHRpZiAodC5pMT09PWkgfHwgdC5pMj09PWkgfHwgdC5pMz09PWkpIHtcblx0XHRcdFx0XHRzdW1bMF0rPXQubm9ybWFsWzBdO1xuXHRcdFx0XHRcdHN1bVsxXSs9dC5ub3JtYWxbMV07XG5cdFx0XHRcdFx0c3VtWzJdKz10Lm5vcm1hbFsyXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0djMubm9ybWFsaXplKHN1bSk7XG5cdFx0XHRub3JtYWxEYXRhLnB1c2goc3VtWzBdLCBzdW1bMV0sIHN1bVsyXSk7XG5cdFx0fVxuXHRcdHRoaXMuc3RvcmVEYXRhKHBvc2l0aW9uRGF0YSwgbm9ybWFsRGF0YSwgaW5kZXhEYXRhKTtcblx0fTtcblx0Xy5yZW5kZXIgPSBmdW5jdGlvbihnbCwgc3BlY3MpIHtcblx0XHRpZih0aGlzLnNwZWNzKXtcblx0XHRcdHNwZWNzID0gdGhpcy5zcGVjcztcblx0XHR9XG5cdFx0aWYoIXNwZWNzLnN1cmZhY2VzX2Rpc3BsYXkpe1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRnbC5zaGFkZXIuc2V0TWF0cml4VW5pZm9ybXMoZ2wpO1xuXHRcdHRoaXMuYmluZEJ1ZmZlcnMoZ2wpO1xuXHRcdC8vIGNvbG9yc1xuXHRcdGdsLm1hdGVyaWFsLnNldFRlbXBDb2xvcnMoZ2wsIHNwZWNzLnN1cmZhY2VzX21hdGVyaWFsQW1iaWVudENvbG9yXzNELCBzcGVjcy5zdXJmYWNlc19jb2xvciwgc3BlY3Muc3VyZmFjZXNfbWF0ZXJpYWxTcGVjdWxhckNvbG9yXzNELCBzcGVjcy5zdXJmYWNlc19tYXRlcmlhbFNoaW5pbmVzc18zRCk7XG5cdFx0Ly8gYWxwaGEgbXVzdCBiZSBzZXQgYWZ0ZXIgdGVtcCBjb2xvcnMgYXMgdGhhdCBmdW5jdGlvbiBzZXRzIGFscGhhIHRvIDFcblx0XHRnbC5tYXRlcmlhbC5zZXRBbHBoYShnbCwgc3BlY3Muc3VyZmFjZXNfYWxwaGEpO1xuXHRcdC8vIHJlbmRlclxuXHRcdGlmKHNwZWNzLnN1cmZhY2VzX3N0eWxlID09PSAnRG90cycpe1xuXHRcdFx0Ly8gZG90c1xuXHRcdFx0Ly9nbC5wb2ludFNpemUoMSk7XG5cdFx0XHQvLyBwb2ludFNpemUgaXNuJ3QgcGFydCBvZiBXZWJHTCBBUEksIHNvIHdlIGhhdmUgdG8gbWFrZSBpdCBhIHNoYWRlciB1bmlmb3JtIGluIHRoZSB2ZXJ0ZXggc2hhZGVyXG5cdFx0XHRnbC5zaGFkZXIuc2V0UG9pbnRTaXplKGdsLCBzcGVjcy5zaGFwZXNfcG9pbnRTaXplKTtcblx0XHRcdC8vZ2wuZHJhd0FycmF5cyhnbC5QT0lOVFMsIDAsIHRoaXMudmVydGV4SW5kZXhCdWZmZXIubnVtSXRlbXMpO1xuXHRcdFx0Z2wuZHJhd0VsZW1lbnRzKGdsLlBPSU5UUywgdGhpcy52ZXJ0ZXhJbmRleEJ1ZmZlci5udW1JdGVtcywgZ2wuVU5TSUdORURfU0hPUlQsIDApO1xuXHRcdH1lbHNlIGlmKHNwZWNzLnN1cmZhY2VzX3N0eWxlID09PSAnTWVzaCcpe1xuXHRcdFx0Ly8gbWVzaFxuXHRcdFx0Z2wubGluZVdpZHRoKHNwZWNzLnNoYXBlc19saW5lV2lkdGgpO1xuXHRcdFx0Ly9nbC5wb2x5Z29uTW9kZShnbC5GUk9OVF9BTkRfQkFDSywgZ2wuTElORSk7XG5cdFx0XHRnbC5kcmF3RWxlbWVudHMoZ2wuTElORVMsIHRoaXMudmVydGV4SW5kZXhCdWZmZXIubnVtSXRlbXMsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcblx0XHRcdC8vZ2wucG9seWdvbk1vZGUoZ2wuRlJPTlRfQU5EX0JBQ0ssIGdsLkZJTEwpO1xuXHRcdH1lbHNle1xuXHRcdFx0Ly8gc29saWRcblx0XHRcdGdsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRVMsIHRoaXMudmVydGV4SW5kZXhCdWZmZXIubnVtSXRlbXMsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcblx0XHR9XG5cdFx0XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuc3RydWN0dXJlcywgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLmQzLCBDaGVtRG9vZGxlLkVMRU1FTlQsIENoZW1Eb29kbGUubGliLk1hcmNoaW5nQ3ViZXMsIENoZW1Eb29kbGUubGliLnZlYzMsIE1hdGgpO1xuXG4oZnVuY3Rpb24oc3RydWN0dXJlcywgZDMsIEVMRU1FTlQsIG0sIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRkMy5TQVNTdXJmYWNlID0gZnVuY3Rpb24oYXRvbXMsIHByb2JlUmFkaXVzLCByZXNvbHV0aW9uKSB7XG5cdFx0dGhpcy5hdG9tcyA9IGF0b21zO1xuXHRcdHRoaXMucHJvYmVSYWRpdXMgPSBwcm9iZVJhZGl1cztcblx0XHR0aGlzLnJlc29sdXRpb24gPSByZXNvbHV0aW9uO1xuXHRcdHRoaXMuYnVpbGQoYXRvbXMsIHByb2JlUmFkaXVzLCByZXNvbHV0aW9uKTtcblx0fTtcblx0dmFyIF8gPSBkMy5TQVNTdXJmYWNlLnByb3RvdHlwZSA9IG5ldyBkMy5fU3VyZmFjZSgpO1xuXHRfLmNhbGN1bGF0ZSA9IGZ1bmN0aW9uKHgsIHksIHopIHtcblx0XHR2YXIgbWluID0gSW5maW5pdHk7XG5cdFx0dmFyIHAgPSBuZXcgc3RydWN0dXJlcy5BdG9tKCdDJywgeCwgeSwgeik7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlpID0gdGhpcy5hdG9tcy5sZW5ndGg7IGk8aWk7IGkrKykge1xuXHRcdFx0dmFyIGEgPSB0aGlzLmF0b21zW2ldO1xuXHRcdFx0dmFyIHZkd1JhZGl1cyA9IChFTEVNRU5UW2EubGFiZWxdICYmIEVMRU1FTlRbYS5sYWJlbF0udmRXUmFkaXVzIT09MCk/RUxFTUVOVFthLmxhYmVsXS52ZFdSYWRpdXM6Mjtcblx0XHRcdHZhciBkaXN0YW5jZUNlbnRlciA9IGEuZGlzdGFuY2UzRChwKSAtIHRoaXMucHJvYmVSYWRpdXM7XG5cdFx0XHR2YXIgZGlzdGFuY2VTdXJmYWNlID0gZGlzdGFuY2VDZW50ZXIgLSB2ZHdSYWRpdXM7XG5cdFx0XHRtaW4gPSBtLm1pbihtaW4sIGRpc3RhbmNlU3VyZmFjZSk7XG5cdFx0fVxuXHRcdHJldHVybiBtaW47XG5cdH07XG5cdFxuXG59KShDaGVtRG9vZGxlLnN0cnVjdHVyZXMsIENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgQ2hlbURvb2RsZS5FTEVNRU5ULCBNYXRoKTtcblxuKGZ1bmN0aW9uKHN0cnVjdHVyZXMsIGQzLCBFTEVNRU5ULCBtLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0ZDMuVkRXU3VyZmFjZSA9IGZ1bmN0aW9uKGF0b21zLCByZXNvbHV0aW9uKSB7XG5cdFx0dGhpcy5hdG9tcyA9IGF0b21zO1xuXHRcdHRoaXMucHJvYmVSYWRpdXMgPSAwO1xuXHRcdHRoaXMucmVzb2x1dGlvbiA9IHJlc29sdXRpb247XG5cdFx0dGhpcy5idWlsZChhdG9tcywgMCwgcmVzb2x1dGlvbik7XG5cdH07XG5cdHZhciBfID0gZDMuVkRXU3VyZmFjZS5wcm90b3R5cGUgPSBuZXcgZDMuX1N1cmZhY2UoKTtcblx0Xy5jYWxjdWxhdGUgPSBmdW5jdGlvbih4LCB5LCB6KSB7XG5cdFx0dmFyIG1pbiA9IEluZmluaXR5O1xuXHRcdHZhciBwID0gbmV3IHN0cnVjdHVyZXMuQXRvbSgnQycsIHgsIHksIHopO1xuXHRcdGZvciAodmFyIGkgPSAwLCBpaSA9IHRoaXMuYXRvbXMubGVuZ3RoOyBpPGlpOyBpKyspIHtcblx0XHRcdHZhciBhID0gdGhpcy5hdG9tc1tpXTtcblx0XHRcdHZhciB2ZHdSYWRpdXMgPSAoRUxFTUVOVFthLmxhYmVsXSAmJiBFTEVNRU5UW2EubGFiZWxdLnZkV1JhZGl1cyE9PTApP0VMRU1FTlRbYS5sYWJlbF0udmRXUmFkaXVzOjI7XG5cdFx0XHR2YXIgZGlzdGFuY2VDZW50ZXIgPSBhLmRpc3RhbmNlM0QocCk7XG5cdFx0XHR2YXIgZGlzdGFuY2VTdXJmYWNlID0gZGlzdGFuY2VDZW50ZXIgLSB2ZHdSYWRpdXM7XG5cdFx0XHRtaW4gPSBtLm1pbihtaW4sIGRpc3RhbmNlU3VyZmFjZSk7XG5cdFx0fVxuXHRcdHJldHVybiBtaW47XG5cdH07XG5cdFxuXG59KShDaGVtRG9vZGxlLnN0cnVjdHVyZXMsIENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgQ2hlbURvb2RsZS5FTEVNRU5ULCBNYXRoKTtcblxuKGZ1bmN0aW9uKHN0cnVjdHVyZXMsIGV4dGVuc2lvbnMsIG0sIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdHN0cnVjdHVyZXMuUGxhdGUgPSBmdW5jdGlvbihsYW5lcykge1xuXHRcdHRoaXMubGFuZXMgPSBuZXcgQXJyYXkobGFuZXMpO1xuXHRcdGZvciAoaSA9IDAsIGlpID0gbGFuZXM7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR0aGlzLmxhbmVzW2ldID0gW107XG5cdFx0fVxuXHR9O1xuXHR2YXIgXyA9IHN0cnVjdHVyZXMuUGxhdGUucHJvdG90eXBlO1xuXHRfLnNvcnQgPSBmdW5jdGlvbigpIHtcblx0XHRmb3IgKGkgPSAwLCBpaSA9IHRoaXMubGFuZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dGhpcy5sYW5lc1tpXS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdFx0cmV0dXJuIGEgLSBiO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9O1xuXHRfLmRyYXcgPSBmdW5jdGlvbihjdHgsIHNwZWNzKSB7XG5cdFx0Ly8gRnJvbnQgYW5kIG9yaWdpblxuXHRcdHZhciB3aWR0aCA9IGN0eC5jYW52YXMud2lkdGg7XG5cdFx0dmFyIGhlaWdodCA9IGN0eC5jYW52YXMuaGVpZ2h0O1xuXHRcdHRoaXMub3JpZ2luID0gOSAqIGhlaWdodCAvIDEwO1xuXHRcdHRoaXMuZnJvbnQgPSBoZWlnaHQgLyAxMDtcblx0XHR0aGlzLmxhbmVMZW5ndGggPSB0aGlzLm9yaWdpbiAtIHRoaXMuZnJvbnQ7XG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gJyMwMDAwMDAnO1xuXHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRjdHgubW92ZVRvKDAsIHRoaXMuZnJvbnQpO1xuXHRcdGN0eC5saW5lVG8od2lkdGgsIHRoaXMuZnJvbnQpO1xuXHRcdGN0eC5zZXRMaW5lRGFzaChbM10pO1xuXHRcdGN0eC5zdHJva2UoKTtcblx0XHRjdHguc2V0TGluZURhc2goW10pO1xuXHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRjdHgubW92ZVRvKDAsIHRoaXMub3JpZ2luKTtcblx0XHRjdHgubGluZVRvKHdpZHRoLCB0aGlzLm9yaWdpbik7XG5cdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdGN0eC5zdHJva2UoKTtcblx0XHQvLyBMYW5lc1xuXHRcdGZvciAoaSA9IDAsIGlpID0gdGhpcy5sYW5lcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgbGFuZVggPSAoaSArIDEpICogd2lkdGggLyAoaWkgKyAxKTtcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdGN0eC5tb3ZlVG8obGFuZVgsIHRoaXMub3JpZ2luKTtcblx0XHRcdGN0eC5saW5lVG8obGFuZVgsIHRoaXMub3JpZ2luICsgMyk7XG5cdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHQvLyBTcG90c1xuXHRcdFx0Zm9yIChzID0gMCwgc3MgPSB0aGlzLmxhbmVzW2ldLmxlbmd0aDsgcyA8IHNzOyBzKyspIHtcblx0XHRcdFx0dmFyIHNwb3RZID0gdGhpcy5vcmlnaW4gLSAodGhpcy5sYW5lTGVuZ3RoICogdGhpcy5sYW5lc1tpXVtzXS5yZik7XG5cdFx0XHRcdHN3aXRjaCAodGhpcy5sYW5lc1tpXVtzXS50eXBlKSB7XG5cdFx0XHRcdGNhc2UgJ2NvbXBhY3QnOlxuXHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHRjdHguYXJjKGxhbmVYLCBzcG90WSwgMywgMCwgMiAqIG0uUEksIGZhbHNlKTtcblx0XHRcdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2V4cGFuZGVkJzpcblx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0Y3R4LmFyYyhsYW5lWCwgc3BvdFksIDcsIDAsIDIgKiBtLlBJLCBmYWxzZSk7XG5cdFx0XHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICd0cmFpbGluZyc6XG5cdFx0XHRcdFx0Ly8gdHJhaWxpbmdcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnd2lkZW5lZCc6XG5cdFx0XHRcdFx0ZXh0ZW5zaW9ucy5jb250ZXh0RWxsaXBzZShjdHgsIGxhbmVYIC0gMTgsIHNwb3RZIC0gMTAsIDM2LCAxMCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2NyZXNlbnQnOlxuXHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHRjdHguYXJjKGxhbmVYLCBzcG90WSwgOSwgMCwgbS5QSSwgdHJ1ZSk7XG5cdFx0XHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN3aXRjaCAodGhpcy5sYW5lc1tpXVtzXS5zdHlsZSkge1xuXHRcdFx0XHRjYXNlICdzb2xpZCc6XG5cdFx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9ICcjMDAwMDAwJztcblx0XHRcdFx0XHRjdHguZmlsbCgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICd0cmFuc3BhcmVudCc6XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdncmFkaWVudCc6XG5cdFx0XHRcdFx0Ly8gZ3JhZGllbnRcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHRzdHJ1Y3R1cmVzLlBsYXRlLlNwb3QgPSBmdW5jdGlvbih0eXBlLCByZiwgc3R5bGUpIHtcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdHRoaXMucmYgPSByZjtcblx0XHR0aGlzLnN0eWxlID0gc3R5bGUgPyBzdHlsZSA6ICdzb2xpZCc7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuc3RydWN0dXJlcywgQ2hlbURvb2RsZS5leHRlbnNpb25zLCBNYXRoKTtcblxuKGZ1bmN0aW9uKGMsIHN0cnVjdHVyZXMsIG0sIEpTT04sIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdC8vIGRlZmF1bHQgY2FudmFzIHByb3BlcnRpZXNcblx0Yy5kZWZhdWx0X2JhY2tncm91bmRDb2xvciA9ICcjRkZGRkZGJztcblx0Yy5kZWZhdWx0X3NjYWxlID0gMTtcblx0Yy5kZWZhdWx0X3JvdGF0ZUFuZ2xlID0gMDtcblx0Yy5kZWZhdWx0X2JvbmRMZW5ndGhfMkQgPSAyMDtcblx0Yy5kZWZhdWx0X2FuZ3N0cm9tc1BlckJvbmRMZW5ndGggPSAxLjI1O1xuXHRjLmRlZmF1bHRfbGlnaHREaXJlY3Rpb25fM0QgPSBbIC0uMSwgLS4xLCAtMSBdO1xuXHRjLmRlZmF1bHRfbGlnaHREaWZmdXNlQ29sb3JfM0QgPSAnI0ZGRkZGRic7XG5cdGMuZGVmYXVsdF9saWdodFNwZWN1bGFyQ29sb3JfM0QgPSAnI0ZGRkZGRic7XG5cdGMuZGVmYXVsdF9wcm9qZWN0aW9uUGVyc3BlY3RpdmVfM0QgPSB0cnVlO1xuXHRjLmRlZmF1bHRfcHJvamVjdGlvblBlcnNwZWN0aXZlVmVydGljYWxGaWVsZE9mVmlld18zRCA9IDQ1O1xuXHRjLmRlZmF1bHRfcHJvamVjdGlvbk9ydGhvV2lkdGhfM0QgPSA0MDtcblx0Yy5kZWZhdWx0X3Byb2plY3Rpb25XaWR0aEhlaWdodFJhdGlvXzNEID0gdW5kZWZpbmVkO1xuXHRjLmRlZmF1bHRfcHJvamVjdGlvbkZyb250Q3VsbGluZ18zRCA9IC4xO1xuXHRjLmRlZmF1bHRfcHJvamVjdGlvbkJhY2tDdWxsaW5nXzNEID0gMTAwMDA7XG5cdGMuZGVmYXVsdF9jdWxsQmFja0ZhY2VfM0QgPSB0cnVlO1xuXHRjLmRlZmF1bHRfZm9nX21vZGVfM0QgPSAwO1xuXHRjLmRlZmF1bHRfZm9nX2NvbG9yXzNEID0gJyMwMDAwMDAnO1xuXHRjLmRlZmF1bHRfZm9nX3N0YXJ0XzNEID0gMDtcblx0Yy5kZWZhdWx0X2ZvZ19lbmRfM0QgPSAxO1xuXHRjLmRlZmF1bHRfZm9nX2RlbnNpdHlfM0QgPSAxO1xuXHRjLmRlZmF1bHRfc2hhZG93XzNEID0gZmFsc2U7XG5cdGMuZGVmYXVsdF9zaGFkb3dfaW50ZW5zaXR5XzNEID0gLjg1O1xuXHRjLmRlZmF1bHRfZmxhdF9jb2xvcl8zRCA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfYW50aWFsaWFzXzNEID0gdHJ1ZTtcblx0Yy5kZWZhdWx0X2dhbW1hQ29ycmVjdGlvbl8zRCA9IDIuMjtcblx0Yy5kZWZhdWx0X2NvbG9ySG92ZXIgPSAnIzg4NTExMCc7XG5cdGMuZGVmYXVsdF9jb2xvclNlbGVjdCA9ICcjMDA2MEIyJztcblx0Yy5kZWZhdWx0X2NvbG9yRXJyb3IgPSAnI2MxMDAwMCc7XG5cdGMuZGVmYXVsdF9jb2xvclByZXZpZXcgPSAnIzAwRkYwMCc7XG5cblx0Ly8gM0Qgc2hhZGVyc1xuXHQvLyBkZWZhdWx0IHNzYW9cblx0Yy5kZWZhdWx0X3NzYW9fM0QgPSBmYWxzZTtcblx0Yy5kZWZhdWx0X3NzYW9fa2VybmVsX3JhZGl1cyA9IDE3O1xuXHRjLmRlZmF1bHRfc3Nhb19rZXJuZWxfc2FtcGxlcyA9IDMyO1xuXHRjLmRlZmF1bHRfc3Nhb19wb3dlciA9IDEuMDtcblx0Ly8gZGVmYXVsdCBvdXRsaW5lIDNEXG5cdGMuZGVmYXVsdF9vdXRsaW5lXzNEID0gZmFsc2U7XG5cdGMuZGVmYXVsdF9vdXRsaW5lX3RoaWNrbmVzcyA9IDEuMDtcblx0Yy5kZWZhdWx0X291dGxpbmVfbm9ybWFsX3RocmVzaG9sZCA9IDAuODU7XG5cdGMuZGVmYXVsdF9vdXRsaW5lX2RlcHRoX3RocmVzaG9sZCA9IDAuMTtcblx0Ly8gZGVmdWx0IGZ4YWEgYW50aWFsaWFzaW5nXG5cdGMuZGVmYXVsdF9meGFhX2VkZ2VUaHJlc2hvbGQgPSAxLjAvMTYuMDtcblx0Yy5kZWZhdWx0X2Z4YWFfZWRnZVRocmVzaG9sZE1pbiA9IDEuMC8xMi4wO1xuXHRjLmRlZmF1bHRfZnhhYV9zZWFyY2hTdGVwcyA9IDY0O1xuXHRjLmRlZmF1bHRfZnhhYV9zZWFyY2hUaHJlc2hvbGQgPSAxLjAvNC4wO1xuXHRjLmRlZmF1bHRfZnhhYV9zdWJwaXhDYXAgPSAxLjA7XG5cdGMuZGVmYXVsdF9meGFhX3N1YnBpeFRyaW0gPSAwLjA7XG5cblx0Ly8gZGVmYXVsdCBhdG9tIHByb3BlcnRpZXNcblx0Yy5kZWZhdWx0X2F0b21zX2Rpc3BsYXkgPSB0cnVlO1xuXHRjLmRlZmF1bHRfYXRvbXNfY29sb3IgPSAnIzAwMDAwMCc7XG5cdGMuZGVmYXVsdF9hdG9tc19mb250X3NpemVfMkQgPSAxMjtcblx0Yy5kZWZhdWx0X2F0b21zX2ZvbnRfZmFtaWxpZXNfMkQgPSBbICdIZWx2ZXRpY2EnLCAnQXJpYWwnLCAnRGlhbG9nJyBdO1xuXHRjLmRlZmF1bHRfYXRvbXNfZm9udF9ib2xkXzJEID0gZmFsc2U7XG5cdGMuZGVmYXVsdF9hdG9tc19mb250X2l0YWxpY18yRCA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfYXRvbXNfY2lyY2xlc18yRCA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfYXRvbXNfY2lyY2xlRGlhbWV0ZXJfMkQgPSAxMDtcblx0Yy5kZWZhdWx0X2F0b21zX2NpcmNsZUJvcmRlcldpZHRoXzJEID0gMTtcblx0Yy5kZWZhdWx0X2F0b21zX2xvbmVQYWlyRGlzdGFuY2VfMkQgPSA4O1xuXHRjLmRlZmF1bHRfYXRvbXNfbG9uZVBhaXJTcHJlYWRfMkQgPSA0O1xuXHRjLmRlZmF1bHRfYXRvbXNfbG9uZVBhaXJEaWFtZXRlcl8yRCA9IDE7XG5cdGMuZGVmYXVsdF9hdG9tc191c2VKTU9MQ29sb3JzID0gZmFsc2U7XG5cdGMuZGVmYXVsdF9hdG9tc191c2VQWU1PTENvbG9ycyA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfYXRvbXNfSEJsYWNrXzJEID0gdHJ1ZTtcblx0Yy5kZWZhdWx0X2F0b21zX2ltcGxpY2l0SHlkcm9nZW5zXzJEID0gdHJ1ZTtcblx0Yy5kZWZhdWx0X2F0b21zX2Rpc3BsYXlUZXJtaW5hbENhcmJvbkxhYmVsc18yRCA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfYXRvbXNfc2hvd0hpZGRlbkNhcmJvbnNfMkQgPSB0cnVlO1xuXHRjLmRlZmF1bHRfYXRvbXNfc2hvd0F0dHJpYnV0ZWRDYXJib25zXzJEID0gdHJ1ZTtcblx0Yy5kZWZhdWx0X2F0b21zX2Rpc3BsYXlBbGxDYXJib25MYWJlbHNfMkQgPSBmYWxzZTtcblx0Yy5kZWZhdWx0X2F0b21zX3Jlc29sdXRpb25fM0QgPSAzMDtcblx0Yy5kZWZhdWx0X2F0b21zX3NwaGVyZURpYW1ldGVyXzNEID0gLjg7XG5cdGMuZGVmYXVsdF9hdG9tc191c2VWRFdEaWFtZXRlcnNfM0QgPSBmYWxzZTtcblx0Yy5kZWZhdWx0X2F0b21zX3Zkd011bHRpcGxpZXJfM0QgPSAxO1xuXHRjLmRlZmF1bHRfYXRvbXNfbWF0ZXJpYWxBbWJpZW50Q29sb3JfM0QgPSAnIzAwMDAwMCc7XG5cdGMuZGVmYXVsdF9hdG9tc19tYXRlcmlhbFNwZWN1bGFyQ29sb3JfM0QgPSAnIzU1NTU1NSc7XG5cdGMuZGVmYXVsdF9hdG9tc19tYXRlcmlhbFNoaW5pbmVzc18zRCA9IDMyO1xuXHRjLmRlZmF1bHRfYXRvbXNfbm9uQm9uZGVkQXNTdGFyc18zRCA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfYXRvbXNfZGlzcGxheUxhYmVsc18zRCA9IGZhbHNlO1xuXG5cdC8vIGRlZmF1bHQgYm9uZCBwcm9wZXJ0aWVzXG5cdGMuZGVmYXVsdF9ib25kc19kaXNwbGF5ID0gdHJ1ZTtcblx0Yy5kZWZhdWx0X2JvbmRzX2NvbG9yID0gJyMwMDAwMDAnO1xuXHRjLmRlZmF1bHRfYm9uZHNfd2lkdGhfMkQgPSAxO1xuXHRjLmRlZmF1bHRfYm9uZHNfdXNlQWJzb2x1dGVTYXR1cmF0aW9uV2lkdGhzXzJEID0gdHJ1ZTtcblx0Yy5kZWZhdWx0X2JvbmRzX3NhdHVyYXRpb25XaWR0aF8yRCA9IC4yO1xuXHRjLmRlZmF1bHRfYm9uZHNfc2F0dXJhdGlvbldpZHRoQWJzXzJEID0gNTtcblx0Yy5kZWZhdWx0X2JvbmRzX2VuZHNfMkQgPSAncm91bmQnO1xuXHRjLmRlZmF1bHRfYm9uZHNfc3BsaXRDb2xvciA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfYm9uZHNfY29sb3JHcmFkaWVudCA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfYm9uZHNfc2F0dXJhdGlvbkFuZ2xlXzJEID0gbS5QSSAvIDM7XG5cdGMuZGVmYXVsdF9ib25kc19zeW1tZXRyaWNhbF8yRCA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfYm9uZHNfY2xlYXJPdmVybGFwc18yRCA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfYm9uZHNfb3ZlcmxhcENsZWFyV2lkdGhfMkQgPSAuNTtcblx0Yy5kZWZhdWx0X2JvbmRzX2F0b21MYWJlbEJ1ZmZlcl8yRCA9IDE7XG5cdGMuZGVmYXVsdF9ib25kc193ZWRnZVRoaWNrbmVzc18yRCA9IDY7XG5cdGMuZGVmYXVsdF9ib25kc193YXZ5TGVuZ3RoXzJEID0gNDtcblx0Yy5kZWZhdWx0X2JvbmRzX2hhc2hXaWR0aF8yRCA9IDE7XG5cdGMuZGVmYXVsdF9ib25kc19oYXNoU3BhY2luZ18yRCA9IDIuNTtcblx0Yy5kZWZhdWx0X2JvbmRzX2RvdFNpemVfMkQgPSAyO1xuXHRjLmRlZmF1bHRfYm9uZHNfbGV3aXNTdHlsZV8yRCA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfYm9uZHNfc2hvd0JvbmRPcmRlcnNfM0QgPSBmYWxzZTtcblx0Yy5kZWZhdWx0X2JvbmRzX3Jlc29sdXRpb25fM0QgPSAzMDtcblx0Yy5kZWZhdWx0X2JvbmRzX3JlbmRlckFzTGluZXNfM0QgPSBmYWxzZTtcblx0Yy5kZWZhdWx0X2JvbmRzX2N5bGluZGVyRGlhbWV0ZXJfM0QgPSAuMztcblx0Yy5kZWZhdWx0X2JvbmRzX3BpbGxMYXRpdHVkZVJlc29sdXRpb25fM0QgPSAxMDtcblx0Yy5kZWZhdWx0X2JvbmRzX3BpbGxMb25naXR1ZGVSZXNvbHV0aW9uXzNEID0gMjA7XG5cdGMuZGVmYXVsdF9ib25kc19waWxsSGVpZ2h0XzNEID0gLjM7XG5cdGMuZGVmYXVsdF9ib25kc19waWxsU3BhY2luZ18zRCA9IC4xO1xuXHRjLmRlZmF1bHRfYm9uZHNfcGlsbERpYW1ldGVyXzNEID0gLjM7XG5cdGMuZGVmYXVsdF9ib25kc19tYXRlcmlhbEFtYmllbnRDb2xvcl8zRCA9ICcjMDAwMDAwJztcblx0Yy5kZWZhdWx0X2JvbmRzX21hdGVyaWFsU3BlY3VsYXJDb2xvcl8zRCA9ICcjNTU1NTU1Jztcblx0Yy5kZWZhdWx0X2JvbmRzX21hdGVyaWFsU2hpbmluZXNzXzNEID0gMzI7XG5cblx0Ly8gZGVmYXVsdCBtYWNyb21vbGVjdWxhciBwcm9wZXJ0aWVzXG5cdGMuZGVmYXVsdF9wcm90ZWluc19kaXNwbGF5UmliYm9uID0gdHJ1ZTtcblx0Yy5kZWZhdWx0X3Byb3RlaW5zX2Rpc3BsYXlCYWNrYm9uZSA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfcHJvdGVpbnNfYmFja2JvbmVUaGlja25lc3MgPSAxLjU7XG5cdGMuZGVmYXVsdF9wcm90ZWluc19iYWNrYm9uZUNvbG9yID0gJyNDQ0NDQ0MnO1xuXHRjLmRlZmF1bHRfcHJvdGVpbnNfcmliYm9uQ2FydG9vbml6ZSA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfcHJvdGVpbnNfZGlzcGxheVBpcGVQbGFuayA9IGZhbHNlO1xuXHQvLyBzaGFwZWx5LCBhbWlubywgcG9sYXJpdHksIHJhaW5ib3csIGFjaWRpdHlcblx0Yy5kZWZhdWx0X3Byb3RlaW5zX3Jlc2lkdWVDb2xvciA9ICdub25lJztcblx0Yy5kZWZhdWx0X3Byb3RlaW5zX3ByaW1hcnlDb2xvciA9ICcjRkYwRDBEJztcblx0Yy5kZWZhdWx0X3Byb3RlaW5zX3NlY29uZGFyeUNvbG9yID0gJyNGRkZGMzAnO1xuXHRjLmRlZmF1bHRfcHJvdGVpbnNfcmliYm9uQ2FydG9vbkhlbGl4UHJpbWFyeUNvbG9yID0gJyMwMEU3NDAnO1xuXHRjLmRlZmF1bHRfcHJvdGVpbnNfcmliYm9uQ2FydG9vbkhlbGl4U2Vjb25kYXJ5Q29sb3IgPSAnIzk5MDVGRic7XG5cdGMuZGVmYXVsdF9wcm90ZWluc19yaWJib25DYXJ0b29uU2hlZXRDb2xvciA9ICcjRThCQjk5Jztcblx0Yy5kZWZhdWx0X3Byb3RlaW5zX3R1YmVDb2xvciA9ICcjRkYwRDBEJztcblx0Yy5kZWZhdWx0X3Byb3RlaW5zX3R1YmVSZXNvbHV0aW9uXzNEID0gMTU7XG5cdGMuZGVmYXVsdF9wcm90ZWluc19yaWJib25UaGlja25lc3MgPSAuMjtcblx0Yy5kZWZhdWx0X3Byb3RlaW5zX3R1YmVUaGlja25lc3MgPSAwLjU7XG5cdGMuZGVmYXVsdF9wcm90ZWluc19wbGFua1NoZWV0V2lkdGggPSAzLjU7XG5cdGMuZGVmYXVsdF9wcm90ZWluc19jeWxpbmRlckhlbGl4RGlhbWV0ZXIgPSA0O1xuXHRjLmRlZmF1bHRfcHJvdGVpbnNfdmVydGljYWxSZXNvbHV0aW9uID0gODtcblx0Yy5kZWZhdWx0X3Byb3RlaW5zX2hvcml6b250YWxSZXNvbHV0aW9uID0gODtcblx0Yy5kZWZhdWx0X3Byb3RlaW5zX21hdGVyaWFsQW1iaWVudENvbG9yXzNEID0gJyMwMDAwMDAnO1xuXHRjLmRlZmF1bHRfcHJvdGVpbnNfbWF0ZXJpYWxTcGVjdWxhckNvbG9yXzNEID0gJyM1NTU1NTUnO1xuXHRjLmRlZmF1bHRfcHJvdGVpbnNfbWF0ZXJpYWxTaGluaW5lc3NfM0QgPSAzMjtcblx0Yy5kZWZhdWx0X251Y2xlaWNzX2Rpc3BsYXkgPSB0cnVlO1xuXHRjLmRlZmF1bHRfbnVjbGVpY3NfdHViZUNvbG9yID0gJyNDQ0NDQ0MnO1xuXHRjLmRlZmF1bHRfbnVjbGVpY3NfYmFzZUNvbG9yID0gJyNDMTAwMDAnO1xuXHQvLyBzaGFwZWx5LCByYWluYm93XG5cdGMuZGVmYXVsdF9udWNsZWljc19yZXNpZHVlQ29sb3IgPSAnbm9uZSc7XG5cdGMuZGVmYXVsdF9udWNsZWljc190dWJlVGhpY2tuZXNzID0gMS41O1xuXHRjLmRlZmF1bHRfbnVjbGVpY3NfdHViZVJlc29sdXRpb25fM0QgPSAxNTtcblx0Yy5kZWZhdWx0X251Y2xlaWNzX3ZlcnRpY2FsUmVzb2x1dGlvbiA9IDg7XG5cdGMuZGVmYXVsdF9udWNsZWljc19tYXRlcmlhbEFtYmllbnRDb2xvcl8zRCA9ICcjMDAwMDAwJztcblx0Yy5kZWZhdWx0X251Y2xlaWNzX21hdGVyaWFsU3BlY3VsYXJDb2xvcl8zRCA9ICcjNTU1NTU1Jztcblx0Yy5kZWZhdWx0X251Y2xlaWNzX21hdGVyaWFsU2hpbmluZXNzXzNEID0gMzI7XG5cdGMuZGVmYXVsdF9tYWNyb19kaXNwbGF5QXRvbXMgPSBmYWxzZTtcblx0Yy5kZWZhdWx0X21hY3JvX2Rpc3BsYXlCb25kcyA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfbWFjcm9fYXRvbVRvTGlnYW5kRGlzdGFuY2UgPSAtMTtcblx0Yy5kZWZhdWx0X21hY3JvX3Nob3dXYXRlciA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfbWFjcm9fY29sb3JCeUNoYWluID0gZmFsc2U7XG5cdGMuZGVmYXVsdF9tYWNyb19yYWluYm93Q29sb3JzID0gWycjMDAwMEZGJywgJyMwMEZGRkYnLCAnIzAwRkYwMCcsICcjRkZGRjAwJywgJyNGRjAwMDAnXTtcblxuXHQvLyBkZWZhdWx0IHN1cmZhY2UgcHJvcGVydGllc1xuXHRjLmRlZmF1bHRfc3VyZmFjZXNfZGlzcGxheSA9IHRydWU7XG5cdGMuZGVmYXVsdF9zdXJmYWNlc19hbHBoYSA9IC41O1xuXHRjLmRlZmF1bHRfc3VyZmFjZXNfc3R5bGUgPSAnU29saWQnO1xuXHRjLmRlZmF1bHRfc3VyZmFjZXNfY29sb3IgPSAnd2hpdGUnO1xuXHRjLmRlZmF1bHRfc3VyZmFjZXNfbWF0ZXJpYWxBbWJpZW50Q29sb3JfM0QgPSAnIzAwMDAwMCc7XG5cdGMuZGVmYXVsdF9zdXJmYWNlc19tYXRlcmlhbFNwZWN1bGFyQ29sb3JfM0QgPSAnIzAwMDAwMCc7XG5cdGMuZGVmYXVsdF9zdXJmYWNlc19tYXRlcmlhbFNoaW5pbmVzc18zRCA9IDMyO1xuXG5cdC8vIGRlZmF1bHQgc3BlY3RydW0gcHJvcGVydGllc1xuXHRjLmRlZmF1bHRfcGxvdHNfY29sb3IgPSAnIzAwMDAwMCc7XG5cdGMuZGVmYXVsdF9wbG90c193aWR0aCA9IDE7XG5cdGMuZGVmYXVsdF9wbG90c19zaG93SW50ZWdyYXRpb24gPSBmYWxzZTtcblx0Yy5kZWZhdWx0X3Bsb3RzX2ludGVncmF0aW9uQ29sb3IgPSAnI2MxMDAwMCc7XG5cdGMuZGVmYXVsdF9wbG90c19pbnRlZ3JhdGlvbkxpbmVXaWR0aCA9IDE7XG5cdGMuZGVmYXVsdF9wbG90c19zaG93R3JpZCA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfcGxvdHNfZ3JpZENvbG9yID0gJ2dyYXknO1xuXHRjLmRlZmF1bHRfcGxvdHNfZ3JpZExpbmVXaWR0aCA9IC41O1xuXHRjLmRlZmF1bHRfcGxvdHNfc2hvd1lBeGlzID0gdHJ1ZTtcblx0Yy5kZWZhdWx0X3Bsb3RzX2ZsaXBYQXhpcyA9IGZhbHNlO1xuXG5cdC8vIGRlZmF1bHQgc2hhcGUgcHJvcGVydGllc1xuXHRjLmRlZmF1bHRfdGV4dF9mb250X3NpemUgPSAxMjtcblx0Yy5kZWZhdWx0X3RleHRfZm9udF9mYW1pbGllcyA9IFsgJ0hlbHZldGljYScsICdBcmlhbCcsICdEaWFsb2cnIF07XG5cdGMuZGVmYXVsdF90ZXh0X2ZvbnRfYm9sZCA9IHRydWU7XG5cdGMuZGVmYXVsdF90ZXh0X2ZvbnRfaXRhbGljID0gZmFsc2U7XG5cdGMuZGVmYXVsdF90ZXh0X2ZvbnRfc3Ryb2tlXzNEID0gdHJ1ZTtcblx0Yy5kZWZhdWx0X3RleHRfY29sb3IgPSAnIzAwMDAwMCc7XG5cdGMuZGVmYXVsdF9zaGFwZXNfY29sb3IgPSAnIzAwMDAwMCc7XG5cdGMuZGVmYXVsdF9zaGFwZXNfbGluZVdpZHRoID0gMTtcblx0Yy5kZWZhdWx0X3NoYXBlc19wb2ludFNpemUgPSAyO1xuXHRjLmRlZmF1bHRfc2hhcGVzX2Fycm93TGVuZ3RoXzJEID0gODtcblx0Yy5kZWZhdWx0X2NvbXBhc3NfZGlzcGxheSA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfY29tcGFzc19heGlzWENvbG9yXzNEID0gJyNGRjAwMDAnO1xuXHRjLmRlZmF1bHRfY29tcGFzc19heGlzWUNvbG9yXzNEID0gJyMwMEZGMDAnO1xuXHRjLmRlZmF1bHRfY29tcGFzc19heGlzWkNvbG9yXzNEID0gJyMwMDAwRkYnO1xuXHRjLmRlZmF1bHRfY29tcGFzc19zaXplXzNEID0gNTA7XG5cdGMuZGVmYXVsdF9jb21wYXNzX3Jlc29sdXRpb25fM0QgPSAxMDtcblx0Yy5kZWZhdWx0X2NvbXBhc3NfZGlzcGxheVRleHRfM0QgPSB0cnVlO1xuXHRjLmRlZmF1bHRfY29tcGFzc190eXBlXzNEID0gMDtcblx0Yy5kZWZhdWx0X21lYXN1cmVtZW50X3VwZGF0ZV8zRCA9IGZhbHNlO1xuXHRjLmRlZmF1bHRfbWVhc3VyZW1lbnRfYW5nbGVCYW5kc18zRCA9IDEwO1xuXHRjLmRlZmF1bHRfbWVhc3VyZW1lbnRfZGlzcGxheVRleHRfM0QgPSB0cnVlO1xuXG5cdHN0cnVjdHVyZXMuVmlzdWFsU3BlY2lmaWNhdGlvbnMgPSBmdW5jdGlvbigpIHtcblx0XHQvLyBjYW52YXMgcHJvcGVydGllc1xuXHRcdHRoaXMuYmFja2dyb3VuZENvbG9yID0gYy5kZWZhdWx0X2JhY2tncm91bmRDb2xvcjtcblx0XHR0aGlzLnNjYWxlID0gYy5kZWZhdWx0X3NjYWxlO1xuXHRcdHRoaXMucm90YXRlQW5nbGUgPSBjLmRlZmF1bHRfcm90YXRlQW5nbGU7XG5cdFx0dGhpcy5ib25kTGVuZ3RoXzJEID0gYy5kZWZhdWx0X2JvbmRMZW5ndGhfMkQ7XG5cdFx0dGhpcy5hbmdzdHJvbXNQZXJCb25kTGVuZ3RoID0gYy5kZWZhdWx0X2FuZ3N0cm9tc1BlckJvbmRMZW5ndGg7XG5cdFx0dGhpcy5saWdodERpcmVjdGlvbl8zRCA9IGMuZGVmYXVsdF9saWdodERpcmVjdGlvbl8zRC5zbGljZSgwKTtcblx0XHR0aGlzLmxpZ2h0RGlmZnVzZUNvbG9yXzNEID0gYy5kZWZhdWx0X2xpZ2h0RGlmZnVzZUNvbG9yXzNEO1xuXHRcdHRoaXMubGlnaHRTcGVjdWxhckNvbG9yXzNEID0gYy5kZWZhdWx0X2xpZ2h0U3BlY3VsYXJDb2xvcl8zRDtcblx0XHR0aGlzLnByb2plY3Rpb25QZXJzcGVjdGl2ZV8zRCA9IGMuZGVmYXVsdF9wcm9qZWN0aW9uUGVyc3BlY3RpdmVfM0Q7XG5cdFx0dGhpcy5wcm9qZWN0aW9uUGVyc3BlY3RpdmVWZXJ0aWNhbEZpZWxkT2ZWaWV3XzNEID0gYy5kZWZhdWx0X3Byb2plY3Rpb25QZXJzcGVjdGl2ZVZlcnRpY2FsRmllbGRPZlZpZXdfM0Q7XG5cdFx0dGhpcy5wcm9qZWN0aW9uT3J0aG9XaWR0aF8zRCA9IGMuZGVmYXVsdF9wcm9qZWN0aW9uT3J0aG9XaWR0aF8zRDtcblx0XHR0aGlzLnByb2plY3Rpb25XaWR0aEhlaWdodFJhdGlvXzNEID0gYy5kZWZhdWx0X3Byb2plY3Rpb25XaWR0aEhlaWdodFJhdGlvXzNEO1xuXHRcdHRoaXMucHJvamVjdGlvbkZyb250Q3VsbGluZ18zRCA9IGMuZGVmYXVsdF9wcm9qZWN0aW9uRnJvbnRDdWxsaW5nXzNEO1xuXHRcdHRoaXMucHJvamVjdGlvbkJhY2tDdWxsaW5nXzNEID0gYy5kZWZhdWx0X3Byb2plY3Rpb25CYWNrQ3VsbGluZ18zRDtcblx0XHR0aGlzLmN1bGxCYWNrRmFjZV8zRCA9IGMuZGVmYXVsdF9jdWxsQmFja0ZhY2VfM0Q7XG5cdFx0dGhpcy5mb2dfbW9kZV8zRCA9IGMuZGVmYXVsdF9mb2dfbW9kZV8zRDtcblx0XHR0aGlzLmZvZ19jb2xvcl8zRCA9IGMuZGVmYXVsdF9mb2dfY29sb3JfM0Q7XG5cdFx0dGhpcy5mb2dfc3RhcnRfM0QgPSBjLmRlZmF1bHRfZm9nX3N0YXJ0XzNEO1xuXHRcdHRoaXMuZm9nX2VuZF8zRCA9IGMuZGVmYXVsdF9mb2dfZW5kXzNEO1xuXHRcdHRoaXMuZm9nX2RlbnNpdHlfM0QgPSBjLmRlZmF1bHRfZm9nX2RlbnNpdHlfM0Q7XG5cdFx0dGhpcy5zaGFkb3dfM0QgPSBjLmRlZmF1bHRfc2hhZG93XzNEO1xuXHRcdHRoaXMuc2hhZG93X2ludGVuc2l0eV8zRCA9IGMuZGVmYXVsdF9zaGFkb3dfaW50ZW5zaXR5XzNEO1xuXHRcdHRoaXMuZmxhdF9jb2xvcl8zRCA9IGMuZGVmYXVsdF9mbGF0X2NvbG9yXzNEO1xuXHRcdHRoaXMuYW50aWFsaWFzXzNEID0gYy5kZWZhdWx0X2FudGlhbGlhc18zRDtcblx0XHR0aGlzLmdhbW1hQ29ycmVjdGlvbl8zRCA9IGMuZGVmYXVsdF9nYW1tYUNvcnJlY3Rpb25fM0Q7XG5cdFx0dGhpcy5jb2xvckhvdmVyID0gYy5kZWZhdWx0X2NvbG9ySG92ZXI7XG5cdFx0dGhpcy5jb2xvclNlbGVjdCA9IGMuZGVmYXVsdF9jb2xvclNlbGVjdDtcblx0XHR0aGlzLmNvbG9yRXJyb3IgPSBjLmRlZmF1bHRfY29sb3JFcnJvcjtcblx0XHR0aGlzLmNvbG9yUHJldmlldyA9IGMuZGVmYXVsdF9jb2xvclByZXZpZXc7XG5cdFx0XG5cdFx0Ly8gM0Qgc2hhZGVyc1xuXHRcdC8vIHNzYW8gcHJvcGVydGllc1xuXHRcdHRoaXMuc3Nhb18zRCA9IGMuZGVmYXVsdF9zc2FvXzNEO1xuXHRcdHRoaXMuc3Nhb19rZXJuZWxfcmFkaXVzID0gYy5kZWZhdWx0X3NzYW9fa2VybmVsX3JhZGl1cztcblx0XHR0aGlzLnNzYW9fa2VybmVsX3NhbXBsZXMgPSBjLmRlZmF1bHRfc3Nhb19rZXJuZWxfc2FtcGxlcztcblx0XHR0aGlzLnNzYW9fcG93ZXIgPSBjLmRlZmF1bHRfc3Nhb19wb3dlcjtcblx0XHQvLyBvdXRsaW5lIHByb3BlcnRpZXNcblx0XHR0aGlzLm91dGxpbmVfM0QgPSBjLmRlZmF1bHRfb3V0bGluZV8zRDtcblx0XHR0aGlzLm91dGxpbmVfbm9ybWFsX3RocmVzaG9sZCA9IGMuZGVmYXVsdF9vdXRsaW5lX25vcm1hbF90aHJlc2hvbGQ7XG5cdFx0dGhpcy5vdXRsaW5lX2RlcHRoX3RocmVzaG9sZCA9IGMuZGVmYXVsdF9vdXRsaW5lX2RlcHRoX3RocmVzaG9sZDtcblx0XHR0aGlzLm91dGxpbmVfdGhpY2tuZXNzID0gYy5kZWZhdWx0X291dGxpbmVfdGhpY2tuZXNzO1xuXHRcdC8vIGZ4YWEgcHJvcGVydGllc1xuXHRcdHRoaXMuZnhhYV9lZGdlVGhyZXNob2xkID0gYy5kZWZhdWx0X2Z4YWFfZWRnZVRocmVzaG9sZCA7XG5cdFx0dGhpcy5meGFhX2VkZ2VUaHJlc2hvbGRNaW4gPSBjLmRlZmF1bHRfZnhhYV9lZGdlVGhyZXNob2xkTWluIDtcblx0XHR0aGlzLmZ4YWFfc2VhcmNoU3RlcHMgPSBjLmRlZmF1bHRfZnhhYV9zZWFyY2hTdGVwcztcblx0XHR0aGlzLmZ4YWFfc2VhcmNoVGhyZXNob2xkID0gYy5kZWZhdWx0X2Z4YWFfc2VhcmNoVGhyZXNob2xkO1xuXHRcdHRoaXMuZnhhYV9zdWJwaXhDYXAgPSBjLmRlZmF1bHRfZnhhYV9zdWJwaXhDYXA7XG5cdFx0dGhpcy5meGFhX3N1YnBpeFRyaW0gPSBjLmRlZmF1bHRfZnhhYV9zdWJwaXhUcmltO1xuXG5cdFx0Ly8gYXRvbSBwcm9wZXJ0aWVzXG5cdFx0dGhpcy5hdG9tc19kaXNwbGF5ID0gYy5kZWZhdWx0X2F0b21zX2Rpc3BsYXk7XG5cdFx0dGhpcy5hdG9tc19jb2xvciA9IGMuZGVmYXVsdF9hdG9tc19jb2xvcjtcblx0XHR0aGlzLmF0b21zX2ZvbnRfc2l6ZV8yRCA9IGMuZGVmYXVsdF9hdG9tc19mb250X3NpemVfMkQ7XG5cdFx0dGhpcy5hdG9tc19mb250X2ZhbWlsaWVzXzJEID0gYy5kZWZhdWx0X2F0b21zX2ZvbnRfZmFtaWxpZXNfMkQuc2xpY2UoMCk7XG5cdFx0dGhpcy5hdG9tc19mb250X2JvbGRfMkQgPSBjLmRlZmF1bHRfYXRvbXNfZm9udF9ib2xkXzJEO1xuXHRcdHRoaXMuYXRvbXNfZm9udF9pdGFsaWNfMkQgPSBjLmRlZmF1bHRfYXRvbXNfZm9udF9pdGFsaWNfMkQ7XG5cdFx0dGhpcy5hdG9tc19jaXJjbGVzXzJEID0gYy5kZWZhdWx0X2F0b21zX2NpcmNsZXNfMkQ7XG5cdFx0dGhpcy5hdG9tc19jaXJjbGVEaWFtZXRlcl8yRCA9IGMuZGVmYXVsdF9hdG9tc19jaXJjbGVEaWFtZXRlcl8yRDtcblx0XHR0aGlzLmF0b21zX2NpcmNsZUJvcmRlcldpZHRoXzJEID0gYy5kZWZhdWx0X2F0b21zX2NpcmNsZUJvcmRlcldpZHRoXzJEO1xuXHRcdHRoaXMuYXRvbXNfbG9uZVBhaXJEaXN0YW5jZV8yRCA9IGMuZGVmYXVsdF9hdG9tc19sb25lUGFpckRpc3RhbmNlXzJEO1xuXHRcdHRoaXMuYXRvbXNfbG9uZVBhaXJTcHJlYWRfMkQgPSBjLmRlZmF1bHRfYXRvbXNfbG9uZVBhaXJTcHJlYWRfMkQ7XG5cdFx0dGhpcy5hdG9tc19sb25lUGFpckRpYW1ldGVyXzJEID0gYy5kZWZhdWx0X2F0b21zX2xvbmVQYWlyRGlhbWV0ZXJfMkQ7XG5cdFx0dGhpcy5hdG9tc191c2VKTU9MQ29sb3JzID0gYy5kZWZhdWx0X2F0b21zX3VzZUpNT0xDb2xvcnM7XG5cdFx0dGhpcy5hdG9tc191c2VQWU1PTENvbG9ycyA9IGMuZGVmYXVsdF9hdG9tc191c2VQWU1PTENvbG9ycztcblx0XHR0aGlzLmF0b21zX0hCbGFja18yRCA9IGMuZGVmYXVsdF9hdG9tc19IQmxhY2tfMkQ7XG5cdFx0dGhpcy5hdG9tc19pbXBsaWNpdEh5ZHJvZ2Vuc18yRCA9IGMuZGVmYXVsdF9hdG9tc19pbXBsaWNpdEh5ZHJvZ2Vuc18yRDtcblx0XHR0aGlzLmF0b21zX2Rpc3BsYXlUZXJtaW5hbENhcmJvbkxhYmVsc18yRCA9IGMuZGVmYXVsdF9hdG9tc19kaXNwbGF5VGVybWluYWxDYXJib25MYWJlbHNfMkQ7XG5cdFx0dGhpcy5hdG9tc19zaG93SGlkZGVuQ2FyYm9uc18yRCA9IGMuZGVmYXVsdF9hdG9tc19zaG93SGlkZGVuQ2FyYm9uc18yRDtcblx0XHR0aGlzLmF0b21zX3Nob3dBdHRyaWJ1dGVkQ2FyYm9uc18yRCA9IGMuZGVmYXVsdF9hdG9tc19zaG93QXR0cmlidXRlZENhcmJvbnNfMkQ7XG5cdFx0dGhpcy5hdG9tc19kaXNwbGF5QWxsQ2FyYm9uTGFiZWxzXzJEID0gYy5kZWZhdWx0X2F0b21zX2Rpc3BsYXlBbGxDYXJib25MYWJlbHNfMkQ7XG5cdFx0dGhpcy5hdG9tc19yZXNvbHV0aW9uXzNEID0gYy5kZWZhdWx0X2F0b21zX3Jlc29sdXRpb25fM0Q7XG5cdFx0dGhpcy5hdG9tc19zcGhlcmVEaWFtZXRlcl8zRCA9IGMuZGVmYXVsdF9hdG9tc19zcGhlcmVEaWFtZXRlcl8zRDtcblx0XHR0aGlzLmF0b21zX3VzZVZEV0RpYW1ldGVyc18zRCA9IGMuZGVmYXVsdF9hdG9tc191c2VWRFdEaWFtZXRlcnNfM0Q7XG5cdFx0dGhpcy5hdG9tc192ZHdNdWx0aXBsaWVyXzNEID0gYy5kZWZhdWx0X2F0b21zX3Zkd011bHRpcGxpZXJfM0Q7XG5cdFx0dGhpcy5hdG9tc19tYXRlcmlhbEFtYmllbnRDb2xvcl8zRCA9IGMuZGVmYXVsdF9hdG9tc19tYXRlcmlhbEFtYmllbnRDb2xvcl8zRDtcblx0XHR0aGlzLmF0b21zX21hdGVyaWFsU3BlY3VsYXJDb2xvcl8zRCA9IGMuZGVmYXVsdF9hdG9tc19tYXRlcmlhbFNwZWN1bGFyQ29sb3JfM0Q7XG5cdFx0dGhpcy5hdG9tc19tYXRlcmlhbFNoaW5pbmVzc18zRCA9IGMuZGVmYXVsdF9hdG9tc19tYXRlcmlhbFNoaW5pbmVzc18zRDtcblx0XHR0aGlzLmF0b21zX25vbkJvbmRlZEFzU3RhcnNfM0QgPSBjLmRlZmF1bHRfYXRvbXNfbm9uQm9uZGVkQXNTdGFyc18zRDtcblx0XHR0aGlzLmF0b21zX2Rpc3BsYXlMYWJlbHNfM0QgPSBjLmRlZmF1bHRfYXRvbXNfZGlzcGxheUxhYmVsc18zRDtcblxuXHRcdC8vIGJvbmQgcHJvcGVydGllc1xuXHRcdHRoaXMuYm9uZHNfZGlzcGxheSA9IGMuZGVmYXVsdF9ib25kc19kaXNwbGF5O1xuXHRcdHRoaXMuYm9uZHNfY29sb3IgPSBjLmRlZmF1bHRfYm9uZHNfY29sb3I7XG5cdFx0dGhpcy5ib25kc193aWR0aF8yRCA9IGMuZGVmYXVsdF9ib25kc193aWR0aF8yRDtcblx0XHR0aGlzLmJvbmRzX3VzZUFic29sdXRlU2F0dXJhdGlvbldpZHRoc18yRCA9IGMuZGVmYXVsdF9ib25kc191c2VBYnNvbHV0ZVNhdHVyYXRpb25XaWR0aHNfMkQ7XG5cdFx0dGhpcy5ib25kc19zYXR1cmF0aW9uV2lkdGhfMkQgPSBjLmRlZmF1bHRfYm9uZHNfc2F0dXJhdGlvbldpZHRoXzJEO1xuXHRcdHRoaXMuYm9uZHNfc2F0dXJhdGlvbldpZHRoQWJzXzJEID0gYy5kZWZhdWx0X2JvbmRzX3NhdHVyYXRpb25XaWR0aEFic18yRDtcblx0XHR0aGlzLmJvbmRzX2VuZHNfMkQgPSBjLmRlZmF1bHRfYm9uZHNfZW5kc18yRDtcblx0XHR0aGlzLmJvbmRzX3NwbGl0Q29sb3IgPSBjLmRlZmF1bHRfYm9uZHNfc3BsaXRDb2xvcjtcblx0XHR0aGlzLmJvbmRzX2NvbG9yR3JhZGllbnQgPSBjLmRlZmF1bHRfYm9uZHNfY29sb3JHcmFkaWVudDtcblx0XHR0aGlzLmJvbmRzX3NhdHVyYXRpb25BbmdsZV8yRCA9IGMuZGVmYXVsdF9ib25kc19zYXR1cmF0aW9uQW5nbGVfMkQ7XG5cdFx0dGhpcy5ib25kc19zeW1tZXRyaWNhbF8yRCA9IGMuZGVmYXVsdF9ib25kc19zeW1tZXRyaWNhbF8yRDtcblx0XHR0aGlzLmJvbmRzX2NsZWFyT3ZlcmxhcHNfMkQgPSBjLmRlZmF1bHRfYm9uZHNfY2xlYXJPdmVybGFwc18yRDtcblx0XHR0aGlzLmJvbmRzX292ZXJsYXBDbGVhcldpZHRoXzJEID0gYy5kZWZhdWx0X2JvbmRzX292ZXJsYXBDbGVhcldpZHRoXzJEO1xuXHRcdHRoaXMuYm9uZHNfYXRvbUxhYmVsQnVmZmVyXzJEID0gYy5kZWZhdWx0X2JvbmRzX2F0b21MYWJlbEJ1ZmZlcl8yRDtcblx0XHR0aGlzLmJvbmRzX3dlZGdlVGhpY2tuZXNzXzJEID0gYy5kZWZhdWx0X2JvbmRzX3dlZGdlVGhpY2tuZXNzXzJEO1xuXHRcdHRoaXMuYm9uZHNfd2F2eUxlbmd0aF8yRCA9IGMuZGVmYXVsdF9ib25kc193YXZ5TGVuZ3RoXzJEO1xuXHRcdHRoaXMuYm9uZHNfaGFzaFdpZHRoXzJEID0gYy5kZWZhdWx0X2JvbmRzX2hhc2hXaWR0aF8yRDtcblx0XHR0aGlzLmJvbmRzX2hhc2hTcGFjaW5nXzJEID0gYy5kZWZhdWx0X2JvbmRzX2hhc2hTcGFjaW5nXzJEO1xuXHRcdHRoaXMuYm9uZHNfZG90U2l6ZV8yRCA9IGMuZGVmYXVsdF9ib25kc19kb3RTaXplXzJEO1xuXHRcdHRoaXMuYm9uZHNfbGV3aXNTdHlsZV8yRCA9IGMuZGVmYXVsdF9ib25kc19sZXdpc1N0eWxlXzJEO1xuXHRcdHRoaXMuYm9uZHNfc2hvd0JvbmRPcmRlcnNfM0QgPSBjLmRlZmF1bHRfYm9uZHNfc2hvd0JvbmRPcmRlcnNfM0Q7XG5cdFx0dGhpcy5ib25kc19yZXNvbHV0aW9uXzNEID0gYy5kZWZhdWx0X2JvbmRzX3Jlc29sdXRpb25fM0Q7XG5cdFx0dGhpcy5ib25kc19yZW5kZXJBc0xpbmVzXzNEID0gYy5kZWZhdWx0X2JvbmRzX3JlbmRlckFzTGluZXNfM0Q7XG5cdFx0dGhpcy5ib25kc19jeWxpbmRlckRpYW1ldGVyXzNEID0gYy5kZWZhdWx0X2JvbmRzX2N5bGluZGVyRGlhbWV0ZXJfM0Q7XG5cdFx0dGhpcy5ib25kc19waWxsSGVpZ2h0XzNEID0gYy5kZWZhdWx0X2JvbmRzX3BpbGxIZWlnaHRfM0Q7XG5cdFx0dGhpcy5ib25kc19waWxsTGF0aXR1ZGVSZXNvbHV0aW9uXzNEID0gYy5kZWZhdWx0X2JvbmRzX3BpbGxMYXRpdHVkZVJlc29sdXRpb25fM0Q7XG5cdFx0dGhpcy5ib25kc19waWxsTG9uZ2l0dWRlUmVzb2x1dGlvbl8zRCA9IGMuZGVmYXVsdF9ib25kc19waWxsTG9uZ2l0dWRlUmVzb2x1dGlvbl8zRDtcblx0XHR0aGlzLmJvbmRzX3BpbGxTcGFjaW5nXzNEID0gYy5kZWZhdWx0X2JvbmRzX3BpbGxTcGFjaW5nXzNEO1xuXHRcdHRoaXMuYm9uZHNfcGlsbERpYW1ldGVyXzNEID0gYy5kZWZhdWx0X2JvbmRzX3BpbGxEaWFtZXRlcl8zRDtcblx0XHR0aGlzLmJvbmRzX21hdGVyaWFsQW1iaWVudENvbG9yXzNEID0gYy5kZWZhdWx0X2JvbmRzX21hdGVyaWFsQW1iaWVudENvbG9yXzNEO1xuXHRcdHRoaXMuYm9uZHNfbWF0ZXJpYWxTcGVjdWxhckNvbG9yXzNEID0gYy5kZWZhdWx0X2JvbmRzX21hdGVyaWFsU3BlY3VsYXJDb2xvcl8zRDtcblx0XHR0aGlzLmJvbmRzX21hdGVyaWFsU2hpbmluZXNzXzNEID0gYy5kZWZhdWx0X2JvbmRzX21hdGVyaWFsU2hpbmluZXNzXzNEO1xuXG5cdFx0Ly8gbWFjcm9tb2xlY3VsYXIgcHJvcGVydGllc1xuXHRcdHRoaXMucHJvdGVpbnNfZGlzcGxheVJpYmJvbiA9IGMuZGVmYXVsdF9wcm90ZWluc19kaXNwbGF5UmliYm9uO1xuXHRcdHRoaXMucHJvdGVpbnNfZGlzcGxheUJhY2tib25lID0gYy5kZWZhdWx0X3Byb3RlaW5zX2Rpc3BsYXlCYWNrYm9uZTtcblx0XHR0aGlzLnByb3RlaW5zX2JhY2tib25lVGhpY2tuZXNzID0gYy5kZWZhdWx0X3Byb3RlaW5zX2JhY2tib25lVGhpY2tuZXNzO1xuXHRcdHRoaXMucHJvdGVpbnNfYmFja2JvbmVDb2xvciA9IGMuZGVmYXVsdF9wcm90ZWluc19iYWNrYm9uZUNvbG9yO1xuXHRcdHRoaXMucHJvdGVpbnNfcmliYm9uQ2FydG9vbml6ZSA9IGMuZGVmYXVsdF9wcm90ZWluc19yaWJib25DYXJ0b29uaXplO1xuXHRcdHRoaXMucHJvdGVpbnNfcmVzaWR1ZUNvbG9yID0gYy5kZWZhdWx0X3Byb3RlaW5zX3Jlc2lkdWVDb2xvcjtcblx0XHR0aGlzLnByb3RlaW5zX3ByaW1hcnlDb2xvciA9IGMuZGVmYXVsdF9wcm90ZWluc19wcmltYXJ5Q29sb3I7XG5cdFx0dGhpcy5wcm90ZWluc19zZWNvbmRhcnlDb2xvciA9IGMuZGVmYXVsdF9wcm90ZWluc19zZWNvbmRhcnlDb2xvcjtcblx0XHR0aGlzLnByb3RlaW5zX3JpYmJvbkNhcnRvb25IZWxpeFByaW1hcnlDb2xvciA9IGMuZGVmYXVsdF9wcm90ZWluc19yaWJib25DYXJ0b29uSGVsaXhQcmltYXJ5Q29sb3I7XG5cdFx0dGhpcy5wcm90ZWluc19yaWJib25DYXJ0b29uSGVsaXhTZWNvbmRhcnlDb2xvciA9IGMuZGVmYXVsdF9wcm90ZWluc19yaWJib25DYXJ0b29uSGVsaXhTZWNvbmRhcnlDb2xvcjtcblx0XHR0aGlzLnByb3RlaW5zX3R1YmVDb2xvciA9IGMuZGVmYXVsdF9wcm90ZWluc190dWJlQ29sb3I7XG5cdFx0dGhpcy5wcm90ZWluc190dWJlUmVzb2x1dGlvbl8zRCA9IGMuZGVmYXVsdF9wcm90ZWluc190dWJlUmVzb2x1dGlvbl8zRDtcblx0XHR0aGlzLnByb3RlaW5zX2Rpc3BsYXlQaXBlUGxhbmsgPSBjLmRlZmF1bHRfcHJvdGVpbnNfZGlzcGxheVBpcGVQbGFuaztcblx0XHR0aGlzLnByb3RlaW5zX3JpYmJvbkNhcnRvb25TaGVldENvbG9yID0gYy5kZWZhdWx0X3Byb3RlaW5zX3JpYmJvbkNhcnRvb25TaGVldENvbG9yO1xuXHRcdHRoaXMucHJvdGVpbnNfcmliYm9uVGhpY2tuZXNzID0gYy5kZWZhdWx0X3Byb3RlaW5zX3JpYmJvblRoaWNrbmVzcztcblx0XHR0aGlzLnByb3RlaW5zX3R1YmVUaGlja25lc3MgPSBjLmRlZmF1bHRfcHJvdGVpbnNfdHViZVRoaWNrbmVzcztcblx0XHR0aGlzLnByb3RlaW5zX3BsYW5rU2hlZXRXaWR0aCA9IGMuZGVmYXVsdF9wcm90ZWluc19wbGFua1NoZWV0V2lkdGg7XG5cdFx0dGhpcy5wcm90ZWluc19jeWxpbmRlckhlbGl4RGlhbWV0ZXIgPSBjLmRlZmF1bHRfcHJvdGVpbnNfY3lsaW5kZXJIZWxpeERpYW1ldGVyO1xuXHRcdHRoaXMucHJvdGVpbnNfdmVydGljYWxSZXNvbHV0aW9uID0gYy5kZWZhdWx0X3Byb3RlaW5zX3ZlcnRpY2FsUmVzb2x1dGlvbjtcblx0XHR0aGlzLnByb3RlaW5zX2hvcml6b250YWxSZXNvbHV0aW9uID0gYy5kZWZhdWx0X3Byb3RlaW5zX2hvcml6b250YWxSZXNvbHV0aW9uO1xuXHRcdHRoaXMucHJvdGVpbnNfbWF0ZXJpYWxBbWJpZW50Q29sb3JfM0QgPSBjLmRlZmF1bHRfcHJvdGVpbnNfbWF0ZXJpYWxBbWJpZW50Q29sb3JfM0Q7XG5cdFx0dGhpcy5wcm90ZWluc19tYXRlcmlhbFNwZWN1bGFyQ29sb3JfM0QgPSBjLmRlZmF1bHRfcHJvdGVpbnNfbWF0ZXJpYWxTcGVjdWxhckNvbG9yXzNEO1xuXHRcdHRoaXMucHJvdGVpbnNfbWF0ZXJpYWxTaGluaW5lc3NfM0QgPSBjLmRlZmF1bHRfcHJvdGVpbnNfbWF0ZXJpYWxTaGluaW5lc3NfM0Q7XG5cdFx0dGhpcy5tYWNyb19kaXNwbGF5QXRvbXMgPSBjLmRlZmF1bHRfbWFjcm9fZGlzcGxheUF0b21zO1xuXHRcdHRoaXMubWFjcm9fZGlzcGxheUJvbmRzID0gYy5kZWZhdWx0X21hY3JvX2Rpc3BsYXlCb25kcztcblx0XHR0aGlzLm1hY3JvX2F0b21Ub0xpZ2FuZERpc3RhbmNlID0gYy5kZWZhdWx0X21hY3JvX2F0b21Ub0xpZ2FuZERpc3RhbmNlO1xuXHRcdHRoaXMubnVjbGVpY3NfZGlzcGxheSA9IGMuZGVmYXVsdF9udWNsZWljc19kaXNwbGF5O1xuXHRcdHRoaXMubnVjbGVpY3NfdHViZUNvbG9yID0gYy5kZWZhdWx0X251Y2xlaWNzX3R1YmVDb2xvcjtcblx0XHR0aGlzLm51Y2xlaWNzX2Jhc2VDb2xvciA9IGMuZGVmYXVsdF9udWNsZWljc19iYXNlQ29sb3I7XG5cdFx0dGhpcy5udWNsZWljc19yZXNpZHVlQ29sb3IgPSBjLmRlZmF1bHRfbnVjbGVpY3NfcmVzaWR1ZUNvbG9yO1xuXHRcdHRoaXMubnVjbGVpY3NfdHViZVRoaWNrbmVzcyA9IGMuZGVmYXVsdF9udWNsZWljc190dWJlVGhpY2tuZXNzO1xuXHRcdHRoaXMubnVjbGVpY3NfdHViZVJlc29sdXRpb25fM0QgPSBjLmRlZmF1bHRfbnVjbGVpY3NfdHViZVJlc29sdXRpb25fM0Q7XG5cdFx0dGhpcy5udWNsZWljc192ZXJ0aWNhbFJlc29sdXRpb24gPSBjLmRlZmF1bHRfbnVjbGVpY3NfdmVydGljYWxSZXNvbHV0aW9uO1xuXHRcdHRoaXMubnVjbGVpY3NfbWF0ZXJpYWxBbWJpZW50Q29sb3JfM0QgPSBjLmRlZmF1bHRfbnVjbGVpY3NfbWF0ZXJpYWxBbWJpZW50Q29sb3JfM0Q7XG5cdFx0dGhpcy5udWNsZWljc19tYXRlcmlhbFNwZWN1bGFyQ29sb3JfM0QgPSBjLmRlZmF1bHRfbnVjbGVpY3NfbWF0ZXJpYWxTcGVjdWxhckNvbG9yXzNEO1xuXHRcdHRoaXMubnVjbGVpY3NfbWF0ZXJpYWxTaGluaW5lc3NfM0QgPSBjLmRlZmF1bHRfbnVjbGVpY3NfbWF0ZXJpYWxTaGluaW5lc3NfM0Q7XG5cdFx0dGhpcy5tYWNyb19zaG93V2F0ZXIgPSBjLmRlZmF1bHRfbWFjcm9fc2hvd1dhdGVyO1xuXHRcdHRoaXMubWFjcm9fY29sb3JCeUNoYWluID0gYy5kZWZhdWx0X21hY3JvX2NvbG9yQnlDaGFpbjtcblx0XHR0aGlzLm1hY3JvX3JhaW5ib3dDb2xvcnMgPSBjLmRlZmF1bHRfbWFjcm9fcmFpbmJvd0NvbG9ycy5zbGljZSgwKTtcblxuXHRcdC8vIHN1cmZhY2UgcHJvcGVydGllc1xuXHRcdHRoaXMuc3VyZmFjZXNfZGlzcGxheSA9IGMuZGVmYXVsdF9zdXJmYWNlc19kaXNwbGF5O1xuXHRcdHRoaXMuc3VyZmFjZXNfYWxwaGEgPSBjLmRlZmF1bHRfc3VyZmFjZXNfYWxwaGE7XG5cdFx0dGhpcy5zdXJmYWNlc19zdHlsZSA9IGMuZGVmYXVsdF9zdXJmYWNlc19zdHlsZTtcblx0XHR0aGlzLnN1cmZhY2VzX2NvbG9yID0gYy5kZWZhdWx0X3N1cmZhY2VzX2NvbG9yO1xuXHRcdHRoaXMuc3VyZmFjZXNfbWF0ZXJpYWxBbWJpZW50Q29sb3JfM0QgPSBjLmRlZmF1bHRfc3VyZmFjZXNfbWF0ZXJpYWxBbWJpZW50Q29sb3JfM0Q7XG5cdFx0dGhpcy5zdXJmYWNlc19tYXRlcmlhbFNwZWN1bGFyQ29sb3JfM0QgPSBjLmRlZmF1bHRfc3VyZmFjZXNfbWF0ZXJpYWxTcGVjdWxhckNvbG9yXzNEO1xuXHRcdHRoaXMuc3VyZmFjZXNfbWF0ZXJpYWxTaGluaW5lc3NfM0QgPSBjLmRlZmF1bHRfc3VyZmFjZXNfbWF0ZXJpYWxTaGluaW5lc3NfM0Q7XG5cblx0XHQvLyBzcGVjdHJ1bSBwcm9wZXJ0aWVzXG5cdFx0dGhpcy5wbG90c19jb2xvciA9IGMuZGVmYXVsdF9wbG90c19jb2xvcjtcblx0XHR0aGlzLnBsb3RzX3dpZHRoID0gYy5kZWZhdWx0X3Bsb3RzX3dpZHRoO1xuXHRcdHRoaXMucGxvdHNfc2hvd0ludGVncmF0aW9uID0gYy5kZWZhdWx0X3Bsb3RzX3Nob3dJbnRlZ3JhdGlvbjtcblx0XHR0aGlzLnBsb3RzX2ludGVncmF0aW9uQ29sb3IgPSBjLmRlZmF1bHRfcGxvdHNfaW50ZWdyYXRpb25Db2xvcjtcblx0XHR0aGlzLnBsb3RzX2ludGVncmF0aW9uTGluZVdpZHRoID0gYy5kZWZhdWx0X3Bsb3RzX2ludGVncmF0aW9uTGluZVdpZHRoO1xuXHRcdHRoaXMucGxvdHNfc2hvd0dyaWQgPSBjLmRlZmF1bHRfcGxvdHNfc2hvd0dyaWQ7XG5cdFx0dGhpcy5wbG90c19ncmlkQ29sb3IgPSBjLmRlZmF1bHRfcGxvdHNfZ3JpZENvbG9yO1xuXHRcdHRoaXMucGxvdHNfZ3JpZExpbmVXaWR0aCA9IGMuZGVmYXVsdF9wbG90c19ncmlkTGluZVdpZHRoO1xuXHRcdHRoaXMucGxvdHNfc2hvd1lBeGlzID0gYy5kZWZhdWx0X3Bsb3RzX3Nob3dZQXhpcztcblx0XHR0aGlzLnBsb3RzX2ZsaXBYQXhpcyA9IGMuZGVmYXVsdF9wbG90c19mbGlwWEF4aXM7XG5cblx0XHQvLyBzaGFwZSBwcm9wZXJ0aWVzXG5cdFx0dGhpcy50ZXh0X2ZvbnRfc2l6ZSA9IGMuZGVmYXVsdF90ZXh0X2ZvbnRfc2l6ZTtcblx0XHR0aGlzLnRleHRfZm9udF9mYW1pbGllcyA9IGMuZGVmYXVsdF90ZXh0X2ZvbnRfZmFtaWxpZXMuc2xpY2UoMCk7XG5cdFx0dGhpcy50ZXh0X2ZvbnRfYm9sZCA9IGMuZGVmYXVsdF90ZXh0X2ZvbnRfYm9sZDtcblx0XHR0aGlzLnRleHRfZm9udF9pdGFsaWMgPSBjLmRlZmF1bHRfdGV4dF9mb250X2l0YWxpYztcblx0XHR0aGlzLnRleHRfZm9udF9zdHJva2VfM0QgPSBjLmRlZmF1bHRfdGV4dF9mb250X3N0cm9rZV8zRDtcblx0XHR0aGlzLnRleHRfY29sb3IgPSBjLmRlZmF1bHRfdGV4dF9jb2xvcjtcblx0XHR0aGlzLnNoYXBlc19jb2xvciA9IGMuZGVmYXVsdF9zaGFwZXNfY29sb3I7XG5cdFx0dGhpcy5zaGFwZXNfbGluZVdpZHRoID0gYy5kZWZhdWx0X3NoYXBlc19saW5lV2lkdGg7XG5cdFx0dGhpcy5zaGFwZXNfcG9pbnRTaXplID0gYy5kZWZhdWx0X3NoYXBlc19wb2ludFNpemU7XG5cdFx0dGhpcy5zaGFwZXNfYXJyb3dMZW5ndGhfMkQgPSBjLmRlZmF1bHRfc2hhcGVzX2Fycm93TGVuZ3RoXzJEO1xuXHRcdHRoaXMuY29tcGFzc19kaXNwbGF5ID0gYy5kZWZhdWx0X2NvbXBhc3NfZGlzcGxheTtcblx0XHR0aGlzLmNvbXBhc3NfYXhpc1hDb2xvcl8zRCA9IGMuZGVmYXVsdF9jb21wYXNzX2F4aXNYQ29sb3JfM0Q7XG5cdFx0dGhpcy5jb21wYXNzX2F4aXNZQ29sb3JfM0QgPSBjLmRlZmF1bHRfY29tcGFzc19heGlzWUNvbG9yXzNEO1xuXHRcdHRoaXMuY29tcGFzc19heGlzWkNvbG9yXzNEID0gYy5kZWZhdWx0X2NvbXBhc3NfYXhpc1pDb2xvcl8zRDtcblx0XHR0aGlzLmNvbXBhc3Nfc2l6ZV8zRCA9IGMuZGVmYXVsdF9jb21wYXNzX3NpemVfM0Q7XG5cdFx0dGhpcy5jb21wYXNzX3Jlc29sdXRpb25fM0QgPSBjLmRlZmF1bHRfY29tcGFzc19yZXNvbHV0aW9uXzNEO1xuXHRcdHRoaXMuY29tcGFzc19kaXNwbGF5VGV4dF8zRCA9IGMuZGVmYXVsdF9jb21wYXNzX2Rpc3BsYXlUZXh0XzNEO1xuXHRcdHRoaXMuY29tcGFzc190eXBlXzNEID0gYy5kZWZhdWx0X2NvbXBhc3NfdHlwZV8zRDtcblx0XHR0aGlzLm1lYXN1cmVtZW50X3VwZGF0ZV8zRCA9IGMuZGVmYXVsdF9tZWFzdXJlbWVudF91cGRhdGVfM0Q7XG5cdFx0dGhpcy5tZWFzdXJlbWVudF9hbmdsZUJhbmRzXzNEID0gYy5kZWZhdWx0X21lYXN1cmVtZW50X2FuZ2xlQmFuZHNfM0Q7XG5cdFx0dGhpcy5tZWFzdXJlbWVudF9kaXNwbGF5VGV4dF8zRCA9IGMuZGVmYXVsdF9tZWFzdXJlbWVudF9kaXNwbGF5VGV4dF8zRDtcblx0fTtcblx0dmFyIF8gPSBzdHJ1Y3R1cmVzLlZpc3VhbFNwZWNpZmljYXRpb25zLnByb3RvdHlwZTtcblx0Xy5zZXQzRFJlcHJlc2VudGF0aW9uID0gZnVuY3Rpb24ocmVwcmVzZW50YXRpb24pIHtcblx0XHR0aGlzLmF0b21zX2Rpc3BsYXkgPSB0cnVlO1xuXHRcdHRoaXMuYm9uZHNfZGlzcGxheSA9IHRydWU7XG5cdFx0dGhpcy5ib25kc19jb2xvciA9ICcjNzc3Nzc3Jztcblx0XHR0aGlzLmF0b21zX3VzZVZEV0RpYW1ldGVyc18zRCA9IHRydWU7XG5cdFx0dGhpcy5hdG9tc191c2VKTU9MQ29sb3JzID0gdHJ1ZTtcblx0XHR0aGlzLmJvbmRzX3NwbGl0Q29sb3IgPSB0cnVlO1xuXHRcdHRoaXMuYm9uZHNfc2hvd0JvbmRPcmRlcnNfM0QgPSB0cnVlO1xuXHRcdHRoaXMuYm9uZHNfcmVuZGVyQXNMaW5lc18zRCA9IGZhbHNlO1xuXHRcdGlmIChyZXByZXNlbnRhdGlvbiA9PT0gJ0JhbGwgYW5kIFN0aWNrJykge1xuXHRcdFx0dGhpcy5hdG9tc192ZHdNdWx0aXBsaWVyXzNEID0gLjM7XG5cdFx0XHR0aGlzLmJvbmRzX3NwbGl0Q29sb3IgPSBmYWxzZTtcblx0XHRcdHRoaXMuYm9uZHNfY3lsaW5kZXJEaWFtZXRlcl8zRCA9IC4zO1xuXHRcdFx0dGhpcy5ib25kc19tYXRlcmlhbEFtYmllbnRDb2xvcl8zRCA9IGMuZGVmYXVsdF9hdG9tc19tYXRlcmlhbEFtYmllbnRDb2xvcl8zRDtcblx0XHRcdHRoaXMuYm9uZHNfcGlsbERpYW1ldGVyXzNEID0gLjE1O1xuXHRcdH0gZWxzZSBpZiAocmVwcmVzZW50YXRpb24gPT09ICd2YW4gZGVyIFdhYWxzIFNwaGVyZXMnKSB7XG5cdFx0XHR0aGlzLmJvbmRzX2Rpc3BsYXkgPSBmYWxzZTtcblx0XHRcdHRoaXMuYXRvbXNfdmR3TXVsdGlwbGllcl8zRCA9IDE7XG5cdFx0fSBlbHNlIGlmIChyZXByZXNlbnRhdGlvbiA9PT0gJ1N0aWNrJykge1xuXHRcdFx0dGhpcy5hdG9tc191c2VWRFdEaWFtZXRlcnNfM0QgPSBmYWxzZTtcblx0XHRcdHRoaXMuYm9uZHNfc2hvd0JvbmRPcmRlcnNfM0QgPSBmYWxzZTtcblx0XHRcdHRoaXMuYm9uZHNfY3lsaW5kZXJEaWFtZXRlcl8zRCA9IHRoaXMuYXRvbXNfc3BoZXJlRGlhbWV0ZXJfM0QgPSAuODtcblx0XHRcdHRoaXMuYm9uZHNfbWF0ZXJpYWxBbWJpZW50Q29sb3JfM0QgPSB0aGlzLmF0b21zX21hdGVyaWFsQW1iaWVudENvbG9yXzNEO1xuXHRcdH0gZWxzZSBpZiAocmVwcmVzZW50YXRpb24gPT09ICdXaXJlZnJhbWUnKSB7XG5cdFx0XHR0aGlzLmF0b21zX3VzZVZEV0RpYW1ldGVyc18zRCA9IGZhbHNlO1xuXHRcdFx0dGhpcy5ib25kc19jeWxpbmRlckRpYW1ldGVyXzNEID0gdGhpcy5ib25kc19waWxsRGlhbWV0ZXJfM0QgPSAuMDU7XG5cdFx0XHR0aGlzLmF0b21zX3NwaGVyZURpYW1ldGVyXzNEID0gLjE1O1xuXHRcdFx0dGhpcy5ib25kc19tYXRlcmlhbEFtYmllbnRDb2xvcl8zRCA9IGMuZGVmYXVsdF9hdG9tc19tYXRlcmlhbEFtYmllbnRDb2xvcl8zRDtcblx0XHR9IGVsc2UgaWYgKHJlcHJlc2VudGF0aW9uID09PSAnTGluZScpIHtcblx0XHRcdHRoaXMuYXRvbXNfZGlzcGxheSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5ib25kc19yZW5kZXJBc0xpbmVzXzNEID0gdHJ1ZTtcblx0XHRcdHRoaXMuYm9uZHNfd2lkdGhfMkQgPSAxO1xuXHRcdFx0dGhpcy5ib25kc19jeWxpbmRlckRpYW1ldGVyXzNEID0gLjA1O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhbGVydCgnXCInICsgcmVwcmVzZW50YXRpb24gKyAnXCIgaXMgbm90IHJlY29nbml6ZWQuIFVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBzdHJpbmdzOlxcblxcbicgKyAnMS4gQmFsbCBhbmQgU3RpY2tcXG4nICsgJzIuIHZhbiBkZXIgV2FhbHMgU3BoZXJlc1xcbicgKyAnMy4gU3RpY2tcXG4nICsgJzQuIFdpcmVmcmFtZVxcbicgKyAnNS4gTGluZVxcbicpO1xuXHRcdH1cblx0fTtcblx0Xy5jb3B5ID0gZnVuY3Rpb24oKXtcblx0XHR2YXIgY29weSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcykpO1xuXHRcdGNvcHkuc2V0M0RSZXByZXNlbnRhdGlvbiA9IF8uc2V0M0RSZXByZXNlbnRhdGlvbjtcblx0XHRyZXR1cm4gY29weTtcblx0fTtcblxufSkoQ2hlbURvb2RsZSwgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLCBNYXRoLCBKU09OKTtcbihmdW5jdGlvbihjLCBFTEVNRU5ULCBpbmZvcm1hdGljcywgc3RydWN0dXJlcywgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0aW5mb3JtYXRpY3MuZ2V0UG9pbnRzUGVyQW5nc3Ryb20gPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gYy5kZWZhdWx0X2JvbmRMZW5ndGhfMkQgLyBjLmRlZmF1bHRfYW5nc3Ryb21zUGVyQm9uZExlbmd0aDtcblx0fTtcblxuXHRpbmZvcm1hdGljcy5Cb25kRGVkdWNlciA9IGZ1bmN0aW9uKCkge1xuXHR9O1xuXHR2YXIgXyA9IGluZm9ybWF0aWNzLkJvbmREZWR1Y2VyLnByb3RvdHlwZTtcblx0Xy5tYXJnaW4gPSAxLjE7XG5cdF8uZGVkdWNlQ292YWxlbnRCb25kcyA9IGZ1bmN0aW9uKG1vbGVjdWxlLCBjdXN0b21Qb2ludHNQZXJBbmdzdHJvbSkge1xuXHRcdHZhciBwb2ludHNQZXJBbmdzdHJvbSA9IGluZm9ybWF0aWNzLmdldFBvaW50c1BlckFuZ3N0cm9tKCk7XG5cdFx0aWYgKGN1c3RvbVBvaW50c1BlckFuZ3N0cm9tKSB7XG5cdFx0XHRwb2ludHNQZXJBbmdzdHJvbSA9IGN1c3RvbVBvaW50c1BlckFuZ3N0cm9tO1xuXHRcdH1cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9sZWN1bGUuYXRvbXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0Zm9yICggdmFyIGogPSBpICsgMTsgaiA8IGlpOyBqKyspIHtcblx0XHRcdFx0dmFyIGZpcnN0ID0gbW9sZWN1bGUuYXRvbXNbaV07XG5cdFx0XHRcdHZhciBzZWNvbmQgPSBtb2xlY3VsZS5hdG9tc1tqXTtcblx0XHRcdFx0aWYgKGZpcnN0LmRpc3RhbmNlM0Qoc2Vjb25kKSA8IChFTEVNRU5UW2ZpcnN0LmxhYmVsXS5jb3ZhbGVudFJhZGl1cyArIEVMRU1FTlRbc2Vjb25kLmxhYmVsXS5jb3ZhbGVudFJhZGl1cykgKiBwb2ludHNQZXJBbmdzdHJvbSAqIHRoaXMubWFyZ2luKSB7XG5cdFx0XHRcdFx0bW9sZWN1bGUuYm9uZHMucHVzaChuZXcgc3RydWN0dXJlcy5Cb25kKGZpcnN0LCBzZWNvbmQsIDEpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxufSkoQ2hlbURvb2RsZSwgQ2hlbURvb2RsZS5FTEVNRU5ULCBDaGVtRG9vZGxlLmluZm9ybWF0aWNzLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMpO1xuKGZ1bmN0aW9uKGluZm9ybWF0aWNzLCBzdHJ1Y3R1cmVzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRpbmZvcm1hdGljcy5IeWRyb2dlbkRlZHVjZXIgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF8gPSBpbmZvcm1hdGljcy5IeWRyb2dlbkRlZHVjZXIucHJvdG90eXBlO1xuXHRfLnJlbW92ZUh5ZHJvZ2VucyA9IGZ1bmN0aW9uKG1vbGVjdWxlLCByZW1vdmVTdGVyZW8pIHtcblx0XHR2YXIgYXRvbXMgPSBbXTtcblx0XHR2YXIgYm9uZHMgPSBbXTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9sZWN1bGUuYm9uZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIGIgPSBtb2xlY3VsZS5ib25kc1tpXTtcblx0XHRcdHZhciBzYXZlID0gYi5hMS5sYWJlbCAhPT0gJ0gnICYmIGIuYTIubGFiZWwgIT09ICdIJztcblx0XHRcdGlmKCFzYXZlICYmICghcmVtb3ZlU3RlcmVvICYmIGIuc3RlcmVvICE9PSBzdHJ1Y3R1cmVzLkJvbmQuU1RFUkVPX05PTkUpKXtcblx0XHRcdFx0c2F2ZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoc2F2ZSkge1xuXHRcdFx0XHRiLmExLnRhZyA9IHRydWU7XG5cdFx0XHRcdGJvbmRzLnB1c2goYik7XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0aWYoYi5hMS5sYWJlbCA9PT0gJ0gnKXtcblx0XHRcdFx0XHRiLmExLnJlbW92ZSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoYi5hMi5sYWJlbCA9PT0gJ0gnKXtcblx0XHRcdFx0XHRiLmEyLnJlbW92ZSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IG1vbGVjdWxlLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBhID0gbW9sZWN1bGUuYXRvbXNbaV07XG5cdFx0XHRpZiAoYS5yZW1vdmUpIHtcblx0XHRcdFx0YS5yZW1vdmUgPSB1bmRlZmluZWQ7XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0YXRvbXMucHVzaChhKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0bW9sZWN1bGUuYXRvbXMgPSBhdG9tcztcblx0XHRtb2xlY3VsZS5ib25kcyA9IGJvbmRzO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLmluZm9ybWF0aWNzLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMpO1xuKGZ1bmN0aW9uKGluZm9ybWF0aWNzLCBzdHJ1Y3R1cmVzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRpbmZvcm1hdGljcy5TcGxpdHRlciA9IGZ1bmN0aW9uKCkge1xuXHR9O1xuXHR2YXIgXyA9IGluZm9ybWF0aWNzLlNwbGl0dGVyLnByb3RvdHlwZTtcblx0Xy5zcGxpdCA9IGZ1bmN0aW9uKG1vbGVjdWxlKSB7XG5cdFx0dmFyIG1vbHMgPSBbXTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9sZWN1bGUuYXRvbXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0bW9sZWN1bGUuYXRvbXNbaV0udmlzaXRlZCA9IGZhbHNlO1xuXHRcdH1cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9sZWN1bGUuYm9uZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0bW9sZWN1bGUuYm9uZHNbaV0udmlzaXRlZCA9IGZhbHNlO1xuXHRcdH1cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9sZWN1bGUuYXRvbXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIGEgPSBtb2xlY3VsZS5hdG9tc1tpXTtcblx0XHRcdGlmICghYS52aXNpdGVkKSB7XG5cdFx0XHRcdHZhciBuZXdNb2wgPSBuZXcgc3RydWN0dXJlcy5Nb2xlY3VsZSgpO1xuXHRcdFx0XHRuZXdNb2wuYXRvbXMucHVzaChhKTtcblx0XHRcdFx0YS52aXNpdGVkID0gdHJ1ZTtcblx0XHRcdFx0dmFyIHEgPSBuZXcgc3RydWN0dXJlcy5RdWV1ZSgpO1xuXHRcdFx0XHRxLmVucXVldWUoYSk7XG5cdFx0XHRcdHdoaWxlICghcS5pc0VtcHR5KCkpIHtcblx0XHRcdFx0XHR2YXIgYXRvbSA9IHEuZGVxdWV1ZSgpO1xuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtb2xlY3VsZS5ib25kcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0XHR2YXIgYiA9IG1vbGVjdWxlLmJvbmRzW2pdO1xuXHRcdFx0XHRcdFx0aWYgKGIuY29udGFpbnMoYXRvbSkgJiYgIWIudmlzaXRlZCkge1xuXHRcdFx0XHRcdFx0XHRiLnZpc2l0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRuZXdNb2wuYm9uZHMucHVzaChiKTtcblx0XHRcdFx0XHRcdFx0dmFyIG5laWdoID0gYi5nZXROZWlnaGJvcihhdG9tKTtcblx0XHRcdFx0XHRcdFx0aWYgKCFuZWlnaC52aXNpdGVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmVpZ2gudmlzaXRlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0bmV3TW9sLmF0b21zLnB1c2gobmVpZ2gpO1xuXHRcdFx0XHRcdFx0XHRcdHEuZW5xdWV1ZShuZWlnaCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0bW9scy5wdXNoKG5ld01vbCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBtb2xzO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLmluZm9ybWF0aWNzLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMpO1xuKGZ1bmN0aW9uKGluZm9ybWF0aWNzLCBpbywgc3RydWN0dXJlcywgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0aW5mb3JtYXRpY3MuU3RydWN0dXJlQnVpbGRlciA9IGZ1bmN0aW9uKCkge1xuXHR9O1xuXHR2YXIgXyA9IGluZm9ybWF0aWNzLlN0cnVjdHVyZUJ1aWxkZXIucHJvdG90eXBlO1xuXHRfLmNvcHkgPSBmdW5jdGlvbihtb2xlY3VsZSkge1xuXHRcdHZhciBqc29uID0gbmV3IGlvLkpTT05JbnRlcnByZXRlcigpO1xuXHRcdHJldHVybiBqc29uLm1vbEZyb20oanNvbi5tb2xUbyhtb2xlY3VsZSkpO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLmluZm9ybWF0aWNzLCBDaGVtRG9vZGxlLmlvLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMpO1xuKGZ1bmN0aW9uKGluZm9ybWF0aWNzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRpbmZvcm1hdGljcy5fQ291bnRlciA9IGZ1bmN0aW9uKCkge1xuXHR9O1xuXHR2YXIgXyA9IGluZm9ybWF0aWNzLl9Db3VudGVyLnByb3RvdHlwZTtcblx0Xy52YWx1ZSA9IDA7XG5cdF8ubW9sZWN1bGUgPSB1bmRlZmluZWQ7XG5cdF8uc2V0TW9sZWN1bGUgPSBmdW5jdGlvbihtb2xlY3VsZSkge1xuXHRcdHRoaXMudmFsdWUgPSAwO1xuXHRcdHRoaXMubW9sZWN1bGUgPSBtb2xlY3VsZTtcblx0XHRpZiAodGhpcy5pbm5lckNhbGN1bGF0ZSkge1xuXHRcdFx0dGhpcy5pbm5lckNhbGN1bGF0ZSgpO1xuXHRcdH1cblx0fTtcbn0pKENoZW1Eb29kbGUuaW5mb3JtYXRpY3MpO1xuKGZ1bmN0aW9uKGluZm9ybWF0aWNzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRpbmZvcm1hdGljcy5GcmVyZWphY3F1ZU51bWJlckNvdW50ZXIgPSBmdW5jdGlvbihtb2xlY3VsZSkge1xuXHRcdHRoaXMuc2V0TW9sZWN1bGUobW9sZWN1bGUpO1xuXHR9O1xuXHR2YXIgXyA9IGluZm9ybWF0aWNzLkZyZXJlamFjcXVlTnVtYmVyQ291bnRlci5wcm90b3R5cGUgPSBuZXcgaW5mb3JtYXRpY3MuX0NvdW50ZXIoKTtcblx0Xy5pbm5lckNhbGN1bGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMudmFsdWUgPSB0aGlzLm1vbGVjdWxlLmJvbmRzLmxlbmd0aCAtIHRoaXMubW9sZWN1bGUuYXRvbXMubGVuZ3RoICsgbmV3IGluZm9ybWF0aWNzLk51bWJlck9mTW9sZWN1bGVzQ291bnRlcih0aGlzLm1vbGVjdWxlKS52YWx1ZTtcblx0fTtcbn0pKENoZW1Eb29kbGUuaW5mb3JtYXRpY3MpO1xuKGZ1bmN0aW9uKHN0cnVjdHVyZXMsIGluZm9ybWF0aWNzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRpbmZvcm1hdGljcy5OdW1iZXJPZk1vbGVjdWxlc0NvdW50ZXIgPSBmdW5jdGlvbihtb2xlY3VsZSkge1xuXHRcdHRoaXMuc2V0TW9sZWN1bGUobW9sZWN1bGUpO1xuXHR9O1xuXHR2YXIgXyA9IGluZm9ybWF0aWNzLk51bWJlck9mTW9sZWN1bGVzQ291bnRlci5wcm90b3R5cGUgPSBuZXcgaW5mb3JtYXRpY3MuX0NvdW50ZXIoKTtcblx0Xy5pbm5lckNhbGN1bGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLm1vbGVjdWxlLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHRoaXMubW9sZWN1bGUuYXRvbXNbaV0udmlzaXRlZCA9IGZhbHNlO1xuXHRcdH1cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5tb2xlY3VsZS5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRpZiAoIXRoaXMubW9sZWN1bGUuYXRvbXNbaV0udmlzaXRlZCkge1xuXHRcdFx0XHR0aGlzLnZhbHVlKys7XG5cdFx0XHRcdHZhciBxID0gbmV3IHN0cnVjdHVyZXMuUXVldWUoKTtcblx0XHRcdFx0dGhpcy5tb2xlY3VsZS5hdG9tc1tpXS52aXNpdGVkID0gdHJ1ZTtcblx0XHRcdFx0cS5lbnF1ZXVlKHRoaXMubW9sZWN1bGUuYXRvbXNbaV0pO1xuXHRcdFx0XHR3aGlsZSAoIXEuaXNFbXB0eSgpKSB7XG5cdFx0XHRcdFx0dmFyIGF0b20gPSBxLmRlcXVldWUoKTtcblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gdGhpcy5tb2xlY3VsZS5ib25kcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0XHR2YXIgYiA9IHRoaXMubW9sZWN1bGUuYm9uZHNbal07XG5cdFx0XHRcdFx0XHRpZiAoYi5jb250YWlucyhhdG9tKSkge1xuXHRcdFx0XHRcdFx0XHR2YXIgbmVpZ2ggPSBiLmdldE5laWdoYm9yKGF0b20pO1xuXHRcdFx0XHRcdFx0XHRpZiAoIW5laWdoLnZpc2l0ZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRuZWlnaC52aXNpdGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRxLmVucXVldWUobmVpZ2gpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufSkoQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLCBDaGVtRG9vZGxlLmluZm9ybWF0aWNzKTtcblxuKGZ1bmN0aW9uKGluZm9ybWF0aWNzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRpbmZvcm1hdGljcy5fUmluZ0ZpbmRlciA9IGZ1bmN0aW9uKCkge1xuXHR9O1xuXHR2YXIgXyA9IGluZm9ybWF0aWNzLl9SaW5nRmluZGVyLnByb3RvdHlwZTtcblx0Xy5hdG9tcyA9IHVuZGVmaW5lZDtcblx0Xy5ib25kcyA9IHVuZGVmaW5lZDtcblx0Xy5yaW5ncyA9IHVuZGVmaW5lZDtcblx0Xy5yZWR1Y2UgPSBmdW5jdGlvbihtb2xlY3VsZSkge1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xlY3VsZS5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRtb2xlY3VsZS5hdG9tc1tpXS52aXNpdGVkID0gZmFsc2U7XG5cdFx0fVxuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xlY3VsZS5ib25kcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRtb2xlY3VsZS5ib25kc1tpXS52aXNpdGVkID0gZmFsc2U7XG5cdFx0fVxuXHRcdHZhciBjb250ID0gdHJ1ZTtcblx0XHR3aGlsZSAoY29udCkge1xuXHRcdFx0Y29udCA9IGZhbHNlO1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IG1vbGVjdWxlLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIGNvdW50ID0gMDtcblx0XHRcdFx0dmFyIGJvbmQ7XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtb2xlY3VsZS5ib25kcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0aWYgKG1vbGVjdWxlLmJvbmRzW2pdLmNvbnRhaW5zKG1vbGVjdWxlLmF0b21zW2ldKSAmJiAhbW9sZWN1bGUuYm9uZHNbal0udmlzaXRlZCkge1xuXHRcdFx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0XHRcdGlmIChjb3VudCA9PT0gMikge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJvbmQgPSBtb2xlY3VsZS5ib25kc1tqXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGNvdW50ID09PSAxKSB7XG5cdFx0XHRcdFx0Y29udCA9IHRydWU7XG5cdFx0XHRcdFx0Ym9uZC52aXNpdGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRtb2xlY3VsZS5hdG9tc1tpXS52aXNpdGVkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9sZWN1bGUuYXRvbXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0aWYgKCFtb2xlY3VsZS5hdG9tc1tpXS52aXNpdGVkKSB7XG5cdFx0XHRcdHRoaXMuYXRvbXMucHVzaChtb2xlY3VsZS5hdG9tc1tpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xlY3VsZS5ib25kcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRpZiAoIW1vbGVjdWxlLmJvbmRzW2ldLnZpc2l0ZWQpIHtcblx0XHRcdFx0dGhpcy5ib25kcy5wdXNoKG1vbGVjdWxlLmJvbmRzW2ldKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHRoaXMuYm9uZHMubGVuZ3RoID09PSAwICYmIHRoaXMuYXRvbXMubGVuZ3RoICE9PSAwKSB7XG5cdFx0XHR0aGlzLmF0b21zID0gW107XG5cdFx0fVxuXHR9O1xuXHRfLnNldE1vbGVjdWxlID0gZnVuY3Rpb24obW9sZWN1bGUpIHtcblx0XHR0aGlzLmF0b21zID0gW107XG5cdFx0dGhpcy5ib25kcyA9IFtdO1xuXHRcdHRoaXMucmluZ3MgPSBbXTtcblx0XHR0aGlzLnJlZHVjZShtb2xlY3VsZSk7XG5cdFx0aWYgKHRoaXMuYXRvbXMubGVuZ3RoID4gMiAmJiB0aGlzLmlubmVyR2V0UmluZ3MpIHtcblx0XHRcdHRoaXMuaW5uZXJHZXRSaW5ncygpO1xuXHRcdH1cblx0fTtcblx0Xy5mdXNlID0gZnVuY3Rpb24oKSB7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMucmluZ3MubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IHRoaXMuYm9uZHMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRpZiAodGhpcy5yaW5nc1tpXS5hdG9tcy5pbmRleE9mKHRoaXMuYm9uZHNbal0uYTEpICE9PSAtMSAmJiB0aGlzLnJpbmdzW2ldLmF0b21zLmluZGV4T2YodGhpcy5ib25kc1tqXS5hMikgIT09IC0xKSB7XG5cdFx0XHRcdFx0dGhpcy5yaW5nc1tpXS5ib25kcy5wdXNoKHRoaXMuYm9uZHNbal0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG59KShDaGVtRG9vZGxlLmluZm9ybWF0aWNzKTtcbihmdW5jdGlvbihpbmZvcm1hdGljcywgc3RydWN0dXJlcywgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZnVuY3Rpb24gRmluZ2VyKGEsIGZyb20pIHtcblx0XHR0aGlzLmF0b21zID0gW107XG5cdFx0aWYgKGZyb20pIHtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBmcm9tLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dGhpcy5hdG9tc1tpXSA9IGZyb20uYXRvbXNbaV07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuYXRvbXMucHVzaChhKTtcblx0fVxuXHR2YXIgXzIgPSBGaW5nZXIucHJvdG90eXBlO1xuXHRfMi5ncm93ID0gZnVuY3Rpb24oYm9uZHMsIGJsb2NrZXJzKSB7XG5cdFx0dmFyIGxhc3QgPSB0aGlzLmF0b21zW3RoaXMuYXRvbXMubGVuZ3RoIC0gMV07XG5cdFx0dmFyIG5laWdocyA9IFtdO1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBib25kcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRpZiAoYm9uZHNbaV0uY29udGFpbnMobGFzdCkpIHtcblx0XHRcdFx0dmFyIG5laWdoID0gYm9uZHNbaV0uZ2V0TmVpZ2hib3IobGFzdCk7XG5cdFx0XHRcdGlmIChibG9ja2Vycy5pbmRleE9mKG5laWdoKSA9PT0gLTEpIHtcblx0XHRcdFx0XHRuZWlnaHMucHVzaChuZWlnaCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIHJldHVybmluZyA9IFtdO1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBuZWlnaHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0cmV0dXJuaW5nLnB1c2gobmV3IEZpbmdlcihuZWlnaHNbaV0sIHRoaXMpKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldHVybmluZztcblx0fTtcblx0XzIuY2hlY2sgPSBmdW5jdGlvbihib25kcywgZmluZ2VyLCBhKSB7XG5cdFx0Ly8gY2hlY2sgdGhhdCB0aGV5IGRvbnQgY29udGFpbiBzaW1pbGFyIHBhcnRzXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IGZpbmdlci5hdG9tcy5sZW5ndGggLSAxOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0aWYgKHRoaXMuYXRvbXMuaW5kZXhPZihmaW5nZXIuYXRvbXNbaV0pICE9PSAtMSkge1xuXHRcdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR2YXIgcmluZztcblx0XHQvLyBjaGVjayBpZiBmaW5nZXJzIG1lZXQgYXQgdGlwc1xuXHRcdGlmIChmaW5nZXIuYXRvbXNbZmluZ2VyLmF0b21zLmxlbmd0aCAtIDFdID09PSB0aGlzLmF0b21zW3RoaXMuYXRvbXMubGVuZ3RoIC0gMV0pIHtcblx0XHRcdHJpbmcgPSBuZXcgc3RydWN0dXJlcy5SaW5nKCk7XG5cdFx0XHRyaW5nLmF0b21zWzBdID0gYTtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0cmluZy5hdG9tcy5wdXNoKHRoaXMuYXRvbXNbaV0pO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggdmFyIGkgPSBmaW5nZXIuYXRvbXMubGVuZ3RoIC0gMjsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdFx0cmluZy5hdG9tcy5wdXNoKGZpbmdlci5hdG9tc1tpXSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGNoZWNrIGlmIGZpbmdlcnMgbWVldCBhdCBib25kXG5cdFx0XHR2YXIgZW5kYm9uZHMgPSBbXTtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBib25kcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdGlmIChib25kc1tpXS5jb250YWlucyhmaW5nZXIuYXRvbXNbZmluZ2VyLmF0b21zLmxlbmd0aCAtIDFdKSkge1xuXHRcdFx0XHRcdGVuZGJvbmRzLnB1c2goYm9uZHNbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gZW5kYm9uZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRpZiAoKGZpbmdlci5hdG9tcy5sZW5ndGggPT09IDEgfHwgIWVuZGJvbmRzW2ldLmNvbnRhaW5zKGZpbmdlci5hdG9tc1tmaW5nZXIuYXRvbXMubGVuZ3RoIC0gMl0pKSAmJiBlbmRib25kc1tpXS5jb250YWlucyh0aGlzLmF0b21zW3RoaXMuYXRvbXMubGVuZ3RoIC0gMV0pKSB7XG5cdFx0XHRcdFx0cmluZyA9IG5ldyBzdHJ1Y3R1cmVzLlJpbmcoKTtcblx0XHRcdFx0XHRyaW5nLmF0b21zWzBdID0gYTtcblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gdGhpcy5hdG9tcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0XHRyaW5nLmF0b21zLnB1c2godGhpcy5hdG9tc1tqXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gZmluZ2VyLmF0b21zLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XG5cdFx0XHRcdFx0XHRyaW5nLmF0b21zLnB1c2goZmluZ2VyLmF0b21zW2pdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHJpbmc7XG5cdH07XG5cblx0aW5mb3JtYXRpY3MuRXVsZXJGYWNldFJpbmdGaW5kZXIgPSBmdW5jdGlvbihtb2xlY3VsZSkge1xuXHRcdHRoaXMuc2V0TW9sZWN1bGUobW9sZWN1bGUpO1xuXHR9O1xuXHR2YXIgXyA9IGluZm9ybWF0aWNzLkV1bGVyRmFjZXRSaW5nRmluZGVyLnByb3RvdHlwZSA9IG5ldyBpbmZvcm1hdGljcy5fUmluZ0ZpbmRlcigpO1xuXHRfLmZpbmdlckJyZWFrID0gNTtcblx0Xy5pbm5lckdldFJpbmdzID0gZnVuY3Rpb24oKSB7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuYXRvbXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIG5laWdoID0gW107XG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gdGhpcy5ib25kcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdGlmICh0aGlzLmJvbmRzW2pdLmNvbnRhaW5zKHRoaXMuYXRvbXNbaV0pKSB7XG5cdFx0XHRcdFx0bmVpZ2gucHVzaCh0aGlzLmJvbmRzW2pdLmdldE5laWdoYm9yKHRoaXMuYXRvbXNbaV0pKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IG5laWdoLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0Ly8gd2VpcmQgdGhhdCBpIGNhbid0IG9wdGltaXplIHRoaXMgbG9vcCB3aXRob3V0IGJyZWFraW5nIGEgdGVzdFxuXHRcdFx0XHQvLyBjYXNlLi4uXG5cdFx0XHRcdGZvciAoIHZhciBrID0gaiArIDE7IGsgPCBuZWlnaC5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRcdHZhciBmaW5nZXJzID0gW107XG5cdFx0XHRcdFx0ZmluZ2Vyc1swXSA9IG5ldyBGaW5nZXIobmVpZ2hbal0pO1xuXHRcdFx0XHRcdGZpbmdlcnNbMV0gPSBuZXcgRmluZ2VyKG5laWdoW2tdKTtcblx0XHRcdFx0XHR2YXIgYmxvY2tlcnMgPSBbXTtcblx0XHRcdFx0XHRibG9ja2Vyc1swXSA9IHRoaXMuYXRvbXNbaV07XG5cdFx0XHRcdFx0Zm9yICggdmFyIGwgPSAwLCBsbCA9IG5laWdoLmxlbmd0aDsgbCA8IGxsOyBsKyspIHtcblx0XHRcdFx0XHRcdGlmIChsICE9PSBqICYmIGwgIT09IGspIHtcblx0XHRcdFx0XHRcdFx0YmxvY2tlcnMucHVzaChuZWlnaFtsXSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciBmb3VuZCA9IFtdO1xuXHRcdFx0XHRcdC8vIGNoZWNrIGZvciAzIG1lbWJlcmVkIHJpbmdcblx0XHRcdFx0XHR2YXIgdGhyZWUgPSBmaW5nZXJzWzBdLmNoZWNrKHRoaXMuYm9uZHMsIGZpbmdlcnNbMV0sIHRoaXMuYXRvbXNbaV0pO1xuXHRcdFx0XHRcdGlmICh0aHJlZSkge1xuXHRcdFx0XHRcdFx0Zm91bmRbMF0gPSB0aHJlZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKGZvdW5kLmxlbmd0aCA9PT0gMCAmJiBmaW5nZXJzLmxlbmd0aCA+IDAgJiYgZmluZ2Vyc1swXS5hdG9tcy5sZW5ndGggPCB0aGlzLmZpbmdlckJyZWFrKSB7XG5cdFx0XHRcdFx0XHR2YXIgbmV3ZmluZ2VycyA9IFtdO1xuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGwgPSAwLCBsbCA9IGZpbmdlcnMubGVuZ3RoOyBsIDwgbGw7IGwrKykge1xuXHRcdFx0XHRcdFx0XHR2YXIgYWRkaW5nID0gZmluZ2Vyc1tsXS5ncm93KHRoaXMuYm9uZHMsIGJsb2NrZXJzKTtcblx0XHRcdFx0XHRcdFx0Zm9yICggdmFyIG0gPSAwLCBtbSA9IGFkZGluZy5sZW5ndGg7IG0gPCBtbTsgbSsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmV3ZmluZ2Vycy5wdXNoKGFkZGluZ1ttXSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGZpbmdlcnMgPSBuZXdmaW5nZXJzO1xuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGwgPSAwLCBsbCA9IGZpbmdlcnMubGVuZ3RoOyBsIDwgbGw7IGwrKykge1xuXHRcdFx0XHRcdFx0XHRmb3IgKCB2YXIgbSA9IGwgKyAxOyBtIDwgbGw7IG0rKykge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByID0gZmluZ2Vyc1tsXS5jaGVjayh0aGlzLmJvbmRzLCBmaW5nZXJzW21dLCB0aGlzLmF0b21zW2ldKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAocikge1xuXHRcdFx0XHRcdFx0XHRcdFx0Zm91bmQucHVzaChyKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChmb3VuZC5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHRcdFx0dmFyIG5ld0Jsb2NrZXJzID0gW107XG5cdFx0XHRcdFx0XHRcdGZvciAoIHZhciBsID0gMCwgbGwgPSBibG9ja2Vycy5sZW5ndGg7IGwgPCBsbDsgbCsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0Zm9yICggdmFyIG0gPSAwLCBtbSA9IHRoaXMuYm9uZHMubGVuZ3RoOyBtIDwgbW07IG0rKykge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKHRoaXMuYm9uZHNbbV0uY29udGFpbnMoYmxvY2tlcnNbbF0pKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHZhciBuZWlnaCA9IHRoaXMuYm9uZHNbbV0uZ2V0TmVpZ2hib3IoYmxvY2tlcnNbbF0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoYmxvY2tlcnMuaW5kZXhPZihuZWlnaCkgPT09IC0xICYmIG5ld0Jsb2NrZXJzLmluZGV4T2YobmVpZ2gpID09PSAtMSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG5ld0Jsb2NrZXJzLnB1c2gobmVpZ2gpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGZvciAoIHZhciBsID0gMCwgbGwgPSBuZXdCbG9ja2Vycy5sZW5ndGg7IGwgPCBsbDsgbCsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0YmxvY2tlcnMucHVzaChuZXdCbG9ja2Vyc1tsXSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGZvdW5kLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRcdC8vIHRoaXMgdW5kZWZpbmVkIGlzIHJlcXVpcmVkLi4ud2VpcmQsIGRvbid0IGtub3cgd2h5XG5cdFx0XHRcdFx0XHR2YXIgdXNlID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGwgPSAwLCBsbCA9IGZvdW5kLmxlbmd0aDsgbCA8IGxsOyBsKyspIHtcblx0XHRcdFx0XHRcdFx0aWYgKCF1c2UgfHwgdXNlLmF0b21zLmxlbmd0aCA+IGZvdW5kW2xdLmF0b21zLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0XHRcdHVzZSA9IGZvdW5kW2xdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR2YXIgYWxyZWFkeSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGwgPSAwLCBsbCA9IHRoaXMucmluZ3MubGVuZ3RoOyBsIDwgbGw7IGwrKykge1xuXHRcdFx0XHRcdFx0XHR2YXIgYWxsID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0Zm9yICggdmFyIG0gPSAwLCBtbSA9IHVzZS5hdG9tcy5sZW5ndGg7IG0gPCBtbTsgbSsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHRoaXMucmluZ3NbbF0uYXRvbXMuaW5kZXhPZih1c2UuYXRvbXNbbV0pID09PSAtMSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0YWxsID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKGFsbCkge1xuXHRcdFx0XHRcdFx0XHRcdGFscmVhZHkgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIWFscmVhZHkpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5yaW5ncy5wdXNoKHVzZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMuZnVzZSgpO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLmluZm9ybWF0aWNzLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMpO1xuXG4oZnVuY3Rpb24oaW5mb3JtYXRpY3MsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGluZm9ybWF0aWNzLlNTU1JGaW5kZXIgPSBmdW5jdGlvbihtb2xlY3VsZSkge1xuXHRcdHRoaXMucmluZ3MgPSBbXTtcblx0XHRpZiAobW9sZWN1bGUuYXRvbXMubGVuZ3RoID4gMCkge1xuXHRcdFx0dmFyIGZyZXJlamFjcXVlTnVtYmVyID0gbmV3IGluZm9ybWF0aWNzLkZyZXJlamFjcXVlTnVtYmVyQ291bnRlcihtb2xlY3VsZSkudmFsdWU7XG5cdFx0XHR2YXIgYWxsID0gbmV3IGluZm9ybWF0aWNzLkV1bGVyRmFjZXRSaW5nRmluZGVyKG1vbGVjdWxlKS5yaW5ncztcblx0XHRcdGFsbC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdFx0cmV0dXJuIGEuYXRvbXMubGVuZ3RoIC0gYi5hdG9tcy5sZW5ndGg7XG5cdFx0XHR9KTtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xlY3VsZS5ib25kcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdG1vbGVjdWxlLmJvbmRzW2ldLnZpc2l0ZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBhbGwubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgdXNlID0gZmFsc2U7XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBhbGxbaV0uYm9uZHMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdGlmICghYWxsW2ldLmJvbmRzW2pdLnZpc2l0ZWQpIHtcblx0XHRcdFx0XHRcdHVzZSA9IHRydWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHVzZSkge1xuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBhbGxbaV0uYm9uZHMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdFx0YWxsW2ldLmJvbmRzW2pdLnZpc2l0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLnJpbmdzLnB1c2goYWxsW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5yaW5ncy5sZW5ndGggPT09IGZyZXJlamFjcXVlTnVtYmVyKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuaW5mb3JtYXRpY3MpO1xuKGZ1bmN0aW9uKGlvLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRpby5fSW50ZXJwcmV0ZXIgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF8gPSBpby5fSW50ZXJwcmV0ZXIucHJvdG90eXBlO1xuXHRfLmZpdCA9IGZ1bmN0aW9uKGRhdGEsIGxlbmd0aCwgbGVmdEFsaWduKSB7XG5cdFx0dmFyIHNpemUgPSBkYXRhLmxlbmd0aDtcblx0XHR2YXIgcGFkZGluZyA9IFtdO1xuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aCAtIHNpemU7IGkrKykge1xuXHRcdFx0cGFkZGluZy5wdXNoKCcgJyk7XG5cdFx0fVxuXHRcdHJldHVybiBsZWZ0QWxpZ24gPyBkYXRhICsgcGFkZGluZy5qb2luKCcnKSA6IHBhZGRpbmcuam9pbignJykgKyBkYXRhO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLmlvKTtcblxuKGZ1bmN0aW9uKGMsIGV4dGVuc2lvbnMsIGlvLCBzdHJ1Y3R1cmVzLCBkMywgbSwgbTQsIHYzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgd2hpdGVzcGFjZVJlZ2V4ID0gL1xccysvZztcblx0dmFyIHdoaXRlc3BhY2VBbmRQYXJlbnRoZXNpc1JlZ2V4ID0gL1xcKHxcXCl8XFxzKy9nO1xuXHR2YXIgd2hpdGVzcGFjZUFuZFF1b3RlUmVnZXggPSAvXFwnfFxccysvZztcblx0dmFyIHdoaXRlc3BhY2VBbmRRdW90ZUFuZENvbW1hUmVnZXggPSAvLHxcXCd8XFxzKy9nO1xuXHR2YXIgbGVhZGluZ1doaXRlc3BhY2VSZWdleCA9IC9eXFxzKy87XG5cdHZhciBkaWdpdHNSZWdleCA9IC9bMC05XS9nO1xuXHR2YXIgZGlnaXRzU3ltYm9sUmVnZXggPSAvWzAtOV18XFwrfFxcLS9nO1xuXG5cdHZhciBmaWx0ZXIgPSBmdW5jdGlvbihzKSB7XG5cdFx0cmV0dXJuIHMubGVuZ3RoICE9PSAwO1xuXHR9O1xuXG5cdHZhciBoYWxsVHJhbnNsYXRpb25zID0ge1xuXHRcdCdQJyA6IFtdLFxuXHRcdCdBJyA6IFsgWyAwLCAuNSwgLjUgXSBdLFxuXHRcdCdCJyA6IFsgWyAuNSwgMCwgLjUgXSBdLFxuXHRcdCdDJyA6IFsgWyAuNSwgLjUsIDAgXSBdLFxuXHRcdCdJJyA6IFsgWyAuNSwgLjUsIC41IF0gXSxcblx0XHQnUicgOiBbIFsgMiAvIDMsIDEgLyAzLCAxIC8gMyBdLCBbIDEgLyAzLCAyIC8gMywgMiAvIDMgXSBdLFxuXHRcdCdTJyA6IFsgWyAxIC8gMywgMSAvIDMsIDIgLyAzIF0sIFsgMiAvIDMsIDIgLyAzLCAxIC8gMyBdIF0sXG5cdFx0J1QnIDogWyBbIDEgLyAzLCAyIC8gMywgMSAvIDMgXSwgWyAyIC8gMywgMSAvIDMsIDIgLyAzIF0gXSxcblx0XHQnRicgOiBbIFsgMCwgLjUsIC41IF0sIFsgLjUsIDAsIC41IF0sIFsgLjUsIC41LCAwIF0gXVxuXHR9O1xuXG5cdHZhciBwYXJzZVRyYW5zZm9ybSA9IGZ1bmN0aW9uKHMpIHtcblx0XHR2YXIgZGlzcGxhY2VtZW50ID0gMDtcblx0XHR2YXIgeCA9IDAsIHkgPSAwLCB6ID0gMDtcblx0XHR2YXIgaW5kZXh4ID0gcy5pbmRleE9mKCd4Jyk7XG5cdFx0dmFyIGluZGV4eSA9IHMuaW5kZXhPZigneScpO1xuXHRcdHZhciBpbmRleHogPSBzLmluZGV4T2YoJ3onKTtcblx0XHRpZiAoaW5kZXh4ICE9PSAtMSkge1xuXHRcdFx0eCsrO1xuXHRcdFx0aWYgKGluZGV4eCA+IDAgJiYgcy5jaGFyQXQoaW5kZXh4IC0gMSkgIT09ICcrJykge1xuXHRcdFx0XHR4ICo9IC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoaW5kZXh5ICE9PSAtMSkge1xuXHRcdFx0eSsrO1xuXHRcdFx0aWYgKGluZGV4eSA+IDAgJiYgcy5jaGFyQXQoaW5kZXh5IC0gMSkgIT09ICcrJykge1xuXHRcdFx0XHR5ICo9IC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoaW5kZXh6ICE9PSAtMSkge1xuXHRcdFx0eisrO1xuXHRcdFx0aWYgKGluZGV4eiA+IDAgJiYgcy5jaGFyQXQoaW5kZXh6IC0gMSkgIT09ICcrJykge1xuXHRcdFx0XHR6ICo9IC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAocy5sZW5ndGggPiAyKSB7XG5cdFx0XHR2YXIgb3AgPSAnKyc7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBsID0gcy5jaGFyQXQoaSk7XG5cdFx0XHRcdGlmICgobCA9PT0gJy0nIHx8IGwgPT09ICcvJykgJiYgKGkgPT09IHMubGVuZ3RoIC0gMSB8fCBzLmNoYXJBdChpICsgMSkubWF0Y2goZGlnaXRzUmVnZXgpKSkge1xuXHRcdFx0XHRcdG9wID0gbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobC5tYXRjaChkaWdpdHNSZWdleCkpIHtcblx0XHRcdFx0XHRpZiAob3AgPT09ICcrJykge1xuXHRcdFx0XHRcdFx0ZGlzcGxhY2VtZW50ICs9IHBhcnNlSW50KGwpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAob3AgPT09ICctJykge1xuXHRcdFx0XHRcdFx0ZGlzcGxhY2VtZW50IC09IHBhcnNlSW50KGwpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAob3AgPT09ICcvJykge1xuXHRcdFx0XHRcdFx0ZGlzcGxhY2VtZW50IC89IHBhcnNlSW50KGwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gWyBkaXNwbGFjZW1lbnQsIHgsIHksIHogXTtcblx0fTtcblxuXHR2YXIgZ2VuZXJhdGVBQkMyWFlaID0gZnVuY3Rpb24oYSwgYiwgYywgYWxwaGEsIGJldGEsIGdhbW1hKSB7XG5cdFx0dmFyIGQgPSAobS5jb3MoYWxwaGEpIC0gbS5jb3MoZ2FtbWEpICogbS5jb3MoYmV0YSkpIC8gbS5zaW4oZ2FtbWEpO1xuXHRcdHJldHVybiBbIGEsIDAsIDAsIDAsIGIgKiBtLmNvcyhnYW1tYSksIGIgKiBtLnNpbihnYW1tYSksIDAsIDAsIGMgKiBtLmNvcyhiZXRhKSwgYyAqIGQsIGMgKiBtLnNxcnQoMSAtIG0ucG93KG0uY29zKGJldGEpLCAyKSAtIGQgKiBkKSwgMCwgMCwgMCwgMCwgMSBdO1xuXHR9O1xuXG5cdGlvLkNJRkludGVycHJldGVyID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfID0gaW8uQ0lGSW50ZXJwcmV0ZXIucHJvdG90eXBlID0gbmV3IGlvLl9JbnRlcnByZXRlcigpO1xuXHRfLnJlYWQgPSBmdW5jdGlvbihjb250ZW50LCB4U3VwZXIsIHlTdXBlciwgelN1cGVyKSB7XG5cdFx0eFN1cGVyID0geFN1cGVyID8geFN1cGVyIDogMTtcblx0XHR5U3VwZXIgPSB5U3VwZXIgPyB5U3VwZXIgOiAxO1xuXHRcdHpTdXBlciA9IHpTdXBlciA/IHpTdXBlciA6IDE7XG5cdFx0dmFyIG1vbGVjdWxlID0gbmV3IHN0cnVjdHVyZXMuTW9sZWN1bGUoKTtcblx0XHRpZiAoIWNvbnRlbnQpIHtcblx0XHRcdHJldHVybiBtb2xlY3VsZTtcblx0XHR9XG5cdFx0dmFyIGxpbmVzID0gY29udGVudC5zcGxpdCgnXFxuJyk7XG5cdFx0dmFyIGFMZW5ndGggPSAwLCBiTGVuZ3RoID0gMCwgY0xlbmd0aCA9IDAsIGFscGhhQW5nbGUgPSAwLCBiZXRhQW5nbGUgPSAwLCBnYW1tYUFuZ2xlID0gMDtcblx0XHR2YXIgaGFsbENsYXNzID0gJ1AnO1xuXHRcdHZhciB0cmFuc2Zvcm1Mb29wO1xuXHRcdHZhciBhdG9tTG9vcDtcblx0XHR2YXIgYm9uZExvb3A7XG5cblx0XHR2YXIgbGluZTtcblx0XHR2YXIgc2hpZnQgPSB0cnVlO1xuXHRcdHdoaWxlIChsaW5lcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRpZiAoc2hpZnQpIHtcblx0XHRcdFx0bGluZSA9IGxpbmVzLnNoaWZ0KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzaGlmdCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAobGluZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdGlmIChleHRlbnNpb25zLnN0cmluZ1N0YXJ0c1dpdGgobGluZSwgJ19jZWxsX2xlbmd0aF9hJykpIHtcblx0XHRcdFx0XHRhTGVuZ3RoID0gcGFyc2VGbG9hdChsaW5lLnNwbGl0KHdoaXRlc3BhY2VBbmRQYXJlbnRoZXNpc1JlZ2V4KVsxXSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZXh0ZW5zaW9ucy5zdHJpbmdTdGFydHNXaXRoKGxpbmUsICdfY2VsbF9sZW5ndGhfYicpKSB7XG5cdFx0XHRcdFx0Ykxlbmd0aCA9IHBhcnNlRmxvYXQobGluZS5zcGxpdCh3aGl0ZXNwYWNlQW5kUGFyZW50aGVzaXNSZWdleClbMV0pO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChsaW5lLCAnX2NlbGxfbGVuZ3RoX2MnKSkge1xuXHRcdFx0XHRcdGNMZW5ndGggPSBwYXJzZUZsb2F0KGxpbmUuc3BsaXQod2hpdGVzcGFjZUFuZFBhcmVudGhlc2lzUmVnZXgpWzFdKTtcblx0XHRcdFx0fSBlbHNlIGlmIChleHRlbnNpb25zLnN0cmluZ1N0YXJ0c1dpdGgobGluZSwgJ19jZWxsX2FuZ2xlX2FscGhhJykpIHtcblx0XHRcdFx0XHRhbHBoYUFuZ2xlID0gbS5QSSAqIHBhcnNlRmxvYXQobGluZS5zcGxpdCh3aGl0ZXNwYWNlQW5kUGFyZW50aGVzaXNSZWdleClbMV0pIC8gMTgwO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChsaW5lLCAnX2NlbGxfYW5nbGVfYmV0YScpKSB7XG5cdFx0XHRcdFx0YmV0YUFuZ2xlID0gbS5QSSAqIHBhcnNlRmxvYXQobGluZS5zcGxpdCh3aGl0ZXNwYWNlQW5kUGFyZW50aGVzaXNSZWdleClbMV0pIC8gMTgwO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChsaW5lLCAnX2NlbGxfYW5nbGVfZ2FtbWEnKSkge1xuXHRcdFx0XHRcdGdhbW1hQW5nbGUgPSBtLlBJICogcGFyc2VGbG9hdChsaW5lLnNwbGl0KHdoaXRlc3BhY2VBbmRQYXJlbnRoZXNpc1JlZ2V4KVsxXSkgLyAxODA7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZXh0ZW5zaW9ucy5zdHJpbmdTdGFydHNXaXRoKGxpbmUsICdfc3ltbWV0cnlfc3BhY2VfZ3JvdXBfbmFtZV9ILU0nKSkge1xuXHRcdFx0XHRcdGhhbGxDbGFzcyA9IGxpbmUuc3BsaXQod2hpdGVzcGFjZUFuZFF1b3RlUmVnZXgpWzFdO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChsaW5lLCAnbG9vcF8nKSkge1xuXHRcdFx0XHRcdHZhciBsb29wID0ge1xuXHRcdFx0XHRcdFx0ZmllbGRzIDogW10sXG5cdFx0XHRcdFx0XHRsaW5lcyA6IFtdXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR2YXIgcHVzaGluZ0xpbmVzID0gZmFsc2U7XG5cdFx0XHRcdFx0Ly8ga2VlcCB1bmRlZmluZWQgY2hlY2sgaGVyZSBiZWNhdXNlIHRoZSBsaW5lIG1heSBiZSBhblxuXHRcdFx0XHRcdC8vIGVtcHR5IHN0cmluZ1xuXHRcdFx0XHRcdHdoaWxlICgobGluZSA9IGxpbmVzLnNoaWZ0KCkpICE9PSB1bmRlZmluZWQgJiYgIWV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChsaW5lID0gbGluZS5yZXBsYWNlKGxlYWRpbmdXaGl0ZXNwYWNlUmVnZXgsICcnKSwgJ2xvb3BfJykgJiYgbGluZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0XHQvLyByZW1vdmUgbGVhZGluZyB3aGl0ZXNwYWNlIHRoYXQgbWF5IGFwcGVhciBpblxuXHRcdFx0XHRcdFx0Ly8gc3VibG9vcCBsaW5lcyBeXG5cdFx0XHRcdFx0XHRpZiAoZXh0ZW5zaW9ucy5zdHJpbmdTdGFydHNXaXRoKGxpbmUsICdfJykpIHtcblx0XHRcdFx0XHRcdFx0aWYgKHB1c2hpbmdMaW5lcykge1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGxvb3AuZmllbGRzID0gbG9vcC5maWVsZHMuY29uY2F0KGxpbmUuc3BsaXQod2hpdGVzcGFjZVJlZ2V4KS5maWx0ZXIoZmlsdGVyKSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRwdXNoaW5nTGluZXMgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRsb29wLmxpbmVzLnB1c2gobGluZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChsaW5lcy5sZW5ndGggIT09IDAgJiYgKGV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChsaW5lLCAnbG9vcF8nKSB8fCBleHRlbnNpb25zLnN0cmluZ1N0YXJ0c1dpdGgobGluZSwgJ18nKSkpIHtcblx0XHRcdFx0XHRcdHNoaWZ0ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChsb29wLmZpZWxkcy5pbmRleE9mKCdfc3ltbWV0cnlfZXF1aXZfcG9zX2FzX3h5eicpICE9PSAtMSB8fCBsb29wLmZpZWxkcy5pbmRleE9mKCdfc3BhY2VfZ3JvdXBfc3ltb3Bfb3BlcmF0aW9uX3h5eicpICE9PSAtMSkge1xuXHRcdFx0XHRcdFx0dHJhbnNmb3JtTG9vcCA9IGxvb3A7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChsb29wLmZpZWxkcy5pbmRleE9mKCdfYXRvbV9zaXRlX2xhYmVsJykgIT09IC0xKSB7XG5cdFx0XHRcdFx0XHRhdG9tTG9vcCA9IGxvb3A7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChsb29wLmZpZWxkcy5pbmRleE9mKCdfZ2VvbV9ib25kX2F0b21fc2l0ZV9sYWJlbF8xJykgIT09IC0xKSB7XG5cdFx0XHRcdFx0XHRib25kTG9vcCA9IGxvb3A7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHZhciBhYmMyeHl6ID0gZ2VuZXJhdGVBQkMyWFlaKGFMZW5ndGgsIGJMZW5ndGgsIGNMZW5ndGgsIGFscGhhQW5nbGUsIGJldGFBbmdsZSwgZ2FtbWFBbmdsZSk7XG5cdFx0Ly8gaW50ZXJuYWwgYXRvbSBjb29yZGluYXRlc1xuXHRcdGlmIChhdG9tTG9vcCkge1xuXHRcdFx0dmFyIGxhYmVsSW5kZXggPSAtMSwgYWx0TGFiZWxJbmRleCA9IC0xLCB4SW5kZXggPSAtMSwgeUluZGV4ID0gLTEsIHpJbmRleCA9IC0xO1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IGF0b21Mb29wLmZpZWxkcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBmaWVsZCA9IGF0b21Mb29wLmZpZWxkc1tpXTtcblx0XHRcdFx0aWYgKGZpZWxkID09PSAnX2F0b21fc2l0ZV90eXBlX3N5bWJvbCcpIHtcblx0XHRcdFx0XHRsYWJlbEluZGV4ID0gaTtcblx0XHRcdFx0fSBlbHNlIGlmIChmaWVsZCA9PT0gJ19hdG9tX3NpdGVfbGFiZWwnKSB7XG5cdFx0XHRcdFx0YWx0TGFiZWxJbmRleCA9IGk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZmllbGQgPT09ICdfYXRvbV9zaXRlX2ZyYWN0X3gnKSB7XG5cdFx0XHRcdFx0eEluZGV4ID0gaTtcblx0XHRcdFx0fSBlbHNlIGlmIChmaWVsZCA9PT0gJ19hdG9tX3NpdGVfZnJhY3RfeScpIHtcblx0XHRcdFx0XHR5SW5kZXggPSBpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGZpZWxkID09PSAnX2F0b21fc2l0ZV9mcmFjdF96Jykge1xuXHRcdFx0XHRcdHpJbmRleCA9IGk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBhdG9tTG9vcC5saW5lcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdGxpbmUgPSBhdG9tTG9vcC5saW5lc1tpXTtcblx0XHRcdFx0dmFyIHRva2VucyA9IGxpbmUuc3BsaXQod2hpdGVzcGFjZVJlZ2V4KS5maWx0ZXIoZmlsdGVyKTtcblx0XHRcdFx0dmFyIGEgPSBuZXcgc3RydWN0dXJlcy5BdG9tKHRva2Vuc1tsYWJlbEluZGV4ID09PSAtMSA/IGFsdExhYmVsSW5kZXggOiBsYWJlbEluZGV4XS5zcGxpdChkaWdpdHNTeW1ib2xSZWdleClbMF0sIHBhcnNlRmxvYXQodG9rZW5zW3hJbmRleF0pLCBwYXJzZUZsb2F0KHRva2Vuc1t5SW5kZXhdKSwgcGFyc2VGbG9hdCh0b2tlbnNbekluZGV4XSkpO1xuXHRcdFx0XHRtb2xlY3VsZS5hdG9tcy5wdXNoKGEpO1xuXHRcdFx0XHRpZiAoYWx0TGFiZWxJbmRleCAhPT0gLTEpIHtcblx0XHRcdFx0XHRhLmNpZklkID0gdG9rZW5zW2FsdExhYmVsSW5kZXhdO1xuXHRcdFx0XHRcdGEuY2lmUGFydCA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gdHJhbnNmb3JtcywgdW5sZXNzIGJvbmRzIGFyZSBzcGVjaWZpZWRcblx0XHRpZiAodHJhbnNmb3JtTG9vcCAmJiAhYm9uZExvb3ApIHtcblx0XHRcdC8vIGFzc3VtZSB0aGUgaW5kZXggaXMgMCwganVzdCBpbmNhc2UgYSBkaWZmZXJlbnQgaWRlbnRpZmllciBpc1xuXHRcdFx0Ly8gdXNlZFxuXHRcdFx0dmFyIHN5bUluZGV4ID0gMDtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0cmFuc2Zvcm1Mb29wLmZpZWxkcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBmaWVsZCA9IHRyYW5zZm9ybUxvb3AuZmllbGRzW2ldO1xuXHRcdFx0XHRpZiAoZmllbGQgPT09ICdfc3ltbWV0cnlfZXF1aXZfcG9zX2FzX3h5eicgfHwgZmllbGQgPT09ICdfc3BhY2VfZ3JvdXBfc3ltb3Bfb3BlcmF0aW9uX3h5eicpIHtcblx0XHRcdFx0XHRzeW1JbmRleCA9IGk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHZhciBpbXBsaWVkVHJhbnNsYXRpb25zID0gaGFsbFRyYW5zbGF0aW9uc1toYWxsQ2xhc3NdO1xuXHRcdFx0dmFyIGFkZCA9IFtdO1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRyYW5zZm9ybUxvb3AubGluZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgcGFydHMgPSB0cmFuc2Zvcm1Mb29wLmxpbmVzW2ldLnNwbGl0KHdoaXRlc3BhY2VBbmRRdW90ZUFuZENvbW1hUmVnZXgpLmZpbHRlcihmaWx0ZXIpO1xuXHRcdFx0XHR2YXIgbXVsdHggPSBwYXJzZVRyYW5zZm9ybShwYXJ0c1tzeW1JbmRleF0pO1xuXHRcdFx0XHR2YXIgbXVsdHkgPSBwYXJzZVRyYW5zZm9ybShwYXJ0c1tzeW1JbmRleCArIDFdKTtcblx0XHRcdFx0dmFyIG11bHR6ID0gcGFyc2VUcmFuc2Zvcm0ocGFydHNbc3ltSW5kZXggKyAyXSk7XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtb2xlY3VsZS5hdG9tcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIGEgPSBtb2xlY3VsZS5hdG9tc1tqXTtcblx0XHRcdFx0XHR2YXIgeCA9IGEueCAqIG11bHR4WzFdICsgYS55ICogbXVsdHhbMl0gKyBhLnogKiBtdWx0eFszXSArIG11bHR4WzBdO1xuXHRcdFx0XHRcdHZhciB5ID0gYS54ICogbXVsdHlbMV0gKyBhLnkgKiBtdWx0eVsyXSArIGEueiAqIG11bHR5WzNdICsgbXVsdHlbMF07XG5cdFx0XHRcdFx0dmFyIHogPSBhLnggKiBtdWx0elsxXSArIGEueSAqIG11bHR6WzJdICsgYS56ICogbXVsdHpbM10gKyBtdWx0elswXTtcblx0XHRcdFx0XHR2YXIgY29weTEgPSBuZXcgc3RydWN0dXJlcy5BdG9tKGEubGFiZWwsIHgsIHksIHopO1xuXHRcdFx0XHRcdGFkZC5wdXNoKGNvcHkxKTtcblx0XHRcdFx0XHQvLyBjaWZJRCBjb3VsZCBiZSAwLCBzbyBjaGVjayBmb3IgdW5kZWZpbmVkXG5cdFx0XHRcdFx0aWYgKGEuY2lmSWQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0Y29weTEuY2lmSWQgPSBhLmNpZklkO1xuXHRcdFx0XHRcdFx0Y29weTEuY2lmUGFydCA9IGkgKyAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoaW1wbGllZFRyYW5zbGF0aW9ucykge1xuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGsgPSAwLCBrayA9IGltcGxpZWRUcmFuc2xhdGlvbnMubGVuZ3RoOyBrIDwga2s7IGsrKykge1xuXHRcdFx0XHRcdFx0XHR2YXIgdHJhbnMgPSBpbXBsaWVkVHJhbnNsYXRpb25zW2tdO1xuXHRcdFx0XHRcdFx0XHR2YXIgY29weTIgPSBuZXcgc3RydWN0dXJlcy5BdG9tKGEubGFiZWwsIHggKyB0cmFuc1swXSwgeSArIHRyYW5zWzFdLCB6ICsgdHJhbnNbMl0pO1xuXHRcdFx0XHRcdFx0XHRhZGQucHVzaChjb3B5Mik7XG5cdFx0XHRcdFx0XHRcdC8vIGNpZklEIGNvdWxkIGJlIDAsIHNvIGNoZWNrIGZvciB1bmRlZmluZWRcblx0XHRcdFx0XHRcdFx0aWYgKGEuY2lmSWQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0XHRcdGNvcHkyLmNpZklkID0gYS5jaWZJZDtcblx0XHRcdFx0XHRcdFx0XHRjb3B5Mi5jaWZQYXJ0ID0gaSArIDE7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdC8vIG1ha2Ugc3VyZSBhbGwgYXRvbXMgYXJlIHdpdGhpbiB0aGUgdW5pdCBjZWxsXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gYWRkLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIGEgPSBhZGRbaV07XG5cdFx0XHRcdHdoaWxlIChhLnggPj0gMSkge1xuXHRcdFx0XHRcdGEueC0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHdoaWxlIChhLnggPCAwKSB7XG5cdFx0XHRcdFx0YS54Kys7XG5cdFx0XHRcdH1cblx0XHRcdFx0d2hpbGUgKGEueSA+PSAxKSB7XG5cdFx0XHRcdFx0YS55LS07XG5cdFx0XHRcdH1cblx0XHRcdFx0d2hpbGUgKGEueSA8IDApIHtcblx0XHRcdFx0XHRhLnkrKztcblx0XHRcdFx0fVxuXHRcdFx0XHR3aGlsZSAoYS56ID49IDEpIHtcblx0XHRcdFx0XHRhLnotLTtcblx0XHRcdFx0fVxuXHRcdFx0XHR3aGlsZSAoYS56IDwgMCkge1xuXHRcdFx0XHRcdGEueisrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyByZW1vdmUgb3ZlcmxhcHNcblx0XHRcdHZhciBub092ZXJsYXBzID0gW107XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gYWRkLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIG92ZXJsYXAgPSBmYWxzZTtcblx0XHRcdFx0dmFyIGEgPSBhZGRbaV07XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtb2xlY3VsZS5hdG9tcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0aWYgKG1vbGVjdWxlLmF0b21zW2pdLmRpc3RhbmNlM0QoYSkgPCAuMDAwMSkge1xuXHRcdFx0XHRcdFx0b3ZlcmxhcCA9IHRydWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFvdmVybGFwKSB7XG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IG5vT3ZlcmxhcHMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdFx0aWYgKG5vT3ZlcmxhcHNbal0uZGlzdGFuY2UzRChhKSA8IC4wMDAxKSB7XG5cdFx0XHRcdFx0XHRcdG92ZXJsYXAgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCFvdmVybGFwKSB7XG5cdFx0XHRcdFx0XHRub092ZXJsYXBzLnB1c2goYSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyBjb25jYXQgYXJyYXlzXG5cdFx0XHRtb2xlY3VsZS5hdG9tcyA9IG1vbGVjdWxlLmF0b21zLmNvbmNhdChub092ZXJsYXBzKTtcblx0XHR9XG5cdFx0Ly8gYnVpbGQgc3VwZXIgY2VsbFxuXHRcdHZhciBleHRyYXMgPSBbXTtcblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB4U3VwZXI7IGkrKykge1xuXHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgeVN1cGVyOyBqKyspIHtcblx0XHRcdFx0Zm9yICggdmFyIGsgPSAwOyBrIDwgelN1cGVyOyBrKyspIHtcblx0XHRcdFx0XHRpZiAoIShpID09PSAwICYmIGogPT09IDAgJiYgayA9PT0gMCkpIHtcblx0XHRcdFx0XHRcdGZvciAoIHZhciBsID0gMCwgbGwgPSBtb2xlY3VsZS5hdG9tcy5sZW5ndGg7IGwgPCBsbDsgbCsrKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBhID0gbW9sZWN1bGUuYXRvbXNbbF07XG5cdFx0XHRcdFx0XHRcdHZhciBjb3B5ID0gbmV3IHN0cnVjdHVyZXMuQXRvbShhLmxhYmVsLCBhLnggKyBpLCBhLnkgKyBqLCBhLnogKyBrKTtcblx0XHRcdFx0XHRcdFx0ZXh0cmFzLnB1c2goY29weSk7XG5cdFx0XHRcdFx0XHRcdC8vIGNpZklEIGNvdWxkIGJlIDAsIHNvIGNoZWNrIGZvciB1bmRlZmluZWRcblx0XHRcdFx0XHRcdFx0aWYgKGEuY2lmSWQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0XHRcdGNvcHkuY2lmSWQgPSBhLmNpZklkO1xuXHRcdFx0XHRcdFx0XHRcdGNvcHkuY2lmUGFydCA9IGEuY2lmUGFydCArICh0cmFuc2Zvcm1Mb29wID8gdHJhbnNmb3JtTG9vcC5saW5lcy5sZW5ndGggOiAwKSArIGkgKyBqICogMTAgKyBrICogMTAwO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdG1vbGVjdWxlLmF0b21zID0gbW9sZWN1bGUuYXRvbXMuY29uY2F0KGV4dHJhcyk7XG5cdFx0Ly8gY29udmVydCB0byB4eXpcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9sZWN1bGUuYXRvbXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIGEgPSBtb2xlY3VsZS5hdG9tc1tpXTtcblx0XHRcdHZhciB4eXogPSBtNC5tdWx0aXBseVZlYzMoYWJjMnh5eiwgWyBhLngsIGEueSwgYS56IF0pO1xuXHRcdFx0YS54ID0geHl6WzBdO1xuXHRcdFx0YS55ID0geHl6WzFdO1xuXHRcdFx0YS56ID0geHl6WzJdO1xuXHRcdH1cblx0XHQvLyBoYW5kbGUgYm9uZHNcblx0XHRpZiAoYm9uZExvb3ApIHtcblx0XHRcdHZhciBhdG9tMSA9IC0xLCBhdG9tMiA9IC0xO1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IGJvbmRMb29wLmZpZWxkcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBmaWVsZCA9IGJvbmRMb29wLmZpZWxkc1tpXTtcblx0XHRcdFx0aWYgKGZpZWxkID09PSAnX2dlb21fYm9uZF9hdG9tX3NpdGVfbGFiZWxfMScpIHtcblx0XHRcdFx0XHRhdG9tMSA9IGk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZmllbGQgPT09ICdfZ2VvbV9ib25kX2F0b21fc2l0ZV9sYWJlbF8yJykge1xuXHRcdFx0XHRcdGF0b20yID0gaTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Zm9yICggdmFyIGsgPSAwLCBrayA9IGJvbmRMb29wLmxpbmVzLmxlbmd0aDsgayA8IGtrOyBrKyspIHtcblx0XHRcdFx0dmFyIHRva2VucyA9IGJvbmRMb29wLmxpbmVzW2tdLnNwbGl0KHdoaXRlc3BhY2VSZWdleCkuZmlsdGVyKGZpbHRlcik7XG5cdFx0XHRcdHZhciBpZDEgPSB0b2tlbnNbYXRvbTFdO1xuXHRcdFx0XHR2YXIgaWQyID0gdG9rZW5zW2F0b20yXTtcblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IG1vbGVjdWxlLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IGkgKyAxOyBqIDwgaWk7IGorKykge1xuXHRcdFx0XHRcdFx0dmFyIGFpID0gbW9sZWN1bGUuYXRvbXNbaV07XG5cdFx0XHRcdFx0XHR2YXIgYWogPSBtb2xlY3VsZS5hdG9tc1tqXTtcblx0XHRcdFx0XHRcdGlmIChhaS5jaWZQYXJ0ICE9PSBhai5jaWZQYXJ0KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGFpLmNpZklkID09PSBpZDEgJiYgYWouY2lmSWQgPT09IGlkMiB8fCBhaS5jaWZJZCA9PT0gaWQyICYmIGFqLmNpZklkID09PSBpZDEpIHtcblx0XHRcdFx0XHRcdFx0bW9sZWN1bGUuYm9uZHMucHVzaChuZXcgc3RydWN0dXJlcy5Cb25kKGFpLCBhaikpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRuZXcgYy5pbmZvcm1hdGljcy5Cb25kRGVkdWNlcigpLmRlZHVjZUNvdmFsZW50Qm9uZHMobW9sZWN1bGUsIDEpO1xuXHRcdH1cblx0XHQvLyBnZW5lcmF0ZSB1bml0IGNlbGxcblx0XHR2YXIgbyA9IFsgLXhTdXBlciAvIDIsIC15U3VwZXIgLyAyLCAtelN1cGVyIC8gMiBdO1xuXHRcdHZhciB1bml0Q2VsbFZlY3RvcnMgPSB7XG5cdFx0XHRvIDogbTQubXVsdGlwbHlWZWMzKGFiYzJ4eXosIG8sIFtdKSxcblx0XHRcdHggOiBtNC5tdWx0aXBseVZlYzMoYWJjMnh5eiwgWyBvWzBdICsgMSwgb1sxXSwgb1syXSBdKSxcblx0XHRcdHkgOiBtNC5tdWx0aXBseVZlYzMoYWJjMnh5eiwgWyBvWzBdLCBvWzFdICsgMSwgb1syXSBdKSxcblx0XHRcdHogOiBtNC5tdWx0aXBseVZlYzMoYWJjMnh5eiwgWyBvWzBdLCBvWzFdLCBvWzJdICsgMSBdKSxcblx0XHRcdHh5IDogbTQubXVsdGlwbHlWZWMzKGFiYzJ4eXosIFsgb1swXSArIDEsIG9bMV0gKyAxLCBvWzJdIF0pLFxuXHRcdFx0eHogOiBtNC5tdWx0aXBseVZlYzMoYWJjMnh5eiwgWyBvWzBdICsgMSwgb1sxXSwgb1syXSArIDEgXSksXG5cdFx0XHR5eiA6IG00Lm11bHRpcGx5VmVjMyhhYmMyeHl6LCBbIG9bMF0sIG9bMV0gKyAxLCBvWzJdICsgMSBdKSxcblx0XHRcdHh5eiA6IG00Lm11bHRpcGx5VmVjMyhhYmMyeHl6LCBbIG9bMF0gKyAxLCBvWzFdICsgMSwgb1syXSArIDEgXSlcblx0XHR9O1xuXHRcdHJldHVybiB7bW9sZWN1bGU6bW9sZWN1bGUsIHVuaXRDZWxsOiBuZXcgZDMuVW5pdENlbGwodW5pdENlbGxWZWN0b3JzKX07XG5cdH07XG5cblx0Ly8gc2hvcnRjdXRzXG5cdHZhciBpbnRlcnByZXRlciA9IG5ldyBpby5DSUZJbnRlcnByZXRlcigpO1xuXHRjLnJlYWRDSUYgPSBmdW5jdGlvbihjb250ZW50LCB4U3VwZXIsIHlTdXBlciwgelN1cGVyKSB7XG5cdFx0cmV0dXJuIGludGVycHJldGVyLnJlYWQoY29udGVudCwgeFN1cGVyLCB5U3VwZXIsIHpTdXBlcik7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUsIENoZW1Eb29kbGUuZXh0ZW5zaW9ucywgQ2hlbURvb2RsZS5pbywgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDMsIE1hdGgsIENoZW1Eb29kbGUubGliLm1hdDQsIENoZW1Eb29kbGUubGliLnZlYzMpO1xuKGZ1bmN0aW9uKGMsIGlvLCBzdHJ1Y3R1cmVzLCBxLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRpby5DTUxJbnRlcnByZXRlciA9IGZ1bmN0aW9uKCkge1xuXHR9O1xuXHR2YXIgXyA9IGlvLkNNTEludGVycHJldGVyLnByb3RvdHlwZSA9IG5ldyBpby5fSW50ZXJwcmV0ZXIoKTtcblx0Xy5yZWFkID0gZnVuY3Rpb24oY29udGVudCkge1xuXHRcdHZhciBtb2xlY3VsZXMgPSBbXTtcblx0XHR2YXIgeG1sID0gcS5wYXJzZVhNTChjb250ZW50KTtcblx0XHQvLyBQb3NzaWJsZSBmb3IgbXVsdGlwbGUgQ01MIHRhZ3MgdG8gZXhpc3Rcblx0XHR2YXIgYWxsQ21sID0gcSh4bWwpLmZpbmQoJ2NtbCcpO1xuXHRcdGZvciAodmFyIGkgPSAwLCBpaSA9IGFsbENtbC5sZW5ndGg7IGkgPCBpaTsgaSsrKXtcblx0XHRcdHZhciBhbGxNb2xlY3VsZXMgPSBxKGFsbENtbFtpXSkuZmluZCgnbW9sZWN1bGUnKTtcblx0XHRcdGZvciAodmFyIGogPSAwLCBqaiA9IGFsbE1vbGVjdWxlcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdHZhciBjdXJyZW50TW9sZWN1bGUgPSBtb2xlY3VsZXNbal0gPSBuZXcgc3RydWN0dXJlcy5Nb2xlY3VsZSgpO1xuXHRcdFx0XHR2YXIgaWRtYXAgPSBbXTtcblx0XHRcdFx0Ly8gRG9uJ3QgZXZlbiBib3RoZXIgd2l0aCBhdG9tQXJyYXlzLCB0aGVyZSdzIG5vIHBvaW50LlxuXHRcdFx0XHR2YXIgY21sQXRvbXMgPSBxKGFsbE1vbGVjdWxlc1tqXSkuZmluZCgnYXRvbScpO1xuXHRcdFx0XHRmb3IgKHZhciBrID0gMCwga2sgPSBjbWxBdG9tcy5sZW5ndGg7IGsgPCBrazsgaysrKSB7XG5cdFx0XHRcdFx0dmFyIGN1cnJlbnRDTUxBdG9tID0gcShjbWxBdG9tc1trXSk7XG5cdFx0XHRcdFx0dmFyIGxhYmVsID0gY3VycmVudENNTEF0b20uYXR0cignZWxlbWVudFR5cGUnKTtcblx0XHRcdFx0XHR2YXIgeCwgeSwgeiwgY3VycmVudEF0b207XG5cdFx0XHRcdFx0aWYgKGN1cnJlbnRDTUxBdG9tLmF0dHIoJ3gyJykgPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHR4ID0gY3VycmVudENNTEF0b20uYXR0cigneDMnKTtcblx0XHRcdFx0XHRcdHkgPSBjdXJyZW50Q01MQXRvbS5hdHRyKCd5MycpO1xuXHRcdFx0XHRcdFx0eiA9IGN1cnJlbnRDTUxBdG9tLmF0dHIoJ3ozJyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHggPSBjdXJyZW50Q01MQXRvbS5hdHRyKCd4MicpO1xuXHRcdFx0XHRcdFx0eSA9IGN1cnJlbnRDTUxBdG9tLmF0dHIoJ3kyJyk7XG5cdFx0XHRcdFx0XHR6ID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y3VycmVudEF0b20gPSBtb2xlY3VsZXNbal0uYXRvbXNba10gPSBuZXcgc3RydWN0dXJlcy5BdG9tKGxhYmVsLCB4LCB5LCB6KTtcblx0XHRcdFx0XHRpZG1hcFtrXSA9IGN1cnJlbnRDTUxBdG9tLmF0dHIoJ2lkJyk7XG5cdFx0XHRcdFx0Ly8gY2hhcmdlXG5cdFx0XHRcdFx0aWYgKGN1cnJlbnRDTUxBdG9tLmF0dHIoJ2Zvcm1hbENoYXJnZScpICE9IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0Y3VycmVudEF0b20uY2hhcmdlID0gY3VycmVudENNTEF0b20uYXR0cignZm9ybWFsQ2hhcmdlJyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGNtbEJvbmRzID0gcShhbGxNb2xlY3VsZXNbal0pLmZpbmQoJ2JvbmQnKTtcblx0XHRcdFx0Zm9yICh2YXIgayA9IDAsIGtrID0gY21sQm9uZHMubGVuZ3RoOyBrIDwga2s7IGsrKykge1xuXHRcdFx0XHRcdHZhciBjdXJyZW50Q01MQm9uZCA9IHEoY21sQm9uZHNba10pO1xuXHRcdFx0XHRcdHZhciBhdG9tUmVmczIgPSBjdXJyZW50Q01MQm9uZC5hdHRyKCdhdG9tUmVmczInKS5zcGxpdCgnICcpO1xuXHRcdFx0XHRcdHZhciBhMSwgYTIsIG9yZGVyO1xuXHRcdFx0XHRcdGExID0gY3VycmVudE1vbGVjdWxlLmF0b21zW3EuaW5BcnJheShhdG9tUmVmczJbMF0sIGlkbWFwKV07XG5cdFx0XHRcdFx0YTIgPSBjdXJyZW50TW9sZWN1bGUuYXRvbXNbcS5pbkFycmF5KGF0b21SZWZzMlsxXSwgaWRtYXApXTtcblx0XHRcdFx0XHRzd2l0Y2goY3VycmVudENNTEJvbmQuYXR0cignb3JkZXInKSkge1xuXHRcdFx0XHRcdGNhc2UgJzInOlxuXHRcdFx0XHRcdGNhc2UgJ0QnOlxuXHRcdFx0XHRcdFx0b3JkZXIgPSAyO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnMyc6XG5cdFx0XHRcdFx0Y2FzZSAnVCc6XG5cdFx0XHRcdFx0XHRvcmRlciA9IDM7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICdBJzpcblx0XHRcdFx0XHRcdG9yZGVyID0gMS41O1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdG9yZGVyID0gMTtcdCBcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFyIGN1cnJlbnRCb25kID0gbW9sZWN1bGVzW2pdLmJvbmRzW2tdID0gbmV3IHN0cnVjdHVyZXMuQm9uZChhMSwgYTIsIG9yZGVyKTtcblx0XHRcdFx0XHQvLyBjaGVjayBzdGVyZW8uLi4gb25seSBzdXBwb3J0IFcgb3IgSFxuXHRcdFx0XHRcdHN3aXRjaCAoY3VycmVudENNTEJvbmQuZmluZCgnYm9uZFN0ZXJlbycpLnRleHQoKSkge1xuXHRcdFx0XHRcdGNhc2UgJ1cnOlxuXHRcdFx0XHRcdFx0Y3VycmVudEJvbmQuc3RlcmVvID0gc3RydWN0dXJlcy5Cb25kLlNURVJFT19QUk9UUlVESU5HO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAnSCc6XG5cdFx0XHRcdFx0XHRjdXJyZW50Qm9uZC5zdGVyZW8gPSBzdHJ1Y3R1cmVzLkJvbmQuU1RFUkVPX1JFQ0VTU0VEO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBtb2xlY3VsZXM7XG5cdH07XG5cdF8ud3JpdGUgPSBmdW5jdGlvbihtb2xlY3VsZXMpIHtcblx0XHR2YXIgc2IgPSBbXTtcblx0XHRzYi5wdXNoKCc8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz5cXG4nKTtcblx0XHRzYi5wdXNoKCc8Y21sIGNvbnZlbnRpb249XCJjb252ZW50aW9uczptb2xlY3VsYXJcIiB4bWxucz1cImh0dHA6Ly93d3cueG1sLWNtbC5vcmcvc2NoZW1hXCIgeG1sbnM6Y29udmVudGlvbnM9XCJodHRwOi8vd3d3LnhtbC1jbWwub3JnL2NvbnZlbnRpb24vXCIgeG1sbnM6ZGM9XCJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xL1wiPlxcbicpO1xuXHRcdC8vIFRPRE86IE1ldGFkYXRhXG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlpID0gbW9sZWN1bGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHNiLnB1c2goJzxtb2xlY3VsZSBpZD1cIm0nKTsgXG5cdFx0XHRzYi5wdXNoKGkpOyBcblx0XHRcdHNiLnB1c2goJ1wiPicpO1xuXHRcdFx0c2IucHVzaCgnPGF0b21BcnJheT4nKTtcblx0XHRcdGZvciAodmFyIGogPSAwLCBqaiA9IG1vbGVjdWxlc1tpXS5hdG9tcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdHZhciBjdXJyZW50QXRvbSA9IG1vbGVjdWxlc1tpXS5hdG9tc1tqXTtcblx0XHRcdFx0c2IucHVzaCgnPGF0b20gZWxlbWVudFR5cGU9XCInKTsgXG5cdFx0XHRcdHNiLnB1c2goY3VycmVudEF0b20ubGFiZWwpOyBcblx0XHRcdFx0c2IucHVzaCgnXCIgaWQ9XCJhJyk7XG5cdFx0XHRcdHNiLnB1c2goaik7IFxuXHRcdFx0XHRzYi5wdXNoKCdcIiAnKTtcblx0XHRcdFx0Ly8gQWx3YXlzIGRvIDNEIGNvb3JkaW5hdGVzLCB1bmxlc3MgdGhlcmUgaXMgYSBmYW5jeSByZWxpYWJsZSB3YXkgdG8gdGVsbCBpZiB0aGUgbW9sZWN1bGUgaXMgMkQuXG5cdFx0XHRcdHNiLnB1c2goJ3gzPVwiJyk7XG5cdFx0XHRcdHNiLnB1c2goY3VycmVudEF0b20ueCk7XG5cdFx0XHRcdHNiLnB1c2goJ1wiIHkzPVwiJyk7XG5cdFx0XHRcdHNiLnB1c2goY3VycmVudEF0b20ueSk7XG5cdFx0XHRcdHNiLnB1c2goJ1wiIHozPVwiJyk7XG5cdFx0XHRcdHNiLnB1c2goY3VycmVudEF0b20ueik7XG5cdFx0XHRcdHNiLnB1c2goJ1wiICcpO1xuXHRcdFx0XHRpZiAoY3VycmVudEF0b20uY2hhcmdlICE9IDApIHtcblx0XHRcdFx0XHRzYi5wdXNoKCdmb3JtYWxDaGFyZ2U9XCInKTtcblx0XHRcdFx0XHRzYi5wdXNoKGN1cnJlbnRBdG9tLmNoYXJnZSk7XG5cdFx0XHRcdFx0c2IucHVzaCgnXCIgJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2IucHVzaCgnLz4nKTtcblx0XHRcdH1cblx0XHRcdHNiLnB1c2goJzwvYXRvbUFycmF5PicpO1xuXHRcdFx0c2IucHVzaCgnPGJvbmRBcnJheT4nKTtcblx0XHRcdGZvciAodmFyIGogPSAwLCBqaiA9IG1vbGVjdWxlc1tpXS5ib25kcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdHZhciBjdXJyZW50Qm9uZCA9IG1vbGVjdWxlc1tpXS5ib25kc1tqXTtcblx0XHRcdFx0c2IucHVzaCgnPGJvbmQgYXRvbVJlZnMyPVwiYScpO1xuXHRcdFx0XHRzYi5wdXNoKG1vbGVjdWxlc1tpXS5hdG9tcy5pbmRleE9mKGN1cnJlbnRCb25kLmExKSk7XG5cdFx0XHRcdHNiLnB1c2goJyBhJyk7XG5cdFx0XHRcdHNiLnB1c2gobW9sZWN1bGVzW2ldLmF0b21zLmluZGV4T2YoY3VycmVudEJvbmQuYTIpKTtcblx0XHRcdFx0c2IucHVzaCgnXCIgb3JkZXI9XCInKTtcblx0XHRcdFx0c3dpdGNoKGN1cnJlbnRCb25kLmJvbmRPcmRlcikge1xuXHRcdFx0XHRjYXNlIDEuNTpcblx0XHRcdFx0XHRzYi5wdXNoKCdBJyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRjYXNlIDM6XG5cdFx0XHRcdFx0c2IucHVzaChjdXJyZW50Qm9uZC5ib25kT3JkZXIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDAuNTpcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRzYi5wdXNoKCdTJyk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNiLnB1c2goJ1wiLz4nKTtcblx0XHRcdH1cblx0XHRcdHNiLnB1c2goJzwvYm9uZEFycmF5PicpO1xuXHRcdFx0c2IucHVzaCgnPC9tb2xlY3VsZT4nKTtcblx0XHR9XG5cdFx0c2IucHVzaCgnPC9jbWw+Jyk7XG5cdFx0cmV0dXJuIHNiLmpvaW4oJycpO1xuXHR9O1xuXG5cdC8vIHNob3J0Y3V0c1xuXHR2YXIgaW50ZXJwcmV0ZXIgPSBuZXcgaW8uQ01MSW50ZXJwcmV0ZXIoKTtcblx0Yy5yZWFkQ01MID0gZnVuY3Rpb24oY29udGVudCkge1xuXHRcdHJldHVybiBpbnRlcnByZXRlci5yZWFkKGNvbnRlbnQpO1xuXHR9O1xuXHRjLndyaXRlQ01MID0gZnVuY3Rpb24obW9sZWN1bGVzKSB7XG5cdFx0cmV0dXJuIGludGVycHJldGVyLndyaXRlKG1vbGVjdWxlcyk7XG5cdH07XG5cdFxufSkoQ2hlbURvb2RsZSwgQ2hlbURvb2RsZS5pbywgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLCBDaGVtRG9vZGxlLmxpYi5qUXVlcnkpO1xuXG4oZnVuY3Rpb24oYywgRUxFTUVOVCwgaW8sIHN0cnVjdHVyZXMsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGlvLk1PTEludGVycHJldGVyID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfID0gaW8uTU9MSW50ZXJwcmV0ZXIucHJvdG90eXBlID0gbmV3IGlvLl9JbnRlcnByZXRlcigpO1xuXHRfLnJlYWQgPSBmdW5jdGlvbihjb250ZW50LCBtdWx0aXBsaWVyKSB7XG5cdFx0aWYgKCFtdWx0aXBsaWVyKSB7XG5cdFx0XHRtdWx0aXBsaWVyID0gYy5kZWZhdWx0X2JvbmRMZW5ndGhfMkQ7XG5cdFx0fVxuXHRcdHZhciBtb2xlY3VsZSA9IG5ldyBzdHJ1Y3R1cmVzLk1vbGVjdWxlKCk7XG5cdFx0aWYgKCFjb250ZW50KSB7XG5cdFx0XHRyZXR1cm4gbW9sZWN1bGU7XG5cdFx0fVxuXHRcdHZhciBjdXJyZW50VGFnVG9rZW5zID0gY29udGVudC5zcGxpdCgnXFxuJyk7XG5cblx0XHR2YXIgY291bnRzID0gY3VycmVudFRhZ1Rva2Vuc1szXTtcblx0XHR2YXIgbnVtQXRvbXMgPSBwYXJzZUludChjb3VudHMuc3Vic3RyaW5nKDAsIDMpKTtcblx0XHR2YXIgbnVtQm9uZHMgPSBwYXJzZUludChjb3VudHMuc3Vic3RyaW5nKDMsIDYpKTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IG51bUF0b21zOyBpKyspIHtcblx0XHRcdHZhciBsaW5lID0gY3VycmVudFRhZ1Rva2Vuc1s0ICsgaV07XG5cdFx0XHRtb2xlY3VsZS5hdG9tc1tpXSA9IG5ldyBzdHJ1Y3R1cmVzLkF0b20obGluZS5zdWJzdHJpbmcoMzEsIDM0KSwgcGFyc2VGbG9hdChsaW5lLnN1YnN0cmluZygwLCAxMCkpICogbXVsdGlwbGllciwgKG11bHRpcGxpZXIgPT09IDEgPyAxIDogLTEpICogcGFyc2VGbG9hdChsaW5lLnN1YnN0cmluZygxMCwgMjApKSAqIG11bHRpcGxpZXIsIHBhcnNlRmxvYXQobGluZS5zdWJzdHJpbmcoMjAsIDMwKSkgKiBtdWx0aXBsaWVyKTtcblx0XHRcdHZhciBtYXNzRGlmID0gcGFyc2VJbnQobGluZS5zdWJzdHJpbmcoMzQsIDM2KSk7XG5cdFx0XHRpZiAobWFzc0RpZiAhPT0gMCAmJiBFTEVNRU5UW21vbGVjdWxlLmF0b21zW2ldLmxhYmVsXSkge1xuXHRcdFx0XHRtb2xlY3VsZS5hdG9tc1tpXS5tYXNzID0gRUxFTUVOVFttb2xlY3VsZS5hdG9tc1tpXS5sYWJlbF0ubWFzcyArIG1hc3NEaWY7XG5cdFx0XHR9XG5cdFx0XHRzd2l0Y2ggKHBhcnNlSW50KGxpbmUuc3Vic3RyaW5nKDM2LCAzOSkpKSB7XG5cdFx0XHRjYXNlIDE6XG5cdFx0XHRcdG1vbGVjdWxlLmF0b21zW2ldLmNoYXJnZSA9IDM7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRtb2xlY3VsZS5hdG9tc1tpXS5jaGFyZ2UgPSAyO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgMzpcblx0XHRcdFx0bW9sZWN1bGUuYXRvbXNbaV0uY2hhcmdlID0gMTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDU6XG5cdFx0XHRcdG1vbGVjdWxlLmF0b21zW2ldLmNoYXJnZSA9IC0xO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgNjpcblx0XHRcdFx0bW9sZWN1bGUuYXRvbXNbaV0uY2hhcmdlID0gLTI7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSA3OlxuXHRcdFx0XHRtb2xlY3VsZS5hdG9tc1tpXS5jaGFyZ2UgPSAtMztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IG51bUJvbmRzOyBpKyspIHtcblx0XHRcdHZhciBsaW5lID0gY3VycmVudFRhZ1Rva2Vuc1s0ICsgbnVtQXRvbXMgKyBpXTtcblx0XHRcdHZhciBib25kT3JkZXIgPSBwYXJzZUludChsaW5lLnN1YnN0cmluZyg2LCA5KSk7XG5cdFx0XHR2YXIgc3RlcmVvID0gcGFyc2VJbnQobGluZS5zdWJzdHJpbmcoOSwgMTIpKTtcblx0XHRcdGlmIChib25kT3JkZXIgPiAzKSB7XG5cdFx0XHRcdHN3aXRjaCAoYm9uZE9yZGVyKSB7XG5cdFx0XHRcdGNhc2UgNDpcblx0XHRcdFx0XHRib25kT3JkZXIgPSAxLjU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0Ym9uZE9yZGVyID0gMTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dmFyIGIgPSBuZXcgc3RydWN0dXJlcy5Cb25kKG1vbGVjdWxlLmF0b21zW3BhcnNlSW50KGxpbmUuc3Vic3RyaW5nKDAsIDMpKSAtIDFdLCBtb2xlY3VsZS5hdG9tc1twYXJzZUludChsaW5lLnN1YnN0cmluZygzLCA2KSkgLSAxXSwgYm9uZE9yZGVyKTtcblx0XHRcdHN3aXRjaCAoc3RlcmVvKSB7XG5cdFx0XHRjYXNlIDM6XG5cdFx0XHRcdGIuc3RlcmVvID0gc3RydWN0dXJlcy5Cb25kLlNURVJFT19BTUJJR1VPVVM7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRiLnN0ZXJlbyA9IHN0cnVjdHVyZXMuQm9uZC5TVEVSRU9fUFJPVFJVRElORztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIDY6XG5cdFx0XHRcdGIuc3RlcmVvID0gc3RydWN0dXJlcy5Cb25kLlNURVJFT19SRUNFU1NFRDtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtb2xlY3VsZS5ib25kc1tpXSA9IGI7XG5cdFx0fVxuXHRcdHJldHVybiBtb2xlY3VsZTtcblx0fTtcblx0Xy53cml0ZSA9IGZ1bmN0aW9uKG1vbGVjdWxlKSB7XG5cdFx0dmFyIHNiID0gW107XG5cdFx0c2IucHVzaCgnTW9sZWN1bGUgZnJvbSBDaGVtRG9vZGxlIFdlYiBDb21wb25lbnRzXFxuXFxuaHR0cDovL3d3dy5pY2hlbWxhYnMuY29tXFxuJyk7XG5cdFx0c2IucHVzaCh0aGlzLmZpdChtb2xlY3VsZS5hdG9tcy5sZW5ndGgudG9TdHJpbmcoKSwgMykpO1xuXHRcdHNiLnB1c2godGhpcy5maXQobW9sZWN1bGUuYm9uZHMubGVuZ3RoLnRvU3RyaW5nKCksIDMpKTtcblx0XHRzYi5wdXNoKCcgIDAgIDAgIDAgIDAgICAgICAgICAgICA5OTkgVjIwMDBcXG4nKTtcblx0XHR2YXIgcCA9IG1vbGVjdWxlLmdldENlbnRlcigpO1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xlY3VsZS5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgYSA9IG1vbGVjdWxlLmF0b21zW2ldO1xuXHRcdFx0dmFyIG1hc3MgPSAnIDAnO1xuXHRcdFx0aWYgKGEubWFzcyAhPT0gLTEgJiYgRUxFTUVOVFthLmxhYmVsXSkge1xuXHRcdFx0XHR2YXIgZGlmID0gYS5tYXNzIC0gRUxFTUVOVFthLmxhYmVsXS5tYXNzO1xuXHRcdFx0XHRpZiAoZGlmIDwgNSAmJiBkaWYgPiAtNCkge1xuXHRcdFx0XHRcdG1hc3MgPSAoZGlmID4gLTEgPyAnICcgOiAnJykgKyBkaWY7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHZhciBjaGFyZ2UgPSAnICAwJztcblx0XHRcdGlmIChhLmNoYXJnZSAhPT0gMCkge1xuXHRcdFx0XHRzd2l0Y2ggKGEuY2hhcmdlKSB7XG5cdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRjaGFyZ2UgPSAnICAxJztcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdGNoYXJnZSA9ICcgIDInO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0Y2hhcmdlID0gJyAgMyc7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgLTE6XG5cdFx0XHRcdFx0Y2hhcmdlID0gJyAgNSc7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgLTI6XG5cdFx0XHRcdFx0Y2hhcmdlID0gJyAgNic7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgLTM6XG5cdFx0XHRcdFx0Y2hhcmdlID0gJyAgNyc7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHNiLnB1c2godGhpcy5maXQoKChhLnggLSBwLngpIC8gYy5kZWZhdWx0X2JvbmRMZW5ndGhfMkQpLnRvRml4ZWQoNCksIDEwKSk7XG5cdFx0XHRzYi5wdXNoKHRoaXMuZml0KCgtKGEueSAtIHAueSkgLyBjLmRlZmF1bHRfYm9uZExlbmd0aF8yRCkudG9GaXhlZCg0KSwgMTApKTtcblx0XHRcdHNiLnB1c2godGhpcy5maXQoKGEueiAvIGMuZGVmYXVsdF9ib25kTGVuZ3RoXzJEKS50b0ZpeGVkKDQpLCAxMCkpO1xuXHRcdFx0c2IucHVzaCgnICcpO1xuXHRcdFx0c2IucHVzaCh0aGlzLmZpdChhLmxhYmVsLCAzLCB0cnVlKSk7XG5cdFx0XHRzYi5wdXNoKG1hc3MpO1xuXHRcdFx0c2IucHVzaChjaGFyZ2UpO1xuXHRcdFx0c2IucHVzaCgnICAwICAwICAwICAwXFxuJyk7XG5cdFx0fVxuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xlY3VsZS5ib25kcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgYiA9IG1vbGVjdWxlLmJvbmRzW2ldO1xuXHRcdFx0dmFyIHN0ZXJlbyA9IDA7XG5cdFx0XHRpZiAoYi5zdGVyZW8gPT09IHN0cnVjdHVyZXMuQm9uZC5TVEVSRU9fQU1CSUdVT1VTKSB7XG5cdFx0XHRcdHN0ZXJlbyA9IDM7XG5cdFx0XHR9IGVsc2UgaWYgKGIuc3RlcmVvID09PSBzdHJ1Y3R1cmVzLkJvbmQuU1RFUkVPX1BST1RSVURJTkcpIHtcblx0XHRcdFx0c3RlcmVvID0gMTtcblx0XHRcdH0gZWxzZSBpZiAoYi5zdGVyZW8gPT09IHN0cnVjdHVyZXMuQm9uZC5TVEVSRU9fUkVDRVNTRUQpIHtcblx0XHRcdFx0c3RlcmVvID0gNjtcblx0XHRcdH1cblx0XHRcdHNiLnB1c2godGhpcy5maXQoKG1vbGVjdWxlLmF0b21zLmluZGV4T2YoYi5hMSkgKyAxKS50b1N0cmluZygpLCAzKSk7XG5cdFx0XHRzYi5wdXNoKHRoaXMuZml0KChtb2xlY3VsZS5hdG9tcy5pbmRleE9mKGIuYTIpICsgMSkudG9TdHJpbmcoKSwgMykpO1xuXHRcdFx0dmFyIGJ0eXBlID0gYi5ib25kT3JkZXI7XG5cdFx0XHRpZihidHlwZT09MS41KXtcblx0XHRcdFx0YnR5cGUgPSA0O1xuXHRcdFx0fWVsc2UgaWYoYnR5cGU+MyB8fCBidHlwZSUxIT0wKXtcblx0XHRcdFx0YnR5cGUgPSAxO1xuXHRcdFx0fVxuXHRcdFx0c2IucHVzaCh0aGlzLmZpdChidHlwZS50b1N0cmluZygpLCAzKSk7XG5cdFx0XHRzYi5wdXNoKCcgICcpO1xuXHRcdFx0c2IucHVzaChzdGVyZW8pO1xuXHRcdFx0c2IucHVzaCgnICAwICAwICAwXFxuJyk7XG5cdFx0fVxuXHRcdHNiLnB1c2goJ00gIEVORCcpO1xuXHRcdHJldHVybiBzYi5qb2luKCcnKTtcblx0fTtcblxuXHQvLyBzaG9ydGN1dHNcblx0dmFyIGludGVycHJldGVyID0gbmV3IGlvLk1PTEludGVycHJldGVyKCk7XG5cdGMucmVhZE1PTCA9IGZ1bmN0aW9uKGNvbnRlbnQsIG11bHRpcGxpZXIpIHtcblx0XHRyZXR1cm4gaW50ZXJwcmV0ZXIucmVhZChjb250ZW50LCBtdWx0aXBsaWVyKTtcblx0fTtcblx0Yy53cml0ZU1PTCA9IGZ1bmN0aW9uKG1vbCkge1xuXHRcdHJldHVybiBpbnRlcnByZXRlci53cml0ZShtb2wpO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLCBDaGVtRG9vZGxlLkVMRU1FTlQsIENoZW1Eb29kbGUuaW8sIENoZW1Eb29kbGUuc3RydWN0dXJlcyk7XG5cbihmdW5jdGlvbihjLCBleHRlbnNpb25zLCBpbywgc3RydWN0dXJlcywgRUxFTUVOVCwgdHJpbSwgbSwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZnVuY3Rpb24gY2hlY2tDb250YWluZWQocmVzaWR1ZSwgc2V0LCBjaGFpbklELCBpbmRleCwgaGVsaXgpIHtcblx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gc2V0Lmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdHZhciBjaGVjayA9IHNldFtqXTtcblx0XHRcdGlmIChjaGVjay5pZCA9PT0gY2hhaW5JRCAmJiBpbmRleCA+PSBjaGVjay5zdGFydCAmJiBpbmRleCA8PSBjaGVjay5lbmQpIHtcblx0XHRcdFx0aWYgKGhlbGl4KSB7XG5cdFx0XHRcdFx0cmVzaWR1ZS5oZWxpeCA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmVzaWR1ZS5zaGVldCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGluZGV4ID09PSBjaGVjay5lbmQpIHtcblx0XHRcdFx0XHRyZXNpZHVlLmFycm93ID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdFxuXHRpby5QREJJbnRlcnByZXRlciA9IGZ1bmN0aW9uKCkge1xuXHR9O1xuXHR2YXIgXyA9IGlvLlBEQkludGVycHJldGVyLnByb3RvdHlwZSA9IG5ldyBpby5fSW50ZXJwcmV0ZXIoKTtcblx0Xy5jYWxjdWxhdGVSaWJib25EaXN0YW5jZXMgPSBmYWxzZTtcblx0Xy5kZWR1Y2VSZXNpZHVlQm9uZHMgPSBmYWxzZTtcblx0Xy5yZWFkID0gZnVuY3Rpb24oY29udGVudCwgbXVsdGlwbGllcikge1xuXHRcdHZhciBtb2xlY3VsZSA9IG5ldyBzdHJ1Y3R1cmVzLk1vbGVjdWxlKCk7XG5cdFx0bW9sZWN1bGUuY2hhaW5zID0gW107XG5cdFx0aWYgKCFjb250ZW50KSB7XG5cdFx0XHRyZXR1cm4gbW9sZWN1bGU7XG5cdFx0fVxuXHRcdHZhciBjdXJyZW50VGFnVG9rZW5zID0gY29udGVudC5zcGxpdCgnXFxuJyk7XG5cdFx0aWYgKCFtdWx0aXBsaWVyKSB7XG5cdFx0XHRtdWx0aXBsaWVyID0gMTtcblx0XHR9XG5cdFx0dmFyIGhlbGljZXMgPSBbXTtcblx0XHR2YXIgc2hlZXRzID0gW107XG5cdFx0dmFyIGxhc3RDO1xuXHRcdHZhciBjdXJyZW50Q2hhaW4gPSBbXTtcblx0XHR2YXIgcmVzYXRvbXMgPSBbXTtcblx0XHR2YXIgYXRvbVNlcmlhbHMgPSBbXTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gY3VycmVudFRhZ1Rva2Vucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgbGluZSA9IGN1cnJlbnRUYWdUb2tlbnNbaV07XG5cdFx0XHRpZiAoZXh0ZW5zaW9ucy5zdHJpbmdTdGFydHNXaXRoKGxpbmUsICdIRUxJWCcpKSB7XG5cdFx0XHRcdGhlbGljZXMucHVzaCh7XG5cdFx0XHRcdFx0aWQgOiBsaW5lLnN1YnN0cmluZygxOSwgMjApLFxuXHRcdFx0XHRcdHN0YXJ0IDogcGFyc2VJbnQobGluZS5zdWJzdHJpbmcoMjEsIDI1KSksXG5cdFx0XHRcdFx0ZW5kIDogcGFyc2VJbnQobGluZS5zdWJzdHJpbmcoMzMsIDM3KSlcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2UgaWYgKGV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChsaW5lLCAnU0hFRVQnKSkge1xuXHRcdFx0XHRzaGVldHMucHVzaCh7XG5cdFx0XHRcdFx0aWQgOiBsaW5lLnN1YnN0cmluZygyMSwgMjIpLFxuXHRcdFx0XHRcdHN0YXJ0IDogcGFyc2VJbnQobGluZS5zdWJzdHJpbmcoMjIsIDI2KSksXG5cdFx0XHRcdFx0ZW5kIDogcGFyc2VJbnQobGluZS5zdWJzdHJpbmcoMzMsIDM3KSlcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2UgaWYgKGV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChsaW5lLCAnQVRPTScpKSB7XG5cdFx0XHRcdHZhciBhbHRMb2MgPSBsaW5lLnN1YnN0cmluZygxNiwgMTcpO1xuXHRcdFx0XHRpZiAoYWx0TG9jID09PSAnICcgfHwgYWx0TG9jID09PSAnQScpIHtcblx0XHRcdFx0XHR2YXIgbGFiZWwgPSB0cmltKGxpbmUuc3Vic3RyaW5nKDc2LCA3OCkpO1xuXHRcdFx0XHRcdGlmIChsYWJlbC5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHRcdHZhciBzID0gdHJpbShsaW5lLnN1YnN0cmluZygxMiwgMTQpKTtcblx0XHRcdFx0XHRcdGlmIChzID09PSAnSEQnKSB7XG5cdFx0XHRcdFx0XHRcdGxhYmVsID0gJ0gnO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRcdFx0aWYgKHMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsID0gcy5jaGFyQXQoMCkgKyBzLnN1YnN0cmluZygxKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGxhYmVsID0gcztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2YXIgYSA9IG5ldyBzdHJ1Y3R1cmVzLkF0b20obGFiZWwsIHBhcnNlRmxvYXQobGluZS5zdWJzdHJpbmcoMzAsIDM4KSkgKiBtdWx0aXBsaWVyLCBwYXJzZUZsb2F0KGxpbmUuc3Vic3RyaW5nKDM4LCA0NikpICogbXVsdGlwbGllciwgcGFyc2VGbG9hdChsaW5lLnN1YnN0cmluZyg0NiwgNTQpKSAqIG11bHRpcGxpZXIpO1xuXHRcdFx0XHRcdGEuaGV0YXRtID0gZmFsc2U7XG5cdFx0XHRcdFx0cmVzYXRvbXMucHVzaChhKTtcblx0XHRcdFx0XHQvLyBzZXQgdXAgcmVzaWR1ZVxuXHRcdFx0XHRcdHZhciByZXNTZXEgPSBwYXJzZUludChsaW5lLnN1YnN0cmluZygyMiwgMjYpKTtcblx0XHRcdFx0XHRpZiAoY3VycmVudENoYWluLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgMzsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBkdW1teUZyb250ID0gbmV3IHN0cnVjdHVyZXMuUmVzaWR1ZSgtMSk7XG5cdFx0XHRcdFx0XHRcdGR1bW15RnJvbnQuY3AxID0gYTtcblx0XHRcdFx0XHRcdFx0ZHVtbXlGcm9udC5jcDIgPSBhO1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50Q2hhaW4ucHVzaChkdW1teUZyb250KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHJlc1NlcSAhPT0gTnVtYmVyLk5hTiAmJiBjdXJyZW50Q2hhaW5bY3VycmVudENoYWluLmxlbmd0aCAtIDFdLnJlc1NlcSAhPT0gcmVzU2VxKSB7XG5cdFx0XHRcdFx0XHR2YXIgciA9IG5ldyBzdHJ1Y3R1cmVzLlJlc2lkdWUocmVzU2VxKTtcblx0XHRcdFx0XHRcdHIubmFtZSA9IHRyaW0obGluZS5zdWJzdHJpbmcoMTcsIDIwKSk7XG5cdFx0XHRcdFx0XHRpZiAoci5uYW1lLmxlbmd0aCA9PT0gMykge1xuXHRcdFx0XHRcdFx0XHRyLm5hbWUgPSByLm5hbWUuc3Vic3RyaW5nKDAsIDEpICsgci5uYW1lLnN1YnN0cmluZygxKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0aWYgKHIubmFtZS5sZW5ndGggPT09IDIgJiYgci5uYW1lLmNoYXJBdCgwKSA9PT0gJ0QnKSB7XG5cdFx0XHRcdFx0XHRcdFx0ci5uYW1lID0gci5uYW1lLnN1YnN0cmluZygxKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y3VycmVudENoYWluLnB1c2gocik7XG5cdFx0XHRcdFx0XHR2YXIgY2hhaW5JRCA9IGxpbmUuc3Vic3RyaW5nKDIxLCAyMik7XG5cdFx0XHRcdFx0XHRjaGVja0NvbnRhaW5lZChyLCBoZWxpY2VzLCBjaGFpbklELCByZXNTZXEsIHRydWUpO1xuXHRcdFx0XHRcdFx0Y2hlY2tDb250YWluZWQociwgc2hlZXRzLCBjaGFpbklELCByZXNTZXEsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gZW5kIHJlc2lkdWUgc2V0dXBcblx0XHRcdFx0XHR2YXIgYXRvbU5hbWUgPSB0cmltKGxpbmUuc3Vic3RyaW5nKDEyLCAxNikpO1xuXHRcdFx0XHRcdHZhciBjdXJyZW50UmVzaWR1ZSA9IGN1cnJlbnRDaGFpbltjdXJyZW50Q2hhaW4ubGVuZ3RoIC0gMV07XG5cdFx0XHRcdFx0aWYgKGF0b21OYW1lID09PSAnQ0EnIHx8IGF0b21OYW1lID09PSAnUCcgfHwgYXRvbU5hbWUgPT09ICdPNVxcJycpIHtcblx0XHRcdFx0XHRcdGlmICghY3VycmVudFJlc2lkdWUuY3AxKSB7XG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRSZXNpZHVlLmNwMSA9IGE7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChhdG9tTmFtZSA9PT0gJ04zJyAmJiAoY3VycmVudFJlc2lkdWUubmFtZSA9PT0gJ0MnIHx8IGN1cnJlbnRSZXNpZHVlLm5hbWUgPT09ICdVJyB8fCBjdXJyZW50UmVzaWR1ZS5uYW1lID09PSAnVCcpIHx8IGF0b21OYW1lID09PSAnTjEnICYmIChjdXJyZW50UmVzaWR1ZS5uYW1lID09PSAnQScgfHwgY3VycmVudFJlc2lkdWUubmFtZSA9PT0gJ0cnKSkge1xuXHRcdFx0XHRcdFx0Ly8gY29udHJvbCBwb2ludHMgZm9yIGJhc2UgcGxhdGZvcm0gZGlyZWN0aW9uXG5cdFx0XHRcdFx0XHRjdXJyZW50UmVzaWR1ZS5jcDMgPSBhO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoYXRvbU5hbWUgPT09ICdDMicpIHtcblx0XHRcdFx0XHRcdC8vIGNvbnRyb2wgcG9pbnRzIGZvciBiYXNlIHBsYXRmb3JtIG9yaWVudGF0aW9uXG5cdFx0XHRcdFx0XHRjdXJyZW50UmVzaWR1ZS5jcDQgPSBhO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoYXRvbU5hbWUgPT09ICdDNCcgJiYgKGN1cnJlbnRSZXNpZHVlLm5hbWUgPT09ICdDJyB8fCBjdXJyZW50UmVzaWR1ZS5uYW1lID09PSAnVScgfHwgY3VycmVudFJlc2lkdWUubmFtZSA9PT0gJ1QnKSB8fCBhdG9tTmFtZSA9PT0gJ0M2JyAmJiAoY3VycmVudFJlc2lkdWUubmFtZSA9PT0gJ0EnIHx8IGN1cnJlbnRSZXNpZHVlLm5hbWUgPT09ICdHJykpIHtcblx0XHRcdFx0XHRcdC8vIGNvbnRyb2wgcG9pbnRzIGZvciBiYXNlIHBsYXRmb3JtIG9yaWVudGF0aW9uXG5cdFx0XHRcdFx0XHRjdXJyZW50UmVzaWR1ZS5jcDUgPSBhO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoYXRvbU5hbWUgPT09ICdPJyB8fCBhdG9tTmFtZSA9PT0gJ0M2JyAmJiAoY3VycmVudFJlc2lkdWUubmFtZSA9PT0gJ0MnIHx8IGN1cnJlbnRSZXNpZHVlLm5hbWUgPT09ICdVJyB8fCBjdXJyZW50UmVzaWR1ZS5uYW1lID09PSAnVCcpIHx8IGF0b21OYW1lID09PSAnTjknKSB7XG5cdFx0XHRcdFx0XHRpZiAoIWN1cnJlbnRDaGFpbltjdXJyZW50Q2hhaW4ubGVuZ3RoIC0gMV0uY3AyKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChhdG9tTmFtZSA9PT0gJ0M2JyB8fCBhdG9tTmFtZSA9PT0gJ045Jykge1xuXHRcdFx0XHRcdFx0XHRcdGxhc3RDID0gYTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRjdXJyZW50UmVzaWR1ZS5jcDIgPSBhO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoYXRvbU5hbWUgPT09ICdDJykge1xuXHRcdFx0XHRcdFx0bGFzdEMgPSBhO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChleHRlbnNpb25zLnN0cmluZ1N0YXJ0c1dpdGgobGluZSwgJ0hFVEFUTScpKSB7XG5cdFx0XHRcdHZhciBzeW1ib2wgPSB0cmltKGxpbmUuc3Vic3RyaW5nKDc2LCA3OCkpO1xuXHRcdFx0XHRpZiAoc3ltYm9sLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdC8vIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSBhbiBpbXByb3Blcmx5IGZvcm1hdHRlZCBQREJcblx0XHRcdFx0XHQvLyBmaWxlIHN0YXRlcyB0aGUgZWxlbWVudCBsYWJlbCBpbiB0aGUgYXRvbSBuYW1lIGNvbHVtblxuXHRcdFx0XHRcdHN5bWJvbCA9IHRyaW0obGluZS5zdWJzdHJpbmcoMTIsIDE2KSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHN5bWJvbC5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdFx0c3ltYm9sID0gc3ltYm9sLnN1YnN0cmluZygwLCAxKSArIHN5bWJvbC5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgaGV0ID0gbmV3IHN0cnVjdHVyZXMuQXRvbShzeW1ib2wsIHBhcnNlRmxvYXQobGluZS5zdWJzdHJpbmcoMzAsIDM4KSkgKiBtdWx0aXBsaWVyLCBwYXJzZUZsb2F0KGxpbmUuc3Vic3RyaW5nKDM4LCA0NikpICogbXVsdGlwbGllciwgcGFyc2VGbG9hdChsaW5lLnN1YnN0cmluZyg0NiwgNTQpKSAqIG11bHRpcGxpZXIpO1xuXHRcdFx0XHRoZXQuaGV0YXRtID0gdHJ1ZTtcblx0XHRcdFx0dmFyIHJlc2lkdWVOYW1lID0gdHJpbShsaW5lLnN1YnN0cmluZygxNywgMjApKTtcblx0XHRcdFx0aWYgKHJlc2lkdWVOYW1lID09PSAnSE9IJykge1xuXHRcdFx0XHRcdGhldC5pc1dhdGVyID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRtb2xlY3VsZS5hdG9tcy5wdXNoKGhldCk7XG5cdFx0XHRcdGF0b21TZXJpYWxzW3BhcnNlSW50KHRyaW0obGluZS5zdWJzdHJpbmcoNiwgMTEpKSldID0gaGV0O1xuXHRcdFx0fSBlbHNlIGlmIChleHRlbnNpb25zLnN0cmluZ1N0YXJ0c1dpdGgobGluZSwgJ0NPTkVDVCcpKSB7XG5cdFx0XHRcdHZhciBvaWQgPSBwYXJzZUludCh0cmltKGxpbmUuc3Vic3RyaW5nKDYsIDExKSkpO1xuXHRcdFx0XHRpZiAoYXRvbVNlcmlhbHNbb2lkXSkge1xuXHRcdFx0XHRcdHZhciBvcmlnaW4gPSBhdG9tU2VyaWFsc1tvaWRdO1xuXHRcdFx0XHRcdGZvciAoIHZhciBrID0gMDsgayA8IDQ7IGsrKykge1xuXHRcdFx0XHRcdFx0dmFyIG5leHQgPSB0cmltKGxpbmUuc3Vic3RyaW5nKDExICsgayAqIDUsIDE2ICsgayAqIDUpKTtcblx0XHRcdFx0XHRcdGlmIChuZXh0Lmxlbmd0aCAhPT0gMCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgbmlkID0gcGFyc2VJbnQobmV4dCk7XG5cdFx0XHRcdFx0XHRcdGlmIChhdG9tU2VyaWFsc1tuaWRdKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGEyID0gYXRvbVNlcmlhbHNbbmlkXTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgZm91bmQgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gbW9sZWN1bGUuYm9uZHMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIGIgPSBtb2xlY3VsZS5ib25kc1tqXTtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChiLmExID09PSBvcmlnaW4gJiYgYi5hMiA9PT0gYTIgfHwgYi5hMSA9PT0gYTIgJiYgYi5hMiA9PT0gb3JpZ2luKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZvdW5kID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGlmICghZm91bmQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdG1vbGVjdWxlLmJvbmRzLnB1c2gobmV3IHN0cnVjdHVyZXMuQm9uZChvcmlnaW4sIGEyKSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChsaW5lLCAnVEVSJykpIHtcblx0XHRcdFx0dGhpcy5lbmRDaGFpbihtb2xlY3VsZSwgY3VycmVudENoYWluLCBsYXN0QywgcmVzYXRvbXMpO1xuXHRcdFx0XHRjdXJyZW50Q2hhaW4gPSBbXTtcblx0XHRcdH0gZWxzZSBpZiAoZXh0ZW5zaW9ucy5zdHJpbmdTdGFydHNXaXRoKGxpbmUsICdFTkRNREwnKSkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5lbmRDaGFpbihtb2xlY3VsZSwgY3VycmVudENoYWluLCBsYXN0QywgcmVzYXRvbXMpO1xuXHRcdGlmIChtb2xlY3VsZS5ib25kcy5zaXplID09PSAwKSB7XG5cdFx0XHRuZXcgYy5pbmZvcm1hdGljcy5Cb25kRGVkdWNlcigpLmRlZHVjZUNvdmFsZW50Qm9uZHMobW9sZWN1bGUsIG11bHRpcGxpZXIpO1xuXHRcdH1cblx0XHRpZiAodGhpcy5kZWR1Y2VSZXNpZHVlQm9uZHMpIHtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSByZXNhdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBtYXggPSBtLm1pbihpaSwgaSArIDIwKTtcblx0XHRcdFx0Zm9yICggdmFyIGogPSBpICsgMTsgaiA8IG1heDsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIGZpcnN0ID0gcmVzYXRvbXNbaV07XG5cdFx0XHRcdFx0dmFyIHNlY29uZCA9IHJlc2F0b21zW2pdO1xuXHRcdFx0XHRcdGlmIChmaXJzdC5kaXN0YW5jZTNEKHNlY29uZCkgPCAoRUxFTUVOVFtmaXJzdC5sYWJlbF0uY292YWxlbnRSYWRpdXMgKyBFTEVNRU5UW3NlY29uZC5sYWJlbF0uY292YWxlbnRSYWRpdXMpICogMS4xKSB7XG5cdFx0XHRcdFx0XHRtb2xlY3VsZS5ib25kcy5wdXNoKG5ldyBzdHJ1Y3R1cmVzLkJvbmQoZmlyc3QsIHNlY29uZCwgMSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRtb2xlY3VsZS5hdG9tcyA9IG1vbGVjdWxlLmF0b21zLmNvbmNhdChyZXNhdG9tcyk7XG5cdFx0aWYgKHRoaXMuY2FsY3VsYXRlUmliYm9uRGlzdGFuY2VzKSB7XG5cdFx0XHR0aGlzLmNhbGN1bGF0ZURpc3RhbmNlcyhtb2xlY3VsZSwgcmVzYXRvbXMpO1xuXHRcdH1cblx0XHRyZXR1cm4gbW9sZWN1bGU7XG5cdH07XG5cdF8uZW5kQ2hhaW4gPSBmdW5jdGlvbihtb2xlY3VsZSwgY2hhaW4sIGxhc3RDLCByZXNhdG9tcykge1xuXHRcdGlmIChjaGFpbi5sZW5ndGggPiAwKSB7XG5cdFx0XHR2YXIgbGFzdCA9IGNoYWluW2NoYWluLmxlbmd0aCAtIDFdO1xuXHRcdFx0aWYgKCFsYXN0LmNwMSkge1xuXHRcdFx0XHRsYXN0LmNwMSA9IHJlc2F0b21zW3Jlc2F0b21zLmxlbmd0aCAtIDJdO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCFsYXN0LmNwMikge1xuXHRcdFx0XHRsYXN0LmNwMiA9IHJlc2F0b21zW3Jlc2F0b21zLmxlbmd0aCAtIDFdO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdFx0XHRcdHZhciBkdW1teUVuZCA9IG5ldyBzdHJ1Y3R1cmVzLlJlc2lkdWUoLTEpO1xuXHRcdFx0XHRkdW1teUVuZC5jcDEgPSBsYXN0Qztcblx0XHRcdFx0ZHVtbXlFbmQuY3AyID0gY2hhaW5bY2hhaW4ubGVuZ3RoIC0gMV0uY3AyO1xuXHRcdFx0XHRjaGFpbi5wdXNoKGR1bW15RW5kKTtcblx0XHRcdH1cblx0XHRcdG1vbGVjdWxlLmNoYWlucy5wdXNoKGNoYWluKTtcblx0XHR9XG5cdH07XG5cdF8uY2FsY3VsYXRlRGlzdGFuY2VzID0gZnVuY3Rpb24obW9sZWN1bGUsIHJlc2F0b21zKSB7XG5cdFx0dmFyIGhldGF0bSA9IFtdO1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xlY3VsZS5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgYSA9IG1vbGVjdWxlLmF0b21zW2ldO1xuXHRcdFx0aWYgKGEuaGV0YXRtKSB7XG5cdFx0XHRcdGlmICghYS5pc1dhdGVyKSB7XG5cdFx0XHRcdFx0aGV0YXRtLnB1c2goYSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHJlc2F0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBhID0gcmVzYXRvbXNbaV07XG5cdFx0XHRhLmNsb3Nlc3REaXN0YW5jZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0XHRcdGlmIChoZXRhdG0ubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdGEuY2xvc2VzdERpc3RhbmNlID0gMDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBoZXRhdG0ubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdGEuY2xvc2VzdERpc3RhbmNlID0gTWF0aC5taW4oYS5jbG9zZXN0RGlzdGFuY2UsIGEuZGlzdGFuY2UzRChoZXRhdG1bal0pKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvLyBzaG9ydGN1dHNcblx0dmFyIGludGVycHJldGVyID0gbmV3IGlvLlBEQkludGVycHJldGVyKCk7XG5cdGMucmVhZFBEQiA9IGZ1bmN0aW9uKGNvbnRlbnQsIG11bHRpcGxpZXIpIHtcblx0XHRyZXR1cm4gaW50ZXJwcmV0ZXIucmVhZChjb250ZW50LCBtdWx0aXBsaWVyKTtcblx0fTtcblxufSkoQ2hlbURvb2RsZSwgQ2hlbURvb2RsZS5leHRlbnNpb25zLCBDaGVtRG9vZGxlLmlvLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMsIENoZW1Eb29kbGUuRUxFTUVOVCwgQ2hlbURvb2RsZS5saWIualF1ZXJ5LnRyaW0sIE1hdGgpO1xuXG4oZnVuY3Rpb24oYywgZXh0ZW5zaW9ucywgaW8sIHN0cnVjdHVyZXMsIHEsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdHZhciBTUVpfSEFTSCA9IHtcblx0XHQnQCcgOiAwLFxuXHRcdCdBJyA6IDEsXG5cdFx0J0InIDogMixcblx0XHQnQycgOiAzLFxuXHRcdCdEJyA6IDQsXG5cdFx0J0UnIDogNSxcblx0XHQnRicgOiA2LFxuXHRcdCdHJyA6IDcsXG5cdFx0J0gnIDogOCxcblx0XHQnSScgOiA5LFxuXHRcdCdhJyA6IC0xLFxuXHRcdCdiJyA6IC0yLFxuXHRcdCdjJyA6IC0zLFxuXHRcdCdkJyA6IC00LFxuXHRcdCdlJyA6IC01LFxuXHRcdCdmJyA6IC02LFxuXHRcdCdnJyA6IC03LFxuXHRcdCdoJyA6IC04LFxuXHRcdCdpJyA6IC05XG5cdH0sIERJRl9IQVNIID0ge1xuXHRcdCclJyA6IDAsXG5cdFx0J0onIDogMSxcblx0XHQnSycgOiAyLFxuXHRcdCdMJyA6IDMsXG5cdFx0J00nIDogNCxcblx0XHQnTicgOiA1LFxuXHRcdCdPJyA6IDYsXG5cdFx0J1AnIDogNyxcblx0XHQnUScgOiA4LFxuXHRcdCdSJyA6IDksXG5cdFx0J2onIDogLTEsXG5cdFx0J2snIDogLTIsXG5cdFx0J2wnIDogLTMsXG5cdFx0J20nIDogLTQsXG5cdFx0J24nIDogLTUsXG5cdFx0J28nIDogLTYsXG5cdFx0J3AnIDogLTcsXG5cdFx0J3EnIDogLTgsXG5cdFx0J3InIDogLTlcblx0fSwgRFVQX0hBU0ggPSB7XG5cdFx0J1MnIDogMSxcblx0XHQnVCcgOiAyLFxuXHRcdCdVJyA6IDMsXG5cdFx0J1YnIDogNCxcblx0XHQnVycgOiA1LFxuXHRcdCdYJyA6IDYsXG5cdFx0J1knIDogNyxcblx0XHQnWicgOiA4LFxuXHRcdCdzJyA6IDlcblx0fTtcblxuXHRpby5KQ0FNUEludGVycHJldGVyID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfID0gaW8uSkNBTVBJbnRlcnByZXRlci5wcm90b3R5cGUgPSBuZXcgaW8uX0ludGVycHJldGVyKCk7XG5cdF8uY29udmVydEhaMlBQTSA9IGZhbHNlO1xuXHRfLnJlYWQgPSBmdW5jdGlvbihjb250ZW50KSB7XG5cdFx0dGhpcy5pc0JyZWFrID0gZnVuY3Rpb24oYykge1xuXHRcdFx0Ly8gc29tZSBvZiB0aGVzZSBhcnJheXMgbWF5IHJldHVybiB6ZXJvLCBzbyBjaGVjayBpZiB1bmRlZmluZWRcblx0XHRcdHJldHVybiBTUVpfSEFTSFtjXSAhPT0gdW5kZWZpbmVkIHx8IERJRl9IQVNIW2NdICE9PSB1bmRlZmluZWQgfHwgRFVQX0hBU0hbY10gIT09IHVuZGVmaW5lZCB8fCBjID09PSAnICcgfHwgYyA9PT0gJy0nIHx8IGMgPT09ICcrJztcblx0XHR9O1xuXHRcdHRoaXMuZ2V0VmFsdWUgPSBmdW5jdGlvbihkZWNpcGhlciwgbGFzdERpZikge1xuXHRcdFx0dmFyIGZpcnN0ID0gZGVjaXBoZXIuY2hhckF0KDApO1xuXHRcdFx0dmFyIHJlc3QgPSBkZWNpcGhlci5zdWJzdHJpbmcoMSk7XG5cdFx0XHQvLyBzb21lIG9mIHRoZXNlIGFycmF5cyBtYXkgcmV0dXJuIHplcm8sIHNvIGNoZWNrIGlmIHVuZGVmaW5lZFxuXHRcdFx0aWYgKFNRWl9IQVNIW2ZpcnN0XSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHJldHVybiBwYXJzZUZsb2F0KFNRWl9IQVNIW2ZpcnN0XSArIHJlc3QpO1xuXHRcdFx0fSBlbHNlIGlmIChESUZfSEFTSFtmaXJzdF0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRyZXR1cm4gcGFyc2VGbG9hdChESUZfSEFTSFtmaXJzdF0gKyByZXN0KSArIGxhc3REaWY7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcGFyc2VGbG9hdChyZXN0KTtcblx0XHR9O1xuXHRcdHZhciBzcGVjdHJ1bSA9IG5ldyBzdHJ1Y3R1cmVzLlNwZWN0cnVtKCk7XG5cdFx0aWYgKGNvbnRlbnQgPT09IHVuZGVmaW5lZCB8fCBjb250ZW50Lmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIHNwZWN0cnVtO1xuXHRcdH1cblx0XHR2YXIgbGluZXMgPSBjb250ZW50LnNwbGl0KCdcXG4nKTtcblx0XHR2YXIgc2IgPSBbXTtcblx0XHR2YXIgeExhc3QsIHhGaXJzdCwgeUZpcnN0LCBuUG9pbnRzLCB4RmFjdG9yID0gMSwgeUZhY3RvciA9IDEsIG9ic2VydmVGcmVxdWVuY3kgPSAxLCBkZWx0YVggPSAtMSwgc2hpZnRPZmZzZXROdW0gPSAtMSwgc2hpZnRPZmZzZXRWYWwgPSAtMTtcblx0XHR2YXIgcmVjb3JkTWV0YSA9IHRydWUsIGRpdmlkZUJ5RnJlcXVlbmN5ID0gZmFsc2U7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IGxpbmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciB1c2UgPSBsaW5lc1tpXS50cmltKCk7XG5cdFx0XHR2YXIgaW5kZXggPSB1c2UuaW5kZXhPZignJCQnKTtcblx0XHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdFx0dXNlID0gdXNlLnN1YnN0cmluZygwLCBpbmRleCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoc2IubGVuZ3RoID09PSAwIHx8ICFleHRlbnNpb25zLnN0cmluZ1N0YXJ0c1dpdGgobGluZXNbaV0sICcjIycpKSB7XG5cdFx0XHRcdHZhciB0cmltbWVkID0gdXNlLnRyaW0oKTtcblx0XHRcdFx0aWYgKHNiLmxlbmd0aCAhPT0gMCAmJiB0cmltbWVkLmxlbmd0aCE9PTApIHtcblx0XHRcdFx0XHRzYi5wdXNoKCdcXG4nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzYi5wdXNoKHRyaW1tZWQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIGN1cnJlbnRSZWNvcmQgPSBzYi5qb2luKCcnKTtcblx0XHRcdFx0aWYgKHJlY29yZE1ldGEgJiYgY3VycmVudFJlY29yZC5sZW5ndGggPCAxMDApIHtcblx0XHRcdFx0XHRzcGVjdHJ1bS5tZXRhZGF0YS5wdXNoKGN1cnJlbnRSZWNvcmQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNiID0gWyB1c2UgXTtcblx0XHRcdFx0aWYgKGV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChjdXJyZW50UmVjb3JkLCAnIyNUSVRMRT0nKSkge1xuXHRcdFx0XHRcdHNwZWN0cnVtLnRpdGxlID0gY3VycmVudFJlY29yZC5zdWJzdHJpbmcoOCkudHJpbSgpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChjdXJyZW50UmVjb3JkLCAnIyNYVU5JVFM9JykpIHtcblx0XHRcdFx0XHRzcGVjdHJ1bS54VW5pdCA9IGN1cnJlbnRSZWNvcmQuc3Vic3RyaW5nKDkpLnRyaW0oKTtcblx0XHRcdFx0XHRpZiAodGhpcy5jb252ZXJ0SFoyUFBNICYmIHNwZWN0cnVtLnhVbml0LnRvVXBwZXJDYXNlKCkgPT09ICdIWicpIHtcblx0XHRcdFx0XHRcdHNwZWN0cnVtLnhVbml0ID0gJ1BQTSc7XG5cdFx0XHRcdFx0XHRkaXZpZGVCeUZyZXF1ZW5jeSA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKGV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChjdXJyZW50UmVjb3JkLCAnIyNZVU5JVFM9JykpIHtcblx0XHRcdFx0XHRzcGVjdHJ1bS55VW5pdCA9IGN1cnJlbnRSZWNvcmQuc3Vic3RyaW5nKDkpLnRyaW0oKTtcblx0XHRcdFx0fSBlbHNlIGlmIChleHRlbnNpb25zLnN0cmluZ1N0YXJ0c1dpdGgoY3VycmVudFJlY29yZCwgJyMjWFlQQUlSUz0nKSkge1xuXHRcdFx0XHRcdC8vIHNwZWN0cnVtLnlVbml0ID0gY3VycmVudFJlY29yZC5zdWJzdHJpbmcoOSkudHJpbSgpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChjdXJyZW50UmVjb3JkLCAnIyNGSVJTVFg9JykpIHtcblx0XHRcdFx0XHR4Rmlyc3QgPSBwYXJzZUZsb2F0KGN1cnJlbnRSZWNvcmQuc3Vic3RyaW5nKDkpLnRyaW0oKSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZXh0ZW5zaW9ucy5zdHJpbmdTdGFydHNXaXRoKGN1cnJlbnRSZWNvcmQsICcjI0xBU1RYPScpKSB7XG5cdFx0XHRcdFx0eExhc3QgPSBwYXJzZUZsb2F0KGN1cnJlbnRSZWNvcmQuc3Vic3RyaW5nKDgpLnRyaW0oKSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZXh0ZW5zaW9ucy5zdHJpbmdTdGFydHNXaXRoKGN1cnJlbnRSZWNvcmQsICcjI0ZJUlNUWT0nKSkge1xuXHRcdFx0XHRcdHlGaXJzdCA9IHBhcnNlRmxvYXQoY3VycmVudFJlY29yZC5zdWJzdHJpbmcoOSkudHJpbSgpKTtcblx0XHRcdFx0fSBlbHNlIGlmIChleHRlbnNpb25zLnN0cmluZ1N0YXJ0c1dpdGgoY3VycmVudFJlY29yZCwgJyMjTlBPSU5UUz0nKSkge1xuXHRcdFx0XHRcdG5Qb2ludHMgPSBwYXJzZUZsb2F0KGN1cnJlbnRSZWNvcmQuc3Vic3RyaW5nKDEwKS50cmltKCkpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChjdXJyZW50UmVjb3JkLCAnIyNYRkFDVE9SPScpKSB7XG5cdFx0XHRcdFx0eEZhY3RvciA9IHBhcnNlRmxvYXQoY3VycmVudFJlY29yZC5zdWJzdHJpbmcoMTApLnRyaW0oKSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZXh0ZW5zaW9ucy5zdHJpbmdTdGFydHNXaXRoKGN1cnJlbnRSZWNvcmQsICcjI1lGQUNUT1I9JykpIHtcblx0XHRcdFx0XHR5RmFjdG9yID0gcGFyc2VGbG9hdChjdXJyZW50UmVjb3JkLnN1YnN0cmluZygxMCkudHJpbSgpKTtcblx0XHRcdFx0fSBlbHNlIGlmIChleHRlbnNpb25zLnN0cmluZ1N0YXJ0c1dpdGgoY3VycmVudFJlY29yZCwgJyMjREVMVEFYPScpKSB7XG5cdFx0XHRcdFx0ZGVsdGFYID0gcGFyc2VGbG9hdChjdXJyZW50UmVjb3JkLnN1YnN0cmluZyg5KS50cmltKCkpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChjdXJyZW50UmVjb3JkLCAnIyMuT0JTRVJWRSBGUkVRVUVOQ1k9JykpIHtcblx0XHRcdFx0XHRpZiAodGhpcy5jb252ZXJ0SFoyUFBNKSB7XG5cdFx0XHRcdFx0XHRvYnNlcnZlRnJlcXVlbmN5ID0gcGFyc2VGbG9hdChjdXJyZW50UmVjb3JkLnN1YnN0cmluZygyMSkudHJpbSgpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoZXh0ZW5zaW9ucy5zdHJpbmdTdGFydHNXaXRoKGN1cnJlbnRSZWNvcmQsICcjIy5TSElGVCBSRUZFUkVOQ0U9JykpIHtcblx0XHRcdFx0XHRpZiAodGhpcy5jb252ZXJ0SFoyUFBNKSB7XG5cdFx0XHRcdFx0XHR2YXIgcGFydHMgPSBjdXJyZW50UmVjb3JkLnN1YnN0cmluZygxOSkuc3BsaXQoJywnKTtcblx0XHRcdFx0XHRcdHNoaWZ0T2Zmc2V0TnVtID0gcGFyc2VJbnQocGFydHNbMl0udHJpbSgpKTtcblx0XHRcdFx0XHRcdHNoaWZ0T2Zmc2V0VmFsID0gcGFyc2VGbG9hdChwYXJ0c1szXS50cmltKCkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmIChleHRlbnNpb25zLnN0cmluZ1N0YXJ0c1dpdGgoY3VycmVudFJlY29yZCwgJyMjWFlEQVRBPScpKSB7XG5cdFx0XHRcdFx0aWYgKCFkaXZpZGVCeUZyZXF1ZW5jeSkge1xuXHRcdFx0XHRcdFx0b2JzZXJ2ZUZyZXF1ZW5jeSA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJlY29yZE1ldGEgPSBmYWxzZTtcblx0XHRcdFx0XHR2YXIgbGFzdFdhc0RpZiA9IGZhbHNlO1xuXHRcdFx0XHRcdHZhciBpbm5lckxpbmVzID0gY3VycmVudFJlY29yZC5zcGxpdCgnXFxuJyk7XG5cdFx0XHRcdFx0dmFyIGFic2Npc3NhU3BhY2luZyA9ICh4TGFzdCAtIHhGaXJzdCkgLyAoblBvaW50cyAtIDEpO1xuXHRcdFx0XHRcdHZhciBsYXN0WCA9IHhGaXJzdCAtIGFic2Npc3NhU3BhY2luZztcblx0XHRcdFx0XHR2YXIgbGFzdFkgPSB5Rmlyc3Q7XG5cdFx0XHRcdFx0dmFyIGxhc3REaWYgPSAwO1xuXHRcdFx0XHRcdHZhciBsYXN0T3JkaW5hdGU7XG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAxLCBqaiA9IGlubmVyTGluZXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdFx0dmFyIGRhdGEgPSBbXTtcblx0XHRcdFx0XHRcdHZhciByZWFkID0gaW5uZXJMaW5lc1tqXS50cmltKCk7XG5cdFx0XHRcdFx0XHR2YXIgc2IgPSBbXTtcblx0XHRcdFx0XHRcdGZvciAoIHZhciBrID0gMCwga2sgPSByZWFkLmxlbmd0aDsgayA8IGtrOyBrKyspIHtcblx0XHRcdFx0XHRcdFx0aWYgKHRoaXMuaXNCcmVhayhyZWFkLmNoYXJBdChrKSkpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoc2IubGVuZ3RoID4gMCAmJiAhKHNiLmxlbmd0aCA9PT0gMSAmJiBzYlswXSA9PT0gJyAnKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YS5wdXNoKHNiLmpvaW4oJycpKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0c2IgPSBbIHJlYWQuY2hhckF0KGspIF07XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0c2IucHVzaChyZWFkLmNoYXJBdChrKSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGRhdGEucHVzaChzYi5qb2luKCcnKSk7XG5cdFx0XHRcdFx0XHRsYXN0WCA9IHBhcnNlRmxvYXQoZGF0YVswXSkgKiB4RmFjdG9yIC0gYWJzY2lzc2FTcGFjaW5nO1xuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGsgPSAxLCBrayA9IGRhdGEubGVuZ3RoOyBrIDwga2s7IGsrKykge1xuXHRcdFx0XHRcdFx0XHR2YXIgZGVjaXBoZXIgPSBkYXRhW2tdO1xuXHRcdFx0XHRcdFx0XHQvLyBzb21lIG9mIHRoZXNlIGFycmF5cyBtYXkgcmV0dXJuIHplcm8sIHNvXG5cdFx0XHRcdFx0XHRcdC8vIGNoZWNrIGlmIHVuZGVmaW5lZFxuXHRcdFx0XHRcdFx0XHRpZiAoRFVQX0hBU0hbZGVjaXBoZXIuY2hhckF0KDApXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gYmUgY2FyZWZ1bCB3aGVuIHJlYWRpbmcgdGhpcywgdG8ga2VlcFxuXHRcdFx0XHRcdFx0XHRcdC8vIHNwZWN0cmEgZWZmaWNpZW50LCBEVVBTIGFyZSBhY3R1YWxseVxuXHRcdFx0XHRcdFx0XHRcdC8vIGRpc2NhcmRlZCwgZXhjZXB0IHRoZSBsYXN0IHkhXG5cdFx0XHRcdFx0XHRcdFx0dmFyIGR1cCA9IHBhcnNlSW50KERVUF9IQVNIW2RlY2lwaGVyLmNoYXJBdCgwKV0gKyBkZWNpcGhlci5zdWJzdHJpbmcoMSkpIC0gMTtcblx0XHRcdFx0XHRcdFx0XHRmb3IgKCB2YXIgbCA9IDA7IGwgPCBkdXA7IGwrKykge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGFzdFggKz0gYWJzY2lzc2FTcGFjaW5nO1xuXHRcdFx0XHRcdFx0XHRcdFx0bGFzdERpZiA9IHRoaXMuZ2V0VmFsdWUobGFzdE9yZGluYXRlLCBsYXN0RGlmKTtcblx0XHRcdFx0XHRcdFx0XHRcdGxhc3RZID0gbGFzdERpZiAqIHlGYWN0b3I7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHRcdFx0XHRcdFx0c3BlY3RydW0uZGF0YVtzcGVjdHJ1bS5kYXRhLmxlbmd0aCAtIDFdID0gbmV3IHN0cnVjdHVyZXMuUG9pbnQobGFzdFggLyBvYnNlcnZlRnJlcXVlbmN5LCBsYXN0WSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdC8vIHNvbWUgb2YgdGhlc2UgYXJyYXlzIG1heSByZXR1cm4gemVybywgc29cblx0XHRcdFx0XHRcdFx0XHQvLyBjaGVjayBpZiB1bmRlZmluZWRcblx0XHRcdFx0XHRcdFx0XHRpZiAoIShTUVpfSEFTSFtkZWNpcGhlci5jaGFyQXQoMCldICE9PSB1bmRlZmluZWQgJiYgbGFzdFdhc0RpZikpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxhc3RXYXNEaWYgPSBESUZfSEFTSFtkZWNpcGhlci5jaGFyQXQoMCldICE9PSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRsYXN0T3JkaW5hdGUgPSBkZWNpcGhlcjtcblx0XHRcdFx0XHRcdFx0XHRcdGxhc3RYICs9IGFic2Npc3NhU3BhY2luZztcblx0XHRcdFx0XHRcdFx0XHRcdGxhc3REaWYgPSB0aGlzLmdldFZhbHVlKGRlY2lwaGVyLCBsYXN0RGlmKTtcblx0XHRcdFx0XHRcdFx0XHRcdGxhc3RZID0gbGFzdERpZiAqIHlGYWN0b3I7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHRcdFx0XHRcdFx0c3BlY3RydW0uZGF0YS5wdXNoKG5ldyBzdHJ1Y3R1cmVzLlBvaW50KGxhc3RYIC8gb2JzZXJ2ZUZyZXF1ZW5jeSwgbGFzdFkpKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGFzdFkgPSB0aGlzLmdldFZhbHVlKGRlY2lwaGVyLCBsYXN0RGlmKSAqIHlGYWN0b3I7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChzaGlmdE9mZnNldE51bSAhPT0gLTEpIHtcblx0XHRcdFx0XHRcdHZhciBkaWYgPSBzaGlmdE9mZnNldFZhbCAtIHNwZWN0cnVtLmRhdGFbc2hpZnRPZmZzZXROdW0gLSAxXS54O1xuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHNwZWN0cnVtLmRhdGEubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRcdFx0XHRzcGVjdHJ1bS5kYXRhW2ldLnggKz0gZGlmO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmIChleHRlbnNpb25zLnN0cmluZ1N0YXJ0c1dpdGgoY3VycmVudFJlY29yZCwgJyMjUEVBSyBUQUJMRT0nKSkge1xuXHRcdFx0XHRcdHJlY29yZE1ldGEgPSBmYWxzZTtcblx0XHRcdFx0XHRzcGVjdHJ1bS5jb250aW51b3VzID0gZmFsc2U7XG5cdFx0XHRcdFx0dmFyIGlubmVyTGluZXMgPSBjdXJyZW50UmVjb3JkLnNwbGl0KCdcXG4nKTtcblx0XHRcdFx0XHR2YXIgY291bnQgPSAwO1xuXHRcdFx0XHRcdHZhciByZWcgPSAvW1xccyxdKy87XG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAxLCBqaiA9IGlubmVyTGluZXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdFx0dmFyIGl0ZW1zID0gaW5uZXJMaW5lc1tqXS5zcGxpdChyZWcpO1xuXHRcdFx0XHRcdFx0Y291bnQgKz0gaXRlbXMubGVuZ3RoIC8gMjtcblx0XHRcdFx0XHRcdGZvciAoIHZhciBrID0gMCwga2sgPSBpdGVtcy5sZW5ndGg7IGsgKyAxIDwga2s7IGsgKz0gMikge1xuXHRcdFx0XHRcdFx0XHRzcGVjdHJ1bS5kYXRhLnB1c2gobmV3IHN0cnVjdHVyZXMuUG9pbnQocGFyc2VGbG9hdChpdGVtc1trXS50cmltKCkpLCBwYXJzZUZsb2F0KGl0ZW1zW2sgKyAxXS50cmltKCkpKSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKGV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChjdXJyZW50UmVjb3JkLCAnIyNBVE9NTElTVD0nKSkge1xuXHRcdFx0XHRcdHNwZWN0cnVtLm1vbGVjdWxlID0gbmV3IHN0cnVjdHVyZXMuTW9sZWN1bGUoKTtcblx0XHRcdFx0XHR2YXIgaW5uZXJMaW5lcyA9IGN1cnJlbnRSZWNvcmQuc3BsaXQoJ1xcbicpO1xuXHRcdFx0XHRcdHZhciByZWcgPSAvW1xcc10rLztcblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDEsIGpqID0gaW5uZXJMaW5lcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0XHR2YXIgaXRlbXMgPSBpbm5lckxpbmVzW2pdLnNwbGl0KHJlZyk7XG5cdFx0XHRcdFx0XHRzcGVjdHJ1bS5tb2xlY3VsZS5hdG9tcy5wdXNoKG5ldyBzdHJ1Y3R1cmVzLkF0b20oaXRlbXNbMV0pKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoZXh0ZW5zaW9ucy5zdHJpbmdTdGFydHNXaXRoKGN1cnJlbnRSZWNvcmQsICcjI0JPTkRMSVNUPScpKSB7XG5cdFx0XHRcdFx0dmFyIGlubmVyTGluZXMgPSBjdXJyZW50UmVjb3JkLnNwbGl0KCdcXG4nKTtcblx0XHRcdFx0XHR2YXIgcmVnID0gL1tcXHNdKy87XG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAxLCBqaiA9IGlubmVyTGluZXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdFx0dmFyIGl0ZW1zID0gaW5uZXJMaW5lc1tqXS5zcGxpdChyZWcpO1xuXHRcdFx0XHRcdFx0dmFyIG9yZGVyID0gMTtcblx0XHRcdFx0XHRcdGlmKGl0ZW1zWzJdPT09J0QnKXtcblx0XHRcdFx0XHRcdFx0b3JkZXIgPSAyO1xuXHRcdFx0XHRcdFx0fWVsc2UgaWYoaXRlbXNbMl09PT0nVCcpe1xuXHRcdFx0XHRcdFx0XHRvcmRlciA9IDM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRzcGVjdHJ1bS5tb2xlY3VsZS5ib25kcy5wdXNoKG5ldyBzdHJ1Y3R1cmVzLkJvbmQoc3BlY3RydW0ubW9sZWN1bGUuYXRvbXNbcGFyc2VJbnQoaXRlbXNbMF0pLTFdLCBzcGVjdHJ1bS5tb2xlY3VsZS5hdG9tc1twYXJzZUludChpdGVtc1sxXSktMV0sIG9yZGVyKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKHNwZWN0cnVtLm1vbGVjdWxlICYmIGV4dGVuc2lvbnMuc3RyaW5nU3RhcnRzV2l0aChjdXJyZW50UmVjb3JkLCAnIyNYWV9SQVNURVI9JykpIHtcblx0XHRcdFx0XHR2YXIgaW5uZXJMaW5lcyA9IGN1cnJlbnRSZWNvcmQuc3BsaXQoJ1xcbicpO1xuXHRcdFx0XHRcdHZhciByZWcgPSAvW1xcc10rLztcblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDEsIGpqID0gaW5uZXJMaW5lcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0XHR2YXIgaXRlbXMgPSBpbm5lckxpbmVzW2pdLnNwbGl0KHJlZyk7XG5cdFx0XHRcdFx0XHR2YXIgYSA9IHNwZWN0cnVtLm1vbGVjdWxlLmF0b21zW3BhcnNlSW50KGl0ZW1zWzBdKS0xXTtcblx0XHRcdFx0XHRcdGEueCA9IHBhcnNlSW50KGl0ZW1zWzFdKTtcblx0XHRcdFx0XHRcdGEueSA9IHBhcnNlSW50KGl0ZW1zWzJdKTtcblx0XHRcdFx0XHRcdGlmKGl0ZW1zLmxlbmd0aD09NCl7XG5cdFx0XHRcdFx0XHRcdGEueiA9IHBhcnNlSW50KGl0ZW1zWzNdKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c3BlY3RydW0ubW9sZWN1bGUuc2NhbGVUb0F2ZXJhZ2VCb25kTGVuZ3RoKDIwKTtcblx0XHRcdFx0fSBlbHNlIGlmIChleHRlbnNpb25zLnN0cmluZ1N0YXJ0c1dpdGgoY3VycmVudFJlY29yZCwgJyMjUEVBSyBBU1NJR05NRU5UUz0nKSkge1xuXHRcdFx0XHRcdHZhciBpbm5lckxpbmVzID0gY3VycmVudFJlY29yZC5zcGxpdCgnXFxuJyk7XG5cdFx0XHRcdFx0dmFyIHJlZyA9IC9bXFxzLCgpPD5dKy87XG5cdFx0XHRcdFx0c3BlY3RydW0uYXNzaWdubWVudHMgPSBbXTtcblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDEsIGpqID0gaW5uZXJMaW5lcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0XHR2YXIgaXRlbXMgPSBpbm5lckxpbmVzW2pdLnNwbGl0KHJlZyk7XG5cdFx0XHRcdFx0XHR2YXIgeCA9IHBhcnNlRmxvYXQoaXRlbXNbMV0pO1xuXHRcdFx0XHRcdFx0dmFyIHkgPSBwYXJzZUZsb2F0KGl0ZW1zWzJdKTtcblx0XHRcdFx0XHRcdHZhciBhID0gc3BlY3RydW0ubW9sZWN1bGUuYXRvbXNbcGFyc2VJbnQoaXRlbXNbM10pLTFdO1xuXHRcdFx0XHRcdFx0dmFyIHVzZWQgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGZvcih2YXIgayA9IDAsIGtrID0gc3BlY3RydW0uYXNzaWdubWVudHMubGVuZ3RoOyBrPGtrOyBrKyspe1xuXHRcdFx0XHRcdFx0XHR2YXIgYXNzaWduID0gc3BlY3RydW0uYXNzaWdubWVudHNba107XG5cdFx0XHRcdFx0XHRcdGlmKGFzc2lnbi54ID09PSB4KXtcblx0XHRcdFx0XHRcdFx0XHRhc3NpZ24uYXMucHVzaChhKTtcblx0XHRcdFx0XHRcdFx0XHRhLmFzc2lnbmVkID0gYXNzaWduO1xuXHRcdFx0XHRcdFx0XHRcdHVzZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZighdXNlZCl7XG5cdFx0XHRcdFx0XHRcdHZhciBhc3NpZ24gPSB7eDp4LCB5OnksIGFzOlthXX07XG5cdFx0XHRcdFx0XHRcdGEuYXNzaWduZWQgPSBhc3NpZ247XG5cdFx0XHRcdFx0XHRcdHNwZWN0cnVtLmFzc2lnbm1lbnRzLnB1c2goYXNzaWduKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0c3BlY3RydW0uc2V0dXAoKTtcblx0XHRyZXR1cm4gc3BlY3RydW07XG5cdH07XG5cdF8ubWFrZVN0cnVjdHVyZVNwZWN0cnVtU2V0ID0gZnVuY3Rpb24oaWQsIGNvbnRlbnQpIHtcblx0XHR0aGlzLmNvbnZlcnRIWjJQUE0gPSB0cnVlO1xuXHRcdHZhciBzcGVjdHJ1bSA9IHRoaXMucmVhZChjb250ZW50KTtcblx0XHR2YXIgbWNhbnZhcyA9IG5ldyBjLlZpZXdlckNhbnZhcyhpZCsnX21vbGVjdWxlJywgMjAwLDIwMCk7XG5cdFx0bWNhbnZhcy5zcGVjcy5hdG9tc19kaXNwbGF5VGVybWluYWxDYXJib25MYWJlbHNfMkQgPSB0cnVlO1xuXHRcdG1jYW52YXMuc3BlY3MuYXRvbXNfZGlzcGxheUltcGxpY2l0SHlkcm9nZW5zXzJEID0gdHJ1ZTtcblx0XHRtY2FudmFzLm1vdXNlb3V0ID0gZnVuY3Rpb24oZSl7XG5cdFx0XHRpZih0aGlzLm1vbGVjdWxlcy5sZW5ndGghPT0wKXtcblx0XHRcdFx0Zm9yKHZhciBpID0gMCwgaWkgPSB0aGlzLm1vbGVjdWxlc1swXS5hdG9tcy5sZW5ndGg7IGk8aWk7IGkrKyl7XG5cdFx0XHRcdFx0dGhpcy5tb2xlY3VsZXNbMF0uYXRvbXNbaV0uaXNIb3ZlciA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNwZWN0cnVtLmhvdmVyZWQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdHRoaXMucmVwYWludCgpO1xuXHRcdFx0XHRzY2FudmFzLnJlcGFpbnQoKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdG1jYW52YXMudG91Y2hlbmQgPSBtY2FudmFzLm1vdXNlb3V0O1xuXHRcdG1jYW52YXMubW91c2Vtb3ZlID0gZnVuY3Rpb24oZSl7XG5cdFx0XHRpZih0aGlzLm1vbGVjdWxlcy5sZW5ndGghPT0wKXtcblx0XHRcdFx0dmFyIGNsb3Nlc3Q9dW5kZWZpbmVkO1xuXHRcdFx0XHRmb3IodmFyIGkgPSAwLCBpaSA9IHRoaXMubW9sZWN1bGVzWzBdLmF0b21zLmxlbmd0aDsgaTxpaTsgaSsrKXtcblx0XHRcdFx0XHR2YXIgYSA9IHRoaXMubW9sZWN1bGVzWzBdLmF0b21zW2ldO1xuXHRcdFx0XHRcdGEuaXNIb3ZlciA9IGZhbHNlO1xuXHRcdFx0XHRcdGlmKGEuYXNzaWduZWQgJiYgKGNsb3Nlc3Q9PT11bmRlZmluZWQgfHwgZS5wLmRpc3RhbmNlKGEpPGUucC5kaXN0YW5jZShjbG9zZXN0KSkpe1xuXHRcdFx0XHRcdFx0Y2xvc2VzdCA9IGE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHNwZWN0cnVtLmhvdmVyZWQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdGlmKGUucC5kaXN0YW5jZShjbG9zZXN0KTwyMCl7XG5cdFx0XHRcdFx0Zm9yKHZhciBpID0gMCwgaWkgPSBjbG9zZXN0LmFzc2lnbmVkLmFzLmxlbmd0aDsgaTxpaTsgaSsrKXtcblx0XHRcdFx0XHRcdGNsb3Nlc3QuYXNzaWduZWQuYXNbaV0uaXNIb3ZlciA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNjYW52YXMuc3BlY3RydW0uaG92ZXJlZCA9IGNsb3Nlc3QuYXNzaWduZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5yZXBhaW50KCk7XG5cdFx0XHRcdHNjYW52YXMucmVwYWludCgpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0bWNhbnZhcy50b3VjaG1vdmUgPSBtY2FudmFzLm1vdXNlbW92ZTtcblx0XHRtY2FudmFzLmRyYXdDaGlsZEV4dHJhcyA9IGZ1bmN0aW9uKGN0eCwgc3BlY3Mpe1xuXHRcdFx0aWYodGhpcy5tb2xlY3VsZXMubGVuZ3RoIT09MCl7XG5cdFx0XHRcdGZvcih2YXIgaSA9IDAsIGlpID0gdGhpcy5tb2xlY3VsZXNbMF0uYXRvbXMubGVuZ3RoOyBpPGlpOyBpKyspe1xuXHRcdFx0XHRcdHRoaXMubW9sZWN1bGVzWzBdLmF0b21zW2ldLmRyYXdEZWNvcmF0aW9ucyhjdHgsIHNwZWNzKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdFx0dmFyIHNjYW52YXMgPSBuZXcgYy5PYnNlcnZlckNhbnZhcyhpZCsnX3NwZWN0cnVtJywgNDAwLDIwMCk7XG5cdFx0c2NhbnZhcy5zcGVjcy5wbG90c19zaG93WUF4aXMgPSBmYWxzZTtcblx0XHRzY2FudmFzLnNwZWNzLnBsb3RzX2ZsaXBYQXhpcyA9IHRydWU7XG5cdFx0c2NhbnZhcy5tb3VzZW91dCA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0aWYodGhpcy5zcGVjdHJ1bSAmJiB0aGlzLnNwZWN0cnVtLmFzc2lnbm1lbnRzKXtcblx0XHRcdFx0Zm9yKHZhciBpID0gMCwgaWkgPSBtY2FudmFzLm1vbGVjdWxlc1swXS5hdG9tcy5sZW5ndGg7IGk8aWk7IGkrKyl7XG5cdFx0XHRcdFx0bWNhbnZhcy5tb2xlY3VsZXNbMF0uYXRvbXNbaV0uaXNIb3ZlciA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuc3BlY3RydW0uaG92ZXJlZCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0bWNhbnZhcy5yZXBhaW50KCk7XG5cdFx0XHRcdHRoaXMucmVwYWludCgpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0c2NhbnZhcy50b3VjaGVuZCA9IHNjYW52YXMubW91c2VvdXQ7XG5cdFx0c2NhbnZhcy5tb3VzZW1vdmUgPSBmdW5jdGlvbihlKXtcblx0XHRcdGlmKHRoaXMuc3BlY3RydW0gJiYgdGhpcy5zcGVjdHJ1bS5hc3NpZ25tZW50cyl7XG5cdFx0XHRcdHZhciBjbG9zZXN0PXVuZGVmaW5lZDtcblx0XHRcdFx0Zm9yKHZhciBpID0gMCwgaWkgPSBtY2FudmFzLm1vbGVjdWxlc1swXS5hdG9tcy5sZW5ndGg7IGk8aWk7IGkrKyl7XG5cdFx0XHRcdFx0bWNhbnZhcy5tb2xlY3VsZXNbMF0uYXRvbXNbaV0uaXNIb3ZlciA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuc3BlY3RydW0uaG92ZXJlZCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0Zm9yKHZhciBpID0gMCwgaWkgPSB0aGlzLnNwZWN0cnVtLmFzc2lnbm1lbnRzLmxlbmd0aDsgaTxpaTsgaSsrKXtcblx0XHRcdFx0XHR2YXIgYSA9IHRoaXMuc3BlY3RydW0uYXNzaWdubWVudHNbaV07XG5cdFx0XHRcdFx0aWYoY2xvc2VzdD09PXVuZGVmaW5lZCB8fCBNYXRoLmFicyh0aGlzLnNwZWN0cnVtLmdldFRyYW5zZm9ybWVkWChhLngsIHRoaXMuc3BlY3MsIHRoaXMuc3BlY3RydW0ubWVtb3J5LndpZHRoLCB0aGlzLnNwZWN0cnVtLm1lbW9yeS5vZmZzZXRMZWZ0KS1lLnAueCk8TWF0aC5hYnModGhpcy5zcGVjdHJ1bS5nZXRUcmFuc2Zvcm1lZFgoY2xvc2VzdC54LCB0aGlzLnNwZWNzLCB0aGlzLnNwZWN0cnVtLm1lbW9yeS53aWR0aCwgdGhpcy5zcGVjdHJ1bS5tZW1vcnkub2Zmc2V0TGVmdCktZS5wLngpKXtcblx0XHRcdFx0XHRcdGNsb3Nlc3QgPSBhO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZihNYXRoLmFicyh0aGlzLnNwZWN0cnVtLmdldFRyYW5zZm9ybWVkWChjbG9zZXN0LngsIHRoaXMuc3BlY3MsIHRoaXMuc3BlY3RydW0ubWVtb3J5LndpZHRoLCB0aGlzLnNwZWN0cnVtLm1lbW9yeS5vZmZzZXRMZWZ0KS1lLnAueCk8MjApe1xuXHRcdFx0XHRcdGZvcih2YXIgaSA9IDAsIGlpID0gY2xvc2VzdC5hcy5sZW5ndGg7IGk8aWk7IGkrKyl7XG5cdFx0XHRcdFx0XHRjbG9zZXN0LmFzW2ldLmlzSG92ZXIgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLnNwZWN0cnVtLmhvdmVyZWQgPSBjbG9zZXN0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdG1jYW52YXMucmVwYWludCgpO1xuXHRcdFx0XHR0aGlzLnJlcGFpbnQoKTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdHNjYW52YXMudG91Y2htb3ZlID0gc2NhbnZhcy5tb3VzZW1vdmU7XG5cdFx0c2NhbnZhcy5kcmF3Q2hpbGRFeHRyYXMgPSBmdW5jdGlvbihjdHgpe1xuXHRcdFx0aWYodGhpcy5zcGVjdHJ1bSAmJiB0aGlzLnNwZWN0cnVtLmhvdmVyZWQpe1xuXHRcdFx0XHR2YXIgeCA9IHRoaXMuc3BlY3RydW0uZ2V0VHJhbnNmb3JtZWRYKHRoaXMuc3BlY3RydW0uaG92ZXJlZC54LCBzY2FudmFzLnNwZWNzLCB0aGlzLnNwZWN0cnVtLm1lbW9yeS53aWR0aCwgdGhpcy5zcGVjdHJ1bS5tZW1vcnkub2Zmc2V0TGVmdCk7XG5cdFx0XHRcdGlmICh4ID49IHRoaXMuc3BlY3RydW0ubWVtb3J5Lm9mZnNldExlZnQgJiYgeCA8IHRoaXMuc3BlY3RydW0ubWVtb3J5LndpZHRoKSB7XG5cdFx0XHRcdFx0Y3R4LnNhdmUoKTtcblx0XHRcdFx0XHRjdHguc3Ryb2tlU3R5bGU9JyM4ODUxMTAnO1xuXHRcdFx0XHRcdGN0eC5saW5lV2lkdGggPSAzO1xuXHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHRjdHgubW92ZVRvKHgsIHRoaXMuc3BlY3RydW0ubWVtb3J5LmhlaWdodCAtIHRoaXMuc3BlY3RydW0ubWVtb3J5Lm9mZnNldEJvdHRvbSk7XG5cdFx0XHRcdFx0Y3R4LmxpbmVUbyh4LCB0aGlzLnNwZWN0cnVtLmdldFRyYW5zZm9ybWVkWSh0aGlzLnNwZWN0cnVtLmhvdmVyZWQueSwgc2NhbnZhcy5zcGVjcywgdGhpcy5zcGVjdHJ1bS5tZW1vcnkuaGVpZ2h0LCB0aGlzLnNwZWN0cnVtLm1lbW9yeS5vZmZzZXRCb3R0b20sIHRoaXMuc3BlY3RydW0ubWVtb3J5Lm9mZnNldFRvcCkpO1xuXHRcdFx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHRcdFx0XHRjdHgucmVzdG9yZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRpZihzcGVjdHJ1bSl7XG5cdFx0XHRzY2FudmFzLmxvYWRTcGVjdHJ1bShzcGVjdHJ1bSk7XG5cdFx0XHRpZihzcGVjdHJ1bS5tb2xlY3VsZSl7XG5cdFx0XHRcdG1jYW52YXMubG9hZE1vbGVjdWxlKHNwZWN0cnVtLm1vbGVjdWxlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIFttY2FudmFzLCBzY2FudmFzXTtcblx0fTtcblxuXHQvLyBzaG9ydGN1dHNcblx0dmFyIGludGVycHJldGVyID0gbmV3IGlvLkpDQU1QSW50ZXJwcmV0ZXIoKTtcblx0aW50ZXJwcmV0ZXIuY29udmVydEhaMlBQTSA9IHRydWU7XG5cdGMucmVhZEpDQU1QID0gZnVuY3Rpb24oY29udGVudCkge1xuXHRcdHJldHVybiBpbnRlcnByZXRlci5yZWFkKGNvbnRlbnQpO1xuXHR9O1xufSkoQ2hlbURvb2RsZSwgQ2hlbURvb2RsZS5leHRlbnNpb25zLCBDaGVtRG9vZGxlLmlvLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMsIENoZW1Eb29kbGUubGliLmpRdWVyeSk7XG4oZnVuY3Rpb24oYywgaW8sIHN0cnVjdHVyZXMsIGQyLCBkMywgSlNPTiwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0aW8uSlNPTkludGVycHJldGVyID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfID0gaW8uSlNPTkludGVycHJldGVyLnByb3RvdHlwZTtcblx0Xy5jb250ZW50VG8gPSBmdW5jdGlvbihtb2xzLCBzaGFwZXMpIHtcblx0XHRpZighbW9scyl7bW9scyA9IFtdO31cblx0XHRpZighc2hhcGVzKXtzaGFwZXMgPSBbXTt9XG5cdFx0dmFyIGNvdW50MSA9IDAsIGNvdW50MiA9IDA7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IG1vbHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIG1vbCA9IG1vbHNbaV07XG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gbW9sLmF0b21zLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0bW9sLmF0b21zW2pdLnRtcGlkID0gJ2EnICsgY291bnQxKys7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gbW9sLmJvbmRzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0bW9sLmJvbmRzW2pdLnRtcGlkID0gJ2InICsgY291bnQyKys7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGNvdW50MSA9IDA7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHNoYXBlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRzaGFwZXNbaV0udG1waWQgPSAncycgKyBjb3VudDErKztcblx0XHR9XG5cdFx0dmFyIGR1bW15ID0ge307XG5cdFx0aWYgKG1vbHMgJiYgbW9scy5sZW5ndGggPiAwKSB7XG5cdFx0XHRkdW1teS5tID0gW107XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9scy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdGR1bW15Lm0ucHVzaCh0aGlzLm1vbFRvKG1vbHNbaV0pKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHNoYXBlcyAmJiBzaGFwZXMubGVuZ3RoID4gMCkge1xuXHRcdFx0ZHVtbXkucyA9IFtdO1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHNoYXBlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdGR1bW15LnMucHVzaCh0aGlzLnNoYXBlVG8oc2hhcGVzW2ldKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBtb2wgPSBtb2xzW2ldO1xuXHRcdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IG1vbC5hdG9tcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdG1vbC5hdG9tc1tqXS50bXBpZCA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtb2wuYm9uZHMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRtb2wuYm9uZHNbal0udG1waWQgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBzaGFwZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0c2hhcGVzW2ldLnRtcGlkID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRyZXR1cm4gZHVtbXk7XG5cdH07XG5cdF8uY29udGVudEZyb20gPSBmdW5jdGlvbihkdW1teSkge1xuXHRcdHZhciBvYmogPSB7XG5cdFx0XHRtb2xlY3VsZXMgOiBbXSxcblx0XHRcdHNoYXBlcyA6IFtdXG5cdFx0fTtcblx0XHRpZiAoZHVtbXkubSkge1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IGR1bW15Lm0ubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRvYmoubW9sZWN1bGVzLnB1c2godGhpcy5tb2xGcm9tKGR1bW15Lm1baV0pKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKGR1bW15LnMpIHtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBkdW1teS5zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0b2JqLnNoYXBlcy5wdXNoKHRoaXMuc2hhcGVGcm9tKGR1bW15LnNbaV0sIG9iai5tb2xlY3VsZXMpKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IG9iai5tb2xlY3VsZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIG1vbCA9IG9iai5tb2xlY3VsZXNbaV07XG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gbW9sLmF0b21zLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0bW9sLmF0b21zW2pdLnRtcGlkID0gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IG1vbC5ib25kcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdG1vbC5ib25kc1tqXS50bXBpZCA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHR9XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IG9iai5zaGFwZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0b2JqLnNoYXBlc1tpXS50bXBpZCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0cmV0dXJuIG9iajtcblx0fTtcblx0Xy5xdWVyeVRvID0gZnVuY3Rpb24ocXVlcnkpIHtcblx0XHR2YXIgcSA9IHt9O1xuXHRcdHZhciBhcHBlbmRQcm9wZXJ0eSA9IGZ1bmN0aW9uKHEsIHAsIG5hbWUsIGlzUmFuZ2Upe1xuXHRcdFx0aWYocCl7XG5cdFx0XHRcdHFbbmFtZV0gPSB7djppc1JhbmdlP3F1ZXJ5Lm91dHB1dFJhbmdlKHAudik6cC52LCBuOnAubm90fTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdGlmKHF1ZXJ5LnR5cGU9PT1zdHJ1Y3R1cmVzLlF1ZXJ5LlRZUEVfQVRPTSl7XG5cdFx0XHRhcHBlbmRQcm9wZXJ0eShxLCBxdWVyeS5lbGVtZW50cywgJ2FzJyk7XG5cdFx0XHRhcHBlbmRQcm9wZXJ0eShxLCBxdWVyeS5jaGlyYWxpdHksICdAJyk7XG5cdFx0XHRhcHBlbmRQcm9wZXJ0eShxLCBxdWVyeS5hcm9tYXRpYywgJ0EnKTtcblx0XHRcdGFwcGVuZFByb3BlcnR5KHEsIHF1ZXJ5LmNoYXJnZSwgJ0MnLCB0cnVlKTtcblx0XHRcdGFwcGVuZFByb3BlcnR5KHEsIHF1ZXJ5Lmh5ZHJvZ2VucywgJ0gnLCB0cnVlKTtcblx0XHRcdGFwcGVuZFByb3BlcnR5KHEsIHF1ZXJ5LnJpbmdDb3VudCwgJ1InLCB0cnVlKTtcblx0XHRcdGFwcGVuZFByb3BlcnR5KHEsIHF1ZXJ5LnNhdHVyYXRpb24sICdTJyk7XG5cdFx0XHRhcHBlbmRQcm9wZXJ0eShxLCBxdWVyeS5jb25uZWN0aXZpdHksICdYJywgdHJ1ZSk7XG5cdFx0XHRhcHBlbmRQcm9wZXJ0eShxLCBxdWVyeS5jb25uZWN0aXZpdHlOb0gsICd4JywgdHJ1ZSk7XG5cdFx0fWVsc2V7XG5cdFx0XHRhcHBlbmRQcm9wZXJ0eShxLCBxdWVyeS5vcmRlcnMsICdicycpO1xuXHRcdFx0YXBwZW5kUHJvcGVydHkocSwgcXVlcnkuc3RlcmVvLCAnQCcpO1xuXHRcdFx0YXBwZW5kUHJvcGVydHkocSwgcXVlcnkuYXJvbWF0aWMsICdBJyk7XG5cdFx0XHRhcHBlbmRQcm9wZXJ0eShxLCBxdWVyeS5yaW5nQ291bnQsICdSJywgdHJ1ZSk7XG5cdFx0fVxuXHRcdHJldHVybiBxO1xuXHR9O1xuXHRfLm1vbFRvID0gZnVuY3Rpb24obW9sKSB7XG5cdFx0dmFyIGR1bW15ID0ge1xuXHRcdFx0YSA6IFtdXG5cdFx0fTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9sLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBhID0gbW9sLmF0b21zW2ldO1xuXHRcdFx0dmFyIGRhID0ge1xuXHRcdFx0XHR4IDogYS54LFxuXHRcdFx0XHR5IDogYS55XG5cdFx0XHR9O1xuXHRcdFx0aWYgKGEudG1waWQpIHtcblx0XHRcdFx0ZGEuaSA9IGEudG1waWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoYS5sYWJlbCAhPT0gJ0MnKSB7XG5cdFx0XHRcdGRhLmwgPSBhLmxhYmVsO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGEueiAhPT0gMCkge1xuXHRcdFx0XHRkYS56ID0gYS56O1xuXHRcdFx0fVxuXHRcdFx0aWYgKGEuY2hhcmdlICE9PSAwKSB7XG5cdFx0XHRcdGRhLmMgPSBhLmNoYXJnZTtcblx0XHRcdH1cblx0XHRcdGlmIChhLm1hc3MgIT09IC0xKSB7XG5cdFx0XHRcdGRhLm0gPSBhLm1hc3M7XG5cdFx0XHR9XG5cdFx0XHRpZiAoYS5pbXBsaWNpdEggIT09IC0xKSB7XG5cdFx0XHRcdGRhLmggPSBhLmltcGxpY2l0SDtcblx0XHRcdH1cblx0XHRcdGlmIChhLm51bVJhZGljYWwgIT09IDApIHtcblx0XHRcdFx0ZGEuciA9IGEubnVtUmFkaWNhbDtcblx0XHRcdH1cblx0XHRcdGlmIChhLm51bUxvbmVQYWlyICE9PSAwKSB7XG5cdFx0XHRcdGRhLnAgPSBhLm51bUxvbmVQYWlyO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGEucXVlcnkpIHtcblx0XHRcdFx0ZGEucSA9IHRoaXMucXVlcnlUbyhhLnF1ZXJ5KTtcblx0XHRcdH1cblx0XHRcdGR1bW15LmEucHVzaChkYSk7XG5cdFx0fVxuXHRcdGlmIChtb2wuYm9uZHMubGVuZ3RoID4gMCkge1xuXHRcdFx0ZHVtbXkuYiA9IFtdO1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IG1vbC5ib25kcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBiID0gbW9sLmJvbmRzW2ldO1xuXHRcdFx0XHR2YXIgZGIgPSB7XG5cdFx0XHRcdFx0YiA6IG1vbC5hdG9tcy5pbmRleE9mKGIuYTEpLFxuXHRcdFx0XHRcdGUgOiBtb2wuYXRvbXMuaW5kZXhPZihiLmEyKVxuXHRcdFx0XHR9O1xuXHRcdFx0XHRpZiAoYi50bXBpZCkge1xuXHRcdFx0XHRcdGRiLmkgPSBiLnRtcGlkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChiLmJvbmRPcmRlciAhPT0gMSkge1xuXHRcdFx0XHRcdGRiLm8gPSBiLmJvbmRPcmRlcjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoYi5zdGVyZW8gIT09IHN0cnVjdHVyZXMuQm9uZC5TVEVSRU9fTk9ORSkge1xuXHRcdFx0XHRcdGRiLnMgPSBiLnN0ZXJlbztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoYi5xdWVyeSkge1xuXHRcdFx0XHRcdGRiLnEgPSB0aGlzLnF1ZXJ5VG8oYi5xdWVyeSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZHVtbXkuYi5wdXNoKGRiKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGR1bW15O1xuXHR9O1xuXHRfLnF1ZXJ5RnJvbSA9IGZ1bmN0aW9uKGpzb24pIHtcblx0XHR2YXIgcXVlcnkgPSBuZXcgc3RydWN0dXJlcy5RdWVyeShqc29uLmFzP3N0cnVjdHVyZXMuUXVlcnkuVFlQRV9BVE9NOnN0cnVjdHVyZXMuUXVlcnkuVFlQRV9CT05EKTtcblx0XHR2YXIgc2V0dXBQcm9wZXJ0eSA9IGZ1bmN0aW9uKHF1ZXJ5LCBqc29uLCBuYW1lLCBpc1JhbmdlKXtcblx0XHRcdGlmKGpzb24pe1xuXHRcdFx0XHRxdWVyeVtuYW1lXSA9IHt9O1xuXHRcdFx0XHRxdWVyeVtuYW1lXS52ID0gaXNSYW5nZT9xdWVyeS5wYXJzZVJhbmdlKGpzb24udik6anNvbi52O1xuXHRcdFx0XHRpZihqc29uLm4pe1xuXHRcdFx0XHRcdHF1ZXJ5W25hbWVdLm5vdCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHRcdGlmKHF1ZXJ5LnR5cGU9PT1zdHJ1Y3R1cmVzLlF1ZXJ5LlRZUEVfQVRPTSl7XG5cdFx0XHRzZXR1cFByb3BlcnR5KHF1ZXJ5LCBqc29uLmFzLCAnZWxlbWVudHMnKTtcblx0XHRcdHNldHVwUHJvcGVydHkocXVlcnksIGpzb25bJ0AnXSwgJ2NoaXJhbGl0eScpO1xuXHRcdFx0c2V0dXBQcm9wZXJ0eShxdWVyeSwganNvbi5BLCAnYXJvbWF0aWMnKTtcblx0XHRcdHNldHVwUHJvcGVydHkocXVlcnksIGpzb24uQywgJ2NoYXJnZScsIHRydWUpO1xuXHRcdFx0c2V0dXBQcm9wZXJ0eShxdWVyeSwganNvbi5ILCAnaHlkcm9nZW5zJywgdHJ1ZSk7XG5cdFx0XHRzZXR1cFByb3BlcnR5KHF1ZXJ5LCBqc29uLlIsICdyaW5nQ291bnQnLCB0cnVlKTtcblx0XHRcdHNldHVwUHJvcGVydHkocXVlcnksIGpzb24uUywgJ3NhdHVyYXRpb24nKTtcblx0XHRcdHNldHVwUHJvcGVydHkocXVlcnksIGpzb24uWCwgJ2Nvbm5lY3Rpdml0eScsIHRydWUpO1xuXHRcdFx0c2V0dXBQcm9wZXJ0eShxdWVyeSwganNvbi54LCAnY29ubmVjdGl2aXR5Tm9IJywgdHJ1ZSk7XG5cdFx0fWVsc2V7XG5cdFx0XHRzZXR1cFByb3BlcnR5KHF1ZXJ5LCBqc29uLmJzLCAnb3JkZXJzJyk7XG5cdFx0XHRzZXR1cFByb3BlcnR5KHF1ZXJ5LCBqc29uWydAJ10sICdzdGVyZW8nKTtcblx0XHRcdHNldHVwUHJvcGVydHkocXVlcnksIGpzb24uQSwgJ2Fyb21hdGljJyk7XG5cdFx0XHRzZXR1cFByb3BlcnR5KHF1ZXJ5LCBqc29uLlIsICdyaW5nQ291bnQnLCB0cnVlKTtcblx0XHR9XG5cdFx0cmV0dXJuIHF1ZXJ5O1xuXHR9O1xuXHRfLm1vbEZyb20gPSBmdW5jdGlvbihqc29uKSB7XG5cdFx0dmFyIG1vbGVjdWxlID0gbmV3IHN0cnVjdHVyZXMuTW9sZWN1bGUoKTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0ganNvbi5hLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBjID0ganNvbi5hW2ldO1xuXHRcdFx0dmFyIGEgPSBuZXcgc3RydWN0dXJlcy5BdG9tKGMubCA/IGMubCA6ICdDJywgYy54LCBjLnkpO1xuXHRcdFx0aWYgKGMuaSkge1xuXHRcdFx0XHRhLnRtcGlkID0gYy5pO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGMueikge1xuXHRcdFx0XHRhLnogPSBjLno7XG5cdFx0XHR9XG5cdFx0XHRpZiAoYy5jKSB7XG5cdFx0XHRcdGEuY2hhcmdlID0gYy5jO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGMubSkge1xuXHRcdFx0XHRhLm1hc3MgPSBjLm07XG5cdFx0XHR9XG5cdFx0XHRpZiAoYy5oKSB7XG5cdFx0XHRcdGEuaW1wbGljaXRIID0gYy5oO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGMucikge1xuXHRcdFx0XHRhLm51bVJhZGljYWwgPSBjLnI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoYy5wKSB7XG5cdFx0XHRcdGEubnVtTG9uZVBhaXIgPSBjLnA7XG5cdFx0XHR9XG5cdFx0XHRpZihjLnEpe1xuXHRcdFx0XHRhLnF1ZXJ5ID0gdGhpcy5xdWVyeUZyb20oYy5xKTtcblx0XHRcdH1cblx0XHRcdC8vIHRoZXNlIGFyZSBib29sZWFucyBvciBudW1iZXJzLCBzbyBjaGVjayBpZiB1bmRlZmluZWRcblx0XHRcdGlmIChjLnBfaCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGEuaGV0YXRtID0gYy5wX2g7XG5cdFx0XHR9XG5cdFx0XHRpZiAoYy5wX3cgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRhLmlzV2F0ZXIgPSBjLnBfdztcblx0XHRcdH1cblx0XHRcdGlmIChjLnBfZCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGEuY2xvc2VzdERpc3RhbmNlID0gYy5wX2Q7XG5cdFx0XHR9XG5cdFx0XHRtb2xlY3VsZS5hdG9tcy5wdXNoKGEpO1xuXHRcdH1cblx0XHRpZiAoanNvbi5iKSB7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0ganNvbi5iLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIGMgPSBqc29uLmJbaV07XG5cdFx0XHRcdC8vIG9yZGVyIGNhbiBiZSAwLCBzbyBjaGVjayBhZ2FpbnN0IHVuZGVmaW5lZFxuXHRcdFx0XHR2YXIgYiA9IG5ldyBzdHJ1Y3R1cmVzLkJvbmQobW9sZWN1bGUuYXRvbXNbYy5iXSwgbW9sZWN1bGUuYXRvbXNbYy5lXSwgYy5vID09PSB1bmRlZmluZWQgPyAxIDogYy5vKTtcblx0XHRcdFx0aWYgKGMuaSkge1xuXHRcdFx0XHRcdGIudG1waWQgPSBjLmk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGMucykge1xuXHRcdFx0XHRcdGIuc3RlcmVvID0gYy5zO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKGMucSl7XG5cdFx0XHRcdFx0Yi5xdWVyeSA9IHRoaXMucXVlcnlGcm9tKGMucSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bW9sZWN1bGUuYm9uZHMucHVzaChiKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG1vbGVjdWxlO1xuXHR9O1xuXHRfLnNoYXBlVG8gPSBmdW5jdGlvbihzaGFwZSkge1xuXHRcdHZhciBkdW1teSA9IHt9O1xuXHRcdGlmIChzaGFwZS50bXBpZCkge1xuXHRcdFx0ZHVtbXkuaSA9IHNoYXBlLnRtcGlkO1xuXHRcdH1cblx0XHRpZiAoc2hhcGUgaW5zdGFuY2VvZiBkMi5MaW5lKSB7XG5cdFx0XHRkdW1teS50ID0gJ0xpbmUnO1xuXHRcdFx0ZHVtbXkueDEgPSBzaGFwZS5wMS54O1xuXHRcdFx0ZHVtbXkueTEgPSBzaGFwZS5wMS55O1xuXHRcdFx0ZHVtbXkueDIgPSBzaGFwZS5wMi54O1xuXHRcdFx0ZHVtbXkueTIgPSBzaGFwZS5wMi55O1xuXHRcdFx0ZHVtbXkuYSA9IHNoYXBlLmFycm93VHlwZTtcblx0XHR9IGVsc2UgaWYgKHNoYXBlIGluc3RhbmNlb2YgZDIuUHVzaGVyKSB7XG5cdFx0XHRkdW1teS50ID0gJ1B1c2hlcic7XG5cdFx0XHRkdW1teS5vMSA9IHNoYXBlLm8xLnRtcGlkO1xuXHRcdFx0ZHVtbXkubzIgPSBzaGFwZS5vMi50bXBpZDtcblx0XHRcdGlmIChzaGFwZS5udW1FbGVjdHJvbiAhPT0gMSkge1xuXHRcdFx0XHRkdW1teS5lID0gc2hhcGUubnVtRWxlY3Ryb247XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChzaGFwZSBpbnN0YW5jZW9mIGQyLkF0b21NYXBwaW5nKSB7XG5cdFx0XHRkdW1teS50ID0gJ0F0b21NYXBwaW5nJztcblx0XHRcdGR1bW15LmExID0gc2hhcGUubzEudG1waWQ7XG5cdFx0XHRkdW1teS5hMiA9IHNoYXBlLm8yLnRtcGlkO1xuXHRcdH0gZWxzZSBpZiAoc2hhcGUgaW5zdGFuY2VvZiBkMi5CcmFja2V0KSB7XG5cdFx0XHRkdW1teS50ID0gJ0JyYWNrZXQnO1xuXHRcdFx0ZHVtbXkueDEgPSBzaGFwZS5wMS54O1xuXHRcdFx0ZHVtbXkueTEgPSBzaGFwZS5wMS55O1xuXHRcdFx0ZHVtbXkueDIgPSBzaGFwZS5wMi54O1xuXHRcdFx0ZHVtbXkueTIgPSBzaGFwZS5wMi55O1xuXHRcdFx0aWYgKHNoYXBlLmNoYXJnZSAhPT0gMCkge1xuXHRcdFx0XHRkdW1teS5jID0gc2hhcGUuY2hhcmdlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNoYXBlLm11bHQgIT09IDApIHtcblx0XHRcdFx0ZHVtbXkubSA9IHNoYXBlLm11bHQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoc2hhcGUucmVwZWF0ICE9PSAwKSB7XG5cdFx0XHRcdGR1bW15LnIgPSBzaGFwZS5yZXBlYXQ7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChzaGFwZSBpbnN0YW5jZW9mIGQyLkR5bmFtaWNCcmFja2V0KSB7XG5cdFx0XHRkdW1teS50ID0gJ0R5bmFtaWNCcmFja2V0Jztcblx0XHRcdGR1bW15LmIxID0gc2hhcGUuYjEudG1waWQ7XG5cdFx0XHRkdW1teS5iMiA9IHNoYXBlLmIyLnRtcGlkO1xuXHRcdFx0ZHVtbXkubjEgPSBzaGFwZS5uMTtcblx0XHRcdGR1bW15Lm4yID0gc2hhcGUubjI7XG5cdFx0XHRpZihzaGFwZS5mbGlwPT09dHJ1ZSl7XG5cdFx0XHRcdGR1bW15LmYgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoc2hhcGUgaW5zdGFuY2VvZiBkMi5WQVApIHtcblx0XHRcdGR1bW15LnQgPSAnVkFQJztcblx0XHRcdGR1bW15LnggPSBzaGFwZS5hc3Rlcmlzay54O1xuXHRcdFx0ZHVtbXkueSA9IHNoYXBlLmFzdGVyaXNrLnk7XG5cdFx0XHRpZihzaGFwZS5ib25kVHlwZSE9PTEpe1xuXHRcdFx0XHRkdW1teS5vID0gc2hhcGUuYm9uZFR5cGU7XG5cdFx0XHR9XG5cdFx0XHRpZihzaGFwZS5zdWJzdGl0dWVudCl7XG5cdFx0XHRcdGR1bW15LnMgPSBzaGFwZS5zdWJzdGl0dWVudC50bXBpZDtcblx0XHRcdH1cblx0XHRcdGR1bW15LmEgPSBbXTtcblx0XHRcdGZvcih2YXIgaSA9IDAsIGlpPXNoYXBlLmF0dGFjaG1lbnRzLmxlbmd0aDsgaTxpaTsgaSsrKXtcblx0XHRcdFx0ZHVtbXkuYS5wdXNoKHNoYXBlLmF0dGFjaG1lbnRzW2ldLnRtcGlkKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHNoYXBlIGluc3RhbmNlb2YgZDMuRGlzdGFuY2UpIHtcblx0XHRcdGR1bW15LnQgPSAnRGlzdGFuY2UnO1xuXHRcdFx0ZHVtbXkuYTEgPSBzaGFwZS5hMS50bXBpZDtcblx0XHRcdGR1bW15LmEyID0gc2hhcGUuYTIudG1waWQ7XG5cdFx0XHRpZiAoc2hhcGUubm9kZSkge1xuXHRcdFx0XHRkdW1teS5uID0gc2hhcGUubm9kZTtcblx0XHRcdFx0ZHVtbXkubyA9IHNoYXBlLm9mZnNldDtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKHNoYXBlIGluc3RhbmNlb2YgZDMuQW5nbGUpIHtcblx0XHRcdGR1bW15LnQgPSAnQW5nbGUnO1xuXHRcdFx0ZHVtbXkuYTEgPSBzaGFwZS5hMS50bXBpZDtcblx0XHRcdGR1bW15LmEyID0gc2hhcGUuYTIudG1waWQ7XG5cdFx0XHRkdW1teS5hMyA9IHNoYXBlLmEzLnRtcGlkO1xuXHRcdH0gZWxzZSBpZiAoc2hhcGUgaW5zdGFuY2VvZiBkMy5Ub3JzaW9uKSB7XG5cdFx0XHRkdW1teS50ID0gJ1RvcnNpb24nO1xuXHRcdFx0ZHVtbXkuYTEgPSBzaGFwZS5hMS50bXBpZDtcblx0XHRcdGR1bW15LmEyID0gc2hhcGUuYTIudG1waWQ7XG5cdFx0XHRkdW1teS5hMyA9IHNoYXBlLmEzLnRtcGlkO1xuXHRcdFx0ZHVtbXkuYTQgPSBzaGFwZS5hNC50bXBpZDtcblx0XHR9IGVsc2UgaWYgKHNoYXBlIGluc3RhbmNlb2YgZDMuX1N1cmZhY2UpIHtcblx0XHRcdGR1bW15LnQgPSAnU3VyZmFjZSc7XG5cdFx0XHRkdW1teS5hID0gW107XG5cdFx0XHRmb3IodmFyIGkgPSAwLCBpaT1zaGFwZS5hdG9tcy5sZW5ndGg7IGk8aWk7IGkrKyl7XG5cdFx0XHRcdGR1bW15LmEucHVzaChzaGFwZS5hdG9tc1tpXS50bXBpZCk7XG5cdFx0XHR9XG5cdFx0XHRpZighKHNoYXBlIGluc3RhbmNlb2YgZDMuVkRXU3VyZmFjZSkpe1xuXHRcdFx0XHRkdW1teS5wID0gc2hhcGUucHJvYmVSYWRpdXM7XG5cdFx0XHR9XG5cdFx0XHRkdW1teS5yID0gc2hhcGUucmVzb2x1dGlvbjtcblx0XHRcdHZhciB0eXBlID0gJ3Zkdyc7XG5cdFx0XHRpZihzaGFwZSBpbnN0YW5jZW9mIGQzLlNBU1N1cmZhY2Upe1xuXHRcdFx0XHR0eXBlID0gJ3Nhcyc7XG5cdFx0XHR9ZWxzZSBpZihkMy5TRVNTdXJmYWNlICYmIHNoYXBlIGluc3RhbmNlb2YgZDMuU0VTU3VyZmFjZSl7XG5cdFx0XHRcdHR5cGUgPSAnc2VzJztcblx0XHRcdH1cblx0XHRcdGR1bW15LmYgPSB0eXBlO1xuXHRcdH0gZWxzZSBpZiAoc2hhcGUgaW5zdGFuY2VvZiBkMy5Vbml0Q2VsbCkge1xuXHRcdFx0ZHVtbXkudCA9ICdVbml0Q2VsbCc7XG5cdFx0XHRmb3IgKHZhciBwIGluIHNoYXBlLnVuaXRDZWxsKSB7XG5cdFx0ICAgICAgICBkdW1teVtwXSA9IHNoYXBlLnVuaXRDZWxsW3BdO1xuXHRcdCAgICB9XG5cdFx0fVxuXHRcdHJldHVybiBkdW1teTtcblx0fTtcblx0Xy5zaGFwZUZyb20gPSBmdW5jdGlvbihkdW1teSwgbW9scykge1xuXHRcdHZhciBzaGFwZTtcblx0XHRpZiAoZHVtbXkudCA9PT0gJ0xpbmUnKSB7XG5cdFx0XHRzaGFwZSA9IG5ldyBkMi5MaW5lKG5ldyBzdHJ1Y3R1cmVzLlBvaW50KGR1bW15LngxLCBkdW1teS55MSksIG5ldyBzdHJ1Y3R1cmVzLlBvaW50KGR1bW15LngyLCBkdW1teS55MikpO1xuXHRcdFx0c2hhcGUuYXJyb3dUeXBlID0gZHVtbXkuYTtcblx0XHR9IGVsc2UgaWYgKGR1bW15LnQgPT09ICdQdXNoZXInKSB7XG5cdFx0XHR2YXIgbzEsIG8yO1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IG1vbHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgbW9sID0gbW9sc1tpXTtcblx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IG1vbC5hdG9tcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIGEgPSBtb2wuYXRvbXNbal07XG5cdFx0XHRcdFx0aWYgKGEudG1waWQgPT09IGR1bW15Lm8xKSB7XG5cdFx0XHRcdFx0XHRvMSA9IGE7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChhLnRtcGlkID09PSBkdW1teS5vMikge1xuXHRcdFx0XHRcdFx0bzIgPSBhO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gbW9sLmJvbmRzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgYiA9IG1vbC5ib25kc1tqXTtcblx0XHRcdFx0XHRpZiAoYi50bXBpZCA9PT0gZHVtbXkubzEpIHtcblx0XHRcdFx0XHRcdG8xID0gYjtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGIudG1waWQgPT09IGR1bW15Lm8yKSB7XG5cdFx0XHRcdFx0XHRvMiA9IGI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRzaGFwZSA9IG5ldyBkMi5QdXNoZXIobzEsIG8yKTtcblx0XHRcdGlmIChkdW1teS5lKSB7XG5cdFx0XHRcdHNoYXBlLm51bUVsZWN0cm9uID0gZHVtbXkuZTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGR1bW15LnQgPT09ICdBdG9tTWFwcGluZycpIHtcblx0XHRcdHZhciBhMSwgYTI7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9scy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBtb2wgPSBtb2xzW2ldO1xuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gbW9sLmF0b21zLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgYSA9IG1vbC5hdG9tc1tqXTtcblx0XHRcdFx0XHRpZiAoYS50bXBpZCA9PT0gZHVtbXkuYTEpIHtcblx0XHRcdFx0XHRcdGExID0gYTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGEudG1waWQgPT09IGR1bW15LmEyKSB7XG5cdFx0XHRcdFx0XHRhMiA9IGE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRzaGFwZSA9IG5ldyBkMi5BdG9tTWFwcGluZyhhMSwgYTIpO1xuXHRcdH0gZWxzZSBpZiAoZHVtbXkudCA9PT0gJ0JyYWNrZXQnKSB7XG5cdFx0XHRzaGFwZSA9IG5ldyBkMi5CcmFja2V0KG5ldyBzdHJ1Y3R1cmVzLlBvaW50KGR1bW15LngxLCBkdW1teS55MSksIG5ldyBzdHJ1Y3R1cmVzLlBvaW50KGR1bW15LngyLCBkdW1teS55MikpO1xuXHRcdFx0aWYgKGR1bW15LmMgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHQvLyBoYXZlIHRvIGNoZWNrIGFnYWluc3QgdW5kZWZpbmVkIGFzIGl0IGlzIGFuIGludGVnZXIgdGhhdCBjYW5cblx0XHRcdFx0Ly8gYmUgMFxuXHRcdFx0XHRzaGFwZS5jaGFyZ2UgPSBkdW1teS5jO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGR1bW15Lm0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHQvLyBoYXZlIHRvIGNoZWNrIGFnYWluc3QgdW5kZWZpbmVkIGFzIGl0IGlzIGFuIGludGVnZXIgdGhhdCBjYW5cblx0XHRcdFx0Ly8gYmUgMFxuXHRcdFx0XHRzaGFwZS5tdWx0ID0gZHVtbXkubTtcblx0XHRcdH1cblx0XHRcdGlmIChkdW1teS5yICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Ly8gaGF2ZSB0byBjaGVjayBhZ2FpbnN0IHVuZGVmaW5lZCBhcyBpdCBpcyBhbiBpbnRlZ2VyIHRoYXQgY2FuXG5cdFx0XHRcdC8vIGJlIDBcblx0XHRcdFx0c2hhcGUucmVwZWF0ID0gZHVtbXkucjtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGR1bW15LnQgPT09ICdEeW5hbWljQnJhY2tldCcpIHtcblx0XHRcdHZhciBiMSwgYjI7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9scy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBtb2wgPSBtb2xzW2ldO1xuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gbW9sLmJvbmRzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgYiA9IG1vbC5ib25kc1tqXTtcblx0XHRcdFx0XHRpZiAoYi50bXBpZCA9PT0gZHVtbXkuYjEpIHtcblx0XHRcdFx0XHRcdGIxID0gYjtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGIudG1waWQgPT09IGR1bW15LmIyKSB7XG5cdFx0XHRcdFx0XHRiMiA9IGI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRzaGFwZSA9IG5ldyBkMi5EeW5hbWljQnJhY2tldChiMSwgYjIpO1xuXHRcdFx0c2hhcGUubjEgPSBkdW1teS5uMTtcblx0XHRcdHNoYXBlLm4yID0gZHVtbXkubjI7XG5cdFx0XHRpZihkdW1teS5mKXtcblx0XHRcdFx0c2hhcGUuZmxpcCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChkdW1teS50ID09PSAnVkFQJykge1xuXHRcdFx0c2hhcGUgPSBuZXcgZDIuVkFQKGR1bW15LngsIGR1bW15LnkpO1xuXHRcdFx0aWYoZHVtbXkubyl7XG5cdFx0XHRcdHNoYXBlLmJvbmRUeXBlID0gZHVtbXkubztcblx0XHRcdH1cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIG1vbCA9IG1vbHNbaV07XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtb2wuYXRvbXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdHZhciBhID0gbW9sLmF0b21zW2pdO1xuXHRcdFx0XHRcdGlmIChhLnRtcGlkID09PSBkdW1teS5zKSB7XG5cdFx0XHRcdFx0XHRzaGFwZS5zdWJzdGl0dWVudCA9IGE7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGZvcih2YXIgayA9IDAsIGtrID0gZHVtbXkuYS5sZW5ndGg7IGs8a2s7IGsrKyl7XG5cdFx0XHRcdFx0XHRcdGlmKGEudG1waWQgPT09IGR1bW15LmFba10pe1xuXHRcdFx0XHRcdFx0XHRcdHNoYXBlLmF0dGFjaG1lbnRzLnB1c2goYSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGR1bW15LnQgPT09ICdEaXN0YW5jZScpIHtcblx0XHRcdHZhciBhMSwgYTI7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9scy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBtb2wgPSBtb2xzW2ldO1xuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gbW9sLmF0b21zLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgYSA9IG1vbC5hdG9tc1tqXTtcblx0XHRcdFx0XHRpZiAoYS50bXBpZCA9PT0gZHVtbXkuYTEpIHtcblx0XHRcdFx0XHRcdGExID0gYTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGEudG1waWQgPT09IGR1bW15LmEyKSB7XG5cdFx0XHRcdFx0XHRhMiA9IGE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRzaGFwZSA9IG5ldyBkMy5EaXN0YW5jZShhMSwgYTIsIGR1bW15Lm4sIGR1bW15Lm8pO1xuXHRcdH0gZWxzZSBpZiAoZHVtbXkudCA9PT0gJ0FuZ2xlJykge1xuXHRcdFx0dmFyIGExLCBhMiwgYTM7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9scy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBtb2wgPSBtb2xzW2ldO1xuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gbW9sLmF0b21zLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgYSA9IG1vbC5hdG9tc1tqXTtcblx0XHRcdFx0XHRpZiAoYS50bXBpZCA9PT0gZHVtbXkuYTEpIHtcblx0XHRcdFx0XHRcdGExID0gYTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGEudG1waWQgPT09IGR1bW15LmEyKSB7XG5cdFx0XHRcdFx0XHRhMiA9IGE7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChhLnRtcGlkID09PSBkdW1teS5hMykge1xuXHRcdFx0XHRcdFx0YTMgPSBhO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0c2hhcGUgPSBuZXcgZDMuQW5nbGUoYTEsIGEyLCBhMyk7XG5cdFx0fSBlbHNlIGlmIChkdW1teS50ID09PSAnVG9yc2lvbicpIHtcblx0XHRcdHZhciBhMSwgYTIsIGEzLCBhNDtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIG1vbCA9IG1vbHNbaV07XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtb2wuYXRvbXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdHZhciBhID0gbW9sLmF0b21zW2pdO1xuXHRcdFx0XHRcdGlmIChhLnRtcGlkID09PSBkdW1teS5hMSkge1xuXHRcdFx0XHRcdFx0YTEgPSBhO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoYS50bXBpZCA9PT0gZHVtbXkuYTIpIHtcblx0XHRcdFx0XHRcdGEyID0gYTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGEudG1waWQgPT09IGR1bW15LmEzKSB7XG5cdFx0XHRcdFx0XHRhMyA9IGE7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChhLnRtcGlkID09PSBkdW1teS5hNCkge1xuXHRcdFx0XHRcdFx0YTQgPSBhO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0c2hhcGUgPSBuZXcgZDMuVG9yc2lvbihhMSwgYTIsIGEzLCBhNCk7XG5cdFx0fSBlbHNlIGlmIChkdW1teS50ID09PSAnU3VyZmFjZScpIHtcblx0XHRcdHZhciBhdG9tcyA9IFtdO1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IG1vbHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgbW9sID0gbW9sc1tpXTtcblx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IG1vbC5hdG9tcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIGEgPSBtb2wuYXRvbXNbal07XG5cdFx0XHRcdFx0Zm9yKHZhciBrID0gMCwga2sgPSBkdW1teS5hLmxlbmd0aDsgazxrazsgaysrKXtcblx0XHRcdFx0XHRcdGlmKGEudG1waWQgPT09IGR1bW15LmFba10pe1xuXHRcdFx0XHRcdFx0XHRhdG9tcy5wdXNoKGEpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dmFyIHByb2JlUmFkaXVzID0gZHVtbXkucD9kdW1teS5wOjEuNDtcblx0XHRcdHZhciByZXNvbHV0aW9uID0gZHVtbXkucj9kdW1teS5yOjMwO1xuXHRcdFx0aWYoZHVtbXkuZj09PSd2ZHcnKXtcblx0XHRcdFx0c2hhcGUgPSBuZXcgZDMuVkRXU3VyZmFjZShhdG9tcywgcmVzb2x1dGlvbik7XG5cdFx0XHR9ZWxzZSBpZihkdW1teS5mPT09J3Nhcycpe1xuXHRcdFx0XHRzaGFwZSA9IG5ldyBkMy5TQVNTdXJmYWNlKGF0b21zLCBwcm9iZVJhZGl1cywgcmVzb2x1dGlvbik7XG5cdFx0XHR9ZWxzZSBpZihkdW1teS5mPT09J3Nlcycpe1xuXHRcdFx0XHRzaGFwZSA9IG5ldyBkMy5TRVNTdXJmYWNlKGF0b21zLCBwcm9iZVJhZGl1cywgcmVzb2x1dGlvbik7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChkdW1teS50ID09PSAnVW5pdENlbGwnKSB7XG5cdFx0XHR2YXIgdW5pdENlbGxWZWN0b3JzID0ge307XG5cdFx0XHRmb3IgKHZhciBwIGluIGR1bW15KSB7XG5cdFx0XHRcdHVuaXRDZWxsVmVjdG9yc1twXSA9IGR1bW15W3BdO1xuXHRcdCAgICB9XG5cdFx0XHRzaGFwZSA9IG5ldyBkMy5Vbml0Q2VsbCh1bml0Q2VsbFZlY3RvcnMpO1xuXHRcdH1cblx0XHRyZXR1cm4gc2hhcGU7XG5cdH07XG5cdF8ucGRiRnJvbSA9IGZ1bmN0aW9uKGNvbnRlbnQpIHtcblx0XHR2YXIgbW9sID0gdGhpcy5tb2xGcm9tKGNvbnRlbnQubW9sKTtcblx0XHRtb2wuZmluZFJpbmdzID0gZmFsc2U7XG5cdFx0Ly8gbWFyayBmcm9tIEpTT04gdG8gbm90ZSB0byBhbGdvcml0aG1zIHRoYXQgYXRvbXMgaW4gY2hhaW4gYXJlIG5vdFxuXHRcdC8vIHNhbWVcblx0XHQvLyBvYmplY3RzIGFzIGluIGF0b20gYXJyYXlcblx0XHRtb2wuZnJvbUpTT04gPSB0cnVlO1xuXHRcdG1vbC5jaGFpbnMgPSB0aGlzLmNoYWluc0Zyb20oY29udGVudC5yaWJib25zKTtcblx0XHRyZXR1cm4gbW9sO1xuXHR9O1xuXHRfLmNoYWluc0Zyb20gPSBmdW5jdGlvbihjb250ZW50KSB7XG5cdFx0dmFyIGNoYWlucyA9IFtdO1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBjb250ZW50LmNzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBjaGFpbiA9IGNvbnRlbnQuY3NbaV07XG5cdFx0XHR2YXIgYyA9IFtdO1xuXHRcdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IGNoYWluLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0dmFyIGNvbnZlcnQgPSBjaGFpbltqXTtcblx0XHRcdFx0dmFyIHIgPSBuZXcgc3RydWN0dXJlcy5SZXNpZHVlKCk7XG5cdFx0XHRcdHIubmFtZSA9IGNvbnZlcnQubjtcblx0XHRcdFx0ci5jcDEgPSBuZXcgc3RydWN0dXJlcy5BdG9tKCcnLCBjb252ZXJ0LngxLCBjb252ZXJ0LnkxLCBjb252ZXJ0LnoxKTtcblx0XHRcdFx0ci5jcDIgPSBuZXcgc3RydWN0dXJlcy5BdG9tKCcnLCBjb252ZXJ0LngyLCBjb252ZXJ0LnkyLCBjb252ZXJ0LnoyKTtcblx0XHRcdFx0aWYgKGNvbnZlcnQueDMpIHtcblx0XHRcdFx0XHRyLmNwMyA9IG5ldyBzdHJ1Y3R1cmVzLkF0b20oJycsIGNvbnZlcnQueDMsIGNvbnZlcnQueTMsIGNvbnZlcnQuejMpO1xuXHRcdFx0XHRcdHIuY3A0ID0gbmV3IHN0cnVjdHVyZXMuQXRvbSgnJywgY29udmVydC54NCwgY29udmVydC55NCwgY29udmVydC56NCk7XG5cdFx0XHRcdFx0ci5jcDUgPSBuZXcgc3RydWN0dXJlcy5BdG9tKCcnLCBjb252ZXJ0Lng1LCBjb252ZXJ0Lnk1LCBjb252ZXJ0Lno1KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyLmhlbGl4ID0gY29udmVydC5oO1xuXHRcdFx0XHRyLnNoZWV0ID0gY29udmVydC5zO1xuXHRcdFx0XHRyLmFycm93ID0gaiA+IDAgJiYgY2hhaW5baiAtIDFdLmE7XG5cdFx0XHRcdGMucHVzaChyKTtcblx0XHRcdH1cblx0XHRcdGNoYWlucy5wdXNoKGMpO1xuXHRcdH1cblx0XHRyZXR1cm4gY2hhaW5zO1xuXHR9O1xuXG5cdC8vIHNob3J0Y3V0c1xuXHR2YXIgaW50ZXJwcmV0ZXIgPSBuZXcgaW8uSlNPTkludGVycHJldGVyKCk7XG5cdGMucmVhZEpTT04gPSBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHR2YXIgb2JqO1xuXHRcdHRyeSB7XG5cdFx0XHRvYmogPSBKU09OLnBhcnNlKHN0cmluZyk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0Ly8gbm90IGpzb25cblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmIChvYmopIHtcblx0XHRcdGlmIChvYmoubSB8fCBvYmoucykge1xuXHRcdFx0XHRyZXR1cm4gaW50ZXJwcmV0ZXIuY29udGVudEZyb20ob2JqKTtcblx0XHRcdH0gZWxzZSBpZiAob2JqLmEpIHtcblx0XHRcdFx0cmV0dXJuIG9iaiA9IHtcblx0XHRcdFx0XHRtb2xlY3VsZXMgOiBbIGludGVycHJldGVyLm1vbEZyb20ob2JqKSBdLFxuXHRcdFx0XHRcdHNoYXBlcyA6IFtdXG5cdFx0XHRcdH07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gb2JqID0ge1xuXHRcdFx0XHRcdG1vbGVjdWxlcyA6IFtdLFxuXHRcdFx0XHRcdHNoYXBlcyA6IFtdXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH07XG5cdGMud3JpdGVKU09OID0gZnVuY3Rpb24obW9scywgc2hhcGVzKSB7XG5cdFx0cmV0dXJuIEpTT04uc3RyaW5naWZ5KGludGVycHJldGVyLmNvbnRlbnRUbyhtb2xzLCBzaGFwZXMpKTtcblx0fTtcblxufSkoQ2hlbURvb2RsZSwgQ2hlbURvb2RsZS5pbywgQ2hlbURvb2RsZS5zdHJ1Y3R1cmVzLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMuZDIsIENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgSlNPTik7XG4oZnVuY3Rpb24oYywgaW8sIHN0cnVjdHVyZXMsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGlvLlJYTkludGVycHJldGVyID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfID0gaW8uUlhOSW50ZXJwcmV0ZXIucHJvdG90eXBlID0gbmV3IGlvLl9JbnRlcnByZXRlcigpO1xuXHRfLnJlYWQgPSBmdW5jdGlvbihjb250ZW50LCBtdWx0aXBsaWVyKSB7XG5cdFx0aWYgKCFtdWx0aXBsaWVyKSB7XG5cdFx0XHRtdWx0aXBsaWVyID0gYy5kZWZhdWx0X2JvbmRMZW5ndGhfMkQ7XG5cdFx0fVxuXHRcdHZhciBtb2xlY3VsZXMgPSBbXTtcblx0XHR2YXIgbGluZTtcblx0XHRpZiAoIWNvbnRlbnQpIHtcblx0XHRcdG1vbGVjdWxlcy5wdXNoKG5ldyBzdHJ1Y3R1cmVzLk1vbGVjdWxlKCkpO1xuXHRcdFx0bGluZSA9IG5ldyBzdHJ1Y3R1cmVzLmQyLkxpbmUobmV3IHN0cnVjdHVyZXMuUG9pbnQoLTIwLCAwKSwgbmV3IHN0cnVjdHVyZXMuUG9pbnQoMjAsIDApKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGNvbnRlbnRUb2tlbnMgPSBjb250ZW50LnNwbGl0KCckTU9MXFxuJyk7XG5cdFx0XHR2YXIgaGVhZGVyVG9rZW5zID0gY29udGVudFRva2Vuc1swXS5zcGxpdCgnXFxuJyk7XG5cdFx0XHR2YXIgY291bnRzID0gaGVhZGVyVG9rZW5zWzRdO1xuXHRcdFx0dmFyIG51bVJlYWN0YW50cyA9IHBhcnNlSW50KGNvdW50cy5zdWJzdHJpbmcoMCwgMykpO1xuXHRcdFx0dmFyIG51bVByb2R1Y3RzID0gcGFyc2VJbnQoY291bnRzLnN1YnN0cmluZygzLCA2KSk7XG5cdFx0XHR2YXIgY3VycmVudE1vbGVjdWxlID0gMTtcblx0XHRcdHZhciBzdGFydCA9IDA7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbnVtUmVhY3RhbnRzICsgbnVtUHJvZHVjdHM7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdG1vbGVjdWxlc1tpXSA9IGMucmVhZE1PTChjb250ZW50VG9rZW5zW2N1cnJlbnRNb2xlY3VsZV0sIG11bHRpcGxpZXIpO1xuXHRcdFx0XHR2YXIgYiA9IG1vbGVjdWxlc1tpXS5nZXRCb3VuZHMoKTtcblx0XHRcdFx0dmFyIHdpZHRoID0gYi5tYXhYIC0gYi5taW5YO1xuXHRcdFx0XHRzdGFydCAtPSB3aWR0aCArIDQwO1xuXHRcdFx0XHRjdXJyZW50TW9sZWN1bGUrKztcblx0XHRcdH1cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBudW1SZWFjdGFudHM7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBiID0gbW9sZWN1bGVzW2ldLmdldEJvdW5kcygpO1xuXHRcdFx0XHR2YXIgd2lkdGggPSBiLm1heFggLSBiLm1pblg7XG5cdFx0XHRcdHZhciBjZW50ZXIgPSBtb2xlY3VsZXNbaV0uZ2V0Q2VudGVyKCk7XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtb2xlY3VsZXNbaV0uYXRvbXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdHZhciBhID0gbW9sZWN1bGVzW2ldLmF0b21zW2pdO1xuXHRcdFx0XHRcdGEueCArPSBzdGFydCArICh3aWR0aCAvIDIpIC0gY2VudGVyLng7XG5cdFx0XHRcdFx0YS55IC09IGNlbnRlci55O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0YXJ0ICs9IHdpZHRoICsgNDA7XG5cdFx0XHR9XG5cdFx0XHRsaW5lID0gbmV3IHN0cnVjdHVyZXMuZDIuTGluZShuZXcgc3RydWN0dXJlcy5Qb2ludChzdGFydCwgMCksIG5ldyBzdHJ1Y3R1cmVzLlBvaW50KHN0YXJ0ICsgNDAsIDApKTtcblx0XHRcdHN0YXJ0ICs9IDgwO1xuXHRcdFx0Zm9yICggdmFyIGkgPSBudW1SZWFjdGFudHMsIGlpID0gbnVtUmVhY3RhbnRzICsgbnVtUHJvZHVjdHM7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBiID0gbW9sZWN1bGVzW2ldLmdldEJvdW5kcygpO1xuXHRcdFx0XHR2YXIgd2lkdGggPSBiLm1heFggLSBiLm1pblg7XG5cdFx0XHRcdHZhciBjZW50ZXIgPSBtb2xlY3VsZXNbaV0uZ2V0Q2VudGVyKCk7XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMDsgaiA8IG1vbGVjdWxlc1tpXS5hdG9tcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdHZhciBhID0gbW9sZWN1bGVzW2ldLmF0b21zW2pdO1xuXHRcdFx0XHRcdGEueCArPSBzdGFydCArICh3aWR0aCAvIDIpIC0gY2VudGVyLng7XG5cdFx0XHRcdFx0YS55IC09IGNlbnRlci55O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0YXJ0ICs9IHdpZHRoICsgNDA7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGxpbmUuYXJyb3dUeXBlID0gc3RydWN0dXJlcy5kMi5MaW5lLkFSUk9XX1NZTlRIRVRJQztcblx0XHRyZXR1cm4ge1xuXHRcdFx0J21vbGVjdWxlcycgOiBtb2xlY3VsZXMsXG5cdFx0XHQnc2hhcGVzJyA6IFsgbGluZSBdXG5cdFx0fTtcblx0fTtcblx0Xy53cml0ZSA9IGZ1bmN0aW9uKG1vbHMsIHNoYXBlcykge1xuXHRcdHZhciBtb2xlY3VsZXMgPSBbIFtdLCBbXSBdO1xuXHRcdHZhciBwcyA9IHVuZGVmaW5lZDtcblx0XHRpZiAoIW1vbHMgfHwgIXNoYXBlcykge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRmb3IgKGkgPSAwLCBpaSA9IHNoYXBlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRpZiAoc2hhcGVzW2ldIGluc3RhbmNlb2Ygc3RydWN0dXJlcy5kMi5MaW5lKSB7XG5cdFx0XHRcdHBzID0gc2hhcGVzW2ldLmdldFBvaW50cygpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCFwcykge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9scy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgY2VudGVyID0gbW9sc1tpXS5nZXRDZW50ZXIoKTtcblx0XHRcdGlmIChjZW50ZXIueCA8IHBzWzFdLngpIHtcblx0XHRcdFx0bW9sZWN1bGVzWzBdLnB1c2gobW9sc1tpXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtb2xlY3VsZXNbMV0ucHVzaChtb2xzW2ldKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIHNiID0gW107XG5cdFx0c2IucHVzaCgnJFJYTlxcblJlYWN0aW9uIGZyb20gQ2hlbURvb2RsZSBXZWIgQ29tcG9uZW50c1xcblxcbmh0dHA6Ly93d3cuaWNoZW1sYWJzLmNvbVxcbicpO1xuXHRcdHNiLnB1c2godGhpcy5maXQobW9sZWN1bGVzWzBdLmxlbmd0aC50b1N0cmluZygpLCAzKSk7XG5cdFx0c2IucHVzaCh0aGlzLmZpdChtb2xlY3VsZXNbMV0ubGVuZ3RoLnRvU3RyaW5nKCksIDMpKTtcblx0XHRzYi5wdXNoKCdcXG4nKTtcblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCAyOyBpKyspIHtcblx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtb2xlY3VsZXNbaV0ubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRzYi5wdXNoKCckTU9MXFxuJyk7XG5cdFx0XHRcdHNiLnB1c2goYy53cml0ZU1PTChtb2xlY3VsZXNbaV1bal0pKTtcblx0XHRcdFx0c2IucHVzaCgnXFxuJyk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBzYi5qb2luKCcnKTtcblx0fTtcblxuXHQvLyBzaG9ydGN1dHNcblx0dmFyIGludGVycHJldGVyID0gbmV3IGlvLlJYTkludGVycHJldGVyKCk7XG5cdGMucmVhZFJYTiA9IGZ1bmN0aW9uKGNvbnRlbnQsIG11bHRpcGxpZXIpIHtcblx0XHRyZXR1cm4gaW50ZXJwcmV0ZXIucmVhZChjb250ZW50LCBtdWx0aXBsaWVyKTtcblx0fTtcblx0Yy53cml0ZVJYTiA9IGZ1bmN0aW9uKG1vbHMsIHNoYXBlcykge1xuXHRcdHJldHVybiBpbnRlcnByZXRlci53cml0ZShtb2xzLCBzaGFwZXMpO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLCBDaGVtRG9vZGxlLmlvLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMpO1xuXG4oZnVuY3Rpb24oYywgRUxFTUVOVCwgU1lNQk9MUywgaW8sIHN0cnVjdHVyZXMsIHRyaW0sIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGlvLlhZWkludGVycHJldGVyID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfID0gaW8uWFlaSW50ZXJwcmV0ZXIucHJvdG90eXBlID0gbmV3IGlvLl9JbnRlcnByZXRlcigpO1xuXHRfLmRlZHVjZUNvdmFsZW50Qm9uZHMgPSB0cnVlO1xuXHRfLnJlYWQgPSBmdW5jdGlvbihjb250ZW50KSB7XG5cdFx0dmFyIG1vbGVjdWxlID0gbmV3IHN0cnVjdHVyZXMuTW9sZWN1bGUoKTtcblx0XHRpZiAoIWNvbnRlbnQpIHtcblx0XHRcdHJldHVybiBtb2xlY3VsZTtcblx0XHR9XG5cdFx0dmFyIGxpbmVzID0gY29udGVudC5zcGxpdCgnXFxuJyk7XG5cblx0XHR2YXIgbnVtQXRvbXMgPSBwYXJzZUludCh0cmltKGxpbmVzWzBdKSk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBudW1BdG9tczsgaSsrKSB7XG5cdFx0XHR2YXIgbGluZSA9IGxpbmVzW2kgKyAyXTtcblx0XHRcdHZhciB0b2tlbnMgPSBsaW5lLnNwbGl0KC9cXHMrL2cpO1xuXHRcdFx0bW9sZWN1bGUuYXRvbXNbaV0gPSBuZXcgc3RydWN0dXJlcy5BdG9tKGlzTmFOKHRva2Vuc1swXSkgPyB0b2tlbnNbMF0gOiBTWU1CT0xTW3BhcnNlSW50KHRva2Vuc1swXSkgLSAxXSwgcGFyc2VGbG9hdCh0b2tlbnNbMV0pLCBwYXJzZUZsb2F0KHRva2Vuc1syXSksIHBhcnNlRmxvYXQodG9rZW5zWzNdKSk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmRlZHVjZUNvdmFsZW50Qm9uZHMpIHtcblx0XHRcdG5ldyBjLmluZm9ybWF0aWNzLkJvbmREZWR1Y2VyKCkuZGVkdWNlQ292YWxlbnRCb25kcyhtb2xlY3VsZSwgMSk7XG5cdFx0fVxuXHRcdHJldHVybiBtb2xlY3VsZTtcblx0fTtcblxuXHQvLyBzaG9ydGN1dHNcblx0dmFyIGludGVycHJldGVyID0gbmV3IGlvLlhZWkludGVycHJldGVyKCk7XG5cdGMucmVhZFhZWiA9IGZ1bmN0aW9uKGNvbnRlbnQpIHtcblx0XHRyZXR1cm4gaW50ZXJwcmV0ZXIucmVhZChjb250ZW50KTtcblx0fTtcblxufSkoQ2hlbURvb2RsZSwgQ2hlbURvb2RsZS5FTEVNRU5ULCBDaGVtRG9vZGxlLlNZTUJPTFMsIENoZW1Eb29kbGUuaW8sIENoZW1Eb29kbGUuc3RydWN0dXJlcywgQ2hlbURvb2RsZS5saWIualF1ZXJ5LnRyaW0pO1xuXG5DaGVtRG9vZGxlLm1vbml0b3IgPSAoZnVuY3Rpb24oZmVhdHVyZURldGVjdGlvbiwgcSwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdHZhciBtID0ge307XG5cblx0bS5DQU5WQVNfRFJBR0dJTkcgPSB1bmRlZmluZWQ7XG5cdG0uQ0FOVkFTX09WRVIgPSB1bmRlZmluZWQ7XG5cdG0uQUxUID0gZmFsc2U7XG5cdG0uU0hJRlQgPSBmYWxzZTtcblx0bS5NRVRBID0gZmFsc2U7XG5cblx0aWYgKCFmZWF0dXJlRGV0ZWN0aW9uLnN1cHBvcnRzX3RvdWNoKCkpIHtcblx0XHRxKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcblx0XHRcdC8vIGhhbmRsZXMgZHJhZ2dpbmcgYmV5b25kIHRoZSBjYW52YXMgYm91bmRzXG5cdFx0XHRxKGRvY3VtZW50KS5tb3VzZW1vdmUoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAobS5DQU5WQVNfRFJBR0dJTkcpIHtcblx0XHRcdFx0XHRpZiAobS5DQU5WQVNfRFJBR0dJTkcuZHJhZykge1xuXHRcdFx0XHRcdFx0bS5DQU5WQVNfRFJBR0dJTkcucHJlaGFuZGxlRXZlbnQoZSk7XG5cdFx0XHRcdFx0XHRtLkNBTlZBU19EUkFHR0lORy5kcmFnKGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRxKGRvY3VtZW50KS5tb3VzZXVwKGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKG0uQ0FOVkFTX0RSQUdHSU5HICYmIG0uQ0FOVkFTX0RSQUdHSU5HICE9PSBtLkNBTlZBU19PVkVSKSB7XG5cdFx0XHRcdFx0aWYgKG0uQ0FOVkFTX0RSQUdHSU5HLm1vdXNldXApIHtcblx0XHRcdFx0XHRcdG0uQ0FOVkFTX0RSQUdHSU5HLnByZWhhbmRsZUV2ZW50KGUpO1xuXHRcdFx0XHRcdFx0bS5DQU5WQVNfRFJBR0dJTkcubW91c2V1cChlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0bS5DQU5WQVNfRFJBR0dJTkcgPSB1bmRlZmluZWQ7XG5cdFx0XHR9KTtcblx0XHRcdC8vIGhhbmRsZXMgbW9kaWZpZXIga2V5cyBmcm9tIGEgc2luZ2xlIGtleWJvYXJkXG5cdFx0XHRxKGRvY3VtZW50KS5rZXlkb3duKGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0bS5TSElGVCA9IGUuc2hpZnRLZXk7XG5cdFx0XHRcdG0uQUxUID0gZS5hbHRLZXk7XG5cdFx0XHRcdG0uTUVUQSA9IGUubWV0YUtleSB8fCBlLmN0cmxLZXk7XG5cdFx0XHRcdHZhciBhZmZlY3RpbmcgPSBtLkNBTlZBU19PVkVSO1xuXHRcdFx0XHRpZiAobS5DQU5WQVNfRFJBR0dJTkcpIHtcblx0XHRcdFx0XHRhZmZlY3RpbmcgPSBtLkNBTlZBU19EUkFHR0lORztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoYWZmZWN0aW5nKSB7XG5cdFx0XHRcdFx0aWYgKGFmZmVjdGluZy5rZXlkb3duKSB7XG5cdFx0XHRcdFx0XHRhZmZlY3RpbmcucHJlaGFuZGxlRXZlbnQoZSk7XG5cdFx0XHRcdFx0XHRhZmZlY3Rpbmcua2V5ZG93bihlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cShkb2N1bWVudCkua2V5cHJlc3MoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHR2YXIgYWZmZWN0aW5nID0gbS5DQU5WQVNfT1ZFUjtcblx0XHRcdFx0aWYgKG0uQ0FOVkFTX0RSQUdHSU5HKSB7XG5cdFx0XHRcdFx0YWZmZWN0aW5nID0gbS5DQU5WQVNfRFJBR0dJTkc7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGFmZmVjdGluZykge1xuXHRcdFx0XHRcdGlmIChhZmZlY3Rpbmcua2V5cHJlc3MpIHtcblx0XHRcdFx0XHRcdGFmZmVjdGluZy5wcmVoYW5kbGVFdmVudChlKTtcblx0XHRcdFx0XHRcdGFmZmVjdGluZy5rZXlwcmVzcyhlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cShkb2N1bWVudCkua2V5dXAoZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRtLlNISUZUID0gZS5zaGlmdEtleTtcblx0XHRcdFx0bS5BTFQgPSBlLmFsdEtleTtcblx0XHRcdFx0bS5NRVRBID0gZS5tZXRhS2V5IHx8IGUuY3RybEtleTtcblx0XHRcdFx0dmFyIGFmZmVjdGluZyA9IG0uQ0FOVkFTX09WRVI7XG5cdFx0XHRcdGlmIChtLkNBTlZBU19EUkFHR0lORykge1xuXHRcdFx0XHRcdGFmZmVjdGluZyA9IG0uQ0FOVkFTX0RSQUdHSU5HO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChhZmZlY3RpbmcpIHtcblx0XHRcdFx0XHRpZiAoYWZmZWN0aW5nLmtleXVwKSB7XG5cdFx0XHRcdFx0XHRhZmZlY3RpbmcucHJlaGFuZGxlRXZlbnQoZSk7XG5cdFx0XHRcdFx0XHRhZmZlY3Rpbmcua2V5dXAoZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiBtO1xuXG59KShDaGVtRG9vZGxlLmZlYXR1cmVEZXRlY3Rpb24sIENoZW1Eb29kbGUubGliLmpRdWVyeSwgZG9jdW1lbnQpO1xuXG4oZnVuY3Rpb24oYywgZmVhdHVyZURldGVjdGlvbiwgbWF0aCwgbW9uaXRvciwgc3RydWN0dXJlcywgcSwgbSwgZG9jdW1lbnQsIHdpbmRvdywgdXNlckFnZW50LCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRjLl9DYW52YXMgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF8gPSBjLl9DYW52YXMucHJvdG90eXBlO1xuXHRfLm1vbGVjdWxlcyA9IHVuZGVmaW5lZDtcblx0Xy5zaGFwZXMgPSB1bmRlZmluZWQ7XG5cdF8uZW1wdHlNZXNzYWdlID0gdW5kZWZpbmVkO1xuXHRfLmltYWdlID0gdW5kZWZpbmVkO1xuXHRfLnJlcGFpbnQgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAodGhpcy50ZXN0KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHZhciBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmlkKTtcblx0XHRpZiAoY2FudmFzLmdldENvbnRleHQpIHtcblx0XHRcdHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblx0XHRcdGlmICh0aGlzLnBpeGVsUmF0aW8gIT09IDEgJiYgY2FudmFzLndpZHRoID09PSB0aGlzLndpZHRoKSB7XG5cdFx0XHRcdGNhbnZhcy53aWR0aCA9IHRoaXMud2lkdGggKiB0aGlzLnBpeGVsUmF0aW87XG5cdFx0XHRcdGNhbnZhcy5oZWlnaHQgPSB0aGlzLmhlaWdodCAqIHRoaXMucGl4ZWxSYXRpbztcblx0XHRcdFx0Y3R4LnNjYWxlKHRoaXMucGl4ZWxSYXRpbywgdGhpcy5waXhlbFJhdGlvKTtcblx0XHRcdH1cblx0XHRcdGlmICghdGhpcy5pbWFnZSkge1xuXHRcdFx0XHRpZiAodGhpcy5zcGVjcy5iYWNrZ3JvdW5kQ29sb3IgJiYgdGhpcy5iZ0NhY2hlICE9PSBjYW52YXMuc3R5bGUuYmFja2dyb3VuZENvbG9yKSB7XG5cdFx0XHRcdFx0Y2FudmFzLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHRoaXMuc3BlY3MuYmFja2dyb3VuZENvbG9yO1xuXHRcdFx0XHRcdHRoaXMuYmdDYWNoZSA9IGNhbnZhcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gY2xlYXJSZWN0IGlzIGNvcnJlY3QsIGJ1dCBkb2Vzbid0IHdvcmsgYXMgZXhwZWN0ZWQgb24gQW5kcm9pZFxuXHRcdFx0XHQvLyBjdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRoaXMuc3BlY3MuYmFja2dyb3VuZENvbG9yO1xuXHRcdFx0XHRjdHguZmlsbFJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3R4LmRyYXdJbWFnZSh0aGlzLmltYWdlLCAwLCAwKTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLmlubmVyUmVwYWludCkge1xuXHRcdFx0XHR0aGlzLmlubmVyUmVwYWludChjdHgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKHRoaXMubW9sZWN1bGVzLmxlbmd0aCAhPT0gMCB8fCB0aGlzLnNoYXBlcy5sZW5ndGggIT09IDApIHtcblx0XHRcdFx0XHRjdHguc2F2ZSgpO1xuXHRcdFx0XHRcdGN0eC50cmFuc2xhdGUodGhpcy53aWR0aCAvIDIsIHRoaXMuaGVpZ2h0IC8gMik7XG5cdFx0XHRcdFx0Y3R4LnJvdGF0ZSh0aGlzLnNwZWNzLnJvdGF0ZUFuZ2xlKTtcblx0XHRcdFx0XHRjdHguc2NhbGUodGhpcy5zcGVjcy5zY2FsZSwgdGhpcy5zcGVjcy5zY2FsZSk7XG5cdFx0XHRcdFx0Y3R4LnRyYW5zbGF0ZSgtdGhpcy53aWR0aCAvIDIsIC10aGlzLmhlaWdodCAvIDIpO1xuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLm1vbGVjdWxlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdFx0XHR0aGlzLm1vbGVjdWxlc1tpXS5jaGVjayh0cnVlKTtcblx0XHRcdFx0XHRcdHRoaXMubW9sZWN1bGVzW2ldLmRyYXcoY3R4LCB0aGlzLnNwZWNzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYodGhpcy5jaGVja3NPbkFjdGlvbil7XG5cdFx0XHRcdFx0XHQvLyBjaGVja3NPbkFjdGlvbigpIG11c3QgYmUgY2FsbGVkIGFmdGVyIGNoZWNraW5nIG1vbGVjdWxlcywgYXMgaXQgZGVwZW5kcyBvbiBtb2xlY3VsZXMgYmVpbmcgY29ycmVjdFxuXHRcdFx0XHRcdFx0Ly8gdGhpcyBmdW5jdGlvbiBpcyBvbmx5IHVzZWQgYnkgdGhlIHVpc1xuXHRcdFx0XHRcdFx0dGhpcy5jaGVja3NPbkFjdGlvbih0cnVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuc2hhcGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHRcdHRoaXMuc2hhcGVzW2ldLmRyYXcoY3R4LCB0aGlzLnNwZWNzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y3R4LnJlc3RvcmUoKTtcblx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLmVtcHR5TWVzc2FnZSkge1xuXHRcdFx0XHRcdGN0eC5maWxsU3R5bGUgPSAnIzczNzY4Myc7XG5cdFx0XHRcdFx0Y3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHRcdFx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblx0XHRcdFx0XHRjdHguZm9udCA9ICcxOHB4IEhlbHZldGljYSwgVmVyZGFuYSwgQXJpYWwsIFNhbnMtc2VyaWYnO1xuXHRcdFx0XHRcdGN0eC5maWxsVGV4dCh0aGlzLmVtcHR5TWVzc2FnZSwgdGhpcy53aWR0aCAvIDIsIHRoaXMuaGVpZ2h0IC8gMik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLmRyYXdDaGlsZEV4dHJhcykge1xuXHRcdFx0XHR0aGlzLmRyYXdDaGlsZEV4dHJhcyhjdHgsIHRoaXMuc3BlY3MpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0Xy5yZXNpemUgPSBmdW5jdGlvbih3LCBoKSB7XG5cdFx0dmFyIGNhcCA9IHEoJyMnICsgdGhpcy5pZCk7XG5cdFx0Y2FwLmF0dHIoe1xuXHRcdFx0d2lkdGggOiB3LFxuXHRcdFx0aGVpZ2h0IDogaFxuXHRcdH0pO1xuXHRcdGNhcC5jc3MoJ3dpZHRoJywgdyk7XG5cdFx0Y2FwLmNzcygnaGVpZ2h0JywgaCk7XG5cdFx0dGhpcy53aWR0aCA9IHc7XG5cdFx0dGhpcy5oZWlnaHQgPSBoO1xuXHRcdGlmIChjLl9DYW52YXMzRCAmJiB0aGlzIGluc3RhbmNlb2YgYy5fQ2FudmFzM0QpIHtcblx0XHRcdHZhciB3dSA9IHc7XG5cdFx0XHR2YXIgaHUgPSBoO1xuXHRcdFx0aWYgKHRoaXMucGl4ZWxSYXRpbyAhPT0gMSkge1xuXHRcdFx0XHR3dSAqPSB0aGlzLnBpeGVsUmF0aW87XG5cdFx0XHRcdGh1ICo9IHRoaXMucGl4ZWxSYXRpbztcblx0XHRcdFx0dGhpcy5nbC5jYW52YXMud2lkdGggPSB3dTtcblx0XHRcdFx0dGhpcy5nbC5jYW52YXMuaGVpZ2h0ID0gaHU7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmdsLnZpZXdwb3J0KDAsIDAsIHd1LCBodSk7XG5cdFx0XHR0aGlzLmFmdGVyTG9hZENvbnRlbnQoKTtcblx0XHR9IGVsc2UgaWYgKHRoaXMubW9sZWN1bGVzLmxlbmd0aCA+IDApIHtcblx0XHRcdHRoaXMuY2VudGVyKCk7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5tb2xlY3VsZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR0aGlzLm1vbGVjdWxlc1tpXS5jaGVjaygpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLnJlcGFpbnQoKTtcblx0fTtcblx0Xy5zZXRCYWNrZ3JvdW5kSW1hZ2UgPSBmdW5jdGlvbihwYXRoKSB7XG5cdFx0dGhpcy5pbWFnZSA9IG5ldyBJbWFnZSgpOyAvLyBDcmVhdGUgbmV3IEltYWdlIG9iamVjdFxuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dGhpcy5pbWFnZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblx0XHRcdG1lLnJlcGFpbnQoKTtcblx0XHR9O1xuXHRcdHRoaXMuaW1hZ2Uuc3JjID0gcGF0aDsgLy8gU2V0IHNvdXJjZSBwYXRoXG5cdH07XG5cdF8ubG9hZE1vbGVjdWxlID0gZnVuY3Rpb24obW9sZWN1bGUpIHtcblx0XHR0aGlzLmNsZWFyKCk7XG5cdFx0dGhpcy5tb2xlY3VsZXMucHVzaChtb2xlY3VsZSk7XG5cdFx0Ly8gZG8gdGhpcyB0d2ljZSB0byBjZW50ZXIgYmFzZWQgb24gYXRvbSBsYWJlbHMsIHdoaWNoIG11c3QgYmUgZmlyc3QgcmVuZGVyZWQgdG8gYmUgY29uc2lkZXJlZCBpbiBib3VuZHNcblx0XHRmb3IodmFyIGkgPSAwOyBpPDI7IGkrKyl7XG5cdFx0XHR0aGlzLmNlbnRlcigpO1xuXHRcdFx0aWYgKCEoYy5fQ2FudmFzM0QgJiYgdGhpcyBpbnN0YW5jZW9mIGMuX0NhbnZhczNEKSkge1xuXHRcdFx0XHRtb2xlY3VsZS5jaGVjaygpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuYWZ0ZXJMb2FkQ29udGVudCkge1xuXHRcdFx0XHR0aGlzLmFmdGVyTG9hZENvbnRlbnQoKTtcblx0XHRcdH1cblx0XHRcdHRoaXMucmVwYWludCgpO1xuXHRcdH1cblx0fTtcblx0Xy5sb2FkQ29udGVudCA9IGZ1bmN0aW9uKG1vbHMsIHNoYXBlcykge1xuXHRcdHRoaXMubW9sZWN1bGVzID0gbW9scz9tb2xzOltdO1xuXHRcdHRoaXMuc2hhcGVzID0gc2hhcGVzP3NoYXBlczpbXTtcblx0XHQvLyBkbyB0aGlzIHR3aWNlIHRvIGNlbnRlciBiYXNlZCBvbiBhdG9tIGxhYmVscywgd2hpY2ggbXVzdCBiZSBmaXJzdCByZW5kZXJlZCB0byBiZSBjb25zaWRlcmVkIGluIGJvdW5kc1xuXHRcdGZvcih2YXIgaSA9IDA7IGk8MjsgaSsrKXtcblx0XHRcdHRoaXMuY2VudGVyKCk7XG5cdFx0XHRpZiAoIShjLl9DYW52YXMzRCAmJiB0aGlzIGluc3RhbmNlb2YgYy5fQ2FudmFzM0QpKSB7XG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLm1vbGVjdWxlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdFx0dGhpcy5tb2xlY3VsZXNbaV0uY2hlY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuYWZ0ZXJMb2FkQ29udGVudCkge1xuXHRcdFx0XHR0aGlzLmFmdGVyTG9hZENvbnRlbnQoKTtcblx0XHRcdH1cblx0XHRcdHRoaXMucmVwYWludCgpO1xuXHRcdH1cblx0fTtcblx0Xy5hZGRNb2xlY3VsZSA9IGZ1bmN0aW9uKG1vbGVjdWxlKSB7XG5cdFx0dGhpcy5tb2xlY3VsZXMucHVzaChtb2xlY3VsZSk7XG5cdFx0aWYgKCEoYy5fQ2FudmFzM0QgJiYgdGhpcyBpbnN0YW5jZW9mIGMuX0NhbnZhczNEKSkge1xuXHRcdFx0bW9sZWN1bGUuY2hlY2soKTtcblx0XHR9XG5cdFx0dGhpcy5yZXBhaW50KCk7XG5cdH07XG5cdF8ucmVtb3ZlTW9sZWN1bGUgPSBmdW5jdGlvbihtb2wpIHtcblx0XHR0aGlzLm1vbGVjdWxlcyA9IHEuZ3JlcCh0aGlzLm1vbGVjdWxlcywgZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gbW9sO1xuXHRcdH0pO1xuXHRcdHRoaXMucmVwYWludCgpO1xuXHR9O1xuXHRfLmdldE1vbGVjdWxlID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubW9sZWN1bGVzLmxlbmd0aCA+IDAgPyB0aGlzLm1vbGVjdWxlc1swXSA6IHVuZGVmaW5lZDtcblx0fTtcblx0Xy5nZXRNb2xlY3VsZXMgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tb2xlY3VsZXM7XG5cdH07XG5cdF8uYWRkU2hhcGUgPSBmdW5jdGlvbihzaGFwZSkge1xuXHRcdHRoaXMuc2hhcGVzLnB1c2goc2hhcGUpO1xuXHRcdHRoaXMucmVwYWludCgpO1xuXHR9O1xuXHRfLnJlbW92ZVNoYXBlID0gZnVuY3Rpb24oc2hhcGUpIHtcblx0XHR0aGlzLnNoYXBlcyA9IHEuZ3JlcCh0aGlzLnNoYXBlcywgZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gc2hhcGU7XG5cdFx0fSk7XG5cdFx0dGhpcy5yZXBhaW50KCk7XG5cdH07XG5cdF8uZ2V0U2hhcGVzID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2hhcGVzO1xuXHR9O1xuXHRfLmNsZWFyID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5tb2xlY3VsZXMgPSBbXTtcblx0XHR0aGlzLnNoYXBlcyA9IFtdO1xuXHRcdHRoaXMuc3BlY3Muc2NhbGUgPSAxO1xuXHRcdHRoaXMucmVwYWludCgpO1xuXHR9O1xuXHRfLmNlbnRlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBib3VuZHMgPSB0aGlzLmdldENvbnRlbnRCb3VuZHMoKTtcblx0XHR2YXIgY2VudGVyID0gbmV3IHN0cnVjdHVyZXMuUG9pbnQoKHRoaXMud2lkdGggLSBib3VuZHMubWluWCAtIGJvdW5kcy5tYXhYKSAvIDIsICh0aGlzLmhlaWdodCAtIGJvdW5kcy5taW5ZIC0gYm91bmRzLm1heFkpIC8gMik7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMubW9sZWN1bGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBtb2wgPSB0aGlzLm1vbGVjdWxlc1tpXTtcblx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtb2wuYXRvbXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRtb2wuYXRvbXNbal0uYWRkKGNlbnRlcik7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLnNoYXBlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgc3BzID0gdGhpcy5zaGFwZXNbaV0uZ2V0UG9pbnRzKCk7XG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gc3BzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0c3BzW2pdLmFkZChjZW50ZXIpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLnNwZWNzLnNjYWxlID0gMTtcblx0XHR2YXIgZGlmWCA9IGJvdW5kcy5tYXhYIC0gYm91bmRzLm1pblg7XG5cdFx0dmFyIGRpZlkgPSBib3VuZHMubWF4WSAtIGJvdW5kcy5taW5ZO1xuXHRcdGlmIChkaWZYID4gdGhpcy53aWR0aC0yMCB8fCBkaWZZID4gdGhpcy5oZWlnaHQtMjApIHtcblx0XHRcdHRoaXMuc3BlY3Muc2NhbGUgPSBtLm1pbih0aGlzLndpZHRoIC8gZGlmWCwgdGhpcy5oZWlnaHQgLyBkaWZZKSAqIC44NTtcblx0XHR9XG5cdH07XG5cdF8uYm9uZEV4aXN0cyA9IGZ1bmN0aW9uKGExLCBhMikge1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLm1vbGVjdWxlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgbW9sID0gdGhpcy5tb2xlY3VsZXNbaV07XG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gbW9sLmJvbmRzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0dmFyIGIgPSBtb2wuYm9uZHNbal07XG5cdFx0XHRcdGlmIChiLmNvbnRhaW5zKGExKSAmJiBiLmNvbnRhaW5zKGEyKSkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcblx0Xy5nZXRCb25kID0gZnVuY3Rpb24oYTEsIGEyKSB7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMubW9sZWN1bGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBtb2wgPSB0aGlzLm1vbGVjdWxlc1tpXTtcblx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtb2wuYm9uZHMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHR2YXIgYiA9IG1vbC5ib25kc1tqXTtcblx0XHRcdFx0aWYgKGIuY29udGFpbnMoYTEpICYmIGIuY29udGFpbnMoYTIpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fTtcblx0Xy5nZXRNb2xlY3VsZUJ5QXRvbSA9IGZ1bmN0aW9uKGEpIHtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5tb2xlY3VsZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIG1vbCA9IHRoaXMubW9sZWN1bGVzW2ldO1xuXHRcdFx0aWYgKG1vbC5hdG9tcy5pbmRleE9mKGEpICE9PSAtMSkge1xuXHRcdFx0XHRyZXR1cm4gbW9sO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9O1xuXHRfLmdldEFsbEF0b21zID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGFzID0gW107XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMubW9sZWN1bGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdGFzID0gYXMuY29uY2F0KHRoaXMubW9sZWN1bGVzW2ldLmF0b21zKTtcblx0XHR9XG5cdFx0cmV0dXJuIGFzO1xuXHR9O1xuXHRfLmdldEFsbEJvbmRzID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGJzID0gW107XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMubW9sZWN1bGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdGJzID0gYnMuY29uY2F0KHRoaXMubW9sZWN1bGVzW2ldLmJvbmRzKTtcblx0XHR9XG5cdFx0cmV0dXJuIGJzO1xuXHR9O1xuXHRfLmdldEFsbFBvaW50cyA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwcyA9IFtdO1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLm1vbGVjdWxlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRwcyA9IHBzLmNvbmNhdCh0aGlzLm1vbGVjdWxlc1tpXS5hdG9tcyk7XG5cdFx0fVxuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLnNoYXBlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRwcyA9IHBzLmNvbmNhdCh0aGlzLnNoYXBlc1tpXS5nZXRQb2ludHMoKSk7XG5cdFx0fVxuXHRcdHJldHVybiBwcztcblx0fTtcblx0Xy5nZXRDb250ZW50Qm91bmRzID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGJvdW5kcyA9IG5ldyBtYXRoLkJvdW5kcygpO1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLm1vbGVjdWxlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRib3VuZHMuZXhwYW5kKHRoaXMubW9sZWN1bGVzW2ldLmdldEJvdW5kcygpKTtcblx0XHR9XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuc2hhcGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdGJvdW5kcy5leHBhbmQodGhpcy5zaGFwZXNbaV0uZ2V0Qm91bmRzKCkpO1xuXHRcdH1cblx0XHRyZXR1cm4gYm91bmRzO1xuXHR9O1xuXHRfLmNyZWF0ZSA9IGZ1bmN0aW9uKGlkLCB3aWR0aCwgaGVpZ2h0KSB7XG5cdFx0dGhpcy5pZCA9IGlkO1xuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblx0XHR0aGlzLm1vbGVjdWxlcyA9IFtdO1xuXHRcdHRoaXMuc2hhcGVzID0gW107XG5cdFx0aWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSkge1xuXHRcdFx0dmFyIGNhbnZhcyA9IHEoJyMnICsgaWQpO1xuXHRcdFx0aWYgKCF3aWR0aCkge1xuXHRcdFx0XHR0aGlzLndpZHRoID0gY2FudmFzLmF0dHIoJ3dpZHRoJyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjYW52YXMuYXR0cignd2lkdGgnLCB3aWR0aCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWhlaWdodCkge1xuXHRcdFx0XHR0aGlzLmhlaWdodCA9IGNhbnZhcy5hdHRyKCdoZWlnaHQnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNhbnZhcy5hdHRyKCdoZWlnaHQnLCBoZWlnaHQpO1xuXHRcdFx0fVxuXHRcdFx0Ly8gSWYgdGhlIGNhbnZhcyBpcyBwcmUtY3JlYXRlZCwgbWFrZSBzdXJlIHRoYXQgdGhlIGNsYXNzIGF0dHJpYnV0ZVxuXHRcdFx0Ly8gaXMgc3BlY2lmaWVkLlxuXHRcdFx0Y2FudmFzLmF0dHIoJ2NsYXNzJywgJ0NoZW1Eb29kbGVXZWJDb21wb25lbnQnKTtcblx0XHR9IGVsc2UgaWYgKCFjLmZlYXR1cmVEZXRlY3Rpb24uc3VwcG9ydHNfY2FudmFzX3RleHQoKSAmJiB1c2VyQWdlbnQuaW5kZXhPZihcIk1TSUVcIikgIT0gLTEpIHtcblx0XHRcdC8vIEluc3RhbGwgR29vZ2xlIENocm9tZSBGcmFtZVxuXHRcdFx0ZG9jdW1lbnQud3JpdGVsbignPGRpdiBzdHlsZT1cImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1wiIHdpZHRoPVwiJyArIHdpZHRoICsgJ1wiIGhlaWdodD1cIicgKyBoZWlnaHQgKyAnXCI+UGxlYXNlIGluc3RhbGwgPGEgaHJlZj1cImh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vY2hyb21lL2Nocm9tZWZyYW1lL1wiPkdvb2dsZSBDaHJvbWUgRnJhbWU8L2E+LCB0aGVuIHJlc3RhcnQgSW50ZXJuZXQgRXhwbG9yZXIuPC9kaXY+Jyk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRvY3VtZW50LndyaXRlbG4oJzxjYW52YXMgY2xhc3M9XCJDaGVtRG9vZGxlV2ViQ29tcG9uZW50XCIgaWQ9XCInICsgaWQgKyAnXCIgd2lkdGg9XCInICsgd2lkdGggKyAnXCIgaGVpZ2h0PVwiJyArIGhlaWdodCArICdcIiBhbHQ9XCJDaGVtRG9vZGxlIFdlYiBDb21wb25lbnRcIj5UaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBIVE1MNS9DYW52YXMuPC9jYW52YXM+Jyk7XG5cdFx0fVxuXHRcdHZhciBqcUNhcHN1bGUgPSBxKCcjJyArIGlkKTtcblx0XHRqcUNhcHN1bGUuY3NzKCd3aWR0aCcsIHRoaXMud2lkdGgpO1xuXHRcdGpxQ2Fwc3VsZS5jc3MoJ2hlaWdodCcsIHRoaXMuaGVpZ2h0KTtcblx0XHR0aGlzLnBpeGVsUmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA/IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIDogMTtcblx0XHR0aGlzLnNwZWNzID0gbmV3IHN0cnVjdHVyZXMuVmlzdWFsU3BlY2lmaWNhdGlvbnMoKTtcblx0XHQvLyBzZXR1cCBpbnB1dCBldmVudHNcblx0XHQvLyBtYWtlIHN1cmUgcHJlaGFuZGxlIGV2ZW50cyBhcmUgb25seSBpbiBpZiBzdGF0ZW1lbnRzIGlmIGhhbmRsZWQsIHNvXG5cdFx0Ly8gYXMgbm90IHRvIGJsb2NrIGJyb3dzZXIgZXZlbnRzXG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRpZiAoZmVhdHVyZURldGVjdGlvbi5zdXBwb3J0c190b3VjaCgpKSB7XG5cdFx0XHQvLyBmb3IgaVBob25lIE9TIGFuZCBBbmRyb2lkIGRldmljZXMgKGFuZCBvdGhlciBtb2JpbGUgYnJvd3NlcnMgdGhhdFxuXHRcdFx0Ly8gc3VwcG9ydCBtb2JpbGUgZXZlbnRzKVxuXHRcdFx0anFDYXBzdWxlLmJpbmQoJ3RvdWNoc3RhcnQnLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdHZhciB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cdFx0XHRcdGlmICghZmVhdHVyZURldGVjdGlvbi5zdXBwb3J0c19nZXN0dXJlKCkgJiYgZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXMubGVuZ3RoID09PSAyKSB7XG5cdFx0XHRcdFx0Ly8gb24gc29tZSBwbGF0Zm9ybXMsIGxpa2UgQW5kcm9pZCwgdGhlcmUgaXMgbm8gZ2VzdHVyZVxuXHRcdFx0XHRcdC8vIHN1cHBvcnQsIHNvIHdlIGhhdmUgdG8gaW1wbGVtZW50IGl0XG5cdFx0XHRcdFx0dmFyIHRzID0gZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXM7XG5cdFx0XHRcdFx0dmFyIHAxID0gbmV3IHN0cnVjdHVyZXMuUG9pbnQodHNbMF0ucGFnZVgsIHRzWzBdLnBhZ2VZKTtcblx0XHRcdFx0XHR2YXIgcDIgPSBuZXcgc3RydWN0dXJlcy5Qb2ludCh0c1sxXS5wYWdlWCwgdHNbMV0ucGFnZVkpO1xuXHRcdFx0XHRcdG1lLmltcGxlbWVudGVkR2VzdHVyZURpc3QgPSBwMS5kaXN0YW5jZShwMik7XG5cdFx0XHRcdFx0bWUuaW1wbGVtZW50ZWRHZXN0dXJlQW5nbGUgPSBwMS5hbmdsZShwMik7XG5cdFx0XHRcdFx0aWYgKG1lLmdlc3R1cmVzdGFydCkge1xuXHRcdFx0XHRcdFx0bWUucHJlaGFuZGxlRXZlbnQoZSk7XG5cdFx0XHRcdFx0XHRtZS5nZXN0dXJlc3RhcnQoZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChtZS5sYXN0VG91Y2ggJiYgZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXMubGVuZ3RoID09PSAxICYmICh0aW1lIC0gbWUubGFzdFRvdWNoKSA8IDUwMCkge1xuXHRcdFx0XHRcdGlmIChtZS5kYmx0YXApIHtcblx0XHRcdFx0XHRcdG1lLnByZWhhbmRsZUV2ZW50KGUpO1xuXHRcdFx0XHRcdFx0bWUuZGJsdGFwKGUpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAobWUuZGJsY2xpY2spIHtcblx0XHRcdFx0XHRcdG1lLnByZWhhbmRsZUV2ZW50KGUpO1xuXHRcdFx0XHRcdFx0bWUuZGJsY2xpY2soZSk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChtZS50b3VjaHN0YXJ0KSB7XG5cdFx0XHRcdFx0XHRtZS5wcmVoYW5kbGVFdmVudChlKTtcblx0XHRcdFx0XHRcdG1lLnRvdWNoc3RhcnQoZSk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChtZS5tb3VzZWRvd24pIHtcblx0XHRcdFx0XHRcdG1lLnByZWhhbmRsZUV2ZW50KGUpO1xuXHRcdFx0XHRcdFx0bWUubW91c2Vkb3duKGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmIChtZS50b3VjaHN0YXJ0KSB7XG5cdFx0XHRcdFx0bWUucHJlaGFuZGxlRXZlbnQoZSk7XG5cdFx0XHRcdFx0bWUudG91Y2hzdGFydChlKTtcblx0XHRcdFx0XHRpZiAodGhpcy5ob2xkKSB7XG5cdFx0XHRcdFx0XHRjbGVhclRpbWVvdXQodGhpcy5ob2xkKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHRoaXMudG91Y2hob2xkKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmhvbGQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRtZS50b3VjaGhvbGQoZSk7XG5cdFx0XHRcdFx0XHR9LCAxMDAwKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAobWUubW91c2Vkb3duKSB7XG5cdFx0XHRcdFx0bWUucHJlaGFuZGxlRXZlbnQoZSk7XG5cdFx0XHRcdFx0bWUubW91c2Vkb3duKGUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG1lLmxhc3RUb3VjaCA9IHRpbWU7XG5cdFx0XHR9KTtcblx0XHRcdGpxQ2Fwc3VsZS5iaW5kKCd0b3VjaG1vdmUnLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmICh0aGlzLmhvbGQpIHtcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQodGhpcy5ob2xkKTtcblx0XHRcdFx0XHR0aGlzLmhvbGQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFmZWF0dXJlRGV0ZWN0aW9uLnN1cHBvcnRzX2dlc3R1cmUoKSAmJiBlLm9yaWdpbmFsRXZlbnQudG91Y2hlcy5sZW5ndGggPT09IDIpIHtcblx0XHRcdFx0XHQvLyBvbiBzb21lIHBsYXRmb3JtcywgbGlrZSBBbmRyb2lkLCB0aGVyZSBpcyBubyBnZXN0dXJlXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydCwgc28gd2UgaGF2ZSB0byBpbXBsZW1lbnQgaXRcblx0XHRcdFx0XHRpZiAobWUuZ2VzdHVyZWNoYW5nZSkge1xuXHRcdFx0XHRcdFx0dmFyIHRzID0gZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXM7XG5cdFx0XHRcdFx0XHR2YXIgcDEgPSBuZXcgc3RydWN0dXJlcy5Qb2ludCh0c1swXS5wYWdlWCwgdHNbMF0ucGFnZVkpO1xuXHRcdFx0XHRcdFx0dmFyIHAyID0gbmV3IHN0cnVjdHVyZXMuUG9pbnQodHNbMV0ucGFnZVgsIHRzWzFdLnBhZ2VZKTtcblx0XHRcdFx0XHRcdHZhciBuZXdEaXN0ID0gcDEuZGlzdGFuY2UocDIpO1xuXHRcdFx0XHRcdFx0dmFyIG5ld0FuZ2xlID0gcDEuYW5nbGUocDIpO1xuXHRcdFx0XHRcdFx0ZS5vcmlnaW5hbEV2ZW50LnNjYWxlID0gbmV3RGlzdCAvIG1lLmltcGxlbWVudGVkR2VzdHVyZURpc3Q7XG5cdFx0XHRcdFx0XHRlLm9yaWdpbmFsRXZlbnQucm90YXRpb24gPSAxODAgKiAobWUuaW1wbGVtZW50ZWRHZXN0dXJlQW5nbGUgLSBuZXdBbmdsZSkgLyBtLlBJO1xuXHRcdFx0XHRcdFx0bWUucHJlaGFuZGxlRXZlbnQoZSk7XG5cdFx0XHRcdFx0XHRtZS5nZXN0dXJlY2hhbmdlKGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXMubGVuZ3RoID4gMSAmJiBtZS5tdWx0aXRvdWNobW92ZSkge1xuXHRcdFx0XHRcdHZhciBudW1GaW5nZXJzID0gZS5vcmlnaW5hbEV2ZW50LnRvdWNoZXMubGVuZ3RoO1xuXHRcdFx0XHRcdG1lLnByZWhhbmRsZUV2ZW50KGUpO1xuXHRcdFx0XHRcdHZhciBjZW50ZXIgPSBuZXcgc3RydWN0dXJlcy5Qb2ludCgtZS5vZmZzZXQubGVmdCAqIG51bUZpbmdlcnMsIC1lLm9mZnNldC50b3AgKiBudW1GaW5nZXJzKTtcblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBudW1GaW5nZXJzOyBpKyspIHtcblx0XHRcdFx0XHRcdGNlbnRlci54ICs9IGUub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1tpXS5wYWdlWDtcblx0XHRcdFx0XHRcdGNlbnRlci55ICs9IGUub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1tpXS5wYWdlWTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y2VudGVyLnggLz0gbnVtRmluZ2Vycztcblx0XHRcdFx0XHRjZW50ZXIueSAvPSBudW1GaW5nZXJzO1xuXHRcdFx0XHRcdGUucCA9IGNlbnRlcjtcblx0XHRcdFx0XHRtZS5tdWx0aXRvdWNobW92ZShlLCBudW1GaW5nZXJzKTtcblx0XHRcdFx0fSBlbHNlIGlmIChtZS50b3VjaG1vdmUpIHtcblx0XHRcdFx0XHRtZS5wcmVoYW5kbGVFdmVudChlKTtcblx0XHRcdFx0XHRtZS50b3VjaG1vdmUoZSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAobWUuZHJhZykge1xuXHRcdFx0XHRcdG1lLnByZWhhbmRsZUV2ZW50KGUpO1xuXHRcdFx0XHRcdG1lLmRyYWcoZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0anFDYXBzdWxlLmJpbmQoJ3RvdWNoZW5kJywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAodGhpcy5ob2xkKSB7XG5cdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRoaXMuaG9sZCk7XG5cdFx0XHRcdFx0dGhpcy5ob2xkID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghZmVhdHVyZURldGVjdGlvbi5zdXBwb3J0c19nZXN0dXJlKCkgJiYgbWUuaW1wbGVtZW50ZWRHZXN0dXJlRGlzdCkge1xuXHRcdFx0XHRcdC8vIG9uIHNvbWUgcGxhdGZvcm1zLCBsaWtlIEFuZHJvaWQsIHRoZXJlIGlzIG5vIGdlc3R1cmVcblx0XHRcdFx0XHQvLyBzdXBwb3J0LCBzbyB3ZSBoYXZlIHRvIGltcGxlbWVudCBpdFxuXHRcdFx0XHRcdG1lLmltcGxlbWVudGVkR2VzdHVyZURpc3QgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0bWUuaW1wbGVtZW50ZWRHZXN0dXJlQW5nbGUgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0aWYgKG1lLmdlc3R1cmVlbmQpIHtcblx0XHRcdFx0XHRcdG1lLnByZWhhbmRsZUV2ZW50KGUpO1xuXHRcdFx0XHRcdFx0bWUuZ2VzdHVyZWVuZChlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG1lLnRvdWNoZW5kKSB7XG5cdFx0XHRcdFx0bWUucHJlaGFuZGxlRXZlbnQoZSk7XG5cdFx0XHRcdFx0bWUudG91Y2hlbmQoZSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAobWUubW91c2V1cCkge1xuXHRcdFx0XHRcdG1lLnByZWhhbmRsZUV2ZW50KGUpO1xuXHRcdFx0XHRcdG1lLm1vdXNldXAoZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIG1lLmxhc3RUb3VjaCkgPCAyNTApIHtcblx0XHRcdFx0XHRpZiAobWUudGFwKSB7XG5cdFx0XHRcdFx0XHRtZS5wcmVoYW5kbGVFdmVudChlKTtcblx0XHRcdFx0XHRcdG1lLnRhcChlKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKG1lLmNsaWNrKSB7XG5cdFx0XHRcdFx0XHRtZS5wcmVoYW5kbGVFdmVudChlKTtcblx0XHRcdFx0XHRcdG1lLmNsaWNrKGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRqcUNhcHN1bGUuYmluZCgnZ2VzdHVyZXN0YXJ0JywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAobWUuZ2VzdHVyZXN0YXJ0KSB7XG5cdFx0XHRcdFx0bWUucHJlaGFuZGxlRXZlbnQoZSk7XG5cdFx0XHRcdFx0bWUuZ2VzdHVyZXN0YXJ0KGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdGpxQ2Fwc3VsZS5iaW5kKCdnZXN0dXJlY2hhbmdlJywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRpZiAobWUuZ2VzdHVyZWNoYW5nZSkge1xuXHRcdFx0XHRcdG1lLnByZWhhbmRsZUV2ZW50KGUpO1xuXHRcdFx0XHRcdG1lLmdlc3R1cmVjaGFuZ2UoZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0anFDYXBzdWxlLmJpbmQoJ2dlc3R1cmVlbmQnLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChtZS5nZXN0dXJlZW5kKSB7XG5cdFx0XHRcdFx0bWUucHJlaGFuZGxlRXZlbnQoZSk7XG5cdFx0XHRcdFx0bWUuZ2VzdHVyZWVuZChlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIG5vcm1hbCBldmVudHNcblx0XHRcdC8vIHNvbWUgbW9iaWxlIGJyb3dzZXJzIHdpbGwgc2ltdWxhdGUgbW91c2UgZXZlbnRzLCBzbyBkbyBub3Qgc2V0XG5cdFx0XHQvLyB0aGVzZVxuXHRcdFx0Ly8gZXZlbnRzIGlmIG1vYmlsZSwgb3IgaXQgd2lsbCBpbnRlcmZlcmUgd2l0aCB0aGUgaGFuZGxpbmcgb2YgdG91Y2hcblx0XHRcdC8vIGV2ZW50c1xuXHRcdFx0anFDYXBzdWxlLmNsaWNrKGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0c3dpdGNoIChlLndoaWNoKSB7XG5cdFx0XHRcdGNhc2UgMTpcblx0XHRcdFx0XHQvLyBsZWZ0IG1vdXNlIGJ1dHRvbiBwcmVzc2VkXG5cdFx0XHRcdFx0aWYgKG1lLmNsaWNrKSB7XG5cdFx0XHRcdFx0XHRtZS5wcmVoYW5kbGVFdmVudChlKTtcblx0XHRcdFx0XHRcdG1lLmNsaWNrKGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdC8vIG1pZGRsZSBtb3VzZSBidXR0b24gcHJlc3NlZFxuXHRcdFx0XHRcdGlmIChtZS5taWRkbGVjbGljaykge1xuXHRcdFx0XHRcdFx0bWUucHJlaGFuZGxlRXZlbnQoZSk7XG5cdFx0XHRcdFx0XHRtZS5taWRkbGVjbGljayhlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHQvLyByaWdodCBtb3VzZSBidXR0b24gcHJlc3NlZFxuXHRcdFx0XHRcdGlmIChtZS5yaWdodGNsaWNrKSB7XG5cdFx0XHRcdFx0XHRtZS5wcmVoYW5kbGVFdmVudChlKTtcblx0XHRcdFx0XHRcdG1lLnJpZ2h0Y2xpY2soZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdGpxQ2Fwc3VsZS5kYmxjbGljayhmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmIChtZS5kYmxjbGljaykge1xuXHRcdFx0XHRcdG1lLnByZWhhbmRsZUV2ZW50KGUpO1xuXHRcdFx0XHRcdG1lLmRibGNsaWNrKGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdGpxQ2Fwc3VsZS5tb3VzZWRvd24oZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRzd2l0Y2ggKGUud2hpY2gpIHtcblx0XHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRcdC8vIGxlZnQgbW91c2UgYnV0dG9uIHByZXNzZWRcblx0XHRcdFx0XHRtb25pdG9yLkNBTlZBU19EUkFHR0lORyA9IG1lO1xuXHRcdFx0XHRcdGlmIChtZS5tb3VzZWRvd24pIHtcblx0XHRcdFx0XHRcdG1lLnByZWhhbmRsZUV2ZW50KGUpO1xuXHRcdFx0XHRcdFx0bWUubW91c2Vkb3duKGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAyOlxuXHRcdFx0XHRcdC8vIG1pZGRsZSBtb3VzZSBidXR0b24gcHJlc3NlZFxuXHRcdFx0XHRcdGlmIChtZS5taWRkbGVtb3VzZWRvd24pIHtcblx0XHRcdFx0XHRcdG1lLnByZWhhbmRsZUV2ZW50KGUpO1xuXHRcdFx0XHRcdFx0bWUubWlkZGxlbW91c2Vkb3duKGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAzOlxuXHRcdFx0XHRcdC8vIHJpZ2h0IG1vdXNlIGJ1dHRvbiBwcmVzc2VkXG5cdFx0XHRcdFx0aWYgKG1lLnJpZ2h0bW91c2Vkb3duKSB7XG5cdFx0XHRcdFx0XHRtZS5wcmVoYW5kbGVFdmVudChlKTtcblx0XHRcdFx0XHRcdG1lLnJpZ2h0bW91c2Vkb3duKGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRqcUNhcHN1bGUubW91c2Vtb3ZlKGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0aWYgKCFtb25pdG9yLkNBTlZBU19EUkFHR0lORyAmJiBtZS5tb3VzZW1vdmUpIHtcblx0XHRcdFx0XHRtZS5wcmVoYW5kbGVFdmVudChlKTtcblx0XHRcdFx0XHRtZS5tb3VzZW1vdmUoZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0anFDYXBzdWxlLm1vdXNlb3V0KGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0bW9uaXRvci5DQU5WQVNfT1ZFUiA9IHVuZGVmaW5lZDtcblx0XHRcdFx0aWYgKG1lLm1vdXNlb3V0KSB7XG5cdFx0XHRcdFx0bWUucHJlaGFuZGxlRXZlbnQoZSk7XG5cdFx0XHRcdFx0bWUubW91c2VvdXQoZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0anFDYXBzdWxlLm1vdXNlb3ZlcihmdW5jdGlvbihlKSB7XG5cdFx0XHRcdG1vbml0b3IuQ0FOVkFTX09WRVIgPSBtZTtcblx0XHRcdFx0aWYgKG1lLm1vdXNlb3Zlcikge1xuXHRcdFx0XHRcdG1lLnByZWhhbmRsZUV2ZW50KGUpO1xuXHRcdFx0XHRcdG1lLm1vdXNlb3ZlcihlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRqcUNhcHN1bGUubW91c2V1cChmdW5jdGlvbihlKSB7XG5cdFx0XHRcdHN3aXRjaCAoZS53aGljaCkge1xuXHRcdFx0XHRjYXNlIDE6XG5cdFx0XHRcdFx0Ly8gbGVmdCBtb3VzZSBidXR0b24gcHJlc3NlZFxuXHRcdFx0XHRcdGlmIChtZS5tb3VzZXVwKSB7XG5cdFx0XHRcdFx0XHRtZS5wcmVoYW5kbGVFdmVudChlKTtcblx0XHRcdFx0XHRcdG1lLm1vdXNldXAoZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIDI6XG5cdFx0XHRcdFx0Ly8gbWlkZGxlIG1vdXNlIGJ1dHRvbiBwcmVzc2VkXG5cdFx0XHRcdFx0aWYgKG1lLm1pZGRsZW1vdXNldXApIHtcblx0XHRcdFx0XHRcdG1lLnByZWhhbmRsZUV2ZW50KGUpO1xuXHRcdFx0XHRcdFx0bWUubWlkZGxlbW91c2V1cChlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHQvLyByaWdodCBtb3VzZSBidXR0b24gcHJlc3NlZFxuXHRcdFx0XHRcdGlmIChtZS5yaWdodG1vdXNldXApIHtcblx0XHRcdFx0XHRcdG1lLnByZWhhbmRsZUV2ZW50KGUpO1xuXHRcdFx0XHRcdFx0bWUucmlnaHRtb3VzZXVwKGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRqcUNhcHN1bGUubW91c2V3aGVlbChmdW5jdGlvbihlLCBkZWx0YSkge1xuXHRcdFx0XHRpZiAobWUubW91c2V3aGVlbCkge1xuXHRcdFx0XHRcdG1lLnByZWhhbmRsZUV2ZW50KGUpO1xuXHRcdFx0XHRcdG1lLm1vdXNld2hlZWwoZSwgZGVsdGEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuc3ViQ3JlYXRlKSB7XG5cdFx0XHR0aGlzLnN1YkNyZWF0ZSgpO1xuXHRcdH1cblx0fTtcblx0Xy5wcmVoYW5kbGVFdmVudCA9IGZ1bmN0aW9uKGUpIHtcblx0XHRpZiAoZS5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzKSB7XG5cdFx0XHRlLnBhZ2VYID0gZS5vcmlnaW5hbEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYO1xuXHRcdFx0ZS5wYWdlWSA9IGUub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWTtcblx0XHR9XG5cdFx0aWYoIXRoaXMuZG9FdmVudERlZmF1bHQpe1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0ZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuXHRcdH1cblx0XHRlLm9mZnNldCA9IHEoJyMnICsgdGhpcy5pZCkub2Zmc2V0KCk7XG5cdFx0ZS5wID0gbmV3IHN0cnVjdHVyZXMuUG9pbnQoZS5wYWdlWCAtIGUub2Zmc2V0LmxlZnQsIGUucGFnZVkgLSBlLm9mZnNldC50b3ApO1xuXHR9O1xuXHRcbn0pKENoZW1Eb29kbGUsIENoZW1Eb29kbGUuZmVhdHVyZURldGVjdGlvbiwgQ2hlbURvb2RsZS5tYXRoLCBDaGVtRG9vZGxlLm1vbml0b3IsIENoZW1Eb29kbGUuc3RydWN0dXJlcywgQ2hlbURvb2RsZS5saWIualF1ZXJ5LCBNYXRoLCBkb2N1bWVudCwgd2luZG93LCBuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuKGZ1bmN0aW9uKGMsIGFuaW1hdGlvbnMsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGMuX0FuaW1hdG9yQ2FudmFzID0gZnVuY3Rpb24oaWQsIHdpZHRoLCBoZWlnaHQpIHtcblx0XHRpZiAoaWQpIHtcblx0XHRcdHRoaXMuY3JlYXRlKGlkLCB3aWR0aCwgaGVpZ2h0KTtcblx0XHR9XG5cdH07XG5cdHZhciBfID0gYy5fQW5pbWF0b3JDYW52YXMucHJvdG90eXBlID0gbmV3IGMuX0NhbnZhcygpO1xuXHRfLnRpbWVvdXQgPSAzMztcblx0Xy5zdGFydEFuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuc3RvcEFuaW1hdGlvbigpO1xuXHRcdHRoaXMubGFzdFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdGlmICh0aGlzLm5leHRGcmFtZSkge1xuXHRcdFx0dGhpcy5oYW5kbGUgPSBhbmltYXRpb25zLnJlcXVlc3RJbnRlcnZhbChmdW5jdGlvbigpIHtcblx0XHRcdFx0Ly8gYWR2YW5jZSBjbG9ja1xuXHRcdFx0XHR2YXIgdGltZU5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHRcdFx0XHQvLyB1cGRhdGUgYW5kIHJlcGFpbnRcblx0XHRcdFx0bWUubmV4dEZyYW1lKHRpbWVOb3cgLSBtZS5sYXN0VGltZSk7XG5cdFx0XHRcdG1lLnJlcGFpbnQoKTtcblx0XHRcdFx0bWUubGFzdFRpbWUgPSB0aW1lTm93O1xuXHRcdFx0fSwgdGhpcy50aW1lb3V0KTtcblx0XHR9XG5cdH07XG5cdF8uc3RvcEFuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICh0aGlzLmhhbmRsZSkge1xuXHRcdFx0YW5pbWF0aW9ucy5jbGVhclJlcXVlc3RJbnRlcnZhbCh0aGlzLmhhbmRsZSk7XG5cdFx0XHR0aGlzLmhhbmRsZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH07XG5cdF8uaXNSdW5uaW5nID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8gbXVzdCBjb21wYXJlIHRvIHVuZGVmaW5lZCBoZXJlIHRvIHJldHVybiBhIGJvb2xlYW5cblx0XHRyZXR1cm4gdGhpcy5oYW5kbGUgIT09IHVuZGVmaW5lZDtcblx0fTtcblxufSkoQ2hlbURvb2RsZSwgQ2hlbURvb2RsZS5hbmltYXRpb25zKTtcblxuKGZ1bmN0aW9uKGMsIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRjLkZpbGVDYW52YXMgPSBmdW5jdGlvbihpZCwgd2lkdGgsIGhlaWdodCwgYWN0aW9uKSB7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHR0aGlzLmNyZWF0ZShpZCwgd2lkdGgsIGhlaWdodCk7XG5cdFx0fVxuXHRcdHZhciBmb3JtID0gJzxicj48Zm9ybSBuYW1lPVwiRmlsZUZvcm1cIiBlbmN0eXBlPVwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiIG1ldGhvZD1cIlBPU1RcIiBhY3Rpb249XCInICsgYWN0aW9uICsgJ1wiIHRhcmdldD1cIkhpZGRlbkZpbGVGcmFtZVwiPjxpbnB1dCB0eXBlPVwiZmlsZVwiIG5hbWU9XCJmXCIgLz48aW5wdXQgdHlwZT1cInN1Ym1pdFwiIG5hbWU9XCJzdWJtaXRidXR0b25cIiB2YWx1ZT1cIlNob3cgRmlsZVwiIC8+PC9mb3JtPjxpZnJhbWUgaWQ9XCJIRkYtJyArIGlkICsgJ1wiIG5hbWU9XCJIaWRkZW5GaWxlRnJhbWVcIiBoZWlnaHQ9XCIwXCIgd2lkdGg9XCIwXCIgc3R5bGU9XCJkaXNwbGF5Om5vbmU7XCIgb25Mb2FkPVwiR2V0TW9sRnJvbUZyYW1lKFxcJ0hGRi0nICsgaWQgKyAnXFwnLCAnICsgaWQgKyAnKVwiPjwvaWZyYW1lPic7XG5cdFx0ZG9jdW1lbnQud3JpdGVsbihmb3JtKTtcblx0XHR0aGlzLmVtcHR5TWVzc2FnZSA9ICdDbGljayBiZWxvdyB0byBsb2FkIGZpbGUnO1xuXHRcdHRoaXMucmVwYWludCgpO1xuXHR9O1xuXHRjLkZpbGVDYW52YXMucHJvdG90eXBlID0gbmV3IGMuX0NhbnZhcygpO1xuXG59KShDaGVtRG9vZGxlLCBkb2N1bWVudCk7XG5cbihmdW5jdGlvbihjLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRjLkh5cGVybGlua0NhbnZhcyA9IGZ1bmN0aW9uKGlkLCB3aWR0aCwgaGVpZ2h0LCB1cmxPckZ1bmN0aW9uLCBjb2xvciwgc2l6ZSkge1xuXHRcdGlmIChpZCkge1xuXHRcdFx0dGhpcy5jcmVhdGUoaWQsIHdpZHRoLCBoZWlnaHQpO1xuXHRcdH1cblx0XHR0aGlzLnVybE9yRnVuY3Rpb24gPSB1cmxPckZ1bmN0aW9uO1xuXHRcdHRoaXMuY29sb3IgPSBjb2xvciA/IGNvbG9yIDogJ2JsdWUnO1xuXHRcdHRoaXMuc2l6ZSA9IHNpemUgPyBzaXplIDogMjtcblx0fTtcblx0dmFyIF8gPSBjLkh5cGVybGlua0NhbnZhcy5wcm90b3R5cGUgPSBuZXcgYy5fQ2FudmFzKCk7XG5cdF8ub3BlbkluTmV3V2luZG93ID0gdHJ1ZTtcblx0Xy5ob3ZlckltYWdlID0gdW5kZWZpbmVkO1xuXHRfLmRyYXdDaGlsZEV4dHJhcyA9IGZ1bmN0aW9uKGN0eCkge1xuXHRcdGlmICh0aGlzLmUpIHtcblx0XHRcdGlmICh0aGlzLmhvdmVySW1hZ2UpIHtcblx0XHRcdFx0Y3R4LmRyYXdJbWFnZSh0aGlzLmhvdmVySW1hZ2UsIDAsIDApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdGhpcy5jb2xvcjtcblx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMuc2l6ZSAqIDI7XG5cdFx0XHRcdGN0eC5zdHJva2VSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdF8uc2V0SG92ZXJJbWFnZSA9IGZ1bmN0aW9uKHVybCkge1xuXHRcdHRoaXMuaG92ZXJJbWFnZSA9IG5ldyBJbWFnZSgpO1xuXHRcdHRoaXMuaG92ZXJJbWFnZS5zcmMgPSB1cmw7XG5cdH07XG5cdF8uY2xpY2sgPSBmdW5jdGlvbihwKSB7XG5cdFx0dGhpcy5lID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMucmVwYWludCgpO1xuXHRcdGlmICh0aGlzLnVybE9yRnVuY3Rpb24gaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuXHRcdFx0dGhpcy51cmxPckZ1bmN0aW9uKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh0aGlzLm9wZW5Jbk5ld1dpbmRvdykge1xuXHRcdFx0XHR3aW5kb3cub3Blbih0aGlzLnVybE9yRnVuY3Rpb24pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bG9jYXRpb24uaHJlZiA9IHRoaXMudXJsT3JGdW5jdGlvbjtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdF8ubW91c2VvdXQgPSBmdW5jdGlvbihlKSB7XG5cdFx0dGhpcy5lID0gdW5kZWZpbmVkO1xuXHRcdHRoaXMucmVwYWludCgpO1xuXHR9O1xuXHRfLm1vdXNlb3ZlciA9IGZ1bmN0aW9uKGUpIHtcblx0XHR0aGlzLmUgPSBlO1xuXHRcdHRoaXMucmVwYWludCgpO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlKTtcblxuKGZ1bmN0aW9uKGMsIGlDaGVtTGFicywgcSwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGMuTW9sR3JhYmJlckNhbnZhcyA9IGZ1bmN0aW9uKGlkLCB3aWR0aCwgaGVpZ2h0KSB7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHR0aGlzLmNyZWF0ZShpZCwgd2lkdGgsIGhlaWdodCk7XG5cdFx0fVxuXHRcdHZhciBzYiA9IFtdO1xuXHRcdHNiLnB1c2goJzxicj48aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cIicpO1xuXHRcdHNiLnB1c2goaWQpO1xuXHRcdHNiLnB1c2goJ19xdWVyeVwiIHNpemU9XCIzMlwiIHZhbHVlPVwiXCIgLz4nKTtcblx0XHRzYi5wdXNoKHRoaXMuZ2V0SW5wdXRGaWVsZHMoKSk7XG5cblx0XHQvLyBEb24ndCB1c2UgZG9jdW1lbnQud3JpdGVsbiBoZXJlLCBpdCBicmVha3MgdGhlIHdob2xlIHBhZ2UgYWZ0ZXJcblx0XHQvLyBkb2N1bWVudCBpcyBjbG9zZWQuXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuXHRcdHZhciBjYW52YXMgPSBxKCcjJyArIGlkKTtcblx0XHRjYW52YXMuYWZ0ZXIoc2Iuam9pbignJykpO1xuXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdHEoJyMnICsgaWQgKyAnX3N1Ym1pdCcpLmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdFx0c2VsZi5zZWFyY2goKTtcblx0XHR9KTtcblx0XHRxKCcjJyArIGlkICsgJ19xdWVyeScpLmtleXByZXNzKGZ1bmN0aW9uKGUpIHtcblx0XHRcdGlmIChlLndoaWNoID09PSAxMykge1xuXHRcdFx0XHRzZWxmLnNlYXJjaCgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHRoaXMuZW1wdHlNZXNzYWdlID0gJ0VudGVyIHNlYXJjaCB0ZXJtIGJlbG93Jztcblx0XHR0aGlzLnJlcGFpbnQoKTtcblx0fTtcblx0dmFyIF8gPSBjLk1vbEdyYWJiZXJDYW52YXMucHJvdG90eXBlID0gbmV3IGMuX0NhbnZhcygpO1xuXHRfLnNldFNlYXJjaFRlcm0gPSBmdW5jdGlvbih0ZXJtKSB7XG5cdFx0cSgnIycgKyB0aGlzLmlkICsgJ19xdWVyeScpLnZhbCh0ZXJtKTtcblx0XHR0aGlzLnNlYXJjaCgpO1xuXHR9O1xuXHRfLmdldElucHV0RmllbGRzID0gZnVuY3Rpb24oKXtcblx0XHR2YXIgc2IgPSBbXTtcblx0XHRzYi5wdXNoKCc8YnI+PG5vYnI+Jyk7XG5cdFx0c2IucHVzaCgnPHNlbGVjdCBpZD1cIicpO1xuXHRcdHNiLnB1c2godGhpcy5pZCk7XG5cdFx0c2IucHVzaCgnX3NlbGVjdFwiPicpO1xuXHRcdHNiLnB1c2goJzxvcHRpb24gdmFsdWU9XCJjaGVtZXhwZXJcIj5DaGVtRXhwZXInKTtcblx0XHRzYi5wdXNoKCc8b3B0aW9uIHZhbHVlPVwiY2hlbXNwaWRlclwiPkNoZW1TcGlkZXInKTtcblx0XHRzYi5wdXNoKCc8b3B0aW9uIHZhbHVlPVwicHViY2hlbVwiIHNlbGVjdGVkPlB1YkNoZW0nKTtcblx0XHRzYi5wdXNoKCc8L3NlbGVjdD4nKTtcblx0XHRzYi5wdXNoKCc8YnV0dG9uIGlkPVwiJyk7XG5cdFx0c2IucHVzaCh0aGlzLmlkKTtcblx0XHRzYi5wdXNoKCdfc3VibWl0XCI+U2hvdyBNb2xlY3VsZTwvYnV0dG9uPicpO1xuXHRcdHNiLnB1c2goJzwvbm9icj4nKTtcblx0XHRyZXR1cm4gc2Iuam9pbignJyk7XG5cdH07XG5cdF8uc2VhcmNoID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5lbXB0eU1lc3NhZ2UgPSAnU2VhcmNoaW5nLi4uJztcblx0XHR0aGlzLmNsZWFyKCk7XG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdGlDaGVtTGFicy5nZXRNb2xlY3VsZUZyb21EYXRhYmFzZShxKCcjJyArIHRoaXMuaWQgKyAnX3F1ZXJ5JykudmFsKCksIHtcblx0XHRcdGRhdGFiYXNlIDogcSgnIycgKyB0aGlzLmlkICsgJ19zZWxlY3QnKS52YWwoKVxuXHRcdH0sIGZ1bmN0aW9uKG1vbCkge1xuXHRcdFx0c2VsZi5sb2FkTW9sZWN1bGUobW9sKTtcblx0XHR9KTtcblx0fTtcblxufSkoQ2hlbURvb2RsZSwgQ2hlbURvb2RsZS5pQ2hlbUxhYnMsIENoZW1Eb29kbGUubGliLmpRdWVyeSwgZG9jdW1lbnQpO1xuXG4oZnVuY3Rpb24oYywgbSwgbTQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdC8vIGtlZXAgdGhlc2UgZGVjbGFyYXRpb24gb3V0c2lkZSB0aGUgbG9vcCB0byBhdm9pZCBvdmVyaGVhZFxuXHR2YXIgbWF0cml4ID0gW107XG5cdHZhciB4QXhpcyA9IFsgMSwgMCwgMCBdO1xuXHR2YXIgeUF4aXMgPSBbIDAsIDEsIDAgXTtcblx0dmFyIHpBeGlzID0gWyAwLCAwLCAxIF07XG5cblx0Yy5Sb3RhdG9yQ2FudmFzID0gZnVuY3Rpb24oaWQsIHdpZHRoLCBoZWlnaHQsIHJvdGF0ZTNEKSB7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHR0aGlzLmNyZWF0ZShpZCwgd2lkdGgsIGhlaWdodCk7XG5cdFx0fVxuXHRcdHRoaXMucm90YXRlM0QgPSByb3RhdGUzRDtcblx0fTtcblx0dmFyIF8gPSBjLlJvdGF0b3JDYW52YXMucHJvdG90eXBlID0gbmV3IGMuX0FuaW1hdG9yQ2FudmFzKCk7XG5cdHZhciBpbmNyZW1lbnQgPSBtLlBJIC8gMTU7XG5cdF8ueEluY3JlbWVudCA9IGluY3JlbWVudDtcblx0Xy55SW5jcmVtZW50ID0gaW5jcmVtZW50O1xuXHRfLnpJbmNyZW1lbnQgPSBpbmNyZW1lbnQ7XG5cdF8ubmV4dEZyYW1lID0gZnVuY3Rpb24oZGVsdGEpIHtcblx0XHRpZiAodGhpcy5tb2xlY3VsZXMubGVuZ3RoID09PSAwICYmIHRoaXMuc2hhcGVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0dGhpcy5zdG9wQW5pbWF0aW9uKCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHZhciBjaGFuZ2UgPSBkZWx0YSAvIDEwMDA7XG5cdFx0aWYgKHRoaXMucm90YXRlM0QpIHtcblx0XHRcdG00LmlkZW50aXR5KG1hdHJpeCk7XG5cdFx0XHRtNC5yb3RhdGUobWF0cml4LCB0aGlzLnhJbmNyZW1lbnQgKiBjaGFuZ2UsIHhBeGlzKTtcblx0XHRcdG00LnJvdGF0ZShtYXRyaXgsIHRoaXMueUluY3JlbWVudCAqIGNoYW5nZSwgeUF4aXMpO1xuXHRcdFx0bTQucm90YXRlKG1hdHJpeCwgdGhpcy56SW5jcmVtZW50ICogY2hhbmdlLCB6QXhpcyk7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5tb2xlY3VsZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgbSA9IHRoaXMubW9sZWN1bGVzW2ldO1xuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gbS5hdG9tcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIGEgPSBtLmF0b21zW2pdO1xuXHRcdFx0XHRcdHZhciBwID0gWyBhLnggLSB0aGlzLndpZHRoIC8gMiwgYS55IC0gdGhpcy5oZWlnaHQgLyAyLCBhLnogXTtcblx0XHRcdFx0XHRtNC5tdWx0aXBseVZlYzMobWF0cml4LCBwKTtcblx0XHRcdFx0XHRhLnggPSBwWzBdICsgdGhpcy53aWR0aCAvIDI7XG5cdFx0XHRcdFx0YS55ID0gcFsxXSArIHRoaXMuaGVpZ2h0IC8gMjtcblx0XHRcdFx0XHRhLnogPSBwWzJdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtLnJpbmdzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHRtLnJpbmdzW2pdLmNlbnRlciA9IG0ucmluZ3Nbal0uZ2V0Q2VudGVyKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHRoaXMuc3BlY3MuYXRvbXNfZGlzcGxheSAmJiB0aGlzLnNwZWNzLmF0b21zX2NpcmNsZXNfMkQpIHtcblx0XHRcdFx0XHRtLnNvcnRBdG9tc0J5WigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aGlzLnNwZWNzLmJvbmRzX2Rpc3BsYXkgJiYgdGhpcy5zcGVjcy5ib25kc19jbGVhck92ZXJsYXBzXzJEKSB7XG5cdFx0XHRcdFx0bS5zb3J0Qm9uZHNCeVooKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuc2hhcGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIHNwcyA9IHRoaXMuc2hhcGVzW2ldLmdldFBvaW50cygpO1xuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gc3BzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgYSA9IHNwc1tqXTtcblx0XHRcdFx0XHR2YXIgcCA9IFsgYS54IC0gdGhpcy53aWR0aCAvIDIsIGEueSAtIHRoaXMuaGVpZ2h0IC8gMiwgMCBdO1xuXHRcdFx0XHRcdG00Lm11bHRpcGx5VmVjMyhtYXRyaXgsIHApO1xuXHRcdFx0XHRcdGEueCA9IHBbMF0gKyB0aGlzLndpZHRoIC8gMjtcblx0XHRcdFx0XHRhLnkgPSBwWzFdICsgdGhpcy5oZWlnaHQgLyAyO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuc3BlY3Mucm90YXRlQW5nbGUgKz0gdGhpcy56SW5jcmVtZW50ICogY2hhbmdlO1xuXHRcdH1cblx0fTtcblx0Xy5kYmxjbGljayA9IGZ1bmN0aW9uKGUpIHtcblx0XHRpZiAodGhpcy5pc1J1bm5pbmcoKSkge1xuXHRcdFx0dGhpcy5zdG9wQW5pbWF0aW9uKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuc3RhcnRBbmltYXRpb24oKTtcblx0XHR9XG5cdH07XG5cbn0pKENoZW1Eb29kbGUsIE1hdGgsIENoZW1Eb29kbGUubGliLm1hdDQpO1xuXG4oZnVuY3Rpb24oYywgYW5pbWF0aW9ucywgbWF0aCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0Yy5TbGlkZXNob3dDYW52YXMgPSBmdW5jdGlvbihpZCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdGlmIChpZCkge1xuXHRcdFx0dGhpcy5jcmVhdGUoaWQsIHdpZHRoLCBoZWlnaHQpO1xuXHRcdH1cblx0fTtcblx0dmFyIF8gPSBjLlNsaWRlc2hvd0NhbnZhcy5wcm90b3R5cGUgPSBuZXcgYy5fQW5pbWF0b3JDYW52YXMoKTtcblx0Xy5mcmFtZXMgPSBbXTtcblx0Xy5jdXJJbmRleCA9IDA7XG5cdF8udGltZW91dCA9IDUwMDA7XG5cdF8uYWxwaGEgPSAwO1xuXHRfLmlubmVySGFuZGxlID0gdW5kZWZpbmVkO1xuXHRfLnBoYXNlID0gMDtcblx0Xy5kcmF3Q2hpbGRFeHRyYXMgPSBmdW5jdGlvbihjdHgpIHtcblx0XHR2YXIgcmdiID0gbWF0aC5nZXRSR0IodGhpcy5zcGVjcy5iYWNrZ3JvdW5kQ29sb3IsIDI1NSk7XG5cdFx0Y3R4LmZpbGxTdHlsZSA9ICdyZ2JhKCcgKyByZ2JbMF0gKyAnLCAnICsgcmdiWzFdICsgJywgJyArIHJnYlsyXSArICcsICcgKyB0aGlzLmFscGhhICsgJyknO1xuXHRcdGN0eC5maWxsUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cdH07XG5cdF8ubmV4dEZyYW1lID0gZnVuY3Rpb24oZGVsdGEpIHtcblx0XHRpZiAodGhpcy5mcmFtZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHR0aGlzLnN0b3BBbmltYXRpb24oKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0dGhpcy5waGFzZSA9IDA7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY291bnQgPSAxO1xuXHRcdHRoaXMuaW5uZXJIYW5kbGUgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcblx0XHRcdG1lLmFscGhhID0gY291bnQgLyAxNTtcblx0XHRcdG1lLnJlcGFpbnQoKTtcblx0XHRcdGlmIChjb3VudCA9PT0gMTUpIHtcblx0XHRcdFx0bWUuYnJlYWtJbm5lckhhbmRsZSgpO1xuXHRcdFx0fVxuXHRcdFx0Y291bnQrKztcblx0XHR9LCAzMyk7XG5cdH07XG5cdF8uYnJlYWtJbm5lckhhbmRsZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICh0aGlzLmlubmVySGFuZGxlKSB7XG5cdFx0XHRjbGVhckludGVydmFsKHRoaXMuaW5uZXJIYW5kbGUpO1xuXHRcdFx0dGhpcy5pbm5lckhhbmRsZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKHRoaXMucGhhc2UgPT09IDApIHtcblx0XHRcdHRoaXMuY3VySW5kZXgrKztcblx0XHRcdGlmICh0aGlzLmN1ckluZGV4ID4gdGhpcy5mcmFtZXMubGVuZ3RoIC0gMSkge1xuXHRcdFx0XHR0aGlzLmN1ckluZGV4ID0gMDtcblx0XHRcdH1cblx0XHRcdHRoaXMuYWxwaGEgPSAxO1xuXHRcdFx0dmFyIGYgPSB0aGlzLmZyYW1lc1t0aGlzLmN1ckluZGV4XTtcblx0XHRcdHRoaXMubG9hZENvbnRlbnQoZi5tb2xzLCBmLnNoYXBlcyk7XG5cdFx0XHR0aGlzLnBoYXNlID0gMTtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgY291bnQgPSAxO1xuXHRcdFx0dGhpcy5pbm5lckhhbmRsZSA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZS5hbHBoYSA9ICgxNSAtIGNvdW50KSAvIDE1O1xuXHRcdFx0XHRtZS5yZXBhaW50KCk7XG5cdFx0XHRcdGlmIChjb3VudCA9PT0gMTUpIHtcblx0XHRcdFx0XHRtZS5icmVha0lubmVySGFuZGxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y291bnQrKztcblx0XHRcdH0sIDMzKTtcblx0XHR9IGVsc2UgaWYgKHRoaXMucGhhc2UgPT09IDEpIHtcblx0XHRcdHRoaXMuYWxwaGEgPSAwO1xuXHRcdFx0dGhpcy5yZXBhaW50KCk7XG5cdFx0fVxuXHR9O1xuXHRfLmFkZEZyYW1lID0gZnVuY3Rpb24obW9sZWN1bGVzLCBzaGFwZXMpIHtcblx0XHRpZiAodGhpcy5mcmFtZXMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHR0aGlzLmxvYWRDb250ZW50KG1vbGVjdWxlcywgc2hhcGVzKTtcblx0XHR9XG5cdFx0dGhpcy5mcmFtZXMucHVzaCh7XG5cdFx0XHRtb2xzIDogbW9sZWN1bGVzLFxuXHRcdFx0c2hhcGVzIDogc2hhcGVzXG5cdFx0fSk7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUsIENoZW1Eb29kbGUuYW5pbWF0aW9ucywgQ2hlbURvb2RsZS5tYXRoKTtcblxuKGZ1bmN0aW9uKGMsIG1vbml0b3IsIHN0cnVjdHVyZXMsIG0sIG00LCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRjLlRyYW5zZm9ybUNhbnZhcyA9IGZ1bmN0aW9uKGlkLCB3aWR0aCwgaGVpZ2h0LCByb3RhdGUzRCkge1xuXHRcdGlmIChpZCkge1xuXHRcdFx0dGhpcy5jcmVhdGUoaWQsIHdpZHRoLCBoZWlnaHQpO1xuXHRcdH1cblx0XHR0aGlzLnJvdGF0ZTNEID0gcm90YXRlM0Q7XG5cdH07XG5cdHZhciBfID0gYy5UcmFuc2Zvcm1DYW52YXMucHJvdG90eXBlID0gbmV3IGMuX0NhbnZhcygpO1xuXHRfLmxhc3RQb2ludCA9IHVuZGVmaW5lZDtcblx0Xy5yb3RhdGlvbk11bHRNb2QgPSAxLjM7XG5cdF8ubGFzdFBpbmNoU2NhbGUgPSAxO1xuXHRfLmxhc3RHZXN0dXJlUm90YXRlID0gMDtcblx0Xy5tb3VzZWRvd24gPSBmdW5jdGlvbihlKSB7XG5cdFx0dGhpcy5sYXN0UG9pbnQgPSBlLnA7XG5cdH07XG5cdF8uZGJsY2xpY2sgPSBmdW5jdGlvbihlKSB7XG5cdFx0Ly8gY2VudGVyIHN0cnVjdHVyZVxuXHRcdHRoaXMuY2VudGVyKCk7XG5cdFx0dGhpcy5yZXBhaW50KCk7XG5cdH07XG5cdF8uZHJhZyA9IGZ1bmN0aW9uKGUpIHtcblx0XHRpZiAoIXRoaXMubGFzdFBvaW50Lm11bHRpKSB7XG5cdFx0XHRpZiAobW9uaXRvci5BTFQpIHtcblx0XHRcdFx0dmFyIHQgPSBuZXcgc3RydWN0dXJlcy5Qb2ludChlLnAueCwgZS5wLnkpO1xuXHRcdFx0XHR0LnN1Yih0aGlzLmxhc3RQb2ludCk7XG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLm1vbGVjdWxlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdFx0dmFyIG1vbCA9IHRoaXMubW9sZWN1bGVzW2ldO1xuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtb2wuYXRvbXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdFx0bW9sLmF0b21zW2pdLmFkZCh0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9sLmNoZWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuc2hhcGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgc3BzID0gdGhpcy5zaGFwZXNbaV0uZ2V0UG9pbnRzKCk7XG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IHNwcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0XHRzcHNbal0uYWRkKHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmxhc3RQb2ludCA9IGUucDtcblx0XHRcdFx0dGhpcy5yZXBhaW50KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAodGhpcy5yb3RhdGUzRCA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRcdHZhciBkaWFtZXRlciA9IG0ubWF4KHRoaXMud2lkdGggLyA0LCB0aGlzLmhlaWdodCAvIDQpO1xuXHRcdFx0XHRcdHZhciBkaWZ4ID0gZS5wLnggLSB0aGlzLmxhc3RQb2ludC54O1xuXHRcdFx0XHRcdHZhciBkaWZ5ID0gZS5wLnkgLSB0aGlzLmxhc3RQb2ludC55O1xuXHRcdFx0XHRcdHZhciB5SW5jcmVtZW50ID0gZGlmeCAvIGRpYW1ldGVyICogdGhpcy5yb3RhdGlvbk11bHRNb2Q7XG5cdFx0XHRcdFx0dmFyIHhJbmNyZW1lbnQgPSAtZGlmeSAvIGRpYW1ldGVyICogdGhpcy5yb3RhdGlvbk11bHRNb2Q7XG5cdFx0XHRcdFx0dmFyIG1hdHJpeCA9IFtdO1xuXHRcdFx0XHRcdG00LmlkZW50aXR5KG1hdHJpeCk7XG5cdFx0XHRcdFx0bTQucm90YXRlKG1hdHJpeCwgeEluY3JlbWVudCwgWyAxLCAwLCAwIF0pO1xuXHRcdFx0XHRcdG00LnJvdGF0ZShtYXRyaXgsIHlJbmNyZW1lbnQsIFsgMCwgMSwgMCBdKTtcblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5tb2xlY3VsZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRcdFx0dmFyIG1vbCA9IHRoaXMubW9sZWN1bGVzW2ldO1xuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IG1vbC5hdG9tcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBhID0gbW9sLmF0b21zW2pdO1xuXHRcdFx0XHRcdFx0XHR2YXIgcCA9IFsgYS54IC0gdGhpcy53aWR0aCAvIDIsIGEueSAtIHRoaXMuaGVpZ2h0IC8gMiwgYS56IF07XG5cdFx0XHRcdFx0XHRcdG00Lm11bHRpcGx5VmVjMyhtYXRyaXgsIHApO1xuXHRcdFx0XHRcdFx0XHRhLnggPSBwWzBdICsgdGhpcy53aWR0aCAvIDI7XG5cdFx0XHRcdFx0XHRcdGEueSA9IHBbMV0gKyB0aGlzLmhlaWdodCAvIDI7XG5cdFx0XHRcdFx0XHRcdGEueiA9IHBbMl07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9sLnJpbmdzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0bW9sLnJpbmdzW2ldLmNlbnRlciA9IG1vbC5yaW5nc1tpXS5nZXRDZW50ZXIoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRoaXMubGFzdFBvaW50ID0gZS5wO1xuXHRcdFx0XHRcdFx0aWYgKHRoaXMuc3BlY3MuYXRvbXNfZGlzcGxheSAmJiB0aGlzLnNwZWNzLmF0b21zX2NpcmNsZXNfMkQpIHtcblx0XHRcdFx0XHRcdFx0bW9sLnNvcnRBdG9tc0J5WigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuc3BlY3MuYm9uZHNfZGlzcGxheSAmJiB0aGlzLnNwZWNzLmJvbmRzX2NsZWFyT3ZlcmxhcHNfMkQpIHtcblx0XHRcdFx0XHRcdFx0bW9sLnNvcnRCb25kc0J5WigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLnJlcGFpbnQoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXIgY2VudGVyID0gbmV3IHN0cnVjdHVyZXMuUG9pbnQodGhpcy53aWR0aCAvIDIsIHRoaXMuaGVpZ2h0IC8gMik7XG5cdFx0XHRcdFx0dmFyIGJlZm9yZSA9IGNlbnRlci5hbmdsZSh0aGlzLmxhc3RQb2ludCk7XG5cdFx0XHRcdFx0dmFyIGFmdGVyID0gY2VudGVyLmFuZ2xlKGUucCk7XG5cdFx0XHRcdFx0dGhpcy5zcGVjcy5yb3RhdGVBbmdsZSAtPSAoYWZ0ZXIgLSBiZWZvcmUpO1xuXHRcdFx0XHRcdHRoaXMubGFzdFBvaW50ID0gZS5wO1xuXHRcdFx0XHRcdHRoaXMucmVwYWludCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRfLm1vdXNld2hlZWwgPSBmdW5jdGlvbihlLCBkZWx0YSkge1xuXHRcdHRoaXMuc3BlY3Muc2NhbGUgKz0gZGVsdGEgLyA1MDtcblx0XHRpZiAodGhpcy5zcGVjcy5zY2FsZSA8IC4wMSkge1xuXHRcdFx0dGhpcy5zcGVjcy5zY2FsZSA9IC4wMTtcblx0XHR9XG5cdFx0dGhpcy5yZXBhaW50KCk7XG5cdH07XG5cdF8ubXVsdGl0b3VjaG1vdmUgPSBmdW5jdGlvbihlLCBudW1GaW5nZXJzKSB7XG5cdFx0aWYgKG51bUZpbmdlcnMgPT09IDIpIHtcblx0XHRcdGlmICh0aGlzLmxhc3RQb2ludC5tdWx0aSkge1xuXHRcdFx0XHR2YXIgdCA9IG5ldyBzdHJ1Y3R1cmVzLlBvaW50KGUucC54LCBlLnAueSk7XG5cdFx0XHRcdHQuc3ViKHRoaXMubGFzdFBvaW50KTtcblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMubW9sZWN1bGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgbSA9IHRoaXMubW9sZWN1bGVzW2ldO1xuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtLmF0b21zLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHRcdG0uYXRvbXNbal0uYWRkKHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtLmNoZWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuc2hhcGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgc3BzID0gdGhpcy5zaGFwZXNbaV0uZ2V0UG9pbnRzKCk7XG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IHNwcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0XHRzcHNbal0uYWRkKHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmxhc3RQb2ludCA9IGUucDtcblx0XHRcdFx0dGhpcy5sYXN0UG9pbnQubXVsdGkgPSB0cnVlO1xuXHRcdFx0XHR0aGlzLnJlcGFpbnQoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMubGFzdFBvaW50ID0gZS5wO1xuXHRcdFx0XHR0aGlzLmxhc3RQb2ludC5tdWx0aSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRfLmdlc3R1cmVjaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG5cdFx0aWYgKGUub3JpZ2luYWxFdmVudC5zY2FsZSAtIHRoaXMubGFzdFBpbmNoU2NhbGUgIT09IDApIHtcblx0XHRcdHRoaXMuc3BlY3Muc2NhbGUgKj0gZS5vcmlnaW5hbEV2ZW50LnNjYWxlIC8gdGhpcy5sYXN0UGluY2hTY2FsZTtcblx0XHRcdGlmICh0aGlzLnNwZWNzLnNjYWxlIDwgLjAxKSB7XG5cdFx0XHRcdHRoaXMuc3BlY3Muc2NhbGUgPSAuMDE7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmxhc3RQaW5jaFNjYWxlID0gZS5vcmlnaW5hbEV2ZW50LnNjYWxlO1xuXHRcdH1cblx0XHRpZiAodGhpcy5sYXN0R2VzdHVyZVJvdGF0ZSAtIGUub3JpZ2luYWxFdmVudC5yb3RhdGlvbiAhPT0gMCkge1xuXHRcdFx0dmFyIHJvdCA9ICh0aGlzLmxhc3RHZXN0dXJlUm90YXRlIC0gZS5vcmlnaW5hbEV2ZW50LnJvdGF0aW9uKSAvIDE4MCAqIG0uUEk7XG5cdFx0XHR2YXIgY2VudGVyID0gbmV3IHN0cnVjdHVyZXMuUG9pbnQodGhpcy53aWR0aCAvIDIsIHRoaXMuaGVpZ2h0IC8gMik7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5tb2xlY3VsZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgbW9sID0gdGhpcy5tb2xlY3VsZXNbaV07XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtb2wuYXRvbXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdHZhciBhID0gbW9sLmF0b21zW2pdO1xuXHRcdFx0XHRcdHZhciBkaXN0ID0gY2VudGVyLmRpc3RhbmNlKGEpO1xuXHRcdFx0XHRcdHZhciBhbmdsZSA9IGNlbnRlci5hbmdsZShhKSArIHJvdDtcblx0XHRcdFx0XHRhLnggPSBjZW50ZXIueCArIGRpc3QgKiBtLmNvcyhhbmdsZSk7XG5cdFx0XHRcdFx0YS55ID0gY2VudGVyLnkgLSBkaXN0ICogbS5zaW4oYW5nbGUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG1vbC5jaGVjaygpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5sYXN0R2VzdHVyZVJvdGF0ZSA9IGUub3JpZ2luYWxFdmVudC5yb3RhdGlvbjtcblx0XHR9XG5cdFx0dGhpcy5yZXBhaW50KCk7XG5cdH07XG5cdF8uZ2VzdHVyZWVuZCA9IGZ1bmN0aW9uKGUpIHtcblx0XHR0aGlzLmxhc3RQaW5jaFNjYWxlID0gMTtcblx0XHR0aGlzLmxhc3RHZXN0dXJlUm90YXRlID0gMDtcblx0fTtcblxufSkoQ2hlbURvb2RsZSwgQ2hlbURvb2RsZS5tb25pdG9yLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMsIE1hdGgsIENoZW1Eb29kbGUubGliLm1hdDQpO1xuXG4oZnVuY3Rpb24oYywgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0Yy5WaWV3ZXJDYW52YXMgPSBmdW5jdGlvbihpZCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdGlmIChpZCkge1xuXHRcdFx0dGhpcy5jcmVhdGUoaWQsIHdpZHRoLCBoZWlnaHQpO1xuXHRcdH1cblx0fTtcblx0Yy5WaWV3ZXJDYW52YXMucHJvdG90eXBlID0gbmV3IGMuX0NhbnZhcygpO1xuXG59KShDaGVtRG9vZGxlKTtcblxuKGZ1bmN0aW9uKGMsIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRjLl9TcGVjdHJ1bUNhbnZhcyA9IGZ1bmN0aW9uKGlkLCB3aWR0aCwgaGVpZ2h0KSB7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHR0aGlzLmNyZWF0ZShpZCwgd2lkdGgsIGhlaWdodCk7XG5cdFx0fVxuXHR9O1xuXHR2YXIgXyA9IGMuX1NwZWN0cnVtQ2FudmFzLnByb3RvdHlwZSA9IG5ldyBjLl9DYW52YXMoKTtcblx0Xy5zcGVjdHJ1bSA9IHVuZGVmaW5lZDtcblx0Xy5lbXB0eU1lc3NhZ2UgPSAnTm8gU3BlY3RydW0gTG9hZGVkIG9yIFJlY29nbml6ZWQnO1xuXHRfLmxvYWRNb2xlY3VsZSA9IHVuZGVmaW5lZDtcblx0Xy5nZXRNb2xlY3VsZSA9IHVuZGVmaW5lZDtcblx0Xy5pbm5lclJlcGFpbnQgPSBmdW5jdGlvbihjdHgpIHtcblx0XHRpZiAodGhpcy5zcGVjdHJ1bSAmJiB0aGlzLnNwZWN0cnVtLmRhdGEubGVuZ3RoID4gMCkge1xuXHRcdFx0dGhpcy5zcGVjdHJ1bS5kcmF3KGN0eCwgdGhpcy5zcGVjcywgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5lbXB0eU1lc3NhZ2UpIHtcblx0XHRcdGN0eC5maWxsU3R5bGUgPSAnIzczNzY4Myc7XG5cdFx0XHRjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cdFx0XHRjdHguZm9udCA9ICcxOHB4IEhlbHZldGljYSwgVmVyZGFuYSwgQXJpYWwsIFNhbnMtc2VyaWYnO1xuXHRcdFx0Y3R4LmZpbGxUZXh0KHRoaXMuZW1wdHlNZXNzYWdlLCB0aGlzLndpZHRoIC8gMiwgdGhpcy5oZWlnaHQgLyAyKTtcblx0XHR9XG5cdH07XG5cdF8ubG9hZFNwZWN0cnVtID0gZnVuY3Rpb24oc3BlY3RydW0pIHtcblx0XHR0aGlzLnNwZWN0cnVtID0gc3BlY3RydW07XG5cdFx0dGhpcy5yZXBhaW50KCk7XG5cdH07XG5cdF8uZ2V0U3BlY3RydW0gPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5zcGVjdHJ1bTtcblx0fTtcblx0Xy5nZXRTcGVjdHJ1bUNvb3JkaW5hdGVzID0gZnVuY3Rpb24oeCwgeSkge1xuXHRcdHJldHVybiBzcGVjdHJ1bS5nZXRJbnRlcm5hbENvb3JkaW5hdGVzKHgsIHksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcblx0fTtcblxufSkoQ2hlbURvb2RsZSwgZG9jdW1lbnQpO1xuXG4oZnVuY3Rpb24oYywgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0Yy5PYnNlcnZlckNhbnZhcyA9IGZ1bmN0aW9uKGlkLCB3aWR0aCwgaGVpZ2h0KSB7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHR0aGlzLmNyZWF0ZShpZCwgd2lkdGgsIGhlaWdodCk7XG5cdFx0fVxuXHR9O1xuXHRjLk9ic2VydmVyQ2FudmFzLnByb3RvdHlwZSA9IG5ldyBjLl9TcGVjdHJ1bUNhbnZhcygpO1xuXG59KShDaGVtRG9vZGxlKTtcblxuKGZ1bmN0aW9uKGMsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGMuT3ZlcmxheUNhbnZhcyA9IGZ1bmN0aW9uKGlkLCB3aWR0aCwgaGVpZ2h0KSB7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHR0aGlzLmNyZWF0ZShpZCwgd2lkdGgsIGhlaWdodCk7XG5cdFx0fVxuXHR9O1xuXHR2YXIgXyA9IGMuT3ZlcmxheUNhbnZhcy5wcm90b3R5cGUgPSBuZXcgYy5fU3BlY3RydW1DYW52YXMoKTtcblx0Xy5vdmVybGF5U3BlY3RyYSA9IFtdO1xuXHRfLnN1cGVyUmVwYWludCA9IF8uaW5uZXJSZXBhaW50O1xuXHRfLmlubmVyUmVwYWludCA9IGZ1bmN0aW9uKGN0eCkge1xuXHRcdHRoaXMuc3VwZXJSZXBhaW50KGN0eCk7XG5cdFx0aWYgKHRoaXMuc3BlY3RydW0gJiYgdGhpcy5zcGVjdHJ1bS5kYXRhLmxlbmd0aCA+IDApIHtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLm92ZXJsYXlTcGVjdHJhLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIHMgPSB0aGlzLm92ZXJsYXlTcGVjdHJhW2ldO1xuXHRcdFx0XHRpZiAocyAmJiBzLmRhdGEubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdHMubWluWCA9IHRoaXMuc3BlY3RydW0ubWluWDtcblx0XHRcdFx0XHRzLm1heFggPSB0aGlzLnNwZWN0cnVtLm1heFg7XG5cdFx0XHRcdFx0cy5kcmF3UGxvdChjdHgsIHRoaXMuc3BlY3MsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLnNwZWN0cnVtLm1lbW9yeS5vZmZzZXRUb3AsIHRoaXMuc3BlY3RydW0ubWVtb3J5Lm9mZnNldExlZnQsIHRoaXMuc3BlY3RydW0ubWVtb3J5Lm9mZnNldEJvdHRvbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdF8uYWRkU3BlY3RydW0gPSBmdW5jdGlvbihzcGVjdHJ1bSkge1xuXHRcdGlmICghdGhpcy5zcGVjdHJ1bSkge1xuXHRcdFx0dGhpcy5zcGVjdHJ1bSA9IHNwZWN0cnVtO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLm92ZXJsYXlTcGVjdHJhLnB1c2goc3BlY3RydW0pO1xuXHRcdH1cblx0fTtcblxufSkoQ2hlbURvb2RsZSk7XG5cbihmdW5jdGlvbihjLCBtb25pdG9yLCBtLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRjLlBlcnNwZWN0aXZlQ2FudmFzID0gZnVuY3Rpb24oaWQsIHdpZHRoLCBoZWlnaHQpIHtcblx0XHRpZiAoaWQpIHtcblx0XHRcdHRoaXMuY3JlYXRlKGlkLCB3aWR0aCwgaGVpZ2h0KTtcblx0XHR9XG5cdH07XG5cdHZhciBfID0gYy5QZXJzcGVjdGl2ZUNhbnZhcy5wcm90b3R5cGUgPSBuZXcgYy5fU3BlY3RydW1DYW52YXMoKTtcblx0Xy5kcmFnUmFuZ2UgPSB1bmRlZmluZWQ7XG5cdF8ucmVzY2FsZVlBeGlzT25ab29tID0gdHJ1ZTtcblx0Xy5sYXN0UGluY2hTY2FsZSA9IDE7XG5cdF8ubW91c2Vkb3duID0gZnVuY3Rpb24oZSkge1xuXHRcdHRoaXMuZHJhZ1JhbmdlID0gbmV3IGMuc3RydWN0dXJlcy5Qb2ludChlLnAueCwgZS5wLngpO1xuXHR9O1xuXHRfLm1vdXNldXAgPSBmdW5jdGlvbihlKSB7XG5cdFx0aWYgKHRoaXMuZHJhZ1JhbmdlICYmIHRoaXMuZHJhZ1JhbmdlLnggIT09IHRoaXMuZHJhZ1JhbmdlLnkpIHtcblx0XHRcdGlmICghdGhpcy5kcmFnUmFuZ2UubXVsdGkpIHtcblx0XHRcdFx0dmFyIG5ld1NjYWxlID0gdGhpcy5zcGVjdHJ1bS56b29tKHRoaXMuZHJhZ1JhbmdlLngsIGUucC54LCB0aGlzLndpZHRoLCB0aGlzLnJlc2NhbGVZQXhpc09uWm9vbSk7XG5cdFx0XHRcdGlmICh0aGlzLnJlc2NhbGVZQXhpc09uWm9vbSkge1xuXHRcdFx0XHRcdHRoaXMuc3BlY3Muc2NhbGUgPSBuZXdTY2FsZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5kcmFnUmFuZ2UgPSB1bmRlZmluZWQ7XG5cdFx0XHR0aGlzLnJlcGFpbnQoKTtcblx0XHR9XG5cdH07XG5cdF8uZHJhZyA9IGZ1bmN0aW9uKGUpIHtcblx0XHRpZiAodGhpcy5kcmFnUmFuZ2UpIHtcblx0XHRcdGlmICh0aGlzLmRyYWdSYW5nZS5tdWx0aSkge1xuXHRcdFx0XHR0aGlzLmRyYWdSYW5nZSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSBpZiAobW9uaXRvci5TSElGVCkge1xuXHRcdFx0XHR0aGlzLnNwZWN0cnVtLnRyYW5zbGF0ZShlLnAueCAtIHRoaXMuZHJhZ1JhbmdlLngsIHRoaXMud2lkdGgpO1xuXHRcdFx0XHR0aGlzLmRyYWdSYW5nZS54ID0gZS5wLng7XG5cdFx0XHRcdHRoaXMuZHJhZ1JhbmdlLnkgPSBlLnAueDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZHJhZ1JhbmdlLnkgPSBlLnAueDtcblx0XHRcdH1cblx0XHRcdHRoaXMucmVwYWludCgpO1xuXHRcdH1cblx0fTtcblx0Xy5kcmF3Q2hpbGRFeHRyYXMgPSBmdW5jdGlvbihjdHgpIHtcblx0XHRpZiAodGhpcy5kcmFnUmFuZ2UpIHtcblx0XHRcdHZhciB4cyA9IG0ubWluKHRoaXMuZHJhZ1JhbmdlLngsIHRoaXMuZHJhZ1JhbmdlLnkpO1xuXHRcdFx0dmFyIHhlID0gbS5tYXgodGhpcy5kcmFnUmFuZ2UueCwgdGhpcy5kcmFnUmFuZ2UueSk7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSAnZ3JheSc7XG5cdFx0XHRjdHgubGluZVN0eWxlID0gMTtcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdGN0eC5tb3ZlVG8oeHMsIHRoaXMuaGVpZ2h0IC8gMik7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IHhzOyBpIDw9IHhlOyBpKyspIHtcblx0XHRcdFx0aWYgKGkgJSAxMCA8IDUpIHtcblx0XHRcdFx0XHRjdHgubGluZVRvKGksIG0ucm91bmQodGhpcy5oZWlnaHQgLyAyKSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y3R4Lm1vdmVUbyhpLCBtLnJvdW5kKHRoaXMuaGVpZ2h0IC8gMikpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0fVxuXHR9O1xuXHRfLm1vdXNld2hlZWwgPSBmdW5jdGlvbihlLCBkZWx0YSkge1xuXHRcdHRoaXMuc3BlY3Muc2NhbGUgKz0gZGVsdGEgLyAxMDtcblx0XHRpZiAodGhpcy5zcGVjcy5zY2FsZSA8IC4wMSkge1xuXHRcdFx0dGhpcy5zcGVjcy5zY2FsZSA9IC4wMTtcblx0XHR9XG5cdFx0dGhpcy5yZXBhaW50KCk7XG5cdH07XG5cdF8uZGJsY2xpY2sgPSBmdW5jdGlvbihlKSB7XG5cdFx0dGhpcy5zcGVjdHJ1bS5zZXR1cCgpO1xuXHRcdHRoaXMuc3BlY3Muc2NhbGUgPSAxO1xuXHRcdHRoaXMucmVwYWludCgpO1xuXHR9O1xuXHRfLm11bHRpdG91Y2htb3ZlID0gZnVuY3Rpb24oZSwgbnVtRmluZ2Vycykge1xuXHRcdGlmIChudW1GaW5nZXJzID09PSAyKSB7XG5cdFx0XHRpZiAoIXRoaXMuZHJhZ1JhbmdlIHx8ICF0aGlzLmRyYWdSYW5nZS5tdWx0aSkge1xuXHRcdFx0XHR0aGlzLmRyYWdSYW5nZSA9IG5ldyBjLnN0cnVjdHVyZXMuUG9pbnQoZS5wLngsIGUucC54KTtcblx0XHRcdFx0dGhpcy5kcmFnUmFuZ2UubXVsdGkgPSB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5zcGVjdHJ1bS50cmFuc2xhdGUoZS5wLnggLSB0aGlzLmRyYWdSYW5nZS54LCB0aGlzLndpZHRoKTtcblx0XHRcdFx0dGhpcy5kcmFnUmFuZ2UueCA9IGUucC54O1xuXHRcdFx0XHR0aGlzLmRyYWdSYW5nZS55ID0gZS5wLng7XG5cdFx0XHRcdHRoaXMucmVwYWludCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0Xy5nZXN0dXJlY2hhbmdlID0gZnVuY3Rpb24oZSkge1xuXHRcdHRoaXMuc3BlY3Muc2NhbGUgKj0gZS5vcmlnaW5hbEV2ZW50LnNjYWxlIC8gdGhpcy5sYXN0UGluY2hTY2FsZTtcblx0XHRpZiAodGhpcy5zcGVjcy5zY2FsZSA8IC4wMSkge1xuXHRcdFx0dGhpcy5zcGVjcy5zY2FsZSA9IC4wMTtcblx0XHR9XG5cdFx0dGhpcy5sYXN0UGluY2hTY2FsZSA9IGUub3JpZ2luYWxFdmVudC5zY2FsZTtcblx0XHR0aGlzLnJlcGFpbnQoKTtcblx0fTtcblx0Xy5nZXN0dXJlZW5kID0gZnVuY3Rpb24oZSkge1xuXHRcdHRoaXMubGFzdFBpbmNoU2NhbGUgPSAxO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLCBDaGVtRG9vZGxlLm1vbml0b3IsIE1hdGgpO1xuXG4oZnVuY3Rpb24oYywgZXh0ZW5zaW9ucywgbSwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0Yy5TZWVrZXJDYW52YXMgPSBmdW5jdGlvbihpZCwgd2lkdGgsIGhlaWdodCwgc2Vla1R5cGUpIHtcblx0XHRpZiAoaWQpIHtcblx0XHRcdHRoaXMuY3JlYXRlKGlkLCB3aWR0aCwgaGVpZ2h0KTtcblx0XHR9XG5cdFx0dGhpcy5zZWVrVHlwZSA9IHNlZWtUeXBlO1xuXHR9O1xuXHR2YXIgXyA9IGMuU2Vla2VyQ2FudmFzLnByb3RvdHlwZSA9IG5ldyBjLl9TcGVjdHJ1bUNhbnZhcygpO1xuXHRfLnN1cGVyUmVwYWludCA9IF8uaW5uZXJSZXBhaW50O1xuXHRfLmlubmVyUmVwYWludCA9IGZ1bmN0aW9uKGN0eCkge1xuXHRcdHRoaXMuc3VwZXJSZXBhaW50KGN0eCk7XG5cdFx0aWYgKHRoaXMuc3BlY3RydW0gJiYgdGhpcy5zcGVjdHJ1bS5kYXRhLmxlbmd0aCA+IDAgJiYgdGhpcy5wKSB7XG5cdFx0XHQvLyBzZXQgdXAgY29vcmRzXG5cdFx0XHR2YXIgcmVuZGVyUDtcblx0XHRcdHZhciBpbnRlcm5hbFA7XG5cdFx0XHRpZiAodGhpcy5zZWVrVHlwZSA9PT0gYy5TZWVrZXJDYW52YXMuU0VFS19QT0lOVEVSKSB7XG5cdFx0XHRcdHJlbmRlclAgPSB0aGlzLnA7XG5cdFx0XHRcdGludGVybmFsUCA9IHRoaXMuc3BlY3RydW0uZ2V0SW50ZXJuYWxDb29yZGluYXRlcyhyZW5kZXJQLngsIHJlbmRlclAueSk7XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMuc2Vla1R5cGUgPT09IGMuU2Vla2VyQ2FudmFzLlNFRUtfUExPVCB8fCB0aGlzLnNlZWtUeXBlID09PSBjLlNlZWtlckNhbnZhcy5TRUVLX1BFQUspIHtcblx0XHRcdFx0aW50ZXJuYWxQID0gdGhpcy5zZWVrVHlwZSA9PT0gYy5TZWVrZXJDYW52YXMuU0VFS19QTE9UID8gdGhpcy5zcGVjdHJ1bS5nZXRDbG9zZXN0UGxvdEludGVybmFsQ29vcmRpbmF0ZXModGhpcy5wLngpIDogdGhpcy5zcGVjdHJ1bS5nZXRDbG9zZXN0UGVha0ludGVybmFsQ29vcmRpbmF0ZXModGhpcy5wLngpO1xuXHRcdFx0XHRpZiAoIWludGVybmFsUCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZW5kZXJQID0ge1xuXHRcdFx0XHRcdHggOiB0aGlzLnNwZWN0cnVtLmdldFRyYW5zZm9ybWVkWChpbnRlcm5hbFAueCwgdGhpcy5zcGVjcywgdGhpcy53aWR0aCwgdGhpcy5zcGVjdHJ1bS5tZW1vcnkub2Zmc2V0TGVmdCksXG5cdFx0XHRcdFx0eSA6IHRoaXMuc3BlY3RydW0uZ2V0VHJhbnNmb3JtZWRZKGludGVybmFsUC55IC8gMTAwLCB0aGlzLnNwZWNzLCB0aGlzLmhlaWdodCwgdGhpcy5zcGVjdHJ1bS5tZW1vcnkub2Zmc2V0Qm90dG9tLCB0aGlzLnNwZWN0cnVtLm1lbW9yeS5vZmZzZXRUb3ApXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHQvLyBkcmF3IHBvaW50XG5cdFx0XHRjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcblx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuc3BlY3MucGxvdHNfY29sb3I7XG5cdFx0XHRjdHgubGluZVdpZHRoID0gdGhpcy5zcGVjcy5wbG90c193aWR0aDtcblx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdGN0eC5hcmMocmVuZGVyUC54LCByZW5kZXJQLnksIDMsIDAsIG0uUEkgKiAyLCBmYWxzZSk7XG5cdFx0XHRjdHguZmlsbCgpO1xuXHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0Ly8gZHJhdyBpbnRlcm5hbCBjb29yZGluYXRlc1xuXHRcdFx0Y3R4LmZvbnQgPSBleHRlbnNpb25zLmdldEZvbnRTdHJpbmcodGhpcy5zcGVjcy50ZXh0X2ZvbnRfc2l6ZSwgdGhpcy5zcGVjcy50ZXh0X2ZvbnRfZmFtaWxpZXMpO1xuXHRcdFx0Y3R4LnRleHRBbGlnbiA9ICdsZWZ0Jztcblx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnYm90dG9tJztcblx0XHRcdHZhciBzID0gJ3g6JyArIGludGVybmFsUC54LnRvRml4ZWQoMykgKyAnLCB5OicgKyBpbnRlcm5hbFAueS50b0ZpeGVkKDMpO1xuXHRcdFx0dmFyIHggPSByZW5kZXJQLnggKyAzO1xuXHRcdFx0dmFyIHcgPSBjdHgubWVhc3VyZVRleHQocykud2lkdGg7XG5cdFx0XHRpZiAoeCArIHcgPiB0aGlzLndpZHRoIC0gMikge1xuXHRcdFx0XHR4IC09IDYgKyB3O1xuXHRcdFx0fVxuXHRcdFx0dmFyIHkgPSByZW5kZXJQLnk7XG5cdFx0XHRpZiAoeSAtIHRoaXMuc3BlY3MudGV4dF9mb250X3NpemUgLSAyIDwgMCkge1xuXHRcdFx0XHR5ICs9IHRoaXMuc3BlY3MudGV4dF9mb250X3NpemU7XG5cdFx0XHR9XG5cdFx0XHRjdHguZmlsbFJlY3QoeCwgeSAtIHRoaXMuc3BlY3MudGV4dF9mb250X3NpemUsIHcsIHRoaXMuc3BlY3MudGV4dF9mb250X3NpemUpO1xuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9ICdibGFjayc7XG5cdFx0XHRjdHguZmlsbFRleHQocywgeCwgeSk7XG5cdFx0fVxuXHR9O1xuXHRfLm1vdXNlb3V0ID0gZnVuY3Rpb24oZSkge1xuXHRcdHRoaXMucCA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLnJlcGFpbnQoKTtcblx0fTtcblx0Xy5tb3VzZW1vdmUgPSBmdW5jdGlvbihlKSB7XG5cdFx0dGhpcy5wID0ge1xuXHRcdFx0eCA6IGUucC54IC0gMixcblx0XHRcdHkgOiBlLnAueSAtIDNcblx0XHR9O1xuXHRcdHRoaXMucmVwYWludCgpO1xuXHR9O1xuXHRfLnRvdWNoc3RhcnQgPSBmdW5jdGlvbihlKSB7XG5cdFx0dGhpcy5tb3VzZW1vdmUoZSk7XG5cdH07XG5cdF8udG91Y2htb3ZlID0gZnVuY3Rpb24oZSkge1xuXHRcdHRoaXMubW91c2Vtb3ZlKGUpO1xuXHR9O1xuXHRfLnRvdWNoZW5kID0gZnVuY3Rpb24oZSkge1xuXHRcdHRoaXMubW91c2VvdXQoZSk7XG5cdH07XG5cdGMuU2Vla2VyQ2FudmFzLlNFRUtfUE9JTlRFUiA9ICdwb2ludGVyJztcblx0Yy5TZWVrZXJDYW52YXMuU0VFS19QTE9UID0gJ3Bsb3QnO1xuXHRjLlNlZWtlckNhbnZhcy5TRUVLX1BFQUsgPSAncGVhayc7XG5cbn0pKENoZW1Eb29kbGUsIENoZW1Eb29kbGUuZXh0ZW5zaW9ucywgTWF0aCk7XG5cbihmdW5jdGlvbihjLCBleHRlbnNpb25zLCBtYXRoLCBzdHJ1Y3R1cmVzLCBkMywgUkVTSURVRSwgbSwgZG9jdW1lbnQsIG00LCBtMywgdjMsIHEsIHdpbmRvdywgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0Yy5fQ2FudmFzM0QgPSBmdW5jdGlvbihpZCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdGlmIChpZCkge1xuXHRcdFx0dGhpcy5jcmVhdGUoaWQsIHdpZHRoLCBoZWlnaHQpO1xuXHRcdH1cblx0fTtcblx0dmFyIF8gPSBjLl9DYW52YXMzRC5wcm90b3R5cGUgPSBuZXcgYy5fQ2FudmFzKCk7XG5cdHZhciBfc3VwZXIgPSBjLl9DYW52YXMucHJvdG90eXBlO1xuXHRfLnJvdGF0aW9uTWF0cml4ID0gdW5kZWZpbmVkO1xuXHRfLmxhc3RQb2ludCA9IHVuZGVmaW5lZDtcblx0Xy5lbXB0eU1lc3NhZ2UgPSAnV2ViR0wgaXMgVW5hdmFpbGFibGUhJztcblx0Xy5sYXN0UGluY2hTY2FsZSA9IDE7XG5cdF8ubGFzdEdlc3R1cmVSb3RhdGUgPSAwO1xuXHRfLmFmdGVyTG9hZENvbnRlbnQgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgYm91bmRzID0gbmV3IG1hdGguQm91bmRzKCk7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMubW9sZWN1bGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdGJvdW5kcy5leHBhbmQodGhpcy5tb2xlY3VsZXNbaV0uZ2V0Qm91bmRzM0QoKSk7XG5cdFx0fVxuXHRcdC8vIGJ1aWxkIGZvZyBwYXJhbWV0ZXJcblx0XHR2YXIgbWF4RGltZW5zaW9uM0QgPSB2My5kaXN0KFsgYm91bmRzLm1heFgsIGJvdW5kcy5tYXhZLCBib3VuZHMubWF4WiBdLCBbIGJvdW5kcy5taW5YLCBib3VuZHMubWluWSwgYm91bmRzLm1pblogXSkgLyAyICsgMS41O1xuXHRcdGlmKG1heERpbWVuc2lvbjNEPT09SW5maW5pdHkpe1xuXHRcdFx0Ly8gdGhlcmUgaXMgbm8gY29udGVudFxuXHRcdFx0bWF4RGltZW5zaW9uM0QgPSAxMDtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5tYXhEaW1lbnNpb24gPSBtLm1heChib3VuZHMubWF4WCAtIGJvdW5kcy5taW5YLCBib3VuZHMubWF4WSAtIGJvdW5kcy5taW5ZKTtcblxuXHRcdHZhciBmb3YgICAgICAgICA9IG0ubWluKDE3OS45LCBtLm1heCh0aGlzLnNwZWNzLnByb2plY3Rpb25QZXJzcGVjdGl2ZVZlcnRpY2FsRmllbGRPZlZpZXdfM0QsIDAuMSkpO1xuXHRcdHZhciB0aGV0YSAgICAgICA9IGZvdiAvIDM2MCAqIG0uUEk7XG5cdFx0dmFyIHRhblRoZXRhICAgID0gbS50YW4odGhldGEpIC8gMC44O1xuXHRcdHZhciB0b3AgICAgICAgICA9IG1heERpbWVuc2lvbjNEO1xuXHRcdHZhciBmb2NhbExlbmd0aCA9IHRvcCAvIHRhblRoZXRhO1xuXHRcdHZhciBuZWFyICAgICAgICA9IGZvY2FsTGVuZ3RoIC0gdG9wO1xuXHRcdHZhciBmYXIgICAgICAgICA9IGZvY2FsTGVuZ3RoICsgdG9wO1xuXHRcdHZhciBhc3BlY3QgICAgICA9IHRoaXMud2lkdGggLyB0aGlzLmhlaWdodDtcblxuXHRcdHRoaXMuY2FtZXJhLmZpZWxkT2ZWaWV3ID0gZm92O1xuXHRcdHRoaXMuY2FtZXJhLm5lYXIgPSBuZWFyO1xuXHRcdHRoaXMuY2FtZXJhLmZhciA9IGZhcjtcblx0XHR0aGlzLmNhbWVyYS5hc3BlY3QgPSBhc3BlY3Q7XG5cdFx0bTQudHJhbnNsYXRlKG00LmlkZW50aXR5KHRoaXMuY2FtZXJhLnZpZXdNYXRyaXgpLCBbIDAsIDAsIC1mb2NhbExlbmd0aF0pO1xuXG5cdFx0dmFyIGxpZ2h0Rm9jYWxMZW5ndGggPSB0b3AgLyBtLnRhbih0aGV0YSk7XG5cdFx0XG5cdFx0dGhpcy5saWdodGluZy5jYW1lcmEuZmllbGRPZlZpZXcgPSBmb3Y7XG5cdFx0dGhpcy5saWdodGluZy5jYW1lcmEubmVhciA9IGxpZ2h0Rm9jYWxMZW5ndGggLSB0b3A7XG5cdFx0dGhpcy5saWdodGluZy5jYW1lcmEuZmFyID0gbGlnaHRGb2NhbExlbmd0aCArIHRvcDtcblx0XHR0aGlzLmxpZ2h0aW5nLnVwZGF0ZVZpZXcoKTtcblxuXHRcdHRoaXMuc2V0dXBTY2VuZSgpO1xuXHR9O1xuXHRfLnJlbmRlckRlcHRoTWFwID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKHRoaXMuc3BlY3Muc2hhZG93XzNEICYmIGQzLkRlcHRoU2hhZGVyKSB7XG5cblx0XHRcdHZhciBjdWxsRmFjZUVuYWJsZWQgPSB0aGlzLmdsLmlzRW5hYmxlZCh0aGlzLmdsLkNVTExfRkFDRSk7XG5cdFx0XHRpZighY3VsbEZhY2VFbmFibGVkKSB7IHRoaXMuZ2wuZW5hYmxlKHRoaXMuZ2wuQ1VMTF9GQUNFKTsgfVxuXG5cdFx0XHR0aGlzLmRlcHRoU2hhZGVyLnVzZVNoYWRlclByb2dyYW0odGhpcy5nbCk7XG5cblx0XHRcdC8vIGN1cnJlbnQgY2xlYXIgY29sb3Jcblx0XHRcdHZhciBjcyA9IHRoaXMuZ2wuZ2V0UGFyYW1ldGVyKHRoaXMuZ2wuQ09MT1JfQ0xFQVJfVkFMVUUpO1xuXG5cdFx0XHR0aGlzLmdsLmNsZWFyQ29sb3IoMS4wLCAxLjAsIDEuMCwgMC4wKTtcblxuXHRcdFx0dGhpcy5saWdodERlcHRoTWFwRnJhbWVidWZmZXIuYmluZCh0aGlzLmdsLCB0aGlzLnNoYWRvd1RleHR1cmVTaXplLCB0aGlzLnNoYWRvd1RleHR1cmVTaXplKTtcblxuXHRcdFx0dGhpcy5nbC5jbGVhcih0aGlzLmdsLkNPTE9SX0JVRkZFUl9CSVQgfCB0aGlzLmdsLkRFUFRIX0JVRkZFUl9CSVQpO1xuXG5cdFx0XHQvLyB1c2UgbGlnaHQgcHJvamVjdGlvbiBtYXRyaXggdG8gZHJhdyB0aGUgbW9sZWN1bGVcblx0XHRcdHRoaXMuZGVwdGhTaGFkZXIuc2V0UHJvamVjdGlvbk1hdHJpeCh0aGlzLmdsLCB0aGlzLmxpZ2h0aW5nLmNhbWVyYS5wcm9qZWN0aW9uTWF0cml4KTtcblxuXHRcdFx0dGhpcy5kZXB0aFNoYWRlci5lbmFibGVBdHRyaWJzQXJyYXkodGhpcy5nbCk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLm1vbGVjdWxlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHRoaXMubW9sZWN1bGVzW2ldLnJlbmRlcih0aGlzLmdsLCB0aGlzLnNwZWNzKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5nbC5mbHVzaCgpO1xuXG5cdFx0XHR0aGlzLmRlcHRoU2hhZGVyLmRpc2FibGVBdHRyaWJzQXJyYXkodGhpcy5nbCk7XG5cblx0XHRcdHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuXG5cdFx0XHQvLyBzZXQgYmFjayB0aGUgY2xlYXIgY29sb3Jcblx0XHRcdHRoaXMuZ2wuY2xlYXJDb2xvcihjc1swXSwgY3NbMV0sIGNzWzJdLCBjc1szXSk7XG5cblx0XHRcdGlmKCFjdWxsRmFjZUVuYWJsZWQpIHsgdGhpcy5nbC5kaXNhYmxlKHRoaXMuZ2wuQ1VMTF9GQUNFKTsgfVxuXHRcdH1cblx0fTsvLyBkcmF3IGFueXRoaW5nIHRob3NlIG5vdCBtb2xlY3VsZXMsIGV4YW1wbGUgY29tcGFzcywgc2hhcGVzLCB0ZXh0IGV0Yy5cblx0Xy5yZW5kZXJFeHRyYXMgPSBmdW5jdGlvbigpIHtcblxuXHRcdHRoaXMucGhvbmdTaGFkZXIudXNlU2hhZGVyUHJvZ3JhbSh0aGlzLmdsKTtcblxuXHRcdHRoaXMucGhvbmdTaGFkZXIuZW5hYmxlQXR0cmlic0FycmF5KHRoaXMuZ2wpO1xuXG5cdFx0dmFyIHRyYW5zcGFyZW50U2hhcGVzID0gW107XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuc2hhcGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBzID0gdGhpcy5zaGFwZXNbaV07XG5cdFx0XHRpZihzIGluc3RhbmNlb2YgZDMuX1N1cmZhY2UgJiYgKCFzLnNwZWNzICYmIHRoaXMuc3BlY3Muc3VyZmFjZXNfYWxwaGEhPT0xIHx8IHMuc3BlY3MgJiYgcy5zcGVjcy5zdXJmYWNlc19hbHBoYSE9PTEpKXtcblx0XHRcdFx0dHJhbnNwYXJlbnRTaGFwZXMucHVzaChzKTtcblx0XHRcdH1lbHNle1xuXHRcdFx0XHRzLnJlbmRlcih0aGlzLmdsLCB0aGlzLnNwZWNzKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0Ly8gdHJhbnNwYXJlbnQgc2hhcGVzXG5cdFx0aWYodHJhbnNwYXJlbnRTaGFwZXMubGVuZ3RoIT09MCl7XG5cdFx0XHQvL3RoaXMuZ2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FKTtcblx0XHRcdHRoaXMuZ2wuYmxlbmRGdW5jKHRoaXMuZ2wuU1JDX0FMUEhBLCB0aGlzLmdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xuXHRcdFx0dGhpcy5nbC5lbmFibGUodGhpcy5nbC5CTEVORCk7XG5cdFx0XHR0aGlzLmdsLmRlcHRoTWFzayhmYWxzZSk7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdHJhbnNwYXJlbnRTaGFwZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgcyA9IHRyYW5zcGFyZW50U2hhcGVzW2ldO1xuXHRcdFx0XHRzLnJlbmRlcih0aGlzLmdsLCB0aGlzLnNwZWNzKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuZ2wuZGVwdGhNYXNrKHRydWUpO1xuXHRcdFx0dGhpcy5nbC5kaXNhYmxlKHRoaXMuZ2wuQkxFTkQpO1xuXHRcdFx0dGhpcy5nbC5ibGVuZEZ1bmNTZXBhcmF0ZSh0aGlzLmdsLlNSQ19BTFBIQSwgdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBLCB0aGlzLmdsLk9ORSwgdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcdFx0XG5cdFx0fVxuXHRcdFxuXG5cdFx0dGhpcy5waG9uZ1NoYWRlci5zZXRTaGFkb3codGhpcy5nbCwgZmFsc2UpO1xuXHRcdHRoaXMucGhvbmdTaGFkZXIuc2V0Rm9nTW9kZSh0aGlzLmdsLCAwKTtcblx0XHR0aGlzLnBob25nU2hhZGVyLnNldEZsYXRDb2xvcih0aGlzLmdsLCBmYWxzZSk7XG5cblx0XHQvLyBjb21wYXNzIHVzZSBpdHMgb3duIG1vZGVsIHZpZXcgYW5kIHByb2plY3Rpb24gbWF0cml4XG5cdFx0Ly8gc28gaXQgbmVlZCB0byB1c2UgYmFjayB0aGUgZGVmYXVsdCBtYXRyaXggZm9yIG90aGVyXG5cdFx0Ly8gcmVuZGVyaW5nIHByb2Nlc3MgKGV4LiByZW5kZXIgYXJiaXRyYXJ5IHRleHQpLlxuXHRcdGlmICh0aGlzLnNwZWNzLmNvbXBhc3NfZGlzcGxheSkge1xuXHRcdFx0dGhpcy5waG9uZ1NoYWRlci5zZXRMaWdodERpcmVjdGlvbih0aGlzLmdsLCBbMCwgMCwgLTFdKTtcblx0XHRcdHRoaXMuY29tcGFzcy5yZW5kZXIodGhpcy5nbCwgdGhpcy5zcGVjcyk7XG5cdFx0fVxuXG5cdFx0dGhpcy5waG9uZ1NoYWRlci5kaXNhYmxlQXR0cmlic0FycmF5KHRoaXMuZ2wpO1xuXG5cdFx0dGhpcy5nbC5mbHVzaCgpO1xuXG5cdFx0Ly8gZW5hYmxlIGJsZW5kIGFuZCBkZXB0aCBtYXNrIHNldCB0byBmYWxzZVxuXHRcdHRoaXMuZ2wuZW5hYmxlKHRoaXMuZ2wuQkxFTkQpO1xuXHRcdHRoaXMuZ2wuZGVwdGhNYXNrKGZhbHNlKTtcblx0XHR0aGlzLmxhYmVsU2hhZGVyLnVzZVNoYWRlclByb2dyYW0odGhpcy5nbCk7XG5cdFx0Ly8gdXNlIGJhY2sgdGhlIGRlZmF1bHQgbW9kZWwgdmlldyBtYXRyaXhcblx0XHR0aGlzLmxhYmVsU2hhZGVyLnNldE1hdHJpeFVuaWZvcm1zKHRoaXMuZ2wsIHRoaXMuZ2wubW9kZWxWaWV3TWF0cml4KTtcblx0XHQvLyB1c2UgYmFjayB0aGUgZGVmYXVsdCBwcm9qZWN0aW9uIG1hdHJpeFxuXHRcdHRoaXMubGFiZWxTaGFkZXIuc2V0UHJvamVjdGlvbk1hdHJpeCh0aGlzLmdsLCB0aGlzLmNhbWVyYS5wcm9qZWN0aW9uTWF0cml4KTtcblx0XHR0aGlzLmxhYmVsU2hhZGVyLnNldERpbWVuc2lvbih0aGlzLmdsLCB0aGlzLmdsLmNhbnZhcy5jbGllbnRXaWR0aCwgdGhpcy5nbC5jYW52YXMuY2xpZW50SGVpZ2h0KTtcblxuXHRcdC8vIGVuYWJsZSB2ZXJ0ZXggZm9yIGRyYXcgdGV4dFxuXHRcdHRoaXMubGFiZWxTaGFkZXIuZW5hYmxlQXR0cmlic0FycmF5KHRoaXMuZ2wpO1xuXG5cdFx0Ly8gZHJhdyBsYWJlbCBtb2xlY3VsZVxuXHRcdGlmICh0aGlzLnNwZWNzLmF0b21zX2Rpc3BsYXlMYWJlbHNfM0QpIHtcblx0XHRcdHRoaXMubGFiZWwzRC5yZW5kZXIodGhpcy5nbCwgdGhpcy5zcGVjcywgdGhpcy5nZXRNb2xlY3VsZXMoKSk7XG5cdFx0fVxuXHRcdC8vIGRyYXcgbWVhc3VyZW1lbnQgdGV4dFxuXHRcdGlmKHRoaXMuc3BlY3MubWVhc3VyZW1lbnRfZGlzcGxheVRleHRfM0QpIHtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLnNoYXBlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBzID0gdGhpcy5zaGFwZXNbaV07XG5cdFx0XHRcdGlmKHMucmVuZGVyVGV4dCl7XG5cdFx0XHRcdFx0cy5yZW5kZXJUZXh0KHRoaXMuZ2wsIHRoaXMuc3BlY3MpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIGRyYXcgY29tcGFzcyBYIFkgWiB0ZXh0XG5cdFx0aWYgKHRoaXMuc3BlY3MuY29tcGFzc19kaXNwbGF5ICYmIHRoaXMuc3BlY3MuY29tcGFzc19kaXNwbGF5VGV4dF8zRCkge1xuXHRcdFx0dGhpcy5jb21wYXNzLnJlbmRlckF4aXModGhpcy5nbCk7XG5cdFx0fVxuXHRcdC8vIGRpc2FibGUgdmVydGV4IGZvciBkcmF3IHRleHRcblx0XHR0aGlzLmxhYmVsU2hhZGVyLmRpc2FibGVBdHRyaWJzQXJyYXkodGhpcy5nbCk7XG5cblx0XHQvLyBkaXNhYmxlIGJsZW5kIGFuZCBkZXB0aCBtYXNrIHNldCB0byB0cnVlXG5cdFx0dGhpcy5nbC5kaXNhYmxlKHRoaXMuZ2wuQkxFTkQpO1xuXHRcdHRoaXMuZ2wuZGVwdGhNYXNrKHRydWUpO1xuXHRcdHRoaXMuZ2wuZmx1c2goKTtcblx0XHRcblx0XHRpZiAodGhpcy5kcmF3Q2hpbGRFeHRyYXMpIHtcblx0XHRcdHRoaXMuZHJhd0NoaWxkRXh0cmFzKHRoaXMuZ2wpO1xuXHRcdH1cblxuXHRcdHRoaXMuZ2wuZmx1c2goKTtcblx0fTtcblx0Ly8gbW9sZWN1bGUgY29sb3JzIHJlbmRlaW5nIHdpbGwgYm90aCB1c2Ugb24gZm9yd2FyZCBhbmQgZGVmZXJyZWQgcmVuZGVyaW5nXG5cdF8ucmVuZGVyQ29sb3IgPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnBob25nU2hhZGVyLnVzZVNoYWRlclByb2dyYW0odGhpcy5nbCk7XG5cblx0XHR0aGlzLmdsLnVuaWZvcm0xaSh0aGlzLnBob25nU2hhZGVyLnNoYWRvd0RlcHRoU2FtcGxlVW5pZm9ybSwgMCk7XG5cblx0XHR0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCk7XG5cdFx0dGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRoaXMubGlnaHREZXB0aE1hcFRleHR1cmUudGV4dHVyZSk7XG5cblx0XHR0aGlzLnBob25nU2hhZGVyLnNldFByb2plY3Rpb25NYXRyaXgodGhpcy5nbCwgdGhpcy5jYW1lcmEucHJvamVjdGlvbk1hdHJpeCk7XG5cdFx0dGhpcy5waG9uZ1NoYWRlci5zZXRTaGFkb3codGhpcy5nbCwgdGhpcy5zcGVjcy5zaGFkb3dfM0QpO1xuXHRcdHRoaXMucGhvbmdTaGFkZXIuc2V0RmxhdENvbG9yKHRoaXMuZ2wsIHRoaXMuc3BlY3MuZmxhdF9jb2xvcl8zRCk7XG5cdFx0dGhpcy5waG9uZ1NoYWRlci5zZXRHYW1tYUNvcnJlY3Rpb24odGhpcy5nbCwgdGhpcy5zcGVjcy5nYW1tYUNvcnJlY3Rpb25fM0QpO1xuXG5cdFx0dGhpcy5waG9uZ1NoYWRlci5zZXRTaGFkb3dUZXh0dXJlU2l6ZSh0aGlzLmdsLCB0aGlzLnNoYWRvd1RleHR1cmVTaXplLCB0aGlzLnNoYWRvd1RleHR1cmVTaXplKTtcblx0XHR0aGlzLnBob25nU2hhZGVyLnNldFNoYWRvd0ludGVuc2l0eSh0aGlzLmdsLCB0aGlzLnNwZWNzLnNoYWRvd19pbnRlbnNpdHlfM0QpO1xuXG5cdFx0dGhpcy5waG9uZ1NoYWRlci5zZXRGb2dNb2RlKHRoaXMuZ2wsIHRoaXMuc3BlY3MuZm9nX21vZGVfM0QpO1xuXHRcdHRoaXMucGhvbmdTaGFkZXIuc2V0Rm9nQ29sb3IodGhpcy5nbCwgdGhpcy5mb2dnaW5nLmNvbG9yUkdCKTtcblx0XHR0aGlzLnBob25nU2hhZGVyLnNldEZvZ1N0YXJ0KHRoaXMuZ2wsIHRoaXMuZm9nZ2luZy5mb2dTdGFydCk7XG5cdFx0dGhpcy5waG9uZ1NoYWRlci5zZXRGb2dFbmQodGhpcy5nbCwgdGhpcy5mb2dnaW5nLmZvZ0VuZCk7XG5cdFx0dGhpcy5waG9uZ1NoYWRlci5zZXRGb2dEZW5zaXR5KHRoaXMuZ2wsIHRoaXMuZm9nZ2luZy5kZW5zaXR5KTtcblxuXHRcdHRoaXMucGhvbmdTaGFkZXIuc2V0TGlnaHRQcm9qZWN0aW9uTWF0cml4KHRoaXMuZ2wsIHRoaXMubGlnaHRpbmcuY2FtZXJhLnByb2plY3Rpb25NYXRyaXgpO1xuXHRcdHRoaXMucGhvbmdTaGFkZXIuc2V0TGlnaHREaWZmdXNlQ29sb3IodGhpcy5nbCwgdGhpcy5saWdodGluZy5kaWZmdXNlUkdCKTtcblx0XHR0aGlzLnBob25nU2hhZGVyLnNldExpZ2h0U3BlY3VsYXJDb2xvcih0aGlzLmdsLCB0aGlzLmxpZ2h0aW5nLnNwZWN1bGFyUkdCKTtcblx0XHR0aGlzLnBob25nU2hhZGVyLnNldExpZ2h0RGlyZWN0aW9uKHRoaXMuZ2wsIHRoaXMubGlnaHRpbmcuZGlyZWN0aW9uKTtcblx0XHRcblx0XHR0aGlzLnBob25nU2hhZGVyLmVuYWJsZUF0dHJpYnNBcnJheSh0aGlzLmdsKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLm1vbGVjdWxlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR0aGlzLm1vbGVjdWxlc1tpXS5yZW5kZXIodGhpcy5nbCwgdGhpcy5zcGVjcyk7XG5cdFx0fVxuXG5cdFx0dGhpcy5waG9uZ1NoYWRlci5kaXNhYmxlQXR0cmlic0FycmF5KHRoaXMuZ2wpO1xuXG5cdFx0dGhpcy5nbC5mbHVzaCgpO1xuXHR9O1xuXHRfLnJlbmRlclBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5wb3NpdGlvblNoYWRlci51c2VTaGFkZXJQcm9ncmFtKHRoaXMuZ2wpO1xuXG5cdFx0dGhpcy5wb3NpdGlvblNoYWRlci5zZXRQcm9qZWN0aW9uTWF0cml4KHRoaXMuZ2wsIHRoaXMuY2FtZXJhLnByb2plY3Rpb25NYXRyaXgpO1xuXG5cdFx0dGhpcy5wb3NpdGlvblNoYWRlci5lbmFibGVBdHRyaWJzQXJyYXkodGhpcy5nbCk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5tb2xlY3VsZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dGhpcy5tb2xlY3VsZXNbaV0ucmVuZGVyKHRoaXMuZ2wsIHRoaXMuc3BlY3MpO1xuXHRcdH1cblxuXHRcdHRoaXMucG9zaXRpb25TaGFkZXIuZGlzYWJsZUF0dHJpYnNBcnJheSh0aGlzLmdsKTtcblxuXHRcdHRoaXMuZ2wuZmx1c2goKTtcblx0fTtcblx0Xy5yZW5kZXJOb3JtYWwgPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLm5vcm1hbFNoYWRlci51c2VTaGFkZXJQcm9ncmFtKHRoaXMuZ2wpO1xuXHRcdHRoaXMubm9ybWFsU2hhZGVyLnNldFByb2plY3Rpb25NYXRyaXgodGhpcy5nbCwgdGhpcy5jYW1lcmEucHJvamVjdGlvbk1hdHJpeCk7XG5cblx0XHR0aGlzLm5vcm1hbFNoYWRlci5lbmFibGVBdHRyaWJzQXJyYXkodGhpcy5nbCk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5tb2xlY3VsZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dGhpcy5tb2xlY3VsZXNbaV0ucmVuZGVyKHRoaXMuZ2wsIHRoaXMuc3BlY3MpO1xuXHRcdH1cblxuXHRcdHRoaXMubm9ybWFsU2hhZGVyLmRpc2FibGVBdHRyaWJzQXJyYXkodGhpcy5nbCk7XG5cblx0XHR0aGlzLmdsLmZsdXNoKCk7XG5cdH07XG5cdF8ucmVuZGVyU1NBTyA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuc3Nhb1NoYWRlci51c2VTaGFkZXJQcm9ncmFtKHRoaXMuZ2wpO1xuXG5cdFx0dGhpcy5zc2FvU2hhZGVyLnNldFByb2plY3Rpb25NYXRyaXgodGhpcy5nbCwgdGhpcy5jYW1lcmEucHJvamVjdGlvbk1hdHJpeCk7XG5cblx0XHR0aGlzLnNzYW9TaGFkZXIuc2V0U2FtcGxlS2VybmVsKHRoaXMuZ2wsIHRoaXMuc3Nhby5zYW1wbGVLZXJuZWwpO1xuXG5cdFx0dGhpcy5zc2FvU2hhZGVyLnNldEtlcm5lbFJhZGl1cyh0aGlzLmdsLCB0aGlzLnNwZWNzLnNzYW9fa2VybmVsX3JhZGl1cyk7XG5cblx0XHR0aGlzLnNzYW9TaGFkZXIuc2V0UG93ZXIodGhpcy5nbCwgdGhpcy5zcGVjcy5zc2FvX3Bvd2VyKTtcblxuXHRcdHRoaXMuc3Nhb1NoYWRlci5zZXRHYnVmZmVyVGV4dHVyZVNpemUodGhpcy5nbCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVyV2lkdGgsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7XG5cblx0XHR0aGlzLmdsLnVuaWZvcm0xaSh0aGlzLnNzYW9TaGFkZXIucG9zaXRpb25TYW1wbGVVbmlmb3JtLCAwKTtcblx0XHR0aGlzLmdsLnVuaWZvcm0xaSh0aGlzLnNzYW9TaGFkZXIubm9ybWFsU2FtcGxlVW5pZm9ybSwgMSk7XG5cdFx0dGhpcy5nbC51bmlmb3JtMWkodGhpcy5zc2FvU2hhZGVyLm5vaXNlU2FtcGxlVW5pZm9ybSwgMik7XG5cblx0XHR0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCk7XG5cdFx0dGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRoaXMucG9zaXRpb25UZXh0dXJlLnRleHR1cmUpO1xuXG5cdFx0dGhpcy5nbC5hY3RpdmVUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRTEpO1xuXHRcdHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0aGlzLm5vcm1hbFRleHR1cmUudGV4dHVyZSk7XG5cblx0XHR0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMik7XG5cdFx0dGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRoaXMuc3Nhby5ub2lzZVRleHR1cmUpO1xuXG5cdFx0dGhpcy5nbC5hY3RpdmVUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRTApO1xuXG5cdFx0dGhpcy5zc2FvU2hhZGVyLmVuYWJsZUF0dHJpYnNBcnJheSh0aGlzLmdsKTtcblxuXHRcdHRoaXMuZ2wucXVhZEJ1ZmZlci5iaW5kQnVmZmVycyh0aGlzLmdsKTtcblxuXHRcdHRoaXMuZ2wuZHJhd0FycmF5cyh0aGlzLmdsLlRSSUFOR0xFX1NUUklQLCAwLCB0aGlzLmdsLnF1YWRCdWZmZXIudmVydGV4UG9zaXRpb25CdWZmZXIubnVtSXRlbXMpO1xuXG5cdFx0dGhpcy5zc2FvU2hhZGVyLmRpc2FibGVBdHRyaWJzQXJyYXkodGhpcy5nbCk7XG5cblx0XHR0aGlzLmdsLmZsdXNoKCk7XG5cblx0XHQvLyByZW5kZXIgc3NhbyBibHVyIHNoYWRlclxuXHRcdHRoaXMuc3Nhb0ZyYW1lYnVmZmVyLmJpbmQodGhpcy5nbCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVyV2lkdGgsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7XG5cblx0XHR0aGlzLmdsLmNsZWFyKHRoaXMuZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XG5cblx0XHR0aGlzLnNzYW9CbHVyU2hhZGVyLnVzZVNoYWRlclByb2dyYW0odGhpcy5nbCk7XG5cblx0XHR0aGlzLnNzYW9CbHVyU2hhZGVyLnNldEdidWZmZXJUZXh0dXJlU2l6ZSh0aGlzLmdsLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTtcblxuXHRcdHRoaXMuZ2wudW5pZm9ybTFpKHRoaXMuc3Nhb0JsdXJTaGFkZXIuYW9TYW1wbGVVbmlmb3JtLCAwKTtcblx0XHR0aGlzLmdsLnVuaWZvcm0xaSh0aGlzLnNzYW9CbHVyU2hhZGVyLmRlcHRoU2FtcGxlVW5pZm9ybSwgMSk7XG5cblx0XHR0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCk7XG5cdFx0dGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRoaXMuaW1hZ2VUZXh0dXJlLnRleHR1cmUpO1xuXHRcdHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUxKTtcblx0XHR0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGhpcy5kZXB0aFRleHR1cmUudGV4dHVyZSk7XG5cdFx0dGhpcy5nbC5hY3RpdmVUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRTApO1xuXG5cblx0XHR0aGlzLnNzYW9CbHVyU2hhZGVyLmVuYWJsZUF0dHJpYnNBcnJheSh0aGlzLmdsKTtcblxuXHRcdHRoaXMuZ2wucXVhZEJ1ZmZlci5iaW5kQnVmZmVycyh0aGlzLmdsKTtcblxuXHRcdHRoaXMuZ2wuZHJhd0FycmF5cyh0aGlzLmdsLlRSSUFOR0xFX1NUUklQLCAwLCB0aGlzLmdsLnF1YWRCdWZmZXIudmVydGV4UG9zaXRpb25CdWZmZXIubnVtSXRlbXMpO1xuXG5cdFx0dGhpcy5zc2FvQmx1clNoYWRlci5kaXNhYmxlQXR0cmlic0FycmF5KHRoaXMuZ2wpO1xuXG5cdFx0dGhpcy5nbC5hY3RpdmVUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRTApO1xuXG5cdFx0dGhpcy5nbC5mbHVzaCgpO1xuXHR9O1xuXHRfLnJlbmRlck91dGxpbmUgPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLm91dGxpbmVTaGFkZXIudXNlU2hhZGVyUHJvZ3JhbSh0aGlzLmdsKTtcblxuXHRcdHRoaXMub3V0bGluZVNoYWRlci5zZXRHYnVmZmVyVGV4dHVyZVNpemUodGhpcy5nbCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVyV2lkdGgsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7XG5cblx0XHR0aGlzLm91dGxpbmVTaGFkZXIuc2V0Tm9ybWFsVGhyZXNob2xkKHRoaXMuZ2wsIHRoaXMuc3BlY3Mub3V0bGluZV9ub3JtYWxfdGhyZXNob2xkKTtcblx0XHR0aGlzLm91dGxpbmVTaGFkZXIuc2V0RGVwdGhUaHJlc2hvbGQodGhpcy5nbCwgdGhpcy5zcGVjcy5vdXRsaW5lX2RlcHRoX3RocmVzaG9sZCk7XG5cdFx0dGhpcy5vdXRsaW5lU2hhZGVyLnNldFRoaWNrbmVzcyh0aGlzLmdsLCB0aGlzLnNwZWNzLm91dGxpbmVfdGhpY2tuZXNzKTtcblxuXHRcdHRoaXMuZ2wudW5pZm9ybTFpKHRoaXMub3V0bGluZVNoYWRlci5ub3JtYWxTYW1wbGVVbmlmb3JtLCAwKTtcblx0XHR0aGlzLmdsLnVuaWZvcm0xaSh0aGlzLm91dGxpbmVTaGFkZXIuZGVwdGhTYW1wbGVVbmlmb3JtLCAxKTtcblxuXHRcdHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUwKTtcblx0XHR0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGhpcy5ub3JtYWxUZXh0dXJlLnRleHR1cmUpO1xuXG5cdFx0dGhpcy5nbC5hY3RpdmVUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRTEpO1xuXHRcdHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0aGlzLmRlcHRoVGV4dHVyZS50ZXh0dXJlKTtcblxuXHRcdHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUwKTtcblxuXHRcdHRoaXMub3V0bGluZVNoYWRlci5lbmFibGVBdHRyaWJzQXJyYXkodGhpcy5nbCk7XG5cblx0XHR0aGlzLmdsLnF1YWRCdWZmZXIuYmluZEJ1ZmZlcnModGhpcy5nbCk7XG5cblx0XHR0aGlzLmdsLmRyYXdBcnJheXModGhpcy5nbC5UUklBTkdMRV9TVFJJUCwgMCwgdGhpcy5nbC5xdWFkQnVmZmVyLnZlcnRleFBvc2l0aW9uQnVmZmVyLm51bUl0ZW1zKTtcblxuXHRcdHRoaXMub3V0bGluZVNoYWRlci5kaXNhYmxlQXR0cmlic0FycmF5KHRoaXMuZ2wpO1xuXG5cdFx0dGhpcy5nbC5mbHVzaCgpO1xuXHR9O1xuXHRfLmRlZmVycmVkUmVuZGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8gZ2V0IGJhY2tkZ3JvdW5kIGNvbG9yXG5cdFx0dmFyIGJnQ29sb3IgPSB0aGlzLmdsLmdldFBhcmFtZXRlcih0aGlzLmdsLkNPTE9SX0NMRUFSX1ZBTFVFKTtcblx0XHQvLyBzZXQgYmFja2dyb3VuZCB0byBibGFja1xuXHRcdHRoaXMuZ2wuY2xlYXJDb2xvcigwLjAsIDAuMCwgMC4wLCAwLjApO1xuXG5cdFx0Ly8gcmVuZGVyIGNvbG9yXG5cdFx0dGhpcy5jb2xvckZyYW1lYnVmZmVyLmJpbmQodGhpcy5nbCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVyV2lkdGgsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7XG5cdFx0dGhpcy5nbC5jbGVhcih0aGlzLmdsLkNPTE9SX0JVRkZFUl9CSVQgfCB0aGlzLmdsLkRFUFRIX0JVRkZFUl9CSVQpO1xuXHRcdHRoaXMucmVuZGVyQ29sb3IoKTtcblxuXHRcdC8vIHJlbmRlciBwb3NpdGlvblxuXHRcdHRoaXMucG9zaXRpb25GcmFtZWJ1ZmZlci5iaW5kKHRoaXMuZ2wsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuXHRcdHRoaXMuZ2wuY2xlYXIodGhpcy5nbC5DT0xPUl9CVUZGRVJfQklUIHwgdGhpcy5nbC5ERVBUSF9CVUZGRVJfQklUKTtcblx0XHR0aGlzLnJlbmRlclBvc2l0aW9uKCk7XG5cblx0XHQvLyByZW5kZXIgbm9ybWFsc1xuXHRcdHRoaXMubm9ybWFsRnJhbWVidWZmZXIuYmluZCh0aGlzLmdsLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTtcblx0XHR0aGlzLmdsLmNsZWFyKHRoaXMuZ2wuQ09MT1JfQlVGRkVSX0JJVCB8IHRoaXMuZ2wuREVQVEhfQlVGRkVSX0JJVCk7XG5cdFx0dGhpcy5yZW5kZXJOb3JtYWwoKTtcblxuXHRcdC8vIHJlbmRlciBzc2FvXG5cdFx0aWYodGhpcy5zcGVjcy5zc2FvXzNEICYmIGQzLlNTQU9TaGFkZXIpIHtcblx0XHRcdC8vIHJlbmRlciBzc2FvIHNoYWRpbmdcblx0XHRcdHRoaXMucXVhZEZyYW1lYnVmZmVyLmJpbmQodGhpcy5nbCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVyV2lkdGgsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7XG5cdFx0XHR0aGlzLmdsLmNsZWFyKHRoaXMuZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XG5cdFx0XHR0aGlzLnJlbmRlclNTQU8oKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5zc2FvRnJhbWVidWZmZXIuYmluZCh0aGlzLmdsLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTtcblx0XHRcdHRoaXMuZ2wuY2xlYXJDb2xvcigxLjAsIDEuMCwgMS4wLCAxLjApO1xuXHRcdFx0dGhpcy5nbC5jbGVhcih0aGlzLmdsLkNPTE9SX0JVRkZFUl9CSVQpO1xuXHRcdH1cblxuXHRcdC8vIHJlbmRlciBvdXRsaW5lXG5cdFx0dGhpcy5vdXRsaW5lRnJhbWVidWZmZXIuYmluZCh0aGlzLmdsLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTtcblx0XHR0aGlzLmdsLmNsZWFyQ29sb3IoMS4wLCAxLjAsIDEuMCwgMS4wKTtcblx0XHR0aGlzLmdsLmNsZWFyKHRoaXMuZ2wuQ09MT1JfQlVGRkVSX0JJVCk7XG5cdFx0aWYodGhpcy5zcGVjcy5vdXRsaW5lXzNEKSB7XG5cdFx0XHR0aGlzLnJlbmRlck91dGxpbmUoKTtcblx0XHR9XG5cblx0XHQvLyBzZXQgYmFjayBiYWNrZ3JvdW5kIGNvbG9yXG5cdFx0dGhpcy5nbC5jbGVhckNvbG9yKGJnQ29sb3JbMF0sIGJnQ29sb3JbMV0sIGJnQ29sb3JbMl0sIGJnQ29sb3JbM10pO1xuXHRcdC8vIGNvbXBvc2l0ZSByZW5kZXJcblx0XHR0aGlzLnF1YWRGcmFtZWJ1ZmZlci5iaW5kKHRoaXMuZ2wsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuXHRcdHRoaXMuZ2wuY2xlYXIodGhpcy5nbC5DT0xPUl9CVUZGRVJfQklUKTtcblx0XHRcblx0XHR0aGlzLmxpZ2h0aW5nU2hhZGVyLnVzZVNoYWRlclByb2dyYW0odGhpcy5nbCk7XG5cblx0XHR0aGlzLmdsLnVuaWZvcm0xaSh0aGlzLmxpZ2h0aW5nU2hhZGVyLnBvc2l0aW9uU2FtcGxlVW5pZm9ybSwgMCk7XG5cdFx0dGhpcy5nbC51bmlmb3JtMWkodGhpcy5saWdodGluZ1NoYWRlci5jb2xvclNhbXBsZVVuaWZvcm0sIDEpO1xuXHRcdHRoaXMuZ2wudW5pZm9ybTFpKHRoaXMubGlnaHRpbmdTaGFkZXIuc3Nhb1NhbXBsZVVuaWZvcm0sIDIpO1xuXHRcdHRoaXMuZ2wudW5pZm9ybTFpKHRoaXMubGlnaHRpbmdTaGFkZXIub3V0bGluZVNhbXBsZVVuaWZvcm0sIDMpO1xuXG5cdFx0dGhpcy5nbC5hY3RpdmVUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRTApO1xuXHRcdHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0aGlzLnBvc2l0aW9uVGV4dHVyZS50ZXh0dXJlKTtcblxuXHRcdHRoaXMuZ2wuYWN0aXZlVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkUxKTtcblx0XHR0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGhpcy5jb2xvclRleHR1cmUudGV4dHVyZSk7XG5cblx0XHR0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMik7XG5cdFx0dGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRoaXMuc3Nhb1RleHR1cmUudGV4dHVyZSk7XG5cblx0XHR0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMyk7XG5cdFx0dGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRoaXMub3V0bGluZVRleHR1cmUudGV4dHVyZSk7XG5cblx0XHR0aGlzLmdsLmFjdGl2ZVRleHR1cmUodGhpcy5nbC5URVhUVVJFMCk7XG5cblx0XHR0aGlzLmxpZ2h0aW5nU2hhZGVyLmVuYWJsZUF0dHJpYnNBcnJheSh0aGlzLmdsKTtcblxuXHRcdHRoaXMuZ2wucXVhZEJ1ZmZlci5iaW5kQnVmZmVycyh0aGlzLmdsKTtcblxuXHRcdHRoaXMuZ2wuZHJhd0FycmF5cyh0aGlzLmdsLlRSSUFOR0xFX1NUUklQLCAwLCB0aGlzLmdsLnF1YWRCdWZmZXIudmVydGV4UG9zaXRpb25CdWZmZXIubnVtSXRlbXMpO1xuXG5cdFx0dGhpcy5saWdodGluZ1NoYWRlci5kaXNhYmxlQXR0cmlic0FycmF5KHRoaXMuZ2wpO1xuXG5cdFx0dGhpcy5nbC5mbHVzaCgpO1xuXG5cdFx0Ly8gZmluYWwgcmVuZGVyXG5cdFx0dGhpcy5meGFhRnJhbWVidWZmZXIuYmluZCh0aGlzLmdsLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTtcblx0XHR0aGlzLmdsLmNsZWFyKHRoaXMuZ2wuQ09MT1JfQlVGRkVSX0JJVCB8IHRoaXMuZ2wuREVQVEhfQlVGRkVSX0JJVCk7XG5cdFx0Ly8gc2V0dXAgdmlld3BvcnRcblx0XHR0aGlzLmdsLnZpZXdwb3J0KDAsIDAsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuXG5cdFx0dGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRoaXMuaW1hZ2VUZXh0dXJlLnRleHR1cmUpO1xuXG5cdFx0dGhpcy5meGFhU2hhZGVyLnVzZVNoYWRlclByb2dyYW0odGhpcy5nbCk7XG5cblx0XHR0aGlzLmZ4YWFTaGFkZXIuc2V0QnVmZmVyc2l6ZSh0aGlzLmdsLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTtcblx0XHR0aGlzLmZ4YWFTaGFkZXIuc2V0QW50aWFsaWFzKHRoaXMuZ2wsIHRoaXMuc3BlY3MuYW50aWFsaWFzXzNEKTtcblxuXHRcdHRoaXMuZnhhYVNoYWRlci5zZXRFZGdlVGhyZXNob2xkKHRoaXMuZ2wsIHRoaXMuc3BlY3MuZnhhYV9lZGdlVGhyZXNob2xkKTtcblx0XHR0aGlzLmZ4YWFTaGFkZXIuc2V0RWRnZVRocmVzaG9sZE1pbih0aGlzLmdsLCB0aGlzLnNwZWNzLmZ4YWFfZWRnZVRocmVzaG9sZE1pbik7XG5cdFx0dGhpcy5meGFhU2hhZGVyLnNldFNlYXJjaFN0ZXBzKHRoaXMuZ2wsIHRoaXMuc3BlY3MuZnhhYV9zZWFyY2hTdGVwcyk7XG5cdFx0dGhpcy5meGFhU2hhZGVyLnNldFNlYXJjaFRocmVzaG9sZCh0aGlzLmdsLCB0aGlzLnNwZWNzLmZ4YWFfc2VhcmNoVGhyZXNob2xkKTtcblx0XHR0aGlzLmZ4YWFTaGFkZXIuc2V0U3VicGl4Q2FwKHRoaXMuZ2wsIHRoaXMuc3BlY3MuZnhhYV9zdWJwaXhDYXApO1xuXHRcdHRoaXMuZnhhYVNoYWRlci5zZXRTdWJwaXhUcmltKHRoaXMuZ2wsIHRoaXMuc3BlY3MuZnhhYV9zdWJwaXhUcmltKTtcblxuXHRcdHRoaXMuZnhhYVNoYWRlci5lbmFibGVBdHRyaWJzQXJyYXkodGhpcy5nbCk7XG5cblx0XHR0aGlzLmdsLnF1YWRCdWZmZXIuYmluZEJ1ZmZlcnModGhpcy5nbCk7XG5cblx0XHR0aGlzLmdsLmRyYXdBcnJheXModGhpcy5nbC5UUklBTkdMRV9TVFJJUCwgMCwgdGhpcy5nbC5xdWFkQnVmZmVyLnZlcnRleFBvc2l0aW9uQnVmZmVyLm51bUl0ZW1zKTtcblxuXHRcdHRoaXMuZnhhYVNoYWRlci5kaXNhYmxlQXR0cmlic0FycmF5KHRoaXMuZ2wpO1xuXG5cdFx0dGhpcy5nbC5mbHVzaCgpO1xuXG5cblx0XHQvLyBmaW5hbCByZW5kZXJcblx0XHR0aGlzLmZpbmFsRnJhbWVidWZmZXIuYmluZCh0aGlzLmdsLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTtcblx0XHR0aGlzLnJlbmRlckV4dHJhcygpO1xuXG5cdFx0Ly8gc2V0IGJhY2sgYmFja2dyb3VuZCBjb2xvclxuXHRcdHRoaXMuZ2wuY2xlYXJDb2xvcihiZ0NvbG9yWzBdLCBiZ0NvbG9yWzFdLCBiZ0NvbG9yWzJdLCBiZ0NvbG9yWzNdKTtcblxuXHRcdC8vIGxhc3QgcmVuZGVyXG5cdFx0dGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5nbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG5cdFx0dGhpcy5nbC5jbGVhcih0aGlzLmdsLkNPTE9SX0JVRkZFUl9CSVQgfCB0aGlzLmdsLkRFUFRIX0JVRkZFUl9CSVQpO1xuXG5cdFx0Ly8gc2V0dXAgdmlld3BvcnRcblx0XHR0aGlzLmdsLnZpZXdwb3J0KDAsIDAsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuXG5cdFx0dGhpcy5nbC5iaW5kVGV4dHVyZSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRoaXMuZnhhYVRleHR1cmUudGV4dHVyZSk7XG5cblx0XHR0aGlzLnF1YWRTaGFkZXIudXNlU2hhZGVyUHJvZ3JhbSh0aGlzLmdsKTtcblxuXHRcdHRoaXMucXVhZFNoYWRlci5lbmFibGVBdHRyaWJzQXJyYXkodGhpcy5nbCk7XG5cblx0XHR0aGlzLmdsLnF1YWRCdWZmZXIuYmluZEJ1ZmZlcnModGhpcy5nbCk7XG5cblx0XHR0aGlzLmdsLmRyYXdBcnJheXModGhpcy5nbC5UUklBTkdMRV9TVFJJUCwgMCwgdGhpcy5nbC5xdWFkQnVmZmVyLnZlcnRleFBvc2l0aW9uQnVmZmVyLm51bUl0ZW1zKTtcblxuXHRcdHRoaXMucXVhZFNoYWRlci5kaXNhYmxlQXR0cmlic0FycmF5KHRoaXMuZ2wpO1xuXG5cdFx0dGhpcy5nbC5mbHVzaCgpO1xuXHR9O1xuXHRfLmZvcndhcmRSZW5kZXIgPSBmdW5jdGlvbigpIHtcblx0XHQvLyBsYXN0IHJlbmRlclxuXHRcdHRoaXMuZ2wuYmluZEZyYW1lYnVmZmVyKHRoaXMuZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuXHRcdHRoaXMuZ2wuY2xlYXIodGhpcy5nbC5DT0xPUl9CVUZGRVJfQklUIHwgdGhpcy5nbC5ERVBUSF9CVUZGRVJfQklUKTtcblx0XHQvLyBzZXR1cCB2aWV3cG9ydFxuXHRcdHRoaXMuZ2wudmlld3BvcnQoMCwgMCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVyV2lkdGgsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7XG5cblx0XHR0aGlzLnJlbmRlckNvbG9yKCk7XG5cblx0XHR0aGlzLnJlbmRlckV4dHJhcygpO1xuXHR9O1xuXHRfLnJlcGFpbnQgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAodGhpcy5nbCkge1xuXHRcdFx0Ly8gc2V0IHVwIHRoZSBtb2RlbCB2aWV3IG1hdHJpeCB0byB0aGUgc3BlY2lmaWVkIHRyYW5zZm9ybWF0aW9uc1xuXHRcdFx0dGhpcy5nbC5saWdodFZpZXdNYXRyaXggPSBtNC5tdWx0aXBseSh0aGlzLmxpZ2h0aW5nLmNhbWVyYS52aWV3TWF0cml4LCB0aGlzLnJvdGF0aW9uTWF0cml4LCBbXSk7XG5cdFx0XHR0aGlzLmdsLnJvdGF0aW9uTWF0cml4ID0gdGhpcy5yb3RhdGlvbk1hdHJpeDtcblx0XHRcdHRoaXMuZ2wubW9kZWxWaWV3TWF0cml4ID0gdGhpcy5nbC5saWdodFZpZXdNYXRyaXg7XG5cblx0XHRcdHRoaXMucmVuZGVyRGVwdGhNYXAoKTtcblxuXHRcdFx0dGhpcy5nbC5tb2RlbFZpZXdNYXRyaXggPSBtNC5tdWx0aXBseSh0aGlzLmNhbWVyYS52aWV3TWF0cml4LCB0aGlzLnJvdGF0aW9uTWF0cml4LCBbXSk7XG5cblx0XHRcdGlmKHRoaXMuaXNTdXBwb3J0RGVmZXJyZWQoKSAmJiAodGhpcy5zcGVjcy5zc2FvXzNEIHx8IHRoaXMuc3BlY3Mub3V0bGluZV8zRCkpIHtcblx0XHRcdFx0dGhpcy5kZWZlcnJlZFJlbmRlcigpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5mb3J3YXJkUmVuZGVyKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRfLnBpY2sgPSBmdW5jdGlvbih4LCB5LCBpbmNsdWRlQXRvbXMsIGluY2x1ZGVCb25kcykge1xuXHRcdGlmICh0aGlzLmdsKSB7XG5cdFx0XHQvLyBkcmF3IHdpdGggcGljayBmcmFtZWJ1ZmZlclxuXHRcdFx0dmFyIHh1ID0geDtcblx0XHRcdHZhciB5dSA9IHRoaXMuaGVpZ2h0IC0geTtcblx0XHRcdGlmICh0aGlzLnBpeGVsUmF0aW8gIT09IDEpIHtcblx0XHRcdFx0eHUgKj0gdGhpcy5waXhlbFJhdGlvO1xuXHRcdFx0XHR5dSAqPSB0aGlzLnBpeGVsUmF0aW87XG5cdFx0XHR9XG5cblx0XHRcdC8vIHNldCB1cCB0aGUgbW9kZWwgdmlldyBtYXRyaXggdG8gdGhlIHNwZWNpZmllZCB0cmFuc2Zvcm1hdGlvbnNcblx0XHRcdG00Lm11bHRpcGx5KHRoaXMuY2FtZXJhLnZpZXdNYXRyaXgsIHRoaXMucm90YXRpb25NYXRyaXgsIHRoaXMuZ2wubW9kZWxWaWV3TWF0cml4KTtcblx0XHRcdHRoaXMuZ2wucm90YXRpb25NYXRyaXggPSB0aGlzLnJvdGF0aW9uTWF0cml4O1xuXG5cdFx0XHR0aGlzLnBpY2tTaGFkZXIudXNlU2hhZGVyUHJvZ3JhbSh0aGlzLmdsKTtcblx0XHRcdFxuXHRcdFx0Ly8gY3VycmVudCBjbGVhciBjb2xvclxuXHRcdFx0dmFyIGNzID0gdGhpcy5nbC5nZXRQYXJhbWV0ZXIodGhpcy5nbC5DT0xPUl9DTEVBUl9WQUxVRSk7XG5cblx0XHRcdHRoaXMuZ2wuY2xlYXJDb2xvcigxLjAsIDEuMCwgMS4wLCAwLjApO1xuXHRcdFx0dGhpcy5waWNrZXJGcmFtZWJ1ZmZlci5iaW5kKHRoaXMuZ2wsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuXG5cdFx0XHR0aGlzLmdsLmNsZWFyKHRoaXMuZ2wuQ09MT1JfQlVGRkVSX0JJVCB8IHRoaXMuZ2wuREVQVEhfQlVGRkVSX0JJVCk7XG5cblx0XHRcdC8vIHVzZSBkZWZhdWx0IHByb2plY3Rpb24gbWF0cml4IHRvIGRyYXcgdGhlIG1vbGVjdWxlXG5cdFx0XHR0aGlzLnBpY2tTaGFkZXIuc2V0UHJvamVjdGlvbk1hdHJpeCh0aGlzLmdsLCB0aGlzLmNhbWVyYS5wcm9qZWN0aW9uTWF0cml4KTtcblxuXHRcdFx0Ly8gbm90IG5lZWQgdGhlIG5vcm1hbCBmb3IgZGlmZnVzZSBsaWdodCwgd2UgbmVlZCBmbGF0IGNvbG9yXG5cdFx0XHR0aGlzLnBpY2tTaGFkZXIuZW5hYmxlQXR0cmlic0FycmF5KHRoaXMuZ2wpO1xuXG5cdFx0XHR2YXIgb2JqZWN0cyA9IFtdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5tb2xlY3VsZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR0aGlzLm1vbGVjdWxlc1tpXS5yZW5kZXJQaWNrRnJhbWUodGhpcy5nbCwgdGhpcy5zcGVjcywgb2JqZWN0cywgaW5jbHVkZUF0b21zLCBpbmNsdWRlQm9uZHMpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnBpY2tTaGFkZXIuZGlzYWJsZUF0dHJpYnNBcnJheSh0aGlzLmdsKTtcblxuXHRcdFx0dGhpcy5nbC5mbHVzaCgpO1xuXG5cdFx0XHR2YXIgcmdiYSA9IG5ldyBVaW50OEFycmF5KDQpO1xuXHRcdFx0dGhpcy5nbC5yZWFkUGl4ZWxzKHh1IC0gMiwgeXUgKyAyLCAxLCAxLCB0aGlzLmdsLlJHQkEsIHRoaXMuZ2wuVU5TSUdORURfQllURSwgcmdiYSk7XG5cblx0XHRcdHZhciBvYmplY3QgPSB1bmRlZmluZWQ7XG5cdFx0XHR2YXIgaWR4TW9sZWN1bGUgPSByZ2JhWzNdO1xuXHRcdFx0aWYgKGlkeE1vbGVjdWxlID4gMCkge1xuXHRcdFx0XHR2YXIgaWR4QXRvbSA9IHJnYmFbMl0gfCAocmdiYVsxXSA8PCA4KSB8IChyZ2JhWzBdIDw8IDE2KTtcblx0XHRcdFx0b2JqZWN0ID0gb2JqZWN0c1tpZHhBdG9tXTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5nbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG5cdFx0XHQvLyBzZXQgYmFjayB0aGUgY2xlYXIgY29sb3Jcblx0XHRcdHRoaXMuZ2wuY2xlYXJDb2xvcihjc1swXSwgY3NbMV0sIGNzWzJdLCBjc1szXSk7XG5cdFx0XHRyZXR1cm4gb2JqZWN0O1xuXHRcdH1cblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9O1xuXHRfLmNlbnRlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwID0gbmV3IHN0cnVjdHVyZXMuQXRvbSgpO1xuXHRcdGZvciAoIHZhciBrID0gMCwga2sgPSB0aGlzLm1vbGVjdWxlcy5sZW5ndGg7IGsgPCBrazsgaysrKSB7XG5cdFx0XHR2YXIgbSA9IHRoaXMubW9sZWN1bGVzW2tdO1xuXHRcdFx0cC5hZGQzRChtLmdldENlbnRlcjNEKCkpO1xuXHRcdH1cblx0XHRwLnggLz0gdGhpcy5tb2xlY3VsZXMubGVuZ3RoO1xuXHRcdHAueSAvPSB0aGlzLm1vbGVjdWxlcy5sZW5ndGg7XG5cdFx0Zm9yICggdmFyIGsgPSAwLCBrayA9IHRoaXMubW9sZWN1bGVzLmxlbmd0aDsgayA8IGtrOyBrKyspIHtcblx0XHRcdHZhciBtID0gdGhpcy5tb2xlY3VsZXNba107XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbS5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdG0uYXRvbXNbaV0uc3ViM0QocCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAobS5jaGFpbnMgJiYgbS5mcm9tSlNPTikge1xuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbS5jaGFpbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRcdHZhciBjaGFpbiA9IG0uY2hhaW5zW2ldO1xuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBjaGFpbi5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0XHR2YXIgcmVzaWR1ZSA9IGNoYWluW2pdO1xuXHRcdFx0XHRcdFx0cmVzaWR1ZS5jcDEuc3ViM0QocCk7XG5cdFx0XHRcdFx0XHRyZXNpZHVlLmNwMi5zdWIzRChwKTtcblx0XHRcdFx0XHRcdGlmIChyZXNpZHVlLmNwMykge1xuXHRcdFx0XHRcdFx0XHRyZXNpZHVlLmNwMy5zdWIzRChwKTtcblx0XHRcdFx0XHRcdFx0cmVzaWR1ZS5jcDQuc3ViM0QocCk7XG5cdFx0XHRcdFx0XHRcdHJlc2lkdWUuY3A1LnN1YjNEKHApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0Xy5pc1N1cHBvcnREZWZlcnJlZCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmdsLnRleHR1cmVGbG9hdEV4dCAmJiB0aGlzLmdsLmRlcHRoVGV4dHVyZUV4dDtcblx0fTtcblx0Xy5jcmVhdGUgPSBmdW5jdGlvbihpZCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdF9zdXBlci5jcmVhdGUuY2FsbCh0aGlzLCBpZCwgd2lkdGgsIGhlaWdodCk7XG5cdFx0Ly8gc2V0dXAgZ2wgb2JqZWN0XG5cdFx0dHJ5IHtcblx0XHRcdHZhciBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmlkKTtcblx0XHRcdHRoaXMuZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnKTtcblx0XHRcdGlmICghdGhpcy5nbCkge1xuXHRcdFx0XHR0aGlzLmdsID0gY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpO1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHR9XG5cdFx0aWYgKHRoaXMuZ2wpIHtcblx0XHRcblx0XHRcdGlmICh0aGlzLnBpeGVsUmF0aW8gIT09IDEgJiYgdGhpcy5nbC5jYW52YXMud2lkdGggPT09IHRoaXMud2lkdGgpIHtcblx0XHRcdFx0dGhpcy5nbC5jYW52YXMuc3R5bGUud2lkdGggPSB0aGlzLndpZHRoICsgJ3B4Jztcblx0XHRcdFx0dGhpcy5nbC5jYW52YXMuc3R5bGUuaGVpZ2h0ID0gdGhpcy5oZWlnaHQgKyAncHgnO1xuXHRcdFx0XHR0aGlzLmdsLmNhbnZhcy53aWR0aCA9IHRoaXMud2lkdGggKiB0aGlzLnBpeGVsUmF0aW87XG5cdFx0XHRcdHRoaXMuZ2wuY2FudmFzLmhlaWdodCA9IHRoaXMuaGVpZ2h0ICogdGhpcy5waXhlbFJhdGlvO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmdsLmVuYWJsZSh0aGlzLmdsLkRFUFRIX1RFU1QpO1xuXHRcdFx0dGhpcy5nbC5kZXB0aEZ1bmModGhpcy5nbC5MRVFVQUwpO1xuXHRcdFx0dGhpcy5nbC5ibGVuZEZ1bmNTZXBhcmF0ZSh0aGlzLmdsLlNSQ19BTFBIQSwgdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBLCB0aGlzLmdsLk9ORSwgdGhpcy5nbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcblx0XHRcdHRoaXMuZ2wuY2xlYXJEZXB0aCgxLjApO1xuXG5cdFx0XHQvLyBzaXplIG9mIHRleHR1cmUgZm9yIHJlbmRlciBkZXB0aCBtYXAgZnJvbSBsaWdodCB2aWV3XG5cdFx0XHR0aGlzLnNoYWRvd1RleHR1cmVTaXplID0gMTAyNDtcblx0XHRcdC8vIHNldHVwIG1hdHJpY2VzXG5cdFx0XHR0aGlzLnJvdGF0aW9uTWF0cml4ID0gbTQuaWRlbnRpdHkoW10pO1xuXHRcdFx0Ly8gc2V0IHVwIGNhbWVyYVxuXHRcdFx0dGhpcy5jYW1lcmEgPSBuZXcgZDMuQ2FtZXJhKCk7XG5cblx0XHRcdHRoaXMubGFiZWwzRCA9IG5ldyBkMy5MYWJlbCgpO1xuXG5cdFx0XHR0aGlzLmxpZ2h0aW5nID0gbmV3IGQzLkxpZ2h0KHRoaXMuc3BlY3MubGlnaHREaWZmdXNlQ29sb3JfM0QsIHRoaXMuc3BlY3MubGlnaHRTcGVjdWxhckNvbG9yXzNELCB0aGlzLnNwZWNzLmxpZ2h0RGlyZWN0aW9uXzNEKTtcblx0XHRcdFxuXHRcdFx0dGhpcy5mb2dnaW5nID0gbmV3IGQzLkZvZyh0aGlzLnNwZWNzLmZvZ19jb2xvcl8zRCB8fCB0aGlzLnNwZWNzLmJhY2tncm91bmRDb2xvciwgdGhpcy5zcGVjcy5mb2dfc3RhcnRfM0QsIHRoaXMuc3BlY3MuZm9nX2VuZF8zRCwgdGhpcy5zcGVjcy5mb2dfZGVuc2l0eV8zRCk7XG5cdFx0XHRcblx0XHRcdFxuXHRcdFx0Ly8gdW5jb21tZW50IHRoaXMgbGluZSB0byBzZWUgc2hhZG93IHdpdGhvdXQgZGVwdGggdGV4dHVyZSBleHRlbnNpb25cblx0XHRcdHRoaXMuZ2wuZGVwdGhUZXh0dXJlRXh0ID0gdGhpcy5nbC5nZXRFeHRlbnNpb24oJ1dFQkdMX2RlcHRoX3RleHR1cmUnKSB8fCB0aGlzLmdsLmdldEV4dGVuc2lvbignV0VCS0lUX1dFQkdMX2RlcHRoX3RleHR1cmUnKSB8fCB0aGlzLmdsLmdldEV4dGVuc2lvbignTU9aX1dFQkdMX2RlcHRoX3RleHR1cmUnKTtcblx0XHRcdHRoaXMuZ2wudGV4dHVyZUZsb2F0RXh0ID0gdGhpcy5nbC5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0JykgfHwgdGhpcy5nbC5nZXRFeHRlbnNpb24oJ1dFQktJVF9PRVNfdGV4dHVyZV9mbG9hdCcpIHx8IHRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKCdNT1pfT0VTX3RleHR1cmVfZmxvYXQnKTtcblx0XHRcdC8vIHRoaXMuZ2wuc2hhZGVyVGV4dHVyZUxvZEV4dCA9IHRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKCdFWFRfc2hhZGVyX3RleHR1cmVfbG9kJykgfHwgdGhpcy5nbC5nZXRFeHRlbnNpb24oJ1dFQktJVF9FWFRfc2hhZGVyX3RleHR1cmVfbG9kJykgfHwgdGhpcy5nbC5nZXRFeHRlbnNpb24oJ01PWl9FWFRfc2hhZGVyX3RleHR1cmVfbG9kJyk7XG5cdFx0XHQvLyB0aGlzLmdsLmRyYXdCdWZmZXJzRXh0ID0gdGhpcy5nbC5nZXRFeHRlbnNpb24oJ1dFQkdMX2RyYXdfYnVmZmVycycpO1xuXG5cdFx0XHR0aGlzLnNzYW8gPSBuZXcgZDMuU1NBTygpO1xuXG5cdFx0XHQvLyBzZXQgcGlja2VyIGNvbG9yIGF0dGFjaG1lbnRcblx0XHRcdHRoaXMucGlja2VyQ29sb3JUZXh0dXJlID0gbmV3IGQzLlRleHR1cmUoKTtcblx0XHRcdHRoaXMucGlja2VyQ29sb3JUZXh0dXJlLmluaXQodGhpcy5nbCwgdGhpcy5nbC5VTlNJR05FRF9CWVRFLCB0aGlzLmdsLlJHQkEsIHRoaXMuZ2wuUkdCQSk7XG5cblx0XHRcdC8vIHNldCBwaWNrZXIgZGVwdGggYXR0YWNobWVudCBcblx0XHRcdHRoaXMucGlja2VyRGVwdGhSZW5kZXJidWZmZXIgPSBuZXcgZDMuUmVuZGVyYnVmZmVyKCk7XG5cdFx0XHR0aGlzLnBpY2tlckRlcHRoUmVuZGVyYnVmZmVyLmluaXQodGhpcy5nbCwgdGhpcy5nbC5ERVBUSF9DT01QT05FTlQxNik7XG5cblx0XHRcdC8vIHNldCBwaWNrZXIgZnJhbWVidWZmZXJcblx0XHRcdHRoaXMucGlja2VyRnJhbWVidWZmZXIgPSBuZXcgZDMuRnJhbWVidWZmZXIoKTtcblx0XHRcdHRoaXMucGlja2VyRnJhbWVidWZmZXIuaW5pdCh0aGlzLmdsKTtcblx0XHRcdHRoaXMucGlja2VyRnJhbWVidWZmZXIuc2V0Q29sb3JUZXh0dXJlKHRoaXMuZ2wsIHRoaXMucGlja2VyQ29sb3JUZXh0dXJlLnRleHR1cmUpO1xuXHRcdFx0dGhpcy5waWNrZXJGcmFtZWJ1ZmZlci5zZXREZXB0aFJlbmRlcmJ1ZmZlcih0aGlzLmdsLCB0aGlzLnBpY2tlckRlcHRoUmVuZGVyYnVmZmVyLnJlbmRlcmJ1ZmZlcik7XG5cblx0XHRcdC8vIGRlcHRoIG1hcCBmb3Igc2hhZG93aW5nXG5cdFx0XHR0aGlzLmxpZ2h0RGVwdGhNYXBUZXh0dXJlID0gbmV3IGQzLlRleHR1cmUoKTtcblx0XHRcdHRoaXMubGlnaHREZXB0aE1hcFJlbmRlcmJ1ZmZlciA9IG5ldyBkMy5SZW5kZXJidWZmZXIoKTtcblx0XHRcdHRoaXMubGlnaHREZXB0aE1hcEZyYW1lYnVmZmVyID0gbmV3IGQzLkZyYW1lYnVmZmVyKCk7XG5cdFx0XHR0aGlzLmxpZ2h0RGVwdGhNYXBGcmFtZWJ1ZmZlci5pbml0KHRoaXMuZ2wpO1xuXHRcdFx0XG5cdFx0XHRpZih0aGlzLmdsLmRlcHRoVGV4dHVyZUV4dCkge1xuXHRcdFx0XHR0aGlzLmxpZ2h0RGVwdGhNYXBUZXh0dXJlLmluaXQodGhpcy5nbCwgdGhpcy5nbC5VTlNJR05FRF9TSE9SVCwgdGhpcy5nbC5ERVBUSF9DT01QT05FTlQpO1xuXHRcdFx0XHR0aGlzLmxpZ2h0RGVwdGhNYXBSZW5kZXJidWZmZXIuaW5pdCh0aGlzLmdsLCB0aGlzLmdsLlJHQkE0KTtcblx0XHRcdFx0dGhpcy5saWdodERlcHRoTWFwRnJhbWVidWZmZXIuc2V0Q29sb3JSZW5kZXJidWZmZXIodGhpcy5nbCwgdGhpcy5saWdodERlcHRoTWFwUmVuZGVyYnVmZmVyLnJlbmRlcmJ1ZmZlcik7XG5cdFx0XHRcdHRoaXMubGlnaHREZXB0aE1hcEZyYW1lYnVmZmVyLnNldERlcHRoVGV4dHVyZSh0aGlzLmdsLCB0aGlzLmxpZ2h0RGVwdGhNYXBUZXh0dXJlLnRleHR1cmUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5saWdodERlcHRoTWFwVGV4dHVyZS5pbml0KHRoaXMuZ2wsIHRoaXMuZ2wuVU5TSUdORURfQllURSwgdGhpcy5nbC5SR0JBLCB0aGlzLmdsLlJHQkEpO1xuXHRcdFx0XHR0aGlzLmxpZ2h0RGVwdGhNYXBSZW5kZXJidWZmZXIuaW5pdCh0aGlzLmdsLCB0aGlzLmdsLkRFUFRIX0NPTVBPTkVOVDE2KTtcblx0XHRcdFx0dGhpcy5saWdodERlcHRoTWFwRnJhbWVidWZmZXIuc2V0Q29sb3JUZXh0dXJlKHRoaXMuZ2wsIHRoaXMubGlnaHREZXB0aE1hcFRleHR1cmUudGV4dHVyZSk7XG5cdFx0XHRcdHRoaXMubGlnaHREZXB0aE1hcEZyYW1lYnVmZmVyLnNldERlcHRoUmVuZGVyYnVmZmVyKHRoaXMuZ2wsIHRoaXMubGlnaHREZXB0aE1hcFJlbmRlcmJ1ZmZlci5yZW5kZXJidWZmZXIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBkZWZlcnJlZCBzaGFkaW5nIHRleHR1cmVzLCByZW5kZXJidWZmZXJzLCBmcmFtZWJ1ZmZlcnMgYW5kIHNoYWRlcnNcblx0XHRcdGlmKHRoaXMuaXNTdXBwb3J0RGVmZXJyZWQoKSkge1xuXHRcdFx0XHQvLyBnLWJ1ZmZlclxuXHRcdFx0XHR0aGlzLmRlcHRoVGV4dHVyZSA9IG5ldyBkMy5UZXh0dXJlKCk7XG5cdFx0XHRcdHRoaXMuZGVwdGhUZXh0dXJlLmluaXQodGhpcy5nbCwgdGhpcy5nbC5VTlNJR05FRF9TSE9SVCwgdGhpcy5nbC5ERVBUSF9DT01QT05FTlQpO1xuXG5cdFx0XHRcdHRoaXMuY29sb3JUZXh0dXJlID0gbmV3IGQzLlRleHR1cmUoKTtcblx0XHRcdFx0dGhpcy5jb2xvclRleHR1cmUuaW5pdCh0aGlzLmdsLCB0aGlzLmdsLlVOU0lHTkVEX0JZVEUsIHRoaXMuZ2wuUkdCQSk7XG5cblx0XHRcdFx0dGhpcy5wb3NpdGlvblRleHR1cmUgPSBuZXcgZDMuVGV4dHVyZSgpO1xuXHRcdFx0XHR0aGlzLnBvc2l0aW9uVGV4dHVyZS5pbml0KHRoaXMuZ2wsIHRoaXMuZ2wuRkxPQVQsIHRoaXMuZ2wuUkdCQSk7XG5cblx0XHRcdFx0dGhpcy5ub3JtYWxUZXh0dXJlID0gbmV3IGQzLlRleHR1cmUoKTtcblx0XHRcdFx0dGhpcy5ub3JtYWxUZXh0dXJlLmluaXQodGhpcy5nbCwgdGhpcy5nbC5GTE9BVCwgdGhpcy5nbC5SR0JBKTtcblxuXHRcdFx0XHQvLyBwb3N0cHJvY2VzaW5nIGVmZmVjdFxuXHRcdFx0XHQvLyBzc2FvXG5cdFx0XHRcdHRoaXMuc3Nhb1RleHR1cmUgPSBuZXcgZDMuVGV4dHVyZSgpO1xuXHRcdFx0XHR0aGlzLnNzYW9UZXh0dXJlLmluaXQodGhpcy5nbCwgdGhpcy5nbC5GTE9BVCwgdGhpcy5nbC5SR0JBKTtcblxuXHRcdFx0XHQvLyBvdXRsaW5lXG5cdFx0XHRcdHRoaXMub3V0bGluZVRleHR1cmUgPSBuZXcgZDMuVGV4dHVyZSgpO1xuXHRcdFx0XHR0aGlzLm91dGxpbmVUZXh0dXJlLmluaXQodGhpcy5nbCwgdGhpcy5nbC5VTlNJR05FRF9CWVRFLCB0aGlzLmdsLlJHQkEpO1xuXG5cdFx0XHRcdHRoaXMuZnhhYVRleHR1cmUgPSBuZXcgZDMuVGV4dHVyZSgpO1xuXHRcdFx0XHR0aGlzLmZ4YWFUZXh0dXJlLmluaXQodGhpcy5nbCwgdGhpcy5nbC5GTE9BVCwgdGhpcy5nbC5SR0JBKTtcblxuXHRcdFx0XHQvLyB0ZW1wIHRleHR1cmVcblx0XHRcdFx0dGhpcy5pbWFnZVRleHR1cmUgPSBuZXcgZDMuVGV4dHVyZSgpO1xuXHRcdFx0XHR0aGlzLmltYWdlVGV4dHVyZS5pbml0KHRoaXMuZ2wsIHRoaXMuZ2wuRkxPQVQsIHRoaXMuZ2wuUkdCQSk7XG5cblx0XHRcdFx0Ly8gZnJhbWVidWZmZXJcblx0XHRcdFx0dGhpcy5jb2xvckZyYW1lYnVmZmVyID0gbmV3IGQzLkZyYW1lYnVmZmVyKCk7XG5cdFx0XHRcdHRoaXMuY29sb3JGcmFtZWJ1ZmZlci5pbml0KHRoaXMuZ2wpO1xuXHRcdFx0XHR0aGlzLmNvbG9yRnJhbWVidWZmZXIuc2V0Q29sb3JUZXh0dXJlKHRoaXMuZ2wsIHRoaXMuY29sb3JUZXh0dXJlLnRleHR1cmUpO1xuXHRcdFx0XHR0aGlzLmNvbG9yRnJhbWVidWZmZXIuc2V0RGVwdGhUZXh0dXJlKHRoaXMuZ2wsIHRoaXMuZGVwdGhUZXh0dXJlLnRleHR1cmUpO1xuXG5cdFx0XHRcdHRoaXMubm9ybWFsRnJhbWVidWZmZXIgPSBuZXcgZDMuRnJhbWVidWZmZXIoKTtcblx0XHRcdFx0dGhpcy5ub3JtYWxGcmFtZWJ1ZmZlci5pbml0KHRoaXMuZ2wpO1xuXHRcdFx0XHR0aGlzLm5vcm1hbEZyYW1lYnVmZmVyLnNldENvbG9yVGV4dHVyZSh0aGlzLmdsLCB0aGlzLm5vcm1hbFRleHR1cmUudGV4dHVyZSk7XG5cdFx0XHRcdHRoaXMubm9ybWFsRnJhbWVidWZmZXIuc2V0RGVwdGhUZXh0dXJlKHRoaXMuZ2wsIHRoaXMuZGVwdGhUZXh0dXJlLnRleHR1cmUpO1xuXG5cdFx0XHRcdHRoaXMucG9zaXRpb25GcmFtZWJ1ZmZlciA9IG5ldyBkMy5GcmFtZWJ1ZmZlcigpO1xuXHRcdFx0XHR0aGlzLnBvc2l0aW9uRnJhbWVidWZmZXIuaW5pdCh0aGlzLmdsKTtcblx0XHRcdFx0dGhpcy5wb3NpdGlvbkZyYW1lYnVmZmVyLnNldENvbG9yVGV4dHVyZSh0aGlzLmdsLCB0aGlzLnBvc2l0aW9uVGV4dHVyZS50ZXh0dXJlKTtcblx0XHRcdFx0dGhpcy5wb3NpdGlvbkZyYW1lYnVmZmVyLnNldERlcHRoVGV4dHVyZSh0aGlzLmdsLCB0aGlzLmRlcHRoVGV4dHVyZS50ZXh0dXJlKTtcblxuXHRcdFx0XHR0aGlzLnNzYW9GcmFtZWJ1ZmZlciA9IG5ldyBkMy5GcmFtZWJ1ZmZlcigpO1xuXHRcdFx0XHR0aGlzLnNzYW9GcmFtZWJ1ZmZlci5pbml0KHRoaXMuZ2wpO1xuXHRcdFx0XHR0aGlzLnNzYW9GcmFtZWJ1ZmZlci5zZXRDb2xvclRleHR1cmUodGhpcy5nbCwgdGhpcy5zc2FvVGV4dHVyZS50ZXh0dXJlKTtcblxuXHRcdFx0XHR0aGlzLm91dGxpbmVGcmFtZWJ1ZmZlciA9IG5ldyBkMy5GcmFtZWJ1ZmZlcigpO1xuXHRcdFx0XHR0aGlzLm91dGxpbmVGcmFtZWJ1ZmZlci5pbml0KHRoaXMuZ2wpO1xuXHRcdFx0XHR0aGlzLm91dGxpbmVGcmFtZWJ1ZmZlci5zZXRDb2xvclRleHR1cmUodGhpcy5nbCwgdGhpcy5vdXRsaW5lVGV4dHVyZS50ZXh0dXJlKTtcblxuXHRcdFx0XHR0aGlzLmZ4YWFGcmFtZWJ1ZmZlciA9IG5ldyBkMy5GcmFtZWJ1ZmZlcigpO1xuXHRcdFx0XHR0aGlzLmZ4YWFGcmFtZWJ1ZmZlci5pbml0KHRoaXMuZ2wpO1xuXHRcdFx0XHR0aGlzLmZ4YWFGcmFtZWJ1ZmZlci5zZXRDb2xvclRleHR1cmUodGhpcy5nbCwgdGhpcy5meGFhVGV4dHVyZS50ZXh0dXJlKTtcblxuXHRcdFx0XHR0aGlzLnF1YWRGcmFtZWJ1ZmZlciA9IG5ldyBkMy5GcmFtZWJ1ZmZlcigpO1xuXHRcdFx0XHR0aGlzLnF1YWRGcmFtZWJ1ZmZlci5pbml0KHRoaXMuZ2wpO1xuXHRcdFx0XHR0aGlzLnF1YWRGcmFtZWJ1ZmZlci5zZXRDb2xvclRleHR1cmUodGhpcy5nbCwgdGhpcy5pbWFnZVRleHR1cmUudGV4dHVyZSk7XG5cblx0XHRcdFx0dGhpcy5maW5hbEZyYW1lYnVmZmVyID0gbmV3IGQzLkZyYW1lYnVmZmVyKCk7XG5cdFx0XHRcdHRoaXMuZmluYWxGcmFtZWJ1ZmZlci5pbml0KHRoaXMuZ2wpO1xuXHRcdFx0XHR0aGlzLmZpbmFsRnJhbWVidWZmZXIuc2V0Q29sb3JUZXh0dXJlKHRoaXMuZ2wsIHRoaXMuZnhhYVRleHR1cmUudGV4dHVyZSk7XG5cdFx0XHRcdHRoaXMuZmluYWxGcmFtZWJ1ZmZlci5zZXREZXB0aFRleHR1cmUodGhpcy5nbCwgdGhpcy5kZXB0aFRleHR1cmUudGV4dHVyZSk7XG5cblx0XHRcdFx0dGhpcy5ub3JtYWxTaGFkZXIgPSBuZXcgZDMuTm9ybWFsU2hhZGVyKCk7XG5cdFx0XHRcdHRoaXMubm9ybWFsU2hhZGVyLmluaXQodGhpcy5nbCk7XG5cblx0XHRcdFx0dGhpcy5wb3NpdGlvblNoYWRlciA9IG5ldyBkMy5Qb3NpdGlvblNoYWRlcigpO1xuXHRcdFx0XHR0aGlzLnBvc2l0aW9uU2hhZGVyLmluaXQodGhpcy5nbCk7XG5cblx0XHRcdFx0aWYoZDMuU1NBT1NoYWRlcil7XG5cdFx0XHRcdFx0dGhpcy5zc2FvU2hhZGVyID0gbmV3IGQzLlNTQU9TaGFkZXIoKTtcblx0XHRcdFx0XHR0aGlzLnNzYW9TaGFkZXIuaW5pdCh0aGlzLmdsKTtcblx0XG5cdFx0XHRcdFx0dGhpcy5zc2FvQmx1clNoYWRlciA9IG5ldyBkMy5TU0FPQmx1clNoYWRlcigpO1xuXHRcdFx0XHRcdHRoaXMuc3Nhb0JsdXJTaGFkZXIuaW5pdCh0aGlzLmdsKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMub3V0bGluZVNoYWRlciA9IG5ldyBkMy5PdXRsaW5lU2hhZGVyKCk7XG5cdFx0XHRcdHRoaXMub3V0bGluZVNoYWRlci5pbml0KHRoaXMuZ2wpO1xuXG5cdFx0XHRcdHRoaXMubGlnaHRpbmdTaGFkZXIgPSBuZXcgZDMuTGlnaHRpbmdTaGFkZXIoKTtcblx0XHRcdFx0dGhpcy5saWdodGluZ1NoYWRlci5pbml0KHRoaXMuZ2wpO1xuXG5cdFx0XHRcdHRoaXMuZnhhYVNoYWRlciA9IG5ldyBkMy5GWEFBU2hhZGVyKCk7XG5cdFx0XHRcdHRoaXMuZnhhYVNoYWRlci5pbml0KHRoaXMuZ2wpO1xuXG5cdFx0XHRcdHRoaXMucXVhZFNoYWRlciA9IG5ldyBkMy5RdWFkU2hhZGVyKCk7XG5cdFx0XHRcdHRoaXMucXVhZFNoYWRlci5pbml0KHRoaXMuZ2wpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyB0aGlzIGlzIHRoZSBzaGFkZXJzXG5cdFx0XHR0aGlzLmxhYmVsU2hhZGVyID0gbmV3IGQzLkxhYmVsU2hhZGVyKCk7XG5cdFx0XHR0aGlzLmxhYmVsU2hhZGVyLmluaXQodGhpcy5nbCk7XG5cblx0XHRcdHRoaXMucGlja1NoYWRlciA9IG5ldyBkMy5QaWNrU2hhZGVyKCk7XG5cdFx0XHR0aGlzLnBpY2tTaGFkZXIuaW5pdCh0aGlzLmdsKTtcblxuXHRcdFx0dGhpcy5waG9uZ1NoYWRlciA9IG5ldyBkMy5QaG9uZ1NoYWRlcigpO1xuXHRcdFx0dGhpcy5waG9uZ1NoYWRlci5pbml0KHRoaXMuZ2wpO1xuXG5cdFx0XHRpZihkMy5EZXB0aFNoYWRlcil7XG5cdFx0XHRcdHRoaXMuZGVwdGhTaGFkZXIgPSBuZXcgZDMuRGVwdGhTaGFkZXIoKTtcblx0XHRcdFx0dGhpcy5kZXB0aFNoYWRlci5pbml0KHRoaXMuZ2wpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnRleHRUZXh0SW1hZ2UgPSBuZXcgZDMuVGV4dEltYWdlKCk7XG5cdFx0XHR0aGlzLnRleHRUZXh0SW1hZ2UuaW5pdCh0aGlzLmdsKTtcblxuXHRcdFx0dGhpcy5nbC50ZXh0SW1hZ2UgPSBuZXcgZDMuVGV4dEltYWdlKCk7XG5cdFx0XHR0aGlzLmdsLnRleHRJbWFnZS5pbml0KHRoaXMuZ2wpO1xuXG5cdFx0XHR0aGlzLmdsLnRleHRNZXNoID0gbmV3IGQzLlRleHRNZXNoKCk7XG5cdFx0XHR0aGlzLmdsLnRleHRNZXNoLmluaXQodGhpcy5nbCk7XG5cblx0XHRcdC8vIHNldCB1cCBtYXRlcmlhbFxuXHRcdFx0dGhpcy5nbC5tYXRlcmlhbCA9IG5ldyBkMy5NYXRlcmlhbCgpO1xuXG5cdFx0XHR0aGlzLnNldHVwU2NlbmUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5kaXNwbGF5TWVzc2FnZSgpO1xuXHRcdH1cblx0fTtcblx0Xy5kaXNwbGF5TWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmlkKTtcblx0XHRpZiAoY2FudmFzLmdldENvbnRleHQpIHtcblx0XHRcdHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblx0XHRcdGlmICh0aGlzLnNwZWNzLmJhY2tncm91bmRDb2xvcikge1xuXHRcdFx0XHRjdHguZmlsbFN0eWxlID0gdGhpcy5zcGVjcy5iYWNrZ3JvdW5kQ29sb3I7XG5cdFx0XHRcdGN0eC5maWxsUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5lbXB0eU1lc3NhZ2UpIHtcblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9ICcjNzM3NjgzJztcblx0XHRcdFx0Y3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHRcdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG5cdFx0XHRcdGN0eC5mb250ID0gJzE4cHggSGVsdmV0aWNhLCBWZXJkYW5hLCBBcmlhbCwgU2Fucy1zZXJpZic7XG5cdFx0XHRcdGN0eC5maWxsVGV4dCh0aGlzLmVtcHR5TWVzc2FnZSwgdGhpcy53aWR0aCAvIDIsIHRoaXMuaGVpZ2h0IC8gMik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRfLnJlbmRlclRleHQgPSBmdW5jdGlvbih0ZXh0LCBwb3NpdGlvbikge1xuXHRcdHZhciB2ZXJ0ZXhEYXRhID0ge1xuXHRcdFx0cG9zaXRpb24gOiBbXSxcblx0XHRcdHRleENvb3JkIDogW10sXG5cdFx0XHR0cmFuc2xhdGlvbiA6IFtdXG5cdFx0fTtcblx0XHR0aGlzLnRleHRUZXh0SW1hZ2UucHVzaFZlcnRleERhdGEodGV4dCwgcG9zaXRpb24sIDAsIHZlcnRleERhdGEpO1xuXHRcdHRoaXMuZ2wudGV4dE1lc2guc3RvcmVEYXRhKHRoaXMuZ2wsIHZlcnRleERhdGEucG9zaXRpb24sIHZlcnRleERhdGEudGV4Q29vcmQsIHZlcnRleERhdGEudHJhbnNsYXRpb24pO1xuXHRcdFxuXHRcdHRoaXMudGV4dFRleHRJbWFnZS51c2VUZXh0dXJlKHRoaXMuZ2wpO1xuXHRcdHRoaXMuZ2wudGV4dE1lc2gucmVuZGVyKHRoaXMuZ2wpO1xuXHR9O1xuXHRfLnNldHVwU2NlbmUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAodGhpcy5nbCkge1xuXHRcdFx0Ly8gY2xlYXIgdGhlIGNhbnZhc1xuXHRcdFx0Ly8gc2V0IGJhY2tncm91bmQgY29sb3IgZm9yIElFJ3Mgc2FrZSwgc2VlbXMgbGlrZSBhbiBJRSBidWcgd2hlcmUgaGFsZiB0aGUgcmVwYWludHMgZG9uJ3QgcmVuZGVyIGEgYmFja2dyb3VuZFxuXHRcdFx0dmFyIGpxQ2Fwc3VsZSA9IHEoJyMnICsgdGhpcy5pZCk7XG5cdFx0XHRqcUNhcHN1bGUuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgdGhpcy5zcGVjcy5iYWNrZ3JvdW5kQ29sb3IpO1xuXHRcdFx0dmFyIGNzID0gbWF0aC5nZXRSR0IodGhpcy5zcGVjcy5iYWNrZ3JvdW5kQ29sb3IsIDEpO1xuXHRcdFx0dGhpcy5nbC5jbGVhckNvbG9yKGNzWzBdLCBjc1sxXSwgY3NbMl0sIDEuMCk7XG5cdFx0XHR0aGlzLnNwZWNzLmN1bGxCYWNrRmFjZV8zRCA/IHRoaXMuZ2wuZW5hYmxlKHRoaXMuZ2wuQ1VMTF9GQUNFKSA6IHRoaXMuZ2wuZGlzYWJsZSh0aGlzLmdsLkNVTExfRkFDRSk7XG5cdFx0XHQvLyBoZXJlIGlzIHRoZSBzcGhlcmUgYnVmZmVyIHRvIGJlIGRyYXduLCBtYWtlIGl0IG9uY2UsIHRoZW4gc2NhbGVcblx0XHRcdC8vIGFuZCB0cmFuc2xhdGUgdG8gZHJhdyBhdG9tc1xuXHRcdFx0dGhpcy5nbC5zcGhlcmVCdWZmZXIgPSBuZXcgZDMuU3BoZXJlKDEsIHRoaXMuc3BlY3MuYXRvbXNfcmVzb2x1dGlvbl8zRCwgdGhpcy5zcGVjcy5hdG9tc19yZXNvbHV0aW9uXzNEKTtcblx0XHRcdHRoaXMuZ2wuc3RhckJ1ZmZlciA9IG5ldyBkMy5TdGFyKCk7XG5cdFx0XHR0aGlzLmdsLmN5bGluZGVyQnVmZmVyID0gbmV3IGQzLkN5bGluZGVyKDEsIDEsIHRoaXMuc3BlY3MuYm9uZHNfcmVzb2x1dGlvbl8zRCk7XG5cdFx0XHR0aGlzLmdsLmN5bGluZGVyQ2xvc2VkQnVmZmVyID0gbmV3IGQzLkN5bGluZGVyKDEsIDEsIHRoaXMuc3BlY3MuYm9uZHNfcmVzb2x1dGlvbl8zRCwgdHJ1ZSk7XG5cdFx0XHR0aGlzLmdsLmJveEJ1ZmZlciA9IG5ldyBkMy5Cb3goMSwgMSwgMSk7XG5cdFx0XHR0aGlzLmdsLnBpbGxCdWZmZXIgPSBuZXcgZDMuUGlsbCh0aGlzLnNwZWNzLmJvbmRzX3BpbGxEaWFtZXRlcl8zRCAvIDIsIHRoaXMuc3BlY3MuYm9uZHNfcGlsbEhlaWdodF8zRCwgdGhpcy5zcGVjcy5ib25kc19waWxsTGF0aXR1ZGVSZXNvbHV0aW9uXzNELCB0aGlzLnNwZWNzLmJvbmRzX3BpbGxMb25naXR1ZGVSZXNvbHV0aW9uXzNEKTtcblx0XHRcdHRoaXMuZ2wubGluZUJ1ZmZlciA9IG5ldyBkMy5MaW5lKCk7XG5cdFx0XHR0aGlzLmdsLmxpbmVBcnJvd0J1ZmZlciA9IG5ldyBkMy5MaW5lQXJyb3coKTtcblx0XHRcdHRoaXMuZ2wuYXJyb3dCdWZmZXIgPSBuZXcgZDMuQXJyb3coMC4zLCB0aGlzLnNwZWNzLmNvbXBhc3NfcmVzb2x1dGlvbl8zRCk7XG5cdFx0XHR0aGlzLmdsLnF1YWRCdWZmZXIgPSBuZXcgZDMuUXVhZCgpO1xuXHRcdFx0Ly8gdGV4dHVyZSBmb3IgcmVuZGVyaW5nIHRleHRcblx0XHRcdHRoaXMuZ2wudGV4dEltYWdlLnVwZGF0ZUZvbnQodGhpcy5nbCwgdGhpcy5zcGVjcy50ZXh0X2ZvbnRfc2l6ZSwgdGhpcy5zcGVjcy50ZXh0X2ZvbnRfZmFtaWxpZXMsIHRoaXMuc3BlY3MudGV4dF9mb250X2JvbGQsIHRoaXMuc3BlY3MudGV4dF9mb250X2l0YWxpYywgdGhpcy5zcGVjcy50ZXh0X2ZvbnRfc3Ryb2tlXzNEKTtcblx0XHRcdC8vIHNldCB1cCBsaWdodGluZ1xuXHRcdFx0dGhpcy5saWdodGluZy5saWdodFNjZW5lKHRoaXMuc3BlY3MubGlnaHREaWZmdXNlQ29sb3JfM0QsIHRoaXMuc3BlY3MubGlnaHRTcGVjdWxhckNvbG9yXzNELCB0aGlzLnNwZWNzLmxpZ2h0RGlyZWN0aW9uXzNEKTtcblx0XHRcdC8vIHNldCB1cCBmb2dnaW5nXG5cdFx0XHR0aGlzLmZvZ2dpbmcuZm9nU2NlbmUodGhpcy5zcGVjcy5mb2dfY29sb3JfM0QgfHwgdGhpcy5zcGVjcy5iYWNrZ3JvdW5kQ29sb3IsIHRoaXMuc3BlY3MuZm9nX3N0YXJ0XzNELCB0aGlzLnNwZWNzLmZvZ19lbmRfM0QsIHRoaXMuc3BlY3MuZm9nX2RlbnNpdHlfM0QpO1xuXHRcdFx0Ly8gc2V0IHVwIGNvbXBhc3Ncblx0XHRcdHRoaXMuY29tcGFzcyA9IG5ldyBkMy5Db21wYXNzKHRoaXMuZ2wsIHRoaXMuc3BlY3MpO1xuXG5cdFx0XHQvLyBzZXQgdGV4dHVyZSBhbmQgcmVuZGVyYnVmZmVyIHBhcmFtZXRlclxuXHRcdFx0dGhpcy5saWdodERlcHRoTWFwVGV4dHVyZS5zZXRQYXJhbWV0ZXIodGhpcy5nbCwgdGhpcy5zaGFkb3dUZXh0dXJlU2l6ZSwgdGhpcy5zaGFkb3dUZXh0dXJlU2l6ZSk7XG5cdFx0XHR0aGlzLmxpZ2h0RGVwdGhNYXBSZW5kZXJidWZmZXIuc2V0UGFyYW1ldGVyKHRoaXMuZ2wsIHRoaXMuc2hhZG93VGV4dHVyZVNpemUsIHRoaXMuc2hhZG93VGV4dHVyZVNpemUpO1xuXG5cdFx0XHR0aGlzLnBpY2tlckNvbG9yVGV4dHVyZS5zZXRQYXJhbWV0ZXIodGhpcy5nbCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVyV2lkdGgsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7XG5cdFx0XHR0aGlzLnBpY2tlckRlcHRoUmVuZGVyYnVmZmVyLnNldFBhcmFtZXRlcih0aGlzLmdsLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTtcblx0XHRcdFxuXHRcdFx0aWYodGhpcy5pc1N1cHBvcnREZWZlcnJlZCgpKSB7XG5cdFx0XHRcdHRoaXMuZGVwdGhUZXh0dXJlLnNldFBhcmFtZXRlcih0aGlzLmdsLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTtcblxuXHRcdFx0XHR0aGlzLmNvbG9yVGV4dHVyZS5zZXRQYXJhbWV0ZXIodGhpcy5nbCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVyV2lkdGgsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7XG5cblx0XHRcdFx0dGhpcy5pbWFnZVRleHR1cmUuc2V0UGFyYW1ldGVyKHRoaXMuZ2wsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuXG5cdFx0XHRcdHRoaXMucG9zaXRpb25UZXh0dXJlLnNldFBhcmFtZXRlcih0aGlzLmdsLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgdGhpcy5nbC5kcmF3aW5nQnVmZmVySGVpZ2h0KTtcblxuXHRcdFx0XHR0aGlzLm5vcm1hbFRleHR1cmUuc2V0UGFyYW1ldGVyKHRoaXMuZ2wsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuXG5cdFx0XHRcdHRoaXMuc3Nhb1RleHR1cmUuc2V0UGFyYW1ldGVyKHRoaXMuZ2wsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuXG5cdFx0XHRcdHRoaXMub3V0bGluZVRleHR1cmUuc2V0UGFyYW1ldGVyKHRoaXMuZ2wsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuXG5cdFx0XHRcdHRoaXMuZnhhYVRleHR1cmUuc2V0UGFyYW1ldGVyKHRoaXMuZ2wsIHRoaXMuZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCB0aGlzLmdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpO1xuXG5cdFx0XHRcdC8vIHNldCBTU0FPIHBhcmFtZXRlclxuXHRcdFx0XHR0aGlzLnNzYW8uaW5pdFNhbXBsZUtlcm5lbCh0aGlzLnNwZWNzLnNzYW9fa2VybmVsX3NhbXBsZXMpO1xuXG5cdFx0XHRcdHRoaXMuc3Nhby5pbml0Tm9pc2VUZXh0dXJlKHRoaXMuZ2wpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KHRoaXMuc3BlY3MucHJvamVjdGlvblBlcnNwZWN0aXZlXzNEKTtcblxuXHRcdFx0Zm9yICggdmFyIGsgPSAwLCBrayA9IHRoaXMubW9sZWN1bGVzLmxlbmd0aDsgayA8IGtrOyBrKyspIHtcblx0XHRcdFx0dmFyIG1vbCA9IHRoaXMubW9sZWN1bGVzW2tdO1xuXHRcdFx0XHRpZiAoIShtb2wubGFiZWxNZXNoIGluc3RhbmNlb2YgZDMuVGV4dE1lc2gpKSB7XG5cdFx0XHRcdFx0bW9sLmxhYmVsTWVzaCA9IG5ldyBkMy5UZXh0TWVzaCgpO1xuXHRcdFx0XHRcdG1vbC5sYWJlbE1lc2guaW5pdCh0aGlzLmdsKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobW9sLmNoYWlucykge1xuXHRcdFx0XHRcdG1vbC5yaWJib25zID0gW107XG5cdFx0XHRcdFx0bW9sLmNhcnRvb25zID0gW107XG5cdFx0XHRcdFx0bW9sLnR1YmVzID0gW107XG5cdFx0XHRcdFx0bW9sLnBpcGVQbGFua3MgPSBbXTtcblx0XHRcdFx0XHQvLyBzZXQgdXAgcmliYm9uIGRpYWdyYW0gaWYgYXZhaWxhYmxlIGFuZCBub3QgYWxyZWFkeSBzZXR1cFxuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtb2wuY2hhaW5zLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHRcdHZhciBycyA9IG1vbC5jaGFpbnNbal07XG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gcnMubGVuZ3RoIC0gMTsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0cnNbaV0uVGVzdCA9aTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHZhciBpc051Y2xlb3RpZGUgPSBycy5sZW5ndGggPiAzICYmIFJFU0lEVUVbcnNbM10ubmFtZV0gJiYgUkVTSURVRVtyc1szXS5uYW1lXS5hbWlub0NvbG9yID09PSAnI0JFQTA2RSc7XG5cdFx0XHRcdFx0XHRpZiAocnMubGVuZ3RoID4gMCAmJiAhcnNbMF0ubGluZVNlZ21lbnRzKSB7XG5cdFx0XHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBycy5sZW5ndGggLSAxOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRcdFx0XHRcdHJzW2ldLnNldHVwKHJzW2kgKyAxXS5jcDEsIGlzTnVjbGVvdGlkZSA/IDEgOiB0aGlzLnNwZWNzLnByb3RlaW5zX2hvcml6b250YWxSZXNvbHV0aW9uKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoIWlzTnVjbGVvdGlkZSkge1xuXHRcdFx0XHRcdFx0XHRcdGZvciAoIHZhciBpID0gMSwgaWkgPSBycy5sZW5ndGggLSAxOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gcmV2ZXJzZSBndWlkZSBwb2ludHMgaWYgY2FyYm9ueWxcblx0XHRcdFx0XHRcdFx0XHRcdC8vIG9yaWVudGF0aW9uIGZsaXBzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoZXh0ZW5zaW9ucy52ZWMzQW5nbGVGcm9tKHJzW2kgLSAxXS5ELCByc1tpXS5EKSA+IG0uUEkgLyAyKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJzW2ldLmd1aWRlUG9pbnRzU21hbGwucmV2ZXJzZSgpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyc1tpXS5ndWlkZVBvaW50c0xhcmdlLnJldmVyc2UoKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0djMuc2NhbGUocnNbaV0uRCwgLTEpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDIsIGlpID0gcnMubGVuZ3RoIC0gMzsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBjb21wdXRlIGxpbmUgc2VnbWVudHNcblx0XHRcdFx0XHRcdFx0XHRyc1tpXS5jb21wdXRlTGluZVNlZ21lbnRzKHJzW2kgLSAyXSwgcnNbaSAtIDFdLCByc1tpICsgMV0sICFpc051Y2xlb3RpZGUsIGlzTnVjbGVvdGlkZSA/IHRoaXMuc3BlY3MubnVjbGVpY3NfdmVydGljYWxSZXNvbHV0aW9uIDogdGhpcy5zcGVjcy5wcm90ZWluc192ZXJ0aWNhbFJlc29sdXRpb24pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdC8vIHJlbW92ZSB1bm5lZWRlZCBkdW1taWVzXG5cdFx0XHRcdFx0XHRcdHJzLnBvcCgpO1xuXHRcdFx0XHRcdFx0XHRycy5wb3AoKTtcblx0XHRcdFx0XHRcdFx0cnMucG9wKCk7XG5cdFx0XHRcdFx0XHRcdHJzLnNoaWZ0KCk7XG5cdFx0XHRcdFx0XHRcdHJzLnNoaWZ0KCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQvLyBjcmVhdGUgdGhlIGhzbCBjb2xvciBmb3IgdGhlIGNoYWluXG5cdFx0XHRcdFx0XHR2YXIgcmdiID0gbWF0aC5oc2wycmdiKGpqID09PSAxID8gLjUgOiBqIC8gamosIDEsIC41KTtcblx0XHRcdFx0XHRcdHZhciBjaGFpbkNvbG9yID0gJ3JnYignICsgcmdiWzBdICsgJywnICsgcmdiWzFdICsgJywnICsgcmdiWzJdICsgJyknO1xuXHRcdFx0XHRcdFx0cnMuY2hhaW5Db2xvciA9IGNoYWluQ29sb3I7XG5cdFx0XHRcdFx0XHRpZiAoaXNOdWNsZW90aWRlKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0ID0gbmV3IGQzLlR1YmUocnMsIHRoaXMuc3BlY3MubnVjbGVpY3NfdHViZVRoaWNrbmVzcywgdGhpcy5zcGVjcy5udWNsZWljc190dWJlUmVzb2x1dGlvbl8zRCk7XG5cdFx0XHRcdFx0XHRcdHQuY2hhaW5Db2xvciA9IGNoYWluQ29sb3I7XG5cdFx0XHRcdFx0XHRcdG1vbC50dWJlcy5wdXNoKHQpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dmFyIHQgPSBuZXcgZDMuUGlwZVBsYW5rKHJzLCB0aGlzLnNwZWNzKTtcblx0XHRcdFx0XHRcdFx0bW9sLnBpcGVQbGFua3MucHVzaCh0KTtcblx0XHRcdFx0XHRcdFx0dmFyIHJlcyA9IHJzLnNoaWZ0KCk7XG5cdFx0XHRcdFx0XHRcdHZhciByID0ge1xuXHRcdFx0XHRcdFx0XHRcdGZyb250IDogbmV3IGQzLlJpYmJvbihycywgdGhpcy5zcGVjcy5wcm90ZWluc19yaWJib25UaGlja25lc3MsIGZhbHNlKSxcblx0XHRcdFx0XHRcdFx0XHRiYWNrIDogbmV3IGQzLlJpYmJvbihycywgLXRoaXMuc3BlY3MucHJvdGVpbnNfcmliYm9uVGhpY2tuZXNzLCBmYWxzZSlcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0ci5mcm9udC5jaGFpbkNvbG9yID0gY2hhaW5Db2xvcjtcblx0XHRcdFx0XHRcdFx0ci5iYWNrLmNoYWluQ29sb3IgPSBjaGFpbkNvbG9yO1xuXHRcdFx0XHRcdFx0XHRtb2wucmliYm9ucy5wdXNoKHIpO1xuXHRcdFx0XHRcdFx0XHR2YXIgZCA9IHtcblx0XHRcdFx0XHRcdFx0XHRmcm9udCA6IG5ldyBkMy5SaWJib24ocnMsIHRoaXMuc3BlY3MucHJvdGVpbnNfcmliYm9uVGhpY2tuZXNzLCB0cnVlKSxcblx0XHRcdFx0XHRcdFx0XHRiYWNrIDogbmV3IGQzLlJpYmJvbihycywgLXRoaXMuc3BlY3MucHJvdGVpbnNfcmliYm9uVGhpY2tuZXNzLCB0cnVlKVxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0XHRkLmZyb250LmNoYWluQ29sb3IgPSBjaGFpbkNvbG9yO1xuXHRcdFx0XHRcdFx0XHRkLmJhY2suY2hhaW5Db2xvciA9IGNoYWluQ29sb3I7XG5cdFx0XHRcdFx0XHRcdG1vbC5jYXJ0b29ucy5wdXNoKGQpO1xuXHRcdFx0XHRcdFx0XHRycy51bnNoaWZ0KHJlcyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmxhYmVsM0QudXBkYXRlVmVydGljZXNCdWZmZXIodGhpcy5nbCwgdGhpcy5nZXRNb2xlY3VsZXMoKSwgdGhpcy5zcGVjcyk7XG5cdFx0XHQvLyB0aGUgbW9sZWN1bGVzIGluIGZyYW1lIG9mIE1vdmllQ2FudmFzM0QgbXVzdCBiZSBoYW5kbGVkXG5cdFx0XHRpZiAodGhpcyBpbnN0YW5jZW9mIGMuTW92aWVDYW52YXMzRCAmJiB0aGlzLmZyYW1lcykge1xuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5mcmFtZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRcdHZhciBmID0gdGhpcy5mcmFtZXNbaV07XG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IGYubW9scy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0XHR2YXIgbW9sID0gZi5tb2xzW2pdO1xuXHRcdFx0XHRcdFx0aWYgKCEobW9sLmxhYmVsTWVzaCBpbnN0YW5jZW9mIHN0cnVjdHVyZXMuZDMuVGV4dE1lc2gpKSB7XG5cdFx0XHRcdFx0XHRcdG1vbC5sYWJlbE1lc2ggPSBuZXcgc3RydWN0dXJlcy5kMy5UZXh0TWVzaCgpO1xuXHRcdFx0XHRcdFx0XHRtb2wubGFiZWxNZXNoLmluaXQodGhpcy5nbCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMubGFiZWwzRC51cGRhdGVWZXJ0aWNlc0J1ZmZlcih0aGlzLmdsLCBmLm1vbHMsIHRoaXMuc3BlY3MpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRfLnVwZGF0ZVNjZW5lID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCh0aGlzLnNwZWNzLnByb2plY3Rpb25QZXJzcGVjdGl2ZV8zRCk7XG5cblx0XHR0aGlzLmxpZ2h0aW5nLmxpZ2h0U2NlbmUodGhpcy5zcGVjcy5saWdodERpZmZ1c2VDb2xvcl8zRCwgdGhpcy5zcGVjcy5saWdodFNwZWN1bGFyQ29sb3JfM0QsIHRoaXMuc3BlY3MubGlnaHREaXJlY3Rpb25fM0QpO1xuXHRcdFxuXHRcdHRoaXMuZm9nZ2luZy5mb2dTY2VuZSh0aGlzLnNwZWNzLmZvZ19jb2xvcl8zRCB8fCB0aGlzLnNwZWNzLmJhY2tncm91bmRDb2xvciwgdGhpcy5zcGVjcy5mb2dfc3RhcnRfM0QsIHRoaXMuc3BlY3MuZm9nX2VuZF8zRCwgdGhpcy5zcGVjcy5mb2dfZGVuc2l0eV8zRCk7XG5cdFx0XG5cdFx0dGhpcy5yZXBhaW50KCk7XG5cdH07XG5cdF8ubW91c2Vkb3duID0gZnVuY3Rpb24oZSkge1xuXHRcdHRoaXMubGFzdFBvaW50ID0gZS5wO1xuXHR9O1xuXHRfLm1vdXNldXAgPSBmdW5jdGlvbihlKSB7XG5cdFx0dGhpcy5sYXN0UG9pbnQgPSB1bmRlZmluZWQ7XG5cdH07XG5cdF8ucmlnaHRtb3VzZWRvd24gPSBmdW5jdGlvbihlKSB7XG5cdFx0dGhpcy5sYXN0UG9pbnQgPSBlLnA7XG5cdH07XG5cdF8uZHJhZyA9IGZ1bmN0aW9uKGUpIHtcblx0XHRpZih0aGlzLmxhc3RQb2ludCl7XG5cdFx0XHRpZiAoYy5tb25pdG9yLkFMVCkge1xuXHRcdFx0XHR2YXIgdCA9IG5ldyBzdHJ1Y3R1cmVzLlBvaW50KGUucC54LCBlLnAueSk7XG5cdFx0XHRcdHQuc3ViKHRoaXMubGFzdFBvaW50KTtcblx0XHRcdFx0dmFyIHRoZXRhID0gdGhpcy5jYW1lcmEuZmllbGRPZlZpZXcgLyAzNjAgKiBtLlBJO1xuXHRcdFx0XHR2YXIgdGFuVGhldGEgPSBtLnRhbih0aGV0YSk7XG5cdFx0XHRcdHZhciB0b3BTY3JlZW4gPSB0aGlzLmhlaWdodCAvIDIgLyB0aGlzLmNhbWVyYS56b29tO1xuXHRcdFx0XHR2YXIgbmVhclNjcmVlbiA9IHRvcFNjcmVlbiAvIHRhblRoZXRhO1xuXHRcdFx0XHR2YXIgbmVhclJhdGlvID0gdGhpcy5jYW1lcmEuZm9jYWxMZW5ndGgoKSAvIG5lYXJTY3JlZW47XG5cdFx0XHRcdG00LnRyYW5zbGF0ZSh0aGlzLmNhbWVyYS52aWV3TWF0cml4LCBbIHQueCAqIG5lYXJSYXRpbywgLXQueSAqIG5lYXJSYXRpbywgMCBdKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBkaWZ4ID0gZS5wLnggLSB0aGlzLmxhc3RQb2ludC54O1xuXHRcdFx0XHR2YXIgZGlmeSA9IGUucC55IC0gdGhpcy5sYXN0UG9pbnQueTtcblx0XHRcdFx0dmFyIHJvdGF0aW9uID0gbTQucm90YXRlKG00LmlkZW50aXR5KFtdKSwgZGlmeCAqIG0uUEkgLyAxODAuMCwgWyAwLCAxLCAwIF0pO1xuXHRcdFx0XHRtNC5yb3RhdGUocm90YXRpb24sIGRpZnkgKiBtLlBJIC8gMTgwLjAsIFsgMSwgMCwgMCBdKTtcblx0XHRcdFx0dGhpcy5yb3RhdGlvbk1hdHJpeCA9IG00Lm11bHRpcGx5KHJvdGF0aW9uLCB0aGlzLnJvdGF0aW9uTWF0cml4KTtcblx0XHRcdH1cblx0XHRcdHRoaXMubGFzdFBvaW50ID0gZS5wO1xuXHRcdFx0dGhpcy5yZXBhaW50KCk7XG5cdFx0fVxuXHR9O1xuXHRfLm1vdXNld2hlZWwgPSBmdW5jdGlvbihlLCBkZWx0YSkge1xuICAgIFx0ZGVsdGEgPiAwID8gdGhpcy5jYW1lcmEuem9vbUluKCkgOiB0aGlzLmNhbWVyYS56b29tT3V0KCk7XG5cdFx0dGhpcy51cGRhdGVTY2VuZSgpO1xuXHR9O1xuXHRfLm11bHRpdG91Y2htb3ZlID0gZnVuY3Rpb24oZSwgbnVtRmluZ2Vycykge1xuXHRcdGlmIChudW1GaW5nZXJzID09PSAyKSB7XG5cdFx0XHRpZiAodGhpcy5sYXN0UG9pbnQgJiYgdGhpcy5sYXN0UG9pbnQubXVsdGkpIHtcblx0XHRcdFx0dmFyIHQgPSBuZXcgc3RydWN0dXJlcy5Qb2ludChlLnAueCwgZS5wLnkpO1xuXHRcdFx0XHR0LnN1Yih0aGlzLmxhc3RQb2ludCk7XG5cdFx0XHRcdHZhciB0aGV0YSA9IHRoaXMuY2FtZXJhLmZpZWxkT2ZWaWV3IC8gMzYwICogbS5QSTtcblx0XHRcdFx0dmFyIHRhblRoZXRhID0gbS50YW4odGhldGEpO1xuXHRcdFx0XHR2YXIgdG9wU2NyZWVuID0gdGhpcy5oZWlnaHQgLyAyIC8gdGhpcy5jYW1lcmEuem9vbTtcblx0XHRcdFx0dmFyIG5lYXJTY3JlZW4gPSB0b3BTY3JlZW4gLyB0YW5UaGV0YTtcblx0XHRcdFx0dmFyIG5lYXJSYXRpbyA9IHRoaXMuY2FtZXJhLmZvY2FsTGVuZ3RoKCkgLyBuZWFyU2NyZWVuO1xuXHRcdFx0XHRtNC50cmFuc2xhdGUodGhpcy5jYW1lcmEudmlld01hdHJpeCwgWyB0LnggKiBuZWFyUmF0aW8sIC10LnkgKiBuZWFyUmF0aW8sIDAgXSk7XG5cdFx0XHRcdHRoaXMubGFzdFBvaW50ID0gZS5wO1xuXHRcdFx0XHR0aGlzLnJlcGFpbnQoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMubGFzdFBvaW50ID0gZS5wO1xuXHRcdFx0XHR0aGlzLmxhc3RQb2ludC5tdWx0aSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRfLmdlc3R1cmVjaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG5cdFx0aWYgKGUub3JpZ2luYWxFdmVudC5zY2FsZSAtIHRoaXMubGFzdFBpbmNoU2NhbGUgIT09IDApIHtcblx0XHRcdHZhciBtaW5Gb3YgPSAwLjE7XG5cdFx0XHR2YXIgbWF4Rm92ID0gMTc5Ljk7XG5cdFx0XHR2YXIgZHogPSAtKGUub3JpZ2luYWxFdmVudC5zY2FsZSAvIHRoaXMubGFzdFBpbmNoU2NhbGUgLSAxKSAqIDMwO1xuXHRcdFx0aWYoaXNOYU4oZHopKXtcblx0XHRcdFx0Ly8gdGhpcyBzZWVtcyB0byBoYXBwZW4gb24gQW5kcm9pZCB3aGVuIHVzaW5nIG11bHRpcGxlIGZpbmdlcnNcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuICAgIFx0XHRkeiA+IDAgPyB0aGlzLmNhbWVyYS56b29tSW4oKSA6IHRoaXMuY2FtZXJhLnpvb21PdXQoKTtcblx0XHRcdHRoaXMudXBkYXRlU2NlbmUoKTtcblx0XHRcdHRoaXMubGFzdFBpbmNoU2NhbGUgPSBlLm9yaWdpbmFsRXZlbnQuc2NhbGU7XG5cdFx0fVxuXHRcdHRoaXMucmVwYWludCgpO1xuXHR9O1xuXHRfLmdlc3R1cmVlbmQgPSBmdW5jdGlvbihlKSB7XG5cdFx0dGhpcy5sYXN0UGluY2hTY2FsZSA9IDE7XG5cdFx0dGhpcy5sYXN0R2VzdHVyZVJvdGF0ZSA9IDA7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUsIENoZW1Eb29kbGUuZXh0ZW5zaW9ucywgQ2hlbURvb2RsZS5tYXRoLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMsIENoZW1Eb29kbGUuc3RydWN0dXJlcy5kMywgQ2hlbURvb2RsZS5SRVNJRFVFLCBNYXRoLCBkb2N1bWVudCwgQ2hlbURvb2RsZS5saWIubWF0NCwgQ2hlbURvb2RsZS5saWIubWF0MywgQ2hlbURvb2RsZS5saWIudmVjMywgQ2hlbURvb2RsZS5saWIualF1ZXJ5LCB3aW5kb3cpO1xuXG4oZnVuY3Rpb24oYywgaUNoZW1MYWJzLCBxLCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0Yy5Nb2xHcmFiYmVyQ2FudmFzM0QgPSBmdW5jdGlvbihpZCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdGlmIChpZCkge1xuXHRcdFx0dGhpcy5jcmVhdGUoaWQsIHdpZHRoLCBoZWlnaHQpO1xuXHRcdH1cblx0XHR2YXIgc2IgPSBbXTtcblx0XHRzYi5wdXNoKCc8YnI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCInKTtcblx0XHRzYi5wdXNoKGlkKTtcblx0XHRzYi5wdXNoKCdfcXVlcnlcIiBzaXplPVwiMzJcIiB2YWx1ZT1cIlwiIC8+Jyk7XG5cdFx0c2IucHVzaCgnPGJyPjxub2JyPicpO1xuXHRcdHNiLnB1c2goJzxzZWxlY3QgaWQ9XCInKTtcblx0XHRzYi5wdXNoKGlkKTtcblx0XHRzYi5wdXNoKCdfc2VsZWN0XCI+Jyk7XG5cdFx0Ly8gc2IucHVzaCgnPG9wdGlvbiB2YWx1ZT1cImNoZW1leHBlclwiPkNoZW1FeHBlcicpO1xuXHRcdC8vIHNiLnB1c2goJzxvcHRpb24gdmFsdWU9XCJjaGVtc3BpZGVyXCI+Q2hlbVNwaWRlcicpO1xuXHRcdHNiLnB1c2goJzxvcHRpb24gdmFsdWU9XCJwdWJjaGVtXCIgc2VsZWN0ZWQ+UHViQ2hlbScpO1xuXHRcdHNiLnB1c2goJzwvc2VsZWN0PicpO1xuXHRcdHNiLnB1c2goJzxidXR0b24gaWQ9XCInKTtcblx0XHRzYi5wdXNoKGlkKTtcblx0XHRzYi5wdXNoKCdfc3VibWl0XCI+U2hvdyBNb2xlY3VsZTwvYnV0dG9uPicpO1xuXHRcdHNiLnB1c2goJzwvbm9icj4nKTtcblx0XHRkb2N1bWVudC53cml0ZWxuKHNiLmpvaW4oJycpKTtcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0cSgnIycgKyBpZCArICdfc3VibWl0JykuY2xpY2soZnVuY3Rpb24oKSB7XG5cdFx0XHRzZWxmLnNlYXJjaCgpO1xuXHRcdH0pO1xuXHRcdHEoJyMnICsgaWQgKyAnX3F1ZXJ5Jykua2V5cHJlc3MoZnVuY3Rpb24oZSkge1xuXHRcdFx0aWYgKGUud2hpY2ggPT09IDEzKSB7XG5cdFx0XHRcdHNlbGYuc2VhcmNoKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG5cdHZhciBfID0gYy5Nb2xHcmFiYmVyQ2FudmFzM0QucHJvdG90eXBlID0gbmV3IGMuX0NhbnZhczNEKCk7XG5cdF8uc2V0U2VhcmNoVGVybSA9IGZ1bmN0aW9uKHRlcm0pIHtcblx0XHRxKCcjJyArIHRoaXMuaWQgKyAnX3F1ZXJ5JykudmFsKHRlcm0pO1xuXHRcdHRoaXMuc2VhcmNoKCk7XG5cdH07XG5cdF8uc2VhcmNoID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdGlDaGVtTGFicy5nZXRNb2xlY3VsZUZyb21EYXRhYmFzZShxKCcjJyArIHRoaXMuaWQgKyAnX3F1ZXJ5JykudmFsKCksIHtcblx0XHRcdGRhdGFiYXNlIDogcSgnIycgKyB0aGlzLmlkICsgJ19zZWxlY3QnKS52YWwoKSxcblx0XHRcdGRpbWVuc2lvbiA6IDNcblx0XHR9LCBmdW5jdGlvbihtb2wpIHtcblx0XHRcdHNlbGYubG9hZE1vbGVjdWxlKG1vbCk7XG5cdFx0fSk7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUsIENoZW1Eb29kbGUuaUNoZW1MYWJzLCBDaGVtRG9vZGxlLmxpYi5qUXVlcnksIGRvY3VtZW50KTtcbihmdW5jdGlvbihjLCBzdHJ1Y3R1cmVzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRjLk1vdmllQ2FudmFzM0QgPSBmdW5jdGlvbihpZCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdGlmIChpZCkge1xuXHRcdFx0dGhpcy5jcmVhdGUoaWQsIHdpZHRoLCBoZWlnaHQpO1xuXHRcdH1cblx0XHR0aGlzLmZyYW1lcyA9IFtdO1xuXHR9O1xuXHRjLk1vdmllQ2FudmFzM0QuUExBWV9PTkNFID0gMDtcblx0Yy5Nb3ZpZUNhbnZhczNELlBMQVlfTE9PUCA9IDE7XG5cdGMuTW92aWVDYW52YXMzRC5QTEFZX1NQUklORyA9IDI7XG5cdHZhciBfID0gYy5Nb3ZpZUNhbnZhczNELnByb3RvdHlwZSA9IG5ldyBjLl9DYW52YXMzRCgpO1xuXHRfLnRpbWVvdXQgPSA1MDtcblx0Xy5mcmFtZU51bWJlciA9IDA7XG5cdF8ucGxheU1vZGUgPSAyO1xuXHRfLnJldmVyc2UgPSBmYWxzZTtcblx0Xy5zdGFydEFuaW1hdGlvbiA9IGMuX0FuaW1hdG9yQ2FudmFzLnByb3RvdHlwZS5zdGFydEFuaW1hdGlvbjtcblx0Xy5zdG9wQW5pbWF0aW9uID0gYy5fQW5pbWF0b3JDYW52YXMucHJvdG90eXBlLnN0b3BBbmltYXRpb247XG5cdF8uaXNSdW5uaW5nID0gYy5fQW5pbWF0b3JDYW52YXMucHJvdG90eXBlLmlzUnVubmluZztcblx0Xy5kYmxjbGljayA9IGMuUm90YXRvckNhbnZhcy5wcm90b3R5cGUuZGJsY2xpY2s7XG5cdF8ubmV4dEZyYW1lID0gZnVuY3Rpb24oZGVsdGEpIHtcblx0XHR2YXIgZiA9IHRoaXMuZnJhbWVzW3RoaXMuZnJhbWVOdW1iZXJdO1xuXHRcdHRoaXMubW9sZWN1bGVzID0gZi5tb2xzO1xuXHRcdHRoaXMuc2hhcGVzID0gZi5zaGFwZXM7XG5cdFx0aWYgKHRoaXMucGxheU1vZGUgPT09IDIgJiYgdGhpcy5yZXZlcnNlKSB7XG5cdFx0XHR0aGlzLmZyYW1lTnVtYmVyLS07XG5cdFx0XHRpZiAodGhpcy5mcmFtZU51bWJlciA8IDApIHtcblx0XHRcdFx0dGhpcy5mcmFtZU51bWJlciA9IDE7XG5cdFx0XHRcdHRoaXMucmV2ZXJzZSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmZyYW1lTnVtYmVyKys7XG5cdFx0XHRpZiAodGhpcy5mcmFtZU51bWJlciA+PSB0aGlzLmZyYW1lcy5sZW5ndGgpIHtcblx0XHRcdFx0aWYgKHRoaXMucGxheU1vZGUgPT09IDIpIHtcblx0XHRcdFx0XHR0aGlzLmZyYW1lTnVtYmVyIC09IDI7XG5cdFx0XHRcdFx0dGhpcy5yZXZlcnNlID0gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLmZyYW1lTnVtYmVyID0gMDtcblx0XHRcdFx0XHRpZiAodGhpcy5wbGF5TW9kZSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0dGhpcy5zdG9wQW5pbWF0aW9uKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRfLmNlbnRlciA9IGZ1bmN0aW9uKCkge1xuXHRcdC8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gdG8gY2VudGVyIHRoZSBlbnRpcmUgbW92aWVcblx0XHR2YXIgcCA9IG5ldyBzdHJ1Y3R1cmVzLkF0b20oKTtcblx0XHR2YXIgZmlyc3QgPSB0aGlzLmZyYW1lc1swXTtcblx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gZmlyc3QubW9scy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRwLmFkZDNEKGZpcnN0Lm1vbHNbal0uZ2V0Q2VudGVyM0QoKSk7XG5cdFx0fVxuXHRcdHAueCAvPSBmaXJzdC5tb2xzLmxlbmd0aDtcblx0XHRwLnkgLz0gZmlyc3QubW9scy5sZW5ndGg7XG5cdFx0dmFyIGNlbnRlciA9IG5ldyBzdHJ1Y3R1cmVzLkF0b20oKTtcblx0XHRjZW50ZXIuc3ViM0QocCk7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuZnJhbWVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBmID0gdGhpcy5mcmFtZXNbaV07XG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gZi5tb2xzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0dmFyIG1vbCA9IGYubW9sc1tqXTtcblx0XHRcdFx0Zm9yICggdmFyIGsgPSAwLCBrayA9IG1vbC5hdG9tcy5sZW5ndGg7IGsgPCBrazsgaysrKSB7XG5cdFx0XHRcdFx0bW9sLmF0b21zW2tdLmFkZDNEKGNlbnRlcik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdF8uYWRkRnJhbWUgPSBmdW5jdGlvbihtb2xlY3VsZXMsIHNoYXBlcykge1xuXHRcdHRoaXMuZnJhbWVzLnB1c2goe1xuXHRcdFx0bW9scyA6IG1vbGVjdWxlcyxcblx0XHRcdHNoYXBlcyA6IHNoYXBlc1xuXHRcdH0pO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLCBDaGVtRG9vZGxlLnN0cnVjdHVyZXMpO1xuXG4oZnVuY3Rpb24oYywgbSwgbTQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdC8vIGtlZXAgdGhlc2UgZGVjbGFyYXRpb24gb3V0c2lkZSB0aGUgbG9vcCB0byBhdm9pZCBvdmVyaGVhZFxuXHR2YXIgbWF0cml4ID0gW107XG5cdHZhciB4QXhpcyA9IFsgMSwgMCwgMCBdO1xuXHR2YXIgeUF4aXMgPSBbIDAsIDEsIDAgXTtcblx0dmFyIHpBeGlzID0gWyAwLCAwLCAxIF07XG5cblx0Yy5Sb3RhdG9yQ2FudmFzM0QgPSBmdW5jdGlvbihpZCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdGlmIChpZCkge1xuXHRcdFx0dGhpcy5jcmVhdGUoaWQsIHdpZHRoLCBoZWlnaHQpO1xuXHRcdH1cblx0fTtcblx0dmFyIF8gPSBjLlJvdGF0b3JDYW52YXMzRC5wcm90b3R5cGUgPSBuZXcgYy5fQ2FudmFzM0QoKTtcblx0Xy50aW1lb3V0ID0gMzM7XG5cdHZhciBpbmNyZW1lbnQgPSBtLlBJIC8gMTU7XG5cdF8ueEluY3JlbWVudCA9IGluY3JlbWVudDtcblx0Xy55SW5jcmVtZW50ID0gaW5jcmVtZW50O1xuXHRfLnpJbmNyZW1lbnQgPSBpbmNyZW1lbnQ7XG5cdF8uc3RhcnRBbmltYXRpb24gPSBjLl9BbmltYXRvckNhbnZhcy5wcm90b3R5cGUuc3RhcnRBbmltYXRpb247XG5cdF8uc3RvcEFuaW1hdGlvbiA9IGMuX0FuaW1hdG9yQ2FudmFzLnByb3RvdHlwZS5zdG9wQW5pbWF0aW9uO1xuXHRfLmlzUnVubmluZyA9IGMuX0FuaW1hdG9yQ2FudmFzLnByb3RvdHlwZS5pc1J1bm5pbmc7XG5cdF8uZGJsY2xpY2sgPSBjLlJvdGF0b3JDYW52YXMucHJvdG90eXBlLmRibGNsaWNrO1xuXHRfLm1vdXNlZG93biA9IHVuZGVmaW5lZDtcblx0Xy5yaWdodG1vdXNlZG93biA9IHVuZGVmaW5lZDtcblx0Xy5kcmFnID0gdW5kZWZpbmVkO1xuXHRfLm1vdXNld2hlZWwgPSB1bmRlZmluZWQ7XG5cdF8ubmV4dEZyYW1lID0gZnVuY3Rpb24oZGVsdGEpIHtcblx0XHRpZiAodGhpcy5tb2xlY3VsZXMubGVuZ3RoID09PSAwICYmIHRoaXMuc2hhcGVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0dGhpcy5zdG9wQW5pbWF0aW9uKCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdG00LmlkZW50aXR5KG1hdHJpeCk7XG5cdFx0dmFyIGNoYW5nZSA9IGRlbHRhIC8gMTAwMDtcblx0XHRtNC5yb3RhdGUobWF0cml4LCB0aGlzLnhJbmNyZW1lbnQgKiBjaGFuZ2UsIHhBeGlzKTtcblx0XHRtNC5yb3RhdGUobWF0cml4LCB0aGlzLnlJbmNyZW1lbnQgKiBjaGFuZ2UsIHlBeGlzKTtcblx0XHRtNC5yb3RhdGUobWF0cml4LCB0aGlzLnpJbmNyZW1lbnQgKiBjaGFuZ2UsIHpBeGlzKTtcblx0XHRtNC5tdWx0aXBseSh0aGlzLnJvdGF0aW9uTWF0cml4LCBtYXRyaXgpO1xuXHR9O1xuXG59KShDaGVtRG9vZGxlLCBNYXRoLCBDaGVtRG9vZGxlLmxpYi5tYXQ0KTtcbihmdW5jdGlvbihjLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRjLlRyYW5zZm9ybUNhbnZhczNEID0gZnVuY3Rpb24oaWQsIHdpZHRoLCBoZWlnaHQpIHtcblx0XHRpZiAoaWQpIHtcblx0XHRcdHRoaXMuY3JlYXRlKGlkLCB3aWR0aCwgaGVpZ2h0KTtcblx0XHR9XG5cdH07XG5cdGMuVHJhbnNmb3JtQ2FudmFzM0QucHJvdG90eXBlID0gbmV3IGMuX0NhbnZhczNEKCk7XG5cbn0pKENoZW1Eb29kbGUpO1xuKGZ1bmN0aW9uKGMsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGMuVmlld2VyQ2FudmFzM0QgPSBmdW5jdGlvbihpZCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdGlmIChpZCkge1xuXHRcdFx0dGhpcy5jcmVhdGUoaWQsIHdpZHRoLCBoZWlnaHQpO1xuXHRcdH1cblx0fTtcblx0dmFyIF8gPSBjLlZpZXdlckNhbnZhczNELnByb3RvdHlwZSA9IG5ldyBjLl9DYW52YXMzRCgpO1xuXHRfLm1vdXNlZG93biA9IHVuZGVmaW5lZDtcblx0Xy5yaWdodG1vdXNlZG93biA9IHVuZGVmaW5lZDtcblx0Xy5kcmFnID0gdW5kZWZpbmVkO1xuXHRfLm1vdXNld2hlZWwgPSB1bmRlZmluZWQ7XG5cbn0pKENoZW1Eb29kbGUpO1xuXG4oZnVuY3Rpb24oYywgZXh0ZW5zaW9ucywgbWF0aCwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGZ1bmN0aW9uIFBlcmlvZGljQ2VsbChlbGVtZW50LCB4LCB5LCBkaW1lbnNpb24pIHtcblx0XHR0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblx0XHR0aGlzLmRpbWVuc2lvbiA9IGRpbWVuc2lvbjtcblx0XHR0aGlzLmFsbG93TXVsdGlwbGVTZWxlY3Rpb25zID0gZmFsc2U7XG5cdH1cblxuXHRjLlBlcmlvZGljVGFibGVDYW52YXMgPSBmdW5jdGlvbihpZCwgY2VsbERpbWVuc2lvbikge1xuXHRcdHRoaXMucGFkZGluZyA9IDU7XG5cdFx0aWYgKGlkKSB7XG5cdFx0XHR0aGlzLmNyZWF0ZShpZCwgY2VsbERpbWVuc2lvbiAqIDE4ICsgdGhpcy5wYWRkaW5nICogMiwgY2VsbERpbWVuc2lvbiAqIDEwICsgdGhpcy5wYWRkaW5nICogMik7XG5cdFx0fVxuXHRcdHRoaXMuY2VsbERpbWVuc2lvbiA9IGNlbGxEaW1lbnNpb24gPyBjZWxsRGltZW5zaW9uIDogMjA7XG5cdFx0dGhpcy5zZXR1cFRhYmxlKCk7XG5cdFx0dGhpcy5yZXBhaW50KCk7XG5cdH07XG5cdHZhciBfID0gYy5QZXJpb2RpY1RhYmxlQ2FudmFzLnByb3RvdHlwZSA9IG5ldyBjLl9DYW52YXMoKTtcblx0Xy5sb2FkTW9sZWN1bGUgPSB1bmRlZmluZWQ7XG5cdF8uZ2V0TW9sZWN1bGUgPSB1bmRlZmluZWQ7XG5cdF8uZ2V0SG92ZXJlZEVsZW1lbnQgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAodGhpcy5ob3ZlcmVkKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5ob3ZlcmVkLmVsZW1lbnQ7XG5cdFx0fVxuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH07XG5cdF8uaW5uZXJSZXBhaW50ID0gZnVuY3Rpb24oY3R4KSB7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuY2VsbHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dGhpcy5kcmF3Q2VsbChjdHgsIHRoaXMuc3BlY3MsIHRoaXMuY2VsbHNbaV0pO1xuXHRcdH1cblx0XHRpZiAodGhpcy5ob3ZlcmVkKSB7XG5cdFx0XHR0aGlzLmRyYXdDZWxsKGN0eCwgdGhpcy5zcGVjcywgdGhpcy5ob3ZlcmVkKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuc2VsZWN0ZWQpIHtcblx0XHRcdHRoaXMuZHJhd0NlbGwoY3R4LCB0aGlzLnNwZWNzLCB0aGlzLnNlbGVjdGVkKTtcblx0XHR9XG5cdH07XG5cdF8uc2V0dXBUYWJsZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuY2VsbHMgPSBbXTtcblx0XHR2YXIgeCA9IHRoaXMucGFkZGluZztcblx0XHR2YXIgeSA9IHRoaXMucGFkZGluZztcblx0XHR2YXIgY291bnQgPSAwO1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBjLlNZTUJPTFMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0aWYgKGNvdW50ID09PSAxOCkge1xuXHRcdFx0XHRjb3VudCA9IDA7XG5cdFx0XHRcdHkgKz0gdGhpcy5jZWxsRGltZW5zaW9uO1xuXHRcdFx0XHR4ID0gdGhpcy5wYWRkaW5nO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGUgPSBjLkVMRU1FTlRbYy5TWU1CT0xTW2ldXTtcblx0XHRcdGlmIChlLmF0b21pY051bWJlciA9PT0gMikge1xuXHRcdFx0XHR4ICs9IDE2ICogdGhpcy5jZWxsRGltZW5zaW9uO1xuXHRcdFx0XHRjb3VudCArPSAxNjtcblx0XHRcdH0gZWxzZSBpZiAoZS5hdG9taWNOdW1iZXIgPT09IDUgfHwgZS5hdG9taWNOdW1iZXIgPT09IDEzKSB7XG5cdFx0XHRcdHggKz0gMTAgKiB0aGlzLmNlbGxEaW1lbnNpb247XG5cdFx0XHRcdGNvdW50ICs9IDEwO1xuXHRcdFx0fVxuXHRcdFx0aWYgKChlLmF0b21pY051bWJlciA8IDU4IHx8IGUuYXRvbWljTnVtYmVyID4gNzEgJiYgZS5hdG9taWNOdW1iZXIgPCA5MCB8fCBlLmF0b21pY051bWJlciA+IDEwMykgJiYgZS5hdG9taWNOdW1iZXIgPD0gMTE4KSB7XG5cdFx0XHRcdHRoaXMuY2VsbHMucHVzaChuZXcgUGVyaW9kaWNDZWxsKGUsIHgsIHksIHRoaXMuY2VsbERpbWVuc2lvbikpO1xuXHRcdFx0XHR4ICs9IHRoaXMuY2VsbERpbWVuc2lvbjtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdH1cblx0XHR9XG5cdFx0eSArPSAyICogdGhpcy5jZWxsRGltZW5zaW9uO1xuXHRcdHggPSAzICogdGhpcy5jZWxsRGltZW5zaW9uICsgdGhpcy5wYWRkaW5nO1xuXHRcdGZvciAoIHZhciBpID0gNTc7IGkgPCAxMDQ7IGkrKykge1xuXHRcdFx0dmFyIGUgPSBjLkVMRU1FTlRbYy5TWU1CT0xTW2ldXTtcblx0XHRcdGlmIChlLmF0b21pY051bWJlciA9PT0gOTApIHtcblx0XHRcdFx0eSArPSB0aGlzLmNlbGxEaW1lbnNpb247XG5cdFx0XHRcdHggPSAzICogdGhpcy5jZWxsRGltZW5zaW9uICsgdGhpcy5wYWRkaW5nO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGUuYXRvbWljTnVtYmVyID49IDU4ICYmIGUuYXRvbWljTnVtYmVyIDw9IDcxIHx8IGUuYXRvbWljTnVtYmVyID49IDkwICYmIGUuYXRvbWljTnVtYmVyIDw9IDEwMykge1xuXHRcdFx0XHR0aGlzLmNlbGxzLnB1c2gobmV3IFBlcmlvZGljQ2VsbChlLCB4LCB5LCB0aGlzLmNlbGxEaW1lbnNpb24pKTtcblx0XHRcdFx0eCArPSB0aGlzLmNlbGxEaW1lbnNpb247XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRfLmRyYXdDZWxsID0gZnVuY3Rpb24oY3R4LCBzcGVjcywgY2VsbCkge1xuXHRcdHZhciByYWRncmFkID0gY3R4LmNyZWF0ZVJhZGlhbEdyYWRpZW50KGNlbGwueCArIGNlbGwuZGltZW5zaW9uIC8gMywgY2VsbC55ICsgY2VsbC5kaW1lbnNpb24gLyAzLCBjZWxsLmRpbWVuc2lvbiAqIDEuNSwgY2VsbC54ICsgY2VsbC5kaW1lbnNpb24gLyAzLCBjZWxsLnkgKyBjZWxsLmRpbWVuc2lvbiAvIDMsIGNlbGwuZGltZW5zaW9uIC8gMTApO1xuXHRcdHJhZGdyYWQuYWRkQ29sb3JTdG9wKDAsICcjMDAwMDAwJyk7XG5cdFx0cmFkZ3JhZC5hZGRDb2xvclN0b3AoLjcsIGNlbGwuZWxlbWVudC5qbW9sQ29sb3IpO1xuXHRcdHJhZGdyYWQuYWRkQ29sb3JTdG9wKDEsICcjRkZGRkZGJyk7XG5cdFx0Y3R4LmZpbGxTdHlsZSA9IHJhZGdyYWQ7XG5cdFx0ZXh0ZW5zaW9ucy5jb250ZXh0Um91bmRSZWN0KGN0eCwgY2VsbC54LCBjZWxsLnksIGNlbGwuZGltZW5zaW9uLCBjZWxsLmRpbWVuc2lvbiwgY2VsbC5kaW1lbnNpb24gLyA4KTtcblx0XHRpZiAoY2VsbCA9PT0gdGhpcy5ob3ZlcmVkIHx8IGNlbGwgPT09IHRoaXMuc2VsZWN0ZWQgfHwgY2VsbC5zZWxlY3RlZCkge1xuXHRcdFx0Y3R4LmxpbmVXaWR0aCA9IDI7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSAnI2MxMDAwMCc7XG5cdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHRjdHguZmlsbFN0eWxlID0gJ3doaXRlJztcblx0XHR9XG5cdFx0Y3R4LmZpbGwoKTtcblx0XHRjdHguZm9udCA9IGV4dGVuc2lvbnMuZ2V0Rm9udFN0cmluZyhzcGVjcy50ZXh0X2ZvbnRfc2l6ZSwgc3BlY3MudGV4dF9mb250X2ZhbWlsaWVzKTtcblx0XHRjdHguZmlsbFN0eWxlID0gc3BlY3MudGV4dF9jb2xvcjtcblx0XHRjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cdFx0Y3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuXHRcdGN0eC5maWxsVGV4dChjZWxsLmVsZW1lbnQuc3ltYm9sLCBjZWxsLnggKyBjZWxsLmRpbWVuc2lvbiAvIDIsIGNlbGwueSArIGNlbGwuZGltZW5zaW9uIC8gMik7XG5cdH07XG5cdF8uY2xpY2sgPSBmdW5jdGlvbihlKSB7XG5cdFx0aWYgKHRoaXMuaG92ZXJlZCkge1xuXHRcdFx0aWYodGhpcy5hbGxvd011bHRpcGxlU2VsZWN0aW9ucyl7XG5cdFx0XHRcdHRoaXMuaG92ZXJlZC5zZWxlY3RlZCA9ICF0aGlzLmhvdmVyZWQuc2VsZWN0ZWQ7XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0dGhpcy5zZWxlY3RlZCA9IHRoaXMuaG92ZXJlZDtcblx0XHRcdH1cblx0XHRcdHRoaXMucmVwYWludCgpO1xuXHRcdH1cblx0fTtcblx0Xy50b3VjaHN0YXJ0ID0gZnVuY3Rpb24oZSl7XG5cdFx0Ly8gdHJ5IHRvIGhvdmVyIGFuIGVsZW1lbnRcblx0XHR0aGlzLm1vdXNlbW92ZShlKTtcblx0fTtcblx0Xy5tb3VzZW1vdmUgPSBmdW5jdGlvbihlKSB7XG5cdFx0dmFyIHggPSBlLnAueDtcblx0XHR2YXIgeSA9IGUucC55O1xuXHRcdHRoaXMuaG92ZXJlZCA9IHVuZGVmaW5lZDtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5jZWxscy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgYyA9IHRoaXMuY2VsbHNbaV07XG5cdFx0XHRpZiAobWF0aC5pc0JldHdlZW4oeCwgYy54LCBjLnggKyBjLmRpbWVuc2lvbikgJiYgbWF0aC5pc0JldHdlZW4oeSwgYy55LCBjLnkgKyBjLmRpbWVuc2lvbikpIHtcblx0XHRcdFx0dGhpcy5ob3ZlcmVkID0gYztcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMucmVwYWludCgpO1xuXHR9O1xuXHRfLm1vdXNlb3V0ID0gZnVuY3Rpb24oZSkge1xuXHRcdHRoaXMuaG92ZXJlZCA9IHVuZGVmaW5lZDtcblx0XHR0aGlzLnJlcGFpbnQoKTtcblx0fTtcblxufSkoQ2hlbURvb2RsZSwgQ2hlbURvb2RsZS5leHRlbnNpb25zLCBDaGVtRG9vZGxlLm1hdGgsIGRvY3VtZW50KTtcblxuKGZ1bmN0aW9uKGlvLCBkb2N1bWVudCwgd2luZG93LCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRpby5wbmcgPSB7fTtcblxuXHRpby5wbmcuc3RyaW5nID0gZnVuY3Rpb24oY2FudmFzKSB7XG5cdFx0Ly8gdGhpcyB3aWxsIG5vdCB3b3JrIGZvciBXZWJHTCBjYW52YXNlcyBpbiBzb21lIGJyb3dzZXJzXG5cdFx0Ly8gdG8gZml4IHRoYXQgeW91IG5lZWQgdG8gc2V0IHRoZSBcInByZXNlcnZlRHJhd2luZ0J1ZmZlclwiIHRvIHRydWUgd2hlblxuXHRcdC8vIGNyZWF0aW5nIHRoZSBXZWJHTCBjb250ZXh0XG5cdFx0Ly8gbm90ZSB0aGF0IHRoaXMgd2lsbCBjYXVzZSBwZXJmb3JtYW5jZSBpc3N1ZXMgb24gc29tZSBwbGF0Zm9ybXMgYW5kIGlzXG5cdFx0Ly8gdGhlcmVmb3JlIG5vdCBkb25lIGJ5IGRlZmF1bHRcblx0XHRyZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY2FudmFzLmlkKS50b0RhdGFVUkwoJ2ltYWdlL3BuZycpO1xuXHR9O1xuXG5cdGlvLnBuZy5vcGVuID0gZnVuY3Rpb24oY2FudmFzKSB7XG5cdFx0d2luZG93Lm9wZW4odGhpcy5zdHJpbmcoY2FudmFzKSk7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuaW8sIGRvY3VtZW50LCB3aW5kb3cpO1xuXG4oZnVuY3Rpb24oaW8sIHEsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGlvLmZpbGUgPSB7fTtcblxuXHQvLyB0aGlzIGZ1bmN0aW9uIHdpbGwgb25seSB3b3JrIHdpdGggZmlsZXMgZnJvbSB0aGUgc2FtZSBvcmlnaW4gaXQgaXMgYmVpbmdcblx0Ly8gY2FsbGVkIGZyb20sIHVubGVzcyB0aGUgcmVjZWl2aW5nIHNlcnZlciBzdXBwb3J0cyBYSFIyXG5cdGlvLmZpbGUuY29udGVudCA9IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHtcblx0XHRxLmdldCh1cmwsICcnLCBjYWxsYmFjayk7XG5cdH07XG5cbn0pKENoZW1Eb29kbGUuaW8sIENoZW1Eb29kbGUubGliLmpRdWVyeSk7XG5cbihmdW5jdGlvbihjLCBpQ2hlbUxhYnMsIGlvLCBzdHJ1Y3R1cmVzLCBxLCBsb2NhdGlvbiwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0aUNoZW1MYWJzLlNFUlZFUl9VUkwgPSAnaHR0cHM6Ly9pY2hlbWxhYnMuY2xvdWQuY2hlbWRvb2RsZS5jb20vaWNsX2NkY192MDcwMDAxL1dlYkhRJztcblxuXHRpQ2hlbUxhYnMuaW5SZWxheSA9IGZhbHNlO1xuXHRpQ2hlbUxhYnMuYXN5bmNocm9ub3VzID0gdHJ1ZTtcblxuXHRpQ2hlbUxhYnMuSU5GTyA9IHtcblx0XHR1c2VyQWdlbnQgOiBuYXZpZ2F0b3IudXNlckFnZW50LFxuXHRcdHZfY3djIDogYy5nZXRWZXJzaW9uKCksXG5cdFx0dl9qUXVlcnkgOiBxLmZuLmpxdWVyeSxcblx0XHR2X2pRdWVyeV91aSA6IChxLnVpID8gcS51aS52ZXJzaW9uIDogJ04vQScpXG5cdH07XG5cblx0dmFyIEpTT05fSU5URVJQUkVURVIgPSBuZXcgaW8uSlNPTkludGVycHJldGVyKCk7XG5cdHZhciBxdWV1ZSA9IG5ldyBzdHJ1Y3R1cmVzLlF1ZXVlKCk7XG5cblx0aUNoZW1MYWJzLl9jb250YWN0U2VydmVyID0gZnVuY3Rpb24oY2FsbCwgY29udGVudCwgb3B0aW9ucywgY2FsbGJhY2ssIGVycm9yYmFjaykge1xuXHRcdGlmICh0aGlzLmluUmVsYXkpIHtcblx0XHRcdHF1ZXVlLmVucXVldWUoe1xuXHRcdFx0XHQnY2FsbCcgOiBjYWxsLFxuXHRcdFx0XHQnY29udGVudCcgOiBjb250ZW50LFxuXHRcdFx0XHQnb3B0aW9ucycgOiBvcHRpb25zLFxuXHRcdFx0XHQnY2FsbGJhY2snIDogY2FsbGJhY2ssXG5cdFx0XHRcdCdlcnJvcmJhY2snIDogZXJyb3JiYWNrXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aUNoZW1MYWJzLmluUmVsYXkgPSB0cnVlO1xuXHRcdFx0cS5hamF4KHtcblx0XHRcdFx0ZGF0YVR5cGUgOiAndGV4dCcsXG5cdFx0XHRcdHR5cGUgOiAnUE9TVCcsXG5cdFx0XHRcdGRhdGEgOiBKU09OLnN0cmluZ2lmeSh7XG5cdFx0XHRcdFx0J2NhbGwnIDogY2FsbCxcblx0XHRcdFx0XHQnY29udGVudCcgOiBjb250ZW50LFxuXHRcdFx0XHRcdCdvcHRpb25zJyA6IG9wdGlvbnMsXG5cdFx0XHRcdFx0J2luZm8nIDogaUNoZW1MYWJzLklORk9cblx0XHRcdFx0fSksXG5cdFx0XHRcdHVybCA6IHRoaXMuU0VSVkVSX1VSTCxcblx0XHRcdFx0c3VjY2VzcyA6IGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdFx0XHR2YXIgbyA9IEpTT04ucGFyc2UoZGF0YSk7XG5cdFx0XHRcdFx0aWYgKG8ubWVzc2FnZSkge1xuXHRcdFx0XHRcdFx0YWxlcnQoby5tZXNzYWdlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aUNoZW1MYWJzLmluUmVsYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRpZiAoY2FsbGJhY2sgJiYgby5jb250ZW50ICYmICFvLnN0b3ApIHtcblx0XHRcdFx0XHRcdGNhbGxiYWNrKG8uY29udGVudCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChvLnN0b3AgJiYgZXJyb3JiYWNrKSB7XG5cdFx0XHRcdFx0XHRlcnJvcmJhY2soKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYoIXF1ZXVlLmlzRW1wdHkoKSl7XG5cdFx0XHRcdFx0XHR2YXIgbmV4dCA9IHF1ZXVlLmRlcXVldWUoKTtcblx0XHRcdFx0XHRcdGlDaGVtTGFicy5fY29udGFjdFNlcnZlcihuZXh0LmNhbGwsIG5leHQuY29udGVudCwgbmV4dC5vcHRpb25zLCBuZXh0LmNhbGxiYWNrLCBuZXh0LmVycm9yYmFjayk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRlcnJvciA6IGZ1bmN0aW9uKHhociwgc3RhdHVzLCBlcnJvcikge1xuXHRcdFx0XHRcdGlmKGNhbGwhPSdjaGVja0ZvclVwZGF0ZXMnKXtcblx0XHRcdFx0XHRcdGFsZXJ0KCdDYWxsIGZhaWxlZC4gUGxlYXNlIHRyeSBhZ2Fpbi4gSWYgeW91IGNvbnRpbnVlIHRvIHNlZSB0aGlzIG1lc3NhZ2UsIHBsZWFzZSBjb250YWN0IGlDaGVtTGFicyBjdXN0b21lciBzdXBwb3J0LicpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpQ2hlbUxhYnMuaW5SZWxheSA9IGZhbHNlO1xuXHRcdFx0XHRcdGlmIChlcnJvcmJhY2spIHtcblx0XHRcdFx0XHRcdGVycm9yYmFjaygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZighcXVldWUuaXNFbXB0eSgpKXtcblx0XHRcdFx0XHRcdHZhciBuZXh0ID0gcXVldWUuZGVxdWV1ZSgpO1xuXHRcdFx0XHRcdFx0aUNoZW1MYWJzLl9jb250YWN0U2VydmVyKG5leHQuY2FsbCwgbmV4dC5jb250ZW50LCBuZXh0Lm9wdGlvbnMsIG5leHQuY2FsbGJhY2ssIG5leHQuZXJyb3JiYWNrKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHhockZpZWxkcyA6IHtcblx0XHRcdFx0XHR3aXRoQ3JlZGVudGlhbHMgOiB0cnVlXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFzeW5jIDogaUNoZW1MYWJzLmFzeW5jaHJvbm91c1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIHVuZG9jdW1lbnRlZCwgdGhpcyBjYWxsIGlzIGZvciBjbGllbnRzIHRoYXQgaGF2ZSBsaWNlbnNlZCBjbG91ZCBmb3IgdGhlaXJcblx0Ly8gb3duIHNlcnZlcnNcblx0aUNoZW1MYWJzLmF1dGhlbnRpY2F0ZSA9IGZ1bmN0aW9uKGNyZWRlbnRpYWwsIG9wdGlvbnMsIGNhbGxiYWNrLCBlcnJvcmJhY2spIHtcblx0XHR0aGlzLl9jb250YWN0U2VydmVyKCdhdXRoZW50aWNhdGUnLCB7XG5cdFx0XHQnY3JlZGVudGlhbCcgOiBjcmVkZW50aWFsXG5cdFx0fSwgb3B0aW9ucywgZnVuY3Rpb24oY29udGVudCkge1xuXHRcdFx0Y2FsbGJhY2soY29udGVudCk7XG5cdFx0fSwgZXJyb3JiYWNrKTtcblx0fTtcblxuXHRpQ2hlbUxhYnMuY2FsY3VsYXRlID0gZnVuY3Rpb24obW9sLCBvcHRpb25zLCBjYWxsYmFjaywgZXJyb3JiYWNrKSB7XG5cdFx0dGhpcy5fY29udGFjdFNlcnZlcignY2FsY3VsYXRlJywge1xuXHRcdFx0J21vbCcgOiBKU09OX0lOVEVSUFJFVEVSLm1vbFRvKG1vbClcblx0XHR9LCBvcHRpb25zLCBmdW5jdGlvbihjb250ZW50KSB7XG5cdFx0XHRjYWxsYmFjayhjb250ZW50KTtcblx0XHR9LCBlcnJvcmJhY2spO1xuXHR9O1xuXG5cdGlDaGVtTGFicy5jcmVhdGVMZXdpc0RvdFN0cnVjdHVyZSA9IGZ1bmN0aW9uKG1vbCwgb3B0aW9ucywgY2FsbGJhY2ssIGVycm9yYmFjaykge1xuXHRcdHRoaXMuX2NvbnRhY3RTZXJ2ZXIoJ2NyZWF0ZUxld2lzRG90Jywge1xuXHRcdFx0J21vbCcgOiBKU09OX0lOVEVSUFJFVEVSLm1vbFRvKG1vbClcblx0XHR9LCBvcHRpb25zLCBmdW5jdGlvbihjb250ZW50KSB7XG5cdFx0XHRjYWxsYmFjayhKU09OX0lOVEVSUFJFVEVSLm1vbEZyb20oY29udGVudC5tb2wpKTtcblx0XHR9LCBlcnJvcmJhY2spO1xuXHR9O1xuXG5cdGlDaGVtTGFicy5nZW5lcmF0ZUltYWdlID0gZnVuY3Rpb24obW9sLCBvcHRpb25zLCBjYWxsYmFjaywgZXJyb3JiYWNrKSB7XG5cdFx0dGhpcy5fY29udGFjdFNlcnZlcignZ2VuZXJhdGVJbWFnZScsIHtcblx0XHRcdCdtb2wnIDogSlNPTl9JTlRFUlBSRVRFUi5tb2xUbyhtb2wpXG5cdFx0fSwgb3B0aW9ucywgZnVuY3Rpb24oY29udGVudCkge1xuXHRcdFx0Y2FsbGJhY2soY29udGVudC5saW5rKTtcblx0XHR9LCBlcnJvcmJhY2spO1xuXHR9O1xuXG5cdGlDaGVtTGFicy5nZW5lcmF0ZUlVUEFDTmFtZSA9IGZ1bmN0aW9uKG1vbCwgb3B0aW9ucywgY2FsbGJhY2ssIGVycm9yYmFjaykge1xuXHRcdHRoaXMuX2NvbnRhY3RTZXJ2ZXIoJ2dlbmVyYXRlSVVQQUNOYW1lJywge1xuXHRcdFx0J21vbCcgOiBKU09OX0lOVEVSUFJFVEVSLm1vbFRvKG1vbClcblx0XHR9LCBvcHRpb25zLCBmdW5jdGlvbihjb250ZW50KSB7XG5cdFx0XHRjYWxsYmFjayhjb250ZW50Lml1cGFjKTtcblx0XHR9LCBlcnJvcmJhY2spO1xuXHR9O1xuXG5cdGlDaGVtTGFicy5nZXRBZCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBlcnJvcmJhY2spIHtcblx0XHR0aGlzLl9jb250YWN0U2VydmVyKCdnZXRBZCcsIHt9LCB7fSwgZnVuY3Rpb24oY29udGVudCkge1xuXHRcdFx0Y2FsbGJhY2soY29udGVudC5pbWFnZV91cmwsIGNvbnRlbnQudGFyZ2V0X3VybCk7XG5cdFx0fSwgZXJyb3JiYWNrKTtcblx0fTtcblxuXHRpQ2hlbUxhYnMuZ2V0TW9sZWN1bGVGcm9tQ29udGVudCA9IGZ1bmN0aW9uKGlucHV0LCBvcHRpb25zLCBjYWxsYmFjaywgZXJyb3JiYWNrKSB7XG5cdFx0dGhpcy5fY29udGFjdFNlcnZlcignZ2V0TW9sZWN1bGVGcm9tQ29udGVudCcsIHtcblx0XHRcdCdjb250ZW50JyA6IGlucHV0XG5cdFx0fSwgb3B0aW9ucywgZnVuY3Rpb24oY29udGVudCkge1xuXHRcdFx0dmFyIHogPSBmYWxzZTtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBjb250ZW50Lm1vbC5hLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0aWYgKGNvbnRlbnQubW9sLmFbaV0ueiAhPT0gMCkge1xuXHRcdFx0XHRcdHogPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoeikge1xuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gY29udGVudC5tb2wuYS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdFx0Y29udGVudC5tb2wuYVtpXS54IC89IDIwO1xuXHRcdFx0XHRcdGNvbnRlbnQubW9sLmFbaV0ueSAvPSAyMDtcblx0XHRcdFx0XHRjb250ZW50Lm1vbC5hW2ldLnogLz0gMjA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGNhbGxiYWNrKEpTT05fSU5URVJQUkVURVIubW9sRnJvbShjb250ZW50Lm1vbCkpO1xuXHRcdH0sIGVycm9yYmFjayk7XG5cdH07XG5cblx0aUNoZW1MYWJzLmdldE1vbGVjdWxlRnJvbURhdGFiYXNlID0gZnVuY3Rpb24ocXVlcnksIG9wdGlvbnMsIGNhbGxiYWNrLCBlcnJvcmJhY2spIHtcblx0XHR0aGlzLl9jb250YWN0U2VydmVyKCdnZXRNb2xlY3VsZUZyb21EYXRhYmFzZScsIHtcblx0XHRcdCdxdWVyeScgOiBxdWVyeVxuXHRcdH0sIG9wdGlvbnMsIGZ1bmN0aW9uKGNvbnRlbnQpIHtcblx0XHRcdGlmIChvcHRpb25zLmRpbWVuc2lvbiA9PT0gMykge1xuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gY29udGVudC5tb2wuYS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdFx0Y29udGVudC5tb2wuYVtpXS54IC89IDIwO1xuXHRcdFx0XHRcdGNvbnRlbnQubW9sLmFbaV0ueSAvPSAtMjA7XG5cdFx0XHRcdFx0Y29udGVudC5tb2wuYVtpXS56IC89IDIwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRjYWxsYmFjayhKU09OX0lOVEVSUFJFVEVSLm1vbEZyb20oY29udGVudC5tb2wpKTtcblx0XHR9LCBlcnJvcmJhY2spO1xuXHR9O1xuXG5cdGlDaGVtTGFicy5nZXRPcHRpbWl6ZWRQREJTdHJ1Y3R1cmUgPSBmdW5jdGlvbihpZCwgb3B0aW9ucywgY2FsbGJhY2ssIGVycm9yYmFjaykge1xuXHRcdHRoaXMuX2NvbnRhY3RTZXJ2ZXIoJ2dldE9wdGltaXplZFBEQlN0cnVjdHVyZScsIHtcblx0XHRcdCdpZCcgOiBpZFxuXHRcdH0sIG9wdGlvbnMsIGZ1bmN0aW9uKGNvbnRlbnQpIHtcblx0XHRcdHZhciBtb2w7XG5cdFx0XHRpZiAoY29udGVudC5tb2wpIHtcblx0XHRcdFx0bW9sID0gSlNPTl9JTlRFUlBSRVRFUi5tb2xGcm9tKGNvbnRlbnQubW9sKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1vbCA9IG5ldyBzdHJ1Y3R1cmVzLk1vbGVjdWxlKCk7XG5cdFx0XHR9XG5cdFx0XHRtb2wuY2hhaW5zID0gSlNPTl9JTlRFUlBSRVRFUi5jaGFpbnNGcm9tKGNvbnRlbnQucmliYm9ucyk7XG5cdFx0XHRtb2wuZnJvbUpTT04gPSB0cnVlO1xuXHRcdFx0Y2FsbGJhY2sobW9sKTtcblx0XHR9LCBlcnJvcmJhY2spO1xuXHR9O1xuXG5cdGlDaGVtTGFicy5nZXRaZW9saXRlRnJvbUlaQSA9IGZ1bmN0aW9uKHF1ZXJ5LCBvcHRpb25zLCBjYWxsYmFjaywgZXJyb3JiYWNrKSB7XG5cdFx0dGhpcy5fY29udGFjdFNlcnZlcignZ2V0WmVvbGl0ZUZyb21JWkEnLCB7XG5cdFx0XHQncXVlcnknIDogcXVlcnlcblx0XHR9LCBvcHRpb25zLCBmdW5jdGlvbihjb250ZW50KSB7XG5cdFx0XHRjYWxsYmFjayhDaGVtRG9vZGxlLnJlYWRDSUYoY29udGVudC5jaWYsIG9wdGlvbnMueFN1cGVyLCBvcHRpb25zLnlTdXBlciwgb3B0aW9ucy56U3VwZXIpKTtcblx0XHR9LCBlcnJvcmJhY2spO1xuXHR9O1xuXG5cdGlDaGVtTGFicy5pc0dyYXBoSXNvbW9ycGhpc20gPSBmdW5jdGlvbihhcnJvdywgdGFyZ2V0LCBvcHRpb25zLCBjYWxsYmFjaywgZXJyb3JiYWNrKSB7XG5cdFx0dGhpcy5fY29udGFjdFNlcnZlcignaXNHcmFwaElzb21vcnBoaXNtJywge1xuXHRcdFx0J2Fycm93JyA6IEpTT05fSU5URVJQUkVURVIubW9sVG8oYXJyb3cpLFxuXHRcdFx0J3RhcmdldCcgOiBKU09OX0lOVEVSUFJFVEVSLm1vbFRvKHRhcmdldClcblx0XHR9LCBvcHRpb25zLCBmdW5jdGlvbihjb250ZW50KSB7XG5cdFx0XHRjYWxsYmFjayhjb250ZW50LnZhbHVlKTtcblx0XHR9LCBlcnJvcmJhY2spO1xuXHR9O1xuXG5cdGlDaGVtTGFicy5pc1N1YmdyYXBoSXNvbW9ycGhpc20gPSBmdW5jdGlvbihhcnJvdywgdGFyZ2V0LCBvcHRpb25zLCBjYWxsYmFjaywgZXJyb3JiYWNrKSB7XG5cdFx0dGhpcy5fY29udGFjdFNlcnZlcignaXNTdWJncmFwaElzb21vcnBoaXNtJywge1xuXHRcdFx0J2Fycm93JyA6IEpTT05fSU5URVJQUkVURVIubW9sVG8oYXJyb3cpLFxuXHRcdFx0J3RhcmdldCcgOiBKU09OX0lOVEVSUFJFVEVSLm1vbFRvKHRhcmdldClcblx0XHR9LCBvcHRpb25zLCBmdW5jdGlvbihjb250ZW50KSB7XG5cdFx0XHRjYWxsYmFjayhjb250ZW50LnZhbHVlKTtcblx0XHR9LCBlcnJvcmJhY2spO1xuXHR9O1xuXG5cdGlDaGVtTGFicy5pc1N1cGVyZ3JhcGhJc29tb3JwaGlzbSA9IGZ1bmN0aW9uKGFycm93LCB0YXJnZXQsIG9wdGlvbnMsIGNhbGxiYWNrLCBlcnJvcmJhY2spIHtcblx0XHR0aGlzLl9jb250YWN0U2VydmVyKCdpc1N1cGVyZ3JhcGhJc29tb3JwaGlzbScsIHtcblx0XHRcdCdhcnJvdycgOiBKU09OX0lOVEVSUFJFVEVSLm1vbFRvKGFycm93KSxcblx0XHRcdCd0YXJnZXQnIDogSlNPTl9JTlRFUlBSRVRFUi5tb2xUbyh0YXJnZXQpXG5cdFx0fSwgb3B0aW9ucywgZnVuY3Rpb24oY29udGVudCkge1xuXHRcdFx0Y2FsbGJhY2soY29udGVudC52YWx1ZSk7XG5cdFx0fSwgZXJyb3JiYWNrKTtcblx0fTtcblxuXHRpQ2hlbUxhYnMuZ2V0U2ltaWxhcml0eU1lYXN1cmUgPSBmdW5jdGlvbihmaXJzdCwgc2Vjb25kLCBvcHRpb25zLCBjYWxsYmFjaywgZXJyb3JiYWNrKSB7XG5cdFx0dGhpcy5fY29udGFjdFNlcnZlcignZ2V0U2ltaWxhcml0eU1lYXN1cmUnLCB7XG5cdFx0XHQnZmlyc3QnIDogSlNPTl9JTlRFUlBSRVRFUi5tb2xUbyhmaXJzdCksXG5cdFx0XHQnc2Vjb25kJyA6IEpTT05fSU5URVJQUkVURVIubW9sVG8oc2Vjb25kKVxuXHRcdH0sIG9wdGlvbnMsIGZ1bmN0aW9uKGNvbnRlbnQpIHtcblx0XHRcdGNhbGxiYWNrKGNvbnRlbnQudmFsdWUpO1xuXHRcdH0sIGVycm9yYmFjayk7XG5cdH07XG5cblx0aUNoZW1MYWJzLmtla3VsaXplID0gZnVuY3Rpb24obW9sLCBvcHRpb25zLCBjYWxsYmFjaywgZXJyb3JiYWNrKSB7XG5cdFx0dGhpcy5fY29udGFjdFNlcnZlcigna2VrdWxpemUnLCB7XG5cdFx0XHQnbW9sJyA6IEpTT05fSU5URVJQUkVURVIubW9sVG8obW9sKVxuXHRcdH0sIG9wdGlvbnMsIGZ1bmN0aW9uKGNvbnRlbnQpIHtcblx0XHRcdGNhbGxiYWNrKEpTT05fSU5URVJQUkVURVIubW9sRnJvbShjb250ZW50Lm1vbCkpO1xuXHRcdH0sIGVycm9yYmFjayk7XG5cdH07XG5cdFxuXHRpQ2hlbUxhYnMubWVjaGFuaXNtTWF0Y2ggPSBmdW5jdGlvbihhcnJvdywgdGFyZ2V0cywgb3B0aW9ucywgY2FsbGJhY2ssIGVycm9yYmFjaykge1xuXHRcdHRoaXMuX2NvbnRhY3RTZXJ2ZXIoJ21hdGNoTWVjaGFuaXNtJywge1xuXHRcdFx0J2Fycm93JyA6IGFycm93LFxuXHRcdFx0J3RhcmdldHMnIDogdGFyZ2V0c1xuXHRcdH0sIG9wdGlvbnMsIGZ1bmN0aW9uKGNvbnRlbnQpIHtcblx0XHRcdGNhbGxiYWNrKGNvbnRlbnQpO1xuXHRcdH0sIGVycm9yYmFjayk7XG5cdH07XG5cblx0aUNoZW1MYWJzLm9wdGltaXplID0gZnVuY3Rpb24obW9sLCBvcHRpb25zLCBjYWxsYmFjaywgZXJyb3JiYWNrKSB7XG5cdFx0dGhpcy5fY29udGFjdFNlcnZlcignb3B0aW1pemUnLCB7XG5cdFx0XHQnbW9sJyA6IEpTT05fSU5URVJQUkVURVIubW9sVG8obW9sKVxuXHRcdH0sIG9wdGlvbnMsIGZ1bmN0aW9uKGNvbnRlbnQpIHtcblx0XHRcdHZhciBvcHRpbWl6ZWQgPSBKU09OX0lOVEVSUFJFVEVSLm1vbEZyb20oY29udGVudC5tb2wpO1xuXHRcdFx0aWYgKG9wdGlvbnMuZGltZW5zaW9uID09PSAyKSB7XG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBvcHRpbWl6ZWQuYXRvbXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHRcdG1vbC5hdG9tc1tpXS54ID0gb3B0aW1pemVkLmF0b21zW2ldLng7XG5cdFx0XHRcdFx0bW9sLmF0b21zW2ldLnkgPSBvcHRpbWl6ZWQuYXRvbXNbaV0ueTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0fSBlbHNlIGlmIChvcHRpb25zLmRpbWVuc2lvbiA9PT0gMykge1xuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gb3B0aW1pemVkLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHRvcHRpbWl6ZWQuYXRvbXNbaV0ueCAvPSAyMDtcblx0XHRcdFx0XHRvcHRpbWl6ZWQuYXRvbXNbaV0ueSAvPSAtMjA7XG5cdFx0XHRcdFx0b3B0aW1pemVkLmF0b21zW2ldLnogLz0gMjA7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2FsbGJhY2sob3B0aW1pemVkKTtcblx0XHRcdH1cblx0XHR9LCBlcnJvcmJhY2spO1xuXHR9O1xuXG5cdGlDaGVtTGFicy5yZWFkSVVQQUNOYW1lID0gZnVuY3Rpb24oaXVwYWMsIG9wdGlvbnMsIGNhbGxiYWNrLCBlcnJvcmJhY2spIHtcblx0XHR0aGlzLl9jb250YWN0U2VydmVyKCdyZWFkSVVQQUNOYW1lJywge1xuXHRcdFx0J2l1cGFjJyA6IGl1cGFjXG5cdFx0fSwgb3B0aW9ucywgZnVuY3Rpb24oY29udGVudCkge1xuXHRcdFx0Y2FsbGJhY2soSlNPTl9JTlRFUlBSRVRFUi5tb2xGcm9tKGNvbnRlbnQubW9sKSk7XG5cdFx0fSwgZXJyb3JiYWNrKTtcblx0fTtcblxuXHRpQ2hlbUxhYnMucmVhZFNNSUxFUyA9IGZ1bmN0aW9uKHNtaWxlcywgb3B0aW9ucywgY2FsbGJhY2ssIGVycm9yYmFjaykge1xuXHRcdHRoaXMuX2NvbnRhY3RTZXJ2ZXIoJ3JlYWRTTUlMRVMnLCB7XG5cdFx0XHQnc21pbGVzJyA6IHNtaWxlc1xuXHRcdH0sIG9wdGlvbnMsIGZ1bmN0aW9uKGNvbnRlbnQpIHtcblx0XHRcdGNhbGxiYWNrKEpTT05fSU5URVJQUkVURVIubW9sRnJvbShjb250ZW50Lm1vbCkpO1xuXHRcdH0sIGVycm9yYmFjayk7XG5cdH07XG5cblx0aUNoZW1MYWJzLnNhdmVGaWxlID0gZnVuY3Rpb24obW9sLCBvcHRpb25zLCBjYWxsYmFjaywgZXJyb3JiYWNrKSB7XG5cdFx0dGhpcy5fY29udGFjdFNlcnZlcignc2F2ZUZpbGUnLCB7XG5cdFx0XHQnbW9sJyA6IEpTT05fSU5URVJQUkVURVIubW9sVG8obW9sKVxuXHRcdH0sIG9wdGlvbnMsIGZ1bmN0aW9uKGNvbnRlbnQpIHtcblx0XHRcdGNhbGxiYWNrKGNvbnRlbnQubGluayk7XG5cdFx0fSwgZXJyb3JiYWNrKTtcblx0fTtcblxuXHRpQ2hlbUxhYnMuc2ltdWxhdGUxM0NOTVIgPSBmdW5jdGlvbihtb2wsIG9wdGlvbnMsIGNhbGxiYWNrLCBlcnJvcmJhY2spIHtcblx0XHRvcHRpb25zLm51Y2xldXMgPSAnQyc7XG5cdFx0b3B0aW9ucy5pc290b3BlID0gMTM7XG5cdFx0dGhpcy5fY29udGFjdFNlcnZlcignc2ltdWxhdGVOTVInLCB7XG5cdFx0XHQnbW9sJyA6IEpTT05fSU5URVJQUkVURVIubW9sVG8obW9sKVxuXHRcdH0sIG9wdGlvbnMsIGZ1bmN0aW9uKGNvbnRlbnQpIHtcblx0XHRcdGNhbGxiYWNrKGMucmVhZEpDQU1QKGNvbnRlbnQuamNhbXApKTtcblx0XHR9LCBlcnJvcmJhY2spO1xuXHR9O1xuXG5cdGlDaGVtTGFicy5zaW11bGF0ZTFITk1SID0gZnVuY3Rpb24obW9sLCBvcHRpb25zLCBjYWxsYmFjaywgZXJyb3JiYWNrKSB7XG5cdFx0b3B0aW9ucy5udWNsZXVzID0gJ0gnO1xuXHRcdG9wdGlvbnMuaXNvdG9wZSA9IDE7XG5cdFx0dGhpcy5fY29udGFjdFNlcnZlcignc2ltdWxhdGVOTVInLCB7XG5cdFx0XHQnbW9sJyA6IEpTT05fSU5URVJQUkVURVIubW9sVG8obW9sKVxuXHRcdH0sIG9wdGlvbnMsIGZ1bmN0aW9uKGNvbnRlbnQpIHtcblx0XHRcdGNhbGxiYWNrKGMucmVhZEpDQU1QKGNvbnRlbnQuamNhbXApKTtcblx0XHR9LCBlcnJvcmJhY2spO1xuXHR9O1xuXG5cdGlDaGVtTGFicy5zaW11bGF0ZU1hc3NQYXJlbnRQZWFrID0gZnVuY3Rpb24obW9sLCBvcHRpb25zLCBjYWxsYmFjaywgZXJyb3JiYWNrKSB7XG5cdFx0dGhpcy5fY29udGFjdFNlcnZlcignc2ltdWxhdGVNYXNzUGFyZW50UGVhaycsIHtcblx0XHRcdCdtb2wnIDogSlNPTl9JTlRFUlBSRVRFUi5tb2xUbyhtb2wpXG5cdFx0fSwgb3B0aW9ucywgZnVuY3Rpb24oY29udGVudCkge1xuXHRcdFx0Y2FsbGJhY2soYy5yZWFkSkNBTVAoY29udGVudC5qY2FtcCkpO1xuXHRcdH0sIGVycm9yYmFjayk7XG5cdH07XG5cblx0aUNoZW1MYWJzLndyaXRlU01JTEVTID0gZnVuY3Rpb24obW9sLCBvcHRpb25zLCBjYWxsYmFjaywgZXJyb3JiYWNrKSB7XG5cdFx0dGhpcy5fY29udGFjdFNlcnZlcignd3JpdGVTTUlMRVMnLCB7XG5cdFx0XHQnbW9sJyA6IEpTT05fSU5URVJQUkVURVIubW9sVG8obW9sKVxuXHRcdH0sIG9wdGlvbnMsIGZ1bmN0aW9uKGNvbnRlbnQpIHtcblx0XHRcdGNhbGxiYWNrKGNvbnRlbnQuc21pbGVzKTtcblx0XHR9LCBlcnJvcmJhY2spO1xuXHR9O1xuXG5cdGlDaGVtTGFicy52ZXJzaW9uID0gZnVuY3Rpb24ob3B0aW9ucywgY2FsbGJhY2ssIGVycm9yYmFjaykge1xuXHRcdHRoaXMuX2NvbnRhY3RTZXJ2ZXIoJ3ZlcnNpb24nLCB7fSwgb3B0aW9ucywgZnVuY3Rpb24oY29udGVudCkge1xuXHRcdFx0Y2FsbGJhY2soY29udGVudC52YWx1ZSk7XG5cdFx0fSwgZXJyb3JiYWNrKTtcblx0fTtcblxuXHRpQ2hlbUxhYnMuY2hlY2tGb3JVcGRhdGVzID0gZnVuY3Rpb24ob3B0aW9ucykge1xuXHRcdHRoaXMuX2NvbnRhY3RTZXJ2ZXIoJ2NoZWNrRm9yVXBkYXRlcycsIHtcblx0XHRcdCd2YWx1ZScgOiBsb2NhdGlvbi5ocmVmXG5cdFx0fSwgb3B0aW9ucywgZnVuY3Rpb24oY29udGVudCkge30sIGZ1bmN0aW9uKCl7fSk7XG5cdH07XG5cblxufSkoQ2hlbURvb2RsZSwgQ2hlbURvb2RsZS5pQ2hlbUxhYnMsIENoZW1Eb29kbGUuaW8sIENoZW1Eb29kbGUuc3RydWN0dXJlcywgQ2hlbURvb2RsZS5saWIualF1ZXJ5LCBsb2NhdGlvbik7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/ChemDoodleWeb-unpacked.js\n");

/***/ })

/******/ })["ChemDoodle"];
});