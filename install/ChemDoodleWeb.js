(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("ChemDoodle", [], factory);
	else if(typeof exports === 'object')
		exports["ChemDoodle"] = factory();
	else
		root["ChemDoodle"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/ChemDoodleWeb-unpacked.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/jquery-mousewheel/jquery.mousewheel.js":
/*!*************************************************************!*\
  !*** ./node_modules/jquery-mousewheel/jquery.mousewheel.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery Mousewheel 3.1.13\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n */\n\n(function (factory) {\n    if ( true ) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(function ($) {\n\n    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],\n        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?\n                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],\n        slice  = Array.prototype.slice,\n        nullLowestDeltaTimeout, lowestDelta;\n\n    if ( $.event.fixHooks ) {\n        for ( var i = toFix.length; i; ) {\n            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;\n        }\n    }\n\n    var special = $.event.special.mousewheel = {\n        version: '3.1.12',\n\n        setup: function() {\n            if ( this.addEventListener ) {\n                for ( var i = toBind.length; i; ) {\n                    this.addEventListener( toBind[--i], handler, false );\n                }\n            } else {\n                this.onmousewheel = handler;\n            }\n            // Store the line height and page height for this particular element\n            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));\n            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));\n        },\n\n        teardown: function() {\n            if ( this.removeEventListener ) {\n                for ( var i = toBind.length; i; ) {\n                    this.removeEventListener( toBind[--i], handler, false );\n                }\n            } else {\n                this.onmousewheel = null;\n            }\n            // Clean up the data we added to the element\n            $.removeData(this, 'mousewheel-line-height');\n            $.removeData(this, 'mousewheel-page-height');\n        },\n\n        getLineHeight: function(elem) {\n            var $elem = $(elem),\n                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();\n            if (!$parent.length) {\n                $parent = $('body');\n            }\n            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;\n        },\n\n        getPageHeight: function(elem) {\n            return $(elem).height();\n        },\n\n        settings: {\n            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below\n            normalizeOffset: true  // calls getBoundingClientRect for each event\n        }\n    };\n\n    $.fn.extend({\n        mousewheel: function(fn) {\n            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');\n        },\n\n        unmousewheel: function(fn) {\n            return this.unbind('mousewheel', fn);\n        }\n    });\n\n\n    function handler(event) {\n        var orgEvent   = event || window.event,\n            args       = slice.call(arguments, 1),\n            delta      = 0,\n            deltaX     = 0,\n            deltaY     = 0,\n            absDelta   = 0,\n            offsetX    = 0,\n            offsetY    = 0;\n        event = $.event.fix(orgEvent);\n        event.type = 'mousewheel';\n\n        // Old school scrollwheel delta\n        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }\n        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }\n        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }\n        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }\n\n        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event\n        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {\n            deltaX = deltaY * -1;\n            deltaY = 0;\n        }\n\n        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy\n        delta = deltaY === 0 ? deltaX : deltaY;\n\n        // New school wheel delta (wheel event)\n        if ( 'deltaY' in orgEvent ) {\n            deltaY = orgEvent.deltaY * -1;\n            delta  = deltaY;\n        }\n        if ( 'deltaX' in orgEvent ) {\n            deltaX = orgEvent.deltaX;\n            if ( deltaY === 0 ) { delta  = deltaX * -1; }\n        }\n\n        // No change actually happened, no reason to go any further\n        if ( deltaY === 0 && deltaX === 0 ) { return; }\n\n        // Need to convert lines and pages to pixels if we aren't already in pixels\n        // There are three delta modes:\n        //   * deltaMode 0 is by pixels, nothing to do\n        //   * deltaMode 1 is by lines\n        //   * deltaMode 2 is by pages\n        if ( orgEvent.deltaMode === 1 ) {\n            var lineHeight = $.data(this, 'mousewheel-line-height');\n            delta  *= lineHeight;\n            deltaY *= lineHeight;\n            deltaX *= lineHeight;\n        } else if ( orgEvent.deltaMode === 2 ) {\n            var pageHeight = $.data(this, 'mousewheel-page-height');\n            delta  *= pageHeight;\n            deltaY *= pageHeight;\n            deltaX *= pageHeight;\n        }\n\n        // Store lowest absolute delta to normalize the delta values\n        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );\n\n        if ( !lowestDelta || absDelta < lowestDelta ) {\n            lowestDelta = absDelta;\n\n            // Adjust older deltas if necessary\n            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {\n                lowestDelta /= 40;\n            }\n        }\n\n        // Adjust older deltas if necessary\n        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {\n            // Divide all the things by 40!\n            delta  /= 40;\n            deltaX /= 40;\n            deltaY /= 40;\n        }\n\n        // Get a whole, normalized value for the deltas\n        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);\n        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);\n        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);\n\n        // Normalise offsetX and offsetY properties\n        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {\n            var boundingRect = this.getBoundingClientRect();\n            offsetX = event.clientX - boundingRect.left;\n            offsetY = event.clientY - boundingRect.top;\n        }\n\n        // Add information to the event object\n        event.deltaX = deltaX;\n        event.deltaY = deltaY;\n        event.deltaFactor = lowestDelta;\n        event.offsetX = offsetX;\n        event.offsetY = offsetY;\n        // Go ahead and set deltaMode to 0 since we converted to pixels\n        // Although this is a little odd since we overwrite the deltaX/Y\n        // properties with normalized deltas.\n        event.deltaMode = 0;\n\n        // Add event and delta to the front of the arguments\n        args.unshift(event, delta, deltaX, deltaY);\n\n        // Clearout lowestDelta after sometime to better\n        // handle multiple device types that give different\n        // a different lowestDelta\n        // Ex: trackpad = 3 and mouse wheel = 120\n        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }\n        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);\n\n        return ($.event.dispatch || $.event.handle).apply(this, args);\n    }\n\n    function nullLowestDelta() {\n        lowestDelta = null;\n    }\n\n    function shouldAdjustOldDeltas(orgEvent, absDelta) {\n        // If this is an older event and the delta is divisable by 120,\n        // then we are assuming that the browser is treating this as an\n        // older mouse wheel event and that we should divide the deltas\n        // by 40 to try and get a more usable deltaFactor.\n        // Side note, this actually impacts the reported scroll distance\n        // in older browsers and can cause scrolling to be slower than native.\n        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.\n        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;\n    }\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery-mousewheel/jquery.mousewheel.js\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v2.2.4\n * http://jquery.com/\n *\n * Includes Sizzle.js\n * http://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-05-20T17:23Z\n */\n\n(function( global, factory ) {\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n}(typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Support: Firefox 18+\n// Can't be in strict mode, several libs including ASP.NET trace\n// the stack via arguments.caller.callee and Firefox dies if\n// you try to trace through \"use strict\" call chains. (#13335)\n//\"use strict\";\nvar arr = [];\n\nvar document = window.document;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar support = {};\n\n\n\nvar\n\tversion = \"2.2.4\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android<4.1\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\trdashAlpha = /-([\\da-z])/gi,\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function( all, letter ) {\n\t\treturn letter.toUpperCase();\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// Start with an empty selector\n\tselector: \"\",\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\t\treturn num != null ?\n\n\t\t\t// Return just the one element from the set\n\t\t\t( num < 0 ? this[ num + this.length ] : this[ num ] ) :\n\n\t\t\t// Return all the elements in a clean array\n\t\t\tslice.call( this );\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\t\tret.context = this.context;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = jQuery.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && jQuery.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisFunction: function( obj ) {\n\t\treturn jQuery.type( obj ) === \"function\";\n\t},\n\n\tisArray: Array.isArray,\n\n\tisWindow: function( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t},\n\n\tisNumeric: function( obj ) {\n\n\t\t// parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t// adding 1 corrects loss of precision from parseFloat (#15100)\n\t\tvar realStringObj = obj && obj.toString();\n\t\treturn !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;\n\t},\n\n\tisPlainObject: function( obj ) {\n\t\tvar key;\n\n\t\t// Not plain objects:\n\t\t// - Any object or value whose internal [[Class]] property is not \"[object Object]\"\n\t\t// - DOM nodes\n\t\t// - window\n\t\tif ( jQuery.type( obj ) !== \"object\" || obj.nodeType || jQuery.isWindow( obj ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Not own constructor property must be Object\n\t\tif ( obj.constructor &&\n\t\t\t\t!hasOwn.call( obj, \"constructor\" ) &&\n\t\t\t\t!hasOwn.call( obj.constructor.prototype || {}, \"isPrototypeOf\" ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t// if last one is own, then all properties are own\n\t\tfor ( key in obj ) {}\n\n\t\treturn key === undefined || hasOwn.call( obj, key );\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\ttype: function( obj ) {\n\t\tif ( obj == null ) {\n\t\t\treturn obj + \"\";\n\t\t}\n\n\t\t// Support: Android<4.0, iOS<6 (functionish RegExp)\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\t\ttypeof obj;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tvar script,\n\t\t\tindirect = eval;\n\n\t\tcode = jQuery.trim( code );\n\n\t\tif ( code ) {\n\n\t\t\t// If the code includes a valid, prologue position\n\t\t\t// strict mode pragma, execute code by injecting a\n\t\t\t// script tag into the document.\n\t\t\tif ( code.indexOf( \"use strict\" ) === 1 ) {\n\t\t\t\tscript = document.createElement( \"script\" );\n\t\t\t\tscript.text = code;\n\t\t\t\tdocument.head.appendChild( script ).parentNode.removeChild( script );\n\t\t\t} else {\n\n\t\t\t\t// Otherwise, avoid the DOM node creation, insertion\n\t\t\t\t// and removal by using an indirect global eval\n\n\t\t\t\tindirect( code );\n\t\t\t}\n\t\t}\n\t},\n\n\t// Convert dashed to camelCase; used by the css and data modules\n\t// Support: IE9-11+\n\t// Microsoft forgot to hump their vendor prefix (#9572)\n\tcamelCase: function( string ) {\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n\t},\n\n\tnodeName: function( elem, name ) {\n\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android<4.1\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// Bind a function to a context, optionally partially applying any\n\t// arguments.\n\tproxy: function( fn, context ) {\n\t\tvar tmp, args, proxy;\n\n\t\tif ( typeof context === \"string\" ) {\n\t\t\ttmp = fn[ context ];\n\t\t\tcontext = fn;\n\t\t\tfn = tmp;\n\t\t}\n\n\t\t// Quick check to determine if target is callable, in the spec\n\t\t// this throws a TypeError, but we will just return undefined.\n\t\tif ( !jQuery.isFunction( fn ) ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Simulated bind\n\t\targs = slice.call( arguments, 2 );\n\t\tproxy = function() {\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t\t};\n\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\treturn proxy;\n\t},\n\n\tnow: Date.now,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\n// JSHint would error on this code due to the Symbol not being defined in ES5.\n// Defining this global in .jshintrc would create a danger of using the global\n// unguarded in another place, it seems safer to just disable JSHint for these\n// three lines.\n/* jshint ignore: start */\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n/* jshint ignore: end */\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: iOS 8.2 (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = jQuery.type( obj );\n\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.2.1\n * http://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2015-10-17\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// General-purpose constants\n\tMAX_NEGATIVE = 1 << 31,\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// http://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\trescape = /'|\\\\/g,\n\n\t// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t};\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, nidselect, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rescape, \"\\\\$&\" );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\tnidselect = ridentifier.test( nid ) ? \"#\" + nid : \"[id='\" + nid + \"']\";\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = nidselect + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created div and expects a boolean result\n */\nfunction assert( fn ) {\n\tvar div = document.createElement(\"div\");\n\n\ttry {\n\t\treturn !!fn( div );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( div.parentNode ) {\n\t\t\tdiv.parentNode.removeChild( div );\n\t\t}\n\t\t// release memory in IE\n\t\tdiv = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\t( ~b.sourceIndex || MAX_NEGATIVE ) -\n\t\t\t( ~a.sourceIndex || MAX_NEGATIVE );\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, parent,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( (parent = document.defaultView) && parent.top !== parent ) {\n\t\t// Support: IE 11\n\t\tif ( parent.addEventListener ) {\n\t\t\tparent.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( parent.attachEvent ) {\n\t\t\tparent.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( div ) {\n\t\tdiv.className = \"i\";\n\t\treturn !div.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( div ) {\n\t\tdiv.appendChild( document.createComment(\"\") );\n\t\treturn !div.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( div ) {\n\t\tdocElem.appendChild( div ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID find and filter\n\tif ( support.getById ) {\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar m = context.getElementById( id );\n\t\t\t\treturn m ? [ m ] : [];\n\t\t\t}\n\t\t};\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t} else {\n\t\t// Support: IE6/7\n\t\t// getElementById is not reliable as a find shortcut\n\t\tdelete Expr.find[\"ID\"];\n\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See http://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( div ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// http://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( div ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( div.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !div.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !div.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !div.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibing-combinator selector` fails\n\t\t\tif ( !div.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( div ) {\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tdiv.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( div.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !div.querySelectorAll(\":enabled\").length ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tdiv.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( div ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( div, \"div\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( div, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": function( elem ) {\n\t\t\treturn elem.disabled === false;\n\t\t},\n\n\t\t\"disabled\": function( elem ) {\n\t\t\treturn elem.disabled === true;\n\t\t},\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tcheckNonElements = base && dir === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( (oldCache = uniqueCache[ dir ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ dir ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tsupport.getById && context.nodeType === 9 && documentIsHTML &&\n\t\t\t\tExpr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( div1 ) {\n\t// Should return 1, but returns 4 (following)\n\treturn div1.compareDocumentPosition( document.createElement(\"div\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( div ) {\n\tdiv.innerHTML = \"<a href='#'></a>\";\n\treturn div.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( div ) {\n\tdiv.innerHTML = \"<input/>\";\n\tdiv.firstChild.setAttribute( \"value\", \"\" );\n\treturn div.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( div ) {\n\treturn div.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = ( /^<([\\w-]+)\\s*\\/?>(?:<\\/\\1>|)$/ );\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( jQuery.isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\t/* jshint -W018 */\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\n\t}\n\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\n\t}\n\n\tif ( typeof qualifier === \"string\" ) {\n\t\tif ( risSimple.test( qualifier ) ) {\n\t\t\treturn jQuery.filter( qualifier, elements, not );\n\t\t}\n\n\t\tqualifier = jQuery.filter( qualifier, elements );\n\t}\n\n\treturn jQuery.grep( elements, function( elem ) {\n\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t} );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\treturn elems.length === 1 && elem.nodeType === 1 ?\n\t\tjQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :\n\t\tjQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\t\treturn elem.nodeType === 1;\n\t\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i,\n\t\t\tlen = this.length,\n\t\t\tret = [],\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\t// Needed because $( selector, context ) becomes $( context ).find( selector )\n\t\tret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );\n\t\tret.selector = this.selector ? this.selector + \" \" + selector : selector;\n\t\treturn ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\t// Support: Blackberry 4.6\n\t\t\t\t\t// gEBID returns nodes no longer in the document (#6963)\n\t\t\t\t\tif ( elem && elem.parentNode ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.context = document;\n\t\t\t\t\tthis.selector = selector;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis.context = this[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( jQuery.isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\tif ( selector.selector !== undefined ) {\n\t\t\tthis.selector = selector.selector;\n\t\t\tthis.context = selector.context;\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\tpos = rneedsContext.test( selectors ) || typeof selectors !== \"string\" ?\n\t\t\t\tjQuery( selectors, context || this.context ) :\n\t\t\t\t0;\n\n\t\tfor ( ; i < l; i++ ) {\n\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t// Always skip document fragments\n\t\t\t\tif ( cur.nodeType < 11 && ( pos ?\n\t\t\t\t\tpos.index( cur ) > -1 :\n\n\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\treturn elem.contentDocument || jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnotwhite = ( /\\S+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( jQuery.isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && jQuery.type( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, listener list, final state\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ), \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ), \"rejected\" ],\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ) ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\tthen: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];\n\n\t\t\t\t\t\t\t// deferred[ done | fail | progress ] for forwarding actions to newDefer\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis === promise ? newDefer.promise() : this,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Keep pipe for back-compat\n\t\tpromise.pipe = promise.then;\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 3 ];\n\n\t\t\t// promise[ done | fail | progress ] = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add( function() {\n\n\t\t\t\t\t// state = [ resolved | rejected ]\n\t\t\t\t\tstate = stateString;\n\n\t\t\t\t// [ reject_list | resolve_list ].disable; progress_list.lock\n\t\t\t\t}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );\n\t\t\t}\n\n\t\t\t// deferred[ resolve | reject | notify ]\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? promise : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( subordinate /* , ..., subordinateN */ ) {\n\t\tvar i = 0,\n\t\t\tresolveValues = slice.call( arguments ),\n\t\t\tlength = resolveValues.length,\n\n\t\t\t// the count of uncompleted subordinates\n\t\t\tremaining = length !== 1 ||\n\t\t\t\t( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,\n\n\t\t\t// the master Deferred.\n\t\t\t// If resolveValues consist of only a single Deferred, just use that.\n\t\t\tdeferred = remaining === 1 ? subordinate : jQuery.Deferred(),\n\n\t\t\t// Update function for both resolve and progress values\n\t\t\tupdateFunc = function( i, contexts, values ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tcontexts[ i ] = this;\n\t\t\t\t\tvalues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( values === progressValues ) {\n\t\t\t\t\t\tdeferred.notifyWith( contexts, values );\n\t\t\t\t\t} else if ( !( --remaining ) ) {\n\t\t\t\t\t\tdeferred.resolveWith( contexts, values );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tprogressValues, progressContexts, resolveContexts;\n\n\t\t// Add listeners to Deferred subordinates; treat others as resolved\n\t\tif ( length > 1 ) {\n\t\t\tprogressValues = new Array( length );\n\t\t\tprogressContexts = new Array( length );\n\t\t\tresolveContexts = new Array( length );\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {\n\t\t\t\t\tresolveValues[ i ].promise()\n\t\t\t\t\t\t.progress( updateFunc( i, progressContexts, progressValues ) )\n\t\t\t\t\t\t.done( updateFunc( i, resolveContexts, resolveValues ) )\n\t\t\t\t\t\t.fail( deferred.reject );\n\t\t\t\t} else {\n\t\t\t\t\t--remaining;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we're not waiting on anything, resolve the master\n\t\tif ( !remaining ) {\n\t\t\tdeferred.resolveWith( resolveContexts, resolveValues );\n\t\t}\n\n\t\treturn deferred.promise();\n\t}\n} );\n\n\n// The deferred used on DOM ready\nvar readyList;\n\njQuery.fn.ready = function( fn ) {\n\n\t// Add the callback\n\tjQuery.ready.promise().done( fn );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Hold (or release) the ready event\n\tholdReady: function( hold ) {\n\t\tif ( hold ) {\n\t\t\tjQuery.readyWait++;\n\t\t} else {\n\t\t\tjQuery.ready( true );\n\t\t}\n\t},\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\n\t\t// Trigger any bound ready events\n\t\tif ( jQuery.fn.triggerHandler ) {\n\t\t\tjQuery( document ).triggerHandler( \"ready\" );\n\t\t\tjQuery( document ).off( \"ready\" );\n\t\t}\n\t}\n} );\n\n/**\n * The ready event handler and self cleanup method\n */\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\njQuery.ready.promise = function( obj ) {\n\tif ( !readyList ) {\n\n\t\treadyList = jQuery.Deferred();\n\n\t\t// Catch cases where $(document).ready() is called\n\t\t// after the browser event has already occurred.\n\t\t// Support: IE9-10 only\n\t\t// Older IE sometimes signals \"interactive\" too soon\n\t\tif ( document.readyState === \"complete\" ||\n\t\t\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\t\t\twindow.setTimeout( jQuery.ready );\n\n\t\t} else {\n\n\t\t\t// Use the handy event callback\n\t\t\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t\t\t// A fallback to window.onload, that will always work\n\t\t\twindow.addEventListener( \"load\", completed );\n\t\t}\n\t}\n\treturn readyList.promise( obj );\n};\n\n// Kick off the DOM ready check even if the user does not\njQuery.ready.promise();\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( jQuery.type( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !jQuery.isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn chainable ?\n\t\telems :\n\n\t\t// Gets\n\t\tbulk ?\n\t\t\tfn.call( elems ) :\n\t\t\tlen ? fn( elems[ 0 ], key ) : emptyGet;\n};\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\t/* jshint -W018 */\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tregister: function( owner, initial ) {\n\t\tvar value = initial || {};\n\n\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t// use plain assignment\n\t\tif ( owner.nodeType ) {\n\t\t\towner[ this.expando ] = value;\n\n\t\t// Otherwise secure it in a non-enumerable, non-writable property\n\t\t// configurability must be true to allow the property to be\n\t\t// deleted with the delete operator\n\t\t} else {\n\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\tvalue: value,\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: true\n\t\t\t} );\n\t\t}\n\t\treturn owner[ this.expando ];\n\t},\n\tcache: function( owner ) {\n\n\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t// but we should not, see #8335.\n\t\t// Always return an empty object.\n\t\tif ( !acceptData( owner ) ) {\n\t\t\treturn {};\n\t\t}\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ data ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ prop ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\t\t\towner[ this.expando ] && owner[ this.expando ][ key ];\n\t},\n\taccess: function( owner, key, value ) {\n\t\tvar stored;\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\tstored = this.get( owner, key );\n\n\t\t\treturn stored !== undefined ?\n\t\t\t\tstored : this.get( owner, jQuery.camelCase( key ) );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i, name, camel,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key === undefined ) {\n\t\t\tthis.register( owner );\n\n\t\t} else {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( jQuery.isArray( key ) ) {\n\n\t\t\t\t// If \"name\" is an array of keys...\n\t\t\t\t// When data is initially created, via (\"key\", \"val\") signature,\n\t\t\t\t// keys will be converted to camelCase.\n\t\t\t\t// Since there is no way to tell _how_ a key was added, remove\n\t\t\t\t// both plain key and camelCase key. #12786\n\t\t\t\t// This will only penalize the array argument path.\n\t\t\t\tname = key.concat( key.map( jQuery.camelCase ) );\n\t\t\t} else {\n\t\t\t\tcamel = jQuery.camelCase( key );\n\n\t\t\t\t// Try the string as a key before any manipulation\n\t\t\t\tif ( key in cache ) {\n\t\t\t\t\tname = [ key, camel ];\n\t\t\t\t} else {\n\n\t\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\t\tname = camel;\n\t\t\t\t\tname = name in cache ?\n\t\t\t\t\t\t[ name ] : ( name.match( rnotwhite ) || [] );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = name.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ name[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <= 35-45+\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://code.google.com/p/chromium/issues/detail?id=378607\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = data === \"true\" ? true :\n\t\t\t\t\tdata === \"false\" ? false :\n\t\t\t\t\tdata === \"null\" ? null :\n\n\t\t\t\t\t// Only convert to a number if it doesn't change the string\n\t\t\t\t\t+data + \"\" === data ? +data :\n\t\t\t\t\trbrace.test( data ) ? jQuery.parseJSON( data ) :\n\t\t\t\t\tdata;\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE11+\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data, camelKey;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// with the key as-is\n\t\t\t\tdata = dataUser.get( elem, key ) ||\n\n\t\t\t\t\t// Try to find dashed key if it exists (gh-2779)\n\t\t\t\t\t// This is for 2.2.x only\n\t\t\t\t\tdataUser.get( elem, key.replace( rmultiDash, \"-$&\" ).toLowerCase() );\n\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\tcamelKey = jQuery.camelCase( key );\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// with the key camelized\n\t\t\t\tdata = dataUser.get( elem, camelKey );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, camelKey, undefined );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tcamelKey = jQuery.camelCase( key );\n\t\t\tthis.each( function() {\n\n\t\t\t\t// First, attempt to store a copy or reference of any\n\t\t\t\t// data that might've been store with a camelCased key.\n\t\t\t\tvar data = dataUser.get( this, camelKey );\n\n\t\t\t\t// For HTML5 data-* attribute interop, we have to\n\t\t\t\t// store property names with dashes in a camelCase form.\n\t\t\t\t// This might not apply to all properties...*\n\t\t\t\tdataUser.set( this, camelKey, value );\n\n\t\t\t\t// *... In the case of properties that might _actually_\n\t\t\t\t// have dashes, we need to also store a copy of that\n\t\t\t\t// unchanged property.\n\t\t\t\tif ( key.indexOf( \"-\" ) > -1 && data !== undefined ) {\n\t\t\t\t\tdataUser.set( this, key, value );\n\t\t\t\t}\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || jQuery.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHidden = function( elem, el ) {\n\n\t\t// isHidden might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\t\treturn jQuery.css( elem, \"display\" ) === \"none\" ||\n\t\t\t!jQuery.contains( elem.ownerDocument, elem );\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted,\n\t\tscale = 1,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() { return tween.cur(); } :\n\t\t\tfunction() { return jQuery.css( elem, prop, \"\" ); },\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\tdo {\n\n\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\tscale = scale || \".5\";\n\n\t\t\t// Adjust and apply\n\t\t\tinitialInUnit = initialInUnit / scale;\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n\t\t} while (\n\t\t\tscale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\n\t\t);\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([\\w:-]+)/ );\n\nvar rscriptType = ( /^$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE9\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE9\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE9-11+\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret = typeof context.getElementsByTagName !== \"undefined\" ?\n\t\t\tcontext.getElementsByTagName( tag || \"*\" ) :\n\t\t\ttypeof context.querySelectorAll !== \"undefined\" ?\n\t\t\t\tcontext.querySelectorAll( tag || \"*\" ) :\n\t\t\t[];\n\n\treturn tag === undefined || tag && jQuery.nodeName( context, tag ) ?\n\t\tjQuery.merge( [ context ], ret ) :\n\t\tret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, contains, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( jQuery.type( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android<4.1, PhantomJS<2\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android<4.1, PhantomJS<2\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0-4.3, Safari<=5.1\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Safari<=5.1, Android<4.2\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE<=11+\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE9\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( event ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tevent = jQuery.event.fix( event );\n\n\t\tvar i, j, ret, matched, handleObj,\n\t\t\thandlerQueue = [],\n\t\t\targs = slice.call( arguments ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, matches, sel, handleObj,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Support (at least): Chrome, IE9\n\t\t// Find delegate handlers\n\t\t// Black-hole SVG <use> instance trees (#13180)\n\t\t//\n\t\t// Support: Firefox<=42+\n\t\t// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)\n\t\tif ( delegateCount && cur.nodeType &&\n\t\t\t( event.type !== \"click\" || isNaN( event.button ) || event.button < 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== \"click\" ) ) {\n\t\t\t\t\tmatches = [];\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matches[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatches[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matches[ sel ] ) {\n\t\t\t\t\t\t\tmatches.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matches.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matches } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\t// Includes some event props shared by KeyEvent and MouseEvent\n\tprops: ( \"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase \" +\n\t\t\"metaKey relatedTarget shiftKey target timeStamp view which\" ).split( \" \" ),\n\n\tfixHooks: {},\n\n\tkeyHooks: {\n\t\tprops: \"char charCode key keyCode\".split( \" \" ),\n\t\tfilter: function( event, original ) {\n\n\t\t\t// Add which for key events\n\t\t\tif ( event.which == null ) {\n\t\t\t\tevent.which = original.charCode != null ? original.charCode : original.keyCode;\n\t\t\t}\n\n\t\t\treturn event;\n\t\t}\n\t},\n\n\tmouseHooks: {\n\t\tprops: ( \"button buttons clientX clientY offsetX offsetY pageX pageY \" +\n\t\t\t\"screenX screenY toElement\" ).split( \" \" ),\n\t\tfilter: function( event, original ) {\n\t\t\tvar eventDoc, doc, body,\n\t\t\t\tbutton = original.button;\n\n\t\t\t// Calculate pageX/Y if missing and clientX/Y available\n\t\t\tif ( event.pageX == null && original.clientX != null ) {\n\t\t\t\teventDoc = event.target.ownerDocument || document;\n\t\t\t\tdoc = eventDoc.documentElement;\n\t\t\t\tbody = eventDoc.body;\n\n\t\t\t\tevent.pageX = original.clientX +\n\t\t\t\t\t( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -\n\t\t\t\t\t( doc && doc.clientLeft || body && body.clientLeft || 0 );\n\t\t\t\tevent.pageY = original.clientY +\n\t\t\t\t\t( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -\n\t\t\t\t\t( doc && doc.clientTop  || body && body.clientTop  || 0 );\n\t\t\t}\n\n\t\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\t\t// Note: button is not normalized, so don't use it\n\t\t\tif ( !event.which && button !== undefined ) {\n\t\t\t\tevent.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );\n\t\t\t}\n\n\t\t\treturn event;\n\t\t}\n\t},\n\n\tfix: function( event ) {\n\t\tif ( event[ jQuery.expando ] ) {\n\t\t\treturn event;\n\t\t}\n\n\t\t// Create a writable copy of the event object and normalize some properties\n\t\tvar i, prop, copy,\n\t\t\ttype = event.type,\n\t\t\toriginalEvent = event,\n\t\t\tfixHook = this.fixHooks[ type ];\n\n\t\tif ( !fixHook ) {\n\t\t\tthis.fixHooks[ type ] = fixHook =\n\t\t\t\trmouseEvent.test( type ) ? this.mouseHooks :\n\t\t\t\trkeyEvent.test( type ) ? this.keyHooks :\n\t\t\t\t{};\n\t\t}\n\t\tcopy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;\n\n\t\tevent = new jQuery.Event( originalEvent );\n\n\t\ti = copy.length;\n\t\twhile ( i-- ) {\n\t\t\tprop = copy[ i ];\n\t\t\tevent[ prop ] = originalEvent[ prop ];\n\t\t}\n\n\t\t// Support: Cordova 2.5 (WebKit) (#13255)\n\t\t// All events should have a target; Cordova deviceready doesn't\n\t\tif ( !event.target ) {\n\t\t\tevent.target = document;\n\t\t}\n\n\t\t// Support: Safari 6.0+, Chrome<28\n\t\t// Target should not be a text node (#504, #13143)\n\t\tif ( event.target.nodeType === 3 ) {\n\t\t\tevent.target = event.target.parentNode;\n\t\t}\n\n\t\treturn fixHook.filter ? fixHook.filter( event, originalEvent ) : event;\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this.type === \"checkbox\" && this.click && jQuery.nodeName( this, \"input\" ) ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn jQuery.nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android<4.0\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://code.google.com/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:-]+)[^>]*)\\/>/gi,\n\n\t// Support: IE 10-11, Edge 10240+\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trscriptTypeMasked = /^true\\/(.*)/,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Manipulating tables requires a tbody\nfunction manipulationTarget( elem, content ) {\n\treturn jQuery.nodeName( elem, \"table\" ) &&\n\t\tjQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ?\n\n\t\telem.getElementsByTagName( \"tbody\" )[ 0 ] ||\n\t\t\telem.appendChild( elem.ownerDocument.createElement( \"tbody\" ) ) :\n\t\telem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tvar match = rscriptTypeMasked.exec( elem.type );\n\n\tif ( match ) {\n\t\telem.type = match[ 1 ];\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tisFunction = jQuery.isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( isFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( isFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android<4.1, PhantomJS<2\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjQuery.globalEval( node.textContent.replace( rcleanScript, \"\" ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <= 35-45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <= 35-45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\n\t// Keep domManip exposed until 3.0 (gh-2225)\n\tdomManip: domManip,\n\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: QtWebKit\n\t\t\t// .get() because push.apply(_, arraylike) throws\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\n\n\nvar iframe,\n\telemdisplay = {\n\n\t\t// Support: Firefox\n\t\t// We have to pre-define these values for FF (#10227)\n\t\tHTML: \"block\",\n\t\tBODY: \"block\"\n\t};\n\n/**\n * Retrieve the actual display of a element\n * @param {String} name nodeName of the element\n * @param {Object} doc Document object\n */\n\n// Called only from within defaultDisplay\nfunction actualDisplay( name, doc ) {\n\tvar elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),\n\n\t\tdisplay = jQuery.css( elem[ 0 ], \"display\" );\n\n\t// We don't have any data stored on the element,\n\t// so use \"detach\" method as fast way to get rid of the element\n\telem.detach();\n\n\treturn display;\n}\n\n/**\n * Try to determine the default display value of an element\n * @param {String} nodeName\n */\nfunction defaultDisplay( nodeName ) {\n\tvar doc = document,\n\t\tdisplay = elemdisplay[ nodeName ];\n\n\tif ( !display ) {\n\t\tdisplay = actualDisplay( nodeName, doc );\n\n\t\t// If the simple way fails, read from inside an iframe\n\t\tif ( display === \"none\" || !display ) {\n\n\t\t\t// Use the already-created iframe if possible\n\t\t\tiframe = ( iframe || jQuery( \"<iframe frameborder='0' width='0' height='0'/>\" ) )\n\t\t\t\t.appendTo( doc.documentElement );\n\n\t\t\t// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse\n\t\t\tdoc = iframe[ 0 ].contentDocument;\n\n\t\t\t// Support: IE\n\t\t\tdoc.write();\n\t\t\tdoc.close();\n\n\t\t\tdisplay = actualDisplay( nodeName, doc );\n\t\t\tiframe.detach();\n\t\t}\n\n\t\t// Store the correct default display\n\t\telemdisplay[ nodeName ] = display;\n\t}\n\n\treturn display;\n}\nvar rmargin = ( /^margin/ );\n\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE<=11+, Firefox<=30+ (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar documentElement = document.documentElement;\n\n\n\n( function() {\n\tvar pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE9-11+\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tcontainer.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" +\n\t\t\"padding:0;margin-top:1px;position:absolute\";\n\tcontainer.appendChild( div );\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\t\tdiv.style.cssText =\n\n\t\t\t// Support: Firefox<29, Android 2.3\n\t\t\t// Vendor-prefix box-sizing\n\t\t\t\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;\" +\n\t\t\t\"position:relative;display:block;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"top:1%;width:50%\";\n\t\tdiv.innerHTML = \"\";\n\t\tdocumentElement.appendChild( container );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\t\treliableMarginLeftVal = divStyle.marginLeft === \"2px\";\n\t\tboxSizingReliableVal = divStyle.width === \"4px\";\n\n\t\t// Support: Android 4.0 - 4.3 only\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.marginRight = \"50%\";\n\t\tpixelMarginRightVal = divStyle.marginRight === \"4px\";\n\n\t\tdocumentElement.removeChild( container );\n\t}\n\n\tjQuery.extend( support, {\n\t\tpixelPosition: function() {\n\n\t\t\t// This test is executed only once but we still do memoizing\n\t\t\t// since we can use the boxSizingReliable pre-computing.\n\t\t\t// No need to check if the test was already performed, though.\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\tboxSizingReliable: function() {\n\t\t\tif ( boxSizingReliableVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelMarginRight: function() {\n\n\t\t\t// Support: Android 4.0-4.3\n\t\t\t// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal\n\t\t\t// since that compresses better and they're computed together anyway.\n\t\t\tif ( boxSizingReliableVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn pixelMarginRightVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\n\t\t\t// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37\n\t\t\tif ( boxSizingReliableVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\treliableMarginRight: function() {\n\n\t\t\t// Support: Android 2.3\n\t\t\t// Check if div with explicit width and no margin-right incorrectly\n\t\t\t// gets computed margin-right based on width of container. (#3333)\n\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n\t\t\t// This support function is only executed once so no memoizing is needed.\n\t\t\tvar ret,\n\t\t\t\tmarginDiv = div.appendChild( document.createElement( \"div\" ) );\n\n\t\t\t// Reset CSS: box-sizing; display; margin; border; padding\n\t\t\tmarginDiv.style.cssText = div.style.cssText =\n\n\t\t\t\t// Support: Android 2.3\n\t\t\t\t// Vendor-prefix box-sizing\n\t\t\t\t\"-webkit-box-sizing:content-box;box-sizing:content-box;\" +\n\t\t\t\t\"display:block;margin:0;border:0;padding:0\";\n\t\t\tmarginDiv.style.marginRight = marginDiv.style.width = \"0\";\n\t\t\tdiv.style.width = \"1px\";\n\t\t\tdocumentElement.appendChild( container );\n\n\t\t\tret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );\n\n\t\t\tdocumentElement.removeChild( container );\n\t\t\tdiv.removeChild( marginDiv );\n\n\t\t\treturn ret;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\tret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;\n\n\t// Support: Opera 12.1x only\n\t// Fall back to style even without computed\n\t// computed is undefined for elems on document fragments\n\tif ( ( ret === \"\" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\tret = jQuery.style( elem, name );\n\t}\n\n\t// Support: IE9\n\t// getPropertyValue is only needed for .css('filter') (#12537)\n\tif ( computed ) {\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// http://dev.w3.org/csswg/cssom/#resolved-values\n\t\tif ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE9-11+\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"O\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n\tvar i = extra === ( isBorderBox ? \"border\" : \"content\" ) ?\n\n\t\t// If we already have the right measurement, avoid augmentation\n\t\t4 :\n\n\t\t// Otherwise initialize for horizontal or vertical properties\n\t\tname === \"width\" ? 1 : 0,\n\n\t\tval = 0;\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin, so add it if we want it\n\t\tif ( extra === \"margin\" ) {\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\tif ( isBorderBox ) {\n\n\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\tif ( extra === \"content\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// At this point, extra isn't border nor margin, so remove border\n\t\t\tif ( extra !== \"margin\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// At this point, extra isn't content, so add padding\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// At this point, extra isn't content nor padding, so add border\n\t\t\tif ( extra !== \"padding\" ) {\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n\t// Start with offset property, which is equivalent to the border-box value\n\tvar valueIsBorderBox = true,\n\t\tval = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\n\t\tstyles = getStyles( elem ),\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t// Some non-html elements return undefined for offsetWidth, so check for null/undefined\n\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\tif ( val <= 0 || val == null ) {\n\n\t\t// Fall back to computed then uncomputed css if necessary\n\t\tval = curCSS( elem, name, styles );\n\t\tif ( val < 0 || val == null ) {\n\t\t\tval = elem.style[ name ];\n\t\t}\n\n\t\t// Computed unit is not pixels. Stop here and return.\n\t\tif ( rnumnonpx.test( val ) ) {\n\t\t\treturn val;\n\t\t}\n\n\t\t// Check for style in case a browser which returns unreliable values\n\t\t// for getComputedStyle silently falls back to the reliable elem.style\n\t\tvalueIsBorderBox = isBorderBox &&\n\t\t\t( support.boxSizingReliable() || val === elem.style[ name ] );\n\n\t\t// Normalize \"\", auto, and prepare for extra\n\t\tval = parseFloat( val ) || 0;\n\t}\n\n\t// Use the active box-sizing model to add/subtract irrelevant styles\n\treturn ( val +\n\t\taugmentWidthOrHeight(\n\t\t\telem,\n\t\t\tname,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles\n\t\t)\n\t) + \"px\";\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem, hidden,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvalues[ index ] = dataPriv.get( elem, \"olddisplay\" );\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Reset the inline display of this element to learn if it is\n\t\t\t// being hidden by cascaded rules or not\n\t\t\tif ( !values[ index ] && display === \"none\" ) {\n\t\t\t\telem.style.display = \"\";\n\t\t\t}\n\n\t\t\t// Set elements which have been overridden with display: none\n\t\t\t// in a stylesheet to whatever the default browser style is\n\t\t\t// for such an element\n\t\t\tif ( elem.style.display === \"\" && isHidden( elem ) ) {\n\t\t\t\tvalues[ index ] = dataPriv.access(\n\t\t\t\t\telem,\n\t\t\t\t\t\"olddisplay\",\n\t\t\t\t\tdefaultDisplay( elem.nodeName )\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\thidden = isHidden( elem );\n\n\t\t\tif ( display !== \"none\" || !hidden ) {\n\t\t\t\tdataPriv.set(\n\t\t\t\t\telem,\n\t\t\t\t\t\"olddisplay\",\n\t\t\t\t\thidden ? display : jQuery.css( elem, \"display\" )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of most of the elements in a second loop\n\t// to avoid the constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( !show || elem.style.display === \"none\" || elem.style.display === \"\" ) {\n\t\t\telem.style.display = show ? values[ index ] || \"\" : \"none\";\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {\n\t\t\"float\": \"cssFloat\"\n\t},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tstyle = elem.style;\n\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === \"number\" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tstyle[ name ] = value;\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = jQuery.camelCase( name );\n\n\t\t// Make sure that we're working with the right name\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, name ) {\n\tjQuery.cssHooks[ name ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\t\t\t\t\telem.offsetWidth === 0 ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, name, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = extra && getStyles( elem ),\n\t\t\t\tsubtract = extra && augmentWidthOrHeight(\n\t\t\t\t\telem,\n\t\t\t\t\tname,\n\t\t\t\t\textra,\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\t\tstyles\n\t\t\t\t);\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ name ] = value;\n\t\t\t\tvalue = jQuery.css( elem, name );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// Support: Android 2.3\njQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn swap( elem, { \"display\": \"inline-block\" },\n\t\t\t\tcurCSS, [ elem, \"marginRight\" ] );\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( !rmargin.test( prefix ) ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( jQuery.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t},\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHidden( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE9\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back Compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, timerId,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4 ; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\t/* jshint validthis: true */\n\tvar prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHidden( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Handle queue: false promises\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Height/width overflow pass\n\tif ( elem.nodeType === 1 && ( \"height\" in props || \"width\" in props ) ) {\n\n\t\t// Make sure that nothing sneaks out\n\t\t// Record all 3 overflow attributes because IE9-10 do not\n\t\t// change the overflow attribute when overflowX and\n\t\t// overflowY are set to the same value\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Set display property to inline-block for height/width\n\t\t// animations on inline elements that are having width/height animated\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\n\t\t// Test default display if display is currently \"none\"\n\t\tcheckDisplay = display === \"none\" ?\n\t\t\tdataPriv.get( elem, \"olddisplay\" ) || defaultDisplay( elem.nodeName ) : display;\n\n\t\tif ( checkDisplay === \"inline\" && jQuery.css( elem, \"float\" ) === \"none\" ) {\n\t\t\tstyle.display = \"inline-block\";\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// show/hide pass\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.exec( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// If there is dataShow left over from a stopped hide or show\n\t\t\t\t// and we are going to proceed with show, we should pretend to be hidden\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\n\t\t// Any non-fx value stops us from restoring the original display value\n\t\t} else {\n\t\t\tdisplay = undefined;\n\t\t}\n\t}\n\n\tif ( !jQuery.isEmptyObject( orig ) ) {\n\t\tif ( dataShow ) {\n\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\thidden = dataShow.hidden;\n\t\t\t}\n\t\t} else {\n\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", {} );\n\t\t}\n\n\t\t// Store state if its toggle - enables .stop().toggle() to \"reverse\"\n\t\tif ( toggle ) {\n\t\t\tdataShow.hidden = !hidden;\n\t\t}\n\t\tif ( hidden ) {\n\t\t\tjQuery( elem ).show();\n\t\t} else {\n\t\t\tanim.done( function() {\n\t\t\t\tjQuery( elem ).hide();\n\t\t\t} );\n\t\t}\n\t\tanim.done( function() {\n\t\t\tvar prop;\n\n\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\tfor ( prop in orig ) {\n\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t}\n\t\t} );\n\t\tfor ( prop in orig ) {\n\t\t\ttween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\n\t\t\tif ( !( prop in dataShow ) ) {\n\t\t\t\tdataShow[ prop ] = tween.start;\n\t\t\t\tif ( hidden ) {\n\t\t\t\t\ttween.end = tween.start;\n\t\t\t\t\ttween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t// If this is a noop like .hide().hide(), restore an overwritten display value\n\t} else if ( ( display === \"none\" ? defaultDisplay( elem.nodeName ) : display ) === \"inline\" ) {\n\t\tstyle.display = display;\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = jQuery.camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( jQuery.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length ; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t} else {\n\t\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length ; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length ; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( jQuery.isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tjQuery.proxy( result.stop, result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( jQuery.isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\t// attach callbacks from options\n\treturn animation.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( jQuery.isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnotwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length ; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tjQuery.isFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n\t};\n\n\topt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ?\n\t\topt.duration : opt.duration in jQuery.fx.speeds ?\n\t\t\tjQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( jQuery.isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHidden ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = jQuery.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Checks the timer has not already been removed\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tif ( timer() ) {\n\t\tjQuery.fx.start();\n\t} else {\n\t\tjQuery.timers.pop();\n\t}\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( !timerId ) {\n\t\ttimerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );\n\t}\n};\n\njQuery.fx.stop = function() {\n\twindow.clearInterval( timerId );\n\n\ttimerId = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: iOS<=5.1, Android<=4.2+\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE<=11+\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: Android<=2.3\n\t// Options inside disabled selects are incorrectly marked as disabled\n\tselect.disabled = true;\n\tsupport.optDisabled = !opt.disabled;\n\n\t// Support: IE<=11+\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// All attributes are lowercase\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\tname = name.toLowerCase();\n\t\t\thooks = jQuery.attrHooks[ name ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tjQuery.nodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name, propName,\n\t\t\ti = 0,\n\t\t\tattrNames = value && value.match( rnotwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\tpropName = jQuery.propFix[ name ] || name;\n\n\t\t\t\t// Boolean attributes get special treatment (#10870)\n\t\t\t\tif ( jQuery.expr.match.bool.test( name ) ) {\n\n\t\t\t\t\t// Set corresponding property to false\n\t\t\t\t\telem[ propName ] = false;\n\t\t\t\t}\n\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle;\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ name ];\n\t\t\tattrHandle[ name ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tname.toLowerCase() :\n\t\t\t\tnull;\n\t\t\tattrHandle[ name ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\treturn tabindex ?\n\t\t\t\t\tparseInt( tabindex, 10 ) :\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\t\trclickable.test( elem.nodeName ) && elem.href ?\n\t\t\t\t\t\t\t0 :\n\t\t\t\t\t\t\t-1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\nvar rclass = /[\\t\\r\\n\\f]/g;\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnotwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 &&\n\t\t\t\t\t( \" \" + curValue + \" \" ).replace( rclass, \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = jQuery.trim( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnotwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 &&\n\t\t\t\t\t( \" \" + curValue + \" \" ).replace( rclass, \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = jQuery.trim( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value;\n\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( type === \"string\" ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = value.match( rnotwhite ) || [];\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + getClass( elem ) + \" \" ).replace( rclass, \" \" )\n\t\t\t\t\t.indexOf( className ) > -1\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g,\n\trspaces = /[\\x20\\t\\r\\n\\f]+/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, isFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\treturn typeof ret === \"string\" ?\n\n\t\t\t\t\t// Handle most common string cases\n\t\t\t\t\tret.replace( rreturn, \"\" ) :\n\n\t\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\t\tret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tisFunction = jQuery.isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( jQuery.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE10-11+\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tjQuery.trim( jQuery.text( elem ) ).replace( rspaces, \" \" );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\" || index < 0,\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length,\n\t\t\t\t\ti = index < 0 ?\n\t\t\t\t\t\tmax :\n\t\t\t\t\t\tone ? index : 0;\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t( support.optDisabled ?\n\t\t\t\t\t\t\t\t!option.disabled : option.getAttribute( \"disabled\" ) === null ) &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( jQuery.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\telem[ type ]();\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout load resize scroll unload click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup error contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\n// Support: Firefox\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome, Safari\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = jQuery.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Support: Android 2.3\n// Workaround failure to string-cast null input\njQuery.parseJSON = function( data ) {\n\treturn JSON.parse( data + \"\" );\n};\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE9\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trhash = /#.*$/,\n\trts = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];\n\n\t\tif ( jQuery.isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": jQuery.parseJSON,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// The jqXHR state\n\t\t\tstate = 0,\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( state === 2 ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn state === 2 ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tvar lname = name.toLowerCase();\n\t\t\t\t\tif ( !state ) {\n\t\t\t\t\t\tname = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( !state ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( state < 2 ) {\n\t\t\t\t\t\t\tfor ( code in map ) {\n\n\t\t\t\t\t\t\t\t// Lazy-add the new callback in a way that preserves old ones\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR ).complete = completeDeferred.add;\n\t\tjqXHR.success = jqXHR.done;\n\t\tjqXHR.error = jqXHR.fail;\n\n\t\t// Remove hash character (#7531: and string promotion)\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" ).replace( rhash, \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = jQuery.trim( s.dataType || \"*\" ).toLowerCase().match( rnotwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE8-11+\n\t\t\t// IE throws exception if url is malformed, e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE8-11+\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( state === 2 ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\tcacheURL = s.url;\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// If data is available, append data to url\n\t\t\tif ( s.data ) {\n\t\t\t\tcacheURL = ( s.url += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data );\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add anti-cache in url if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\ts.url = rts.test( cacheURL ) ?\n\n\t\t\t\t\t// If there is already a '_' parameter, set its value\n\t\t\t\t\tcacheURL.replace( rts, \"$1_=\" + nonce++ ) :\n\n\t\t\t\t\t// Otherwise add one to the end\n\t\t\t\t\tcacheURL + ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + nonce++;\n\t\t\t}\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tfor ( i in { success: 1, error: 1, complete: 1 } ) {\n\t\t\tjqXHR[ i ]( s[ i ] );\n\t\t}\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( state === 2 ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tstate = 1;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Propagate exception as error if not done\n\t\t\t\tif ( state < 2 ) {\n\t\t\t\t\tdone( -1, e );\n\n\t\t\t\t// Simply rethrow otherwise\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Called once\n\t\t\tif ( state === 2 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// State is \"done\" now\n\t\t\tstate = 2;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapAll( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( this[ 0 ] ) {\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar isFunction = jQuery.isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function() {\n\t\treturn this.parent().each( function() {\n\t\t\tif ( !jQuery.nodeName( this, \"body\" ) ) {\n\t\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t\t}\n\t\t} ).end();\n\t}\n} );\n\n\njQuery.expr.filters.hidden = function( elem ) {\n\treturn !jQuery.expr.filters.visible( elem );\n};\njQuery.expr.filters.visible = function( elem ) {\n\n\t// Support: Opera <= 12.12\n\t// Opera reports offsetWidths and offsetHeights less than zero on some elements\n\t// Use OR instead of AND as the element is not visible if either is true\n\t// See tickets #10406 and #13132\n\treturn elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;\n};\n\n\n\n\nvar r20 = /%20/g,\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( jQuery.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, value ) {\n\n\t\t\t// If value is a function, invoke it and return its value\n\t\t\tvalue = jQuery.isFunction( value ) ? value() : ( value == null ? \"\" : value );\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" + encodeURIComponent( value );\n\t\t};\n\n\t// Set traditional to true for jQuery <= 1.3.2 behavior.\n\tif ( traditional === undefined ) {\n\t\ttraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" ).replace( r20, \"+\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\treturn val == null ?\n\t\t\t\tnull :\n\t\t\t\tjQuery.isArray( val ) ?\n\t\t\t\t\tjQuery.map( val, function( val ) {\n\t\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t\t} ) :\n\t\t\t\t\t{ name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE9\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE9\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = callback( \"error\" );\n\n\t\t\t\t// Support: IE9\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" ).prop( {\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t} ).on(\n\t\t\t\t\t\"load error\",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\tcontext = context || document;\n\n\tvar parsed = rsingleTag.exec( data ),\n\t\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n// Keep a copy of the old load method\nvar _load = jQuery.fn.load;\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tif ( typeof url !== \"string\" && _load ) {\n\t\treturn _load.apply( this, arguments );\n\t}\n\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = jQuery.trim( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( jQuery.isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.filters.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\n/**\n * Gets a window from an element\n */\nfunction getWindow( elem ) {\n\treturn jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;\n}\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( jQuery.isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\toffset: function( options ) {\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar docElem, win,\n\t\t\telem = this[ 0 ],\n\t\t\tbox = { top: 0, left: 0 },\n\t\t\tdoc = elem && elem.ownerDocument;\n\n\t\tif ( !doc ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdocElem = doc.documentElement;\n\n\t\t// Make sure it's not a disconnected DOM node\n\t\tif ( !jQuery.contains( docElem, elem ) ) {\n\t\t\treturn box;\n\t\t}\n\n\t\tbox = elem.getBoundingClientRect();\n\t\twin = getWindow( doc );\n\t\treturn {\n\t\t\ttop: box.top + win.pageYOffset - docElem.clientTop,\n\t\t\tleft: box.left + win.pageXOffset - docElem.clientLeft\n\t\t};\n\t},\n\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n\t\t// because it is its only offset parent\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume getBoundingClientRect is there when computed position is fixed\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\n\t\t\t// Get *real* offsetParent\n\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t// Get correct offsets\n\t\t\toffset = this.offset();\n\t\t\tif ( !jQuery.nodeName( offsetParent[ 0 ], \"html\" ) ) {\n\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t}\n\n\t\t\t// Add offsetParent borders\n\t\t\tparentOffset.top += jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true );\n\t\t\tparentOffset.left += jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true );\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\t\t\tvar win = getWindow( elem );\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari<7-8+, Chrome<37-44+\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\n\t\t\t\t\t// isn't a whole lot we can do. See pull request at this URL for discussion:\n\t\t\t\t\t// https://github.com/jquery/jquery/pull/764\n\t\t\t\t\treturn elem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable, null );\n\t\t};\n\t} );\n} );\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\tsize: function() {\n\t\treturn this.length;\n\t}\n} );\n\njQuery.fn.andSelf = jQuery.fn.addBack;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\nreturn jQuery;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcz8xMTU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLE1BQU0sS0FBMEI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7OztBQUlBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsWUFBWTs7QUFFcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGLG9CQUFvQjs7QUFFcEI7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRixnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTLFNBQVM7QUFDbEI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTLFlBQVk7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxTQUFTO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUEsZ0JBQWdCLElBQUk7O0FBRXBCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHdDQUF3QyxJQUFJO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLHlCQUF5QjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQixhQUFhLHVCQUF1QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsZ0NBQWdDLE1BQU07QUFDdEM7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsZUFBZTs7QUFFZixTQUFTOztBQUVUO0FBQ0EsUUFBUSxpQ0FBaUM7QUFDekMsUUFBUSxvQkFBb0I7QUFDNUIsUUFBUSxzQ0FBc0M7QUFDOUMsUUFBUTtBQUNSLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixhQUFhLEVBQUU7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLDREQUE0RDs7QUFFNUQ7QUFDQTtBQUNBO0FBQ0EseUNBQXlDOztBQUV6QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQ7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQzs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnRUFBZ0U7O0FBRWhFO0FBQ0E7QUFDQTtBQUNBLDZDQUE2Qzs7QUFFN0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLFVBQVU7QUFDM0Usc0NBQXNDLDJCQUEyQjtBQUNqRTtBQUNBLGdDQUFnQyxNQUFNO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxVQUFVLFlBQVk7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsVUFBVSxVQUFVO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLFVBQVUsY0FBYztBQUN4QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFlBQVksdUVBQXVFO0FBQ25GO0FBQ0E7QUFDQSxZQUFZLDRCQUE0QjtBQUN4QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFNBQVM7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSwyREFBMkQ7O0FBRTNEO0FBQ0E7QUFDQSxvRkFBb0Y7O0FBRXBGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFNBQVM7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsU0FBUztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxRQUFRLFNBQVM7QUFDakI7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGlEQUFpRDtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRCxVQUFVLHdDQUF3QztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLE1BQU07QUFDakIsV0FBVyxNQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7O0FBRUEsQ0FBQzs7OztBQUlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBLFFBQVEsR0FBRztBQUNYO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBOztBQUVBOzs7O0FBSUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBLGNBQWMsU0FBUztBQUN2QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQUdEOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVLE9BQU87QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVMsT0FBTztBQUNoQix5QkFBeUIsd0JBQXdCOztBQUVqRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsMENBQTBDO0FBQzFDLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7O0FBRW5CO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsY0FBYztBQUN4QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7O0FBRVI7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLE9BQU87QUFDUDtBQUNBLE1BQU07QUFDTixLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDhDQUE4QztBQUM5QyxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKOztBQUVBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVSxTQUFTO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHVCQUF1QixhQUFhO0FBQ3BDLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsU0FBUztBQUM3Qjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7OztBQUdBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9CQUFvQixFQUFFO0FBQ3JDLGVBQWUscUNBQXFDLEVBQUU7QUFDdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOzs7O0FBSUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxPQUFPO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLHNCQUFzQjs7QUFFdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsT0FBTztBQUNmOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLGdCQUFnQjtBQUNsQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVzs7QUFFWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsK0RBQStEO0FBQy9EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFVBQVUsY0FBYzs7QUFFeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsK0JBQStCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUIsd0RBQXdEO0FBQy9FOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUEsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDLGNBQWM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7OztBQUdEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQ0FBMkMsT0FBTztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qjs7QUFFOUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FB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QVMsU0FBUztBQUNyQztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGLENBQUM7OztBQUdEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFlBQVksK0RBQStEO0FBQzNFO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSxRQUFRLE9BQU87O0FBRWY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxnQkFBZ0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNEJBQTRCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBOztBQUVBLFVBQVUsT0FBTztBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBOztBQUVBLFdBQVcsU0FBUztBQUNwQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7O0FBRVg7QUFDQTtBQUNBO0FBQ0EsUUFBUSxRQUFRO0FBQ2hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxnQkFBZ0I7QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDs7QUFF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Q0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakM7QUFDQTs7QUFFQSxJQUFJO0FBQ0o7O0FBRUEsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsU0FBUztBQUNwQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEOzs7QUFHQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBOztBQUVBOztBQUVBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJDQUEyQztBQUMzQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsS0FBSztBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxxQ0FBcUM7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCOztBQUVoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCOztBQUVoQixnREFBZ0Q7QUFDaEQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtQkFBbUI7QUFDbkI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0RBQXdEO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTO0FBQ1Q7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQjtBQUNqQixTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkI7O0FBRTNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQ0FBa0M7O0FBRWxDO0FBQ0Esc0JBQXNCO0FBQ3RCLDJCQUEyQjs7QUFFM0I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0Q7QUFDdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLG9DQUFvQztBQUNsRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLE1BQU07QUFDTixNQUFNO0FBQ04sR0FBRztBQUNIO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFROztBQUVSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUEsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEMsV0FBVyx5QkFBeUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNIOztBQUVBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EscURBQXFEO0FBQ3JEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxrQkFBa0I7QUFDNUI7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQjs7QUFFbkIsNERBQTRELGVBQWU7QUFDM0U7QUFDQTs7QUFFQTtBQUNBOztBQUVBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQSxjQUFjLHNEQUFzRDtBQUNwRTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBLGNBQWMsbUNBQW1DO0FBQ2pELGVBQWUsNkRBQTZEO0FBQzVFOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxFQUFFO0FBQ0YsQ0FBQzs7O0FBR0Q7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSyxJQUEwQztBQUMvQyxDQUFDLGlDQUFrQixFQUFFLG1DQUFFO0FBQ3ZCO0FBQ0EsRUFBRTtBQUFBLG9HQUFFO0FBQ0o7Ozs7QUFJQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjIuMi40XG4gKiBodHRwOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTYtMDUtMjBUMTc6MjNaXG4gKi9cblxuKGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59KHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gU3VwcG9ydDogRmlyZWZveCAxOCtcbi8vIENhbid0IGJlIGluIHN0cmljdCBtb2RlLCBzZXZlcmFsIGxpYnMgaW5jbHVkaW5nIEFTUC5ORVQgdHJhY2Vcbi8vIHRoZSBzdGFjayB2aWEgYXJndW1lbnRzLmNhbGxlci5jYWxsZWUgYW5kIEZpcmVmb3ggZGllcyBpZlxuLy8geW91IHRyeSB0byB0cmFjZSB0aHJvdWdoIFwidXNlIHN0cmljdFwiIGNhbGwgY2hhaW5zLiAoIzEzMzM1KVxuLy9cInVzZSBzdHJpY3RcIjtcbnZhciBhcnIgPSBbXTtcblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIyLjIuNFwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csXG5cblx0Ly8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG5cdHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbXFxkYS16XSkvZ2ksXG5cblx0Ly8gVXNlZCBieSBqUXVlcnkuY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuXHRmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xuXHRcdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFN0YXJ0IHdpdGggYW4gZW1wdHkgc2VsZWN0b3Jcblx0c2VsZWN0b3I6IFwiXCIsXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXHRcdHJldHVybiBudW0gIT0gbnVsbCA/XG5cblx0XHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRcdCggbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXSApIDpcblxuXHRcdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdFx0c2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblx0XHRyZXQuY29udGV4dCA9IHRoaXMuY29udGV4dDtcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFqUXVlcnkuaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBqUXVlcnkuaXNBcnJheSggY29weSApICkgKSApIHtcblxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgKSB7XG5cdFx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUoIG9iaiApID09PSBcImZ1bmN0aW9uXCI7XG5cdH0sXG5cblx0aXNBcnJheTogQXJyYXkuaXNBcnJheSxcblxuXHRpc1dpbmRvdzogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9LFxuXG5cdGlzTnVtZXJpYzogZnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChudWxsfHRydWV8ZmFsc2V8XCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0Ly8gYWRkaW5nIDEgY29ycmVjdHMgbG9zcyBvZiBwcmVjaXNpb24gZnJvbSBwYXJzZUZsb2F0ICgjMTUxMDApXG5cdFx0dmFyIHJlYWxTdHJpbmdPYmogPSBvYmogJiYgb2JqLnRvU3RyaW5nKCk7XG5cdFx0cmV0dXJuICFqUXVlcnkuaXNBcnJheSggb2JqICkgJiYgKCByZWFsU3RyaW5nT2JqIC0gcGFyc2VGbG9hdCggcmVhbFN0cmluZ09iaiApICsgMSApID49IDA7XG5cdH0sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIga2V5O1xuXG5cdFx0Ly8gTm90IHBsYWluIG9iamVjdHM6XG5cdFx0Ly8gLSBBbnkgb2JqZWN0IG9yIHZhbHVlIHdob3NlIGludGVybmFsIFtbQ2xhc3NdXSBwcm9wZXJ0eSBpcyBub3QgXCJbb2JqZWN0IE9iamVjdF1cIlxuXHRcdC8vIC0gRE9NIG5vZGVzXG5cdFx0Ly8gLSB3aW5kb3dcblx0XHRpZiAoIGpRdWVyeS50eXBlKCBvYmogKSAhPT0gXCJvYmplY3RcIiB8fCBvYmoubm9kZVR5cGUgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBOb3Qgb3duIGNvbnN0cnVjdG9yIHByb3BlcnR5IG11c3QgYmUgT2JqZWN0XG5cdFx0aWYgKCBvYmouY29uc3RydWN0b3IgJiZcblx0XHRcdFx0IWhhc093bi5jYWxsKCBvYmosIFwiY29uc3RydWN0b3JcIiApICYmXG5cdFx0XHRcdCFoYXNPd24uY2FsbCggb2JqLmNvbnN0cnVjdG9yLnByb3RvdHlwZSB8fCB7fSwgXCJpc1Byb3RvdHlwZU9mXCIgKSApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBPd24gcHJvcGVydGllcyBhcmUgZW51bWVyYXRlZCBmaXJzdGx5LCBzbyB0byBzcGVlZCB1cCxcblx0XHQvLyBpZiBsYXN0IG9uZSBpcyBvd24sIHRoZW4gYWxsIHByb3BlcnRpZXMgYXJlIG93blxuXHRcdGZvciAoIGtleSBpbiBvYmogKSB7fVxuXG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkIHx8IGhhc093bi5jYWxsKCBvYmosIGtleSApO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wLCBpT1M8NiAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdFx0dHlwZW9mIG9iajtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHR2YXIgc2NyaXB0LFxuXHRcdFx0aW5kaXJlY3QgPSBldmFsO1xuXG5cdFx0Y29kZSA9IGpRdWVyeS50cmltKCBjb2RlICk7XG5cblx0XHRpZiAoIGNvZGUgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBjb2RlIGluY2x1ZGVzIGEgdmFsaWQsIHByb2xvZ3VlIHBvc2l0aW9uXG5cdFx0XHQvLyBzdHJpY3QgbW9kZSBwcmFnbWEsIGV4ZWN1dGUgY29kZSBieSBpbmplY3RpbmcgYVxuXHRcdFx0Ly8gc2NyaXB0IHRhZyBpbnRvIHRoZSBkb2N1bWVudC5cblx0XHRcdGlmICggY29kZS5pbmRleE9mKCBcInVzZSBzdHJpY3RcIiApID09PSAxICkge1xuXHRcdFx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cdFx0XHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgYXZvaWQgdGhlIERPTSBub2RlIGNyZWF0aW9uLCBpbnNlcnRpb25cblx0XHRcdFx0Ly8gYW5kIHJlbW92YWwgYnkgdXNpbmcgYW4gaW5kaXJlY3QgZ2xvYmFsIGV2YWxcblxuXHRcdFx0XHRpbmRpcmVjdCggY29kZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdH0sXG5cblx0bm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjFcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdC8vIGFyZ3VtZW50cy5cblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0XHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0Zm4gPSB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBTaW11bGF0ZWQgYmluZFxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdFx0fTtcblxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9LFxuXG5cdG5vdzogRGF0ZS5ub3csXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuLy8gSlNIaW50IHdvdWxkIGVycm9yIG9uIHRoaXMgY29kZSBkdWUgdG8gdGhlIFN5bWJvbCBub3QgYmVpbmcgZGVmaW5lZCBpbiBFUzUuXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuanNoaW50cmMgd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBqdXN0IGRpc2FibGUgSlNIaW50IGZvciB0aGVzZVxuLy8gdGhyZWUgbGluZXMuXG4vKiBqc2hpbnQgaWdub3JlOiBzdGFydCAqL1xuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuLyoganNoaW50IGlnbm9yZTogZW5kICovXG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiBpT1MgOC4yIChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXG5cdGlmICggdHlwZSA9PT0gXCJmdW5jdGlvblwiIHx8IGpRdWVyeS5pc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjIuMVxuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNS0xMC0xN1xuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gR2VuZXJhbC1wdXJwb3NlIGNvbnN0YW50c1xuXHRNQVhfTkVHQVRJVkUgPSAxIDw8IDMxLFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKHt9KS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hfbmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0W2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXFxceDAwLVxcXFx4YTBdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cdHJlc2NhcGUgPSAvJ3xcXFxcL2csXG5cblx0Ly8gQ1NTIGVzY2FwZXMgaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9O1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG5pZHNlbGVjdCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXG5cdFx0aWYgKCAoIGNvbnRleHQgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IHByZWZlcnJlZERvYyApICE9PSBkb2N1bWVudCApIHtcblx0XHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0fVxuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmIChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkpICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCghcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSkgKSB7XG5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXG5cdFx0XHRcdC8vIHFTQSBsb29rcyBvdXRzaWRlIEVsZW1lbnQgY29udGV4dCwgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudFxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB3b3JrYXJvdW5kIHRlY2huaXF1ZVxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PThcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0fSBlbHNlIGlmICggY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRpZiAoIChuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkpICkge1xuXHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJlc2NhcGUsIFwiXFxcXCQmXCIgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKG5pZCA9IGV4cGFuZG8pICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0bmlkc2VsZWN0ID0gcmlkZW50aWZpZXIudGVzdCggbmlkICkgPyBcIiNcIiArIG5pZCA6IFwiW2lkPSdcIiArIG5pZCArIFwiJ11cIjtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IG5pZHNlbGVjdCArIFwiIFwiICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZGl2IGFuZCBleHBlY3RzIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZGl2ICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBkaXYucGFyZW50Tm9kZSApIHtcblx0XHRcdGRpdi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBkaXYgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRkaXYgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdChcInxcIiksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbaV0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0KCB+Yi5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKSAtXG5cdFx0XHQoIH5hLnNvdXJjZUluZGV4IHx8IE1BWF9ORUdBVElWRSApO1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBwYXJlbnQsXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIChwYXJlbnQgPSBkb2N1bWVudC5kZWZhdWx0VmlldykgJiYgcGFyZW50LnRvcCAhPT0gcGFyZW50ICkge1xuXHRcdC8vIFN1cHBvcnQ6IElFIDExXG5cdFx0aWYgKCBwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHBhcmVudC5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBwYXJlbnQuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRwYXJlbnQuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFkaXYuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaW5kIGFuZCBmaWx0ZXJcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBtID8gWyBtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHQvLyBTdXBwb3J0OiBJRTYvN1xuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRkZWxldGUgRXhwci5maW5kW1wiSURcIl07XG5cblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFtcIlRBR1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kW1wiQ0xBU1NcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiOmNoZWNrZWRcIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIi4jLitbK35dXCIpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZGl2LCBcImRpdlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZGl2LCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbihcInxcIikgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbihcInxcIikgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYSkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHRcdGlmICggYiA9PT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09PSBwcmVmZXJyZWREb2MgJiYgY29udGFpbnMocHJlZmVycmVkRG9jLCBiKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGF0dHJpYnV0ZSBzZWxlY3RvcnMgYXJlIHF1b3RlZFxuXHRleHByID0gZXhwci5yZXBsYWNlKCByYXR0cmlidXRlUXVvdGVzLCBcIj0nJDEnXVwiICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFjb21waWxlckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cdFx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoIChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIgKTtcblx0XHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBhcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gbm9kZVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2U7XG5cdFx0fSxcblxuXHRcdFwiZGlzYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBkaXIgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsgZGlyIF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBkaXIgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRzdXBwb3J0LmdldEJ5SWQgJiYgY29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdFx0XHRFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGRpdjEgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZGl2MS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdGRpdi5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGRpdi5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIikgPT09IFwiI1wiIDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdGRpdi5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGRpdi5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdHJldHVybiBkaXYuZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT0gbnVsbDtcbn0pICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0pO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59KSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW1xcdy1dKylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8gKTtcblxuXG5cbnZhciByaXNTaW1wbGUgPSAvXi5bXjojXFxbXFwuLF0qJC87XG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cblx0fVxuXG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cblx0fVxuXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0XHR9XG5cblx0XHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHR9ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRyZXR1cm4gZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgP1xuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXSA6XG5cdFx0alF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHRcdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdC8vIE5lZWRlZCBiZWNhdXNlICQoIHNlbGVjdG9yLCBjb250ZXh0ICkgYmVjb21lcyAkKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKVxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZSggcmV0ICkgOiByZXQgKTtcblx0XHRyZXQuc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yID8gdGhpcy5zZWxlY3RvciArIFwiIFwiICsgc2VsZWN0b3IgOiBzZWxlY3Rvcjtcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0qKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBCbGFja2JlcnJ5IDQuNlxuXHRcdFx0XHRcdC8vIGdFQklEIHJldHVybnMgbm9kZXMgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAoIzY5NjMpXG5cdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpcy5jb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpcy5jb250ZXh0ID0gdGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yLnNlbGVjdG9yICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3Iuc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmNvbnRleHQgPSBzZWxlY3Rvci5jb250ZXh0O1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0cG9zID0gcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSB8fCB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvcnMsIGNvbnRleHQgfHwgdGhpcy5jb250ZXh0ICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHBvcyA/XG5cdFx0XHRcdFx0cG9zLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQgfHwgalF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdHdoaXRlID0gKCAvXFxTKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIGpRdWVyeS50eXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgbGlzdGVuZXIgbGlzdCwgZmluYWwgc3RhdGVcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIFwicmVqZWN0ZWRcIiBdLFxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBqUXVlcnkuaXNGdW5jdGlvbiggZm5zWyBpIF0gKSAmJiBmbnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZFsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdIGZvciBmb3J3YXJkaW5nIGFjdGlvbnMgdG8gbmV3RGVmZXJcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMgPT09IHByb21pc2UgPyBuZXdEZWZlci5wcm9taXNlKCkgOiB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdHByb21pc2UucGlwZSA9IHByb21pc2UudGhlbjtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDMgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZVsgZG9uZSB8IGZhaWwgfCBwcm9ncmVzcyBdID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdC8vIHN0YXRlID0gWyByZXNvbHZlZCB8IHJlamVjdGVkIF1cblx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXG5cdFx0XHRcdC8vIFsgcmVqZWN0X2xpc3QgfCByZXNvbHZlX2xpc3QgXS5kaXNhYmxlOyBwcm9ncmVzc19saXN0LmxvY2tcblx0XHRcdFx0fSwgdHVwbGVzWyBpIF4gMSBdWyAyIF0uZGlzYWJsZSwgdHVwbGVzWyAyIF1bIDIgXS5sb2NrICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGRlZmVycmVkWyByZXNvbHZlIHwgcmVqZWN0IHwgbm90aWZ5IF1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHByb21pc2UgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzdWJvcmRpbmF0ZSAvKiAsIC4uLiwgc3Vib3JkaW5hdGVOICovICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblx0XHRcdGxlbmd0aCA9IHJlc29sdmVWYWx1ZXMubGVuZ3RoLFxuXG5cdFx0XHQvLyB0aGUgY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBsZW5ndGggIT09IDEgfHxcblx0XHRcdFx0KCBzdWJvcmRpbmF0ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggc3Vib3JkaW5hdGUucHJvbWlzZSApICkgPyBsZW5ndGggOiAwLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkLlxuXHRcdFx0Ly8gSWYgcmVzb2x2ZVZhbHVlcyBjb25zaXN0IG9mIG9ubHkgYSBzaW5nbGUgRGVmZXJyZWQsIGp1c3QgdXNlIHRoYXQuXG5cdFx0XHRkZWZlcnJlZCA9IHJlbWFpbmluZyA9PT0gMSA/IHN1Ym9yZGluYXRlIDogalF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIFVwZGF0ZSBmdW5jdGlvbiBmb3IgYm90aCByZXNvbHZlIGFuZCBwcm9ncmVzcyB2YWx1ZXNcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSwgY29udGV4dHMsIHZhbHVlcyApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRjb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHR2YWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoIHZhbHVlcyA9PT0gcHJvZ3Jlc3NWYWx1ZXMgKSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjb250ZXh0cywgdmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fSxcblxuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMsIHByb2dyZXNzQ29udGV4dHMsIHJlc29sdmVDb250ZXh0cztcblxuXHRcdC8vIEFkZCBsaXN0ZW5lcnMgdG8gRGVmZXJyZWQgc3Vib3JkaW5hdGVzOyB0cmVhdCBvdGhlcnMgYXMgcmVzb2x2ZWRcblx0XHRpZiAoIGxlbmd0aCA+IDEgKSB7XG5cdFx0XHRwcm9ncmVzc1ZhbHVlcyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRwcm9ncmVzc0NvbnRleHRzID0gbmV3IEFycmF5KCBsZW5ndGggKTtcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0LnByb2dyZXNzKCB1cGRhdGVGdW5jKCBpLCBwcm9ncmVzc0NvbnRleHRzLCBwcm9ncmVzc1ZhbHVlcyApIClcblx0XHRcdFx0XHRcdC5kb25lKCB1cGRhdGVGdW5jKCBpLCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKSApXG5cdFx0XHRcdFx0XHQuZmFpbCggZGVmZXJyZWQucmVqZWN0ICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0LS1yZW1haW5pbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBJZiB3ZSdyZSBub3Qgd2FpdGluZyBvbiBhbnl0aGluZywgcmVzb2x2ZSB0aGUgbWFzdGVyXG5cdFx0aWYgKCAhcmVtYWluaW5nICkge1xuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3Q7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHQvLyBBZGQgdGhlIGNhbGxiYWNrXG5cdGpRdWVyeS5yZWFkeS5wcm9taXNlKCkuZG9uZSggZm4gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIb2xkIChvciByZWxlYXNlKSB0aGUgcmVhZHkgZXZlbnRcblx0aG9sZFJlYWR5OiBmdW5jdGlvbiggaG9sZCApIHtcblx0XHRpZiAoIGhvbGQgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHRcdH1cblx0fSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cblx0XHQvLyBUcmlnZ2VyIGFueSBib3VuZCByZWFkeSBldmVudHNcblx0XHRpZiAoIGpRdWVyeS5mbi50cmlnZ2VySGFuZGxlciApIHtcblx0XHRcdGpRdWVyeSggZG9jdW1lbnQgKS50cmlnZ2VySGFuZGxlciggXCJyZWFkeVwiICk7XG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkub2ZmKCBcInJlYWR5XCIgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuLyoqXG4gKiBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuICovXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbmpRdWVyeS5yZWFkeS5wcm9taXNlID0gZnVuY3Rpb24oIG9iaiApIHtcblx0aWYgKCAhcmVhZHlMaXN0ICkge1xuXG5cdFx0cmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cblx0XHQvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuXHRcdC8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuXHRcdC8vIFN1cHBvcnQ6IElFOS0xMCBvbmx5XG5cdFx0Ly8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5cdFx0aWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0XHRcdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdFx0XHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHRcdFx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZWFkeUxpc3QucHJvbWlzZSggb2JqICk7XG59O1xuXG4vLyBLaWNrIG9mZiB0aGUgRE9NIHJlYWR5IGNoZWNrIGV2ZW4gaWYgdGhlIHVzZXIgZG9lcyBub3RcbmpRdWVyeS5yZWFkeS5wcm9taXNlKCk7XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjaGFpbmFibGUgP1xuXHRcdGVsZW1zIDpcblxuXHRcdC8vIEdldHNcblx0XHRidWxrID9cblx0XHRcdGZuLmNhbGwoIGVsZW1zICkgOlxuXHRcdFx0bGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdC8qIGpzaGludCAtVzAxOCAqL1xuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0cmVnaXN0ZXI6IGZ1bmN0aW9uKCBvd25lciwgaW5pdGlhbCApIHtcblx0XHR2YXIgdmFsdWUgPSBpbml0aWFsIHx8IHt9O1xuXG5cdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlLCBub24td3JpdGFibGUgcHJvcGVydHlcblx0XHQvLyBjb25maWd1cmFiaWxpdHkgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdC8vIGRlbGV0ZWQgd2l0aCB0aGUgZGVsZXRlIG9wZXJhdG9yXG5cdFx0fSBlbHNlIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdH0gKTtcblx0XHR9XG5cdFx0cmV0dXJuIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0fSxcblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblx0XHRcdHJldHVybiB7fTtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBkYXRhIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIHByb3AgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGtleSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgc3RvcmVkO1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRzdG9yZWQgPSB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXG5cdFx0XHRyZXR1cm4gc3RvcmVkICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRzdG9yZWQgOiB0aGlzLmdldCggb3duZXIsIGpRdWVyeS5jYW1lbENhc2UoIGtleSApICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLCBuYW1lLCBjYW1lbCxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0aGlzLnJlZ2lzdGVyKCBvd25lciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIFwibmFtZVwiIGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2hlbiBkYXRhIGlzIGluaXRpYWxseSBjcmVhdGVkLCB2aWEgKFwia2V5XCIsIFwidmFsXCIpIHNpZ25hdHVyZSxcblx0XHRcdFx0Ly8ga2V5cyB3aWxsIGJlIGNvbnZlcnRlZCB0byBjYW1lbENhc2UuXG5cdFx0XHRcdC8vIFNpbmNlIHRoZXJlIGlzIG5vIHdheSB0byB0ZWxsIF9ob3dfIGEga2V5IHdhcyBhZGRlZCwgcmVtb3ZlXG5cdFx0XHRcdC8vIGJvdGggcGxhaW4ga2V5IGFuZCBjYW1lbENhc2Uga2V5LiAjMTI3ODZcblx0XHRcdFx0Ly8gVGhpcyB3aWxsIG9ubHkgcGVuYWxpemUgdGhlIGFycmF5IGFyZ3VtZW50IHBhdGguXG5cdFx0XHRcdG5hbWUgPSBrZXkuY29uY2F0KCBrZXkubWFwKCBqUXVlcnkuY2FtZWxDYXNlICkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNhbWVsID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gVHJ5IHRoZSBzdHJpbmcgYXMgYSBrZXkgYmVmb3JlIGFueSBtYW5pcHVsYXRpb25cblx0XHRcdFx0aWYgKCBrZXkgaW4gY2FjaGUgKSB7XG5cdFx0XHRcdFx0bmFtZSA9IFsga2V5LCBjYW1lbCBdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0bmFtZSA9IGNhbWVsO1xuXHRcdFx0XHRcdG5hbWUgPSBuYW1lIGluIGNhY2hlID9cblx0XHRcdFx0XHRcdFsgbmFtZSBdIDogKCBuYW1lLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsgbmFtZVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9IDM1LTQ1K1xuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDdcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhID09PSBcInRydWVcIiA/IHRydWUgOlxuXHRcdFx0XHRcdGRhdGEgPT09IFwiZmFsc2VcIiA/IGZhbHNlIDpcblx0XHRcdFx0XHRkYXRhID09PSBcIm51bGxcIiA/IG51bGwgOlxuXG5cdFx0XHRcdFx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0XHRcdFx0XHQrZGF0YSArIFwiXCIgPT09IGRhdGEgPyArZGF0YSA6XG5cdFx0XHRcdFx0cmJyYWNlLnRlc3QoIGRhdGEgKSA/IGpRdWVyeS5wYXJzZUpTT04oIGRhdGEgKSA6XG5cdFx0XHRcdFx0ZGF0YTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTExK1xuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGEsIGNhbWVsS2V5O1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyB3aXRoIHRoZSBrZXkgYXMtaXNcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICkgfHxcblxuXHRcdFx0XHRcdC8vIFRyeSB0byBmaW5kIGRhc2hlZCBrZXkgaWYgaXQgZXhpc3RzIChnaC0yNzc5KVxuXHRcdFx0XHRcdC8vIFRoaXMgaXMgZm9yIDIuMi54IG9ubHlcblx0XHRcdFx0XHRkYXRhVXNlci5nZXQoIGVsZW0sIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKSApO1xuXG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FtZWxLZXkgPSBqUXVlcnkuY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIHdpdGggdGhlIGtleSBjYW1lbGl6ZWRcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwgY2FtZWxLZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwgY2FtZWxLZXksIHVuZGVmaW5lZCApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdGNhbWVsS2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIEZpcnN0LCBhdHRlbXB0IHRvIHN0b3JlIGEgY29weSBvciByZWZlcmVuY2Ugb2YgYW55XG5cdFx0XHRcdC8vIGRhdGEgdGhhdCBtaWdodCd2ZSBiZWVuIHN0b3JlIHdpdGggYSBjYW1lbENhc2VkIGtleS5cblx0XHRcdFx0dmFyIGRhdGEgPSBkYXRhVXNlci5nZXQoIHRoaXMsIGNhbWVsS2V5ICk7XG5cblx0XHRcdFx0Ly8gRm9yIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGUgaW50ZXJvcCwgd2UgaGF2ZSB0b1xuXHRcdFx0XHQvLyBzdG9yZSBwcm9wZXJ0eSBuYW1lcyB3aXRoIGRhc2hlcyBpbiBhIGNhbWVsQ2FzZSBmb3JtLlxuXHRcdFx0XHQvLyBUaGlzIG1pZ2h0IG5vdCBhcHBseSB0byBhbGwgcHJvcGVydGllcy4uLipcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBjYW1lbEtleSwgdmFsdWUgKTtcblxuXHRcdFx0XHQvLyAqLi4uIEluIHRoZSBjYXNlIG9mIHByb3BlcnRpZXMgdGhhdCBtaWdodCBfYWN0dWFsbHlfXG5cdFx0XHRcdC8vIGhhdmUgZGFzaGVzLCB3ZSBuZWVkIHRvIGFsc28gc3RvcmUgYSBjb3B5IG9mIHRoYXRcblx0XHRcdFx0Ly8gdW5jaGFuZ2VkIHByb3BlcnR5LlxuXHRcdFx0XHRpZiAoIGtleS5pbmRleE9mKCBcIi1cIiApID4gLTEgJiYgZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgalF1ZXJ5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW4gbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCIgfHxcblx0XHRcdCFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLFxuXHRcdHNjYWxlID0gMSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0d2Vlbi5jdXIoKTsgfSA6XG5cdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTsgfSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0ZG8ge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKi5cblx0XHRcdC8vIFVzZSBzdHJpbmcgZm9yIGRvdWJsaW5nIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XG5cdFx0XHRzY2FsZSA9IHNjYWxlIHx8IFwiLjVcIjtcblxuXHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpXG5cdFx0Ly8gQnJlYWsgdGhlIGxvb3AgaWYgc2NhbGUgaXMgdW5jaGFuZ2VkIG9yIHBlcmZlY3QsIG9yIGlmIHdlJ3ZlIGp1c3QgaGFkIGVub3VnaC5cblx0XHR9IHdoaWxlIChcblx0XHRcdHNjYWxlICE9PSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsICkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zXG5cdFx0KTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW1xcdzotXSspLyApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRTlcblx0b3B0aW9uOiBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF0sXG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG4vLyBTdXBwb3J0OiBJRTlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0ID0gdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgP1xuXHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICkgOlxuXHRcdFx0dHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiA/XG5cdFx0XHRcdGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICkgOlxuXHRcdFx0W107XG5cblx0cmV0dXJuIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBqUXVlcnkubm9kZU5hbWUoIGNvbnRleHQsIHRhZyApID9cblx0XHRqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKSA6XG5cdFx0cmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgY29udGFpbnMsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBQaGFudG9tSlM8MlxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjEsIFBoYW50b21KUzwyXG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wLTQuMywgU2FmYXJpPD01LjFcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaTw9NS4xLCBBbmRyb2lkPDQuMlxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFPD0xMStcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRTlcbi8vIFNlZSAjMTMzOTMgZm9yIG1vcmUgaW5mb1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBEb24ndCBhdHRhY2ggZXZlbnRzIHRvIG5vRGF0YSBvciB0ZXh0L2NvbW1lbnQgbm9kZXMgKGJ1dCBhbGxvdyBwbGFpbiBvYmplY3RzKVxuXHRcdGlmICggIWVsZW1EYXRhICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yIDIpIGhhdmUgbmFtZXNwYWNlKHMpXG5cdFx0XHRcdC8vIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBtYXRjaGVzLCBzZWwsIGhhbmRsZU9iaixcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBTdXBwb3J0IChhdCBsZWFzdCk6IENocm9tZSwgSUU5XG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICgjMTMxODApXG5cdFx0Ly9cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PD00Mitcblx0XHQvLyBBdm9pZCBub24tbGVmdC1jbGljayBpbiBGRiBidXQgZG9uJ3QgYmxvY2sgSUUgcmFkaW8gZXZlbnRzICgjMzg2MSwgZ2gtMjM0Mylcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiYgY3VyLm5vZGVUeXBlICYmXG5cdFx0XHQoIGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIiB8fCBpc05hTiggZXZlbnQuYnV0dG9uICkgfHwgZXZlbnQuYnV0dG9uIDwgMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICggY3VyLmRpc2FibGVkICE9PSB0cnVlIHx8IGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIiApICkge1xuXHRcdFx0XHRcdG1hdGNoZXMgPSBbXTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZXMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlcyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IHRoaXMsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdC8vIEluY2x1ZGVzIHNvbWUgZXZlbnQgcHJvcHMgc2hhcmVkIGJ5IEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50XG5cdHByb3BzOiAoIFwiYWx0S2V5IGJ1YmJsZXMgY2FuY2VsYWJsZSBjdHJsS2V5IGN1cnJlbnRUYXJnZXQgZGV0YWlsIGV2ZW50UGhhc2UgXCIgK1xuXHRcdFwibWV0YUtleSByZWxhdGVkVGFyZ2V0IHNoaWZ0S2V5IHRhcmdldCB0aW1lU3RhbXAgdmlldyB3aGljaFwiICkuc3BsaXQoIFwiIFwiICksXG5cblx0Zml4SG9va3M6IHt9LFxuXG5cdGtleUhvb2tzOiB7XG5cdFx0cHJvcHM6IFwiY2hhciBjaGFyQ29kZSBrZXkga2V5Q29kZVwiLnNwbGl0KCBcIiBcIiApLFxuXHRcdGZpbHRlcjogZnVuY3Rpb24oIGV2ZW50LCBvcmlnaW5hbCApIHtcblxuXHRcdFx0Ly8gQWRkIHdoaWNoIGZvciBrZXkgZXZlbnRzXG5cdFx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgKSB7XG5cdFx0XHRcdGV2ZW50LndoaWNoID0gb3JpZ2luYWwuY2hhckNvZGUgIT0gbnVsbCA/IG9yaWdpbmFsLmNoYXJDb2RlIDogb3JpZ2luYWwua2V5Q29kZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblx0fSxcblxuXHRtb3VzZUhvb2tzOiB7XG5cdFx0cHJvcHM6ICggXCJidXR0b24gYnV0dG9ucyBjbGllbnRYIGNsaWVudFkgb2Zmc2V0WCBvZmZzZXRZIHBhZ2VYIHBhZ2VZIFwiICtcblx0XHRcdFwic2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudFwiICkuc3BsaXQoIFwiIFwiICksXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbiggZXZlbnQsIG9yaWdpbmFsICkge1xuXHRcdFx0dmFyIGV2ZW50RG9jLCBkb2MsIGJvZHksXG5cdFx0XHRcdGJ1dHRvbiA9IG9yaWdpbmFsLmJ1dHRvbjtcblxuXHRcdFx0Ly8gQ2FsY3VsYXRlIHBhZ2VYL1kgaWYgbWlzc2luZyBhbmQgY2xpZW50WC9ZIGF2YWlsYWJsZVxuXHRcdFx0aWYgKCBldmVudC5wYWdlWCA9PSBudWxsICYmIG9yaWdpbmFsLmNsaWVudFggIT0gbnVsbCApIHtcblx0XHRcdFx0ZXZlbnREb2MgPSBldmVudC50YXJnZXQub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcblx0XHRcdFx0ZG9jID0gZXZlbnREb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0XHRib2R5ID0gZXZlbnREb2MuYm9keTtcblxuXHRcdFx0XHRldmVudC5wYWdlWCA9IG9yaWdpbmFsLmNsaWVudFggK1xuXHRcdFx0XHRcdCggZG9jICYmIGRvYy5zY3JvbGxMZWZ0IHx8IGJvZHkgJiYgYm9keS5zY3JvbGxMZWZ0IHx8IDAgKSAtXG5cdFx0XHRcdFx0KCBkb2MgJiYgZG9jLmNsaWVudExlZnQgfHwgYm9keSAmJiBib2R5LmNsaWVudExlZnQgfHwgMCApO1xuXHRcdFx0XHRldmVudC5wYWdlWSA9IG9yaWdpbmFsLmNsaWVudFkgK1xuXHRcdFx0XHRcdCggZG9jICYmIGRvYy5zY3JvbGxUb3AgIHx8IGJvZHkgJiYgYm9keS5zY3JvbGxUb3AgIHx8IDAgKSAtXG5cdFx0XHRcdFx0KCBkb2MgJiYgZG9jLmNsaWVudFRvcCAgfHwgYm9keSAmJiBib2R5LmNsaWVudFRvcCAgfHwgMCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0XHQvLyBOb3RlOiBidXR0b24gaXMgbm90IG5vcm1hbGl6ZWQsIHNvIGRvbid0IHVzZSBpdFxuXHRcdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGV2ZW50LndoaWNoID0gKCBidXR0b24gJiAxID8gMSA6ICggYnV0dG9uICYgMiA/IDMgOiAoIGJ1dHRvbiAmIDQgPyAyIDogMCApICkgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoIGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblxuXHRcdC8vIENyZWF0ZSBhIHdyaXRhYmxlIGNvcHkgb2YgdGhlIGV2ZW50IG9iamVjdCBhbmQgbm9ybWFsaXplIHNvbWUgcHJvcGVydGllc1xuXHRcdHZhciBpLCBwcm9wLCBjb3B5LFxuXHRcdFx0dHlwZSA9IGV2ZW50LnR5cGUsXG5cdFx0XHRvcmlnaW5hbEV2ZW50ID0gZXZlbnQsXG5cdFx0XHRmaXhIb29rID0gdGhpcy5maXhIb29rc1sgdHlwZSBdO1xuXG5cdFx0aWYgKCAhZml4SG9vayApIHtcblx0XHRcdHRoaXMuZml4SG9va3NbIHR5cGUgXSA9IGZpeEhvb2sgPVxuXHRcdFx0XHRybW91c2VFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLm1vdXNlSG9va3MgOlxuXHRcdFx0XHRya2V5RXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5rZXlIb29rcyA6XG5cdFx0XHRcdHt9O1xuXHRcdH1cblx0XHRjb3B5ID0gZml4SG9vay5wcm9wcyA/IHRoaXMucHJvcHMuY29uY2F0KCBmaXhIb29rLnByb3BzICkgOiB0aGlzLnByb3BzO1xuXG5cdFx0ZXZlbnQgPSBuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cblx0XHRpID0gY29weS5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRwcm9wID0gY29weVsgaSBdO1xuXHRcdFx0ZXZlbnRbIHByb3AgXSA9IG9yaWdpbmFsRXZlbnRbIHByb3AgXTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBDb3Jkb3ZhIDIuNSAoV2ViS2l0KSAoIzEzMjU1KVxuXHRcdC8vIEFsbCBldmVudHMgc2hvdWxkIGhhdmUgYSB0YXJnZXQ7IENvcmRvdmEgZGV2aWNlcmVhZHkgZG9lc24ndFxuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGRvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA2LjArLCBDaHJvbWU8Mjhcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdGlmICggZXZlbnQudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZpeEhvb2suZmlsdGVyID8gZml4SG9vay5maWx0ZXIoIGV2ZW50LCBvcmlnaW5hbEV2ZW50ICkgOiBldmVudDtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHRoaXMuY2xpY2soKTtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBkb24ndCBmaXJlIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbXFx3Oi1dKylbXj5dKilcXC8+L2dpLFxuXG5cdC8vIFN1cHBvcnQ6IElFIDEwLTExLCBFZGdlIDEwMjQwK1xuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIE1hbmlwdWxhdGluZyB0YWJsZXMgcmVxdWlyZXMgYSB0Ym9keVxuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdGpRdWVyeS5ub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSA/XG5cblx0XHRlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInRib2R5XCIgKVsgMCBdIHx8XG5cdFx0XHRlbGVtLmFwcGVuZENoaWxkKCBlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0Ym9keVwiICkgKSA6XG5cdFx0ZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XG5cblx0aWYgKCBtYXRjaCApIHtcblx0XHRlbGVtLnR5cGUgPSBtYXRjaFsgMSBdO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIGlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjEsIFBoYW50b21KUzwyXG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHA6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PSAzNS00NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0gMzUtNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBLZWVwIGRvbU1hbmlwIGV4cG9zZWQgdW50aWwgMy4wIChnaC0yMjI1KVxuXHRkb21NYW5pcDogZG9tTWFuaXAsXG5cblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogUXRXZWJLaXRcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Ncblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xuXG5cbnZhciBpZnJhbWUsXG5cdGVsZW1kaXNwbGF5ID0ge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveFxuXHRcdC8vIFdlIGhhdmUgdG8gcHJlLWRlZmluZSB0aGVzZSB2YWx1ZXMgZm9yIEZGICgjMTAyMjcpXG5cdFx0SFRNTDogXCJibG9ja1wiLFxuXHRcdEJPRFk6IFwiYmxvY2tcIlxuXHR9O1xuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBhY3R1YWwgZGlzcGxheSBvZiBhIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5vZGVOYW1lIG9mIHRoZSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gZG9jIERvY3VtZW50IG9iamVjdFxuICovXG5cbi8vIENhbGxlZCBvbmx5IGZyb20gd2l0aGluIGRlZmF1bHREaXNwbGF5XG5mdW5jdGlvbiBhY3R1YWxEaXNwbGF5KCBuYW1lLCBkb2MgKSB7XG5cdHZhciBlbGVtID0galF1ZXJ5KCBkb2MuY3JlYXRlRWxlbWVudCggbmFtZSApICkuYXBwZW5kVG8oIGRvYy5ib2R5ICksXG5cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbVsgMCBdLCBcImRpc3BsYXlcIiApO1xuXG5cdC8vIFdlIGRvbid0IGhhdmUgYW55IGRhdGEgc3RvcmVkIG9uIHRoZSBlbGVtZW50LFxuXHQvLyBzbyB1c2UgXCJkZXRhY2hcIiBtZXRob2QgYXMgZmFzdCB3YXkgdG8gZ2V0IHJpZCBvZiB0aGUgZWxlbWVudFxuXHRlbGVtLmRldGFjaCgpO1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG4vKipcbiAqIFRyeSB0byBkZXRlcm1pbmUgdGhlIGRlZmF1bHQgZGlzcGxheSB2YWx1ZSBvZiBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gbm9kZU5hbWVcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdERpc3BsYXkoIG5vZGVOYW1lICkge1xuXHR2YXIgZG9jID0gZG9jdW1lbnQsXG5cdFx0ZGlzcGxheSA9IGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdO1xuXG5cdGlmICggIWRpc3BsYXkgKSB7XG5cdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblxuXHRcdC8vIElmIHRoZSBzaW1wbGUgd2F5IGZhaWxzLCByZWFkIGZyb20gaW5zaWRlIGFuIGlmcmFtZVxuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgfHwgIWRpc3BsYXkgKSB7XG5cblx0XHRcdC8vIFVzZSB0aGUgYWxyZWFkeS1jcmVhdGVkIGlmcmFtZSBpZiBwb3NzaWJsZVxuXHRcdFx0aWZyYW1lID0gKCBpZnJhbWUgfHwgalF1ZXJ5KCBcIjxpZnJhbWUgZnJhbWVib3JkZXI9JzAnIHdpZHRoPScwJyBoZWlnaHQ9JzAnLz5cIiApIClcblx0XHRcdFx0LmFwcGVuZFRvKCBkb2MuZG9jdW1lbnRFbGVtZW50ICk7XG5cblx0XHRcdC8vIEFsd2F5cyB3cml0ZSBhIG5ldyBIVE1MIHNrZWxldG9uIHNvIFdlYmtpdCBhbmQgRmlyZWZveCBkb24ndCBjaG9rZSBvbiByZXVzZVxuXHRcdFx0ZG9jID0gaWZyYW1lWyAwIF0uY29udGVudERvY3VtZW50O1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdFx0ZG9jLndyaXRlKCk7XG5cdFx0XHRkb2MuY2xvc2UoKTtcblxuXHRcdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblx0XHRcdGlmcmFtZS5kZXRhY2goKTtcblx0XHR9XG5cblx0XHQvLyBTdG9yZSB0aGUgY29ycmVjdCBkZWZhdWx0IGRpc3BsYXlcblx0XHRlbGVtZGlzcGxheVsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cdH1cblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cbnZhciBybWFyZ2luID0gKCAvXm1hcmdpbi8gKTtcblxudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw9MTErLCBGaXJlZm94PD0zMCsgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBwaXhlbE1hcmdpblJpZ2h0VmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjA7d2lkdGg6OHB4O2hlaWdodDowO3RvcDowO2xlZnQ6LTk5OTlweDtcIiArXG5cdFx0XCJwYWRkaW5nOjA7bWFyZ2luLXRvcDoxcHg7cG9zaXRpb246YWJzb2x1dGVcIjtcblx0Y29udGFpbmVyLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xuXHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG5cdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwidG9wOjElO3dpZHRoOjUwJVwiO1xuXHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGRpdlN0eWxlLm1hcmdpbkxlZnQgPT09IFwiMnB4XCI7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjUwJVwiO1xuXHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSBkaXZTdHlsZS5tYXJnaW5SaWdodCA9PT0gXCI0cHhcIjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cdH1cblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIFRoaXMgdGVzdCBpcyBleGVjdXRlZCBvbmx5IG9uY2UgYnV0IHdlIHN0aWxsIGRvIG1lbW9pemluZ1xuXHRcdFx0Ly8gc2luY2Ugd2UgY2FuIHVzZSB0aGUgYm94U2l6aW5nUmVsaWFibGUgcHJlLWNvbXB1dGluZy5cblx0XHRcdC8vIE5vIG5lZWQgdG8gY2hlY2sgaWYgdGhlIHRlc3Qgd2FzIGFscmVhZHkgcGVyZm9ybWVkLCB0aG91Z2guXG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGJveFNpemluZ1JlbGlhYmxlVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbE1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAtNC4zXG5cdFx0XHQvLyBXZSdyZSBjaGVja2luZyBmb3IgYm94U2l6aW5nUmVsaWFibGVWYWwgaGVyZSBpbnN0ZWFkIG9mIHBpeGVsTWFyZ2luUmlnaHRWYWxcblx0XHRcdC8vIHNpbmNlIHRoYXQgY29tcHJlc3NlcyBiZXR0ZXIgYW5kIHRoZXkncmUgY29tcHV0ZWQgdG9nZXRoZXIgYW55d2F5LlxuXHRcdFx0aWYgKCBib3hTaXppbmdSZWxpYWJsZVZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHBpeGVsTWFyZ2luUmlnaHRWYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggb25seSwgQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSAzN1xuXHRcdFx0aWYgKCBib3hTaXppbmdSZWxpYWJsZVZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luUmlnaHQ6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuXHRcdFx0Ly8gQ2hlY2sgaWYgZGl2IHdpdGggZXhwbGljaXQgd2lkdGggYW5kIG5vIG1hcmdpbi1yaWdodCBpbmNvcnJlY3RseVxuXHRcdFx0Ly8gZ2V0cyBjb21wdXRlZCBtYXJnaW4tcmlnaHQgYmFzZWQgb24gd2lkdGggb2YgY29udGFpbmVyLiAoIzMzMzMpXG5cdFx0XHQvLyBXZWJLaXQgQnVnIDEzMzQzIC0gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHdyb25nIHZhbHVlIGZvciBtYXJnaW4tcmlnaHRcblx0XHRcdC8vIFRoaXMgc3VwcG9ydCBmdW5jdGlvbiBpcyBvbmx5IGV4ZWN1dGVkIG9uY2Ugc28gbm8gbWVtb2l6aW5nIGlzIG5lZWRlZC5cblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdG1hcmdpbkRpdiA9IGRpdi5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdC8vIFJlc2V0IENTUzogYm94LXNpemluZzsgZGlzcGxheTsgbWFyZ2luOyBib3JkZXI7IHBhZGRpbmdcblx0XHRcdG1hcmdpbkRpdi5zdHlsZS5jc3NUZXh0ID0gZGl2LnN0eWxlLmNzc1RleHQgPVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRcdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94O1wiICtcblx0XHRcdFx0XCJkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MFwiO1xuXHRcdFx0bWFyZ2luRGl2LnN0eWxlLm1hcmdpblJpZ2h0ID0gbWFyZ2luRGl2LnN0eWxlLndpZHRoID0gXCIwXCI7XG5cdFx0XHRkaXYuc3R5bGUud2lkdGggPSBcIjFweFwiO1xuXHRcdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdFx0cmV0ID0gIXBhcnNlRmxvYXQoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBtYXJnaW5EaXYgKS5tYXJnaW5SaWdodCApO1xuXG5cdFx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXHRcdFx0ZGl2LnJlbW92ZUNoaWxkKCBtYXJnaW5EaXYgKTtcblxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cdHJldCA9IGNvbXB1dGVkID8gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF0gOiB1bmRlZmluZWQ7XG5cblx0Ly8gU3VwcG9ydDogT3BlcmEgMTIuMXggb25seVxuXHQvLyBGYWxsIGJhY2sgdG8gc3R5bGUgZXZlbiB3aXRob3V0IGNvbXB1dGVkXG5cdC8vIGNvbXB1dGVkIGlzIHVuZGVmaW5lZCBmb3IgZWxlbXMgb24gZG9jdW1lbnQgZnJhZ21lbnRzXG5cdGlmICggKCByZXQgPT09IFwiXCIgfHwgcmV0ID09PSB1bmRlZmluZWQgKSAmJiAhalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFOVxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG9ubHkgbmVlZGVkIGZvciAuY3NzKCdmaWx0ZXInKSAoIzEyNTM3KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsTWFyZ2luUmlnaHQoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiT1wiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZTtcblxuLy8gUmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gU2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYXVnbWVudFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhLCBpc0JvcmRlckJveCwgc3R5bGVzICkge1xuXHR2YXIgaSA9IGV4dHJhID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgP1xuXG5cdFx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXG5cdFx0NCA6XG5cblx0XHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXG5cdFx0bmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cblx0XHR2YWwgPSAwO1xuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpbiwgc28gYWRkIGl0IGlmIHdlIHdhbnQgaXRcblx0XHRpZiAoIGV4dHJhID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIGV4dHJhICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdGlmICggaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIG9mZnNldCBwcm9wZXJ0eSwgd2hpY2ggaXMgZXF1aXZhbGVudCB0byB0aGUgYm9yZGVyLWJveCB2YWx1ZVxuXHR2YXIgdmFsdWVJc0JvcmRlckJveCA9IHRydWUsXG5cdFx0dmFsID0gbmFtZSA9PT0gXCJ3aWR0aFwiID8gZWxlbS5vZmZzZXRXaWR0aCA6IGVsZW0ub2Zmc2V0SGVpZ2h0LFxuXHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHQvLyBTb21lIG5vbi1odG1sIGVsZW1lbnRzIHJldHVybiB1bmRlZmluZWQgZm9yIG9mZnNldFdpZHRoLCBzbyBjaGVjayBmb3IgbnVsbC91bmRlZmluZWRcblx0Ly8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XG5cdC8vIE1hdGhNTCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQ5MTY2OFxuXHRpZiAoIHZhbCA8PSAwIHx8IHZhbCA9PSBudWxsICkge1xuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIGNvbXB1dGVkIHRoZW4gdW5jb21wdXRlZCBjc3MgaWYgbmVjZXNzYXJ5XG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHRpZiAoIHZhbCA8IDAgfHwgdmFsID09IG51bGwgKSB7XG5cdFx0XHR2YWwgPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0XHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXG5cdFx0Ly8gQ2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0XHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0XHQoIHN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCB2YWwgPT09IGVsZW0uc3R5bGVbIG5hbWUgXSApO1xuXG5cdFx0Ly8gTm9ybWFsaXplIFwiXCIsIGF1dG8sIGFuZCBwcmVwYXJlIGZvciBleHRyYVxuXHRcdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cdH1cblxuXHQvLyBVc2UgdGhlIGFjdGl2ZSBib3gtc2l6aW5nIG1vZGVsIHRvIGFkZC9zdWJ0cmFjdCBpcnJlbGV2YW50IHN0eWxlc1xuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0ZWxlbSxcblx0XHRcdG5hbWUsXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLCBoaWRkZW4sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApO1xuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBSZXNldCB0aGUgaW5saW5lIGRpc3BsYXkgb2YgdGhpcyBlbGVtZW50IHRvIGxlYXJuIGlmIGl0IGlzXG5cdFx0XHQvLyBiZWluZyBoaWRkZW4gYnkgY2FzY2FkZWQgcnVsZXMgb3Igbm90XG5cdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gJiYgZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBlbGVtZW50cyB3aGljaCBoYXZlIGJlZW4gb3ZlcnJpZGRlbiB3aXRoIGRpc3BsYXk6IG5vbmVcblx0XHRcdC8vIGluIGEgc3R5bGVzaGVldCB0byB3aGF0ZXZlciB0aGUgZGVmYXVsdCBicm93c2VyIHN0eWxlIGlzXG5cdFx0XHQvLyBmb3Igc3VjaCBhbiBlbGVtZW50XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbiggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5hY2Nlc3MoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcIm9sZGRpc3BsYXlcIixcblx0XHRcdFx0XHRkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGhpZGRlbiA9IGlzSGlkZGVuKCBlbGVtICk7XG5cblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgfHwgIWhpZGRlbiApIHtcblx0XHRcdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XCJvbGRkaXNwbGF5XCIsXG5cdFx0XHRcdFx0aGlkZGVuID8gZGlzcGxheSA6IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgbW9zdCBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcFxuXHQvLyB0byBhdm9pZCB0aGUgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0aWYgKCAhc2hvdyB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IHNob3cgPyB2YWx1ZXNbIGluZGV4IF0gfHwgXCJcIiA6IFwibm9uZVwiO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHtcblx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHR9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHxcblx0XHRcdCggalF1ZXJ5LmNzc1Byb3BzWyBvcmlnTmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG9yaWdOYW1lICkgfHwgb3JpZ05hbWUgKTtcblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fFxuXHRcdFx0KCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggb3JpZ05hbWUgKSB8fCBvcmlnTmFtZSApO1xuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cdFx0XHRcdFx0ZWxlbS5vZmZzZXRXaWR0aCA9PT0gMCA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KFxuXHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0bmFtZSxcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHQpO1xuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xualF1ZXJ5LmNzc0hvb2tzLm1hcmdpblJpZ2h0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuIHN3YXAoIGVsZW0sIHsgXCJkaXNwbGF5XCI6IFwiaW5saW5lLWJsb2NrXCIgfSxcblx0XHRcdFx0Y3VyQ1NTLCBbIGVsZW0sIFwibWFyZ2luUmlnaHRcIiBdICk7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoICFybWFyZ2luLnRlc3QoIHByZWZpeCApICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW4oIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRTlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIENvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCB0aW1lcklkLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNCA7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHQvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCB0d2VlbiwgaG9va3MsIG9sZGZpcmUsIGRpc3BsYXksIGNoZWNrRGlzcGxheSxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW4oIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIEhhbmRsZSBxdWV1ZTogZmFsc2UgcHJvbWlzZXNcblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSGVpZ2h0L3dpZHRoIG92ZXJmbG93IHBhc3Ncblx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCJoZWlnaHRcIiBpbiBwcm9wcyB8fCBcIndpZHRoXCIgaW4gcHJvcHMgKSApIHtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG5vdGhpbmcgc25lYWtzIG91dFxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUU5LTEwIGRvIG5vdFxuXHRcdC8vIGNoYW5nZSB0aGUgb3ZlcmZsb3cgYXR0cmlidXRlIHdoZW4gb3ZlcmZsb3dYIGFuZFxuXHRcdC8vIG92ZXJmbG93WSBhcmUgc2V0IHRvIHRoZSBzYW1lIHZhbHVlXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBTZXQgZGlzcGxheSBwcm9wZXJ0eSB0byBpbmxpbmUtYmxvY2sgZm9yIGhlaWdodC93aWR0aFxuXHRcdC8vIGFuaW1hdGlvbnMgb24gaW5saW5lIGVsZW1lbnRzIHRoYXQgYXJlIGhhdmluZyB3aWR0aC9oZWlnaHQgYW5pbWF0ZWRcblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblxuXHRcdC8vIFRlc3QgZGVmYXVsdCBkaXNwbGF5IGlmIGRpc3BsYXkgaXMgY3VycmVudGx5IFwibm9uZVwiXG5cdFx0Y2hlY2tEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgP1xuXHRcdFx0ZGF0YVByaXYuZ2V0KCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApIHx8IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5O1xuXG5cdFx0aWYgKCBjaGVja0Rpc3BsYXkgPT09IFwiaW5saW5lXCIgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBzaG93L2hpZGUgcGFzc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLmV4ZWMoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGRhdGFTaG93IGxlZnQgb3ZlciBmcm9tIGEgc3RvcHBlZCBoaWRlIG9yIHNob3dcblx0XHRcdFx0Ly8gYW5kIHdlIGFyZSBnb2luZyB0byBwcm9jZWVkIHdpdGggc2hvdywgd2Ugc2hvdWxkIHByZXRlbmQgdG8gYmUgaGlkZGVuXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXG5cdFx0Ly8gQW55IG5vbi1meCB2YWx1ZSBzdG9wcyB1cyBmcm9tIHJlc3RvcmluZyB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRkaXNwbGF5ID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwge30gKTtcblx0XHR9XG5cblx0XHQvLyBTdG9yZSBzdGF0ZSBpZiBpdHMgdG9nZ2xlIC0gZW5hYmxlcyAuc3RvcCgpLnRvZ2dsZSgpIHRvIFwicmV2ZXJzZVwiXG5cdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdH1cblx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdGpRdWVyeSggZWxlbSApLnNob3coKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5KCBlbGVtICkuaGlkZSgpO1xuXHRcdFx0fSApO1xuXHRcdH1cblx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHByb3A7XG5cblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHR0d2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXG5cdFx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0XHR0d2Vlbi5lbmQgPSB0d2Vlbi5zdGFydDtcblx0XHRcdFx0XHR0d2Vlbi5zdGFydCA9IHByb3AgPT09IFwid2lkdGhcIiB8fCBwcm9wID09PSBcImhlaWdodFwiID8gMSA6IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0Ly8gSWYgdGhpcyBpcyBhIG5vb3AgbGlrZSAuaGlkZSgpLmhpZGUoKSwgcmVzdG9yZSBhbiBvdmVyd3JpdHRlbiBkaXNwbGF5IHZhbHVlXG5cdH0gZWxzZSBpZiAoICggZGlzcGxheSA9PT0gXCJub25lXCIgPyBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheSApID09PSBcImlubGluZVwiICkge1xuXHRcdHN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRqUXVlcnkucHJveHkoIHJlc3VsdC5zdG9wLCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHQvLyBhdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRyZXR1cm4gYW5pbWF0aW9uLnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90d2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4Lm9mZiA/IDAgOiB0eXBlb2Ygb3B0LmR1cmF0aW9uID09PSBcIm51bWJlclwiID9cblx0XHRvcHQuZHVyYXRpb24gOiBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyA/XG5cdFx0XHRqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXSA6IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW4gKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBqUXVlcnkubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBDaGVja3MgdGhlIHRpbWVyIGhhcyBub3QgYWxyZWFkeSBiZWVuIHJlbW92ZWRcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRpZiAoIHRpbWVyKCkgKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnRpbWVycy5wb3AoKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCAhdGltZXJJZCApIHtcblx0XHR0aW1lcklkID0gd2luZG93LnNldEludGVydmFsKCBqUXVlcnkuZngudGljaywgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdH1cbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdHdpbmRvdy5jbGVhckludGVydmFsKCB0aW1lcklkICk7XG5cblx0dGltZXJJZCA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cDovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IGlPUzw9NS4xLCBBbmRyb2lkPD00LjIrXG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw9Mi4zXG5cdC8vIE9wdGlvbnMgaW5zaWRlIGRpc2FibGVkIHNlbGVjdHMgYXJlIGluY29ycmVjdGx5IG1hcmtlZCBhcyBkaXNhYmxlZFxuXHRzZWxlY3QuZGlzYWJsZWQgPSB0cnVlO1xuXHRzdXBwb3J0Lm9wdERpc2FibGVkID0gIW9wdC5kaXNhYmxlZDtcblxuXHQvLyBTdXBwb3J0OiBJRTw9MTErXG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgYXR0cmlidXRlcyBhcmUgbG93ZXJjYXNlXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSwgcHJvcE5hbWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0cHJvcE5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cblx0XHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGdldCBzcGVjaWFsIHRyZWF0bWVudCAoIzEwODcwKVxuXHRcdFx0XHRpZiAoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHRcdFx0Ly8gU2V0IGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdG8gZmFsc2Vcblx0XHRcdFx0XHRlbGVtWyBwcm9wTmFtZSBdID0gZmFsc2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZTtcblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdHJldHVybiB0YWJpbmRleCA/XG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRhYmluZGV4LCAxMCApIDpcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiYgZWxlbS5ocmVmID9cblx0XHRcdFx0XHRcdFx0MCA6XG5cdFx0XHRcdFx0XHRcdC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cbnZhciByY2xhc3MgPSAvW1xcdFxcclxcblxcZl0vZztcblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggXCIgXCIgKyBjdXJWYWx1ZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IGpRdWVyeS50cmltKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgKSB7XG5cdFx0XHRjbGFzc2VzID0gdmFsdWUubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCBcIiBcIiArIGN1clZhbHVlICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBqUXVlcnkudHJpbSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIGdldENsYXNzKCBlbGVtICkgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nLFxuXHRyc3BhY2VzID0gL1tcXHgyMFxcdFxcclxcblxcZl0rL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIGlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0cmV0dXJuIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgP1xuXG5cdFx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRcdHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICkgOlxuXG5cdFx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdFx0cmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBqUXVlcnkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTAtMTErXG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRqUXVlcnkudHJpbSggalF1ZXJ5LnRleHQoIGVsZW0gKSApLnJlcGxhY2UoIHJzcGFjZXMsIFwiIFwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIiB8fCBpbmRleCA8IDAsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoLFxuXHRcdFx0XHRcdGkgPSBpbmRleCA8IDAgP1xuXHRcdFx0XHRcdFx0bWF4IDpcblx0XHRcdFx0XHRcdG9uZSA/IGluZGV4IDogMDtcblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0KCBzdXBwb3J0Lm9wdERpc2FibGVkID9cblx0XHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkIDogb3B0aW9uLmdldEF0dHJpYnV0ZSggXCJkaXNhYmxlZFwiICkgPT09IG51bGwgKSAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFqUXVlcnkubm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC87XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IGxvYWQgcmVzaXplIHNjcm9sbCB1bmxvYWQgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGVycm9yIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3hcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lLCBTYWZhcmlcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0galF1ZXJ5Lm5vdygpO1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCAyLjNcbi8vIFdvcmthcm91bmQgZmFpbHVyZSB0byBzdHJpbmctY2FzdCBudWxsIGlucHV0XG5qUXVlcnkucGFyc2VKU09OID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICsgXCJcIiApO1xufTtcblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFOVxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyaGFzaCA9IC8jLiokLyxcblx0cnRzID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogalF1ZXJ5LnBhcnNlSlNPTixcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gVGhlIGpxWEhSIHN0YXRlXG5cdFx0XHRzdGF0ZSA9IDAsXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGUgPT09IDIgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHR2YXIgbG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0aWYgKCAhc3RhdGUgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCAhc3RhdGUgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggc3RhdGUgPCAyICkge1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2sgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApLmNvbXBsZXRlID0gY29tcGxldGVEZWZlcnJlZC5hZGQ7XG5cdFx0anFYSFIuc3VjY2VzcyA9IGpxWEhSLmRvbmU7XG5cdFx0anFYSFIuZXJyb3IgPSBqcVhIUi5mYWlsO1xuXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggY2hhcmFjdGVyICgjNzUzMTogYW5kIHN0cmluZyBwcm9tb3Rpb24pXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApLnJlcGxhY2UoIHJoYXNoLCBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0galF1ZXJ5LnRyaW0oIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LTExK1xuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBpZiB1cmwgaXMgbWFsZm9ybWVkLCBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFOC0xMStcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHRjYWNoZVVSTCA9IHMudXJsO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9ICggcy51cmwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YSApO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGFudGktY2FjaGUgaW4gdXJsIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0cy51cmwgPSBydHMudGVzdCggY2FjaGVVUkwgKSA/XG5cblx0XHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbHJlYWR5IGEgJ18nIHBhcmFtZXRlciwgc2V0IGl0cyB2YWx1ZVxuXHRcdFx0XHRcdGNhY2hlVVJMLnJlcGxhY2UoIHJ0cywgXCIkMV89XCIgKyBub25jZSsrICkgOlxuXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFkZCBvbmUgdG8gdGhlIGVuZFxuXHRcdFx0XHRcdGNhY2hlVVJMICsgKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArIG5vbmNlKys7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IHN0YXRlID09PSAyICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRmb3IgKCBpIGluIHsgc3VjY2VzczogMSwgZXJyb3I6IDEsIGNvbXBsZXRlOiAxIH0gKSB7XG5cdFx0XHRqcVhIUlsgaSBdKCBzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0c3RhdGUgPSAxO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBleGNlcHRpb24gYXMgZXJyb3IgaWYgbm90IGRvbmVcblx0XHRcdFx0aWYgKCBzdGF0ZSA8IDIgKSB7XG5cdFx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblxuXHRcdFx0XHQvLyBTaW1wbHkgcmV0aHJvdyBvdGhlcndpc2Vcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gQ2FsbGVkIG9uY2Vcblx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdGUgaXMgXCJkb25lXCIgbm93XG5cdFx0XHRzdGF0ZSA9IDI7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXHRcdFwidGhyb3dzXCI6IHRydWVcblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucGFyZW50KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiYm9keVwiICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHRcdH1cblx0XHR9ICkuZW5kKCk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5maWx0ZXJzLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLmZpbHRlcnMudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLmZpbHRlcnMudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdC8vIFN1cHBvcnQ6IE9wZXJhIDw9IDEyLjEyXG5cdC8vIE9wZXJhIHJlcG9ydHMgb2Zmc2V0V2lkdGhzIGFuZCBvZmZzZXRIZWlnaHRzIGxlc3MgdGhhbiB6ZXJvIG9uIHNvbWUgZWxlbWVudHNcblx0Ly8gVXNlIE9SIGluc3RlYWQgb2YgQU5EIGFzIHRoZSBlbGVtZW50IGlzIG5vdCB2aXNpYmxlIGlmIGVpdGhlciBpcyB0cnVlXG5cdC8vIFNlZSB0aWNrZXRzICMxMDQwNiBhbmQgIzEzMTMyXG5cdHJldHVybiBlbGVtLm9mZnNldFdpZHRoID4gMCB8fCBlbGVtLm9mZnNldEhlaWdodCA+IDAgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCA+IDA7XG59O1xuXG5cblxuXG52YXIgcjIwID0gLyUyMC9nLFxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIGpRdWVyeS50eXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCByZXR1cm4gaXRzIHZhbHVlXG5cdFx0XHR2YWx1ZSA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApID8gdmFsdWUoKSA6ICggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgKTtcblx0XHR9O1xuXG5cdC8vIFNldCB0cmFkaXRpb25hbCB0byB0cnVlIGZvciBqUXVlcnkgPD0gMS4zLjIgYmVoYXZpb3IuXG5cdGlmICggdHJhZGl0aW9uYWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHR0cmFkaXRpb25hbCA9IGpRdWVyeS5hamF4U2V0dGluZ3MgJiYgalF1ZXJ5LmFqYXhTZXR0aW5ncy50cmFkaXRpb25hbDtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0cmV0dXJuIHZhbCA9PSBudWxsID9cblx0XHRcdFx0bnVsbCA6XG5cdFx0XHRcdGpRdWVyeS5pc0FycmF5KCB2YWwgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRTlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFOVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiICkucHJvcCgge1xuXHRcdFx0XHRcdGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCxcblx0XHRcdFx0XHRzcmM6IHMudXJsXG5cdFx0XHRcdH0gKS5vbihcblx0XHRcdFx0XHRcImxvYWQgZXJyb3JcIixcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdHZhciBwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKSxcblx0XHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vLyBLZWVwIGEgY29weSBvZiB0aGUgb2xkIGxvYWQgbWV0aG9kXG52YXIgX2xvYWQgPSBqUXVlcnkuZm4ubG9hZDtcblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0aWYgKCB0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiICYmIF9sb2FkICkge1xuXHRcdHJldHVybiBfbG9hZC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdH1cblxuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBqUXVlcnkudHJpbSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxuLy8gQXR0YWNoIGEgYnVuY2ggb2YgZnVuY3Rpb25zIGZvciBoYW5kbGluZyBjb21tb24gQUpBWCBldmVudHNcbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbi8qKlxuICogR2V0cyBhIHdpbmRvdyBmcm9tIGFuIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93KCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmlzV2luZG93KCBlbGVtICkgPyBlbGVtIDogZWxlbS5ub2RlVHlwZSA9PT0gOSAmJiBlbGVtLmRlZmF1bHRWaWV3O1xufVxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgZG9jRWxlbSwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGJveCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH0sXG5cdFx0XHRkb2MgPSBlbGVtICYmIGVsZW0ub3duZXJEb2N1bWVudDtcblxuXHRcdGlmICggIWRvYyApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdC8vIE1ha2Ugc3VyZSBpdCdzIG5vdCBhIGRpc2Nvbm5lY3RlZCBET00gbm9kZVxuXHRcdGlmICggIWpRdWVyeS5jb250YWlucyggZG9jRWxlbSwgZWxlbSApICkge1xuXHRcdFx0cmV0dXJuIGJveDtcblx0XHR9XG5cblx0XHRib3ggPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGdldFdpbmRvdyggZG9jICk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogYm94LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxuXHRcdFx0bGVmdDogYm94LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXQgLSBkb2NFbGVtLmNsaWVudExlZnRcblx0XHR9O1xuXHR9LFxuXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBGaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gd2luZG93IChwYXJlbnRPZmZzZXQgPSB7dG9wOjAsIGxlZnQ6IDB9LFxuXHRcdC8vIGJlY2F1c2UgaXQgaXMgaXRzIG9ubHkgb2Zmc2V0IHBhcmVudFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBpcyB0aGVyZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gR2V0ICpyZWFsKiBvZmZzZXRQYXJlbnRcblx0XHRcdG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50KCk7XG5cblx0XHRcdC8vIEdldCBjb3JyZWN0IG9mZnNldHNcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cdFx0XHRpZiAoICFqUXVlcnkubm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuXHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXHRcdFx0dmFyIHdpbiA9IGdldFdpbmRvdyggZWxlbSApO1xuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmk8Ny04KywgQ2hyb21lPDM3LTQ0K1xuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjI5MjgwXG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIEFzIG9mIDUvOC8yMDEyIHRoaXMgd2lsbCB5aWVsZCBpbmNvcnJlY3QgcmVzdWx0cyBmb3IgTW9iaWxlIFNhZmFyaSwgYnV0IHRoZXJlXG5cdFx0XHRcdFx0Ly8gaXNuJ3QgYSB3aG9sZSBsb3Qgd2UgY2FuIGRvLiBTZWUgcHVsbCByZXF1ZXN0IGF0IHRoaXMgVVJMIGZvciBkaXNjdXNzaW9uOlxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNzY0XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlLCBudWxsICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH0sXG5cdHNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmxlbmd0aDtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uYW5kU2VsZiA9IGpRdWVyeS5mbi5hZGRCYWNrO1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cbnJldHVybiBqUXVlcnk7XG59KSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcz9jZDAwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./src/ChemDoodle/FileCanvas.js":
/*!**************************************!*\
  !*** ./src/ChemDoodle/FileCanvas.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return FileCanvas; });\n/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Canvas */ \"./src/ChemDoodle/_Canvas.js\");\n\nfunction FileCanvas(id, width, height, action) {\n  if (id) {\n    this.create(id, width, height);\n  }\n\n  var form = '<br><form name=\"FileForm\" enctype=\"multipart/form-data\" method=\"POST\" action=\"' + action + '\" target=\"HiddenFileFrame\"><input type=\"file\" name=\"f\" /><input type=\"submit\" name=\"submitbutton\" value=\"Show File\" /></form><iframe id=\"HFF-' + id + '\" name=\"HiddenFileFrame\" height=\"0\" width=\"0\" style=\"display:none;\" onLoad=\"GetMolFromFrame(\\'HFF-' + id + '\\', ' + id + ')\"></iframe>';\n  document.writeln(form);\n  this.emptyMessage = 'Click below to load file';\n  this.repaint();\n}\n;\nFileCanvas.prototype = new _Canvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvRmlsZUNhbnZhcy5qcz81ZDA3Il0sIm5hbWVzIjpbIkZpbGVDYW52YXMiLCJpZCIsIndpZHRoIiwiaGVpZ2h0IiwiYWN0aW9uIiwiY3JlYXRlIiwiZm9ybSIsImRvY3VtZW50Iiwid3JpdGVsbiIsImVtcHR5TWVzc2FnZSIsInJlcGFpbnQiLCJwcm90b3R5cGUiLCJfQ2FudmFzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVlLFNBQVNBLFVBQVQsQ0FBb0JDLEVBQXBCLEVBQXdCQyxLQUF4QixFQUErQkMsTUFBL0IsRUFBdUNDLE1BQXZDLEVBQStDO0FBQzVELE1BQUlILEVBQUosRUFBUTtBQUNOLFNBQUtJLE1BQUwsQ0FBWUosRUFBWixFQUFnQkMsS0FBaEIsRUFBdUJDLE1BQXZCO0FBQ0Q7O0FBQ0QsTUFBSUcsSUFBSSxHQUFHLG1GQUFtRkYsTUFBbkYsR0FBNEYsK0lBQTVGLEdBQThPSCxFQUE5TyxHQUFtUCxvR0FBblAsR0FBMFZBLEVBQTFWLEdBQStWLE1BQS9WLEdBQXdXQSxFQUF4VyxHQUE2VyxjQUF4WDtBQUNBTSxVQUFRLENBQUNDLE9BQVQsQ0FBaUJGLElBQWpCO0FBQ0EsT0FBS0csWUFBTCxHQUFvQiwwQkFBcEI7QUFDQSxPQUFLQyxPQUFMO0FBQ0Q7QUFBQTtBQUNEVixVQUFVLENBQUNXLFNBQVgsR0FBdUIsSUFBSUMsK0NBQUosRUFBdkIiLCJmaWxlIjoiLi9zcmMvQ2hlbURvb2RsZS9GaWxlQ2FudmFzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9DYW52YXMgZnJvbSAnLi9fQ2FudmFzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRmlsZUNhbnZhcyhpZCwgd2lkdGgsIGhlaWdodCwgYWN0aW9uKSB7XG4gIGlmIChpZCkge1xuICAgIHRoaXMuY3JlYXRlKGlkLCB3aWR0aCwgaGVpZ2h0KTtcbiAgfVxuICB2YXIgZm9ybSA9ICc8YnI+PGZvcm0gbmFtZT1cIkZpbGVGb3JtXCIgZW5jdHlwZT1cIm11bHRpcGFydC9mb3JtLWRhdGFcIiBtZXRob2Q9XCJQT1NUXCIgYWN0aW9uPVwiJyArIGFjdGlvbiArICdcIiB0YXJnZXQ9XCJIaWRkZW5GaWxlRnJhbWVcIj48aW5wdXQgdHlwZT1cImZpbGVcIiBuYW1lPVwiZlwiIC8+PGlucHV0IHR5cGU9XCJzdWJtaXRcIiBuYW1lPVwic3VibWl0YnV0dG9uXCIgdmFsdWU9XCJTaG93IEZpbGVcIiAvPjwvZm9ybT48aWZyYW1lIGlkPVwiSEZGLScgKyBpZCArICdcIiBuYW1lPVwiSGlkZGVuRmlsZUZyYW1lXCIgaGVpZ2h0PVwiMFwiIHdpZHRoPVwiMFwiIHN0eWxlPVwiZGlzcGxheTpub25lO1wiIG9uTG9hZD1cIkdldE1vbEZyb21GcmFtZShcXCdIRkYtJyArIGlkICsgJ1xcJywgJyArIGlkICsgJylcIj48L2lmcmFtZT4nO1xuICBkb2N1bWVudC53cml0ZWxuKGZvcm0pO1xuICB0aGlzLmVtcHR5TWVzc2FnZSA9ICdDbGljayBiZWxvdyB0byBsb2FkIGZpbGUnO1xuICB0aGlzLnJlcGFpbnQoKTtcbn07XG5GaWxlQ2FudmFzLnByb3RvdHlwZSA9IG5ldyBfQ2FudmFzKCk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/ChemDoodle/FileCanvas.js\n");

/***/ }),

/***/ "./src/ChemDoodle/HyperlinkCanvas.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/HyperlinkCanvas.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return HyperlinkCanvas; });\n/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Canvas */ \"./src/ChemDoodle/_Canvas.js\");\n\nfunction HyperlinkCanvas(id, width, height, urlOrFunction, color, size) {\n  if (id) {\n    this.create(id, width, height);\n  }\n\n  this.urlOrFunction = urlOrFunction;\n  this.color = color ? color : 'blue';\n  this.size = size ? size : 2;\n}\n;\n\nvar _ = HyperlinkCanvas.prototype = new _Canvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n_.openInNewWindow = true;\n_.hoverImage = undefined;\n\n_.drawChildExtras = function (ctx) {\n  if (this.e) {\n    if (this.hoverImage) {\n      ctx.drawImage(this.hoverImage, 0, 0);\n    } else {\n      ctx.strokeStyle = this.color;\n      ctx.lineWidth = this.size * 2;\n      ctx.strokeRect(0, 0, this.width, this.height);\n    }\n  }\n};\n\n_.setHoverImage = function (url) {\n  this.hoverImage = new Image();\n  this.hoverImage.src = url;\n};\n\n_.click = function (p) {\n  this.e = undefined;\n  this.repaint();\n\n  if (this.urlOrFunction instanceof Function) {\n    this.urlOrFunction();\n  } else {\n    if (this.openInNewWindow) {\n      window.open(this.urlOrFunction);\n    } else {\n      location.href = this.urlOrFunction;\n    }\n  }\n};\n\n_.mouseout = function (e) {\n  this.e = undefined;\n  this.repaint();\n};\n\n_.mouseover = function (e) {\n  this.e = e;\n  this.repaint();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvSHlwZXJsaW5rQ2FudmFzLmpzPzEyODEiXSwibmFtZXMiOlsiSHlwZXJsaW5rQ2FudmFzIiwiaWQiLCJ3aWR0aCIsImhlaWdodCIsInVybE9yRnVuY3Rpb24iLCJjb2xvciIsInNpemUiLCJjcmVhdGUiLCJfIiwicHJvdG90eXBlIiwiX0NhbnZhcyIsIm9wZW5Jbk5ld1dpbmRvdyIsImhvdmVySW1hZ2UiLCJ1bmRlZmluZWQiLCJkcmF3Q2hpbGRFeHRyYXMiLCJjdHgiLCJlIiwiZHJhd0ltYWdlIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJzdHJva2VSZWN0Iiwic2V0SG92ZXJJbWFnZSIsInVybCIsIkltYWdlIiwic3JjIiwiY2xpY2siLCJwIiwicmVwYWludCIsIkZ1bmN0aW9uIiwid2luZG93Iiwib3BlbiIsImxvY2F0aW9uIiwiaHJlZiIsIm1vdXNlb3V0IiwibW91c2VvdmVyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVlLFNBQVNBLGVBQVQsQ0FBeUJDLEVBQXpCLEVBQTZCQyxLQUE3QixFQUFvQ0MsTUFBcEMsRUFBNENDLGFBQTVDLEVBQTJEQyxLQUEzRCxFQUFrRUMsSUFBbEUsRUFBd0U7QUFDdEYsTUFBSUwsRUFBSixFQUFRO0FBQ1AsU0FBS00sTUFBTCxDQUFZTixFQUFaLEVBQWdCQyxLQUFoQixFQUF1QkMsTUFBdkI7QUFDQTs7QUFDRCxPQUFLQyxhQUFMLEdBQXFCQSxhQUFyQjtBQUNBLE9BQUtDLEtBQUwsR0FBYUEsS0FBSyxHQUFHQSxLQUFILEdBQVcsTUFBN0I7QUFDQSxPQUFLQyxJQUFMLEdBQVlBLElBQUksR0FBR0EsSUFBSCxHQUFVLENBQTFCO0FBQ0E7QUFBQTs7QUFDRCxJQUFJRSxDQUFDLEdBQUdSLGVBQWUsQ0FBQ1MsU0FBaEIsR0FBNEIsSUFBSUMsK0NBQUosRUFBcEM7O0FBQ0FGLENBQUMsQ0FBQ0csZUFBRixHQUFvQixJQUFwQjtBQUNBSCxDQUFDLENBQUNJLFVBQUYsR0FBZUMsU0FBZjs7QUFDQUwsQ0FBQyxDQUFDTSxlQUFGLEdBQW9CLFVBQVNDLEdBQVQsRUFBYztBQUNqQyxNQUFJLEtBQUtDLENBQVQsRUFBWTtBQUNYLFFBQUksS0FBS0osVUFBVCxFQUFxQjtBQUNwQkcsU0FBRyxDQUFDRSxTQUFKLENBQWMsS0FBS0wsVUFBbkIsRUFBK0IsQ0FBL0IsRUFBa0MsQ0FBbEM7QUFDQSxLQUZELE1BRU87QUFDTkcsU0FBRyxDQUFDRyxXQUFKLEdBQWtCLEtBQUtiLEtBQXZCO0FBQ0FVLFNBQUcsQ0FBQ0ksU0FBSixHQUFnQixLQUFLYixJQUFMLEdBQVksQ0FBNUI7QUFDQVMsU0FBRyxDQUFDSyxVQUFKLENBQWUsQ0FBZixFQUFrQixDQUFsQixFQUFxQixLQUFLbEIsS0FBMUIsRUFBaUMsS0FBS0MsTUFBdEM7QUFDQTtBQUNEO0FBQ0QsQ0FWRDs7QUFXQUssQ0FBQyxDQUFDYSxhQUFGLEdBQWtCLFVBQVNDLEdBQVQsRUFBYztBQUMvQixPQUFLVixVQUFMLEdBQWtCLElBQUlXLEtBQUosRUFBbEI7QUFDQSxPQUFLWCxVQUFMLENBQWdCWSxHQUFoQixHQUFzQkYsR0FBdEI7QUFDQSxDQUhEOztBQUlBZCxDQUFDLENBQUNpQixLQUFGLEdBQVUsVUFBU0MsQ0FBVCxFQUFZO0FBQ3JCLE9BQUtWLENBQUwsR0FBU0gsU0FBVDtBQUNBLE9BQUtjLE9BQUw7O0FBQ0EsTUFBSSxLQUFLdkIsYUFBTCxZQUE4QndCLFFBQWxDLEVBQTRDO0FBQzNDLFNBQUt4QixhQUFMO0FBQ0EsR0FGRCxNQUVPO0FBQ04sUUFBSSxLQUFLTyxlQUFULEVBQTBCO0FBQ3pCa0IsWUFBTSxDQUFDQyxJQUFQLENBQVksS0FBSzFCLGFBQWpCO0FBQ0EsS0FGRCxNQUVPO0FBQ04yQixjQUFRLENBQUNDLElBQVQsR0FBZ0IsS0FBSzVCLGFBQXJCO0FBQ0E7QUFDRDtBQUNELENBWkQ7O0FBYUFJLENBQUMsQ0FBQ3lCLFFBQUYsR0FBYSxVQUFTakIsQ0FBVCxFQUFZO0FBQ3hCLE9BQUtBLENBQUwsR0FBU0gsU0FBVDtBQUNBLE9BQUtjLE9BQUw7QUFDQSxDQUhEOztBQUlBbkIsQ0FBQyxDQUFDMEIsU0FBRixHQUFjLFVBQVNsQixDQUFULEVBQVk7QUFDekIsT0FBS0EsQ0FBTCxHQUFTQSxDQUFUO0FBQ0EsT0FBS1csT0FBTDtBQUNBLENBSEQiLCJmaWxlIjoiLi9zcmMvQ2hlbURvb2RsZS9IeXBlcmxpbmtDYW52YXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX0NhbnZhcyBmcm9tICcuL19DYW52YXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIeXBlcmxpbmtDYW52YXMoaWQsIHdpZHRoLCBoZWlnaHQsIHVybE9yRnVuY3Rpb24sIGNvbG9yLCBzaXplKSB7XG5cdGlmIChpZCkge1xuXHRcdHRoaXMuY3JlYXRlKGlkLCB3aWR0aCwgaGVpZ2h0KTtcblx0fVxuXHR0aGlzLnVybE9yRnVuY3Rpb24gPSB1cmxPckZ1bmN0aW9uO1xuXHR0aGlzLmNvbG9yID0gY29sb3IgPyBjb2xvciA6ICdibHVlJztcblx0dGhpcy5zaXplID0gc2l6ZSA/IHNpemUgOiAyO1xufTtcbnZhciBfID0gSHlwZXJsaW5rQ2FudmFzLnByb3RvdHlwZSA9IG5ldyBfQ2FudmFzKCk7XG5fLm9wZW5Jbk5ld1dpbmRvdyA9IHRydWU7XG5fLmhvdmVySW1hZ2UgPSB1bmRlZmluZWQ7XG5fLmRyYXdDaGlsZEV4dHJhcyA9IGZ1bmN0aW9uKGN0eCkge1xuXHRpZiAodGhpcy5lKSB7XG5cdFx0aWYgKHRoaXMuaG92ZXJJbWFnZSkge1xuXHRcdFx0Y3R4LmRyYXdJbWFnZSh0aGlzLmhvdmVySW1hZ2UsIDAsIDApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmNvbG9yO1xuXHRcdFx0Y3R4LmxpbmVXaWR0aCA9IHRoaXMuc2l6ZSAqIDI7XG5cdFx0XHRjdHguc3Ryb2tlUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cdFx0fVxuXHR9XG59O1xuXy5zZXRIb3ZlckltYWdlID0gZnVuY3Rpb24odXJsKSB7XG5cdHRoaXMuaG92ZXJJbWFnZSA9IG5ldyBJbWFnZSgpO1xuXHR0aGlzLmhvdmVySW1hZ2Uuc3JjID0gdXJsO1xufTtcbl8uY2xpY2sgPSBmdW5jdGlvbihwKSB7XG5cdHRoaXMuZSA9IHVuZGVmaW5lZDtcblx0dGhpcy5yZXBhaW50KCk7XG5cdGlmICh0aGlzLnVybE9yRnVuY3Rpb24gaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuXHRcdHRoaXMudXJsT3JGdW5jdGlvbigpO1xuXHR9IGVsc2Uge1xuXHRcdGlmICh0aGlzLm9wZW5Jbk5ld1dpbmRvdykge1xuXHRcdFx0d2luZG93Lm9wZW4odGhpcy51cmxPckZ1bmN0aW9uKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bG9jYXRpb24uaHJlZiA9IHRoaXMudXJsT3JGdW5jdGlvbjtcblx0XHR9XG5cdH1cbn07XG5fLm1vdXNlb3V0ID0gZnVuY3Rpb24oZSkge1xuXHR0aGlzLmUgPSB1bmRlZmluZWQ7XG5cdHRoaXMucmVwYWludCgpO1xufTtcbl8ubW91c2VvdmVyID0gZnVuY3Rpb24oZSkge1xuXHR0aGlzLmUgPSBlO1xuXHR0aGlzLnJlcGFpbnQoKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ChemDoodle/HyperlinkCanvas.js\n");

/***/ }),

/***/ "./src/ChemDoodle/MolGrabberCanvas.js":
/*!********************************************!*\
  !*** ./src/ChemDoodle/MolGrabberCanvas.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MolGrabberCanvas; });\n/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Canvas */ \"./src/ChemDoodle/_Canvas.js\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib */ \"./src/ChemDoodle/lib/index.js\");\n/* harmony import */ var _iChemLabs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./iChemLabs */ \"./src/ChemDoodle/iChemLabs.js\");\n\n\n\nfunction MolGrabberCanvas(id, width, height) {\n  if (id) {\n    this.create(id, width, height);\n  }\n\n  var sb = [];\n  sb.push('<br><input type=\"text\" id=\"');\n  sb.push(id);\n  sb.push('_query\" size=\"32\" value=\"\" />');\n  sb.push(this.getInputFields()); // Don't use document.writeln here, it breaks the whole page after\n  // document is closed.\n\n  document.getElementById(id);\n  var canvas = Object(_lib__WEBPACK_IMPORTED_MODULE_1__[\"jQuery\"])('#' + id);\n  canvas.after(sb.join(''));\n  var self = this;\n  Object(_lib__WEBPACK_IMPORTED_MODULE_1__[\"jQuery\"])('#' + id + '_submit').click(function () {\n    self.search();\n  });\n  Object(_lib__WEBPACK_IMPORTED_MODULE_1__[\"jQuery\"])('#' + id + '_query').keypress(function (e) {\n    if (e.which === 13) {\n      self.search();\n    }\n  });\n  this.emptyMessage = 'Enter search term below';\n  this.repaint();\n}\n;\n\nvar _ = MolGrabberCanvas.prototype = new _Canvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n_.setSearchTerm = function (term) {\n  Object(_lib__WEBPACK_IMPORTED_MODULE_1__[\"jQuery\"])('#' + this.id + '_query').val(term);\n  this.search();\n};\n\n_.getInputFields = function () {\n  var sb = [];\n  sb.push('<br><nobr>');\n  sb.push('<select id=\"');\n  sb.push(this.id);\n  sb.push('_select\">');\n  sb.push('<option value=\"chemexper\">ChemExper');\n  sb.push('<option value=\"chemspider\">ChemSpider');\n  sb.push('<option value=\"pubchem\" selected>PubChem');\n  sb.push('</select>');\n  sb.push('<button id=\"');\n  sb.push(this.id);\n  sb.push('_submit\">Show Molecule</button>');\n  sb.push('</nobr>');\n  return sb.join('');\n};\n\n_.search = function () {\n  this.emptyMessage = 'Searching...';\n  this.clear();\n  var self = this;\n  _iChemLabs__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getMoleculeFromDatabase(Object(_lib__WEBPACK_IMPORTED_MODULE_1__[\"jQuery\"])('#' + this.id + '_query').val(), {\n    database: Object(_lib__WEBPACK_IMPORTED_MODULE_1__[\"jQuery\"])('#' + this.id + '_select').val()\n  }, function (mol) {\n    self.loadMolecule(mol);\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvTW9sR3JhYmJlckNhbnZhcy5qcz9lMGZlIl0sIm5hbWVzIjpbIk1vbEdyYWJiZXJDYW52YXMiLCJpZCIsIndpZHRoIiwiaGVpZ2h0IiwiY3JlYXRlIiwic2IiLCJwdXNoIiwiZ2V0SW5wdXRGaWVsZHMiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY2FudmFzIiwicSIsImFmdGVyIiwiam9pbiIsInNlbGYiLCJjbGljayIsInNlYXJjaCIsImtleXByZXNzIiwiZSIsIndoaWNoIiwiZW1wdHlNZXNzYWdlIiwicmVwYWludCIsIl8iLCJwcm90b3R5cGUiLCJfQ2FudmFzIiwic2V0U2VhcmNoVGVybSIsInRlcm0iLCJ2YWwiLCJjbGVhciIsImlDaGVtTGFicyIsImdldE1vbGVjdWxlRnJvbURhdGFiYXNlIiwiZGF0YWJhc2UiLCJtb2wiLCJsb2FkTW9sZWN1bGUiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFFZSxTQUFTQSxnQkFBVCxDQUEwQkMsRUFBMUIsRUFBOEJDLEtBQTlCLEVBQXFDQyxNQUFyQyxFQUE2QztBQUMzRCxNQUFJRixFQUFKLEVBQVE7QUFDUCxTQUFLRyxNQUFMLENBQVlILEVBQVosRUFBZ0JDLEtBQWhCLEVBQXVCQyxNQUF2QjtBQUNBOztBQUNELE1BQUlFLEVBQUUsR0FBRyxFQUFUO0FBQ0FBLElBQUUsQ0FBQ0MsSUFBSCxDQUFRLDZCQUFSO0FBQ0FELElBQUUsQ0FBQ0MsSUFBSCxDQUFRTCxFQUFSO0FBQ0FJLElBQUUsQ0FBQ0MsSUFBSCxDQUFRLCtCQUFSO0FBQ0FELElBQUUsQ0FBQ0MsSUFBSCxDQUFRLEtBQUtDLGNBQUwsRUFBUixFQVIyRCxDQVUzRDtBQUNBOztBQUNBQyxVQUFRLENBQUNDLGNBQVQsQ0FBd0JSLEVBQXhCO0FBQ0EsTUFBSVMsTUFBTSxHQUFHQyxtREFBQyxDQUFDLE1BQU1WLEVBQVAsQ0FBZDtBQUNBUyxRQUFNLENBQUNFLEtBQVAsQ0FBYVAsRUFBRSxDQUFDUSxJQUFILENBQVEsRUFBUixDQUFiO0FBRUEsTUFBSUMsSUFBSSxHQUFHLElBQVg7QUFDQUgscURBQUMsQ0FBQyxNQUFNVixFQUFOLEdBQVcsU0FBWixDQUFELENBQXdCYyxLQUF4QixDQUE4QixZQUFXO0FBQ3hDRCxRQUFJLENBQUNFLE1BQUw7QUFDQSxHQUZEO0FBR0FMLHFEQUFDLENBQUMsTUFBTVYsRUFBTixHQUFXLFFBQVosQ0FBRCxDQUF1QmdCLFFBQXZCLENBQWdDLFVBQVNDLENBQVQsRUFBWTtBQUMzQyxRQUFJQSxDQUFDLENBQUNDLEtBQUYsS0FBWSxFQUFoQixFQUFvQjtBQUNuQkwsVUFBSSxDQUFDRSxNQUFMO0FBQ0E7QUFDRCxHQUpEO0FBS0EsT0FBS0ksWUFBTCxHQUFvQix5QkFBcEI7QUFDQSxPQUFLQyxPQUFMO0FBQ0E7QUFBQTs7QUFDRCxJQUFJQyxDQUFDLEdBQUd0QixnQkFBZ0IsQ0FBQ3VCLFNBQWpCLEdBQTZCLElBQUlDLCtDQUFKLEVBQXJDOztBQUNBRixDQUFDLENBQUNHLGFBQUYsR0FBa0IsVUFBU0MsSUFBVCxFQUFlO0FBQ2hDZixxREFBQyxDQUFDLE1BQU0sS0FBS1YsRUFBWCxHQUFnQixRQUFqQixDQUFELENBQTRCMEIsR0FBNUIsQ0FBZ0NELElBQWhDO0FBQ0EsT0FBS1YsTUFBTDtBQUNBLENBSEQ7O0FBSUFNLENBQUMsQ0FBQ2YsY0FBRixHQUFtQixZQUFVO0FBQzVCLE1BQUlGLEVBQUUsR0FBRyxFQUFUO0FBQ0FBLElBQUUsQ0FBQ0MsSUFBSCxDQUFRLFlBQVI7QUFDQUQsSUFBRSxDQUFDQyxJQUFILENBQVEsY0FBUjtBQUNBRCxJQUFFLENBQUNDLElBQUgsQ0FBUSxLQUFLTCxFQUFiO0FBQ0FJLElBQUUsQ0FBQ0MsSUFBSCxDQUFRLFdBQVI7QUFDQUQsSUFBRSxDQUFDQyxJQUFILENBQVEscUNBQVI7QUFDQUQsSUFBRSxDQUFDQyxJQUFILENBQVEsdUNBQVI7QUFDQUQsSUFBRSxDQUFDQyxJQUFILENBQVEsMENBQVI7QUFDQUQsSUFBRSxDQUFDQyxJQUFILENBQVEsV0FBUjtBQUNBRCxJQUFFLENBQUNDLElBQUgsQ0FBUSxjQUFSO0FBQ0FELElBQUUsQ0FBQ0MsSUFBSCxDQUFRLEtBQUtMLEVBQWI7QUFDQUksSUFBRSxDQUFDQyxJQUFILENBQVEsaUNBQVI7QUFDQUQsSUFBRSxDQUFDQyxJQUFILENBQVEsU0FBUjtBQUNBLFNBQU9ELEVBQUUsQ0FBQ1EsSUFBSCxDQUFRLEVBQVIsQ0FBUDtBQUNBLENBZkQ7O0FBZ0JBUyxDQUFDLENBQUNOLE1BQUYsR0FBVyxZQUFXO0FBQ3JCLE9BQUtJLFlBQUwsR0FBb0IsY0FBcEI7QUFDQSxPQUFLUSxLQUFMO0FBQ0EsTUFBSWQsSUFBSSxHQUFHLElBQVg7QUFDQWUsb0RBQVMsQ0FBQ0MsdUJBQVYsQ0FBa0NuQixtREFBQyxDQUFDLE1BQU0sS0FBS1YsRUFBWCxHQUFnQixRQUFqQixDQUFELENBQTRCMEIsR0FBNUIsRUFBbEMsRUFBcUU7QUFDcEVJLFlBQVEsRUFBR3BCLG1EQUFDLENBQUMsTUFBTSxLQUFLVixFQUFYLEdBQWdCLFNBQWpCLENBQUQsQ0FBNkIwQixHQUE3QjtBQUR5RCxHQUFyRSxFQUVHLFVBQVNLLEdBQVQsRUFBYztBQUNoQmxCLFFBQUksQ0FBQ21CLFlBQUwsQ0FBa0JELEdBQWxCO0FBQ0EsR0FKRDtBQUtBLENBVEQiLCJmaWxlIjoiLi9zcmMvQ2hlbURvb2RsZS9Nb2xHcmFiYmVyQ2FudmFzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9DYW52YXMgZnJvbSAnLi9fQ2FudmFzJztcbmltcG9ydCB7IGpRdWVyeSBhcyBxIH0gZnJvbSAnLi9saWInO1xuaW1wb3J0IGlDaGVtTGFicyBmcm9tICcuL2lDaGVtTGFicyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1vbEdyYWJiZXJDYW52YXMoaWQsIHdpZHRoLCBoZWlnaHQpIHtcblx0aWYgKGlkKSB7XG5cdFx0dGhpcy5jcmVhdGUoaWQsIHdpZHRoLCBoZWlnaHQpO1xuXHR9XG5cdHZhciBzYiA9IFtdO1xuXHRzYi5wdXNoKCc8YnI+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCInKTtcblx0c2IucHVzaChpZCk7XG5cdHNiLnB1c2goJ19xdWVyeVwiIHNpemU9XCIzMlwiIHZhbHVlPVwiXCIgLz4nKTtcblx0c2IucHVzaCh0aGlzLmdldElucHV0RmllbGRzKCkpO1xuXG5cdC8vIERvbid0IHVzZSBkb2N1bWVudC53cml0ZWxuIGhlcmUsIGl0IGJyZWFrcyB0aGUgd2hvbGUgcGFnZSBhZnRlclxuXHQvLyBkb2N1bWVudCBpcyBjbG9zZWQuXG5cdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcblx0dmFyIGNhbnZhcyA9IHEoJyMnICsgaWQpO1xuXHRjYW52YXMuYWZ0ZXIoc2Iuam9pbignJykpO1xuXG5cdHZhciBzZWxmID0gdGhpcztcblx0cSgnIycgKyBpZCArICdfc3VibWl0JykuY2xpY2soZnVuY3Rpb24oKSB7XG5cdFx0c2VsZi5zZWFyY2goKTtcblx0fSk7XG5cdHEoJyMnICsgaWQgKyAnX3F1ZXJ5Jykua2V5cHJlc3MoZnVuY3Rpb24oZSkge1xuXHRcdGlmIChlLndoaWNoID09PSAxMykge1xuXHRcdFx0c2VsZi5zZWFyY2goKTtcblx0XHR9XG5cdH0pO1xuXHR0aGlzLmVtcHR5TWVzc2FnZSA9ICdFbnRlciBzZWFyY2ggdGVybSBiZWxvdyc7XG5cdHRoaXMucmVwYWludCgpO1xufTtcbnZhciBfID0gTW9sR3JhYmJlckNhbnZhcy5wcm90b3R5cGUgPSBuZXcgX0NhbnZhcygpO1xuXy5zZXRTZWFyY2hUZXJtID0gZnVuY3Rpb24odGVybSkge1xuXHRxKCcjJyArIHRoaXMuaWQgKyAnX3F1ZXJ5JykudmFsKHRlcm0pO1xuXHR0aGlzLnNlYXJjaCgpO1xufTtcbl8uZ2V0SW5wdXRGaWVsZHMgPSBmdW5jdGlvbigpe1xuXHR2YXIgc2IgPSBbXTtcblx0c2IucHVzaCgnPGJyPjxub2JyPicpO1xuXHRzYi5wdXNoKCc8c2VsZWN0IGlkPVwiJyk7XG5cdHNiLnB1c2godGhpcy5pZCk7XG5cdHNiLnB1c2goJ19zZWxlY3RcIj4nKTtcblx0c2IucHVzaCgnPG9wdGlvbiB2YWx1ZT1cImNoZW1leHBlclwiPkNoZW1FeHBlcicpO1xuXHRzYi5wdXNoKCc8b3B0aW9uIHZhbHVlPVwiY2hlbXNwaWRlclwiPkNoZW1TcGlkZXInKTtcblx0c2IucHVzaCgnPG9wdGlvbiB2YWx1ZT1cInB1YmNoZW1cIiBzZWxlY3RlZD5QdWJDaGVtJyk7XG5cdHNiLnB1c2goJzwvc2VsZWN0PicpO1xuXHRzYi5wdXNoKCc8YnV0dG9uIGlkPVwiJyk7XG5cdHNiLnB1c2godGhpcy5pZCk7XG5cdHNiLnB1c2goJ19zdWJtaXRcIj5TaG93IE1vbGVjdWxlPC9idXR0b24+Jyk7XG5cdHNiLnB1c2goJzwvbm9icj4nKTtcblx0cmV0dXJuIHNiLmpvaW4oJycpO1xufTtcbl8uc2VhcmNoID0gZnVuY3Rpb24oKSB7XG5cdHRoaXMuZW1wdHlNZXNzYWdlID0gJ1NlYXJjaGluZy4uLic7XG5cdHRoaXMuY2xlYXIoKTtcblx0dmFyIHNlbGYgPSB0aGlzO1xuXHRpQ2hlbUxhYnMuZ2V0TW9sZWN1bGVGcm9tRGF0YWJhc2UocSgnIycgKyB0aGlzLmlkICsgJ19xdWVyeScpLnZhbCgpLCB7XG5cdFx0ZGF0YWJhc2UgOiBxKCcjJyArIHRoaXMuaWQgKyAnX3NlbGVjdCcpLnZhbCgpXG5cdH0sIGZ1bmN0aW9uKG1vbCkge1xuXHRcdHNlbGYubG9hZE1vbGVjdWxlKG1vbCk7XG5cdH0pO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/ChemDoodle/MolGrabberCanvas.js\n");

/***/ }),

/***/ "./src/ChemDoodle/MovieCanvas3D.js":
/*!*****************************************!*\
  !*** ./src/ChemDoodle/MovieCanvas3D.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return MovieCanvas3D; });\n/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./structures */ \"./src/ChemDoodle/structures/index.js\");\n/* harmony import */ var _Canvas3D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Canvas3D */ \"./src/ChemDoodle/_Canvas3D.js\");\n/* harmony import */ var _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./_AnimatorCanvas */ \"./src/ChemDoodle/_AnimatorCanvas.js\");\n/* harmony import */ var _RotatorCanvas__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RotatorCanvas */ \"./src/ChemDoodle/RotatorCanvas.js\");\n\n\n\n\nfunction MovieCanvas3D(id, width, height) {\n  if (id) {\n    this.create(id, width, height);\n  }\n\n  this.frames = [];\n}\n;\nMovieCanvas3D.PLAY_ONCE = 0;\nMovieCanvas3D.PLAY_LOOP = 1;\nMovieCanvas3D.PLAY_SPRING = 2;\n\nvar _ = MovieCanvas3D.prototype = new _Canvas3D__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n\n_.timeout = 50;\n_.frameNumber = 0;\n_.playMode = 2;\n_.reverse = false;\n_.startAnimation = _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_2__[\"default\"].prototype.startAnimation;\n_.stopAnimation = _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_2__[\"default\"].prototype.stopAnimation;\n_.isRunning = _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_2__[\"default\"].prototype.isRunning;\n_.dblclick = _RotatorCanvas__WEBPACK_IMPORTED_MODULE_3__[\"default\"].prototype.dblclick;\n\n_.nextFrame = function (delta) {\n  var f = this.frames[this.frameNumber];\n  this.molecules = f.mols;\n  this.shapes = f.shapes;\n\n  if (this.playMode === 2 && this.reverse) {\n    this.frameNumber--;\n\n    if (this.frameNumber < 0) {\n      this.frameNumber = 1;\n      this.reverse = false;\n    }\n  } else {\n    this.frameNumber++;\n\n    if (this.frameNumber >= this.frames.length) {\n      if (this.playMode === 2) {\n        this.frameNumber -= 2;\n        this.reverse = true;\n      } else {\n        this.frameNumber = 0;\n\n        if (this.playMode === 0) {\n          this.stopAnimation();\n        }\n      }\n    }\n  }\n};\n\n_.center = function () {\n  // override this function to center the entire movie\n  var p = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Atom\"]();\n  var first = this.frames[0];\n\n  for (var j = 0, jj = first.mols.length; j < jj; j++) {\n    p.add3D(first.mols[j].getCenter3D());\n  }\n\n  p.x /= first.mols.length;\n  p.y /= first.mols.length;\n  var center = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Atom\"]();\n  center.sub3D(p);\n\n  for (var i = 0, ii = this.frames.length; i < ii; i++) {\n    var f = this.frames[i];\n\n    for (var j = 0, jj = f.mols.length; j < jj; j++) {\n      var mol = f.mols[j];\n\n      for (var k = 0, kk = mol.atoms.length; k < kk; k++) {\n        mol.atoms[k].add3D(center);\n      }\n    }\n  }\n};\n\n_.addFrame = function (molecules, shapes) {\n  this.frames.push({\n    mols: molecules,\n    shapes: shapes\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvTW92aWVDYW52YXMzRC5qcz81ODI1Il0sIm5hbWVzIjpbIk1vdmllQ2FudmFzM0QiLCJpZCIsIndpZHRoIiwiaGVpZ2h0IiwiY3JlYXRlIiwiZnJhbWVzIiwiUExBWV9PTkNFIiwiUExBWV9MT09QIiwiUExBWV9TUFJJTkciLCJfIiwicHJvdG90eXBlIiwiX0NhbnZhczNEIiwidGltZW91dCIsImZyYW1lTnVtYmVyIiwicGxheU1vZGUiLCJyZXZlcnNlIiwic3RhcnRBbmltYXRpb24iLCJfQW5pbWF0b3JDYW52YXMiLCJzdG9wQW5pbWF0aW9uIiwiaXNSdW5uaW5nIiwiZGJsY2xpY2siLCJSb3RhdG9yQ2FudmFzIiwibmV4dEZyYW1lIiwiZGVsdGEiLCJmIiwibW9sZWN1bGVzIiwibW9scyIsInNoYXBlcyIsImxlbmd0aCIsImNlbnRlciIsInAiLCJBdG9tIiwiZmlyc3QiLCJqIiwiamoiLCJhZGQzRCIsImdldENlbnRlcjNEIiwieCIsInkiLCJzdWIzRCIsImkiLCJpaSIsIm1vbCIsImsiLCJrayIsImF0b21zIiwiYWRkRnJhbWUiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVlLFNBQVNBLGFBQVQsQ0FBdUJDLEVBQXZCLEVBQTJCQyxLQUEzQixFQUFrQ0MsTUFBbEMsRUFBMEM7QUFDdkQsTUFBSUYsRUFBSixFQUFRO0FBQ04sU0FBS0csTUFBTCxDQUFZSCxFQUFaLEVBQWdCQyxLQUFoQixFQUF1QkMsTUFBdkI7QUFDRDs7QUFDRCxPQUFLRSxNQUFMLEdBQWMsRUFBZDtBQUNEO0FBQUE7QUFDREwsYUFBYSxDQUFDTSxTQUFkLEdBQTBCLENBQTFCO0FBQ0FOLGFBQWEsQ0FBQ08sU0FBZCxHQUEwQixDQUExQjtBQUNBUCxhQUFhLENBQUNRLFdBQWQsR0FBNEIsQ0FBNUI7O0FBQ0EsSUFBSUMsQ0FBQyxH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UixFQUFXQyxFQUFFLEdBQUdWLENBQUMsQ0FBQ0UsSUFBRixDQUFPRSxNQUE3QixFQUFxQ0ssQ0FBQyxHQUFHQyxFQUF6QyxFQUE2Q0QsQ0FBQyxFQUE5QyxFQUFrRDtBQUNoRCxVQUFJUyxHQUFHLEdBQUdsQixDQUFDLENBQUNFLElBQUYsQ0FBT08sQ0FBUCxDQUFWOztBQUNBLFdBQU0sSUFBSVUsQ0FBQyxHQUFHLENBQVIsRUFBV0MsRUFBRSxHQUFHRixHQUFHLENBQUNHLEtBQUosQ0FBVWpCLE1BQWhDLEVBQXdDZSxDQUFDLEdBQUdDLEVBQTVDLEVBQWdERCxDQUFDLEVBQWpELEVBQXFEO0FBQ25ERCxXQUFHLENBQUNHLEtBQUosQ0FBVUYsQ0FBVixFQUFhUixLQUFiLENBQW1CTixNQUFuQjtBQUNEO0FBQ0Y7QUFDRjtBQUNGLENBcEJEOztBQXFCQXBCLENBQUMsQ0FBQ3FDLFFBQUYsR0FBYSxVQUFTckIsU0FBVCxFQUFvQkUsTUFBcEIsRUFBNEI7QUFDdkMsT0FBS3RCLE1BQUwsQ0FBWTBDLElBQVosQ0FBaUI7QUFDZnJCLFFBQUksRUFBR0QsU0FEUTtBQUVmRSxVQUFNLEVBQUdBO0FBRk0sR0FBakI7QUFJRCxDQUxEIiwiZmlsZSI6Ii4vc3JjL0NoZW1Eb29kbGUvTW92aWVDYW52YXMzRC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF0b20gfSBmcm9tICcuL3N0cnVjdHVyZXMnO1xuaW1wb3J0IF9DYW52YXMzRCBmcm9tICcuL19DYW52YXMzRCc7XG5pbXBvcnQgX0FuaW1hdG9yQ2FudmFzIGZyb20gJy4vX0FuaW1hdG9yQ2FudmFzJztcbmltcG9ydCBSb3RhdG9yQ2FudmFzIGZyb20gJy4vUm90YXRvckNhbnZhcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1vdmllQ2FudmFzM0QoaWQsIHdpZHRoLCBoZWlnaHQpIHtcbiAgaWYgKGlkKSB7XG4gICAgdGhpcy5jcmVhdGUoaWQsIHdpZHRoLCBoZWlnaHQpO1xuICB9XG4gIHRoaXMuZnJhbWVzID0gW107XG59O1xuTW92aWVDYW52YXMzRC5QTEFZX09OQ0UgPSAwO1xuTW92aWVDYW52YXMzRC5QTEFZX0xPT1AgPSAxO1xuTW92aWVDYW52YXMzRC5QTEFZX1NQUklORyA9IDI7XG52YXIgXyA9IE1vdmllQ2FudmFzM0QucHJvdG90eXBlID0gbmV3IF9DYW52YXMzRCgpO1xuXy50aW1lb3V0ID0gNTA7XG5fLmZyYW1lTnVtYmVyID0gMDtcbl8ucGxheU1vZGUgPSAyO1xuXy5yZXZlcnNlID0gZmFsc2U7XG5fLnN0YXJ0QW5pbWF0aW9uID0gX0FuaW1hdG9yQ2FudmFzLnByb3RvdHlwZS5zdGFydEFuaW1hdGlvbjtcbl8uc3RvcEFuaW1hdGlvbiA9IF9BbmltYXRvckNhbnZhcy5wcm90b3R5cGUuc3RvcEFuaW1hdGlvbjtcbl8uaXNSdW5uaW5nID0gX0FuaW1hdG9yQ2FudmFzLnByb3RvdHlwZS5pc1J1bm5pbmc7XG5fLmRibGNsaWNrID0gUm90YXRvckNhbnZhcy5wcm90b3R5cGUuZGJsY2xpY2s7XG5fLm5leHRGcmFtZSA9IGZ1bmN0aW9uKGRlbHRhKSB7XG4gIHZhciBmID0gdGhpcy5mcmFtZXNbdGhpcy5mcmFtZU51bWJlcl07XG4gIHRoaXMubW9sZWN1bGVzID0gZi5tb2xzO1xuICB0aGlzLnNoYXBlcyA9IGYuc2hhcGVzO1xuICBpZiAodGhpcy5wbGF5TW9kZSA9PT0gMiAmJiB0aGlzLnJldmVyc2UpIHtcbiAgICB0aGlzLmZyYW1lTnVtYmVyLS07XG4gICAgaWYgKHRoaXMuZnJhbWVOdW1iZXIgPCAwKSB7XG4gICAgICB0aGlzLmZyYW1lTnVtYmVyID0gMTtcbiAgICAgIHRoaXMucmV2ZXJzZSA9IGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZyYW1lTnVtYmVyKys7XG4gICAgaWYgKHRoaXMuZnJhbWVOdW1iZXIgPj0gdGhpcy5mcmFtZXMubGVuZ3RoKSB7XG4gICAgICBpZiAodGhpcy5wbGF5TW9kZSA9PT0gMikge1xuICAgICAgICB0aGlzLmZyYW1lTnVtYmVyIC09IDI7XG4gICAgICAgIHRoaXMucmV2ZXJzZSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmZyYW1lTnVtYmVyID0gMDtcbiAgICAgICAgaWYgKHRoaXMucGxheU1vZGUgPT09IDApIHtcbiAgICAgICAgICB0aGlzLnN0b3BBbmltYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbl8uY2VudGVyID0gZnVuY3Rpb24oKSB7XG4gIC8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gdG8gY2VudGVyIHRoZSBlbnRpcmUgbW92aWVcbiAgdmFyIHAgPSBuZXcgQXRvbSgpO1xuICB2YXIgZmlyc3QgPSB0aGlzLmZyYW1lc1swXTtcbiAgZm9yICggdmFyIGogPSAwLCBqaiA9IGZpcnN0Lm1vbHMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgIHAuYWRkM0QoZmlyc3QubW9sc1tqXS5nZXRDZW50ZXIzRCgpKTtcbiAgfVxuICBwLnggLz0gZmlyc3QubW9scy5sZW5ndGg7XG4gIHAueSAvPSBmaXJzdC5tb2xzLmxlbmd0aDtcbiAgdmFyIGNlbnRlciA9IG5ldyBBdG9tKCk7XG4gIGNlbnRlci5zdWIzRChwKTtcbiAgZm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuZnJhbWVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICB2YXIgZiA9IHRoaXMuZnJhbWVzW2ldO1xuICAgIGZvciAoIHZhciBqID0gMCwgamogPSBmLm1vbHMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgdmFyIG1vbCA9IGYubW9sc1tqXTtcbiAgICAgIGZvciAoIHZhciBrID0gMCwga2sgPSBtb2wuYXRvbXMubGVuZ3RoOyBrIDwga2s7IGsrKykge1xuICAgICAgICBtb2wuYXRvbXNba10uYWRkM0QoY2VudGVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5fLmFkZEZyYW1lID0gZnVuY3Rpb24obW9sZWN1bGVzLCBzaGFwZXMpIHtcbiAgdGhpcy5mcmFtZXMucHVzaCh7XG4gICAgbW9scyA6IG1vbGVjdWxlcyxcbiAgICBzaGFwZXMgOiBzaGFwZXNcbiAgfSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/ChemDoodle/MovieCanvas3D.js\n");

/***/ }),

/***/ "./src/ChemDoodle/ObserverCanvas.js":
/*!******************************************!*\
  !*** ./src/ChemDoodle/ObserverCanvas.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ObserverCanvas; });\n/* harmony import */ var _SpectrumCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_SpectrumCanvas */ \"./src/ChemDoodle/_SpectrumCanvas.js\");\n\nfunction ObserverCanvas(id, width, height) {\n  if (id) {\n    this.create(id, width, height);\n  }\n}\n;\nObserverCanvas.prototype = new _SpectrumCanvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvT2JzZXJ2ZXJDYW52YXMuanM/NzBmNyJdLCJuYW1lcyI6WyJPYnNlcnZlckNhbnZhcyIsImlkIiwid2lkdGgiLCJoZWlnaHQiLCJjcmVhdGUiLCJwcm90b3R5cGUiLCJfU3BlY3RydW1DYW52YXMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRWUsU0FBU0EsY0FBVCxDQUF3QkMsRUFBeEIsRUFBNEJDLEtBQTVCLEVBQW1DQyxNQUFuQyxFQUEyQztBQUN6RCxNQUFJRixFQUFKLEVBQVE7QUFDUCxTQUFLRyxNQUFMLENBQVlILEVBQVosRUFBZ0JDLEtBQWhCLEVBQXVCQyxNQUF2QjtBQUNBO0FBQ0Q7QUFBQTtBQUNESCxjQUFjLENBQUNLLFNBQWYsR0FBMkIsSUFBSUMsdURBQUosRUFBM0IiLCJmaWxlIjoiLi9zcmMvQ2hlbURvb2RsZS9PYnNlcnZlckNhbnZhcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfU3BlY3RydW1DYW52YXMgZnJvbSAnLi9fU3BlY3RydW1DYW52YXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBPYnNlcnZlckNhbnZhcyhpZCwgd2lkdGgsIGhlaWdodCkge1xuXHRpZiAoaWQpIHtcblx0XHR0aGlzLmNyZWF0ZShpZCwgd2lkdGgsIGhlaWdodCk7XG5cdH1cbn07XG5PYnNlcnZlckNhbnZhcy5wcm90b3R5cGUgPSBuZXcgX1NwZWN0cnVtQ2FudmFzKCk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ChemDoodle/ObserverCanvas.js\n");

/***/ }),

/***/ "./src/ChemDoodle/OverlayCanvas.js":
/*!*****************************************!*\
  !*** ./src/ChemDoodle/OverlayCanvas.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return OverlayCanvas; });\n/* harmony import */ var _SpectrumCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_SpectrumCanvas */ \"./src/ChemDoodle/_SpectrumCanvas.js\");\n\nfunction OverlayCanvas(id, width, height) {\n  if (id) {\n    this.create(id, width, height);\n  }\n}\n;\n\nvar _ = OverlayCanvas.prototype = new _SpectrumCanvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n_.overlaySpectra = [];\n_.superRepaint = _.innerRepaint;\n\n_.innerRepaint = function (ctx) {\n  this.superRepaint(ctx);\n\n  if (this.spectrum && this.spectrum.data.length > 0) {\n    for (var i = 0, ii = this.overlaySpectra.length; i < ii; i++) {\n      var s = this.overlaySpectra[i];\n\n      if (s && s.data.length > 0) {\n        s.minX = this.spectrum.minX;\n        s.maxX = this.spectrum.maxX;\n        s.drawPlot(ctx, this.specs, this.width, this.height, this.spectrum.memory.offsetTop, this.spectrum.memory.offsetLeft, this.spectrum.memory.offsetBottom);\n      }\n    }\n  }\n};\n\n_.addSpectrum = function (spectrum) {\n  if (!this.spectrum) {\n    this.spectrum = spectrum;\n  } else {\n    this.overlaySpectra.push(spectrum);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvT3ZlcmxheUNhbnZhcy5qcz9hMzU3Il0sIm5hbWVzIjpbIk92ZXJsYXlDYW52YXMiLCJpZCIsIndpZHRoIiwiaGVpZ2h0IiwiY3JlYXRlIiwiXyIsInByb3RvdHlwZSIsIl9TcGVjdHJ1bUNhbnZhcyIsIm92ZXJsYXlTcGVjdHJhIiwic3VwZXJSZXBhaW50IiwiaW5uZXJSZXBhaW50IiwiY3R4Iiwic3BlY3RydW0iLCJkYXRhIiwibGVuZ3RoIiwiaSIsImlpIiwicyIsIm1pblgiLCJtYXhYIiwiZHJhd1Bsb3QiLCJzcGVjcyIsIm1lbW9yeSIsIm9mZnNldFRvcCIsIm9mZnNldExlZnQiLCJvZmZzZXRCb3R0b20iLCJhZGRTcGVjdHJ1bSIsInB1c2giXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRWUsU0FBU0EsYUFBVCxDQUF1QkMsRUFBdkIsRUFBMkJDLEtBQTNCLEVBQWtDQyxNQUFsQyxFQUEwQztBQUN4RCxNQUFJRixFQUFKLEVBQVE7QUFDUCxTQUFLRyxNQUFMLENBQVlILEVBQVosRUFBZ0JDLEtBQWhCLEVBQXVCQyxNQUF2QjtBQUNBO0FBQ0Q7QUFBQTs7QUFDRCxJQUFJRSxDQUFDLEdBQUdMLGFBQWEsQ0FBQ00sU0FBZCxHQUEwQixJQUFJQyx1REFBSixFQUFsQzs7QUFDQUYsQ0FBQyxDQUFDRyxjQUFGLEdBQW1CLEVBQW5CO0FBQ0FILENBQUMsQ0FBQ0ksWUFBRixHQUFpQkosQ0FBQyxDQUFDSyxZQUFuQjs7QUFDQUwsQ0FBQyxDQUFDSyxZQUFGLEdBQWlCLFVBQVNDLEdBQVQsRUFBYztBQUM5QixPQUFLRixZQUFMLENBQWtCRSxHQUFsQjs7QUFDQSxNQUFJLEtBQUtDLFFBQUwsSUFBaUIsS0FBS0EsUUFBTCxDQUFjQyxJQUFkLENBQW1CQyxNQUFuQixHQUE0QixDQUFqRCxFQUFvRDtBQUNuRCxTQUFNLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLEVBQUUsR0FBRyxLQUFLUixjQUFMLENBQW9CTSxNQUExQyxFQUFrREMsQ0FBQyxHQUFHQyxFQUF0RCxFQUEwREQsQ0FBQyxFQUEzRCxFQUErRDtBQUM5RCxVQUFJRSxDQUFDLEdBQUcsS0FBS1QsY0FBTCxDQUFvQk8sQ0FBcEIsQ0FBUjs7QUFDQSxVQUFJRSxDQUFDLElBQUlBLENBQUMsQ0FBQ0osSUFBRixDQUFPQyxNQUFQLEdBQWdCLENBQXpCLEVBQTRCO0FBQzNCRyxTQUFDLENBQUNDLElBQUYsR0FBUyxLQUFLTixRQUFMLENBQWNNLElBQXZCO0FBQ0FELFNBQUMsQ0FBQ0UsSUFBRixHQUFTLEtBQUtQLFFBQUwsQ0FBY08sSUFBdkI7QUFDQUYsU0FBQyxDQUFDRyxRQUFGLENBQVdULEdBQVgsRUFBZ0IsS0FBS1UsS0FBckIsRUFBNEIsS0FBS25CLEtBQWpDLEVBQXdDLEtBQUtDLE1BQTdDLEVBQXFELEtBQUtTLFFBQUwsQ0FBY1UsTUFBZCxDQUFxQkMsU0FBMUUsRUFBcUYsS0FBS1gsUUFBTCxDQUFjVSxNQUFkLENBQXFCRSxVQUExRyxFQUFzSCxLQUFLWixRQUFMLENBQWNVLE1BQWQsQ0FBcUJHLFlBQTNJO0FBQ0E7QUFDRDtBQUNEO0FBQ0QsQ0FaRDs7QUFhQXBCLENBQUMsQ0FBQ3FCLFdBQUYsR0FBZ0IsVUFBU2QsUUFBVCxFQUFtQjtBQUNsQyxNQUFJLENBQUMsS0FBS0EsUUFBVixFQUFvQjtBQUNuQixTQUFLQSxRQUFMLEdBQWdCQSxRQUFoQjtBQUNBLEdBRkQsTUFFTztBQUNOLFNBQUtKLGNBQUwsQ0FBb0JtQixJQUFwQixDQUF5QmYsUUFBekI7QUFDQTtBQUNELENBTkQiLCJmaWxlIjoiLi9zcmMvQ2hlbURvb2RsZS9PdmVybGF5Q2FudmFzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9TcGVjdHJ1bUNhbnZhcyBmcm9tICcuL19TcGVjdHJ1bUNhbnZhcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE92ZXJsYXlDYW52YXMoaWQsIHdpZHRoLCBoZWlnaHQpIHtcblx0aWYgKGlkKSB7XG5cdFx0dGhpcy5jcmVhdGUoaWQsIHdpZHRoLCBoZWlnaHQpO1xuXHR9XG59O1xudmFyIF8gPSBPdmVybGF5Q2FudmFzLnByb3RvdHlwZSA9IG5ldyBfU3BlY3RydW1DYW52YXMoKTtcbl8ub3ZlcmxheVNwZWN0cmEgPSBbXTtcbl8uc3VwZXJSZXBhaW50ID0gXy5pbm5lclJlcGFpbnQ7XG5fLmlubmVyUmVwYWludCA9IGZ1bmN0aW9uKGN0eCkge1xuXHR0aGlzLnN1cGVyUmVwYWludChjdHgpO1xuXHRpZiAodGhpcy5zcGVjdHJ1bSAmJiB0aGlzLnNwZWN0cnVtLmRhdGEubGVuZ3RoID4gMCkge1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLm92ZXJsYXlTcGVjdHJhLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBzID0gdGhpcy5vdmVybGF5U3BlY3RyYVtpXTtcblx0XHRcdGlmIChzICYmIHMuZGF0YS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHMubWluWCA9IHRoaXMuc3BlY3RydW0ubWluWDtcblx0XHRcdFx0cy5tYXhYID0gdGhpcy5zcGVjdHJ1bS5tYXhYO1xuXHRcdFx0XHRzLmRyYXdQbG90KGN0eCwgdGhpcy5zcGVjcywgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMuc3BlY3RydW0ubWVtb3J5Lm9mZnNldFRvcCwgdGhpcy5zcGVjdHJ1bS5tZW1vcnkub2Zmc2V0TGVmdCwgdGhpcy5zcGVjdHJ1bS5tZW1vcnkub2Zmc2V0Qm90dG9tKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5fLmFkZFNwZWN0cnVtID0gZnVuY3Rpb24oc3BlY3RydW0pIHtcblx0aWYgKCF0aGlzLnNwZWN0cnVtKSB7XG5cdFx0dGhpcy5zcGVjdHJ1bSA9IHNwZWN0cnVtO1xuXHR9IGVsc2Uge1xuXHRcdHRoaXMub3ZlcmxheVNwZWN0cmEucHVzaChzcGVjdHJ1bSk7XG5cdH1cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ChemDoodle/OverlayCanvas.js\n");

/***/ }),

/***/ "./src/ChemDoodle/RotatorCanvas.js":
/*!*****************************************!*\
  !*** ./src/ChemDoodle/RotatorCanvas.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return RotatorCanvas; });\n/* harmony import */ var _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_AnimatorCanvas */ \"./src/ChemDoodle/_AnimatorCanvas.js\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib */ \"./src/ChemDoodle/lib/index.js\");\n\n\nvar m = Math; // keep these declaration outside the loop to avoid overhead\n\nvar matrix = [];\nvar xAxis = [1, 0, 0];\nvar yAxis = [0, 1, 0];\nvar zAxis = [0, 0, 1];\nfunction RotatorCanvas(id, width, height, rotate3D) {\n  if (id) {\n    this.create(id, width, height);\n  }\n\n  this.rotate3D = rotate3D;\n}\n;\n\nvar _ = RotatorCanvas.prototype = new _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\nvar increment = m.PI / 15;\n_.xIncrement = increment;\n_.yIncrement = increment;\n_.zIncrement = increment;\n\n_.nextFrame = function (delta) {\n  if (this.molecules.length === 0 && this.shapes.length === 0) {\n    this.stopAnimation();\n    return;\n  }\n\n  var change = delta / 1000;\n\n  if (this.rotate3D) {\n    _lib__WEBPACK_IMPORTED_MODULE_1__[\"mat4\"].identity(matrix);\n    _lib__WEBPACK_IMPORTED_MODULE_1__[\"mat4\"].rotate(matrix, this.xIncrement * change, xAxis);\n    _lib__WEBPACK_IMPORTED_MODULE_1__[\"mat4\"].rotate(matrix, this.yIncrement * change, yAxis);\n    _lib__WEBPACK_IMPORTED_MODULE_1__[\"mat4\"].rotate(matrix, this.zIncrement * change, zAxis);\n\n    for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n      var m = this.molecules[i];\n\n      for (var j = 0, jj = m.atoms.length; j < jj; j++) {\n        var a = m.atoms[j];\n        var p = [a.x - this.width / 2, a.y - this.height / 2, a.z];\n        _lib__WEBPACK_IMPORTED_MODULE_1__[\"mat4\"].multiplyVec3(matrix, p);\n        a.x = p[0] + this.width / 2;\n        a.y = p[1] + this.height / 2;\n        a.z = p[2];\n      }\n\n      for (var j = 0, jj = m.rings.length; j < jj; j++) {\n        m.rings[j].center = m.rings[j].getCenter();\n      }\n\n      if (this.specs.atoms_display && this.specs.atoms_circles_2D) {\n        m.sortAtomsByZ();\n      }\n\n      if (this.specs.bonds_display && this.specs.bonds_clearOverlaps_2D) {\n        m.sortBondsByZ();\n      }\n    }\n\n    for (var i = 0, ii = this.shapes.length; i < ii; i++) {\n      var sps = this.shapes[i].getPoints();\n\n      for (var j = 0, jj = sps.length; j < jj; j++) {\n        var a = sps[j];\n        var p = [a.x - this.width / 2, a.y - this.height / 2, 0];\n        _lib__WEBPACK_IMPORTED_MODULE_1__[\"mat4\"].multiplyVec3(matrix, p);\n        a.x = p[0] + this.width / 2;\n        a.y = p[1] + this.height / 2;\n      }\n    }\n  } else {\n    this.specs.rotateAngle += this.zIncrement * change;\n  }\n};\n\n_.dblclick = function (e) {\n  if (this.isRunning()) {\n    this.stopAnimation();\n  } else {\n    this.startAnimation();\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/RotatorCanvas.js\n");

/***/ }),

/***/ "./src/ChemDoodle/SlideshowCanvas.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/SlideshowCanvas.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return SlideshowCanvas; });\n/* harmony import */ var _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_AnimatorCanvas */ \"./src/ChemDoodle/_AnimatorCanvas.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math */ \"./src/ChemDoodle/math/index.js\");\n\n\nfunction SlideshowCanvas(id, width, height) {\n  if (id) {\n    this.create(id, width, height);\n  }\n}\n;\n\nvar _ = SlideshowCanvas.prototype = new _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n_.frames = [];\n_.curIndex = 0;\n_.timeout = 5000;\n_.alpha = 0;\n_.innerHandle = undefined;\n_.phase = 0;\n\n_.drawChildExtras = function (ctx) {\n  var rgb = _math__WEBPACK_IMPORTED_MODULE_1__[\"getRGB\"](this.specs.backgroundColor, 255);\n  ctx.fillStyle = 'rgba(' + rgb[0] + ', ' + rgb[1] + ', ' + rgb[2] + ', ' + this.alpha + ')';\n  ctx.fillRect(0, 0, this.width, this.height);\n};\n\n_.nextFrame = function (delta) {\n  if (this.frames.length === 0) {\n    this.stopAnimation();\n    return;\n  }\n\n  this.phase = 0;\n  var me = this;\n  var count = 1;\n  this.innerHandle = setInterval(function () {\n    me.alpha = count / 15;\n    me.repaint();\n\n    if (count === 15) {\n      me.breakInnerHandle();\n    }\n\n    count++;\n  }, 33);\n};\n\n_.breakInnerHandle = function () {\n  if (this.innerHandle) {\n    clearInterval(this.innerHandle);\n    this.innerHandle = undefined;\n  }\n\n  if (this.phase === 0) {\n    this.curIndex++;\n\n    if (this.curIndex > this.frames.length - 1) {\n      this.curIndex = 0;\n    }\n\n    this.alpha = 1;\n    var f = this.frames[this.curIndex];\n    this.loadContent(f.mols, f.shapes);\n    this.phase = 1;\n    var me = this;\n    var count = 1;\n    this.innerHandle = setInterval(function () {\n      me.alpha = (15 - count) / 15;\n      me.repaint();\n\n      if (count === 15) {\n        me.breakInnerHandle();\n      }\n\n      count++;\n    }, 33);\n  } else if (this.phase === 1) {\n    this.alpha = 0;\n    this.repaint();\n  }\n};\n\n_.addFrame = function (molecules, shapes) {\n  if (this.frames.length === 0) {\n    this.loadContent(molecules, shapes);\n  }\n\n  this.frames.push({\n    mols: molecules,\n    shapes: shapes\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvU2xpZGVzaG93Q2FudmFzLmpzP2ExYTIiXSwibmFtZXMiOlsiU2xpZGVzaG93Q2FudmFzIiwiaWQiLCJ3aWR0aCIsImhlaWdodCIsImNyZWF0ZSIsIl8iLCJwcm90b3R5cGUiLCJfQW5pbWF0b3JDYW52YXMiLCJmcmFtZXMiLCJjdXJJbmRleCIsInRpbWVvdXQiLCJhbHBoYSIsImlubmVySGFuZGxlIiwidW5kZWZpbmVkIiwicGhhc2UiLCJkcmF3Q2hpbGRFeHRyYXMiLCJjdHgiLCJyZ2IiLCJtYXRoIiwic3BlY3MiLCJiYWNrZ3JvdW5kQ29sb3IiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsIm5leHRGcmFtZSIsImRlbHRhIiwibGVuZ3RoIiwic3RvcEFuaW1hdGlvbiIsIm1lIiwiY291bnQiLCJzZXRJbnRlcnZhbCIsInJlcGFpbnQiLCJicmVha0lubmVySGFuZGxlIiwiY2xlYXJJbnRlcnZhbCIsImYiLCJsb2FkQ29udGVudCIsIm1vbHMiLCJzaGFwZXMiLCJhZGRGcmFtZSIsIm1vbGVjdWxlcyIsInB1c2giXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUVlLFNBQVNBLGVBQVQsQ0FBeUJDLEVBQXpCLEVBQTZCQyxLQUE3QixFQUFvQ0MsTUFBcEMsRUFBNEM7QUFDekQsTUFBSUYsRUFBSixFQUFRO0FBQ04sU0FBS0csTUFBTCxDQUFZSCxFQUFaLEVBQWdCQyxLQUFoQixFQUF1QkMsTUFBdkI7QUFDRDtBQUNGO0FBQUE7O0FBQ0QsSUFBSUUsQ0FBQyxHQUFHTCxlQUFlLENBQUNNLFNBQWhCLEdBQTRCLElBQUlDLHVEQUFKLEVBQXBDOztBQUNBRixDQUFDLENBQUNHLE1BQUYsR0FBVyxFQUFYO0FBQ0FILENBQUMsQ0FBQ0ksUUFBRixHQUFhLENBQWI7QUFDQUosQ0FBQyxDQUFDSyxPQUFGLEdBQVksSUFBWjtBQUNBTCxDQUFDLENBQUNNLEtBQUYsR0FB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QUE0QjtBQUN2QyxNQUFJLEtBQUs1QixNQUFMLENBQVlpQixNQUFaLEtBQXVCLENBQTNCLEVBQThCO0FBQzVCLFNBQUtTLFdBQUwsQ0FBaUJJLFNBQWpCLEVBQTRCRixNQUE1QjtBQUNEOztBQUNELE9BQUs1QixNQUFMLENBQVkrQixJQUFaLENBQWlCO0FBQ2ZKLFFBQUksRUFBR0csU0FEUTtBQUVmRixVQUFNLEVBQUdBO0FBRk0sR0FBakI7QUFJRCxDQVJEIiwiZmlsZSI6Ii4vc3JjL0NoZW1Eb29kbGUvU2xpZGVzaG93Q2FudmFzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9BbmltYXRvckNhbnZhcyBmcm9tICcuL19BbmltYXRvckNhbnZhcyc7XG5pbXBvcnQgKiBhcyBtYXRoIGZyb20gJy4vbWF0aCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNsaWRlc2hvd0NhbnZhcyhpZCwgd2lkdGgsIGhlaWdodCkge1xuICBpZiAoaWQpIHtcbiAgICB0aGlzLmNyZWF0ZShpZCwgd2lkdGgsIGhlaWdodCk7XG4gIH1cbn07XG52YXIgXyA9IFNsaWRlc2hvd0NhbnZhcy5wcm90b3R5cGUgPSBuZXcgX0FuaW1hdG9yQ2FudmFzKCk7XG5fLmZyYW1lcyA9IFtdO1xuXy5jdXJJbmRleCA9IDA7XG5fLnRpbWVvdXQgPSA1MDAwO1xuXy5hbHBoYSA9IDA7XG5fLmlubmVySGFuZGxlID0gdW5kZWZpbmVkO1xuXy5waGFzZSA9IDA7XG5fLmRyYXdDaGlsZEV4dHJhcyA9IGZ1bmN0aW9uKGN0eCkge1xuICB2YXIgcmdiID0gbWF0aC5nZXRSR0IodGhpcy5zcGVjcy5iYWNrZ3JvdW5kQ29sb3IsIDI1NSk7XG4gIGN0eC5maWxsU3R5bGUgPSAncmdiYSgnICsgcmdiWzBdICsgJywgJyArIHJnYlsxXSArICcsICcgKyByZ2JbMl0gKyAnLCAnICsgdGhpcy5hbHBoYSArICcpJztcbiAgY3R4LmZpbGxSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbn07XG5fLm5leHRGcmFtZSA9IGZ1bmN0aW9uKGRlbHRhKSB7XG4gIGlmICh0aGlzLmZyYW1lcy5sZW5ndGggPT09IDApIHtcbiAgICB0aGlzLnN0b3BBbmltYXRpb24oKTtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5waGFzZSA9IDA7XG4gIHZhciBtZSA9IHRoaXM7XG4gIHZhciBjb3VudCA9IDE7XG4gIHRoaXMuaW5uZXJIYW5kbGUgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICBtZS5hbHBoYSA9IGNvdW50IC8gMTU7XG4gICAgbWUucmVwYWludCgpO1xuICAgIGlmIChjb3VudCA9PT0gMTUpIHtcbiAgICAgIG1lLmJyZWFrSW5uZXJIYW5kbGUoKTtcbiAgICB9XG4gICAgY291bnQrKztcbiAgfSwgMzMpO1xufTtcbl8uYnJlYWtJbm5lckhhbmRsZSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5pbm5lckhhbmRsZSkge1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbm5lckhhbmRsZSk7XG4gICAgdGhpcy5pbm5lckhhbmRsZSA9IHVuZGVmaW5lZDtcbiAgfVxuICBpZiAodGhpcy5waGFzZSA9PT0gMCkge1xuICAgIHRoaXMuY3VySW5kZXgrKztcbiAgICBpZiAodGhpcy5jdXJJbmRleCA+IHRoaXMuZnJhbWVzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHRoaXMuY3VySW5kZXggPSAwO1xuICAgIH1cbiAgICB0aGlzLmFscGhhID0gMTtcbiAgICB2YXIgZiA9IHRoaXMuZnJhbWVzW3RoaXMuY3VySW5kZXhdO1xuICAgIHRoaXMubG9hZENvbnRlbnQoZi5tb2xzLCBmLnNoYXBlcyk7XG4gICAgdGhpcy5waGFzZSA9IDE7XG4gICAgdmFyIG1lID0gdGhpcztcbiAgICB2YXIgY291bnQgPSAxO1xuICAgIHRoaXMuaW5uZXJIYW5kbGUgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgIG1lLmFscGhhID0gKDE1IC0gY291bnQpIC8gMTU7XG4gICAgICBtZS5yZXBhaW50KCk7XG4gICAgICBpZiAoY291bnQgPT09IDE1KSB7XG4gICAgICAgIG1lLmJyZWFrSW5uZXJIYW5kbGUoKTtcbiAgICAgIH1cbiAgICAgIGNvdW50Kys7XG4gICAgfSwgMzMpO1xuICB9IGVsc2UgaWYgKHRoaXMucGhhc2UgPT09IDEpIHtcbiAgICB0aGlzLmFscGhhID0gMDtcbiAgICB0aGlzLnJlcGFpbnQoKTtcbiAgfVxufTtcbl8uYWRkRnJhbWUgPSBmdW5jdGlvbihtb2xlY3VsZXMsIHNoYXBlcykge1xuICBpZiAodGhpcy5mcmFtZXMubGVuZ3RoID09PSAwKSB7XG4gICAgdGhpcy5sb2FkQ29udGVudChtb2xlY3VsZXMsIHNoYXBlcyk7XG4gIH1cbiAgdGhpcy5mcmFtZXMucHVzaCh7XG4gICAgbW9scyA6IG1vbGVjdWxlcyxcbiAgICBzaGFwZXMgOiBzaGFwZXNcbiAgfSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/ChemDoodle/SlideshowCanvas.js\n");

/***/ }),

/***/ "./src/ChemDoodle/TransformCanvas.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/TransformCanvas.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return TransformCanvas; });\n/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Canvas */ \"./src/ChemDoodle/_Canvas.js\");\n/* harmony import */ var _monitor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./monitor */ \"./src/ChemDoodle/monitor.js\");\n/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./structures */ \"./src/ChemDoodle/structures/index.js\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib */ \"./src/ChemDoodle/lib/index.js\");\n\n\n\n\nvar m = Math;\nfunction TransformCanvas(id, width, height, rotate3D) {\n  if (id) {\n    this.create(id, width, height);\n  }\n\n  this.rotate3D = rotate3D;\n}\n;\n\nvar _ = TransformCanvas.prototype = new _Canvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n_.lastPoint = undefined;\n_.rotationMultMod = 1.3;\n_.lastPinchScale = 1;\n_.lastGestureRotate = 0;\n\n_.mousedown = function (e) {\n  this.lastPoint = e.p;\n};\n\n_.dblclick = function (e) {\n  // center structure\n  this.center();\n  this.repaint();\n};\n\n_.drag = function (e) {\n  if (!this.lastPoint.multi) {\n    if (_monitor__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ALT) {\n      var t = new _structures__WEBPACK_IMPORTED_MODULE_2__[\"Point\"](e.p.x, e.p.y);\n      t.sub(this.lastPoint);\n\n      for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n        var mol = this.molecules[i];\n\n        for (var j = 0, jj = mol.atoms.length; j < jj; j++) {\n          mol.atoms[j].add(t);\n        }\n\n        mol.check();\n      }\n\n      for (var i = 0, ii = this.shapes.length; i < ii; i++) {\n        var sps = this.shapes[i].getPoints();\n\n        for (var j = 0, jj = sps.length; j < jj; j++) {\n          sps[j].add(t);\n        }\n      }\n\n      this.lastPoint = e.p;\n      this.repaint();\n    } else {\n      if (this.rotate3D === true) {\n        var diameter = m.max(this.width / 4, this.height / 4);\n        var difx = e.p.x - this.lastPoint.x;\n        var dify = e.p.y - this.lastPoint.y;\n        var yIncrement = difx / diameter * this.rotationMultMod;\n        var xIncrement = -dify / diameter * this.rotationMultMod;\n        var matrix = [];\n        _lib__WEBPACK_IMPORTED_MODULE_3__[\"mat4\"].identity(matrix);\n        _lib__WEBPACK_IMPORTED_MODULE_3__[\"mat4\"].rotate(matrix, xIncrement, [1, 0, 0]);\n        _lib__WEBPACK_IMPORTED_MODULE_3__[\"mat4\"].rotate(matrix, yIncrement, [0, 1, 0]);\n\n        for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n          var mol = this.molecules[i];\n\n          for (var j = 0, jj = mol.atoms.length; j < jj; j++) {\n            var a = mol.atoms[j];\n            var p = [a.x - this.width / 2, a.y - this.height / 2, a.z];\n            _lib__WEBPACK_IMPORTED_MODULE_3__[\"mat4\"].multiplyVec3(matrix, p);\n            a.x = p[0] + this.width / 2;\n            a.y = p[1] + this.height / 2;\n            a.z = p[2];\n          }\n\n          for (var i = 0, ii = mol.rings.length; i < ii; i++) {\n            mol.rings[i].center = mol.rings[i].getCenter();\n          }\n\n          this.lastPoint = e.p;\n\n          if (this.specs.atoms_display && this.specs.atoms_circles_2D) {\n            mol.sortAtomsByZ();\n          }\n\n          if (this.specs.bonds_display && this.specs.bonds_clearOverlaps_2D) {\n            mol.sortBondsByZ();\n          }\n        }\n\n        this.repaint();\n      } else {\n        var center = new _structures__WEBPACK_IMPORTED_MODULE_2__[\"Point\"](this.width / 2, this.height / 2);\n        var before = center.angle(this.lastPoint);\n        var after = center.angle(e.p);\n        this.specs.rotateAngle -= after - before;\n        this.lastPoint = e.p;\n        this.repaint();\n      }\n    }\n  }\n};\n\n_.mousewheel = function (e, delta) {\n  this.specs.scale += delta / 50;\n\n  if (this.specs.scale < .01) {\n    this.specs.scale = .01;\n  }\n\n  this.repaint();\n};\n\n_.multitouchmove = function (e, numFingers) {\n  if (numFingers === 2) {\n    if (this.lastPoint.multi) {\n      var t = new _structures__WEBPACK_IMPORTED_MODULE_2__[\"Point\"](e.p.x, e.p.y);\n      t.sub(this.lastPoint);\n\n      for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n        var m = this.molecules[i];\n\n        for (var j = 0, jj = m.atoms.length; j < jj; j++) {\n          m.atoms[j].add(t);\n        }\n\n        m.check();\n      }\n\n      for (var i = 0, ii = this.shapes.length; i < ii; i++) {\n        var sps = this.shapes[i].getPoints();\n\n        for (var j = 0, jj = sps.length; j < jj; j++) {\n          sps[j].add(t);\n        }\n      }\n\n      this.lastPoint = e.p;\n      this.lastPoint.multi = true;\n      this.repaint();\n    } else {\n      this.lastPoint = e.p;\n      this.lastPoint.multi = true;\n    }\n  }\n};\n\n_.gesturechange = function (e) {\n  if (e.originalEvent.scale - this.lastPinchScale !== 0) {\n    this.specs.scale *= e.originalEvent.scale / this.lastPinchScale;\n\n    if (this.specs.scale < .01) {\n      this.specs.scale = .01;\n    }\n\n    this.lastPinchScale = e.originalEvent.scale;\n  }\n\n  if (this.lastGestureRotate - e.originalEvent.rotation !== 0) {\n    var rot = (this.lastGestureRotate - e.originalEvent.rotation) / 180 * m.PI;\n    var center = new _structures__WEBPACK_IMPORTED_MODULE_2__[\"Point\"](this.width / 2, this.height / 2);\n\n    for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n      var mol = this.molecules[i];\n\n      for (var j = 0, jj = mol.atoms.length; j < jj; j++) {\n        var a = mol.atoms[j];\n        var dist = center.distance(a);\n        var angle = center.angle(a) + rot;\n        a.x = center.x + dist * m.cos(angle);\n        a.y = center.y - dist * m.sin(angle);\n      }\n\n      mol.check();\n    }\n\n    this.lastGestureRotate = e.originalEvent.rotation;\n  }\n\n  this.repaint();\n};\n\n_.gestureend = function (e) {\n  this.lastPinchScale = 1;\n  this.lastGestureRotate = 0;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvVHJhbnNmb3JtQ2FudmFzLmpzPzc2ZDIiXSwibmFtZXMiOlsibSIsIk1hdGgiLCJUcmFuc2Zvcm1DYW52YXMiLCJpZCIsIndpZHRoIiwiaGVpZ2h0Iiwicm90YXRlM0QiLCJjcmVhdGUiLCJfIiwicHJvdG90eXBlIiwiX0NhbnZhcyIsImxhc3RQb2ludCIsInVuZGVmaW5lZCIsInJvdGF0aW9uTXVsdE1vZCIsImxhc3RQaW5jaFNjYWxlIiwibGFzdEdlc3R1cmVSb3RhdGUiLCJtb3VzZWRvd24iLCJlIiwicCIsImRibGNsaWNrIiwiY2VudGVyIiwicmVwYWludCIsImRyYWciLCJtdWx0aSIsIm1vbml0b3IiLCJBTFQiLCJ0IiwiUG9pbnQiLCJ4IiwieSIsInN1YiIsImkiLCJpaSIsIm1vbGVjdWxlcyIsImxlbmd0aCIsIm1vbCIsImoiLCJqaiIsImF0b21zIiwiYWRkIiwiY2hlY2siLCJzaGFwZXMiLCJzcHMiLCJnZXRQb2ludHMiLCJkaWFtZXRlciIsIm1heCIsImRpZngiLCJkaWZ5IiwieUluY3JlbWVudCIsInhJbmNyZW1lbnQiLCJtYXRyaXgiLCJtNCIsImlkZW50aXR5Iiwicm90YXRlIiwiYSIsInoiLCJtdWx0aXBseVZlYzMiLCJyaW5ncyIsImdldENlbnRlciIsInNwZWNzIiwiYXRvbXNfZGlzcGxheSIsImF0b21zX2NpcmNsZXNfMkQiLCJzb3J0QXRvbXNCeVoiLCJib25kc19kaXNwbGF5IiwiYm9uZHNfY2xlYXJPdmVybGFwc18yRCIsInNvcnRCb25kc0J5WiIsImJlZm9yZSIsImFuZ2xlIiwiYWZ0ZXIiLCJyb3RhdGVBbmdsZSIsIm1vdXNld2hlZWwiLCJkZWx0YSIsInNjYWxlIiwibXVsdGl0b3VjaG1vdmUiLCJudW1GaW5nZXJzIiwiZ2VzdHVyZWNoYW5nZSIsIm9yaWdpbmFsRXZlbnQiLCJyb3RhdGlvbiIsInJvdCIsIlBJIiwiZGlzdCIsImRpc3RhbmNlIiwiY29zIiwi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R0MsRUFBakQsRUFBcURELENBQUMsRUFBdEQsRUFBMEQ7QUFDekQsVUFBSUksR0FBRyxHQUFHLEtBQUtGLFNBQUwsQ0FBZUYsQ0FBZixDQUFWOztBQUNBLFdBQU0sSUFBSUssQ0FBQyxHQUFHLENBQVIsRUFBV0MsRUFBRSxHQUFHRixHQUFHLENBQUNHLEtBQUosQ0FBVUosTUFBaEMsRUFBd0NFLENBQUMsR0FBR0MsRUFBNUMsRUFBZ0RELENBQUMsRUFBakQsRUFBcUQ7QUFDcEQsWUFBSWtCLENBQUMsR0FBR25CLEdBQUcsQ0FBQ0csS0FBSixDQUFVRixDQUFWLENBQVI7QUFDQSxZQUFJNEMsSUFBSSxHQUFHNUQsTUFBTSxDQUFDNkQsUUFBUCxDQUFnQjNCLENBQWhCLENBQVg7QUFDQSxZQUFJYSxLQUFLLEdBQUcvQyxNQUFNLENBQUMrQyxLQUFQLENBQWFiLENBQWIsSUFBa0J3QixHQUE5QjtBQUNBeEIsU0FBQyxDQUFDMUIsQ0FBRixHQUFNUixNQUFNLENBQUNRLENBQVAsR0FBV29ELElBQUksR0FBR2hGLENBQUMsQ0FBQ2tGLEdBQUYsQ0FBTWYsS0FBTixDQUF4QjtBQUNBYixTQUFDLENBQUN6QixDQUFGLEdBQU1ULE1BQU0sQ0FBQ1MsQ0FBUCxHQUFXbUQsSUFBSSxHQUFHaEYsQ0FBQyxDQUFDbUYsR0FBRixDQUFNaEIsS0FBTixDQUF4QjtBQUNBOztBQUNEaEMsU0FBRyxDQUFDSyxLQUFKO0FBQ0E7O0FBQ0QsU0FBS3pCLGlCQUFMLEdBQXlCRSxDQUFDLENBQUMyRCxhQUFGLENBQWdCQyxRQUF6QztBQUNBOztBQUNELE9BQUt4RCxPQUFMO0FBQ0EsQ0F6QkQ7O0FBMEJBYixDQUFDLENBQUM0RSxVQUFGLEdBQWUsVUFBU25FLENBQVQsRUFBWTtBQUMxQixPQUFLSCxjQUFMLEdBQXNCLENBQXRCO0FBQ0EsT0FBS0MsaUJBQUwsR0FBeUIsQ0FBekI7QUFDQSxDQUhEIiwiZmlsZSI6Ii4vc3JjL0NoZW1Eb29kbGUvVHJhbnNmb3JtQ2FudmFzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9DYW52YXMgZnJvbSAnLi9fQ2FudmFzJztcbmltcG9ydCBtb25pdG9yIGZyb20gJy4vbW9uaXRvcic7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4vc3RydWN0dXJlcyc7XG5pbXBvcnQgeyBtYXQ0IGFzIG00IH0gZnJvbSAnLi9saWInO1xuXG5jb25zdCBtID0gTWF0aDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVHJhbnNmb3JtQ2FudmFzKGlkLCB3aWR0aCwgaGVpZ2h0LCByb3RhdGUzRCkge1xuXHRpZiAoaWQpIHtcblx0XHR0aGlzLmNyZWF0ZShpZCwgd2lkdGgsIGhlaWdodCk7XG5cdH1cblx0dGhpcy5yb3RhdGUzRCA9IHJvdGF0ZTNEO1xufTtcbnZhciBfID0gVHJhbnNmb3JtQ2FudmFzLnByb3RvdHlwZSA9IG5ldyBfQ2FudmFzKCk7XG5fLmxhc3RQb2ludCA9IHVuZGVmaW5lZDtcbl8ucm90YXRpb25NdWx0TW9kID0gMS4zO1xuXy5sYXN0UGluY2hTY2FsZSA9IDE7XG5fLmxhc3RHZXN0dXJlUm90YXRlID0gMDtcbl8ubW91c2Vkb3duID0gZnVuY3Rpb24oZSkge1xuXHR0aGlzLmxhc3RQb2ludCA9IGUucDtcbn07XG5fLmRibGNsaWNrID0gZnVuY3Rpb24oZSkge1xuXHQvLyBjZW50ZXIgc3RydWN0dXJlXG5cdHRoaXMuY2VudGVyKCk7XG5cdHRoaXMucmVwYWludCgpO1xufTtcbl8uZHJhZyA9IGZ1bmN0aW9uKGUpIHtcblx0aWYgKCF0aGlzLmxhc3RQb2ludC5tdWx0aSkge1xuXHRcdGlmIChtb25pdG9yLkFMVCkge1xuXHRcdFx0dmFyIHQgPSBuZXcgUG9pbnQoZS5wLngsIGUucC55KTtcblx0XHRcdHQuc3ViKHRoaXMubGFzdFBvaW50KTtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLm1vbGVjdWxlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBtb2wgPSB0aGlzLm1vbGVjdWxlc1tpXTtcblx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IG1vbC5hdG9tcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0bW9sLmF0b21zW2pdLmFkZCh0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRtb2wuY2hlY2soKTtcblx0XHRcdH1cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLnNoYXBlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBzcHMgPSB0aGlzLnNoYXBlc1tpXS5nZXRQb2ludHMoKTtcblx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IHNwcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0c3BzW2pdLmFkZCh0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5sYXN0UG9pbnQgPSBlLnA7XG5cdFx0XHR0aGlzLnJlcGFpbnQoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKHRoaXMucm90YXRlM0QgPT09IHRydWUpIHtcblx0XHRcdFx0dmFyIGRpYW1ldGVyID0gbS5tYXgodGhpcy53aWR0aCAvIDQsIHRoaXMuaGVpZ2h0IC8gNCk7XG5cdFx0XHRcdHZhciBkaWZ4ID0gZS5wLnggLSB0aGlzLmxhc3RQb2ludC54O1xuXHRcdFx0XHR2YXIgZGlmeSA9IGUucC55IC0gdGhpcy5sYXN0UG9pbnQueTtcblx0XHRcdFx0dmFyIHlJbmNyZW1lbnQgPSBkaWZ4IC8gZGlhbWV0ZXIgKiB0aGlzLnJvdGF0aW9uTXVsdE1vZDtcblx0XHRcdFx0dmFyIHhJbmNyZW1lbnQgPSAtZGlmeSAvIGRpYW1ldGVyICogdGhpcy5yb3RhdGlvbk11bHRNb2Q7XG5cdFx0XHRcdHZhciBtYXRyaXggPSBbXTtcblx0XHRcdFx0bTQuaWRlbnRpdHkobWF0cml4KTtcblx0XHRcdFx0bTQucm90YXRlKG1hdHJpeCwgeEluY3JlbWVudCwgWyAxLCAwLCAwIF0pO1xuXHRcdFx0XHRtNC5yb3RhdGUobWF0cml4LCB5SW5jcmVtZW50LCBbIDAsIDEsIDAgXSk7XG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLm1vbGVjdWxlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdFx0dmFyIG1vbCA9IHRoaXMubW9sZWN1bGVzW2ldO1xuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtb2wuYXRvbXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdFx0dmFyIGEgPSBtb2wuYXRvbXNbal07XG5cdFx0XHRcdFx0XHR2YXIgcCA9IFsgYS54IC0gdGhpcy53aWR0aCAvIDIsIGEueSAtIHRoaXMuaGVpZ2h0IC8gMiwgYS56IF07XG5cdFx0XHRcdFx0XHRtNC5tdWx0aXBseVZlYzMobWF0cml4LCBwKTtcblx0XHRcdFx0XHRcdGEueCA9IHBbMF0gKyB0aGlzLndpZHRoIC8gMjtcblx0XHRcdFx0XHRcdGEueSA9IHBbMV0gKyB0aGlzLmhlaWdodCAvIDI7XG5cdFx0XHRcdFx0XHRhLnogPSBwWzJdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9sLnJpbmdzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0XHRcdG1vbC5yaW5nc1tpXS5jZW50ZXIgPSBtb2wucmluZ3NbaV0uZ2V0Q2VudGVyKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMubGFzdFBvaW50ID0gZS5wO1xuXHRcdFx0XHRcdGlmICh0aGlzLnNwZWNzLmF0b21zX2Rpc3BsYXkgJiYgdGhpcy5zcGVjcy5hdG9tc19jaXJjbGVzXzJEKSB7XG5cdFx0XHRcdFx0XHRtb2wuc29ydEF0b21zQnlaKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh0aGlzLnNwZWNzLmJvbmRzX2Rpc3BsYXkgJiYgdGhpcy5zcGVjcy5ib25kc19jbGVhck92ZXJsYXBzXzJEKSB7XG5cdFx0XHRcdFx0XHRtb2wuc29ydEJvbmRzQnlaKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMucmVwYWludCgpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIGNlbnRlciA9IG5ldyBQb2ludCh0aGlzLndpZHRoIC8gMiwgdGhpcy5oZWlnaHQgLyAyKTtcblx0XHRcdFx0dmFyIGJlZm9yZSA9IGNlbnRlci5hbmdsZSh0aGlzLmxhc3RQb2ludCk7XG5cdFx0XHRcdHZhciBhZnRlciA9IGNlbnRlci5hbmdsZShlLnApO1xuXHRcdFx0XHR0aGlzLnNwZWNzLnJvdGF0ZUFuZ2xlIC09IChhZnRlciAtIGJlZm9yZSk7XG5cdFx0XHRcdHRoaXMubGFzdFBvaW50ID0gZS5wO1xuXHRcdFx0XHR0aGlzLnJlcGFpbnQoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5fLm1vdXNld2hlZWwgPSBmdW5jdGlvbihlLCBkZWx0YSkge1xuXHR0aGlzLnNwZWNzLnNjYWxlICs9IGRlbHRhIC8gNTA7XG5cdGlmICh0aGlzLnNwZWNzLnNjYWxlIDwgLjAxKSB7XG5cdFx0dGhpcy5zcGVjcy5zY2FsZSA9IC4wMTtcblx0fVxuXHR0aGlzLnJlcGFpbnQoKTtcbn07XG5fLm11bHRpdG91Y2htb3ZlID0gZnVuY3Rpb24oZSwgbnVtRmluZ2Vycykge1xuXHRpZiAobnVtRmluZ2VycyA9PT0gMikge1xuXHRcdGlmICh0aGlzLmxhc3RQb2ludC5tdWx0aSkge1xuXHRcdFx0dmFyIHQgPSBuZXcgUG9pbnQoZS5wLngsIGUucC55KTtcblx0XHRcdHQuc3ViKHRoaXMubGFzdFBvaW50KTtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLm1vbGVjdWxlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBtID0gdGhpcy5tb2xlY3VsZXNbaV07XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBtLmF0b21zLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHRtLmF0b21zW2pdLmFkZCh0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRtLmNoZWNrKCk7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5zaGFwZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgc3BzID0gdGhpcy5zaGFwZXNbaV0uZ2V0UG9pbnRzKCk7XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBzcHMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdHNwc1tqXS5hZGQodCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMubGFzdFBvaW50ID0gZS5wO1xuXHRcdFx0dGhpcy5sYXN0UG9pbnQubXVsdGkgPSB0cnVlO1xuXHRcdFx0dGhpcy5yZXBhaW50KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMubGFzdFBvaW50ID0gZS5wO1xuXHRcdFx0dGhpcy5sYXN0UG9pbnQubXVsdGkgPSB0cnVlO1xuXHRcdH1cblx0fVxufTtcbl8uZ2VzdHVyZWNoYW5nZSA9IGZ1bmN0aW9uKGUpIHtcblx0aWYgKGUub3JpZ2luYWxFdmVudC5zY2FsZSAtIHRoaXMubGFzdFBpbmNoU2NhbGUgIT09IDApIHtcblx0XHR0aGlzLnNwZWNzLnNjYWxlICo9IGUub3JpZ2luYWxFdmVudC5zY2FsZSAvIHRoaXMubGFzdFBpbmNoU2NhbGU7XG5cdFx0aWYgKHRoaXMuc3BlY3Muc2NhbGUgPCAuMDEpIHtcblx0XHRcdHRoaXMuc3BlY3Muc2NhbGUgPSAuMDE7XG5cdFx0fVxuXHRcdHRoaXMubGFzdFBpbmNoU2NhbGUgPSBlLm9yaWdpbmFsRXZlbnQuc2NhbGU7XG5cdH1cblx0aWYgKHRoaXMubGFzdEdlc3R1cmVSb3RhdGUgLSBlLm9yaWdpbmFsRXZlbnQucm90YXRpb24gIT09IDApIHtcblx0XHR2YXIgcm90ID0gKHRoaXMubGFzdEdlc3R1cmVSb3RhdGUgLSBlLm9yaWdpbmFsRXZlbnQucm90YXRpb24pIC8gMTgwICogbS5QSTtcblx0XHR2YXIgY2VudGVyID0gbmV3IFBvaW50KHRoaXMud2lkdGggLyAyLCB0aGlzLmhlaWdodCAvIDIpO1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLm1vbGVjdWxlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgbW9sID0gdGhpcy5tb2xlY3VsZXNbaV07XG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gbW9sLmF0b21zLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0dmFyIGEgPSBtb2wuYXRvbXNbal07XG5cdFx0XHRcdHZhciBkaXN0ID0gY2VudGVyLmRpc3RhbmNlKGEpO1xuXHRcdFx0XHR2YXIgYW5nbGUgPSBjZW50ZXIuYW5nbGUoYSkgKyByb3Q7XG5cdFx0XHRcdGEueCA9IGNlbnRlci54ICsgZGlzdCAqIG0uY29zKGFuZ2xlKTtcblx0XHRcdFx0YS55ID0gY2VudGVyLnkgLSBkaXN0ICogbS5zaW4oYW5nbGUpO1xuXHRcdFx0fVxuXHRcdFx0bW9sLmNoZWNrKCk7XG5cdFx0fVxuXHRcdHRoaXMubGFzdEdlc3R1cmVSb3RhdGUgPSBlLm9yaWdpbmFsRXZlbnQucm90YXRpb247XG5cdH1cblx0dGhpcy5yZXBhaW50KCk7XG59O1xuXy5nZXN0dXJlZW5kID0gZnVuY3Rpb24oZSkge1xuXHR0aGlzLmxhc3RQaW5jaFNjYWxlID0gMTtcblx0dGhpcy5sYXN0R2VzdHVyZVJvdGF0ZSA9IDA7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/ChemDoodle/TransformCanvas.js\n");

/***/ }),

/***/ "./src/ChemDoodle/ViewerCanvas.js":
/*!****************************************!*\
  !*** ./src/ChemDoodle/ViewerCanvas.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ViewerCanvas; });\n/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Canvas */ \"./src/ChemDoodle/_Canvas.js\");\n\nfunction ViewerCanvas(id, width, height) {\n  if (id) {\n    this.create(id, width, height);\n  }\n}\n;\nViewerCanvas.prototype = new _Canvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvVmlld2VyQ2FudmFzLmpzPzM3NzMiXSwibmFtZXMiOlsiVmlld2VyQ2FudmFzIiwiaWQiLCJ3aWR0aCIsImhlaWdodCIsImNyZWF0ZSIsInByb3RvdHlwZSIsIl9DYW52YXMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRWUsU0FBU0EsWUFBVCxDQUFzQkMsRUFBdEIsRUFBMEJDLEtBQTFCLEVBQWlDQyxNQUFqQyxFQUF5QztBQUN2RCxNQUFJRixFQUFKLEVBQVE7QUFDUCxTQUFLRyxNQUFMLENBQVlILEVBQVosRUFBZ0JDLEtBQWhCLEVBQXVCQyxNQUF2QjtBQUNBO0FBQ0Q7QUFBQTtBQUNESCxZQUFZLENBQUNLLFNBQWIsR0FBeUIsSUFBSUMsK0NBQUosRUFBekIiLCJmaWxlIjoiLi9zcmMvQ2hlbURvb2RsZS9WaWV3ZXJDYW52YXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX0NhbnZhcyBmcm9tICcuL19DYW52YXMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBWaWV3ZXJDYW52YXMoaWQsIHdpZHRoLCBoZWlnaHQpIHtcblx0aWYgKGlkKSB7XG5cdFx0dGhpcy5jcmVhdGUoaWQsIHdpZHRoLCBoZWlnaHQpO1xuXHR9XG59O1xuVmlld2VyQ2FudmFzLnByb3RvdHlwZSA9IG5ldyBfQ2FudmFzKCk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/ChemDoodle/ViewerCanvas.js\n");

/***/ }),

/***/ "./src/ChemDoodle/_AnimatorCanvas.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/_AnimatorCanvas.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _AnimatorCanvas; });\n/* harmony import */ var _animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./animations */ \"./src/ChemDoodle/animations.js\");\n/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Canvas */ \"./src/ChemDoodle/_Canvas.js\");\n\n\nfunction _AnimatorCanvas(id, width, height) {\n  if (id) {\n    this.create(id, width, height);\n  }\n}\n;\n\nvar _ = _AnimatorCanvas.prototype = new _Canvas__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n\n_.timeout = 33;\n\n_.startAnimation = function () {\n  this.stopAnimation();\n  this.lastTime = new Date().getTime();\n  var me = this;\n\n  if (this.nextFrame) {\n    this.handle = _animations__WEBPACK_IMPORTED_MODULE_0__[\"default\"].requestInterval(function () {\n      // advance clock\n      var timeNow = new Date().getTime(); // update and repaint\n\n      me.nextFrame(timeNow - me.lastTime);\n      me.repaint();\n      me.lastTime = timeNow;\n    }, this.timeout);\n  }\n};\n\n_.stopAnimation = function () {\n  if (this.handle) {\n    _animations__WEBPACK_IMPORTED_MODULE_0__[\"default\"].clearRequestInterval(this.handle);\n    this.handle = undefined;\n  }\n};\n\n_.isRunning = function () {\n  // must compare to undefined here to return a boolean\n  return this.handle !== undefined;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvX0FuaW1hdG9yQ2FudmFzLmpzPzNhMDIiXSwibmFtZXMiOlsiX0FuaW1hdG9yQ2FudmFzIiwiaWQiLCJ3aWR0aCIsImhlaWdodCIsImNyZWF0ZSIsIl8iLCJwcm90b3R5cGUiLCJfQ2FudmFzIiwidGltZW91dCIsInN0YXJ0QW5pbWF0aW9uIiwic3RvcEFuaW1hdGlvbiIsImxhc3RUaW1lIiwiRGF0ZSIsImdldFRpbWUiLCJtZSIsIm5leHRGcmFtZSIsImhhbmRsZSIsImFuaW1hdGlvbnMiLCJyZXF1ZXN0SW50ZXJ2YWwiLCJ0aW1lTm93IiwicmVwYWludCIsImNsZWFyUmVxdWVzdEludGVydmFsIiwidW5kZWZpbmVkIiwiaXNSdW5uaW5nIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFZSxTQUFTQSxlQUFULENBQXlCQyxFQUF6QixFQUE2QkMsS0FBN0IsRUFBb0NDLE1BQXBDLEVBQTRDO0FBQ3pELE1BQUlGLEVBQUosRUFBUTtBQUNOLFNBQUtHLE1BQUwsQ0FBWUgsRUFBWixFQUFnQkMsS0FBaEIsRUFBdUJDLE1BQXZCO0FBQ0Q7QUFDRjtBQUFBOztBQUNELElBQUlFLENBQUMsR0FBR0wsZUFBZSxDQUFDTSxTQUFoQixHQUE0QixJQUFJQywrQ0FBSixFQUFwQzs7QUFDQUYsQ0FBQyxDQUFDRyxPQUFGLEdBQVksRUFBWjs7QUFDQUgsQ0FBQyxDQUFDSSxjQUFGLEdBQW1CLFlBQVc7QUFDNUIsT0FBS0MsYUFBTDtBQUNBLE9BQUtDLFFBQUwsR0FBZ0IsSUFBSUMsSUFBSixHQUFXQyxPQUFYLEVBQWhCO0FBQ0EsTUFBSUMsRUFBRSxHQUFHLElBQVQ7O0FBQ0EsTUFBSSxLQUFLQyxTQUFULEVBQW9CO0FBQ2xCLFNBQUtDLE1BQUwsR0FBY0MsbURBQVUsQ0FBQ0MsZUFBWCxDQUEyQixZQUFXO0FBQ2xEO0FBQ0EsVUFBSUMsT0FBTyxHQUFHLElBQUlQLElBQUosR0FBV0MsT0FBWCxFQUFkLENBRmtELENBR2xEOztBQUNBQyxRQUFFLENBQUNDLFNBQUgsQ0FBYUksT0FBTyxHQUFHTCxFQUFFLENBQUNILFFBQTFCO0FBQ0FHLFFBQUUsQ0FBQ00sT0FBSDtBQUNBTixRQUFFLENBQUNILFFBQUgsR0FBY1EsT0FBZDtBQUNELEtBUGEsRUFPWCxLQUFLWCxPQVBNLENBQWQ7QUFRRDtBQUNGLENBZEQ7O0FBZUFILENBQUMsQ0FBQ0ssYUFBRixHQUFrQixZQUFXO0FBQzNCLE1BQUksS0FBS00sTUFBVCxFQUFpQjtBQUNmQyx1REFBVSxDQUFDSSxvQkFBWCxDQUFnQyxLQUFLTCxNQUFyQztBQUNBLFNBQUtBLE1BQUwsR0FBY00sU0FBZDtBQUNEO0FBQ0YsQ0FMRDs7QUFNQWpCLENBQUMsQ0FBQ2tCLFNBQUYsR0FBYyxZQUFXO0FBQ3ZCO0FBQ0EsU0FBTyxLQUFLUCxNQUFMLEtBQWdCTSxTQUF2QjtBQUNELENBSEQiLCJmaWxlIjoiLi9zcmMvQ2hlbURvb2RsZS9fQW5pbWF0b3JDYW52YXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYW5pbWF0aW9ucyBmcm9tICcuL2FuaW1hdGlvbnMnO1xuaW1wb3J0IF9DYW52YXMgZnJvbSAnLi9fQ2FudmFzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX0FuaW1hdG9yQ2FudmFzKGlkLCB3aWR0aCwgaGVpZ2h0KSB7XG4gIGlmIChpZCkge1xuICAgIHRoaXMuY3JlYXRlKGlkLCB3aWR0aCwgaGVpZ2h0KTtcbiAgfVxufTtcbnZhciBfID0gX0FuaW1hdG9yQ2FudmFzLnByb3RvdHlwZSA9IG5ldyBfQ2FudmFzKCk7XG5fLnRpbWVvdXQgPSAzMztcbl8uc3RhcnRBbmltYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zdG9wQW5pbWF0aW9uKCk7XG4gIHRoaXMubGFzdFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgdmFyIG1lID0gdGhpcztcbiAgaWYgKHRoaXMubmV4dEZyYW1lKSB7XG4gICAgdGhpcy5oYW5kbGUgPSBhbmltYXRpb25zLnJlcXVlc3RJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgIC8vIGFkdmFuY2UgY2xvY2tcbiAgICAgIHZhciB0aW1lTm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAvLyB1cGRhdGUgYW5kIHJlcGFpbnRcbiAgICAgIG1lLm5leHRGcmFtZSh0aW1lTm93IC0gbWUubGFzdFRpbWUpO1xuICAgICAgbWUucmVwYWludCgpO1xuICAgICAgbWUubGFzdFRpbWUgPSB0aW1lTm93O1xuICAgIH0sIHRoaXMudGltZW91dCk7XG4gIH1cbn07XG5fLnN0b3BBbmltYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuaGFuZGxlKSB7XG4gICAgYW5pbWF0aW9ucy5jbGVhclJlcXVlc3RJbnRlcnZhbCh0aGlzLmhhbmRsZSk7XG4gICAgdGhpcy5oYW5kbGUgPSB1bmRlZmluZWQ7XG4gIH1cbn07XG5fLmlzUnVubmluZyA9IGZ1bmN0aW9uKCkge1xuICAvLyBtdXN0IGNvbXBhcmUgdG8gdW5kZWZpbmVkIGhlcmUgdG8gcmV0dXJuIGEgYm9vbGVhblxuICByZXR1cm4gdGhpcy5oYW5kbGUgIT09IHVuZGVmaW5lZDtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ChemDoodle/_AnimatorCanvas.js\n");

/***/ }),

/***/ "./src/ChemDoodle/_Canvas.js":
/*!***********************************!*\
  !*** ./src/ChemDoodle/_Canvas.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _Canvas; });\n/* harmony import */ var _featureDetection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./featureDetection */ \"./src/ChemDoodle/featureDetection.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math */ \"./src/ChemDoodle/math/index.js\");\n/* harmony import */ var _monitor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./monitor */ \"./src/ChemDoodle/monitor.js\");\n/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./structures */ \"./src/ChemDoodle/structures/index.js\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib */ \"./src/ChemDoodle/lib/index.js\");\n/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../ChemDoodle */ \"./src/ChemDoodle/index.js\");\n\n\n\n\n\n\nvar m = Math;\nvar userAgent = navigator.userAgent;\nfunction _Canvas() {}\n;\nvar _ = _Canvas.prototype;\n_.molecules = undefined;\n_.shapes = undefined;\n_.emptyMessage = undefined;\n_.image = undefined;\n\n_.repaint = function () {\n  if (this.test) {\n    return;\n  }\n\n  var canvas = document.getElementById(this.id);\n\n  if (canvas.getContext) {\n    var ctx = canvas.getContext('2d');\n\n    if (this.pixelRatio !== 1 && canvas.width === this.width) {\n      canvas.width = this.width * this.pixelRatio;\n      canvas.height = this.height * this.pixelRatio;\n      ctx.scale(this.pixelRatio, this.pixelRatio);\n    }\n\n    if (!this.image) {\n      if (this.specs.backgroundColor && this.bgCache !== canvas.style.backgroundColor) {\n        canvas.style.backgroundColor = this.specs.backgroundColor;\n        this.bgCache = canvas.style.backgroundColor;\n      } // clearRect is correct, but doesn't work as expected on Android\n      // ctx.clearRect(0, 0, this.width, this.height);\n\n\n      ctx.fillStyle = this.specs.backgroundColor;\n      ctx.fillRect(0, 0, this.width, this.height);\n    } else {\n      ctx.drawImage(this.image, 0, 0);\n    }\n\n    if (this.innerRepaint) {\n      this.innerRepaint(ctx);\n    } else {\n      if (this.molecules.length !== 0 || this.shapes.length !== 0) {\n        ctx.save();\n        ctx.translate(this.width / 2, this.height / 2);\n        ctx.rotate(this.specs.rotateAngle);\n        ctx.scale(this.specs.scale, this.specs.scale);\n        ctx.translate(-this.width / 2, -this.height / 2);\n\n        for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n          this.molecules[i].check(true);\n          this.molecules[i].draw(ctx, this.specs);\n        }\n\n        if (this.checksOnAction) {\n          // checksOnAction() must be called after checking molecules, as it depends on molecules being correct\n          // this function is only used by the uis\n          this.checksOnAction(true);\n        }\n\n        for (var i = 0, ii = this.shapes.length; i < ii; i++) {\n          this.shapes[i].draw(ctx, this.specs);\n        }\n\n        ctx.restore();\n      } else if (this.emptyMessage) {\n        ctx.fillStyle = '#737683';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.font = '18px Helvetica, Verdana, Arial, Sans-serif';\n        ctx.fillText(this.emptyMessage, this.width / 2, this.height / 2);\n      }\n    }\n\n    if (this.drawChildExtras) {\n      this.drawChildExtras(ctx, this.specs);\n    }\n  }\n};\n\n_.resize = function (w, h) {\n  var cap = Object(_lib__WEBPACK_IMPORTED_MODULE_4__[\"jQuery\"])('#' + this.id);\n  cap.attr({\n    width: w,\n    height: h\n  });\n  cap.css('width', w);\n  cap.css('height', h);\n  this.width = w;\n  this.height = h;\n\n  if (_ChemDoodle__WEBPACK_IMPORTED_MODULE_5__[\"_Canvas3D\"] && this instanceof _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__[\"_Canvas3D\"]) {\n    var wu = w;\n    var hu = h;\n\n    if (this.pixelRatio !== 1) {\n      wu *= this.pixelRatio;\n      hu *= this.pixelRatio;\n      this.gl.canvas.width = wu;\n      this.gl.canvas.height = hu;\n    }\n\n    this.gl.viewport(0, 0, wu, hu);\n    this.afterLoadContent();\n  } else if (this.molecules.length > 0) {\n    this.center();\n\n    for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n      this.molecules[i].check();\n    }\n  }\n\n  this.repaint();\n};\n\n_.setBackgroundImage = function (path) {\n  this.image = new Image(); // Create new Image object\n\n  var me = this;\n\n  this.image.onload = function () {\n    me.repaint();\n  };\n\n  this.image.src = path; // Set source path\n};\n\n_.loadMolecule = function (molecule) {\n  this.clear();\n  this.molecules.push(molecule); // do this twice to center based on atom labels, which must be first rendered to be considered in bounds\n\n  for (var i = 0; i < 2; i++) {\n    this.center();\n\n    if (!(_ChemDoodle__WEBPACK_IMPORTED_MODULE_5__[\"_Canvas3D\"] && this instanceof _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__[\"_Canvas3D\"])) {\n      molecule.check();\n    }\n\n    if (this.afterLoadContent) {\n      this.afterLoadContent();\n    }\n\n    this.repaint();\n  }\n};\n\n_.loadContent = function (mols, shapes) {\n  this.molecules = mols ? mols : [];\n  this.shapes = shapes ? shapes : []; // do this twice to center based on atom labels, which must be first rendered to be considered in bounds\n\n  for (var i = 0; i < 2; i++) {\n    this.center();\n\n    if (!(_ChemDoodle__WEBPACK_IMPORTED_MODULE_5__[\"_Canvas3D\"] && this instanceof _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__[\"_Canvas3D\"])) {\n      for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n        this.molecules[i].check();\n      }\n    }\n\n    if (this.afterLoadContent) {\n      this.afterLoadContent();\n    }\n\n    this.repaint();\n  }\n};\n\n_.addMolecule = function (molecule) {\n  this.molecules.push(molecule);\n\n  if (!(_ChemDoodle__WEBPACK_IMPORTED_MODULE_5__[\"_Canvas3D\"] && this instanceof _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__[\"_Canvas3D\"])) {\n    molecule.check();\n  }\n\n  this.repaint();\n};\n\n_.removeMolecule = function (mol) {\n  this.molecules = _lib__WEBPACK_IMPORTED_MODULE_4__[\"jQuery\"].grep(this.molecules, function (value) {\n    return value !== mol;\n  });\n  this.repaint();\n};\n\n_.getMolecule = function () {\n  return this.molecules.length > 0 ? this.molecules[0] : undefined;\n};\n\n_.getMolecules = function () {\n  return this.molecules;\n};\n\n_.addShape = function (shape) {\n  this.shapes.push(shape);\n  this.repaint();\n};\n\n_.removeShape = function (shape) {\n  this.shapes = _lib__WEBPACK_IMPORTED_MODULE_4__[\"jQuery\"].grep(this.shapes, function (value) {\n    return value !== shape;\n  });\n  this.repaint();\n};\n\n_.getShapes = function () {\n  return this.shapes;\n};\n\n_.clear = function () {\n  this.molecules = [];\n  this.shapes = [];\n  this.specs.scale = 1;\n  this.repaint();\n};\n\n_.center = function () {\n  var bounds = this.getContentBounds();\n  var center = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"]((this.width - bounds.minX - bounds.maxX) / 2, (this.height - bounds.minY - bounds.maxY) / 2);\n\n  for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n    var mol = this.molecules[i];\n\n    for (var j = 0, jj = mol.atoms.length; j < jj; j++) {\n      mol.atoms[j].add(center);\n    }\n  }\n\n  for (var i = 0, ii = this.shapes.length; i < ii; i++) {\n    var sps = this.shapes[i].getPoints();\n\n    for (var j = 0, jj = sps.length; j < jj; j++) {\n      sps[j].add(center);\n    }\n  }\n\n  this.specs.scale = 1;\n  var difX = bounds.maxX - bounds.minX;\n  var difY = bounds.maxY - bounds.minY;\n\n  if (difX > this.width - 20 || difY > this.height - 20) {\n    this.specs.scale = m.min(this.width / difX, this.height / difY) * .85;\n  }\n};\n\n_.bondExists = function (a1, a2) {\n  for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n    var mol = this.molecules[i];\n\n    for (var j = 0, jj = mol.bonds.length; j < jj; j++) {\n      var b = mol.bonds[j];\n\n      if (b.contains(a1) && b.contains(a2)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\n_.getBond = function (a1, a2) {\n  for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n    var mol = this.molecules[i];\n\n    for (var j = 0, jj = mol.bonds.length; j < jj; j++) {\n      var b = mol.bonds[j];\n\n      if (b.contains(a1) && b.contains(a2)) {\n        return b;\n      }\n    }\n  }\n\n  return undefined;\n};\n\n_.getMoleculeByAtom = function (a) {\n  for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n    var mol = this.molecules[i];\n\n    if (mol.atoms.indexOf(a) !== -1) {\n      return mol;\n    }\n  }\n\n  return undefined;\n};\n\n_.getAllAtoms = function () {\n  var as = [];\n\n  for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n    as = as.concat(this.molecules[i].atoms);\n  }\n\n  return as;\n};\n\n_.getAllBonds = function () {\n  var bs = [];\n\n  for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n    bs = bs.concat(this.molecules[i].bonds);\n  }\n\n  return bs;\n};\n\n_.getAllPoints = function () {\n  var ps = [];\n\n  for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n    ps = ps.concat(this.molecules[i].atoms);\n  }\n\n  for (var i = 0, ii = this.shapes.length; i < ii; i++) {\n    ps = ps.concat(this.shapes[i].getPoints());\n  }\n\n  return ps;\n};\n\n_.getContentBounds = function () {\n  var bounds = new _math__WEBPACK_IMPORTED_MODULE_1__[\"Bounds\"]();\n\n  for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n    bounds.expand(this.molecules[i].getBounds());\n  }\n\n  for (var i = 0, ii = this.shapes.length; i < ii; i++) {\n    bounds.expand(this.shapes[i].getBounds());\n  }\n\n  return bounds;\n};\n\n_.create = function (id, width, height) {\n  this.id = id;\n  this.width = width;\n  this.height = height;\n  this.molecules = [];\n  this.shapes = [];\n\n  if (document.getElementById(id)) {\n    var canvas = Object(_lib__WEBPACK_IMPORTED_MODULE_4__[\"jQuery\"])('#' + id);\n\n    if (!width) {\n      this.width = canvas.attr('width');\n    } else {\n      canvas.attr('width', width);\n    }\n\n    if (!height) {\n      this.height = canvas.attr('height');\n    } else {\n      canvas.attr('height', height);\n    } // If the canvas is pre-created, make sure that the class attribute\n    // is specified.\n\n\n    canvas.attr('class', 'ChemDoodleWebComponent');\n  } else if (!_featureDetection__WEBPACK_IMPORTED_MODULE_0__[\"default\"].supports_canvas_text() && userAgent.indexOf(\"MSIE\") != -1) {\n    // Install Google Chrome Frame\n    document.writeln('<div style=\"border: 1px solid black;\" width=\"' + width + '\" height=\"' + height + '\">Please install <a href=\"http://code.google.com/chrome/chromeframe/\">Google Chrome Frame</a>, then restart Internet Explorer.</div>');\n    return;\n  } else {\n    document.writeln('<canvas class=\"ChemDoodleWebComponent\" id=\"' + id + '\" width=\"' + width + '\" height=\"' + height + '\" alt=\"ChemDoodle Web Component\">This browser does not support HTML5/Canvas.</canvas>');\n  }\n\n  var jqCapsule = Object(_lib__WEBPACK_IMPORTED_MODULE_4__[\"jQuery\"])('#' + id);\n  jqCapsule.css('width', this.width);\n  jqCapsule.css('height', this.height);\n  this.pixelRatio = window.devicePixelRatio ? window.devicePixelRatio : 1;\n  this.specs = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"VisualSpecifications\"](); // setup input events\n  // make sure prehandle events are only in if statements if handled, so\n  // as not to block browser events\n\n  var me = this;\n\n  if (_featureDetection__WEBPACK_IMPORTED_MODULE_0__[\"default\"].supports_touch()) {\n    // for iPhone OS and Android devices (and other mobile browsers that\n    // support mobile events)\n    jqCapsule.bind('touchstart', function (e) {\n      var time = new Date().getTime();\n\n      if (!_featureDetection__WEBPACK_IMPORTED_MODULE_0__[\"default\"].supports_gesture() && e.originalEvent.touches.length === 2) {\n        // on some platforms, like Android, there is no gesture\n        // support, so we have to implement it\n        var ts = e.originalEvent.touches;\n        var p1 = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](ts[0].pageX, ts[0].pageY);\n        var p2 = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](ts[1].pageX, ts[1].pageY);\n        me.implementedGestureDist = p1.distance(p2);\n        me.implementedGestureAngle = p1.angle(p2);\n\n        if (me.gesturestart) {\n          me.prehandleEvent(e);\n          me.gesturestart(e);\n        }\n      }\n\n      if (me.lastTouch && e.originalEvent.touches.length === 1 && time - me.lastTouch < 500) {\n        if (me.dbltap) {\n          me.prehandleEvent(e);\n          me.dbltap(e);\n        } else if (me.dblclick) {\n          me.prehandleEvent(e);\n          me.dblclick(e);\n        } else if (me.touchstart) {\n          me.prehandleEvent(e);\n          me.touchstart(e);\n        } else if (me.mousedown) {\n          me.prehandleEvent(e);\n          me.mousedown(e);\n        }\n      } else if (me.touchstart) {\n        me.prehandleEvent(e);\n        me.touchstart(e);\n\n        if (this.hold) {\n          clearTimeout(this.hold);\n        }\n\n        if (this.touchhold) {\n          this.hold = setTimeout(function () {\n            me.touchhold(e);\n          }, 1000);\n        }\n      } else if (me.mousedown) {\n        me.prehandleEvent(e);\n        me.mousedown(e);\n      }\n\n      me.lastTouch = time;\n    });\n    jqCapsule.bind('touchmove', function (e) {\n      if (this.hold) {\n        clearTimeout(this.hold);\n        this.hold = undefined;\n      }\n\n      if (!_featureDetection__WEBPACK_IMPORTED_MODULE_0__[\"default\"].supports_gesture() && e.originalEvent.touches.length === 2) {\n        // on some platforms, like Android, there is no gesture\n        // support, so we have to implement it\n        if (me.gesturechange) {\n          var ts = e.originalEvent.touches;\n          var p1 = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](ts[0].pageX, ts[0].pageY);\n          var p2 = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](ts[1].pageX, ts[1].pageY);\n          var newDist = p1.distance(p2);\n          var newAngle = p1.angle(p2);\n          e.originalEvent.scale = newDist / me.implementedGestureDist;\n          e.originalEvent.rotation = 180 * (me.implementedGestureAngle - newAngle) / m.PI;\n          me.prehandleEvent(e);\n          me.gesturechange(e);\n        }\n      }\n\n      if (e.originalEvent.touches.length > 1 && me.multitouchmove) {\n        var numFingers = e.originalEvent.touches.length;\n        me.prehandleEvent(e);\n        var center = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](-e.offset.left * numFingers, -e.offset.top * numFingers);\n\n        for (var i = 0; i < numFingers; i++) {\n          center.x += e.originalEvent.changedTouches[i].pageX;\n          center.y += e.originalEvent.changedTouches[i].pageY;\n        }\n\n        center.x /= numFingers;\n        center.y /= numFingers;\n        e.p = center;\n        me.multitouchmove(e, numFingers);\n      } else if (me.touchmove) {\n        me.prehandleEvent(e);\n        me.touchmove(e);\n      } else if (me.drag) {\n        me.prehandleEvent(e);\n        me.drag(e);\n      }\n    });\n    jqCapsule.bind('touchend', function (e) {\n      if (this.hold) {\n        clearTimeout(this.hold);\n        this.hold = undefined;\n      }\n\n      if (!_featureDetection__WEBPACK_IMPORTED_MODULE_0__[\"default\"].supports_gesture() && me.implementedGestureDist) {\n        // on some platforms, like Android, there is no gesture\n        // support, so we have to implement it\n        me.implementedGestureDist = undefined;\n        me.implementedGestureAngle = undefined;\n\n        if (me.gestureend) {\n          me.prehandleEvent(e);\n          me.gestureend(e);\n        }\n      }\n\n      if (me.touchend) {\n        me.prehandleEvent(e);\n        me.touchend(e);\n      } else if (me.mouseup) {\n        me.prehandleEvent(e);\n        me.mouseup(e);\n      }\n\n      if (new Date().getTime() - me.lastTouch < 250) {\n        if (me.tap) {\n          me.prehandleEvent(e);\n          me.tap(e);\n        } else if (me.click) {\n          me.prehandleEvent(e);\n          me.click(e);\n        }\n      }\n    });\n    jqCapsule.bind('gesturestart', function (e) {\n      if (me.gesturestart) {\n        me.prehandleEvent(e);\n        me.gesturestart(e);\n      }\n    });\n    jqCapsule.bind('gesturechange', function (e) {\n      if (me.gesturechange) {\n        me.prehandleEvent(e);\n        me.gesturechange(e);\n      }\n    });\n    jqCapsule.bind('gestureend', function (e) {\n      if (me.gestureend) {\n        me.prehandleEvent(e);\n        me.gestureend(e);\n      }\n    });\n  } else {\n    // normal events\n    // some mobile browsers will simulate mouse events, so do not set\n    // these\n    // events if mobile, or it will interfere with the handling of touch\n    // events\n    jqCapsule.click(function (e) {\n      switch (e.which) {\n        case 1:\n          // left mouse button pressed\n          if (me.click) {\n            me.prehandleEvent(e);\n            me.click(e);\n          }\n\n          break;\n\n        case 2:\n          // middle mouse button pressed\n          if (me.middleclick) {\n            me.prehandleEvent(e);\n            me.middleclick(e);\n          }\n\n          break;\n\n        case 3:\n          // right mouse button pressed\n          if (me.rightclick) {\n            me.prehandleEvent(e);\n            me.rightclick(e);\n          }\n\n          break;\n      }\n    });\n    jqCapsule.dblclick(function (e) {\n      if (me.dblclick) {\n        me.prehandleEvent(e);\n        me.dblclick(e);\n      }\n    });\n    jqCapsule.mousedown(function (e) {\n      switch (e.which) {\n        case 1:\n          // left mouse button pressed\n          _monitor__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CANVAS_DRAGGING = me;\n\n          if (me.mousedown) {\n            me.prehandleEvent(e);\n            me.mousedown(e);\n          }\n\n          break;\n\n        case 2:\n          // middle mouse button pressed\n          if (me.middlemousedown) {\n            me.prehandleEvent(e);\n            me.middlemousedown(e);\n          }\n\n          break;\n\n        case 3:\n          // right mouse button pressed\n          if (me.rightmousedown) {\n            me.prehandleEvent(e);\n            me.rightmousedown(e);\n          }\n\n          break;\n      }\n    });\n    jqCapsule.mousemove(function (e) {\n      if (!_monitor__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CANVAS_DRAGGING && me.mousemove) {\n        me.prehandleEvent(e);\n        me.mousemove(e);\n      }\n    });\n    jqCapsule.mouseout(function (e) {\n      _monitor__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CANVAS_OVER = undefined;\n\n      if (me.mouseout) {\n        me.prehandleEvent(e);\n        me.mouseout(e);\n      }\n    });\n    jqCapsule.mouseover(function (e) {\n      _monitor__WEBPACK_IMPORTED_MODULE_2__[\"default\"].CANVAS_OVER = me;\n\n      if (me.mouseover) {\n        me.prehandleEvent(e);\n        me.mouseover(e);\n      }\n    });\n    jqCapsule.mouseup(function (e) {\n      switch (e.which) {\n        case 1:\n          // left mouse button pressed\n          if (me.mouseup) {\n            me.prehandleEvent(e);\n            me.mouseup(e);\n          }\n\n          break;\n\n        case 2:\n          // middle mouse button pressed\n          if (me.middlemouseup) {\n            me.prehandleEvent(e);\n            me.middlemouseup(e);\n          }\n\n          break;\n\n        case 3:\n          // right mouse button pressed\n          if (me.rightmouseup) {\n            me.prehandleEvent(e);\n            me.rightmouseup(e);\n          }\n\n          break;\n      }\n    });\n    jqCapsule.mousewheel(function (e, delta) {\n      if (me.mousewheel) {\n        me.prehandleEvent(e);\n        me.mousewheel(e, delta);\n      }\n    });\n  }\n\n  if (this.subCreate) {\n    this.subCreate();\n  }\n};\n\n_.prehandleEvent = function (e) {\n  if (e.originalEvent.changedTouches) {\n    e.pageX = e.originalEvent.changedTouches[0].pageX;\n    e.pageY = e.originalEvent.changedTouches[0].pageY;\n  }\n\n  if (!this.doEventDefault) {\n    e.preventDefault();\n    e.returnValue = false;\n  }\n\n  e.offset = Object(_lib__WEBPACK_IMPORTED_MODULE_4__[\"jQuery\"])('#' + this.id).offset();\n  e.p = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](e.pageX - e.offset.left, e.pageY - e.offset.top);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/_Canvas.js\n");

/***/ }),

/***/ "./src/ChemDoodle/_Canvas3D.js":
/*!*************************************!*\
  !*** ./src/ChemDoodle/_Canvas3D.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _Canvas3D; });\n/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ChemDoodle */ \"./src/ChemDoodle/index.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./math */ \"./src/ChemDoodle/math/index.js\");\n/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extensions */ \"./src/ChemDoodle/extensions/index.js\");\n/* harmony import */ var _monitor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./monitor */ \"./src/ChemDoodle/monitor.js\");\n/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./structures */ \"./src/ChemDoodle/structures/index.js\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib */ \"./src/ChemDoodle/lib/index.js\");\n/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./_Canvas */ \"./src/ChemDoodle/_Canvas.js\");\n\n\n\n\n\n\n\n\nvar m = Math;\nfunction _Canvas3D(id, width, height) {\n  if (id) {\n    this.create(id, width, height);\n  }\n}\n;\n\nvar _ = _Canvas3D.prototype = new _Canvas__WEBPACK_IMPORTED_MODULE_6__[\"default\"]();\n\nvar _super = _Canvas__WEBPACK_IMPORTED_MODULE_6__[\"default\"].prototype;\n_.rotationMatrix = undefined;\n_.lastPoint = undefined;\n_.emptyMessage = 'WebGL is Unavailable!';\n_.lastPinchScale = 1;\n_.lastGestureRotate = 0;\n\n_.afterLoadContent = function () {\n  var bounds = new _math__WEBPACK_IMPORTED_MODULE_1__[\"Bounds\"]();\n\n  for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n    bounds.expand(this.molecules[i].getBounds3D());\n  } // build fog parameter\n\n\n  var maxDimension3D = _lib__WEBPACK_IMPORTED_MODULE_5__[\"vec3\"].dist([bounds.maxX, bounds.maxY, bounds.maxZ], [bounds.minX, bounds.minY, bounds.minZ]) / 2 + 1.5;\n\n  if (maxDimension3D === Infinity) {\n    // there is no content\n    maxDimension3D = 10;\n  }\n\n  this.maxDimension = m.max(bounds.maxX - bounds.minX, bounds.maxY - bounds.minY);\n  var fov = m.min(179.9, m.max(this.specs.projectionPerspectiveVerticalFieldOfView_3D, 0.1));\n  var theta = fov / 360 * m.PI;\n  var tanTheta = m.tan(theta) / 0.8;\n  var top = maxDimension3D;\n  var focalLength = top / tanTheta;\n  var near = focalLength - top;\n  var far = focalLength + top;\n  var aspect = this.width / this.height;\n  this.camera.fieldOfView = fov;\n  this.camera.near = near;\n  this.camera.far = far;\n  this.camera.aspect = aspect;\n  _lib__WEBPACK_IMPORTED_MODULE_5__[\"mat4\"].translate(_lib__WEBPACK_IMPORTED_MODULE_5__[\"mat4\"].identity(this.camera.viewMatrix), [0, 0, -focalLength]);\n  var lightFocalLength = top / m.tan(theta);\n  this.lighting.camera.fieldOfView = fov;\n  this.lighting.camera.near = lightFocalLength - top;\n  this.lighting.camera.far = lightFocalLength + top;\n  this.lighting.updateView();\n  this.setupScene();\n};\n\n_.renderDepthMap = function () {\n  if (this.specs.shadow_3D && _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].DepthShader) {\n    var cullFaceEnabled = this.gl.isEnabled(this.gl.CULL_FACE);\n\n    if (!cullFaceEnabled) {\n      this.gl.enable(this.gl.CULL_FACE);\n    }\n\n    this.depthShader.useShaderProgram(this.gl); // current clear color\n\n    var cs = this.gl.getParameter(this.gl.COLOR_CLEAR_VALUE);\n    this.gl.clearColor(1.0, 1.0, 1.0, 0.0);\n    this.lightDepthMapFramebuffer.bind(this.gl, this.shadowTextureSize, this.shadowTextureSize);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT); // use light projection matrix to draw the molecule\n\n    this.depthShader.setProjectionMatrix(this.gl, this.lighting.camera.projectionMatrix);\n    this.depthShader.enableAttribsArray(this.gl);\n\n    for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n      this.molecules[i].render(this.gl, this.specs);\n    }\n\n    this.gl.flush();\n    this.depthShader.disableAttribsArray(this.gl);\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null); // set back the clear color\n\n    this.gl.clearColor(cs[0], cs[1], cs[2], cs[3]);\n\n    if (!cullFaceEnabled) {\n      this.gl.disable(this.gl.CULL_FACE);\n    }\n  }\n}; // draw anything those not molecules, example compass, shapes, text etc.\n\n\n_.renderExtras = function () {\n  this.phongShader.useShaderProgram(this.gl);\n  this.phongShader.enableAttribsArray(this.gl);\n  var transparentShapes = [];\n\n  for (var i = 0, ii = this.shapes.length; i < ii; i++) {\n    var s = this.shapes[i];\n\n    if (s instanceof _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"]._Surface && (!s.specs && this.specs.surfaces_alpha !== 1 || s.specs && s.specs.surfaces_alpha !== 1)) {\n      transparentShapes.push(s);\n    } else {\n      s.render(this.gl, this.specs);\n    }\n  } // transparent shapes\n\n\n  if (transparentShapes.length !== 0) {\n    //this.gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n    this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n    this.gl.enable(this.gl.BLEND);\n    this.gl.depthMask(false);\n\n    for (var i = 0, ii = transparentShapes.length; i < ii; i++) {\n      var s = transparentShapes[i];\n      s.render(this.gl, this.specs);\n    }\n\n    this.gl.depthMask(true);\n    this.gl.disable(this.gl.BLEND);\n    this.gl.blendFuncSeparate(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n  }\n\n  this.phongShader.setShadow(this.gl, false);\n  this.phongShader.setFogMode(this.gl, 0);\n  this.phongShader.setFlatColor(this.gl, false); // compass use its own model view and projection matrix\n  // so it need to use back the default matrix for other\n  // rendering process (ex. render arbitrary text).\n\n  if (this.specs.compass_display) {\n    this.phongShader.setLightDirection(this.gl, [0, 0, -1]);\n    this.compass.render(this.gl, this.specs);\n  }\n\n  this.phongShader.disableAttribsArray(this.gl);\n  this.gl.flush(); // enable blend and depth mask set to false\n\n  this.gl.enable(this.gl.BLEND);\n  this.gl.depthMask(false);\n  this.labelShader.useShaderProgram(this.gl); // use back the default model view matrix\n\n  this.labelShader.setMatrixUniforms(this.gl, this.gl.modelViewMatrix); // use back the default projection matrix\n\n  this.labelShader.setProjectionMatrix(this.gl, this.camera.projectionMatrix);\n  this.labelShader.setDimension(this.gl, this.gl.canvas.clientWidth, this.gl.canvas.clientHeight); // enable vertex for draw text\n\n  this.labelShader.enableAttribsArray(this.gl); // draw label molecule\n\n  if (this.specs.atoms_displayLabels_3D) {\n    this.label3D.render(this.gl, this.specs, this.getMolecules());\n  } // draw measurement text\n\n\n  if (this.specs.measurement_displayText_3D) {\n    for (var i = 0, ii = this.shapes.length; i < ii; i++) {\n      var s = this.shapes[i];\n\n      if (s.renderText) {\n        s.renderText(this.gl, this.specs);\n      }\n    }\n  } // draw compass X Y Z text\n\n\n  if (this.specs.compass_display && this.specs.compass_displayText_3D) {\n    this.compass.renderAxis(this.gl);\n  } // disable vertex for draw text\n\n\n  this.labelShader.disableAttribsArray(this.gl); // disable blend and depth mask set to true\n\n  this.gl.disable(this.gl.BLEND);\n  this.gl.depthMask(true);\n  this.gl.flush();\n\n  if (this.drawChildExtras) {\n    this.drawChildExtras(this.gl);\n  }\n\n  this.gl.flush();\n}; // molecule colors rendeing will both use on forward and deferred rendering\n\n\n_.renderColor = function () {\n  this.phongShader.useShaderProgram(this.gl);\n  this.gl.uniform1i(this.phongShader.shadowDepthSampleUniform, 0);\n  this.gl.activeTexture(this.gl.TEXTURE0);\n  this.gl.bindTexture(this.gl.TEXTURE_2D, this.lightDepthMapTexture.texture);\n  this.phongShader.setProjectionMatrix(this.gl, this.camera.projectionMatrix);\n  this.phongShader.setShadow(this.gl, this.specs.shadow_3D);\n  this.phongShader.setFlatColor(this.gl, this.specs.flat_color_3D);\n  this.phongShader.setGammaCorrection(this.gl, this.specs.gammaCorrection_3D);\n  this.phongShader.setShadowTextureSize(this.gl, this.shadowTextureSize, this.shadowTextureSize);\n  this.phongShader.setShadowIntensity(this.gl, this.specs.shadow_intensity_3D);\n  this.phongShader.setFogMode(this.gl, this.specs.fog_mode_3D);\n  this.phongShader.setFogColor(this.gl, this.fogging.colorRGB);\n  this.phongShader.setFogStart(this.gl, this.fogging.fogStart);\n  this.phongShader.setFogEnd(this.gl, this.fogging.fogEnd);\n  this.phongShader.setFogDensity(this.gl, this.fogging.density);\n  this.phongShader.setLightProjectionMatrix(this.gl, this.lighting.camera.projectionMatrix);\n  this.phongShader.setLightDiffuseColor(this.gl, this.lighting.diffuseRGB);\n  this.phongShader.setLightSpecularColor(this.gl, this.lighting.specularRGB);\n  this.phongShader.setLightDirection(this.gl, this.lighting.direction);\n  this.phongShader.enableAttribsArray(this.gl);\n\n  for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n    this.molecules[i].render(this.gl, this.specs);\n  }\n\n  this.phongShader.disableAttribsArray(this.gl);\n  this.gl.flush();\n};\n\n_.renderPosition = function () {\n  this.positionShader.useShaderProgram(this.gl);\n  this.positionShader.setProjectionMatrix(this.gl, this.camera.projectionMatrix);\n  this.positionShader.enableAttribsArray(this.gl);\n\n  for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n    this.molecules[i].render(this.gl, this.specs);\n  }\n\n  this.positionShader.disableAttribsArray(this.gl);\n  this.gl.flush();\n};\n\n_.renderNormal = function () {\n  this.normalShader.useShaderProgram(this.gl);\n  this.normalShader.setProjectionMatrix(this.gl, this.camera.projectionMatrix);\n  this.normalShader.enableAttribsArray(this.gl);\n\n  for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n    this.molecules[i].render(this.gl, this.specs);\n  }\n\n  this.normalShader.disableAttribsArray(this.gl);\n  this.gl.flush();\n};\n\n_.renderSSAO = function () {\n  this.ssaoShader.useShaderProgram(this.gl);\n  this.ssaoShader.setProjectionMatrix(this.gl, this.camera.projectionMatrix);\n  this.ssaoShader.setSampleKernel(this.gl, this.ssao.sampleKernel);\n  this.ssaoShader.setKernelRadius(this.gl, this.specs.ssao_kernel_radius);\n  this.ssaoShader.setPower(this.gl, this.specs.ssao_power);\n  this.ssaoShader.setGbufferTextureSize(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n  this.gl.uniform1i(this.ssaoShader.positionSampleUniform, 0);\n  this.gl.uniform1i(this.ssaoShader.normalSampleUniform, 1);\n  this.gl.uniform1i(this.ssaoShader.noiseSampleUniform, 2);\n  this.gl.activeTexture(this.gl.TEXTURE0);\n  this.gl.bindTexture(this.gl.TEXTURE_2D, this.positionTexture.texture);\n  this.gl.activeTexture(this.gl.TEXTURE1);\n  this.gl.bindTexture(this.gl.TEXTURE_2D, this.normalTexture.texture);\n  this.gl.activeTexture(this.gl.TEXTURE2);\n  this.gl.bindTexture(this.gl.TEXTURE_2D, this.ssao.noiseTexture);\n  this.gl.activeTexture(this.gl.TEXTURE0);\n  this.ssaoShader.enableAttribsArray(this.gl);\n  this.gl.quadBuffer.bindBuffers(this.gl);\n  this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, this.gl.quadBuffer.vertexPositionBuffer.numItems);\n  this.ssaoShader.disableAttribsArray(this.gl);\n  this.gl.flush(); // render ssao blur shader\n\n  this.ssaoFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n  this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n  this.ssaoBlurShader.useShaderProgram(this.gl);\n  this.ssaoBlurShader.setGbufferTextureSize(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n  this.gl.uniform1i(this.ssaoBlurShader.aoSampleUniform, 0);\n  this.gl.uniform1i(this.ssaoBlurShader.depthSampleUniform, 1);\n  this.gl.activeTexture(this.gl.TEXTURE0);\n  this.gl.bindTexture(this.gl.TEXTURE_2D, this.imageTexture.texture);\n  this.gl.activeTexture(this.gl.TEXTURE1);\n  this.gl.bindTexture(this.gl.TEXTURE_2D, this.depthTexture.texture);\n  this.gl.activeTexture(this.gl.TEXTURE0);\n  this.ssaoBlurShader.enableAttribsArray(this.gl);\n  this.gl.quadBuffer.bindBuffers(this.gl);\n  this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, this.gl.quadBuffer.vertexPositionBuffer.numItems);\n  this.ssaoBlurShader.disableAttribsArray(this.gl);\n  this.gl.activeTexture(this.gl.TEXTURE0);\n  this.gl.flush();\n};\n\n_.renderOutline = function () {\n  this.outlineShader.useShaderProgram(this.gl);\n  this.outlineShader.setGbufferTextureSize(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n  this.outlineShader.setNormalThreshold(this.gl, this.specs.outline_normal_threshold);\n  this.outlineShader.setDepthThreshold(this.gl, this.specs.outline_depth_threshold);\n  this.outlineShader.setThickness(this.gl, this.specs.outline_thickness);\n  this.gl.uniform1i(this.outlineShader.normalSampleUniform, 0);\n  this.gl.uniform1i(this.outlineShader.depthSampleUniform, 1);\n  this.gl.activeTexture(this.gl.TEXTURE0);\n  this.gl.bindTexture(this.gl.TEXTURE_2D, this.normalTexture.texture);\n  this.gl.activeTexture(this.gl.TEXTURE1);\n  this.gl.bindTexture(this.gl.TEXTURE_2D, this.depthTexture.texture);\n  this.gl.activeTexture(this.gl.TEXTURE0);\n  this.outlineShader.enableAttribsArray(this.gl);\n  this.gl.quadBuffer.bindBuffers(this.gl);\n  this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, this.gl.quadBuffer.vertexPositionBuffer.numItems);\n  this.outlineShader.disableAttribsArray(this.gl);\n  this.gl.flush();\n};\n\n_.deferredRender = function () {\n  // get backdground color\n  var bgColor = this.gl.getParameter(this.gl.COLOR_CLEAR_VALUE); // set background to black\n\n  this.gl.clearColor(0.0, 0.0, 0.0, 0.0); // render color\n\n  this.colorFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n  this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n  this.renderColor(); // render position\n\n  this.positionFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n  this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n  this.renderPosition(); // render normals\n\n  this.normalFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n  this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n  this.renderNormal(); // render ssao\n\n  if (this.specs.ssao_3D && _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].SSAOShader) {\n    // render ssao shading\n    this.quadFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n    this.renderSSAO();\n  } else {\n    this.ssaoFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n    this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n  } // render outline\n\n\n  this.outlineFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n  this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n  this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n  if (this.specs.outline_3D) {\n    this.renderOutline();\n  } // set back background color\n\n\n  this.gl.clearColor(bgColor[0], bgColor[1], bgColor[2], bgColor[3]); // composite render\n\n  this.quadFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n  this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n  this.lightingShader.useShaderProgram(this.gl);\n  this.gl.uniform1i(this.lightingShader.positionSampleUniform, 0);\n  this.gl.uniform1i(this.lightingShader.colorSampleUniform, 1);\n  this.gl.uniform1i(this.lightingShader.ssaoSampleUniform, 2);\n  this.gl.uniform1i(this.lightingShader.outlineSampleUniform, 3);\n  this.gl.activeTexture(this.gl.TEXTURE0);\n  this.gl.bindTexture(this.gl.TEXTURE_2D, this.positionTexture.texture);\n  this.gl.activeTexture(this.gl.TEXTURE1);\n  this.gl.bindTexture(this.gl.TEXTURE_2D, this.colorTexture.texture);\n  this.gl.activeTexture(this.gl.TEXTURE2);\n  this.gl.bindTexture(this.gl.TEXTURE_2D, this.ssaoTexture.texture);\n  this.gl.activeTexture(this.gl.TEXTURE3);\n  this.gl.bindTexture(this.gl.TEXTURE_2D, this.outlineTexture.texture);\n  this.gl.activeTexture(this.gl.TEXTURE0);\n  this.lightingShader.enableAttribsArray(this.gl);\n  this.gl.quadBuffer.bindBuffers(this.gl);\n  this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, this.gl.quadBuffer.vertexPositionBuffer.numItems);\n  this.lightingShader.disableAttribsArray(this.gl);\n  this.gl.flush(); // final render\n\n  this.fxaaFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n  this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT); // setup viewport\n\n  this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n  this.gl.bindTexture(this.gl.TEXTURE_2D, this.imageTexture.texture);\n  this.fxaaShader.useShaderProgram(this.gl);\n  this.fxaaShader.setBuffersize(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n  this.fxaaShader.setAntialias(this.gl, this.specs.antialias_3D);\n  this.fxaaShader.setEdgeThreshold(this.gl, this.specs.fxaa_edgeThreshold);\n  this.fxaaShader.setEdgeThresholdMin(this.gl, this.specs.fxaa_edgeThresholdMin);\n  this.fxaaShader.setSearchSteps(this.gl, this.specs.fxaa_searchSteps);\n  this.fxaaShader.setSearchThreshold(this.gl, this.specs.fxaa_searchThreshold);\n  this.fxaaShader.setSubpixCap(this.gl, this.specs.fxaa_subpixCap);\n  this.fxaaShader.setSubpixTrim(this.gl, this.specs.fxaa_subpixTrim);\n  this.fxaaShader.enableAttribsArray(this.gl);\n  this.gl.quadBuffer.bindBuffers(this.gl);\n  this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, this.gl.quadBuffer.vertexPositionBuffer.numItems);\n  this.fxaaShader.disableAttribsArray(this.gl);\n  this.gl.flush(); // final render\n\n  this.finalFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n  this.renderExtras(); // set back background color\n\n  this.gl.clearColor(bgColor[0], bgColor[1], bgColor[2], bgColor[3]); // last render\n\n  this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n  this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT); // setup viewport\n\n  this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n  this.gl.bindTexture(this.gl.TEXTURE_2D, this.fxaaTexture.texture);\n  this.quadShader.useShaderProgram(this.gl);\n  this.quadShader.enableAttribsArray(this.gl);\n  this.gl.quadBuffer.bindBuffers(this.gl);\n  this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, this.gl.quadBuffer.vertexPositionBuffer.numItems);\n  this.quadShader.disableAttribsArray(this.gl);\n  this.gl.flush();\n};\n\n_.forwardRender = function () {\n  // last render\n  this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\n  this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT); // setup viewport\n\n  this.gl.viewport(0, 0, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n  this.renderColor();\n  this.renderExtras();\n};\n\n_.repaint = function () {\n  if (this.gl) {\n    // set up the model view matrix to the specified transformations\n    this.gl.lightViewMatrix = _lib__WEBPACK_IMPORTED_MODULE_5__[\"mat4\"].multiply(this.lighting.camera.viewMatrix, this.rotationMatrix, []);\n    this.gl.rotationMatrix = this.rotationMatrix;\n    this.gl.modelViewMatrix = this.gl.lightViewMatrix;\n    this.renderDepthMap();\n    this.gl.modelViewMatrix = _lib__WEBPACK_IMPORTED_MODULE_5__[\"mat4\"].multiply(this.camera.viewMatrix, this.rotationMatrix, []);\n\n    if (this.isSupportDeferred() && (this.specs.ssao_3D || this.specs.outline_3D)) {\n      this.deferredRender();\n    } else {\n      this.forwardRender();\n    }\n  }\n};\n\n_.pick = function (x, y, includeAtoms, includeBonds) {\n  if (this.gl) {\n    // draw with pick framebuffer\n    var xu = x;\n    var yu = this.height - y;\n\n    if (this.pixelRatio !== 1) {\n      xu *= this.pixelRatio;\n      yu *= this.pixelRatio;\n    } // set up the model view matrix to the specified transformations\n\n\n    _lib__WEBPACK_IMPORTED_MODULE_5__[\"mat4\"].multiply(this.camera.viewMatrix, this.rotationMatrix, this.gl.modelViewMatrix);\n    this.gl.rotationMatrix = this.rotationMatrix;\n    this.pickShader.useShaderProgram(this.gl); // current clear color\n\n    var cs = this.gl.getParameter(this.gl.COLOR_CLEAR_VALUE);\n    this.gl.clearColor(1.0, 1.0, 1.0, 0.0);\n    this.pickerFramebuffer.bind(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT); // use default projection matrix to draw the molecule\n\n    this.pickShader.setProjectionMatrix(this.gl, this.camera.projectionMatrix); // not need the normal for diffuse light, we need flat color\n\n    this.pickShader.enableAttribsArray(this.gl);\n    var objects = [];\n\n    for (var i = 0, ii = this.molecules.length; i < ii; i++) {\n      this.molecules[i].renderPickFrame(this.gl, this.specs, objects, includeAtoms, includeBonds);\n    }\n\n    this.pickShader.disableAttribsArray(this.gl);\n    this.gl.flush();\n    var rgba = new Uint8Array(4);\n    this.gl.readPixels(xu - 2, yu + 2, 1, 1, this.gl.RGBA, this.gl.UNSIGNED_BYTE, rgba);\n    var object = undefined;\n    var idxMolecule = rgba[3];\n\n    if (idxMolecule > 0) {\n      var idxAtom = rgba[2] | rgba[1] << 8 | rgba[0] << 16;\n      object = objects[idxAtom];\n    }\n\n    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null); // set back the clear color\n\n    this.gl.clearColor(cs[0], cs[1], cs[2], cs[3]);\n    return object;\n  }\n\n  return undefined;\n};\n\n_.center = function () {\n  var p = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"Atom\"]();\n\n  for (var k = 0, kk = this.molecules.length; k < kk; k++) {\n    var m = this.molecules[k];\n    p.add3D(m.getCenter3D());\n  }\n\n  p.x /= this.molecules.length;\n  p.y /= this.molecules.length;\n\n  for (var k = 0, kk = this.molecules.length; k < kk; k++) {\n    var m = this.molecules[k];\n\n    for (var i = 0, ii = m.atoms.length; i < ii; i++) {\n      m.atoms[i].sub3D(p);\n    }\n\n    if (m.chains && m.fromJSON) {\n      for (var i = 0, ii = m.chains.length; i < ii; i++) {\n        var chain = m.chains[i];\n\n        for (var j = 0, jj = chain.length; j < jj; j++) {\n          var residue = chain[j];\n          residue.cp1.sub3D(p);\n          residue.cp2.sub3D(p);\n\n          if (residue.cp3) {\n            residue.cp3.sub3D(p);\n            residue.cp4.sub3D(p);\n            residue.cp5.sub3D(p);\n          }\n        }\n      }\n    }\n  }\n};\n\n_.isSupportDeferred = function () {\n  return this.gl.textureFloatExt && this.gl.depthTextureExt;\n};\n\n_.create = function (id, width, height) {\n  _super.create.call(this, id, width, height); // setup gl object\n\n\n  try {\n    var canvas = document.getElementById(this.id);\n    this.gl = canvas.getContext('webgl');\n\n    if (!this.gl) {\n      this.gl = canvas.getContext('experimental-webgl');\n    }\n  } catch (e) {}\n\n  if (this.gl) {\n    if (this.pixelRatio !== 1 && this.gl.canvas.width === this.width) {\n      this.gl.canvas.style.width = this.width + 'px';\n      this.gl.canvas.style.height = this.height + 'px';\n      this.gl.canvas.width = this.width * this.pixelRatio;\n      this.gl.canvas.height = this.height * this.pixelRatio;\n    }\n\n    this.gl.enable(this.gl.DEPTH_TEST);\n    this.gl.depthFunc(this.gl.LEQUAL);\n    this.gl.blendFuncSeparate(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA, this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n    this.gl.clearDepth(1.0); // size of texture for render depth map from light view\n\n    this.shadowTextureSize = 1024; // setup matrices\n\n    this.rotationMatrix = _lib__WEBPACK_IMPORTED_MODULE_5__[\"mat4\"].identity([]); // set up camera\n\n    this.camera = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Camera();\n    this.label3D = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Label();\n    this.lighting = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Light(this.specs.lightDiffuseColor_3D, this.specs.lightSpecularColor_3D, this.specs.lightDirection_3D);\n    this.fogging = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Fog(this.specs.fog_color_3D || this.specs.backgroundColor, this.specs.fog_start_3D, this.specs.fog_end_3D, this.specs.fog_density_3D); // uncomment this line to see shadow without depth texture extension\n\n    this.gl.depthTextureExt = this.gl.getExtension('WEBGL_depth_texture') || this.gl.getExtension('WEBKIT_WEBGL_depth_texture') || this.gl.getExtension('MOZ_WEBGL_depth_texture');\n    this.gl.textureFloatExt = this.gl.getExtension('OES_texture_float') || this.gl.getExtension('WEBKIT_OES_texture_float') || this.gl.getExtension('MOZ_OES_texture_float'); // this.gl.shaderTextureLodExt = this.gl.getExtension('EXT_shader_texture_lod') || this.gl.getExtension('WEBKIT_EXT_shader_texture_lod') || this.gl.getExtension('MOZ_EXT_shader_texture_lod');\n    // this.gl.drawBuffersExt = this.gl.getExtension('WEBGL_draw_buffers');\n\n    this.ssao = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].SSAO(); // set picker color attachment\n\n    this.pickerColorTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Texture();\n    this.pickerColorTexture.init(this.gl, this.gl.UNSIGNED_BYTE, this.gl.RGBA, this.gl.RGBA); // set picker depth attachment \n\n    this.pickerDepthRenderbuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Renderbuffer();\n    this.pickerDepthRenderbuffer.init(this.gl, this.gl.DEPTH_COMPONENT16); // set picker framebuffer\n\n    this.pickerFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Framebuffer();\n    this.pickerFramebuffer.init(this.gl);\n    this.pickerFramebuffer.setColorTexture(this.gl, this.pickerColorTexture.texture);\n    this.pickerFramebuffer.setDepthRenderbuffer(this.gl, this.pickerDepthRenderbuffer.renderbuffer); // depth map for shadowing\n\n    this.lightDepthMapTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Texture();\n    this.lightDepthMapRenderbuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Renderbuffer();\n    this.lightDepthMapFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Framebuffer();\n    this.lightDepthMapFramebuffer.init(this.gl);\n\n    if (this.gl.depthTextureExt) {\n      this.lightDepthMapTexture.init(this.gl, this.gl.UNSIGNED_SHORT, this.gl.DEPTH_COMPONENT);\n      this.lightDepthMapRenderbuffer.init(this.gl, this.gl.RGBA4);\n      this.lightDepthMapFramebuffer.setColorRenderbuffer(this.gl, this.lightDepthMapRenderbuffer.renderbuffer);\n      this.lightDepthMapFramebuffer.setDepthTexture(this.gl, this.lightDepthMapTexture.texture);\n    } else {\n      this.lightDepthMapTexture.init(this.gl, this.gl.UNSIGNED_BYTE, this.gl.RGBA, this.gl.RGBA);\n      this.lightDepthMapRenderbuffer.init(this.gl, this.gl.DEPTH_COMPONENT16);\n      this.lightDepthMapFramebuffer.setColorTexture(this.gl, this.lightDepthMapTexture.texture);\n      this.lightDepthMapFramebuffer.setDepthRenderbuffer(this.gl, this.lightDepthMapRenderbuffer.renderbuffer);\n    } // deferred shading textures, renderbuffers, framebuffers and shaders\n\n\n    if (this.isSupportDeferred()) {\n      // g-buffer\n      this.depthTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Texture();\n      this.depthTexture.init(this.gl, this.gl.UNSIGNED_SHORT, this.gl.DEPTH_COMPONENT);\n      this.colorTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Texture();\n      this.colorTexture.init(this.gl, this.gl.UNSIGNED_BYTE, this.gl.RGBA);\n      this.positionTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Texture();\n      this.positionTexture.init(this.gl, this.gl.FLOAT, this.gl.RGBA);\n      this.normalTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Texture();\n      this.normalTexture.init(this.gl, this.gl.FLOAT, this.gl.RGBA); // postprocesing effect\n      // ssao\n\n      this.ssaoTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Texture();\n      this.ssaoTexture.init(this.gl, this.gl.FLOAT, this.gl.RGBA); // outline\n\n      this.outlineTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Texture();\n      this.outlineTexture.init(this.gl, this.gl.UNSIGNED_BYTE, this.gl.RGBA);\n      this.fxaaTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Texture();\n      this.fxaaTexture.init(this.gl, this.gl.FLOAT, this.gl.RGBA); // temp texture\n\n      this.imageTexture = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Texture();\n      this.imageTexture.init(this.gl, this.gl.FLOAT, this.gl.RGBA); // framebuffer\n\n      this.colorFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Framebuffer();\n      this.colorFramebuffer.init(this.gl);\n      this.colorFramebuffer.setColorTexture(this.gl, this.colorTexture.texture);\n      this.colorFramebuffer.setDepthTexture(this.gl, this.depthTexture.texture);\n      this.normalFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Framebuffer();\n      this.normalFramebuffer.init(this.gl);\n      this.normalFramebuffer.setColorTexture(this.gl, this.normalTexture.texture);\n      this.normalFramebuffer.setDepthTexture(this.gl, this.depthTexture.texture);\n      this.positionFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Framebuffer();\n      this.positionFramebuffer.init(this.gl);\n      this.positionFramebuffer.setColorTexture(this.gl, this.positionTexture.texture);\n      this.positionFramebuffer.setDepthTexture(this.gl, this.depthTexture.texture);\n      this.ssaoFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Framebuffer();\n      this.ssaoFramebuffer.init(this.gl);\n      this.ssaoFramebuffer.setColorTexture(this.gl, this.ssaoTexture.texture);\n      this.outlineFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Framebuffer();\n      this.outlineFramebuffer.init(this.gl);\n      this.outlineFramebuffer.setColorTexture(this.gl, this.outlineTexture.texture);\n      this.fxaaFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Framebuffer();\n      this.fxaaFramebuffer.init(this.gl);\n      this.fxaaFramebuffer.setColorTexture(this.gl, this.fxaaTexture.texture);\n      this.quadFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Framebuffer();\n      this.quadFramebuffer.init(this.gl);\n      this.quadFramebuffer.setColorTexture(this.gl, this.imageTexture.texture);\n      this.finalFramebuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Framebuffer();\n      this.finalFramebuffer.init(this.gl);\n      this.finalFramebuffer.setColorTexture(this.gl, this.fxaaTexture.texture);\n      this.finalFramebuffer.setDepthTexture(this.gl, this.depthTexture.texture);\n      this.normalShader = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].NormalShader();\n      this.normalShader.init(this.gl);\n      this.positionShader = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].PositionShader();\n      this.positionShader.init(this.gl);\n\n      if (_structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].SSAOShader) {\n        this.ssaoShader = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].SSAOShader();\n        this.ssaoShader.init(this.gl);\n        this.ssaoBlurShader = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].SSAOBlurShader();\n        this.ssaoBlurShader.init(this.gl);\n      }\n\n      this.outlineShader = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].OutlineShader();\n      this.outlineShader.init(this.gl);\n      this.lightingShader = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].LightingShader();\n      this.lightingShader.init(this.gl);\n      this.fxaaShader = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].FXAAShader();\n      this.fxaaShader.init(this.gl);\n      this.quadShader = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].QuadShader();\n      this.quadShader.init(this.gl);\n    } // this is the shaders\n\n\n    this.labelShader = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].LabelShader();\n    this.labelShader.init(this.gl);\n    this.pickShader = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].PickShader();\n    this.pickShader.init(this.gl);\n    this.phongShader = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].PhongShader();\n    this.phongShader.init(this.gl);\n\n    if (_structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].DepthShader) {\n      this.depthShader = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].DepthShader();\n      this.depthShader.init(this.gl);\n    }\n\n    this.textTextImage = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].TextImage();\n    this.textTextImage.init(this.gl);\n    this.gl.textImage = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].TextImage();\n    this.gl.textImage.init(this.gl);\n    this.gl.textMesh = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].TextMesh();\n    this.gl.textMesh.init(this.gl); // set up material\n\n    this.gl.material = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Material();\n    this.setupScene();\n  } else {\n    this.displayMessage();\n  }\n};\n\n_.displayMessage = function () {\n  var canvas = document.getElementById(this.id);\n\n  if (canvas.getContext) {\n    var ctx = canvas.getContext('2d');\n\n    if (this.specs.backgroundColor) {\n      ctx.fillStyle = this.specs.backgroundColor;\n      ctx.fillRect(0, 0, this.width, this.height);\n    }\n\n    if (this.emptyMessage) {\n      ctx.fillStyle = '#737683';\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.font = '18px Helvetica, Verdana, Arial, Sans-serif';\n      ctx.fillText(this.emptyMessage, this.width / 2, this.height / 2);\n    }\n  }\n};\n\n_.renderText = function (text, position) {\n  var vertexData = {\n    position: [],\n    texCoord: [],\n    translation: []\n  };\n  this.textTextImage.pushVertexData(text, position, 0, vertexData);\n  this.gl.textMesh.storeData(this.gl, vertexData.position, vertexData.texCoord, vertexData.translation);\n  this.textTextImage.useTexture(this.gl);\n  this.gl.textMesh.render(this.gl);\n};\n\n_.setupScene = function () {\n  if (this.gl) {\n    // clear the canvas\n    // set background color for IE's sake, seems like an IE bug where half the repaints don't render a background\n    var jqCapsule = Object(_lib__WEBPACK_IMPORTED_MODULE_5__[\"jQuery\"])('#' + this.id);\n    jqCapsule.css('background-color', this.specs.backgroundColor);\n    var cs = _math__WEBPACK_IMPORTED_MODULE_1__[\"getRGB\"](this.specs.backgroundColor, 1);\n    this.gl.clearColor(cs[0], cs[1], cs[2], 1.0);\n    this.specs.cullBackFace_3D ? this.gl.enable(this.gl.CULL_FACE) : this.gl.disable(this.gl.CULL_FACE); // here is the sphere buffer to be drawn, make it once, then scale\n    // and translate to draw atoms\n\n    this.gl.sphereBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Sphere(1, this.specs.atoms_resolution_3D, this.specs.atoms_resolution_3D);\n    this.gl.starBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Star();\n    this.gl.cylinderBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Cylinder(1, 1, this.specs.bonds_resolution_3D);\n    this.gl.cylinderClosedBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Cylinder(1, 1, this.specs.bonds_resolution_3D, true);\n    this.gl.boxBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Box(1, 1, 1);\n    this.gl.pillBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Pill(this.specs.bonds_pillDiameter_3D / 2, this.specs.bonds_pillHeight_3D, this.specs.bonds_pillLatitudeResolution_3D, this.specs.bonds_pillLongitudeResolution_3D);\n    this.gl.lineBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Line();\n    this.gl.lineArrowBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].LineArrow();\n    this.gl.arrowBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Arrow(0.3, this.specs.compass_resolution_3D);\n    this.gl.quadBuffer = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Quad(); // texture for rendering text\n\n    this.gl.textImage.updateFont(this.gl, this.specs.text_font_size, this.specs.text_font_families, this.specs.text_font_bold, this.specs.text_font_italic, this.specs.text_font_stroke_3D); // set up lighting\n\n    this.lighting.lightScene(this.specs.lightDiffuseColor_3D, this.specs.lightSpecularColor_3D, this.specs.lightDirection_3D); // set up fogging\n\n    this.fogging.fogScene(this.specs.fog_color_3D || this.specs.backgroundColor, this.specs.fog_start_3D, this.specs.fog_end_3D, this.specs.fog_density_3D); // set up compass\n\n    this.compass = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Compass(this.gl, this.specs); // set texture and renderbuffer parameter\n\n    this.lightDepthMapTexture.setParameter(this.gl, this.shadowTextureSize, this.shadowTextureSize);\n    this.lightDepthMapRenderbuffer.setParameter(this.gl, this.shadowTextureSize, this.shadowTextureSize);\n    this.pickerColorTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n    this.pickerDepthRenderbuffer.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n\n    if (this.isSupportDeferred()) {\n      this.depthTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n      this.colorTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n      this.imageTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n      this.positionTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n      this.normalTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n      this.ssaoTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n      this.outlineTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight);\n      this.fxaaTexture.setParameter(this.gl, this.gl.drawingBufferWidth, this.gl.drawingBufferHeight); // set SSAO parameter\n\n      this.ssao.initSampleKernel(this.specs.ssao_kernel_samples);\n      this.ssao.initNoiseTexture(this.gl);\n    }\n\n    this.camera.updateProjectionMatrix(this.specs.projectionPerspective_3D);\n\n    for (var k = 0, kk = this.molecules.length; k < kk; k++) {\n      var mol = this.molecules[k];\n\n      if (!(mol.labelMesh instanceof _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].TextMesh)) {\n        mol.labelMesh = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].TextMesh();\n        mol.labelMesh.init(this.gl);\n      }\n\n      if (mol.chains) {\n        mol.ribbons = [];\n        mol.cartoons = [];\n        mol.tubes = [];\n        mol.pipePlanks = []; // set up ribbon diagram if available and not already setup\n\n        for (var j = 0, jj = mol.chains.length; j < jj; j++) {\n          var rs = mol.chains[j];\n\n          for (var i = 0, ii = rs.length - 1; i < ii; i++) {\n            rs[i].Test = i;\n          }\n\n          var isNucleotide = rs.length > 3 && _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"RESIDUE\"][rs[3].name] && _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"RESIDUE\"][rs[3].name].aminoColor === '#BEA06E';\n\n          if (rs.length > 0 && !rs[0].lineSegments) {\n            for (var i = 0, ii = rs.length - 1; i < ii; i++) {\n              rs[i].setup(rs[i + 1].cp1, isNucleotide ? 1 : this.specs.proteins_horizontalResolution);\n            }\n\n            if (!isNucleotide) {\n              for (var i = 1, ii = rs.length - 1; i < ii; i++) {\n                // reverse guide points if carbonyl\n                // orientation flips\n                if (_extensions__WEBPACK_IMPORTED_MODULE_2__[\"vec3AngleFrom\"](rs[i - 1].D, rs[i].D) > m.PI / 2) {\n                  rs[i].guidePointsSmall.reverse();\n                  rs[i].guidePointsLarge.reverse();\n                  _lib__WEBPACK_IMPORTED_MODULE_5__[\"vec3\"].scale(rs[i].D, -1);\n                }\n              }\n            }\n\n            for (var i = 2, ii = rs.length - 3; i < ii; i++) {\n              // compute line segments\n              rs[i].computeLineSegments(rs[i - 2], rs[i - 1], rs[i + 1], !isNucleotide, isNucleotide ? this.specs.nucleics_verticalResolution : this.specs.proteins_verticalResolution);\n            } // remove unneeded dummies\n\n\n            rs.pop();\n            rs.pop();\n            rs.pop();\n            rs.shift();\n            rs.shift();\n          } // create the hsl color for the chain\n\n\n          var rgb = _math__WEBPACK_IMPORTED_MODULE_1__[\"hsl2rgb\"](jj === 1 ? .5 : j / jj, 1, .5);\n          var chainColor = 'rgb(' + rgb[0] + ',' + rgb[1] + ',' + rgb[2] + ')';\n          rs.chainColor = chainColor;\n\n          if (isNucleotide) {\n            var t = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Tube(rs, this.specs.nucleics_tubeThickness, this.specs.nucleics_tubeResolution_3D);\n            t.chainColor = chainColor;\n            mol.tubes.push(t);\n          } else {\n            var t = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].PipePlank(rs, this.specs);\n            mol.pipePlanks.push(t);\n            var res = rs.shift();\n            var r = {\n              front: new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Ribbon(rs, this.specs.proteins_ribbonThickness, false),\n              back: new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Ribbon(rs, -this.specs.proteins_ribbonThickness, false)\n            };\n            r.front.chainColor = chainColor;\n            r.back.chainColor = chainColor;\n            mol.ribbons.push(r);\n            var d = {\n              front: new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Ribbon(rs, this.specs.proteins_ribbonThickness, true),\n              back: new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].Ribbon(rs, -this.specs.proteins_ribbonThickness, true)\n            };\n            d.front.chainColor = chainColor;\n            d.back.chainColor = chainColor;\n            mol.cartoons.push(d);\n            rs.unshift(res);\n          }\n        }\n      }\n    }\n\n    this.label3D.updateVerticesBuffer(this.gl, this.getMolecules(), this.specs); // the molecules in frame of MovieCanvas3D must be handled\n\n    if (this instanceof _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"MovieCanvas3D\"] && this.frames) {\n      for (var i = 0, ii = this.frames.length; i < ii; i++) {\n        var f = this.frames[i];\n\n        for (var j = 0, jj = f.mols.length; j < jj; j++) {\n          var mol = f.mols[j];\n\n          if (!(mol.labelMesh instanceof _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].TextMesh)) {\n            mol.labelMesh = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"d3\"].TextMesh();\n            mol.labelMesh.init(this.gl);\n          }\n        }\n\n        this.label3D.updateVerticesBuffer(this.gl, f.mols, this.specs);\n      }\n    }\n  }\n};\n\n_.updateScene = function () {\n  this.camera.updateProjectionMatrix(this.specs.projectionPerspective_3D);\n  this.lighting.lightScene(this.specs.lightDiffuseColor_3D, this.specs.lightSpecularColor_3D, this.specs.lightDirection_3D);\n  this.fogging.fogScene(this.specs.fog_color_3D || this.specs.backgroundColor, this.specs.fog_start_3D, this.specs.fog_end_3D, this.specs.fog_density_3D);\n  this.repaint();\n};\n\n_.mousedown = function (e) {\n  this.lastPoint = e.p;\n};\n\n_.mouseup = function (e) {\n  this.lastPoint = undefined;\n};\n\n_.rightmousedown = function (e) {\n  this.lastPoint = e.p;\n};\n\n_.drag = function (e) {\n  if (this.lastPoint) {\n    if (_monitor__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ALT) {\n      var t = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"Point\"](e.p.x, e.p.y);\n      t.sub(this.lastPoint);\n      var theta = this.camera.fieldOfView / 360 * m.PI;\n      var tanTheta = m.tan(theta);\n      var topScreen = this.height / 2 / this.camera.zoom;\n      var nearScreen = topScreen / tanTheta;\n      var nearRatio = this.camera.focalLength() / nearScreen;\n      _lib__WEBPACK_IMPORTED_MODULE_5__[\"mat4\"].translate(this.camera.viewMatrix, [t.x * nearRatio, -t.y * nearRatio, 0]);\n    } else {\n      var difx = e.p.x - this.lastPoint.x;\n      var dify = e.p.y - this.lastPoint.y;\n      var rotation = _lib__WEBPACK_IMPORTED_MODULE_5__[\"mat4\"].rotate(_lib__WEBPACK_IMPORTED_MODULE_5__[\"mat4\"].identity([]), difx * m.PI / 180.0, [0, 1, 0]);\n      _lib__WEBPACK_IMPORTED_MODULE_5__[\"mat4\"].rotate(rotation, dify * m.PI / 180.0, [1, 0, 0]);\n      this.rotationMatrix = _lib__WEBPACK_IMPORTED_MODULE_5__[\"mat4\"].multiply(rotation, this.rotationMatrix);\n    }\n\n    this.lastPoint = e.p;\n    this.repaint();\n  }\n};\n\n_.mousewheel = function (e, delta) {\n  delta > 0 ? this.camera.zoomIn() : this.camera.zoomOut();\n  this.updateScene();\n};\n\n_.multitouchmove = function (e, numFingers) {\n  if (numFingers === 2) {\n    if (this.lastPoint && this.lastPoint.multi) {\n      var t = new _structures__WEBPACK_IMPORTED_MODULE_4__[\"Point\"](e.p.x, e.p.y);\n      t.sub(this.lastPoint);\n      var theta = this.camera.fieldOfView / 360 * m.PI;\n      var tanTheta = m.tan(theta);\n      var topScreen = this.height / 2 / this.camera.zoom;\n      var nearScreen = topScreen / tanTheta;\n      var nearRatio = this.camera.focalLength() / nearScreen;\n      _lib__WEBPACK_IMPORTED_MODULE_5__[\"mat4\"].translate(this.camera.viewMatrix, [t.x * nearRatio, -t.y * nearRatio, 0]);\n      this.lastPoint = e.p;\n      this.repaint();\n    } else {\n      this.lastPoint = e.p;\n      this.lastPoint.multi = true;\n    }\n  }\n};\n\n_.gesturechange = function (e) {\n  if (e.originalEvent.scale - this.lastPinchScale !== 0) {\n    var minFov = 0.1;\n    var maxFov = 179.9;\n    var dz = -(e.originalEvent.scale / this.lastPinchScale - 1) * 30;\n\n    if (isNaN(dz)) {\n      // this seems to happen on Android when using multiple fingers\n      return;\n    }\n\n    dz > 0 ? this.camera.zoomIn() : this.camera.zoomOut();\n    this.updateScene();\n    this.lastPinchScale = e.originalEvent.scale;\n  }\n\n  this.repaint();\n};\n\n_.gestureend = function (e) {\n  this.lastPinchScale = 1;\n  this.lastGestureRotate = 0;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/_Canvas3D.js\n");

/***/ }),

/***/ "./src/ChemDoodle/_SpectrumCanvas.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/_SpectrumCanvas.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _SpectrumCanvas; });\n/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Canvas */ \"./src/ChemDoodle/_Canvas.js\");\n\nfunction _SpectrumCanvas(id, width, height) {\n  if (id) {\n    this.create(id, width, height);\n  }\n}\n;\n\nvar _ = _SpectrumCanvas.prototype = new _Canvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n_.spectrum = undefined;\n_.emptyMessage = 'No Spectrum Loaded or Recognized';\n_.loadMolecule = undefined;\n_.getMolecule = undefined;\n\n_.innerRepaint = function (ctx) {\n  if (this.spectrum && this.spectrum.data.length > 0) {\n    this.spectrum.draw(ctx, this.specs, this.width, this.height);\n  } else if (this.emptyMessage) {\n    ctx.fillStyle = '#737683';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.font = '18px Helvetica, Verdana, Arial, Sans-serif';\n    ctx.fillText(this.emptyMessage, this.width / 2, this.height / 2);\n  }\n};\n\n_.loadSpectrum = function (spectrum) {\n  this.spectrum = spectrum;\n  this.repaint();\n};\n\n_.getSpectrum = function () {\n  return this.spectrum;\n};\n\n_.getSpectrumCoordinates = function (x, y) {\n  return spectrum.getInternalCoordinates(x, y, this.width, this.height);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvX1NwZWN0cnVtQ2FudmFzLmpzPzc0N2QiXSwibmFtZXMiOlsiX1NwZWN0cnVtQ2FudmFzIiwiaWQiLCJ3aWR0aCIsImhlaWdodCIsImNyZWF0ZSIsIl8iLCJwcm90b3R5cGUiLCJfQ2FudmFzIiwic3BlY3RydW0iLCJ1bmRlZmluZWQiLCJlbXB0eU1lc3NhZ2UiLCJsb2FkTW9sZWN1bGUiLCJnZXRNb2xlY3VsZSIsImlubmVyUmVwYWludCIsImN0eCIsImRhdGEiLCJsZW5ndGgiLCJkcmF3Iiwic3BlY3MiLCJmaWxsU3R5bGUiLCJ0ZXh0QWxpZ24iLCJ0ZXh0QmFzZWxpbmUiLCJmb250IiwiZmlsbFRleHQiLCJsb2FkU3BlY3RydW0iLCJyZXBhaW50IiwiZ2V0U3BlY3RydW0iLCJnZXRTcGVjdHJ1bUNvb3JkaW5hdGVzIiwieCIsInkiLCJnZXRJbnRlcm5hbENvb3JkaW5hdGVzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVlLFNBQVNBLGVBQVQsQ0FBeUJDLEVBQXpCLEVBQTZCQyxLQUE3QixFQUFvQ0MsTUFBcEMsRUFBNEM7QUFDMUQsTUFBSUYsRUFBSixFQUFRO0FBQ1AsU0FBS0csTUFBTCxDQUFZSCxFQUFaLEVBQWdCQyxLQUFoQixFQUF1QkMsTUFBdkI7QUFDQTtBQUNEO0FBQUE7O0FBQ0QsSUFBSUUsQ0FBQyxHQUFHTCxlQUFlLENBQUNNLFNBQWhCLEdBQTRCLElBQUlDLCtDQUFKLEVBQXBDOztBQUNBRixDQUFDLENBQUNHLFFBQUYsR0FBYUMsU0FBYjtBQUNBSixDQUFDLENBQUNLLFlBQUYsR0FBaUIsa0NBQWpCO0FBQ0FMLENBQUMsQ0FBQ00sWUFBRixHQUFpQkYsU0FBakI7QUFDQUosQ0FBQyxDQUFDTyxXQUFGLEdBQWdCSCxTQUFoQjs7QUFDQUosQ0FBQyxDQUFDUSxZQUFGLEdBQWlCLFVBQVNDLEdBQVQsRUFBYztBQUM5QixNQUFJLEtBQUtOLFFBQUwsSUFBaUIsS0FBS0EsUUFBTCxDQUFjTyxJQUFkLENBQW1CQyxNQUFuQixHQUE0QixDQUFqRCxFQUFvRDtBQUNuRCxTQUFLUixRQUFMLENBQWNTLElBQWQsQ0FBbUJILEdBQW5CLEVBQXdCLEtBQUtJLEtBQTdCLEVBQW9DLEtBQUtoQixLQUF6QyxFQUFnRCxLQUFLQyxNQUFyRDtBQUNBLEdBRkQsTUFFTyxJQUFJLEtBQUtPLFlBQVQsRUFBdUI7QUFDN0JJLE9BQUcsQ0FBQ0ssU0FBSixHQUFnQixTQUFoQjtBQUNBTCxPQUFHLENBQUNNLFNBQUosR0FBZ0IsUUFBaEI7QUFDQU4sT0FBRyxDQUFDTyxZQUFKLEdBQW1CLFFBQW5CO0FBQ0FQLE9BQUcsQ0FBQ1EsSUFBSixHQUFXLDRDQUFYO0FBQ0FSLE9BQUcsQ0FBQ1MsUUFBSixDQUFhLEtBQUtiLFlBQWxCLEVBQWdDLEtBQUtSLEtBQUwsR0FBYSxDQUE3QyxFQUFnRCxLQUFLQyxNQUFMLEdBQWMsQ0FBOUQ7QUFDQTtBQUNELENBVkQ7O0FBV0FFLENBQUMsQ0FBQ21CLFlBQUYsR0FBaUIsVUFBU2hCLFFBQVQsRUFBbUI7QUFDbkMsT0FBS0EsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxPQUFLaUIsT0FBTDtBQUNBLENBSEQ7O0FBSUFwQixDQUFDLENBQUNxQixXQUFGLEdBQWdCLFlBQVc7QUFDMUIsU0FBTyxLQUFLbEIsUUFBWjtBQUNBLENBRkQ7O0FBR0FILENBQUMsQ0FBQ3NCLHNCQUFGLEdBQTJCLFVBQVNDLENBQVQsRUFBWUMsQ0FBWixFQUFlO0FBQ3pDLFNBQU9yQixRQUFRLENBQUNzQixzQkFBVCxDQUFnQ0YsQ0FBaEMsRUFBbUNDLENBQW5DLEVBQXNDLEtBQUszQixLQUEzQyxFQUFrRCxLQUFLQyxNQUF2RCxDQUFQO0FBQ0EsQ0FGRCIsImZpbGUiOiIuL3NyYy9DaGVtRG9vZGxlL19TcGVjdHJ1bUNhbnZhcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfQ2FudmFzIGZyb20gJy4vX0NhbnZhcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9TcGVjdHJ1bUNhbnZhcyhpZCwgd2lkdGgsIGhlaWdodCkge1xuXHRpZiAoaWQpIHtcblx0XHR0aGlzLmNyZWF0ZShpZCwgd2lkdGgsIGhlaWdodCk7XG5cdH1cbn07XG52YXIgXyA9IF9TcGVjdHJ1bUNhbnZhcy5wcm90b3R5cGUgPSBuZXcgX0NhbnZhcygpO1xuXy5zcGVjdHJ1bSA9IHVuZGVmaW5lZDtcbl8uZW1wdHlNZXNzYWdlID0gJ05vIFNwZWN0cnVtIExvYWRlZCBvciBSZWNvZ25pemVkJztcbl8ubG9hZE1vbGVjdWxlID0gdW5kZWZpbmVkO1xuXy5nZXRNb2xlY3VsZSA9IHVuZGVmaW5lZDtcbl8uaW5uZXJSZXBhaW50ID0gZnVuY3Rpb24oY3R4KSB7XG5cdGlmICh0aGlzLnNwZWN0cnVtICYmIHRoaXMuc3BlY3RydW0uZGF0YS5sZW5ndGggPiAwKSB7XG5cdFx0dGhpcy5zcGVjdHJ1bS5kcmF3KGN0eCwgdGhpcy5zcGVjcywgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuXHR9IGVsc2UgaWYgKHRoaXMuZW1wdHlNZXNzYWdlKSB7XG5cdFx0Y3R4LmZpbGxTdHlsZSA9ICcjNzM3NjgzJztcblx0XHRjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cdFx0Y3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuXHRcdGN0eC5mb250ID0gJzE4cHggSGVsdmV0aWNhLCBWZXJkYW5hLCBBcmlhbCwgU2Fucy1zZXJpZic7XG5cdFx0Y3R4LmZpbGxUZXh0KHRoaXMuZW1wdHlNZXNzYWdlLCB0aGlzLndpZHRoIC8gMiwgdGhpcy5oZWlnaHQgLyAyKTtcblx0fVxufTtcbl8ubG9hZFNwZWN0cnVtID0gZnVuY3Rpb24oc3BlY3RydW0pIHtcblx0dGhpcy5zcGVjdHJ1bSA9IHNwZWN0cnVtO1xuXHR0aGlzLnJlcGFpbnQoKTtcbn07XG5fLmdldFNwZWN0cnVtID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzLnNwZWN0cnVtO1xufTtcbl8uZ2V0U3BlY3RydW1Db29yZGluYXRlcyA9IGZ1bmN0aW9uKHgsIHkpIHtcblx0cmV0dXJuIHNwZWN0cnVtLmdldEludGVybmFsQ29vcmRpbmF0ZXMoeCwgeSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/ChemDoodle/_SpectrumCanvas.js\n");

/***/ }),

/***/ "./src/ChemDoodle/animations.js":
/*!**************************************!*\
  !*** ./src/ChemDoodle/animations.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\nvar ext = {}; // Drop in replace functions for setTimeout() & setInterval() that \n// make use of requestAnimationFrame() for performance where available\n// http://www.joelambert.co.uk\n// Copyright 2011, Joe Lambert.\n// Free to use under the MIT license.\n// http://www.opensource.org/licenses/mit-license.php\n// requestAnimationFrame() shim by Paul Irish\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n\nwindow.requestAnimFrame = function () {\n  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (\n  /* function */\n  callback,\n  /* DOMElement */\n  element) {\n    window.setTimeout(callback, 1000 / 60);\n  };\n}();\n/**\n * Behaves the same as setInterval except uses requestAnimationFrame() where possible for better performance\n * @param {function} fn The callback function\n * @param {int} delay The delay in milliseconds\n */\n\n\next.requestInterval = function (fn, delay) {\n  if (!window.requestAnimationFrame && !window.webkitRequestAnimationFrame && !(window.mozRequestAnimationFrame && window.mozCancelRequestAnimationFrame) && // Firefox 5 ships without cancel support\n  !window.oRequestAnimationFrame && !window.msRequestAnimationFrame) return window.setInterval(fn, delay);\n  var start = new Date().getTime(),\n      handle = new Object();\n\n  function loop() {\n    var current = new Date().getTime(),\n        delta = current - start;\n\n    if (delta >= delay) {\n      fn.call();\n      start = new Date().getTime();\n    }\n\n    handle.value = window.requestAnimFrame(loop);\n  }\n\n  ;\n  handle.value = window.requestAnimFrame(loop);\n  return handle;\n};\n/**\n * Behaves the same as clearInterval except uses cancelRequestAnimationFrame() where possible for better performance\n * @param {int|object} fn The callback function\n */\n\n\next.clearRequestInterval = function (handle) {\n  window.cancelAnimationFrame ? window.cancelAnimationFrame(handle.value) : window.webkitCancelAnimationFrame ? window.webkitCancelAnimationFrame(handle.value) : window.webkitCancelRequestAnimationFrame ? window.webkitCancelRequestAnimationFrame(handle.value) :\n  /* Support for legacy API */\n  window.mozCancelRequestAnimationFrame ? window.mozCancelRequestAnimationFrame(handle.value) : window.oCancelRequestAnimationFrame ? window.oCancelRequestAnimationFrame(handle.value) : window.msCancelRequestAnimationFrame ? window.msCancelRequestAnimationFrame(handle.value) : clearInterval(handle);\n};\n/**\n * Behaves the same as setTimeout except uses requestAnimationFrame() where possible for better performance\n * @param {function} fn The callback function\n * @param {int} delay The delay in milliseconds\n */\n\n\next.requestTimeout = function (fn, delay) {\n  if (!window.requestAnimationFrame && !window.webkitRequestAnimationFrame && !(window.mozRequestAnimationFrame && window.mozCancelRequestAnimationFrame) && // Firefox 5 ships without cancel support\n  !window.oRequestAnimationFrame && !window.msRequestAnimationFrame) return window.setTimeout(fn, delay);\n  var start = new Date().getTime(),\n      handle = new Object();\n\n  function loop() {\n    var current = new Date().getTime(),\n        delta = current - start;\n    delta >= delay ? fn.call() : handle.value = window.requestAnimFrame(loop);\n  }\n\n  ;\n  handle.value = window.requestAnimFrame(loop);\n  return handle;\n};\n/**\n * Behaves the same as clearTimeout except uses cancelRequestAnimationFrame() where possible for better performance\n * @param {int|object} fn The callback function\n */\n\n\next.clearRequestTimeout = function (handle) {\n  window.cancelAnimationFrame ? window.cancelAnimationFrame(handle.value) : window.webkitCancelAnimationFrame ? window.webkitCancelAnimationFrame(handle.value) : window.webkitCancelRequestAnimationFrame ? window.webkitCancelRequestAnimationFrame(handle.value) :\n  /* Support for legacy API */\n  window.mozCancelRequestAnimationFrame ? window.mozCancelRequestAnimationFrame(handle.value) : window.oCancelRequestAnimationFrame ? window.oCancelRequestAnimationFrame(handle.value) : window.msCancelRequestAnimationFrame ? window.msCancelRequestAnimationFrame(handle.value) : clearTimeout(handle);\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ext);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/animations.js\n");

/***/ }),

/***/ "./src/ChemDoodle/extensions/index.js":
/*!********************************************!*\
  !*** ./src/ChemDoodle/extensions/index.js ***!
  \********************************************/
/*! exports provided: stringStartsWith, vec3AngleFrom, contextRoundRect, contextEllipse, getFontString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stringStartsWith\", function() { return stringStartsWith; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"vec3AngleFrom\", function() { return vec3AngleFrom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"contextRoundRect\", function() { return contextRoundRect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"contextEllipse\", function() { return contextEllipse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getFontString\", function() { return getFontString; });\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib */ \"./src/ChemDoodle/lib/index.js\");\n\nvar m = Math;\nfunction stringStartsWith(str, match) {\n  return str.slice(0, match.length) === match;\n}\nfunction vec3AngleFrom(v1, v2) {\n  var length1 = _lib__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].length(v1);\n  var length2 = _lib__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].length(v2);\n  var dot = _lib__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].dot(v1, v2);\n  var cosine = dot / length1 / length2;\n  return m.acos(cosine);\n}\nfunction contextRoundRect(ctx, x, y, width, height, radius) {\n  ctx.beginPath();\n  ctx.moveTo(x + radius, y);\n  ctx.lineTo(x + width - radius, y);\n  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n  ctx.lineTo(x + width, y + height - radius);\n  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n  ctx.lineTo(x + radius, y + height);\n  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n  ctx.lineTo(x, y + radius);\n  ctx.quadraticCurveTo(x, y, x + radius, y);\n  ctx.closePath();\n}\nfunction contextEllipse(ctx, x, y, w, h) {\n  var kappa = .5522848;\n  var ox = w / 2 * kappa;\n  var oy = h / 2 * kappa;\n  var xe = x + w;\n  var ye = y + h;\n  var xm = x + w / 2;\n  var ym = y + h / 2;\n  ctx.beginPath();\n  ctx.moveTo(x, ym);\n  ctx.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n  ctx.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n  ctx.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n  ctx.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n  ctx.closePath();\n}\nfunction getFontString(size, families, bold, italic) {\n  var sb = [];\n\n  if (bold) {\n    sb.push('bold ');\n  }\n\n  if (italic) {\n    sb.push('italic ');\n  }\n\n  sb.push(size + 'px ');\n\n  for (var i = 0, ii = families.length; i < ii; i++) {\n    var use = families[i];\n\n    if (use.indexOf(' ') !== -1) {\n      use = '\"' + use + '\"';\n    }\n\n    sb.push((i !== 0 ? ',' : '') + use);\n  }\n\n  return sb.join('');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvZXh0ZW5zaW9ucy9pbmRleC5qcz9iODQzIl0sIm5hbWVzIjpbIm0iLCJNYXRoIiwic3RyaW5nU3RhcnRzV2l0aCIsInN0ciIsIm1hdGNoIiwic2xpY2UiLCJsZW5ndGgiLCJ2ZWMzQW5nbGVGcm9tIiwidjEiLCJ2MiIsImxlbmd0aDEiLCJ2MyIsImxlbmd0aDIiLCJkb3QiLCJjb3NpbmUiLCJhY29zIiwiY29udGV4dFJvdW5kUmVjdCIsImN0eCIsIngiLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJyYWRpdXMiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiY2xvc2VQYXRoIiwiY29udGV4dEVsbGlwc2UiLCJ3IiwiaCIsImthcHBhIiwib3giLCJveSIsInhlIiwieWUiLCJ4bSIsInltIiwiYmV6aWVyQ3VydmVUbyIsImdldEZvbnRTdHJpbmciLCJzaXplIiwiZmFtaWxpZXMiLCJib2xkIiwiaXRhbGljIiwic2IiLCJwdXNoIiwiaSIsImlpIiwidXNlIiwiaW5kZXhPZiIsImpvaW4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQSxJQUFNQSxDQUFDLEdBQUdDLElBQVY7QUFFTyxTQUFTQyxnQkFBVCxDQUEwQkMsR0FBMUIsRUFBK0JDLEtBQS9CLEVBQXNDO0FBQzNDLFNBQU9ELEdBQUcsQ0FBQ0UsS0FBSixDQUFVLENBQVYsRUFBYUQsS0FBSyxDQUFDRSxNQUFuQixNQUErQkYsS0FBdEM7QUFDRDtBQUVNLFNBQVNHLGFBQVQsQ0FBdUJDLEVBQXZCLEVBQTJCQyxFQUEzQixFQUErQjtBQUNwQyxNQUFJQyxPQUFPLEdBQUdDLHlDQUFFLENBQUNMLE1BQUgsQ0FBVUUsRUFBVixDQUFkO0FBQ0EsTUFBSUksT0FBTyxHQUFHRCx5Q0FBRSxDQUFDTCxNQUFILENBQVVHLEVBQVYsQ0FBZDtBQUNBLE1B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QUgsQ0FBUSxFQUFSLENBQVA7QUFDRCIsImZpbGUiOiIuL3NyYy9DaGVtRG9vZGxlL2V4dGVuc2lvbnMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2ZWMzIGFzIHYzIH0gZnJvbSAnLi4vbGliJztcbmNvbnN0IG0gPSBNYXRoO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nU3RhcnRzV2l0aChzdHIsIG1hdGNoKSB7XG4gIHJldHVybiBzdHIuc2xpY2UoMCwgbWF0Y2gubGVuZ3RoKSA9PT0gbWF0Y2g7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2ZWMzQW5nbGVGcm9tKHYxLCB2Mikge1xuICB2YXIgbGVuZ3RoMSA9IHYzLmxlbmd0aCh2MSk7XG4gIHZhciBsZW5ndGgyID0gdjMubGVuZ3RoKHYyKTtcbiAgdmFyIGRvdCA9IHYzLmRvdCh2MSwgdjIpO1xuICB2YXIgY29zaW5lID0gZG90IC8gbGVuZ3RoMSAvIGxlbmd0aDI7XG4gIHJldHVybiBtLmFjb3MoY29zaW5lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRleHRSb3VuZFJlY3QoY3R4LCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCByYWRpdXMpIHtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjdHgubW92ZVRvKHggKyByYWRpdXMsIHkpO1xuICBjdHgubGluZVRvKHggKyB3aWR0aCAtIHJhZGl1cywgeSk7XG4gIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSwgeCArIHdpZHRoLCB5ICsgcmFkaXVzKTtcbiAgY3R4LmxpbmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQgLSByYWRpdXMpO1xuICBjdHgucXVhZHJhdGljQ3VydmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQsIHggKyB3aWR0aCAtIHJhZGl1cywgeSArIGhlaWdodCk7XG4gIGN0eC5saW5lVG8oeCArIHJhZGl1cywgeSArIGhlaWdodCk7XG4gIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHkgKyBoZWlnaHQsIHgsIHkgKyBoZWlnaHQgLSByYWRpdXMpO1xuICBjdHgubGluZVRvKHgsIHkgKyByYWRpdXMpO1xuICBjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5LCB4ICsgcmFkaXVzLCB5KTtcbiAgY3R4LmNsb3NlUGF0aCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udGV4dEVsbGlwc2UoY3R4LCB4LCB5LCB3LCBoKSB7XG4gIHZhciBrYXBwYSA9IC41NTIyODQ4O1xuICB2YXIgb3ggPSAodyAvIDIpICoga2FwcGE7XG4gIHZhciBveSA9IChoIC8gMikgKiBrYXBwYTtcbiAgdmFyIHhlID0geCArIHc7XG4gIHZhciB5ZSA9IHkgKyBoO1xuICB2YXIgeG0gPSB4ICsgdyAvIDI7XG4gIHZhciB5bSA9IHkgKyBoIC8gMjtcblxuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5tb3ZlVG8oeCwgeW0pO1xuICBjdHguYmV6aWVyQ3VydmVUbyh4LCB5bSAtIG95LCB4bSAtIG94LCB5LCB4bSwgeSk7XG4gIGN0eC5iZXppZXJDdXJ2ZVRvKHhtICsgb3gsIHksIHhlLCB5bSAtIG95LCB4ZSwgeW0pO1xuICBjdHguYmV6aWVyQ3VydmVUbyh4ZSwgeW0gKyBveSwgeG0gKyBveCwgeWUsIHhtLCB5ZSk7XG4gIGN0eC5iZXppZXJDdXJ2ZVRvKHhtIC0gb3gsIHllLCB4LCB5bSArIG95LCB4LCB5bSk7XG4gIGN0eC5jbG9zZVBhdGgoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZvbnRTdHJpbmcoc2l6ZSwgZmFtaWxpZXMsIGJvbGQsIGl0YWxpYykge1xuICB2YXIgc2IgPSBbXTtcbiAgaWYgKGJvbGQpIHtcbiAgICBzYi5wdXNoKCdib2xkICcpO1xuICB9XG4gIGlmIChpdGFsaWMpIHtcbiAgICBzYi5wdXNoKCdpdGFsaWMgJyk7XG4gIH1cbiAgc2IucHVzaChzaXplICsgJ3B4ICcpO1xuICBmb3IgKCB2YXIgaSA9IDAsIGlpID0gZmFtaWxpZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgIHZhciB1c2UgPSBmYW1pbGllc1tpXTtcbiAgICBpZiAodXNlLmluZGV4T2YoJyAnKSAhPT0gLTEpIHtcbiAgICAgIHVzZSA9ICdcIicgKyB1c2UgKyAnXCInO1xuICAgIH1cbiAgICBzYi5wdXNoKChpICE9PSAwID8gJywnIDogJycpICsgdXNlKTtcbiAgfVxuICByZXR1cm4gc2Iuam9pbignJyk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ChemDoodle/extensions/index.js\n");

/***/ }),

/***/ "./src/ChemDoodle/featureDetection.js":
/*!********************************************!*\
  !*** ./src/ChemDoodle/featureDetection.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib */ \"./src/ChemDoodle/lib/index.js\");\n\nvar featureDetection = {};\n/* harmony default export */ __webpack_exports__[\"default\"] = (featureDetection);\nvar features = featureDetection;\n\nfeatures.supports_canvas = function () {\n  return !!document.createElement('canvas').getContext;\n};\n\nfeatures.supports_canvas_text = function () {\n  if (!features.supports_canvas()) {\n    return false;\n  }\n\n  var dummy_canvas = document.createElement('canvas');\n  var context = dummy_canvas.getContext('2d');\n  return typeof context.fillText === 'function';\n};\n\nfeatures.supports_webgl = function () {\n  var dummy_canvas = document.createElement('canvas');\n\n  try {\n    if (dummy_canvas.getContext('webgl')) {\n      return true;\n    }\n\n    if (dummy_canvas.getContext('experimental-webgl')) {\n      return true;\n    }\n  } catch (b) {}\n\n  return false;\n};\n\nfeatures.supports_xhr2 = function () {\n  return _lib__WEBPACK_IMPORTED_MODULE_0__[\"jQuery\"].support.cors;\n};\n\nfeatures.supports_touch = function () {\n  // check the mobile os so we don't interfere with hybrid pcs\n  return 'ontouchstart' in window && !!navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|BB10/i);\n};\n\nfeatures.supports_gesture = function () {\n  return 'ongesturestart' in window;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvZmVhdHVyZURldGVjdGlvbi5qcz9mOWEwIl0sIm5hbWVzIjpbImZlYXR1cmVEZXRlY3Rpb24iLCJmZWF0dXJlcyIsInN1cHBvcnRzX2NhbnZhcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImdldENvbnRleHQiLCJzdXBwb3J0c19jYW52YXNfdGV4dCIsImR1bW15X2NhbnZhcyIsImNvbnRleHQiLCJmaWxsVGV4dCIsInN1cHBvcnRzX3dlYmdsIiwiYiIsInN1cHBvcnRzX3hocjIiLCJxIiwic3VwcG9ydCIsImNvcnMiLCJzdXBwb3J0c190b3VjaCIsIndpbmRvdyIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm1hdGNoIiwic3VwcG9ydHNfZ2VzdHVyZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBRUEsSUFBSUEsZ0JBQWdCLEdBQUcsRUFBdkI7QUFFZUEsK0VBQWY7QUFFQSxJQUFJQyxRQUFRLEdBQUdELGdCQUFmOztBQUVBQyxRQUFRLENBQUNDLGVBQVQsR0FBMkIsWUFBVztBQUNwQyxTQUFPLENBQUMsQ0FBQ0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLFFBQXZCLEVBQWlDQyxVQUExQztBQUNELENBRkQ7O0FBSUFKLFFBQVEsQ0FBQ0ssb0JBQVQsR0FBZ0MsWUFBVztBQUN6QyxNQUFJLENBQUNMLFFBQVEsQ0FBQ0MsZUFBVCxFQUFMLEVBQWlDO0FBQy9CLFdBQU8sS0FBUDtBQUNEOztBQUNELE1BQUlLLFlBQVksR0FBR0osUUFBUSxDQUFDQyxhQUFULENBQXVCLFFBQXZCLENBQW5CO0FBQ0EsTUFBSUksT0FBTyxHQUFHRCxZQUFZLENBQUNGLFVBQWIsQ0FBd0IsSUFBeEIsQ0FBZDtBQUNBLFNBQU8sT0FBT0csT0FBTyxDQUFDQyxRQUFmLEtBQTRCLFVBQW5DO0FBQ0QsQ0FQRDs7QUFTQVIsUUFBUSxDQUFDUyxjQUFULEdBQTBCLFlBQVc7QUFDbkMsTUFBSUgsWUFBWSxHQUFHSixRQUFRLENBQUNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBbkI7O0FBQ0EsTUFBSTtBQUNGLFFBQUlHLFlBQVksQ0FBQ0YsVUFBYixDQUF3QixPQUF4QixDQUFKLEVBQXNDO0FBQ3BDLGFBQU8sSUFBUDtBQUNEOztBQUNELFFBQUlFLFlBQVksQ0FBQ0YsVUFBYixDQUF3QixvQkFBeEIsQ0FBSixFQUFtRDtBQUNqRCxhQUFPLElBQVA7QUFDRDtBQUNGLEdBUEQsQ0FPRSxPQUFPTSxDQUFQLEVBQVUsQ0FDWDs7QUFDRCxTQUFPLEtBQVA7QUFDRCxDQVpEOztBQWNBVixRQUFRLENBQUNXLGFBQVQsR0FBeUIsWUFBVztBQUNsQyxTQUFPQywyQ0FBQyxDQUFDQyxPQUFGLENBQVVDLElBQWpCO0FBQ0QsQ0FGRDs7QUFJQWQsUUFBUSxDQUFDZSxjQUFULEdBQTBCLFlBQVc7QUFDbkM7QUFDQSxTQUFPLGtCQUFrQkMsTUFBbEIsSUFBNEIsQ0FBQyxDQUFDQyxTQUFTLENBQUNDLFNBQVYsQ0FBb0JDLEtBQXBCLENBQTBCLDJDQUExQixDQUFyQztBQUNELENBSEQ7O0FBS0FuQixRQUFRLENBQUNvQixnQkFBVCxHQUE0QixZQUFXO0FBQ3JDLFNBQU8sb0JBQW9CSixNQUEzQjtBQUNELENBRkQiLCJmaWxlIjoiLi9zcmMvQ2hlbURvb2RsZS9mZWF0dXJlRGV0ZWN0aW9uLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgalF1ZXJ5IGFzIHEgfSBmcm9tICcuL2xpYic7XG5cbmxldCBmZWF0dXJlRGV0ZWN0aW9uID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IGZlYXR1cmVEZXRlY3Rpb247XG5cbnZhciBmZWF0dXJlcyA9IGZlYXR1cmVEZXRlY3Rpb247XG5cbmZlYXR1cmVzLnN1cHBvcnRzX2NhbnZhcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gISFkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKS5nZXRDb250ZXh0O1xufTtcblxuZmVhdHVyZXMuc3VwcG9ydHNfY2FudmFzX3RleHQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCFmZWF0dXJlcy5zdXBwb3J0c19jYW52YXMoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgZHVtbXlfY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIHZhciBjb250ZXh0ID0gZHVtbXlfY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gIHJldHVybiB0eXBlb2YgY29udGV4dC5maWxsVGV4dCA9PT0gJ2Z1bmN0aW9uJztcbn07XG5cbmZlYXR1cmVzLnN1cHBvcnRzX3dlYmdsID0gZnVuY3Rpb24oKSB7XG4gIHZhciBkdW1teV9jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgdHJ5IHtcbiAgICBpZiAoZHVtbXlfY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJykpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoZHVtbXlfY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGIpIHtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5mZWF0dXJlcy5zdXBwb3J0c194aHIyID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBxLnN1cHBvcnQuY29ycztcbn07XG5cbmZlYXR1cmVzLnN1cHBvcnRzX3RvdWNoID0gZnVuY3Rpb24oKSB7XG4gIC8vIGNoZWNrIHRoZSBtb2JpbGUgb3Mgc28gd2UgZG9uJ3QgaW50ZXJmZXJlIHdpdGggaHlicmlkIHBjc1xuICByZXR1cm4gJ29udG91Y2hzdGFydCcgaW4gd2luZG93ICYmICEhbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBob25lfGlQYWR8aVBvZHxBbmRyb2lkfEJsYWNrQmVycnl8QkIxMC9pKTtcbn07XG5cbmZlYXR1cmVzLnN1cHBvcnRzX2dlc3R1cmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICdvbmdlc3R1cmVzdGFydCcgaW4gd2luZG93O1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/ChemDoodle/featureDetection.js\n");

/***/ }),

/***/ "./src/ChemDoodle/iChemLabs.js":
/*!*************************************!*\
  !*** ./src/ChemDoodle/iChemLabs.js ***!
  \*************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _io_JSONInterpreter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./io/JSONInterpreter */ \"./src/ChemDoodle/io/JSONInterpreter.js\");\n/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./structures */ \"./src/ChemDoodle/structures/index.js\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib */ \"./src/ChemDoodle/lib/index.js\");\n/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../ChemDoodle */ \"./src/ChemDoodle/index.js\");\n\n\n\n\nvar iChemLabs = {};\n/* harmony default export */ __webpack_exports__[\"default\"] = (iChemLabs);\niChemLabs.SERVER_URL = 'https://ichemlabs.cloud.chemdoodle.com/icl_cdc_v070001/WebHQ';\niChemLabs.inRelay = false;\niChemLabs.asynchronous = true;\niChemLabs.INFO = {\n  userAgent: navigator.userAgent,\n  v_cwc: Object(_ChemDoodle__WEBPACK_IMPORTED_MODULE_3__[\"getVersion\"])(),\n  v_jQuery: _lib__WEBPACK_IMPORTED_MODULE_2__[\"jQuery\"].fn.jquery,\n  v_jQuery_ui: _lib__WEBPACK_IMPORTED_MODULE_2__[\"jQuery\"].ui ? _lib__WEBPACK_IMPORTED_MODULE_2__[\"jQuery\"].ui.version : 'N/A'\n};\nvar JSON_INTERPRETER = new _io_JSONInterpreter__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\nvar queue = new _structures__WEBPACK_IMPORTED_MODULE_1__[\"Queue\"]();\n\niChemLabs._contactServer = function (call, content, options, callback, errorback) {\n  if (this.inRelay) {\n    queue.enqueue({\n      'call': call,\n      'content': content,\n      'options': options,\n      'callback': callback,\n      'errorback': errorback\n    });\n  } else {\n    iChemLabs.inRelay = true;\n    _lib__WEBPACK_IMPORTED_MODULE_2__[\"jQuery\"].ajax({\n      dataType: 'text',\n      type: 'POST',\n      data: JSON.stringify({\n        'call': call,\n        'content': content,\n        'options': options,\n        'info': iChemLabs.INFO\n      }),\n      url: this.SERVER_URL,\n      success: function success(data) {\n        var o = JSON.parse(data);\n\n        if (o.message) {\n          alert(o.message);\n        }\n\n        iChemLabs.inRelay = false;\n\n        if (callback && o.content && !o.stop) {\n          callback(o.content);\n        }\n\n        if (o.stop && errorback) {\n          errorback();\n        }\n\n        if (!queue.isEmpty()) {\n          var next = queue.dequeue();\n\n          iChemLabs._contactServer(next.call, next.content, next.options, next.callback, next.errorback);\n        }\n      },\n      error: function error(xhr, status, _error) {\n        if (call != 'checkForUpdates') {\n          alert('Call failed. Please try again. If you continue to see this message, please contact iChemLabs customer support.');\n        }\n\n        iChemLabs.inRelay = false;\n\n        if (errorback) {\n          errorback();\n        }\n\n        if (!queue.isEmpty()) {\n          var next = queue.dequeue();\n\n          iChemLabs._contactServer(next.call, next.content, next.options, next.callback, next.errorback);\n        }\n      },\n      xhrFields: {\n        withCredentials: true\n      },\n      async: iChemLabs.asynchronous\n    });\n  }\n}; // undocumented, this call is for clients that have licensed cloud for their\n// own servers\n\n\niChemLabs.authenticate = function (credential, options, callback, errorback) {\n  this._contactServer('authenticate', {\n    'credential': credential\n  }, options, function (content) {\n    callback(content);\n  }, errorback);\n};\n\niChemLabs.calculate = function (mol, options, callback, errorback) {\n  this._contactServer('calculate', {\n    'mol': JSON_INTERPRETER.molTo(mol)\n  }, options, function (content) {\n    callback(content);\n  }, errorback);\n};\n\niChemLabs.createLewisDotStructure = function (mol, options, callback, errorback) {\n  this._contactServer('createLewisDot', {\n    'mol': JSON_INTERPRETER.molTo(mol)\n  }, options, function (content) {\n    callback(JSON_INTERPRETER.molFrom(content.mol));\n  }, errorback);\n};\n\niChemLabs.generateImage = function (mol, options, callback, errorback) {\n  this._contactServer('generateImage', {\n    'mol': JSON_INTERPRETER.molTo(mol)\n  }, options, function (content) {\n    callback(content.link);\n  }, errorback);\n};\n\niChemLabs.generateIUPACName = function (mol, options, callback, errorback) {\n  this._contactServer('generateIUPACName', {\n    'mol': JSON_INTERPRETER.molTo(mol)\n  }, options, function (content) {\n    callback(content.iupac);\n  }, errorback);\n};\n\niChemLabs.getAd = function (callback, errorback) {\n  this._contactServer('getAd', {}, {}, function (content) {\n    callback(content.image_url, content.target_url);\n  }, errorback);\n};\n\niChemLabs.getMoleculeFromContent = function (input, options, callback, errorback) {\n  this._contactServer('getMoleculeFromContent', {\n    'content': input\n  }, options, function (content) {\n    var z = false;\n\n    for (var i = 0, ii = content.mol.a.length; i < ii; i++) {\n      if (content.mol.a[i].z !== 0) {\n        z = true;\n        break;\n      }\n    }\n\n    if (z) {\n      for (var i = 0, ii = content.mol.a.length; i < ii; i++) {\n        content.mol.a[i].x /= 20;\n        content.mol.a[i].y /= 20;\n        content.mol.a[i].z /= 20;\n      }\n    }\n\n    callback(JSON_INTERPRETER.molFrom(content.mol));\n  }, errorback);\n};\n\niChemLabs.getMoleculeFromDatabase = function (query, options, callback, errorback) {\n  this._contactServer('getMoleculeFromDatabase', {\n    'query': query\n  }, options, function (content) {\n    if (options.dimension === 3) {\n      for (var i = 0, ii = content.mol.a.length; i < ii; i++) {\n        content.mol.a[i].x /= 20;\n        content.mol.a[i].y /= -20;\n        content.mol.a[i].z /= 20;\n      }\n    }\n\n    callback(JSON_INTERPRETER.molFrom(content.mol));\n  }, errorback);\n};\n\niChemLabs.getOptimizedPDBStructure = function (id, options, callback, errorback) {\n  this._contactServer('getOptimizedPDBStructure', {\n    'id': id\n  }, options, function (content) {\n    var mol;\n\n    if (content.mol) {\n      mol = JSON_INTERPRETER.molFrom(content.mol);\n    } else {\n      mol = new _structures__WEBPACK_IMPORTED_MODULE_1__[\"Molecule\"]();\n    }\n\n    mol.chains = JSON_INTERPRETER.chainsFrom(content.ribbons);\n    mol.fromJSON = true;\n    callback(mol);\n  }, errorback);\n};\n\niChemLabs.getZeoliteFromIZA = function (query, options, callback, errorback) {\n  this._contactServer('getZeoliteFromIZA', {\n    'query': query\n  }, options, function (content) {\n    callback(ChemDoodle.readCIF(content.cif, options.xSuper, options.ySuper, options.zSuper));\n  }, errorback);\n};\n\niChemLabs.isGraphIsomorphism = function (arrow, target, options, callback, errorback) {\n  this._contactServer('isGraphIsomorphism', {\n    'arrow': JSON_INTERPRETER.molTo(arrow),\n    'target': JSON_INTERPRETER.molTo(target)\n  }, options, function (content) {\n    callback(content.value);\n  }, errorback);\n};\n\niChemLabs.isSubgraphIsomorphism = function (arrow, target, options, callback, errorback) {\n  this._contactServer('isSubgraphIsomorphism', {\n    'arrow': JSON_INTERPRETER.molTo(arrow),\n    'target': JSON_INTERPRETER.molTo(target)\n  }, options, function (content) {\n    callback(content.value);\n  }, errorback);\n};\n\niChemLabs.isSupergraphIsomorphism = function (arrow, target, options, callback, errorback) {\n  this._contactServer('isSupergraphIsomorphism', {\n    'arrow': JSON_INTERPRETER.molTo(arrow),\n    'target': JSON_INTERPRETER.molTo(target)\n  }, options, function (content) {\n    callback(content.value);\n  }, errorback);\n};\n\niChemLabs.getSimilarityMeasure = function (first, second, options, callback, errorback) {\n  this._contactServer('getSimilarityMeasure', {\n    'first': JSON_INTERPRETER.molTo(first),\n    'second': JSON_INTERPRETER.molTo(second)\n  }, options, function (content) {\n    callback(content.value);\n  }, errorback);\n};\n\niChemLabs.kekulize = function (mol, options, callback, errorback) {\n  this._contactServer('kekulize', {\n    'mol': JSON_INTERPRETER.molTo(mol)\n  }, options, function (content) {\n    callback(JSON_INTERPRETER.molFrom(content.mol));\n  }, errorback);\n};\n\niChemLabs.mechanismMatch = function (arrow, targets, options, callback, errorback) {\n  this._contactServer('matchMechanism', {\n    'arrow': arrow,\n    'targets': targets\n  }, options, function (content) {\n    callback(content);\n  }, errorback);\n};\n\niChemLabs.optimize = function (mol, options, callback, errorback) {\n  this._contactServer('optimize', {\n    'mol': JSON_INTERPRETER.molTo(mol)\n  }, options, function (content) {\n    var optimized = JSON_INTERPRETER.molFrom(content.mol);\n\n    if (options.dimension === 2) {\n      for (var i = 0, ii = optimized.atoms.length; i < ii; i++) {\n        mol.atoms[i].x = optimized.atoms[i].x;\n        mol.atoms[i].y = optimized.atoms[i].y;\n      }\n\n      callback();\n    } else if (options.dimension === 3) {\n      for (var i = 0, ii = optimized.atoms.length; i < ii; i++) {\n        optimized.atoms[i].x /= 20;\n        optimized.atoms[i].y /= -20;\n        optimized.atoms[i].z /= 20;\n      }\n\n      callback(optimized);\n    }\n  }, errorback);\n};\n\niChemLabs.readIUPACName = function (iupac, options, callback, errorback) {\n  this._contactServer('readIUPACName', {\n    'iupac': iupac\n  }, options, function (content) {\n    callback(JSON_INTERPRETER.molFrom(content.mol));\n  }, errorback);\n};\n\niChemLabs.readSMILES = function (smiles, options, callback, errorback) {\n  this._contactServer('readSMILES', {\n    'smiles': smiles\n  }, options, function (content) {\n    callback(JSON_INTERPRETER.molFrom(content.mol));\n  }, errorback);\n};\n\niChemLabs.saveFile = function (mol, options, callback, errorback) {\n  this._contactServer('saveFile', {\n    'mol': JSON_INTERPRETER.molTo(mol)\n  }, options, function (content) {\n    callback(content.link);\n  }, errorback);\n};\n\niChemLabs.simulate13CNMR = function (mol, options, callback, errorback) {\n  options.nucleus = 'C';\n  options.isotope = 13;\n\n  this._contactServer('simulateNMR', {\n    'mol': JSON_INTERPRETER.molTo(mol)\n  }, options, function (content) {\n    callback(c.readJCAMP(content.jcamp));\n  }, errorback);\n};\n\niChemLabs.simulate1HNMR = function (mol, options, callback, errorback) {\n  options.nucleus = 'H';\n  options.isotope = 1;\n\n  this._contactServer('simulateNMR', {\n    'mol': JSON_INTERPRETER.molTo(mol)\n  }, options, function (content) {\n    callback(c.readJCAMP(content.jcamp));\n  }, errorback);\n};\n\niChemLabs.simulateMassParentPeak = function (mol, options, callback, errorback) {\n  this._contactServer('simulateMassParentPeak', {\n    'mol': JSON_INTERPRETER.molTo(mol)\n  }, options, function (content) {\n    callback(c.readJCAMP(content.jcamp));\n  }, errorback);\n};\n\niChemLabs.writeSMILES = function (mol, options, callback, errorback) {\n  this._contactServer('writeSMILES', {\n    'mol': JSON_INTERPRETER.molTo(mol)\n  }, options, function (content) {\n    callback(content.smiles);\n  }, errorback);\n};\n\niChemLabs.version = function (options, callback, errorback) {\n  this._contactServer('version', {}, options, function (content) {\n    callback(content.value);\n  }, errorback);\n};\n\niChemLabs.checkForUpdates = function (options) {\n  this._contactServer('checkForUpdates', {\n    'value': location.href\n  }, options, function (content) {}, function () {});\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/iChemLabs.js\n");

/***/ }),

/***/ "./src/ChemDoodle/index.js":
/*!*********************************!*\
  !*** ./src/ChemDoodle/index.js ***!
  \*********************************/
/*! exports provided: _Canvas, FileCanvas, HyperlinkCanvas, MolGrabberCanvas, SlideshowCanvas, TransformCanvas, ViewerCanvas, _SpectrumCanvas, ObserverCanvas, OverlayCanvas, PerspectiveCanvas, _AnimatorCanvas, RotatorCanvas, _Canvas3D, MovieCanvas3D, getVersion, SYMBOLS, ELEMENT, RESIDUE, default_backgroundColor, default_scale, default_rotateAngle, default_bondLength_2D, default_angstromsPerBondLength, default_lightDirection_3D, default_lightDiffuseColor_3D, default_lightSpecularColor_3D, default_projectionPerspective_3D, default_projectionPerspectiveVerticalFieldOfView_3D, default_projectionOrthoWidth_3D, default_projectionWidthHeightRatio_3D, default_projectionFrontCulling_3D, default_projectionBackCulling_3D, default_cullBackFace_3D, default_fog_mode_3D, default_fog_color_3D, default_fog_start_3D, default_fog_end_3D, default_fog_density_3D, default_shadow_3D, default_shadow_intensity_3D, default_flat_color_3D, default_antialias_3D, default_gammaCorrection_3D, default_colorHover, default_colorSelect, default_colorError, default_colorPreview, default_ssao_3D, default_ssao_kernel_radius, default_ssao_kernel_samples, default_ssao_power, default_outline_3D, default_outline_thickness, default_outline_normal_threshold, default_outline_depth_threshold, default_fxaa_edgeThreshold, default_fxaa_edgeThresholdMin, default_fxaa_searchSteps, default_fxaa_searchThreshold, default_fxaa_subpixCap, default_fxaa_subpixTrim, default_atoms_display, default_atoms_color, default_atoms_font_size_2D, default_atoms_font_families_2D, default_atoms_font_bold_2D, default_atoms_font_italic_2D, default_atoms_circles_2D, default_atoms_circleDiameter_2D, default_atoms_circleBorderWidth_2D, default_atoms_lonePairDistance_2D, default_atoms_lonePairSpread_2D, default_atoms_lonePairDiameter_2D, default_atoms_useJMOLColors, default_atoms_usePYMOLColors, default_atoms_HBlack_2D, default_atoms_implicitHydrogens_2D, default_atoms_displayTerminalCarbonLabels_2D, default_atoms_showHiddenCarbons_2D, default_atoms_showAttributedCarbons_2D, default_atoms_displayAllCarbonLabels_2D, default_atoms_resolution_3D, default_atoms_sphereDiameter_3D, default_atoms_useVDWDiameters_3D, default_atoms_vdwMultiplier_3D, default_atoms_materialAmbientColor_3D, default_atoms_materialSpecularColor_3D, default_atoms_materialShininess_3D, default_atoms_nonBondedAsStars_3D, default_atoms_displayLabels_3D, default_bonds_display, default_bonds_color, default_bonds_width_2D, default_bonds_useAbsoluteSaturationWidths_2D, default_bonds_saturationWidth_2D, default_bonds_saturationWidthAbs_2D, default_bonds_ends_2D, default_bonds_splitColor, default_bonds_colorGradient, default_bonds_saturationAngle_2D, default_bonds_symmetrical_2D, default_bonds_clearOverlaps_2D, default_bonds_overlapClearWidth_2D, default_bonds_atomLabelBuffer_2D, default_bonds_wedgeThickness_2D, default_bonds_wavyLength_2D, default_bonds_hashWidth_2D, default_bonds_hashSpacing_2D, default_bonds_dotSize_2D, default_bonds_lewisStyle_2D, default_bonds_showBondOrders_3D, default_bonds_resolution_3D, default_bonds_renderAsLines_3D, default_bonds_cylinderDiameter_3D, default_bonds_pillLatitudeResolution_3D, default_bonds_pillLongitudeResolution_3D, default_bonds_pillHeight_3D, default_bonds_pillSpacing_3D, default_bonds_pillDiameter_3D, default_bonds_materialAmbientColor_3D, default_bonds_materialSpecularColor_3D, default_bonds_materialShininess_3D, default_proteins_displayRibbon, default_proteins_displayBackbone, default_proteins_backboneThickness, default_proteins_backboneColor, default_proteins_ribbonCartoonize, default_proteins_displayPipePlank, default_proteins_residueColor, default_proteins_primaryColor, default_proteins_secondaryColor, default_proteins_ribbonCartoonHelixPrimaryColor, default_proteins_ribbonCartoonHelixSecondaryColor, default_proteins_ribbonCartoonSheetColor, default_proteins_tubeColor, default_proteins_tubeResolution_3D, default_proteins_ribbonThickness, default_proteins_tubeThickness, default_proteins_plankSheetWidth, default_proteins_cylinderHelixDiameter, default_proteins_verticalResolution, default_proteins_horizontalResolution, default_proteins_materialAmbientColor_3D, default_proteins_materialSpecularColor_3D, default_proteins_materialShininess_3D, default_nucleics_display, default_nucleics_tubeColor, default_nucleics_baseColor, default_nucleics_residueColor, default_nucleics_tubeThickness, default_nucleics_tubeResolution_3D, default_nucleics_verticalResolution, default_nucleics_materialAmbientColor_3D, default_nucleics_materialSpecularColor_3D, default_nucleics_materialShininess_3D, default_macro_displayAtoms, default_macro_displayBonds, default_macro_atomToLigandDistance, default_macro_showWater, default_macro_colorByChain, default_macro_rainbowColors, default_surfaces_display, default_surfaces_alpha, default_surfaces_style, default_surfaces_color, default_surfaces_materialAmbientColor_3D, default_surfaces_materialSpecularColor_3D, default_surfaces_materialShininess_3D, default_plots_color, default_plots_width, default_plots_showIntegration, default_plots_integrationColor, default_plots_integrationLineWidth, default_plots_showGrid, default_plots_gridColor, default_plots_gridLineWidth, default_plots_showYAxis, default_plots_flipXAxis, default_text_font_size, default_text_font_families, default_text_font_bold, default_text_font_italic, default_text_font_stroke_3D, default_text_color, default_shapes_color, default_shapes_lineWidth, default_shapes_pointSize, default_shapes_arrowLength_2D, default_compass_display, default_compass_axisXColor_3D, default_compass_axisYColor_3D, default_compass_axisZColor_3D, default_compass_size_3D, default_compass_resolution_3D, default_compass_displayText_3D, default_compass_type_3D, default_measurement_update_3D, default_measurement_angleBands_3D, default_measurement_displayText_3D, readJSON, writeJSON */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getVersion\", function() { return getVersion; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SYMBOLS\", function() { return SYMBOLS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ELEMENT\", function() { return ELEMENT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RESIDUE\", function() { return RESIDUE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_backgroundColor\", function() { return default_backgroundColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_scale\", function() { return default_scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_rotateAngle\", function() { return default_rotateAngle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bondLength_2D\", function() { return default_bondLength_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_angstromsPerBondLength\", function() { return default_angstromsPerBondLength; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_lightDirection_3D\", function() { return default_lightDirection_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_lightDiffuseColor_3D\", function() { return default_lightDiffuseColor_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_lightSpecularColor_3D\", function() { return default_lightSpecularColor_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_projectionPerspective_3D\", function() { return default_projectionPerspective_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_projectionPerspectiveVerticalFieldOfView_3D\", function() { return default_projectionPerspectiveVerticalFieldOfView_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_projectionOrthoWidth_3D\", function() { return default_projectionOrthoWidth_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_projectionWidthHeightRatio_3D\", function() { return default_projectionWidthHeightRatio_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_projectionFrontCulling_3D\", function() { return default_projectionFrontCulling_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_projectionBackCulling_3D\", function() { return default_projectionBackCulling_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_cullBackFace_3D\", function() { return default_cullBackFace_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_fog_mode_3D\", function() { return default_fog_mode_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_fog_color_3D\", function() { return default_fog_color_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_fog_start_3D\", function() { return default_fog_start_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_fog_end_3D\", function() { return default_fog_end_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_fog_density_3D\", function() { return default_fog_density_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_shadow_3D\", function() { return default_shadow_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_shadow_intensity_3D\", function() { return default_shadow_intensity_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_flat_color_3D\", function() { return default_flat_color_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_antialias_3D\", function() { return default_antialias_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_gammaCorrection_3D\", function() { return default_gammaCorrection_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_colorHover\", function() { return default_colorHover; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_colorSelect\", function() { return default_colorSelect; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_colorError\", function() { return default_colorError; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_colorPreview\", function() { return default_colorPreview; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_ssao_3D\", function() { return default_ssao_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_ssao_kernel_radius\", function() { return default_ssao_kernel_radius; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_ssao_kernel_samples\", function() { return default_ssao_kernel_samples; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_ssao_power\", function() { return default_ssao_power; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_outline_3D\", function() { return default_outline_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_outline_thickness\", function() { return default_outline_thickness; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_outline_normal_threshold\", function() { return default_outline_normal_threshold; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_outline_depth_threshold\", function() { return default_outline_depth_threshold; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_fxaa_edgeThreshold\", function() { return default_fxaa_edgeThreshold; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_fxaa_edgeThresholdMin\", function() { return default_fxaa_edgeThresholdMin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_fxaa_searchSteps\", function() { return default_fxaa_searchSteps; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_fxaa_searchThreshold\", function() { return default_fxaa_searchThreshold; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_fxaa_subpixCap\", function() { return default_fxaa_subpixCap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_fxaa_subpixTrim\", function() { return default_fxaa_subpixTrim; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_display\", function() { return default_atoms_display; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_color\", function() { return default_atoms_color; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_font_size_2D\", function() { return default_atoms_font_size_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_font_families_2D\", function() { return default_atoms_font_families_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_font_bold_2D\", function() { return default_atoms_font_bold_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_font_italic_2D\", function() { return default_atoms_font_italic_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_circles_2D\", function() { return default_atoms_circles_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_circleDiameter_2D\", function() { return default_atoms_circleDiameter_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_circleBorderWidth_2D\", function() { return default_atoms_circleBorderWidth_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_lonePairDistance_2D\", function() { return default_atoms_lonePairDistance_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_lonePairSpread_2D\", function() { return default_atoms_lonePairSpread_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_lonePairDiameter_2D\", function() { return default_atoms_lonePairDiameter_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_useJMOLColors\", function() { return default_atoms_useJMOLColors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_usePYMOLColors\", function() { return default_atoms_usePYMOLColors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_HBlack_2D\", function() { return default_atoms_HBlack_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_implicitHydrogens_2D\", function() { return default_atoms_implicitHydrogens_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_displayTerminalCarbonLabels_2D\", function() { return default_atoms_displayTerminalCarbonLabels_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_showHiddenCarbons_2D\", function() { return default_atoms_showHiddenCarbons_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_showAttributedCarbons_2D\", function() { return default_atoms_showAttributedCarbons_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_displayAllCarbonLabels_2D\", function() { return default_atoms_displayAllCarbonLabels_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_resolution_3D\", function() { return default_atoms_resolution_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_sphereDiameter_3D\", function() { return default_atoms_sphereDiameter_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_useVDWDiameters_3D\", function() { return default_atoms_useVDWDiameters_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_vdwMultiplier_3D\", function() { return default_atoms_vdwMultiplier_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_materialAmbientColor_3D\", function() { return default_atoms_materialAmbientColor_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_materialSpecularColor_3D\", function() { return default_atoms_materialSpecularColor_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_materialShininess_3D\", function() { return default_atoms_materialShininess_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_nonBondedAsStars_3D\", function() { return default_atoms_nonBondedAsStars_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_atoms_displayLabels_3D\", function() { return default_atoms_displayLabels_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_display\", function() { return default_bonds_display; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_color\", function() { return default_bonds_color; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_width_2D\", function() { return default_bonds_width_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_useAbsoluteSaturationWidths_2D\", function() { return default_bonds_useAbsoluteSaturationWidths_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_saturationWidth_2D\", function() { return default_bonds_saturationWidth_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_saturationWidthAbs_2D\", function() { return default_bonds_saturationWidthAbs_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_ends_2D\", function() { return default_bonds_ends_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_splitColor\", function() { return default_bonds_splitColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_colorGradient\", function() { return default_bonds_colorGradient; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_saturationAngle_2D\", function() { return default_bonds_saturationAngle_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_symmetrical_2D\", function() { return default_bonds_symmetrical_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_clearOverlaps_2D\", function() { return default_bonds_clearOverlaps_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_overlapClearWidth_2D\", function() { return default_bonds_overlapClearWidth_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_atomLabelBuffer_2D\", function() { return default_bonds_atomLabelBuffer_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_wedgeThickness_2D\", function() { return default_bonds_wedgeThickness_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_wavyLength_2D\", function() { return default_bonds_wavyLength_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_hashWidth_2D\", function() { return default_bonds_hashWidth_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_hashSpacing_2D\", function() { return default_bonds_hashSpacing_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_dotSize_2D\", function() { return default_bonds_dotSize_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_lewisStyle_2D\", function() { return default_bonds_lewisStyle_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_showBondOrders_3D\", function() { return default_bonds_showBondOrders_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_resolution_3D\", function() { return default_bonds_resolution_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_renderAsLines_3D\", function() { return default_bonds_renderAsLines_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_cylinderDiameter_3D\", function() { return default_bonds_cylinderDiameter_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_pillLatitudeResolution_3D\", function() { return default_bonds_pillLatitudeResolution_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_pillLongitudeResolution_3D\", function() { return default_bonds_pillLongitudeResolution_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_pillHeight_3D\", function() { return default_bonds_pillHeight_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_pillSpacing_3D\", function() { return default_bonds_pillSpacing_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_pillDiameter_3D\", function() { return default_bonds_pillDiameter_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_materialAmbientColor_3D\", function() { return default_bonds_materialAmbientColor_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_materialSpecularColor_3D\", function() { return default_bonds_materialSpecularColor_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_bonds_materialShininess_3D\", function() { return default_bonds_materialShininess_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_displayRibbon\", function() { return default_proteins_displayRibbon; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_displayBackbone\", function() { return default_proteins_displayBackbone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_backboneThickness\", function() { return default_proteins_backboneThickness; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_backboneColor\", function() { return default_proteins_backboneColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_ribbonCartoonize\", function() { return default_proteins_ribbonCartoonize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_displayPipePlank\", function() { return default_proteins_displayPipePlank; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_residueColor\", function() { return default_proteins_residueColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_primaryColor\", function() { return default_proteins_primaryColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_secondaryColor\", function() { return default_proteins_secondaryColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_ribbonCartoonHelixPrimaryColor\", function() { return default_proteins_ribbonCartoonHelixPrimaryColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_ribbonCartoonHelixSecondaryColor\", function() { return default_proteins_ribbonCartoonHelixSecondaryColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_ribbonCartoonSheetColor\", function() { return default_proteins_ribbonCartoonSheetColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_tubeColor\", function() { return default_proteins_tubeColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_tubeResolution_3D\", function() { return default_proteins_tubeResolution_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_ribbonThickness\", function() { return default_proteins_ribbonThickness; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_tubeThickness\", function() { return default_proteins_tubeThickness; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_plankSheetWidth\", function() { return default_proteins_plankSheetWidth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_cylinderHelixDiameter\", function() { return default_proteins_cylinderHelixDiameter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_verticalResolution\", function() { return default_proteins_verticalResolution; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_horizontalResolution\", function() { return default_proteins_horizontalResolution; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_materialAmbientColor_3D\", function() { return default_proteins_materialAmbientColor_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_materialSpecularColor_3D\", function() { return default_proteins_materialSpecularColor_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_proteins_materialShininess_3D\", function() { return default_proteins_materialShininess_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_nucleics_display\", function() { return default_nucleics_display; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_nucleics_tubeColor\", function() { return default_nucleics_tubeColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_nucleics_baseColor\", function() { return default_nucleics_baseColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_nucleics_residueColor\", function() { return default_nucleics_residueColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_nucleics_tubeThickness\", function() { return default_nucleics_tubeThickness; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_nucleics_tubeResolution_3D\", function() { return default_nucleics_tubeResolution_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_nucleics_verticalResolution\", function() { return default_nucleics_verticalResolution; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_nucleics_materialAmbientColor_3D\", function() { return default_nucleics_materialAmbientColor_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_nucleics_materialSpecularColor_3D\", function() { return default_nucleics_materialSpecularColor_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_nucleics_materialShininess_3D\", function() { return default_nucleics_materialShininess_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_macro_displayAtoms\", function() { return default_macro_displayAtoms; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_macro_displayBonds\", function() { return default_macro_displayBonds; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_macro_atomToLigandDistance\", function() { return default_macro_atomToLigandDistance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_macro_showWater\", function() { return default_macro_showWater; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_macro_colorByChain\", function() { return default_macro_colorByChain; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_macro_rainbowColors\", function() { return default_macro_rainbowColors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_surfaces_display\", function() { return default_surfaces_display; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_surfaces_alpha\", function() { return default_surfaces_alpha; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_surfaces_style\", function() { return default_surfaces_style; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_surfaces_color\", function() { return default_surfaces_color; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_surfaces_materialAmbientColor_3D\", function() { return default_surfaces_materialAmbientColor_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_surfaces_materialSpecularColor_3D\", function() { return default_surfaces_materialSpecularColor_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_surfaces_materialShininess_3D\", function() { return default_surfaces_materialShininess_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_plots_color\", function() { return default_plots_color; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_plots_width\", function() { return default_plots_width; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_plots_showIntegration\", function() { return default_plots_showIntegration; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_plots_integrationColor\", function() { return default_plots_integrationColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_plots_integrationLineWidth\", function() { return default_plots_integrationLineWidth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_plots_showGrid\", function() { return default_plots_showGrid; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_plots_gridColor\", function() { return default_plots_gridColor; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_plots_gridLineWidth\", function() { return default_plots_gridLineWidth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_plots_showYAxis\", function() { return default_plots_showYAxis; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_plots_flipXAxis\", function() { return default_plots_flipXAxis; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_text_font_size\", function() { return default_text_font_size; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_text_font_families\", function() { return default_text_font_families; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_text_font_bold\", function() { return default_text_font_bold; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_text_font_italic\", function() { return default_text_font_italic; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_text_font_stroke_3D\", function() { return default_text_font_stroke_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_text_color\", function() { return default_text_color; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_shapes_color\", function() { return default_shapes_color; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_shapes_lineWidth\", function() { return default_shapes_lineWidth; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_shapes_pointSize\", function() { return default_shapes_pointSize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_shapes_arrowLength_2D\", function() { return default_shapes_arrowLength_2D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_compass_display\", function() { return default_compass_display; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_compass_axisXColor_3D\", function() { return default_compass_axisXColor_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_compass_axisYColor_3D\", function() { return default_compass_axisYColor_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_compass_axisZColor_3D\", function() { return default_compass_axisZColor_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_compass_size_3D\", function() { return default_compass_size_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_compass_resolution_3D\", function() { return default_compass_resolution_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_compass_displayText_3D\", function() { return default_compass_displayText_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_compass_type_3D\", function() { return default_compass_type_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_measurement_update_3D\", function() { return default_measurement_update_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_measurement_angleBands_3D\", function() { return default_measurement_angleBands_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default_measurement_displayText_3D\", function() { return default_measurement_displayText_3D; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"readJSON\", function() { return readJSON; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"writeJSON\", function() { return writeJSON; });\n/* harmony import */ var _io_JSONInterpreter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./io/JSONInterpreter */ \"./src/ChemDoodle/io/JSONInterpreter.js\");\n/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_Canvas */ \"./src/ChemDoodle/_Canvas.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"_Canvas\", function() { return _Canvas__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _FileCanvas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FileCanvas */ \"./src/ChemDoodle/FileCanvas.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"FileCanvas\", function() { return _FileCanvas__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _HyperlinkCanvas__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./HyperlinkCanvas */ \"./src/ChemDoodle/HyperlinkCanvas.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"HyperlinkCanvas\", function() { return _HyperlinkCanvas__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n/* harmony import */ var _MolGrabberCanvas__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MolGrabberCanvas */ \"./src/ChemDoodle/MolGrabberCanvas.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"MolGrabberCanvas\", function() { return _MolGrabberCanvas__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; });\n\n/* harmony import */ var _SlideshowCanvas__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SlideshowCanvas */ \"./src/ChemDoodle/SlideshowCanvas.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"SlideshowCanvas\", function() { return _SlideshowCanvas__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; });\n\n/* harmony import */ var _TransformCanvas__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./TransformCanvas */ \"./src/ChemDoodle/TransformCanvas.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TransformCanvas\", function() { return _TransformCanvas__WEBPACK_IMPORTED_MODULE_6__[\"default\"]; });\n\n/* harmony import */ var _ViewerCanvas__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ViewerCanvas */ \"./src/ChemDoodle/ViewerCanvas.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ViewerCanvas\", function() { return _ViewerCanvas__WEBPACK_IMPORTED_MODULE_7__[\"default\"]; });\n\n/* harmony import */ var _SpectrumCanvas__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./_SpectrumCanvas */ \"./src/ChemDoodle/_SpectrumCanvas.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"_SpectrumCanvas\", function() { return _SpectrumCanvas__WEBPACK_IMPORTED_MODULE_8__[\"default\"]; });\n\n/* harmony import */ var _ObserverCanvas__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ObserverCanvas */ \"./src/ChemDoodle/ObserverCanvas.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ObserverCanvas\", function() { return _ObserverCanvas__WEBPACK_IMPORTED_MODULE_9__[\"default\"]; });\n\n/* harmony import */ var _OverlayCanvas__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./OverlayCanvas */ \"./src/ChemDoodle/OverlayCanvas.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"OverlayCanvas\", function() { return _OverlayCanvas__WEBPACK_IMPORTED_MODULE_10__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PerspectiveCanvas\", function() { return _OverlayCanvas__WEBPACK_IMPORTED_MODULE_10__[\"default\"]; });\n\n/* harmony import */ var _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./_AnimatorCanvas */ \"./src/ChemDoodle/_AnimatorCanvas.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"_AnimatorCanvas\", function() { return _AnimatorCanvas__WEBPACK_IMPORTED_MODULE_11__[\"default\"]; });\n\n/* harmony import */ var _RotatorCanvas__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./RotatorCanvas */ \"./src/ChemDoodle/RotatorCanvas.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"RotatorCanvas\", function() { return _RotatorCanvas__WEBPACK_IMPORTED_MODULE_12__[\"default\"]; });\n\n/* harmony import */ var _Canvas3D__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./_Canvas3D */ \"./src/ChemDoodle/_Canvas3D.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"_Canvas3D\", function() { return _Canvas3D__WEBPACK_IMPORTED_MODULE_13__[\"default\"]; });\n\n/* harmony import */ var _MovieCanvas3D__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./MovieCanvas3D */ \"./src/ChemDoodle/MovieCanvas3D.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"MovieCanvas3D\", function() { return _MovieCanvas3D__WEBPACK_IMPORTED_MODULE_14__[\"default\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar m = Math;\nvar VERSION = '8.0.0';\nfunction getVersion() {\n  return VERSION;\n} // all symbols\n\nvar SYMBOLS = ['H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Tc', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm', 'Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og'];\nvar ELEMENT = function (SYMBOLS, undefined) {\n  'use strict';\n\n  var E = [];\n\n  function Element(symbol, name, atomicNumber, addH, color, covalentRadius, vdWRadius, valency, mass) {\n    this.symbol = symbol;\n    this.name = name;\n    this.atomicNumber = atomicNumber;\n    this.addH = addH;\n    this.jmolColor = this.pymolColor = color;\n    this.covalentRadius = covalentRadius;\n    this.vdWRadius = vdWRadius;\n    this.valency = valency;\n    this.mass = mass;\n  }\n\n  E.H = new Element('H', 'Hydrogen', 1, false, '#FFFFFF', 0.31, 1.1, 1, 1);\n  E.He = new Element('He', 'Helium', 2, false, '#D9FFFF', 0.28, 1.4, 0, 4);\n  E.Li = new Element('Li', 'Lithium', 3, false, '#CC80FF', 1.28, 1.82, 1, 7);\n  E.Be = new Element('Be', 'Beryllium', 4, false, '#C2FF00', 0.96, 1.53, 2, 9);\n  E.B = new Element('B', 'Boron', 5, true, '#FFB5B5', 0.84, 1.92, 3, 11);\n  E.C = new Element('C', 'Carbon', 6, true, '#909090', 0.76, 1.7, 4, 12);\n  E.N = new Element('N', 'Nitrogen', 7, true, '#3050F8', 0.71, 1.55, 3, 14);\n  E.O = new Element('O', 'Oxygen', 8, true, '#FF0D0D', 0.66, 1.52, 2, 16);\n  E.F = new Element('F', 'Fluorine', 9, true, '#90E050', 0.57, 1.47, 1, 19);\n  E.Ne = new Element('Ne', 'Neon', 10, false, '#B3E3F5', 0.58, 1.54, 0, 20);\n  E.Na = new Element('Na', 'Sodium', 11, false, '#AB5CF2', 1.66, 2.27, 1, 23);\n  E.Mg = new Element('Mg', 'Magnesium', 12, false, '#8AFF00', 1.41, 1.73, 0, 24);\n  E.Al = new Element('Al', 'Aluminum', 13, false, '#BFA6A6', 1.21, 1.84, 0, 27);\n  E.Si = new Element('Si', 'Silicon', 14, true, '#F0C8A0', 1.11, 2.1, 4, 28);\n  E.P = new Element('P', 'Phosphorus', 15, true, '#FF8000', 1.07, 1.8, 3, 31);\n  E.S = new Element('S', 'Sulfur', 16, true, '#FFFF30', 1.05, 1.8, 2, 32);\n  E.Cl = new Element('Cl', 'Chlorine', 17, true, '#1FF01F', 1.02, 1.75, 1, 35);\n  E.Ar = new Element('Ar', 'Argon', 18, false, '#80D1E3', 1.06, 1.88, 0, 40);\n  E.K = new Element('K', 'Potassium', 19, false, '#8F40D4', 2.03, 2.75, 0, 39);\n  E.Ca = new Element('Ca', 'Calcium', 20, false, '#3DFF00', 1.76, 2.31, 0, 40);\n  E.Sc = new Element('Sc', 'Scandium', 21, false, '#E6E6E6', 1.7, 0, 0, 45);\n  E.Ti = new Element('Ti', 'Titanium', 22, false, '#BFC2C7', 1.6, 0, 1, 48);\n  E.V = new Element('V', 'Vanadium', 23, false, '#A6A6AB', 1.53, 0, 1, 51);\n  E.Cr = new Element('Cr', 'Chromium', 24, false, '#8A99C7', 1.39, 0, 2, 52);\n  E.Mn = new Element('Mn', 'Manganese', 25, false, '#9C7AC7', 1.39, 0, 3, 55);\n  E.Fe = new Element('Fe', 'Iron', 26, false, '#E06633', 1.32, 0, 2, 56);\n  E.Co = new Element('Co', 'Cobalt', 27, false, '#F090A0', 1.26, 0, 1, 59);\n  E.Ni = new Element('Ni', 'Nickel', 28, false, '#50D050', 1.24, 1.63, 1, 58);\n  E.Cu = new Element('Cu', 'Copper', 29, false, '#C88033', 1.32, 1.4, 0, 63);\n  E.Zn = new Element('Zn', 'Zinc', 30, false, '#7D80B0', 1.22, 1.39, 0, 64);\n  E.Ga = new Element('Ga', 'Gallium', 31, false, '#C28F8F', 1.22, 1.87, 0, 69);\n  E.Ge = new Element('Ge', 'Germanium', 32, false, '#668F8F', 1.2, 2.11, 4, 74);\n  E.As = new Element('As', 'Arsenic', 33, true, '#BD80E3', 1.19, 1.85, 3, 75);\n  E.Se = new Element('Se', 'Selenium', 34, true, '#FFA100', 1.2, 1.9, 2, 80);\n  E.Br = new Element('Br', 'Bromine', 35, true, '#A62929', 1.2, 1.85, 1, 79);\n  E.Kr = new Element('Kr', 'Krypton', 36, false, '#5CB8D1', 1.16, 2.02, 0, 84);\n  E.Rb = new Element('Rb', 'Rubidium', 37, false, '#702EB0', 2.2, 3.03, 0, 85);\n  E.Sr = new Element('Sr', 'Strontium', 38, false, '#00FF00', 1.95, 2.49, 0, 88);\n  E.Y = new Element('Y', 'Yttrium', 39, false, '#94FFFF', 1.9, 0, 0, 89);\n  E.Zr = new Element('Zr', 'Zirconium', 40, false, '#94E0E0', 1.75, 0, 0, 90);\n  E.Nb = new Element('Nb', 'Niobium', 41, false, '#73C2C9', 1.64, 0, 1, 93);\n  E.Mo = new Element('Mo', 'Molybdenum', 42, false, '#54B5B5', 1.54, 0, 2, 98);\n  E.Tc = new Element('Tc', 'Technetium', 43, false, '#3B9E9E', 1.47, 0, 3, 0);\n  E.Ru = new Element('Ru', 'Ruthenium', 44, false, '#248F8F', 1.46, 0, 2, 102);\n  E.Rh = new Element('Rh', 'Rhodium', 45, false, '#0A7D8C', 1.42, 0, 1, 103);\n  E.Pd = new Element('Pd', 'Palladium', 46, false, '#006985', 1.39, 1.63, 0, 106);\n  E.Ag = new Element('Ag', 'Silver', 47, false, '#C0C0C0', 1.45, 1.72, 0, 107);\n  E.Cd = new Element('Cd', 'Cadmium', 48, false, '#FFD98F', 1.44, 1.58, 0, 114);\n  E.In = new Element('In', 'Indium', 49, false, '#A67573', 1.42, 1.93, 0, 115);\n  E.Sn = new Element('Sn', 'Tin', 50, false, '#668080', 1.39, 2.17, 4, 120);\n  E.Sb = new Element('Sb', 'Antimony', 51, false, '#9E63B5', 1.39, 2.06, 3, 121);\n  E.Te = new Element('Te', 'Tellurium', 52, true, '#D47A00', 1.38, 2.06, 2, 130);\n  E.I = new Element('I', 'Iodine', 53, true, '#940094', 1.39, 1.98, 1, 127);\n  E.Xe = new Element('Xe', 'Xenon', 54, false, '#429EB0', 1.4, 2.16, 0, 132);\n  E.Cs = new Element('Cs', 'Cesium', 55, false, '#57178F', 2.44, 3.43, 0, 133);\n  E.Ba = new Element('Ba', 'Barium', 56, false, '#00C900', 2.15, 2.68, 0, 138);\n  E.La = new Element('La', 'Lanthanum', 57, false, '#70D4FF', 2.07, 0, 0, 139);\n  E.Ce = new Element('Ce', 'Cerium', 58, false, '#FFFFC7', 2.04, 0, 0, 140);\n  E.Pr = new Element('Pr', 'Praseodymium', 59, false, '#D9FFC7', 2.03, 0, 0, 141);\n  E.Nd = new Element('Nd', 'Neodymium', 60, false, '#C7FFC7', 2.01, 0, 0, 142);\n  E.Pm = new Element('Pm', 'Promethium', 61, false, '#A3FFC7', 1.99, 0, 0, 0);\n  E.Sm = new Element('Sm', 'Samarium', 62, false, '#8FFFC7', 1.98, 0, 0, 152);\n  E.Eu = new Element('Eu', 'Europium', 63, false, '#61FFC7', 1.98, 0, 0, 153);\n  E.Gd = new Element('Gd', 'Gadolinium', 64, false, '#45FFC7', 1.96, 0, 0, 158);\n  E.Tb = new Element('Tb', 'Terbium', 65, false, '#30FFC7', 1.94, 0, 0, 159);\n  E.Dy = new Element('Dy', 'Dysprosium', 66, false, '#1FFFC7', 1.92, 0, 0, 164);\n  E.Ho = new Element('Ho', 'Holmium', 67, false, '#00FF9C', 1.92, 0, 0, 165);\n  E.Er = new Element('Er', 'Erbium', 68, false, '#00E675', 1.89, 0, 0, 166);\n  E.Tm = new Element('Tm', 'Thulium', 69, false, '#00D452', 1.9, 0, 0, 169);\n  E.Yb = new Element('Yb', 'Ytterbium', 70, false, '#00BF38', 1.87, 0, 0, 174);\n  E.Lu = new Element('Lu', 'Lutetium', 71, false, '#00AB24', 1.87, 0, 0, 175);\n  E.Hf = new Element('Hf', 'Hafnium', 72, false, '#4DC2FF', 1.75, 0, 0, 180);\n  E.Ta = new Element('Ta', 'Tantalum', 73, false, '#4DA6FF', 1.7, 0, 1, 181);\n  E.W = new Element('W', 'Tungsten', 74, false, '#2194D6', 1.62, 0, 2, 184);\n  E.Re = new Element('Re', 'Rhenium', 75, false, '#267DAB', 1.51, 0, 3, 187);\n  E.Os = new Element('Os', 'Osmium', 76, false, '#266696', 1.44, 0, 2, 192);\n  E.Ir = new Element('Ir', 'Iridium', 77, false, '#175487', 1.41, 0, 3, 193);\n  E.Pt = new Element('Pt', 'Platinum', 78, false, '#D0D0E0', 1.36, 1.75, 0, 195);\n  E.Au = new Element('Au', 'Gold', 79, false, '#FFD123', 1.36, 1.66, 1, 197);\n  E.Hg = new Element('Hg', 'Mercury', 80, false, '#B8B8D0', 1.32, 1.55, 0, 202);\n  E.Tl = new Element('Tl', 'Thallium', 81, false, '#A6544D', 1.45, 1.96, 0, 205);\n  E.Pb = new Element('Pb', 'Lead', 82, false, '#575961', 1.46, 2.02, 4, 208);\n  E.Bi = new Element('Bi', 'Bismuth', 83, false, '#9E4FB5', 1.48, 2.07, 3, 209);\n  E.Po = new Element('Po', 'Polonium', 84, false, '#AB5C00', 1.4, 1.97, 2, 0);\n  E.At = new Element('At', 'Astatine', 85, true, '#754F45', 1.5, 2.02, 1, 0);\n  E.Rn = new Element('Rn', 'Radon', 86, false, '#428296', 1.5, 2.2, 0, 0);\n  E.Fr = new Element('Fr', 'Francium', 87, false, '#420066', 2.6, 3.48, 0, 0);\n  E.Ra = new Element('Ra', 'Radium', 88, false, '#007D00', 2.21, 2.83, 0, 0);\n  E.Ac = new Element('Ac', 'Actinium', 89, false, '#70ABFA', 2.15, 0, 0, 0);\n  E.Th = new Element('Th', 'Thorium', 90, false, '#00BAFF', 2.06, 0, 0, 232);\n  E.Pa = new Element('Pa', 'Protactinium', 91, false, '#00A1FF', 2, 0, 0, 231);\n  E.U = new Element('U', 'Uranium', 92, false, '#008FFF', 1.96, 1.86, 0, 238);\n  E.Np = new Element('Np', 'Neptunium', 93, false, '#0080FF', 1.9, 0, 0, 0);\n  E.Pu = new Element('Pu', 'Plutonium', 94, false, '#006BFF', 1.87, 0, 0, 0);\n  E.Am = new Element('Am', 'Americium', 95, false, '#545CF2', 1.8, 0, 0, 0);\n  E.Cm = new Element('Cm', 'Curium', 96, false, '#785CE3', 1.69, 0, 0, 0);\n  E.Bk = new Element('Bk', 'Berkelium', 97, false, '#8A4FE3', 0, 0, 0, 0);\n  E.Cf = new Element('Cf', 'Californium', 98, false, '#A136D4', 0, 0, 0, 0);\n  E.Es = new Element('Es', 'Einsteinium', 99, false, '#B31FD4', 0, 0, 0, 0);\n  E.Fm = new Element('Fm', 'Fermium', 100, false, '#B31FBA', 0, 0, 0, 0);\n  E.Md = new Element('Md', 'Mendelevium', 101, false, '#B30DA6', 0, 0, 0, 0);\n  E.No = new Element('No', 'Nobelium', 102, false, '#BD0D87', 0, 0, 0, 0);\n  E.Lr = new Element('Lr', 'Lawrencium', 103, false, '#C70066', 0, 0, 0, 0);\n  E.Rf = new Element('Rf', 'Rutherfordium', 104, false, '#CC0059', 0, 0, 0, 0);\n  E.Db = new Element('Db', 'Dubnium', 105, false, '#D1004F', 0, 0, 0, 0);\n  E.Sg = new Element('Sg', 'Seaborgium', 106, false, '#D90045', 0, 0, 0, 0);\n  E.Bh = new Element('Bh', 'Bohrium', 107, false, '#E00038', 0, 0, 0, 0);\n  E.Hs = new Element('Hs', 'Hassium', 108, false, '#E6002E', 0, 0, 0, 0);\n  E.Mt = new Element('Mt', 'Meitnerium', 109, false, '#EB0026', 0, 0, 0, 0);\n  E.Ds = new Element('Ds', 'Darmstadtium', 110, false, '#000000', 0, 0, 0, 0);\n  E.Rg = new Element('Rg', 'Roentgenium', 111, false, '#000000', 0, 0, 0, 0);\n  E.Cn = new Element('Cn', 'Copernicium', 112, false, '#000000', 0, 0, 0, 0);\n  E.Nh = new Element('Nh', 'Nihonium', 113, false, '#000000', 0, 0, 0, 0);\n  E.Fl = new Element('Fl', 'Flerovium', 114, false, '#000000', 0, 0, 0, 0);\n  E.Mc = new Element('Mc', 'Moscovium', 115, false, '#000000', 0, 0, 0, 0);\n  E.Lv = new Element('Lv', 'Livermorium', 116, false, '#000000', 0, 0, 0, 0);\n  E.Ts = new Element('Ts', 'Tennessine', 117, false, '#000000', 0, 0, 0, 0);\n  E.Og = new Element('Og', 'Oganesson', 118, false, '#000000', 0, 0, 0, 0);\n  E.H.pymolColor = '#E6E6E6';\n  E.C.pymolColor = '#33FF33';\n  E.N.pymolColor = '#3333FF';\n  E.O.pymolColor = '#FF4D4D';\n  E.F.pymolColor = '#B3FFFF';\n  E.S.pymolColor = '#E6C640';\n  return E;\n}(SYMBOLS);\nvar RESIDUE = function (undefined) {\n  'use strict';\n\n  var R = [];\n\n  function Residue(symbol, name, polar, aminoColor, shapelyColor, acidity) {\n    this.symbol = symbol;\n    this.name = name;\n    this.polar = polar;\n    this.aminoColor = aminoColor;\n    this.shapelyColor = shapelyColor;\n    this.acidity = acidity;\n  }\n\n  R.Ala = new Residue('Ala', 'Alanine', false, '#C8C8C8', '#8CFF8C', 0);\n  R.Arg = new Residue('Arg', 'Arginine', true, '#145AFF', '#00007C', 1);\n  R.Asn = new Residue('Asn', 'Asparagine', true, '#00DCDC', '#FF7C70', 0);\n  R.Asp = new Residue('Asp', 'Aspartic Acid', true, '#E60A0A', '#A00042', -1);\n  R.Cys = new Residue('Cys', 'Cysteine', true, '#E6E600', '#FFFF70', 0);\n  R.Gln = new Residue('Gln', 'Glutamine', true, '#00DCDC', '#FF4C4C', 0);\n  R.Glu = new Residue('Glu', 'Glutamic Acid', true, '#E60A0A', '#660000', -1);\n  R.Gly = new Residue('Gly', 'Glycine', false, '#EBEBEB', '#FFFFFF', 0);\n  R.His = new Residue('His', 'Histidine', true, '#8282D2', '#7070FF', 1);\n  R.Ile = new Residue('Ile', 'Isoleucine', false, '#0F820F', '#004C00', 0);\n  R.Leu = new Residue('Leu', 'Leucine', false, '#0F820F', '#455E45', 0);\n  R.Lys = new Residue('Lys', 'Lysine', true, '#145AFF', '#4747B8', 1);\n  R.Met = new Residue('Met', 'Methionine', false, '#E6E600', '#B8A042', 0);\n  R.Phe = new Residue('Phe', 'Phenylalanine', false, '#3232AA', '#534C52', 0);\n  R.Pro = new Residue('Pro', 'Proline', false, '#DC9682', '#525252', 0);\n  R.Ser = new Residue('Ser', 'Serine', true, '#FA9600', '#FF7042', 0);\n  R.Thr = new Residue('Thr', 'Threonine', true, '#FA9600', '#B84C00', 0);\n  R.Trp = new Residue('Trp', 'Tryptophan', true, '#B45AB4', '#4F4600', 0);\n  R.Tyr = new Residue('Tyr', 'Tyrosine', true, '#3232AA', '#8C704C', 0);\n  R.Val = new Residue('Val', 'Valine', false, '#0F820F', '#FF8CFF', 0);\n  R.Asx = new Residue('Asx', 'Asparagine/Aspartic Acid', true, '#FF69B4', '#FF00FF', 0);\n  R.Glx = new Residue('Glx', 'Glutamine/Glutamic Acid', true, '#FF69B4', '#FF00FF', 0);\n  R['*'] = new Residue('*', 'Other', false, '#BEA06E', '#FF00FF', 0);\n  R.A = new Residue('A', 'Adenine', false, '#BEA06E', '#A0A0FF', 0);\n  R.G = new Residue('G', 'Guanine', false, '#BEA06E', '#FF7070', 0);\n  R.I = new Residue('I', '', false, '#BEA06E', '#80FFFF', 0);\n  R.C = new Residue('C', 'Cytosine', false, '#BEA06E', '#FF8C4B', 0);\n  R.T = new Residue('T', 'Thymine', false, '#BEA06E', '#A0FFA0', 0);\n  R.U = new Residue('U', 'Uracil', false, '#BEA06E', '#FF8080', 0);\n  return R;\n}(); // default canvas properties\n\nvar default_backgroundColor = '#FFFFFF';\nvar default_scale = 1;\nvar default_rotateAngle = 0;\nvar default_bondLength_2D = 20;\nvar default_angstromsPerBondLength = 1.25;\nvar default_lightDirection_3D = [-.1, -.1, -1];\nvar default_lightDiffuseColor_3D = '#FFFFFF';\nvar default_lightSpecularColor_3D = '#FFFFFF';\nvar default_projectionPerspective_3D = true;\nvar default_projectionPerspectiveVerticalFieldOfView_3D = 45;\nvar default_projectionOrthoWidth_3D = 40;\nvar default_projectionWidthHeightRatio_3D = undefined;\nvar default_projectionFrontCulling_3D = .1;\nvar default_projectionBackCulling_3D = 10000;\nvar default_cullBackFace_3D = true;\nvar default_fog_mode_3D = 0;\nvar default_fog_color_3D = '#000000';\nvar default_fog_start_3D = 0;\nvar default_fog_end_3D = 1;\nvar default_fog_density_3D = 1;\nvar default_shadow_3D = false;\nvar default_shadow_intensity_3D = .85;\nvar default_flat_color_3D = false;\nvar default_antialias_3D = true;\nvar default_gammaCorrection_3D = 2.2;\nvar default_colorHover = '#885110';\nvar default_colorSelect = '#0060B2';\nvar default_colorError = '#c10000';\nvar default_colorPreview = '#00FF00'; // 3D shaders\n// default ssao\n\nvar default_ssao_3D = false;\nvar default_ssao_kernel_radius = 17;\nvar default_ssao_kernel_samples = 32;\nvar default_ssao_power = 1.0; // default outline 3D\n\nvar default_outline_3D = false;\nvar default_outline_thickness = 1.0;\nvar default_outline_normal_threshold = 0.85;\nvar default_outline_depth_threshold = 0.1; // defult fxaa antialiasing\n\nvar default_fxaa_edgeThreshold = 1.0 / 16.0;\nvar default_fxaa_edgeThresholdMin = 1.0 / 12.0;\nvar default_fxaa_searchSteps = 64;\nvar default_fxaa_searchThreshold = 1.0 / 4.0;\nvar default_fxaa_subpixCap = 1.0;\nvar default_fxaa_subpixTrim = 0.0; // default atom properties\n\nvar default_atoms_display = true;\nvar default_atoms_color = '#000000';\nvar default_atoms_font_size_2D = 12;\nvar default_atoms_font_families_2D = ['Helvetica', 'Arial', 'Dialog'];\nvar default_atoms_font_bold_2D = false;\nvar default_atoms_font_italic_2D = false;\nvar default_atoms_circles_2D = false;\nvar default_atoms_circleDiameter_2D = 10;\nvar default_atoms_circleBorderWidth_2D = 1;\nvar default_atoms_lonePairDistance_2D = 8;\nvar default_atoms_lonePairSpread_2D = 4;\nvar default_atoms_lonePairDiameter_2D = 1;\nvar default_atoms_useJMOLColors = false;\nvar default_atoms_usePYMOLColors = false;\nvar default_atoms_HBlack_2D = true;\nvar default_atoms_implicitHydrogens_2D = true;\nvar default_atoms_displayTerminalCarbonLabels_2D = false;\nvar default_atoms_showHiddenCarbons_2D = true;\nvar default_atoms_showAttributedCarbons_2D = true;\nvar default_atoms_displayAllCarbonLabels_2D = false;\nvar default_atoms_resolution_3D = 30;\nvar default_atoms_sphereDiameter_3D = .8;\nvar default_atoms_useVDWDiameters_3D = false;\nvar default_atoms_vdwMultiplier_3D = 1;\nvar default_atoms_materialAmbientColor_3D = '#000000';\nvar default_atoms_materialSpecularColor_3D = '#555555';\nvar default_atoms_materialShininess_3D = 32;\nvar default_atoms_nonBondedAsStars_3D = false;\nvar default_atoms_displayLabels_3D = false; // default bond properties\n\nvar default_bonds_display = true;\nvar default_bonds_color = '#000000';\nvar default_bonds_width_2D = 1;\nvar default_bonds_useAbsoluteSaturationWidths_2D = true;\nvar default_bonds_saturationWidth_2D = .2;\nvar default_bonds_saturationWidthAbs_2D = 5;\nvar default_bonds_ends_2D = 'round';\nvar default_bonds_splitColor = false;\nvar default_bonds_colorGradient = false;\nvar default_bonds_saturationAngle_2D = m.PI / 3;\nvar default_bonds_symmetrical_2D = false;\nvar default_bonds_clearOverlaps_2D = false;\nvar default_bonds_overlapClearWidth_2D = .5;\nvar default_bonds_atomLabelBuffer_2D = 1;\nvar default_bonds_wedgeThickness_2D = 6;\nvar default_bonds_wavyLength_2D = 4;\nvar default_bonds_hashWidth_2D = 1;\nvar default_bonds_hashSpacing_2D = 2.5;\nvar default_bonds_dotSize_2D = 2;\nvar default_bonds_lewisStyle_2D = false;\nvar default_bonds_showBondOrders_3D = false;\nvar default_bonds_resolution_3D = 30;\nvar default_bonds_renderAsLines_3D = false;\nvar default_bonds_cylinderDiameter_3D = .3;\nvar default_bonds_pillLatitudeResolution_3D = 10;\nvar default_bonds_pillLongitudeResolution_3D = 20;\nvar default_bonds_pillHeight_3D = .3;\nvar default_bonds_pillSpacing_3D = .1;\nvar default_bonds_pillDiameter_3D = .3;\nvar default_bonds_materialAmbientColor_3D = '#000000';\nvar default_bonds_materialSpecularColor_3D = '#555555';\nvar default_bonds_materialShininess_3D = 32; // default macromolecular properties\n\nvar default_proteins_displayRibbon = true;\nvar default_proteins_displayBackbone = false;\nvar default_proteins_backboneThickness = 1.5;\nvar default_proteins_backboneColor = '#CCCCCC';\nvar default_proteins_ribbonCartoonize = false;\nvar default_proteins_displayPipePlank = false; // shapely, amino, polarity, rainbow, acidity\n\nvar default_proteins_residueColor = 'none';\nvar default_proteins_primaryColor = '#FF0D0D';\nvar default_proteins_secondaryColor = '#FFFF30';\nvar default_proteins_ribbonCartoonHelixPrimaryColor = '#00E740';\nvar default_proteins_ribbonCartoonHelixSecondaryColor = '#9905FF';\nvar default_proteins_ribbonCartoonSheetColor = '#E8BB99';\nvar default_proteins_tubeColor = '#FF0D0D';\nvar default_proteins_tubeResolution_3D = 15;\nvar default_proteins_ribbonThickness = .2;\nvar default_proteins_tubeThickness = 0.5;\nvar default_proteins_plankSheetWidth = 3.5;\nvar default_proteins_cylinderHelixDiameter = 4;\nvar default_proteins_verticalResolution = 8;\nvar default_proteins_horizontalResolution = 8;\nvar default_proteins_materialAmbientColor_3D = '#000000';\nvar default_proteins_materialSpecularColor_3D = '#555555';\nvar default_proteins_materialShininess_3D = 32;\nvar default_nucleics_display = true;\nvar default_nucleics_tubeColor = '#CCCCCC';\nvar default_nucleics_baseColor = '#C10000'; // shapely, rainbow\n\nvar default_nucleics_residueColor = 'none';\nvar default_nucleics_tubeThickness = 1.5;\nvar default_nucleics_tubeResolution_3D = 15;\nvar default_nucleics_verticalResolution = 8;\nvar default_nucleics_materialAmbientColor_3D = '#000000';\nvar default_nucleics_materialSpecularColor_3D = '#555555';\nvar default_nucleics_materialShininess_3D = 32;\nvar default_macro_displayAtoms = false;\nvar default_macro_displayBonds = false;\nvar default_macro_atomToLigandDistance = -1;\nvar default_macro_showWater = false;\nvar default_macro_colorByChain = false;\nvar default_macro_rainbowColors = ['#0000FF', '#00FFFF', '#00FF00', '#FFFF00', '#FF0000']; // default surface properties\n\nvar default_surfaces_display = true;\nvar default_surfaces_alpha = .5;\nvar default_surfaces_style = 'Solid';\nvar default_surfaces_color = 'white';\nvar default_surfaces_materialAmbientColor_3D = '#000000';\nvar default_surfaces_materialSpecularColor_3D = '#000000';\nvar default_surfaces_materialShininess_3D = 32; // default spectrum properties\n\nvar default_plots_color = '#000000';\nvar default_plots_width = 1;\nvar default_plots_showIntegration = false;\nvar default_plots_integrationColor = '#c10000';\nvar default_plots_integrationLineWidth = 1;\nvar default_plots_showGrid = false;\nvar default_plots_gridColor = 'gray';\nvar default_plots_gridLineWidth = .5;\nvar default_plots_showYAxis = true;\nvar default_plots_flipXAxis = false; // default shape properties\n\nvar default_text_font_size = 12;\nvar default_text_font_families = ['Helvetica', 'Arial', 'Dialog'];\nvar default_text_font_bold = true;\nvar default_text_font_italic = false;\nvar default_text_font_stroke_3D = true;\nvar default_text_color = '#000000';\nvar default_shapes_color = '#000000';\nvar default_shapes_lineWidth = 1;\nvar default_shapes_pointSize = 2;\nvar default_shapes_arrowLength_2D = 8;\nvar default_compass_display = false;\nvar default_compass_axisXColor_3D = '#FF0000';\nvar default_compass_axisYColor_3D = '#00FF00';\nvar default_compass_axisZColor_3D = '#0000FF';\nvar default_compass_size_3D = 50;\nvar default_compass_resolution_3D = 10;\nvar default_compass_displayText_3D = true;\nvar default_compass_type_3D = 0;\nvar default_measurement_update_3D = false;\nvar default_measurement_angleBands_3D = 10;\nvar default_measurement_displayText_3D = true; // shortcuts\n\nvar interpreter = new _io_JSONInterpreter__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\nfunction readJSON(string) {\n  var obj;\n\n  try {\n    obj = JSON.parse(string);\n  } catch (e) {\n    // not json\n    return undefined;\n  }\n\n  if (obj) {\n    if (obj.m || obj.s) {\n      return interpreter.contentFrom(obj);\n    } else if (obj.a) {\n      return obj = {\n        molecules: [interpreter.molFrom(obj)],\n        shapes: []\n      };\n    } else {\n      return obj = {\n        molecules: [],\n        shapes: []\n      };\n    }\n  }\n\n  return undefined;\n}\n;\nfunction writeJSON(mols, shapes) {\n  return JSON.stringify(interpreter.contentTo(mols, shapes));\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/index.js\n");

/***/ }),

/***/ "./src/ChemDoodle/informatics/BondDeducer.js":
/*!***************************************************!*\
  !*** ./src/ChemDoodle/informatics/BondDeducer.js ***!
  \***************************************************/
/*! exports provided: getPointsPerAngstrom, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getPointsPerAngstrom\", function() { return getPointsPerAngstrom; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return BondDeducer; });\n/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ChemDoodle */ \"./src/ChemDoodle/index.js\");\n/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../structures */ \"./src/ChemDoodle/structures/index.js\");\n\n\nfunction getPointsPerAngstrom() {\n  return _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bondLength_2D\"] / _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_angstromsPerBondLength\"];\n}\n;\nfunction BondDeducer() {}\n;\nvar _ = BondDeducer.prototype;\n_.margin = 1.1;\n\n_.deduceCovalentBonds = function (molecule, customPointsPerAngstrom) {\n  var pointsPerAngstrom = getPointsPerAngstrom();\n\n  if (customPointsPerAngstrom) {\n    pointsPerAngstrom = customPointsPerAngstrom;\n  }\n\n  for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {\n    for (var j = i + 1; j < ii; j++) {\n      var first = molecule.atoms[i];\n      var second = molecule.atoms[j];\n\n      if (first.distance3D(second) < (_ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"ELEMENT\"][first.label].covalentRadius + _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"ELEMENT\"][second.label].covalentRadius) * pointsPerAngstrom * this.margin) {\n        molecule.bonds.push(new _structures__WEBPACK_IMPORTED_MODULE_1__[\"Bond\"](first, second, 1));\n      }\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvaW5mb3JtYXRpY3MvQm9uZERlZHVjZXIuanM/NDM1YyJdLCJuYW1lcyI6WyJnZXRQb2ludHNQZXJBbmdzdHJvbSIsImRlZmF1bHRfYm9uZExlbmd0aF8yRCIsImRlZmF1bHRfYW5nc3Ryb21zUGVyQm9uZExlbmd0aCIsIkJvbmREZWR1Y2VyIiwiXyIsInByb3RvdHlwZSIsIm1hcmdpbiIsImRlZHVjZUNvdmFsZW50Qm9uZHMiLCJtb2xlY3VsZSIsImN1c3RvbVBvaW50c1BlckFuZ3N0cm9tIiwicG9pbnRzUGVyQW5nc3Ryb20iLCJpIiwiaWkiLCJhdG9tcyIsImxlbmd0aCIsImoiLCJmaXJzdCIsInNlY29uZCIsImRpc3RhbmNlM0QiLCJFTEVNRU5UIiwibGFiZWwiLCJjb3ZhbGVudFJhZGl1cyIsImJvbmRzIiwicHVzaCIsIkJvbmQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUtBO0FBRU8sU0FBU0Esb0JBQVQsR0FBZ0M7QUFDckMsU0FBT0MsaUVBQXFCLEdBQUdDLDBFQUEvQjtBQUNEO0FBQUE7QUFFYyxTQUFTQyxXQUFULEdBQXVCLENBQ3JDO0FBQUE7QUFDRCxJQUFJQyxDQUFDLEdBQUdELFdBQVcsQ0FBQ0UsU0FBcEI7QUFDQUQsQ0FBQyxDQUFDRSxNQUFGLEdBQVcsR0FBWDs7QUFDQUYsQ0FBQyxDQUFDRyxtQkFBRixHQUF3QixVQUFTQyxRQUFULEVBQW1CQyx1QkFBbkIsRUFBNEM7QUFDbEUsTUFBSUMsaUJBQWlCLEdBQUdWLG9CQUFvQixFQUE1Qzs7QUFDQSxNQUFJUyx1QkFBSixFQUE2QjtBQUMzQkMscUJBQWlCLEdBQUdELHVCQUFwQjtBQUNEOztBQUNELE9BQU0sSUFBSUUsQ0FBQyxHQUFHLENBQVIsRUFBV0MsRUFBRSxHQUFHSixRQUFRLENBQUNLLEtBQVQsQ0FBZUMsTUFBckMsRUFBNkNILENBQUMsR0FBR0MsRUFBakQsRUFBcURELENBQUMsRUFBdEQsRUFBMEQ7QUFDeEQsU0FBTSxJQUFJSSxDQUFDLEdBQUdKLENBQUMsR0FBRyxDQUFsQixFQUFxQkksQ0FBQyxHQUFHSCxFQUF6QixFQUE2QkcsQ0FBQyxFQUE5QixFQUFrQztBQUNoQyxVQUFJQyxLQUFLLEdBQUdSLFFBQVEsQ0FBQ0ssS0FBVCxDQUFlRixDQUFmLENBQVo7QUFDQSxVQUFJTSxNQUFNLEdBQUdULFFBQVEsQ0FBQ0ssS0FBVCxDQUFlRSxDQUFmLENBQWI7O0FBQ0EsVUFBSUMsS0FBSyxDQUFDRSxVQUFOLENBQWlCRCxNQUFqQixJQUEyQixDQUFDRSxtREFBTyxDQUFDSCxLQUFLLENBQUNJLEtBQVAsQ0FBUCxDQUFxQkMsY0FBckIsR0FBc0NGLG1EQUFPLENBQUNGLE1BQU0sQ0FBQ0csS0FBUixDQUFQLENBQXNCQyxjQUE3RCxJQUErRVgsaUJBQS9FLEdBQW1HLEtBQUtKLE1BQXZJLEVBQStJO0FBQzdJRSxnQkFBUSxDQUFDYyxLQUFULENBQWVDLElBQWYsQ0FBb0IsSUFBSUMsZ0RBQUosQ0FBU1IsS0FBVCxFQUFnQkMsTUFBaEIsRUFBd0IsQ0FBeEIsQ0FBcEI7QUFDRDtBQUNGO0FBQ0Y7QUFDRixDQWREIiwiZmlsZSI6Ii4vc3JjL0NoZW1Eb29kbGUvaW5mb3JtYXRpY3MvQm9uZERlZHVjZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBFTEVNRU5ULFxuICBkZWZhdWx0X2JvbmRMZW5ndGhfMkQsXG4gIGRlZmF1bHRfYW5nc3Ryb21zUGVyQm9uZExlbmd0aFxufSBmcm9tICcuLi8uLi9DaGVtRG9vZGxlJztcbmltcG9ydCB7IEJvbmQgfSBmcm9tICcuLi9zdHJ1Y3R1cmVzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBvaW50c1BlckFuZ3N0cm9tKCkge1xuICByZXR1cm4gZGVmYXVsdF9ib25kTGVuZ3RoXzJEIC8gZGVmYXVsdF9hbmdzdHJvbXNQZXJCb25kTGVuZ3RoO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQm9uZERlZHVjZXIoKSB7XG59O1xudmFyIF8gPSBCb25kRGVkdWNlci5wcm90b3R5cGU7XG5fLm1hcmdpbiA9IDEuMTtcbl8uZGVkdWNlQ292YWxlbnRCb25kcyA9IGZ1bmN0aW9uKG1vbGVjdWxlLCBjdXN0b21Qb2ludHNQZXJBbmdzdHJvbSkge1xuICB2YXIgcG9pbnRzUGVyQW5nc3Ryb20gPSBnZXRQb2ludHNQZXJBbmdzdHJvbSgpO1xuICBpZiAoY3VzdG9tUG9pbnRzUGVyQW5nc3Ryb20pIHtcbiAgICBwb2ludHNQZXJBbmdzdHJvbSA9IGN1c3RvbVBvaW50c1BlckFuZ3N0cm9tO1xuICB9XG4gIGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xlY3VsZS5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgZm9yICggdmFyIGogPSBpICsgMTsgaiA8IGlpOyBqKyspIHtcbiAgICAgIHZhciBmaXJzdCA9IG1vbGVjdWxlLmF0b21zW2ldO1xuICAgICAgdmFyIHNlY29uZCA9IG1vbGVjdWxlLmF0b21zW2pdO1xuICAgICAgaWYgKGZpcnN0LmRpc3RhbmNlM0Qoc2Vjb25kKSA8IChFTEVNRU5UW2ZpcnN0LmxhYmVsXS5jb3ZhbGVudFJhZGl1cyArIEVMRU1FTlRbc2Vjb25kLmxhYmVsXS5jb3ZhbGVudFJhZGl1cykgKiBwb2ludHNQZXJBbmdzdHJvbSAqIHRoaXMubWFyZ2luKSB7XG4gICAgICAgIG1vbGVjdWxlLmJvbmRzLnB1c2gobmV3IEJvbmQoZmlyc3QsIHNlY29uZCwgMSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/ChemDoodle/informatics/BondDeducer.js\n");

/***/ }),

/***/ "./src/ChemDoodle/informatics/EulerFacetRingFinder.js":
/*!************************************************************!*\
  !*** ./src/ChemDoodle/informatics/EulerFacetRingFinder.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return EulerFacetRingFinder; });\n/* harmony import */ var _RingFinder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_RingFinder */ \"./src/ChemDoodle/informatics/_RingFinder.js\");\n/* harmony import */ var _structures_Ring__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../structures/Ring */ \"./src/ChemDoodle/structures/Ring.js\");\n\n\n\nfunction Finger(a, from) {\n  this.atoms = [];\n\n  if (from) {\n    for (var i = 0, ii = from.atoms.length; i < ii; i++) {\n      this.atoms[i] = from.atoms[i];\n    }\n  }\n\n  this.atoms.push(a);\n}\n\nvar _2 = Finger.prototype;\n\n_2.grow = function (bonds, blockers) {\n  var last = this.atoms[this.atoms.length - 1];\n  var neighs = [];\n\n  for (var i = 0, ii = bonds.length; i < ii; i++) {\n    if (bonds[i].contains(last)) {\n      var neigh = bonds[i].getNeighbor(last);\n\n      if (blockers.indexOf(neigh) === -1) {\n        neighs.push(neigh);\n      }\n    }\n  }\n\n  var returning = [];\n\n  for (var i = 0, ii = neighs.length; i < ii; i++) {\n    returning.push(new Finger(neighs[i], this));\n  }\n\n  return returning;\n};\n\n_2.check = function (bonds, finger, a) {\n  // check that they dont contain similar parts\n  for (var i = 0, ii = finger.atoms.length - 1; i < ii; i++) {\n    if (this.atoms.indexOf(finger.atoms[i]) !== -1) {\n      return undefined;\n    }\n  }\n\n  var ring; // check if fingers meet at tips\n\n  if (finger.atoms[finger.atoms.length - 1] === this.atoms[this.atoms.length - 1]) {\n    ring = new _structures_Ring__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    ring.atoms[0] = a;\n\n    for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n      ring.atoms.push(this.atoms[i]);\n    }\n\n    for (var i = finger.atoms.length - 2; i >= 0; i--) {\n      ring.atoms.push(finger.atoms[i]);\n    }\n  } else {\n    // check if fingers meet at bond\n    var endbonds = [];\n\n    for (var i = 0, ii = bonds.length; i < ii; i++) {\n      if (bonds[i].contains(finger.atoms[finger.atoms.length - 1])) {\n        endbonds.push(bonds[i]);\n      }\n    }\n\n    for (var i = 0, ii = endbonds.length; i < ii; i++) {\n      if ((finger.atoms.length === 1 || !endbonds[i].contains(finger.atoms[finger.atoms.length - 2])) && endbonds[i].contains(this.atoms[this.atoms.length - 1])) {\n        ring = new _structures_Ring__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        ring.atoms[0] = a;\n\n        for (var j = 0, jj = this.atoms.length; j < jj; j++) {\n          ring.atoms.push(this.atoms[j]);\n        }\n\n        for (var j = finger.atoms.length - 1; j >= 0; j--) {\n          ring.atoms.push(finger.atoms[j]);\n        }\n\n        break;\n      }\n    }\n  }\n\n  return ring;\n};\n\nfunction EulerFacetRingFinder(molecule) {\n  this.setMolecule(molecule);\n}\n;\n\nvar _ = EulerFacetRingFinder.prototype = new _RingFinder__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n_.fingerBreak = 5;\n\n_.innerGetRings = function () {\n  for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n    var neigh = [];\n\n    for (var j = 0, jj = this.bonds.length; j < jj; j++) {\n      if (this.bonds[j].contains(this.atoms[i])) {\n        neigh.push(this.bonds[j].getNeighbor(this.atoms[i]));\n      }\n    }\n\n    for (var j = 0, jj = neigh.length; j < jj; j++) {\n      // weird that i can't optimize this loop without breaking a test\n      // case...\n      for (var k = j + 1; k < neigh.length; k++) {\n        var fingers = [];\n        fingers[0] = new Finger(neigh[j]);\n        fingers[1] = new Finger(neigh[k]);\n        var blockers = [];\n        blockers[0] = this.atoms[i];\n\n        for (var l = 0, ll = neigh.length; l < ll; l++) {\n          if (l !== j && l !== k) {\n            blockers.push(neigh[l]);\n          }\n        }\n\n        var found = []; // check for 3 membered ring\n\n        var three = fingers[0].check(this.bonds, fingers[1], this.atoms[i]);\n\n        if (three) {\n          found[0] = three;\n        }\n\n        while (found.length === 0 && fingers.length > 0 && fingers[0].atoms.length < this.fingerBreak) {\n          var newfingers = [];\n\n          for (var l = 0, ll = fingers.length; l < ll; l++) {\n            var adding = fingers[l].grow(this.bonds, blockers);\n\n            for (var m = 0, mm = adding.length; m < mm; m++) {\n              newfingers.push(adding[m]);\n            }\n          }\n\n          fingers = newfingers;\n\n          for (var l = 0, ll = fingers.length; l < ll; l++) {\n            for (var m = l + 1; m < ll; m++) {\n              var r = fingers[l].check(this.bonds, fingers[m], this.atoms[i]);\n\n              if (r) {\n                found.push(r);\n              }\n            }\n          }\n\n          if (found.length === 0) {\n            var newBlockers = [];\n\n            for (var l = 0, ll = blockers.length; l < ll; l++) {\n              for (var m = 0, mm = this.bonds.length; m < mm; m++) {\n                if (this.bonds[m].contains(blockers[l])) {\n                  var neigh = this.bonds[m].getNeighbor(blockers[l]);\n\n                  if (blockers.indexOf(neigh) === -1 && newBlockers.indexOf(neigh) === -1) {\n                    newBlockers.push(neigh);\n                  }\n                }\n              }\n            }\n\n            for (var l = 0, ll = newBlockers.length; l < ll; l++) {\n              blockers.push(newBlockers[l]);\n            }\n          }\n        }\n\n        if (found.length > 0) {\n          // this undefined is required...weird, don't know why\n          var use = undefined;\n\n          for (var l = 0, ll = found.length; l < ll; l++) {\n            if (!use || use.atoms.length > found[l].atoms.length) {\n              use = found[l];\n            }\n          }\n\n          var already = false;\n\n          for (var l = 0, ll = this.rings.length; l < ll; l++) {\n            var all = true;\n\n            for (var m = 0, mm = use.atoms.length; m < mm; m++) {\n              if (this.rings[l].atoms.indexOf(use.atoms[m]) === -1) {\n                all = false;\n                break;\n              }\n            }\n\n            if (all) {\n              already = true;\n              break;\n            }\n          }\n\n          if (!already) {\n            this.rings.push(use);\n          }\n        }\n      }\n    }\n  }\n\n  this.fuse();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvaW5mb3JtYXRpY3MvRXVsZXJGYWNldFJpbmdGaW5kZXIuanM/MmZlOCJdLCJuYW1lcyI6WyJGaW5nZXIiLCJhIiwiZnJvbSIsImF0b21zIiwiaSIsImlpIiwibGVuZ3RoIiwicHVzaCIsIl8yIiwicHJvdG90eXBlIiwiZ3JvdyIsImJvbmRzIiwiYmxvY2tlcnMiLCJsYXN0IiwibmVpZ2hzIiwiY29udGFpbnMiLCJuZWlnaCIsImdldE5laWdoYm9yIiwiaW5kZXhPZiIsInJldHVybmluZyIsImNoZWNrIiwiZmluZ2VyIiwidW5kZWZpbmVkIiwicmluZyIsIlJpbmciLCJlbmRib25kcyIsImoiLCJqaiIsIkV1bGVyRmFjZXRSaW5nRmluZGVyIiwibW9sZWN1bGUiLCJzZXRNb2xlY3VsZSIsIl8iLCJfUmluZ0ZpbmRlciIsImZpbmdlckJyZWFrIiwiaW5uZXJHZXRSaW5ncyIsImsiLCJmaW5nZXJzIiwibCIsImxsIiwiZm91bmQiLCJ0aHJlZSIsIm5ld2ZpbmdlcnMiLCJhZGRpbmciLCJtIiwibW0iLCJyIiwibmV3QmxvY2tlcnMiLCJ1c2UiLCJhbHJlYWR5IiwicmluZ3MiLCJhbGwiLCJmdXNlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7O0FBRUEsU0FBU0EsTUFBVCxDQUFnQkMsQ0FBaEIsRUFBbUJDLElBQW5CLEVBQXlCO0FBQ3hCLE9BQUtDLEtBQUwsR0FBYSxFQUFiOztBQUNBLE1BQUlELElBQUosRUFBVTtBQUNULFNBQU0sSUFBSUUsQ0FBQyxHQUFHLENBQVIsRUFBV0MsRUFBRSxHQUFHSCxJQUFJLENBQUNDLEtBQUwsQ0FBV0csTUFBakMsRUFBeUNGLENBQUMsR0FBR0MsRUFBN0MsRUFBaURELENBQUMsRUFBbEQsRUFBc0Q7QUFDckQsV0FBS0QsS0FBTCxDQUFXQyxDQUFYLElBQWdCRixJQUFJLENBQUNDLEtBQUwsQ0FBV0MsQ0FBWCxDQUFoQjtB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QixDQUFDLEdBQUdDLEVBQTdDLEVBQWlERCxDQUFDLEVBQWxELEVBQXNEO0FBQ3JELGdCQUFJYSxHQUFHLEdBQUcsSUFBVjs7QUFDQSxpQkFBTSxJQUFJUCxDQUFDLEdBQUcsQ0FBUixFQUFXQyxFQUFFLEdBQUdHLEdBQUcsQ0FBQzVDLEtBQUosQ0FBVUcsTUFBaEMsRUFBd0NxQyxDQUFDLEdBQUdDLEVBQTVDLEVBQWdERCxDQUFDLEVBQWpELEVBQXFEO0FBQ3BELGtCQUFJLEtBQUtNLEtBQUwsQ0FBV1osQ0FBWCxFQUFjbEMsS0FBZCxDQUFvQmUsT0FBcEIsQ0FBNEI2QixHQUFHLENBQUM1QyxLQUFKLENBQVV3QyxDQUFWLENBQTVCLE1BQThDLENBQUMsQ0FBbkQsRUFBc0Q7QUFDckRPLG1CQUFHLEdBQUcsS0FBTjtBQUNBO0FBQ0E7QUFDRDs7QUFDRCxnQkFBSUEsR0FBSixFQUFTO0FBQ1JGLHFCQUFPLEdBQUcsSUFBVjtBQUNBO0FBQ0E7QUFDRDs7QUFDRCxjQUFJLENBQUNBLE9BQUwsRUFBYztBQUNiLGlCQUFLQyxLQUFMLENBQVcxQyxJQUFYLENBQWdCd0MsR0FBaEI7QUFDQTtBQUNEO0FBQ0Q7QUFDRDtBQUNEOztBQUNELE9BQUtJLElBQUw7QUFDQSxDQTVGRCIsImZpbGUiOiIuL3NyYy9DaGVtRG9vZGxlL2luZm9ybWF0aWNzL0V1bGVyRmFjZXRSaW5nRmluZGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9SaW5nRmluZGVyIGZyb20gJy4vX1JpbmdGaW5kZXInO1xuaW1wb3J0IFJpbmcgZnJvbSAnLi4vc3RydWN0dXJlcy9SaW5nJztcblxuZnVuY3Rpb24gRmluZ2VyKGEsIGZyb20pIHtcblx0dGhpcy5hdG9tcyA9IFtdO1xuXHRpZiAoZnJvbSkge1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBmcm9tLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHRoaXMuYXRvbXNbaV0gPSBmcm9tLmF0b21zW2ldO1xuXHRcdH1cblx0fVxuXHR0aGlzLmF0b21zLnB1c2goYSk7XG59XG52YXIgXzIgPSBGaW5nZXIucHJvdG90eXBlO1xuXzIuZ3JvdyA9IGZ1bmN0aW9uKGJvbmRzLCBibG9ja2Vycykge1xuXHR2YXIgbGFzdCA9IHRoaXMuYXRvbXNbdGhpcy5hdG9tcy5sZW5ndGggLSAxXTtcblx0dmFyIG5laWdocyA9IFtdO1xuXHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gYm9uZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdGlmIChib25kc1tpXS5jb250YWlucyhsYXN0KSkge1xuXHRcdFx0dmFyIG5laWdoID0gYm9uZHNbaV0uZ2V0TmVpZ2hib3IobGFzdCk7XG5cdFx0XHRpZiAoYmxvY2tlcnMuaW5kZXhPZihuZWlnaCkgPT09IC0xKSB7XG5cdFx0XHRcdG5laWdocy5wdXNoKG5laWdoKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0dmFyIHJldHVybmluZyA9IFtdO1xuXHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbmVpZ2hzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRyZXR1cm5pbmcucHVzaChuZXcgRmluZ2VyKG5laWdoc1tpXSwgdGhpcykpO1xuXHR9XG5cdHJldHVybiByZXR1cm5pbmc7XG59O1xuXzIuY2hlY2sgPSBmdW5jdGlvbihib25kcywgZmluZ2VyLCBhKSB7XG5cdC8vIGNoZWNrIHRoYXQgdGhleSBkb250IGNvbnRhaW4gc2ltaWxhciBwYXJ0c1xuXHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gZmluZ2VyLmF0b21zLmxlbmd0aCAtIDE7IGkgPCBpaTsgaSsrKSB7XG5cdFx0aWYgKHRoaXMuYXRvbXMuaW5kZXhPZihmaW5nZXIuYXRvbXNbaV0pICE9PSAtMSkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0dmFyIHJpbmc7XG5cdC8vIGNoZWNrIGlmIGZpbmdlcnMgbWVldCBhdCB0aXBzXG5cdGlmIChmaW5nZXIuYXRvbXNbZmluZ2VyLmF0b21zLmxlbmd0aCAtIDFdID09PSB0aGlzLmF0b21zW3RoaXMuYXRvbXMubGVuZ3RoIC0gMV0pIHtcblx0XHRyaW5nID0gbmV3IFJpbmcoKTtcblx0XHRyaW5nLmF0b21zWzBdID0gYTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRyaW5nLmF0b21zLnB1c2godGhpcy5hdG9tc1tpXSk7XG5cdFx0fVxuXHRcdGZvciAoIHZhciBpID0gZmluZ2VyLmF0b21zLmxlbmd0aCAtIDI7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRyaW5nLmF0b21zLnB1c2goZmluZ2VyLmF0b21zW2ldKTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Ly8gY2hlY2sgaWYgZmluZ2VycyBtZWV0IGF0IGJvbmRcblx0XHR2YXIgZW5kYm9uZHMgPSBbXTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gYm9uZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0aWYgKGJvbmRzW2ldLmNvbnRhaW5zKGZpbmdlci5hdG9tc1tmaW5nZXIuYXRvbXMubGVuZ3RoIC0gMV0pKSB7XG5cdFx0XHRcdGVuZGJvbmRzLnB1c2goYm9uZHNbaV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gZW5kYm9uZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0aWYgKChmaW5nZXIuYXRvbXMubGVuZ3RoID09PSAxIHx8ICFlbmRib25kc1tpXS5jb250YWlucyhmaW5nZXIuYXRvbXNbZmluZ2VyLmF0b21zLmxlbmd0aCAtIDJdKSkgJiYgZW5kYm9uZHNbaV0uY29udGFpbnModGhpcy5hdG9tc1t0aGlzLmF0b21zLmxlbmd0aCAtIDFdKSkge1xuXHRcdFx0XHRyaW5nID0gbmV3IFJpbmcoKTtcblx0XHRcdFx0cmluZy5hdG9tc1swXSA9IGE7XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSB0aGlzLmF0b21zLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHRyaW5nLmF0b21zLnB1c2godGhpcy5hdG9tc1tqXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yICggdmFyIGogPSBmaW5nZXIuYXRvbXMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcblx0XHRcdFx0XHRyaW5nLmF0b21zLnB1c2goZmluZ2VyLmF0b21zW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuIHJpbmc7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBFdWxlckZhY2V0UmluZ0ZpbmRlcihtb2xlY3VsZSkge1xuXHR0aGlzLnNldE1vbGVjdWxlKG1vbGVjdWxlKTtcbn07XG52YXIgXyA9IEV1bGVyRmFjZXRSaW5nRmluZGVyLnByb3RvdHlwZSA9IG5ldyBfUmluZ0ZpbmRlcigpO1xuXy5maW5nZXJCcmVhayA9IDU7XG5fLmlubmVyR2V0UmluZ3MgPSBmdW5jdGlvbigpIHtcblx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuYXRvbXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdHZhciBuZWlnaCA9IFtdO1xuXHRcdGZvciAoIHZhciBqID0gMCwgamogPSB0aGlzLmJvbmRzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdGlmICh0aGlzLmJvbmRzW2pdLmNvbnRhaW5zKHRoaXMuYXRvbXNbaV0pKSB7XG5cdFx0XHRcdG5laWdoLnB1c2godGhpcy5ib25kc1tqXS5nZXROZWlnaGJvcih0aGlzLmF0b21zW2ldKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGZvciAoIHZhciBqID0gMCwgamogPSBuZWlnaC5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHQvLyB3ZWlyZCB0aGF0IGkgY2FuJ3Qgb3B0aW1pemUgdGhpcyBsb29wIHdpdGhvdXQgYnJlYWtpbmcgYSB0ZXN0XG5cdFx0XHQvLyBjYXNlLi4uXG5cdFx0XHRmb3IgKCB2YXIgayA9IGogKyAxOyBrIDwgbmVpZ2gubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0dmFyIGZpbmdlcnMgPSBbXTtcblx0XHRcdFx0ZmluZ2Vyc1swXSA9IG5ldyBGaW5nZXIobmVpZ2hbal0pO1xuXHRcdFx0XHRmaW5nZXJzWzFdID0gbmV3IEZpbmdlcihuZWlnaFtrXSk7XG5cdFx0XHRcdHZhciBibG9ja2VycyA9IFtdO1xuXHRcdFx0XHRibG9ja2Vyc1swXSA9IHRoaXMuYXRvbXNbaV07XG5cdFx0XHRcdGZvciAoIHZhciBsID0gMCwgbGwgPSBuZWlnaC5sZW5ndGg7IGwgPCBsbDsgbCsrKSB7XG5cdFx0XHRcdFx0aWYgKGwgIT09IGogJiYgbCAhPT0gaykge1xuXHRcdFx0XHRcdFx0YmxvY2tlcnMucHVzaChuZWlnaFtsXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBmb3VuZCA9IFtdO1xuXHRcdFx0XHQvLyBjaGVjayBmb3IgMyBtZW1iZXJlZCByaW5nXG5cdFx0XHRcdHZhciB0aHJlZSA9IGZpbmdlcnNbMF0uY2hlY2sodGhpcy5ib25kcywgZmluZ2Vyc1sxXSwgdGhpcy5hdG9tc1tpXSk7XG5cdFx0XHRcdGlmICh0aHJlZSkge1xuXHRcdFx0XHRcdGZvdW5kWzBdID0gdGhyZWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0d2hpbGUgKGZvdW5kLmxlbmd0aCA9PT0gMCAmJiBmaW5nZXJzLmxlbmd0aCA+IDAgJiYgZmluZ2Vyc1swXS5hdG9tcy5sZW5ndGggPCB0aGlzLmZpbmdlckJyZWFrKSB7XG5cdFx0XHRcdFx0dmFyIG5ld2ZpbmdlcnMgPSBbXTtcblx0XHRcdFx0XHRmb3IgKCB2YXIgbCA9IDAsIGxsID0gZmluZ2Vycy5sZW5ndGg7IGwgPCBsbDsgbCsrKSB7XG5cdFx0XHRcdFx0XHR2YXIgYWRkaW5nID0gZmluZ2Vyc1tsXS5ncm93KHRoaXMuYm9uZHMsIGJsb2NrZXJzKTtcblx0XHRcdFx0XHRcdGZvciAoIHZhciBtID0gMCwgbW0gPSBhZGRpbmcubGVuZ3RoOyBtIDwgbW07IG0rKykge1xuXHRcdFx0XHRcdFx0XHRuZXdmaW5nZXJzLnB1c2goYWRkaW5nW21dKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZmluZ2VycyA9IG5ld2ZpbmdlcnM7XG5cdFx0XHRcdFx0Zm9yICggdmFyIGwgPSAwLCBsbCA9IGZpbmdlcnMubGVuZ3RoOyBsIDwgbGw7IGwrKykge1xuXHRcdFx0XHRcdFx0Zm9yICggdmFyIG0gPSBsICsgMTsgbSA8IGxsOyBtKyspIHtcblx0XHRcdFx0XHRcdFx0dmFyIHIgPSBmaW5nZXJzW2xdLmNoZWNrKHRoaXMuYm9uZHMsIGZpbmdlcnNbbV0sIHRoaXMuYXRvbXNbaV0pO1xuXHRcdFx0XHRcdFx0XHRpZiAocikge1xuXHRcdFx0XHRcdFx0XHRcdGZvdW5kLnB1c2gocik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGZvdW5kLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdFx0dmFyIG5ld0Jsb2NrZXJzID0gW107XG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgbCA9IDAsIGxsID0gYmxvY2tlcnMubGVuZ3RoOyBsIDwgbGw7IGwrKykge1xuXHRcdFx0XHRcdFx0XHRmb3IgKCB2YXIgbSA9IDAsIG1tID0gdGhpcy5ib25kcy5sZW5ndGg7IG0gPCBtbTsgbSsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHRoaXMuYm9uZHNbbV0uY29udGFpbnMoYmxvY2tlcnNbbF0pKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgbmVpZ2ggPSB0aGlzLmJvbmRzW21dLmdldE5laWdoYm9yKGJsb2NrZXJzW2xdKTtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChibG9ja2Vycy5pbmRleE9mKG5laWdoKSA9PT0gLTEgJiYgbmV3QmxvY2tlcnMuaW5kZXhPZihuZWlnaCkgPT09IC0xKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5ld0Jsb2NrZXJzLnB1c2gobmVpZ2gpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Zm9yICggdmFyIGwgPSAwLCBsbCA9IG5ld0Jsb2NrZXJzLmxlbmd0aDsgbCA8IGxsOyBsKyspIHtcblx0XHRcdFx0XHRcdFx0YmxvY2tlcnMucHVzaChuZXdCbG9ja2Vyc1tsXSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChmb3VuZC5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0Ly8gdGhpcyB1bmRlZmluZWQgaXMgcmVxdWlyZWQuLi53ZWlyZCwgZG9uJ3Qga25vdyB3aHlcblx0XHRcdFx0XHR2YXIgdXNlID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdGZvciAoIHZhciBsID0gMCwgbGwgPSBmb3VuZC5sZW5ndGg7IGwgPCBsbDsgbCsrKSB7XG5cdFx0XHRcdFx0XHRpZiAoIXVzZSB8fCB1c2UuYXRvbXMubGVuZ3RoID4gZm91bmRbbF0uYXRvbXMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRcdHVzZSA9IGZvdW5kW2xdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2YXIgYWxyZWFkeSA9IGZhbHNlO1xuXHRcdFx0XHRcdGZvciAoIHZhciBsID0gMCwgbGwgPSB0aGlzLnJpbmdzLmxlbmd0aDsgbCA8IGxsOyBsKyspIHtcblx0XHRcdFx0XHRcdHZhciBhbGwgPSB0cnVlO1xuXHRcdFx0XHRcdFx0Zm9yICggdmFyIG0gPSAwLCBtbSA9IHVzZS5hdG9tcy5sZW5ndGg7IG0gPCBtbTsgbSsrKSB7XG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLnJpbmdzW2xdLmF0b21zLmluZGV4T2YodXNlLmF0b21zW21dKSA9PT0gLTEpIHtcblx0XHRcdFx0XHRcdFx0XHRhbGwgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGFsbCkge1xuXHRcdFx0XHRcdFx0XHRhbHJlYWR5ID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICghYWxyZWFkeSkge1xuXHRcdFx0XHRcdFx0dGhpcy5yaW5ncy5wdXNoKHVzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHRoaXMuZnVzZSgpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/ChemDoodle/informatics/EulerFacetRingFinder.js\n");

/***/ }),

/***/ "./src/ChemDoodle/informatics/FrerejacqueNumberCounter.js":
/*!****************************************************************!*\
  !*** ./src/ChemDoodle/informatics/FrerejacqueNumberCounter.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return FrerejacqueNumberCounter; });\n/* harmony import */ var _Counter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Counter */ \"./src/ChemDoodle/informatics/_Counter.js\");\n/* harmony import */ var _NumberOfMoleculesCounter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NumberOfMoleculesCounter */ \"./src/ChemDoodle/informatics/NumberOfMoleculesCounter.js\");\n\n\nfunction FrerejacqueNumberCounter(molecule) {\n  this.setMolecule(molecule);\n}\n;\n\nvar _ = FrerejacqueNumberCounter.prototype = new _Counter__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n_.innerCalculate = function () {\n  this.value = this.molecule.bonds.length - this.molecule.atoms.length + new _NumberOfMoleculesCounter__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.molecule).value;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvaW5mb3JtYXRpY3MvRnJlcmVqYWNxdWVOdW1iZXJDb3VudGVyLmpzPzc3ZjQiXSwibmFtZXMiOlsiRnJlcmVqYWNxdWVOdW1iZXJDb3VudGVyIiwibW9sZWN1bGUiLCJzZXRNb2xlY3VsZSIsIl8iLCJwcm90b3R5cGUiLCJfQ291bnRlciIsImlubmVyQ2FsY3VsYXRlIiwidmFsdWUiLCJib25kcyIsImxlbmd0aCIsImF0b21zIiwiTnVtYmVyT2ZNb2xlY3VsZXNDb3VudGVyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFZSxTQUFTQSx3QkFBVCxDQUFrQ0MsUUFBbEMsRUFBNEM7QUFDekQsT0FBS0MsV0FBTCxDQUFpQkQsUUFBakI7QUFDRDtBQUFBOztBQUNELElBQUlFLENBQUMsR0FBR0gsd0JBQXdCLENBQUNJLFNBQXpCLEdBQXFDLElBQUlDLGdEQUFKLEVBQTdDOztBQUNBRixDQUFDLENBQUNHLGNBQUYsR0FBbUIsWUFBVztBQUM1QixPQUFLQyxLQUFMLEdBQWEsS0FBS04sUUFBTCxDQUFjTyxLQUFkLENBQW9CQyxNQUFwQixHQUE2QixLQUFLUixRQUFMLENBQWNTLEtBQWQsQ0FBb0JELE1BQWpELEdBQTBELElBQUlFLGlFQUFKLENBQTZCLEtBQUtWLFFBQWxDLEVBQTRDTSxLQUFuSDtBQUNELENBRkQiLCJmaWxlIjoiLi9zcmMvQ2hlbURvb2RsZS9pbmZvcm1hdGljcy9GcmVyZWphY3F1ZU51bWJlckNvdW50ZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX0NvdW50ZXIgZnJvbSAnLi9fQ291bnRlcic7XG5pbXBvcnQgTnVtYmVyT2ZNb2xlY3VsZXNDb3VudGVyIGZyb20gJy4vTnVtYmVyT2ZNb2xlY3VsZXNDb3VudGVyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb25cdEZyZXJlamFjcXVlTnVtYmVyQ291bnRlcihtb2xlY3VsZSkge1xuICB0aGlzLnNldE1vbGVjdWxlKG1vbGVjdWxlKTtcbn07XG52YXIgXyA9IEZyZXJlamFjcXVlTnVtYmVyQ291bnRlci5wcm90b3R5cGUgPSBuZXcgX0NvdW50ZXIoKTtcbl8uaW5uZXJDYWxjdWxhdGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMubW9sZWN1bGUuYm9uZHMubGVuZ3RoIC0gdGhpcy5tb2xlY3VsZS5hdG9tcy5sZW5ndGggKyBuZXcgTnVtYmVyT2ZNb2xlY3VsZXNDb3VudGVyKHRoaXMubW9sZWN1bGUpLnZhbHVlO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/ChemDoodle/informatics/FrerejacqueNumberCounter.js\n");

/***/ }),

/***/ "./src/ChemDoodle/informatics/HydrogenDeducer.js":
/*!*******************************************************!*\
  !*** ./src/ChemDoodle/informatics/HydrogenDeducer.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return HydrogenDeducer; });\n/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../structures */ \"./src/ChemDoodle/structures/index.js\");\n\nfunction HydrogenDeducer() {}\n;\nvar _ = HydrogenDeducer.prototype;\n\n_.removeHydrogens = function (molecule, removeStereo) {\n  var atoms = [];\n  var bonds = [];\n\n  for (var i = 0, ii = molecule.bonds.length; i < ii; i++) {\n    var b = molecule.bonds[i];\n    var save = b.a1.label !== 'H' && b.a2.label !== 'H';\n\n    if (!save && !removeStereo && b.stereo !== _structures__WEBPACK_IMPORTED_MODULE_0__[\"Bond\"].STEREO_NONE) {\n      save = true;\n    }\n\n    if (save) {\n      b.a1.tag = true;\n      bonds.push(b);\n    } else {\n      if (b.a1.label === 'H') {\n        b.a1.remove = true;\n      }\n\n      if (b.a2.label === 'H') {\n        b.a2.remove = true;\n      }\n    }\n  }\n\n  for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {\n    var a = molecule.atoms[i];\n\n    if (a.remove) {\n      a.remove = undefined;\n    } else {\n      atoms.push(a);\n    }\n  }\n\n  molecule.atoms = atoms;\n  molecule.bonds = bonds;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvaW5mb3JtYXRpY3MvSHlkcm9nZW5EZWR1Y2VyLmpzP2QyNWEiXSwibmFtZXMiOlsiSHlkcm9nZW5EZWR1Y2VyIiwiXyIsInByb3RvdHlwZSIsInJlbW92ZUh5ZHJvZ2VucyIsIm1vbGVjdWxlIiwicmVtb3ZlU3RlcmVvIiwiYXRvbXMiLCJib25kcyIsImkiLCJpaSIsImxlbmd0aCIsImIiLCJzYXZlIiwiYTEiLCJsYWJlbCIsImEyIiwic3RlcmVvIiwiQm9uZCIsIlNURVJFT19OT05FIiwidGFnIiwicHVzaCIsInJlbW92ZSIsImEiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRWUsU0FBU0EsZUFBVCxHQUEyQixDQUN6QztBQUFBO0FBQ0QsSUFBSUMsQ0FBQyxHQUFHRCxlQUFlLENBQUNFLFNBQXhCOztBQUNBRCxDQUFDLENBQUNFLGVBQUYsR0FBb0IsVUFBU0MsUUFBVCxFQUFtQkMsWUFBbkIsRUFBaUM7QUFDcEQsTUFBSUMsS0FBSyxHQUFHLEVBQVo7QUFDQSxNQUFJQyxLQUFLLEdBQUcsRUFBWjs7QUFDQSxPQUFNLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLEVBQUUsR0FBR0wsUUFBUSxDQUFDRyxLQUFULENBQWVHLE1BQXJDLEVBQTZDRixDQUFDLEdBQUdDLEVBQWpELEVBQXFERCxDQUFDLEVBQXRELEVBQTBEO0FBQ3pELFFBQUlHLENBQUMsR0FBR1AsUUFBUSxDQUFDRyxLQUFULENBQWVDLENBQWYsQ0FBUjtBQUNBLFFBQUlJLElBQUksR0FBR0QsQ0FBQyxDQUFDRSxFQUFGLENBQUtDLEtBQUwsS0FBZSxHQUFmLElBQXNCSCxDQUFDLENBQUNJLEVBQUYsQ0FBS0QsS0FBTCxLQUFlLEdBQWhEOztBQUNBLFFBQUcsQ0FBQ0YsSUFBRCxJQUFVLENBQUNQLFlBQUQsSUFBaUJNLENBQUMsQ0FBQ0ssTUFBRixLQUFhQyxnREFBSSxDQUFDQyxXQUFoRCxFQUE2RDtBQUM1RE4sVUFBSSxHQUFHLElBQVA7QUFDQTs7QUFDRCxRQUFJQSxJQUFKLEVBQVU7QUFDVEQsT0FBQyxDQUFDRSxFQUFGLENBQUtNLEdBQUwsR0FBVyxJQUFYO0FBQ0FaLFdBQUssQ0FBQ2EsSUFBTixDQUFXVCxDQUFYO0FBQ0EsS0FIRCxNQUdLO0FBQ0osVUFBR0EsQ0FBQyxDQUFDRSxFQUFGLENBQUtDLEtBQUwsS0FBZSxHQUFsQixFQUFzQjtBQUNyQkgsU0FBQyxDQUFDRSxFQUFGLENBQUtRLE1BQUwsR0FBYyxJQUFkO0FBQ0E7O0FBQ0QsVUFBR1YsQ0FBQyxDQUFDSSxFQUFGLENBQUtELEtBQUwsS0FBZSxHQUFsQixFQUFzQjtBQUNyQkgsU0FBQyxDQUFDSSxFQUFGLENBQUtNLE1BQUwsR0FBYyxJQUFkO0FBQ0E7QUFDRDtBQUNEOztBQUNELE9BQU0sSUFBSWIsQ0FBQyxHQUFHLENBQVIsRUFBV0MsRUFBRSxHQUFHTCxRQUFRLENBQUNFLEtBQVQsQ0FBZUksTUFBckMsRUFBNkNGLENBQUMsR0FBR0MsRUFBakQsRUFBcURELENBQUMsRUFBdEQsRUFBMEQ7QUFDekQsUUFBSWMsQ0FBQyxHQUFHbEIsUUFBUSxDQUFDRSxLQUFULENBQWVFLENBQWYsQ0FBUjs7QUFDQSxRQUFJYyxDQUFDLENBQUNELE1BQU4sRUFBYztBQUNiQyxPQUFDLENBQUNELE1BQUYsR0FBV0UsU0FBWDtBQUNBLEtBRkQsTUFFSztBQUNKakIsV0FBSyxDQUFDYyxJQUFOLENBQVdFLENBQVg7QUFDQTtBQUNEOztBQUNEbEIsVUFBUSxDQUFDRSxLQUFULEdBQWlCQSxLQUFqQjtBQUNBRixVQUFRLENBQUNHLEtBQVQsR0FBaUJBLEtBQWpCO0FBQ0EsQ0EvQkQiLCJmaWxlIjoiLi9zcmMvQ2hlbURvb2RsZS9pbmZvcm1hdGljcy9IeWRyb2dlbkRlZHVjZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb25kIH0gZnJvbSAnLi4vc3RydWN0dXJlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEh5ZHJvZ2VuRGVkdWNlcigpIHtcbn07XG52YXIgXyA9IEh5ZHJvZ2VuRGVkdWNlci5wcm90b3R5cGU7XG5fLnJlbW92ZUh5ZHJvZ2VucyA9IGZ1bmN0aW9uKG1vbGVjdWxlLCByZW1vdmVTdGVyZW8pIHtcblx0dmFyIGF0b21zID0gW107XG5cdHZhciBib25kcyA9IFtdO1xuXHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9sZWN1bGUuYm9uZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdHZhciBiID0gbW9sZWN1bGUuYm9uZHNbaV07XG5cdFx0dmFyIHNhdmUgPSBiLmExLmxhYmVsICE9PSAnSCcgJiYgYi5hMi5sYWJlbCAhPT0gJ0gnO1xuXHRcdGlmKCFzYXZlICYmICghcmVtb3ZlU3RlcmVvICYmIGIuc3RlcmVvICE9PSBCb25kLlNURVJFT19OT05FKSl7XG5cdFx0XHRzYXZlID0gdHJ1ZTtcblx0XHR9XG5cdFx0aWYgKHNhdmUpIHtcblx0XHRcdGIuYTEudGFnID0gdHJ1ZTtcblx0XHRcdGJvbmRzLnB1c2goYik7XG5cdFx0fWVsc2V7XG5cdFx0XHRpZihiLmExLmxhYmVsID09PSAnSCcpe1xuXHRcdFx0XHRiLmExLnJlbW92ZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRpZihiLmEyLmxhYmVsID09PSAnSCcpe1xuXHRcdFx0XHRiLmEyLnJlbW92ZSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xlY3VsZS5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0dmFyIGEgPSBtb2xlY3VsZS5hdG9tc1tpXTtcblx0XHRpZiAoYS5yZW1vdmUpIHtcblx0XHRcdGEucmVtb3ZlID0gdW5kZWZpbmVkO1xuXHRcdH1lbHNle1xuXHRcdFx0YXRvbXMucHVzaChhKTtcblx0XHR9XG5cdH1cblx0bW9sZWN1bGUuYXRvbXMgPSBhdG9tcztcblx0bW9sZWN1bGUuYm9uZHMgPSBib25kcztcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ChemDoodle/informatics/HydrogenDeducer.js\n");

/***/ }),

/***/ "./src/ChemDoodle/informatics/NumberOfMoleculesCounter.js":
/*!****************************************************************!*\
  !*** ./src/ChemDoodle/informatics/NumberOfMoleculesCounter.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return NumberOfMoleculesCounter; });\n/* harmony import */ var _Counter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Counter */ \"./src/ChemDoodle/informatics/_Counter.js\");\n/* harmony import */ var _structures_Queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../structures/Queue */ \"./src/ChemDoodle/structures/Queue.js\");\n\n\nfunction NumberOfMoleculesCounter(molecule) {\n  this.setMolecule(molecule);\n}\n;\n\nvar _ = NumberOfMoleculesCounter.prototype = new _Counter__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n_.innerCalculate = function () {\n  for (var i = 0, ii = this.molecule.atoms.length; i < ii; i++) {\n    this.molecule.atoms[i].visited = false;\n  }\n\n  for (var i = 0, ii = this.molecule.atoms.length; i < ii; i++) {\n    if (!this.molecule.atoms[i].visited) {\n      this.value++;\n      var q = new _structures_Queue__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n      this.molecule.atoms[i].visited = true;\n      q.enqueue(this.molecule.atoms[i]);\n\n      while (!q.isEmpty()) {\n        var atom = q.dequeue();\n\n        for (var j = 0, jj = this.molecule.bonds.length; j < jj; j++) {\n          var b = this.molecule.bonds[j];\n\n          if (b.contains(atom)) {\n            var neigh = b.getNeighbor(atom);\n\n            if (!neigh.visited) {\n              neigh.visited = true;\n              q.enqueue(neigh);\n            }\n          }\n        }\n      }\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvaW5mb3JtYXRpY3MvTnVtYmVyT2ZNb2xlY3VsZXNDb3VudGVyLmpzP2M0MjgiXSwibmFtZXMiOlsiTnVtYmVyT2ZNb2xlY3VsZXNDb3VudGVyIiwibW9sZWN1bGUiLCJzZXRNb2xlY3VsZSIsIl8iLCJwcm90b3R5cGUiLCJfQ291bnRlciIsImlubmVyQ2FsY3VsYXRlIiwiaSIsImlpIiwiYXRvbXMiLCJsZW5ndGgiLCJ2aXNpdGVkIiwidmFsdWUiLCJxIiwiUXVldWUiLCJlbnF1ZXVlIiwiaXNFbXB0eSIsImF0b20iLCJkZXF1ZXVlIiwiaiIsImpqIiwiYm9uZHMiLCJiIiwiY29udGFpbnMiLCJuZWlnaCIsImdldE5laWdoYm9yIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFZSxTQUFTQSx3QkFBVCxDQUFrQ0MsUUFBbEMsRUFBNEM7QUFDekQsT0FBS0MsV0FBTCxDQUFpQkQsUUFBakI7QUFDRDtBQUFBOztBQUNELElBQUlFLENBQUMsR0FBR0gsd0JBQXdCLENBQUNJLFNBQXpCLEdBQXFDLElBQUlDLGdEQUFKLEVBQTdDOztBQUNBRixDQUFDLENBQUNHLGNBQUYsR0FBbUIsWUFBVztBQUM1QixPQUFNLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLEVBQUUsR0FBRyxLQUFLUCxRQUFMLENBQWNRLEtBQWQsQ0FBb0JDLE1BQTFDLEVBQWtESCxDQUFDLEdBQUdDLEVBQXRELEVBQTBERCxDQUFDLEVBQTNELEVBQStEO0FBQzdELFNBQUtOLFFBQUwsQ0FBY1EsS0FBZCxDQUFvQkYsQ0FBcEIsRUFBdUJJLE9BQXZCLEdBQWlDLEtBQWpDO0FBQ0Q7O0FBQ0QsT0FBTSxJQUFJSixDQUFDLEdBQUcsQ0FBUixFQUFXQyxFQUFFLEdBQUcsS0FBS1AsUUFBTCxDQUFjUSxLQUFkLENBQW9CQyxNQUExQyxFQUFrREgsQ0FBQyxHQUFHQyxFQUF0RCxFQUEwREQsQ0FBQyxFQUEzRCxFQUErRDtBQUM3RCxRQUFJLENBQUMsS0FBS04sUUFBTCxDQUFjUSxLQUFkLENBQW9CRixDQUFwQixFQUF1QkksT0FBNUIsRUFBcUM7QUFDbkMsV0FBS0MsS0FBTDtBQUNBLFVBQUlDLENBQUMsR0FBRyxJQUFJQyx5REFBSixFQUFSO0FBQ0EsV0FBS2IsUUFBTCxDQUFjUSxLQUFkLENBQW9CRixDQUFwQixFQUF1QkksT0FBdkIsR0FBaUMsSUFBakM7QUFDQUUsT0FBQyxDQUFDRSxPQUFGLENBQVUsS0FBS2QsUUFBTCxDQUFjUSxLQUFkLENBQW9CRixDQUFwQixDQUFWOztBQUNBLGFBQU8sQ0FBQ00sQ0FBQyxDQUFDRyxPQUFGLEVBQVIsRUFBcUI7QUFDbkIsWUFBSUMsSUFBSSxHQUFHSixDQUFDLENBQUNLLE9BQUYsRUFBWDs7QUFDQSxhQUFNLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLEVBQUUsR0FBRyxLQUFLbkIsUUFBTCxDQUFjb0IsS0FBZCxDQUFvQlgsTUFBMUMsRUFBa0RTLENBQUMsR0FBR0MsRUFBdEQsRUFBMERELENBQUMsRUFBM0QsRUFBK0Q7QUFDN0QsY0FBSUcsQ0FBQyxHQUFHLEtBQUtyQixRQUFMLENBQWNvQixLQUFkLENBQW9CRixDQUFwQixDQUFSOztBQUNBLGNBQUlHLENBQUMsQ0FBQ0MsUUFBRixDQUFXTixJQUFYLENBQUosRUFBc0I7QUFDcEIsZ0JBQUlPLEtBQUssR0FBR0YsQ0FBQyxDQUFDRyxXQUFGLENBQWNSLElBQWQsQ0FBWjs7QUFDQSxnQkFBSSxDQUFDTyxLQUFLLENBQUNiLE9BQVgsRUFBb0I7QUFDbEJhLG1CQUFLLENBQUNiLE9BQU4sR0FBZ0IsSUFBaEI7QUFDQUUsZUFBQyxDQUFDRSxPQUFGLENBQVVTLEtBQVY7QUFDRDtBQUNGO0FBQ0Y7QUFDRjtBQUNGO0FBQ0Y7QUFDRixDQXpCRCIsImZpbGUiOiIuL3NyYy9DaGVtRG9vZGxlL2luZm9ybWF0aWNzL051bWJlck9mTW9sZWN1bGVzQ291bnRlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfQ291bnRlciBmcm9tICcuL19Db3VudGVyJztcbmltcG9ydCBRdWV1ZSBmcm9tICcuLi9zdHJ1Y3R1cmVzL1F1ZXVlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTnVtYmVyT2ZNb2xlY3VsZXNDb3VudGVyKG1vbGVjdWxlKSB7XG4gIHRoaXMuc2V0TW9sZWN1bGUobW9sZWN1bGUpO1xufTtcbnZhciBfID0gTnVtYmVyT2ZNb2xlY3VsZXNDb3VudGVyLnByb3RvdHlwZSA9IG5ldyBfQ291bnRlcigpO1xuXy5pbm5lckNhbGN1bGF0ZSA9IGZ1bmN0aW9uKCkge1xuICBmb3IgKCB2YXIgaSA9IDAsIGlpID0gdGhpcy5tb2xlY3VsZS5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgdGhpcy5tb2xlY3VsZS5hdG9tc1tpXS52aXNpdGVkID0gZmFsc2U7XG4gIH1cbiAgZm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMubW9sZWN1bGUuYXRvbXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgIGlmICghdGhpcy5tb2xlY3VsZS5hdG9tc1tpXS52aXNpdGVkKSB7XG4gICAgICB0aGlzLnZhbHVlKys7XG4gICAgICB2YXIgcSA9IG5ldyBRdWV1ZSgpO1xuICAgICAgdGhpcy5tb2xlY3VsZS5hdG9tc1tpXS52aXNpdGVkID0gdHJ1ZTtcbiAgICAgIHEuZW5xdWV1ZSh0aGlzLm1vbGVjdWxlLmF0b21zW2ldKTtcbiAgICAgIHdoaWxlICghcS5pc0VtcHR5KCkpIHtcbiAgICAgICAgdmFyIGF0b20gPSBxLmRlcXVldWUoKTtcbiAgICAgICAgZm9yICggdmFyIGogPSAwLCBqaiA9IHRoaXMubW9sZWN1bGUuYm9uZHMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgIHZhciBiID0gdGhpcy5tb2xlY3VsZS5ib25kc1tqXTtcbiAgICAgICAgICBpZiAoYi5jb250YWlucyhhdG9tKSkge1xuICAgICAgICAgICAgdmFyIG5laWdoID0gYi5nZXROZWlnaGJvcihhdG9tKTtcbiAgICAgICAgICAgIGlmICghbmVpZ2gudmlzaXRlZCkge1xuICAgICAgICAgICAgICBuZWlnaC52aXNpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcS5lbnF1ZXVlKG5laWdoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/ChemDoodle/informatics/NumberOfMoleculesCounter.js\n");

/***/ }),

/***/ "./src/ChemDoodle/informatics/SSSRFinder.js":
/*!**************************************************!*\
  !*** ./src/ChemDoodle/informatics/SSSRFinder.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return SSSRFinder; });\n/* harmony import */ var _FrerejacqueNumberCounter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FrerejacqueNumberCounter */ \"./src/ChemDoodle/informatics/FrerejacqueNumberCounter.js\");\n/* harmony import */ var _EulerFacetRingFinder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EulerFacetRingFinder */ \"./src/ChemDoodle/informatics/EulerFacetRingFinder.js\");\n\n\nfunction SSSRFinder(molecule) {\n  this.rings = [];\n\n  if (molecule.atoms.length > 0) {\n    var frerejacqueNumber = new _FrerejacqueNumberCounter__WEBPACK_IMPORTED_MODULE_0__[\"default\"](molecule).value;\n    var all = new _EulerFacetRingFinder__WEBPACK_IMPORTED_MODULE_1__[\"default\"](molecule).rings;\n    all.sort(function (a, b) {\n      return a.atoms.length - b.atoms.length;\n    });\n\n    for (var i = 0, ii = molecule.bonds.length; i < ii; i++) {\n      molecule.bonds[i].visited = false;\n    }\n\n    for (var i = 0, ii = all.length; i < ii; i++) {\n      var use = false;\n\n      for (var j = 0, jj = all[i].bonds.length; j < jj; j++) {\n        if (!all[i].bonds[j].visited) {\n          use = true;\n          break;\n        }\n      }\n\n      if (use) {\n        for (var j = 0, jj = all[i].bonds.length; j < jj; j++) {\n          all[i].bonds[j].visited = true;\n        }\n\n        this.rings.push(all[i]);\n      }\n\n      if (this.rings.length === frerejacqueNumber) {\n        break;\n      }\n    }\n  }\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvaW5mb3JtYXRpY3MvU1NTUkZpbmRlci5qcz80MmMxIl0sIm5hbWVzIjpbIlNTU1JGaW5kZXIiLCJtb2xlY3VsZSIsInJpbmdzIiwiYXRvbXMiLCJsZW5ndGgiLCJmcmVyZWphY3F1ZU51bWJlciIsIkZyZXJlamFjcXVlTnVtYmVyQ291bnRlciIsInZhbHVlIiwiYWxsIiwiRXVsZXJGYWNldFJpbmdGaW5kZXIiLCJzb3J0IiwiYSIsImIiLCJpIiwiaWkiLCJib25kcyIsInZpc2l0ZWQiLCJ1c2UiLCJqIiwiamoiLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFZSxTQUFTQSxVQUFULENBQW9CQyxRQUFwQixFQUE4QjtBQUM1QyxPQUFLQyxLQUFMLEdBQWEsRUFBYjs7QUFDQSxNQUFJRCxRQUFRLENBQUNFLEtBQVQsQ0FBZUMsTUFBZixHQUF3QixDQUE1QixFQUErQjtBQUM5QixRQUFJQyxpQkFBaUIsR0FBRyxJQUFJQyxpRUFBSixDQUE2QkwsUUFBN0IsRUFBdUNNLEtBQS9EO0FBQ0EsUUFBSUMsR0FBRyxHQUFHLElBQUlDLDZEQUFKLENBQXlCUixRQUF6QixFQUFtQ0MsS0FBN0M7QUFDQU0sT0FBRyxDQUFDRSxJQUFKLENBQVMsVUFBU0MsQ0FBVCxFQUFZQyxDQUFaLEVBQWU7QUFDdkIsYUFBT0QsQ0FBQyxDQUFDUixLQUFGLENBQVFDLE1BQVIsR0FBaUJRLENBQUMsQ0FBQ1QsS0FBRixDQUFRQyxNQUFoQztBQUNBLEtBRkQ7O0FBR0EsU0FBTSxJQUFJUyxDQUFDLEdBQUcsQ0FBUixFQUFXQyxFQUFFLEdBQUdiLFFBQVEsQ0FBQ2MsS0FBVCxDQUFlWCxNQUFyQyxFQUE2Q1MsQ0FBQyxHQUFHQyxFQUFqRCxFQUFxREQsQ0FBQyxFQUF0RCxFQUEwRDtBQUN6RFosY0FBUSxDQUFDYyxLQUFULENBQWVGLENBQWYsRUFBa0JHLE9BQWxCLEdBQTRCLEtBQTVCO0FBQ0E7O0FBQ0QsU0FBTSxJQUFJSCxDQUFDLEdBQUcsQ0FBUixFQUFXQyxFQUFFLEdBQUdOLEdBQUcsQ0FBQ0osTUFBMUIsRUFBa0NTLENBQUMsR0FBR0MsRUFBdEMsRUFBMENELENBQUMsRUFBM0MsRUFBK0M7QUFDOUMsVUFBSUksR0FBRyxHQUFHLEtBQVY7O0FBQ0EsV0FBTSxJQUFJQyxDQUFDLEdBQUcsQ0FBUixFQUFXQyxFQUFFLEdBQUdYLEdBQUcsQ0FBQ0ssQ0FBRCxDQUFILENBQU9FLEtBQVAsQ0FBYVgsTUFBbkMsRUFBMkNjLENBQUMsR0FBR0MsRUFBL0MsRUFBbURELENBQUMsRUFBcEQsRUFBd0Q7QUFDdkQsWUFBSSxDQUFDVixHQUFHLENBQUNLLENBQUQsQ0FBSCxDQUFPRSxLQUFQLENBQWFHLENBQWIsRUFBZ0JGLE9BQXJCLEVBQThCO0FBQzdCQyxhQUFHLEdBQUcsSUFBTjtBQUNBO0FBQ0E7QUFDRDs7QUFDRCxVQUFJQSxHQUFKLEVBQVM7QUFDUixhQUFNLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLEVBQUUsR0FBR1gsR0FBRyxDQUFDSyxDQUFELENBQUgsQ0FBT0UsS0FBUCxDQUFhWCxNQUFuQyxFQUEyQ2MsQ0FBQyxHQUFHQyxFQUEvQyxFQUFtREQsQ0FBQyxFQUFwRCxFQUF3RDtBQUN2RFYsYUFBRyxDQUFDSyxDQUFELENBQUgsQ0FBT0UsS0FBUCxDQUFhRyxDQUFiLEVBQWdCRixPQUFoQixHQUEwQixJQUExQjtBQUNBOztBQUNELGFBQUtkLEtBQUwsQ0FBV2tCLElBQVgsQ0FBZ0JaLEdBQUcsQ0FBQ0ssQ0FBRCxDQUFuQjtBQUNBOztBQUNELFVBQUksS0FBS1gsS0FBTCxDQUFXRSxNQUFYLEtBQXNCQyxpQkFBMUIsRUFBNkM7QUFDNUM7QUFDQTtBQUNEO0FBQ0Q7QUFDRDtBQUFBIiwiZmlsZSI6Ii4vc3JjL0NoZW1Eb29kbGUvaW5mb3JtYXRpY3MvU1NTUkZpbmRlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBGcmVyZWphY3F1ZU51bWJlckNvdW50ZXIgZnJvbSAnLi9GcmVyZWphY3F1ZU51bWJlckNvdW50ZXInO1xuaW1wb3J0IEV1bGVyRmFjZXRSaW5nRmluZGVyIGZyb20gJy4vRXVsZXJGYWNldFJpbmdGaW5kZXInO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTU1NSRmluZGVyKG1vbGVjdWxlKSB7XG5cdHRoaXMucmluZ3MgPSBbXTtcblx0aWYgKG1vbGVjdWxlLmF0b21zLmxlbmd0aCA+IDApIHtcblx0XHR2YXIgZnJlcmVqYWNxdWVOdW1iZXIgPSBuZXcgRnJlcmVqYWNxdWVOdW1iZXJDb3VudGVyKG1vbGVjdWxlKS52YWx1ZTtcblx0XHR2YXIgYWxsID0gbmV3IEV1bGVyRmFjZXRSaW5nRmluZGVyKG1vbGVjdWxlKS5yaW5ncztcblx0XHRhbGwuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHRyZXR1cm4gYS5hdG9tcy5sZW5ndGggLSBiLmF0b21zLmxlbmd0aDtcblx0XHR9KTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9sZWN1bGUuYm9uZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0bW9sZWN1bGUuYm9uZHNbaV0udmlzaXRlZCA9IGZhbHNlO1xuXHRcdH1cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gYWxsLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciB1c2UgPSBmYWxzZTtcblx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBhbGxbaV0uYm9uZHMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRpZiAoIWFsbFtpXS5ib25kc1tqXS52aXNpdGVkKSB7XG5cdFx0XHRcdFx0dXNlID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKHVzZSkge1xuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gYWxsW2ldLmJvbmRzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHRhbGxbaV0uYm9uZHNbal0udmlzaXRlZCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5yaW5ncy5wdXNoKGFsbFtpXSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5yaW5ncy5sZW5ndGggPT09IGZyZXJlamFjcXVlTnVtYmVyKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/ChemDoodle/informatics/SSSRFinder.js\n");

/***/ }),

/***/ "./src/ChemDoodle/informatics/Splitter.js":
/*!************************************************!*\
  !*** ./src/ChemDoodle/informatics/Splitter.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Splitter; });\n/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../structures */ \"./src/ChemDoodle/structures/index.js\");\n\nfunction Splitter() {}\n;\nvar _ = Splitter.prototype;\n\n_.split = function (molecule) {\n  var mols = [];\n\n  for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {\n    molecule.atoms[i].visited = false;\n  }\n\n  for (var i = 0, ii = molecule.bonds.length; i < ii; i++) {\n    molecule.bonds[i].visited = false;\n  }\n\n  for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {\n    var a = molecule.atoms[i];\n\n    if (!a.visited) {\n      var newMol = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Molecule\"]();\n      newMol.atoms.push(a);\n      a.visited = true;\n      var q = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Queue\"]();\n      q.enqueue(a);\n\n      while (!q.isEmpty()) {\n        var atom = q.dequeue();\n\n        for (var j = 0, jj = molecule.bonds.length; j < jj; j++) {\n          var b = molecule.bonds[j];\n\n          if (b.contains(atom) && !b.visited) {\n            b.visited = true;\n            newMol.bonds.push(b);\n            var neigh = b.getNeighbor(atom);\n\n            if (!neigh.visited) {\n              neigh.visited = true;\n              newMol.atoms.push(neigh);\n              q.enqueue(neigh);\n            }\n          }\n        }\n      }\n\n      mols.push(newMol);\n    }\n  }\n\n  return mols;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvaW5mb3JtYXRpY3MvU3BsaXR0ZXIuanM/YzMyZiJdLCJuYW1lcyI6WyJTcGxpdHRlciIsIl8iLCJwcm90b3R5cGUiLCJzcGxpdCIsIm1vbGVjdWxlIiwibW9scyIsImkiLCJpaSIsImF0b21zIiwibGVuZ3RoIiwidmlzaXRlZCIsImJvbmRzIiwiYSIsIm5ld01vbCIsIk1vbGVjdWxlIiwicHVzaCIsInEiLCJRdWV1ZSIsImVucXVldWUiLCJpc0VtcHR5IiwiYXRvbSIsImRlcXVldWUiLCJqIiwiamoiLCJiIiwiY29udGFpbnMiLCJuZWlnaCIsImdldE5laWdoYm9yIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVlLFNBQVNBLFFBQVQsR0FBb0IsQ0FDbEM7QUFBQTtBQUNELElBQUlDLENBQUMsR0FBR0QsUUFBUSxDQUFDRSxTQUFqQjs7QUFDQUQsQ0FBQyxDQUFDRSxLQUFGLEdBQVUsVUFBU0MsUUFBVCxFQUFtQjtBQUMzQixNQUFJQyxJQUFJLEdBQUcsRUFBWDs7QUFDQSxPQUFNLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLEVBQUUsR0FBR0gsUUFBUSxDQUFDSSxLQUFULENBQWVDLE1BQXJDLEVBQTZDSCxDQUFDLEdBQUdDLEVBQWpELEVBQXFERCxDQUFDLEVBQXRELEVBQTBEO0FBQ3hERixZQUFRLENBQUNJLEtBQVQsQ0FBZUYsQ0FBZixFQUFrQkksT0FBbEIsR0FBNEIsS0FBNUI7QUFDRDs7QUFDRCxPQUFNLElBQUlKLENBQUMsR0FBRyxDQUFSLEVBQVdDLEVBQUUsR0FBR0gsUUFBUSxDQUFDTyxLQUFULENBQWVGLE1BQXJDLEVBQTZDSCxDQUFDLEdBQUdDLEVBQWpELEVBQXFERCxDQUFDLEVBQXRELEVBQTBEO0FBQ3hERixZQUFRLENBQUNPLEtBQVQsQ0FBZUwsQ0FBZixFQUFrQkksT0FBbEIsR0FBNEIsS0FBNUI7QUFDRDs7QUFDRCxPQUFNLElBQUlKLENBQUMsR0FBRyxDQUFSLEVBQVdDLEVBQUUsR0FBR0gsUUFBUSxDQUFDSSxLQUFULENBQWVDLE1BQXJDLEVBQTZDSCxDQUFDLEdBQUdDLEVBQWpELEVBQXFERCxDQUFDLEVBQXRELEVBQTBEO0FBQ3hELFFBQUlNLENBQUMsR0FBR1IsUUFBUSxDQUFDSSxLQUFULENBQWVGLENBQWYsQ0FBUjs7QUFDQSxRQUFJLENBQUNNLENBQUMsQ0FBQ0YsT0FBUCxFQUFnQjtBQUNkLFVBQUlHLE1BQU0sR0FBRyxJQUFJQyxvREFBSixFQUFiO0FBQ0FELFlBQU0sQ0FBQ0wsS0FBUCxDQUFhTyxJQUFiLENBQWtCSCxDQUFsQjtBQUNBQSxPQUFDLENBQUNGLE9BQUYsR0FBWSxJQUFaO0FBQ0EsVUFBSU0sQ0FBQyxHQUFHLElBQUlDLGlEQUFKLEVBQVI7QUFDQUQsT0FBQyxDQUFDRSxPQUFGLENBQVVOLENBQVY7O0FBQ0EsYUFBTyxDQUFDSSxDQUFDLENBQUNHLE9BQUYsRUFBUixFQUFxQjtBQUNuQixZQUFJQyxJQUFJLEdBQUdKLENBQUMsQ0FBQ0ssT0FBRixFQUFYOztBQUNBLGFBQU0sSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV0MsRUFBRSxHQUFHbkIsUUFBUSxDQUFDTyxLQUFULENBQWVGLE1BQXJDLEVBQTZDYSxDQUFDLEdBQUdDLEVBQWpELEVBQXFERCxDQUFDLEVBQXRELEVBQTBEO0FBQ3hELGNBQUlFLENBQUMsR0FBR3BCLFFBQVEsQ0FBQ08sS0FBVCxDQUFlVyxDQUFmLENBQVI7O0FBQ0EsY0FBSUUsQ0FBQyxDQUFDQyxRQUFGLENBQVdMLElBQVgsS0FBb0IsQ0FBQ0ksQ0FBQyxDQUFDZCxPQUEzQixFQUFvQztBQUNsQ2MsYUFBQyxDQUFDZCxPQUFGLEdBQVksSUFBWjtBQUNBRyxrQkFBTSxDQUFDRixLQUFQLENBQWFJLElBQWIsQ0FBa0JTLENBQWxCO0FBQ0EsZ0JBQUlFLEtBQUssR0FBR0YsQ0FBQyxDQUFDRyxXQUFGLENBQWNQLElBQWQsQ0FBWjs7QUFDQSxnQkFBSSxDQUFDTSxLQUFLLENBQUNoQixPQUFYLEVBQW9CO0FBQ2xCZ0IsbUJBQUssQ0FBQ2hCLE9BQU4sR0FBZ0IsSUFBaEI7QUFDQUcsb0JBQU0sQ0FBQ0wsS0FBUCxDQUFhTyxJQUFiLENBQWtCVyxLQUFsQjtBQUNBVixlQUFDLENBQUNFLE9BQUYsQ0FBVVEsS0FBVjtBQUNEO0FBQ0Y7QUFDRjtBQUNGOztBQUNEckIsVUFBSSxDQUFDVSxJQUFMLENBQVVGLE1BQVY7QUFDRDtBQUNGOztBQUNELFNBQU9SLElBQVA7QUFDRCxDQXBDRCIsImZpbGUiOiIuL3NyYy9DaGVtRG9vZGxlL2luZm9ybWF0aWNzL1NwbGl0dGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUXVldWUsIE1vbGVjdWxlIH0gZnJvbSAnLi4vc3RydWN0dXJlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNwbGl0dGVyKCkge1xufTtcbnZhciBfID0gU3BsaXR0ZXIucHJvdG90eXBlO1xuXy5zcGxpdCA9IGZ1bmN0aW9uKG1vbGVjdWxlKSB7XG4gIHZhciBtb2xzID0gW107XG4gIGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xlY3VsZS5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgbW9sZWN1bGUuYXRvbXNbaV0udmlzaXRlZCA9IGZhbHNlO1xuICB9XG4gIGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xlY3VsZS5ib25kcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgbW9sZWN1bGUuYm9uZHNbaV0udmlzaXRlZCA9IGZhbHNlO1xuICB9XG4gIGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xlY3VsZS5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgdmFyIGEgPSBtb2xlY3VsZS5hdG9tc1tpXTtcbiAgICBpZiAoIWEudmlzaXRlZCkge1xuICAgICAgdmFyIG5ld01vbCA9IG5ldyBNb2xlY3VsZSgpO1xuICAgICAgbmV3TW9sLmF0b21zLnB1c2goYSk7XG4gICAgICBhLnZpc2l0ZWQgPSB0cnVlO1xuICAgICAgdmFyIHEgPSBuZXcgUXVldWUoKTtcbiAgICAgIHEuZW5xdWV1ZShhKTtcbiAgICAgIHdoaWxlICghcS5pc0VtcHR5KCkpIHtcbiAgICAgICAgdmFyIGF0b20gPSBxLmRlcXVldWUoKTtcbiAgICAgICAgZm9yICggdmFyIGogPSAwLCBqaiA9IG1vbGVjdWxlLmJvbmRzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICB2YXIgYiA9IG1vbGVjdWxlLmJvbmRzW2pdO1xuICAgICAgICAgIGlmIChiLmNvbnRhaW5zKGF0b20pICYmICFiLnZpc2l0ZWQpIHtcbiAgICAgICAgICAgIGIudmlzaXRlZCA9IHRydWU7XG4gICAgICAgICAgICBuZXdNb2wuYm9uZHMucHVzaChiKTtcbiAgICAgICAgICAgIHZhciBuZWlnaCA9IGIuZ2V0TmVpZ2hib3IoYXRvbSk7XG4gICAgICAgICAgICBpZiAoIW5laWdoLnZpc2l0ZWQpIHtcbiAgICAgICAgICAgICAgbmVpZ2gudmlzaXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgIG5ld01vbC5hdG9tcy5wdXNoKG5laWdoKTtcbiAgICAgICAgICAgICAgcS5lbnF1ZXVlKG5laWdoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG1vbHMucHVzaChuZXdNb2wpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9scztcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ChemDoodle/informatics/Splitter.js\n");

/***/ }),

/***/ "./src/ChemDoodle/informatics/_Counter.js":
/*!************************************************!*\
  !*** ./src/ChemDoodle/informatics/_Counter.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _Counter; });\nfunction _Counter() {}\n;\nvar _ = _Counter.prototype;\n_.value = 0;\n_.molecule = undefined;\n\n_.setMolecule = function (molecule) {\n  this.value = 0;\n  this.molecule = molecule;\n\n  if (this.innerCalculate) {\n    this.innerCalculate();\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvaW5mb3JtYXRpY3MvX0NvdW50ZXIuanM/MDQzMSJdLCJuYW1lcyI6WyJfQ291bnRlciIsIl8iLCJwcm90b3R5cGUiLCJ2YWx1ZSIsIm1vbGVjdWxlIiwidW5kZWZpbmVkIiwic2V0TW9sZWN1bGUiLCJpbm5lckNhbGN1bGF0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFlLFNBQVNBLFFBQVQsR0FBb0IsQ0FDbEM7QUFBQTtBQUNELElBQUlDLENBQUMsR0FBR0QsUUFBUSxDQUFDRSxTQUFqQjtBQUNBRCxDQUFDLENBQUNFLEtBQUYsR0FBVSxDQUFWO0FBQ0FGLENBQUMsQ0FBQ0csUUFBRixHQUFhQyxTQUFiOztBQUNBSixDQUFDLENBQUNLLFdBQUYsR0FBZ0IsVUFBU0YsUUFBVCxFQUFtQjtBQUNqQyxPQUFLRCxLQUFMLEdBQWEsQ0FBYjtBQUNBLE9BQUtDLFFBQUwsR0FBZ0JBLFFBQWhCOztBQUNBLE1BQUksS0FBS0csY0FBVCxFQUF5QjtBQUN2QixTQUFLQSxjQUFMO0FBQ0Q7QUFDRixDQU5EIiwiZmlsZSI6Ii4vc3JjL0NoZW1Eb29kbGUvaW5mb3JtYXRpY3MvX0NvdW50ZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfQ291bnRlcigpIHtcbn07XG52YXIgXyA9IF9Db3VudGVyLnByb3RvdHlwZTtcbl8udmFsdWUgPSAwO1xuXy5tb2xlY3VsZSA9IHVuZGVmaW5lZDtcbl8uc2V0TW9sZWN1bGUgPSBmdW5jdGlvbihtb2xlY3VsZSkge1xuICB0aGlzLnZhbHVlID0gMDtcbiAgdGhpcy5tb2xlY3VsZSA9IG1vbGVjdWxlO1xuICBpZiAodGhpcy5pbm5lckNhbGN1bGF0ZSkge1xuICAgIHRoaXMuaW5uZXJDYWxjdWxhdGUoKTtcbiAgfVxufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ChemDoodle/informatics/_Counter.js\n");

/***/ }),

/***/ "./src/ChemDoodle/informatics/_RingFinder.js":
/*!***************************************************!*\
  !*** ./src/ChemDoodle/informatics/_RingFinder.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _RingFinder; });\nfunction _RingFinder() {}\n;\nvar _ = _RingFinder.prototype;\n_.atoms = undefined;\n_.bonds = undefined;\n_.rings = undefined;\n\n_.reduce = function (molecule) {\n  for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {\n    molecule.atoms[i].visited = false;\n  }\n\n  for (var i = 0, ii = molecule.bonds.length; i < ii; i++) {\n    molecule.bonds[i].visited = false;\n  }\n\n  var cont = true;\n\n  while (cont) {\n    cont = false;\n\n    for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {\n      var count = 0;\n      var bond;\n\n      for (var j = 0, jj = molecule.bonds.length; j < jj; j++) {\n        if (molecule.bonds[j].contains(molecule.atoms[i]) && !molecule.bonds[j].visited) {\n          count++;\n\n          if (count === 2) {\n            break;\n          }\n\n          bond = molecule.bonds[j];\n        }\n      }\n\n      if (count === 1) {\n        cont = true;\n        bond.visited = true;\n        molecule.atoms[i].visited = true;\n      }\n    }\n  }\n\n  for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {\n    if (!molecule.atoms[i].visited) {\n      this.atoms.push(molecule.atoms[i]);\n    }\n  }\n\n  for (var i = 0, ii = molecule.bonds.length; i < ii; i++) {\n    if (!molecule.bonds[i].visited) {\n      this.bonds.push(molecule.bonds[i]);\n    }\n  }\n\n  if (this.bonds.length === 0 && this.atoms.length !== 0) {\n    this.atoms = [];\n  }\n};\n\n_.setMolecule = function (molecule) {\n  this.atoms = [];\n  this.bonds = [];\n  this.rings = [];\n  this.reduce(molecule);\n\n  if (this.atoms.length > 2 && this.innerGetRings) {\n    this.innerGetRings();\n  }\n};\n\n_.fuse = function () {\n  for (var i = 0, ii = this.rings.length; i < ii; i++) {\n    for (var j = 0, jj = this.bonds.length; j < jj; j++) {\n      if (this.rings[i].atoms.indexOf(this.bonds[j].a1) !== -1 && this.rings[i].atoms.indexOf(this.bonds[j].a2) !== -1) {\n        this.rings[i].bonds.push(this.bonds[j]);\n      }\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvaW5mb3JtYXRpY3MvX1JpbmdGaW5kZXIuanM/YTJkNyJdLCJuYW1lcyI6WyJfUmluZ0ZpbmRlciIsIl8iLCJwcm90b3R5cGUiLCJhdG9tcyIsInVuZGVmaW5lZCIsImJvbmRzIiwicmluZ3MiLCJyZWR1Y2UiLCJtb2xlY3VsZSIsImkiLCJpaSIsImxlbmd0aCIsInZpc2l0ZWQiLCJjb250IiwiY291bnQiLCJib25kIiwiaiIsImpqIiwiY29udGFpbnMiLCJwdXNoIiwic2V0TW9sZWN1bGUiLCJpbm5lckdldFJpbmdzIiwiZnVzZSIsImluZGV4T2YiLCJhMSIsImEyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQWUsU0FBU0EsV0FBVCxHQUF1QixDQUNyQztBQUFBO0FBQ0QsSUFBSUMsQ0FBQyxHQUFHRCxXQUFXLENBQUNFLFNBQXBCO0FBQ0FELENBQUMsQ0FBQ0UsS0FBRixHQUFVQyxTQUFWO0FBQ0FILENBQUMsQ0FBQ0ksS0FBRixHQUFVRCxTQUFWO0FBQ0FILENBQUMsQ0FBQ0ssS0FBRixHQUFVRixTQUFWOztBQUNBSCxDQUFDLENBQUNNLE1BQUYsR0FBVyxVQUFTQyxRQUFULEVBQW1CO0FBQzVCLE9BQU0sSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV0MsRUFBRSxHQUFHRixRQUFRLENBQUNMLEtBQVQsQ0FBZVEsTUFBckMsRUFBNkNGLENBQUMsR0FBR0MsRUFBakQsRUFBcURELENBQUMsRUFBdEQsRUFBMEQ7QUFDeERELFlBQVEsQ0FBQ0wsS0FBVCxDQUFlTSxDQUFmLEVBQWtCRyxPQUFsQixHQUE0QixLQUE1QjtBQUNEOztBQUNELE9BQU0sSUFBSUgsQ0FBQyxHQUFHLENBQVIsRUFBV0MsRUFBRSxHQUFHRixRQUFRLENBQUNILEtBQVQsQ0FBZU0sTUFBckMsRUFBNkNGLENBQUMsR0FBR0MsRUFBakQsRUFBcURELENBQUMsRUFBdEQsRUFBMEQ7QUFDeERELFlBQVEsQ0FBQ0gsS0FB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QUFJYixDQUFDLEdBQUcsQ0FBUixFQUFXQyxFQUFFLEdBQUcsS0FBS0osS0FBTCxDQUFXSyxNQUFqQyxFQUF5Q0YsQ0FBQyxHQUFHQyxFQUE3QyxFQUFpREQsQ0FBQyxFQUFsRCxFQUFzRDtBQUNwRCxTQUFNLElBQUlPLENBQUMsR0FBRyxDQUFSLEVBQVdDLEVBQUUsR0FBRyxLQUFLWixLQUFMLENBQVdNLE1BQWpDLEVBQXlDSyxDQUFDLEdBQUdDLEVBQTdDLEVBQWlERCxDQUFDLEVBQWxELEVBQXNEO0FBQ3BELFVBQUksS0FBS1YsS0FBTCxDQUFXRyxDQUFYLEVBQWNOLEtBQWQsQ0FBb0JvQixPQUFwQixDQUE0QixLQUFLbEIsS0FBTCxDQUFXVyxDQUFYLEVBQWNRLEVBQTFDLE1BQWtELENBQUMsQ0FBbkQsSUFBd0QsS0FBS2xCLEtBQUwsQ0FBV0csQ0FBWCxFQUFjTixLQUFkLENBQW9Cb0IsT0FBcEIsQ0FBNEIsS0FBS2xCLEtBQUwsQ0FBV1csQ0FBWCxFQUFjUyxFQUExQyxNQUFrRCxDQUFDLENBQS9HLEVBQWtIO0FBQ2hILGFBQUtuQixLQUFMLENBQVdHLENBQVgsRUFBY0osS0FBZCxDQUFvQmMsSUFBcEIsQ0FBeUIsS0FBS2QsS0FBTCxDQUFXVyxDQUFYLENBQXpCO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YsQ0FSRCIsImZpbGUiOiIuL3NyYy9DaGVtRG9vZGxlL2luZm9ybWF0aWNzL19SaW5nRmluZGVyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX1JpbmdGaW5kZXIoKSB7XG59O1xudmFyIF8gPSBfUmluZ0ZpbmRlci5wcm90b3R5cGU7XG5fLmF0b21zID0gdW5kZWZpbmVkO1xuXy5ib25kcyA9IHVuZGVmaW5lZDtcbl8ucmluZ3MgPSB1bmRlZmluZWQ7XG5fLnJlZHVjZSA9IGZ1bmN0aW9uKG1vbGVjdWxlKSB7XG4gIGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xlY3VsZS5hdG9tcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgbW9sZWN1bGUuYXRvbXNbaV0udmlzaXRlZCA9IGZhbHNlO1xuICB9XG4gIGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xlY3VsZS5ib25kcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgbW9sZWN1bGUuYm9uZHNbaV0udmlzaXRlZCA9IGZhbHNlO1xuICB9XG4gIHZhciBjb250ID0gdHJ1ZTtcbiAgd2hpbGUgKGNvbnQpIHtcbiAgICBjb250ID0gZmFsc2U7XG4gICAgZm9yICggdmFyIGkgPSAwLCBpaSA9IG1vbGVjdWxlLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICB2YXIgYm9uZDtcbiAgICAgIGZvciAoIHZhciBqID0gMCwgamogPSBtb2xlY3VsZS5ib25kcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgIGlmIChtb2xlY3VsZS5ib25kc1tqXS5jb250YWlucyhtb2xlY3VsZS5hdG9tc1tpXSkgJiYgIW1vbGVjdWxlLmJvbmRzW2pdLnZpc2l0ZWQpIHtcbiAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgIGlmIChjb3VudCA9PT0gMikge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJvbmQgPSBtb2xlY3VsZS5ib25kc1tqXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgICAgIGNvbnQgPSB0cnVlO1xuICAgICAgICBib25kLnZpc2l0ZWQgPSB0cnVlO1xuICAgICAgICBtb2xlY3VsZS5hdG9tc1tpXS52aXNpdGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZm9yICggdmFyIGkgPSAwLCBpaSA9IG1vbGVjdWxlLmF0b21zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICBpZiAoIW1vbGVjdWxlLmF0b21zW2ldLnZpc2l0ZWQpIHtcbiAgICAgIHRoaXMuYXRvbXMucHVzaChtb2xlY3VsZS5hdG9tc1tpXSk7XG4gICAgfVxuICB9XG4gIGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xlY3VsZS5ib25kcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgaWYgKCFtb2xlY3VsZS5ib25kc1tpXS52aXNpdGVkKSB7XG4gICAgICB0aGlzLmJvbmRzLnB1c2gobW9sZWN1bGUuYm9uZHNbaV0pO1xuICAgIH1cbiAgfVxuICBpZiAodGhpcy5ib25kcy5sZW5ndGggPT09IDAgJiYgdGhpcy5hdG9tcy5sZW5ndGggIT09IDApIHtcbiAgICB0aGlzLmF0b21zID0gW107XG4gIH1cbn07XG5fLnNldE1vbGVjdWxlID0gZnVuY3Rpb24obW9sZWN1bGUpIHtcbiAgdGhpcy5hdG9tcyA9IFtdO1xuICB0aGlzLmJvbmRzID0gW107XG4gIHRoaXMucmluZ3MgPSBbXTtcbiAgdGhpcy5yZWR1Y2UobW9sZWN1bGUpO1xuICBpZiAodGhpcy5hdG9tcy5sZW5ndGggPiAyICYmIHRoaXMuaW5uZXJHZXRSaW5ncykge1xuICAgIHRoaXMuaW5uZXJHZXRSaW5ncygpO1xuICB9XG59O1xuXy5mdXNlID0gZnVuY3Rpb24oKSB7XG4gIGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLnJpbmdzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICBmb3IgKCB2YXIgaiA9IDAsIGpqID0gdGhpcy5ib25kcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICBpZiAodGhpcy5yaW5nc1tpXS5hdG9tcy5pbmRleE9mKHRoaXMuYm9uZHNbal0uYTEpICE9PSAtMSAmJiB0aGlzLnJpbmdzW2ldLmF0b21zLmluZGV4T2YodGhpcy5ib25kc1tqXS5hMikgIT09IC0xKSB7XG4gICAgICAgIHRoaXMucmluZ3NbaV0uYm9uZHMucHVzaCh0aGlzLmJvbmRzW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ChemDoodle/informatics/_RingFinder.js\n");

/***/ }),

/***/ "./src/ChemDoodle/informatics/index.js":
/*!*********************************************!*\
  !*** ./src/ChemDoodle/informatics/index.js ***!
  \*********************************************/
/*! exports provided: _Counter, NumberOfMoleculesCounter, FrerejacqueNumberCounter, _RingFinder, EulerFacetRingFinder, SSSRFinder, BondDeducer, getPointsPerAngstrom, HydrogenDeducer, Splitter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Counter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_Counter */ \"./src/ChemDoodle/informatics/_Counter.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"_Counter\", function() { return _Counter__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _NumberOfMoleculesCounter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NumberOfMoleculesCounter */ \"./src/ChemDoodle/informatics/NumberOfMoleculesCounter.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"NumberOfMoleculesCounter\", function() { return _NumberOfMoleculesCounter__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _FrerejacqueNumberCounter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FrerejacqueNumberCounter */ \"./src/ChemDoodle/informatics/FrerejacqueNumberCounter.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"FrerejacqueNumberCounter\", function() { return _FrerejacqueNumberCounter__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _RingFinder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./_RingFinder */ \"./src/ChemDoodle/informatics/_RingFinder.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"_RingFinder\", function() { return _RingFinder__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n/* harmony import */ var _EulerFacetRingFinder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EulerFacetRingFinder */ \"./src/ChemDoodle/informatics/EulerFacetRingFinder.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"EulerFacetRingFinder\", function() { return _EulerFacetRingFinder__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; });\n\n/* harmony import */ var _SSSRFinder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SSSRFinder */ \"./src/ChemDoodle/informatics/SSSRFinder.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"SSSRFinder\", function() { return _SSSRFinder__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; });\n\n/* harmony import */ var _BondDeducer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BondDeducer */ \"./src/ChemDoodle/informatics/BondDeducer.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"BondDeducer\", function() { return _BondDeducer__WEBPACK_IMPORTED_MODULE_6__[\"default\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"getPointsPerAngstrom\", function() { return _BondDeducer__WEBPACK_IMPORTED_MODULE_6__[\"getPointsPerAngstrom\"]; });\n\n/* harmony import */ var _HydrogenDeducer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./HydrogenDeducer */ \"./src/ChemDoodle/informatics/HydrogenDeducer.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"HydrogenDeducer\", function() { return _HydrogenDeducer__WEBPACK_IMPORTED_MODULE_7__[\"default\"]; });\n\n/* harmony import */ var _Splitter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Splitter */ \"./src/ChemDoodle/informatics/Splitter.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Splitter\", function() { return _Splitter__WEBPACK_IMPORTED_MODULE_8__[\"default\"]; });\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvaW5mb3JtYXRpY3MvaW5kZXguanM/M2I0OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vc3JjL0NoZW1Eb29kbGUvaW5mb3JtYXRpY3MvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBkZWZhdWx0IGFzIF9Db3VudGVyIH0gZnJvbSAnLi9fQ291bnRlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE51bWJlck9mTW9sZWN1bGVzQ291bnRlciB9IGZyb20gJy4vTnVtYmVyT2ZNb2xlY3VsZXNDb3VudGVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgRnJlcmVqYWNxdWVOdW1iZXJDb3VudGVyIH0gZnJvbSAnLi9GcmVyZWphY3F1ZU51bWJlckNvdW50ZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBfUmluZ0ZpbmRlciB9IGZyb20gJy4vX1JpbmdGaW5kZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBFdWxlckZhY2V0UmluZ0ZpbmRlciB9IGZyb20gJy4vRXVsZXJGYWNldFJpbmdGaW5kZXInO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBTU1NSRmluZGVyIH0gZnJvbSAnLi9TU1NSRmluZGVyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgQm9uZERlZHVjZXIsIGdldFBvaW50c1BlckFuZ3N0cm9tIH0gZnJvbSAnLi9Cb25kRGVkdWNlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEh5ZHJvZ2VuRGVkdWNlciB9IGZyb20gJy4vSHlkcm9nZW5EZWR1Y2VyJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgU3BsaXR0ZXIgfSBmcm9tICcuL1NwbGl0dGVyJztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/ChemDoodle/informatics/index.js\n");

/***/ }),

/***/ "./src/ChemDoodle/io/JSONInterpreter.js":
/*!**********************************************!*\
  !*** ./src/ChemDoodle/io/JSONInterpreter.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return JSONInterpreter; });\n/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../structures */ \"./src/ChemDoodle/structures/index.js\");\n\nfunction JSONInterpreter() {}\n;\nvar _ = JSONInterpreter.prototype;\n\n_.contentTo = function (mols, shapes) {\n  if (!mols) {\n    mols = [];\n  }\n\n  if (!shapes) {\n    shapes = [];\n  }\n\n  var count1 = 0,\n      count2 = 0;\n\n  for (var i = 0, ii = mols.length; i < ii; i++) {\n    var mol = mols[i];\n\n    for (var j = 0, jj = mol.atoms.length; j < jj; j++) {\n      mol.atoms[j].tmpid = 'a' + count1++;\n    }\n\n    for (var j = 0, jj = mol.bonds.length; j < jj; j++) {\n      mol.bonds[j].tmpid = 'b' + count2++;\n    }\n  }\n\n  count1 = 0;\n\n  for (var i = 0, ii = shapes.length; i < ii; i++) {\n    shapes[i].tmpid = 's' + count1++;\n  }\n\n  var dummy = {};\n\n  if (mols && mols.length > 0) {\n    dummy.m = [];\n\n    for (var i = 0, ii = mols.length; i < ii; i++) {\n      dummy.m.push(this.molTo(mols[i]));\n    }\n  }\n\n  if (shapes && shapes.length > 0) {\n    dummy.s = [];\n\n    for (var i = 0, ii = shapes.length; i < ii; i++) {\n      dummy.s.push(this.shapeTo(shapes[i]));\n    }\n  }\n\n  for (var i = 0, ii = mols.length; i < ii; i++) {\n    var mol = mols[i];\n\n    for (var j = 0, jj = mol.atoms.length; j < jj; j++) {\n      mol.atoms[j].tmpid = undefined;\n    }\n\n    for (var j = 0, jj = mol.bonds.length; j < jj; j++) {\n      mol.bonds[j].tmpid = undefined;\n    }\n  }\n\n  for (var i = 0, ii = shapes.length; i < ii; i++) {\n    shapes[i].tmpid = undefined;\n  }\n\n  return dummy;\n};\n\n_.contentFrom = function (dummy) {\n  var obj = {\n    molecules: [],\n    shapes: []\n  };\n\n  if (dummy.m) {\n    for (var i = 0, ii = dummy.m.length; i < ii; i++) {\n      obj.molecules.push(this.molFrom(dummy.m[i]));\n    }\n  }\n\n  if (dummy.s) {\n    for (var i = 0, ii = dummy.s.length; i < ii; i++) {\n      obj.shapes.push(this.shapeFrom(dummy.s[i], obj.molecules));\n    }\n  }\n\n  for (var i = 0, ii = obj.molecules.length; i < ii; i++) {\n    var mol = obj.molecules[i];\n\n    for (var j = 0, jj = mol.atoms.length; j < jj; j++) {\n      mol.atoms[j].tmpid = undefined;\n    }\n\n    for (var j = 0, jj = mol.bonds.length; j < jj; j++) {\n      mol.bonds[j].tmpid = undefined;\n    }\n  }\n\n  for (var i = 0, ii = obj.shapes.length; i < ii; i++) {\n    obj.shapes[i].tmpid = undefined;\n  }\n\n  return obj;\n};\n\n_.queryTo = function (query) {\n  var q = {};\n\n  var appendProperty = function appendProperty(q, p, name, isRange) {\n    if (p) {\n      q[name] = {\n        v: isRange ? query.outputRange(p.v) : p.v,\n        n: p.not\n      };\n    }\n  };\n\n  if (query.type === _structures__WEBPACK_IMPORTED_MODULE_0__[\"Query\"].TYPE_ATOM) {\n    appendProperty(q, query.elements, 'as');\n    appendProperty(q, query.chirality, '@');\n    appendProperty(q, query.aromatic, 'A');\n    appendProperty(q, query.charge, 'C', true);\n    appendProperty(q, query.hydrogens, 'H', true);\n    appendProperty(q, query.ringCount, 'R', true);\n    appendProperty(q, query.saturation, 'S');\n    appendProperty(q, query.connectivity, 'X', true);\n    appendProperty(q, query.connectivityNoH, 'x', true);\n  } else {\n    appendProperty(q, query.orders, 'bs');\n    appendProperty(q, query.stereo, '@');\n    appendProperty(q, query.aromatic, 'A');\n    appendProperty(q, query.ringCount, 'R', true);\n  }\n\n  return q;\n};\n\n_.molTo = function (mol) {\n  var dummy = {\n    a: []\n  };\n\n  for (var i = 0, ii = mol.atoms.length; i < ii; i++) {\n    var a = mol.atoms[i];\n    var da = {\n      x: a.x,\n      y: a.y\n    };\n\n    if (a.tmpid) {\n      da.i = a.tmpid;\n    }\n\n    if (a.label !== 'C') {\n      da.l = a.label;\n    }\n\n    if (a.z !== 0) {\n      da.z = a.z;\n    }\n\n    if (a.charge !== 0) {\n      da.c = a.charge;\n    }\n\n    if (a.mass !== -1) {\n      da.m = a.mass;\n    }\n\n    if (a.implicitH !== -1) {\n      da.h = a.implicitH;\n    }\n\n    if (a.numRadical !== 0) {\n      da.r = a.numRadical;\n    }\n\n    if (a.numLonePair !== 0) {\n      da.p = a.numLonePair;\n    }\n\n    if (a.query) {\n      da.q = this.queryTo(a.query);\n    }\n\n    dummy.a.push(da);\n  }\n\n  if (mol.bonds.length > 0) {\n    dummy.b = [];\n\n    for (var i = 0, ii = mol.bonds.length; i < ii; i++) {\n      var b = mol.bonds[i];\n      var db = {\n        b: mol.atoms.indexOf(b.a1),\n        e: mol.atoms.indexOf(b.a2)\n      };\n\n      if (b.tmpid) {\n        db.i = b.tmpid;\n      }\n\n      if (b.bondOrder !== 1) {\n        db.o = b.bondOrder;\n      }\n\n      if (b.stereo !== _structures__WEBPACK_IMPORTED_MODULE_0__[\"Bond\"].STEREO_NONE) {\n        db.s = b.stereo;\n      }\n\n      if (b.query) {\n        db.q = this.queryTo(b.query);\n      }\n\n      dummy.b.push(db);\n    }\n  }\n\n  return dummy;\n};\n\n_.queryFrom = function (json) {\n  var query = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Query\"](json.as ? _structures__WEBPACK_IMPORTED_MODULE_0__[\"Query\"].TYPE_ATOM : _structures__WEBPACK_IMPORTED_MODULE_0__[\"Query\"].TYPE_BOND);\n\n  var setupProperty = function setupProperty(query, json, name, isRange) {\n    if (json) {\n      query[name] = {};\n      query[name].v = isRange ? query.parseRange(json.v) : json.v;\n\n      if (json.n) {\n        query[name].not = true;\n      }\n    }\n  };\n\n  if (query.type === _structures__WEBPACK_IMPORTED_MODULE_0__[\"Query\"].TYPE_ATOM) {\n    setupProperty(query, json.as, 'elements');\n    setupProperty(query, json['@'], 'chirality');\n    setupProperty(query, json.A, 'aromatic');\n    setupProperty(query, json.C, 'charge', true);\n    setupProperty(query, json.H, 'hydrogens', true);\n    setupProperty(query, json.R, 'ringCount', true);\n    setupProperty(query, json.S, 'saturation');\n    setupProperty(query, json.X, 'connectivity', true);\n    setupProperty(query, json.x, 'connectivityNoH', true);\n  } else {\n    setupProperty(query, json.bs, 'orders');\n    setupProperty(query, json['@'], 'stereo');\n    setupProperty(query, json.A, 'aromatic');\n    setupProperty(query, json.R, 'ringCount', true);\n  }\n\n  return query;\n};\n\n_.molFrom = function (json) {\n  var molecule = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Molecule\"]();\n\n  for (var i = 0, ii = json.a.length; i < ii; i++) {\n    var c = json.a[i];\n    var a = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Atom\"](c.l ? c.l : 'C', c.x, c.y);\n\n    if (c.i) {\n      a.tmpid = c.i;\n    }\n\n    if (c.z) {\n      a.z = c.z;\n    }\n\n    if (c.c) {\n      a.charge = c.c;\n    }\n\n    if (c.m) {\n      a.mass = c.m;\n    }\n\n    if (c.h) {\n      a.implicitH = c.h;\n    }\n\n    if (c.r) {\n      a.numRadical = c.r;\n    }\n\n    if (c.p) {\n      a.numLonePair = c.p;\n    }\n\n    if (c.q) {\n      a.query = this.queryFrom(c.q);\n    } // these are booleans or numbers, so check if undefined\n\n\n    if (c.p_h !== undefined) {\n      a.hetatm = c.p_h;\n    }\n\n    if (c.p_w !== undefined) {\n      a.isWater = c.p_w;\n    }\n\n    if (c.p_d !== undefined) {\n      a.closestDistance = c.p_d;\n    }\n\n    molecule.atoms.push(a);\n  }\n\n  if (json.b) {\n    for (var i = 0, ii = json.b.length; i < ii; i++) {\n      var c = json.b[i]; // order can be 0, so check against undefined\n\n      var b = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Bond\"](molecule.atoms[c.b], molecule.atoms[c.e], c.o === undefined ? 1 : c.o);\n\n      if (c.i) {\n        b.tmpid = c.i;\n      }\n\n      if (c.s) {\n        b.stereo = c.s;\n      }\n\n      if (c.q) {\n        b.query = this.queryFrom(c.q);\n      }\n\n      molecule.bonds.push(b);\n    }\n  }\n\n  return molecule;\n};\n\n_.shapeTo = function (shape) {\n  var dummy = {};\n\n  if (shape.tmpid) {\n    dummy.i = shape.tmpid;\n  }\n\n  if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__[\"d2\"].Line) {\n    dummy.t = 'Line';\n    dummy.x1 = shape.p1.x;\n    dummy.y1 = shape.p1.y;\n    dummy.x2 = shape.p2.x;\n    dummy.y2 = shape.p2.y;\n    dummy.a = shape.arrowType;\n  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__[\"d2\"].Pusher) {\n    dummy.t = 'Pusher';\n    dummy.o1 = shape.o1.tmpid;\n    dummy.o2 = shape.o2.tmpid;\n\n    if (shape.numElectron !== 1) {\n      dummy.e = shape.numElectron;\n    }\n  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__[\"d2\"].AtomMapping) {\n    dummy.t = 'AtomMapping';\n    dummy.a1 = shape.o1.tmpid;\n    dummy.a2 = shape.o2.tmpid;\n  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__[\"d2\"].Bracket) {\n    dummy.t = 'Bracket';\n    dummy.x1 = shape.p1.x;\n    dummy.y1 = shape.p1.y;\n    dummy.x2 = shape.p2.x;\n    dummy.y2 = shape.p2.y;\n\n    if (shape.charge !== 0) {\n      dummy.c = shape.charge;\n    }\n\n    if (shape.mult !== 0) {\n      dummy.m = shape.mult;\n    }\n\n    if (shape.repeat !== 0) {\n      dummy.r = shape.repeat;\n    }\n  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__[\"d2\"].DynamicBracket) {\n    dummy.t = 'DynamicBracket';\n    dummy.b1 = shape.b1.tmpid;\n    dummy.b2 = shape.b2.tmpid;\n    dummy.n1 = shape.n1;\n    dummy.n2 = shape.n2;\n\n    if (shape.flip === true) {\n      dummy.f = true;\n    }\n  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__[\"d2\"].VAP) {\n    dummy.t = 'VAP';\n    dummy.x = shape.asterisk.x;\n    dummy.y = shape.asterisk.y;\n\n    if (shape.bondType !== 1) {\n      dummy.o = shape.bondType;\n    }\n\n    if (shape.substituent) {\n      dummy.s = shape.substituent.tmpid;\n    }\n\n    dummy.a = [];\n\n    for (var i = 0, ii = shape.attachments.length; i < ii; i++) {\n      dummy.a.push(shape.attachments[i].tmpid);\n    }\n  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].Distance) {\n    dummy.t = 'Distance';\n    dummy.a1 = shape.a1.tmpid;\n    dummy.a2 = shape.a2.tmpid;\n\n    if (shape.node) {\n      dummy.n = shape.node;\n      dummy.o = shape.offset;\n    }\n  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].Angle) {\n    dummy.t = 'Angle';\n    dummy.a1 = shape.a1.tmpid;\n    dummy.a2 = shape.a2.tmpid;\n    dummy.a3 = shape.a3.tmpid;\n  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].Torsion) {\n    dummy.t = 'Torsion';\n    dummy.a1 = shape.a1.tmpid;\n    dummy.a2 = shape.a2.tmpid;\n    dummy.a3 = shape.a3.tmpid;\n    dummy.a4 = shape.a4.tmpid;\n  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__[\"d3\"]._Surface) {\n    dummy.t = 'Surface';\n    dummy.a = [];\n\n    for (var i = 0, ii = shape.atoms.length; i < ii; i++) {\n      dummy.a.push(shape.atoms[i].tmpid);\n    }\n\n    if (!(shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].VDWSurface)) {\n      dummy.p = shape.probeRadius;\n    }\n\n    dummy.r = shape.resolution;\n    var type = 'vdw';\n\n    if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].SASSurface) {\n      type = 'sas';\n    } else if (_structures__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].SESSurface && shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].SESSurface) {\n      type = 'ses';\n    }\n\n    dummy.f = type;\n  } else if (shape instanceof _structures__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].UnitCell) {\n    dummy.t = 'UnitCell';\n\n    for (var p in shape.unitCell) {\n      dummy[p] = shape.unitCell[p];\n    }\n  }\n\n  return dummy;\n};\n\n_.shapeFrom = function (dummy, mols) {\n  var shape;\n\n  if (dummy.t === 'Line') {\n    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"d2\"].Line(new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Point\"](dummy.x1, dummy.y1), new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Point\"](dummy.x2, dummy.y2));\n    shape.arrowType = dummy.a;\n  } else if (dummy.t === 'Pusher') {\n    var o1, o2;\n\n    for (var i = 0, ii = mols.length; i < ii; i++) {\n      var mol = mols[i];\n\n      for (var j = 0, jj = mol.atoms.length; j < jj; j++) {\n        var a = mol.atoms[j];\n\n        if (a.tmpid === dummy.o1) {\n          o1 = a;\n        } else if (a.tmpid === dummy.o2) {\n          o2 = a;\n        }\n      }\n\n      for (var j = 0, jj = mol.bonds.length; j < jj; j++) {\n        var b = mol.bonds[j];\n\n        if (b.tmpid === dummy.o1) {\n          o1 = b;\n        } else if (b.tmpid === dummy.o2) {\n          o2 = b;\n        }\n      }\n    }\n\n    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"d2\"].Pusher(o1, o2);\n\n    if (dummy.e) {\n      shape.numElectron = dummy.e;\n    }\n  } else if (dummy.t === 'AtomMapping') {\n    var a1, a2;\n\n    for (var i = 0, ii = mols.length; i < ii; i++) {\n      var mol = mols[i];\n\n      for (var j = 0, jj = mol.atoms.length; j < jj; j++) {\n        var a = mol.atoms[j];\n\n        if (a.tmpid === dummy.a1) {\n          a1 = a;\n        } else if (a.tmpid === dummy.a2) {\n          a2 = a;\n        }\n      }\n    }\n\n    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"d2\"].AtomMapping(a1, a2);\n  } else if (dummy.t === 'Bracket') {\n    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"d2\"].Bracket(new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Point\"](dummy.x1, dummy.y1), new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Point\"](dummy.x2, dummy.y2));\n\n    if (dummy.c !== undefined) {\n      // have to check against undefined as it is an integer that can\n      // be 0\n      shape.charge = dummy.c;\n    }\n\n    if (dummy.m !== undefined) {\n      // have to check against undefined as it is an integer that can\n      // be 0\n      shape.mult = dummy.m;\n    }\n\n    if (dummy.r !== undefined) {\n      // have to check against undefined as it is an integer that can\n      // be 0\n      shape.repeat = dummy.r;\n    }\n  } else if (dummy.t === 'DynamicBracket') {\n    var b1, b2;\n\n    for (var i = 0, ii = mols.length; i < ii; i++) {\n      var mol = mols[i];\n\n      for (var j = 0, jj = mol.bonds.length; j < jj; j++) {\n        var b = mol.bonds[j];\n\n        if (b.tmpid === dummy.b1) {\n          b1 = b;\n        } else if (b.tmpid === dummy.b2) {\n          b2 = b;\n        }\n      }\n    }\n\n    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"d2\"].DynamicBracket(b1, b2);\n    shape.n1 = dummy.n1;\n    shape.n2 = dummy.n2;\n\n    if (dummy.f) {\n      shape.flip = true;\n    }\n  } else if (dummy.t === 'VAP') {\n    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"d2\"].VAP(dummy.x, dummy.y);\n\n    if (dummy.o) {\n      shape.bondType = dummy.o;\n    }\n\n    for (var i = 0, ii = mols.length; i < ii; i++) {\n      var mol = mols[i];\n\n      for (var j = 0, jj = mol.atoms.length; j < jj; j++) {\n        var a = mol.atoms[j];\n\n        if (a.tmpid === dummy.s) {\n          shape.substituent = a;\n        } else {\n          for (var k = 0, kk = dummy.a.length; k < kk; k++) {\n            if (a.tmpid === dummy.a[k]) {\n              shape.attachments.push(a);\n            }\n          }\n        }\n      }\n    }\n  } else if (dummy.t === 'Distance') {\n    var a1, a2;\n\n    for (var i = 0, ii = mols.length; i < ii; i++) {\n      var mol = mols[i];\n\n      for (var j = 0, jj = mol.atoms.length; j < jj; j++) {\n        var a = mol.atoms[j];\n\n        if (a.tmpid === dummy.a1) {\n          a1 = a;\n        } else if (a.tmpid === dummy.a2) {\n          a2 = a;\n        }\n      }\n    }\n\n    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].Distance(a1, a2, dummy.n, dummy.o);\n  } else if (dummy.t === 'Angle') {\n    var a1, a2, a3;\n\n    for (var i = 0, ii = mols.length; i < ii; i++) {\n      var mol = mols[i];\n\n      for (var j = 0, jj = mol.atoms.length; j < jj; j++) {\n        var a = mol.atoms[j];\n\n        if (a.tmpid === dummy.a1) {\n          a1 = a;\n        } else if (a.tmpid === dummy.a2) {\n          a2 = a;\n        } else if (a.tmpid === dummy.a3) {\n          a3 = a;\n        }\n      }\n    }\n\n    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].Angle(a1, a2, a3);\n  } else if (dummy.t === 'Torsion') {\n    var a1, a2, a3, a4;\n\n    for (var i = 0, ii = mols.length; i < ii; i++) {\n      var mol = mols[i];\n\n      for (var j = 0, jj = mol.atoms.length; j < jj; j++) {\n        var a = mol.atoms[j];\n\n        if (a.tmpid === dummy.a1) {\n          a1 = a;\n        } else if (a.tmpid === dummy.a2) {\n          a2 = a;\n        } else if (a.tmpid === dummy.a3) {\n          a3 = a;\n        } else if (a.tmpid === dummy.a4) {\n          a4 = a;\n        }\n      }\n    }\n\n    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].Torsion(a1, a2, a3, a4);\n  } else if (dummy.t === 'Surface') {\n    var atoms = [];\n\n    for (var i = 0, ii = mols.length; i < ii; i++) {\n      var mol = mols[i];\n\n      for (var j = 0, jj = mol.atoms.length; j < jj; j++) {\n        var a = mol.atoms[j];\n\n        for (var k = 0, kk = dummy.a.length; k < kk; k++) {\n          if (a.tmpid === dummy.a[k]) {\n            atoms.push(a);\n          }\n        }\n      }\n    }\n\n    var probeRadius = dummy.p ? dummy.p : 1.4;\n    var resolution = dummy.r ? dummy.r : 30;\n\n    if (dummy.f === 'vdw') {\n      shape = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].VDWSurface(atoms, resolution);\n    } else if (dummy.f === 'sas') {\n      shape = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].SASSurface(atoms, probeRadius, resolution);\n    } else if (dummy.f === 'ses') {\n      shape = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].SESSurface(atoms, probeRadius, resolution);\n    }\n  } else if (dummy.t === 'UnitCell') {\n    var unitCellVectors = {};\n\n    for (var p in dummy) {\n      unitCellVectors[p] = dummy[p];\n    }\n\n    shape = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"d3\"].UnitCell(unitCellVectors);\n  }\n\n  return shape;\n};\n\n_.pdbFrom = function (content) {\n  var mol = this.molFrom(content.mol);\n  mol.findRings = false; // mark from JSON to note to algorithms that atoms in chain are not\n  // same\n  // objects as in atom array\n\n  mol.fromJSON = true;\n  mol.chains = this.chainsFrom(content.ribbons);\n  return mol;\n};\n\n_.chainsFrom = function (content) {\n  var chains = [];\n\n  for (var i = 0, ii = content.cs.length; i < ii; i++) {\n    var chain = content.cs[i];\n    var c = [];\n\n    for (var j = 0, jj = chain.length; j < jj; j++) {\n      var convert = chain[j];\n      var r = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Residue\"]();\n      r.name = convert.n;\n      r.cp1 = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Atom\"]('', convert.x1, convert.y1, convert.z1);\n      r.cp2 = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Atom\"]('', convert.x2, convert.y2, convert.z2);\n\n      if (convert.x3) {\n        r.cp3 = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Atom\"]('', convert.x3, convert.y3, convert.z3);\n        r.cp4 = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Atom\"]('', convert.x4, convert.y4, convert.z4);\n        r.cp5 = new _structures__WEBPACK_IMPORTED_MODULE_0__[\"Atom\"]('', convert.x5, convert.y5, convert.z5);\n      }\n\n      r.helix = convert.h;\n      r.sheet = convert.s;\n      r.arrow = j > 0 && chain[j - 1].a;\n      c.push(r);\n    }\n\n    chains.push(c);\n  }\n\n  return chains;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/io/JSONInterpreter.js\n");

/***/ }),

/***/ "./src/ChemDoodle/io/index.js":
/*!************************************!*\
  !*** ./src/ChemDoodle/io/index.js ***!
  \************************************/
/*! exports provided: JSONInterpreter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _JSONInterpreter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JSONInterpreter */ \"./src/ChemDoodle/io/JSONInterpreter.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"JSONInterpreter\", function() { return _JSONInterpreter__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvaW8vaW5kZXguanM/MGFkYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQSIsImZpbGUiOiIuL3NyYy9DaGVtRG9vZGxlL2lvL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgZGVmYXVsdCBhcyBKU09OSW50ZXJwcmV0ZXIgfSBmcm9tICcuL0pTT05JbnRlcnByZXRlcic7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ChemDoodle/io/index.js\n");

/***/ }),

/***/ "./src/ChemDoodle/lib/MarchingCubes.js":
/*!*********************************************!*\
  !*** ./src/ChemDoodle/lib/MarchingCubes.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// The MIT License (MIT)\n// Copyright (c) 2012-2013 Mikola Lysenko\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/**\n * Javascript Marching Cubes\n *\n * Based on Paul Bourke's classic implementation:\n *    http://local.wasp.uwa.edu.au/~pbourke/geometry/polygonise/\n *\n * JS port by Mikola Lysenko\n */\nvar MarchingCubes = function () {\n  var edgeTable = new Uint32Array([0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c, 0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00, 0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c, 0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90, 0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c, 0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30, 0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac, 0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0, 0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c, 0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60, 0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc, 0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0, 0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c, 0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950, 0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc, 0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0, 0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc, 0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0, 0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c, 0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650, 0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc, 0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0, 0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c, 0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460, 0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac, 0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0, 0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c, 0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230, 0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c, 0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190, 0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c, 0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0]),\n      triTable = [[], [0, 8, 3], [0, 1, 9], [1, 8, 3, 9, 8, 1], [1, 2, 10], [0, 8, 3, 1, 2, 10], [9, 2, 10, 0, 2, 9], [2, 8, 3, 2, 10, 8, 10, 9, 8], [3, 11, 2], [0, 11, 2, 8, 11, 0], [1, 9, 0, 2, 3, 11], [1, 11, 2, 1, 9, 11, 9, 8, 11], [3, 10, 1, 11, 10, 3], [0, 10, 1, 0, 8, 10, 8, 11, 10], [3, 9, 0, 3, 11, 9, 11, 10, 9], [9, 8, 10, 10, 8, 11], [4, 7, 8], [4, 3, 0, 7, 3, 4], [0, 1, 9, 8, 4, 7], [4, 1, 9, 4, 7, 1, 7, 3, 1], [1, 2, 10, 8, 4, 7], [3, 4, 7, 3, 0, 4, 1, 2, 10], [9, 2, 10, 9, 0, 2, 8, 4, 7], [2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4], [8, 4, 7, 3, 11, 2], [11, 4, 7, 11, 2, 4, 2, 0, 4], [9, 0, 1, 8, 4, 7, 2, 3, 11], [4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1], [3, 10, 1, 3, 11, 10, 7, 8, 4], [1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4], [4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3], [4, 7, 11, 4, 11, 9, 9, 11, 10], [9, 5, 4], [9, 5, 4, 0, 8, 3], [0, 5, 4, 1, 5, 0], [8, 5, 4, 8, 3, 5, 3, 1, 5], [1, 2, 10, 9, 5, 4], [3, 0, 8, 1, 2, 10, 4, 9, 5], [5, 2, 10, 5, 4, 2, 4, 0, 2], [2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8], [9, 5, 4, 2, 3, 11], [0, 11, 2, 0, 8, 11, 4, 9, 5], [0, 5, 4, 0, 1, 5, 2, 3, 11], [2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5], [10, 3, 11, 10, 1, 3, 9, 5, 4], [4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10], [5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3], [5, 4, 8, 5, 8, 10, 10, 8, 11], [9, 7, 8, 5, 7, 9], [9, 3, 0, 9, 5, 3, 5, 7, 3], [0, 7, 8, 0, 1, 7, 1, 5, 7], [1, 5, 3, 3, 5, 7], [9, 7, 8, 9, 5, 7, 10, 1, 2], [10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3], [8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2], [2, 10, 5, 2, 5, 3, 3, 5, 7], [7, 9, 5, 7, 8, 9, 3, 11, 2], [9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11], [2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7], [11, 2, 1, 11, 1, 7, 7, 1, 5], [9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11], [5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0], [11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0], [11, 10, 5, 7, 11, 5], [10, 6, 5], [0, 8, 3, 5, 10, 6], [9, 0, 1, 5, 10, 6], [1, 8, 3, 1, 9, 8, 5, 10, 6], [1, 6, 5, 2, 6, 1], [1, 6, 5, 1, 2, 6, 3, 0, 8], [9, 6, 5, 9, 0, 6, 0, 2, 6], [5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8], [2, 3, 11, 10, 6, 5], [11, 0, 8, 11, 2, 0, 10, 6, 5], [0, 1, 9, 2, 3, 11, 5, 10, 6], [5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11], [6, 3, 11, 6, 5, 3, 5, 1, 3], [0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6], [3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9], [6, 5, 9, 6, 9, 11, 11, 9, 8], [5, 10, 6, 4, 7, 8], [4, 3, 0, 4, 7, 3, 6, 5, 10], [1, 9, 0, 5, 10, 6, 8, 4, 7], [10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4], [6, 1, 2, 6, 5, 1, 4, 7, 8], [1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7], [8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6], [7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9], [3, 11, 2, 7, 8, 4, 10, 6, 5], [5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11], [0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6], [9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6], [8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6], [5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11], [0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7], [6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9], [10, 4, 9, 6, 4, 10], [4, 10, 6, 4, 9, 10, 0, 8, 3], [10, 0, 1, 10, 6, 0, 6, 4, 0], [8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10], [1, 4, 9, 1, 2, 4, 2, 6, 4], [3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4], [0, 2, 4, 4, 2, 6], [8, 3, 2, 8, 2, 4, 4, 2, 6], [10, 4, 9, 10, 6, 4, 11, 2, 3], [0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6], [3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10], [6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1], [9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3], [8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1], [3, 11, 6, 3, 6, 0, 0, 6, 4], [6, 4, 8, 11, 6, 8], [7, 10, 6, 7, 8, 10, 8, 9, 10], [0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10], [10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0], [10, 6, 7, 10, 7, 1, 1, 7, 3], [1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7], [2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9], [7, 8, 0, 7, 0, 6, 6, 0, 2], [7, 3, 2, 6, 7, 2], [2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7], [2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7], [1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11], [11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1], [8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6], [0, 9, 1, 11, 6, 7], [7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0], [7, 11, 6], [7, 6, 11], [3, 0, 8, 11, 7, 6], [0, 1, 9, 11, 7, 6], [8, 1, 9, 8, 3, 1, 11, 7, 6], [10, 1, 2, 6, 11, 7], [1, 2, 10, 3, 0, 8, 6, 11, 7], [2, 9, 0, 2, 10, 9, 6, 11, 7], [6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8], [7, 2, 3, 6, 2, 7], [7, 0, 8, 7, 6, 0, 6, 2, 0], [2, 7, 6, 2, 3, 7, 0, 1, 9], [1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6], [10, 7, 6, 10, 1, 7, 1, 3, 7], [10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8], [0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7], [7, 6, 10, 7, 10, 8, 8, 10, 9], [6, 8, 4, 11, 8, 6], [3, 6, 11, 3, 0, 6, 0, 4, 6], [8, 6, 11, 8, 4, 6, 9, 0, 1], [9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6], [6, 8, 4, 6, 11, 8, 2, 10, 1], [1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6], [4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9], [10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3], [8, 2, 3, 8, 4, 2, 4, 6, 2], [0, 4, 2, 4, 6, 2], [1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8], [1, 9, 4, 1, 4, 2, 2, 4, 6], [8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1], [10, 1, 0, 10, 0, 6, 6, 0, 4], [4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3], [10, 9, 4, 6, 10, 4], [4, 9, 5, 7, 6, 11], [0, 8, 3, 4, 9, 5, 11, 7, 6], [5, 0, 1, 5, 4, 0, 7, 6, 11], [11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5], [9, 5, 4, 10, 1, 2, 7, 6, 11], [6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5], [7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2], [3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6], [7, 2, 3, 7, 6, 2, 5, 4, 9], [9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7], [3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0], [6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8], [9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7], [1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4], [4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10], [7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10], [6, 9, 5, 6, 11, 9, 11, 8, 9], [3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5], [0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11], [6, 11, 3, 6, 3, 5, 5, 3, 1], [1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6], [0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10], [11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5], [6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3], [5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2], [9, 5, 6, 9, 6, 0, 0, 6, 2], [1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8], [1, 5, 6, 2, 1, 6], [1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6], [10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0], [0, 3, 8, 5, 6, 10], [10, 5, 6], [11, 5, 10, 7, 5, 11], [11, 5, 10, 11, 7, 5, 8, 3, 0], [5, 11, 7, 5, 10, 11, 1, 9, 0], [10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1], [11, 1, 2, 11, 7, 1, 7, 5, 1], [0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11], [9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7], [7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2], [2, 5, 10, 2, 3, 5, 3, 7, 5], [8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5], [9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2], [9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2], [1, 3, 5, 3, 7, 5], [0, 8, 7, 0, 7, 1, 1, 7, 5], [9, 0, 3, 9, 3, 5, 5, 3, 7], [9, 8, 7, 5, 9, 7], [5, 8, 4, 5, 10, 8, 10, 11, 8], [5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0], [0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5], [10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4], [2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8], [0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11], [0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5], [9, 4, 5, 2, 11, 3], [2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4], [5, 10, 2, 5, 2, 4, 4, 2, 0], [3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9], [5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2], [8, 4, 5, 8, 5, 3, 3, 5, 1], [0, 4, 5, 1, 0, 5], [8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5], [9, 4, 5], [4, 11, 7, 4, 9, 11, 9, 10, 11], [0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11], [1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11], [3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4], [4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2], [9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3], [11, 7, 4, 11, 4, 2, 2, 4, 0], [11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4], [2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9], [9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7], [3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10], [1, 10, 2, 8, 7, 4], [4, 9, 1, 4, 1, 7, 7, 1, 3], [4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1], [4, 0, 3, 7, 4, 3], [4, 8, 7], [9, 10, 8, 10, 11, 8], [3, 0, 9, 3, 9, 11, 11, 9, 10], [0, 1, 10, 0, 10, 8, 8, 10, 11], [3, 1, 10, 11, 3, 10], [1, 2, 11, 1, 11, 9, 9, 11, 8], [3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9], [0, 2, 11, 8, 0, 11], [3, 2, 11], [2, 3, 8, 2, 8, 10, 10, 8, 9], [9, 10, 2, 0, 9, 2], [2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8], [1, 10, 2], [1, 3, 8, 9, 1, 8], [0, 9, 1], [0, 3, 8], []],\n      cubeVerts = [[0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0], [0, 0, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1]],\n      edgeIndex = [[0, 1], [1, 2], [2, 3], [3, 0], [4, 5], [5, 6], [6, 7], [7, 4], [0, 4], [1, 5], [2, 6], [3, 7]];\n  return function (data, dims) {\n    var vertices = [],\n        faces = [],\n        n = 0,\n        grid = new Float32Array(8),\n        edges = new Int32Array(12),\n        x = new Int32Array(3); //March over the volume\n\n    for (x[2] = 0; x[2] < dims[2] - 1; ++x[2], n += dims[0]) {\n      for (x[1] = 0; x[1] < dims[1] - 1; ++x[1], ++n) {\n        for (x[0] = 0; x[0] < dims[0] - 1; ++x[0], ++n) {\n          //For each cell, compute cube mask\n          var cube_index = 0;\n\n          for (var i = 0; i < 8; ++i) {\n            var v = cubeVerts[i],\n                s = data[n + v[0] + dims[0] * (v[1] + dims[1] * v[2])];\n            grid[i] = s;\n            cube_index |= s > 0 ? 1 << i : 0;\n          } //Compute vertices\n\n\n          var edge_mask = edgeTable[cube_index];\n\n          if (edge_mask === 0) {\n            continue;\n          }\n\n          for (var i = 0; i < 12; ++i) {\n            if ((edge_mask & 1 << i) === 0) {\n              continue;\n            }\n\n            edges[i] = vertices.length;\n            var nv = [0, 0, 0],\n                e = edgeIndex[i],\n                p0 = cubeVerts[e[0]],\n                p1 = cubeVerts[e[1]],\n                a = grid[e[0]],\n                b = grid[e[1]],\n                d = a - b,\n                t = 0;\n\n            if (Math.abs(d) > 1e-6) {\n              t = a / d;\n            }\n\n            for (var j = 0; j < 3; ++j) {\n              nv[j] = x[j] + p0[j] + t * (p1[j] - p0[j]);\n            }\n\n            vertices.push(nv);\n          } //Add faces\n\n\n          var f = triTable[cube_index];\n\n          for (var i = 0; i < f.length; i += 3) {\n            faces.push([edges[f[i]], edges[f[i + 1]], edges[f[i + 2]]]);\n          }\n        }\n      }\n    }\n\n    return {\n      vertices: vertices,\n      faces: faces\n    };\n  };\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (MarchingCubes);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/lib/MarchingCubes.js\n");

/***/ }),

/***/ "./src/ChemDoodle/lib/gl-matrix.js":
/*!*****************************************!*\
  !*** ./src/ChemDoodle/lib/gl-matrix.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * @fileoverview gl-matrix - High performance matrix and vector operations for WebGL\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 1.3.7\n */\n\n/*\n * Copyright (c) 2012 Brandon Jones, Colin MacKenzie IV\n *\n * This software is provided 'as-is', without any express or implied\n * warranty. In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n *    1. The origin of this software must not be misrepresented; you must not\n *    claim that you wrote the original software. If you use this software\n *    in a product, an acknowledgment in the product documentation would be\n *    appreciated but is not required.\n *\n *    2. Altered source versions must be plainly marked as such, and must not\n *    be misrepresented as being the original software.\n *\n *    3. This notice may not be removed or altered from any source\n *    distribution.\n */\n// Updated to use a modification of the \"returnExportsGlobal\" pattern from https://github.com/umdjs/umd\n(function (root, factory) {\n  if (( false ? undefined : _typeof(exports)) === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory(global);\n  } else if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return factory(root);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(this, function (root) {\n  \"use strict\"; // Tweak to your liking\n\n  var FLOAT_EPSILON = 0.000001;\n  var glMath = {};\n\n  (function () {\n    if (typeof Float32Array != 'undefined') {\n      var y = new Float32Array(1);\n      var i = new Int32Array(y.buffer);\n      /**\n       * Fast way to calculate the inverse square root,\n       * see http://jsperf.com/inverse-square-root/5\n       *\n       * If typed arrays are not available, a slower\n       * implementation will be used.\n       *\n       * @param {Number} number the number\n       * @returns {Number} Inverse square root\n       */\n\n      glMath.invsqrt = function (number) {\n        var x2 = number * 0.5;\n        y[0] = number;\n        var threehalfs = 1.5;\n        i[0] = 0x5f3759df - (i[0] >> 1);\n        var number2 = y[0];\n        return number2 * (threehalfs - x2 * number2 * number2);\n      };\n    } else {\n      glMath.invsqrt = function (number) {\n        return 1.0 / Math.sqrt(number);\n      };\n    }\n  })();\n  /**\n   * @class System-specific optimal array type\n   * @name MatrixArray\n   */\n\n\n  var MatrixArray = null; // explicitly sets and returns the type of array to use within glMatrix\n\n  function setMatrixArrayType(type) {\n    MatrixArray = type;\n    return MatrixArray;\n  } // auto-detects and returns the best type of array to use within glMatrix, falling\n  // back to Array if typed arrays are unsupported\n\n\n  function determineMatrixArrayType() {\n    MatrixArray = typeof Float32Array !== 'undefined' ? Float32Array : Array;\n    return MatrixArray;\n  }\n\n  determineMatrixArrayType();\n  /**\n   * @class 3 Dimensional Vector\n   * @name vec3\n   */\n\n  var vec3 = {};\n  /**\n   * Creates a new instance of a vec3 using the default array type\n   * Any javascript array-like objects containing at least 3 numeric elements can serve as a vec3\n   *\n   * @param {vec3} [vec] vec3 containing values to initialize with\n   *\n   * @returns {vec3} New vec3\n   */\n\n  vec3.create = function (vec) {\n    var dest = new MatrixArray(3);\n\n    if (vec) {\n      dest[0] = vec[0];\n      dest[1] = vec[1];\n      dest[2] = vec[2];\n    } else {\n      dest[0] = dest[1] = dest[2] = 0;\n    }\n\n    return dest;\n  };\n  /**\n   * Creates a new instance of a vec3, initializing it with the given arguments\n   *\n   * @param {number} x X value\n   * @param {number} y Y value\n   * @param {number} z Z value\n    * @returns {vec3} New vec3\n   */\n\n\n  vec3.createFrom = function (x, y, z) {\n    var dest = new MatrixArray(3);\n    dest[0] = x;\n    dest[1] = y;\n    dest[2] = z;\n    return dest;\n  };\n  /**\n   * Copies the values of one vec3 to another\n   *\n   * @param {vec3} vec vec3 containing values to copy\n   * @param {vec3} dest vec3 receiving copied values\n   *\n   * @returns {vec3} dest\n   */\n\n\n  vec3.set = function (vec, dest) {\n    dest[0] = vec[0];\n    dest[1] = vec[1];\n    dest[2] = vec[2];\n    return dest;\n  };\n  /**\n   * Compares two vectors for equality within a certain margin of error\n   *\n   * @param {vec3} a First vector\n   * @param {vec3} b Second vector\n   *\n   * @returns {Boolean} True if a is equivalent to b\n   */\n\n\n  vec3.equal = function (a, b) {\n    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON;\n  };\n  /**\n   * Performs a vector addition\n   *\n   * @param {vec3} vec First operand\n   * @param {vec3} vec2 Second operand\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.add = function (vec, vec2, dest) {\n    if (!dest || vec === dest) {\n      vec[0] += vec2[0];\n      vec[1] += vec2[1];\n      vec[2] += vec2[2];\n      return vec;\n    }\n\n    dest[0] = vec[0] + vec2[0];\n    dest[1] = vec[1] + vec2[1];\n    dest[2] = vec[2] + vec2[2];\n    return dest;\n  };\n  /**\n   * Performs a vector subtraction\n   *\n   * @param {vec3} vec First operand\n   * @param {vec3} vec2 Second operand\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.subtract = function (vec, vec2, dest) {\n    if (!dest || vec === dest) {\n      vec[0] -= vec2[0];\n      vec[1] -= vec2[1];\n      vec[2] -= vec2[2];\n      return vec;\n    }\n\n    dest[0] = vec[0] - vec2[0];\n    dest[1] = vec[1] - vec2[1];\n    dest[2] = vec[2] - vec2[2];\n    return dest;\n  };\n  /**\n   * Performs a vector multiplication\n   *\n   * @param {vec3} vec First operand\n   * @param {vec3} vec2 Second operand\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.multiply = function (vec, vec2, dest) {\n    if (!dest || vec === dest) {\n      vec[0] *= vec2[0];\n      vec[1] *= vec2[1];\n      vec[2] *= vec2[2];\n      return vec;\n    }\n\n    dest[0] = vec[0] * vec2[0];\n    dest[1] = vec[1] * vec2[1];\n    dest[2] = vec[2] * vec2[2];\n    return dest;\n  };\n  /**\n   * Negates the components of a vec3\n   *\n   * @param {vec3} vec vec3 to negate\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.negate = function (vec, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    dest[0] = -vec[0];\n    dest[1] = -vec[1];\n    dest[2] = -vec[2];\n    return dest;\n  };\n  /**\n   * Multiplies the components of a vec3 by a scalar value\n   *\n   * @param {vec3} vec vec3 to scale\n   * @param {number} val Value to scale by\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.scale = function (vec, val, dest) {\n    if (!dest || vec === dest) {\n      vec[0] *= val;\n      vec[1] *= val;\n      vec[2] *= val;\n      return vec;\n    }\n\n    dest[0] = vec[0] * val;\n    dest[1] = vec[1] * val;\n    dest[2] = vec[2] * val;\n    return dest;\n  };\n  /**\n   * Generates a unit vector of the same direction as the provided vec3\n   * If vector length is 0, returns [0, 0, 0]\n   *\n   * @param {vec3} vec vec3 to normalize\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.normalize = function (vec, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2],\n        len = Math.sqrt(x * x + y * y + z * z);\n\n    if (!len) {\n      dest[0] = 0;\n      dest[1] = 0;\n      dest[2] = 0;\n      return dest;\n    } else if (len === 1) {\n      dest[0] = x;\n      dest[1] = y;\n      dest[2] = z;\n      return dest;\n    }\n\n    len = 1 / len;\n    dest[0] = x * len;\n    dest[1] = y * len;\n    dest[2] = z * len;\n    return dest;\n  };\n  /**\n   * Generates the cross product of two vec3s\n   *\n   * @param {vec3} vec First operand\n   * @param {vec3} vec2 Second operand\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.cross = function (vec, vec2, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2],\n        x2 = vec2[0],\n        y2 = vec2[1],\n        z2 = vec2[2];\n    dest[0] = y * z2 - z * y2;\n    dest[1] = z * x2 - x * z2;\n    dest[2] = x * y2 - y * x2;\n    return dest;\n  };\n  /**\n   * Caclulates the length of a vec3\n   *\n   * @param {vec3} vec vec3 to calculate length of\n   *\n   * @returns {number} Length of vec\n   */\n\n\n  vec3.length = function (vec) {\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2];\n    return Math.sqrt(x * x + y * y + z * z);\n  };\n  /**\n   * Caclulates the squared length of a vec3\n   *\n   * @param {vec3} vec vec3 to calculate squared length of\n   *\n   * @returns {number} Squared Length of vec\n   */\n\n\n  vec3.squaredLength = function (vec) {\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2];\n    return x * x + y * y + z * z;\n  };\n  /**\n   * Caclulates the dot product of two vec3s\n   *\n   * @param {vec3} vec First operand\n   * @param {vec3} vec2 Second operand\n   *\n   * @returns {number} Dot product of vec and vec2\n   */\n\n\n  vec3.dot = function (vec, vec2) {\n    return vec[0] * vec2[0] + vec[1] * vec2[1] + vec[2] * vec2[2];\n  };\n  /**\n   * Generates a unit vector pointing from one vector to another\n   *\n   * @param {vec3} vec Origin vec3\n   * @param {vec3} vec2 vec3 to point to\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.direction = function (vec, vec2, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    var x = vec[0] - vec2[0],\n        y = vec[1] - vec2[1],\n        z = vec[2] - vec2[2],\n        len = Math.sqrt(x * x + y * y + z * z);\n\n    if (!len) {\n      dest[0] = 0;\n      dest[1] = 0;\n      dest[2] = 0;\n      return dest;\n    }\n\n    len = 1 / len;\n    dest[0] = x * len;\n    dest[1] = y * len;\n    dest[2] = z * len;\n    return dest;\n  };\n  /**\n   * Performs a linear interpolation between two vec3\n   *\n   * @param {vec3} vec First vector\n   * @param {vec3} vec2 Second vector\n   * @param {number} lerp Interpolation amount between the two inputs\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.lerp = function (vec, vec2, lerp, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    dest[0] = vec[0] + lerp * (vec2[0] - vec[0]);\n    dest[1] = vec[1] + lerp * (vec2[1] - vec[1]);\n    dest[2] = vec[2] + lerp * (vec2[2] - vec[2]);\n    return dest;\n  };\n  /**\n   * Calculates the euclidian distance between two vec3\n   *\n   * Params:\n   * @param {vec3} vec First vector\n   * @param {vec3} vec2 Second vector\n   *\n   * @returns {number} Distance between vec and vec2\n   */\n\n\n  vec3.dist = function (vec, vec2) {\n    var x = vec2[0] - vec[0],\n        y = vec2[1] - vec[1],\n        z = vec2[2] - vec[2];\n    return Math.sqrt(x * x + y * y + z * z);\n  }; // Pre-allocated to prevent unecessary garbage collection\n\n\n  var unprojectMat = null;\n  var unprojectVec = new MatrixArray(4);\n  /**\n   * Projects the specified vec3 from screen space into object space\n   * Based on the <a href=\"http://webcvs.freedesktop.org/mesa/Mesa/src/glu/mesa/project.c?revision=1.4&view=markup\">Mesa gluUnProject implementation</a>\n   *\n   * @param {vec3} vec Screen-space vector to project\n   * @param {mat4} view View matrix\n   * @param {mat4} proj Projection matrix\n   * @param {vec4} viewport Viewport as given to gl.viewport [x, y, width, height]\n   * @param {vec3} [dest] vec3 receiving unprojected result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n  vec3.unproject = function (vec, view, proj, viewport, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    if (!unprojectMat) {\n      unprojectMat = mat4.create();\n    }\n\n    var m = unprojectMat;\n    var v = unprojectVec;\n    v[0] = (vec[0] - viewport[0]) * 2.0 / viewport[2] - 1.0;\n    v[1] = (vec[1] - viewport[1]) * 2.0 / viewport[3] - 1.0;\n    v[2] = 2.0 * vec[2] - 1.0;\n    v[3] = 1.0;\n    mat4.multiply(proj, view, m);\n\n    if (!mat4.inverse(m)) {\n      return null;\n    }\n\n    mat4.multiplyVec4(m, v);\n\n    if (v[3] === 0.0) {\n      return null;\n    }\n\n    dest[0] = v[0] / v[3];\n    dest[1] = v[1] / v[3];\n    dest[2] = v[2] / v[3];\n    return dest;\n  };\n\n  var xUnitVec3 = vec3.createFrom(1, 0, 0);\n  var yUnitVec3 = vec3.createFrom(0, 1, 0);\n  var zUnitVec3 = vec3.createFrom(0, 0, 1);\n  var tmpvec3 = vec3.create();\n  /**\n   * Generates a quaternion of rotation between two given normalized vectors\n   *\n   * @param {vec3} a Normalized source vector\n   * @param {vec3} b Normalized target vector\n   * @param {quat4} [dest] quat4 receiving operation result.\n   *\n   * @returns {quat4} dest if specified, a new quat4 otherwise\n   */\n\n  vec3.rotationTo = function (a, b, dest) {\n    if (!dest) {\n      dest = quat4.create();\n    }\n\n    var d = vec3.dot(a, b);\n    var axis = tmpvec3;\n\n    if (d >= 1.0) {\n      quat4.set(identityQuat4, dest);\n    } else if (d < 0.000001 - 1.0) {\n      vec3.cross(xUnitVec3, a, axis);\n      if (vec3.length(axis) < 0.000001) vec3.cross(yUnitVec3, a, axis);\n      if (vec3.length(axis) < 0.000001) vec3.cross(zUnitVec3, a, axis);\n      vec3.normalize(axis);\n      quat4.fromAngleAxis(Math.PI, axis, dest);\n    } else {\n      var s = Math.sqrt((1.0 + d) * 2.0);\n      var sInv = 1.0 / s;\n      vec3.cross(a, b, axis);\n      dest[0] = axis[0] * sInv;\n      dest[1] = axis[1] * sInv;\n      dest[2] = axis[2] * sInv;\n      dest[3] = s * 0.5;\n      quat4.normalize(dest);\n    }\n\n    if (dest[3] > 1.0) dest[3] = 1.0;else if (dest[3] < -1.0) dest[3] = -1.0;\n    return dest;\n  };\n  /**\n   * Returns a string representation of a vector\n   *\n   * @param {vec3} vec Vector to represent as a string\n   *\n   * @returns {string} String representation of vec\n   */\n\n\n  vec3.str = function (vec) {\n    return '[' + vec[0] + ', ' + vec[1] + ', ' + vec[2] + ']';\n  };\n  /**\n   * @class 3x3 Matrix\n   * @name mat3\n   */\n\n\n  var mat3 = {};\n  /**\n   * Creates a new instance of a mat3 using the default array type\n   * Any javascript array-like object containing at least 9 numeric elements can serve as a mat3\n   *\n   * @param {mat3} [mat] mat3 containing values to initialize with\n   *\n   * @returns {mat3} New mat3\n   */\n\n  mat3.create = function (mat) {\n    var dest = new MatrixArray(9);\n\n    if (mat) {\n      dest[0] = mat[0];\n      dest[1] = mat[1];\n      dest[2] = mat[2];\n      dest[3] = mat[3];\n      dest[4] = mat[4];\n      dest[5] = mat[5];\n      dest[6] = mat[6];\n      dest[7] = mat[7];\n      dest[8] = mat[8];\n    } else {\n      dest[0] = dest[1] = dest[2] = dest[3] = dest[4] = dest[5] = dest[6] = dest[7] = dest[8] = 0;\n    }\n\n    return dest;\n  };\n  /**\n   * Creates a new instance of a mat3, initializing it with the given arguments\n   *\n   * @param {number} m00\n   * @param {number} m01\n   * @param {number} m02\n   * @param {number} m10\n   * @param {number} m11\n   * @param {number} m12\n   * @param {number} m20\n   * @param {number} m21\n   * @param {number} m22\n    * @returns {mat3} New mat3\n   */\n\n\n  mat3.createFrom = function (m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    var dest = new MatrixArray(9);\n    dest[0] = m00;\n    dest[1] = m01;\n    dest[2] = m02;\n    dest[3] = m10;\n    dest[4] = m11;\n    dest[5] = m12;\n    dest[6] = m20;\n    dest[7] = m21;\n    dest[8] = m22;\n    return dest;\n  };\n  /**\n   * Calculates the determinant of a mat3\n   *\n   * @param {mat3} mat mat3 to calculate determinant of\n   *\n   * @returns {Number} determinant of mat\n   */\n\n\n  mat3.determinant = function (mat) {\n    var a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a10 = mat[3],\n        a11 = mat[4],\n        a12 = mat[5],\n        a20 = mat[6],\n        a21 = mat[7],\n        a22 = mat[8];\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n  };\n  /**\n   * Calculates the inverse matrix of a mat3\n   *\n   * @param {mat3} mat mat3 to calculate inverse of\n   * @param {mat3} [dest] mat3 receiving inverse matrix. If not specified result is written to mat\n   *\n   * @param {mat3} dest is specified, mat otherwise, null if matrix cannot be inverted\n   */\n\n\n  mat3.inverse = function (mat, dest) {\n    var a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a10 = mat[3],\n        a11 = mat[4],\n        a12 = mat[5],\n        a20 = mat[6],\n        a21 = mat[7],\n        a22 = mat[8],\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n        d = a00 * b01 + a01 * b11 + a02 * b21,\n        id;\n\n    if (!d) {\n      return null;\n    }\n\n    id = 1 / d;\n\n    if (!dest) {\n      dest = mat3.create();\n    }\n\n    dest[0] = b01 * id;\n    dest[1] = (-a22 * a01 + a02 * a21) * id;\n    dest[2] = (a12 * a01 - a02 * a11) * id;\n    dest[3] = b11 * id;\n    dest[4] = (a22 * a00 - a02 * a20) * id;\n    dest[5] = (-a12 * a00 + a02 * a10) * id;\n    dest[6] = b21 * id;\n    dest[7] = (-a21 * a00 + a01 * a20) * id;\n    dest[8] = (a11 * a00 - a01 * a10) * id;\n    return dest;\n  };\n  /**\n   * Performs a matrix multiplication\n   *\n   * @param {mat3} mat First operand\n   * @param {mat3} mat2 Second operand\n   * @param {mat3} [dest] mat3 receiving operation result. If not specified result is written to mat\n   *\n   * @returns {mat3} dest if specified, mat otherwise\n   */\n\n\n  mat3.multiply = function (mat, mat2, dest) {\n    if (!dest) {\n      dest = mat;\n    } // Cache the matrix values (makes for huge speed increases!)\n\n\n    var a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a10 = mat[3],\n        a11 = mat[4],\n        a12 = mat[5],\n        a20 = mat[6],\n        a21 = mat[7],\n        a22 = mat[8],\n        b00 = mat2[0],\n        b01 = mat2[1],\n        b02 = mat2[2],\n        b10 = mat2[3],\n        b11 = mat2[4],\n        b12 = mat2[5],\n        b20 = mat2[6],\n        b21 = mat2[7],\n        b22 = mat2[8];\n    dest[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    dest[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    dest[2] = b00 * a02 + b01 * a12 + b02 * a22;\n    dest[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    dest[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    dest[5] = b10 * a02 + b11 * a12 + b12 * a22;\n    dest[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    dest[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    dest[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return dest;\n  };\n  /**\n   * Transforms the vec2 according to the given mat3.\n   *\n   * @param {mat3} matrix mat3 to multiply against\n   * @param {vec2} vec    the vector to multiply\n   * @param {vec2} [dest] an optional receiving vector. If not given, vec is used.\n   *\n   * @returns {vec2} The multiplication result\n   **/\n\n\n  mat3.multiplyVec2 = function (matrix, vec, dest) {\n    if (!dest) dest = vec;\n    var x = vec[0],\n        y = vec[1];\n    dest[0] = x * matrix[0] + y * matrix[3] + matrix[6];\n    dest[1] = x * matrix[1] + y * matrix[4] + matrix[7];\n    return dest;\n  };\n  /**\n   * Transforms the vec3 according to the given mat3\n   *\n   * @param {mat3} matrix mat3 to multiply against\n   * @param {vec3} vec    the vector to multiply\n   * @param {vec3} [dest] an optional receiving vector. If not given, vec is used.\n   *\n   * @returns {vec3} The multiplication result\n   **/\n\n\n  mat3.multiplyVec3 = function (matrix, vec, dest) {\n    if (!dest) dest = vec;\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2];\n    dest[0] = x * matrix[0] + y * matrix[3] + z * matrix[6];\n    dest[1] = x * matrix[1] + y * matrix[4] + z * matrix[7];\n    dest[2] = x * matrix[2] + y * matrix[5] + z * matrix[8];\n    return dest;\n  };\n  /**\n   * Copies the values of one mat3 to another\n   *\n   * @param {mat3} mat mat3 containing values to copy\n   * @param {mat3} dest mat3 receiving copied values\n   *\n   * @returns {mat3} dest\n   */\n\n\n  mat3.set = function (mat, dest) {\n    dest[0] = mat[0];\n    dest[1] = mat[1];\n    dest[2] = mat[2];\n    dest[3] = mat[3];\n    dest[4] = mat[4];\n    dest[5] = mat[5];\n    dest[6] = mat[6];\n    dest[7] = mat[7];\n    dest[8] = mat[8];\n    return dest;\n  };\n  /**\n   * Compares two matrices for equality within a certain margin of error\n   *\n   * @param {mat3} a First matrix\n   * @param {mat3} b Second matrix\n   *\n   * @returns {Boolean} True if a is equivalent to b\n   */\n\n\n  mat3.equal = function (a, b) {\n    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON && Math.abs(a[3] - b[3]) < FLOAT_EPSILON && Math.abs(a[4] - b[4]) < FLOAT_EPSILON && Math.abs(a[5] - b[5]) < FLOAT_EPSILON && Math.abs(a[6] - b[6]) < FLOAT_EPSILON && Math.abs(a[7] - b[7]) < FLOAT_EPSILON && Math.abs(a[8] - b[8]) < FLOAT_EPSILON;\n  };\n  /**\n   * Sets a mat3 to an identity matrix\n   *\n   * @param {mat3} dest mat3 to set\n   *\n   * @returns dest if specified, otherwise a new mat3\n   */\n\n\n  mat3.identity = function (dest) {\n    if (!dest) {\n      dest = mat3.create();\n    }\n\n    dest[0] = 1;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 0;\n    dest[4] = 1;\n    dest[5] = 0;\n    dest[6] = 0;\n    dest[7] = 0;\n    dest[8] = 1;\n    return dest;\n  };\n  /**\n   * Transposes a mat3 (flips the values over the diagonal)\n   *\n   * Params:\n   * @param {mat3} mat mat3 to transpose\n   * @param {mat3} [dest] mat3 receiving transposed values. If not specified result is written to mat\n   *\n   * @returns {mat3} dest is specified, mat otherwise\n   */\n\n\n  mat3.transpose = function (mat, dest) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (!dest || mat === dest) {\n      var a01 = mat[1],\n          a02 = mat[2],\n          a12 = mat[5];\n      mat[1] = mat[3];\n      mat[2] = mat[6];\n      mat[3] = a01;\n      mat[5] = mat[7];\n      mat[6] = a02;\n      mat[7] = a12;\n      return mat;\n    }\n\n    dest[0] = mat[0];\n    dest[1] = mat[3];\n    dest[2] = mat[6];\n    dest[3] = mat[1];\n    dest[4] = mat[4];\n    dest[5] = mat[7];\n    dest[6] = mat[2];\n    dest[7] = mat[5];\n    dest[8] = mat[8];\n    return dest;\n  };\n  /**\n   * Copies the elements of a mat3 into the upper 3x3 elements of a mat4\n   *\n   * @param {mat3} mat mat3 containing values to copy\n   * @param {mat4} [dest] mat4 receiving copied values\n   *\n   * @returns {mat4} dest if specified, a new mat4 otherwise\n   */\n\n\n  mat3.toMat4 = function (mat, dest) {\n    if (!dest) {\n      dest = mat4.create();\n    }\n\n    dest[15] = 1;\n    dest[14] = 0;\n    dest[13] = 0;\n    dest[12] = 0;\n    dest[11] = 0;\n    dest[10] = mat[8];\n    dest[9] = mat[7];\n    dest[8] = mat[6];\n    dest[7] = 0;\n    dest[6] = mat[5];\n    dest[5] = mat[4];\n    dest[4] = mat[3];\n    dest[3] = 0;\n    dest[2] = mat[2];\n    dest[1] = mat[1];\n    dest[0] = mat[0];\n    return dest;\n  };\n  /**\n   * Returns a string representation of a mat3\n   *\n   * @param {mat3} mat mat3 to represent as a string\n   *\n   * @param {string} String representation of mat\n   */\n\n\n  mat3.str = function (mat) {\n    return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] + ', ' + mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] + ', ' + mat[8] + ']';\n  };\n  /**\n   * @class 4x4 Matrix\n   * @name mat4\n   */\n\n\n  var mat4 = {};\n  /**\n   * Creates a new instance of a mat4 using the default array type\n   * Any javascript array-like object containing at least 16 numeric elements can serve as a mat4\n   *\n   * @param {mat4} [mat] mat4 containing values to initialize with\n   *\n   * @returns {mat4} New mat4\n   */\n\n  mat4.create = function (mat) {\n    var dest = new MatrixArray(16);\n\n    if (mat) {\n      dest[0] = mat[0];\n      dest[1] = mat[1];\n      dest[2] = mat[2];\n      dest[3] = mat[3];\n      dest[4] = mat[4];\n      dest[5] = mat[5];\n      dest[6] = mat[6];\n      dest[7] = mat[7];\n      dest[8] = mat[8];\n      dest[9] = mat[9];\n      dest[10] = mat[10];\n      dest[11] = mat[11];\n      dest[12] = mat[12];\n      dest[13] = mat[13];\n      dest[14] = mat[14];\n      dest[15] = mat[15];\n    }\n\n    return dest;\n  };\n  /**\n   * Creates a new instance of a mat4, initializing it with the given arguments\n   *\n   * @param {number} m00\n   * @param {number} m01\n   * @param {number} m02\n   * @param {number} m03\n   * @param {number} m10\n   * @param {number} m11\n   * @param {number} m12\n   * @param {number} m13\n   * @param {number} m20\n   * @param {number} m21\n   * @param {number} m22\n   * @param {number} m23\n   * @param {number} m30\n   * @param {number} m31\n   * @param {number} m32\n   * @param {number} m33\n    * @returns {mat4} New mat4\n   */\n\n\n  mat4.createFrom = function (m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    var dest = new MatrixArray(16);\n    dest[0] = m00;\n    dest[1] = m01;\n    dest[2] = m02;\n    dest[3] = m03;\n    dest[4] = m10;\n    dest[5] = m11;\n    dest[6] = m12;\n    dest[7] = m13;\n    dest[8] = m20;\n    dest[9] = m21;\n    dest[10] = m22;\n    dest[11] = m23;\n    dest[12] = m30;\n    dest[13] = m31;\n    dest[14] = m32;\n    dest[15] = m33;\n    return dest;\n  };\n  /**\n   * Copies the values of one mat4 to another\n   *\n   * @param {mat4} mat mat4 containing values to copy\n   * @param {mat4} dest mat4 receiving copied values\n   *\n   * @returns {mat4} dest\n   */\n\n\n  mat4.set = function (mat, dest) {\n    dest[0] = mat[0];\n    dest[1] = mat[1];\n    dest[2] = mat[2];\n    dest[3] = mat[3];\n    dest[4] = mat[4];\n    dest[5] = mat[5];\n    dest[6] = mat[6];\n    dest[7] = mat[7];\n    dest[8] = mat[8];\n    dest[9] = mat[9];\n    dest[10] = mat[10];\n    dest[11] = mat[11];\n    dest[12] = mat[12];\n    dest[13] = mat[13];\n    dest[14] = mat[14];\n    dest[15] = mat[15];\n    return dest;\n  };\n  /**\n   * Compares two matrices for equality within a certain margin of error\n   *\n   * @param {mat4} a First matrix\n   * @param {mat4} b Second matrix\n   *\n   * @returns {Boolean} True if a is equivalent to b\n   */\n\n\n  mat4.equal = function (a, b) {\n    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON && Math.abs(a[3] - b[3]) < FLOAT_EPSILON && Math.abs(a[4] - b[4]) < FLOAT_EPSILON && Math.abs(a[5] - b[5]) < FLOAT_EPSILON && Math.abs(a[6] - b[6]) < FLOAT_EPSILON && Math.abs(a[7] - b[7]) < FLOAT_EPSILON && Math.abs(a[8] - b[8]) < FLOAT_EPSILON && Math.abs(a[9] - b[9]) < FLOAT_EPSILON && Math.abs(a[10] - b[10]) < FLOAT_EPSILON && Math.abs(a[11] - b[11]) < FLOAT_EPSILON && Math.abs(a[12] - b[12]) < FLOAT_EPSILON && Math.abs(a[13] - b[13]) < FLOAT_EPSILON && Math.abs(a[14] - b[14]) < FLOAT_EPSILON && Math.abs(a[15] - b[15]) < FLOAT_EPSILON;\n  };\n  /**\n   * Sets a mat4 to an identity matrix\n   *\n   * @param {mat4} dest mat4 to set\n   *\n   * @returns {mat4} dest\n   */\n\n\n  mat4.identity = function (dest) {\n    if (!dest) {\n      dest = mat4.create();\n    }\n\n    dest[0] = 1;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 0;\n    dest[4] = 0;\n    dest[5] = 1;\n    dest[6] = 0;\n    dest[7] = 0;\n    dest[8] = 0;\n    dest[9] = 0;\n    dest[10] = 1;\n    dest[11] = 0;\n    dest[12] = 0;\n    dest[13] = 0;\n    dest[14] = 0;\n    dest[15] = 1;\n    return dest;\n  };\n  /**\n   * Transposes a mat4 (flips the values over the diagonal)\n   *\n   * @param {mat4} mat mat4 to transpose\n   * @param {mat4} [dest] mat4 receiving transposed values. If not specified result is written to mat\n   *\n   * @param {mat4} dest is specified, mat otherwise\n   */\n\n\n  mat4.transpose = function (mat, dest) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (!dest || mat === dest) {\n      var a01 = mat[1],\n          a02 = mat[2],\n          a03 = mat[3],\n          a12 = mat[6],\n          a13 = mat[7],\n          a23 = mat[11];\n      mat[1] = mat[4];\n      mat[2] = mat[8];\n      mat[3] = mat[12];\n      mat[4] = a01;\n      mat[6] = mat[9];\n      mat[7] = mat[13];\n      mat[8] = a02;\n      mat[9] = a12;\n      mat[11] = mat[14];\n      mat[12] = a03;\n      mat[13] = a13;\n      mat[14] = a23;\n      return mat;\n    }\n\n    dest[0] = mat[0];\n    dest[1] = mat[4];\n    dest[2] = mat[8];\n    dest[3] = mat[12];\n    dest[4] = mat[1];\n    dest[5] = mat[5];\n    dest[6] = mat[9];\n    dest[7] = mat[13];\n    dest[8] = mat[2];\n    dest[9] = mat[6];\n    dest[10] = mat[10];\n    dest[11] = mat[14];\n    dest[12] = mat[3];\n    dest[13] = mat[7];\n    dest[14] = mat[11];\n    dest[15] = mat[15];\n    return dest;\n  };\n  /**\n   * Calculates the determinant of a mat4\n   *\n   * @param {mat4} mat mat4 to calculate determinant of\n   *\n   * @returns {number} determinant of mat\n   */\n\n\n  mat4.determinant = function (mat) {\n    // Cache the matrix values (makes for huge speed increases!)\n    var a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a03 = mat[3],\n        a10 = mat[4],\n        a11 = mat[5],\n        a12 = mat[6],\n        a13 = mat[7],\n        a20 = mat[8],\n        a21 = mat[9],\n        a22 = mat[10],\n        a23 = mat[11],\n        a30 = mat[12],\n        a31 = mat[13],\n        a32 = mat[14],\n        a33 = mat[15];\n    return a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 + a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 + a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 + a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 + a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 + a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33;\n  };\n  /**\n   * Calculates the inverse matrix of a mat4\n   *\n   * @param {mat4} mat mat4 to calculate inverse of\n   * @param {mat4} [dest] mat4 receiving inverse matrix. If not specified result is written to mat\n   *\n   * @param {mat4} dest is specified, mat otherwise, null if matrix cannot be inverted\n   */\n\n\n  mat4.inverse = function (mat, dest) {\n    if (!dest) {\n      dest = mat;\n    } // Cache the matrix values (makes for huge speed increases!)\n\n\n    var a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a03 = mat[3],\n        a10 = mat[4],\n        a11 = mat[5],\n        a12 = mat[6],\n        a13 = mat[7],\n        a20 = mat[8],\n        a21 = mat[9],\n        a22 = mat[10],\n        a23 = mat[11],\n        a30 = mat[12],\n        a31 = mat[13],\n        a32 = mat[14],\n        a33 = mat[15],\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n        d = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06,\n        invDet; // Calculate the determinant\n\n    if (!d) {\n      return null;\n    }\n\n    invDet = 1 / d;\n    dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;\n    dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;\n    dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;\n    dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;\n    dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;\n    dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;\n    dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;\n    dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;\n    dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;\n    dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;\n    dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;\n    dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;\n    dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;\n    dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;\n    dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;\n    dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;\n    return dest;\n  };\n  /**\n   * Copies the upper 3x3 elements of a mat4 into another mat4\n   *\n   * @param {mat4} mat mat4 containing values to copy\n   * @param {mat4} [dest] mat4 receiving copied values\n   *\n   * @returns {mat4} dest is specified, a new mat4 otherwise\n   */\n\n\n  mat4.toRotationMat = function (mat, dest) {\n    if (!dest) {\n      dest = mat4.create();\n    }\n\n    dest[0] = mat[0];\n    dest[1] = mat[1];\n    dest[2] = mat[2];\n    dest[3] = mat[3];\n    dest[4] = mat[4];\n    dest[5] = mat[5];\n    dest[6] = mat[6];\n    dest[7] = mat[7];\n    dest[8] = mat[8];\n    dest[9] = mat[9];\n    dest[10] = mat[10];\n    dest[11] = mat[11];\n    dest[12] = 0;\n    dest[13] = 0;\n    dest[14] = 0;\n    dest[15] = 1;\n    return dest;\n  };\n  /**\n   * Copies the upper 3x3 elements of a mat4 into a mat3\n   *\n   * @param {mat4} mat mat4 containing values to copy\n   * @param {mat3} [dest] mat3 receiving copied values\n   *\n   * @returns {mat3} dest is specified, a new mat3 otherwise\n   */\n\n\n  mat4.toMat3 = function (mat, dest) {\n    if (!dest) {\n      dest = mat3.create();\n    }\n\n    dest[0] = mat[0];\n    dest[1] = mat[1];\n    dest[2] = mat[2];\n    dest[3] = mat[4];\n    dest[4] = mat[5];\n    dest[5] = mat[6];\n    dest[6] = mat[8];\n    dest[7] = mat[9];\n    dest[8] = mat[10];\n    return dest;\n  };\n  /**\n   * Calculates the inverse of the upper 3x3 elements of a mat4 and copies the result into a mat3\n   * The resulting matrix is useful for calculating transformed normals\n   *\n   * Params:\n   * @param {mat4} mat mat4 containing values to invert and copy\n   * @param {mat3} [dest] mat3 receiving values\n   *\n   * @returns {mat3} dest is specified, a new mat3 otherwise, null if the matrix cannot be inverted\n   */\n\n\n  mat4.toInverseMat3 = function (mat, dest) {\n    // Cache the matrix values (makes for huge speed increases!)\n    var a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a10 = mat[4],\n        a11 = mat[5],\n        a12 = mat[6],\n        a20 = mat[8],\n        a21 = mat[9],\n        a22 = mat[10],\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n        d = a00 * b01 + a01 * b11 + a02 * b21,\n        id;\n\n    if (!d) {\n      return null;\n    }\n\n    id = 1 / d;\n\n    if (!dest) {\n      dest = mat3.create();\n    }\n\n    dest[0] = b01 * id;\n    dest[1] = (-a22 * a01 + a02 * a21) * id;\n    dest[2] = (a12 * a01 - a02 * a11) * id;\n    dest[3] = b11 * id;\n    dest[4] = (a22 * a00 - a02 * a20) * id;\n    dest[5] = (-a12 * a00 + a02 * a10) * id;\n    dest[6] = b21 * id;\n    dest[7] = (-a21 * a00 + a01 * a20) * id;\n    dest[8] = (a11 * a00 - a01 * a10) * id;\n    return dest;\n  };\n  /**\n   * Performs a matrix multiplication\n   *\n   * @param {mat4} mat First operand\n   * @param {mat4} mat2 Second operand\n   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n   *\n   * @returns {mat4} dest if specified, mat otherwise\n   */\n\n\n  mat4.multiply = function (mat, mat2, dest) {\n    if (!dest) {\n      dest = mat;\n    } // Cache the matrix values (makes for huge speed increases!)\n\n\n    var a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a03 = mat[3];\n    var a10 = mat[4],\n        a11 = mat[5],\n        a12 = mat[6],\n        a13 = mat[7];\n    var a20 = mat[8],\n        a21 = mat[9],\n        a22 = mat[10],\n        a23 = mat[11];\n    var a30 = mat[12],\n        a31 = mat[13],\n        a32 = mat[14],\n        a33 = mat[15]; // Cache only the current line of the second matrix\n\n    var b0 = mat2[0],\n        b1 = mat2[1],\n        b2 = mat2[2],\n        b3 = mat2[3];\n    dest[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    dest[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    dest[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    dest[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = mat2[4];\n    b1 = mat2[5];\n    b2 = mat2[6];\n    b3 = mat2[7];\n    dest[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    dest[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    dest[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    dest[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = mat2[8];\n    b1 = mat2[9];\n    b2 = mat2[10];\n    b3 = mat2[11];\n    dest[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    dest[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    dest[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    dest[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = mat2[12];\n    b1 = mat2[13];\n    b2 = mat2[14];\n    b3 = mat2[15];\n    dest[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    dest[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    dest[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    dest[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return dest;\n  };\n  /**\n   * Transforms a vec3 with the given matrix\n   * 4th vector component is implicitly '1'\n   *\n   * @param {mat4} mat mat4 to transform the vector with\n   * @param {vec3} vec vec3 to transform\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  mat4.multiplyVec3 = function (mat, vec, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2];\n    dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];\n    dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];\n    dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];\n    return dest;\n  };\n  /**\n   * Transforms a vec4 with the given matrix\n   *\n   * @param {mat4} mat mat4 to transform the vector with\n   * @param {vec4} vec vec4 to transform\n   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec4} dest if specified, vec otherwise\n   */\n\n\n  mat4.multiplyVec4 = function (mat, vec, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2],\n        w = vec[3];\n    dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12] * w;\n    dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13] * w;\n    dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14] * w;\n    dest[3] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15] * w;\n    return dest;\n  };\n  /**\n   * Translates a matrix by the given vector\n   *\n   * @param {mat4} mat mat4 to translate\n   * @param {vec3} vec vec3 specifying the translation\n   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n   *\n   * @returns {mat4} dest if specified, mat otherwise\n   */\n\n\n  mat4.translate = function (mat, vec, dest) {\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2],\n        a00,\n        a01,\n        a02,\n        a03,\n        a10,\n        a11,\n        a12,\n        a13,\n        a20,\n        a21,\n        a22,\n        a23;\n\n    if (!dest || mat === dest) {\n      mat[12] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];\n      mat[13] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];\n      mat[14] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];\n      mat[15] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15];\n      return mat;\n    }\n\n    a00 = mat[0];\n    a01 = mat[1];\n    a02 = mat[2];\n    a03 = mat[3];\n    a10 = mat[4];\n    a11 = mat[5];\n    a12 = mat[6];\n    a13 = mat[7];\n    a20 = mat[8];\n    a21 = mat[9];\n    a22 = mat[10];\n    a23 = mat[11];\n    dest[0] = a00;\n    dest[1] = a01;\n    dest[2] = a02;\n    dest[3] = a03;\n    dest[4] = a10;\n    dest[5] = a11;\n    dest[6] = a12;\n    dest[7] = a13;\n    dest[8] = a20;\n    dest[9] = a21;\n    dest[10] = a22;\n    dest[11] = a23;\n    dest[12] = a00 * x + a10 * y + a20 * z + mat[12];\n    dest[13] = a01 * x + a11 * y + a21 * z + mat[13];\n    dest[14] = a02 * x + a12 * y + a22 * z + mat[14];\n    dest[15] = a03 * x + a13 * y + a23 * z + mat[15];\n    return dest;\n  };\n  /**\n   * Scales a matrix by the given vector\n   *\n   * @param {mat4} mat mat4 to scale\n   * @param {vec3} vec vec3 specifying the scale for each axis\n   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n   *\n   * @param {mat4} dest if specified, mat otherwise\n   */\n\n\n  mat4.scale = function (mat, vec, dest) {\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2];\n\n    if (!dest || mat === dest) {\n      mat[0] *= x;\n      mat[1] *= x;\n      mat[2] *= x;\n      mat[3] *= x;\n      mat[4] *= y;\n      mat[5] *= y;\n      mat[6] *= y;\n      mat[7] *= y;\n      mat[8] *= z;\n      mat[9] *= z;\n      mat[10] *= z;\n      mat[11] *= z;\n      return mat;\n    }\n\n    dest[0] = mat[0] * x;\n    dest[1] = mat[1] * x;\n    dest[2] = mat[2] * x;\n    dest[3] = mat[3] * x;\n    dest[4] = mat[4] * y;\n    dest[5] = mat[5] * y;\n    dest[6] = mat[6] * y;\n    dest[7] = mat[7] * y;\n    dest[8] = mat[8] * z;\n    dest[9] = mat[9] * z;\n    dest[10] = mat[10] * z;\n    dest[11] = mat[11] * z;\n    dest[12] = mat[12];\n    dest[13] = mat[13];\n    dest[14] = mat[14];\n    dest[15] = mat[15];\n    return dest;\n  };\n  /**\n   * Rotates a matrix by the given angle around the specified axis\n   * If rotating around a primary axis (X,Y,Z) one of the specialized rotation functions should be used instead for performance\n   *\n   * @param {mat4} mat mat4 to rotate\n   * @param {number} angle Angle (in radians) to rotate\n   * @param {vec3} axis vec3 representing the axis to rotate around\n   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n   *\n   * @returns {mat4} dest if specified, mat otherwise\n   */\n\n\n  mat4.rotate = function (mat, angle, axis, dest) {\n    var x = axis[0],\n        y = axis[1],\n        z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s,\n        c,\n        t,\n        a00,\n        a01,\n        a02,\n        a03,\n        a10,\n        a11,\n        a12,\n        a13,\n        a20,\n        a21,\n        a22,\n        a23,\n        b00,\n        b01,\n        b02,\n        b10,\n        b11,\n        b12,\n        b20,\n        b21,\n        b22;\n\n    if (!len) {\n      return null;\n    }\n\n    if (len !== 1) {\n      len = 1 / len;\n      x *= len;\n      y *= len;\n      z *= len;\n    }\n\n    s = Math.sin(angle);\n    c = Math.cos(angle);\n    t = 1 - c;\n    a00 = mat[0];\n    a01 = mat[1];\n    a02 = mat[2];\n    a03 = mat[3];\n    a10 = mat[4];\n    a11 = mat[5];\n    a12 = mat[6];\n    a13 = mat[7];\n    a20 = mat[8];\n    a21 = mat[9];\n    a22 = mat[10];\n    a23 = mat[11]; // Construct the elements of the rotation matrix\n\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n\n    if (!dest) {\n      dest = mat;\n    } else if (mat !== dest) {\n      // If the source and destination differ, copy the unchanged last row\n      dest[12] = mat[12];\n      dest[13] = mat[13];\n      dest[14] = mat[14];\n      dest[15] = mat[15];\n    } // Perform rotation-specific matrix multiplication\n\n\n    dest[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    dest[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    dest[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    dest[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    dest[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    dest[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    dest[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    dest[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    dest[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    dest[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    dest[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    dest[11] = a03 * b20 + a13 * b21 + a23 * b22;\n    return dest;\n  };\n  /**\n   * Rotates a matrix by the given angle around the X axis\n   *\n   * @param {mat4} mat mat4 to rotate\n   * @param {number} angle Angle (in radians) to rotate\n   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n   *\n   * @returns {mat4} dest if specified, mat otherwise\n   */\n\n\n  mat4.rotateX = function (mat, angle, dest) {\n    var s = Math.sin(angle),\n        c = Math.cos(angle),\n        a10 = mat[4],\n        a11 = mat[5],\n        a12 = mat[6],\n        a13 = mat[7],\n        a20 = mat[8],\n        a21 = mat[9],\n        a22 = mat[10],\n        a23 = mat[11];\n\n    if (!dest) {\n      dest = mat;\n    } else if (mat !== dest) {\n      // If the source and destination differ, copy the unchanged rows\n      dest[0] = mat[0];\n      dest[1] = mat[1];\n      dest[2] = mat[2];\n      dest[3] = mat[3];\n      dest[12] = mat[12];\n      dest[13] = mat[13];\n      dest[14] = mat[14];\n      dest[15] = mat[15];\n    } // Perform axis-specific matrix multiplication\n\n\n    dest[4] = a10 * c + a20 * s;\n    dest[5] = a11 * c + a21 * s;\n    dest[6] = a12 * c + a22 * s;\n    dest[7] = a13 * c + a23 * s;\n    dest[8] = a10 * -s + a20 * c;\n    dest[9] = a11 * -s + a21 * c;\n    dest[10] = a12 * -s + a22 * c;\n    dest[11] = a13 * -s + a23 * c;\n    return dest;\n  };\n  /**\n   * Rotates a matrix by the given angle around the Y axis\n   *\n   * @param {mat4} mat mat4 to rotate\n   * @param {number} angle Angle (in radians) to rotate\n   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n   *\n   * @returns {mat4} dest if specified, mat otherwise\n   */\n\n\n  mat4.rotateY = function (mat, angle, dest) {\n    var s = Math.sin(angle),\n        c = Math.cos(angle),\n        a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a03 = mat[3],\n        a20 = mat[8],\n        a21 = mat[9],\n        a22 = mat[10],\n        a23 = mat[11];\n\n    if (!dest) {\n      dest = mat;\n    } else if (mat !== dest) {\n      // If the source and destination differ, copy the unchanged rows\n      dest[4] = mat[4];\n      dest[5] = mat[5];\n      dest[6] = mat[6];\n      dest[7] = mat[7];\n      dest[12] = mat[12];\n      dest[13] = mat[13];\n      dest[14] = mat[14];\n      dest[15] = mat[15];\n    } // Perform axis-specific matrix multiplication\n\n\n    dest[0] = a00 * c + a20 * -s;\n    dest[1] = a01 * c + a21 * -s;\n    dest[2] = a02 * c + a22 * -s;\n    dest[3] = a03 * c + a23 * -s;\n    dest[8] = a00 * s + a20 * c;\n    dest[9] = a01 * s + a21 * c;\n    dest[10] = a02 * s + a22 * c;\n    dest[11] = a03 * s + a23 * c;\n    return dest;\n  };\n  /**\n   * Rotates a matrix by the given angle around the Z axis\n   *\n   * @param {mat4} mat mat4 to rotate\n   * @param {number} angle Angle (in radians) to rotate\n   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n   *\n   * @returns {mat4} dest if specified, mat otherwise\n   */\n\n\n  mat4.rotateZ = function (mat, angle, dest) {\n    var s = Math.sin(angle),\n        c = Math.cos(angle),\n        a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a03 = mat[3],\n        a10 = mat[4],\n        a11 = mat[5],\n        a12 = mat[6],\n        a13 = mat[7];\n\n    if (!dest) {\n      dest = mat;\n    } else if (mat !== dest) {\n      // If the source and destination differ, copy the unchanged last row\n      dest[8] = mat[8];\n      dest[9] = mat[9];\n      dest[10] = mat[10];\n      dest[11] = mat[11];\n      dest[12] = mat[12];\n      dest[13] = mat[13];\n      dest[14] = mat[14];\n      dest[15] = mat[15];\n    } // Perform axis-specific matrix multiplication\n\n\n    dest[0] = a00 * c + a10 * s;\n    dest[1] = a01 * c + a11 * s;\n    dest[2] = a02 * c + a12 * s;\n    dest[3] = a03 * c + a13 * s;\n    dest[4] = a00 * -s + a10 * c;\n    dest[5] = a01 * -s + a11 * c;\n    dest[6] = a02 * -s + a12 * c;\n    dest[7] = a03 * -s + a13 * c;\n    return dest;\n  };\n  /**\n   * Generates a frustum matrix with the given bounds\n   *\n   * @param {number} left Left bound of the frustum\n   * @param {number} right Right bound of the frustum\n   * @param {number} bottom Bottom bound of the frustum\n   * @param {number} top Top bound of the frustum\n   * @param {number} near Near bound of the frustum\n   * @param {number} far Far bound of the frustum\n   * @param {mat4} [dest] mat4 frustum matrix will be written into\n   *\n   * @returns {mat4} dest if specified, a new mat4 otherwise\n   */\n\n\n  mat4.frustum = function (left, right, bottom, top, near, far, dest) {\n    if (!dest) {\n      dest = mat4.create();\n    }\n\n    var rl = right - left,\n        tb = top - bottom,\n        fn = far - near;\n    dest[0] = near * 2 / rl;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 0;\n    dest[4] = 0;\n    dest[5] = near * 2 / tb;\n    dest[6] = 0;\n    dest[7] = 0;\n    dest[8] = (right + left) / rl;\n    dest[9] = (top + bottom) / tb;\n    dest[10] = -(far + near) / fn;\n    dest[11] = -1;\n    dest[12] = 0;\n    dest[13] = 0;\n    dest[14] = -(far * near * 2) / fn;\n    dest[15] = 0;\n    return dest;\n  };\n  /**\n   * Generates a perspective projection matrix with the given bounds\n   *\n   * @param {number} fovy Vertical field of view\n   * @param {number} aspect Aspect ratio. typically viewport width/height\n   * @param {number} near Near bound of the frustum\n   * @param {number} far Far bound of the frustum\n   * @param {mat4} [dest] mat4 frustum matrix will be written into\n   *\n   * @returns {mat4} dest if specified, a new mat4 otherwise\n   */\n\n\n  mat4.perspective = function (fovy, aspect, near, far, dest) {\n    var top = near * Math.tan(fovy * Math.PI / 360.0),\n        right = top * aspect;\n    return mat4.frustum(-right, right, -top, top, near, far, dest);\n  };\n  /**\n   * Generates a orthogonal projection matrix with the given bounds\n   *\n   * @param {number} left Left bound of the frustum\n   * @param {number} right Right bound of the frustum\n   * @param {number} bottom Bottom bound of the frustum\n   * @param {number} top Top bound of the frustum\n   * @param {number} near Near bound of the frustum\n   * @param {number} far Far bound of the frustum\n   * @param {mat4} [dest] mat4 frustum matrix will be written into\n   *\n   * @returns {mat4} dest if specified, a new mat4 otherwise\n   */\n\n\n  mat4.ortho = function (left, right, bottom, top, near, far, dest) {\n    if (!dest) {\n      dest = mat4.create();\n    }\n\n    var rl = right - left,\n        tb = top - bottom,\n        fn = far - near;\n    dest[0] = 2 / rl;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 0;\n    dest[4] = 0;\n    dest[5] = 2 / tb;\n    dest[6] = 0;\n    dest[7] = 0;\n    dest[8] = 0;\n    dest[9] = 0;\n    dest[10] = -2 / fn;\n    dest[11] = 0;\n    dest[12] = -(left + right) / rl;\n    dest[13] = -(top + bottom) / tb;\n    dest[14] = -(far + near) / fn;\n    dest[15] = 1;\n    return dest;\n  };\n  /**\n   * Generates a look-at matrix with the given eye position, focal point, and up axis\n   *\n   * @param {vec3} eye Position of the viewer\n   * @param {vec3} center Point the viewer is looking at\n   * @param {vec3} up vec3 pointing \"up\"\n   * @param {mat4} [dest] mat4 frustum matrix will be written into\n   *\n   * @returns {mat4} dest if specified, a new mat4 otherwise\n   */\n\n\n  mat4.lookAt = function (eye, center, up, dest) {\n    if (!dest) {\n      dest = mat4.create();\n    }\n\n    var x0,\n        x1,\n        x2,\n        y0,\n        y1,\n        y2,\n        z0,\n        z1,\n        z2,\n        len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (eyex === centerx && eyey === centery && eyez === centerz) {\n      return mat4.identity(dest);\n    } //vec3.direction(eye, center, z);\n\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz; // normalize (no check needed for 0 because of early return)\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len; //vec3.normalize(vec3.cross(up, z, x));\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n    if (!len) {\n      x0 = 0;\n      x1 = 0;\n      x2 = 0;\n    } else {\n      len = 1 / len;\n      x0 *= len;\n      x1 *= len;\n      x2 *= len;\n    } //vec3.normalize(vec3.cross(z, x, y));\n\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n    if (!len) {\n      y0 = 0;\n      y1 = 0;\n      y2 = 0;\n    } else {\n      len = 1 / len;\n      y0 *= len;\n      y1 *= len;\n      y2 *= len;\n    }\n\n    dest[0] = x0;\n    dest[1] = y0;\n    dest[2] = z0;\n    dest[3] = 0;\n    dest[4] = x1;\n    dest[5] = y1;\n    dest[6] = z1;\n    dest[7] = 0;\n    dest[8] = x2;\n    dest[9] = y2;\n    dest[10] = z2;\n    dest[11] = 0;\n    dest[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    dest[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    dest[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    dest[15] = 1;\n    return dest;\n  };\n  /**\n   * Creates a matrix from a quaternion rotation and vector translation\n   * This is equivalent to (but much faster than):\n   *\n   *     mat4.identity(dest);\n   *     mat4.translate(dest, vec);\n   *     var quatMat = mat4.create();\n   *     quat4.toMat4(quat, quatMat);\n   *     mat4.multiply(dest, quatMat);\n   *\n   * @param {quat4} quat Rotation quaternion\n   * @param {vec3} vec Translation vector\n   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to a new mat4\n   *\n   * @returns {mat4} dest if specified, a new mat4 otherwise\n   */\n\n\n  mat4.fromRotationTranslation = function (quat, vec, dest) {\n    if (!dest) {\n      dest = mat4.create();\n    } // Quaternion math\n\n\n    var x = quat[0],\n        y = quat[1],\n        z = quat[2],\n        w = quat[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n    dest[0] = 1 - (yy + zz);\n    dest[1] = xy + wz;\n    dest[2] = xz - wy;\n    dest[3] = 0;\n    dest[4] = xy - wz;\n    dest[5] = 1 - (xx + zz);\n    dest[6] = yz + wx;\n    dest[7] = 0;\n    dest[8] = xz + wy;\n    dest[9] = yz - wx;\n    dest[10] = 1 - (xx + yy);\n    dest[11] = 0;\n    dest[12] = vec[0];\n    dest[13] = vec[1];\n    dest[14] = vec[2];\n    dest[15] = 1;\n    return dest;\n  };\n  /**\n   * Returns a string representation of a mat4\n   *\n   * @param {mat4} mat mat4 to represent as a string\n   *\n   * @returns {string} String representation of mat\n   */\n\n\n  mat4.str = function (mat) {\n    return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] + ', ' + mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] + ', ' + mat[8] + ', ' + mat[9] + ', ' + mat[10] + ', ' + mat[11] + ', ' + mat[12] + ', ' + mat[13] + ', ' + mat[14] + ', ' + mat[15] + ']';\n  };\n  /**\n   * @class Quaternion\n   * @name quat4\n   */\n\n\n  var quat4 = {};\n  /**\n   * Creates a new instance of a quat4 using the default array type\n   * Any javascript array containing at least 4 numeric elements can serve as a quat4\n   *\n   * @param {quat4} [quat] quat4 containing values to initialize with\n   *\n   * @returns {quat4} New quat4\n   */\n\n  quat4.create = function (quat) {\n    var dest = new MatrixArray(4);\n\n    if (quat) {\n      dest[0] = quat[0];\n      dest[1] = quat[1];\n      dest[2] = quat[2];\n      dest[3] = quat[3];\n    } else {\n      dest[0] = dest[1] = dest[2] = dest[3] = 0;\n    }\n\n    return dest;\n  };\n  /**\n   * Creates a new instance of a quat4, initializing it with the given arguments\n   *\n   * @param {number} x X value\n   * @param {number} y Y value\n   * @param {number} z Z value\n   * @param {number} w W value\n    * @returns {quat4} New quat4\n   */\n\n\n  quat4.createFrom = function (x, y, z, w) {\n    var dest = new MatrixArray(4);\n    dest[0] = x;\n    dest[1] = y;\n    dest[2] = z;\n    dest[3] = w;\n    return dest;\n  };\n  /**\n   * Copies the values of one quat4 to another\n   *\n   * @param {quat4} quat quat4 containing values to copy\n   * @param {quat4} dest quat4 receiving copied values\n   *\n   * @returns {quat4} dest\n   */\n\n\n  quat4.set = function (quat, dest) {\n    dest[0] = quat[0];\n    dest[1] = quat[1];\n    dest[2] = quat[2];\n    dest[3] = quat[3];\n    return dest;\n  };\n  /**\n   * Compares two quaternions for equality within a certain margin of error\n   *\n   * @param {quat4} a First vector\n   * @param {quat4} b Second vector\n   *\n   * @returns {Boolean} True if a is equivalent to b\n   */\n\n\n  quat4.equal = function (a, b) {\n    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON && Math.abs(a[3] - b[3]) < FLOAT_EPSILON;\n  };\n  /**\n   * Creates a new identity Quat4\n   *\n   * @param {quat4} [dest] quat4 receiving copied values\n   *\n   * @returns {quat4} dest is specified, new quat4 otherwise\n   */\n\n\n  quat4.identity = function (dest) {\n    if (!dest) {\n      dest = quat4.create();\n    }\n\n    dest[0] = 0;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 1;\n    return dest;\n  };\n\n  var identityQuat4 = quat4.identity();\n  /**\n   * Calculates the W component of a quat4 from the X, Y, and Z components.\n   * Assumes that quaternion is 1 unit in length.\n   * Any existing W component will be ignored.\n   *\n   * @param {quat4} quat quat4 to calculate W component of\n   * @param {quat4} [dest] quat4 receiving calculated values. If not specified result is written to quat\n   *\n   * @returns {quat4} dest if specified, quat otherwise\n   */\n\n  quat4.calculateW = function (quat, dest) {\n    var x = quat[0],\n        y = quat[1],\n        z = quat[2];\n\n    if (!dest || quat === dest) {\n      quat[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n      return quat;\n    }\n\n    dest[0] = x;\n    dest[1] = y;\n    dest[2] = z;\n    dest[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return dest;\n  };\n  /**\n   * Calculates the dot product of two quaternions\n   *\n   * @param {quat4} quat First operand\n   * @param {quat4} quat2 Second operand\n   *\n   * @return {number} Dot product of quat and quat2\n   */\n\n\n  quat4.dot = function (quat, quat2) {\n    return quat[0] * quat2[0] + quat[1] * quat2[1] + quat[2] * quat2[2] + quat[3] * quat2[3];\n  };\n  /**\n   * Calculates the inverse of a quat4\n   *\n   * @param {quat4} quat quat4 to calculate inverse of\n   * @param {quat4} [dest] quat4 receiving inverse values. If not specified result is written to quat\n   *\n   * @returns {quat4} dest if specified, quat otherwise\n   */\n\n\n  quat4.inverse = function (quat, dest) {\n    var q0 = quat[0],\n        q1 = quat[1],\n        q2 = quat[2],\n        q3 = quat[3],\n        dot = q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3,\n        invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    if (!dest || quat === dest) {\n      quat[0] *= -invDot;\n      quat[1] *= -invDot;\n      quat[2] *= -invDot;\n      quat[3] *= invDot;\n      return quat;\n    }\n\n    dest[0] = -quat[0] * invDot;\n    dest[1] = -quat[1] * invDot;\n    dest[2] = -quat[2] * invDot;\n    dest[3] = quat[3] * invDot;\n    return dest;\n  };\n  /**\n   * Calculates the conjugate of a quat4\n   * If the quaternion is normalized, this function is faster than quat4.inverse and produces the same result.\n   *\n   * @param {quat4} quat quat4 to calculate conjugate of\n   * @param {quat4} [dest] quat4 receiving conjugate values. If not specified result is written to quat\n   *\n   * @returns {quat4} dest if specified, quat otherwise\n   */\n\n\n  quat4.conjugate = function (quat, dest) {\n    if (!dest || quat === dest) {\n      quat[0] *= -1;\n      quat[1] *= -1;\n      quat[2] *= -1;\n      return quat;\n    }\n\n    dest[0] = -quat[0];\n    dest[1] = -quat[1];\n    dest[2] = -quat[2];\n    dest[3] = quat[3];\n    return dest;\n  };\n  /**\n   * Calculates the length of a quat4\n   *\n   * Params:\n   * @param {quat4} quat quat4 to calculate length of\n   *\n   * @returns Length of quat\n   */\n\n\n  quat4.length = function (quat) {\n    var x = quat[0],\n        y = quat[1],\n        z = quat[2],\n        w = quat[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  };\n  /**\n   * Generates a unit quaternion of the same direction as the provided quat4\n   * If quaternion length is 0, returns [0, 0, 0, 0]\n   *\n   * @param {quat4} quat quat4 to normalize\n   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat\n   *\n   * @returns {quat4} dest if specified, quat otherwise\n   */\n\n\n  quat4.normalize = function (quat, dest) {\n    if (!dest) {\n      dest = quat;\n    }\n\n    var x = quat[0],\n        y = quat[1],\n        z = quat[2],\n        w = quat[3],\n        len = Math.sqrt(x * x + y * y + z * z + w * w);\n\n    if (len === 0) {\n      dest[0] = 0;\n      dest[1] = 0;\n      dest[2] = 0;\n      dest[3] = 0;\n      return dest;\n    }\n\n    len = 1 / len;\n    dest[0] = x * len;\n    dest[1] = y * len;\n    dest[2] = z * len;\n    dest[3] = w * len;\n    return dest;\n  };\n  /**\n   * Performs quaternion addition\n   *\n   * @param {quat4} quat First operand\n   * @param {quat4} quat2 Second operand\n   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat\n   *\n   * @returns {quat4} dest if specified, quat otherwise\n   */\n\n\n  quat4.add = function (quat, quat2, dest) {\n    if (!dest || quat === dest) {\n      quat[0] += quat2[0];\n      quat[1] += quat2[1];\n      quat[2] += quat2[2];\n      quat[3] += quat2[3];\n      return quat;\n    }\n\n    dest[0] = quat[0] + quat2[0];\n    dest[1] = quat[1] + quat2[1];\n    dest[2] = quat[2] + quat2[2];\n    dest[3] = quat[3] + quat2[3];\n    return dest;\n  };\n  /**\n   * Performs a quaternion multiplication\n   *\n   * @param {quat4} quat First operand\n   * @param {quat4} quat2 Second operand\n   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat\n   *\n   * @returns {quat4} dest if specified, quat otherwise\n   */\n\n\n  quat4.multiply = function (quat, quat2, dest) {\n    if (!dest) {\n      dest = quat;\n    }\n\n    var qax = quat[0],\n        qay = quat[1],\n        qaz = quat[2],\n        qaw = quat[3],\n        qbx = quat2[0],\n        qby = quat2[1],\n        qbz = quat2[2],\n        qbw = quat2[3];\n    dest[0] = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n    dest[1] = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n    dest[2] = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n    dest[3] = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n    return dest;\n  };\n  /**\n   * Transforms a vec3 with the given quaternion\n   *\n   * @param {quat4} quat quat4 to transform the vector with\n   * @param {vec3} vec vec3 to transform\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns dest if specified, vec otherwise\n   */\n\n\n  quat4.multiplyVec3 = function (quat, vec, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2],\n        qx = quat[0],\n        qy = quat[1],\n        qz = quat[2],\n        qw = quat[3],\n        // calculate quat * vec\n    ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n    dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return dest;\n  };\n  /**\n   * Multiplies the components of a quaternion by a scalar value\n   *\n   * @param {quat4} quat to scale\n   * @param {number} val Value to scale by\n   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat\n   *\n   * @returns {quat4} dest if specified, quat otherwise\n   */\n\n\n  quat4.scale = function (quat, val, dest) {\n    if (!dest || quat === dest) {\n      quat[0] *= val;\n      quat[1] *= val;\n      quat[2] *= val;\n      quat[3] *= val;\n      return quat;\n    }\n\n    dest[0] = quat[0] * val;\n    dest[1] = quat[1] * val;\n    dest[2] = quat[2] * val;\n    dest[3] = quat[3] * val;\n    return dest;\n  };\n  /**\n   * Calculates a 3x3 matrix from the given quat4\n   *\n   * @param {quat4} quat quat4 to create matrix from\n   * @param {mat3} [dest] mat3 receiving operation result\n   *\n   * @returns {mat3} dest if specified, a new mat3 otherwise\n   */\n\n\n  quat4.toMat3 = function (quat, dest) {\n    if (!dest) {\n      dest = mat3.create();\n    }\n\n    var x = quat[0],\n        y = quat[1],\n        z = quat[2],\n        w = quat[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n    dest[0] = 1 - (yy + zz);\n    dest[1] = xy + wz;\n    dest[2] = xz - wy;\n    dest[3] = xy - wz;\n    dest[4] = 1 - (xx + zz);\n    dest[5] = yz + wx;\n    dest[6] = xz + wy;\n    dest[7] = yz - wx;\n    dest[8] = 1 - (xx + yy);\n    return dest;\n  };\n  /**\n   * Calculates a 4x4 matrix from the given quat4\n   *\n   * @param {quat4} quat quat4 to create matrix from\n   * @param {mat4} [dest] mat4 receiving operation result\n   *\n   * @returns {mat4} dest if specified, a new mat4 otherwise\n   */\n\n\n  quat4.toMat4 = function (quat, dest) {\n    if (!dest) {\n      dest = mat4.create();\n    }\n\n    var x = quat[0],\n        y = quat[1],\n        z = quat[2],\n        w = quat[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n    dest[0] = 1 - (yy + zz);\n    dest[1] = xy + wz;\n    dest[2] = xz - wy;\n    dest[3] = 0;\n    dest[4] = xy - wz;\n    dest[5] = 1 - (xx + zz);\n    dest[6] = yz + wx;\n    dest[7] = 0;\n    dest[8] = xz + wy;\n    dest[9] = yz - wx;\n    dest[10] = 1 - (xx + yy);\n    dest[11] = 0;\n    dest[12] = 0;\n    dest[13] = 0;\n    dest[14] = 0;\n    dest[15] = 1;\n    return dest;\n  };\n  /**\n   * Performs a spherical linear interpolation between two quat4\n   *\n   * @param {quat4} quat First quaternion\n   * @param {quat4} quat2 Second quaternion\n   * @param {number} slerp Interpolation amount between the two inputs\n   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat\n   *\n   * @returns {quat4} dest if specified, quat otherwise\n   */\n\n\n  quat4.slerp = function (quat, quat2, slerp, dest) {\n    if (!dest) {\n      dest = quat;\n    }\n\n    var cosHalfTheta = quat[0] * quat2[0] + quat[1] * quat2[1] + quat[2] * quat2[2] + quat[3] * quat2[3],\n        halfTheta,\n        sinHalfTheta,\n        ratioA,\n        ratioB;\n\n    if (Math.abs(cosHalfTheta) >= 1.0) {\n      if (dest !== quat) {\n        dest[0] = quat[0];\n        dest[1] = quat[1];\n        dest[2] = quat[2];\n        dest[3] = quat[3];\n      }\n\n      return dest;\n    }\n\n    halfTheta = Math.acos(cosHalfTheta);\n    sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);\n\n    if (Math.abs(sinHalfTheta) < 0.001) {\n      dest[0] = quat[0] * 0.5 + quat2[0] * 0.5;\n      dest[1] = quat[1] * 0.5 + quat2[1] * 0.5;\n      dest[2] = quat[2] * 0.5 + quat2[2] * 0.5;\n      dest[3] = quat[3] * 0.5 + quat2[3] * 0.5;\n      return dest;\n    }\n\n    ratioA = Math.sin((1 - slerp) * halfTheta) / sinHalfTheta;\n    ratioB = Math.sin(slerp * halfTheta) / sinHalfTheta;\n    dest[0] = quat[0] * ratioA + quat2[0] * ratioB;\n    dest[1] = quat[1] * ratioA + quat2[1] * ratioB;\n    dest[2] = quat[2] * ratioA + quat2[2] * ratioB;\n    dest[3] = quat[3] * ratioA + quat2[3] * ratioB;\n    return dest;\n  };\n  /**\n   * Creates a quaternion from the given 3x3 rotation matrix.\n   * If dest is omitted, a new quaternion will be created.\n   *\n   * @param {mat3}  mat    the rotation matrix\n   * @param {quat4} [dest] an optional receiving quaternion\n   *\n   * @returns {quat4} the quaternion constructed from the rotation matrix\n   *\n   */\n\n\n  quat4.fromRotationMatrix = function (mat, dest) {\n    if (!dest) dest = quat4.create(); // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n\n    var fTrace = mat[0] + mat[4] + mat[8];\n    var fRoot;\n\n    if (fTrace > 0.0) {\n      // |w| > 1/2, may as well choose w > 1/2\n      fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n      dest[3] = 0.5 * fRoot;\n      fRoot = 0.5 / fRoot; // 1/(4w)\n\n      dest[0] = (mat[7] - mat[5]) * fRoot;\n      dest[1] = (mat[2] - mat[6]) * fRoot;\n      dest[2] = (mat[3] - mat[1]) * fRoot;\n    } else {\n      // |w| <= 1/2\n      var s_iNext = quat4.fromRotationMatrix.s_iNext = quat4.fromRotationMatrix.s_iNext || [1, 2, 0];\n      var i = 0;\n      if (mat[4] > mat[0]) i = 1;\n      if (mat[8] > mat[i * 3 + i]) i = 2;\n      var j = s_iNext[i];\n      var k = s_iNext[j];\n      fRoot = Math.sqrt(mat[i * 3 + i] - mat[j * 3 + j] - mat[k * 3 + k] + 1.0);\n      dest[i] = 0.5 * fRoot;\n      fRoot = 0.5 / fRoot;\n      dest[3] = (mat[k * 3 + j] - mat[j * 3 + k]) * fRoot;\n      dest[j] = (mat[j * 3 + i] + mat[i * 3 + j]) * fRoot;\n      dest[k] = (mat[k * 3 + i] + mat[i * 3 + k]) * fRoot;\n    }\n\n    return dest;\n  };\n  /**\n   * Alias. See the description for quat4.fromRotationMatrix().\n   */\n\n\n  mat3.toQuat4 = quat4.fromRotationMatrix;\n\n  (function () {\n    var mat = mat3.create();\n    /**\n     * Creates a quaternion from the 3 given vectors. They must be perpendicular\n     * to one another and represent the X, Y and Z axes.\n     *\n     * If dest is omitted, a new quat4 will be created.\n     *\n     * Example: The default OpenGL orientation has a view vector [0, 0, -1],\n     * right vector [1, 0, 0], and up vector [0, 1, 0]. A quaternion representing\n     * this orientation could be constructed with:\n     *\n     *   quat = quat4.fromAxes([0, 0, -1], [1, 0, 0], [0, 1, 0], quat4.create());\n     *\n     * @param {vec3}  view   the view vector, or direction the object is pointing in\n     * @param {vec3}  right  the right vector, or direction to the \"right\" of the object\n     * @param {vec3}  up     the up vector, or direction towards the object's \"up\"\n     * @param {quat4} [dest] an optional receiving quat4\n     *\n     * @returns {quat4} dest\n     **/\n\n    quat4.fromAxes = function (view, right, up, dest) {\n      mat[0] = right[0];\n      mat[3] = right[1];\n      mat[6] = right[2];\n      mat[1] = up[0];\n      mat[4] = up[1];\n      mat[7] = up[2];\n      mat[2] = view[0];\n      mat[5] = view[1];\n      mat[8] = view[2];\n      return quat4.fromRotationMatrix(mat, dest);\n    };\n  })();\n  /**\n   * Sets a quat4 to the Identity and returns it.\n   *\n   * @param {quat4} [dest] quat4 to set. If omitted, a\n   * new quat4 will be created.\n   *\n   * @returns {quat4} dest\n   */\n\n\n  quat4.identity = function (dest) {\n    if (!dest) dest = quat4.create();\n    dest[0] = 0;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 1;\n    return dest;\n  };\n  /**\n   * Sets a quat4 from the given angle and rotation axis,\n   * then returns it. If dest is not given, a new quat4 is created.\n   *\n   * @param {Number} angle  the angle in radians\n   * @param {vec3}   axis   the axis around which to rotate\n   * @param {quat4}  [dest] the optional quat4 to store the result\n   *\n   * @returns {quat4} dest\n   **/\n\n\n  quat4.fromAngleAxis = function (angle, axis, dest) {\n    // The quaternion representing the rotation is\n    //   q = cos(A/2)+sin(A/2)*(x*i+y*j+z*k)\n    if (!dest) dest = quat4.create();\n    var half = angle * 0.5;\n    var s = Math.sin(half);\n    dest[3] = Math.cos(half);\n    dest[0] = s * axis[0];\n    dest[1] = s * axis[1];\n    dest[2] = s * axis[2];\n    return dest;\n  };\n  /**\n   * Stores the angle and axis in a vec4, where the XYZ components represent\n   * the axis and the W (4th) component is the angle in radians.\n   *\n   * If dest is not given, src will be modified in place and returned, after\n   * which it should not be considered not a quaternion (just an axis and angle).\n   *\n   * @param {quat4} quat   the quaternion whose angle and axis to store\n   * @param {vec4}  [dest] the optional vec4 to receive the data\n   *\n   * @returns {vec4} dest\n   */\n\n\n  quat4.toAngleAxis = function (src, dest) {\n    if (!dest) dest = src; // The quaternion representing the rotation is\n    //   q = cos(A/2)+sin(A/2)*(x*i+y*j+z*k)\n\n    var sqrlen = src[0] * src[0] + src[1] * src[1] + src[2] * src[2];\n\n    if (sqrlen > 0) {\n      dest[3] = 2 * Math.acos(src[3]);\n      var invlen = glMath.invsqrt(sqrlen);\n      dest[0] = src[0] * invlen;\n      dest[1] = src[1] * invlen;\n      dest[2] = src[2] * invlen;\n    } else {\n      // angle is 0 (mod 2*pi), so any axis will do\n      dest[3] = 0;\n      dest[0] = 1;\n      dest[1] = 0;\n      dest[2] = 0;\n    }\n\n    return dest;\n  };\n  /**\n   * Returns a string representation of a quaternion\n   *\n   * @param {quat4} quat quat4 to represent as a string\n   *\n   * @returns {string} String representation of quat\n   */\n\n\n  quat4.str = function (quat) {\n    return '[' + quat[0] + ', ' + quat[1] + ', ' + quat[2] + ', ' + quat[3] + ']';\n  };\n  /**\n   * @class 2 Dimensional Vector\n   * @name vec2\n   */\n\n\n  var vec2 = {};\n  /**\n   * Creates a new vec2, initializing it from vec if vec\n   * is given.\n   *\n   * @param {vec2} [vec] the vector's initial contents\n   * @returns {vec2} a new 2D vector\n   */\n\n  vec2.create = function (vec) {\n    var dest = new MatrixArray(2);\n\n    if (vec) {\n      dest[0] = vec[0];\n      dest[1] = vec[1];\n    } else {\n      dest[0] = 0;\n      dest[1] = 0;\n    }\n\n    return dest;\n  };\n  /**\n   * Creates a new instance of a vec2, initializing it with the given arguments\n   *\n   * @param {number} x X value\n   * @param {number} y Y value\n    * @returns {vec2} New vec2\n   */\n\n\n  vec2.createFrom = function (x, y) {\n    var dest = new MatrixArray(2);\n    dest[0] = x;\n    dest[1] = y;\n    return dest;\n  };\n  /**\n   * Adds the vec2's together. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecB.\n   *\n   * @param {vec2} vecA the first operand\n   * @param {vec2} vecB the second operand\n   * @param {vec2} [dest] the optional receiving vector\n   * @returns {vec2} dest\n   */\n\n\n  vec2.add = function (vecA, vecB, dest) {\n    if (!dest) dest = vecB;\n    dest[0] = vecA[0] + vecB[0];\n    dest[1] = vecA[1] + vecB[1];\n    return dest;\n  };\n  /**\n   * Subtracts vecB from vecA. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecB.\n   *\n   * @param {vec2} vecA the first operand\n   * @param {vec2} vecB the second operand\n   * @param {vec2} [dest] the optional receiving vector\n   * @returns {vec2} dest\n   */\n\n\n  vec2.subtract = function (vecA, vecB, dest) {\n    if (!dest) dest = vecB;\n    dest[0] = vecA[0] - vecB[0];\n    dest[1] = vecA[1] - vecB[1];\n    return dest;\n  };\n  /**\n   * Multiplies vecA with vecB. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecB.\n   *\n   * @param {vec2} vecA the first operand\n   * @param {vec2} vecB the second operand\n   * @param {vec2} [dest] the optional receiving vector\n   * @returns {vec2} dest\n   */\n\n\n  vec2.multiply = function (vecA, vecB, dest) {\n    if (!dest) dest = vecB;\n    dest[0] = vecA[0] * vecB[0];\n    dest[1] = vecA[1] * vecB[1];\n    return dest;\n  };\n  /**\n   * Divides vecA by vecB. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecB.\n   *\n   * @param {vec2} vecA the first operand\n   * @param {vec2} vecB the second operand\n   * @param {vec2} [dest] the optional receiving vector\n   * @returns {vec2} dest\n   */\n\n\n  vec2.divide = function (vecA, vecB, dest) {\n    if (!dest) dest = vecB;\n    dest[0] = vecA[0] / vecB[0];\n    dest[1] = vecA[1] / vecB[1];\n    return dest;\n  };\n  /**\n   * Scales vecA by some scalar number. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecA.\n   *\n   * This is the same as multiplying each component of vecA\n   * by the given scalar.\n   *\n   * @param {vec2}   vecA the vector to be scaled\n   * @param {Number} scalar the amount to scale the vector by\n   * @param {vec2}   [dest] the optional receiving vector\n   * @returns {vec2} dest\n   */\n\n\n  vec2.scale = function (vecA, scalar, dest) {\n    if (!dest) dest = vecA;\n    dest[0] = vecA[0] * scalar;\n    dest[1] = vecA[1] * scalar;\n    return dest;\n  };\n  /**\n   * Calculates the euclidian distance between two vec2\n   *\n   * Params:\n   * @param {vec2} vecA First vector\n   * @param {vec2} vecB Second vector\n   *\n   * @returns {number} Distance between vecA and vecB\n   */\n\n\n  vec2.dist = function (vecA, vecB) {\n    var x = vecB[0] - vecA[0],\n        y = vecB[1] - vecA[1];\n    return Math.sqrt(x * x + y * y);\n  };\n  /**\n   * Copies the values of one vec2 to another\n   *\n   * @param {vec2} vec vec2 containing values to copy\n   * @param {vec2} dest vec2 receiving copied values\n   *\n   * @returns {vec2} dest\n   */\n\n\n  vec2.set = function (vec, dest) {\n    dest[0] = vec[0];\n    dest[1] = vec[1];\n    return dest;\n  };\n  /**\n   * Compares two vectors for equality within a certain margin of error\n   *\n   * @param {vec2} a First vector\n   * @param {vec2} b Second vector\n   *\n   * @returns {Boolean} True if a is equivalent to b\n   */\n\n\n  vec2.equal = function (a, b) {\n    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON;\n  };\n  /**\n   * Negates the components of a vec2\n   *\n   * @param {vec2} vec vec2 to negate\n   * @param {vec2} [dest] vec2 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec2} dest if specified, vec otherwise\n   */\n\n\n  vec2.negate = function (vec, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    dest[0] = -vec[0];\n    dest[1] = -vec[1];\n    return dest;\n  };\n  /**\n   * Normlize a vec2\n   *\n   * @param {vec2} vec vec2 to normalize\n   * @param {vec2} [dest] vec2 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec2} dest if specified, vec otherwise\n   */\n\n\n  vec2.normalize = function (vec, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    var mag = vec[0] * vec[0] + vec[1] * vec[1];\n\n    if (mag > 0) {\n      mag = Math.sqrt(mag);\n      dest[0] = vec[0] / mag;\n      dest[1] = vec[1] / mag;\n    } else {\n      dest[0] = dest[1] = 0;\n    }\n\n    return dest;\n  };\n  /**\n   * Computes the cross product of two vec2's. Note that the cross product must by definition\n   * produce a 3D vector. If a dest vector is given, it will contain the resultant 3D vector.\n   * Otherwise, a scalar number will be returned, representing the vector's Z coordinate, since\n   * its X and Y must always equal 0.\n   *\n   * Examples:\n   *    var crossResult = vec3.create();\n   *    vec2.cross([1, 2], [3, 4], crossResult);\n   *    //=> [0, 0, -2]\n   *\n   *    vec2.cross([1, 2], [3, 4]);\n   *    //=> -2\n   *\n   * See http://stackoverflow.com/questions/243945/calculating-a-2d-vectors-cross-product\n   * for some interesting facts.\n   *\n   * @param {vec2} vecA left operand\n   * @param {vec2} vecB right operand\n   * @param {vec2} [dest] optional vec2 receiving result. If not specified a scalar is returned\n   *\n   */\n\n\n  vec2.cross = function (vecA, vecB, dest) {\n    var z = vecA[0] * vecB[1] - vecA[1] * vecB[0];\n    if (!dest) return z;\n    dest[0] = dest[1] = 0;\n    dest[2] = z;\n    return dest;\n  };\n  /**\n   * Caclulates the length of a vec2\n   *\n   * @param {vec2} vec vec2 to calculate length of\n   *\n   * @returns {Number} Length of vec\n   */\n\n\n  vec2.length = function (vec) {\n    var x = vec[0],\n        y = vec[1];\n    return Math.sqrt(x * x + y * y);\n  };\n  /**\n   * Caclulates the squared length of a vec2\n   *\n   * @param {vec2} vec vec2 to calculate squared length of\n   *\n   * @returns {Number} Squared Length of vec\n   */\n\n\n  vec2.squaredLength = function (vec) {\n    var x = vec[0],\n        y = vec[1];\n    return x * x + y * y;\n  };\n  /**\n   * Caclulates the dot product of two vec2s\n   *\n   * @param {vec2} vecA First operand\n   * @param {vec2} vecB Second operand\n   *\n   * @returns {Number} Dot product of vecA and vecB\n   */\n\n\n  vec2.dot = function (vecA, vecB) {\n    return vecA[0] * vecB[0] + vecA[1] * vecB[1];\n  };\n  /**\n   * Generates a 2D unit vector pointing from one vector to another\n   *\n   * @param {vec2} vecA Origin vec2\n   * @param {vec2} vecB vec2 to point to\n   * @param {vec2} [dest] vec2 receiving operation result. If not specified result is written to vecA\n   *\n   * @returns {vec2} dest if specified, vecA otherwise\n   */\n\n\n  vec2.direction = function (vecA, vecB, dest) {\n    if (!dest) {\n      dest = vecA;\n    }\n\n    var x = vecA[0] - vecB[0],\n        y = vecA[1] - vecB[1],\n        len = x * x + y * y;\n\n    if (!len) {\n      dest[0] = 0;\n      dest[1] = 0;\n      dest[2] = 0;\n      return dest;\n    }\n\n    len = 1 / Math.sqrt(len);\n    dest[0] = x * len;\n    dest[1] = y * len;\n    return dest;\n  };\n  /**\n   * Performs a linear interpolation between two vec2\n   *\n   * @param {vec2} vecA First vector\n   * @param {vec2} vecB Second vector\n   * @param {Number} lerp Interpolation amount between the two inputs\n   * @param {vec2} [dest] vec2 receiving operation result. If not specified result is written to vecA\n   *\n   * @returns {vec2} dest if specified, vecA otherwise\n   */\n\n\n  vec2.lerp = function (vecA, vecB, lerp, dest) {\n    if (!dest) {\n      dest = vecA;\n    }\n\n    dest[0] = vecA[0] + lerp * (vecB[0] - vecA[0]);\n    dest[1] = vecA[1] + lerp * (vecB[1] - vecA[1]);\n    return dest;\n  };\n  /**\n   * Returns a string representation of a vector\n   *\n   * @param {vec2} vec Vector to represent as a string\n   *\n   * @returns {String} String representation of vec\n   */\n\n\n  vec2.str = function (vec) {\n    return '[' + vec[0] + ', ' + vec[1] + ']';\n  };\n  /**\n   * @class 2x2 Matrix\n   * @name mat2\n   */\n\n\n  var mat2 = {};\n  /**\n   * Creates a new 2x2 matrix. If src is given, the new matrix\n   * is initialized to those values.\n   *\n   * @param {mat2} [src] the seed values for the new matrix, if any\n   * @returns {mat2} a new matrix\n   */\n\n  mat2.create = function (src) {\n    var dest = new MatrixArray(4);\n\n    if (src) {\n      dest[0] = src[0];\n      dest[1] = src[1];\n      dest[2] = src[2];\n      dest[3] = src[3];\n    } else {\n      dest[0] = dest[1] = dest[2] = dest[3] = 0;\n    }\n\n    return dest;\n  };\n  /**\n   * Creates a new instance of a mat2, initializing it with the given arguments\n   *\n   * @param {number} m00\n   * @param {number} m01\n   * @param {number} m10\n   * @param {number} m11\n    * @returns {mat2} New mat2\n   */\n\n\n  mat2.createFrom = function (m00, m01, m10, m11) {\n    var dest = new MatrixArray(4);\n    dest[0] = m00;\n    dest[1] = m01;\n    dest[2] = m10;\n    dest[3] = m11;\n    return dest;\n  };\n  /**\n   * Copies the values of one mat2 to another\n   *\n   * @param {mat2} mat mat2 containing values to copy\n   * @param {mat2} dest mat2 receiving copied values\n   *\n   * @returns {mat2} dest\n   */\n\n\n  mat2.set = function (mat, dest) {\n    dest[0] = mat[0];\n    dest[1] = mat[1];\n    dest[2] = mat[2];\n    dest[3] = mat[3];\n    return dest;\n  };\n  /**\n   * Compares two matrices for equality within a certain margin of error\n   *\n   * @param {mat2} a First matrix\n   * @param {mat2} b Second matrix\n   *\n   * @returns {Boolean} True if a is equivalent to b\n   */\n\n\n  mat2.equal = function (a, b) {\n    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON && Math.abs(a[3] - b[3]) < FLOAT_EPSILON;\n  };\n  /**\n   * Sets a mat2 to an identity matrix\n   *\n   * @param {mat2} [dest] mat2 to set. If omitted a new one will be created.\n   *\n   * @returns {mat2} dest\n   */\n\n\n  mat2.identity = function (dest) {\n    if (!dest) {\n      dest = mat2.create();\n    }\n\n    dest[0] = 1;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 1;\n    return dest;\n  };\n  /**\n   * Transposes a mat2 (flips the values over the diagonal)\n   *\n   * @param {mat2} mat mat2 to transpose\n   * @param {mat2} [dest] mat2 receiving transposed values. If not specified result is written to mat\n   *\n   * @param {mat2} dest if specified, mat otherwise\n   */\n\n\n  mat2.transpose = function (mat, dest) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (!dest || mat === dest) {\n      var a00 = mat[1];\n      mat[1] = mat[2];\n      mat[2] = a00;\n      return mat;\n    }\n\n    dest[0] = mat[0];\n    dest[1] = mat[2];\n    dest[2] = mat[1];\n    dest[3] = mat[3];\n    return dest;\n  };\n  /**\n   * Calculates the determinant of a mat2\n   *\n   * @param {mat2} mat mat2 to calculate determinant of\n   *\n   * @returns {Number} determinant of mat\n   */\n\n\n  mat2.determinant = function (mat) {\n    return mat[0] * mat[3] - mat[2] * mat[1];\n  };\n  /**\n   * Calculates the inverse matrix of a mat2\n   *\n   * @param {mat2} mat mat2 to calculate inverse of\n   * @param {mat2} [dest] mat2 receiving inverse matrix. If not specified result is written to mat\n   *\n   * @param {mat2} dest is specified, mat otherwise, null if matrix cannot be inverted\n   */\n\n\n  mat2.inverse = function (mat, dest) {\n    if (!dest) {\n      dest = mat;\n    }\n\n    var a0 = mat[0],\n        a1 = mat[1],\n        a2 = mat[2],\n        a3 = mat[3];\n    var det = a0 * a3 - a2 * a1;\n    if (!det) return null;\n    det = 1.0 / det;\n    dest[0] = a3 * det;\n    dest[1] = -a1 * det;\n    dest[2] = -a2 * det;\n    dest[3] = a0 * det;\n    return dest;\n  };\n  /**\n   * Performs a matrix multiplication\n   *\n   * @param {mat2} matA First operand\n   * @param {mat2} matB Second operand\n   * @param {mat2} [dest] mat2 receiving operation result. If not specified result is written to matA\n   *\n   * @returns {mat2} dest if specified, matA otherwise\n   */\n\n\n  mat2.multiply = function (matA, matB, dest) {\n    if (!dest) {\n      dest = matA;\n    }\n\n    var a11 = matA[0],\n        a12 = matA[1],\n        a21 = matA[2],\n        a22 = matA[3];\n    dest[0] = a11 * matB[0] + a12 * matB[2];\n    dest[1] = a11 * matB[1] + a12 * matB[3];\n    dest[2] = a21 * matB[0] + a22 * matB[2];\n    dest[3] = a21 * matB[1] + a22 * matB[3];\n    return dest;\n  };\n  /**\n   * Rotates a 2x2 matrix by an angle\n   *\n   * @param {mat2}   mat   The matrix to rotate\n   * @param {Number} angle The angle in radians\n   * @param {mat2} [dest]  Optional mat2 receiving the result. If omitted mat will be used.\n   *\n   * @returns {mat2} dest if specified, mat otherwise\n   */\n\n\n  mat2.rotate = function (mat, angle, dest) {\n    if (!dest) {\n      dest = mat;\n    }\n\n    var a11 = mat[0],\n        a12 = mat[1],\n        a21 = mat[2],\n        a22 = mat[3],\n        s = Math.sin(angle),\n        c = Math.cos(angle);\n    dest[0] = a11 * c + a12 * s;\n    dest[1] = a11 * -s + a12 * c;\n    dest[2] = a21 * c + a22 * s;\n    dest[3] = a21 * -s + a22 * c;\n    return dest;\n  };\n  /**\n   * Multiplies the vec2 by the given 2x2 matrix\n   *\n   * @param {mat2} matrix the 2x2 matrix to multiply against\n   * @param {vec2} vec    the vector to multiply\n   * @param {vec2} [dest] an optional receiving vector. If not given, vec is used.\n   *\n   * @returns {vec2} The multiplication result\n   **/\n\n\n  mat2.multiplyVec2 = function (matrix, vec, dest) {\n    if (!dest) dest = vec;\n    var x = vec[0],\n        y = vec[1];\n    dest[0] = x * matrix[0] + y * matrix[1];\n    dest[1] = x * matrix[2] + y * matrix[3];\n    return dest;\n  };\n  /**\n   * Scales the mat2 by the dimensions in the given vec2\n   *\n   * @param {mat2} matrix the 2x2 matrix to scale\n   * @param {vec2} vec    the vector containing the dimensions to scale by\n   * @param {vec2} [dest] an optional receiving mat2. If not given, matrix is used.\n   *\n   * @returns {mat2} dest if specified, matrix otherwise\n   **/\n\n\n  mat2.scale = function (matrix, vec, dest) {\n    if (!dest) {\n      dest = matrix;\n    }\n\n    var a11 = matrix[0],\n        a12 = matrix[1],\n        a21 = matrix[2],\n        a22 = matrix[3],\n        b11 = vec[0],\n        b22 = vec[1];\n    dest[0] = a11 * b11;\n    dest[1] = a12 * b22;\n    dest[2] = a21 * b11;\n    dest[3] = a22 * b22;\n    return dest;\n  };\n  /**\n   * Returns a string representation of a mat2\n   *\n   * @param {mat2} mat mat2 to represent as a string\n   *\n   * @param {String} String representation of mat\n   */\n\n\n  mat2.str = function (mat) {\n    return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] + ']';\n  };\n  /**\n   * @class 4 Dimensional Vector\n   * @name vec4\n   */\n\n\n  var vec4 = {};\n  /**\n   * Creates a new vec4, initializing it from vec if vec\n   * is given.\n   *\n   * @param {vec4} [vec] the vector's initial contents\n   * @returns {vec4} a new 2D vector\n   */\n\n  vec4.create = function (vec) {\n    var dest = new MatrixArray(4);\n\n    if (vec) {\n      dest[0] = vec[0];\n      dest[1] = vec[1];\n      dest[2] = vec[2];\n      dest[3] = vec[3];\n    } else {\n      dest[0] = 0;\n      dest[1] = 0;\n      dest[2] = 0;\n      dest[3] = 0;\n    }\n\n    return dest;\n  };\n  /**\n   * Creates a new instance of a vec4, initializing it with the given arguments\n   *\n   * @param {number} x X value\n   * @param {number} y Y value\n   * @param {number} z Z value\n   * @param {number} w W value\n    * @returns {vec4} New vec4\n   */\n\n\n  vec4.createFrom = function (x, y, z, w) {\n    var dest = new MatrixArray(4);\n    dest[0] = x;\n    dest[1] = y;\n    dest[2] = z;\n    dest[3] = w;\n    return dest;\n  };\n  /**\n   * Adds the vec4's together. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecB.\n   *\n   * @param {vec4} vecA the first operand\n   * @param {vec4} vecB the second operand\n   * @param {vec4} [dest] the optional receiving vector\n   * @returns {vec4} dest\n   */\n\n\n  vec4.add = function (vecA, vecB, dest) {\n    if (!dest) dest = vecB;\n    dest[0] = vecA[0] + vecB[0];\n    dest[1] = vecA[1] + vecB[1];\n    dest[2] = vecA[2] + vecB[2];\n    dest[3] = vecA[3] + vecB[3];\n    return dest;\n  };\n  /**\n   * Subtracts vecB from vecA. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecB.\n   *\n   * @param {vec4} vecA the first operand\n   * @param {vec4} vecB the second operand\n   * @param {vec4} [dest] the optional receiving vector\n   * @returns {vec4} dest\n   */\n\n\n  vec4.subtract = function (vecA, vecB, dest) {\n    if (!dest) dest = vecB;\n    dest[0] = vecA[0] - vecB[0];\n    dest[1] = vecA[1] - vecB[1];\n    dest[2] = vecA[2] - vecB[2];\n    dest[3] = vecA[3] - vecB[3];\n    return dest;\n  };\n  /**\n   * Multiplies vecA with vecB. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecB.\n   *\n   * @param {vec4} vecA the first operand\n   * @param {vec4} vecB the second operand\n   * @param {vec4} [dest] the optional receiving vector\n   * @returns {vec4} dest\n   */\n\n\n  vec4.multiply = function (vecA, vecB, dest) {\n    if (!dest) dest = vecB;\n    dest[0] = vecA[0] * vecB[0];\n    dest[1] = vecA[1] * vecB[1];\n    dest[2] = vecA[2] * vecB[2];\n    dest[3] = vecA[3] * vecB[3];\n    return dest;\n  };\n  /**\n   * Divides vecA by vecB. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecB.\n   *\n   * @param {vec4} vecA the first operand\n   * @param {vec4} vecB the second operand\n   * @param {vec4} [dest] the optional receiving vector\n   * @returns {vec4} dest\n   */\n\n\n  vec4.divide = function (vecA, vecB, dest) {\n    if (!dest) dest = vecB;\n    dest[0] = vecA[0] / vecB[0];\n    dest[1] = vecA[1] / vecB[1];\n    dest[2] = vecA[2] / vecB[2];\n    dest[3] = vecA[3] / vecB[3];\n    return dest;\n  };\n  /**\n   * Scales vecA by some scalar number. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecA.\n   *\n   * This is the same as multiplying each component of vecA\n   * by the given scalar.\n   *\n   * @param {vec4}   vecA the vector to be scaled\n   * @param {Number} scalar the amount to scale the vector by\n   * @param {vec4}   [dest] the optional receiving vector\n   * @returns {vec4} dest\n   */\n\n\n  vec4.scale = function (vecA, scalar, dest) {\n    if (!dest) dest = vecA;\n    dest[0] = vecA[0] * scalar;\n    dest[1] = vecA[1] * scalar;\n    dest[2] = vecA[2] * scalar;\n    dest[3] = vecA[3] * scalar;\n    return dest;\n  };\n  /**\n   * Copies the values of one vec4 to another\n   *\n   * @param {vec4} vec vec4 containing values to copy\n   * @param {vec4} dest vec4 receiving copied values\n   *\n   * @returns {vec4} dest\n   */\n\n\n  vec4.set = function (vec, dest) {\n    dest[0] = vec[0];\n    dest[1] = vec[1];\n    dest[2] = vec[2];\n    dest[3] = vec[3];\n    return dest;\n  };\n  /**\n   * Compares two vectors for equality within a certain margin of error\n   *\n   * @param {vec4} a First vector\n   * @param {vec4} b Second vector\n   *\n   * @returns {Boolean} True if a is equivalent to b\n   */\n\n\n  vec4.equal = function (a, b) {\n    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON && Math.abs(a[3] - b[3]) < FLOAT_EPSILON;\n  };\n  /**\n   * Negates the components of a vec4\n   *\n   * @param {vec4} vec vec4 to negate\n   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec4} dest if specified, vec otherwise\n   */\n\n\n  vec4.negate = function (vec, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    dest[0] = -vec[0];\n    dest[1] = -vec[1];\n    dest[2] = -vec[2];\n    dest[3] = -vec[3];\n    return dest;\n  };\n  /**\n   * Caclulates the length of a vec2\n   *\n   * @param {vec2} vec vec2 to calculate length of\n   *\n   * @returns {Number} Length of vec\n   */\n\n\n  vec4.length = function (vec) {\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2],\n        w = vec[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  };\n  /**\n   * Caclulates the squared length of a vec4\n   *\n   * @param {vec4} vec vec4 to calculate squared length of\n   *\n   * @returns {Number} Squared Length of vec\n   */\n\n\n  vec4.squaredLength = function (vec) {\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2],\n        w = vec[3];\n    return x * x + y * y + z * z + w * w;\n  };\n  /**\n   * Performs a linear interpolation between two vec4\n   *\n   * @param {vec4} vecA First vector\n   * @param {vec4} vecB Second vector\n   * @param {Number} lerp Interpolation amount between the two inputs\n   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vecA\n   *\n   * @returns {vec4} dest if specified, vecA otherwise\n   */\n\n\n  vec4.lerp = function (vecA, vecB, lerp, dest) {\n    if (!dest) {\n      dest = vecA;\n    }\n\n    dest[0] = vecA[0] + lerp * (vecB[0] - vecA[0]);\n    dest[1] = vecA[1] + lerp * (vecB[1] - vecA[1]);\n    dest[2] = vecA[2] + lerp * (vecB[2] - vecA[2]);\n    dest[3] = vecA[3] + lerp * (vecB[3] - vecA[3]);\n    return dest;\n  };\n  /**\n   * Returns a string representation of a vector\n   *\n   * @param {vec4} vec Vector to represent as a string\n   *\n   * @returns {String} String representation of vec\n   */\n\n\n  vec4.str = function (vec) {\n    return '[' + vec[0] + ', ' + vec[1] + ', ' + vec[2] + ', ' + vec[3] + ']';\n  };\n  /*\n   * Exports\n   */\n\n\n  if (root) {\n    root.glMatrixArrayType = MatrixArray;\n    root.MatrixArray = MatrixArray;\n    root.setMatrixArrayType = setMatrixArrayType;\n    root.determineMatrixArrayType = determineMatrixArrayType;\n    root.glMath = glMath;\n    root.vec2 = vec2;\n    root.vec3 = vec3;\n    root.vec4 = vec4;\n    root.mat2 = mat2;\n    root.mat3 = mat3;\n    root.mat4 = mat4;\n    root.quat4 = quat4;\n  }\n\n  return {\n    glMatrixArrayType: MatrixArray,\n    MatrixArray: MatrixArray,\n    setMatrixArrayType: setMatrixArrayType,\n    determineMatrixArrayType: determineMatrixArrayType,\n    glMath: glMath,\n    vec2: vec2,\n    vec3: vec3,\n    vec4: vec4,\n    mat2: mat2,\n    mat3: mat3,\n    mat4: mat4,\n    quat4: quat4\n  };\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvbGliL2dsLW1hdHJpeC5qcz81YTA4Il0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImdsb2JhbCIsImRlZmluZSIsIkZMT0FUX0VQU0lMT04iLCJnbE1hdGgiLCJGbG9hdDMyQXJyYXkiLCJ5IiwiaSIsIkludDMyQXJyYXkiLCJidWZmZXIiLCJpbnZzcXJ0IiwibnVtYmVyIiwieDIiLCJ0aHJlZWhhbGZzIiwibnVtYmVyMiIsIk1hdGgiLCJzcXJ0IiwiTWF0cml4QXJyYXkiLCJzZXRNYXRyaXhBcnJheVR5cGUiLCJ0eXBlIiwiZGV0ZXJtaW5lTWF0cml4QXJyYXlUeXBlIiwiQXJyYXkiLCJ2ZWMzIiwiY3JlYXRlIiwidmVjIiwiZGVzdCIsImNyZWF0ZUZyb20iLCJ4IiwieiIsInNldCIsImVxdWFsIiwiYSIsImIiLCJhYnMiLCJhZGQiLCJ2ZWMyIiwic3VidHJhY3QiLCJtdWx0aXBseSIsIm5lZ2F0ZSIsInNjYWxlIiwidmFsIiwibm9ybWFsaXplIiwibGVuIiwiY3Jvc3MiLCJ5MiIsInoyIiwibGVuZ3RoIiwic3F1YXJlZExlbmd0aCIsImRvdCIsImRpcmVjdGlvbiIsImxlcnAiLCJkaXN0IiwidW5wcm9qZWN0TWF0IiwidW5wcm9qZWN0VmVjIiwidW5wcm9qZWN0IiwidmlldyIsInByb2oiLCJ2aWV3cG9ydCIsIm1hdDQiLCJtIiwidiIsImludmVyc2UiLCJtdWx0aXBseVZlYzQiLCJ4VW5pdFZlYzMiLCJ5VW5pdFZlYzMiLCJ6VW5pdFZlYzMiLCJ0bXB2ZWMzIiwicm90YXRpb25UbyIsInF1YXQ0IiwiZCIsImF4aXMiLCJpZGVudGl0eVF1YXQ0IiwiZnJvbUFuZ2xlQXhpcyIsIlBJIiwicyIsInNJbnYiLCJzdHIiLCJtYXQzIiwibWF0IiwibTAwIiwibTAxIiwibTAyIiwibTEwIiwibTExIiwibTEyIiwibTIwIiwibTIxIiwibTIyIiwiZGV0ZXJtaW5hbnQiLCJhMDAiLCJhMDEiLCJhMDIiLCJhMTAiLCJhMTEiLCJhMTIiLCJhMjAiLCJhMjEiLCJhMjIiLCJiMDEiLCJiMTEiLCJiMjEiLCJpZCIsIm1hdDIiLCJiMDAiLCJiMDIiLCJiMTAiLCJiMTIiLCJiMjAiLCJiMjIiLCJtdWx0aXBseVZlYzIiLCJtYXRyaXgiLCJtdWx0aXBseVZlYzMiLCJpZGVudGl0eSIsInRyYW5zcG9zZSIsInRvTWF0NCIsIm0wMyIsIm0xMyIsIm0yMyIsIm0zMCIsIm0zMSIsIm0zMiIsIm0zMyIsImEwMyIsImExMyIsImEyMyIsImEzMCIsImEzMSIsImEzMiIsImEzMyIsImIwMyIsImIwNCIsImIwNSIsImIwNiIsImIwNyIsImIwOCIsImIwOSIsImludkRldCIsInRvUm90YXRpb25NYXQiLCJ0b01hdDMiLCJ0b0ludmVyc2VNYXQzIiwiYjAiLCJiMSIsImIyIiwiYjMiLCJ3IiwidHJhbnNsYXRlIiwicm90YXRlIiwiYW5nbGUiLCJjIiwidCIsInNpbiIsImNvcyIsInJvdGF0ZVgiLCJyb3RhdGVZIiwicm90YXRlWiIsImZydXN0dW0iLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJ0b3AiLCJuZWFyIiwiZmFyIiwicmwiLCJ0YiIsImZuIiwicGVyc3BlY3RpdmUiLCJmb3Z5IiwiYXNwZWN0IiwidGFuIiwib3J0aG8iLCJsb29rQXQiLCJleWUiLCJjZW50ZXIiLCJ1cCIsIngwIiwieDEiLCJ5MCIsInkxIiwiejAiLCJ6MSIsImV5ZXgiLCJleWV5IiwiZXlleiIsInVweCIsInVweSIsInVweiIsImNlbnRlcngiLCJjZW50ZXJ5IiwiY2VudGVyeiIsImZyb21Sb3RhdGlvblRyYW5zbGF0aW9uIiwicXVhdCIsInh4IiwieHkiLCJ4eiIsInl5IiwieXoiLCJ6eiIsInd4Iiwid3kiLCJ3eiIsImNhbGN1bGF0ZVciLCJxdWF0MiIsInEwIiwicTEiLCJxMiIsInEzIiwiaW52RG90IiwiY29uanVnYXRlIiwicWF4IiwicWF5IiwicWF6IiwicWF3IiwicWJ4IiwicWJ5IiwicWJ6IiwicWJ3IiwicXgiLCJxeSIsInF6IiwicXciLCJpeCIsIml5IiwiaXoiLCJpdyIsInNsZXJwIiwiY29zSGFsZlRoZXRhIiwiaGFsZlRoZXRhIiwic2luSGFsZlRoZXRhIiwicmF0aW9BIiwicmF0aW9CIiwiYWNvcyIsImZyb21Sb3RhdGlvbk1hdHJpeCIsImZUcmFjZSIsImZSb290Iiwic19pTmV4dCIsImoiLCJrIiwidG9RdWF0NCIsImZyb21BeGVzIiwiaGFsZiIsInRvQW5nbGVBeGlzIiwic3JjIiwic3FybGVuIiwiaW52bGVuIiwidmVjQSIsInZlY0IiLCJkaXZpZGUiLCJzY2FsYXIiLCJtYWciLCJhMCIsImExIiwiYTIiLCJhMyIsImRldCIsIm1hdEEiLCJtYXRCIiwidmVjNCIsImdsTWF0cml4QXJyYXlUeXBlIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBT0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1QkE7QUFFQyxXQUFVQSxJQUFWLEVBQWdCQyxPQUFoQixFQUF5QjtBQUN4QixNQUFJLDhCQUFPQyxPQUFQLE9BQW1CLFFBQXZCLEVBQWlDO0FBQzdCO0FBQ0E7QUFDQTtBQUNBQyxVQUFNLENBQUNELE9BQVAsR0FBaUJELE9BQU8sQ0FBQ0csTUFBRCxDQUF4QjtBQUNILEdBTEQsTUFLTyxJQUFJLElBQUosRUFBZ0Q7QUFDbkQ7QUFDQUMscUNBQU8sRUFBRCxtQ0FBSyxZQUFZO0FBQ25CLGFBQU9KLE9BQU8sQ0FBQ0QsSUFBRCxDQUFkO0FBQ0gsS0FGSztBQUFBLG9HQUFOO0FBR0gsR0FMTSxNQUtBLEVBR047QUFDRixDQWZBLEVBZUMsSUFmRCxFQWVPLFVBQVVBLElBQVYsRUFBZ0I7QUFDdEIsZUFEc0IsQ0FHdEI7O0FBQ0EsTUFBSU0sYUFBYSxHQUFHLFFBQXBCO0FBRUEsTUFBSUMsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsR0FBQyxZQUFXO0FBQ1IsUUFBSSxPQUFPQyxZQUFQLElBQXdCLFdBQTVCLEVBQXlDO0FBQ3JDLFVBQUlDLENBQUMsR0FBRyxJQUFJRCxZQUFKLENBQWlCLENBQWpC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Q0FBRCxDQUFqQixJQUF3QjdCLGFBSHhCLElBSUFZLElBQUksQ0FBQ2tCLEdBQUwsQ0FBU0YsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFqQixJQUF3QjdCLGFBSnhCLElBS0FZLElBQUksQ0FBQ2tCLEdBQUwsQ0FBU0YsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFqQixJQUF3QjdCLGFBTHhCLElBTUFZLElBQUksQ0FBQ2tCLEdBQUwsQ0FBU0YsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFqQixJQUF3QjdCLGFBTnhCLElBT0FZLElBQUksQ0FBQ2tCLEdBQUwsQ0FBU0YsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFqQixJQUF3QjdCLGFBUHhCLElBUUFZLElBQUksQ0FBQ2tCLEdBQUwsQ0FBU0YsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFqQixJQUF3QjdCLGFBUnhCLElBU0FZLElBQUksQ0FBQ2tCLEdBQUwsQ0FBU0YsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFqQixJQUF3QjdCLGFBVHhCLElBVUFZLElBQUksQ0FBQ2tCLEdBQUwsQ0FBU0YsQ0FBQyxDQUFDLEVBQUQsQ0FBRCxHQUFRQyxDQUFDLENBQUMsRUFBRCxDQUFsQixJQUEwQjdCLGFBVjFCLElBV0FZLElBQUksQ0FBQ2tCLEdBQUwsQ0FBU0YsQ0FBQyxDQUFDLEVBQUQsQ0FBRCxHQUFRQyxDQUFDLENBQUMsRUFBRCxDQUFsQixJQUEwQjdCLGFBWDFCLElBWUFZLElBQUksQ0FBQ2tCLEdBQUwsQ0FBU0YsQ0FBQyxDQUFDLEVBQUQsQ0FBRCxHQUFRQyxDQUFDLENBQUMsRUFBRCxDQUFsQixJQUEwQjdCLGFBWjFCLElBYUFZLElBQUksQ0FBQ2tCLEdBQUwsQ0FBU0YsQ0FBQyxDQUFDLEVBQUQsQ0FBRCxHQUFRQyxDQUFDLENBQUMs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RUFBRCxDQUFILEdBQVU0QyxHQUFWO0FBQ0E1QyxTQUFHLENBQUMsRUFBRCxDQUFILEdBQVU2QyxHQUFWO0FBQ0E3QyxTQUFHLENBQUMsRUFBRCxDQUFILEdBQVU4QyxHQUFWO0FBQ0EsYUFBTzlDLEdBQVA7QUFDSDs7QUFFRHJELFFBQUksQ0FBQyxDQUFELENBQUosR0FBVXFELEdBQUcsQ0FBQyxDQUFELENBQWI7QUFDQXJELFFBQUksQ0FBQyxDQUFELENBQUosR0FBVXFELEdBQUcsQ0FBQyxDQUFELENBQWI7QUFDQXJELFFBQUksQ0FBQyxDQUFELENBQUosR0FBVXFELEdBQUcsQ0FBQyxDQUFELENBQWI7QUFDQXJELFFBQUksQ0FBQyxDQUFELENBQUosR0FBVXFELEdBQUcsQ0FBQyxFQUFELENBQWI7QUFDQXJELFFBQUksQ0FBQyxDQUFELENBQUosR0FBVXFELEdBQUcsQ0FBQyxDQUFELENBQWI7QUFDQXJELFFBQUksQ0FBQyxDQUFELENBQUosR0FBVXFELEdBQUcsQ0FBQyxDQUFELENBQWI7QUFDQXJELFFBQUksQ0FBQyxDQUFELENBQUosR0FBVXFELEdBQUcsQ0FBQyxDQUFELENBQWI7QUFDQXJELFFBQUksQ0FBQyxDQUFELENBQUosR0FBVXFELEdBQUcsQ0FBQyxFQUFELENBQWI7QUFDQXJELFFBQUksQ0FBQyxDQUFELENBQUosR0FBVXFELEdBQUcsQ0FBQyxDQUFELENBQWI7QUFDQXJELFFBQUksQ0FBQyxDQUFELENBQUosR0FBVXFELEdBQUcsQ0FBQyxDQUFELENBQWI7QUFDQXJELFFBQUksQ0FBQyxFQUFELENBQUosR0FBV3FELEdBQUcsQ0FBQyxFQUFELENBQWQ7QUFDQXJELFFBQUksQ0FBQyxFQUFELENBQUosR0FBV3FELEdBQUcsQ0FBQyxFQUFELENBQWQ7QUFDQXJELFFBQUksQ0FBQyxFQUFELENBQUosR0FBV3FELEdBQUcsQ0FBQyxDQUFELENBQWQ7QUFDQXJELFFBQUksQ0FBQyxFQUFELENBQUosR0FBV3FELEdBQUcsQ0FBQyxDQUFELENBQWQ7QUFDQXJELFFBQUksQ0FBQyxFQUFE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LEdBQVA7QUFjRCxDQS8xR0EsQ0FBRCxDIiwiZmlsZSI6Ii4vc3JjL0NoZW1Eb29kbGUvbGliL2dsLW1hdHJpeC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBnbC1tYXRyaXggLSBIaWdoIHBlcmZvcm1hbmNlIG1hdHJpeCBhbmQgdmVjdG9yIG9wZXJhdGlvbnMgZm9yIFdlYkdMXG4gKiBAYXV0aG9yIEJyYW5kb24gSm9uZXNcbiAqIEBhdXRob3IgQ29saW4gTWFjS2VuemllIElWXG4gKiBAdmVyc2lvbiAxLjMuN1xuICovXG5cbi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgQnJhbmRvbiBKb25lcywgQ29saW4gTWFjS2VuemllIElWXG4gKlxuICogVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbiAqIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuICogYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbiAqIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbiAqIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbiAqXG4gKiAgICAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuICogICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbiAqICAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuICogICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbiAqXG4gKiAgICAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdFxuICogICAgYmUgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuICpcbiAqICAgIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZVxuICogICAgZGlzdHJpYnV0aW9uLlxuICovXG5cbi8vIFVwZGF0ZWQgdG8gdXNlIGEgbW9kaWZpY2F0aW9uIG9mIHRoZSBcInJldHVybkV4cG9ydHNHbG9iYWxcIiBwYXR0ZXJuIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3VtZGpzL3VtZFxuXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jykge1xuICAgICAgLy8gTm9kZS4gRG9lcyBub3Qgd29yayB3aXRoIHN0cmljdCBDb21tb25KUywgYnV0XG4gICAgICAvLyBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbWVudHMgdGhhdCBzdXBwb3J0IG1vZHVsZS5leHBvcnRzLFxuICAgICAgLy8gbGlrZSBOb2RlLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KGdsb2JhbCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICBkZWZpbmUoW10sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gZmFjdG9yeShyb290KTtcbiAgICAgIH0pO1xuICB9IGVsc2Uge1xuICAgICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgICBmYWN0b3J5KHJvb3QpO1xuICB9XG59KHRoaXMsIGZ1bmN0aW9uIChyb290KSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIC8vIFR3ZWFrIHRvIHlvdXIgbGlraW5nXG4gIHZhciBGTE9BVF9FUFNJTE9OID0gMC4wMDAwMDE7XG5cbiAgdmFyIGdsTWF0aCA9IHt9O1xuICAoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodHlwZW9mKEZsb2F0MzJBcnJheSkgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB2YXIgeSA9IG5ldyBGbG9hdDMyQXJyYXkoMSk7XG4gICAgICAgICAgdmFyIGkgPSBuZXcgSW50MzJBcnJheSh5LmJ1ZmZlcik7XG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBGYXN0IHdheSB0byBjYWxjdWxhdGUgdGhlIGludmVyc2Ugc3F1YXJlIHJvb3QsXG4gICAgICAgICAgICogc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2ludmVyc2Utc3F1YXJlLXJvb3QvNVxuICAgICAgICAgICAqXG4gICAgICAgICAgICogSWYgdHlwZWQgYXJyYXlzIGFyZSBub3QgYXZhaWxhYmxlLCBhIHNsb3dlclxuICAgICAgICAgICAqIGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZC5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBwYXJhbSB7TnVtYmVyfSBudW1iZXIgdGhlIG51bWJlclxuICAgICAgICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IEludmVyc2Ugc3F1YXJlIHJvb3RcbiAgICAgICAgICAgKi9cbiAgICAgICAgICBnbE1hdGguaW52c3FydCA9IGZ1bmN0aW9uKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIHgyID0gbnVtYmVyICogMC41O1xuICAgICAgICAgICAgeVswXSA9IG51bWJlcjtcbiAgICAgICAgICAgIHZhciB0aHJlZWhhbGZzID0gMS41O1xuXG4gICAgICAgICAgICBpWzBdID0gMHg1ZjM3NTlkZiAtIChpWzBdID4+IDEpO1xuXG4gICAgICAgICAgICB2YXIgbnVtYmVyMiA9IHlbMF07XG5cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIyICogKHRocmVlaGFsZnMgLSAoeDIgKiBudW1iZXIyICogbnVtYmVyMikpO1xuICAgICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdsTWF0aC5pbnZzcXJ0ID0gZnVuY3Rpb24obnVtYmVyKSB7IHJldHVybiAxLjAgLyBNYXRoLnNxcnQobnVtYmVyKTsgfTtcbiAgICAgIH1cbiAgfSkoKTtcblxuICAvKipcbiAgICogQGNsYXNzIFN5c3RlbS1zcGVjaWZpYyBvcHRpbWFsIGFycmF5IHR5cGVcbiAgICogQG5hbWUgTWF0cml4QXJyYXlcbiAgICovXG4gIHZhciBNYXRyaXhBcnJheSA9IG51bGw7XG4gIFxuICAvLyBleHBsaWNpdGx5IHNldHMgYW5kIHJldHVybnMgdGhlIHR5cGUgb2YgYXJyYXkgdG8gdXNlIHdpdGhpbiBnbE1hdHJpeFxuICBmdW5jdGlvbiBzZXRNYXRyaXhBcnJheVR5cGUodHlwZSkge1xuICAgICAgTWF0cml4QXJyYXkgPSB0eXBlO1xuICAgICAgcmV0dXJuIE1hdHJpeEFycmF5O1xuICB9XG5cbiAgLy8gYXV0by1kZXRlY3RzIGFuZCByZXR1cm5zIHRoZSBiZXN0IHR5cGUgb2YgYXJyYXkgdG8gdXNlIHdpdGhpbiBnbE1hdHJpeCwgZmFsbGluZ1xuICAvLyBiYWNrIHRvIEFycmF5IGlmIHR5cGVkIGFycmF5cyBhcmUgdW5zdXBwb3J0ZWRcbiAgZnVuY3Rpb24gZGV0ZXJtaW5lTWF0cml4QXJyYXlUeXBlKCkge1xuICAgICAgTWF0cml4QXJyYXkgPSAodHlwZW9mIEZsb2F0MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCcpID8gRmxvYXQzMkFycmF5IDogQXJyYXk7XG4gICAgICByZXR1cm4gTWF0cml4QXJyYXk7XG4gIH1cbiAgXG4gIGRldGVybWluZU1hdHJpeEFycmF5VHlwZSgpO1xuXG4gIC8qKlxuICAgKiBAY2xhc3MgMyBEaW1lbnNpb25hbCBWZWN0b3JcbiAgICogQG5hbWUgdmVjM1xuICAgKi9cbiAgdmFyIHZlYzMgPSB7fTtcbiAgIFxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIHZlYzMgdXNpbmcgdGhlIGRlZmF1bHQgYXJyYXkgdHlwZVxuICAgKiBBbnkgamF2YXNjcmlwdCBhcnJheS1saWtlIG9iamVjdHMgY29udGFpbmluZyBhdCBsZWFzdCAzIG51bWVyaWMgZWxlbWVudHMgY2FuIHNlcnZlIGFzIGEgdmVjM1xuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzN9IFt2ZWNdIHZlYzMgY29udGFpbmluZyB2YWx1ZXMgdG8gaW5pdGlhbGl6ZSB3aXRoXG4gICAqXG4gICAqIEByZXR1cm5zIHt2ZWMzfSBOZXcgdmVjM1xuICAgKi9cbiAgdmVjMy5jcmVhdGUgPSBmdW5jdGlvbiAodmVjKSB7XG4gICAgICB2YXIgZGVzdCA9IG5ldyBNYXRyaXhBcnJheSgzKTtcblxuICAgICAgaWYgKHZlYykge1xuICAgICAgICAgIGRlc3RbMF0gPSB2ZWNbMF07XG4gICAgICAgICAgZGVzdFsxXSA9IHZlY1sxXTtcbiAgICAgICAgICBkZXN0WzJdID0gdmVjWzJdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZXN0WzBdID0gZGVzdFsxXSA9IGRlc3RbMl0gPSAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIHZlYzMsIGluaXRpYWxpemluZyBpdCB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHggWCB2YWx1ZVxuICAgKiBAcGFyYW0ge251bWJlcn0geSBZIHZhbHVlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB6IFogdmFsdWVcblxuICAgKiBAcmV0dXJucyB7dmVjM30gTmV3IHZlYzNcbiAgICovXG4gIHZlYzMuY3JlYXRlRnJvbSA9IGZ1bmN0aW9uICh4LCB5LCB6KSB7XG4gICAgICB2YXIgZGVzdCA9IG5ldyBNYXRyaXhBcnJheSgzKTtcblxuICAgICAgZGVzdFswXSA9IHg7XG4gICAgICBkZXN0WzFdID0geTtcbiAgICAgIGRlc3RbMl0gPSB6O1xuXG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2Ygb25lIHZlYzMgdG8gYW5vdGhlclxuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyB2ZWMzIGNvbnRhaW5pbmcgdmFsdWVzIHRvIGNvcHlcbiAgICogQHBhcmFtIHt2ZWMzfSBkZXN0IHZlYzMgcmVjZWl2aW5nIGNvcGllZCB2YWx1ZXNcbiAgICpcbiAgICogQHJldHVybnMge3ZlYzN9IGRlc3RcbiAgICovXG4gIHZlYzMuc2V0ID0gZnVuY3Rpb24gKHZlYywgZGVzdCkge1xuICAgICAgZGVzdFswXSA9IHZlY1swXTtcbiAgICAgIGRlc3RbMV0gPSB2ZWNbMV07XG4gICAgICBkZXN0WzJdID0gdmVjWzJdO1xuXG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogQ29tcGFyZXMgdHdvIHZlY3RvcnMgZm9yIGVxdWFsaXR5IHdpdGhpbiBhIGNlcnRhaW4gbWFyZ2luIG9mIGVycm9yXG4gICAqXG4gICAqIEBwYXJhbSB7dmVjM30gYSBGaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIHt2ZWMzfSBiIFNlY29uZCB2ZWN0b3JcbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgYSBpcyBlcXVpdmFsZW50IHRvIGJcbiAgICovXG4gIHZlYzMuZXF1YWwgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEgPT09IGIgfHwgKFxuICAgICAgICAgIE1hdGguYWJzKGFbMF0gLSBiWzBdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICBNYXRoLmFicyhhWzFdIC0gYlsxXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgTWF0aC5hYnMoYVsyXSAtIGJbMl0pIDwgRkxPQVRfRVBTSUxPTlxuICAgICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogUGVyZm9ybXMgYSB2ZWN0b3IgYWRkaXRpb25cbiAgICpcbiAgICogQHBhcmFtIHt2ZWMzfSB2ZWMgRmlyc3Qgb3BlcmFuZFxuICAgKiBAcGFyYW0ge3ZlYzN9IHZlYzIgU2Vjb25kIG9wZXJhbmRcbiAgICogQHBhcmFtIHt2ZWMzfSBbZGVzdF0gdmVjMyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byB2ZWNcbiAgICpcbiAgICogQHJldHVybnMge3ZlYzN9IGRlc3QgaWYgc3BlY2lmaWVkLCB2ZWMgb3RoZXJ3aXNlXG4gICAqL1xuICB2ZWMzLmFkZCA9IGZ1bmN0aW9uICh2ZWMsIHZlYzIsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCB8fCB2ZWMgPT09IGRlc3QpIHtcbiAgICAgICAgICB2ZWNbMF0gKz0gdmVjMlswXTtcbiAgICAgICAgICB2ZWNbMV0gKz0gdmVjMlsxXTtcbiAgICAgICAgICB2ZWNbMl0gKz0gdmVjMlsyXTtcbiAgICAgICAgICByZXR1cm4gdmVjO1xuICAgICAgfVxuXG4gICAgICBkZXN0WzBdID0gdmVjWzBdICsgdmVjMlswXTtcbiAgICAgIGRlc3RbMV0gPSB2ZWNbMV0gKyB2ZWMyWzFdO1xuICAgICAgZGVzdFsyXSA9IHZlY1syXSArIHZlYzJbMl07XG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogUGVyZm9ybXMgYSB2ZWN0b3Igc3VidHJhY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHt2ZWMzfSB2ZWMgRmlyc3Qgb3BlcmFuZFxuICAgKiBAcGFyYW0ge3ZlYzN9IHZlYzIgU2Vjb25kIG9wZXJhbmRcbiAgICogQHBhcmFtIHt2ZWMzfSBbZGVzdF0gdmVjMyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byB2ZWNcbiAgICpcbiAgICogQHJldHVybnMge3ZlYzN9IGRlc3QgaWYgc3BlY2lmaWVkLCB2ZWMgb3RoZXJ3aXNlXG4gICAqL1xuICB2ZWMzLnN1YnRyYWN0ID0gZnVuY3Rpb24gKHZlYywgdmVjMiwgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0IHx8IHZlYyA9PT0gZGVzdCkge1xuICAgICAgICAgIHZlY1swXSAtPSB2ZWMyWzBdO1xuICAgICAgICAgIHZlY1sxXSAtPSB2ZWMyWzFdO1xuICAgICAgICAgIHZlY1syXSAtPSB2ZWMyWzJdO1xuICAgICAgICAgIHJldHVybiB2ZWM7XG4gICAgICB9XG5cbiAgICAgIGRlc3RbMF0gPSB2ZWNbMF0gLSB2ZWMyWzBdO1xuICAgICAgZGVzdFsxXSA9IHZlY1sxXSAtIHZlYzJbMV07XG4gICAgICBkZXN0WzJdID0gdmVjWzJdIC0gdmVjMlsyXTtcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIHZlY3RvciBtdWx0aXBsaWNhdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyBGaXJzdCBvcGVyYW5kXG4gICAqIEBwYXJhbSB7dmVjM30gdmVjMiBTZWNvbmQgb3BlcmFuZFxuICAgKiBAcGFyYW0ge3ZlYzN9IFtkZXN0XSB2ZWMzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHZlY1xuICAgKlxuICAgKiBAcmV0dXJucyB7dmVjM30gZGVzdCBpZiBzcGVjaWZpZWQsIHZlYyBvdGhlcndpc2VcbiAgICovXG4gIHZlYzMubXVsdGlwbHkgPSBmdW5jdGlvbiAodmVjLCB2ZWMyLCBkZXN0KSB7XG4gICAgICBpZiAoIWRlc3QgfHwgdmVjID09PSBkZXN0KSB7XG4gICAgICAgICAgdmVjWzBdICo9IHZlYzJbMF07XG4gICAgICAgICAgdmVjWzFdICo9IHZlYzJbMV07XG4gICAgICAgICAgdmVjWzJdICo9IHZlYzJbMl07XG4gICAgICAgICAgcmV0dXJuIHZlYztcbiAgICAgIH1cblxuICAgICAgZGVzdFswXSA9IHZlY1swXSAqIHZlYzJbMF07XG4gICAgICBkZXN0WzFdID0gdmVjWzFdICogdmVjMlsxXTtcbiAgICAgIGRlc3RbMl0gPSB2ZWNbMl0gKiB2ZWMyWzJdO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIE5lZ2F0ZXMgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXG4gICAqXG4gICAqIEBwYXJhbSB7dmVjM30gdmVjIHZlYzMgdG8gbmVnYXRlXG4gICAqIEBwYXJhbSB7dmVjM30gW2Rlc3RdIHZlYzMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gdmVjXG4gICAqXG4gICAqIEByZXR1cm5zIHt2ZWMzfSBkZXN0IGlmIHNwZWNpZmllZCwgdmVjIG90aGVyd2lzZVxuICAgKi9cbiAgdmVjMy5uZWdhdGUgPSBmdW5jdGlvbiAodmVjLCBkZXN0KSB7XG4gICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IHZlYzsgfVxuXG4gICAgICBkZXN0WzBdID0gLXZlY1swXTtcbiAgICAgIGRlc3RbMV0gPSAtdmVjWzFdO1xuICAgICAgZGVzdFsyXSA9IC12ZWNbMl07XG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogTXVsdGlwbGllcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzMgYnkgYSBzY2FsYXIgdmFsdWVcbiAgICpcbiAgICogQHBhcmFtIHt2ZWMzfSB2ZWMgdmVjMyB0byBzY2FsZVxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsIFZhbHVlIHRvIHNjYWxlIGJ5XG4gICAqIEBwYXJhbSB7dmVjM30gW2Rlc3RdIHZlYzMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gdmVjXG4gICAqXG4gICAqIEByZXR1cm5zIHt2ZWMzfSBkZXN0IGlmIHNwZWNpZmllZCwgdmVjIG90aGVyd2lzZVxuICAgKi9cbiAgdmVjMy5zY2FsZSA9IGZ1bmN0aW9uICh2ZWMsIHZhbCwgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0IHx8IHZlYyA9PT0gZGVzdCkge1xuICAgICAgICAgIHZlY1swXSAqPSB2YWw7XG4gICAgICAgICAgdmVjWzFdICo9IHZhbDtcbiAgICAgICAgICB2ZWNbMl0gKj0gdmFsO1xuICAgICAgICAgIHJldHVybiB2ZWM7XG4gICAgICB9XG5cbiAgICAgIGRlc3RbMF0gPSB2ZWNbMF0gKiB2YWw7XG4gICAgICBkZXN0WzFdID0gdmVjWzFdICogdmFsO1xuICAgICAgZGVzdFsyXSA9IHZlY1syXSAqIHZhbDtcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSB1bml0IHZlY3RvciBvZiB0aGUgc2FtZSBkaXJlY3Rpb24gYXMgdGhlIHByb3ZpZGVkIHZlYzNcbiAgICogSWYgdmVjdG9yIGxlbmd0aCBpcyAwLCByZXR1cm5zIFswLCAwLCAwXVxuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyB2ZWMzIHRvIG5vcm1hbGl6ZVxuICAgKiBAcGFyYW0ge3ZlYzN9IFtkZXN0XSB2ZWMzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHZlY1xuICAgKlxuICAgKiBAcmV0dXJucyB7dmVjM30gZGVzdCBpZiBzcGVjaWZpZWQsIHZlYyBvdGhlcndpc2VcbiAgICovXG4gIHZlYzMubm9ybWFsaXplID0gZnVuY3Rpb24gKHZlYywgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSB2ZWM7IH1cblxuICAgICAgdmFyIHggPSB2ZWNbMF0sIHkgPSB2ZWNbMV0sIHogPSB2ZWNbMl0sXG4gICAgICAgICAgbGVuID0gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG5cbiAgICAgIGlmICghbGVuKSB7XG4gICAgICAgICAgZGVzdFswXSA9IDA7XG4gICAgICAgICAgZGVzdFsxXSA9IDA7XG4gICAgICAgICAgZGVzdFsyXSA9IDA7XG4gICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICB9IGVsc2UgaWYgKGxlbiA9PT0gMSkge1xuICAgICAgICAgIGRlc3RbMF0gPSB4O1xuICAgICAgICAgIGRlc3RbMV0gPSB5O1xuICAgICAgICAgIGRlc3RbMl0gPSB6O1xuICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgfVxuXG4gICAgICBsZW4gPSAxIC8gbGVuO1xuICAgICAgZGVzdFswXSA9IHggKiBsZW47XG4gICAgICBkZXN0WzFdID0geSAqIGxlbjtcbiAgICAgIGRlc3RbMl0gPSB6ICogbGVuO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjM3NcbiAgICpcbiAgICogQHBhcmFtIHt2ZWMzfSB2ZWMgRmlyc3Qgb3BlcmFuZFxuICAgKiBAcGFyYW0ge3ZlYzN9IHZlYzIgU2Vjb25kIG9wZXJhbmRcbiAgICogQHBhcmFtIHt2ZWMzfSBbZGVzdF0gdmVjMyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byB2ZWNcbiAgICpcbiAgICogQHJldHVybnMge3ZlYzN9IGRlc3QgaWYgc3BlY2lmaWVkLCB2ZWMgb3RoZXJ3aXNlXG4gICAqL1xuICB2ZWMzLmNyb3NzID0gZnVuY3Rpb24gKHZlYywgdmVjMiwgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSB2ZWM7IH1cblxuICAgICAgdmFyIHggPSB2ZWNbMF0sIHkgPSB2ZWNbMV0sIHogPSB2ZWNbMl0sXG4gICAgICAgICAgeDIgPSB2ZWMyWzBdLCB5MiA9IHZlYzJbMV0sIHoyID0gdmVjMlsyXTtcblxuICAgICAgZGVzdFswXSA9IHkgKiB6MiAtIHogKiB5MjtcbiAgICAgIGRlc3RbMV0gPSB6ICogeDIgLSB4ICogejI7XG4gICAgICBkZXN0WzJdID0geCAqIHkyIC0geSAqIHgyO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhY2x1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlYzNcbiAgICpcbiAgICogQHBhcmFtIHt2ZWMzfSB2ZWMgdmVjMyB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IExlbmd0aCBvZiB2ZWNcbiAgICovXG4gIHZlYzMubGVuZ3RoID0gZnVuY3Rpb24gKHZlYykge1xuICAgICAgdmFyIHggPSB2ZWNbMF0sIHkgPSB2ZWNbMV0sIHogPSB2ZWNbMl07XG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhY2x1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgdmVjM1xuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyB2ZWMzIHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBTcXVhcmVkIExlbmd0aCBvZiB2ZWNcbiAgICovXG4gIHZlYzMuc3F1YXJlZExlbmd0aCA9IGZ1bmN0aW9uICh2ZWMpIHtcbiAgICAgIHZhciB4ID0gdmVjWzBdLCB5ID0gdmVjWzFdLCB6ID0gdmVjWzJdO1xuICAgICAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogejtcbiAgfTtcblxuICAvKipcbiAgICogQ2FjbHVsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzNzXG4gICAqXG4gICAqIEBwYXJhbSB7dmVjM30gdmVjIEZpcnN0IG9wZXJhbmRcbiAgICogQHBhcmFtIHt2ZWMzfSB2ZWMyIFNlY29uZCBvcGVyYW5kXG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IERvdCBwcm9kdWN0IG9mIHZlYyBhbmQgdmVjMlxuICAgKi9cbiAgdmVjMy5kb3QgPSBmdW5jdGlvbiAodmVjLCB2ZWMyKSB7XG4gICAgICByZXR1cm4gdmVjWzBdICogdmVjMlswXSArIHZlY1sxXSAqIHZlYzJbMV0gKyB2ZWNbMl0gKiB2ZWMyWzJdO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSB1bml0IHZlY3RvciBwb2ludGluZyBmcm9tIG9uZSB2ZWN0b3IgdG8gYW5vdGhlclxuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyBPcmlnaW4gdmVjM1xuICAgKiBAcGFyYW0ge3ZlYzN9IHZlYzIgdmVjMyB0byBwb2ludCB0b1xuICAgKiBAcGFyYW0ge3ZlYzN9IFtkZXN0XSB2ZWMzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHZlY1xuICAgKlxuICAgKiBAcmV0dXJucyB7dmVjM30gZGVzdCBpZiBzcGVjaWZpZWQsIHZlYyBvdGhlcndpc2VcbiAgICovXG4gIHZlYzMuZGlyZWN0aW9uID0gZnVuY3Rpb24gKHZlYywgdmVjMiwgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSB2ZWM7IH1cblxuICAgICAgdmFyIHggPSB2ZWNbMF0gLSB2ZWMyWzBdLFxuICAgICAgICAgIHkgPSB2ZWNbMV0gLSB2ZWMyWzFdLFxuICAgICAgICAgIHogPSB2ZWNbMl0gLSB2ZWMyWzJdLFxuICAgICAgICAgIGxlbiA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopO1xuXG4gICAgICBpZiAoIWxlbikge1xuICAgICAgICAgIGRlc3RbMF0gPSAwO1xuICAgICAgICAgIGRlc3RbMV0gPSAwO1xuICAgICAgICAgIGRlc3RbMl0gPSAwO1xuICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgfVxuXG4gICAgICBsZW4gPSAxIC8gbGVuO1xuICAgICAgZGVzdFswXSA9IHggKiBsZW47XG4gICAgICBkZXN0WzFdID0geSAqIGxlbjtcbiAgICAgIGRlc3RbMl0gPSB6ICogbGVuO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjM1xuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyBGaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIHt2ZWMzfSB2ZWMyIFNlY29uZCB2ZWN0b3JcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlcnAgSW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICAgKiBAcGFyYW0ge3ZlYzN9IFtkZXN0XSB2ZWMzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHZlY1xuICAgKlxuICAgKiBAcmV0dXJucyB7dmVjM30gZGVzdCBpZiBzcGVjaWZpZWQsIHZlYyBvdGhlcndpc2VcbiAgICovXG4gIHZlYzMubGVycCA9IGZ1bmN0aW9uICh2ZWMsIHZlYzIsIGxlcnAsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gdmVjOyB9XG5cbiAgICAgIGRlc3RbMF0gPSB2ZWNbMF0gKyBsZXJwICogKHZlYzJbMF0gLSB2ZWNbMF0pO1xuICAgICAgZGVzdFsxXSA9IHZlY1sxXSArIGxlcnAgKiAodmVjMlsxXSAtIHZlY1sxXSk7XG4gICAgICBkZXN0WzJdID0gdmVjWzJdICsgbGVycCAqICh2ZWMyWzJdIC0gdmVjWzJdKTtcblxuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMzXG4gICAqXG4gICAqIFBhcmFtczpcbiAgICogQHBhcmFtIHt2ZWMzfSB2ZWMgRmlyc3QgdmVjdG9yXG4gICAqIEBwYXJhbSB7dmVjM30gdmVjMiBTZWNvbmQgdmVjdG9yXG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IERpc3RhbmNlIGJldHdlZW4gdmVjIGFuZCB2ZWMyXG4gICAqL1xuICB2ZWMzLmRpc3QgPSBmdW5jdGlvbiAodmVjLCB2ZWMyKSB7XG4gICAgICB2YXIgeCA9IHZlYzJbMF0gLSB2ZWNbMF0sXG4gICAgICAgICAgeSA9IHZlYzJbMV0gLSB2ZWNbMV0sXG4gICAgICAgICAgeiA9IHZlYzJbMl0gLSB2ZWNbMl07XG4gICAgICAgICAgXG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KHgqeCArIHkqeSArIHoqeik7XG4gIH07XG5cbiAgLy8gUHJlLWFsbG9jYXRlZCB0byBwcmV2ZW50IHVuZWNlc3NhcnkgZ2FyYmFnZSBjb2xsZWN0aW9uXG4gIHZhciB1bnByb2plY3RNYXQgPSBudWxsO1xuICB2YXIgdW5wcm9qZWN0VmVjID0gbmV3IE1hdHJpeEFycmF5KDQpO1xuICAvKipcbiAgICogUHJvamVjdHMgdGhlIHNwZWNpZmllZCB2ZWMzIGZyb20gc2NyZWVuIHNwYWNlIGludG8gb2JqZWN0IHNwYWNlXG4gICAqIEJhc2VkIG9uIHRoZSA8YSBocmVmPVwiaHR0cDovL3dlYmN2cy5mcmVlZGVza3RvcC5vcmcvbWVzYS9NZXNhL3NyYy9nbHUvbWVzYS9wcm9qZWN0LmM/cmV2aXNpb249MS40JnZpZXc9bWFya3VwXCI+TWVzYSBnbHVVblByb2plY3QgaW1wbGVtZW50YXRpb248L2E+XG4gICAqXG4gICAqIEBwYXJhbSB7dmVjM30gdmVjIFNjcmVlbi1zcGFjZSB2ZWN0b3IgdG8gcHJvamVjdFxuICAgKiBAcGFyYW0ge21hdDR9IHZpZXcgVmlldyBtYXRyaXhcbiAgICogQHBhcmFtIHttYXQ0fSBwcm9qIFByb2plY3Rpb24gbWF0cml4XG4gICAqIEBwYXJhbSB7dmVjNH0gdmlld3BvcnQgVmlld3BvcnQgYXMgZ2l2ZW4gdG8gZ2wudmlld3BvcnQgW3gsIHksIHdpZHRoLCBoZWlnaHRdXG4gICAqIEBwYXJhbSB7dmVjM30gW2Rlc3RdIHZlYzMgcmVjZWl2aW5nIHVucHJvamVjdGVkIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byB2ZWNcbiAgICpcbiAgICogQHJldHVybnMge3ZlYzN9IGRlc3QgaWYgc3BlY2lmaWVkLCB2ZWMgb3RoZXJ3aXNlXG4gICAqL1xuICB2ZWMzLnVucHJvamVjdCA9IGZ1bmN0aW9uICh2ZWMsIHZpZXcsIHByb2osIHZpZXdwb3J0LCBkZXN0KSB7XG4gICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IHZlYzsgfVxuXG4gICAgICBpZighdW5wcm9qZWN0TWF0KSB7XG4gICAgICAgICAgdW5wcm9qZWN0TWF0ID0gbWF0NC5jcmVhdGUoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG0gPSB1bnByb2plY3RNYXQ7XG4gICAgICB2YXIgdiA9IHVucHJvamVjdFZlYztcbiAgICAgIFxuICAgICAgdlswXSA9ICh2ZWNbMF0gLSB2aWV3cG9ydFswXSkgKiAyLjAgLyB2aWV3cG9ydFsyXSAtIDEuMDtcbiAgICAgIHZbMV0gPSAodmVjWzFdIC0gdmlld3BvcnRbMV0pICogMi4wIC8gdmlld3BvcnRbM10gLSAxLjA7XG4gICAgICB2WzJdID0gMi4wICogdmVjWzJdIC0gMS4wO1xuICAgICAgdlszXSA9IDEuMDtcbiAgICAgIFxuICAgICAgbWF0NC5tdWx0aXBseShwcm9qLCB2aWV3LCBtKTtcbiAgICAgIGlmKCFtYXQ0LmludmVyc2UobSkpIHsgcmV0dXJuIG51bGw7IH1cbiAgICAgIFxuICAgICAgbWF0NC5tdWx0aXBseVZlYzQobSwgdik7XG4gICAgICBpZih2WzNdID09PSAwLjApIHsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgZGVzdFswXSA9IHZbMF0gLyB2WzNdO1xuICAgICAgZGVzdFsxXSA9IHZbMV0gLyB2WzNdO1xuICAgICAgZGVzdFsyXSA9IHZbMl0gLyB2WzNdO1xuICAgICAgXG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICB2YXIgeFVuaXRWZWMzID0gdmVjMy5jcmVhdGVGcm9tKDEsMCwwKTtcbiAgdmFyIHlVbml0VmVjMyA9IHZlYzMuY3JlYXRlRnJvbSgwLDEsMCk7XG4gIHZhciB6VW5pdFZlYzMgPSB2ZWMzLmNyZWF0ZUZyb20oMCwwLDEpO1xuXG4gIHZhciB0bXB2ZWMzID0gdmVjMy5jcmVhdGUoKTtcbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIHF1YXRlcm5pb24gb2Ygcm90YXRpb24gYmV0d2VlbiB0d28gZ2l2ZW4gbm9ybWFsaXplZCB2ZWN0b3JzXG4gICAqXG4gICAqIEBwYXJhbSB7dmVjM30gYSBOb3JtYWxpemVkIHNvdXJjZSB2ZWN0b3JcbiAgICogQHBhcmFtIHt2ZWMzfSBiIE5vcm1hbGl6ZWQgdGFyZ2V0IHZlY3RvclxuICAgKiBAcGFyYW0ge3F1YXQ0fSBbZGVzdF0gcXVhdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuXG4gICAqXG4gICAqIEByZXR1cm5zIHtxdWF0NH0gZGVzdCBpZiBzcGVjaWZpZWQsIGEgbmV3IHF1YXQ0IG90aGVyd2lzZVxuICAgKi9cbiAgdmVjMy5yb3RhdGlvblRvID0gZnVuY3Rpb24gKGEsIGIsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gcXVhdDQuY3JlYXRlKCk7IH1cbiAgICAgIFxuICAgICAgdmFyIGQgPSB2ZWMzLmRvdChhLCBiKTtcbiAgICAgIHZhciBheGlzID0gdG1wdmVjMztcbiAgICAgIGlmIChkID49IDEuMCkge1xuICAgICAgICAgIHF1YXQ0LnNldChpZGVudGl0eVF1YXQ0LCBkZXN0KTtcbiAgICAgIH0gZWxzZSBpZiAoZCA8ICgwLjAwMDAwMSAtIDEuMCkpIHtcbiAgICAgICAgICB2ZWMzLmNyb3NzKHhVbml0VmVjMywgYSwgYXhpcyk7XG4gICAgICAgICAgaWYgKHZlYzMubGVuZ3RoKGF4aXMpIDwgMC4wMDAwMDEpXG4gICAgICAgICAgICAgIHZlYzMuY3Jvc3MoeVVuaXRWZWMzLCBhLCBheGlzKTtcbiAgICAgICAgICBpZiAodmVjMy5sZW5ndGgoYXhpcykgPCAwLjAwMDAwMSlcbiAgICAgICAgICAgICAgdmVjMy5jcm9zcyh6VW5pdFZlYzMsIGEsIGF4aXMpO1xuICAgICAgICAgIHZlYzMubm9ybWFsaXplKGF4aXMpO1xuICAgICAgICAgIHF1YXQ0LmZyb21BbmdsZUF4aXMoTWF0aC5QSSwgYXhpcywgZGVzdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBzID0gTWF0aC5zcXJ0KCgxLjAgKyBkKSAqIDIuMCk7XG4gICAgICAgICAgdmFyIHNJbnYgPSAxLjAgLyBzO1xuICAgICAgICAgIHZlYzMuY3Jvc3MoYSwgYiwgYXhpcyk7XG4gICAgICAgICAgZGVzdFswXSA9IGF4aXNbMF0gKiBzSW52O1xuICAgICAgICAgIGRlc3RbMV0gPSBheGlzWzFdICogc0ludjtcbiAgICAgICAgICBkZXN0WzJdID0gYXhpc1syXSAqIHNJbnY7XG4gICAgICAgICAgZGVzdFszXSA9IHMgKiAwLjU7XG4gICAgICAgICAgcXVhdDQubm9ybWFsaXplKGRlc3QpO1xuICAgICAgfVxuICAgICAgaWYgKGRlc3RbM10gPiAxLjApIGRlc3RbM10gPSAxLjA7XG4gICAgICBlbHNlIGlmIChkZXN0WzNdIDwgLTEuMCkgZGVzdFszXSA9IC0xLjA7XG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHZlY3RvclxuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyBWZWN0b3IgdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB2ZWNcbiAgICovXG4gIHZlYzMuc3RyID0gZnVuY3Rpb24gKHZlYykge1xuICAgICAgcmV0dXJuICdbJyArIHZlY1swXSArICcsICcgKyB2ZWNbMV0gKyAnLCAnICsgdmVjWzJdICsgJ10nO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAY2xhc3MgM3gzIE1hdHJpeFxuICAgKiBAbmFtZSBtYXQzXG4gICAqL1xuICB2YXIgbWF0MyA9IHt9O1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgbWF0MyB1c2luZyB0aGUgZGVmYXVsdCBhcnJheSB0eXBlXG4gICAqIEFueSBqYXZhc2NyaXB0IGFycmF5LWxpa2Ugb2JqZWN0IGNvbnRhaW5pbmcgYXQgbGVhc3QgOSBudW1lcmljIGVsZW1lbnRzIGNhbiBzZXJ2ZSBhcyBhIG1hdDNcbiAgICpcbiAgICogQHBhcmFtIHttYXQzfSBbbWF0XSBtYXQzIGNvbnRhaW5pbmcgdmFsdWVzIHRvIGluaXRpYWxpemUgd2l0aFxuICAgKlxuICAgKiBAcmV0dXJucyB7bWF0M30gTmV3IG1hdDNcbiAgICovXG4gIG1hdDMuY3JlYXRlID0gZnVuY3Rpb24gKG1hdCkge1xuICAgICAgdmFyIGRlc3QgPSBuZXcgTWF0cml4QXJyYXkoOSk7XG5cbiAgICAgIGlmIChtYXQpIHtcbiAgICAgICAgICBkZXN0WzBdID0gbWF0WzBdO1xuICAgICAgICAgIGRlc3RbMV0gPSBtYXRbMV07XG4gICAgICAgICAgZGVzdFsyXSA9IG1hdFsyXTtcbiAgICAgICAgICBkZXN0WzNdID0gbWF0WzNdO1xuICAgICAgICAgIGRlc3RbNF0gPSBtYXRbNF07XG4gICAgICAgICAgZGVzdFs1XSA9IG1hdFs1XTtcbiAgICAgICAgICBkZXN0WzZdID0gbWF0WzZdO1xuICAgICAgICAgIGRlc3RbN10gPSBtYXRbN107XG4gICAgICAgICAgZGVzdFs4XSA9IG1hdFs4XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVzdFswXSA9IGRlc3RbMV0gPVxuICAgICAgICAgIGRlc3RbMl0gPSBkZXN0WzNdID1cbiAgICAgICAgICBkZXN0WzRdID0gZGVzdFs1XSA9XG4gICAgICAgICAgZGVzdFs2XSA9IGRlc3RbN10gPVxuICAgICAgICAgIGRlc3RbOF0gPSAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhIG1hdDMsIGluaXRpYWxpemluZyBpdCB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0wMFxuICAgKiBAcGFyYW0ge251bWJlcn0gbTAxXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMDJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0xMFxuICAgKiBAcGFyYW0ge251bWJlcn0gbTExXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMTJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0yMFxuICAgKiBAcGFyYW0ge251bWJlcn0gbTIxXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMjJcblxuICAgKiBAcmV0dXJucyB7bWF0M30gTmV3IG1hdDNcbiAgICovXG4gIG1hdDMuY3JlYXRlRnJvbSA9IGZ1bmN0aW9uIChtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKSB7XG4gICAgICB2YXIgZGVzdCA9IG5ldyBNYXRyaXhBcnJheSg5KTtcblxuICAgICAgZGVzdFswXSA9IG0wMDtcbiAgICAgIGRlc3RbMV0gPSBtMDE7XG4gICAgICBkZXN0WzJdID0gbTAyO1xuICAgICAgZGVzdFszXSA9IG0xMDtcbiAgICAgIGRlc3RbNF0gPSBtMTE7XG4gICAgICBkZXN0WzVdID0gbTEyO1xuICAgICAgZGVzdFs2XSA9IG0yMDtcbiAgICAgIGRlc3RbN10gPSBtMjE7XG4gICAgICBkZXN0WzhdID0gbTIyO1xuXG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgZGV0ZXJtaW5hbnQgb2YgYSBtYXQzXG4gICAqXG4gICAqIEBwYXJhbSB7bWF0M30gbWF0IG1hdDMgdG8gY2FsY3VsYXRlIGRldGVybWluYW50IG9mXG4gICAqXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIG1hdFxuICAgKi9cbiAgbWF0My5kZXRlcm1pbmFudCA9IGZ1bmN0aW9uIChtYXQpIHtcbiAgICAgIHZhciBhMDAgPSBtYXRbMF0sIGEwMSA9IG1hdFsxXSwgYTAyID0gbWF0WzJdLFxuICAgICAgICAgIGExMCA9IG1hdFszXSwgYTExID0gbWF0WzRdLCBhMTIgPSBtYXRbNV0sXG4gICAgICAgICAgYTIwID0gbWF0WzZdLCBhMjEgPSBtYXRbN10sIGEyMiA9IG1hdFs4XTtcblxuICAgICAgcmV0dXJuIGEwMCAqIChhMjIgKiBhMTEgLSBhMTIgKiBhMjEpICsgYTAxICogKC1hMjIgKiBhMTAgKyBhMTIgKiBhMjApICsgYTAyICogKGEyMSAqIGExMCAtIGExMSAqIGEyMCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGludmVyc2UgbWF0cml4IG9mIGEgbWF0M1xuICAgKlxuICAgKiBAcGFyYW0ge21hdDN9IG1hdCBtYXQzIHRvIGNhbGN1bGF0ZSBpbnZlcnNlIG9mXG4gICAqIEBwYXJhbSB7bWF0M30gW2Rlc3RdIG1hdDMgcmVjZWl2aW5nIGludmVyc2UgbWF0cml4LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIG1hdFxuICAgKlxuICAgKiBAcGFyYW0ge21hdDN9IGRlc3QgaXMgc3BlY2lmaWVkLCBtYXQgb3RoZXJ3aXNlLCBudWxsIGlmIG1hdHJpeCBjYW5ub3QgYmUgaW52ZXJ0ZWRcbiAgICovXG4gIG1hdDMuaW52ZXJzZSA9IGZ1bmN0aW9uIChtYXQsIGRlc3QpIHtcbiAgICAgIHZhciBhMDAgPSBtYXRbMF0sIGEwMSA9IG1hdFsxXSwgYTAyID0gbWF0WzJdLFxuICAgICAgICAgIGExMCA9IG1hdFszXSwgYTExID0gbWF0WzRdLCBhMTIgPSBtYXRbNV0sXG4gICAgICAgICAgYTIwID0gbWF0WzZdLCBhMjEgPSBtYXRbN10sIGEyMiA9IG1hdFs4XSxcblxuICAgICAgICAgIGIwMSA9IGEyMiAqIGExMSAtIGExMiAqIGEyMSxcbiAgICAgICAgICBiMTEgPSAtYTIyICogYTEwICsgYTEyICogYTIwLFxuICAgICAgICAgIGIyMSA9IGEyMSAqIGExMCAtIGExMSAqIGEyMCxcblxuICAgICAgICAgIGQgPSBhMDAgKiBiMDEgKyBhMDEgKiBiMTEgKyBhMDIgKiBiMjEsXG4gICAgICAgICAgaWQ7XG5cbiAgICAgIGlmICghZCkgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgaWQgPSAxIC8gZDtcblxuICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBtYXQzLmNyZWF0ZSgpOyB9XG5cbiAgICAgIGRlc3RbMF0gPSBiMDEgKiBpZDtcbiAgICAgIGRlc3RbMV0gPSAoLWEyMiAqIGEwMSArIGEwMiAqIGEyMSkgKiBpZDtcbiAgICAgIGRlc3RbMl0gPSAoYTEyICogYTAxIC0gYTAyICogYTExKSAqIGlkO1xuICAgICAgZGVzdFszXSA9IGIxMSAqIGlkO1xuICAgICAgZGVzdFs0XSA9IChhMjIgKiBhMDAgLSBhMDIgKiBhMjApICogaWQ7XG4gICAgICBkZXN0WzVdID0gKC1hMTIgKiBhMDAgKyBhMDIgKiBhMTApICogaWQ7XG4gICAgICBkZXN0WzZdID0gYjIxICogaWQ7XG4gICAgICBkZXN0WzddID0gKC1hMjEgKiBhMDAgKyBhMDEgKiBhMjApICogaWQ7XG4gICAgICBkZXN0WzhdID0gKGExMSAqIGEwMCAtIGEwMSAqIGExMCkgKiBpZDtcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuICBcbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgbWF0cml4IG11bHRpcGxpY2F0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7bWF0M30gbWF0IEZpcnN0IG9wZXJhbmRcbiAgICogQHBhcmFtIHttYXQzfSBtYXQyIFNlY29uZCBvcGVyYW5kXG4gICAqIEBwYXJhbSB7bWF0M30gW2Rlc3RdIG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gbWF0XG4gICAqXG4gICAqIEByZXR1cm5zIHttYXQzfSBkZXN0IGlmIHNwZWNpZmllZCwgbWF0IG90aGVyd2lzZVxuICAgKi9cbiAgbWF0My5tdWx0aXBseSA9IGZ1bmN0aW9uIChtYXQsIG1hdDIsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gbWF0OyB9XG4gICAgICBcblxuICAgICAgLy8gQ2FjaGUgdGhlIG1hdHJpeCB2YWx1ZXMgKG1ha2VzIGZvciBodWdlIHNwZWVkIGluY3JlYXNlcyEpXG4gICAgICB2YXIgYTAwID0gbWF0WzBdLCBhMDEgPSBtYXRbMV0sIGEwMiA9IG1hdFsyXSxcbiAgICAgICAgICBhMTAgPSBtYXRbM10sIGExMSA9IG1hdFs0XSwgYTEyID0gbWF0WzVdLFxuICAgICAgICAgIGEyMCA9IG1hdFs2XSwgYTIxID0gbWF0WzddLCBhMjIgPSBtYXRbOF0sXG5cbiAgICAgICAgICBiMDAgPSBtYXQyWzBdLCBiMDEgPSBtYXQyWzFdLCBiMDIgPSBtYXQyWzJdLFxuICAgICAgICAgIGIxMCA9IG1hdDJbM10sIGIxMSA9IG1hdDJbNF0sIGIxMiA9IG1hdDJbNV0sXG4gICAgICAgICAgYjIwID0gbWF0Mls2XSwgYjIxID0gbWF0Mls3XSwgYjIyID0gbWF0Mls4XTtcblxuICAgICAgZGVzdFswXSA9IGIwMCAqIGEwMCArIGIwMSAqIGExMCArIGIwMiAqIGEyMDtcbiAgICAgIGRlc3RbMV0gPSBiMDAgKiBhMDEgKyBiMDEgKiBhMTEgKyBiMDIgKiBhMjE7XG4gICAgICBkZXN0WzJdID0gYjAwICogYTAyICsgYjAxICogYTEyICsgYjAyICogYTIyO1xuXG4gICAgICBkZXN0WzNdID0gYjEwICogYTAwICsgYjExICogYTEwICsgYjEyICogYTIwO1xuICAgICAgZGVzdFs0XSA9IGIxMCAqIGEwMSArIGIxMSAqIGExMSArIGIxMiAqIGEyMTtcbiAgICAgIGRlc3RbNV0gPSBiMTAgKiBhMDIgKyBiMTEgKiBhMTIgKyBiMTIgKiBhMjI7XG5cbiAgICAgIGRlc3RbNl0gPSBiMjAgKiBhMDAgKyBiMjEgKiBhMTAgKyBiMjIgKiBhMjA7XG4gICAgICBkZXN0WzddID0gYjIwICogYTAxICsgYjIxICogYTExICsgYjIyICogYTIxO1xuICAgICAgZGVzdFs4XSA9IGIyMCAqIGEwMiArIGIyMSAqIGExMiArIGIyMiAqIGEyMjtcblxuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybXMgdGhlIHZlYzIgYWNjb3JkaW5nIHRvIHRoZSBnaXZlbiBtYXQzLlxuICAgKlxuICAgKiBAcGFyYW0ge21hdDN9IG1hdHJpeCBtYXQzIHRvIG11bHRpcGx5IGFnYWluc3RcbiAgICogQHBhcmFtIHt2ZWMyfSB2ZWMgICAgdGhlIHZlY3RvciB0byBtdWx0aXBseVxuICAgKiBAcGFyYW0ge3ZlYzJ9IFtkZXN0XSBhbiBvcHRpb25hbCByZWNlaXZpbmcgdmVjdG9yLiBJZiBub3QgZ2l2ZW4sIHZlYyBpcyB1c2VkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7dmVjMn0gVGhlIG11bHRpcGxpY2F0aW9uIHJlc3VsdFxuICAgKiovXG4gIG1hdDMubXVsdGlwbHlWZWMyID0gZnVuY3Rpb24obWF0cml4LCB2ZWMsIGRlc3QpIHtcbiAgICBpZiAoIWRlc3QpIGRlc3QgPSB2ZWM7XG4gICAgdmFyIHggPSB2ZWNbMF0sIHkgPSB2ZWNbMV07XG4gICAgZGVzdFswXSA9IHggKiBtYXRyaXhbMF0gKyB5ICogbWF0cml4WzNdICsgbWF0cml4WzZdO1xuICAgIGRlc3RbMV0gPSB4ICogbWF0cml4WzFdICsgeSAqIG1hdHJpeFs0XSArIG1hdHJpeFs3XTtcbiAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogVHJhbnNmb3JtcyB0aGUgdmVjMyBhY2NvcmRpbmcgdG8gdGhlIGdpdmVuIG1hdDNcbiAgICpcbiAgICogQHBhcmFtIHttYXQzfSBtYXRyaXggbWF0MyB0byBtdWx0aXBseSBhZ2FpbnN0XG4gICAqIEBwYXJhbSB7dmVjM30gdmVjICAgIHRoZSB2ZWN0b3IgdG8gbXVsdGlwbHlcbiAgICogQHBhcmFtIHt2ZWMzfSBbZGVzdF0gYW4gb3B0aW9uYWwgcmVjZWl2aW5nIHZlY3Rvci4gSWYgbm90IGdpdmVuLCB2ZWMgaXMgdXNlZC5cbiAgICpcbiAgICogQHJldHVybnMge3ZlYzN9IFRoZSBtdWx0aXBsaWNhdGlvbiByZXN1bHRcbiAgICoqL1xuICBtYXQzLm11bHRpcGx5VmVjMyA9IGZ1bmN0aW9uKG1hdHJpeCwgdmVjLCBkZXN0KSB7XG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gdmVjO1xuICAgIHZhciB4ID0gdmVjWzBdLCB5ID0gdmVjWzFdLCB6ID0gdmVjWzJdO1xuICAgIGRlc3RbMF0gPSB4ICogbWF0cml4WzBdICsgeSAqIG1hdHJpeFszXSArIHogKiBtYXRyaXhbNl07XG4gICAgZGVzdFsxXSA9IHggKiBtYXRyaXhbMV0gKyB5ICogbWF0cml4WzRdICsgeiAqIG1hdHJpeFs3XTtcbiAgICBkZXN0WzJdID0geCAqIG1hdHJpeFsyXSArIHkgKiBtYXRyaXhbNV0gKyB6ICogbWF0cml4WzhdO1xuICAgIFxuICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBvbmUgbWF0MyB0byBhbm90aGVyXG4gICAqXG4gICAqIEBwYXJhbSB7bWF0M30gbWF0IG1hdDMgY29udGFpbmluZyB2YWx1ZXMgdG8gY29weVxuICAgKiBAcGFyYW0ge21hdDN9IGRlc3QgbWF0MyByZWNlaXZpbmcgY29waWVkIHZhbHVlc1xuICAgKlxuICAgKiBAcmV0dXJucyB7bWF0M30gZGVzdFxuICAgKi9cbiAgbWF0My5zZXQgPSBmdW5jdGlvbiAobWF0LCBkZXN0KSB7XG4gICAgICBkZXN0WzBdID0gbWF0WzBdO1xuICAgICAgZGVzdFsxXSA9IG1hdFsxXTtcbiAgICAgIGRlc3RbMl0gPSBtYXRbMl07XG4gICAgICBkZXN0WzNdID0gbWF0WzNdO1xuICAgICAgZGVzdFs0XSA9IG1hdFs0XTtcbiAgICAgIGRlc3RbNV0gPSBtYXRbNV07XG4gICAgICBkZXN0WzZdID0gbWF0WzZdO1xuICAgICAgZGVzdFs3XSA9IG1hdFs3XTtcbiAgICAgIGRlc3RbOF0gPSBtYXRbOF07XG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogQ29tcGFyZXMgdHdvIG1hdHJpY2VzIGZvciBlcXVhbGl0eSB3aXRoaW4gYSBjZXJ0YWluIG1hcmdpbiBvZiBlcnJvclxuICAgKlxuICAgKiBAcGFyYW0ge21hdDN9IGEgRmlyc3QgbWF0cml4XG4gICAqIEBwYXJhbSB7bWF0M30gYiBTZWNvbmQgbWF0cml4XG4gICAqXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIGEgaXMgZXF1aXZhbGVudCB0byBiXG4gICAqL1xuICBtYXQzLmVxdWFsID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhID09PSBiIHx8IChcbiAgICAgICAgICBNYXRoLmFicyhhWzBdIC0gYlswXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgTWF0aC5hYnMoYVsxXSAtIGJbMV0pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgIE1hdGguYWJzKGFbMl0gLSBiWzJdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICBNYXRoLmFicyhhWzNdIC0gYlszXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgTWF0aC5hYnMoYVs0XSAtIGJbNF0pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgIE1hdGguYWJzKGFbNV0gLSBiWzVdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICBNYXRoLmFicyhhWzZdIC0gYls2XSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgTWF0aC5hYnMoYVs3XSAtIGJbN10pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgIE1hdGguYWJzKGFbOF0gLSBiWzhdKSA8IEZMT0FUX0VQU0lMT05cbiAgICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldHMgYSBtYXQzIHRvIGFuIGlkZW50aXR5IG1hdHJpeFxuICAgKlxuICAgKiBAcGFyYW0ge21hdDN9IGRlc3QgbWF0MyB0byBzZXRcbiAgICpcbiAgICogQHJldHVybnMgZGVzdCBpZiBzcGVjaWZpZWQsIG90aGVyd2lzZSBhIG5ldyBtYXQzXG4gICAqL1xuICBtYXQzLmlkZW50aXR5ID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gbWF0My5jcmVhdGUoKTsgfVxuICAgICAgZGVzdFswXSA9IDE7XG4gICAgICBkZXN0WzFdID0gMDtcbiAgICAgIGRlc3RbMl0gPSAwO1xuICAgICAgZGVzdFszXSA9IDA7XG4gICAgICBkZXN0WzRdID0gMTtcbiAgICAgIGRlc3RbNV0gPSAwO1xuICAgICAgZGVzdFs2XSA9IDA7XG4gICAgICBkZXN0WzddID0gMDtcbiAgICAgIGRlc3RbOF0gPSAxO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIFRyYW5zcG9zZXMgYSBtYXQzIChmbGlwcyB0aGUgdmFsdWVzIG92ZXIgdGhlIGRpYWdvbmFsKVxuICAgKlxuICAgKiBQYXJhbXM6XG4gICAqIEBwYXJhbSB7bWF0M30gbWF0IG1hdDMgdG8gdHJhbnNwb3NlXG4gICAqIEBwYXJhbSB7bWF0M30gW2Rlc3RdIG1hdDMgcmVjZWl2aW5nIHRyYW5zcG9zZWQgdmFsdWVzLiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIG1hdFxuICAgKlxuICAgKiBAcmV0dXJucyB7bWF0M30gZGVzdCBpcyBzcGVjaWZpZWQsIG1hdCBvdGhlcndpc2VcbiAgICovXG4gIG1hdDMudHJhbnNwb3NlID0gZnVuY3Rpb24gKG1hdCwgZGVzdCkge1xuICAgICAgLy8gSWYgd2UgYXJlIHRyYW5zcG9zaW5nIG91cnNlbHZlcyB3ZSBjYW4gc2tpcCBhIGZldyBzdGVwcyBidXQgaGF2ZSB0byBjYWNoZSBzb21lIHZhbHVlc1xuICAgICAgaWYgKCFkZXN0IHx8IG1hdCA9PT0gZGVzdCkge1xuICAgICAgICAgIHZhciBhMDEgPSBtYXRbMV0sIGEwMiA9IG1hdFsyXSxcbiAgICAgICAgICAgICAgYTEyID0gbWF0WzVdO1xuXG4gICAgICAgICAgbWF0WzFdID0gbWF0WzNdO1xuICAgICAgICAgIG1hdFsyXSA9IG1hdFs2XTtcbiAgICAgICAgICBtYXRbM10gPSBhMDE7XG4gICAgICAgICAgbWF0WzVdID0gbWF0WzddO1xuICAgICAgICAgIG1hdFs2XSA9IGEwMjtcbiAgICAgICAgICBtYXRbN10gPSBhMTI7XG4gICAgICAgICAgcmV0dXJuIG1hdDtcbiAgICAgIH1cblxuICAgICAgZGVzdFswXSA9IG1hdFswXTtcbiAgICAgIGRlc3RbMV0gPSBtYXRbM107XG4gICAgICBkZXN0WzJdID0gbWF0WzZdO1xuICAgICAgZGVzdFszXSA9IG1hdFsxXTtcbiAgICAgIGRlc3RbNF0gPSBtYXRbNF07XG4gICAgICBkZXN0WzVdID0gbWF0WzddO1xuICAgICAgZGVzdFs2XSA9IG1hdFsyXTtcbiAgICAgIGRlc3RbN10gPSBtYXRbNV07XG4gICAgICBkZXN0WzhdID0gbWF0WzhdO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvcGllcyB0aGUgZWxlbWVudHMgb2YgYSBtYXQzIGludG8gdGhlIHVwcGVyIDN4MyBlbGVtZW50cyBvZiBhIG1hdDRcbiAgICpcbiAgICogQHBhcmFtIHttYXQzfSBtYXQgbWF0MyBjb250YWluaW5nIHZhbHVlcyB0byBjb3B5XG4gICAqIEBwYXJhbSB7bWF0NH0gW2Rlc3RdIG1hdDQgcmVjZWl2aW5nIGNvcGllZCB2YWx1ZXNcbiAgICpcbiAgICogQHJldHVybnMge21hdDR9IGRlc3QgaWYgc3BlY2lmaWVkLCBhIG5ldyBtYXQ0IG90aGVyd2lzZVxuICAgKi9cbiAgbWF0My50b01hdDQgPSBmdW5jdGlvbiAobWF0LCBkZXN0KSB7XG4gICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IG1hdDQuY3JlYXRlKCk7IH1cblxuICAgICAgZGVzdFsxNV0gPSAxO1xuICAgICAgZGVzdFsxNF0gPSAwO1xuICAgICAgZGVzdFsxM10gPSAwO1xuICAgICAgZGVzdFsxMl0gPSAwO1xuXG4gICAgICBkZXN0WzExXSA9IDA7XG4gICAgICBkZXN0WzEwXSA9IG1hdFs4XTtcbiAgICAgIGRlc3RbOV0gPSBtYXRbN107XG4gICAgICBkZXN0WzhdID0gbWF0WzZdO1xuXG4gICAgICBkZXN0WzddID0gMDtcbiAgICAgIGRlc3RbNl0gPSBtYXRbNV07XG4gICAgICBkZXN0WzVdID0gbWF0WzRdO1xuICAgICAgZGVzdFs0XSA9IG1hdFszXTtcblxuICAgICAgZGVzdFszXSA9IDA7XG4gICAgICBkZXN0WzJdID0gbWF0WzJdO1xuICAgICAgZGVzdFsxXSA9IG1hdFsxXTtcbiAgICAgIGRlc3RbMF0gPSBtYXRbMF07XG5cbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgbWF0M1xuICAgKlxuICAgKiBAcGFyYW0ge21hdDN9IG1hdCBtYXQzIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIG1hdFxuICAgKi9cbiAgbWF0My5zdHIgPSBmdW5jdGlvbiAobWF0KSB7XG4gICAgICByZXR1cm4gJ1snICsgbWF0WzBdICsgJywgJyArIG1hdFsxXSArICcsICcgKyBtYXRbMl0gK1xuICAgICAgICAgICcsICcgKyBtYXRbM10gKyAnLCAnICsgbWF0WzRdICsgJywgJyArIG1hdFs1XSArXG4gICAgICAgICAgJywgJyArIG1hdFs2XSArICcsICcgKyBtYXRbN10gKyAnLCAnICsgbWF0WzhdICsgJ10nO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAY2xhc3MgNHg0IE1hdHJpeFxuICAgKiBAbmFtZSBtYXQ0XG4gICAqL1xuICB2YXIgbWF0NCA9IHt9O1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgbWF0NCB1c2luZyB0aGUgZGVmYXVsdCBhcnJheSB0eXBlXG4gICAqIEFueSBqYXZhc2NyaXB0IGFycmF5LWxpa2Ugb2JqZWN0IGNvbnRhaW5pbmcgYXQgbGVhc3QgMTYgbnVtZXJpYyBlbGVtZW50cyBjYW4gc2VydmUgYXMgYSBtYXQ0XG4gICAqXG4gICAqIEBwYXJhbSB7bWF0NH0gW21hdF0gbWF0NCBjb250YWluaW5nIHZhbHVlcyB0byBpbml0aWFsaXplIHdpdGhcbiAgICpcbiAgICogQHJldHVybnMge21hdDR9IE5ldyBtYXQ0XG4gICAqL1xuICBtYXQ0LmNyZWF0ZSA9IGZ1bmN0aW9uIChtYXQpIHtcbiAgICAgIHZhciBkZXN0ID0gbmV3IE1hdHJpeEFycmF5KDE2KTtcblxuICAgICAgaWYgKG1hdCkge1xuICAgICAgICAgIGRlc3RbMF0gPSBtYXRbMF07XG4gICAgICAgICAgZGVzdFsxXSA9IG1hdFsxXTtcbiAgICAgICAgICBkZXN0WzJdID0gbWF0WzJdO1xuICAgICAgICAgIGRlc3RbM10gPSBtYXRbM107XG4gICAgICAgICAgZGVzdFs0XSA9IG1hdFs0XTtcbiAgICAgICAgICBkZXN0WzVdID0gbWF0WzVdO1xuICAgICAgICAgIGRlc3RbNl0gPSBtYXRbNl07XG4gICAgICAgICAgZGVzdFs3XSA9IG1hdFs3XTtcbiAgICAgICAgICBkZXN0WzhdID0gbWF0WzhdO1xuICAgICAgICAgIGRlc3RbOV0gPSBtYXRbOV07XG4gICAgICAgICAgZGVzdFsxMF0gPSBtYXRbMTBdO1xuICAgICAgICAgIGRlc3RbMTFdID0gbWF0WzExXTtcbiAgICAgICAgICBkZXN0WzEyXSA9IG1hdFsxMl07XG4gICAgICAgICAgZGVzdFsxM10gPSBtYXRbMTNdO1xuICAgICAgICAgIGRlc3RbMTRdID0gbWF0WzE0XTtcbiAgICAgICAgICBkZXN0WzE1XSA9IG1hdFsxNV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgbWF0NCwgaW5pdGlhbGl6aW5nIGl0IHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbTAwXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMDFcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0wMlxuICAgKiBAcGFyYW0ge251bWJlcn0gbTAzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMTBcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0xMVxuICAgKiBAcGFyYW0ge251bWJlcn0gbTEyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMTNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0yMFxuICAgKiBAcGFyYW0ge251bWJlcn0gbTIxXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMjJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0yM1xuICAgKiBAcGFyYW0ge251bWJlcn0gbTMwXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMzFcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0zMlxuICAgKiBAcGFyYW0ge251bWJlcn0gbTMzXG5cbiAgICogQHJldHVybnMge21hdDR9IE5ldyBtYXQ0XG4gICAqL1xuICBtYXQ0LmNyZWF0ZUZyb20gPSBmdW5jdGlvbiAobTAwLCBtMDEsIG0wMiwgbTAzLCBtMTAsIG0xMSwgbTEyLCBtMTMsIG0yMCwgbTIxLCBtMjIsIG0yMywgbTMwLCBtMzEsIG0zMiwgbTMzKSB7XG4gICAgICB2YXIgZGVzdCA9IG5ldyBNYXRyaXhBcnJheSgxNik7XG5cbiAgICAgIGRlc3RbMF0gPSBtMDA7XG4gICAgICBkZXN0WzFdID0gbTAxO1xuICAgICAgZGVzdFsyXSA9IG0wMjtcbiAgICAgIGRlc3RbM10gPSBtMDM7XG4gICAgICBkZXN0WzRdID0gbTEwO1xuICAgICAgZGVzdFs1XSA9IG0xMTtcbiAgICAgIGRlc3RbNl0gPSBtMTI7XG4gICAgICBkZXN0WzddID0gbTEzO1xuICAgICAgZGVzdFs4XSA9IG0yMDtcbiAgICAgIGRlc3RbOV0gPSBtMjE7XG4gICAgICBkZXN0WzEwXSA9IG0yMjtcbiAgICAgIGRlc3RbMTFdID0gbTIzO1xuICAgICAgZGVzdFsxMl0gPSBtMzA7XG4gICAgICBkZXN0WzEzXSA9IG0zMTtcbiAgICAgIGRlc3RbMTRdID0gbTMyO1xuICAgICAgZGVzdFsxNV0gPSBtMzM7XG5cbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBvbmUgbWF0NCB0byBhbm90aGVyXG4gICAqXG4gICAqIEBwYXJhbSB7bWF0NH0gbWF0IG1hdDQgY29udGFpbmluZyB2YWx1ZXMgdG8gY29weVxuICAgKiBAcGFyYW0ge21hdDR9IGRlc3QgbWF0NCByZWNlaXZpbmcgY29waWVkIHZhbHVlc1xuICAgKlxuICAgKiBAcmV0dXJucyB7bWF0NH0gZGVzdFxuICAgKi9cbiAgbWF0NC5zZXQgPSBmdW5jdGlvbiAobWF0LCBkZXN0KSB7XG4gICAgICBkZXN0WzBdID0gbWF0WzBdO1xuICAgICAgZGVzdFsxXSA9IG1hdFsxXTtcbiAgICAgIGRlc3RbMl0gPSBtYXRbMl07XG4gICAgICBkZXN0WzNdID0gbWF0WzNdO1xuICAgICAgZGVzdFs0XSA9IG1hdFs0XTtcbiAgICAgIGRlc3RbNV0gPSBtYXRbNV07XG4gICAgICBkZXN0WzZdID0gbWF0WzZdO1xuICAgICAgZGVzdFs3XSA9IG1hdFs3XTtcbiAgICAgIGRlc3RbOF0gPSBtYXRbOF07XG4gICAgICBkZXN0WzldID0gbWF0WzldO1xuICAgICAgZGVzdFsxMF0gPSBtYXRbMTBdO1xuICAgICAgZGVzdFsxMV0gPSBtYXRbMTFdO1xuICAgICAgZGVzdFsxMl0gPSBtYXRbMTJdO1xuICAgICAgZGVzdFsxM10gPSBtYXRbMTNdO1xuICAgICAgZGVzdFsxNF0gPSBtYXRbMTRdO1xuICAgICAgZGVzdFsxNV0gPSBtYXRbMTVdO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbXBhcmVzIHR3byBtYXRyaWNlcyBmb3IgZXF1YWxpdHkgd2l0aGluIGEgY2VydGFpbiBtYXJnaW4gb2YgZXJyb3JcbiAgICpcbiAgICogQHBhcmFtIHttYXQ0fSBhIEZpcnN0IG1hdHJpeFxuICAgKiBAcGFyYW0ge21hdDR9IGIgU2Vjb25kIG1hdHJpeFxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiBhIGlzIGVxdWl2YWxlbnQgdG8gYlxuICAgKi9cbiAgbWF0NC5lcXVhbCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYSA9PT0gYiB8fCAoXG4gICAgICAgICAgTWF0aC5hYnMoYVswXSAtIGJbMF0pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgIE1hdGguYWJzKGFbMV0gLSBiWzFdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICBNYXRoLmFicyhhWzJdIC0gYlsyXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgTWF0aC5hYnMoYVszXSAtIGJbM10pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgIE1hdGguYWJzKGFbNF0gLSBiWzRdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICBNYXRoLmFicyhhWzVdIC0gYls1XSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgTWF0aC5hYnMoYVs2XSAtIGJbNl0pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgIE1hdGguYWJzKGFbN10gLSBiWzddKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICBNYXRoLmFicyhhWzhdIC0gYls4XSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgTWF0aC5hYnMoYVs5XSAtIGJbOV0pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgIE1hdGguYWJzKGFbMTBdIC0gYlsxMF0pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgIE1hdGguYWJzKGFbMTFdIC0gYlsxMV0pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgIE1hdGguYWJzKGFbMTJdIC0gYlsxMl0pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgIE1hdGguYWJzKGFbMTNdIC0gYlsxM10pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgIE1hdGguYWJzKGFbMTRdIC0gYlsxNF0pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgIE1hdGguYWJzKGFbMTVdIC0gYlsxNV0pIDwgRkxPQVRfRVBTSUxPTlxuICAgICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogU2V0cyBhIG1hdDQgdG8gYW4gaWRlbnRpdHkgbWF0cml4XG4gICAqXG4gICAqIEBwYXJhbSB7bWF0NH0gZGVzdCBtYXQ0IHRvIHNldFxuICAgKlxuICAgKiBAcmV0dXJucyB7bWF0NH0gZGVzdFxuICAgKi9cbiAgbWF0NC5pZGVudGl0eSA9IGZ1bmN0aW9uIChkZXN0KSB7XG4gICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IG1hdDQuY3JlYXRlKCk7IH1cbiAgICAgIGRlc3RbMF0gPSAxO1xuICAgICAgZGVzdFsxXSA9IDA7XG4gICAgICBkZXN0WzJdID0gMDtcbiAgICAgIGRlc3RbM10gPSAwO1xuICAgICAgZGVzdFs0XSA9IDA7XG4gICAgICBkZXN0WzVdID0gMTtcbiAgICAgIGRlc3RbNl0gPSAwO1xuICAgICAgZGVzdFs3XSA9IDA7XG4gICAgICBkZXN0WzhdID0gMDtcbiAgICAgIGRlc3RbOV0gPSAwO1xuICAgICAgZGVzdFsxMF0gPSAxO1xuICAgICAgZGVzdFsxMV0gPSAwO1xuICAgICAgZGVzdFsxMl0gPSAwO1xuICAgICAgZGVzdFsxM10gPSAwO1xuICAgICAgZGVzdFsxNF0gPSAwO1xuICAgICAgZGVzdFsxNV0gPSAxO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIFRyYW5zcG9zZXMgYSBtYXQ0IChmbGlwcyB0aGUgdmFsdWVzIG92ZXIgdGhlIGRpYWdvbmFsKVxuICAgKlxuICAgKiBAcGFyYW0ge21hdDR9IG1hdCBtYXQ0IHRvIHRyYW5zcG9zZVxuICAgKiBAcGFyYW0ge21hdDR9IFtkZXN0XSBtYXQ0IHJlY2VpdmluZyB0cmFuc3Bvc2VkIHZhbHVlcy4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byBtYXRcbiAgICpcbiAgICogQHBhcmFtIHttYXQ0fSBkZXN0IGlzIHNwZWNpZmllZCwgbWF0IG90aGVyd2lzZVxuICAgKi9cbiAgbWF0NC50cmFuc3Bvc2UgPSBmdW5jdGlvbiAobWF0LCBkZXN0KSB7XG4gICAgICAvLyBJZiB3ZSBhcmUgdHJhbnNwb3Npbmcgb3Vyc2VsdmVzIHdlIGNhbiBza2lwIGEgZmV3IHN0ZXBzIGJ1dCBoYXZlIHRvIGNhY2hlIHNvbWUgdmFsdWVzXG4gICAgICBpZiAoIWRlc3QgfHwgbWF0ID09PSBkZXN0KSB7XG4gICAgICAgICAgdmFyIGEwMSA9IG1hdFsxXSwgYTAyID0gbWF0WzJdLCBhMDMgPSBtYXRbM10sXG4gICAgICAgICAgICAgIGExMiA9IG1hdFs2XSwgYTEzID0gbWF0WzddLFxuICAgICAgICAgICAgICBhMjMgPSBtYXRbMTFdO1xuXG4gICAgICAgICAgbWF0WzFdID0gbWF0WzRdO1xuICAgICAgICAgIG1hdFsyXSA9IG1hdFs4XTtcbiAgICAgICAgICBtYXRbM10gPSBtYXRbMTJdO1xuICAgICAgICAgIG1hdFs0XSA9IGEwMTtcbiAgICAgICAgICBtYXRbNl0gPSBtYXRbOV07XG4gICAgICAgICAgbWF0WzddID0gbWF0WzEzXTtcbiAgICAgICAgICBtYXRbOF0gPSBhMDI7XG4gICAgICAgICAgbWF0WzldID0gYTEyO1xuICAgICAgICAgIG1hdFsxMV0gPSBtYXRbMTRdO1xuICAgICAgICAgIG1hdFsxMl0gPSBhMDM7XG4gICAgICAgICAgbWF0WzEzXSA9IGExMztcbiAgICAgICAgICBtYXRbMTRdID0gYTIzO1xuICAgICAgICAgIHJldHVybiBtYXQ7XG4gICAgICB9XG5cbiAgICAgIGRlc3RbMF0gPSBtYXRbMF07XG4gICAgICBkZXN0WzFdID0gbWF0WzRdO1xuICAgICAgZGVzdFsyXSA9IG1hdFs4XTtcbiAgICAgIGRlc3RbM10gPSBtYXRbMTJdO1xuICAgICAgZGVzdFs0XSA9IG1hdFsxXTtcbiAgICAgIGRlc3RbNV0gPSBtYXRbNV07XG4gICAgICBkZXN0WzZdID0gbWF0WzldO1xuICAgICAgZGVzdFs3XSA9IG1hdFsxM107XG4gICAgICBkZXN0WzhdID0gbWF0WzJdO1xuICAgICAgZGVzdFs5XSA9IG1hdFs2XTtcbiAgICAgIGRlc3RbMTBdID0gbWF0WzEwXTtcbiAgICAgIGRlc3RbMTFdID0gbWF0WzE0XTtcbiAgICAgIGRlc3RbMTJdID0gbWF0WzNdO1xuICAgICAgZGVzdFsxM10gPSBtYXRbN107XG4gICAgICBkZXN0WzE0XSA9IG1hdFsxMV07XG4gICAgICBkZXN0WzE1XSA9IG1hdFsxNV07XG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgZGV0ZXJtaW5hbnQgb2YgYSBtYXQ0XG4gICAqXG4gICAqIEBwYXJhbSB7bWF0NH0gbWF0IG1hdDQgdG8gY2FsY3VsYXRlIGRldGVybWluYW50IG9mXG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IGRldGVybWluYW50IG9mIG1hdFxuICAgKi9cbiAgbWF0NC5kZXRlcm1pbmFudCA9IGZ1bmN0aW9uIChtYXQpIHtcbiAgICAgIC8vIENhY2hlIHRoZSBtYXRyaXggdmFsdWVzIChtYWtlcyBmb3IgaHVnZSBzcGVlZCBpbmNyZWFzZXMhKVxuICAgICAgdmFyIGEwMCA9IG1hdFswXSwgYTAxID0gbWF0WzFdLCBhMDIgPSBtYXRbMl0sIGEwMyA9IG1hdFszXSxcbiAgICAgICAgICBhMTAgPSBtYXRbNF0sIGExMSA9IG1hdFs1XSwgYTEyID0gbWF0WzZdLCBhMTMgPSBtYXRbN10sXG4gICAgICAgICAgYTIwID0gbWF0WzhdLCBhMjEgPSBtYXRbOV0sIGEyMiA9IG1hdFsxMF0sIGEyMyA9IG1hdFsxMV0sXG4gICAgICAgICAgYTMwID0gbWF0WzEyXSwgYTMxID0gbWF0WzEzXSwgYTMyID0gbWF0WzE0XSwgYTMzID0gbWF0WzE1XTtcblxuICAgICAgcmV0dXJuIChhMzAgKiBhMjEgKiBhMTIgKiBhMDMgLSBhMjAgKiBhMzEgKiBhMTIgKiBhMDMgLSBhMzAgKiBhMTEgKiBhMjIgKiBhMDMgKyBhMTAgKiBhMzEgKiBhMjIgKiBhMDMgK1xuICAgICAgICAgICAgICBhMjAgKiBhMTEgKiBhMzIgKiBhMDMgLSBhMTAgKiBhMjEgKiBhMzIgKiBhMDMgLSBhMzAgKiBhMjEgKiBhMDIgKiBhMTMgKyBhMjAgKiBhMzEgKiBhMDIgKiBhMTMgK1xuICAgICAgICAgICAgICBhMzAgKiBhMDEgKiBhMjIgKiBhMTMgLSBhMDAgKiBhMzEgKiBhMjIgKiBhMTMgLSBhMjAgKiBhMDEgKiBhMzIgKiBhMTMgKyBhMDAgKiBhMjEgKiBhMzIgKiBhMTMgK1xuICAgICAgICAgICAgICBhMzAgKiBhMTEgKiBhMDIgKiBhMjMgLSBhMTAgKiBhMzEgKiBhMDIgKiBhMjMgLSBhMzAgKiBhMDEgKiBhMTIgKiBhMjMgKyBhMDAgKiBhMzEgKiBhMTIgKiBhMjMgK1xuICAgICAgICAgICAgICBhMTAgKiBhMDEgKiBhMzIgKiBhMjMgLSBhMDAgKiBhMTEgKiBhMzIgKiBhMjMgLSBhMjAgKiBhMTEgKiBhMDIgKiBhMzMgKyBhMTAgKiBhMjEgKiBhMDIgKiBhMzMgK1xuICAgICAgICAgICAgICBhMjAgKiBhMDEgKiBhMTIgKiBhMzMgLSBhMDAgKiBhMjEgKiBhMTIgKiBhMzMgLSBhMTAgKiBhMDEgKiBhMjIgKiBhMzMgKyBhMDAgKiBhMTEgKiBhMjIgKiBhMzMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIG1hdHJpeCBvZiBhIG1hdDRcbiAgICpcbiAgICogQHBhcmFtIHttYXQ0fSBtYXQgbWF0NCB0byBjYWxjdWxhdGUgaW52ZXJzZSBvZlxuICAgKiBAcGFyYW0ge21hdDR9IFtkZXN0XSBtYXQ0IHJlY2VpdmluZyBpbnZlcnNlIG1hdHJpeC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byBtYXRcbiAgICpcbiAgICogQHBhcmFtIHttYXQ0fSBkZXN0IGlzIHNwZWNpZmllZCwgbWF0IG90aGVyd2lzZSwgbnVsbCBpZiBtYXRyaXggY2Fubm90IGJlIGludmVydGVkXG4gICAqL1xuICBtYXQ0LmludmVyc2UgPSBmdW5jdGlvbiAobWF0LCBkZXN0KSB7XG4gICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IG1hdDsgfVxuXG4gICAgICAvLyBDYWNoZSB0aGUgbWF0cml4IHZhbHVlcyAobWFrZXMgZm9yIGh1Z2Ugc3BlZWQgaW5jcmVhc2VzISlcbiAgICAgIHZhciBhMDAgPSBtYXRbMF0sIGEwMSA9IG1hdFsxXSwgYTAyID0gbWF0WzJdLCBhMDMgPSBtYXRbM10sXG4gICAgICAgICAgYTEwID0gbWF0WzRdLCBhMTEgPSBtYXRbNV0sIGExMiA9IG1hdFs2XSwgYTEzID0gbWF0WzddLFxuICAgICAgICAgIGEyMCA9IG1hdFs4XSwgYTIxID0gbWF0WzldLCBhMjIgPSBtYXRbMTBdLCBhMjMgPSBtYXRbMTFdLFxuICAgICAgICAgIGEzMCA9IG1hdFsxMl0sIGEzMSA9IG1hdFsxM10sIGEzMiA9IG1hdFsxNF0sIGEzMyA9IG1hdFsxNV0sXG5cbiAgICAgICAgICBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTAsXG4gICAgICAgICAgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwLFxuICAgICAgICAgIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMCxcbiAgICAgICAgICBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTEsXG4gICAgICAgICAgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExLFxuICAgICAgICAgIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMixcbiAgICAgICAgICBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzAsXG4gICAgICAgICAgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwLFxuICAgICAgICAgIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMCxcbiAgICAgICAgICBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzEsXG4gICAgICAgICAgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxLFxuICAgICAgICAgIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMixcblxuICAgICAgICAgIGQgPSAoYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2KSxcbiAgICAgICAgICBpbnZEZXQ7XG5cbiAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gICAgICAgICAgaWYgKCFkKSB7IHJldHVybiBudWxsOyB9XG4gICAgICAgICAgaW52RGV0ID0gMSAvIGQ7XG5cbiAgICAgIGRlc3RbMF0gPSAoYTExICogYjExIC0gYTEyICogYjEwICsgYTEzICogYjA5KSAqIGludkRldDtcbiAgICAgIGRlc3RbMV0gPSAoLWEwMSAqIGIxMSArIGEwMiAqIGIxMCAtIGEwMyAqIGIwOSkgKiBpbnZEZXQ7XG4gICAgICBkZXN0WzJdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBpbnZEZXQ7XG4gICAgICBkZXN0WzNdID0gKC1hMjEgKiBiMDUgKyBhMjIgKiBiMDQgLSBhMjMgKiBiMDMpICogaW52RGV0O1xuICAgICAgZGVzdFs0XSA9ICgtYTEwICogYjExICsgYTEyICogYjA4IC0gYTEzICogYjA3KSAqIGludkRldDtcbiAgICAgIGRlc3RbNV0gPSAoYTAwICogYjExIC0gYTAyICogYjA4ICsgYTAzICogYjA3KSAqIGludkRldDtcbiAgICAgIGRlc3RbNl0gPSAoLWEzMCAqIGIwNSArIGEzMiAqIGIwMiAtIGEzMyAqIGIwMSkgKiBpbnZEZXQ7XG4gICAgICBkZXN0WzddID0gKGEyMCAqIGIwNSAtIGEyMiAqIGIwMiArIGEyMyAqIGIwMSkgKiBpbnZEZXQ7XG4gICAgICBkZXN0WzhdID0gKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBpbnZEZXQ7XG4gICAgICBkZXN0WzldID0gKC1hMDAgKiBiMTAgKyBhMDEgKiBiMDggLSBhMDMgKiBiMDYpICogaW52RGV0O1xuICAgICAgZGVzdFsxMF0gPSAoYTMwICogYjA0IC0gYTMxICogYjAyICsgYTMzICogYjAwKSAqIGludkRldDtcbiAgICAgIGRlc3RbMTFdID0gKC1hMjAgKiBiMDQgKyBhMjEgKiBiMDIgLSBhMjMgKiBiMDApICogaW52RGV0O1xuICAgICAgZGVzdFsxMl0gPSAoLWExMCAqIGIwOSArIGExMSAqIGIwNyAtIGExMiAqIGIwNikgKiBpbnZEZXQ7XG4gICAgICBkZXN0WzEzXSA9IChhMDAgKiBiMDkgLSBhMDEgKiBiMDcgKyBhMDIgKiBiMDYpICogaW52RGV0O1xuICAgICAgZGVzdFsxNF0gPSAoLWEzMCAqIGIwMyArIGEzMSAqIGIwMSAtIGEzMiAqIGIwMCkgKiBpbnZEZXQ7XG4gICAgICBkZXN0WzE1XSA9IChhMjAgKiBiMDMgLSBhMjEgKiBiMDEgKyBhMjIgKiBiMDApICogaW52RGV0O1xuXG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogQ29waWVzIHRoZSB1cHBlciAzeDMgZWxlbWVudHMgb2YgYSBtYXQ0IGludG8gYW5vdGhlciBtYXQ0XG4gICAqXG4gICAqIEBwYXJhbSB7bWF0NH0gbWF0IG1hdDQgY29udGFpbmluZyB2YWx1ZXMgdG8gY29weVxuICAgKiBAcGFyYW0ge21hdDR9IFtkZXN0XSBtYXQ0IHJlY2VpdmluZyBjb3BpZWQgdmFsdWVzXG4gICAqXG4gICAqIEByZXR1cm5zIHttYXQ0fSBkZXN0IGlzIHNwZWNpZmllZCwgYSBuZXcgbWF0NCBvdGhlcndpc2VcbiAgICovXG4gIG1hdDQudG9Sb3RhdGlvbk1hdCA9IGZ1bmN0aW9uIChtYXQsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gbWF0NC5jcmVhdGUoKTsgfVxuXG4gICAgICBkZXN0WzBdID0gbWF0WzBdO1xuICAgICAgZGVzdFsxXSA9IG1hdFsxXTtcbiAgICAgIGRlc3RbMl0gPSBtYXRbMl07XG4gICAgICBkZXN0WzNdID0gbWF0WzNdO1xuICAgICAgZGVzdFs0XSA9IG1hdFs0XTtcbiAgICAgIGRlc3RbNV0gPSBtYXRbNV07XG4gICAgICBkZXN0WzZdID0gbWF0WzZdO1xuICAgICAgZGVzdFs3XSA9IG1hdFs3XTtcbiAgICAgIGRlc3RbOF0gPSBtYXRbOF07XG4gICAgICBkZXN0WzldID0gbWF0WzldO1xuICAgICAgZGVzdFsxMF0gPSBtYXRbMTBdO1xuICAgICAgZGVzdFsxMV0gPSBtYXRbMTFdO1xuICAgICAgZGVzdFsxMl0gPSAwO1xuICAgICAgZGVzdFsxM10gPSAwO1xuICAgICAgZGVzdFsxNF0gPSAwO1xuICAgICAgZGVzdFsxNV0gPSAxO1xuXG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogQ29waWVzIHRoZSB1cHBlciAzeDMgZWxlbWVudHMgb2YgYSBtYXQ0IGludG8gYSBtYXQzXG4gICAqXG4gICAqIEBwYXJhbSB7bWF0NH0gbWF0IG1hdDQgY29udGFpbmluZyB2YWx1ZXMgdG8gY29weVxuICAgKiBAcGFyYW0ge21hdDN9IFtkZXN0XSBtYXQzIHJlY2VpdmluZyBjb3BpZWQgdmFsdWVzXG4gICAqXG4gICAqIEByZXR1cm5zIHttYXQzfSBkZXN0IGlzIHNwZWNpZmllZCwgYSBuZXcgbWF0MyBvdGhlcndpc2VcbiAgICovXG4gIG1hdDQudG9NYXQzID0gZnVuY3Rpb24gKG1hdCwgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBtYXQzLmNyZWF0ZSgpOyB9XG5cbiAgICAgIGRlc3RbMF0gPSBtYXRbMF07XG4gICAgICBkZXN0WzFdID0gbWF0WzFdO1xuICAgICAgZGVzdFsyXSA9IG1hdFsyXTtcbiAgICAgIGRlc3RbM10gPSBtYXRbNF07XG4gICAgICBkZXN0WzRdID0gbWF0WzVdO1xuICAgICAgZGVzdFs1XSA9IG1hdFs2XTtcbiAgICAgIGRlc3RbNl0gPSBtYXRbOF07XG4gICAgICBkZXN0WzddID0gbWF0WzldO1xuICAgICAgZGVzdFs4XSA9IG1hdFsxMF07XG5cbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIG9mIHRoZSB1cHBlciAzeDMgZWxlbWVudHMgb2YgYSBtYXQ0IGFuZCBjb3BpZXMgdGhlIHJlc3VsdCBpbnRvIGEgbWF0M1xuICAgKiBUaGUgcmVzdWx0aW5nIG1hdHJpeCBpcyB1c2VmdWwgZm9yIGNhbGN1bGF0aW5nIHRyYW5zZm9ybWVkIG5vcm1hbHNcbiAgICpcbiAgICogUGFyYW1zOlxuICAgKiBAcGFyYW0ge21hdDR9IG1hdCBtYXQ0IGNvbnRhaW5pbmcgdmFsdWVzIHRvIGludmVydCBhbmQgY29weVxuICAgKiBAcGFyYW0ge21hdDN9IFtkZXN0XSBtYXQzIHJlY2VpdmluZyB2YWx1ZXNcbiAgICpcbiAgICogQHJldHVybnMge21hdDN9IGRlc3QgaXMgc3BlY2lmaWVkLCBhIG5ldyBtYXQzIG90aGVyd2lzZSwgbnVsbCBpZiB0aGUgbWF0cml4IGNhbm5vdCBiZSBpbnZlcnRlZFxuICAgKi9cbiAgbWF0NC50b0ludmVyc2VNYXQzID0gZnVuY3Rpb24gKG1hdCwgZGVzdCkge1xuICAgICAgLy8gQ2FjaGUgdGhlIG1hdHJpeCB2YWx1ZXMgKG1ha2VzIGZvciBodWdlIHNwZWVkIGluY3JlYXNlcyEpXG4gICAgICB2YXIgYTAwID0gbWF0WzBdLCBhMDEgPSBtYXRbMV0sIGEwMiA9IG1hdFsyXSxcbiAgICAgICAgICBhMTAgPSBtYXRbNF0sIGExMSA9IG1hdFs1XSwgYTEyID0gbWF0WzZdLFxuICAgICAgICAgIGEyMCA9IG1hdFs4XSwgYTIxID0gbWF0WzldLCBhMjIgPSBtYXRbMTBdLFxuXG4gICAgICAgICAgYjAxID0gYTIyICogYTExIC0gYTEyICogYTIxLFxuICAgICAgICAgIGIxMSA9IC1hMjIgKiBhMTAgKyBhMTIgKiBhMjAsXG4gICAgICAgICAgYjIxID0gYTIxICogYTEwIC0gYTExICogYTIwLFxuXG4gICAgICAgICAgZCA9IGEwMCAqIGIwMSArIGEwMSAqIGIxMSArIGEwMiAqIGIyMSxcbiAgICAgICAgICBpZDtcblxuICAgICAgaWYgKCFkKSB7IHJldHVybiBudWxsOyB9XG4gICAgICBpZCA9IDEgLyBkO1xuXG4gICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IG1hdDMuY3JlYXRlKCk7IH1cblxuICAgICAgZGVzdFswXSA9IGIwMSAqIGlkO1xuICAgICAgZGVzdFsxXSA9ICgtYTIyICogYTAxICsgYTAyICogYTIxKSAqIGlkO1xuICAgICAgZGVzdFsyXSA9IChhMTIgKiBhMDEgLSBhMDIgKiBhMTEpICogaWQ7XG4gICAgICBkZXN0WzNdID0gYjExICogaWQ7XG4gICAgICBkZXN0WzRdID0gKGEyMiAqIGEwMCAtIGEwMiAqIGEyMCkgKiBpZDtcbiAgICAgIGRlc3RbNV0gPSAoLWExMiAqIGEwMCArIGEwMiAqIGExMCkgKiBpZDtcbiAgICAgIGRlc3RbNl0gPSBiMjEgKiBpZDtcbiAgICAgIGRlc3RbN10gPSAoLWEyMSAqIGEwMCArIGEwMSAqIGEyMCkgKiBpZDtcbiAgICAgIGRlc3RbOF0gPSAoYTExICogYTAwIC0gYTAxICogYTEwKSAqIGlkO1xuXG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogUGVyZm9ybXMgYSBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgICpcbiAgICogQHBhcmFtIHttYXQ0fSBtYXQgRmlyc3Qgb3BlcmFuZFxuICAgKiBAcGFyYW0ge21hdDR9IG1hdDIgU2Vjb25kIG9wZXJhbmRcbiAgICogQHBhcmFtIHttYXQ0fSBbZGVzdF0gbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byBtYXRcbiAgICpcbiAgICogQHJldHVybnMge21hdDR9IGRlc3QgaWYgc3BlY2lmaWVkLCBtYXQgb3RoZXJ3aXNlXG4gICAqL1xuICBtYXQ0Lm11bHRpcGx5ID0gZnVuY3Rpb24gKG1hdCwgbWF0MiwgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBtYXQ7IH1cblxuICAgICAgLy8gQ2FjaGUgdGhlIG1hdHJpeCB2YWx1ZXMgKG1ha2VzIGZvciBodWdlIHNwZWVkIGluY3JlYXNlcyEpXG4gICAgICB2YXIgYTAwID0gbWF0WyAwXSwgYTAxID0gbWF0WyAxXSwgYTAyID0gbWF0WyAyXSwgYTAzID0gbWF0WzNdO1xuICAgICAgdmFyIGExMCA9IG1hdFsgNF0sIGExMSA9IG1hdFsgNV0sIGExMiA9IG1hdFsgNl0sIGExMyA9IG1hdFs3XTtcbiAgICAgIHZhciBhMjAgPSBtYXRbIDhdLCBhMjEgPSBtYXRbIDldLCBhMjIgPSBtYXRbMTBdLCBhMjMgPSBtYXRbMTFdO1xuICAgICAgdmFyIGEzMCA9IG1hdFsxMl0sIGEzMSA9IG1hdFsxM10sIGEzMiA9IG1hdFsxNF0sIGEzMyA9IG1hdFsxNV07XG5cbiAgICAgIC8vIENhY2hlIG9ubHkgdGhlIGN1cnJlbnQgbGluZSBvZiB0aGUgc2Vjb25kIG1hdHJpeFxuICAgICAgdmFyIGIwICA9IG1hdDJbMF0sIGIxID0gbWF0MlsxXSwgYjIgPSBtYXQyWzJdLCBiMyA9IG1hdDJbM107ICBcbiAgICAgIGRlc3RbMF0gPSBiMCphMDAgKyBiMSphMTAgKyBiMiphMjAgKyBiMyphMzA7XG4gICAgICBkZXN0WzFdID0gYjAqYTAxICsgYjEqYTExICsgYjIqYTIxICsgYjMqYTMxO1xuICAgICAgZGVzdFsyXSA9IGIwKmEwMiArIGIxKmExMiArIGIyKmEyMiArIGIzKmEzMjtcbiAgICAgIGRlc3RbM10gPSBiMCphMDMgKyBiMSphMTMgKyBiMiphMjMgKyBiMyphMzM7XG5cbiAgICAgIGIwID0gbWF0Mls0XTtcbiAgICAgIGIxID0gbWF0Mls1XTtcbiAgICAgIGIyID0gbWF0Mls2XTtcbiAgICAgIGIzID0gbWF0Mls3XTtcbiAgICAgIGRlc3RbNF0gPSBiMCphMDAgKyBiMSphMTAgKyBiMiphMjAgKyBiMyphMzA7XG4gICAgICBkZXN0WzVdID0gYjAqYTAxICsgYjEqYTExICsgYjIqYTIxICsgYjMqYTMxO1xuICAgICAgZGVzdFs2XSA9IGIwKmEwMiArIGIxKmExMiArIGIyKmEyMiArIGIzKmEzMjtcbiAgICAgIGRlc3RbN10gPSBiMCphMDMgKyBiMSphMTMgKyBiMiphMjMgKyBiMyphMzM7XG5cbiAgICAgIGIwID0gbWF0Mls4XTtcbiAgICAgIGIxID0gbWF0Mls5XTtcbiAgICAgIGIyID0gbWF0MlsxMF07XG4gICAgICBiMyA9IG1hdDJbMTFdO1xuICAgICAgZGVzdFs4XSA9IGIwKmEwMCArIGIxKmExMCArIGIyKmEyMCArIGIzKmEzMDtcbiAgICAgIGRlc3RbOV0gPSBiMCphMDEgKyBiMSphMTEgKyBiMiphMjEgKyBiMyphMzE7XG4gICAgICBkZXN0WzEwXSA9IGIwKmEwMiArIGIxKmExMiArIGIyKmEyMiArIGIzKmEzMjtcbiAgICAgIGRlc3RbMTFdID0gYjAqYTAzICsgYjEqYTEzICsgYjIqYTIzICsgYjMqYTMzO1xuXG4gICAgICBiMCA9IG1hdDJbMTJdO1xuICAgICAgYjEgPSBtYXQyWzEzXTtcbiAgICAgIGIyID0gbWF0MlsxNF07XG4gICAgICBiMyA9IG1hdDJbMTVdO1xuICAgICAgZGVzdFsxMl0gPSBiMCphMDAgKyBiMSphMTAgKyBiMiphMjAgKyBiMyphMzA7XG4gICAgICBkZXN0WzEzXSA9IGIwKmEwMSArIGIxKmExMSArIGIyKmEyMSArIGIzKmEzMTtcbiAgICAgIGRlc3RbMTRdID0gYjAqYTAyICsgYjEqYTEyICsgYjIqYTIyICsgYjMqYTMyO1xuICAgICAgZGVzdFsxNV0gPSBiMCphMDMgKyBiMSphMTMgKyBiMiphMjMgKyBiMyphMzM7XG5cbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBUcmFuc2Zvcm1zIGEgdmVjMyB3aXRoIHRoZSBnaXZlbiBtYXRyaXhcbiAgICogNHRoIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcbiAgICpcbiAgICogQHBhcmFtIHttYXQ0fSBtYXQgbWF0NCB0byB0cmFuc2Zvcm0gdGhlIHZlY3RvciB3aXRoXG4gICAqIEBwYXJhbSB7dmVjM30gdmVjIHZlYzMgdG8gdHJhbnNmb3JtXG4gICAqIEBwYXJhbSB7dmVjM30gW2Rlc3RdIHZlYzMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gdmVjXG4gICAqXG4gICAqIEByZXR1cm5zIHt2ZWMzfSBkZXN0IGlmIHNwZWNpZmllZCwgdmVjIG90aGVyd2lzZVxuICAgKi9cbiAgbWF0NC5tdWx0aXBseVZlYzMgPSBmdW5jdGlvbiAobWF0LCB2ZWMsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gdmVjOyB9XG5cbiAgICAgIHZhciB4ID0gdmVjWzBdLCB5ID0gdmVjWzFdLCB6ID0gdmVjWzJdO1xuXG4gICAgICBkZXN0WzBdID0gbWF0WzBdICogeCArIG1hdFs0XSAqIHkgKyBtYXRbOF0gKiB6ICsgbWF0WzEyXTtcbiAgICAgIGRlc3RbMV0gPSBtYXRbMV0gKiB4ICsgbWF0WzVdICogeSArIG1hdFs5XSAqIHogKyBtYXRbMTNdO1xuICAgICAgZGVzdFsyXSA9IG1hdFsyXSAqIHggKyBtYXRbNl0gKiB5ICsgbWF0WzEwXSAqIHogKyBtYXRbMTRdO1xuXG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogVHJhbnNmb3JtcyBhIHZlYzQgd2l0aCB0aGUgZ2l2ZW4gbWF0cml4XG4gICAqXG4gICAqIEBwYXJhbSB7bWF0NH0gbWF0IG1hdDQgdG8gdHJhbnNmb3JtIHRoZSB2ZWN0b3Igd2l0aFxuICAgKiBAcGFyYW0ge3ZlYzR9IHZlYyB2ZWM0IHRvIHRyYW5zZm9ybVxuICAgKiBAcGFyYW0ge3ZlYzR9IFtkZXN0XSB2ZWM0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHZlY1xuICAgKlxuICAgKiBAcmV0dXJucyB7dmVjNH0gZGVzdCBpZiBzcGVjaWZpZWQsIHZlYyBvdGhlcndpc2VcbiAgICovXG4gIG1hdDQubXVsdGlwbHlWZWM0ID0gZnVuY3Rpb24gKG1hdCwgdmVjLCBkZXN0KSB7XG4gICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IHZlYzsgfVxuXG4gICAgICB2YXIgeCA9IHZlY1swXSwgeSA9IHZlY1sxXSwgeiA9IHZlY1syXSwgdyA9IHZlY1szXTtcblxuICAgICAgZGVzdFswXSA9IG1hdFswXSAqIHggKyBtYXRbNF0gKiB5ICsgbWF0WzhdICogeiArIG1hdFsxMl0gKiB3O1xuICAgICAgZGVzdFsxXSA9IG1hdFsxXSAqIHggKyBtYXRbNV0gKiB5ICsgbWF0WzldICogeiArIG1hdFsxM10gKiB3O1xuICAgICAgZGVzdFsyXSA9IG1hdFsyXSAqIHggKyBtYXRbNl0gKiB5ICsgbWF0WzEwXSAqIHogKyBtYXRbMTRdICogdztcbiAgICAgIGRlc3RbM10gPSBtYXRbM10gKiB4ICsgbWF0WzddICogeSArIG1hdFsxMV0gKiB6ICsgbWF0WzE1XSAqIHc7XG5cbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGVzIGEgbWF0cml4IGJ5IHRoZSBnaXZlbiB2ZWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHttYXQ0fSBtYXQgbWF0NCB0byB0cmFuc2xhdGVcbiAgICogQHBhcmFtIHt2ZWMzfSB2ZWMgdmVjMyBzcGVjaWZ5aW5nIHRoZSB0cmFuc2xhdGlvblxuICAgKiBAcGFyYW0ge21hdDR9IFtkZXN0XSBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIG1hdFxuICAgKlxuICAgKiBAcmV0dXJucyB7bWF0NH0gZGVzdCBpZiBzcGVjaWZpZWQsIG1hdCBvdGhlcndpc2VcbiAgICovXG4gIG1hdDQudHJhbnNsYXRlID0gZnVuY3Rpb24gKG1hdCwgdmVjLCBkZXN0KSB7XG4gICAgICB2YXIgeCA9IHZlY1swXSwgeSA9IHZlY1sxXSwgeiA9IHZlY1syXSxcbiAgICAgICAgICBhMDAsIGEwMSwgYTAyLCBhMDMsXG4gICAgICAgICAgYTEwLCBhMTEsIGExMiwgYTEzLFxuICAgICAgICAgIGEyMCwgYTIxLCBhMjIsIGEyMztcblxuICAgICAgaWYgKCFkZXN0IHx8IG1hdCA9PT0gZGVzdCkge1xuICAgICAgICAgIG1hdFsxMl0gPSBtYXRbMF0gKiB4ICsgbWF0WzRdICogeSArIG1hdFs4XSAqIHogKyBtYXRbMTJdO1xuICAgICAgICAgIG1hdFsxM10gPSBtYXRbMV0gKiB4ICsgbWF0WzVdICogeSArIG1hdFs5XSAqIHogKyBtYXRbMTNdO1xuICAgICAgICAgIG1hdFsxNF0gPSBtYXRbMl0gKiB4ICsgbWF0WzZdICogeSArIG1hdFsxMF0gKiB6ICsgbWF0WzE0XTtcbiAgICAgICAgICBtYXRbMTVdID0gbWF0WzNdICogeCArIG1hdFs3XSAqIHkgKyBtYXRbMTFdICogeiArIG1hdFsxNV07XG4gICAgICAgICAgcmV0dXJuIG1hdDtcbiAgICAgIH1cblxuICAgICAgYTAwID0gbWF0WzBdOyBhMDEgPSBtYXRbMV07IGEwMiA9IG1hdFsyXTsgYTAzID0gbWF0WzNdO1xuICAgICAgYTEwID0gbWF0WzRdOyBhMTEgPSBtYXRbNV07IGExMiA9IG1hdFs2XTsgYTEzID0gbWF0WzddO1xuICAgICAgYTIwID0gbWF0WzhdOyBhMjEgPSBtYXRbOV07IGEyMiA9IG1hdFsxMF07IGEyMyA9IG1hdFsxMV07XG5cbiAgICAgIGRlc3RbMF0gPSBhMDA7IGRlc3RbMV0gPSBhMDE7IGRlc3RbMl0gPSBhMDI7IGRlc3RbM10gPSBhMDM7XG4gICAgICBkZXN0WzRdID0gYTEwOyBkZXN0WzVdID0gYTExOyBkZXN0WzZdID0gYTEyOyBkZXN0WzddID0gYTEzO1xuICAgICAgZGVzdFs4XSA9IGEyMDsgZGVzdFs5XSA9IGEyMTsgZGVzdFsxMF0gPSBhMjI7IGRlc3RbMTFdID0gYTIzO1xuXG4gICAgICBkZXN0WzEyXSA9IGEwMCAqIHggKyBhMTAgKiB5ICsgYTIwICogeiArIG1hdFsxMl07XG4gICAgICBkZXN0WzEzXSA9IGEwMSAqIHggKyBhMTEgKiB5ICsgYTIxICogeiArIG1hdFsxM107XG4gICAgICBkZXN0WzE0XSA9IGEwMiAqIHggKyBhMTIgKiB5ICsgYTIyICogeiArIG1hdFsxNF07XG4gICAgICBkZXN0WzE1XSA9IGEwMyAqIHggKyBhMTMgKiB5ICsgYTIzICogeiArIG1hdFsxNV07XG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogU2NhbGVzIGEgbWF0cml4IGJ5IHRoZSBnaXZlbiB2ZWN0b3JcbiAgICpcbiAgICogQHBhcmFtIHttYXQ0fSBtYXQgbWF0NCB0byBzY2FsZVxuICAgKiBAcGFyYW0ge3ZlYzN9IHZlYyB2ZWMzIHNwZWNpZnlpbmcgdGhlIHNjYWxlIGZvciBlYWNoIGF4aXNcbiAgICogQHBhcmFtIHttYXQ0fSBbZGVzdF0gbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byBtYXRcbiAgICpcbiAgICogQHBhcmFtIHttYXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgbWF0IG90aGVyd2lzZVxuICAgKi9cbiAgbWF0NC5zY2FsZSA9IGZ1bmN0aW9uIChtYXQsIHZlYywgZGVzdCkge1xuICAgICAgdmFyIHggPSB2ZWNbMF0sIHkgPSB2ZWNbMV0sIHogPSB2ZWNbMl07XG5cbiAgICAgIGlmICghZGVzdCB8fCBtYXQgPT09IGRlc3QpIHtcbiAgICAgICAgICBtYXRbMF0gKj0geDtcbiAgICAgICAgICBtYXRbMV0gKj0geDtcbiAgICAgICAgICBtYXRbMl0gKj0geDtcbiAgICAgICAgICBtYXRbM10gKj0geDtcbiAgICAgICAgICBtYXRbNF0gKj0geTtcbiAgICAgICAgICBtYXRbNV0gKj0geTtcbiAgICAgICAgICBtYXRbNl0gKj0geTtcbiAgICAgICAgICBtYXRbN10gKj0geTtcbiAgICAgICAgICBtYXRbOF0gKj0gejtcbiAgICAgICAgICBtYXRbOV0gKj0gejtcbiAgICAgICAgICBtYXRbMTBdICo9IHo7XG4gICAgICAgICAgbWF0WzExXSAqPSB6O1xuICAgICAgICAgIHJldHVybiBtYXQ7XG4gICAgICB9XG5cbiAgICAgIGRlc3RbMF0gPSBtYXRbMF0gKiB4O1xuICAgICAgZGVzdFsxXSA9IG1hdFsxXSAqIHg7XG4gICAgICBkZXN0WzJdID0gbWF0WzJdICogeDtcbiAgICAgIGRlc3RbM10gPSBtYXRbM10gKiB4O1xuICAgICAgZGVzdFs0XSA9IG1hdFs0XSAqIHk7XG4gICAgICBkZXN0WzVdID0gbWF0WzVdICogeTtcbiAgICAgIGRlc3RbNl0gPSBtYXRbNl0gKiB5O1xuICAgICAgZGVzdFs3XSA9IG1hdFs3XSAqIHk7XG4gICAgICBkZXN0WzhdID0gbWF0WzhdICogejtcbiAgICAgIGRlc3RbOV0gPSBtYXRbOV0gKiB6O1xuICAgICAgZGVzdFsxMF0gPSBtYXRbMTBdICogejtcbiAgICAgIGRlc3RbMTFdID0gbWF0WzExXSAqIHo7XG4gICAgICBkZXN0WzEyXSA9IG1hdFsxMl07XG4gICAgICBkZXN0WzEzXSA9IG1hdFsxM107XG4gICAgICBkZXN0WzE0XSA9IG1hdFsxNF07XG4gICAgICBkZXN0WzE1XSA9IG1hdFsxNV07XG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBzcGVjaWZpZWQgYXhpc1xuICAgKiBJZiByb3RhdGluZyBhcm91bmQgYSBwcmltYXJ5IGF4aXMgKFgsWSxaKSBvbmUgb2YgdGhlIHNwZWNpYWxpemVkIHJvdGF0aW9uIGZ1bmN0aW9ucyBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkIGZvciBwZXJmb3JtYW5jZVxuICAgKlxuICAgKiBAcGFyYW0ge21hdDR9IG1hdCBtYXQ0IHRvIHJvdGF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gYW5nbGUgQW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICAgKiBAcGFyYW0ge3ZlYzN9IGF4aXMgdmVjMyByZXByZXNlbnRpbmcgdGhlIGF4aXMgdG8gcm90YXRlIGFyb3VuZFxuICAgKiBAcGFyYW0ge21hdDR9IFtkZXN0XSBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIG1hdFxuICAgKlxuICAgKiBAcmV0dXJucyB7bWF0NH0gZGVzdCBpZiBzcGVjaWZpZWQsIG1hdCBvdGhlcndpc2VcbiAgICovXG4gIG1hdDQucm90YXRlID0gZnVuY3Rpb24gKG1hdCwgYW5nbGUsIGF4aXMsIGRlc3QpIHtcbiAgICAgIHZhciB4ID0gYXhpc1swXSwgeSA9IGF4aXNbMV0sIHogPSBheGlzWzJdLFxuICAgICAgICAgIGxlbiA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopLFxuICAgICAgICAgIHMsIGMsIHQsXG4gICAgICAgICAgYTAwLCBhMDEsIGEwMiwgYTAzLFxuICAgICAgICAgIGExMCwgYTExLCBhMTIsIGExMyxcbiAgICAgICAgICBhMjAsIGEyMSwgYTIyLCBhMjMsXG4gICAgICAgICAgYjAwLCBiMDEsIGIwMixcbiAgICAgICAgICBiMTAsIGIxMSwgYjEyLFxuICAgICAgICAgIGIyMCwgYjIxLCBiMjI7XG5cbiAgICAgIGlmICghbGVuKSB7IHJldHVybiBudWxsOyB9XG4gICAgICBpZiAobGVuICE9PSAxKSB7XG4gICAgICAgICAgbGVuID0gMSAvIGxlbjtcbiAgICAgICAgICB4ICo9IGxlbjtcbiAgICAgICAgICB5ICo9IGxlbjtcbiAgICAgICAgICB6ICo9IGxlbjtcbiAgICAgIH1cblxuICAgICAgcyA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgIGMgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICB0ID0gMSAtIGM7XG5cbiAgICAgIGEwMCA9IG1hdFswXTsgYTAxID0gbWF0WzFdOyBhMDIgPSBtYXRbMl07IGEwMyA9IG1hdFszXTtcbiAgICAgIGExMCA9IG1hdFs0XTsgYTExID0gbWF0WzVdOyBhMTIgPSBtYXRbNl07IGExMyA9IG1hdFs3XTtcbiAgICAgIGEyMCA9IG1hdFs4XTsgYTIxID0gbWF0WzldOyBhMjIgPSBtYXRbMTBdOyBhMjMgPSBtYXRbMTFdO1xuXG4gICAgICAvLyBDb25zdHJ1Y3QgdGhlIGVsZW1lbnRzIG9mIHRoZSByb3RhdGlvbiBtYXRyaXhcbiAgICAgIGIwMCA9IHggKiB4ICogdCArIGM7IGIwMSA9IHkgKiB4ICogdCArIHogKiBzOyBiMDIgPSB6ICogeCAqIHQgLSB5ICogcztcbiAgICAgIGIxMCA9IHggKiB5ICogdCAtIHogKiBzOyBiMTEgPSB5ICogeSAqIHQgKyBjOyBiMTIgPSB6ICogeSAqIHQgKyB4ICogcztcbiAgICAgIGIyMCA9IHggKiB6ICogdCArIHkgKiBzOyBiMjEgPSB5ICogeiAqIHQgLSB4ICogczsgYjIyID0geiAqIHogKiB0ICsgYztcblxuICAgICAgaWYgKCFkZXN0KSB7XG4gICAgICAgICAgZGVzdCA9IG1hdDtcbiAgICAgIH0gZWxzZSBpZiAobWF0ICE9PSBkZXN0KSB7IC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIGxhc3Qgcm93XG4gICAgICAgICAgZGVzdFsxMl0gPSBtYXRbMTJdO1xuICAgICAgICAgIGRlc3RbMTNdID0gbWF0WzEzXTtcbiAgICAgICAgICBkZXN0WzE0XSA9IG1hdFsxNF07XG4gICAgICAgICAgZGVzdFsxNV0gPSBtYXRbMTVdO1xuICAgICAgfVxuXG4gICAgICAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICAgICAgZGVzdFswXSA9IGEwMCAqIGIwMCArIGExMCAqIGIwMSArIGEyMCAqIGIwMjtcbiAgICAgIGRlc3RbMV0gPSBhMDEgKiBiMDAgKyBhMTEgKiBiMDEgKyBhMjEgKiBiMDI7XG4gICAgICBkZXN0WzJdID0gYTAyICogYjAwICsgYTEyICogYjAxICsgYTIyICogYjAyO1xuICAgICAgZGVzdFszXSA9IGEwMyAqIGIwMCArIGExMyAqIGIwMSArIGEyMyAqIGIwMjtcblxuICAgICAgZGVzdFs0XSA9IGEwMCAqIGIxMCArIGExMCAqIGIxMSArIGEyMCAqIGIxMjtcbiAgICAgIGRlc3RbNV0gPSBhMDEgKiBiMTAgKyBhMTEgKiBiMTEgKyBhMjEgKiBiMTI7XG4gICAgICBkZXN0WzZdID0gYTAyICogYjEwICsgYTEyICogYjExICsgYTIyICogYjEyO1xuICAgICAgZGVzdFs3XSA9IGEwMyAqIGIxMCArIGExMyAqIGIxMSArIGEyMyAqIGIxMjtcblxuICAgICAgZGVzdFs4XSA9IGEwMCAqIGIyMCArIGExMCAqIGIyMSArIGEyMCAqIGIyMjtcbiAgICAgIGRlc3RbOV0gPSBhMDEgKiBiMjAgKyBhMTEgKiBiMjEgKyBhMjEgKiBiMjI7XG4gICAgICBkZXN0WzEwXSA9IGEwMiAqIGIyMCArIGExMiAqIGIyMSArIGEyMiAqIGIyMjtcbiAgICAgIGRlc3RbMTFdID0gYTAzICogYjIwICsgYTEzICogYjIxICsgYTIzICogYjIyO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWCBheGlzXG4gICAqXG4gICAqIEBwYXJhbSB7bWF0NH0gbWF0IG1hdDQgdG8gcm90YXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSBBbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gICAqIEBwYXJhbSB7bWF0NH0gW2Rlc3RdIG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gbWF0XG4gICAqXG4gICAqIEByZXR1cm5zIHttYXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgbWF0IG90aGVyd2lzZVxuICAgKi9cbiAgbWF0NC5yb3RhdGVYID0gZnVuY3Rpb24gKG1hdCwgYW5nbGUsIGRlc3QpIHtcbiAgICAgIHZhciBzID0gTWF0aC5zaW4oYW5nbGUpLFxuICAgICAgICAgIGMgPSBNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgICAgYTEwID0gbWF0WzRdLFxuICAgICAgICAgIGExMSA9IG1hdFs1XSxcbiAgICAgICAgICBhMTIgPSBtYXRbNl0sXG4gICAgICAgICAgYTEzID0gbWF0WzddLFxuICAgICAgICAgIGEyMCA9IG1hdFs4XSxcbiAgICAgICAgICBhMjEgPSBtYXRbOV0sXG4gICAgICAgICAgYTIyID0gbWF0WzEwXSxcbiAgICAgICAgICBhMjMgPSBtYXRbMTFdO1xuXG4gICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICBkZXN0ID0gbWF0O1xuICAgICAgfSBlbHNlIGlmIChtYXQgIT09IGRlc3QpIHsgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgcm93c1xuICAgICAgICAgIGRlc3RbMF0gPSBtYXRbMF07XG4gICAgICAgICAgZGVzdFsxXSA9IG1hdFsxXTtcbiAgICAgICAgICBkZXN0WzJdID0gbWF0WzJdO1xuICAgICAgICAgIGRlc3RbM10gPSBtYXRbM107XG5cbiAgICAgICAgICBkZXN0WzEyXSA9IG1hdFsxMl07XG4gICAgICAgICAgZGVzdFsxM10gPSBtYXRbMTNdO1xuICAgICAgICAgIGRlc3RbMTRdID0gbWF0WzE0XTtcbiAgICAgICAgICBkZXN0WzE1XSA9IG1hdFsxNV07XG4gICAgICB9XG5cbiAgICAgIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgICAgIGRlc3RbNF0gPSBhMTAgKiBjICsgYTIwICogcztcbiAgICAgIGRlc3RbNV0gPSBhMTEgKiBjICsgYTIxICogcztcbiAgICAgIGRlc3RbNl0gPSBhMTIgKiBjICsgYTIyICogcztcbiAgICAgIGRlc3RbN10gPSBhMTMgKiBjICsgYTIzICogcztcblxuICAgICAgZGVzdFs4XSA9IGExMCAqIC1zICsgYTIwICogYztcbiAgICAgIGRlc3RbOV0gPSBhMTEgKiAtcyArIGEyMSAqIGM7XG4gICAgICBkZXN0WzEwXSA9IGExMiAqIC1zICsgYTIyICogYztcbiAgICAgIGRlc3RbMTFdID0gYTEzICogLXMgKyBhMjMgKiBjO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWSBheGlzXG4gICAqXG4gICAqIEBwYXJhbSB7bWF0NH0gbWF0IG1hdDQgdG8gcm90YXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSBBbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gICAqIEBwYXJhbSB7bWF0NH0gW2Rlc3RdIG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gbWF0XG4gICAqXG4gICAqIEByZXR1cm5zIHttYXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgbWF0IG90aGVyd2lzZVxuICAgKi9cbiAgbWF0NC5yb3RhdGVZID0gZnVuY3Rpb24gKG1hdCwgYW5nbGUsIGRlc3QpIHtcbiAgICAgIHZhciBzID0gTWF0aC5zaW4oYW5nbGUpLFxuICAgICAgICAgIGMgPSBNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgICAgYTAwID0gbWF0WzBdLFxuICAgICAgICAgIGEwMSA9IG1hdFsxXSxcbiAgICAgICAgICBhMDIgPSBtYXRbMl0sXG4gICAgICAgICAgYTAzID0gbWF0WzNdLFxuICAgICAgICAgIGEyMCA9IG1hdFs4XSxcbiAgICAgICAgICBhMjEgPSBtYXRbOV0sXG4gICAgICAgICAgYTIyID0gbWF0WzEwXSxcbiAgICAgICAgICBhMjMgPSBtYXRbMTFdO1xuXG4gICAgICBpZiAoIWRlc3QpIHtcbiAgICAgICAgICBkZXN0ID0gbWF0O1xuICAgICAgfSBlbHNlIGlmIChtYXQgIT09IGRlc3QpIHsgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgcm93c1xuICAgICAgICAgIGRlc3RbNF0gPSBtYXRbNF07XG4gICAgICAgICAgZGVzdFs1XSA9IG1hdFs1XTtcbiAgICAgICAgICBkZXN0WzZdID0gbWF0WzZdO1xuICAgICAgICAgIGRlc3RbN10gPSBtYXRbN107XG5cbiAgICAgICAgICBkZXN0WzEyXSA9IG1hdFsxMl07XG4gICAgICAgICAgZGVzdFsxM10gPSBtYXRbMTNdO1xuICAgICAgICAgIGRlc3RbMTRdID0gbWF0WzE0XTtcbiAgICAgICAgICBkZXN0WzE1XSA9IG1hdFsxNV07XG4gICAgICB9XG5cbiAgICAgIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgICAgIGRlc3RbMF0gPSBhMDAgKiBjICsgYTIwICogLXM7XG4gICAgICBkZXN0WzFdID0gYTAxICogYyArIGEyMSAqIC1zO1xuICAgICAgZGVzdFsyXSA9IGEwMiAqIGMgKyBhMjIgKiAtcztcbiAgICAgIGRlc3RbM10gPSBhMDMgKiBjICsgYTIzICogLXM7XG5cbiAgICAgIGRlc3RbOF0gPSBhMDAgKiBzICsgYTIwICogYztcbiAgICAgIGRlc3RbOV0gPSBhMDEgKiBzICsgYTIxICogYztcbiAgICAgIGRlc3RbMTBdID0gYTAyICogcyArIGEyMiAqIGM7XG4gICAgICBkZXN0WzExXSA9IGEwMyAqIHMgKyBhMjMgKiBjO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWiBheGlzXG4gICAqXG4gICAqIEBwYXJhbSB7bWF0NH0gbWF0IG1hdDQgdG8gcm90YXRlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZSBBbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gICAqIEBwYXJhbSB7bWF0NH0gW2Rlc3RdIG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gbWF0XG4gICAqXG4gICAqIEByZXR1cm5zIHttYXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgbWF0IG90aGVyd2lzZVxuICAgKi9cbiAgbWF0NC5yb3RhdGVaID0gZnVuY3Rpb24gKG1hdCwgYW5nbGUsIGRlc3QpIHtcbiAgICAgIHZhciBzID0gTWF0aC5zaW4oYW5nbGUpLFxuICAgICAgICAgIGMgPSBNYXRoLmNvcyhhbmdsZSksXG4gICAgICAgICAgYTAwID0gbWF0WzBdLFxuICAgICAgICAgIGEwMSA9IG1hdFsxXSxcbiAgICAgICAgICBhMDIgPSBtYXRbMl0sXG4gICAgICAgICAgYTAzID0gbWF0WzNdLFxuICAgICAgICAgIGExMCA9IG1hdFs0XSxcbiAgICAgICAgICBhMTEgPSBtYXRbNV0sXG4gICAgICAgICAgYTEyID0gbWF0WzZdLFxuICAgICAgICAgIGExMyA9IG1hdFs3XTtcblxuICAgICAgaWYgKCFkZXN0KSB7XG4gICAgICAgICAgZGVzdCA9IG1hdDtcbiAgICAgIH0gZWxzZSBpZiAobWF0ICE9PSBkZXN0KSB7IC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIGxhc3Qgcm93XG4gICAgICAgICAgZGVzdFs4XSA9IG1hdFs4XTtcbiAgICAgICAgICBkZXN0WzldID0gbWF0WzldO1xuICAgICAgICAgIGRlc3RbMTBdID0gbWF0WzEwXTtcbiAgICAgICAgICBkZXN0WzExXSA9IG1hdFsxMV07XG5cbiAgICAgICAgICBkZXN0WzEyXSA9IG1hdFsxMl07XG4gICAgICAgICAgZGVzdFsxM10gPSBtYXRbMTNdO1xuICAgICAgICAgIGRlc3RbMTRdID0gbWF0WzE0XTtcbiAgICAgICAgICBkZXN0WzE1XSA9IG1hdFsxNV07XG4gICAgICB9XG5cbiAgICAgIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cbiAgICAgIGRlc3RbMF0gPSBhMDAgKiBjICsgYTEwICogcztcbiAgICAgIGRlc3RbMV0gPSBhMDEgKiBjICsgYTExICogcztcbiAgICAgIGRlc3RbMl0gPSBhMDIgKiBjICsgYTEyICogcztcbiAgICAgIGRlc3RbM10gPSBhMDMgKiBjICsgYTEzICogcztcblxuICAgICAgZGVzdFs0XSA9IGEwMCAqIC1zICsgYTEwICogYztcbiAgICAgIGRlc3RbNV0gPSBhMDEgKiAtcyArIGExMSAqIGM7XG4gICAgICBkZXN0WzZdID0gYTAyICogLXMgKyBhMTIgKiBjO1xuICAgICAgZGVzdFs3XSA9IGEwMyAqIC1zICsgYTEzICogYztcblxuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIGZydXN0dW0gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kc1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGVmdCBMZWZ0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByaWdodCBSaWdodCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICAgKiBAcGFyYW0ge251bWJlcn0gYm90dG9tIEJvdHRvbSBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICAgKiBAcGFyYW0ge251bWJlcn0gdG9wIFRvcCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICAgKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXG4gICAqIEBwYXJhbSB7bWF0NH0gW2Rlc3RdIG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cbiAgICpcbiAgICogQHJldHVybnMge21hdDR9IGRlc3QgaWYgc3BlY2lmaWVkLCBhIG5ldyBtYXQ0IG90aGVyd2lzZVxuICAgKi9cbiAgbWF0NC5mcnVzdHVtID0gZnVuY3Rpb24gKGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyLCBkZXN0KSB7XG4gICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IG1hdDQuY3JlYXRlKCk7IH1cbiAgICAgIHZhciBybCA9IChyaWdodCAtIGxlZnQpLFxuICAgICAgICAgIHRiID0gKHRvcCAtIGJvdHRvbSksXG4gICAgICAgICAgZm4gPSAoZmFyIC0gbmVhcik7XG4gICAgICBkZXN0WzBdID0gKG5lYXIgKiAyKSAvIHJsO1xuICAgICAgZGVzdFsxXSA9IDA7XG4gICAgICBkZXN0WzJdID0gMDtcbiAgICAgIGRlc3RbM10gPSAwO1xuICAgICAgZGVzdFs0XSA9IDA7XG4gICAgICBkZXN0WzVdID0gKG5lYXIgKiAyKSAvIHRiO1xuICAgICAgZGVzdFs2XSA9IDA7XG4gICAgICBkZXN0WzddID0gMDtcbiAgICAgIGRlc3RbOF0gPSAocmlnaHQgKyBsZWZ0KSAvIHJsO1xuICAgICAgZGVzdFs5XSA9ICh0b3AgKyBib3R0b20pIC8gdGI7XG4gICAgICBkZXN0WzEwXSA9IC0oZmFyICsgbmVhcikgLyBmbjtcbiAgICAgIGRlc3RbMTFdID0gLTE7XG4gICAgICBkZXN0WzEyXSA9IDA7XG4gICAgICBkZXN0WzEzXSA9IDA7XG4gICAgICBkZXN0WzE0XSA9IC0oZmFyICogbmVhciAqIDIpIC8gZm47XG4gICAgICBkZXN0WzE1XSA9IDA7XG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmb3Z5IFZlcnRpY2FsIGZpZWxkIG9mIHZpZXdcbiAgICogQHBhcmFtIHtudW1iZXJ9IGFzcGVjdCBBc3BlY3QgcmF0aW8uIHR5cGljYWxseSB2aWV3cG9ydCB3aWR0aC9oZWlnaHRcbiAgICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICAgKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICAgKiBAcGFyYW0ge21hdDR9IFtkZXN0XSBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gICAqXG4gICAqIEByZXR1cm5zIHttYXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgYSBuZXcgbWF0NCBvdGhlcndpc2VcbiAgICovXG4gIG1hdDQucGVyc3BlY3RpdmUgPSBmdW5jdGlvbiAoZm92eSwgYXNwZWN0LCBuZWFyLCBmYXIsIGRlc3QpIHtcbiAgICAgIHZhciB0b3AgPSBuZWFyICogTWF0aC50YW4oZm92eSAqIE1hdGguUEkgLyAzNjAuMCksXG4gICAgICAgICAgcmlnaHQgPSB0b3AgKiBhc3BlY3Q7XG4gICAgICByZXR1cm4gbWF0NC5mcnVzdHVtKC1yaWdodCwgcmlnaHQsIC10b3AsIHRvcCwgbmVhciwgZmFyLCBkZXN0KTtcbiAgfTtcblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgb3J0aG9nb25hbCBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHNcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgTGVmdCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICAgKiBAcGFyYW0ge251bWJlcn0gcmlnaHQgUmlnaHQgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAgICogQHBhcmFtIHtudW1iZXJ9IGJvdHRvbSBCb3R0b20gYm91bmQgb2YgdGhlIGZydXN0dW1cbiAgICogQHBhcmFtIHtudW1iZXJ9IHRvcCBUb3AgYm91bmQgb2YgdGhlIGZydXN0dW1cbiAgICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICAgKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxuICAgKiBAcGFyYW0ge21hdDR9IFtkZXN0XSBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gICAqXG4gICAqIEByZXR1cm5zIHttYXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgYSBuZXcgbWF0NCBvdGhlcndpc2VcbiAgICovXG4gIG1hdDQub3J0aG8gPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQsIGJvdHRvbSwgdG9wLCBuZWFyLCBmYXIsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gbWF0NC5jcmVhdGUoKTsgfVxuICAgICAgdmFyIHJsID0gKHJpZ2h0IC0gbGVmdCksXG4gICAgICAgICAgdGIgPSAodG9wIC0gYm90dG9tKSxcbiAgICAgICAgICBmbiA9IChmYXIgLSBuZWFyKTtcbiAgICAgIGRlc3RbMF0gPSAyIC8gcmw7XG4gICAgICBkZXN0WzFdID0gMDtcbiAgICAgIGRlc3RbMl0gPSAwO1xuICAgICAgZGVzdFszXSA9IDA7XG4gICAgICBkZXN0WzRdID0gMDtcbiAgICAgIGRlc3RbNV0gPSAyIC8gdGI7XG4gICAgICBkZXN0WzZdID0gMDtcbiAgICAgIGRlc3RbN10gPSAwO1xuICAgICAgZGVzdFs4XSA9IDA7XG4gICAgICBkZXN0WzldID0gMDtcbiAgICAgIGRlc3RbMTBdID0gLTIgLyBmbjtcbiAgICAgIGRlc3RbMTFdID0gMDtcbiAgICAgIGRlc3RbMTJdID0gLShsZWZ0ICsgcmlnaHQpIC8gcmw7XG4gICAgICBkZXN0WzEzXSA9IC0odG9wICsgYm90dG9tKSAvIHRiO1xuICAgICAgZGVzdFsxNF0gPSAtKGZhciArIG5lYXIpIC8gZm47XG4gICAgICBkZXN0WzE1XSA9IDE7XG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgbG9vay1hdCBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gZXllIHBvc2l0aW9uLCBmb2NhbCBwb2ludCwgYW5kIHVwIGF4aXNcbiAgICpcbiAgICogQHBhcmFtIHt2ZWMzfSBleWUgUG9zaXRpb24gb2YgdGhlIHZpZXdlclxuICAgKiBAcGFyYW0ge3ZlYzN9IGNlbnRlciBQb2ludCB0aGUgdmlld2VyIGlzIGxvb2tpbmcgYXRcbiAgICogQHBhcmFtIHt2ZWMzfSB1cCB2ZWMzIHBvaW50aW5nIFwidXBcIlxuICAgKiBAcGFyYW0ge21hdDR9IFtkZXN0XSBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXG4gICAqXG4gICAqIEByZXR1cm5zIHttYXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgYSBuZXcgbWF0NCBvdGhlcndpc2VcbiAgICovXG4gIG1hdDQubG9va0F0ID0gZnVuY3Rpb24gKGV5ZSwgY2VudGVyLCB1cCwgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBtYXQ0LmNyZWF0ZSgpOyB9XG5cbiAgICAgIHZhciB4MCwgeDEsIHgyLCB5MCwgeTEsIHkyLCB6MCwgejEsIHoyLCBsZW4sXG4gICAgICAgICAgZXlleCA9IGV5ZVswXSxcbiAgICAgICAgICBleWV5ID0gZXllWzFdLFxuICAgICAgICAgIGV5ZXogPSBleWVbMl0sXG4gICAgICAgICAgdXB4ID0gdXBbMF0sXG4gICAgICAgICAgdXB5ID0gdXBbMV0sXG4gICAgICAgICAgdXB6ID0gdXBbMl0sXG4gICAgICAgICAgY2VudGVyeCA9IGNlbnRlclswXSxcbiAgICAgICAgICBjZW50ZXJ5ID0gY2VudGVyWzFdLFxuICAgICAgICAgIGNlbnRlcnogPSBjZW50ZXJbMl07XG5cbiAgICAgIGlmIChleWV4ID09PSBjZW50ZXJ4ICYmIGV5ZXkgPT09IGNlbnRlcnkgJiYgZXlleiA9PT0gY2VudGVyeikge1xuICAgICAgICAgIHJldHVybiBtYXQ0LmlkZW50aXR5KGRlc3QpO1xuICAgICAgfVxuXG4gICAgICAvL3ZlYzMuZGlyZWN0aW9uKGV5ZSwgY2VudGVyLCB6KTtcbiAgICAgIHowID0gZXlleCAtIGNlbnRlcng7XG4gICAgICB6MSA9IGV5ZXkgLSBjZW50ZXJ5O1xuICAgICAgejIgPSBleWV6IC0gY2VudGVyejtcblxuICAgICAgLy8gbm9ybWFsaXplIChubyBjaGVjayBuZWVkZWQgZm9yIDAgYmVjYXVzZSBvZiBlYXJseSByZXR1cm4pXG4gICAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KHowICogejAgKyB6MSAqIHoxICsgejIgKiB6Mik7XG4gICAgICB6MCAqPSBsZW47XG4gICAgICB6MSAqPSBsZW47XG4gICAgICB6MiAqPSBsZW47XG5cbiAgICAgIC8vdmVjMy5ub3JtYWxpemUodmVjMy5jcm9zcyh1cCwgeiwgeCkpO1xuICAgICAgeDAgPSB1cHkgKiB6MiAtIHVweiAqIHoxO1xuICAgICAgeDEgPSB1cHogKiB6MCAtIHVweCAqIHoyO1xuICAgICAgeDIgPSB1cHggKiB6MSAtIHVweSAqIHowO1xuICAgICAgbGVuID0gTWF0aC5zcXJ0KHgwICogeDAgKyB4MSAqIHgxICsgeDIgKiB4Mik7XG4gICAgICBpZiAoIWxlbikge1xuICAgICAgICAgIHgwID0gMDtcbiAgICAgICAgICB4MSA9IDA7XG4gICAgICAgICAgeDIgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZW4gPSAxIC8gbGVuO1xuICAgICAgICAgIHgwICo9IGxlbjtcbiAgICAgICAgICB4MSAqPSBsZW47XG4gICAgICAgICAgeDIgKj0gbGVuO1xuICAgICAgfVxuXG4gICAgICAvL3ZlYzMubm9ybWFsaXplKHZlYzMuY3Jvc3MoeiwgeCwgeSkpO1xuICAgICAgeTAgPSB6MSAqIHgyIC0gejIgKiB4MTtcbiAgICAgIHkxID0gejIgKiB4MCAtIHowICogeDI7XG4gICAgICB5MiA9IHowICogeDEgLSB6MSAqIHgwO1xuXG4gICAgICBsZW4gPSBNYXRoLnNxcnQoeTAgKiB5MCArIHkxICogeTEgKyB5MiAqIHkyKTtcbiAgICAgIGlmICghbGVuKSB7XG4gICAgICAgICAgeTAgPSAwO1xuICAgICAgICAgIHkxID0gMDtcbiAgICAgICAgICB5MiA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxlbiA9IDEgLyBsZW47XG4gICAgICAgICAgeTAgKj0gbGVuO1xuICAgICAgICAgIHkxICo9IGxlbjtcbiAgICAgICAgICB5MiAqPSBsZW47XG4gICAgICB9XG5cbiAgICAgIGRlc3RbMF0gPSB4MDtcbiAgICAgIGRlc3RbMV0gPSB5MDtcbiAgICAgIGRlc3RbMl0gPSB6MDtcbiAgICAgIGRlc3RbM10gPSAwO1xuICAgICAgZGVzdFs0XSA9IHgxO1xuICAgICAgZGVzdFs1XSA9IHkxO1xuICAgICAgZGVzdFs2XSA9IHoxO1xuICAgICAgZGVzdFs3XSA9IDA7XG4gICAgICBkZXN0WzhdID0geDI7XG4gICAgICBkZXN0WzldID0geTI7XG4gICAgICBkZXN0WzEwXSA9IHoyO1xuICAgICAgZGVzdFsxMV0gPSAwO1xuICAgICAgZGVzdFsxMl0gPSAtKHgwICogZXlleCArIHgxICogZXlleSArIHgyICogZXlleik7XG4gICAgICBkZXN0WzEzXSA9IC0oeTAgKiBleWV4ICsgeTEgKiBleWV5ICsgeTIgKiBleWV6KTtcbiAgICAgIGRlc3RbMTRdID0gLSh6MCAqIGV5ZXggKyB6MSAqIGV5ZXkgKyB6MiAqIGV5ZXopO1xuICAgICAgZGVzdFsxNV0gPSAxO1xuXG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiByb3RhdGlvbiBhbmQgdmVjdG9yIHRyYW5zbGF0aW9uXG4gICAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxuICAgKlxuICAgKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcbiAgICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIHZlYyk7XG4gICAqICAgICB2YXIgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XG4gICAqICAgICBxdWF0NC50b01hdDQocXVhdCwgcXVhdE1hdCk7XG4gICAqICAgICBtYXQ0Lm11bHRpcGx5KGRlc3QsIHF1YXRNYXQpO1xuICAgKlxuICAgKiBAcGFyYW0ge3F1YXQ0fSBxdWF0IFJvdGF0aW9uIHF1YXRlcm5pb25cbiAgICogQHBhcmFtIHt2ZWMzfSB2ZWMgVHJhbnNsYXRpb24gdmVjdG9yXG4gICAqIEBwYXJhbSB7bWF0NH0gW2Rlc3RdIG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gYSBuZXcgbWF0NFxuICAgKlxuICAgKiBAcmV0dXJucyB7bWF0NH0gZGVzdCBpZiBzcGVjaWZpZWQsIGEgbmV3IG1hdDQgb3RoZXJ3aXNlXG4gICAqL1xuICBtYXQ0LmZyb21Sb3RhdGlvblRyYW5zbGF0aW9uID0gZnVuY3Rpb24gKHF1YXQsIHZlYywgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBtYXQ0LmNyZWF0ZSgpOyB9XG5cbiAgICAgIC8vIFF1YXRlcm5pb24gbWF0aFxuICAgICAgdmFyIHggPSBxdWF0WzBdLCB5ID0gcXVhdFsxXSwgeiA9IHF1YXRbMl0sIHcgPSBxdWF0WzNdLFxuICAgICAgICAgIHgyID0geCArIHgsXG4gICAgICAgICAgeTIgPSB5ICsgeSxcbiAgICAgICAgICB6MiA9IHogKyB6LFxuXG4gICAgICAgICAgeHggPSB4ICogeDIsXG4gICAgICAgICAgeHkgPSB4ICogeTIsXG4gICAgICAgICAgeHogPSB4ICogejIsXG4gICAgICAgICAgeXkgPSB5ICogeTIsXG4gICAgICAgICAgeXogPSB5ICogejIsXG4gICAgICAgICAgenogPSB6ICogejIsXG4gICAgICAgICAgd3ggPSB3ICogeDIsXG4gICAgICAgICAgd3kgPSB3ICogeTIsXG4gICAgICAgICAgd3ogPSB3ICogejI7XG5cbiAgICAgIGRlc3RbMF0gPSAxIC0gKHl5ICsgenopO1xuICAgICAgZGVzdFsxXSA9IHh5ICsgd3o7XG4gICAgICBkZXN0WzJdID0geHogLSB3eTtcbiAgICAgIGRlc3RbM10gPSAwO1xuICAgICAgZGVzdFs0XSA9IHh5IC0gd3o7XG4gICAgICBkZXN0WzVdID0gMSAtICh4eCArIHp6KTtcbiAgICAgIGRlc3RbNl0gPSB5eiArIHd4O1xuICAgICAgZGVzdFs3XSA9IDA7XG4gICAgICBkZXN0WzhdID0geHogKyB3eTtcbiAgICAgIGRlc3RbOV0gPSB5eiAtIHd4O1xuICAgICAgZGVzdFsxMF0gPSAxIC0gKHh4ICsgeXkpO1xuICAgICAgZGVzdFsxMV0gPSAwO1xuICAgICAgZGVzdFsxMl0gPSB2ZWNbMF07XG4gICAgICBkZXN0WzEzXSA9IHZlY1sxXTtcbiAgICAgIGRlc3RbMTRdID0gdmVjWzJdO1xuICAgICAgZGVzdFsxNV0gPSAxO1xuICAgICAgXG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIG1hdDRcbiAgICpcbiAgICogQHBhcmFtIHttYXQ0fSBtYXQgbWF0NCB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ30gU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIG1hdFxuICAgKi9cbiAgbWF0NC5zdHIgPSBmdW5jdGlvbiAobWF0KSB7XG4gICAgICByZXR1cm4gJ1snICsgbWF0WzBdICsgJywgJyArIG1hdFsxXSArICcsICcgKyBtYXRbMl0gKyAnLCAnICsgbWF0WzNdICtcbiAgICAgICAgICAnLCAnICsgbWF0WzRdICsgJywgJyArIG1hdFs1XSArICcsICcgKyBtYXRbNl0gKyAnLCAnICsgbWF0WzddICtcbiAgICAgICAgICAnLCAnICsgbWF0WzhdICsgJywgJyArIG1hdFs5XSArICcsICcgKyBtYXRbMTBdICsgJywgJyArIG1hdFsxMV0gK1xuICAgICAgICAgICcsICcgKyBtYXRbMTJdICsgJywgJyArIG1hdFsxM10gKyAnLCAnICsgbWF0WzE0XSArICcsICcgKyBtYXRbMTVdICsgJ10nO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAY2xhc3MgUXVhdGVybmlvblxuICAgKiBAbmFtZSBxdWF0NFxuICAgKi9cbiAgdmFyIHF1YXQ0ID0ge307XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBxdWF0NCB1c2luZyB0aGUgZGVmYXVsdCBhcnJheSB0eXBlXG4gICAqIEFueSBqYXZhc2NyaXB0IGFycmF5IGNvbnRhaW5pbmcgYXQgbGVhc3QgNCBudW1lcmljIGVsZW1lbnRzIGNhbiBzZXJ2ZSBhcyBhIHF1YXQ0XG4gICAqXG4gICAqIEBwYXJhbSB7cXVhdDR9IFtxdWF0XSBxdWF0NCBjb250YWluaW5nIHZhbHVlcyB0byBpbml0aWFsaXplIHdpdGhcbiAgICpcbiAgICogQHJldHVybnMge3F1YXQ0fSBOZXcgcXVhdDRcbiAgICovXG4gIHF1YXQ0LmNyZWF0ZSA9IGZ1bmN0aW9uIChxdWF0KSB7XG4gICAgICB2YXIgZGVzdCA9IG5ldyBNYXRyaXhBcnJheSg0KTtcblxuICAgICAgaWYgKHF1YXQpIHtcbiAgICAgICAgICBkZXN0WzBdID0gcXVhdFswXTtcbiAgICAgICAgICBkZXN0WzFdID0gcXVhdFsxXTtcbiAgICAgICAgICBkZXN0WzJdID0gcXVhdFsyXTtcbiAgICAgICAgICBkZXN0WzNdID0gcXVhdFszXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVzdFswXSA9IGRlc3RbMV0gPSBkZXN0WzJdID0gZGVzdFszXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgcXVhdDQsIGluaXRpYWxpemluZyBpdCB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHggWCB2YWx1ZVxuICAgKiBAcGFyYW0ge251bWJlcn0geSBZIHZhbHVlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB6IFogdmFsdWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IHcgVyB2YWx1ZVxuXG4gICAqIEByZXR1cm5zIHtxdWF0NH0gTmV3IHF1YXQ0XG4gICAqL1xuICBxdWF0NC5jcmVhdGVGcm9tID0gZnVuY3Rpb24gKHgsIHksIHosIHcpIHtcbiAgICAgIHZhciBkZXN0ID0gbmV3IE1hdHJpeEFycmF5KDQpO1xuXG4gICAgICBkZXN0WzBdID0geDtcbiAgICAgIGRlc3RbMV0gPSB5O1xuICAgICAgZGVzdFsyXSA9IHo7XG4gICAgICBkZXN0WzNdID0gdztcblxuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvcGllcyB0aGUgdmFsdWVzIG9mIG9uZSBxdWF0NCB0byBhbm90aGVyXG4gICAqXG4gICAqIEBwYXJhbSB7cXVhdDR9IHF1YXQgcXVhdDQgY29udGFpbmluZyB2YWx1ZXMgdG8gY29weVxuICAgKiBAcGFyYW0ge3F1YXQ0fSBkZXN0IHF1YXQ0IHJlY2VpdmluZyBjb3BpZWQgdmFsdWVzXG4gICAqXG4gICAqIEByZXR1cm5zIHtxdWF0NH0gZGVzdFxuICAgKi9cbiAgcXVhdDQuc2V0ID0gZnVuY3Rpb24gKHF1YXQsIGRlc3QpIHtcbiAgICAgIGRlc3RbMF0gPSBxdWF0WzBdO1xuICAgICAgZGVzdFsxXSA9IHF1YXRbMV07XG4gICAgICBkZXN0WzJdID0gcXVhdFsyXTtcbiAgICAgIGRlc3RbM10gPSBxdWF0WzNdO1xuXG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogQ29tcGFyZXMgdHdvIHF1YXRlcm5pb25zIGZvciBlcXVhbGl0eSB3aXRoaW4gYSBjZXJ0YWluIG1hcmdpbiBvZiBlcnJvclxuICAgKlxuICAgKiBAcGFyYW0ge3F1YXQ0fSBhIEZpcnN0IHZlY3RvclxuICAgKiBAcGFyYW0ge3F1YXQ0fSBiIFNlY29uZCB2ZWN0b3JcbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgYSBpcyBlcXVpdmFsZW50IHRvIGJcbiAgICovXG4gIHF1YXQ0LmVxdWFsID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhID09PSBiIHx8IChcbiAgICAgICAgICBNYXRoLmFicyhhWzBdIC0gYlswXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgTWF0aC5hYnMoYVsxXSAtIGJbMV0pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgIE1hdGguYWJzKGFbMl0gLSBiWzJdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICBNYXRoLmFicyhhWzNdIC0gYlszXSkgPCBGTE9BVF9FUFNJTE9OXG4gICAgICApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IFF1YXQ0XG4gICAqXG4gICAqIEBwYXJhbSB7cXVhdDR9IFtkZXN0XSBxdWF0NCByZWNlaXZpbmcgY29waWVkIHZhbHVlc1xuICAgKlxuICAgKiBAcmV0dXJucyB7cXVhdDR9IGRlc3QgaXMgc3BlY2lmaWVkLCBuZXcgcXVhdDQgb3RoZXJ3aXNlXG4gICAqL1xuICBxdWF0NC5pZGVudGl0eSA9IGZ1bmN0aW9uIChkZXN0KSB7XG4gICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IHF1YXQ0LmNyZWF0ZSgpOyB9XG4gICAgICBkZXN0WzBdID0gMDtcbiAgICAgIGRlc3RbMV0gPSAwO1xuICAgICAgZGVzdFsyXSA9IDA7XG4gICAgICBkZXN0WzNdID0gMTtcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIHZhciBpZGVudGl0eVF1YXQ0ID0gcXVhdDQuaWRlbnRpdHkoKTtcblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgVyBjb21wb25lbnQgb2YgYSBxdWF0NCBmcm9tIHRoZSBYLCBZLCBhbmQgWiBjb21wb25lbnRzLlxuICAgKiBBc3N1bWVzIHRoYXQgcXVhdGVybmlvbiBpcyAxIHVuaXQgaW4gbGVuZ3RoLlxuICAgKiBBbnkgZXhpc3RpbmcgVyBjb21wb25lbnQgd2lsbCBiZSBpZ25vcmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3F1YXQ0fSBxdWF0IHF1YXQ0IHRvIGNhbGN1bGF0ZSBXIGNvbXBvbmVudCBvZlxuICAgKiBAcGFyYW0ge3F1YXQ0fSBbZGVzdF0gcXVhdDQgcmVjZWl2aW5nIGNhbGN1bGF0ZWQgdmFsdWVzLiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHF1YXRcbiAgICpcbiAgICogQHJldHVybnMge3F1YXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgcXVhdCBvdGhlcndpc2VcbiAgICovXG4gIHF1YXQ0LmNhbGN1bGF0ZVcgPSBmdW5jdGlvbiAocXVhdCwgZGVzdCkge1xuICAgICAgdmFyIHggPSBxdWF0WzBdLCB5ID0gcXVhdFsxXSwgeiA9IHF1YXRbMl07XG5cbiAgICAgIGlmICghZGVzdCB8fCBxdWF0ID09PSBkZXN0KSB7XG4gICAgICAgICAgcXVhdFszXSA9IC1NYXRoLnNxcnQoTWF0aC5hYnMoMS4wIC0geCAqIHggLSB5ICogeSAtIHogKiB6KSk7XG4gICAgICAgICAgcmV0dXJuIHF1YXQ7XG4gICAgICB9XG4gICAgICBkZXN0WzBdID0geDtcbiAgICAgIGRlc3RbMV0gPSB5O1xuICAgICAgZGVzdFsyXSA9IHo7XG4gICAgICBkZXN0WzNdID0gLU1hdGguc3FydChNYXRoLmFicygxLjAgLSB4ICogeCAtIHkgKiB5IC0geiAqIHopKTtcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gcXVhdGVybmlvbnNcbiAgICpcbiAgICogQHBhcmFtIHtxdWF0NH0gcXVhdCBGaXJzdCBvcGVyYW5kXG4gICAqIEBwYXJhbSB7cXVhdDR9IHF1YXQyIFNlY29uZCBvcGVyYW5kXG4gICAqXG4gICAqIEByZXR1cm4ge251bWJlcn0gRG90IHByb2R1Y3Qgb2YgcXVhdCBhbmQgcXVhdDJcbiAgICovXG4gIHF1YXQ0LmRvdCA9IGZ1bmN0aW9uKHF1YXQsIHF1YXQyKXtcbiAgICAgIHJldHVybiBxdWF0WzBdKnF1YXQyWzBdICsgcXVhdFsxXSpxdWF0MlsxXSArIHF1YXRbMl0qcXVhdDJbMl0gKyBxdWF0WzNdKnF1YXQyWzNdO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIG9mIGEgcXVhdDRcbiAgICpcbiAgICogQHBhcmFtIHtxdWF0NH0gcXVhdCBxdWF0NCB0byBjYWxjdWxhdGUgaW52ZXJzZSBvZlxuICAgKiBAcGFyYW0ge3F1YXQ0fSBbZGVzdF0gcXVhdDQgcmVjZWl2aW5nIGludmVyc2UgdmFsdWVzLiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHF1YXRcbiAgICpcbiAgICogQHJldHVybnMge3F1YXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgcXVhdCBvdGhlcndpc2VcbiAgICovXG4gIHF1YXQ0LmludmVyc2UgPSBmdW5jdGlvbihxdWF0LCBkZXN0KSB7XG4gICAgICB2YXIgcTAgPSBxdWF0WzBdLCBxMSA9IHF1YXRbMV0sIHEyID0gcXVhdFsyXSwgcTMgPSBxdWF0WzNdLFxuICAgICAgICAgIGRvdCA9IHEwKnEwICsgcTEqcTEgKyBxMipxMiArIHEzKnEzLFxuICAgICAgICAgIGludkRvdCA9IGRvdCA/IDEuMC9kb3QgOiAwO1xuICAgICAgXG4gICAgICAvLyBUT0RPOiBXb3VsZCBiZSBmYXN0ZXIgdG8gcmV0dXJuIFswLDAsMCwwXSBpbW1lZGlhdGVseSBpZiBkb3QgPT0gMFxuICAgICAgXG4gICAgICBpZighZGVzdCB8fCBxdWF0ID09PSBkZXN0KSB7XG4gICAgICAgICAgcXVhdFswXSAqPSAtaW52RG90O1xuICAgICAgICAgIHF1YXRbMV0gKj0gLWludkRvdDtcbiAgICAgICAgICBxdWF0WzJdICo9IC1pbnZEb3Q7XG4gICAgICAgICAgcXVhdFszXSAqPSBpbnZEb3Q7XG4gICAgICAgICAgcmV0dXJuIHF1YXQ7XG4gICAgICB9XG4gICAgICBkZXN0WzBdID0gLXF1YXRbMF0qaW52RG90O1xuICAgICAgZGVzdFsxXSA9IC1xdWF0WzFdKmludkRvdDtcbiAgICAgIGRlc3RbMl0gPSAtcXVhdFsyXSppbnZEb3Q7XG4gICAgICBkZXN0WzNdID0gcXVhdFszXSppbnZEb3Q7XG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBjb25qdWdhdGUgb2YgYSBxdWF0NFxuICAgKiBJZiB0aGUgcXVhdGVybmlvbiBpcyBub3JtYWxpemVkLCB0aGlzIGZ1bmN0aW9uIGlzIGZhc3RlciB0aGFuIHF1YXQ0LmludmVyc2UgYW5kIHByb2R1Y2VzIHRoZSBzYW1lIHJlc3VsdC5cbiAgICpcbiAgICogQHBhcmFtIHtxdWF0NH0gcXVhdCBxdWF0NCB0byBjYWxjdWxhdGUgY29uanVnYXRlIG9mXG4gICAqIEBwYXJhbSB7cXVhdDR9IFtkZXN0XSBxdWF0NCByZWNlaXZpbmcgY29uanVnYXRlIHZhbHVlcy4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byBxdWF0XG4gICAqXG4gICAqIEByZXR1cm5zIHtxdWF0NH0gZGVzdCBpZiBzcGVjaWZpZWQsIHF1YXQgb3RoZXJ3aXNlXG4gICAqL1xuICBxdWF0NC5jb25qdWdhdGUgPSBmdW5jdGlvbiAocXVhdCwgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0IHx8IHF1YXQgPT09IGRlc3QpIHtcbiAgICAgICAgICBxdWF0WzBdICo9IC0xO1xuICAgICAgICAgIHF1YXRbMV0gKj0gLTE7XG4gICAgICAgICAgcXVhdFsyXSAqPSAtMTtcbiAgICAgICAgICByZXR1cm4gcXVhdDtcbiAgICAgIH1cbiAgICAgIGRlc3RbMF0gPSAtcXVhdFswXTtcbiAgICAgIGRlc3RbMV0gPSAtcXVhdFsxXTtcbiAgICAgIGRlc3RbMl0gPSAtcXVhdFsyXTtcbiAgICAgIGRlc3RbM10gPSBxdWF0WzNdO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHF1YXQ0XG4gICAqXG4gICAqIFBhcmFtczpcbiAgICogQHBhcmFtIHtxdWF0NH0gcXVhdCBxdWF0NCB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXG4gICAqXG4gICAqIEByZXR1cm5zIExlbmd0aCBvZiBxdWF0XG4gICAqL1xuICBxdWF0NC5sZW5ndGggPSBmdW5jdGlvbiAocXVhdCkge1xuICAgICAgdmFyIHggPSBxdWF0WzBdLCB5ID0gcXVhdFsxXSwgeiA9IHF1YXRbMl0sIHcgPSBxdWF0WzNdO1xuICAgICAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIHVuaXQgcXVhdGVybmlvbiBvZiB0aGUgc2FtZSBkaXJlY3Rpb24gYXMgdGhlIHByb3ZpZGVkIHF1YXQ0XG4gICAqIElmIHF1YXRlcm5pb24gbGVuZ3RoIGlzIDAsIHJldHVybnMgWzAsIDAsIDAsIDBdXG4gICAqXG4gICAqIEBwYXJhbSB7cXVhdDR9IHF1YXQgcXVhdDQgdG8gbm9ybWFsaXplXG4gICAqIEBwYXJhbSB7cXVhdDR9IFtkZXN0XSBxdWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byBxdWF0XG4gICAqXG4gICAqIEByZXR1cm5zIHtxdWF0NH0gZGVzdCBpZiBzcGVjaWZpZWQsIHF1YXQgb3RoZXJ3aXNlXG4gICAqL1xuICBxdWF0NC5ub3JtYWxpemUgPSBmdW5jdGlvbiAocXVhdCwgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBxdWF0OyB9XG5cbiAgICAgIHZhciB4ID0gcXVhdFswXSwgeSA9IHF1YXRbMV0sIHogPSBxdWF0WzJdLCB3ID0gcXVhdFszXSxcbiAgICAgICAgICBsZW4gPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHcpO1xuICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgIGRlc3RbMF0gPSAwO1xuICAgICAgICAgIGRlc3RbMV0gPSAwO1xuICAgICAgICAgIGRlc3RbMl0gPSAwO1xuICAgICAgICAgIGRlc3RbM10gPSAwO1xuICAgICAgICAgIHJldHVybiBkZXN0O1xuICAgICAgfVxuICAgICAgbGVuID0gMSAvIGxlbjtcbiAgICAgIGRlc3RbMF0gPSB4ICogbGVuO1xuICAgICAgZGVzdFsxXSA9IHkgKiBsZW47XG4gICAgICBkZXN0WzJdID0geiAqIGxlbjtcbiAgICAgIGRlc3RbM10gPSB3ICogbGVuO1xuXG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogUGVyZm9ybXMgcXVhdGVybmlvbiBhZGRpdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge3F1YXQ0fSBxdWF0IEZpcnN0IG9wZXJhbmRcbiAgICogQHBhcmFtIHtxdWF0NH0gcXVhdDIgU2Vjb25kIG9wZXJhbmRcbiAgICogQHBhcmFtIHtxdWF0NH0gW2Rlc3RdIHF1YXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHF1YXRcbiAgICpcbiAgICogQHJldHVybnMge3F1YXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgcXVhdCBvdGhlcndpc2VcbiAgICovXG4gIHF1YXQ0LmFkZCA9IGZ1bmN0aW9uIChxdWF0LCBxdWF0MiwgZGVzdCkge1xuICAgICAgaWYoIWRlc3QgfHwgcXVhdCA9PT0gZGVzdCkge1xuICAgICAgICAgIHF1YXRbMF0gKz0gcXVhdDJbMF07XG4gICAgICAgICAgcXVhdFsxXSArPSBxdWF0MlsxXTtcbiAgICAgICAgICBxdWF0WzJdICs9IHF1YXQyWzJdO1xuICAgICAgICAgIHF1YXRbM10gKz0gcXVhdDJbM107XG4gICAgICAgICAgcmV0dXJuIHF1YXQ7XG4gICAgICB9XG4gICAgICBkZXN0WzBdID0gcXVhdFswXStxdWF0MlswXTtcbiAgICAgIGRlc3RbMV0gPSBxdWF0WzFdK3F1YXQyWzFdO1xuICAgICAgZGVzdFsyXSA9IHF1YXRbMl0rcXVhdDJbMl07XG4gICAgICBkZXN0WzNdID0gcXVhdFszXStxdWF0MlszXTtcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIHF1YXRlcm5pb24gbXVsdGlwbGljYXRpb25cbiAgICpcbiAgICogQHBhcmFtIHtxdWF0NH0gcXVhdCBGaXJzdCBvcGVyYW5kXG4gICAqIEBwYXJhbSB7cXVhdDR9IHF1YXQyIFNlY29uZCBvcGVyYW5kXG4gICAqIEBwYXJhbSB7cXVhdDR9IFtkZXN0XSBxdWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byBxdWF0XG4gICAqXG4gICAqIEByZXR1cm5zIHtxdWF0NH0gZGVzdCBpZiBzcGVjaWZpZWQsIHF1YXQgb3RoZXJ3aXNlXG4gICAqL1xuICBxdWF0NC5tdWx0aXBseSA9IGZ1bmN0aW9uIChxdWF0LCBxdWF0MiwgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBxdWF0OyB9XG5cbiAgICAgIHZhciBxYXggPSBxdWF0WzBdLCBxYXkgPSBxdWF0WzFdLCBxYXogPSBxdWF0WzJdLCBxYXcgPSBxdWF0WzNdLFxuICAgICAgICAgIHFieCA9IHF1YXQyWzBdLCBxYnkgPSBxdWF0MlsxXSwgcWJ6ID0gcXVhdDJbMl0sIHFidyA9IHF1YXQyWzNdO1xuXG4gICAgICBkZXN0WzBdID0gcWF4ICogcWJ3ICsgcWF3ICogcWJ4ICsgcWF5ICogcWJ6IC0gcWF6ICogcWJ5O1xuICAgICAgZGVzdFsxXSA9IHFheSAqIHFidyArIHFhdyAqIHFieSArIHFheiAqIHFieCAtIHFheCAqIHFiejtcbiAgICAgIGRlc3RbMl0gPSBxYXogKiBxYncgKyBxYXcgKiBxYnogKyBxYXggKiBxYnkgLSBxYXkgKiBxYng7XG4gICAgICBkZXN0WzNdID0gcWF3ICogcWJ3IC0gcWF4ICogcWJ4IC0gcWF5ICogcWJ5IC0gcWF6ICogcWJ6O1xuXG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogVHJhbnNmb3JtcyBhIHZlYzMgd2l0aCB0aGUgZ2l2ZW4gcXVhdGVybmlvblxuICAgKlxuICAgKiBAcGFyYW0ge3F1YXQ0fSBxdWF0IHF1YXQ0IHRvIHRyYW5zZm9ybSB0aGUgdmVjdG9yIHdpdGhcbiAgICogQHBhcmFtIHt2ZWMzfSB2ZWMgdmVjMyB0byB0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHt2ZWMzfSBbZGVzdF0gdmVjMyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byB2ZWNcbiAgICpcbiAgICogQHJldHVybnMgZGVzdCBpZiBzcGVjaWZpZWQsIHZlYyBvdGhlcndpc2VcbiAgICovXG4gIHF1YXQ0Lm11bHRpcGx5VmVjMyA9IGZ1bmN0aW9uIChxdWF0LCB2ZWMsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gdmVjOyB9XG5cbiAgICAgIHZhciB4ID0gdmVjWzBdLCB5ID0gdmVjWzFdLCB6ID0gdmVjWzJdLFxuICAgICAgICAgIHF4ID0gcXVhdFswXSwgcXkgPSBxdWF0WzFdLCBxeiA9IHF1YXRbMl0sIHF3ID0gcXVhdFszXSxcblxuICAgICAgICAgIC8vIGNhbGN1bGF0ZSBxdWF0ICogdmVjXG4gICAgICAgICAgaXggPSBxdyAqIHggKyBxeSAqIHogLSBxeiAqIHksXG4gICAgICAgICAgaXkgPSBxdyAqIHkgKyBxeiAqIHggLSBxeCAqIHosXG4gICAgICAgICAgaXogPSBxdyAqIHogKyBxeCAqIHkgLSBxeSAqIHgsXG4gICAgICAgICAgaXcgPSAtcXggKiB4IC0gcXkgKiB5IC0gcXogKiB6O1xuXG4gICAgICAvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0XG4gICAgICBkZXN0WzBdID0gaXggKiBxdyArIGl3ICogLXF4ICsgaXkgKiAtcXogLSBpeiAqIC1xeTtcbiAgICAgIGRlc3RbMV0gPSBpeSAqIHF3ICsgaXcgKiAtcXkgKyBpeiAqIC1xeCAtIGl4ICogLXF6O1xuICAgICAgZGVzdFsyXSA9IGl6ICogcXcgKyBpdyAqIC1xeiArIGl4ICogLXF5IC0gaXkgKiAtcXg7XG5cbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBNdWx0aXBsaWVzIHRoZSBjb21wb25lbnRzIG9mIGEgcXVhdGVybmlvbiBieSBhIHNjYWxhciB2YWx1ZVxuICAgKlxuICAgKiBAcGFyYW0ge3F1YXQ0fSBxdWF0IHRvIHNjYWxlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgVmFsdWUgdG8gc2NhbGUgYnlcbiAgICogQHBhcmFtIHtxdWF0NH0gW2Rlc3RdIHF1YXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHF1YXRcbiAgICpcbiAgICogQHJldHVybnMge3F1YXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgcXVhdCBvdGhlcndpc2VcbiAgICovXG4gIHF1YXQ0LnNjYWxlID0gZnVuY3Rpb24gKHF1YXQsIHZhbCwgZGVzdCkge1xuICAgICAgaWYoIWRlc3QgfHwgcXVhdCA9PT0gZGVzdCkge1xuICAgICAgICAgIHF1YXRbMF0gKj0gdmFsO1xuICAgICAgICAgIHF1YXRbMV0gKj0gdmFsO1xuICAgICAgICAgIHF1YXRbMl0gKj0gdmFsO1xuICAgICAgICAgIHF1YXRbM10gKj0gdmFsO1xuICAgICAgICAgIHJldHVybiBxdWF0O1xuICAgICAgfVxuICAgICAgZGVzdFswXSA9IHF1YXRbMF0qdmFsO1xuICAgICAgZGVzdFsxXSA9IHF1YXRbMV0qdmFsO1xuICAgICAgZGVzdFsyXSA9IHF1YXRbMl0qdmFsO1xuICAgICAgZGVzdFszXSA9IHF1YXRbM10qdmFsO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgYSAzeDMgbWF0cml4IGZyb20gdGhlIGdpdmVuIHF1YXQ0XG4gICAqXG4gICAqIEBwYXJhbSB7cXVhdDR9IHF1YXQgcXVhdDQgdG8gY3JlYXRlIG1hdHJpeCBmcm9tXG4gICAqIEBwYXJhbSB7bWF0M30gW2Rlc3RdIG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAgICpcbiAgICogQHJldHVybnMge21hdDN9IGRlc3QgaWYgc3BlY2lmaWVkLCBhIG5ldyBtYXQzIG90aGVyd2lzZVxuICAgKi9cbiAgcXVhdDQudG9NYXQzID0gZnVuY3Rpb24gKHF1YXQsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gbWF0My5jcmVhdGUoKTsgfVxuXG4gICAgICB2YXIgeCA9IHF1YXRbMF0sIHkgPSBxdWF0WzFdLCB6ID0gcXVhdFsyXSwgdyA9IHF1YXRbM10sXG4gICAgICAgICAgeDIgPSB4ICsgeCxcbiAgICAgICAgICB5MiA9IHkgKyB5LFxuICAgICAgICAgIHoyID0geiArIHosXG5cbiAgICAgICAgICB4eCA9IHggKiB4MixcbiAgICAgICAgICB4eSA9IHggKiB5MixcbiAgICAgICAgICB4eiA9IHggKiB6MixcbiAgICAgICAgICB5eSA9IHkgKiB5MixcbiAgICAgICAgICB5eiA9IHkgKiB6MixcbiAgICAgICAgICB6eiA9IHogKiB6MixcbiAgICAgICAgICB3eCA9IHcgKiB4MixcbiAgICAgICAgICB3eSA9IHcgKiB5MixcbiAgICAgICAgICB3eiA9IHcgKiB6MjtcblxuICAgICAgZGVzdFswXSA9IDEgLSAoeXkgKyB6eik7XG4gICAgICBkZXN0WzFdID0geHkgKyB3ejtcbiAgICAgIGRlc3RbMl0gPSB4eiAtIHd5O1xuXG4gICAgICBkZXN0WzNdID0geHkgLSB3ejtcbiAgICAgIGRlc3RbNF0gPSAxIC0gKHh4ICsgenopO1xuICAgICAgZGVzdFs1XSA9IHl6ICsgd3g7XG5cbiAgICAgIGRlc3RbNl0gPSB4eiArIHd5O1xuICAgICAgZGVzdFs3XSA9IHl6IC0gd3g7XG4gICAgICBkZXN0WzhdID0gMSAtICh4eCArIHl5KTtcblxuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgYSA0eDQgbWF0cml4IGZyb20gdGhlIGdpdmVuIHF1YXQ0XG4gICAqXG4gICAqIEBwYXJhbSB7cXVhdDR9IHF1YXQgcXVhdDQgdG8gY3JlYXRlIG1hdHJpeCBmcm9tXG4gICAqIEBwYXJhbSB7bWF0NH0gW2Rlc3RdIG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcbiAgICpcbiAgICogQHJldHVybnMge21hdDR9IGRlc3QgaWYgc3BlY2lmaWVkLCBhIG5ldyBtYXQ0IG90aGVyd2lzZVxuICAgKi9cbiAgcXVhdDQudG9NYXQ0ID0gZnVuY3Rpb24gKHF1YXQsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gbWF0NC5jcmVhdGUoKTsgfVxuXG4gICAgICB2YXIgeCA9IHF1YXRbMF0sIHkgPSBxdWF0WzFdLCB6ID0gcXVhdFsyXSwgdyA9IHF1YXRbM10sXG4gICAgICAgICAgeDIgPSB4ICsgeCxcbiAgICAgICAgICB5MiA9IHkgKyB5LFxuICAgICAgICAgIHoyID0geiArIHosXG5cbiAgICAgICAgICB4eCA9IHggKiB4MixcbiAgICAgICAgICB4eSA9IHggKiB5MixcbiAgICAgICAgICB4eiA9IHggKiB6MixcbiAgICAgICAgICB5eSA9IHkgKiB5MixcbiAgICAgICAgICB5eiA9IHkgKiB6MixcbiAgICAgICAgICB6eiA9IHogKiB6MixcbiAgICAgICAgICB3eCA9IHcgKiB4MixcbiAgICAgICAgICB3eSA9IHcgKiB5MixcbiAgICAgICAgICB3eiA9IHcgKiB6MjtcblxuICAgICAgZGVzdFswXSA9IDEgLSAoeXkgKyB6eik7XG4gICAgICBkZXN0WzFdID0geHkgKyB3ejtcbiAgICAgIGRlc3RbMl0gPSB4eiAtIHd5O1xuICAgICAgZGVzdFszXSA9IDA7XG5cbiAgICAgIGRlc3RbNF0gPSB4eSAtIHd6O1xuICAgICAgZGVzdFs1XSA9IDEgLSAoeHggKyB6eik7XG4gICAgICBkZXN0WzZdID0geXogKyB3eDtcbiAgICAgIGRlc3RbN10gPSAwO1xuXG4gICAgICBkZXN0WzhdID0geHogKyB3eTtcbiAgICAgIGRlc3RbOV0gPSB5eiAtIHd4O1xuICAgICAgZGVzdFsxMF0gPSAxIC0gKHh4ICsgeXkpO1xuICAgICAgZGVzdFsxMV0gPSAwO1xuXG4gICAgICBkZXN0WzEyXSA9IDA7XG4gICAgICBkZXN0WzEzXSA9IDA7XG4gICAgICBkZXN0WzE0XSA9IDA7XG4gICAgICBkZXN0WzE1XSA9IDE7XG5cbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIHNwaGVyaWNhbCBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBxdWF0NFxuICAgKlxuICAgKiBAcGFyYW0ge3F1YXQ0fSBxdWF0IEZpcnN0IHF1YXRlcm5pb25cbiAgICogQHBhcmFtIHtxdWF0NH0gcXVhdDIgU2Vjb25kIHF1YXRlcm5pb25cbiAgICogQHBhcmFtIHtudW1iZXJ9IHNsZXJwIEludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAgICogQHBhcmFtIHtxdWF0NH0gW2Rlc3RdIHF1YXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHF1YXRcbiAgICpcbiAgICogQHJldHVybnMge3F1YXQ0fSBkZXN0IGlmIHNwZWNpZmllZCwgcXVhdCBvdGhlcndpc2VcbiAgICovXG4gIHF1YXQ0LnNsZXJwID0gZnVuY3Rpb24gKHF1YXQsIHF1YXQyLCBzbGVycCwgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBxdWF0OyB9XG5cbiAgICAgIHZhciBjb3NIYWxmVGhldGEgPSBxdWF0WzBdICogcXVhdDJbMF0gKyBxdWF0WzFdICogcXVhdDJbMV0gKyBxdWF0WzJdICogcXVhdDJbMl0gKyBxdWF0WzNdICogcXVhdDJbM10sXG4gICAgICAgICAgaGFsZlRoZXRhLFxuICAgICAgICAgIHNpbkhhbGZUaGV0YSxcbiAgICAgICAgICByYXRpb0EsXG4gICAgICAgICAgcmF0aW9CO1xuXG4gICAgICBpZiAoTWF0aC5hYnMoY29zSGFsZlRoZXRhKSA+PSAxLjApIHtcbiAgICAgICAgICBpZiAoZGVzdCAhPT0gcXVhdCkge1xuICAgICAgICAgICAgICBkZXN0WzBdID0gcXVhdFswXTtcbiAgICAgICAgICAgICAgZGVzdFsxXSA9IHF1YXRbMV07XG4gICAgICAgICAgICAgIGRlc3RbMl0gPSBxdWF0WzJdO1xuICAgICAgICAgICAgICBkZXN0WzNdID0gcXVhdFszXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICB9XG5cbiAgICAgIGhhbGZUaGV0YSA9IE1hdGguYWNvcyhjb3NIYWxmVGhldGEpO1xuICAgICAgc2luSGFsZlRoZXRhID0gTWF0aC5zcXJ0KDEuMCAtIGNvc0hhbGZUaGV0YSAqIGNvc0hhbGZUaGV0YSk7XG5cbiAgICAgIGlmIChNYXRoLmFicyhzaW5IYWxmVGhldGEpIDwgMC4wMDEpIHtcbiAgICAgICAgICBkZXN0WzBdID0gKHF1YXRbMF0gKiAwLjUgKyBxdWF0MlswXSAqIDAuNSk7XG4gICAgICAgICAgZGVzdFsxXSA9IChxdWF0WzFdICogMC41ICsgcXVhdDJbMV0gKiAwLjUpO1xuICAgICAgICAgIGRlc3RbMl0gPSAocXVhdFsyXSAqIDAuNSArIHF1YXQyWzJdICogMC41KTtcbiAgICAgICAgICBkZXN0WzNdID0gKHF1YXRbM10gKiAwLjUgKyBxdWF0MlszXSAqIDAuNSk7XG4gICAgICAgICAgcmV0dXJuIGRlc3Q7XG4gICAgICB9XG5cbiAgICAgIHJhdGlvQSA9IE1hdGguc2luKCgxIC0gc2xlcnApICogaGFsZlRoZXRhKSAvIHNpbkhhbGZUaGV0YTtcbiAgICAgIHJhdGlvQiA9IE1hdGguc2luKHNsZXJwICogaGFsZlRoZXRhKSAvIHNpbkhhbGZUaGV0YTtcblxuICAgICAgZGVzdFswXSA9IChxdWF0WzBdICogcmF0aW9BICsgcXVhdDJbMF0gKiByYXRpb0IpO1xuICAgICAgZGVzdFsxXSA9IChxdWF0WzFdICogcmF0aW9BICsgcXVhdDJbMV0gKiByYXRpb0IpO1xuICAgICAgZGVzdFsyXSA9IChxdWF0WzJdICogcmF0aW9BICsgcXVhdDJbMl0gKiByYXRpb0IpO1xuICAgICAgZGVzdFszXSA9IChxdWF0WzNdICogcmF0aW9BICsgcXVhdDJbM10gKiByYXRpb0IpO1xuXG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHF1YXRlcm5pb24gZnJvbSB0aGUgZ2l2ZW4gM3gzIHJvdGF0aW9uIG1hdHJpeC5cbiAgICogSWYgZGVzdCBpcyBvbWl0dGVkLCBhIG5ldyBxdWF0ZXJuaW9uIHdpbGwgYmUgY3JlYXRlZC5cbiAgICpcbiAgICogQHBhcmFtIHttYXQzfSAgbWF0ICAgIHRoZSByb3RhdGlvbiBtYXRyaXhcbiAgICogQHBhcmFtIHtxdWF0NH0gW2Rlc3RdIGFuIG9wdGlvbmFsIHJlY2VpdmluZyBxdWF0ZXJuaW9uXG4gICAqXG4gICAqIEByZXR1cm5zIHtxdWF0NH0gdGhlIHF1YXRlcm5pb24gY29uc3RydWN0ZWQgZnJvbSB0aGUgcm90YXRpb24gbWF0cml4XG4gICAqXG4gICAqL1xuICBxdWF0NC5mcm9tUm90YXRpb25NYXRyaXggPSBmdW5jdGlvbihtYXQsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgZGVzdCA9IHF1YXQ0LmNyZWF0ZSgpO1xuICAgICAgXG4gICAgICAvLyBBbGdvcml0aG0gaW4gS2VuIFNob2VtYWtlJ3MgYXJ0aWNsZSBpbiAxOTg3IFNJR0dSQVBIIGNvdXJzZSBub3Rlc1xuICAgICAgLy8gYXJ0aWNsZSBcIlF1YXRlcm5pb24gQ2FsY3VsdXMgYW5kIEZhc3QgQW5pbWF0aW9uXCIuXG5cbiAgICAgIHZhciBmVHJhY2UgPSBtYXRbMF0gKyBtYXRbNF0gKyBtYXRbOF07XG4gICAgICB2YXIgZlJvb3Q7XG5cbiAgICAgIGlmICggZlRyYWNlID4gMC4wICkge1xuICAgICAgICAgIC8vIHx3fCA+IDEvMiwgbWF5IGFzIHdlbGwgY2hvb3NlIHcgPiAxLzJcbiAgICAgICAgICBmUm9vdCA9IE1hdGguc3FydChmVHJhY2UgKyAxLjApOyAgLy8gMndcbiAgICAgICAgICBkZXN0WzNdID0gMC41ICogZlJvb3Q7XG4gICAgICAgICAgZlJvb3QgPSAwLjUvZlJvb3Q7ICAvLyAxLyg0dylcbiAgICAgICAgICBkZXN0WzBdID0gKG1hdFs3XS1tYXRbNV0pKmZSb290O1xuICAgICAgICAgIGRlc3RbMV0gPSAobWF0WzJdLW1hdFs2XSkqZlJvb3Q7XG4gICAgICAgICAgZGVzdFsyXSA9IChtYXRbM10tbWF0WzFdKSpmUm9vdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gfHd8IDw9IDEvMlxuICAgICAgICAgIHZhciBzX2lOZXh0ID0gcXVhdDQuZnJvbVJvdGF0aW9uTWF0cml4LnNfaU5leHQgPSBxdWF0NC5mcm9tUm90YXRpb25NYXRyaXguc19pTmV4dCB8fCBbMSwyLDBdO1xuICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICBpZiAoIG1hdFs0XSA+IG1hdFswXSApXG4gICAgICAgICAgICBpID0gMTtcbiAgICAgICAgICBpZiAoIG1hdFs4XSA+IG1hdFtpKjMraV0gKVxuICAgICAgICAgICAgaSA9IDI7XG4gICAgICAgICAgdmFyIGogPSBzX2lOZXh0W2ldO1xuICAgICAgICAgIHZhciBrID0gc19pTmV4dFtqXTtcbiAgICAgICAgICBcbiAgICAgICAgICBmUm9vdCA9IE1hdGguc3FydChtYXRbaSozK2ldLW1hdFtqKjMral0tbWF0W2sqMytrXSArIDEuMCk7XG4gICAgICAgICAgZGVzdFtpXSA9IDAuNSAqIGZSb290O1xuICAgICAgICAgIGZSb290ID0gMC41IC8gZlJvb3Q7XG4gICAgICAgICAgZGVzdFszXSA9IChtYXRbayozK2pdIC0gbWF0W2oqMytrXSkgKiBmUm9vdDtcbiAgICAgICAgICBkZXN0W2pdID0gKG1hdFtqKjMraV0gKyBtYXRbaSozK2pdKSAqIGZSb290O1xuICAgICAgICAgIGRlc3Rba10gPSAobWF0W2sqMytpXSArIG1hdFtpKjMra10pICogZlJvb3Q7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBBbGlhcy4gU2VlIHRoZSBkZXNjcmlwdGlvbiBmb3IgcXVhdDQuZnJvbVJvdGF0aW9uTWF0cml4KCkuXG4gICAqL1xuICBtYXQzLnRvUXVhdDQgPSBxdWF0NC5mcm9tUm90YXRpb25NYXRyaXg7XG5cbiAgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG1hdCA9IG1hdDMuY3JlYXRlKCk7XG4gICAgICBcbiAgICAgIC8qKlxuICAgICAgICogQ3JlYXRlcyBhIHF1YXRlcm5pb24gZnJvbSB0aGUgMyBnaXZlbiB2ZWN0b3JzLiBUaGV5IG11c3QgYmUgcGVycGVuZGljdWxhclxuICAgICAgICogdG8gb25lIGFub3RoZXIgYW5kIHJlcHJlc2VudCB0aGUgWCwgWSBhbmQgWiBheGVzLlxuICAgICAgICpcbiAgICAgICAqIElmIGRlc3QgaXMgb21pdHRlZCwgYSBuZXcgcXVhdDQgd2lsbCBiZSBjcmVhdGVkLlxuICAgICAgICpcbiAgICAgICAqIEV4YW1wbGU6IFRoZSBkZWZhdWx0IE9wZW5HTCBvcmllbnRhdGlvbiBoYXMgYSB2aWV3IHZlY3RvciBbMCwgMCwgLTFdLFxuICAgICAgICogcmlnaHQgdmVjdG9yIFsxLCAwLCAwXSwgYW5kIHVwIHZlY3RvciBbMCwgMSwgMF0uIEEgcXVhdGVybmlvbiByZXByZXNlbnRpbmdcbiAgICAgICAqIHRoaXMgb3JpZW50YXRpb24gY291bGQgYmUgY29uc3RydWN0ZWQgd2l0aDpcbiAgICAgICAqXG4gICAgICAgKiAgIHF1YXQgPSBxdWF0NC5mcm9tQXhlcyhbMCwgMCwgLTFdLCBbMSwgMCwgMF0sIFswLCAxLCAwXSwgcXVhdDQuY3JlYXRlKCkpO1xuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7dmVjM30gIHZpZXcgICB0aGUgdmlldyB2ZWN0b3IsIG9yIGRpcmVjdGlvbiB0aGUgb2JqZWN0IGlzIHBvaW50aW5nIGluXG4gICAgICAgKiBAcGFyYW0ge3ZlYzN9ICByaWdodCAgdGhlIHJpZ2h0IHZlY3Rvciwgb3IgZGlyZWN0aW9uIHRvIHRoZSBcInJpZ2h0XCIgb2YgdGhlIG9iamVjdFxuICAgICAgICogQHBhcmFtIHt2ZWMzfSAgdXAgICAgIHRoZSB1cCB2ZWN0b3IsIG9yIGRpcmVjdGlvbiB0b3dhcmRzIHRoZSBvYmplY3QncyBcInVwXCJcbiAgICAgICAqIEBwYXJhbSB7cXVhdDR9IFtkZXN0XSBhbiBvcHRpb25hbCByZWNlaXZpbmcgcXVhdDRcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7cXVhdDR9IGRlc3RcbiAgICAgICAqKi9cbiAgICAgIHF1YXQ0LmZyb21BeGVzID0gZnVuY3Rpb24odmlldywgcmlnaHQsIHVwLCBkZXN0KSB7XG4gICAgICAgICAgbWF0WzBdID0gcmlnaHRbMF07XG4gICAgICAgICAgbWF0WzNdID0gcmlnaHRbMV07XG4gICAgICAgICAgbWF0WzZdID0gcmlnaHRbMl07XG5cbiAgICAgICAgICBtYXRbMV0gPSB1cFswXTtcbiAgICAgICAgICBtYXRbNF0gPSB1cFsxXTtcbiAgICAgICAgICBtYXRbN10gPSB1cFsyXTtcblxuICAgICAgICAgIG1hdFsyXSA9IHZpZXdbMF07XG4gICAgICAgICAgbWF0WzVdID0gdmlld1sxXTtcbiAgICAgICAgICBtYXRbOF0gPSB2aWV3WzJdO1xuXG4gICAgICAgICAgcmV0dXJuIHF1YXQ0LmZyb21Sb3RhdGlvbk1hdHJpeChtYXQsIGRlc3QpO1xuICAgICAgfTtcbiAgfSkoKTtcblxuICAvKipcbiAgICogU2V0cyBhIHF1YXQ0IHRvIHRoZSBJZGVudGl0eSBhbmQgcmV0dXJucyBpdC5cbiAgICpcbiAgICogQHBhcmFtIHtxdWF0NH0gW2Rlc3RdIHF1YXQ0IHRvIHNldC4gSWYgb21pdHRlZCwgYVxuICAgKiBuZXcgcXVhdDQgd2lsbCBiZSBjcmVhdGVkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7cXVhdDR9IGRlc3RcbiAgICovXG4gIHF1YXQ0LmlkZW50aXR5ID0gZnVuY3Rpb24oZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSBkZXN0ID0gcXVhdDQuY3JlYXRlKCk7XG4gICAgICBkZXN0WzBdID0gMDtcbiAgICAgIGRlc3RbMV0gPSAwO1xuICAgICAgZGVzdFsyXSA9IDA7XG4gICAgICBkZXN0WzNdID0gMTtcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXRzIGEgcXVhdDQgZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYW5kIHJvdGF0aW9uIGF4aXMsXG4gICAqIHRoZW4gcmV0dXJucyBpdC4gSWYgZGVzdCBpcyBub3QgZ2l2ZW4sIGEgbmV3IHF1YXQ0IGlzIGNyZWF0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBhbmdsZSAgdGhlIGFuZ2xlIGluIHJhZGlhbnNcbiAgICogQHBhcmFtIHt2ZWMzfSAgIGF4aXMgICB0aGUgYXhpcyBhcm91bmQgd2hpY2ggdG8gcm90YXRlXG4gICAqIEBwYXJhbSB7cXVhdDR9ICBbZGVzdF0gdGhlIG9wdGlvbmFsIHF1YXQ0IHRvIHN0b3JlIHRoZSByZXN1bHRcbiAgICpcbiAgICogQHJldHVybnMge3F1YXQ0fSBkZXN0XG4gICAqKi9cbiAgcXVhdDQuZnJvbUFuZ2xlQXhpcyA9IGZ1bmN0aW9uKGFuZ2xlLCBheGlzLCBkZXN0KSB7XG4gICAgICAvLyBUaGUgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIHJvdGF0aW9uIGlzXG4gICAgICAvLyAgIHEgPSBjb3MoQS8yKStzaW4oQS8yKSooeCppK3kqait6KmspXG4gICAgICBpZiAoIWRlc3QpIGRlc3QgPSBxdWF0NC5jcmVhdGUoKTtcbiAgICAgIFxuICAgICAgdmFyIGhhbGYgPSBhbmdsZSAqIDAuNTtcbiAgICAgIHZhciBzID0gTWF0aC5zaW4oaGFsZik7XG4gICAgICBkZXN0WzNdID0gTWF0aC5jb3MoaGFsZik7XG4gICAgICBkZXN0WzBdID0gcyAqIGF4aXNbMF07XG4gICAgICBkZXN0WzFdID0gcyAqIGF4aXNbMV07XG4gICAgICBkZXN0WzJdID0gcyAqIGF4aXNbMl07XG4gICAgICBcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBTdG9yZXMgdGhlIGFuZ2xlIGFuZCBheGlzIGluIGEgdmVjNCwgd2hlcmUgdGhlIFhZWiBjb21wb25lbnRzIHJlcHJlc2VudFxuICAgKiB0aGUgYXhpcyBhbmQgdGhlIFcgKDR0aCkgY29tcG9uZW50IGlzIHRoZSBhbmdsZSBpbiByYWRpYW5zLlxuICAgKlxuICAgKiBJZiBkZXN0IGlzIG5vdCBnaXZlbiwgc3JjIHdpbGwgYmUgbW9kaWZpZWQgaW4gcGxhY2UgYW5kIHJldHVybmVkLCBhZnRlclxuICAgKiB3aGljaCBpdCBzaG91bGQgbm90IGJlIGNvbnNpZGVyZWQgbm90IGEgcXVhdGVybmlvbiAoanVzdCBhbiBheGlzIGFuZCBhbmdsZSkuXG4gICAqXG4gICAqIEBwYXJhbSB7cXVhdDR9IHF1YXQgICB0aGUgcXVhdGVybmlvbiB3aG9zZSBhbmdsZSBhbmQgYXhpcyB0byBzdG9yZVxuICAgKiBAcGFyYW0ge3ZlYzR9ICBbZGVzdF0gdGhlIG9wdGlvbmFsIHZlYzQgdG8gcmVjZWl2ZSB0aGUgZGF0YVxuICAgKlxuICAgKiBAcmV0dXJucyB7dmVjNH0gZGVzdFxuICAgKi9cbiAgcXVhdDQudG9BbmdsZUF4aXMgPSBmdW5jdGlvbihzcmMsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgZGVzdCA9IHNyYztcbiAgICAgIC8vIFRoZSBxdWF0ZXJuaW9uIHJlcHJlc2VudGluZyB0aGUgcm90YXRpb24gaXNcbiAgICAgIC8vICAgcSA9IGNvcyhBLzIpK3NpbihBLzIpKih4KmkreSpqK3oqaylcblxuICAgICAgdmFyIHNxcmxlbiA9IHNyY1swXSpzcmNbMF0rc3JjWzFdKnNyY1sxXStzcmNbMl0qc3JjWzJdO1xuICAgICAgaWYgKHNxcmxlbiA+IDApXG4gICAgICB7XG4gICAgICAgICAgZGVzdFszXSA9IDIgKiBNYXRoLmFjb3Moc3JjWzNdKTtcbiAgICAgICAgICB2YXIgaW52bGVuID0gZ2xNYXRoLmludnNxcnQoc3FybGVuKTtcbiAgICAgICAgICBkZXN0WzBdID0gc3JjWzBdKmludmxlbjtcbiAgICAgICAgICBkZXN0WzFdID0gc3JjWzFdKmludmxlbjtcbiAgICAgICAgICBkZXN0WzJdID0gc3JjWzJdKmludmxlbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gYW5nbGUgaXMgMCAobW9kIDIqcGkpLCBzbyBhbnkgYXhpcyB3aWxsIGRvXG4gICAgICAgICAgZGVzdFszXSA9IDA7XG4gICAgICAgICAgZGVzdFswXSA9IDE7XG4gICAgICAgICAgZGVzdFsxXSA9IDA7XG4gICAgICAgICAgZGVzdFsyXSA9IDA7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgcXVhdGVybmlvblxuICAgKlxuICAgKiBAcGFyYW0ge3F1YXQ0fSBxdWF0IHF1YXQ0IHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgcXVhdFxuICAgKi9cbiAgcXVhdDQuc3RyID0gZnVuY3Rpb24gKHF1YXQpIHtcbiAgICAgIHJldHVybiAnWycgKyBxdWF0WzBdICsgJywgJyArIHF1YXRbMV0gKyAnLCAnICsgcXVhdFsyXSArICcsICcgKyBxdWF0WzNdICsgJ10nO1xuICB9O1xuICBcbiAgLyoqXG4gICAqIEBjbGFzcyAyIERpbWVuc2lvbmFsIFZlY3RvclxuICAgKiBAbmFtZSB2ZWMyXG4gICAqL1xuICB2YXIgdmVjMiA9IHt9O1xuICAgXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IHZlYzIsIGluaXRpYWxpemluZyBpdCBmcm9tIHZlYyBpZiB2ZWNcbiAgICogaXMgZ2l2ZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7dmVjMn0gW3ZlY10gdGhlIHZlY3RvcidzIGluaXRpYWwgY29udGVudHNcbiAgICogQHJldHVybnMge3ZlYzJ9IGEgbmV3IDJEIHZlY3RvclxuICAgKi9cbiAgdmVjMi5jcmVhdGUgPSBmdW5jdGlvbih2ZWMpIHtcbiAgICAgIHZhciBkZXN0ID0gbmV3IE1hdHJpeEFycmF5KDIpO1xuXG4gICAgICBpZiAodmVjKSB7XG4gICAgICAgICAgZGVzdFswXSA9IHZlY1swXTtcbiAgICAgICAgICBkZXN0WzFdID0gdmVjWzFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZXN0WzBdID0gMDtcbiAgICAgICAgICBkZXN0WzFdID0gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIGEgdmVjMiwgaW5pdGlhbGl6aW5nIGl0IHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0geCBYIHZhbHVlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IFkgdmFsdWVcblxuICAgKiBAcmV0dXJucyB7dmVjMn0gTmV3IHZlYzJcbiAgICovXG4gIHZlYzIuY3JlYXRlRnJvbSA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICB2YXIgZGVzdCA9IG5ldyBNYXRyaXhBcnJheSgyKTtcblxuICAgICAgZGVzdFswXSA9IHg7XG4gICAgICBkZXN0WzFdID0geTtcblxuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG4gIFxuICAvKipcbiAgICogQWRkcyB0aGUgdmVjMidzIHRvZ2V0aGVyLiBJZiBkZXN0IGlzIGdpdmVuLCB0aGUgcmVzdWx0XG4gICAqIGlzIHN0b3JlZCB0aGVyZS4gT3RoZXJ3aXNlLCB0aGUgcmVzdWx0IGlzIHN0b3JlZCBpbiB2ZWNCLlxuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzJ9IHZlY0EgdGhlIGZpcnN0IG9wZXJhbmRcbiAgICogQHBhcmFtIHt2ZWMyfSB2ZWNCIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgKiBAcGFyYW0ge3ZlYzJ9IFtkZXN0XSB0aGUgb3B0aW9uYWwgcmVjZWl2aW5nIHZlY3RvclxuICAgKiBAcmV0dXJucyB7dmVjMn0gZGVzdFxuICAgKi9cbiAgdmVjMi5hZGQgPSBmdW5jdGlvbih2ZWNBLCB2ZWNCLCBkZXN0KSB7XG4gICAgICBpZiAoIWRlc3QpIGRlc3QgPSB2ZWNCO1xuICAgICAgZGVzdFswXSA9IHZlY0FbMF0gKyB2ZWNCWzBdO1xuICAgICAgZGVzdFsxXSA9IHZlY0FbMV0gKyB2ZWNCWzFdO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG4gIFxuICAvKipcbiAgICogU3VidHJhY3RzIHZlY0IgZnJvbSB2ZWNBLiBJZiBkZXN0IGlzIGdpdmVuLCB0aGUgcmVzdWx0XG4gICAqIGlzIHN0b3JlZCB0aGVyZS4gT3RoZXJ3aXNlLCB0aGUgcmVzdWx0IGlzIHN0b3JlZCBpbiB2ZWNCLlxuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzJ9IHZlY0EgdGhlIGZpcnN0IG9wZXJhbmRcbiAgICogQHBhcmFtIHt2ZWMyfSB2ZWNCIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgKiBAcGFyYW0ge3ZlYzJ9IFtkZXN0XSB0aGUgb3B0aW9uYWwgcmVjZWl2aW5nIHZlY3RvclxuICAgKiBAcmV0dXJucyB7dmVjMn0gZGVzdFxuICAgKi9cbiAgdmVjMi5zdWJ0cmFjdCA9IGZ1bmN0aW9uKHZlY0EsIHZlY0IsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgZGVzdCA9IHZlY0I7XG4gICAgICBkZXN0WzBdID0gdmVjQVswXSAtIHZlY0JbMF07XG4gICAgICBkZXN0WzFdID0gdmVjQVsxXSAtIHZlY0JbMV07XG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcbiAgXG4gIC8qKlxuICAgKiBNdWx0aXBsaWVzIHZlY0Egd2l0aCB2ZWNCLiBJZiBkZXN0IGlzIGdpdmVuLCB0aGUgcmVzdWx0XG4gICAqIGlzIHN0b3JlZCB0aGVyZS4gT3RoZXJ3aXNlLCB0aGUgcmVzdWx0IGlzIHN0b3JlZCBpbiB2ZWNCLlxuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzJ9IHZlY0EgdGhlIGZpcnN0IG9wZXJhbmRcbiAgICogQHBhcmFtIHt2ZWMyfSB2ZWNCIHRoZSBzZWNvbmQgb3BlcmFuZFxuICAgKiBAcGFyYW0ge3ZlYzJ9IFtkZXN0XSB0aGUgb3B0aW9uYWwgcmVjZWl2aW5nIHZlY3RvclxuICAgKiBAcmV0dXJucyB7dmVjMn0gZGVzdFxuICAgKi9cbiAgdmVjMi5tdWx0aXBseSA9IGZ1bmN0aW9uKHZlY0EsIHZlY0IsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgZGVzdCA9IHZlY0I7XG4gICAgICBkZXN0WzBdID0gdmVjQVswXSAqIHZlY0JbMF07XG4gICAgICBkZXN0WzFdID0gdmVjQVsxXSAqIHZlY0JbMV07XG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcbiAgXG4gIC8qKlxuICAgKiBEaXZpZGVzIHZlY0EgYnkgdmVjQi4gSWYgZGVzdCBpcyBnaXZlbiwgdGhlIHJlc3VsdFxuICAgKiBpcyBzdG9yZWQgdGhlcmUuIE90aGVyd2lzZSwgdGhlIHJlc3VsdCBpcyBzdG9yZWQgaW4gdmVjQi5cbiAgICpcbiAgICogQHBhcmFtIHt2ZWMyfSB2ZWNBIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAqIEBwYXJhbSB7dmVjMn0gdmVjQiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICogQHBhcmFtIHt2ZWMyfSBbZGVzdF0gdGhlIG9wdGlvbmFsIHJlY2VpdmluZyB2ZWN0b3JcbiAgICogQHJldHVybnMge3ZlYzJ9IGRlc3RcbiAgICovXG4gIHZlYzIuZGl2aWRlID0gZnVuY3Rpb24odmVjQSwgdmVjQiwgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSBkZXN0ID0gdmVjQjtcbiAgICAgIGRlc3RbMF0gPSB2ZWNBWzBdIC8gdmVjQlswXTtcbiAgICAgIGRlc3RbMV0gPSB2ZWNBWzFdIC8gdmVjQlsxXTtcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuICBcbiAgLyoqXG4gICAqIFNjYWxlcyB2ZWNBIGJ5IHNvbWUgc2NhbGFyIG51bWJlci4gSWYgZGVzdCBpcyBnaXZlbiwgdGhlIHJlc3VsdFxuICAgKiBpcyBzdG9yZWQgdGhlcmUuIE90aGVyd2lzZSwgdGhlIHJlc3VsdCBpcyBzdG9yZWQgaW4gdmVjQS5cbiAgICpcbiAgICogVGhpcyBpcyB0aGUgc2FtZSBhcyBtdWx0aXBseWluZyBlYWNoIGNvbXBvbmVudCBvZiB2ZWNBXG4gICAqIGJ5IHRoZSBnaXZlbiBzY2FsYXIuXG4gICAqXG4gICAqIEBwYXJhbSB7dmVjMn0gICB2ZWNBIHRoZSB2ZWN0b3IgdG8gYmUgc2NhbGVkXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsYXIgdGhlIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XG4gICAqIEBwYXJhbSB7dmVjMn0gICBbZGVzdF0gdGhlIG9wdGlvbmFsIHJlY2VpdmluZyB2ZWN0b3JcbiAgICogQHJldHVybnMge3ZlYzJ9IGRlc3RcbiAgICovXG4gIHZlYzIuc2NhbGUgPSBmdW5jdGlvbih2ZWNBLCBzY2FsYXIsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgZGVzdCA9IHZlY0E7XG4gICAgICBkZXN0WzBdID0gdmVjQVswXSAqIHNjYWxhcjtcbiAgICAgIGRlc3RbMV0gPSB2ZWNBWzFdICogc2NhbGFyO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMyXG4gICAqXG4gICAqIFBhcmFtczpcbiAgICogQHBhcmFtIHt2ZWMyfSB2ZWNBIEZpcnN0IHZlY3RvclxuICAgKiBAcGFyYW0ge3ZlYzJ9IHZlY0IgU2Vjb25kIHZlY3RvclxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBEaXN0YW5jZSBiZXR3ZWVuIHZlY0EgYW5kIHZlY0JcbiAgICovXG4gIHZlYzIuZGlzdCA9IGZ1bmN0aW9uICh2ZWNBLCB2ZWNCKSB7XG4gICAgICB2YXIgeCA9IHZlY0JbMF0gLSB2ZWNBWzBdLFxuICAgICAgICAgIHkgPSB2ZWNCWzFdIC0gdmVjQVsxXTtcbiAgICAgIHJldHVybiBNYXRoLnNxcnQoeCp4ICsgeSp5KTtcbiAgfTtcblxuICAvKipcbiAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2Ygb25lIHZlYzIgdG8gYW5vdGhlclxuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzJ9IHZlYyB2ZWMyIGNvbnRhaW5pbmcgdmFsdWVzIHRvIGNvcHlcbiAgICogQHBhcmFtIHt2ZWMyfSBkZXN0IHZlYzIgcmVjZWl2aW5nIGNvcGllZCB2YWx1ZXNcbiAgICpcbiAgICogQHJldHVybnMge3ZlYzJ9IGRlc3RcbiAgICovXG4gIHZlYzIuc2V0ID0gZnVuY3Rpb24gKHZlYywgZGVzdCkge1xuICAgICAgZGVzdFswXSA9IHZlY1swXTtcbiAgICAgIGRlc3RbMV0gPSB2ZWNbMV07XG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogQ29tcGFyZXMgdHdvIHZlY3RvcnMgZm9yIGVxdWFsaXR5IHdpdGhpbiBhIGNlcnRhaW4gbWFyZ2luIG9mIGVycm9yXG4gICAqXG4gICAqIEBwYXJhbSB7dmVjMn0gYSBGaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIHt2ZWMyfSBiIFNlY29uZCB2ZWN0b3JcbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgYSBpcyBlcXVpdmFsZW50IHRvIGJcbiAgICovXG4gIHZlYzIuZXF1YWwgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEgPT09IGIgfHwgKFxuICAgICAgICAgIE1hdGguYWJzKGFbMF0gLSBiWzBdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICBNYXRoLmFicyhhWzFdIC0gYlsxXSkgPCBGTE9BVF9FUFNJTE9OXG4gICAgICApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBOZWdhdGVzIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMlxuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzJ9IHZlYyB2ZWMyIHRvIG5lZ2F0ZVxuICAgKiBAcGFyYW0ge3ZlYzJ9IFtkZXN0XSB2ZWMyIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHZlY1xuICAgKlxuICAgKiBAcmV0dXJucyB7dmVjMn0gZGVzdCBpZiBzcGVjaWZpZWQsIHZlYyBvdGhlcndpc2VcbiAgICovXG4gIHZlYzIubmVnYXRlID0gZnVuY3Rpb24gKHZlYywgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSB2ZWM7IH1cbiAgICAgIGRlc3RbMF0gPSAtdmVjWzBdO1xuICAgICAgZGVzdFsxXSA9IC12ZWNbMV07XG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogTm9ybWxpemUgYSB2ZWMyXG4gICAqXG4gICAqIEBwYXJhbSB7dmVjMn0gdmVjIHZlYzIgdG8gbm9ybWFsaXplXG4gICAqIEBwYXJhbSB7dmVjMn0gW2Rlc3RdIHZlYzIgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gdmVjXG4gICAqXG4gICAqIEByZXR1cm5zIHt2ZWMyfSBkZXN0IGlmIHNwZWNpZmllZCwgdmVjIG90aGVyd2lzZVxuICAgKi9cbiAgdmVjMi5ub3JtYWxpemUgPSBmdW5jdGlvbiAodmVjLCBkZXN0KSB7XG4gICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IHZlYzsgfVxuICAgICAgdmFyIG1hZyA9IHZlY1swXSAqIHZlY1swXSArIHZlY1sxXSAqIHZlY1sxXTtcbiAgICAgIGlmIChtYWcgPiAwKSB7XG4gICAgICAgICAgbWFnID0gTWF0aC5zcXJ0KG1hZyk7XG4gICAgICAgICAgZGVzdFswXSA9IHZlY1swXSAvIG1hZztcbiAgICAgICAgICBkZXN0WzFdID0gdmVjWzFdIC8gbWFnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZXN0WzBdID0gZGVzdFsxXSA9IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogQ29tcHV0ZXMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdHdvIHZlYzIncy4gTm90ZSB0aGF0IHRoZSBjcm9zcyBwcm9kdWN0IG11c3QgYnkgZGVmaW5pdGlvblxuICAgKiBwcm9kdWNlIGEgM0QgdmVjdG9yLiBJZiBhIGRlc3QgdmVjdG9yIGlzIGdpdmVuLCBpdCB3aWxsIGNvbnRhaW4gdGhlIHJlc3VsdGFudCAzRCB2ZWN0b3IuXG4gICAqIE90aGVyd2lzZSwgYSBzY2FsYXIgbnVtYmVyIHdpbGwgYmUgcmV0dXJuZWQsIHJlcHJlc2VudGluZyB0aGUgdmVjdG9yJ3MgWiBjb29yZGluYXRlLCBzaW5jZVxuICAgKiBpdHMgWCBhbmQgWSBtdXN0IGFsd2F5cyBlcXVhbCAwLlxuICAgKlxuICAgKiBFeGFtcGxlczpcbiAgICogICAgdmFyIGNyb3NzUmVzdWx0ID0gdmVjMy5jcmVhdGUoKTtcbiAgICogICAgdmVjMi5jcm9zcyhbMSwgMl0sIFszLCA0XSwgY3Jvc3NSZXN1bHQpO1xuICAgKiAgICAvLz0+IFswLCAwLCAtMl1cbiAgICpcbiAgICogICAgdmVjMi5jcm9zcyhbMSwgMl0sIFszLCA0XSk7XG4gICAqICAgIC8vPT4gLTJcbiAgICpcbiAgICogU2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjQzOTQ1L2NhbGN1bGF0aW5nLWEtMmQtdmVjdG9ycy1jcm9zcy1wcm9kdWN0XG4gICAqIGZvciBzb21lIGludGVyZXN0aW5nIGZhY3RzLlxuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzJ9IHZlY0EgbGVmdCBvcGVyYW5kXG4gICAqIEBwYXJhbSB7dmVjMn0gdmVjQiByaWdodCBvcGVyYW5kXG4gICAqIEBwYXJhbSB7dmVjMn0gW2Rlc3RdIG9wdGlvbmFsIHZlYzIgcmVjZWl2aW5nIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCBhIHNjYWxhciBpcyByZXR1cm5lZFxuICAgKlxuICAgKi9cbiAgdmVjMi5jcm9zcyA9IGZ1bmN0aW9uICh2ZWNBLCB2ZWNCLCBkZXN0KSB7XG4gICAgICB2YXIgeiA9IHZlY0FbMF0gKiB2ZWNCWzFdIC0gdmVjQVsxXSAqIHZlY0JbMF07XG4gICAgICBpZiAoIWRlc3QpIHJldHVybiB6O1xuICAgICAgZGVzdFswXSA9IGRlc3RbMV0gPSAwO1xuICAgICAgZGVzdFsyXSA9IHo7XG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcbiAgXG4gIC8qKlxuICAgKiBDYWNsdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWMyXG4gICAqXG4gICAqIEBwYXJhbSB7dmVjMn0gdmVjIHZlYzIgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICAgKlxuICAgKiBAcmV0dXJucyB7TnVtYmVyfSBMZW5ndGggb2YgdmVjXG4gICAqL1xuICB2ZWMyLmxlbmd0aCA9IGZ1bmN0aW9uICh2ZWMpIHtcbiAgICB2YXIgeCA9IHZlY1swXSwgeSA9IHZlY1sxXTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDYWNsdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiBhIHZlYzJcbiAgICpcbiAgICogQHBhcmFtIHt2ZWMyfSB2ZWMgdmVjMiB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAgICpcbiAgICogQHJldHVybnMge051bWJlcn0gU3F1YXJlZCBMZW5ndGggb2YgdmVjXG4gICAqL1xuICB2ZWMyLnNxdWFyZWRMZW5ndGggPSBmdW5jdGlvbiAodmVjKSB7XG4gICAgdmFyIHggPSB2ZWNbMF0sIHkgPSB2ZWNbMV07XG4gICAgcmV0dXJuIHggKiB4ICsgeSAqIHk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENhY2x1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWMyc1xuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzJ9IHZlY0EgRmlyc3Qgb3BlcmFuZFxuICAgKiBAcGFyYW0ge3ZlYzJ9IHZlY0IgU2Vjb25kIG9wZXJhbmRcbiAgICpcbiAgICogQHJldHVybnMge051bWJlcn0gRG90IHByb2R1Y3Qgb2YgdmVjQSBhbmQgdmVjQlxuICAgKi9cbiAgdmVjMi5kb3QgPSBmdW5jdGlvbiAodmVjQSwgdmVjQikge1xuICAgICAgcmV0dXJuIHZlY0FbMF0gKiB2ZWNCWzBdICsgdmVjQVsxXSAqIHZlY0JbMV07XG4gIH07XG4gIFxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgMkQgdW5pdCB2ZWN0b3IgcG9pbnRpbmcgZnJvbSBvbmUgdmVjdG9yIHRvIGFub3RoZXJcbiAgICpcbiAgICogQHBhcmFtIHt2ZWMyfSB2ZWNBIE9yaWdpbiB2ZWMyXG4gICAqIEBwYXJhbSB7dmVjMn0gdmVjQiB2ZWMyIHRvIHBvaW50IHRvXG4gICAqIEBwYXJhbSB7dmVjMn0gW2Rlc3RdIHZlYzIgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gdmVjQVxuICAgKlxuICAgKiBAcmV0dXJucyB7dmVjMn0gZGVzdCBpZiBzcGVjaWZpZWQsIHZlY0Egb3RoZXJ3aXNlXG4gICAqL1xuICB2ZWMyLmRpcmVjdGlvbiA9IGZ1bmN0aW9uICh2ZWNBLCB2ZWNCLCBkZXN0KSB7XG4gICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IHZlY0E7IH1cblxuICAgICAgdmFyIHggPSB2ZWNBWzBdIC0gdmVjQlswXSxcbiAgICAgICAgICB5ID0gdmVjQVsxXSAtIHZlY0JbMV0sXG4gICAgICAgICAgbGVuID0geCAqIHggKyB5ICogeTtcblxuICAgICAgaWYgKCFsZW4pIHtcbiAgICAgICAgICBkZXN0WzBdID0gMDtcbiAgICAgICAgICBkZXN0WzFdID0gMDtcbiAgICAgICAgICBkZXN0WzJdID0gMDtcbiAgICAgICAgICByZXR1cm4gZGVzdDtcbiAgICAgIH1cblxuICAgICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgICAgZGVzdFswXSA9IHggKiBsZW47XG4gICAgICBkZXN0WzFdID0geSAqIGxlbjtcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlYzJcbiAgICpcbiAgICogQHBhcmFtIHt2ZWMyfSB2ZWNBIEZpcnN0IHZlY3RvclxuICAgKiBAcGFyYW0ge3ZlYzJ9IHZlY0IgU2Vjb25kIHZlY3RvclxuICAgKiBAcGFyYW0ge051bWJlcn0gbGVycCBJbnRlcnBvbGF0aW9uIGFtb3VudCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXG4gICAqIEBwYXJhbSB7dmVjMn0gW2Rlc3RdIHZlYzIgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHQuIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gdmVjQVxuICAgKlxuICAgKiBAcmV0dXJucyB7dmVjMn0gZGVzdCBpZiBzcGVjaWZpZWQsIHZlY0Egb3RoZXJ3aXNlXG4gICAqL1xuICB2ZWMyLmxlcnAgPSBmdW5jdGlvbiAodmVjQSwgdmVjQiwgbGVycCwgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSB2ZWNBOyB9XG4gICAgICBkZXN0WzBdID0gdmVjQVswXSArIGxlcnAgKiAodmVjQlswXSAtIHZlY0FbMF0pO1xuICAgICAgZGVzdFsxXSA9IHZlY0FbMV0gKyBsZXJwICogKHZlY0JbMV0gLSB2ZWNBWzFdKTtcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdmVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7dmVjMn0gdmVjIFZlY3RvciB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcbiAgICpcbiAgICogQHJldHVybnMge1N0cmluZ30gU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHZlY1xuICAgKi9cbiAgdmVjMi5zdHIgPSBmdW5jdGlvbiAodmVjKSB7XG4gICAgICByZXR1cm4gJ1snICsgdmVjWzBdICsgJywgJyArIHZlY1sxXSArICddJztcbiAgfTtcbiAgXG4gIC8qKlxuICAgKiBAY2xhc3MgMngyIE1hdHJpeFxuICAgKiBAbmFtZSBtYXQyXG4gICAqL1xuICB2YXIgbWF0MiA9IHt9O1xuICBcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgMngyIG1hdHJpeC4gSWYgc3JjIGlzIGdpdmVuLCB0aGUgbmV3IG1hdHJpeFxuICAgKiBpcyBpbml0aWFsaXplZCB0byB0aG9zZSB2YWx1ZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7bWF0Mn0gW3NyY10gdGhlIHNlZWQgdmFsdWVzIGZvciB0aGUgbmV3IG1hdHJpeCwgaWYgYW55XG4gICAqIEByZXR1cm5zIHttYXQyfSBhIG5ldyBtYXRyaXhcbiAgICovXG4gIG1hdDIuY3JlYXRlID0gZnVuY3Rpb24oc3JjKSB7XG4gICAgICB2YXIgZGVzdCA9IG5ldyBNYXRyaXhBcnJheSg0KTtcbiAgICAgIFxuICAgICAgaWYgKHNyYykge1xuICAgICAgICAgIGRlc3RbMF0gPSBzcmNbMF07XG4gICAgICAgICAgZGVzdFsxXSA9IHNyY1sxXTtcbiAgICAgICAgICBkZXN0WzJdID0gc3JjWzJdO1xuICAgICAgICAgIGRlc3RbM10gPSBzcmNbM107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlc3RbMF0gPSBkZXN0WzFdID0gZGVzdFsyXSA9IGRlc3RbM10gPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSBtYXQyLCBpbml0aWFsaXppbmcgaXQgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMDBcbiAgICogQHBhcmFtIHtudW1iZXJ9IG0wMVxuICAgKiBAcGFyYW0ge251bWJlcn0gbTEwXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtMTFcblxuICAgKiBAcmV0dXJucyB7bWF0Mn0gTmV3IG1hdDJcbiAgICovXG4gIG1hdDIuY3JlYXRlRnJvbSA9IGZ1bmN0aW9uIChtMDAsIG0wMSwgbTEwLCBtMTEpIHtcbiAgICAgIHZhciBkZXN0ID0gbmV3IE1hdHJpeEFycmF5KDQpO1xuXG4gICAgICBkZXN0WzBdID0gbTAwO1xuICAgICAgZGVzdFsxXSA9IG0wMTtcbiAgICAgIGRlc3RbMl0gPSBtMTA7XG4gICAgICBkZXN0WzNdID0gbTExO1xuXG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcbiAgXG4gIC8qKlxuICAgKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBvbmUgbWF0MiB0byBhbm90aGVyXG4gICAqXG4gICAqIEBwYXJhbSB7bWF0Mn0gbWF0IG1hdDIgY29udGFpbmluZyB2YWx1ZXMgdG8gY29weVxuICAgKiBAcGFyYW0ge21hdDJ9IGRlc3QgbWF0MiByZWNlaXZpbmcgY29waWVkIHZhbHVlc1xuICAgKlxuICAgKiBAcmV0dXJucyB7bWF0Mn0gZGVzdFxuICAgKi9cbiAgbWF0Mi5zZXQgPSBmdW5jdGlvbiAobWF0LCBkZXN0KSB7XG4gICAgICBkZXN0WzBdID0gbWF0WzBdO1xuICAgICAgZGVzdFsxXSA9IG1hdFsxXTtcbiAgICAgIGRlc3RbMl0gPSBtYXRbMl07XG4gICAgICBkZXN0WzNdID0gbWF0WzNdO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIENvbXBhcmVzIHR3byBtYXRyaWNlcyBmb3IgZXF1YWxpdHkgd2l0aGluIGEgY2VydGFpbiBtYXJnaW4gb2YgZXJyb3JcbiAgICpcbiAgICogQHBhcmFtIHttYXQyfSBhIEZpcnN0IG1hdHJpeFxuICAgKiBAcGFyYW0ge21hdDJ9IGIgU2Vjb25kIG1hdHJpeFxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiBhIGlzIGVxdWl2YWxlbnQgdG8gYlxuICAgKi9cbiAgbWF0Mi5lcXVhbCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYSA9PT0gYiB8fCAoXG4gICAgICAgICAgTWF0aC5hYnMoYVswXSAtIGJbMF0pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgIE1hdGguYWJzKGFbMV0gLSBiWzFdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICBNYXRoLmFicyhhWzJdIC0gYlsyXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgTWF0aC5hYnMoYVszXSAtIGJbM10pIDwgRkxPQVRfRVBTSUxPTlxuICAgICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogU2V0cyBhIG1hdDIgdG8gYW4gaWRlbnRpdHkgbWF0cml4XG4gICAqXG4gICAqIEBwYXJhbSB7bWF0Mn0gW2Rlc3RdIG1hdDIgdG8gc2V0LiBJZiBvbWl0dGVkIGEgbmV3IG9uZSB3aWxsIGJlIGNyZWF0ZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHttYXQyfSBkZXN0XG4gICAqL1xuICBtYXQyLmlkZW50aXR5ID0gZnVuY3Rpb24gKGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gbWF0Mi5jcmVhdGUoKTsgfVxuICAgICAgZGVzdFswXSA9IDE7XG4gICAgICBkZXN0WzFdID0gMDtcbiAgICAgIGRlc3RbMl0gPSAwO1xuICAgICAgZGVzdFszXSA9IDE7XG4gICAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogVHJhbnNwb3NlcyBhIG1hdDIgKGZsaXBzIHRoZSB2YWx1ZXMgb3ZlciB0aGUgZGlhZ29uYWwpXG4gICAqXG4gICAqIEBwYXJhbSB7bWF0Mn0gbWF0IG1hdDIgdG8gdHJhbnNwb3NlXG4gICAqIEBwYXJhbSB7bWF0Mn0gW2Rlc3RdIG1hdDIgcmVjZWl2aW5nIHRyYW5zcG9zZWQgdmFsdWVzLiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIG1hdFxuICAgKlxuICAgKiBAcGFyYW0ge21hdDJ9IGRlc3QgaWYgc3BlY2lmaWVkLCBtYXQgb3RoZXJ3aXNlXG4gICAqL1xuICBtYXQyLnRyYW5zcG9zZSA9IGZ1bmN0aW9uIChtYXQsIGRlc3QpIHtcbiAgICAgIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGUgc29tZSB2YWx1ZXNcbiAgICAgIGlmICghZGVzdCB8fCBtYXQgPT09IGRlc3QpIHtcbiAgICAgICAgICB2YXIgYTAwID0gbWF0WzFdO1xuICAgICAgICAgIG1hdFsxXSA9IG1hdFsyXTtcbiAgICAgICAgICBtYXRbMl0gPSBhMDA7XG4gICAgICAgICAgcmV0dXJuIG1hdDtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgZGVzdFswXSA9IG1hdFswXTtcbiAgICAgIGRlc3RbMV0gPSBtYXRbMl07XG4gICAgICBkZXN0WzJdID0gbWF0WzFdO1xuICAgICAgZGVzdFszXSA9IG1hdFszXTtcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDJcbiAgICpcbiAgICogQHBhcmFtIHttYXQyfSBtYXQgbWF0MiB0byBjYWxjdWxhdGUgZGV0ZXJtaW5hbnQgb2ZcbiAgICpcbiAgICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgbWF0XG4gICAqL1xuICBtYXQyLmRldGVybWluYW50ID0gZnVuY3Rpb24gKG1hdCkge1xuICAgIHJldHVybiBtYXRbMF0gKiBtYXRbM10gLSBtYXRbMl0gKiBtYXRbMV07XG4gIH07XG4gIFxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgaW52ZXJzZSBtYXRyaXggb2YgYSBtYXQyXG4gICAqXG4gICAqIEBwYXJhbSB7bWF0Mn0gbWF0IG1hdDIgdG8gY2FsY3VsYXRlIGludmVyc2Ugb2ZcbiAgICogQHBhcmFtIHttYXQyfSBbZGVzdF0gbWF0MiByZWNlaXZpbmcgaW52ZXJzZSBtYXRyaXguIElmIG5vdCBzcGVjaWZpZWQgcmVzdWx0IGlzIHdyaXR0ZW4gdG8gbWF0XG4gICAqXG4gICAqIEBwYXJhbSB7bWF0Mn0gZGVzdCBpcyBzcGVjaWZpZWQsIG1hdCBvdGhlcndpc2UsIG51bGwgaWYgbWF0cml4IGNhbm5vdCBiZSBpbnZlcnRlZFxuICAgKi9cbiAgbWF0Mi5pbnZlcnNlID0gZnVuY3Rpb24gKG1hdCwgZGVzdCkge1xuICAgICAgaWYgKCFkZXN0KSB7IGRlc3QgPSBtYXQ7IH1cbiAgICAgIHZhciBhMCA9IG1hdFswXSwgYTEgPSBtYXRbMV0sIGEyID0gbWF0WzJdLCBhMyA9IG1hdFszXTtcbiAgICAgIHZhciBkZXQgPSBhMCAqIGEzIC0gYTIgKiBhMTtcbiAgICAgIGlmICghZGV0KSByZXR1cm4gbnVsbDtcbiAgICAgIFxuICAgICAgZGV0ID0gMS4wIC8gZGV0O1xuICAgICAgZGVzdFswXSA9ICBhMyAqIGRldDtcbiAgICAgIGRlc3RbMV0gPSAtYTEgKiBkZXQ7XG4gICAgICBkZXN0WzJdID0gLWEyICogZGV0O1xuICAgICAgZGVzdFszXSA9ICBhMCAqIGRldDtcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuICBcbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgbWF0cml4IG11bHRpcGxpY2F0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7bWF0Mn0gbWF0QSBGaXJzdCBvcGVyYW5kXG4gICAqIEBwYXJhbSB7bWF0Mn0gbWF0QiBTZWNvbmQgb3BlcmFuZFxuICAgKiBAcGFyYW0ge21hdDJ9IFtkZXN0XSBtYXQyIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIG1hdEFcbiAgICpcbiAgICogQHJldHVybnMge21hdDJ9IGRlc3QgaWYgc3BlY2lmaWVkLCBtYXRBIG90aGVyd2lzZVxuICAgKi9cbiAgbWF0Mi5tdWx0aXBseSA9IGZ1bmN0aW9uIChtYXRBLCBtYXRCLCBkZXN0KSB7XG4gICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IG1hdEE7IH1cbiAgICAgIHZhciBhMTEgPSBtYXRBWzBdLFxuICAgICAgICAgIGExMiA9IG1hdEFbMV0sXG4gICAgICAgICAgYTIxID0gbWF0QVsyXSxcbiAgICAgICAgICBhMjIgPSBtYXRBWzNdO1xuICAgICAgZGVzdFswXSA9IGExMSAqIG1hdEJbMF0gKyBhMTIgKiBtYXRCWzJdO1xuICAgICAgZGVzdFsxXSA9IGExMSAqIG1hdEJbMV0gKyBhMTIgKiBtYXRCWzNdO1xuICAgICAgZGVzdFsyXSA9IGEyMSAqIG1hdEJbMF0gKyBhMjIgKiBtYXRCWzJdO1xuICAgICAgZGVzdFszXSA9IGEyMSAqIG1hdEJbMV0gKyBhMjIgKiBtYXRCWzNdO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJvdGF0ZXMgYSAyeDIgbWF0cml4IGJ5IGFuIGFuZ2xlXG4gICAqXG4gICAqIEBwYXJhbSB7bWF0Mn0gICBtYXQgICBUaGUgbWF0cml4IHRvIHJvdGF0ZVxuICAgKiBAcGFyYW0ge051bWJlcn0gYW5nbGUgVGhlIGFuZ2xlIGluIHJhZGlhbnNcbiAgICogQHBhcmFtIHttYXQyfSBbZGVzdF0gIE9wdGlvbmFsIG1hdDIgcmVjZWl2aW5nIHRoZSByZXN1bHQuIElmIG9taXR0ZWQgbWF0IHdpbGwgYmUgdXNlZC5cbiAgICpcbiAgICogQHJldHVybnMge21hdDJ9IGRlc3QgaWYgc3BlY2lmaWVkLCBtYXQgb3RoZXJ3aXNlXG4gICAqL1xuICBtYXQyLnJvdGF0ZSA9IGZ1bmN0aW9uIChtYXQsIGFuZ2xlLCBkZXN0KSB7XG4gICAgICBpZiAoIWRlc3QpIHsgZGVzdCA9IG1hdDsgfVxuICAgICAgdmFyIGExMSA9IG1hdFswXSxcbiAgICAgICAgICBhMTIgPSBtYXRbMV0sXG4gICAgICAgICAgYTIxID0gbWF0WzJdLFxuICAgICAgICAgIGEyMiA9IG1hdFszXSxcbiAgICAgICAgICBzID0gTWF0aC5zaW4oYW5nbGUpLFxuICAgICAgICAgIGMgPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICBkZXN0WzBdID0gYTExICogIGMgKyBhMTIgKiBzO1xuICAgICAgZGVzdFsxXSA9IGExMSAqIC1zICsgYTEyICogYztcbiAgICAgIGRlc3RbMl0gPSBhMjEgKiAgYyArIGEyMiAqIHM7XG4gICAgICBkZXN0WzNdID0gYTIxICogLXMgKyBhMjIgKiBjO1xuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIE11bHRpcGxpZXMgdGhlIHZlYzIgYnkgdGhlIGdpdmVuIDJ4MiBtYXRyaXhcbiAgICpcbiAgICogQHBhcmFtIHttYXQyfSBtYXRyaXggdGhlIDJ4MiBtYXRyaXggdG8gbXVsdGlwbHkgYWdhaW5zdFxuICAgKiBAcGFyYW0ge3ZlYzJ9IHZlYyAgICB0aGUgdmVjdG9yIHRvIG11bHRpcGx5XG4gICAqIEBwYXJhbSB7dmVjMn0gW2Rlc3RdIGFuIG9wdGlvbmFsIHJlY2VpdmluZyB2ZWN0b3IuIElmIG5vdCBnaXZlbiwgdmVjIGlzIHVzZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHt2ZWMyfSBUaGUgbXVsdGlwbGljYXRpb24gcmVzdWx0XG4gICAqKi9cbiAgbWF0Mi5tdWx0aXBseVZlYzIgPSBmdW5jdGlvbihtYXRyaXgsIHZlYywgZGVzdCkge1xuICAgIGlmICghZGVzdCkgZGVzdCA9IHZlYztcbiAgICB2YXIgeCA9IHZlY1swXSwgeSA9IHZlY1sxXTtcbiAgICBkZXN0WzBdID0geCAqIG1hdHJpeFswXSArIHkgKiBtYXRyaXhbMV07XG4gICAgZGVzdFsxXSA9IHggKiBtYXRyaXhbMl0gKyB5ICogbWF0cml4WzNdO1xuICAgIHJldHVybiBkZXN0O1xuICB9O1xuICBcbiAgLyoqXG4gICAqIFNjYWxlcyB0aGUgbWF0MiBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMlxuICAgKlxuICAgKiBAcGFyYW0ge21hdDJ9IG1hdHJpeCB0aGUgMngyIG1hdHJpeCB0byBzY2FsZVxuICAgKiBAcGFyYW0ge3ZlYzJ9IHZlYyAgICB0aGUgdmVjdG9yIGNvbnRhaW5pbmcgdGhlIGRpbWVuc2lvbnMgdG8gc2NhbGUgYnlcbiAgICogQHBhcmFtIHt2ZWMyfSBbZGVzdF0gYW4gb3B0aW9uYWwgcmVjZWl2aW5nIG1hdDIuIElmIG5vdCBnaXZlbiwgbWF0cml4IGlzIHVzZWQuXG4gICAqXG4gICAqIEByZXR1cm5zIHttYXQyfSBkZXN0IGlmIHNwZWNpZmllZCwgbWF0cml4IG90aGVyd2lzZVxuICAgKiovXG4gIG1hdDIuc2NhbGUgPSBmdW5jdGlvbihtYXRyaXgsIHZlYywgZGVzdCkge1xuICAgIGlmICghZGVzdCkgeyBkZXN0ID0gbWF0cml4OyB9XG4gICAgdmFyIGExMSA9IG1hdHJpeFswXSxcbiAgICAgICAgYTEyID0gbWF0cml4WzFdLFxuICAgICAgICBhMjEgPSBtYXRyaXhbMl0sXG4gICAgICAgIGEyMiA9IG1hdHJpeFszXSxcbiAgICAgICAgYjExID0gdmVjWzBdLFxuICAgICAgICBiMjIgPSB2ZWNbMV07XG4gICAgZGVzdFswXSA9IGExMSAqIGIxMTtcbiAgICBkZXN0WzFdID0gYTEyICogYjIyO1xuICAgIGRlc3RbMl0gPSBhMjEgKiBiMTE7XG4gICAgZGVzdFszXSA9IGEyMiAqIGIyMjtcbiAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIG1hdDJcbiAgICpcbiAgICogQHBhcmFtIHttYXQyfSBtYXQgbWF0MiB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBtYXRcbiAgICovXG4gIG1hdDIuc3RyID0gZnVuY3Rpb24gKG1hdCkge1xuICAgICAgcmV0dXJuICdbJyArIG1hdFswXSArICcsICcgKyBtYXRbMV0gKyAnLCAnICsgbWF0WzJdICsgJywgJyArIG1hdFszXSArICddJztcbiAgfTtcbiAgXG4gIC8qKlxuICAgKiBAY2xhc3MgNCBEaW1lbnNpb25hbCBWZWN0b3JcbiAgICogQG5hbWUgdmVjNFxuICAgKi9cbiAgdmFyIHZlYzQgPSB7fTtcbiAgIFxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyB2ZWM0LCBpbml0aWFsaXppbmcgaXQgZnJvbSB2ZWMgaWYgdmVjXG4gICAqIGlzIGdpdmVuLlxuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzR9IFt2ZWNdIHRoZSB2ZWN0b3IncyBpbml0aWFsIGNvbnRlbnRzXG4gICAqIEByZXR1cm5zIHt2ZWM0fSBhIG5ldyAyRCB2ZWN0b3JcbiAgICovXG4gIHZlYzQuY3JlYXRlID0gZnVuY3Rpb24odmVjKSB7XG4gICAgICB2YXIgZGVzdCA9IG5ldyBNYXRyaXhBcnJheSg0KTtcbiAgICAgIFxuICAgICAgaWYgKHZlYykge1xuICAgICAgICAgIGRlc3RbMF0gPSB2ZWNbMF07XG4gICAgICAgICAgZGVzdFsxXSA9IHZlY1sxXTtcbiAgICAgICAgICBkZXN0WzJdID0gdmVjWzJdO1xuICAgICAgICAgIGRlc3RbM10gPSB2ZWNbM107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlc3RbMF0gPSAwO1xuICAgICAgICAgIGRlc3RbMV0gPSAwO1xuICAgICAgICAgIGRlc3RbMl0gPSAwO1xuICAgICAgICAgIGRlc3RbM10gPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgYSB2ZWM0LCBpbml0aWFsaXppbmcgaXQgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IFggdmFsdWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgWSB2YWx1ZVxuICAgKiBAcGFyYW0ge251bWJlcn0geiBaIHZhbHVlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB3IFcgdmFsdWVcblxuICAgKiBAcmV0dXJucyB7dmVjNH0gTmV3IHZlYzRcbiAgICovXG4gIHZlYzQuY3JlYXRlRnJvbSA9IGZ1bmN0aW9uICh4LCB5LCB6LCB3KSB7XG4gICAgICB2YXIgZGVzdCA9IG5ldyBNYXRyaXhBcnJheSg0KTtcblxuICAgICAgZGVzdFswXSA9IHg7XG4gICAgICBkZXN0WzFdID0geTtcbiAgICAgIGRlc3RbMl0gPSB6O1xuICAgICAgZGVzdFszXSA9IHc7XG5cbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuICBcbiAgLyoqXG4gICAqIEFkZHMgdGhlIHZlYzQncyB0b2dldGhlci4gSWYgZGVzdCBpcyBnaXZlbiwgdGhlIHJlc3VsdFxuICAgKiBpcyBzdG9yZWQgdGhlcmUuIE90aGVyd2lzZSwgdGhlIHJlc3VsdCBpcyBzdG9yZWQgaW4gdmVjQi5cbiAgICpcbiAgICogQHBhcmFtIHt2ZWM0fSB2ZWNBIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAqIEBwYXJhbSB7dmVjNH0gdmVjQiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICogQHBhcmFtIHt2ZWM0fSBbZGVzdF0gdGhlIG9wdGlvbmFsIHJlY2VpdmluZyB2ZWN0b3JcbiAgICogQHJldHVybnMge3ZlYzR9IGRlc3RcbiAgICovXG4gIHZlYzQuYWRkID0gZnVuY3Rpb24odmVjQSwgdmVjQiwgZGVzdCkge1xuICAgIGlmICghZGVzdCkgZGVzdCA9IHZlY0I7XG4gICAgZGVzdFswXSA9IHZlY0FbMF0gKyB2ZWNCWzBdO1xuICAgIGRlc3RbMV0gPSB2ZWNBWzFdICsgdmVjQlsxXTtcbiAgICBkZXN0WzJdID0gdmVjQVsyXSArIHZlY0JbMl07XG4gICAgZGVzdFszXSA9IHZlY0FbM10gKyB2ZWNCWzNdO1xuICAgIHJldHVybiBkZXN0O1xuICB9O1xuICBcbiAgLyoqXG4gICAqIFN1YnRyYWN0cyB2ZWNCIGZyb20gdmVjQS4gSWYgZGVzdCBpcyBnaXZlbiwgdGhlIHJlc3VsdFxuICAgKiBpcyBzdG9yZWQgdGhlcmUuIE90aGVyd2lzZSwgdGhlIHJlc3VsdCBpcyBzdG9yZWQgaW4gdmVjQi5cbiAgICpcbiAgICogQHBhcmFtIHt2ZWM0fSB2ZWNBIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAqIEBwYXJhbSB7dmVjNH0gdmVjQiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICogQHBhcmFtIHt2ZWM0fSBbZGVzdF0gdGhlIG9wdGlvbmFsIHJlY2VpdmluZyB2ZWN0b3JcbiAgICogQHJldHVybnMge3ZlYzR9IGRlc3RcbiAgICovXG4gIHZlYzQuc3VidHJhY3QgPSBmdW5jdGlvbih2ZWNBLCB2ZWNCLCBkZXN0KSB7XG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gdmVjQjtcbiAgICBkZXN0WzBdID0gdmVjQVswXSAtIHZlY0JbMF07XG4gICAgZGVzdFsxXSA9IHZlY0FbMV0gLSB2ZWNCWzFdO1xuICAgIGRlc3RbMl0gPSB2ZWNBWzJdIC0gdmVjQlsyXTtcbiAgICBkZXN0WzNdID0gdmVjQVszXSAtIHZlY0JbM107XG4gICAgcmV0dXJuIGRlc3Q7XG4gIH07XG4gIFxuICAvKipcbiAgICogTXVsdGlwbGllcyB2ZWNBIHdpdGggdmVjQi4gSWYgZGVzdCBpcyBnaXZlbiwgdGhlIHJlc3VsdFxuICAgKiBpcyBzdG9yZWQgdGhlcmUuIE90aGVyd2lzZSwgdGhlIHJlc3VsdCBpcyBzdG9yZWQgaW4gdmVjQi5cbiAgICpcbiAgICogQHBhcmFtIHt2ZWM0fSB2ZWNBIHRoZSBmaXJzdCBvcGVyYW5kXG4gICAqIEBwYXJhbSB7dmVjNH0gdmVjQiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAgICogQHBhcmFtIHt2ZWM0fSBbZGVzdF0gdGhlIG9wdGlvbmFsIHJlY2VpdmluZyB2ZWN0b3JcbiAgICogQHJldHVybnMge3ZlYzR9IGRlc3RcbiAgICovXG4gIHZlYzQubXVsdGlwbHkgPSBmdW5jdGlvbih2ZWNBLCB2ZWNCLCBkZXN0KSB7XG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gdmVjQjtcbiAgICBkZXN0WzBdID0gdmVjQVswXSAqIHZlY0JbMF07XG4gICAgZGVzdFsxXSA9IHZlY0FbMV0gKiB2ZWNCWzFdO1xuICAgIGRlc3RbMl0gPSB2ZWNBWzJdICogdmVjQlsyXTtcbiAgICBkZXN0WzNdID0gdmVjQVszXSAqIHZlY0JbM107XG4gICAgcmV0dXJuIGRlc3Q7XG4gIH07XG4gIFxuICAvKipcbiAgICogRGl2aWRlcyB2ZWNBIGJ5IHZlY0IuIElmIGRlc3QgaXMgZ2l2ZW4sIHRoZSByZXN1bHRcbiAgICogaXMgc3RvcmVkIHRoZXJlLiBPdGhlcndpc2UsIHRoZSByZXN1bHQgaXMgc3RvcmVkIGluIHZlY0IuXG4gICAqXG4gICAqIEBwYXJhbSB7dmVjNH0gdmVjQSB0aGUgZmlyc3Qgb3BlcmFuZFxuICAgKiBAcGFyYW0ge3ZlYzR9IHZlY0IgdGhlIHNlY29uZCBvcGVyYW5kXG4gICAqIEBwYXJhbSB7dmVjNH0gW2Rlc3RdIHRoZSBvcHRpb25hbCByZWNlaXZpbmcgdmVjdG9yXG4gICAqIEByZXR1cm5zIHt2ZWM0fSBkZXN0XG4gICAqL1xuICB2ZWM0LmRpdmlkZSA9IGZ1bmN0aW9uKHZlY0EsIHZlY0IsIGRlc3QpIHtcbiAgICBpZiAoIWRlc3QpIGRlc3QgPSB2ZWNCO1xuICAgIGRlc3RbMF0gPSB2ZWNBWzBdIC8gdmVjQlswXTtcbiAgICBkZXN0WzFdID0gdmVjQVsxXSAvIHZlY0JbMV07XG4gICAgZGVzdFsyXSA9IHZlY0FbMl0gLyB2ZWNCWzJdO1xuICAgIGRlc3RbM10gPSB2ZWNBWzNdIC8gdmVjQlszXTtcbiAgICByZXR1cm4gZGVzdDtcbiAgfTtcbiAgXG4gIC8qKlxuICAgKiBTY2FsZXMgdmVjQSBieSBzb21lIHNjYWxhciBudW1iZXIuIElmIGRlc3QgaXMgZ2l2ZW4sIHRoZSByZXN1bHRcbiAgICogaXMgc3RvcmVkIHRoZXJlLiBPdGhlcndpc2UsIHRoZSByZXN1bHQgaXMgc3RvcmVkIGluIHZlY0EuXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIHNhbWUgYXMgbXVsdGlwbHlpbmcgZWFjaCBjb21wb25lbnQgb2YgdmVjQVxuICAgKiBieSB0aGUgZ2l2ZW4gc2NhbGFyLlxuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzR9ICAgdmVjQSB0aGUgdmVjdG9yIHRvIGJlIHNjYWxlZFxuICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGFyIHRoZSBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICAgKiBAcGFyYW0ge3ZlYzR9ICAgW2Rlc3RdIHRoZSBvcHRpb25hbCByZWNlaXZpbmcgdmVjdG9yXG4gICAqIEByZXR1cm5zIHt2ZWM0fSBkZXN0XG4gICAqL1xuICB2ZWM0LnNjYWxlID0gZnVuY3Rpb24odmVjQSwgc2NhbGFyLCBkZXN0KSB7XG4gICAgaWYgKCFkZXN0KSBkZXN0ID0gdmVjQTtcbiAgICBkZXN0WzBdID0gdmVjQVswXSAqIHNjYWxhcjtcbiAgICBkZXN0WzFdID0gdmVjQVsxXSAqIHNjYWxhcjtcbiAgICBkZXN0WzJdID0gdmVjQVsyXSAqIHNjYWxhcjtcbiAgICBkZXN0WzNdID0gdmVjQVszXSAqIHNjYWxhcjtcbiAgICByZXR1cm4gZGVzdDtcbiAgfTtcblxuICAvKipcbiAgICogQ29waWVzIHRoZSB2YWx1ZXMgb2Ygb25lIHZlYzQgdG8gYW5vdGhlclxuICAgKlxuICAgKiBAcGFyYW0ge3ZlYzR9IHZlYyB2ZWM0IGNvbnRhaW5pbmcgdmFsdWVzIHRvIGNvcHlcbiAgICogQHBhcmFtIHt2ZWM0fSBkZXN0IHZlYzQgcmVjZWl2aW5nIGNvcGllZCB2YWx1ZXNcbiAgICpcbiAgICogQHJldHVybnMge3ZlYzR9IGRlc3RcbiAgICovXG4gIHZlYzQuc2V0ID0gZnVuY3Rpb24gKHZlYywgZGVzdCkge1xuICAgICAgZGVzdFswXSA9IHZlY1swXTtcbiAgICAgIGRlc3RbMV0gPSB2ZWNbMV07XG4gICAgICBkZXN0WzJdID0gdmVjWzJdO1xuICAgICAgZGVzdFszXSA9IHZlY1szXTtcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb21wYXJlcyB0d28gdmVjdG9ycyBmb3IgZXF1YWxpdHkgd2l0aGluIGEgY2VydGFpbiBtYXJnaW4gb2YgZXJyb3JcbiAgICpcbiAgICogQHBhcmFtIHt2ZWM0fSBhIEZpcnN0IHZlY3RvclxuICAgKiBAcGFyYW0ge3ZlYzR9IGIgU2Vjb25kIHZlY3RvclxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiBhIGlzIGVxdWl2YWxlbnQgdG8gYlxuICAgKi9cbiAgdmVjNC5lcXVhbCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYSA9PT0gYiB8fCAoXG4gICAgICAgICAgTWF0aC5hYnMoYVswXSAtIGJbMF0pIDwgRkxPQVRfRVBTSUxPTiAmJlxuICAgICAgICAgIE1hdGguYWJzKGFbMV0gLSBiWzFdKSA8IEZMT0FUX0VQU0lMT04gJiZcbiAgICAgICAgICBNYXRoLmFicyhhWzJdIC0gYlsyXSkgPCBGTE9BVF9FUFNJTE9OICYmXG4gICAgICAgICAgTWF0aC5hYnMoYVszXSAtIGJbM10pIDwgRkxPQVRfRVBTSUxPTlxuICAgICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzRcbiAgICpcbiAgICogQHBhcmFtIHt2ZWM0fSB2ZWMgdmVjNCB0byBuZWdhdGVcbiAgICogQHBhcmFtIHt2ZWM0fSBbZGVzdF0gdmVjNCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdC4gSWYgbm90IHNwZWNpZmllZCByZXN1bHQgaXMgd3JpdHRlbiB0byB2ZWNcbiAgICpcbiAgICogQHJldHVybnMge3ZlYzR9IGRlc3QgaWYgc3BlY2lmaWVkLCB2ZWMgb3RoZXJ3aXNlXG4gICAqL1xuICB2ZWM0Lm5lZ2F0ZSA9IGZ1bmN0aW9uICh2ZWMsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gdmVjOyB9XG4gICAgICBkZXN0WzBdID0gLXZlY1swXTtcbiAgICAgIGRlc3RbMV0gPSAtdmVjWzFdO1xuICAgICAgZGVzdFsyXSA9IC12ZWNbMl07XG4gICAgICBkZXN0WzNdID0gLXZlY1szXTtcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBDYWNsdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWMyXG4gICAqXG4gICAqIEBwYXJhbSB7dmVjMn0gdmVjIHZlYzIgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxuICAgKlxuICAgKiBAcmV0dXJucyB7TnVtYmVyfSBMZW5ndGggb2YgdmVjXG4gICAqL1xuICB2ZWM0Lmxlbmd0aCA9IGZ1bmN0aW9uICh2ZWMpIHtcbiAgICB2YXIgeCA9IHZlY1swXSwgeSA9IHZlY1sxXSwgeiA9IHZlY1syXSwgdyA9IHZlY1szXTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3KTtcbiAgfTtcblxuICAvKipcbiAgICogQ2FjbHVsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWM0XG4gICAqXG4gICAqIEBwYXJhbSB7dmVjNH0gdmVjIHZlYzQgdG8gY2FsY3VsYXRlIHNxdWFyZWQgbGVuZ3RoIG9mXG4gICAqXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9IFNxdWFyZWQgTGVuZ3RoIG9mIHZlY1xuICAgKi9cbiAgdmVjNC5zcXVhcmVkTGVuZ3RoID0gZnVuY3Rpb24gKHZlYykge1xuICAgIHZhciB4ID0gdmVjWzBdLCB5ID0gdmVjWzFdLCB6ID0gdmVjWzJdLCB3ID0gdmVjWzNdO1xuICAgIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdztcbiAgfTtcblxuICAvKipcbiAgICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWM0XG4gICAqXG4gICAqIEBwYXJhbSB7dmVjNH0gdmVjQSBGaXJzdCB2ZWN0b3JcbiAgICogQHBhcmFtIHt2ZWM0fSB2ZWNCIFNlY29uZCB2ZWN0b3JcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGxlcnAgSW50ZXJwb2xhdGlvbiBhbW91bnQgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xuICAgKiBAcGFyYW0ge3ZlYzR9IFtkZXN0XSB2ZWM0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0LiBJZiBub3Qgc3BlY2lmaWVkIHJlc3VsdCBpcyB3cml0dGVuIHRvIHZlY0FcbiAgICpcbiAgICogQHJldHVybnMge3ZlYzR9IGRlc3QgaWYgc3BlY2lmaWVkLCB2ZWNBIG90aGVyd2lzZVxuICAgKi9cbiAgdmVjNC5sZXJwID0gZnVuY3Rpb24gKHZlY0EsIHZlY0IsIGxlcnAsIGRlc3QpIHtcbiAgICAgIGlmICghZGVzdCkgeyBkZXN0ID0gdmVjQTsgfVxuICAgICAgZGVzdFswXSA9IHZlY0FbMF0gKyBsZXJwICogKHZlY0JbMF0gLSB2ZWNBWzBdKTtcbiAgICAgIGRlc3RbMV0gPSB2ZWNBWzFdICsgbGVycCAqICh2ZWNCWzFdIC0gdmVjQVsxXSk7XG4gICAgICBkZXN0WzJdID0gdmVjQVsyXSArIGxlcnAgKiAodmVjQlsyXSAtIHZlY0FbMl0pO1xuICAgICAgZGVzdFszXSA9IHZlY0FbM10gKyBsZXJwICogKHZlY0JbM10gLSB2ZWNBWzNdKTtcbiAgICAgIHJldHVybiBkZXN0O1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdmVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7dmVjNH0gdmVjIFZlY3RvciB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcbiAgICpcbiAgICogQHJldHVybnMge1N0cmluZ30gU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHZlY1xuICAgKi9cbiAgdmVjNC5zdHIgPSBmdW5jdGlvbiAodmVjKSB7XG4gICAgICByZXR1cm4gJ1snICsgdmVjWzBdICsgJywgJyArIHZlY1sxXSArICcsICcgKyB2ZWNbMl0gKyAnLCAnICsgdmVjWzNdICsgJ10nO1xuICB9O1xuXG4gIC8qXG4gICAqIEV4cG9ydHNcbiAgICovXG5cbiAgaWYocm9vdCkge1xuICAgICAgcm9vdC5nbE1hdHJpeEFycmF5VHlwZSA9IE1hdHJpeEFycmF5O1xuICAgICAgcm9vdC5NYXRyaXhBcnJheSA9IE1hdHJpeEFycmF5O1xuICAgICAgcm9vdC5zZXRNYXRyaXhBcnJheVR5cGUgPSBzZXRNYXRyaXhBcnJheVR5cGU7XG4gICAgICByb290LmRldGVybWluZU1hdHJpeEFycmF5VHlwZSA9IGRldGVybWluZU1hdHJpeEFycmF5VHlwZTtcbiAgICAgIHJvb3QuZ2xNYXRoID0gZ2xNYXRoO1xuICAgICAgcm9vdC52ZWMyID0gdmVjMjtcbiAgICAgIHJvb3QudmVjMyA9IHZlYzM7XG4gICAgICByb290LnZlYzQgPSB2ZWM0O1xuICAgICAgcm9vdC5tYXQyID0gbWF0MjtcbiAgICAgIHJvb3QubWF0MyA9IG1hdDM7XG4gICAgICByb290Lm1hdDQgPSBtYXQ0O1xuICAgICAgcm9vdC5xdWF0NCA9IHF1YXQ0O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAgIGdsTWF0cml4QXJyYXlUeXBlOiBNYXRyaXhBcnJheSxcbiAgICAgIE1hdHJpeEFycmF5OiBNYXRyaXhBcnJheSxcbiAgICAgIHNldE1hdHJpeEFycmF5VHlwZTogc2V0TWF0cml4QXJyYXlUeXBlLFxuICAgICAgZGV0ZXJtaW5lTWF0cml4QXJyYXlUeXBlOiBkZXRlcm1pbmVNYXRyaXhBcnJheVR5cGUsXG4gICAgICBnbE1hdGg6IGdsTWF0aCxcbiAgICAgIHZlYzI6IHZlYzIsXG4gICAgICB2ZWMzOiB2ZWMzLFxuICAgICAgdmVjNDogdmVjNCxcbiAgICAgIG1hdDI6IG1hdDIsXG4gICAgICBtYXQzOiBtYXQzLFxuICAgICAgbWF0NDogbWF0NCxcbiAgICAgIHF1YXQ0OiBxdWF0NFxuICB9O1xufSkpOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/ChemDoodle/lib/gl-matrix.js\n");

/***/ }),

/***/ "./src/ChemDoodle/lib/index.js":
/*!*************************************!*\
  !*** ./src/ChemDoodle/lib/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _jQuery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jQuery */ \"./src/ChemDoodle/lib/jQuery.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"jQuery\", function() { return _jQuery__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gl-matrix */ \"./src/ChemDoodle/lib/gl-matrix.js\");\n/* harmony import */ var _gl_matrix__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gl_matrix__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _gl_matrix__WEBPACK_IMPORTED_MODULE_1__) if([\"jQuery\",\"jsBezier\",\"MarchingCubes\",\"default\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _gl_matrix__WEBPACK_IMPORTED_MODULE_1__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _jsBezier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsBezier */ \"./src/ChemDoodle/lib/jsBezier.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"jsBezier\", function() { return _jsBezier__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _MarchingCubes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MarchingCubes */ \"./src/ChemDoodle/lib/MarchingCubes.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"MarchingCubes\", function() { return _MarchingCubes__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvbGliL2luZGV4LmpzPzkxYTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9zcmMvQ2hlbURvb2RsZS9saWIvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQge2RlZmF1bHQgYXMgalF1ZXJ5fSBmcm9tICcuL2pRdWVyeSc7XG5leHBvcnQgKiBmcm9tICcuL2dsLW1hdHJpeCc7XG5leHBvcnQge2RlZmF1bHQgYXMganNCZXppZXJ9IGZyb20gJy4vanNCZXppZXInO1xuZXhwb3J0IHtkZWZhdWx0IGFzIE1hcmNoaW5nQ3ViZXN9IGZyb20gJy4vTWFyY2hpbmdDdWJlcyc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ChemDoodle/lib/index.js\n");

/***/ }),

/***/ "./src/ChemDoodle/lib/jQuery.js":
/*!**************************************!*\
  !*** ./src/ChemDoodle/lib/jQuery.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var jquery_mousewheel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery-mousewheel */ \"./node_modules/jquery-mousewheel/jquery.mousewheel.js\");\n/* harmony import */ var jquery_mousewheel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery_mousewheel__WEBPACK_IMPORTED_MODULE_1__);\n\n\njquery__WEBPACK_IMPORTED_MODULE_0___default.a.noConflict(true);\n/* harmony default export */ __webpack_exports__[\"default\"] = (jquery__WEBPACK_IMPORTED_MODULE_0___default.a);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvbGliL2pRdWVyeS5qcz80Mjg1Il0sIm5hbWVzIjpbImpRdWVyeSIsIm5vQ29uZmxpY3QiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUFBLDZDQUFNLENBQUNDLFVBQVAsQ0FBa0IsSUFBbEI7QUFFZUQsNEdBQWYiLCJmaWxlIjoiLi9zcmMvQ2hlbURvb2RsZS9saWIvalF1ZXJ5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGpRdWVyeSBmcm9tICdqcXVlcnknO1xuaW1wb3J0IG1vdXNld2hlZWwgZnJvbSAnanF1ZXJ5LW1vdXNld2hlZWwnO1xuXG5qUXVlcnkubm9Db25mbGljdCh0cnVlKTtcblxuZXhwb3J0IGRlZmF1bHQgalF1ZXJ5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/ChemDoodle/lib/jQuery.js\n");

/***/ }),

/***/ "./src/ChemDoodle/lib/jsBezier.js":
/*!****************************************!*\
  !*** ./src/ChemDoodle/lib/jsBezier.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar lib = {};\n\n(function (lib) {\n  'use strict';\n\n  function sgn(x) {\n    return x == 0 ? 0 : x > 0 ? 1 : -1;\n  }\n\n  var Vectors = {\n    subtract: function subtract(v1, v2) {\n      return {\n        x: v1.x - v2.x,\n        y: v1.y - v2.y\n      };\n    },\n    dotProduct: function dotProduct(v1, v2) {\n      return v1.x * v2.x + v1.y * v2.y;\n    },\n    square: function square(v) {\n      return Math.sqrt(v.x * v.x + v.y * v.y);\n    },\n    scale: function scale(v, s) {\n      return {\n        x: v.x * s,\n        y: v.y * s\n      };\n    }\n  },\n      maxRecursion = 64,\n      flatnessTolerance = Math.pow(2.0, -maxRecursion - 1);\n  /**\n   * Calculates the distance that the point lies from the curve.\n   * \n   * @param point\n   *            a point in the form {x:567, y:3342}\n   * @param curve\n   *            a Bezier curve in the form [{x:..., y:...}, {x:..., y:...},\n   *            {x:..., y:...}, {x:..., y:...}]. note that this is currently\n   *            hardcoded to assume cubiz beziers, but would be better off\n   *            supporting any degree.\n   * @return a JS object literal containing location and distance, for\n   *         example: {location:0.35, distance:10}. Location is analogous to\n   *         the location argument you pass to the pointOnPath function: it is\n   *         a ratio of distance travelled along the curve. Distance is the\n   *         distance in pixels from the point to the curve.\n   */\n\n  var _distanceFromCurve = function _distanceFromCurve(point, curve) {\n    var candidates = [],\n        w = _convertToBezier(point, curve),\n        degree = curve.length - 1,\n        higherDegree = 2 * degree - 1,\n        numSolutions = _findRoots(w, higherDegree, candidates, 0),\n        v = Vectors.subtract(point, curve[0]),\n        dist = Vectors.square(v),\n        t = 0.0;\n\n    for (var i = 0; i < numSolutions; i++) {\n      v = Vectors.subtract(point, _bezier(curve, degree, candidates[i], null, null));\n      var newDist = Vectors.square(v);\n\n      if (newDist < dist) {\n        dist = newDist;\n        t = candidates[i];\n      }\n    }\n\n    v = Vectors.subtract(point, curve[degree]);\n    newDist = Vectors.square(v);\n\n    if (newDist < dist) {\n      dist = newDist;\n      t = 1.0;\n    }\n\n    return {\n      location: t,\n      distance: dist\n    };\n  };\n  /**\n   * finds the nearest point on the curve to the given point.\n   */\n\n\n  var _nearestPointOnCurve = function _nearestPointOnCurve(point, curve) {\n    var td = _distanceFromCurve(point, curve);\n\n    return {\n      point: _bezier(curve, curve.length - 1, td.location, null, null),\n      location: td.location\n    };\n  };\n\n  var _convertToBezier = function _convertToBezier(point, curve) {\n    var degree = curve.length - 1,\n        higherDegree = 2 * degree - 1,\n        c = [],\n        d = [],\n        cdTable = [],\n        w = [],\n        z = [[1.0, 0.6, 0.3, 0.1], [0.4, 0.6, 0.6, 0.4], [0.1, 0.3, 0.6, 1.0]];\n\n    for (var i = 0; i <= degree; i++) {\n      c[i] = Vectors.subtract(curve[i], point);\n    }\n\n    for (var i = 0; i <= degree - 1; i++) {\n      d[i] = Vectors.subtract(curve[i + 1], curve[i]);\n      d[i] = Vectors.scale(d[i], 3.0);\n    }\n\n    for (var row = 0; row <= degree - 1; row++) {\n      for (var column = 0; column <= degree; column++) {\n        if (!cdTable[row]) cdTable[row] = [];\n        cdTable[row][column] = Vectors.dotProduct(d[row], c[column]);\n      }\n    }\n\n    for (i = 0; i <= higherDegree; i++) {\n      if (!w[i]) w[i] = [];\n      w[i].y = 0.0;\n      w[i].x = parseFloat(i) / higherDegree;\n    }\n\n    var n = degree,\n        m = degree - 1;\n\n    for (var k = 0; k <= n + m; k++) {\n      var lb = Math.max(0, k - m),\n          ub = Math.min(k, n);\n\n      for (i = lb; i <= ub; i++) {\n        var j = k - i;\n        w[i + j].y += cdTable[j][i] * z[j][i];\n      }\n    }\n\n    return w;\n  };\n  /**\n   * counts how many roots there are.\n   */\n\n\n  var _findRoots = function _findRoots(w, degree, t, depth) {\n    var left = [],\n        right = [],\n        left_count,\n        right_count,\n        left_t = [],\n        right_t = [];\n\n    switch (_getCrossingCount(w, degree)) {\n      case 0:\n        {\n          return 0;\n        }\n\n      case 1:\n        {\n          if (depth >= maxRecursion) {\n            t[0] = (w[0].x + w[degree].x) / 2.0;\n            return 1;\n          }\n\n          if (_isFlatEnough(w, degree)) {\n            t[0] = _computeXIntercept(w, degree);\n            return 1;\n          }\n\n          break;\n        }\n    }\n\n    _bezier(w, degree, 0.5, left, right);\n\n    left_count = _findRoots(left, degree, left_t, depth + 1);\n    right_count = _findRoots(right, degree, right_t, depth + 1);\n\n    for (var i = 0; i < left_count; i++) {\n      t[i] = left_t[i];\n    }\n\n    for (var i = 0; i < right_count; i++) {\n      t[i + left_count] = right_t[i];\n    }\n\n    return left_count + right_count;\n  };\n\n  var _getCrossingCount = function _getCrossingCount(curve, degree) {\n    var n_crossings = 0,\n        sign,\n        old_sign;\n    sign = old_sign = sgn(curve[0].y);\n\n    for (var i = 1; i <= degree; i++) {\n      sign = sgn(curve[i].y);\n      if (sign != old_sign) n_crossings++;\n      old_sign = sign;\n    }\n\n    return n_crossings;\n  };\n\n  var _isFlatEnough = function _isFlatEnough(curve, degree) {\n    var error, intercept_1, intercept_2, left_intercept, right_intercept, a, b, c, det, dInv, a1, b1, c1, a2, b2, c2;\n    a = curve[0].y - curve[degree].y;\n    b = curve[degree].x - curve[0].x;\n    c = curve[0].x * curve[degree].y - curve[degree].x * curve[0].y;\n    var max_distance_above = 0.0,\n        max_distance_below = 0.0;\n\n    for (var i = 1; i < degree; i++) {\n      var value = a * curve[i].x + b * curve[i].y + c;\n      if (value > max_distance_above) max_distance_above = value;else if (value < max_distance_below) max_distance_below = value;\n    }\n\n    a1 = 0.0;\n    b1 = 1.0;\n    c1 = 0.0;\n    a2 = a;\n    b2 = b;\n    c2 = c - max_distance_above;\n    det = a1 * b2 - a2 * b1;\n    dInv = 1.0 / det;\n    intercept_1 = (b1 * c2 - b2 * c1) * dInv;\n    a2 = a;\n    b2 = b;\n    c2 = c - max_distance_below;\n    det = a1 * b2 - a2 * b1;\n    dInv = 1.0 / det;\n    intercept_2 = (b1 * c2 - b2 * c1) * dInv;\n    left_intercept = Math.min(intercept_1, intercept_2);\n    right_intercept = Math.max(intercept_1, intercept_2);\n    error = right_intercept - left_intercept;\n    return error < flatnessTolerance ? 1 : 0;\n  };\n\n  var _computeXIntercept = function _computeXIntercept(curve, degree) {\n    var XLK = 1.0,\n        YLK = 0.0,\n        XNM = curve[degree].x - curve[0].x,\n        YNM = curve[degree].y - curve[0].y,\n        XMK = curve[0].x - 0.0,\n        YMK = curve[0].y - 0.0,\n        det = XNM * YLK - YNM * XLK,\n        detInv = 1.0 / det,\n        S = (XNM * YMK - YNM * XMK) * detInv;\n    return 0.0 + XLK * S;\n  };\n\n  var _bezier = function _bezier(curve, degree, t, left, right) {\n    var temp = [[]];\n\n    for (var j = 0; j <= degree; j++) {\n      temp[0][j] = curve[j];\n    }\n\n    for (var i = 1; i <= degree; i++) {\n      for (var j = 0; j <= degree - i; j++) {\n        if (!temp[i]) temp[i] = [];\n        if (!temp[i][j]) temp[i][j] = {};\n        temp[i][j].x = (1.0 - t) * temp[i - 1][j].x + t * temp[i - 1][j + 1].x;\n        temp[i][j].y = (1.0 - t) * temp[i - 1][j].y + t * temp[i - 1][j + 1].y;\n      }\n    }\n\n    if (left != null) for (j = 0; j <= degree; j++) {\n      left[j] = temp[j][0];\n    }\n    if (right != null) for (j = 0; j <= degree; j++) {\n      right[j] = temp[degree - j][j];\n    }\n    return temp[degree][0];\n  };\n\n  var _curveFunctionCache = {};\n\n  var _getCurveFunctions = function _getCurveFunctions(order) {\n    var fns = _curveFunctionCache[order];\n\n    if (!fns) {\n      fns = [];\n\n      var f_term = function f_term() {\n        return function (t) {\n          return Math.pow(t, order);\n        };\n      },\n          l_term = function l_term() {\n        return function (t) {\n          return Math.pow(1 - t, order);\n        };\n      },\n          c_term = function c_term(c) {\n        return function (t) {\n          return c;\n        };\n      },\n          t_term = function t_term() {\n        return function (t) {\n          return t;\n        };\n      },\n          one_minus_t_term = function one_minus_t_term() {\n        return function (t) {\n          return 1 - t;\n        };\n      },\n          _termFunc = function _termFunc(terms) {\n        return function (t) {\n          var p = 1;\n\n          for (var i = 0; i < terms.length; i++) {\n            p = p * terms[i](t);\n          }\n\n          return p;\n        };\n      };\n\n      fns.push(new f_term()); // first is t to the power of the curve\n      // order\n\n      for (var i = 1; i < order; i++) {\n        var terms = [new c_term(order)];\n\n        for (var j = 0; j < order - i; j++) {\n          terms.push(new t_term());\n        }\n\n        for (var j = 0; j < i; j++) {\n          terms.push(new one_minus_t_term());\n        }\n\n        fns.push(new _termFunc(terms));\n      }\n\n      fns.push(new l_term()); // last is (1-t) to the power of the curve\n      // order\n\n      _curveFunctionCache[order] = fns;\n    }\n\n    return fns;\n  };\n  /**\n   * calculates a point on the curve, for a Bezier of arbitrary order.\n   * \n   * @param curve\n   *            an array of control points, eg [{x:10,y:20}, {x:50,y:50},\n   *            {x:100,y:100}, {x:120,y:100}]. For a cubic bezier this should\n   *            have four points.\n   * @param location\n   *            a decimal indicating the distance along the curve the point\n   *            should be located at. this is the distance along the curve as\n   *            it travels, taking the way it bends into account. should be a\n   *            number from 0 to 1, inclusive.\n   */\n\n\n  var _pointOnPath = function _pointOnPath(curve, location) {\n    var cc = _getCurveFunctions(curve.length - 1),\n        _x = 0,\n        _y = 0;\n\n    for (var i = 0; i < curve.length; i++) {\n      _x = _x + curve[i].x * cc[i](location);\n      _y = _y + curve[i].y * cc[i](location);\n    }\n\n    return {\n      x: _x,\n      y: _y\n    };\n  };\n\n  var _dist = function _dist(p1, p2) {\n    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n  };\n  /**\n   * finds the point that is 'distance' along the path from 'location'. this\n   * method returns both the x,y location of the point and also its 'location'\n   * (proportion of travel along the path); the method below -\n   * _pointAlongPathFrom - calls this method and just returns the point.\n   */\n\n\n  var _pointAlongPath = function _pointAlongPath(curve, location, distance) {\n    var prev = _pointOnPath(curve, location),\n        tally = 0,\n        curLoc = location,\n        direction = distance > 0 ? 1 : -1,\n        cur = null;\n\n    while (tally < Math.abs(distance)) {\n      curLoc += 0.005 * direction;\n      cur = _pointOnPath(curve, curLoc);\n      tally += _dist(cur, prev);\n      prev = cur;\n    }\n\n    return {\n      point: cur,\n      location: curLoc\n    };\n  };\n\n  var _length = function _length(curve) {\n    var prev = _pointOnPath(curve, 0),\n        tally = 0,\n        curLoc = 0,\n        direction = 1,\n        cur = null;\n\n    while (curLoc < 1) {\n      curLoc += 0.005 * direction;\n      cur = _pointOnPath(curve, curLoc);\n      tally += _dist(cur, prev);\n      prev = cur;\n    }\n\n    return tally;\n  };\n  /**\n   * finds the point that is 'distance' along the path from 'location'.\n   */\n\n\n  var _pointAlongPathFrom = function _pointAlongPathFrom(curve, location, distance) {\n    return _pointAlongPath(curve, location, distance).point;\n  };\n  /**\n   * finds the location that is 'distance' along the path from 'location'.\n   */\n\n\n  var _locationAlongPathFrom = function _locationAlongPathFrom(curve, location, distance) {\n    return _pointAlongPath(curve, location, distance).location;\n  };\n  /**\n   * returns the gradient of the curve at the given location, which is a\n   * decimal between 0 and 1 inclusive.\n   * \n   * thanks // http://bimixual.org/AnimationLibrary/beziertangents.html\n   */\n\n\n  var _gradientAtPoint = function _gradientAtPoint(curve, location) {\n    var p1 = _pointOnPath(curve, location),\n        p2 = _pointOnPath(curve.slice(0, curve.length - 1), location),\n        dy = p2.y - p1.y,\n        dx = p2.x - p1.x;\n\n    return dy == 0 ? Infinity : Math.atan(dy / dx);\n  };\n  /**\n   * returns the gradient of the curve at the point which is 'distance' from\n   * the given location. if this point is greater than location 1, the\n   * gradient at location 1 is returned. if this point is less than location\n   * 0, the gradient at location 0 is returned.\n   */\n\n\n  var _gradientAtPointAlongPathFrom = function _gradientAtPointAlongPathFrom(curve, location, distance) {\n    var p = _pointAlongPath(curve, location, distance);\n\n    if (p.location > 1) p.location = 1;\n    if (p.location < 0) p.location = 0;\n    return _gradientAtPoint(curve, p.location);\n  };\n  /**\n   * calculates a line that is 'length' pixels long, perpendicular to, and\n   * centered on, the path at 'distance' pixels from the given location. if\n   * distance is not supplied, the perpendicular for the given location is\n   * computed (ie. we set distance to zero).\n   */\n\n\n  var _perpendicularToPathAt = function _perpendicularToPathAt(curve, location, length, distance) {\n    distance = distance == null ? 0 : distance;\n\n    var p = _pointAlongPath(curve, location, distance),\n        m = _gradientAtPoint(curve, p.location),\n        _theta2 = Math.atan(-1 / m),\n        y = length / 2 * Math.sin(_theta2),\n        x = length / 2 * Math.cos(_theta2);\n\n    return [{\n      x: p.point.x + x,\n      y: p.point.y + y\n    }, {\n      x: p.point.x - x,\n      y: p.point.y - y\n    }];\n  };\n\n  lib.jsBezier = {\n    distanceFromCurve: _distanceFromCurve,\n    gradientAtPoint: _gradientAtPoint,\n    gradientAtPointAlongCurveFrom: _gradientAtPointAlongPathFrom,\n    nearestPointOnCurve: _nearestPointOnCurve,\n    pointOnCurve: _pointOnPath,\n    pointAlongCurveFrom: _pointAlongPathFrom,\n    perpendicularToCurveAt: _perpendicularToPathAt,\n    locationAlongCurveFrom: _locationAlongPathFrom,\n    getLength: _length\n  };\n})(lib);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (lib.jsBezier);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/lib/jsBezier.js\n");

/***/ }),

/***/ "./src/ChemDoodle/math/Bounds.js":
/*!***************************************!*\
  !*** ./src/ChemDoodle/math/Bounds.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Bounds; });\nvar m = Math;\nfunction Bounds() {}\n;\nvar _ = Bounds.prototype;\n_.minX = _.minY = _.minZ = Infinity;\n_.maxX = _.maxY = _.maxZ = -Infinity;\n\n_.expand = function (x1, y1, x2, y2) {\n  if (x1 instanceof Bounds) {\n    // only need to compare min and max since bounds already has\n    // them ordered\n    this.minX = m.min(this.minX, x1.minX);\n    this.minY = m.min(this.minY, x1.minY);\n    this.maxX = m.max(this.maxX, x1.maxX);\n    this.maxY = m.max(this.maxY, x1.maxY);\n\n    if (x1.maxZ !== Infinity) {\n      this.minZ = m.min(this.minZ, x1.minZ);\n      this.maxZ = m.max(this.maxZ, x1.maxZ);\n    }\n  } else {\n    this.minX = m.min(this.minX, x1);\n    this.maxX = m.max(this.maxX, x1);\n    this.minY = m.min(this.minY, y1);\n    this.maxY = m.max(this.maxY, y1); // these two values could be 0, so check if undefined\n\n    if (x2 !== undefined && y2 !== undefined) {\n      this.minX = m.min(this.minX, x2);\n      this.maxX = m.max(this.maxX, x2);\n      this.minY = m.min(this.minY, y2);\n      this.maxY = m.max(this.maxY, y2);\n    }\n  }\n};\n\n_.expand3D = function (x1, y1, z1, x2, y2, z2) {\n  this.minX = m.min(this.minX, x1);\n  this.maxX = m.max(this.maxX, x1);\n  this.minY = m.min(this.minY, y1);\n  this.maxY = m.max(this.maxY, y1);\n  this.minZ = m.min(this.minZ, z1);\n  this.maxZ = m.max(this.maxZ, z1); // these two values could be 0, so check if undefined\n\n  if (x2 !== undefined && y2 !== undefined && z2 !== undefined) {\n    this.minX = m.min(this.minX, x2);\n    this.maxX = m.max(this.maxX, x2);\n    this.minY = m.min(this.minY, y2);\n    this.maxY = m.max(this.maxY, y2);\n    this.minZ = m.min(this.minZ, z2);\n    this.maxZ = m.max(this.maxZ, z2);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvbWF0aC9Cb3VuZHMuanM/YmVjNyJdLCJuYW1lcyI6WyJtIiwiTWF0aCIsIkJvdW5kcyIsIl8iLCJwcm90b3R5cGUiLCJtaW5YIiwibWluWSIsIm1pbloiLCJJbmZpbml0eSIsIm1heFgiLCJtYXhZIiwibWF4WiIsImV4cGFuZCIsIngxIiwieTEiLCJ4MiIsInkyIiwibWluIiwibWF4IiwidW5kZWZpbmVkIiwiZXhwYW5kM0QiLCJ6MSIsInoyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUEsSUFBTUEsQ0FBQyxHQUFHQyxJQUFWO0FBRWUsU0FBU0MsTUFBVCxHQUFrQixDQUNoQztBQUFBO0FBQ0QsSUFBSUMsQ0FBQyxHQUFHRCxNQUFNLENBQUNFLFNBQWY7QUFDQUQsQ0FBQyxDQUFDRSxJQUFGLEdBQVNGLENBQUMsQ0FBQ0csSUFBRixHQUFTSCxDQUFDLENBQUNJLElBQUYsR0FBU0MsUUFBM0I7QUFDQUwsQ0FBQyxDQUFDTSxJQUFGLEdBQVNOLENBQUMsQ0FBQ08sSUFBRixHQUFTUCxDQUFDLENBQUNRLElBQUYsR0FBUyxDQUFDSCxRQUE1Qjs7QUFDQUwsQ0FBQyxDQUFDUyxNQUFGLEdBQVcsVUFBU0MsRUFBVCxFQUFhQyxFQUFiLEVBQWlCQyxFQUFqQixFQUFxQkMsRUFBckIsRUFBeUI7QUFDbEMsTUFBSUgsRUFBRSxZQUFZWCxNQUFsQixFQUEwQjtBQUN4QjtBQUNBO0FBQ0EsU0FBS0csSUFBTCxHQUFZTCxDQUFDLENBQUNpQixHQUFGLENBQU0sS0FBS1osSUFBWCxFQUFpQlEsRUFBRSxDQUFDUixJQUFwQixDQUFaO0FBQ0EsU0FBS0MsSUFBTCxHQUFZTixDQUFDLENBQUNpQixHQUFGLENBQU0sS0FBS1gsSUFBWCxFQUFpQk8sRUFBRSxDQUFDUCxJQUFwQixDQUFaO0FBQ0EsU0FBS0csSUFBTCxHQUFZVCxDQUFDLENBQUNrQixHQUFGLENBQU0sS0FBS1QsSUFBWCxFQUFpQkksRUFB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WjtBQUNBLFNBQUtULElBQUwsR0FBWU4sQ0FBQyxDQUFDaUIsR0FBRixDQUFNLEtBQUtYLElBQVgsRUFBaUJVLEVBQWpCLENBQVo7QUFDQSxTQUFLTixJQUFMLEdBQVlWLENBQUMsQ0FBQ2tCLEdBQUYsQ0FBTSxLQUFLUixJQUFYLEVBQWlCTSxFQUFqQixDQUFaO0FBQ0EsU0FBS1QsSUFBTCxHQUFZUCxDQUFDLENBQUNpQixHQUFGLENBQU0sS0FBS1YsSUFBWCxFQUFpQmUsRUFBakIsQ0FBWjtBQUNBLFNBQUtYLElBQUwsR0FBWVgsQ0FBQyxDQUFDa0IsR0FBRixDQUFNLEtBQUtQLElBQVgsRUFBaUJXLEVBQWpCLENBQVo7QUFDRDtBQUNGLENBaEJEIiwiZmlsZSI6Ii4vc3JjL0NoZW1Eb29kbGUvbWF0aC9Cb3VuZHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtID0gTWF0aDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQm91bmRzKCkge1xufTtcbnZhciBfID0gQm91bmRzLnByb3RvdHlwZTtcbl8ubWluWCA9IF8ubWluWSA9IF8ubWluWiA9IEluZmluaXR5O1xuXy5tYXhYID0gXy5tYXhZID0gXy5tYXhaID0gLUluZmluaXR5O1xuXy5leHBhbmQgPSBmdW5jdGlvbih4MSwgeTEsIHgyLCB5Mikge1xuICBpZiAoeDEgaW5zdGFuY2VvZiBCb3VuZHMpIHtcbiAgICAvLyBvbmx5IG5lZWQgdG8gY29tcGFyZSBtaW4gYW5kIG1heCBzaW5jZSBib3VuZHMgYWxyZWFkeSBoYXNcbiAgICAvLyB0aGVtIG9yZGVyZWRcbiAgICB0aGlzLm1pblggPSBtLm1pbih0aGlzLm1pblgsIHgxLm1pblgpO1xuICAgIHRoaXMubWluWSA9IG0ubWluKHRoaXMubWluWSwgeDEubWluWSk7XG4gICAgdGhpcy5tYXhYID0gbS5tYXgodGhpcy5tYXhYLCB4MS5tYXhYKTtcbiAgICB0aGlzLm1heFkgPSBtLm1heCh0aGlzLm1heFksIHgxLm1heFkpO1xuICAgIGlmKHgxLm1heFohPT1JbmZpbml0eSl7XG4gICAgICB0aGlzLm1pblogPSBtLm1pbih0aGlzLm1pblosIHgxLm1pblopO1xuICAgICAgdGhpcy5tYXhaID0gbS5tYXgodGhpcy5tYXhaLCB4MS5tYXhaKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5taW5YID0gbS5taW4odGhpcy5taW5YLCB4MSk7XG4gICAgdGhpcy5tYXhYID0gbS5tYXgodGhpcy5tYXhYLCB4MSk7XG4gICAgdGhpcy5taW5ZID0gbS5taW4odGhpcy5taW5ZLCB5MSk7XG4gICAgdGhpcy5tYXhZID0gbS5tYXgodGhpcy5tYXhZLCB5MSk7XG4gICAgLy8gdGhlc2UgdHdvIHZhbHVlcyBjb3VsZCBiZSAwLCBzbyBjaGVjayBpZiB1bmRlZmluZWRcbiAgICBpZiAoeDIgIT09IHVuZGVmaW5lZCAmJiB5MiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLm1pblggPSBtLm1pbih0aGlzLm1pblgsIHgyKTtcbiAgICAgIHRoaXMubWF4WCA9IG0ubWF4KHRoaXMubWF4WCwgeDIpO1xuICAgICAgdGhpcy5taW5ZID0gbS5taW4odGhpcy5taW5ZLCB5Mik7XG4gICAgICB0aGlzLm1heFkgPSBtLm1heCh0aGlzLm1heFksIHkyKTtcbiAgICB9XG4gIH1cbn07XG5fLmV4cGFuZDNEID0gZnVuY3Rpb24oeDEsIHkxLCB6MSwgeDIsIHkyLCB6Mikge1xuICB0aGlzLm1pblggPSBtLm1pbih0aGlzLm1pblgsIHgxKTtcbiAgdGhpcy5tYXhYID0gbS5tYXgodGhpcy5tYXhYLCB4MSk7XG4gIHRoaXMubWluWSA9IG0ubWluKHRoaXMubWluWSwgeTEpO1xuICB0aGlzLm1heFkgPSBtLm1heCh0aGlzLm1heFksIHkxKTtcbiAgdGhpcy5taW5aID0gbS5taW4odGhpcy5taW5aLCB6MSk7XG4gIHRoaXMubWF4WiA9IG0ubWF4KHRoaXMubWF4WiwgejEpO1xuICAvLyB0aGVzZSB0d28gdmFsdWVzIGNvdWxkIGJlIDAsIHNvIGNoZWNrIGlmIHVuZGVmaW5lZFxuICBpZiAoeDIgIT09IHVuZGVmaW5lZCAmJiB5MiAhPT0gdW5kZWZpbmVkICYmIHoyICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzLm1pblggPSBtLm1pbih0aGlzLm1pblgsIHgyKTtcbiAgICB0aGlzLm1heFggPSBtLm1heCh0aGlzLm1heFgsIHgyKTtcbiAgICB0aGlzLm1pblkgPSBtLm1pbih0aGlzLm1pblksIHkyKTtcbiAgICB0aGlzLm1heFkgPSBtLm1heCh0aGlzLm1heFksIHkyKTtcbiAgICB0aGlzLm1pblogPSBtLm1pbih0aGlzLm1pblosIHoyKTtcbiAgICB0aGlzLm1heFogPSBtLm1heCh0aGlzLm1heFosIHoyKTtcbiAgfVxufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ChemDoodle/math/Bounds.js\n");

/***/ }),

/***/ "./src/ChemDoodle/math/index.js":
/*!**************************************!*\
  !*** ./src/ChemDoodle/math/index.js ***!
  \**************************************/
/*! exports provided: Bounds, angleBetweenLargest, isBetween, getRGB, hsl2rgb, idx2color, distanceFromPointToLineInclusive, calculateDistanceInterior, intersectLines, clamp, rainbowAt, angleBounds, isPointInPoly */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"angleBetweenLargest\", function() { return angleBetweenLargest; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isBetween\", function() { return isBetween; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getRGB\", function() { return getRGB; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hsl2rgb\", function() { return hsl2rgb; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"idx2color\", function() { return idx2color; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"distanceFromPointToLineInclusive\", function() { return distanceFromPointToLineInclusive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"calculateDistanceInterior\", function() { return calculateDistanceInterior; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"intersectLines\", function() { return intersectLines; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clamp\", function() { return clamp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rainbowAt\", function() { return rainbowAt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"angleBounds\", function() { return angleBounds; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isPointInPoly\", function() { return isPointInPoly; });\n/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../extensions */ \"./src/ChemDoodle/extensions/index.js\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib */ \"./src/ChemDoodle/lib/index.js\");\n/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../structures */ \"./src/ChemDoodle/structures/index.js\");\n/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../ChemDoodle */ \"./src/ChemDoodle/index.js\");\n/* harmony import */ var _Bounds__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Bounds */ \"./src/ChemDoodle/math/Bounds.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Bounds\", function() { return _Bounds__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; });\n\n\n\n\n\n\nvar m = Math;\nvar pack = {};\nvar namedColors = {\n  'aliceblue': '#f0f8ff',\n  'antiquewhite': '#faebd7',\n  'aqua': '#00ffff',\n  'aquamarine': '#7fffd4',\n  'azure': '#f0ffff',\n  'beige': '#f5f5dc',\n  'bisque': '#ffe4c4',\n  'black': '#000000',\n  'blanchedalmond': '#ffebcd',\n  'blue': '#0000ff',\n  'blueviolet': '#8a2be2',\n  'brown': '#a52a2a',\n  'burlywood': '#deb887',\n  'cadetblue': '#5f9ea0',\n  'chartreuse': '#7fff00',\n  'chocolate': '#d2691e',\n  'coral': '#ff7f50',\n  'cornflowerblue': '#6495ed',\n  'cornsilk': '#fff8dc',\n  'crimson': '#dc143c',\n  'cyan': '#00ffff',\n  'darkblue': '#00008b',\n  'darkcyan': '#008b8b',\n  'darkgoldenrod': '#b8860b',\n  'darkgray': '#a9a9a9',\n  'darkgreen': '#006400',\n  'darkkhaki': '#bdb76b',\n  'darkmagenta': '#8b008b',\n  'darkolivegreen': '#556b2f',\n  'darkorange': '#ff8c00',\n  'darkorchid': '#9932cc',\n  'darkred': '#8b0000',\n  'darksalmon': '#e9967a',\n  'darkseagreen': '#8fbc8f',\n  'darkslateblue': '#483d8b',\n  'darkslategray': '#2f4f4f',\n  'darkturquoise': '#00ced1',\n  'darkviolet': '#9400d3',\n  'deeppink': '#ff1493',\n  'deepskyblue': '#00bfff',\n  'dimgray': '#696969',\n  'dodgerblue': '#1e90ff',\n  'firebrick': '#b22222',\n  'floralwhite': '#fffaf0',\n  'forestgreen': '#228b22',\n  'fuchsia': '#ff00ff',\n  'gainsboro': '#dcdcdc',\n  'ghostwhite': '#f8f8ff',\n  'gold': '#ffd700',\n  'goldenrod': '#daa520',\n  'gray': '#808080',\n  'green': '#008000',\n  'greenyellow': '#adff2f',\n  'honeydew': '#f0fff0',\n  'hotpink': '#ff69b4',\n  'indianred ': '#cd5c5c',\n  'indigo ': '#4b0082',\n  'ivory': '#fffff0',\n  'khaki': '#f0e68c',\n  'lavender': '#e6e6fa',\n  'lavenderblush': '#fff0f5',\n  'lawngreen': '#7cfc00',\n  'lemonchiffon': '#fffacd',\n  'lightblue': '#add8e6',\n  'lightcoral': '#f08080',\n  'lightcyan': '#e0ffff',\n  'lightgoldenrodyellow': '#fafad2',\n  'lightgrey': '#d3d3d3',\n  'lightgreen': '#90ee90',\n  'lightpink': '#ffb6c1',\n  'lightsalmon': '#ffa07a',\n  'lightseagreen': '#20b2aa',\n  'lightskyblue': '#87cefa',\n  'lightslategray': '#778899',\n  'lightsteelblue': '#b0c4de',\n  'lightyellow': '#ffffe0',\n  'lime': '#00ff00',\n  'limegreen': '#32cd32',\n  'linen': '#faf0e6',\n  'magenta': '#ff00ff',\n  'maroon': '#800000',\n  'mediumaquamarine': '#66cdaa',\n  'mediumblue': '#0000cd',\n  'mediumorchid': '#ba55d3',\n  'mediumpurple': '#9370d8',\n  'mediumseagreen': '#3cb371',\n  'mediumslateblue': '#7b68ee',\n  'mediumspringgreen': '#00fa9a',\n  'mediumturquoise': '#48d1cc',\n  'mediumvioletred': '#c71585',\n  'midnightblue': '#191970',\n  'mintcream': '#f5fffa',\n  'mistyrose': '#ffe4e1',\n  'moccasin': '#ffe4b5',\n  'navajowhite': '#ffdead',\n  'navy': '#000080',\n  'oldlace': '#fdf5e6',\n  'olive': '#808000',\n  'olivedrab': '#6b8e23',\n  'orange': '#ffa500',\n  'orangered': '#ff4500',\n  'orchid': '#da70d6',\n  'palegoldenrod': '#eee8aa',\n  'palegreen': '#98fb98',\n  'paleturquoise': '#afeeee',\n  'palevioletred': '#d87093',\n  'papayawhip': '#ffefd5',\n  'peachpuff': '#ffdab9',\n  'peru': '#cd853f',\n  'pink': '#ffc0cb',\n  'plum': '#dda0dd',\n  'powderblue': '#b0e0e6',\n  'purple': '#800080',\n  'red': '#ff0000',\n  'rosybrown': '#bc8f8f',\n  'royalblue': '#4169e1',\n  'saddlebrown': '#8b4513',\n  'salmon': '#fa8072',\n  'sandybrown': '#f4a460',\n  'seagreen': '#2e8b57',\n  'seashell': '#fff5ee',\n  'sienna': '#a0522d',\n  'silver': '#c0c0c0',\n  'skyblue': '#87ceeb',\n  'slateblue': '#6a5acd',\n  'slategray': '#708090',\n  'snow': '#fffafa',\n  'springgreen': '#00ff7f',\n  'steelblue': '#4682b4',\n  'tan': '#d2b48c',\n  'teal': '#008080',\n  'thistle': '#d8bfd8',\n  'tomato': '#ff6347',\n  'turquoise': '#40e0d0',\n  'violet': '#ee82ee',\n  'wheat': '#f5deb3',\n  'white': '#ffffff',\n  'whitesmoke': '#f5f5f5',\n  'yellow': '#ffff00',\n  'yellowgreen': '#9acd32'\n};\nfunction angleBetweenLargest(angles) {\n  if (angles.length === 0) {\n    return {\n      angle: 0,\n      largest: m.PI * 2\n    };\n  }\n\n  if (angles.length === 1) {\n    return {\n      angle: angles[0] + m.PI,\n      largest: m.PI * 2\n    };\n  }\n\n  var largest = 0;\n  var angle = 0;\n\n  for (var i = 0, ii = angles.length - 1; i < ii; i++) {\n    var dif = angles[i + 1] - angles[i];\n\n    if (dif > largest) {\n      largest = dif;\n      angle = (angles[i + 1] + angles[i]) / 2;\n    }\n  }\n\n  var last = angles[0] + m.PI * 2 - angles[angles.length - 1];\n\n  if (last > largest) {\n    angle = angles[0] - last / 2;\n    largest = last;\n\n    if (angle < 0) {\n      angle += m.PI * 2;\n    }\n  }\n\n  return {\n    angle: angle,\n    largest: largest\n  };\n}\n;\nfunction isBetween(x, left, right) {\n  if (left > right) {\n    var tmp = left;\n    left = right;\n    right = tmp;\n  }\n\n  return x >= left && x <= right;\n}\n; // be careful not to remove this, as this will cause corruption issues\n// contact iChemLabs for instructions to remove this\n\nObject(_lib__WEBPACK_IMPORTED_MODULE_1__[\"jQuery\"])(document).ready(function () {\n  if (_ChemDoodle__WEBPACK_IMPORTED_MODULE_3__ && _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__[\"iChemLabs\"] && _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__[\"iChemLabs\"].checkForUpdates) {\n    _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__[\"iChemLabs\"].checkForUpdates({});\n  }\n});\nfunction getRGB(color, multiplier) {\n  var err = [0, 0, 0];\n\n  if (namedColors[color.toLowerCase()]) {\n    color = namedColors[color.toLowerCase()];\n  }\n\n  if (color.charAt(0) === '#') {\n    if (color.length === 4) {\n      color = '#' + color.charAt(1) + color.charAt(1) + color.charAt(2) + color.charAt(2) + color.charAt(3) + color.charAt(3);\n    }\n\n    return [parseInt(color.substring(1, 3), 16) / 255.0 * multiplier, parseInt(color.substring(3, 5), 16) / 255.0 * multiplier, parseInt(color.substring(5, 7), 16) / 255.0 * multiplier];\n  } else if (Object(_extensions__WEBPACK_IMPORTED_MODULE_0__[\"stringStartsWith\"])(color, 'rgb')) {\n    var cs = color.replace(/rgb\\(|\\)/g, '').split(',');\n\n    if (cs.length !== 3) {\n      return err;\n    }\n\n    return [parseInt(cs[0]) / 255.0 * multiplier, parseInt(cs[1]) / 255.0 * multiplier, parseInt(cs[2]) / 255.0 * multiplier];\n  }\n\n  return err;\n}\n;\nfunction hsl2rgb(h, s, l) {\n  var hue2rgb = function hue2rgb(p, q, t) {\n    if (t < 0) {\n      t += 1;\n    } else if (t > 1) {\n      t -= 1;\n    }\n\n    if (t < 1 / 6) {\n      return p + (q - p) * 6 * t;\n    } else if (t < 1 / 2) {\n      return q;\n    } else if (t < 2 / 3) {\n      return p + (q - p) * (2 / 3 - t) * 6;\n    }\n\n    return p;\n  };\n\n  var r, g, b;\n\n  if (s === 0) {\n    r = g = b = l; // achromatic\n  } else {\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return [r * 255, g * 255, b * 255];\n}\n;\nfunction idx2color(value) {\n  var hex = value.toString(16); // add '0' padding\n\n  for (var i = 0, ii = 6 - hex.length; i < ii; i++) {\n    hex = \"0\" + hex;\n  }\n\n  return \"#\" + hex;\n}\n;\nfunction distanceFromPointToLineInclusive(p, l1, l2, retract) {\n  var length = l1.distance(l2);\n  var angle = l1.angle(l2);\n  var angleDif = m.PI / 2 - angle;\n  var newAngleP = l1.angle(p) + angleDif;\n  var pDist = l1.distance(p);\n  var pcopRot = new _structures__WEBPACK_IMPORTED_MODULE_2__[\"Point\"](pDist * m.cos(newAngleP), -pDist * m.sin(newAngleP));\n  var pull = retract ? retract : 0;\n\n  if (isBetween(-pcopRot.y, pull, length - pull)) {\n    return m.abs(pcopRot.x);\n  }\n\n  return -1;\n}\n;\nfunction calculateDistanceInterior(to, from, r) {\n  if (isBetween(from.x, r.x, r.x + r.w) && isBetween(from.y, r.y, r.y + r.h)) {\n    return to.distance(from);\n  } // calculates the distance that a line needs to remove from itself to be\n  // outside that rectangle\n\n\n  var lines = []; // top\n\n  lines.push({\n    x1: r.x,\n    y1: r.y,\n    x2: r.x + r.w,\n    y2: r.y\n  }); // bottom\n\n  lines.push({\n    x1: r.x,\n    y1: r.y + r.h,\n    x2: r.x + r.w,\n    y2: r.y + r.h\n  }); // left\n\n  lines.push({\n    x1: r.x,\n    y1: r.y,\n    x2: r.x,\n    y2: r.y + r.h\n  }); // right\n\n  lines.push({\n    x1: r.x + r.w,\n    y1: r.y,\n    x2: r.x + r.w,\n    y2: r.y + r.h\n  });\n  var intersections = [];\n\n  for (var i = 0; i < 4; i++) {\n    var l = lines[i];\n    var p = intersectLines(from.x, from.y, to.x, to.y, l.x1, l.y1, l.x2, l.y2);\n\n    if (p) {\n      intersections.push(p);\n    }\n  }\n\n  if (intersections.length === 0) {\n    return 0;\n  }\n\n  var max = 0;\n\n  for (var i = 0, ii = intersections.length; i < ii; i++) {\n    var p = intersections[i];\n    var dx = to.x - p.x;\n    var dy = to.y - p.y;\n    max = m.max(max, m.sqrt(dx * dx + dy * dy));\n  }\n\n  return max;\n}\n;\nfunction intersectLines(ax, ay, bx, by, cx, cy, dx, dy) {\n  // calculate the direction vectors\n  bx -= ax;\n  by -= ay;\n  dx -= cx;\n  dy -= cy; // are they parallel?\n\n  var denominator = by * dx - bx * dy;\n\n  if (denominator === 0) {\n    return false;\n  } // calculate point of intersection\n\n\n  var r = (dy * (ax - cx) - dx * (ay - cy)) / denominator;\n  var s = (by * (ax - cx) - bx * (ay - cy)) / denominator;\n\n  if (s >= 0 && s <= 1 && r >= 0 && r <= 1) {\n    return {\n      x: ax + r * bx,\n      y: ay + r * by\n    };\n  } else {\n    return false;\n  }\n}\n;\nfunction clamp(value, min, max) {\n  return value < min ? min : value > max ? max : value;\n}\n;\nfunction rainbowAt(i, ii, colors) {\n  // The rainbow colors length must be more than one color\n  if (colors.length < 1) {\n    colors.push('#000000', '#FFFFFF');\n  } else if (colors.length < 2) {\n    colors.push('#FFFFFF');\n  }\n\n  var step = ii / (colors.length - 1);\n  var j = m.floor(i / step);\n  var t = (i - j * step) / step;\n  var startColor = getRGB(colors[j], 1);\n  var endColor = getRGB(colors[j + 1], 1);\n  var lerpColor = [(startColor[0] + (endColor[0] - startColor[0]) * t) * 255, (startColor[1] + (endColor[1] - startColor[1]) * t) * 255, (startColor[2] + (endColor[2] - startColor[2]) * t) * 255];\n  return 'rgb(' + lerpColor.join(',') + ')';\n}\n;\nfunction angleBounds(angle, convertToDegrees, limitToPi) {\n  var full = m.PI * 2;\n\n  while (angle < 0) {\n    angle += full;\n  }\n\n  while (angle > full) {\n    angle -= full;\n  }\n\n  if (limitToPi && angle > m.PI) {\n    angle = 2 * m.PI - angle;\n  }\n\n  if (convertToDegrees) {\n    angle = 180 * angle / m.PI;\n  }\n\n  return angle;\n}\n;\nfunction isPointInPoly(poly, pt) {\n  for (var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i) {\n    (poly[i].y <= pt.y && pt.y < poly[j].y || poly[j].y <= pt.y && pt.y < poly[i].y) && pt.x < (poly[j].x - poly[i].x) * (pt.y - poly[i].y) / (poly[j].y - poly[i].y) + poly[i].x && (c = !c);\n  }\n\n  return c;\n}\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/math/index.js\n");

/***/ }),

/***/ "./src/ChemDoodle/monitor.js":
/*!***********************************!*\
  !*** ./src/ChemDoodle/monitor.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _featureDetection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./featureDetection */ \"./src/ChemDoodle/featureDetection.js\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib */ \"./src/ChemDoodle/lib/index.js\");\n\n\nvar m = {};\nm.CANVAS_DRAGGING = undefined;\nm.CANVAS_OVER = undefined;\nm.ALT = false;\nm.SHIFT = false;\nm.META = false;\n\nif (!_featureDetection__WEBPACK_IMPORTED_MODULE_0__[\"default\"].supports_touch()) {\n  Object(_lib__WEBPACK_IMPORTED_MODULE_1__[\"jQuery\"])(document).ready(function () {\n    // handles dragging beyond the canvas bounds\n    Object(_lib__WEBPACK_IMPORTED_MODULE_1__[\"jQuery\"])(document).mousemove(function (e) {\n      if (m.CANVAS_DRAGGING) {\n        if (m.CANVAS_DRAGGING.drag) {\n          m.CANVAS_DRAGGING.prehandleEvent(e);\n          m.CANVAS_DRAGGING.drag(e);\n        }\n      }\n    });\n    Object(_lib__WEBPACK_IMPORTED_MODULE_1__[\"jQuery\"])(document).mouseup(function (e) {\n      if (m.CANVAS_DRAGGING && m.CANVAS_DRAGGING !== m.CANVAS_OVER) {\n        if (m.CANVAS_DRAGGING.mouseup) {\n          m.CANVAS_DRAGGING.prehandleEvent(e);\n          m.CANVAS_DRAGGING.mouseup(e);\n        }\n      }\n\n      m.CANVAS_DRAGGING = undefined;\n    }); // handles modifier keys from a single keyboard\n\n    Object(_lib__WEBPACK_IMPORTED_MODULE_1__[\"jQuery\"])(document).keydown(function (e) {\n      m.SHIFT = e.shiftKey;\n      m.ALT = e.altKey;\n      m.META = e.metaKey || e.ctrlKey;\n      var affecting = m.CANVAS_OVER;\n\n      if (m.CANVAS_DRAGGING) {\n        affecting = m.CANVAS_DRAGGING;\n      }\n\n      if (affecting) {\n        if (affecting.keydown) {\n          affecting.prehandleEvent(e);\n          affecting.keydown(e);\n        }\n      }\n    });\n    Object(_lib__WEBPACK_IMPORTED_MODULE_1__[\"jQuery\"])(document).keypress(function (e) {\n      var affecting = m.CANVAS_OVER;\n\n      if (m.CANVAS_DRAGGING) {\n        affecting = m.CANVAS_DRAGGING;\n      }\n\n      if (affecting) {\n        if (affecting.keypress) {\n          affecting.prehandleEvent(e);\n          affecting.keypress(e);\n        }\n      }\n    });\n    Object(_lib__WEBPACK_IMPORTED_MODULE_1__[\"jQuery\"])(document).keyup(function (e) {\n      m.SHIFT = e.shiftKey;\n      m.ALT = e.altKey;\n      m.META = e.metaKey || e.ctrlKey;\n      var affecting = m.CANVAS_OVER;\n\n      if (m.CANVAS_DRAGGING) {\n        affecting = m.CANVAS_DRAGGING;\n      }\n\n      if (affecting) {\n        if (affecting.keyup) {\n          affecting.prehandleEvent(e);\n          affecting.keyup(e);\n        }\n      }\n    });\n  });\n}\n\nvar monitor = m;\n/* harmony default export */ __webpack_exports__[\"default\"] = (monitor);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvbW9uaXRvci5qcz83MDVhIl0sIm5hbWVzIjpbIm0iLCJDQU5WQVNfRFJBR0dJTkciLCJ1bmRlZmluZWQiLCJDQU5WQVNfT1ZFUiIsIkFMVCIsIlNISUZUIiwiTUVUQSIsImZlYXR1cmVEZXRlY3Rpb24iLCJzdXBwb3J0c190b3VjaCIsInEiLCJkb2N1bWVudCIsInJlYWR5IiwibW91c2Vtb3ZlIiwiZSIsImRyYWciLCJwcmVoYW5kbGVFdmVudCIsIm1vdXNldXAiLCJrZXlkb3duIiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY3RybEtleSIsImFmZmVjdGluZyIsImtleXByZXNzIiwia2V5dXAiLCJtb25pdG9yIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUEsSUFBSUEsQ0FBQyxHQUFHLEVBQVI7QUFFQUEsQ0FBQyxDQUFDQyxlQUFGLEdBQW9CQyxTQUFwQjtBQUNBRixDQUFDLENBQUNHLFdBQUYsR0FBZ0JELFNBQWhCO0FBQ0FGLENBQUMsQ0FBQ0ksR0FBRixHQUFRLEtBQVI7QUFDQUosQ0FBQyxDQUFDSyxLQUFGLEdBQVUsS0FBVjtBQUNBTCxDQUFDLENBQUNNLElBQUYsR0FBUyxLQUFUOztBQUVBLElBQUksQ0FBQ0MseURBQWdCLENBQUNDLGNBQWpCLEVBQUwsRUFBd0M7QUFDdENDLHFEQUFDLENBQUNDLFFBQUQsQ0FBRCxDQUFZQyxLQUFaLENBQWtCLFlBQVc7QUFDM0I7QUFDQUYsdURBQUMsQ0FBQ0MsUUFBRCxDQUFELENBQVlFLFNBQVosQ0FBc0IsVUFBU0MsQ0FBVCxFQUFZO0FBQ2hDLFVBQUliLENBQUMsQ0FBQ0MsZUFBTixFQUF1QjtBQUNyQixZQUFJRCxDQUFDLENBQUNDLGVBQUYsQ0FBa0JhLElBQXRCLEVBQTRCO0FBQzFCZCxXQUFDLENBQUNDLGVBQUYsQ0FBa0JjLGNBQWxCLENBQWlDRixDQUFqQztBQUNBYixXQUFDLENBQUND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LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZlYXR1cmVEZXRlY3Rpb24gZnJvbSAnLi9mZWF0dXJlRGV0ZWN0aW9uJztcbmltcG9ydCB7IGpRdWVyeSBhcyBxIH0gZnJvbSAnLi9saWInO1xuXG52YXIgbSA9IHt9O1xuXG5tLkNBTlZBU19EUkFHR0lORyA9IHVuZGVmaW5lZDtcbm0uQ0FOVkFTX09WRVIgPSB1bmRlZmluZWQ7XG5tLkFMVCA9IGZhbHNlO1xubS5TSElGVCA9IGZhbHNlO1xubS5NRVRBID0gZmFsc2U7XG5cbmlmICghZmVhdHVyZURldGVjdGlvbi5zdXBwb3J0c190b3VjaCgpKSB7XG4gIHEoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgIC8vIGhhbmRsZXMgZHJhZ2dpbmcgYmV5b25kIHRoZSBjYW52YXMgYm91bmRzXG4gICAgcShkb2N1bWVudCkubW91c2Vtb3ZlKGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmIChtLkNBTlZBU19EUkFHR0lORykge1xuICAgICAgICBpZiAobS5DQU5WQVNfRFJBR0dJTkcuZHJhZykge1xuICAgICAgICAgIG0uQ0FOVkFTX0RSQUdHSU5HLnByZWhhbmRsZUV2ZW50KGUpO1xuICAgICAgICAgIG0uQ0FOVkFTX0RSQUdHSU5HLmRyYWcoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBxKGRvY3VtZW50KS5tb3VzZXVwKGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmIChtLkNBTlZBU19EUkFHR0lORyAmJiBtLkNBTlZBU19EUkFHR0lORyAhPT0gbS5DQU5WQVNfT1ZFUikge1xuICAgICAgICBpZiAobS5DQU5WQVNfRFJBR0dJTkcubW91c2V1cCkge1xuICAgICAgICAgIG0uQ0FOVkFTX0RSQUdHSU5HLnByZWhhbmRsZUV2ZW50KGUpO1xuICAgICAgICAgIG0uQ0FOVkFTX0RSQUdHSU5HLm1vdXNldXAoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG0uQ0FOVkFTX0RSQUdHSU5HID0gdW5kZWZpbmVkO1xuICAgIH0pO1xuICAgIC8vIGhhbmRsZXMgbW9kaWZpZXIga2V5cyBmcm9tIGEgc2luZ2xlIGtleWJvYXJkXG4gICAgcShkb2N1bWVudCkua2V5ZG93bihmdW5jdGlvbihlKSB7XG4gICAgICBtLlNISUZUID0gZS5zaGlmdEtleTtcbiAgICAgIG0uQUxUID0gZS5hbHRLZXk7XG4gICAgICBtLk1FVEEgPSBlLm1ldGFLZXkgfHwgZS5jdHJsS2V5O1xuICAgICAgdmFyIGFmZmVjdGluZyA9IG0uQ0FOVkFTX09WRVI7XG4gICAgICBpZiAobS5DQU5WQVNfRFJBR0dJTkcpIHtcbiAgICAgICAgYWZmZWN0aW5nID0gbS5DQU5WQVNfRFJBR0dJTkc7XG4gICAgICB9XG4gICAgICBpZiAoYWZmZWN0aW5nKSB7XG4gICAgICAgIGlmIChhZmZlY3Rpbmcua2V5ZG93bikge1xuICAgICAgICAgIGFmZmVjdGluZy5wcmVoYW5kbGVFdmVudChlKTtcbiAgICAgICAgICBhZmZlY3Rpbmcua2V5ZG93bihlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHEoZG9jdW1lbnQpLmtleXByZXNzKGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBhZmZlY3RpbmcgPSBtLkNBTlZBU19PVkVSO1xuICAgICAgaWYgKG0uQ0FOVkFTX0RSQUdHSU5HKSB7XG4gICAgICAgIGFmZmVjdGluZyA9IG0uQ0FOVkFTX0RSQUdHSU5HO1xuICAgICAgfVxuICAgICAgaWYgKGFmZmVjdGluZykge1xuICAgICAgICBpZiAoYWZmZWN0aW5nLmtleXByZXNzKSB7XG4gICAgICAgICAgYWZmZWN0aW5nLnByZWhhbmRsZUV2ZW50KGUpO1xuICAgICAgICAgIGFmZmVjdGluZy5rZXlwcmVzcyhlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHEoZG9jdW1lbnQpLmtleXVwKGZ1bmN0aW9uKGUpIHtcbiAgICAgIG0uU0hJRlQgPSBlLnNoaWZ0S2V5O1xuICAgICAgbS5BTFQgPSBlLmFsdEtleTtcbiAgICAgIG0uTUVUQSA9IGUubWV0YUtleSB8fCBlLmN0cmxLZXk7XG4gICAgICB2YXIgYWZmZWN0aW5nID0gbS5DQU5WQVNfT1ZFUjtcbiAgICAgIGlmIChtLkNBTlZBU19EUkFHR0lORykge1xuICAgICAgICBhZmZlY3RpbmcgPSBtLkNBTlZBU19EUkFHR0lORztcbiAgICAgIH1cbiAgICAgIGlmIChhZmZlY3RpbmcpIHtcbiAgICAgICAgaWYgKGFmZmVjdGluZy5rZXl1cCkge1xuICAgICAgICAgIGFmZmVjdGluZy5wcmVoYW5kbGVFdmVudChlKTtcbiAgICAgICAgICBhZmZlY3Rpbmcua2V5dXAoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmNvbnN0IG1vbml0b3IgPSBtO1xuZXhwb3J0IGRlZmF1bHQgbW9uaXRvcjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/ChemDoodle/monitor.js\n");

/***/ }),

/***/ "./src/ChemDoodle/structures/Atom.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/structures/Atom.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Atom; });\n/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ChemDoodle */ \"./src/ChemDoodle/index.js\");\n/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../extensions */ \"./src/ChemDoodle/extensions/index.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math */ \"./src/ChemDoodle/math/index.js\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib */ \"./src/ChemDoodle/lib/index.js\");\n/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Point */ \"./src/ChemDoodle/structures/Point.js\");\n/* harmony import */ var _CondensedLabel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CondensedLabel */ \"./src/ChemDoodle/structures/CondensedLabel.js\");\n\n\n\n\n\n\nvar m = Math;\nfunction Atom(label, x, y, z) {\n  this.label = label ? label.replace(/\\s/g, '') : 'C';\n  this.x = x ? x : 0;\n  this.y = y ? y : 0;\n  this.z = z ? z : 0;\n}\n;\n\nvar _ = Atom.prototype = new _Point__WEBPACK_IMPORTED_MODULE_4__[\"default\"](0, 0);\n\n_.charge = 0;\n_.numLonePair = 0;\n_.numRadical = 0;\n_.mass = -1;\n_.implicitH = -1;\n_.coordinationNumber = 0;\n_.bondNumber = 0;\n_.angleOfLeastInterference = 0;\n_.isHidden = false;\n_.altLabel = undefined;\n_.isLone = false;\n_.isHover = false;\n_.isSelected = false;\n\n_.add3D = function (p) {\n  this.x += p.x;\n  this.y += p.y;\n  this.z += p.z;\n};\n\n_.sub3D = function (p) {\n  this.x -= p.x;\n  this.y -= p.y;\n  this.z -= p.z;\n};\n\n_.distance3D = function (p) {\n  var dx = p.x - this.x;\n  var dy = p.y - this.y;\n  var dz = p.z - this.z;\n  return m.sqrt(dx * dx + dy * dy + dz * dz);\n};\n\n_.draw = function (ctx, specs) {\n  if (this.dontDraw) {\n    // this is used when the atom shouldn't be visible, such as when the text input field is open over this atom\n    return;\n  }\n\n  if (this.isLassoed) {\n    var grd = ctx.createRadialGradient(this.x - 1, this.y - 1, 0, this.x, this.y, 7);\n    grd.addColorStop(0, 'rgba(212, 99, 0, 0)');\n    grd.addColorStop(0.7, 'rgba(212, 99, 0, 0.8)');\n    ctx.fillStyle = grd;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, 5, 0, m.PI * 2, false);\n    ctx.fill();\n  }\n\n  if (this.query) {\n    return;\n  }\n\n  this.textBounds = [];\n\n  if (this.specs) {\n    specs = this.specs;\n  }\n\n  var font = _extensions__WEBPACK_IMPORTED_MODULE_1__[\"getFontString\"](specs.atoms_font_size_2D, specs.atoms_font_families_2D, specs.atoms_font_bold_2D, specs.atoms_font_italic_2D);\n  ctx.font = font;\n  ctx.fillStyle = this.getElementColor(specs.atoms_useJMOLColors, specs.atoms_usePYMOLColors, specs.atoms_color, 2);\n\n  if (this.label === 'H' && specs.atoms_HBlack_2D) {\n    ctx.fillStyle = 'black';\n  }\n\n  if (this.error) {\n    ctx.fillStyle = specs.colorError;\n  }\n\n  var hAngle;\n  var labelVisible = this.isLabelVisible(specs);\n\n  if (this.isLone && !labelVisible || specs.atoms_circles_2D) {\n    // always use carbon gray for lone carbon atom dots\n    if (this.isLone) {\n      ctx.fillStyle = '#909090';\n    }\n\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, specs.atoms_circleDiameter_2D / 2, 0, m.PI * 2, false);\n    ctx.fill();\n\n    if (specs.atoms_circleBorderWidth_2D > 0) {\n      ctx.lineWidth = specs.atoms_circleBorderWidth_2D;\n      ctx.strokeStyle = 'black';\n      ctx.stroke();\n    }\n  } else if (labelVisible) {\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle'; // keep check to undefined here as dev may set altLabel to empty\n    // string\n\n    if (this.altLabel !== undefined) {\n      // altLabel can be 0, so check if undefined\n      ctx.fillText(this.altLabel, this.x, this.y);\n      var symbolWidth = ctx.measureText(this.altLabel).width;\n      this.textBounds.push({\n        x: this.x - symbolWidth / 2,\n        y: this.y - specs.atoms_font_size_2D / 2 + 1,\n        w: symbolWidth,\n        h: specs.atoms_font_size_2D - 2\n      });\n    } else if (!_ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"ELEMENT\"][this.label]) {\n      if (_CondensedLabel__WEBPACK_IMPORTED_MODULE_5__[\"default\"]) {\n        // CondensedLabel is proprietary and not included in the GPL version\n        if (!this.condensed || this.condensed.text !== this.label) {\n          this.condensed = new _CondensedLabel__WEBPACK_IMPORTED_MODULE_5__[\"default\"](this, this.label);\n        }\n\n        this.condensed.draw(ctx, specs);\n      } else {\n        ctx.fillText(this.label, this.x, this.y);\n        var symbolWidth = ctx.measureText(this.label).width;\n        this.textBounds.push({\n          x: this.x - symbolWidth / 2,\n          y: this.y - specs.atoms_font_size_2D / 2 + 1,\n          w: symbolWidth,\n          h: specs.atoms_font_size_2D - 2\n        });\n      }\n    } else {\n      ctx.fillText(this.label, this.x, this.y);\n      var symbolWidth = ctx.measureText(this.label).width;\n      this.textBounds.push({\n        x: this.x - symbolWidth / 2,\n        y: this.y - specs.atoms_font_size_2D / 2 + 1,\n        w: symbolWidth,\n        h: specs.atoms_font_size_2D - 2\n      }); // mass\n\n      var massWidth = 0;\n\n      if (this.mass !== -1) {\n        var fontSave = ctx.font;\n        ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_1__[\"getFontString\"](specs.atoms_font_size_2D * .7, specs.atoms_font_families_2D, specs.atoms_font_bold_2D, specs.atoms_font_italic_2D);\n        massWidth = ctx.measureText(this.mass).width;\n        ctx.fillText(this.mass, this.x - massWidth - .5, this.y - specs.atoms_font_size_2D / 2 + 1);\n        this.textBounds.push({\n          x: this.x - symbolWidth / 2 - massWidth - .5,\n          y: this.y - specs.atoms_font_size_2D * 1.7 / 2 + 1,\n          w: massWidth,\n          h: specs.atoms_font_size_2D / 2 - 1\n        });\n        ctx.font = fontSave;\n      } // implicit hydrogens\n\n\n      var chargeOffset = symbolWidth / 2;\n      var numHs = this.getImplicitHydrogenCount();\n\n      if (specs.atoms_implicitHydrogens_2D && numHs > 0) {\n        hAngle = 0;\n        var hWidth = ctx.measureText('H').width;\n        var moveCharge = true;\n\n        if (numHs > 1) {\n          var xoffset = symbolWidth / 2 + hWidth / 2;\n          var yoffset = 0;\n          var subFont = _extensions__WEBPACK_IMPORTED_MODULE_1__[\"getFontString\"](specs.atoms_font_size_2D * .8, specs.atoms_font_families_2D, specs.atoms_font_bold_2D, specs.atoms_font_italic_2D);\n          ctx.font = subFont;\n          var numWidth = ctx.measureText(numHs).width;\n\n          if (this.bondNumber === 1) {\n            if (this.angleOfLeastInterference > m.PI / 2 && this.angleOfLeastInterference < 3 * m.PI / 2) {\n              xoffset = -symbolWidth / 2 - numWidth - hWidth / 2 - massWidth / 2;\n              moveCharge = false;\n              hAngle = m.PI;\n            }\n          } else {\n            if (this.angleOfLeastInterference <= m.PI / 4) {// default\n            } else if (this.angleOfLeastInterference < 3 * m.PI / 4) {\n              xoffset = 0;\n              yoffset = -specs.atoms_font_size_2D * .9;\n\n              if (this.charge !== 0) {\n                yoffset -= specs.atoms_font_size_2D * .3;\n              }\n\n              moveCharge = false;\n              hAngle = m.PI / 2;\n            } else if (this.angleOfLeastInterference <= 5 * m.PI / 4) {\n              xoffset = -symbolWidth / 2 - numWidth - hWidth / 2 - massWidth / 2;\n              moveCharge = false;\n              hAngle = m.PI;\n            } else if (this.angleOfLeastInterference < 7 * m.PI / 4) {\n              xoffset = 0;\n              yoffset = specs.atoms_font_size_2D * .9;\n              moveCharge = false;\n              hAngle = 3 * m.PI / 2;\n            }\n          }\n\n          ctx.font = font;\n          ctx.fillText('H', this.x + xoffset, this.y + yoffset);\n          ctx.font = subFont;\n          ctx.fillText(numHs, this.x + xoffset + hWidth / 2 + numWidth / 2, this.y + yoffset + specs.atoms_font_size_2D * .3);\n          this.textBounds.push({\n            x: this.x + xoffset - hWidth / 2,\n            y: this.y + yoffset - specs.atoms_font_size_2D / 2 + 1,\n            w: hWidth,\n            h: specs.atoms_font_size_2D - 2\n          });\n          this.textBounds.push({\n            x: this.x + xoffset + hWidth / 2,\n            y: this.y + yoffset + specs.atoms_font_size_2D * .3 - specs.atoms_font_size_2D / 2 + 1,\n            w: numWidth,\n            h: specs.atoms_font_size_2D * .8 - 2\n          });\n        } else {\n          var xoffset = symbolWidth / 2 + hWidth / 2;\n          var yoffset = 0;\n\n          if (this.bondNumber === 1) {\n            if (this.angleOfLeastInterference > m.PI / 2 && this.angleOfLeastInterference < 3 * m.PI / 2) {\n              xoffset = -symbolWidth / 2 - hWidth / 2 - massWidth / 2;\n              moveCharge = false;\n              hAngle = m.PI;\n            }\n          } else {\n            if (this.angleOfLeastInterference <= m.PI / 4) {// default\n            } else if (this.angleOfLeastInterference < 3 * m.PI / 4) {\n              xoffset = 0;\n              yoffset = -specs.atoms_font_size_2D * .9;\n              moveCharge = false;\n              hAngle = m.PI / 2;\n            } else if (this.angleOfLeastInterference <= 5 * m.PI / 4) {\n              xoffset = -symbolWidth / 2 - hWidth / 2 - massWidth / 2;\n              moveCharge = false;\n              hAngle = m.PI;\n            } else if (this.angleOfLeastInterference < 7 * m.PI / 4) {\n              xoffset = 0;\n              yoffset = specs.atoms_font_size_2D * .9;\n              moveCharge = false;\n              hAngle = 3 * m.PI / 2;\n            }\n          }\n\n          ctx.fillText('H', this.x + xoffset, this.y + yoffset);\n          this.textBounds.push({\n            x: this.x + xoffset - hWidth / 2,\n            y: this.y + yoffset - specs.atoms_font_size_2D / 2 + 1,\n            w: hWidth,\n            h: specs.atoms_font_size_2D - 2\n          });\n        }\n\n        if (moveCharge) {\n          chargeOffset += hWidth;\n        } // adjust the angles metadata to account for hydrogen\n        // placement\n\n        /*\n          * this.angles.push(hAngle); var angleData =\n          * math.angleBetweenLargest(this.angles);\n          * this.angleOfLeastInterference = angleData.angle % (m.PI *\n          * 2); this.largestAngle = angleData.largest;\n          */\n\n      } // charge\n\n\n      if (this.charge !== 0) {\n        var s = this.charge.toFixed(0);\n\n        if (s === '1') {\n          s = '+';\n        } else if (s === '-1') {\n          s = \"\\u2013\";\n        } else if (_extensions__WEBPACK_IMPORTED_MODULE_1__[\"stringStartsWith\"](s, '-')) {\n          s = s.substring(1) + \"\\u2013\";\n        } else {\n          s += '+';\n        }\n\n        var chargeWidth = ctx.measureText(s).width;\n        chargeOffset += chargeWidth / 2;\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_1__[\"getFontString\"](m.floor(specs.atoms_font_size_2D * .8), specs.atoms_font_families_2D, specs.atoms_font_bold_2D, specs.atoms_font_italic_2D);\n        ctx.fillText(s, this.x + chargeOffset - 1, this.y - specs.atoms_font_size_2D / 2 + 1);\n        this.textBounds.push({\n          x: this.x + chargeOffset - chargeWidth / 2 - 1,\n          y: this.y - specs.atoms_font_size_2D * 1.8 / 2 + 5,\n          w: chargeWidth,\n          h: specs.atoms_font_size_2D / 2 - 1\n        });\n      }\n    }\n  }\n\n  if (this.numLonePair > 0 || this.numRadical > 0) {\n    ctx.fillStyle = 'black';\n    var as = this.angles.slice(0);\n    var ali = this.angleOfLeastInterference;\n    var la = this.largestAngle;\n\n    if (hAngle !== undefined) {\n      // have to check for undefined here as this number can be 0\n      as.push(hAngle);\n      as.sort(function (a, b) {\n        return a - b;\n      });\n      var angleData = _math__WEBPACK_IMPORTED_MODULE_2__[\"angleBetweenLargest\"](as);\n      ali = angleData.angle % (m.PI * 2);\n      la = angleData.largest;\n    }\n\n    var things = [];\n\n    for (var i = 0; i < this.numLonePair; i++) {\n      things.push({\n        t: 2\n      });\n    }\n\n    for (var i = 0; i < this.numRadical; i++) {\n      things.push({\n        t: 1\n      });\n    }\n\n    if (hAngle === undefined && m.abs(la - 2 * m.PI / as.length) < m.PI / 60) {\n      var mid = m.ceil(things.length / as.length);\n\n      for (var i = 0, ii = things.length; i < ii; i += mid, ali += la) {\n        this.drawElectrons(ctx, specs, things.slice(i, m.min(things.length, i + mid)), ali, la, hAngle);\n      }\n    } else {\n      this.drawElectrons(ctx, specs, things, ali, la, hAngle);\n    }\n  } // for debugging atom label dimensions\n  //ctx.strokeStyle = 'red'; for(var i = 0, ii = this.textBounds.length;i<ii; i++){ var r = this.textBounds[i];ctx.beginPath();ctx.rect(r.x, r.y, r.w, r.h); ctx.stroke(); }\n\n};\n\n_.drawElectrons = function (ctx, specs, things, angle, largest, hAngle) {\n  var segment = largest / (things.length + (this.bonds.length === 0 && hAngle === undefined ? 0 : 1));\n  var angleStart = angle - largest / 2 + segment;\n\n  for (var i = 0; i < things.length; i++) {\n    var t = things[i];\n    var angle = angleStart + i * segment;\n    var p1x = this.x + Math.cos(angle) * specs.atoms_lonePairDistance_2D;\n    var p1y = this.y - Math.sin(angle) * specs.atoms_lonePairDistance_2D;\n\n    if (t.t === 2) {\n      var perp = angle + Math.PI / 2;\n      var difx = Math.cos(perp) * specs.atoms_lonePairSpread_2D / 2;\n      var dify = -Math.sin(perp) * specs.atoms_lonePairSpread_2D / 2;\n      ctx.beginPath();\n      ctx.arc(p1x + difx, p1y + dify, specs.atoms_lonePairDiameter_2D, 0, m.PI * 2, false);\n      ctx.fill();\n      ctx.beginPath();\n      ctx.arc(p1x - difx, p1y - dify, specs.atoms_lonePairDiameter_2D, 0, m.PI * 2, false);\n      ctx.fill();\n    } else if (t.t === 1) {\n      ctx.beginPath();\n      ctx.arc(p1x, p1y, specs.atoms_lonePairDiameter_2D, 0, m.PI * 2, false);\n      ctx.fill();\n    }\n  }\n};\n\n_.drawDecorations = function (ctx, specs) {\n  if (this.isHover || this.isSelected) {\n    ctx.strokeStyle = this.isHover ? specs.colorHover : specs.colorSelect;\n    ctx.lineWidth = 1.2;\n    ctx.beginPath();\n    var radius = this.isHover ? 7 : 15;\n    ctx.arc(this.x, this.y, radius, 0, m.PI * 2, false);\n    ctx.stroke();\n  }\n\n  if (this.isOverlap) {\n    ctx.strokeStyle = specs.colorError;\n    ctx.lineWidth = 1.2;\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, 7, 0, m.PI * 2, false);\n    ctx.stroke();\n  }\n};\n\n_.render = function (gl, specs, noColor) {\n  if (this.specs) {\n    specs = this.specs;\n  }\n\n  var transform = _lib__WEBPACK_IMPORTED_MODULE_3__[\"mat4\"].translate(_lib__WEBPACK_IMPORTED_MODULE_3__[\"mat4\"].identity(), [this.x, this.y, this.z]);\n  var radius = specs.atoms_useVDWDiameters_3D ? _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"ELEMENT\"][this.label].vdWRadius * specs.atoms_vdwMultiplier_3D : specs.atoms_sphereDiameter_3D / 2;\n\n  if (radius === 0) {\n    radius = 1;\n  }\n\n  _lib__WEBPACK_IMPORTED_MODULE_3__[\"mat4\"].scale(transform, [radius, radius, radius]); // colors\n\n  if (!noColor) {\n    var color = specs.atoms_color;\n\n    if (specs.atoms_useJMOLColors) {\n      color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"ELEMENT\"][this.label].jmolColor;\n    } else if (specs.atoms_usePYMOLColors) {\n      color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"ELEMENT\"][this.label].pymolColor;\n    }\n\n    gl.material.setDiffuseColor(gl, color);\n  } // render\n\n\n  gl.shader.setMatrixUniforms(gl, transform);\n  var buffer = this.renderAsStar ? gl.starBuffer : gl.sphereBuffer;\n  gl.drawElements(gl.TRIANGLES, buffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n};\n\n_.renderHighlight = function (gl, specs) {\n  if (this.isSelected || this.isHover) {\n    if (this.specs) {\n      specs = this.specs;\n    }\n\n    var transform = _lib__WEBPACK_IMPORTED_MODULE_3__[\"mat4\"].translate(_lib__WEBPACK_IMPORTED_MODULE_3__[\"mat4\"].identity(), [this.x, this.y, this.z]);\n    var radius = specs.atoms_useVDWDiameters_3D ? _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"ELEMENT\"][this.label].vdWRadius * specs.atoms_vdwMultiplier_3D : specs.atoms_sphereDiameter_3D / 2;\n\n    if (radius === 0) {\n      radius = 1;\n    }\n\n    radius *= 1.3;\n    _lib__WEBPACK_IMPORTED_MODULE_3__[\"mat4\"].scale(transform, [radius, radius, radius]);\n    gl.shader.setMatrixUniforms(gl, transform);\n    gl.material.setDiffuseColor(gl, this.isHover ? specs.colorHover : specs.colorSelect);\n    var buffer = this.renderAsStar ? gl.starBuffer : gl.sphereBuffer;\n    gl.drawElements(gl.TRIANGLES, buffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n  }\n};\n\n_.isLabelVisible = function (specs) {\n  if (specs.atoms_displayAllCarbonLabels_2D) {\n    // show all carbons\n    return true;\n  }\n\n  if (this.label !== 'C') {\n    // not a carbon\n    return true;\n  }\n\n  if (this.altLabel || !_ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"ELEMENT\"][this.label]) {\n    // there is an alternative or condensed label\n    return true;\n  }\n\n  if (this.mass !== -1 || this.implicitH !== -1 || this.charge !== 0) {\n    // an isotope or charge or implicit hydrogen override designation, so label must be shown\n    return true;\n  }\n\n  if (specs.atoms_showAttributedCarbons_2D && (this.numRadical !== 0 || this.numLonePair !== 0)) {\n    // there are attributes and we want to show the associated label\n    return true;\n  }\n\n  if (this.isHidden && specs.atoms_showHiddenCarbons_2D) {\n    // if it is hidden and we want to show them\n    return true;\n  }\n\n  if (specs.atoms_displayTerminalCarbonLabels_2D && this.bondNumber === 1) {\n    // if it is terminal and we want to show them\n    return true;\n  }\n\n  return false;\n};\n\n_.getImplicitHydrogenCount = function () {\n  if (!_ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"ELEMENT\"][this.label] || !_ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"ELEMENT\"][this.label].addH) {\n    return 0;\n  }\n\n  if (this.implicitH !== -1) {\n    return this.implicitH;\n  }\n\n  if (this.label === 'H') {\n    return 0;\n  }\n\n  var valence = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"ELEMENT\"][this.label].valency;\n  var dif = valence - this.coordinationNumber;\n\n  if (this.numRadical > 0) {\n    dif = m.max(0, dif - this.numRadical);\n  }\n\n  if (this.charge > 0) {\n    var vdif = 4 - valence;\n\n    if (this.charge <= vdif) {\n      dif += this.charge;\n    } else {\n      dif = 4 - this.coordinationNumber - this.charge + vdif;\n    }\n  } else {\n    dif += this.charge;\n  }\n\n  return dif < 0 ? 0 : m.floor(dif);\n};\n\n_.getBounds = function () {\n  var bounds = new _math__WEBPACK_IMPORTED_MODULE_2__[\"Bounds\"]();\n  bounds.expand(this.x, this.y);\n\n  if (this.textBounds) {\n    for (var i = 0, ii = this.textBounds.length; i < ii; i++) {\n      var tb = this.textBounds[i];\n      bounds.expand(tb.x, tb.y, tb.x + tb.w, tb.y + tb.h);\n    }\n  }\n\n  return bounds;\n};\n\n_.getBounds3D = function () {\n  var bounds = new _math__WEBPACK_IMPORTED_MODULE_2__[\"Bounds\"]();\n  bounds.expand3D(this.x, this.y, this.z);\n  return bounds;\n};\n/**\n * Get Color by atom element.\n * \n * @param {boolean}\n *            useJMOLColors\n * @param {boolean}\n *            usePYMOLColors\n * @param {string}\n *            color The default color\n * @param {number}\n *            dim The render dimension\n * @return {string} The atom element color\n */\n\n\n_.getElementColor = function (useJMOLColors, usePYMOLColors, color) {\n  if (!_ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"ELEMENT\"][this.label]) {\n    return '#000';\n  }\n\n  if (useJMOLColors) {\n    color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"ELEMENT\"][this.label].jmolColor;\n  } else if (usePYMOLColors) {\n    color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"ELEMENT\"][this.label].pymolColor;\n  }\n\n  return color;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/structures/Atom.js\n");

/***/ }),

/***/ "./src/ChemDoodle/structures/Bond.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/structures/Bond.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Bond; });\n/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../extensions */ \"./src/ChemDoodle/extensions/index.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math */ \"./src/ChemDoodle/math/index.js\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib */ \"./src/ChemDoodle/lib/index.js\");\n/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Point */ \"./src/ChemDoodle/structures/Point.js\");\n\n\n\n\nvar m = Math;\nfunction Bond(a1, a2, bondOrder) {\n  this.a1 = a1;\n  this.a2 = a2; // bondOrder can be 0, so need to check against undefined\n\n  this.bondOrder = bondOrder !== undefined ? bondOrder : 1;\n}\n;\nBond.STEREO_NONE = 'none';\nBond.STEREO_PROTRUDING = 'protruding';\nBond.STEREO_RECESSED = 'recessed';\nBond.STEREO_AMBIGUOUS = 'ambiguous';\nvar _ = Bond.prototype;\n_.stereo = Bond.STEREO_NONE;\n_.isHover = false;\n_.ring = undefined;\n\n_.getCenter = function () {\n  return new _Point__WEBPACK_IMPORTED_MODULE_3__[\"default\"]((this.a1.x + this.a2.x) / 2, (this.a1.y + this.a2.y) / 2);\n};\n\n_.getLength = function () {\n  return this.a1.distance(this.a2);\n};\n\n_.getLength3D = function () {\n  return this.a1.distance3D(this.a2);\n};\n\n_.contains = function (a) {\n  return a === this.a1 || a === this.a2;\n};\n\n_.getNeighbor = function (a) {\n  if (a === this.a1) {\n    return this.a2;\n  } else if (a === this.a2) {\n    return this.a1;\n  }\n\n  return undefined;\n};\n\n_.draw = function (ctx, specs) {\n  if (this.a1.x === this.a2.x && this.a1.y === this.a2.y) {\n    // return, as there is nothing to render, will only cause fill\n    // overflows\n    return;\n  }\n\n  if (this.specs) {\n    specs = this.specs;\n  }\n\n  var x1 = this.a1.x;\n  var x2 = this.a2.x;\n  var y1 = this.a1.y;\n  var y2 = this.a2.y;\n  var dist = this.a1.distance(this.a2);\n  var difX = x2 - x1;\n  var difY = y2 - y1;\n\n  if (this.a1.isLassoed && this.a2.isLassoed) {\n    var grd = ctx.createLinearGradient(x1, y1, x2, y2);\n    grd.addColorStop(0, 'rgba(212, 99, 0, 0)');\n    grd.addColorStop(0.5, 'rgba(212, 99, 0, 0.8)');\n    grd.addColorStop(1, 'rgba(212, 99, 0, 0)');\n    var useDist = 2.5;\n    var perpendicular = this.a1.angle(this.a2) + m.PI / 2;\n    var mcosp = m.cos(perpendicular);\n    var msinp = m.sin(perpendicular);\n    var cx1 = x1 - mcosp * useDist;\n    var cy1 = y1 + msinp * useDist;\n    var cx2 = x1 + mcosp * useDist;\n    var cy2 = y1 - msinp * useDist;\n    var cx3 = x2 + mcosp * useDist;\n    var cy3 = y2 - msinp * useDist;\n    var cx4 = x2 - mcosp * useDist;\n    var cy4 = y2 + msinp * useDist;\n    ctx.fillStyle = grd;\n    ctx.beginPath();\n    ctx.moveTo(cx1, cy1);\n    ctx.lineTo(cx2, cy2);\n    ctx.lineTo(cx3, cy3);\n    ctx.lineTo(cx4, cy4);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  if (specs.atoms_display && !specs.atoms_circles_2D && this.a1.isLabelVisible(specs) && this.a1.textBounds) {\n    var distShrink = 0;\n\n    for (var i = 0, ii = this.a1.textBounds.length; i < ii; i++) {\n      distShrink = Math.max(distShrink, _math__WEBPACK_IMPORTED_MODULE_1__[\"calculateDistanceInterior\"](this.a1, this.a2, this.a1.textBounds[i]));\n    }\n\n    distShrink += specs.bonds_atomLabelBuffer_2D;\n    var perc = distShrink / dist;\n    x1 += difX * perc;\n    y1 += difY * perc;\n  }\n\n  if (specs.atoms_display && !specs.atoms_circles_2D && this.a2.isLabelVisible(specs) && this.a2.textBounds) {\n    var distShrink = 0;\n\n    for (var i = 0, ii = this.a2.textBounds.length; i < ii; i++) {\n      distShrink = Math.max(distShrink, _math__WEBPACK_IMPORTED_MODULE_1__[\"calculateDistanceInterior\"](this.a2, this.a1, this.a2.textBounds[i]));\n    }\n\n    distShrink += specs.bonds_atomLabelBuffer_2D;\n    var perc = distShrink / dist;\n    x2 -= difX * perc;\n    y2 -= difY * perc;\n  }\n\n  if (specs.bonds_clearOverlaps_2D) {\n    var xs = x1 + difX * .15;\n    var ys = y1 + difY * .15;\n    var xf = x2 - difX * .15;\n    var yf = y2 - difY * .15;\n    ctx.strokeStyle = specs.backgroundColor;\n    ctx.lineWidth = specs.bonds_width_2D + specs.bonds_overlapClearWidth_2D * 2;\n    ctx.lineCap = 'round';\n    ctx.beginPath();\n    ctx.moveTo(xs, ys);\n    ctx.lineTo(xf, yf);\n    ctx.closePath();\n    ctx.stroke();\n  }\n\n  ctx.strokeStyle = this.error ? specs.colorError : specs.bonds_color;\n  ctx.fillStyle = this.error ? specs.colorError : specs.bonds_color;\n  ctx.lineWidth = specs.bonds_width_2D;\n  ctx.lineCap = specs.bonds_ends_2D;\n\n  if (specs.bonds_splitColor) {\n    var linearGradient = ctx.createLinearGradient(x1, y1, x2, y2);\n    var specs1 = this.a1.specs ? this.a1.specs : specs;\n    var specs2 = this.a2.specs ? this.a2.specs : specs;\n    var color1 = this.a1.getElementColor(specs1.atoms_useJMOLColors, specs1.atoms_usePYMOLColors, specs1.atoms_color, 2);\n    var color2 = this.a2.getElementColor(specs2.atoms_useJMOLColors, specs2.atoms_usePYMOLColors, specs2.atoms_color, 2);\n    linearGradient.addColorStop(0, color1);\n\n    if (!specs.bonds_colorGradient) {\n      linearGradient.addColorStop(0.5, color1);\n      linearGradient.addColorStop(0.51, color2);\n    }\n\n    linearGradient.addColorStop(1, color2);\n    ctx.strokeStyle = linearGradient;\n    ctx.fillStyle = linearGradient;\n  }\n\n  if (specs.bonds_lewisStyle_2D && this.bondOrder % 1 === 0) {\n    this.drawLewisStyle(ctx, specs, x1, y1, x2, y2);\n  } else {\n    switch (this.query ? 1 : this.bondOrder) {\n      case 0:\n        var dx = x2 - x1;\n        var dy = y2 - y1;\n        var innerDist = m.sqrt(dx * dx + dy * dy);\n        var num = m.floor(innerDist / specs.bonds_dotSize_2D);\n        var remainder = (innerDist - (num - 1) * specs.bonds_dotSize_2D) / 2;\n\n        if (num % 2 === 1) {\n          remainder += specs.bonds_dotSize_2D / 4;\n        } else {\n          remainder -= specs.bonds_dotSize_2D / 4;\n          num += 2;\n        }\n\n        num /= 2;\n        var angle = this.a1.angle(this.a2);\n        var xs = x1 + remainder * Math.cos(angle);\n        var ys = y1 - remainder * Math.sin(angle);\n        ctx.beginPath();\n\n        for (var i = 0; i < num; i++) {\n          ctx.arc(xs, ys, specs.bonds_dotSize_2D / 2, 0, m.PI * 2, false);\n          xs += 2 * specs.bonds_dotSize_2D * Math.cos(angle);\n          ys -= 2 * specs.bonds_dotSize_2D * Math.sin(angle);\n        }\n\n        ctx.fill();\n        break;\n\n      case 0.5:\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.setLineDash([specs.bonds_hashSpacing_2D, specs.bonds_hashSpacing_2D]);\n        ctx.stroke();\n        ctx.setLineDash([]);\n        break;\n\n      case 1:\n        if (!this.query && (this.stereo === Bond.STEREO_PROTRUDING || this.stereo === Bond.STEREO_RECESSED)) {\n          var thinSpread = specs.bonds_width_2D / 2;\n          var useDist = specs.bonds_wedgeThickness_2D / 2;\n          var perpendicular = this.a1.angle(this.a2) + m.PI / 2;\n          var mcosp = m.cos(perpendicular);\n          var msinp = m.sin(perpendicular);\n          var cx1 = x1 - mcosp * thinSpread;\n          var cy1 = y1 + msinp * thinSpread;\n          var cx2 = x1 + mcosp * thinSpread;\n          var cy2 = y1 - msinp * thinSpread;\n          var cx3 = x2 + mcosp * useDist;\n          var cy3 = y2 - msinp * useDist;\n          var cx4 = x2 - mcosp * useDist;\n          var cy4 = y2 + msinp * useDist;\n          ctx.beginPath();\n          ctx.moveTo(cx1, cy1);\n          ctx.lineTo(cx2, cy2);\n          ctx.lineTo(cx3, cy3);\n          ctx.lineTo(cx4, cy4);\n          ctx.closePath();\n\n          if (this.stereo === Bond.STEREO_PROTRUDING) {\n            ctx.fill();\n          } else {\n            ctx.save();\n            ctx.clip();\n            ctx.lineWidth = useDist * 2;\n            ctx.lineCap = 'butt';\n            ctx.beginPath();\n            ctx.moveTo(x1, y1); // workaround to lengthen distance for Firefox as there is a bug, shouldn't affect rendering or performance\n\n            var dx = x2 - x1;\n            var dy = y2 - y1;\n            ctx.lineTo(x2 + 5 * dx, y2 + 5 * dy);\n            ctx.setLineDash([specs.bonds_hashWidth_2D, specs.bonds_hashSpacing_2D]);\n            ctx.stroke();\n            ctx.setLineDash([]);\n            ctx.restore();\n          }\n        } else if (!this.query && this.stereo === Bond.STEREO_AMBIGUOUS) {\n          ctx.beginPath();\n          ctx.moveTo(x1, y1);\n          var curves = m.floor(m.sqrt(difX * difX + difY * difY) / specs.bonds_wavyLength_2D);\n          var x = x1;\n          var y = y1;\n          var perpendicular = this.a1.angle(this.a2) + m.PI / 2;\n          var mcosp = m.cos(perpendicular);\n          var msinp = m.sin(perpendicular);\n          var curveX = difX / curves;\n          var curveY = difY / curves;\n          var cpx1, cpx2, cpy1, cpy2;\n\n          for (var i = 0, ii = curves; i < ii; i++) {\n            x += curveX;\n            y += curveY;\n            cpx1 = specs.bonds_wavyLength_2D * mcosp + x - curveX * 0.5;\n            cpy1 = specs.bonds_wavyLength_2D * -msinp + y - curveY * 0.5;\n            cpx2 = specs.bonds_wavyLength_2D * -mcosp + x - curveX * 0.5;\n            cpy2 = specs.bonds_wavyLength_2D * msinp + y - curveY * 0.5;\n\n            if (i % 2 === 0) {\n              ctx.quadraticCurveTo(cpx1, cpy1, x, y);\n            } else {\n              ctx.quadraticCurveTo(cpx2, cpy2, x, y);\n            }\n          }\n\n          ctx.stroke();\n          break;\n        } else {\n          ctx.beginPath();\n          ctx.moveTo(x1, y1);\n          ctx.lineTo(x2, y2);\n          ctx.stroke();\n\n          if (this.query) {\n            this.query.draw(ctx, specs, this.getCenter());\n          }\n        }\n\n        break;\n\n      case 1.5:\n      case 2:\n        var angle = this.a1.angle(this.a2);\n        var perpendicular = angle + m.PI / 2;\n        var mcosp = m.cos(perpendicular);\n        var msinp = m.sin(perpendicular);\n        var dist = this.a1.distance(this.a2);\n        var useDist = specs.bonds_useAbsoluteSaturationWidths_2D ? specs.bonds_saturationWidthAbs_2D / 2 : dist * specs.bonds_saturationWidth_2D / 2;\n\n        if (this.stereo === Bond.STEREO_AMBIGUOUS) {\n          var cx1 = x1 - mcosp * useDist;\n          var cy1 = y1 + msinp * useDist;\n          var cx2 = x1 + mcosp * useDist;\n          var cy2 = y1 - msinp * useDist;\n          var cx3 = x2 + mcosp * useDist;\n          var cy3 = y2 - msinp * useDist;\n          var cx4 = x2 - mcosp * useDist;\n          var cy4 = y2 + msinp * useDist;\n          ctx.beginPath();\n          ctx.moveTo(cx1, cy1);\n          ctx.lineTo(cx3, cy3);\n          ctx.moveTo(cx2, cy2);\n          ctx.lineTo(cx4, cy4);\n          ctx.stroke();\n        } else if (!specs.bonds_symmetrical_2D && (this.ring || this.a1.label === 'C' && this.a2.label === 'C')) {\n          ctx.beginPath();\n          ctx.moveTo(x1, y1);\n          ctx.lineTo(x2, y2);\n          ctx.stroke();\n          var clip = 0;\n          useDist *= 2;\n          var clipAngle = specs.bonds_saturationAngle_2D;\n\n          if (clipAngle < m.PI / 2) {\n            clip = -(useDist / m.tan(clipAngle));\n          }\n\n          if (m.abs(clip) < dist / 2) {\n            var xuse1 = x1 - m.cos(angle) * clip;\n            var xuse2 = x2 + m.cos(angle) * clip;\n            var yuse1 = y1 + m.sin(angle) * clip;\n            var yuse2 = y2 - m.sin(angle) * clip;\n            var cx1 = xuse1 - mcosp * useDist;\n            var cy1 = yuse1 + msinp * useDist;\n            var cx2 = xuse1 + mcosp * useDist;\n            var cy2 = yuse1 - msinp * useDist;\n            var cx3 = xuse2 - mcosp * useDist;\n            var cy3 = yuse2 + msinp * useDist;\n            var cx4 = xuse2 + mcosp * useDist;\n            var cy4 = yuse2 - msinp * useDist;\n            var flip = !this.ring || this.ring.center.angle(this.a1) > this.ring.center.angle(this.a2) && !(this.ring.center.angle(this.a1) - this.ring.center.angle(this.a2) > m.PI) || this.ring.center.angle(this.a1) - this.ring.center.angle(this.a2) < -m.PI;\n            ctx.beginPath();\n\n            if (flip) {\n              ctx.moveTo(cx1, cy1);\n              ctx.lineTo(cx3, cy3);\n            } else {\n              ctx.moveTo(cx2, cy2);\n              ctx.lineTo(cx4, cy4);\n            }\n\n            if (this.bondOrder !== 2) {\n              ctx.setLineDash([specs.bonds_hashSpacing_2D, specs.bonds_hashSpacing_2D]);\n            }\n\n            ctx.stroke();\n            ctx.setLineDash([]);\n          }\n        } else {\n          var cx1 = x1 - mcosp * useDist;\n          var cy1 = y1 + msinp * useDist;\n          var cx2 = x1 + mcosp * useDist;\n          var cy2 = y1 - msinp * useDist;\n          var cx3 = x2 + mcosp * useDist;\n          var cy3 = y2 - msinp * useDist;\n          var cx4 = x2 - mcosp * useDist;\n          var cy4 = y2 + msinp * useDist;\n          ctx.beginPath();\n          ctx.moveTo(cx1, cy1);\n          ctx.lineTo(cx4, cy4);\n          ctx.stroke();\n          ctx.beginPath();\n          ctx.moveTo(cx2, cy2);\n          ctx.lineTo(cx3, cy3);\n\n          if (this.bondOrder !== 2) {\n            ctx.setLineDash([specs.bonds_hashWidth_2D, specs.bonds_hashSpacing_2D]);\n          }\n\n          ctx.stroke();\n          ctx.setLineDash([]);\n        }\n\n        break;\n\n      case 3:\n        var useDist = specs.bonds_useAbsoluteSaturationWidths_2D ? specs.bonds_saturationWidthAbs_2D : this.a1.distance(this.a2) * specs.bonds_saturationWidth_2D;\n        var perpendicular = this.a1.angle(this.a2) + m.PI / 2;\n        var mcosp = m.cos(perpendicular);\n        var msinp = m.sin(perpendicular);\n        var cx1 = x1 - mcosp * useDist;\n        var cy1 = y1 + msinp * useDist;\n        var cx2 = x1 + mcosp * useDist;\n        var cy2 = y1 - msinp * useDist;\n        var cx3 = x2 + mcosp * useDist;\n        var cy3 = y2 - msinp * useDist;\n        var cx4 = x2 - mcosp * useDist;\n        var cy4 = y2 + msinp * useDist;\n        ctx.beginPath();\n        ctx.moveTo(cx1, cy1);\n        ctx.lineTo(cx4, cy4);\n        ctx.moveTo(cx2, cy2);\n        ctx.lineTo(cx3, cy3);\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        break;\n    }\n  }\n};\n\n_.drawDecorations = function (ctx, specs) {\n  if (this.isHover || this.isSelected) {\n    var pi2 = 2 * m.PI;\n    var angle = (this.a1.angleForStupidCanvasArcs(this.a2) + m.PI / 2) % pi2;\n    ctx.strokeStyle = this.isHover ? specs.colorHover : specs.colorSelect;\n    ctx.lineWidth = 1.2;\n    ctx.beginPath();\n    var angleTo = (angle + m.PI) % pi2;\n    angleTo = angleTo % (m.PI * 2);\n    ctx.arc(this.a1.x, this.a1.y, 7, angle, angleTo, false);\n    ctx.stroke();\n    ctx.beginPath();\n    angle += m.PI;\n    angleTo = (angle + m.PI) % pi2;\n    ctx.arc(this.a2.x, this.a2.y, 7, angle, angleTo, false);\n    ctx.stroke();\n  }\n};\n\n_.drawLewisStyle = function (ctx, specs, x1, y1, x2, y2) {\n  var angle = this.a1.angle(this.a2);\n  var perp = angle + m.PI / 2;\n  var difx = x2 - x1;\n  var dify = y2 - y1;\n  var increment = m.sqrt(difx * difx + dify * dify) / (this.bondOrder + 1);\n  var xi = increment * m.cos(angle);\n  var yi = -increment * m.sin(angle);\n  var x = x1 + xi;\n  var y = y1 + yi;\n\n  for (var i = 0; i < this.bondOrder; i++) {\n    var sep = specs.atoms_lonePairSpread_2D / 2;\n    var cx1 = x - m.cos(perp) * sep;\n    var cy1 = y + m.sin(perp) * sep;\n    var cx2 = x + m.cos(perp) * sep;\n    var cy2 = y - m.sin(perp) * sep;\n    ctx.beginPath();\n    ctx.arc(cx1 - specs.atoms_lonePairDiameter_2D / 2, cy1 - specs.atoms_lonePairDiameter_2D / 2, specs.atoms_lonePairDiameter_2D, 0, m.PI * 2, false);\n    ctx.fill();\n    ctx.beginPath();\n    ctx.arc(cx2 - specs.atoms_lonePairDiameter_2D / 2, cy2 - specs.atoms_lonePairDiameter_2D / 2, specs.atoms_lonePairDiameter_2D, 0, m.PI * 2, false);\n    ctx.fill();\n    x += xi;\n    y += yi;\n  }\n};\n/**\n * \n * @param {WegGLRenderingContext}\n *            gl\n * @param {structures.VisualSpecifications}\n *            specs\n * @param {boolean}\n *            asSegments Using cylinder/solid line or segmented pills/dashed\n *            line\n * @return {void}\n */\n\n\n_.render = function (gl, specs, asSegments) {\n  if (this.specs) {\n    specs = this.specs;\n  } // this is the elongation vector for the cylinder\n\n\n  var height = this.a1.distance3D(this.a2);\n\n  if (height === 0) {\n    // if there is no height, then no point in rendering this bond,\n    // just return\n    return;\n  } // scale factor for cylinder/pill radius.\n  // when scale pill, the cap will affected too.\n\n\n  var radiusScale = specs.bonds_cylinderDiameter_3D / 2; // atom1 color and atom2 color\n\n  var a1Color = specs.bonds_color;\n  var a2Color; // transform to the atom as well as the opposite atom (for Jmol and\n  // PyMOL\n  // color splits)\n\n  var transform = _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].translate(_lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].identity(), [this.a1.x, this.a1.y, this.a1.z]);\n  var transformOpposite; // vector from atom1 to atom2\n\n  var a2b = [this.a2.x - this.a1.x, this.a2.y - this.a1.y, this.a2.z - this.a1.z]; // calculate the rotation\n\n  var y = [0, 1, 0];\n  var ang = 0;\n  var axis;\n\n  if (this.a1.x === this.a2.x && this.a1.z === this.a2.z) {\n    axis = [0, 0, 1];\n\n    if (this.a2.y < this.a1.y) {\n      ang = m.PI;\n    }\n  } else {\n    ang = _extensions__WEBPACK_IMPORTED_MODULE_0__[\"vec3AngleFrom\"](y, a2b);\n    axis = _lib__WEBPACK_IMPORTED_MODULE_2__[\"vec3\"].cross(y, a2b, []);\n  } // the specs will split color are\n  // - Line\n  // - Stick\n  // - Wireframe\n\n\n  if (specs.bonds_splitColor) {\n    var specs1 = this.a1.specs ? this.a1.specs : specs;\n    var specs2 = this.a2.specs ? this.a2.specs : specs;\n    a1Color = this.a1.getElementColor(specs1.atoms_useJMOLColors, specs1.atoms_usePYMOLColors, specs1.atoms_color);\n    a2Color = this.a2.getElementColor(specs2.atoms_useJMOLColors, specs2.atoms_usePYMOLColors, specs2.atoms_color); // the transformOpposite will use for split color.\n    // just make it splited if the color different.\n\n    if (a1Color != a2Color) {\n      transformOpposite = _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].translate(_lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].identity(), [this.a2.x, this.a2.y, this.a2.z]);\n    }\n  } // calculate the translations for unsaturated bonds.\n  // represenattio use saturatedCross are\n  // - Line\n  // - Wireframe\n  // - Ball and Stick\n  // just Stick will set bonds_showBondOrders_3D to false\n\n\n  var others = [0];\n  var saturatedCross;\n\n  if (asSegments) {\n    // block for draw bond as segmented line/pill\n    if (specs.bonds_showBondOrders_3D && this.bondOrder > 1) {\n      // The \"0.5\" part set here,\n      // the other part (1) will render as cylinder\n      others = [\n      /*-specs.bonds_cylinderDiameter_3D, */\n      specs.bonds_cylinderDiameter_3D];\n      var z = [0, 0, 1];\n      var inverse = _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].inverse(gl.rotationMatrix, []);\n      _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].multiplyVec3(inverse, z);\n      saturatedCross = _lib__WEBPACK_IMPORTED_MODULE_2__[\"vec3\"].cross(a2b, z, []);\n      _lib__WEBPACK_IMPORTED_MODULE_2__[\"vec3\"].normalize(saturatedCross);\n    }\n\n    var segmentScale = 1;\n    var spaceBetweenPill = specs.bonds_pillSpacing_3D;\n    var pillHeight = specs.bonds_pillHeight_3D;\n\n    if (this.bondOrder == 0) {\n      if (specs.bonds_renderAsLines_3D) {\n        pillHeight = spaceBetweenPill;\n      } else {\n        pillHeight = specs.bonds_pillDiameter_3D; // Detect Ball and Stick representation\n\n        if (pillHeight < specs.bonds_cylinderDiameter_3D) {\n          pillHeight /= 2;\n        }\n\n        segmentScale = pillHeight / 2;\n        height /= segmentScale;\n        spaceBetweenPill /= segmentScale / 2;\n      }\n    } // total space need for one pill, iclude the space.\n\n\n    var totalSpaceForPill = pillHeight + spaceBetweenPill; // segmented pills for one bond.\n\n    var totalPillsPerBond = height / totalSpaceForPill; // segmented one unit pill for one bond\n\n    var pillsPerBond = m.floor(totalPillsPerBond);\n    var extraSegmentedSpace = height - totalSpaceForPill * pillsPerBond;\n    var paddingSpace = (spaceBetweenPill + specs.bonds_pillDiameter_3D + extraSegmentedSpace) / 2; // pillSegmentsLength will change if both atom1 and atom2 color used\n    // for rendering\n\n    var pillSegmentsLength = pillsPerBond;\n\n    if (transformOpposite) {\n      // floor will effected for odd pills, because one pill at the\n      // center\n      // will replace with splited pills\n      pillSegmentsLength = m.floor(pillsPerBond / 2);\n    } // render bonds\n\n\n    for (var i = 0, ii = others.length; i < ii; i++) {\n      var transformUse = _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].set(transform, []);\n\n      if (others[i] !== 0) {\n        _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].translate(transformUse, _lib__WEBPACK_IMPORTED_MODULE_2__[\"vec3\"].scale(saturatedCross, others[i], []));\n      }\n\n      if (ang !== 0) {\n        _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].rotate(transformUse, ang, axis);\n      }\n\n      if (segmentScale != 1) {\n        _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].scale(transformUse, [segmentScale, segmentScale, segmentScale]);\n      } // colors\n\n\n      if (a1Color) gl.material.setDiffuseColor(gl, a1Color);\n      _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].translate(transformUse, [0, paddingSpace, 0]);\n\n      for (var j = 0; j < pillSegmentsLength; j++) {\n        if (specs.bonds_renderAsLines_3D) {\n          if (this.bondOrder == 0) {\n            gl.shader.setMatrixUniforms(gl, transformUse);\n            gl.drawArrays(gl.POINTS, 0, 1);\n          } else {\n            _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].scale(transformUse, [1, pillHeight, 1]);\n            gl.shader.setMatrixUniforms(gl, transformUse);\n            gl.drawArrays(gl.LINES, 0, gl.lineBuffer.vertexPositionBuffer.numItems);\n            _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].scale(transformUse, [1, 1 / pillHeight, 1]);\n          }\n        } else {\n          gl.shader.setMatrixUniforms(gl, transformUse);\n\n          if (this.bondOrder == 0) {\n            gl.drawElements(gl.TRIANGLES, gl.sphereBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n          } else {\n            gl.drawElements(gl.TRIANGLES, gl.pillBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n          }\n        }\n\n        _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].translate(transformUse, [0, totalSpaceForPill, 0]);\n      } // if rendering segmented pill use atom1 and atom2 color\n\n\n      if (transformOpposite) {\n        // parameter for calculate splited pills\n        var scaleY, halfOneMinScaleY;\n\n        if (specs.bonds_renderAsLines_3D) {\n          scaleY = pillHeight; // if(this.bondOrder != 0) {\n          // scaleY -= spaceBetweenPill;\n          // }\n\n          scaleY /= 2;\n          halfOneMinScaleY = 0;\n        } else {\n          scaleY = 2 / 3;\n          halfOneMinScaleY = (1 - scaleY) / 2;\n        } // if count of pills per bound is odd,\n        // then draw the splited pills of atom1\n\n\n        if (pillsPerBond % 2 != 0) {\n          _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].scale(transformUse, [1, scaleY, 1]);\n          gl.shader.setMatrixUniforms(gl, transformUse);\n\n          if (specs.bonds_renderAsLines_3D) {\n            if (this.bondOrder == 0) {\n              gl.drawArrays(gl.POINTS, 0, 1);\n            } else {\n              gl.drawArrays(gl.LINES, 0, gl.lineBuffer.vertexPositionBuffer.numItems);\n            }\n          } else {\n            if (this.bondOrder == 0) {\n              gl.drawElements(gl.TRIANGLES, gl.sphereBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n            } else {\n              gl.drawElements(gl.TRIANGLES, gl.pillBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n            }\n          }\n\n          _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].translate(transformUse, [0, totalSpaceForPill * (1 + halfOneMinScaleY), 0]);\n          _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].scale(transformUse, [1, 1 / scaleY, 1]);\n        } // prepare to render the atom2\n\n\n        _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].set(transformOpposite, transformUse);\n\n        if (others[i] !== 0) {\n          _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].translate(transformUse, _lib__WEBPACK_IMPORTED_MODULE_2__[\"vec3\"].scale(saturatedCross, others[i], []));\n        } // don't check for 0 here as that means it should be rotated\n        // by PI, but PI will be negated\n\n\n        _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].rotate(transformUse, ang + m.PI, axis);\n\n        if (segmentScale != 1) {\n          _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].scale(transformUse, [segmentScale, segmentScale, segmentScale]);\n        } // colors\n\n\n        if (a2Color) {\n          gl.material.setDiffuseColor(gl, a2Color);\n        }\n\n        _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].translate(transformUse, [0, paddingSpace, 0]); // draw the remain pills which use the atom2 color\n\n        for (var j = 0; j < pillSegmentsLength; j++) {\n          if (specs.bonds_renderAsLines_3D) {\n            if (this.bondOrder == 0) {\n              gl.shader.setMatrixUniforms(gl, transformUse);\n              gl.drawArrays(gl.POINTS, 0, 1);\n            } else {\n              _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].scale(transformUse, [1, pillHeight, 1]);\n              gl.shader.setMatrixUniforms(gl, transformUse);\n              gl.drawArrays(gl.LINES, 0, gl.lineBuffer.vertexPositionBuffer.numItems);\n              _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].scale(transformUse, [1, 1 / pillHeight, 1]);\n            }\n          } else {\n            gl.shader.setMatrixUniforms(gl, transformUse);\n\n            if (this.bondOrder == 0) {\n              gl.drawElements(gl.TRIANGLES, gl.sphereBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n            } else {\n              gl.drawElements(gl.TRIANGLES, gl.pillBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n            }\n          }\n\n          _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].translate(transformUse, [0, totalSpaceForPill, 0]);\n        } // draw the splited center pills of atom2\n\n\n        if (pillsPerBond % 2 != 0) {\n          _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].scale(transformUse, [1, scaleY, 1]);\n          gl.shader.setMatrixUniforms(gl, transformUse);\n\n          if (specs.bonds_renderAsLines_3D) {\n            if (this.bondOrder == 0) {\n              gl.drawArrays(gl.POINTS, 0, 1);\n            } else {\n              gl.drawArrays(gl.LINES, 0, gl.lineBuffer.vertexPositionBuffer.numItems);\n            }\n          } else {\n            if (this.bondOrder == 0) {\n              gl.drawElements(gl.TRIANGLES, gl.sphereBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n            } else {\n              gl.drawElements(gl.TRIANGLES, gl.pillBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n            }\n          }\n\n          _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].translate(transformUse, [0, totalSpaceForPill * (1 + halfOneMinScaleY), 0]);\n          _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].scale(transformUse, [1, 1 / scaleY, 1]);\n        }\n      }\n    }\n  } else {\n    // calculate the translations for unsaturated bonds.\n    // represenation that use saturatedCross are\n    // - Line\n    // - Wireframe\n    // - Ball and Stick\n    // just Stick will set bonds_showBondOrders_3D to false\n    if (specs.bonds_showBondOrders_3D) {\n      switch (this.bondOrder) {\n        // the 0 and 0.5 bond order will draw as segmented pill.\n        // so we not set that here.\n        // case 0:\n        // case 0.5: break;\n        case 1.5:\n          // The \"1\" part set here,\n          // the other part (0.5) will render as segmented pill\n          others = [-specs.bonds_cylinderDiameter_3D\n          /*\n          * ,\n          * specs.bonds_cylinderDiameter_3D\n          */\n          ];\n          break;\n\n        case 2:\n          others = [-specs.bonds_cylinderDiameter_3D, specs.bonds_cylinderDiameter_3D];\n          break;\n\n        case 3:\n          others = [-1.2 * specs.bonds_cylinderDiameter_3D, 0, 1.2 * specs.bonds_cylinderDiameter_3D];\n          break;\n      } // saturatedCross just need for need for bondorder greather than\n      // 1\n\n\n      if (this.bondOrder > 1) {\n        var z = [0, 0, 1];\n        var inverse = _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].inverse(gl.rotationMatrix, []);\n        _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].multiplyVec3(inverse, z);\n        saturatedCross = _lib__WEBPACK_IMPORTED_MODULE_2__[\"vec3\"].cross(a2b, z, []);\n        _lib__WEBPACK_IMPORTED_MODULE_2__[\"vec3\"].normalize(saturatedCross);\n      }\n    } // for Stick representation, we just change the cylinder radius\n    else {\n        switch (this.bondOrder) {\n          case 0:\n            radiusScale *= 0.25;\n            break;\n\n          case 0.5:\n          case 1.5:\n            radiusScale *= 0.5;\n            break;\n        }\n      } // if transformOpposite is set, the it mean the color must be\n    // splited.\n    // so the heigh of cylinder will be half.\n    // one half for atom1 color the other for atom2 color\n\n\n    if (transformOpposite) {\n      height /= 2;\n    } // Radius of cylinder already defined when initialize cylinder mesh,\n    // so at this rate, the scale just needed for Y to strech\n    // cylinder to bond length (height) and X and Z for radius.\n\n\n    var scaleVector = [radiusScale, height, radiusScale]; // render bonds\n\n    for (var i = 0, ii = others.length; i < ii; i++) {\n      var transformUse = _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].set(transform, []);\n\n      if (others[i] !== 0) {\n        _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].translate(transformUse, _lib__WEBPACK_IMPORTED_MODULE_2__[\"vec3\"].scale(saturatedCross, others[i], []));\n      }\n\n      if (ang !== 0) {\n        _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].rotate(transformUse, ang, axis);\n      }\n\n      _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].scale(transformUse, scaleVector); // colors\n\n      if (a1Color) gl.material.setDiffuseColor(gl, a1Color); // render\n\n      gl.shader.setMatrixUniforms(gl, transformUse);\n\n      if (specs.bonds_renderAsLines_3D) {\n        gl.drawArrays(gl.LINES, 0, gl.lineBuffer.vertexPositionBuffer.numItems);\n      } else {\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, gl.cylinderBuffer.vertexPositionBuffer.numItems);\n      } // if transformOpposite is set, then a2Color also shoudl be\n      // seted as well.\n\n\n      if (transformOpposite) {\n        _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].set(transformOpposite, transformUse);\n\n        if (others[i] !== 0) {\n          _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].translate(transformUse, _lib__WEBPACK_IMPORTED_MODULE_2__[\"vec3\"].scale(saturatedCross, others[i], []));\n        } // don't check for 0 here as that means it should be rotated\n        // by PI, but PI will be negated\n\n\n        _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].rotate(transformUse, ang + m.PI, axis);\n        _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].scale(transformUse, scaleVector); // colors\n\n        if (a2Color) gl.material.setDiffuseColor(gl, a2Color); // render\n\n        gl.shader.setMatrixUniforms(gl, transformUse);\n\n        if (specs.bonds_renderAsLines_3D) {\n          gl.drawArrays(gl.LINES, 0, gl.lineBuffer.vertexPositionBuffer.numItems);\n        } else {\n          gl.drawArrays(gl.TRIANGLE_STRIP, 0, gl.cylinderBuffer.vertexPositionBuffer.numItems);\n        }\n      }\n    }\n  }\n};\n\n_.renderHighlight = function (gl, specs) {\n  if (this.isSelected || this.isHover) {\n    if (this.specs) {\n      specs = this.specs;\n    }\n\n    if (this.specs) {\n      specs = this.specs;\n    } // this is the elongation vector for the cylinder\n\n\n    var height = this.a1.distance3D(this.a2);\n\n    if (height === 0) {\n      // if there is no height, then no point in rendering this bond,\n      // just return\n      return;\n    } // scale factor for cylinder/pill radius.\n    // when scale pill, the cap will affected too.\n\n\n    var radiusScale = specs.bonds_cylinderDiameter_3D / 1.2;\n    var transform = _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].translate(_lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].identity(), [this.a1.x, this.a1.y, this.a1.z]); // vector from atom1 to atom2\n\n    var a2b = [this.a2.x - this.a1.x, this.a2.y - this.a1.y, this.a2.z - this.a1.z]; // calculate the rotation\n\n    var y = [0, 1, 0];\n    var ang = 0;\n    var axis;\n\n    if (this.a1.x === this.a2.x && this.a1.z === this.a2.z) {\n      axis = [0, 0, 1];\n\n      if (this.a2.y < this.a1.y) {\n        ang = m.PI;\n      }\n    } else {\n      ang = _extensions__WEBPACK_IMPORTED_MODULE_0__[\"vec3AngleFrom\"](y, a2b);\n      axis = _lib__WEBPACK_IMPORTED_MODULE_2__[\"vec3\"].cross(y, a2b, []);\n    }\n\n    var scaleVector = [radiusScale, height, radiusScale];\n\n    if (ang !== 0) {\n      _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].rotate(transform, ang, axis);\n    }\n\n    _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].scale(transform, scaleVector);\n    gl.shader.setMatrixUniforms(gl, transform);\n    gl.material.setDiffuseColor(gl, this.isHover ? specs.colorHover : specs.colorSelect);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, gl.cylinderBuffer.vertexPositionBuffer.numItems);\n  }\n};\n/**\n * \n * @param {WegGLRenderingContext}\n *            gl\n * @param {structures.VisualSpecifications}\n *            specs\n * @return {void}\n */\n\n\n_.renderPicker = function (gl, specs) {\n  // gl.cylinderBuffer.bindBuffers(gl);\n  // gl.material.setDiffuseColor(\n  // this.bondOrder == 0 ? '#FF0000' : // merah\n  // this.bondOrder == 0.5 ? '#FFFF00' : // kuning\n  // this.bondOrder == 1 ? '#FF00FF' : // ungu\n  // this.bondOrder == 1.5 ? '#00FF00' : // hijau\n  // this.bondOrder == 2 ? '#00FFFF' : // cyan\n  // this.bondOrder == 3 ? '#0000FF' : // biru\n  // '#FFFFFF');\n  // gl.material.setAlpha(1);\n  if (this.specs) {\n    specs = this.specs;\n  } // this is the elongation vector for the cylinder\n\n\n  var height = this.a1.distance3D(this.a2);\n\n  if (height === 0) {\n    // if there is no height, then no point in rendering this bond,\n    // just return\n    return;\n  } // scale factor for cylinder/pill radius.\n  // when scale pill, the cap will affected too.\n\n\n  var radiusScale = specs.bonds_cylinderDiameter_3D / 2; // transform to the atom as well as the opposite atom (for Jmol and\n  // PyMOL\n  // color splits)\n\n  var transform = _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].translate(_lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].identity(), [this.a1.x, this.a1.y, this.a1.z]); // vector from atom1 to atom2\n\n  var a2b = [this.a2.x - this.a1.x, this.a2.y - this.a1.y, this.a2.z - this.a1.z]; // calculate the rotation\n\n  var y = [0, 1, 0];\n  var ang = 0;\n  var axis;\n\n  if (this.a1.x === this.a2.x && this.a1.z === this.a2.z) {\n    axis = [0, 0, 1];\n\n    if (this.a2.y < this.a1.y) {\n      ang = m.PI;\n    }\n  } else {\n    ang = _extensions__WEBPACK_IMPORTED_MODULE_0__[\"vec3AngleFrom\"](y, a2b);\n    axis = _lib__WEBPACK_IMPORTED_MODULE_2__[\"vec3\"].cross(y, a2b, []);\n  } // calculate the translations for unsaturated bonds.\n  // represenattio use saturatedCross are\n  // - Line\n  // - WIreframe\n  // - Ball and Stick\n  // just Stick will set bonds_showBondOrders_3D to false\n\n\n  var others = [0];\n  var saturatedCross;\n\n  if (specs.bonds_showBondOrders_3D) {\n    if (specs.bonds_renderAsLines_3D) {\n      switch (this.bondOrder) {\n        case 1.5:\n        case 2:\n          others = [-specs.bonds_cylinderDiameter_3D, specs.bonds_cylinderDiameter_3D];\n          break;\n\n        case 3:\n          others = [-1.2 * specs.bonds_cylinderDiameter_3D, 0, 1.2 * specs.bonds_cylinderDiameter_3D];\n          break;\n      } // saturatedCross just need for need for bondorder greather than\n      // 1\n\n\n      if (this.bondOrder > 1) {\n        var z = [0, 0, 1];\n        var inverse = _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].inverse(gl.rotationMatrix, []);\n        _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].multiplyVec3(inverse, z);\n        saturatedCross = _lib__WEBPACK_IMPORTED_MODULE_2__[\"vec3\"].cross(a2b, z, []);\n        _lib__WEBPACK_IMPORTED_MODULE_2__[\"vec3\"].normalize(saturatedCross);\n      }\n    } else {\n      switch (this.bondOrder) {\n        case 1.5:\n        case 2:\n          radiusScale *= 3;\n          break;\n\n        case 3:\n          radiusScale *= 3.4;\n          break;\n      }\n    }\n  } else {\n    // this is for Stick repersentation because Stick not have\n    // bonds_showBondOrders_3D\n    switch (this.bondOrder) {\n      case 0:\n        radiusScale *= 0.25;\n        break;\n\n      case 0.5:\n      case 1.5:\n        radiusScale *= 0.5;\n        break;\n    }\n  } // Radius of cylinder already defined when initialize cylinder mesh,\n  // so at this rate, the scale just needed for Y to strech\n  // cylinder to bond length (height) and X and Z for radius.\n\n\n  var scaleVector = [radiusScale, height, radiusScale]; // render bonds\n\n  for (var i = 0, ii = others.length; i < ii; i++) {\n    var transformUse = _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].set(transform, []);\n\n    if (others[i] !== 0) {\n      _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].translate(transformUse, _lib__WEBPACK_IMPORTED_MODULE_2__[\"vec3\"].scale(saturatedCross, others[i], []));\n    }\n\n    if (ang !== 0) {\n      _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].rotate(transformUse, ang, axis);\n    }\n\n    _lib__WEBPACK_IMPORTED_MODULE_2__[\"mat4\"].scale(transformUse, scaleVector); // render\n\n    gl.shader.setMatrixUniforms(gl, transformUse);\n\n    if (specs.bonds_renderAsLines_3D) {\n      gl.drawArrays(gl.LINES, 0, gl.lineBuffer.vertexPositionBuffer.numItems);\n    } else {\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, gl.cylinderBuffer.vertexPositionBuffer.numItems);\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/structures/Bond.js\n");

/***/ }),

/***/ "./src/ChemDoodle/structures/CondensedLabel.js":
/*!*****************************************************!*\
  !*** ./src/ChemDoodle/structures/CondensedLabel.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// CondensedLabel is proprietary and not included in the GPL version\n// its created to satisfy Atom requirements\nvar CondensedLabel = undefined;\n/* harmony default export */ __webpack_exports__[\"default\"] = (CondensedLabel);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvc3RydWN0dXJlcy9Db25kZW5zZWRMYWJlbC5qcz8zYjlhIl0sIm5hbWVzIjpbIkNvbmRlbnNlZExhYmVsIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBRUE7QUFDQSxJQUFNQSxjQUFjLEdBQUdDLFNBQXZCO0FBQ2VELDZFQUFmIiwiZmlsZSI6Ii4vc3JjL0NoZW1Eb29kbGUvc3RydWN0dXJlcy9Db25kZW5zZWRMYWJlbC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvbmRlbnNlZExhYmVsIGlzIHByb3ByaWV0YXJ5IGFuZCBub3QgaW5jbHVkZWQgaW4gdGhlIEdQTCB2ZXJzaW9uXG5cbi8vIGl0cyBjcmVhdGVkIHRvIHNhdGlzZnkgQXRvbSByZXF1aXJlbWVudHNcbmNvbnN0IENvbmRlbnNlZExhYmVsID0gdW5kZWZpbmVkO1xuZXhwb3J0IGRlZmF1bHQgQ29uZGVuc2VkTGFiZWw7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ChemDoodle/structures/CondensedLabel.js\n");

/***/ }),

/***/ "./src/ChemDoodle/structures/Molecule.js":
/*!***********************************************!*\
  !*** ./src/ChemDoodle/structures/Molecule.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Molecule; });\n/* harmony import */ var _Queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Queue */ \"./src/ChemDoodle/structures/Queue.js\");\n/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Point */ \"./src/ChemDoodle/structures/Point.js\");\n/* harmony import */ var _Atom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Atom */ \"./src/ChemDoodle/structures/Atom.js\");\n/* harmony import */ var _Bond__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Bond */ \"./src/ChemDoodle/structures/Bond.js\");\n/* harmony import */ var _VisualSpecifications__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./VisualSpecifications */ \"./src/ChemDoodle/structures/VisualSpecifications.js\");\n/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../ChemDoodle */ \"./src/ChemDoodle/index.js\");\n/* harmony import */ var _informatics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../informatics */ \"./src/ChemDoodle/informatics/index.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../math */ \"./src/ChemDoodle/math/index.js\");\n\n\n\n\n\n\n\n\nvar m = Math;\nfunction Molecule() {\n  this.atoms = [];\n  this.bonds = [];\n  this.rings = [];\n}\n;\nvar _ = Molecule.prototype; // this can be an extensive algorithm for large molecules, you may want\n// to turn this off\n\n_.findRings = true;\n\n_.draw = function (ctx, specs) {\n  if (this.specs) {\n    specs = this.specs;\n  } // draw\n  // need this weird render of atoms before and after, just in case\n  // circles are rendered, as those should be on top\n\n\n  if (specs.atoms_display && !specs.atoms_circles_2D) {\n    for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n      this.atoms[i].draw(ctx, specs);\n    }\n  }\n\n  if (specs.bonds_display) {\n    for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n      this.bonds[i].draw(ctx, specs);\n    }\n  }\n\n  if (specs.atoms_display) {\n    for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n      var a = this.atoms[i];\n\n      if (specs.atoms_circles_2D) {\n        a.draw(ctx, specs);\n      }\n\n      if (a.query) {\n        a.query.draw(ctx, specs, a);\n      }\n    }\n  }\n};\n\n_.render = function (gl, specs) {\n  // uncomment this to render the picking frame\n  // return this.renderPickFrame(gl, specs, []);\n  if (this.specs) {\n    specs = this.specs;\n  } // check explicitly if it is undefined here, since hetatm is a\n  // boolean that can be true or false, as long as it is set, it is\n  // macro\n\n\n  var isMacro = this.atoms.length > 0 && this.atoms[0].hetatm !== undefined;\n\n  if (isMacro) {\n    if (specs.macro_displayBonds) {\n      if (this.bonds.length > 0) {\n        if (specs.bonds_renderAsLines_3D && !this.residueSpecs || this.residueSpecs && this.residueSpecs.bonds_renderAsLines_3D) {\n          gl.lineWidth(this.residueSpecs ? this.residueSpecs.bonds_width_2D : specs.bonds_width_2D);\n          gl.lineBuffer.bindBuffers(gl);\n        } else {\n          gl.cylinderBuffer.bindBuffers(gl);\n        } // colors\n\n\n        gl.material.setTempColors(gl, specs.bonds_materialAmbientColor_3D, undefined, specs.bonds_materialSpecularColor_3D, specs.bonds_materialShininess_3D);\n      }\n\n      for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n        var b = this.bonds[i]; // closestDistance may be 0, so check if undefined\n\n        if (!b.a1.hetatm && (specs.macro_atomToLigandDistance === -1 || b.a1.closestDistance !== undefined && specs.macro_atomToLigandDistance >= b.a1.closestDistance && specs.macro_atomToLigandDistance >= b.a2.closestDistance)) {\n          b.render(gl, this.residueSpecs ? this.residueSpecs : specs);\n        }\n      }\n    }\n\n    if (specs.macro_displayAtoms) {\n      if (this.atoms.length > 0) {\n        gl.sphereBuffer.bindBuffers(gl); // colors\n\n        gl.material.setTempColors(gl, specs.atoms_materialAmbientColor_3D, undefined, specs.atoms_materialSpecularColor_3D, specs.atoms_materialShininess_3D);\n      }\n\n      for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n        var a = this.atoms[i]; // closestDistance may be 0, so check if undefined\n\n        if (!a.hetatm && (specs.macro_atomToLigandDistance === -1 || a.closestDistance !== undefined && specs.macro_atomToLigandDistance >= a.closestDistance)) {\n          a.render(gl, this.residueSpecs ? this.residueSpecs : specs);\n        }\n      }\n    }\n  }\n\n  if (specs.bonds_display) {\n    // Array for Half Bonds. It is needed because Half Bonds use the\n    // pill buffer.\n    var asPills = []; // Array for 0 bond order.\n\n    var asSpheres = [];\n\n    if (this.bonds.length > 0) {\n      if (specs.bonds_renderAsLines_3D) {\n        gl.lineWidth(specs.bonds_width_2D);\n        gl.lineBuffer.bindBuffers(gl);\n      } else {\n        gl.cylinderBuffer.bindBuffers(gl);\n      } // colors\n\n\n      gl.material.setTempColors(gl, specs.bonds_materialAmbientColor_3D, undefined, specs.bonds_materialSpecularColor_3D, specs.bonds_materialShininess_3D);\n    }\n\n    for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n      var b = this.bonds[i];\n\n      if (!isMacro || b.a1.hetatm) {\n        // Check if render as segmented pill will used.\n        if (specs.bonds_showBondOrders_3D) {\n          if (b.bondOrder == 0) {\n            // 0 bond order\n            asSpheres.push(b);\n          } else if (b.bondOrder == 0.5) {\n            // 0.5 bond order\n            asPills.push(b);\n          } else {\n            if (b.bondOrder == 1.5) {\n              // For 1.5 bond order, the \"1\" part will render\n              // as cylinder, and the \"0.5\" part will render\n              // as segmented pills\n              asPills.push(b);\n            }\n\n            b.render(gl, specs);\n          }\n        } else {\n          // this will render the Stick representation\n          b.render(gl, specs);\n        }\n      }\n    } // Render the Half Bond\n\n\n    if (asPills.length > 0) {\n      // if bonds_renderAsLines_3D is true, then lineBuffer will\n      // binded.\n      // so in here we just need to check if we need to change\n      // the binding buffer to pillBuffer or not.\n      if (!specs.bonds_renderAsLines_3D) {\n        gl.pillBuffer.bindBuffers(gl);\n      }\n\n      for (var i = 0, ii = asPills.length; i < ii; i++) {\n        asPills[i].render(gl, specs, true);\n      }\n    } // Render zero bond order\n\n\n    if (asSpheres.length > 0) {\n      // if bonds_renderAsLines_3D is true, then lineBuffer will\n      // binded.\n      // so in here we just need to check if we need to change\n      // the binding buffer to pillBuffer or not.\n      if (!specs.bonds_renderAsLines_3D) {\n        gl.sphereBuffer.bindBuffers(gl);\n      }\n\n      for (var i = 0, ii = asSpheres.length; i < ii; i++) {\n        asSpheres[i].render(gl, specs, true);\n      }\n    }\n  }\n\n  if (specs.atoms_display) {\n    for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n      var a = this.atoms[i];\n      a.bondNumber = 0;\n      a.renderAsStar = false;\n    }\n\n    for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n      var b = this.bonds[i];\n      b.a1.bondNumber++;\n      b.a2.bondNumber++;\n    }\n\n    if (this.atoms.length > 0) {\n      gl.sphereBuffer.bindBuffers(gl); // colors\n\n      gl.material.setTempColors(gl, specs.atoms_materialAmbientColor_3D, undefined, specs.atoms_materialSpecularColor_3D, specs.atoms_materialShininess_3D);\n    }\n\n    var asStars = [];\n\n    for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n      var a = this.atoms[i];\n\n      if (!isMacro || a.hetatm && (specs.macro_showWater || !a.isWater)) {\n        if (specs.atoms_nonBondedAsStars_3D && a.bondNumber === 0) {\n          a.renderAsStar = true;\n          asStars.push(a);\n        } else {\n          a.render(gl, specs);\n        }\n      }\n    }\n\n    if (asStars.length > 0) {\n      gl.starBuffer.bindBuffers(gl);\n\n      for (var i = 0, ii = asStars.length; i < ii; i++) {\n        asStars[i].render(gl, specs);\n      }\n    }\n  }\n\n  if (this.chains) {\n    // set up the model view matrix, since it won't be modified\n    // for macromolecules\n    gl.shader.setMatrixUniforms(gl); // render chains\n\n    if (specs.proteins_displayRibbon) {\n      // proteins\n      // colors\n      gl.material.setTempColors(gl, specs.proteins_materialAmbientColor_3D, undefined, specs.proteins_materialSpecularColor_3D, specs.proteins_materialShininess_3D);\n      var uses = specs.proteins_ribbonCartoonize ? this.cartoons : this.ribbons;\n\n      for (var j = 0, jj = uses.length; j < jj; j++) {\n        var use = uses[j];\n\n        if (specs.proteins_residueColor !== 'none') {\n          use.front.bindBuffers(gl);\n          var rainbow = specs.proteins_residueColor === 'rainbow';\n\n          for (var i = 0, ii = use.front.segments.length; i < ii; i++) {\n            if (rainbow) {\n              gl.material.setDiffuseColor(gl, _math__WEBPACK_IMPORTED_MODULE_7__[\"rainbowAt\"](i, ii, specs.macro_rainbowColors));\n            }\n\n            use.front.segments[i].render(gl, specs);\n          }\n\n          use.back.bindBuffers(gl);\n\n          for (var i = 0, ii = use.back.segments.length; i < ii; i++) {\n            if (rainbow) {\n              gl.material.setDiffuseColor(gl, _math__WEBPACK_IMPORTED_MODULE_7__[\"rainbowAt\"](i, ii, specs.macro_rainbowColors));\n            }\n\n            use.back.segments[i].render(gl, specs);\n          }\n        } else {\n          use.front.render(gl, specs);\n          use.back.render(gl, specs);\n        }\n      }\n    }\n\n    if (specs.proteins_displayPipePlank) {\n      for (var j = 0, jj = this.pipePlanks.length; j < jj; j++) {\n        this.pipePlanks[j].render(gl, specs);\n      }\n    }\n\n    if (specs.proteins_displayBackbone) {\n      if (!this.alphaCarbonTrace) {\n        // cache the alpha carbon trace\n        this.alphaCarbonTrace = {\n          nodes: [],\n          edges: []\n        };\n\n        for (var j = 0, jj = this.chains.length; j < jj; j++) {\n          var rs = this.chains[j];\n          var isNucleotide = rs.length > 2 && _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__[\"RESIDUE\"][rs[2].name] && _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__[\"RESIDUE\"][rs[2].name].aminoColor === '#BEA06E';\n\n          if (!isNucleotide && rs.length > 0) {\n            for (var i = 0, ii = rs.length - 2; i < ii; i++) {\n              var n = rs[i].cp1;\n              n.chainColor = rs.chainColor;\n              this.alphaCarbonTrace.nodes.push(n);\n              var b = new _Bond__WEBPACK_IMPORTED_MODULE_3__[\"default\"](rs[i].cp1, rs[i + 1].cp1);\n              b.residueName = rs[i].name;\n              b.chainColor = rs.chainColor;\n              this.alphaCarbonTrace.edges.push(b);\n\n              if (i === rs.length - 3) {\n                n = rs[i + 1].cp1;\n                n.chainColor = rs.chainColor;\n                this.alphaCarbonTrace.nodes.push(n);\n              }\n            }\n          }\n        }\n      }\n\n      if (this.alphaCarbonTrace.nodes.length > 0) {\n        var traceSpecs = new _VisualSpecifications__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n        traceSpecs.atoms_display = true;\n        traceSpecs.bonds_display = true;\n        traceSpecs.atoms_sphereDiameter_3D = specs.proteins_backboneThickness;\n        traceSpecs.bonds_cylinderDiameter_3D = specs.proteins_backboneThickness;\n        traceSpecs.bonds_splitColor = false;\n        traceSpecs.atoms_color = specs.proteins_backboneColor;\n        traceSpecs.bonds_color = specs.proteins_backboneColor;\n        traceSpecs.atoms_useVDWDiameters_3D = false; // colors\n\n        gl.material.setTempColors(gl, specs.proteins_materialAmbientColor_3D, undefined, specs.proteins_materialSpecularColor_3D, specs.proteins_materialShininess_3D);\n        gl.material.setDiffuseColor(gl, specs.proteins_backboneColor);\n\n        for (var i = 0, ii = this.alphaCarbonTrace.nodes.length; i < ii; i++) {\n          var n = this.alphaCarbonTrace.nodes[i];\n\n          if (specs.macro_colorByChain) {\n            traceSpecs.atoms_color = n.chainColor;\n          }\n\n          gl.sphereBuffer.bindBuffers(gl);\n          n.render(gl, traceSpecs);\n        }\n\n        for (var i = 0, ii = this.alphaCarbonTrace.edges.length; i < ii; i++) {\n          var e = this.alphaCarbonTrace.edges[i];\n          var color;\n          var r = _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__[\"RESIDUE\"][e.residueName] ? _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__[\"RESIDUE\"][e.residueName] : _ChemDoodle__WEBPACK_IMPORTED_MODULE_5__[\"RESIDUE\"]['*'];\n\n          if (specs.macro_colorByChain) {\n            color = e.chainColor;\n          } else if (specs.proteins_residueColor === 'shapely') {\n            color = r.shapelyColor;\n          } else if (specs.proteins_residueColor === 'amino') {\n            color = r.aminoColor;\n          } else if (specs.proteins_residueColor === 'polarity') {\n            if (r.polar) {\n              color = '#C10000';\n            } else {\n              color = '#FFFFFF';\n            }\n          } else if (specs.proteins_residueColor === 'acidity') {\n            if (r.acidity === 1) {\n              color = '#0000FF';\n            } else if (r.acidity === -1) {\n              color = '#FF0000';\n            } else if (r.polar) {\n              color = '#FFFFFF';\n            } else {\n              color = '#773300';\n            }\n          } else if (specs.proteins_residueColor === 'rainbow') {\n            color = _math__WEBPACK_IMPORTED_MODULE_7__[\"rainbowAt\"](i, ii, specs.macro_rainbowColors);\n          }\n\n          if (color) {\n            traceSpecs.bonds_color = color;\n          }\n\n          gl.cylinderBuffer.bindBuffers(gl);\n          e.render(gl, traceSpecs);\n        }\n      }\n    }\n\n    if (specs.nucleics_display) {\n      // nucleic acids\n      // colors\n      gl.material.setTempColors(gl, specs.nucleics_materialAmbientColor_3D, undefined, specs.nucleics_materialSpecularColor_3D, specs.nucleics_materialShininess_3D);\n\n      for (var j = 0, jj = this.tubes.length; j < jj; j++) {\n        gl.shader.setMatrixUniforms(gl);\n        var use = this.tubes[j];\n        use.render(gl, specs);\n      }\n    }\n  }\n\n  if (specs.atoms_display) {\n    var highlight = false;\n\n    for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n      var a = this.atoms[i];\n\n      if (a.isHover || a.isSelected) {\n        highlight = true;\n        break;\n      }\n    }\n\n    if (!highlight) {\n      for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n        var b = this.bonds[i];\n\n        if (b.isHover || b.isSelected) {\n          highlight = true;\n          break;\n        }\n      }\n    }\n\n    if (highlight) {\n      gl.sphereBuffer.bindBuffers(gl); // colors\n\n      gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n      gl.material.setTempColors(gl, specs.atoms_materialAmbientColor_3D, undefined, '#000000', 0);\n      gl.enable(gl.BLEND);\n      gl.depthMask(false);\n      gl.material.setAlpha(gl, .4);\n      gl.sphereBuffer.bindBuffers(gl);\n\n      for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n        var a = this.atoms[i];\n\n        if (a.isHover || a.isSelected) {\n          a.renderHighlight(gl, specs);\n        }\n      }\n\n      gl.cylinderBuffer.bindBuffers(gl);\n\n      for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n        var b = this.bonds[i];\n\n        if (b.isHover || b.isSelected) {\n          b.renderHighlight(gl, specs);\n        }\n      }\n\n      gl.depthMask(true);\n      gl.disable(gl.BLEND);\n      gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    }\n  }\n};\n\n_.renderPickFrame = function (gl, specs, objects, includeAtoms, includeBonds) {\n  if (this.specs) {\n    specs = this.specs;\n  }\n\n  var isMacro = this.atoms.length > 0 && this.atoms[0].hetatm !== undefined;\n\n  if (includeBonds && specs.bonds_display) {\n    if (this.bonds.length > 0) {\n      if (specs.bonds_renderAsLines_3D) {\n        gl.lineWidth(specs.bonds_width_2D);\n        gl.lineBuffer.bindBuffers(gl);\n      } else {\n        gl.cylinderBuffer.bindBuffers(gl);\n      }\n    }\n\n    for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n      var b = this.bonds[i];\n\n      if (!isMacro || b.a1.hetatm) {\n        gl.material.setDiffuseColor(gl, _math__WEBPACK_IMPORTED_MODULE_7__[\"idx2color\"](objects.length));\n        b.renderPicker(gl, specs);\n        objects.push(b);\n      }\n    }\n  }\n\n  if (includeAtoms && specs.atoms_display) {\n    for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n      var a = this.atoms[i];\n      a.bondNumber = 0;\n      a.renderAsStar = false;\n    }\n\n    for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n      var b = this.bonds[i];\n      b.a1.bondNumber++;\n      b.a2.bondNumber++;\n    }\n\n    if (this.atoms.length > 0) {\n      gl.sphereBuffer.bindBuffers(gl);\n    }\n\n    var asStars = [];\n\n    for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n      var a = this.atoms[i];\n\n      if (!isMacro || a.hetatm && (specs.macro_showWater || !a.isWater)) {\n        if (specs.atoms_nonBondedAsStars_3D && a.bondNumber === 0) {\n          a.renderAsStar = true;\n          asStars.push(a);\n        } else {\n          gl.material.setDiffuseColor(gl, _math__WEBPACK_IMPORTED_MODULE_7__[\"idx2color\"](objects.length));\n          a.render(gl, specs, true);\n          objects.push(a);\n        }\n      }\n    }\n\n    if (asStars.length > 0) {\n      gl.starBuffer.bindBuffers(gl);\n\n      for (var i = 0, ii = asStars.length; i < ii; i++) {\n        var a = asStars[i];\n        gl.material.setDiffuseColor(gl, _math__WEBPACK_IMPORTED_MODULE_7__[\"idx2color\"](objects.length));\n        a.render(gl, specs, true);\n        objects.push(a);\n      }\n    }\n  }\n};\n\n_.getCenter3D = function () {\n  if (this.atoms.length === 1) {\n    return new _Atom__WEBPACK_IMPORTED_MODULE_2__[\"default\"]('C', this.atoms[0].x, this.atoms[0].y, this.atoms[0].z);\n  }\n\n  var minX = Infinity,\n      minY = Infinity,\n      minZ = Infinity;\n  var maxX = -Infinity,\n      maxY = -Infinity,\n      maxZ = -Infinity;\n\n  if (this.chains) {\n    // residues\n    for (var i = 0, ii = this.chains.length; i < ii; i++) {\n      var chain = this.chains[i];\n\n      for (var j = 0, jj = chain.length; j < jj; j++) {\n        var residue = chain[j];\n        minX = m.min(residue.cp1.x, residue.cp2.x, minX);\n        minY = m.min(residue.cp1.y, residue.cp2.y, minY);\n        minZ = m.min(residue.cp1.z, residue.cp2.z, minZ);\n        maxX = m.max(residue.cp1.x, residue.cp2.x, maxX);\n        maxY = m.max(residue.cp1.y, residue.cp2.y, maxY);\n        maxZ = m.max(residue.cp1.z, residue.cp2.z, maxZ);\n      }\n    }\n  }\n\n  for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n    minX = m.min(this.atoms[i].x, minX);\n    minY = m.min(this.atoms[i].y, minY);\n    minZ = m.min(this.atoms[i].z, minZ);\n    maxX = m.max(this.atoms[i].x, maxX);\n    maxY = m.max(this.atoms[i].y, maxY);\n    maxZ = m.max(this.atoms[i].z, maxZ);\n  }\n\n  return new _Atom__WEBPACK_IMPORTED_MODULE_2__[\"default\"]('C', (maxX + minX) / 2, (maxY + minY) / 2, (maxZ + minZ) / 2);\n};\n\n_.getCenter = function () {\n  if (this.atoms.length === 1) {\n    return new _Point__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.atoms[0].x, this.atoms[0].y);\n  }\n\n  var minX = Infinity,\n      minY = Infinity;\n  var maxX = -Infinity,\n      maxY = -Infinity;\n\n  for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n    minX = m.min(this.atoms[i].x, minX);\n    minY = m.min(this.atoms[i].y, minY);\n    maxX = m.max(this.atoms[i].x, maxX);\n    maxY = m.max(this.atoms[i].y, maxY);\n  }\n\n  return new _Point__WEBPACK_IMPORTED_MODULE_1__[\"default\"]((maxX + minX) / 2, (maxY + minY) / 2);\n};\n\n_.getDimension = function () {\n  if (this.atoms.length === 1) {\n    return new _Point__WEBPACK_IMPORTED_MODULE_1__[\"default\"](0, 0);\n  }\n\n  var minX = Infinity,\n      minY = Infinity;\n  var maxX = -Infinity,\n      maxY = -Infinity;\n\n  if (this.chains) {\n    for (var i = 0, ii = this.chains.length; i < ii; i++) {\n      var chain = this.chains[i];\n\n      for (var j = 0, jj = chain.length; j < jj; j++) {\n        var residue = chain[j];\n        minX = m.min(residue.cp1.x, residue.cp2.x, minX);\n        minY = m.min(residue.cp1.y, residue.cp2.y, minY);\n        maxX = m.max(residue.cp1.x, residue.cp2.x, maxX);\n        maxY = m.max(residue.cp1.y, residue.cp2.y, maxY);\n      }\n    }\n\n    minX -= 30;\n    minY -= 30;\n    maxX += 30;\n    maxY += 30;\n  }\n\n  for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n    minX = m.min(this.atoms[i].x, minX);\n    minY = m.min(this.atoms[i].y, minY);\n    maxX = m.max(this.atoms[i].x, maxX);\n    maxY = m.max(this.atoms[i].y, maxY);\n  }\n\n  return new _Point__WEBPACK_IMPORTED_MODULE_1__[\"default\"](maxX - minX, maxY - minY);\n};\n\n_.check = function (force) {\n  // using force improves efficiency, so changes will not be checked\n  // until a render occurs\n  // you can force a check by sending true to this function after\n  // calling check with a false\n  if (force && this.doChecks) {\n    // only check if the number of bonds has changed\n    if (this.findRings) {\n      if (this.bonds.length - this.atoms.length !== this.fjNumCache) {\n        // find rings\n        this.rings = new _informatics__WEBPACK_IMPORTED_MODULE_6__[\"SSSRFinder\"](this).rings;\n\n        for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n          this.bonds[i].ring = undefined;\n        }\n\n        for (var i = 0, ii = this.rings.length; i < ii; i++) {\n          this.rings[i].setupBonds();\n        }\n      } else {\n        // update rings if any\n        for (var i = 0, ii = this.rings.length; i < ii; i++) {\n          var r = this.rings[i];\n          r.center = r.getCenter();\n        }\n      }\n    } // find lones\n\n\n    for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n      this.atoms[i].isLone = false;\n\n      if (this.atoms[i].label === 'C') {\n        var counter = 0;\n\n        for (var j = 0, jj = this.bonds.length; j < jj; j++) {\n          if (this.bonds[j].a1 === this.atoms[i] || this.bonds[j].a2 === this.atoms[i]) {\n            counter++;\n          }\n        }\n\n        if (counter === 0) {\n          this.atoms[i].isLone = true;\n        }\n      }\n    } // sort\n\n\n    var sort = false;\n\n    for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n      if (this.atoms[i].z !== 0) {\n        sort = true;\n      }\n    }\n\n    if (sort) {\n      this.sortAtomsByZ();\n      this.sortBondsByZ();\n    } // setup metadata\n\n\n    this.setupMetaData();\n    this.atomNumCache = this.atoms.length;\n    this.bondNumCache = this.bonds.length; // fj number cache doesnt care if there are separate molecules,\n    // as the change will signal a need to check for rings; the\n    // accuracy doesn't matter\n\n    this.fjNumCache = this.bonds.length - this.atoms.length;\n  }\n\n  this.doChecks = !force;\n};\n\n_.getAngles = function (a) {\n  var angles = [];\n\n  for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n    if (this.bonds[i].contains(a)) {\n      angles.push(a.angle(this.bonds[i].getNeighbor(a)));\n    }\n  }\n\n  angles.sort(function (a, b) {\n    return a - b;\n  });\n  return angles;\n};\n\n_.getCoordinationNumber = function (bs) {\n  var coordinationNumber = 0;\n\n  for (var i = 0, ii = bs.length; i < ii; i++) {\n    coordinationNumber += bs[i].bondOrder;\n  }\n\n  return coordinationNumber;\n};\n\n_.getBonds = function (a) {\n  var bonds = [];\n\n  for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n    if (this.bonds[i].contains(a)) {\n      bonds.push(this.bonds[i]);\n    }\n  }\n\n  return bonds;\n};\n\n_.sortAtomsByZ = function () {\n  for (var i = 1, ii = this.atoms.length; i < ii; i++) {\n    var index = i;\n\n    while (index > 0 && this.atoms[index].z < this.atoms[index - 1].z) {\n      var hold = this.atoms[index];\n      this.atoms[index] = this.atoms[index - 1];\n      this.atoms[index - 1] = hold;\n      index--;\n    }\n  }\n};\n\n_.sortBondsByZ = function () {\n  for (var i = 1, ii = this.bonds.length; i < ii; i++) {\n    var index = i;\n\n    while (index > 0 && this.bonds[index].a1.z + this.bonds[index].a2.z < this.bonds[index - 1].a1.z + this.bonds[index - 1].a2.z) {\n      var hold = this.bonds[index];\n      this.bonds[index] = this.bonds[index - 1];\n      this.bonds[index - 1] = hold;\n      index--;\n    }\n  }\n};\n\n_.setupMetaData = function () {\n  var center = this.getCenter();\n\n  for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n    var a = this.atoms[i];\n    a.bonds = this.getBonds(a);\n    a.angles = this.getAngles(a);\n    a.isHidden = a.bonds.length === 2 && m.abs(m.abs(a.angles[1] - a.angles[0]) - m.PI) < m.PI / 30 && a.bonds[0].bondOrder === a.bonds[1].bondOrder;\n    var angleData = _math__WEBPACK_IMPORTED_MODULE_7__[\"angleBetweenLargest\"](a.angles);\n    a.angleOfLeastInterference = angleData.angle % (m.PI * 2);\n    a.largestAngle = angleData.largest;\n    a.coordinationNumber = this.getCoordinationNumber(a.bonds);\n    a.bondNumber = a.bonds.length;\n    a.molCenter = center;\n  }\n\n  for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n    var b = this.bonds[i];\n    b.molCenter = center;\n  }\n};\n\n_.scaleToAverageBondLength = function (length) {\n  var avBondLength = this.getAverageBondLength();\n\n  if (avBondLength !== 0) {\n    var scale = length / avBondLength;\n\n    for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n      this.atoms[i].x *= scale;\n      this.atoms[i].y *= scale;\n    }\n  }\n};\n\n_.getAverageBondLength = function () {\n  if (this.bonds.length === 0) {\n    return 0;\n  }\n\n  var tot = 0;\n\n  for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n    tot += this.bonds[i].getLength();\n  }\n\n  tot /= this.bonds.length;\n  return tot;\n};\n\n_.getBounds = function () {\n  var bounds = new _math__WEBPACK_IMPORTED_MODULE_7__[\"Bounds\"]();\n\n  for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n    bounds.expand(this.atoms[i].getBounds());\n  }\n\n  if (this.chains) {\n    for (var i = 0, ii = this.chains.length; i < ii; i++) {\n      var chain = this.chains[i];\n\n      for (var j = 0, jj = chain.length; j < jj; j++) {\n        var residue = chain[j];\n        bounds.expand(residue.cp1.x, residue.cp1.y);\n        bounds.expand(residue.cp2.x, residue.cp2.y);\n      }\n    }\n\n    bounds.minX -= 30;\n    bounds.minY -= 30;\n    bounds.maxX += 30;\n    bounds.maxY += 30;\n  }\n\n  return bounds;\n};\n\n_.getBounds3D = function () {\n  var bounds = new _math__WEBPACK_IMPORTED_MODULE_7__[\"Bounds\"]();\n\n  for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n    bounds.expand(this.atoms[i].getBounds3D());\n  }\n\n  if (this.chains) {\n    for (var i = 0, ii = this.chains.length; i < ii; i++) {\n      var chain = this.chains[i];\n\n      for (var j = 0, jj = chain.length; j < jj; j++) {\n        var residue = chain[j];\n        bounds.expand3D(residue.cp1.x, residue.cp1.y, residue.cp1.z);\n        bounds.expand3D(residue.cp2.x, residue.cp2.y, residue.cp2.z);\n      }\n    }\n  }\n\n  return bounds;\n};\n\n_.getAtomGroup = function (a) {\n  var ring = false;\n\n  for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n    this.atoms[i].visited = false;\n  }\n\n  for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n    var b = this.bonds[i];\n\n    if (!ring && b.contains(a) && b.ring !== undefined) {\n      ring = true;\n    }\n  }\n\n  if (!ring) {\n    return undefined;\n  }\n\n  var set = [a];\n  a.visited = true;\n  var q = new _Queue__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  q.enqueue(a);\n\n  while (!q.isEmpty()) {\n    var atom = q.dequeue();\n\n    for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n      var b = this.bonds[i];\n\n      if (b.contains(atom) && ring === (b.ring !== undefined)) {\n        var n = b.getNeighbor(atom);\n\n        if (!n.visited) {\n          n.visited = true;\n          set.push(n);\n          q.enqueue(n);\n        }\n      }\n    }\n  }\n\n  return set;\n};\n\n_.getBondGroup = function (b) {\n  var ring = b.ring !== undefined;\n  var contained = false;\n\n  for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n    var bi = this.bonds[i];\n\n    if (bi === b) {\n      contained = true;\n    }\n\n    bi.visited = false;\n  }\n\n  if (!contained) {\n    // this bond isn't part of the molecule\n    return undefined;\n  }\n\n  var set = [b];\n  b.visited = true;\n  var q = new _Queue__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n  q.enqueue(b);\n\n  while (!q.isEmpty()) {\n    var bond = q.dequeue();\n\n    for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n      var n = this.bonds[i];\n\n      if (!n.visited && (n.a1 === bond.a1 || n.a2 === bond.a1 || n.a1 === bond.a2 || n.a2 === bond.a2) && n.ring !== undefined === ring) {\n        n.visited = true;\n        set.push(n);\n        q.enqueue(n);\n      }\n    }\n  }\n\n  return set;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/structures/Molecule.js\n");

/***/ }),

/***/ "./src/ChemDoodle/structures/Plate.js":
/*!********************************************!*\
  !*** ./src/ChemDoodle/structures/Plate.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Plate; });\n/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../extensions */ \"./src/ChemDoodle/extensions/index.js\");\n\nvar m = Math;\nfunction Plate(lanes) {\n  this.lanes = new Array(lanes);\n\n  for (i = 0, ii = lanes; i < ii; i++) {\n    this.lanes[i] = [];\n  }\n}\n;\nvar _ = Plate.prototype;\n\n_.sort = function () {\n  for (i = 0, ii = this.lanes.length; i < ii; i++) {\n    this.lanes[i].sort(function (a, b) {\n      return a - b;\n    });\n  }\n};\n\n_.draw = function (ctx, specs) {\n  // Front and origin\n  var width = ctx.canvas.width;\n  var height = ctx.canvas.height;\n  this.origin = 9 * height / 10;\n  this.front = height / 10;\n  this.laneLength = this.origin - this.front;\n  ctx.strokeStyle = '#000000';\n  ctx.beginPath();\n  ctx.moveTo(0, this.front);\n  ctx.lineTo(width, this.front);\n  ctx.setLineDash([3]);\n  ctx.stroke();\n  ctx.setLineDash([]);\n  ctx.beginPath();\n  ctx.moveTo(0, this.origin);\n  ctx.lineTo(width, this.origin);\n  ctx.closePath();\n  ctx.stroke(); // Lanes\n\n  for (i = 0, ii = this.lanes.length; i < ii; i++) {\n    var laneX = (i + 1) * width / (ii + 1);\n    ctx.beginPath();\n    ctx.moveTo(laneX, this.origin);\n    ctx.lineTo(laneX, this.origin + 3);\n    ctx.closePath();\n    ctx.stroke(); // Spots\n\n    for (s = 0, ss = this.lanes[i].length; s < ss; s++) {\n      var spotY = this.origin - this.laneLength * this.lanes[i][s].rf;\n\n      switch (this.lanes[i][s].type) {\n        case 'compact':\n          ctx.beginPath();\n          ctx.arc(laneX, spotY, 3, 0, 2 * m.PI, false);\n          ctx.closePath();\n          break;\n\n        case 'expanded':\n          ctx.beginPath();\n          ctx.arc(laneX, spotY, 7, 0, 2 * m.PI, false);\n          ctx.closePath();\n          break;\n\n        case 'trailing':\n          // trailing\n          break;\n\n        case 'widened':\n          _extensions__WEBPACK_IMPORTED_MODULE_0__[\"contextEllipse\"](ctx, laneX - 18, spotY - 10, 36, 10);\n          break;\n\n        case 'cresent':\n          ctx.beginPath();\n          ctx.arc(laneX, spotY, 9, 0, m.PI, true);\n          ctx.closePath();\n          break;\n      }\n\n      switch (this.lanes[i][s].style) {\n        case 'solid':\n          ctx.fillStyle = '#000000';\n          ctx.fill();\n          break;\n\n        case 'transparent':\n          ctx.stroke();\n          break;\n\n        case 'gradient':\n          // gradient\n          break;\n      }\n    }\n  }\n};\n\nPlate.Spot = function (type, rf, style) {\n  this.type = type;\n  this.rf = rf;\n  this.style = style ? style : 'solid';\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/structures/Plate.js\n");

/***/ }),

/***/ "./src/ChemDoodle/structures/Point.js":
/*!********************************************!*\
  !*** ./src/ChemDoodle/structures/Point.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Point; });\nvar m = Math;\nfunction Point(x, y) {\n  this.x = x ? x : 0;\n  this.y = y ? y : 0;\n}\n;\nvar _ = Point.prototype;\n\n_.sub = function (p) {\n  this.x -= p.x;\n  this.y -= p.y;\n};\n\n_.add = function (p) {\n  this.x += p.x;\n  this.y += p.y;\n};\n\n_.distance = function (p) {\n  var dx = p.x - this.x;\n  var dy = p.y - this.y;\n  return m.sqrt(dx * dx + dy * dy);\n};\n\n_.angleForStupidCanvasArcs = function (p) {\n  var dx = p.x - this.x;\n  var dy = p.y - this.y;\n  var angle = 0; // Calculate angle\n\n  if (dx === 0) {\n    if (dy === 0) {\n      angle = 0;\n    } else if (dy > 0) {\n      angle = m.PI / 2;\n    } else {\n      angle = 3 * m.PI / 2;\n    }\n  } else if (dy === 0) {\n    if (dx > 0) {\n      angle = 0;\n    } else {\n      angle = m.PI;\n    }\n  } else {\n    if (dx < 0) {\n      angle = m.atan(dy / dx) + m.PI;\n    } else if (dy < 0) {\n      angle = m.atan(dy / dx) + 2 * m.PI;\n    } else {\n      angle = m.atan(dy / dx);\n    }\n  }\n\n  while (angle < 0) {\n    angle += m.PI * 2;\n  }\n\n  angle = angle % (m.PI * 2);\n  return angle;\n};\n\n_.angle = function (p) {\n  // y is upside down to account for inverted canvas\n  var dx = p.x - this.x;\n  var dy = this.y - p.y;\n  var angle = 0; // Calculate angle\n\n  if (dx === 0) {\n    if (dy === 0) {\n      angle = 0;\n    } else if (dy > 0) {\n      angle = m.PI / 2;\n    } else {\n      angle = 3 * m.PI / 2;\n    }\n  } else if (dy === 0) {\n    if (dx > 0) {\n      angle = 0;\n    } else {\n      angle = m.PI;\n    }\n  } else {\n    if (dx < 0) {\n      angle = m.atan(dy / dx) + m.PI;\n    } else if (dy < 0) {\n      angle = m.atan(dy / dx) + 2 * m.PI;\n    } else {\n      angle = m.atan(dy / dx);\n    }\n  }\n\n  while (angle < 0) {\n    angle += m.PI * 2;\n  }\n\n  angle = angle % (m.PI * 2);\n  return angle;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvc3RydWN0dXJlcy9Qb2ludC5qcz8zODk1Il0sIm5hbWVzIjpbIm0iLCJNYXRoIiwiUG9pbnQiLCJ4IiwieSIsIl8iLCJwcm90b3R5cGUiLCJzdWIiLCJwIiwiYWRkIiwiZGlzdGFuY2UiLCJkeCIsImR5Iiwic3FydCIsImFuZ2xlRm9yU3R1cGlkQ2FudmFzQXJjcyIsImFuZ2xlIiwiUEkiLCJhdGFuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUEsSUFBTUEsQ0FBQyxHQUFHQyxJQUFWO0FBRWUsU0FBU0MsS0FBVCxDQUFlQyxDQUFmLEVBQWtCQyxDQUFsQixFQUFxQjtBQUNsQyxPQUFLRCxDQUFMLEdBQVNBLENBQUMsR0FBR0EsQ0FBSCxHQUFPLENBQWpCO0FBQ0EsT0FBS0MsQ0FBTCxHQUFTQSxDQUFDLEdBQUdBLENBQUgsR0FBTyxDQUFqQjtBQUNEO0FBQUE7QUFDRCxJQUFJQyxDQUFDLEdBQUdILEtBQUssQ0FBQ0ksU0FBZDs7QUFDQUQsQ0FBQyxDQUFDRSxHQUFGLEdBQVEsVUFBU0MsQ0FBVCxFQUFZO0FBQ2xCLE9BQUtMLENBQUwsSUFBVUssQ0FBQyxDQUFDTCxDQUFaO0FBQ0EsT0FBS0MsQ0FBTCxJQUFVSSxDQUFDLENBQUNKLENBQVo7QUFDRCxDQUhEOztBQUlBQyxDQUFDLENBQUNJLEdBQUYsR0FBUSxVQUFTRCxDQUFULEVBQVk7QUFDbEIsT0FBS0wsQ0FBTCxJQUFVSyxDQUFDLENBQUNMLENBQVo7QUFDQSxPQUFLQyxDQUFMLElBQVVJLENBQUMsQ0FBQ0osQ0FBWjtBQUNELENBSEQ7O0FBSUFDLENBQUMsQ0FBQ0ssUUFBRixHQUFhLFVBQVNGLENBQVQsRUFBWTtBQUN2QixNQUFJRyxFQUFFLEdBQUdILENBQUMsQ0FBQ0wsQ0FBRixHQUFNLEtBQUtBLENBQXBCO0FBQ0EsTUFBSVMsRUFBRSxHQUFHSixDQUFDLENBQUNKLENBQUYsR0FBTSxLQUFLQSxDQUFwQjtBQUNBLFNB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QUFULEVBQVk7QUFDVkksV0FBSyxHQUFHZixDQUFDLENBQUNpQixJQUFGLENBQU9MLEVBQUUsR0FBR0QsRUFBWixJQUFrQlgsQ0FBQyxDQUFDZ0IsRUFBNUI7QUFDRCxLQUZELE1BRU8sSUFBSUosRUFBRSxHQUFHLENBQVQsRUFBWTtBQUNqQkcsV0FBSyxHQUFHZixDQUFDLENBQUNpQixJQUFGLENBQU9MLEVBQUUsR0FBR0QsRUFBWixJQUFrQixJQUFJWCxDQUFDLENBQUNnQixFQUFoQztBQUNELEtBRk0sTUFFQTtBQUNMRCxXQUFLLEdBQUdmLENBQUMsQ0FBQ2lCLElBQUYsQ0FBT0wsRUFBRSxHQUFHRCxFQUFaLENBQVI7QUFDRDtBQUNGOztBQUNELFNBQU9JLEtBQUssR0FBRyxDQUFmLEVBQWtCO0FBQ2hCQSxTQUFLLElBQUlmLENBQUMsQ0FBQ2dCLEVBQUYsR0FBTyxDQUFoQjtBQUNEOztBQUNERCxPQUFLLEdBQUdBLEtBQUssSUFBSWYsQ0FBQyxDQUFDZ0IsRUFBRixHQUFPLENBQVgsQ0FBYjtBQUNBLFNBQU9ELEtBQVA7QUFDRCxDQWxDRCIsImZpbGUiOiIuL3NyYy9DaGVtRG9vZGxlL3N0cnVjdHVyZXMvUG9pbnQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBtID0gTWF0aDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUG9pbnQoeCwgeSkge1xuICB0aGlzLnggPSB4ID8geCA6IDA7XG4gIHRoaXMueSA9IHkgPyB5IDogMDtcbn07XG52YXIgXyA9IFBvaW50LnByb3RvdHlwZTtcbl8uc3ViID0gZnVuY3Rpb24ocCkge1xuICB0aGlzLnggLT0gcC54O1xuICB0aGlzLnkgLT0gcC55O1xufTtcbl8uYWRkID0gZnVuY3Rpb24ocCkge1xuICB0aGlzLnggKz0gcC54O1xuICB0aGlzLnkgKz0gcC55O1xufTtcbl8uZGlzdGFuY2UgPSBmdW5jdGlvbihwKSB7XG4gIHZhciBkeCA9IHAueCAtIHRoaXMueDtcbiAgdmFyIGR5ID0gcC55IC0gdGhpcy55O1xuICByZXR1cm4gbS5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbn07XG5fLmFuZ2xlRm9yU3R1cGlkQ2FudmFzQXJjcyA9IGZ1bmN0aW9uKHApIHtcbiAgdmFyIGR4ID0gcC54IC0gdGhpcy54O1xuICB2YXIgZHkgPSBwLnkgLSB0aGlzLnk7XG4gIHZhciBhbmdsZSA9IDA7XG4gIC8vIENhbGN1bGF0ZSBhbmdsZVxuICBpZiAoZHggPT09IDApIHtcbiAgICBpZiAoZHkgPT09IDApIHtcbiAgICAgIGFuZ2xlID0gMDtcbiAgICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgICAgYW5nbGUgPSBtLlBJIC8gMjtcbiAgICB9IGVsc2Uge1xuICAgICAgYW5nbGUgPSAzICogbS5QSSAvIDI7XG4gICAgfVxuICB9IGVsc2UgaWYgKGR5ID09PSAwKSB7XG4gICAgaWYgKGR4ID4gMCkge1xuICAgICAgYW5nbGUgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBhbmdsZSA9IG0uUEk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkeCA8IDApIHtcbiAgICAgIGFuZ2xlID0gbS5hdGFuKGR5IC8gZHgpICsgbS5QSTtcbiAgICB9IGVsc2UgaWYgKGR5IDwgMCkge1xuICAgICAgYW5nbGUgPSBtLmF0YW4oZHkgLyBkeCkgKyAyICogbS5QSTtcbiAgICB9IGVsc2Uge1xuICAgICAgYW5nbGUgPSBtLmF0YW4oZHkgLyBkeCk7XG4gICAgfVxuICB9XG4gIHdoaWxlIChhbmdsZSA8IDApIHtcbiAgICBhbmdsZSArPSBtLlBJICogMjtcbiAgfVxuICBhbmdsZSA9IGFuZ2xlICUgKG0uUEkgKiAyKTtcbiAgcmV0dXJuIGFuZ2xlO1xufTtcbl8uYW5nbGUgPSBmdW5jdGlvbihwKSB7XG4gIC8vIHkgaXMgdXBzaWRlIGRvd24gdG8gYWNjb3VudCBmb3IgaW52ZXJ0ZWQgY2FudmFzXG4gIHZhciBkeCA9IHAueCAtIHRoaXMueDtcbiAgdmFyIGR5ID0gdGhpcy55IC0gcC55O1xuICB2YXIgYW5nbGUgPSAwO1xuICAvLyBDYWxjdWxhdGUgYW5nbGVcbiAgaWYgKGR4ID09PSAwKSB7XG4gICAgaWYgKGR5ID09PSAwKSB7XG4gICAgICBhbmdsZSA9IDA7XG4gICAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICAgIGFuZ2xlID0gbS5QSSAvIDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFuZ2xlID0gMyAqIG0uUEkgLyAyO1xuICAgIH1cbiAgfSBlbHNlIGlmIChkeSA9PT0gMCkge1xuICAgIGlmIChkeCA+IDApIHtcbiAgICAgIGFuZ2xlID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgYW5nbGUgPSBtLlBJO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoZHggPCAwKSB7XG4gICAgICBhbmdsZSA9IG0uYXRhbihkeSAvIGR4KSArIG0uUEk7XG4gICAgfSBlbHNlIGlmIChkeSA8IDApIHtcbiAgICAgIGFuZ2xlID0gbS5hdGFuKGR5IC8gZHgpICsgMiAqIG0uUEk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFuZ2xlID0gbS5hdGFuKGR5IC8gZHgpO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoYW5nbGUgPCAwKSB7XG4gICAgYW5nbGUgKz0gbS5QSSAqIDI7XG4gIH1cbiAgYW5nbGUgPSBhbmdsZSAlIChtLlBJICogMik7XG4gIHJldHVybiBhbmdsZTtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/ChemDoodle/structures/Point.js\n");

/***/ }),

/***/ "./src/ChemDoodle/structures/Query.js":
/*!********************************************!*\
  !*** ./src/ChemDoodle/structures/Query.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Query; });\n/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../extensions */ \"./src/ChemDoodle/extensions/index.js\");\n\nvar extensions = {\n  getFontString: _extensions__WEBPACK_IMPORTED_MODULE_0__[\"getFontString\"]\n};\nvar m = Math;\nvar COMMA_SPACE_REGEX = /[ ,]+/;\nvar COMMA_DASH_REGEX = /\\-+/;\nvar FONTS = ['Helvetica', 'Arial', 'Dialog'];\nfunction Query(type) {\n  this.type = type; // atom properties\n\n  this.elements = {\n    v: [],\n    not: false\n  };\n  this.charge = undefined;\n  this.chirality = undefined;\n  this.connectivity = undefined;\n  this.connectivityNoH = undefined;\n  this.hydrogens = undefined;\n  this.saturation = undefined; // bond properties\n\n  this.orders = {\n    v: [],\n    not: false\n  };\n  this.stereo = undefined; // generic properties\n\n  this.aromatic = undefined;\n  this.ringCount = undefined; // cache the string value\n\n  this.cache = undefined;\n}\n;\nQuery.TYPE_ATOM = 0;\nQuery.TYPE_BOND = 1;\nvar _ = Query.prototype;\n\n_.parseRange = function (range) {\n  var points = [];\n  var splits = range.split(COMMA_SPACE_REGEX);\n\n  for (var i = 0, ii = splits.length; i < ii; i++) {\n    var t = splits[i];\n    var neg = false;\n    var neg2 = false;\n\n    if (t.charAt(0) === '-') {\n      neg = true;\n      t = t.substring(1);\n    }\n\n    if (t.indexOf('--') != -1) {\n      neg2 = true;\n    }\n\n    if (t.indexOf('-') != -1) {\n      var parts = t.split(COMMA_DASH_REGEX);\n      var p = {\n        x: parseInt(parts[0]) * (neg ? -1 : 1),\n        y: parseInt(parts[1]) * (neg2 ? -1 : 1)\n      };\n\n      if (p.y < p.x) {\n        var tmp = p.y;\n        p.y = p.x;\n        p.x = tmp;\n      }\n\n      points.push(p);\n    } else {\n      points.push({\n        x: parseInt(t) * (neg ? -1 : 1)\n      });\n    }\n  }\n\n  return points;\n};\n\n_.draw = function (ctx, specs, pos) {\n  if (!this.cache) {\n    this.cache = this.toString();\n  }\n\n  var top = this.cache;\n  var bottom = undefined;\n  var split = top.indexOf('(');\n\n  if (split != -1) {\n    top = this.cache.substring(0, split);\n    bottom = this.cache.substring(split, this.cache.length);\n  }\n\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.font = extensions.getFontString(12, FONTS, true, false);\n  var tw = ctx.measureText(top).width;\n  ctx.fillStyle = specs.backgroundColor;\n  ctx.fillRect(pos.x - tw / 2, pos.y - 6, tw, 12);\n  ctx.fillStyle = 'black';\n  ctx.fillText(top, pos.x, pos.y);\n\n  if (bottom) {\n    ctx.font = extensions.getFontString(10, FONTS, false, true);\n    tw = ctx.measureText(bottom).width;\n    ctx.fillStyle = specs.backgroundColor;\n    ctx.fillRect(pos.x - tw / 2, pos.y + 6, tw, 11);\n    ctx.fillStyle = 'black';\n    ctx.fillText(bottom, pos.x, pos.y + 11);\n  }\n};\n\n_.outputRange = function (array) {\n  var comma = false;\n  var sb = [];\n\n  for (var i = 0, ii = array.length; i < ii; i++) {\n    if (comma) {\n      sb.push(',');\n    }\n\n    comma = true;\n    var p = array[i];\n\n    if (p.y) {\n      sb.push(p.x);\n      sb.push('-');\n      sb.push(p.y);\n    } else {\n      sb.push(p.x);\n    }\n  }\n\n  return sb.join('');\n};\n\n_.toString = function () {\n  var sb = [];\n  var attributes = [];\n\n  if (this.type === Query.TYPE_ATOM) {\n    if (!this.elements || this.elements.v.length === 0) {\n      sb.push('[a]');\n    } else {\n      if (this.elements.not) {\n        sb.push('!');\n      }\n\n      sb.push('[');\n      sb.push(this.elements.v.join(','));\n      sb.push(']');\n    }\n\n    if (this.chirality) {\n      attributes.push((this.chirality.not ? '!' : '') + '@=' + this.chirality.v);\n    }\n\n    if (this.aromatic) {\n      attributes.push((this.aromatic.not ? '!' : '') + 'A');\n    }\n\n    if (this.charge) {\n      attributes.push((this.charge.not ? '!' : '') + 'C=' + this.outputRange(this.charge.v));\n    }\n\n    if (this.hydrogens) {\n      attributes.push((this.hydrogens.not ? '!' : '') + 'H=' + this.outputRange(this.hydrogens.v));\n    }\n\n    if (this.ringCount) {\n      attributes.push((this.ringCount.not ? '!' : '') + 'R=' + this.outputRange(this.ringCount.v));\n    }\n\n    if (this.saturation) {\n      attributes.push((this.saturation.not ? '!' : '') + 'S');\n    }\n\n    if (this.connectivity) {\n      attributes.push((this.connectivity.not ? '!' : '') + 'X=' + this.outputRange(this.connectivity.v));\n    }\n\n    if (this.connectivityNoH) {\n      attributes.push((this.connectivityNoH.not ? '!' : '') + 'x=' + this.outputRange(this.connectivityNoH.v));\n    }\n  } else if (this.type === Query.TYPE_BOND) {\n    if (!this.orders || this.orders.v.length === 0) {\n      sb.push('[a]');\n    } else {\n      if (this.orders.not) {\n        sb.push('!');\n      }\n\n      sb.push('[');\n      sb.push(this.orders.v.join(','));\n      sb.push(']');\n    }\n\n    if (this.stereo) {\n      attributes.push((this.stereo.not ? '!' : '') + '@=' + this.stereo.v);\n    }\n\n    if (this.aromatic) {\n      attributes.push((this.aromatic.not ? '!' : '') + 'A');\n    }\n\n    if (this.ringCount) {\n      attributes.push((this.ringCount.not ? '!' : '') + 'R=' + this.outputRange(this.ringCount.v));\n    }\n  }\n\n  if (attributes.length > 0) {\n    sb.push('(');\n    sb.push(attributes.join(','));\n    sb.push(')');\n  }\n\n  return sb.join('');\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/structures/Query.js\n");

/***/ }),

/***/ "./src/ChemDoodle/structures/Queue.js":
/*!********************************************!*\
  !*** ./src/ChemDoodle/structures/Queue.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Queue; });\n// This is a more efficient Queue implementation other than using Array.shift() on each dequeue, which is very expensive\n// this is 2-3x faster\n\n/*\n  * Creates a new Queue. A Queue is a first-in-first-out (FIFO) data\n  * structure. Functions of the Queue object allow elements to be\n  * enthis.queued and dethis.queued, the first element to be obtained without\n  * dequeuing, and for the current size of the Queue and empty/non-empty\n  * status to be obtained.\n  */\nfunction Queue() {\n  // the list of elements, initialised to the empty array\n  this.queue = [];\n}\n;\nvar _ = Queue.prototype; // the amount of space at the front of the this.queue, initialised to zero\n\n_.queueSpace = 0;\n/*\n  * Returns the size of this Queue. The size of a Queue is equal to the\n  * number of elements that have been enthis.queued minus the number of\n  * elements that have been dethis.queued.\n  */\n\n_.getSize = function () {\n  // return the number of elements in the this.queue\n  return this.queue.length - this.queueSpace;\n};\n/*\n  * Returns true if this Queue is empty, and false otherwise. A Queue is\n  * empty if the number of elements that have been enthis.queued equals the\n  * number of elements that have been dethis.queued.\n  */\n\n\n_.isEmpty = function () {\n  // return true if the this.queue is empty, and false otherwise\n  return this.queue.length === 0;\n};\n/*\n  * Enthis.queues the specified element in this Queue. The parameter is:\n  * \n  * element - the element to enthis.queue\n  */\n\n\n_.enqueue = function (element) {\n  this.queue.push(element);\n};\n/*\n  * Dethis.queues an element from this Queue. The oldest element in this\n  * Queue is removed and returned. If this Queue is empty then undefined is\n  * returned.\n  */\n\n\n_.dequeue = function () {\n  // initialise the element to return to be undefined\n  var element; // check whether the this.queue is empty\n\n  if (this.queue.length) {\n    // fetch the oldest element in the this.queue\n    element = this.queue[this.queueSpace]; // update the amount of space and check whether a shift should\n    // occur\n\n    if (++this.queueSpace * 2 >= this.queue.length) {\n      // set the this.queue equal to the non-empty portion of the\n      // this.queue\n      this.queue = this.queue.slice(this.queueSpace); // reset the amount of space at the front of the this.queue\n\n      this.queueSpace = 0;\n    }\n  } // return the removed element\n\n\n  return element;\n};\n/*\n  * Returns the oldest element in this Queue. If this Queue is empty then\n  * undefined is returned. This function returns the same value as the\n  * dethis.queue function, but does not remove the returned element from this\n  * Queue.\n  */\n\n\n_.getOldestElement = function () {\n  // initialise the element to return to be undefined\n  var element; // if the this.queue is not element then fetch the oldest element in the\n  // this.queue\n\n  if (this.queue.length) {\n    element = this.queue[this.queueSpace];\n  } // return the oldest element\n\n\n  return element;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvc3RydWN0dXJlcy9RdWV1ZS5qcz8wYmVhIl0sIm5hbWVzIjpbIlF1ZXVlIiwicXVldWUiLCJfIiwicHJvdG90eXBlIiwicXVldWVTcGFjZSIsImdldFNpemUiLCJsZW5ndGgiLCJpc0VtcHR5IiwiZW5xdWV1ZSIsImVsZW1lbnQiLCJwdXNoIiwiZGVxdWV1ZSIsInNsaWNlIiwiZ2V0T2xkZXN0RWxlbWVudCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUFPZSxTQUFTQSxLQUFULEdBQWlCO0FBQzlCO0FBQ0EsT0FBS0MsS0FBTCxHQUFhLEVBQWI7QUFDRDtBQUFBO0FBQ0QsSUFBSUMsQ0FBQyxHQUFHRixLQUFLLENBQUNHLFNBQWQsQyxDQUVBOztBQUNBRCxDQUFDLENBQUNFLFVBQUYsR0FBZSxDQUFmO0FBRUE7Ozs7OztBQUtBRixDQUFDLENBQUNHLE9BQUYsR0FBWSxZQUFXO0FBRXJCO0FBQ0EsU0FBTyxLQUFLSixLQUFMLENBQVdLLE1BQVgsR0FBb0IsS0FBS0YsVUFBaEM7QUFFRCxDQUxEO0FBT0E7Ozs7Ozs7QUFLQUYsQ0FBQyxDQUFDSyxPQUFGLEdBQVksWUFBVztBQUVyQjtBQUNBLFNBQU8sS0FBS04sS0FBTCxDQUFXSyxNQUFYLEtBQXNCLENBQTdCO0FBRUQsQ0FMRDtBQU9BOzs7Ozs7O0FBS0FKLENBQUMsQ0FBQ00sT0FBRixHQUFZLFVBQVNDLE9BQVQsRUFBa0I7QUFDNUIsT0FBS1IsS0FBTCxDQUFXUyxJQUFYLENBQWdCRCxPQUFoQjtBQUNELENBRkQ7QUFJQTs7Ozs7OztBQUtBUCxDQUFDLENBQUNTLE9BQUYsR0FBWSxZQUFXO0FBRXJCO0FBQ0EsTUFBSUYsT0FBSixDQUhxQixDQUtyQjs7QUFDQSxNQUFJLEtBQUtSLEtBQUwsQ0FBV0ssTUFBZixFQUF1QjtBQUVyQjtBQUNBRyxXQUFPLEdBQUcsS0FBS1IsS0FBTCxDQUFXLEtBQUtHLFVBQWhCLENBQVYsQ0FIcUIsQ0FLckI7QUFDQTs7QUFDQSxRQUFJLEVBQUUsS0FBS0EsVUFBUCxHQUFvQixDQUFwQixJQUF5QixLQUFLSCxLQUFMLENBQVdLLE1BQXhDLEVBQWdEO0FBRTlDO0FBQ0E7QUFDQSxXQUFLTCxLQUFMLEdBQWEsS0FBS0EsS0FBTCxDQUFXVyxLQUFYLENBQWlCLEtBQUtSLFVBQXRCLENBQWIsQ0FKOEMsQ0FNOUM7O0FBQ0EsV0FBS0EsVUFBTCxHQUFrQixDQUFsQjtBQUVEO0FBRUYsR0F4Qm9CLENBMEJyQjs7O0FBQ0EsU0FBT0ssT0FBUDtBQUVELENBN0JEO0FBK0JBOzs7Ozs7OztBQU1BUCxDQUFDLENBQUNXLGdCQUFGLEdBQXFCLFlBQVc7QUFFOUI7QUFDQSxNQUFJSixPQUFKLENBSDhCLENBSzlCO0FBQ0E7O0FBQ0EsTUFBSSxLQUFLUixLQUFMLENBQVdLLE1BQWYsRUFBdUI7QUFDckJHLFdBQU8sR0FBRyxLQUFLUixLQUFMLENBQVcsS0FBS0csVUFBaEIsQ0FBVjtBQUNELEdBVDZCLENBVzlCOzs7QUFDQSxTQUFPSyxPQUFQO0FBQ0QsQ0FiRCIsImZpbGUiOiIuL3NyYy9DaGVtRG9vZGxlL3N0cnVjdHVyZXMvUXVldWUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGlzIGEgbW9yZSBlZmZpY2llbnQgUXVldWUgaW1wbGVtZW50YXRpb24gb3RoZXIgdGhhbiB1c2luZyBBcnJheS5zaGlmdCgpIG9uIGVhY2ggZGVxdWV1ZSwgd2hpY2ggaXMgdmVyeSBleHBlbnNpdmVcbi8vIHRoaXMgaXMgMi0zeCBmYXN0ZXJcblxuLypcbiAgKiBDcmVhdGVzIGEgbmV3IFF1ZXVlLiBBIFF1ZXVlIGlzIGEgZmlyc3QtaW4tZmlyc3Qtb3V0IChGSUZPKSBkYXRhXG4gICogc3RydWN0dXJlLiBGdW5jdGlvbnMgb2YgdGhlIFF1ZXVlIG9iamVjdCBhbGxvdyBlbGVtZW50cyB0byBiZVxuICAqIGVudGhpcy5xdWV1ZWQgYW5kIGRldGhpcy5xdWV1ZWQsIHRoZSBmaXJzdCBlbGVtZW50IHRvIGJlIG9idGFpbmVkIHdpdGhvdXRcbiAgKiBkZXF1ZXVpbmcsIGFuZCBmb3IgdGhlIGN1cnJlbnQgc2l6ZSBvZiB0aGUgUXVldWUgYW5kIGVtcHR5L25vbi1lbXB0eVxuICAqIHN0YXR1cyB0byBiZSBvYnRhaW5lZC5cbiAgKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFF1ZXVlKCkge1xuICAvLyB0aGUgbGlzdCBvZiBlbGVtZW50cywgaW5pdGlhbGlzZWQgdG8gdGhlIGVtcHR5IGFycmF5XG4gIHRoaXMucXVldWUgPSBbXTtcbn07XG52YXIgXyA9IFF1ZXVlLnByb3RvdHlwZTtcblxuLy8gdGhlIGFtb3VudCBvZiBzcGFjZSBhdCB0aGUgZnJvbnQgb2YgdGhlIHRoaXMucXVldWUsIGluaXRpYWxpc2VkIHRvIHplcm9cbl8ucXVldWVTcGFjZSA9IDA7XG5cbi8qXG4gICogUmV0dXJucyB0aGUgc2l6ZSBvZiB0aGlzIFF1ZXVlLiBUaGUgc2l6ZSBvZiBhIFF1ZXVlIGlzIGVxdWFsIHRvIHRoZVxuICAqIG51bWJlciBvZiBlbGVtZW50cyB0aGF0IGhhdmUgYmVlbiBlbnRoaXMucXVldWVkIG1pbnVzIHRoZSBudW1iZXIgb2ZcbiAgKiBlbGVtZW50cyB0aGF0IGhhdmUgYmVlbiBkZXRoaXMucXVldWVkLlxuICAqL1xuXy5nZXRTaXplID0gZnVuY3Rpb24oKSB7XG5cbiAgLy8gcmV0dXJuIHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gdGhlIHRoaXMucXVldWVcbiAgcmV0dXJuIHRoaXMucXVldWUubGVuZ3RoIC0gdGhpcy5xdWV1ZVNwYWNlO1xuXG59O1xuXG4vKlxuICAqIFJldHVybnMgdHJ1ZSBpZiB0aGlzIFF1ZXVlIGlzIGVtcHR5LCBhbmQgZmFsc2Ugb3RoZXJ3aXNlLiBBIFF1ZXVlIGlzXG4gICogZW1wdHkgaWYgdGhlIG51bWJlciBvZiBlbGVtZW50cyB0aGF0IGhhdmUgYmVlbiBlbnRoaXMucXVldWVkIGVxdWFscyB0aGVcbiAgKiBudW1iZXIgb2YgZWxlbWVudHMgdGhhdCBoYXZlIGJlZW4gZGV0aGlzLnF1ZXVlZC5cbiAgKi9cbl8uaXNFbXB0eSA9IGZ1bmN0aW9uKCkge1xuXG4gIC8vIHJldHVybiB0cnVlIGlmIHRoZSB0aGlzLnF1ZXVlIGlzIGVtcHR5LCBhbmQgZmFsc2Ugb3RoZXJ3aXNlXG4gIHJldHVybiB0aGlzLnF1ZXVlLmxlbmd0aCA9PT0gMDtcblxufTtcblxuLypcbiAgKiBFbnRoaXMucXVldWVzIHRoZSBzcGVjaWZpZWQgZWxlbWVudCBpbiB0aGlzIFF1ZXVlLiBUaGUgcGFyYW1ldGVyIGlzOlxuICAqIFxuICAqIGVsZW1lbnQgLSB0aGUgZWxlbWVudCB0byBlbnRoaXMucXVldWVcbiAgKi9cbl8uZW5xdWV1ZSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgdGhpcy5xdWV1ZS5wdXNoKGVsZW1lbnQpO1xufTtcblxuLypcbiAgKiBEZXRoaXMucXVldWVzIGFuIGVsZW1lbnQgZnJvbSB0aGlzIFF1ZXVlLiBUaGUgb2xkZXN0IGVsZW1lbnQgaW4gdGhpc1xuICAqIFF1ZXVlIGlzIHJlbW92ZWQgYW5kIHJldHVybmVkLiBJZiB0aGlzIFF1ZXVlIGlzIGVtcHR5IHRoZW4gdW5kZWZpbmVkIGlzXG4gICogcmV0dXJuZWQuXG4gICovXG5fLmRlcXVldWUgPSBmdW5jdGlvbigpIHtcblxuICAvLyBpbml0aWFsaXNlIHRoZSBlbGVtZW50IHRvIHJldHVybiB0byBiZSB1bmRlZmluZWRcbiAgdmFyIGVsZW1lbnQ7XG5cbiAgLy8gY2hlY2sgd2hldGhlciB0aGUgdGhpcy5xdWV1ZSBpcyBlbXB0eVxuICBpZiAodGhpcy5xdWV1ZS5sZW5ndGgpIHtcblxuICAgIC8vIGZldGNoIHRoZSBvbGRlc3QgZWxlbWVudCBpbiB0aGUgdGhpcy5xdWV1ZVxuICAgIGVsZW1lbnQgPSB0aGlzLnF1ZXVlW3RoaXMucXVldWVTcGFjZV07XG5cbiAgICAvLyB1cGRhdGUgdGhlIGFtb3VudCBvZiBzcGFjZSBhbmQgY2hlY2sgd2hldGhlciBhIHNoaWZ0IHNob3VsZFxuICAgIC8vIG9jY3VyXG4gICAgaWYgKCsrdGhpcy5xdWV1ZVNwYWNlICogMiA+PSB0aGlzLnF1ZXVlLmxlbmd0aCkge1xuXG4gICAgICAvLyBzZXQgdGhlIHRoaXMucXVldWUgZXF1YWwgdG8gdGhlIG5vbi1lbXB0eSBwb3J0aW9uIG9mIHRoZVxuICAgICAgLy8gdGhpcy5xdWV1ZVxuICAgICAgdGhpcy5xdWV1ZSA9IHRoaXMucXVldWUuc2xpY2UodGhpcy5xdWV1ZVNwYWNlKTtcblxuICAgICAgLy8gcmVzZXQgdGhlIGFtb3VudCBvZiBzcGFjZSBhdCB0aGUgZnJvbnQgb2YgdGhlIHRoaXMucXVldWVcbiAgICAgIHRoaXMucXVldWVTcGFjZSA9IDA7XG5cbiAgICB9XG5cbiAgfVxuXG4gIC8vIHJldHVybiB0aGUgcmVtb3ZlZCBlbGVtZW50XG4gIHJldHVybiBlbGVtZW50O1xuXG59O1xuXG4vKlxuICAqIFJldHVybnMgdGhlIG9sZGVzdCBlbGVtZW50IGluIHRoaXMgUXVldWUuIElmIHRoaXMgUXVldWUgaXMgZW1wdHkgdGhlblxuICAqIHVuZGVmaW5lZCBpcyByZXR1cm5lZC4gVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBzYW1lIHZhbHVlIGFzIHRoZVxuICAqIGRldGhpcy5xdWV1ZSBmdW5jdGlvbiwgYnV0IGRvZXMgbm90IHJlbW92ZSB0aGUgcmV0dXJuZWQgZWxlbWVudCBmcm9tIHRoaXNcbiAgKiBRdWV1ZS5cbiAgKi9cbl8uZ2V0T2xkZXN0RWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuXG4gIC8vIGluaXRpYWxpc2UgdGhlIGVsZW1lbnQgdG8gcmV0dXJuIHRvIGJlIHVuZGVmaW5lZFxuICB2YXIgZWxlbWVudDtcblxuICAvLyBpZiB0aGUgdGhpcy5xdWV1ZSBpcyBub3QgZWxlbWVudCB0aGVuIGZldGNoIHRoZSBvbGRlc3QgZWxlbWVudCBpbiB0aGVcbiAgLy8gdGhpcy5xdWV1ZVxuICBpZiAodGhpcy5xdWV1ZS5sZW5ndGgpIHtcbiAgICBlbGVtZW50ID0gdGhpcy5xdWV1ZVt0aGlzLnF1ZXVlU3BhY2VdO1xuICB9XG5cbiAgLy8gcmV0dXJuIHRoZSBvbGRlc3QgZWxlbWVudFxuICByZXR1cm4gZWxlbWVudDtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ChemDoodle/structures/Queue.js\n");

/***/ }),

/***/ "./src/ChemDoodle/structures/Residue.js":
/*!**********************************************!*\
  !*** ./src/ChemDoodle/structures/Residue.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Residue; });\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib */ \"./src/ChemDoodle/lib/index.js\");\n/* harmony import */ var _Atom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Atom */ \"./src/ChemDoodle/structures/Atom.js\");\n\n\nvar m = Math;\nvar SB;\nvar lastVerticalResolution = -1;\n\nfunction setupMatrices(verticalResolution) {\n  var n2 = verticalResolution * verticalResolution;\n  var n3 = verticalResolution * verticalResolution * verticalResolution;\n  var S = [6 / n3, 0, 0, 0, 6 / n3, 2 / n2, 0, 0, 1 / n3, 1 / n2, 1 / verticalResolution, 0, 0, 0, 0, 1];\n  var Bm = [-1 / 6, 1 / 2, -1 / 2, 1 / 6, 1 / 2, -1, 1 / 2, 0, -1 / 2, 0, 1 / 2, 0, 1 / 6, 2 / 3, 1 / 6, 0];\n  SB = _lib__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].multiply(Bm, S, []);\n  lastVerticalResolution = verticalResolution;\n}\n\nfunction Residue(resSeq) {\n  // number of vertical slashes per segment\n  this.resSeq = resSeq;\n}\n;\nvar _ = Residue.prototype;\n\n_.setup = function (nextAlpha, horizontalResolution) {\n  this.horizontalResolution = horizontalResolution; // define plane\n\n  var A = [nextAlpha.x - this.cp1.x, nextAlpha.y - this.cp1.y, nextAlpha.z - this.cp1.z];\n  var B = [this.cp2.x - this.cp1.x, this.cp2.y - this.cp1.y, this.cp2.z - this.cp1.z];\n  var C = _lib__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].cross(A, B, []);\n  this.D = _lib__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].cross(C, A, []);\n  _lib__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].normalize(C);\n  _lib__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].normalize(this.D); // generate guide coordinates\n  // guides for the narrow parts of the ribbons\n\n  this.guidePointsSmall = []; // guides for the wide parts of the ribbons\n\n  this.guidePointsLarge = []; // guides for the ribbon part of helix as cylinder model\n\n  var P = [(nextAlpha.x + this.cp1.x) / 2, (nextAlpha.y + this.cp1.y) / 2, (nextAlpha.z + this.cp1.z) / 2];\n\n  if (this.helix) {\n    // expand helices\n    _lib__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].scale(C, 1.5);\n    _lib__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].add(P, C);\n  }\n\n  this.guidePointsSmall[0] = new _Atom__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('', P[0] - this.D[0] / 2, P[1] - this.D[1] / 2, P[2] - this.D[2] / 2);\n\n  for (var i = 1; i < horizontalResolution; i++) {\n    this.guidePointsSmall[i] = new _Atom__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('', this.guidePointsSmall[0].x + this.D[0] * i / horizontalResolution, this.guidePointsSmall[0].y + this.D[1] * i / horizontalResolution, this.guidePointsSmall[0].z + this.D[2] * i / horizontalResolution);\n  }\n\n  _lib__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].scale(this.D, 4);\n  this.guidePointsLarge[0] = new _Atom__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('', P[0] - this.D[0] / 2, P[1] - this.D[1] / 2, P[2] - this.D[2] / 2);\n\n  for (var i = 1; i < horizontalResolution; i++) {\n    this.guidePointsLarge[i] = new _Atom__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('', this.guidePointsLarge[0].x + this.D[0] * i / horizontalResolution, this.guidePointsLarge[0].y + this.D[1] * i / horizontalResolution, this.guidePointsLarge[0].z + this.D[2] * i / horizontalResolution);\n  }\n};\n\n_.getGuidePointSet = function (type) {\n  if (type === 0) {\n    return this.helix || this.sheet ? this.guidePointsLarge : this.guidePointsSmall;\n  } else if (type === 1) {\n    return this.guidePointsSmall;\n  } else if (type === 2) {\n    return this.guidePointsLarge;\n  }\n};\n\n_.computeLineSegments = function (b2, b1, a1, doCartoon, verticalResolution) {\n  this.setVerticalResolution(verticalResolution);\n  this.split = a1.helix !== this.helix || a1.sheet !== this.sheet;\n  this.lineSegments = this.innerCompute(0, b2, b1, a1, false, verticalResolution);\n\n  if (doCartoon) {\n    this.lineSegmentsCartoon = this.innerCompute(this.helix || this.sheet ? 2 : 1, b2, b1, a1, true, verticalResolution);\n  }\n};\n\n_.innerCompute = function (set, b2, b1, a1, useArrows, verticalResolution) {\n  var segments = [];\n  var use = this.getGuidePointSet(set);\n  var useb2 = b2.getGuidePointSet(set);\n  var useb1 = b1.getGuidePointSet(set);\n  var usea1 = a1.getGuidePointSet(set);\n\n  for (var l = 0, ll = use.length; l < ll; l++) {\n    var G = [useb2[l].x, useb2[l].y, useb2[l].z, 1, useb1[l].x, useb1[l].y, useb1[l].z, 1, use[l].x, use[l].y, use[l].z, 1, usea1[l].x, usea1[l].y, usea1[l].z, 1];\n    var M = _lib__WEBPACK_IMPORTED_MODULE_0__[\"mat4\"].multiply(G, SB, []);\n    var strand = [];\n\n    for (var k = 0; k < verticalResolution; k++) {\n      for (var i = 3; i > 0; i--) {\n        for (var j = 0; j < 4; j++) {\n          M[i * 4 + j] += M[(i - 1) * 4 + j];\n        }\n      }\n\n      strand[k] = new _Atom__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('', M[12] / M[15], M[13] / M[15], M[14] / M[15]);\n    }\n\n    segments[l] = strand;\n  }\n\n  if (useArrows && this.arrow) {\n    for (var i = 0, ii = verticalResolution; i < ii; i++) {\n      var mult = 1.5 - 1.3 * i / verticalResolution;\n      var mid = m.floor(this.horizontalResolution / 2);\n      var center = segments[mid];\n\n      for (var j = 0, jj = segments.length; j < jj; j++) {\n        if (j !== mid) {\n          var o = center[i];\n          var f = segments[j][i];\n          var vec = [f.x - o.x, f.y - o.y, f.z - o.z];\n          _lib__WEBPACK_IMPORTED_MODULE_0__[\"vec3\"].scale(vec, mult);\n          f.x = o.x + vec[0];\n          f.y = o.y + vec[1];\n          f.z = o.z + vec[2];\n        }\n      }\n    }\n  }\n\n  return segments;\n};\n\n_.setVerticalResolution = function (verticalResolution) {\n  if (verticalResolution !== lastVerticalResolution) {\n    setupMatrices(verticalResolution);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/structures/Residue.js\n");

/***/ }),

/***/ "./src/ChemDoodle/structures/Ring.js":
/*!*******************************************!*\
  !*** ./src/ChemDoodle/structures/Ring.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Ring; });\n/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Point */ \"./src/ChemDoodle/structures/Point.js\");\n\nvar m = Math;\nfunction Ring() {\n  this.atoms = [];\n  this.bonds = [];\n}\n;\nvar _ = Ring.prototype;\n_.center = undefined;\n\n_.setupBonds = function () {\n  for (var i = 0, ii = this.bonds.length; i < ii; i++) {\n    this.bonds[i].ring = this;\n  }\n\n  this.center = this.getCenter();\n};\n\n_.getCenter = function () {\n  var minX = Infinity,\n      minY = Infinity,\n      maxX = -Infinity,\n      maxY = -Infinity;\n\n  for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n    minX = m.min(this.atoms[i].x, minX);\n    minY = m.min(this.atoms[i].y, minY);\n    maxX = m.max(this.atoms[i].x, maxX);\n    maxY = m.max(this.atoms[i].y, maxY);\n  }\n\n  return new _Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"]((maxX + minX) / 2, (maxY + minY) / 2);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvc3RydWN0dXJlcy9SaW5nLmpzP2IyNzEiXSwibmFtZXMiOlsibSIsIk1hdGgiLCJSaW5nIiwiYXRvbXMiLCJib25kcyIsIl8iLCJwcm90b3R5cGUiLCJjZW50ZXIiLCJ1bmRlZmluZWQiLCJzZXR1cEJvbmRzIiwiaSIsImlpIiwibGVuZ3RoIiwicmluZyIsImdldENlbnRlciIsIm1pblgiLCJJbmZpbml0eSIsIm1pblkiLCJtYXhYIiwibWF4WSIsIm1pbiIsIngiLCJ5IiwibWF4IiwiUG9pbnQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0EsSUFBTUEsQ0FBQyxHQUFHQyxJQUFWO0FBRWUsU0FBU0MsSUFBVCxHQUFnQjtBQUM3QixPQUFLQyxLQUFMLEdBQWEsRUFBYjtBQUNBLE9BQUtDLEtBQUwsR0FBYSxFQUFiO0FBQ0Q7QUFBQTtBQUNELElBQUlDLENBQUMsR0FBR0gsSUFBSSxDQUFDSSxTQUFiO0FBQ0FELENBQUMsQ0FBQ0UsTUFBRixHQUFXQyxTQUFYOztBQUNBSCxDQUFDLENBQUNJLFVBQUYsR0FBZSxZQUFXO0FBQ3hCLE9BQU0sSUFBSUMsQ0FBQyxHQUFHLENBQVIsRUFBV0MsRUFBRSxHQUFHLEtBQUtQLEtBQUwsQ0FBV1EsTUFBakMsRUFBeUNGLENBQUMsR0FBR0MsRUFBN0MsRUFBaURELENBQUMsRUFBbEQsRUFBc0Q7QUFDcEQsU0FBS04sS0FBTCxDQUFXTSxDQUFYLEVBQWNHLElBQWQsR0FBcUIsSUFBckI7QUFDRDs7QUFDRCxPQUFLTixNQUFMLEdBQWMsS0FBS08sU0FBTCxFQUFkO0FBQ0QsQ0FMRDs7QUFNQVQsQ0FBQyxDQUFDUyxTQUFGLEdBQWMsWUFBVztBQUN2QixNQUFJQyxJQUFJLEdBQUdDLFFBQVg7QUFBQSxNQUFxQkMsSUFBSSxHQUFHRCxRQUE1QjtBQUFBLE1BQXNDRSxJQUFJLEdBQUcsQ0FBQ0YsUUFBOUM7QUFBQSxNQUF3REcsSUFBSSxHQUFHLENBQUNILFFBQWhFOztBQUNBLE9BQU0sSUFBSU4sQ0FBQyxHQUFHLENBQVIsRUFBV0MsRUFBRSxHQUFHLEtBQUtSLEtBQUwsQ0FBV1MsTUFBakMsRUFBeUNGLENBQUMsR0FBR0MsRUFBN0MsRUFBaURELENBQUMsRUFBbEQsRUFBc0Q7QUFDcERLLFFBQUksR0FBR2YsQ0FBQyxDQUFDb0IsR0FBRixDQUFNLEtBQUtqQixLQUFMLENBQVdPLENBQVgsRUFBY1csQ0FBcEIsRUFBdUJOLElBQXZCLENBQVA7QUFDQUUsUUFBSSxHQUFHakIsQ0FBQyxDQUFDb0IsR0FBRixDQUFNLEtBQUtqQixLQUFMLENBQVdPLENBQVgsRUFBY1ksQ0FBcEIsRUFBdUJMLElBQXZCLENBQVA7QUFDQUMsUUFBSSxHQUFHbEIsQ0FBQyxDQUFDdUIsR0FBRixDQUFNLEtBQUtwQixLQUFMLENBQVdPLENBQVgsRUFBY1csQ0FBcEIsRUFBdUJILElBQXZCLENBQVA7QUFDQUMsUUFBSSxHQUFHbkIsQ0FBQyxDQUFDdUIsR0FBRixDQUFNLEtBQUtwQixLQUFMLENBQVdPLENBQVgsRUFBY1ksQ0FBcEIsRUFBdUJILElBQXZCLENBQVA7QUFDRDs7QUFDRCxTQUFPLElBQUlLLDhDQUFKLENBQVUsQ0FBQ04sSUFBSSxHQUFHSCxJQUFSLElBQWdCLENBQTFCLEVBQTZCLENBQUNJLElBQUksR0FBR0YsSUFBUixJQUFnQixDQUE3QyxDQUFQO0FBQ0QsQ0FURCIsImZpbGUiOiIuL3NyYy9DaGVtRG9vZGxlL3N0cnVjdHVyZXMvUmluZy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQb2ludCBmcm9tICcuL1BvaW50JztcbmNvbnN0IG0gPSBNYXRoO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBSaW5nKCkge1xuICB0aGlzLmF0b21zID0gW107XG4gIHRoaXMuYm9uZHMgPSBbXTtcbn07XG52YXIgXyA9IFJpbmcucHJvdG90eXBlO1xuXy5jZW50ZXIgPSB1bmRlZmluZWQ7XG5fLnNldHVwQm9uZHMgPSBmdW5jdGlvbigpIHtcbiAgZm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuYm9uZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgIHRoaXMuYm9uZHNbaV0ucmluZyA9IHRoaXM7XG4gIH1cbiAgdGhpcy5jZW50ZXIgPSB0aGlzLmdldENlbnRlcigpO1xufTtcbl8uZ2V0Q2VudGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBtaW5YID0gSW5maW5pdHksIG1pblkgPSBJbmZpbml0eSwgbWF4WCA9IC1JbmZpbml0eSwgbWF4WSA9IC1JbmZpbml0eTtcbiAgZm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMuYXRvbXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgIG1pblggPSBtLm1pbih0aGlzLmF0b21zW2ldLngsIG1pblgpO1xuICAgIG1pblkgPSBtLm1pbih0aGlzLmF0b21zW2ldLnksIG1pblkpO1xuICAgIG1heFggPSBtLm1heCh0aGlzLmF0b21zW2ldLngsIG1heFgpO1xuICAgIG1heFkgPSBtLm1heCh0aGlzLmF0b21zW2ldLnksIG1heFkpO1xuICB9XG4gIHJldHVybiBuZXcgUG9pbnQoKG1heFggKyBtaW5YKSAvIDIsIChtYXhZICsgbWluWSkgLyAyKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ChemDoodle/structures/Ring.js\n");

/***/ }),

/***/ "./src/ChemDoodle/structures/Spectrum.js":
/*!***********************************************!*\
  !*** ./src/ChemDoodle/structures/Spectrum.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Spectrum; });\n/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../extensions */ \"./src/ChemDoodle/extensions/index.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../math */ \"./src/ChemDoodle/math/index.js\");\n/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Point */ \"./src/ChemDoodle/structures/Point.js\");\n\n\n\nvar m = Math;\nfunction Spectrum() {\n  this.data = [];\n  this.metadata = [];\n  this.dataDisplay = [];\n  this.memory = {\n    offsetTop: 0,\n    offsetLeft: 0,\n    offsetBottom: 0,\n    flipXAxis: false,\n    scale: 1,\n    width: 0,\n    height: 0\n  };\n}\n;\nvar _ = Spectrum.prototype;\n_.title = undefined;\n_.xUnit = undefined;\n_.yUnit = undefined;\n_.continuous = true;\n_.integrationSensitivity = 0.01;\n\n_.draw = function (ctx, specs, width, height) {\n  if (this.specs) {\n    specs = this.specs;\n  }\n\n  var offsetTop = 5;\n  var offsetLeft = 0;\n  var offsetBottom = 0; // draw decorations\n\n  ctx.fillStyle = specs.text_color;\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'alphabetic';\n  ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_0__[\"getFontString\"](specs.text_font_size, specs.text_font_families);\n\n  if (this.xUnit) {\n    offsetBottom += specs.text_font_size;\n    ctx.fillText(this.xUnit, width / 2, height - 2);\n  }\n\n  if (this.yUnit && specs.plots_showYAxis) {\n    offsetLeft += specs.text_font_size;\n    ctx.save();\n    ctx.translate(specs.text_font_size, height / 2);\n    ctx.rotate(-m.PI / 2);\n    ctx.fillText(this.yUnit, 0, 0);\n    ctx.restore();\n  }\n\n  if (this.title) {\n    offsetTop += specs.text_font_size;\n    ctx.fillText(this.title, width / 2, specs.text_font_size);\n  } // draw ticks\n\n\n  ctx.lineCap = 'square';\n  offsetBottom += 5 + specs.text_font_size;\n\n  if (specs.plots_showYAxis) {\n    offsetLeft += 5 + ctx.measureText('1000').width;\n  }\n\n  if (specs.plots_showGrid) {\n    ctx.strokeStyle = specs.plots_gridColor;\n    ctx.lineWidth = specs.plots_gridLineWidth;\n    ctx.strokeRect(offsetLeft, offsetTop, width - offsetLeft, height - offsetBottom - offsetTop);\n  }\n\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'top';\n  var span = this.maxX - this.minX;\n  var t = span / 100;\n  var major = .001;\n\n  while (major < t || span / major > 25) {\n    major *= 10;\n  }\n\n  var counter = 0;\n  var overlapX = specs.plots_flipXAxis ? width : 0;\n\n  for (var i = m.round(this.minX / major) * major; i <= this.maxX; i += major / 2) {\n    var x = this.getTransformedX(i, specs, width, offsetLeft);\n\n    if (x > offsetLeft) {\n      ctx.strokeStyle = 'black';\n      ctx.lineWidth = 1;\n\n      if (counter % 2 === 0) {\n        ctx.beginPath();\n        ctx.moveTo(x, height - offsetBottom);\n        ctx.lineTo(x, height - offsetBottom + 2);\n        ctx.stroke();\n        var s = i.toFixed(5);\n\n        while (s.charAt(s.length - 1) === '0') {\n          s = s.substring(0, s.length - 1);\n        }\n\n        if (s.charAt(s.length - 1) === '.') {\n          s = s.substring(0, s.length - 1);\n        } // do this to avoid label overlap\n\n\n        var numWidth = ctx.measureText(s).width;\n\n        if (specs.plots_flipXAxis) {\n          numWidth *= -1;\n        }\n\n        var ls = x - numWidth / 2;\n\n        if (specs.plots_flipXAxis ? ls < overlapX : ls > overlapX) {\n          ctx.fillText(s, x, height - offsetBottom + 2);\n          overlapX = x + numWidth / 2;\n        }\n\n        if (specs.plots_showGrid) {\n          ctx.strokeStyle = specs.plots_gridColor;\n          ctx.lineWidth = specs.plots_gridLineWidth;\n          ctx.beginPath();\n          ctx.moveTo(x, height - offsetBottom);\n          ctx.lineTo(x, offsetTop);\n          ctx.stroke();\n        }\n      } else {\n        ctx.beginPath();\n        ctx.moveTo(x, height - offsetBottom);\n        ctx.lineTo(x, height - offsetBottom + 2);\n        ctx.stroke();\n      }\n    }\n\n    counter++;\n  }\n\n  if (specs.plots_showYAxis || specs.plots_showGrid) {\n    var spany = 1 / specs.scale;\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'middle';\n\n    for (var i = 0; i <= 10; i++) {\n      var yval = spany / 10 * i;\n      var y = offsetTop + (height - offsetBottom - offsetTop) * (1 - yval * specs.scale);\n\n      if (specs.plots_showGrid) {\n        ctx.strokeStyle = specs.plots_gridColor;\n        ctx.lineWidth = specs.plots_gridLineWidth;\n        ctx.beginPath();\n        ctx.moveTo(offsetLeft, y);\n        ctx.lineTo(width, y);\n        ctx.stroke();\n      }\n\n      if (specs.plots_showYAxis) {\n        ctx.strokeStyle = 'black';\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.moveTo(offsetLeft, y);\n        ctx.lineTo(offsetLeft - 3, y);\n        ctx.stroke();\n        var val = yval * 100;\n        var cutoff = m.max(0, 3 - m.floor(val).toString().length);\n        var s = val.toFixed(cutoff);\n\n        if (cutoff > 0) {\n          while (s.charAt(s.length - 1) === '0') {\n            s = s.substring(0, s.length - 1);\n          }\n        }\n\n        if (s.charAt(s.length - 1) === '.') {\n          s = s.substring(0, s.length - 1);\n        }\n\n        ctx.fillText(s, offsetLeft - 3, y);\n      }\n    }\n  } // draw axes\n\n\n  ctx.strokeStyle = 'black';\n  ctx.lineWidth = 1;\n  ctx.beginPath(); // draw x axis\n\n  ctx.moveTo(width, height - offsetBottom);\n  ctx.lineTo(offsetLeft, height - offsetBottom); // draw y axis\n\n  if (specs.plots_showYAxis) {\n    ctx.lineTo(offsetLeft, offsetTop);\n  }\n\n  ctx.stroke(); // draw metadata\n\n  if (this.dataDisplay.length > 0) {\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'top';\n    var mcount = 0;\n\n    for (var i = 0, ii = this.dataDisplay.length; i < ii; i++) {\n      if (this.dataDisplay[i].value) {\n        ctx.fillText([this.dataDisplay[i].display, ': ', this.dataDisplay[i].value].join(''), offsetLeft + 10, offsetTop + 10 + mcount * (specs.text_font_size + 5));\n        mcount++;\n      } else if (this.dataDisplay[i].tag) {\n        for (var j = 0, jj = this.metadata.length; j < jj; j++) {\n          if (_extensions__WEBPACK_IMPORTED_MODULE_0__[\"stringStartsWith\"](this.metadata[j], this.dataDisplay[i].tag)) {\n            var draw = this.metadata[j];\n\n            if (this.dataDisplay[i].display) {\n              var index = this.metadata[j].indexOf('=');\n              draw = [this.dataDisplay[i].display, ': ', index > -1 ? this.metadata[j].substring(index + 2) : this.metadata[j]].join('');\n            }\n\n            ctx.fillText(draw, offsetLeft + 10, offsetTop + 10 + mcount * (specs.text_font_size + 5));\n            mcount++;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  this.drawPlot(ctx, specs, width, height, offsetTop, offsetLeft, offsetBottom);\n  this.memory.offsetTop = offsetTop;\n  this.memory.offsetLeft = offsetLeft;\n  this.memory.offsetBottom = offsetBottom;\n  this.memory.flipXAxis = specs.plots_flipXAxis;\n  this.memory.scale = specs.scale;\n  this.memory.width = width;\n  this.memory.height = height;\n};\n\n_.drawPlot = function (ctx, specs, width, height, offsetTop, offsetLeft, offsetBottom) {\n  if (this.specs) {\n    specs = this.specs;\n  }\n\n  ctx.strokeStyle = specs.plots_color;\n  ctx.lineWidth = specs.plots_width;\n  var integration = []; // clip the spectrum display bounds here to not draw over the axes\n  // we do this because we want to continue drawing segments to their natural ends to be accurate, but don't want to see them past the display area\n\n  ctx.save();\n  ctx.rect(offsetLeft, offsetTop, width - offsetLeft, height - offsetBottom - offsetTop);\n  ctx.clip();\n  ctx.beginPath();\n\n  if (this.continuous) {\n    var started = false;\n    var counter = 0;\n    var stop = false;\n\n    for (var i = 0, ii = this.data.length; i < ii; i++) {\n      var x = this.getTransformedX(this.data[i].x, specs, width, offsetLeft);\n      var xnext;\n\n      if (i < ii && !started && this.data[i + 1]) {\n        // see if you should render this first segment\n        xnext = this.getTransformedX(this.data[i + 1].x, specs, width, offsetLeft);\n      } // check xnext against undefined as it can be 0/1\n\n\n      if (x >= offsetLeft && x < width || xnext !== undefined && xnext >= offsetLeft && xnext < width) {\n        var y = this.getTransformedY(this.data[i].y, specs, height, offsetBottom, offsetTop);\n\n        if (specs.plots_showIntegration && m.abs(this.data[i].y) > this.integrationSensitivity) {\n          integration.push(new _Point__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.data[i].x, this.data[i].y));\n        }\n\n        if (!started) {\n          ctx.moveTo(x, y);\n          started = true;\n        }\n\n        ctx.lineTo(x, y);\n        counter++;\n\n        if (counter % 1000 === 0) {\n          // segment the path to avoid crashing safari on mac os x\n          ctx.stroke();\n          ctx.beginPath();\n          ctx.moveTo(x, y);\n        }\n\n        if (stop) {\n          break;\n        }\n      } else if (started) {\n        // render one more segment\n        stop = true;\n      }\n    }\n  } else {\n    for (var i = 0, ii = this.data.length; i < ii; i++) {\n      var x = this.getTransformedX(this.data[i].x, specs, width, offsetLeft);\n\n      if (x >= offsetLeft && x < width) {\n        ctx.moveTo(x, height - offsetBottom);\n        ctx.lineTo(x, this.getTransformedY(this.data[i].y, specs, height, offsetBottom, offsetTop));\n      }\n    }\n  }\n\n  ctx.stroke();\n\n  if (specs.plots_showIntegration && integration.length > 1) {\n    ctx.strokeStyle = specs.plots_integrationColor;\n    ctx.lineWidth = specs.plots_integrationLineWidth;\n    ctx.beginPath();\n    var ascending = integration[1].x > integration[0].x;\n    var max;\n\n    if (this.flipXAxis && !ascending || !this.flipXAxis && ascending) {\n      for (var i = integration.length - 2; i >= 0; i--) {\n        integration[i].y = integration[i].y + integration[i + 1].y;\n      }\n\n      max = integration[0].y;\n    } else {\n      for (var i = 1, ii = integration.length; i < ii; i++) {\n        integration[i].y = integration[i].y + integration[i - 1].y;\n      }\n\n      max = integration[integration.length - 1].y;\n    }\n\n    for (var i = 0, ii = integration.length; i < ii; i++) {\n      var x = this.getTransformedX(integration[i].x, specs, width, offsetLeft);\n      var y = this.getTransformedY(integration[i].y / specs.scale / max, specs, height, offsetBottom, offsetTop);\n\n      if (i === 0) {\n        ctx.moveTo(x, y);\n      } else {\n        ctx.lineTo(x, y);\n      }\n    }\n\n    ctx.stroke();\n  }\n\n  ctx.restore();\n};\n\n_.getTransformedY = function (y, specs, height, offsetBottom, offsetTop) {\n  return offsetTop + (height - offsetBottom - offsetTop) * (1 - y * specs.scale);\n};\n\n_.getInverseTransformedY = function (y) {\n  // can only be called after a render when memory is set, this\n  // function doesn't make sense without a render first anyway\n  return (1 - (y - this.memory.offsetTop) / (this.memory.height - this.memory.offsetBottom - this.memory.offsetTop)) / this.memory.scale * 100;\n};\n\n_.getTransformedX = function (x, specs, width, offsetLeft) {\n  var returning = offsetLeft + (x - this.minX) / (this.maxX - this.minX) * (width - offsetLeft);\n\n  if (specs.plots_flipXAxis) {\n    returning = width + offsetLeft - returning;\n  }\n\n  return returning;\n};\n\n_.getInverseTransformedX = function (x) {\n  // can only be called after a render when memory is set, this\n  // function doesn't make sense without a render first anyway\n  if (this.memory.flipXAxis) {\n    x = this.memory.width + this.memory.offsetLeft - x;\n  }\n\n  return (x - this.memory.offsetLeft) * (this.maxX - this.minX) / (this.memory.width - this.memory.offsetLeft) + this.minX;\n};\n\n_.setup = function () {\n  var xmin = Number.MAX_VALUE;\n  var xmax = Number.MIN_VALUE;\n  var ymax = Number.MIN_VALUE;\n\n  for (var i = 0, ii = this.data.length; i < ii; i++) {\n    xmin = m.min(xmin, this.data[i].x);\n    xmax = m.max(xmax, this.data[i].x);\n    ymax = m.max(ymax, this.data[i].y);\n  }\n\n  if (this.continuous) {\n    this.minX = xmin;\n    this.maxX = xmax;\n  } else {\n    this.minX = xmin - 1;\n    this.maxX = xmax + 1;\n  }\n\n  for (var i = 0, ii = this.data.length; i < ii; i++) {\n    this.data[i].y /= ymax;\n  }\n};\n\n_.zoom = function (pixel1, pixel2, width, rescaleY) {\n  var p1 = this.getInverseTransformedX(pixel1);\n  var p2 = this.getInverseTransformedX(pixel2);\n  this.minX = m.min(p1, p2);\n  this.maxX = m.max(p1, p2);\n\n  if (rescaleY) {\n    var ymax = Number.MIN_VALUE;\n\n    for (var i = 0, ii = this.data.length; i < ii; i++) {\n      if (_math__WEBPACK_IMPORTED_MODULE_1__[\"isBetween\"](this.data[i].x, this.minX, this.maxX)) {\n        ymax = m.max(ymax, this.data[i].y);\n      }\n    }\n\n    return 1 / ymax;\n  }\n};\n\n_.translate = function (dif, width) {\n  var dist = dif / (width - this.memory.offsetLeft) * (this.maxX - this.minX) * (this.memory.flipXAxis ? 1 : -1);\n  this.minX += dist;\n  this.maxX += dist;\n};\n\n_.alertMetadata = function () {\n  alert(this.metadata.join('\\n'));\n};\n\n_.getInternalCoordinates = function (x, y) {\n  return new _Point__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.getInverseTransformedX(x), this.getInverseTransformedY(y));\n};\n\n_.getClosestPlotInternalCoordinates = function (x) {\n  var xtl = this.getInverseTransformedX(x - 1);\n  var xtr = this.getInverseTransformedX(x + 1);\n\n  if (xtl > xtr) {\n    var temp = xtl;\n    xtl = xtr;\n    xtr = temp;\n  }\n\n  var highest = -1;\n  var max = -Infinity;\n  var inRange = false;\n\n  for (var i = 0, ii = this.data.length; i < ii; i++) {\n    var p = this.data[i];\n\n    if (_math__WEBPACK_IMPORTED_MODULE_1__[\"isBetween\"](p.x, xtl, xtr)) {\n      if (p.y > max) {\n        inRange = true;\n        max = p.y;\n        highest = i;\n      }\n    } else if (inRange) {\n      break;\n    }\n  }\n\n  if (highest === -1) {\n    return undefined;\n  }\n\n  var p = this.data[highest];\n  return new _Point__WEBPACK_IMPORTED_MODULE_2__[\"default\"](p.x, p.y * 100);\n};\n\n_.getClosestPeakInternalCoordinates = function (x) {\n  var xt = this.getInverseTransformedX(x);\n  var closest = 0;\n  var dif = Infinity;\n\n  for (var i = 0, ii = this.data.length; i < ii; i++) {\n    var sub = m.abs(this.data[i].x - xt);\n\n    if (sub <= dif) {\n      dif = sub;\n      closest = i;\n    } else {\n      break;\n    }\n  }\n\n  var highestLeft = closest,\n      highestRight = closest;\n  var maxLeft = this.data[closest].y,\n      maxRight = this.data[closest].y;\n\n  for (var i = closest + 1, ii = this.data.length; i < ii; i++) {\n    if (this.data[i].y + .05 > maxRight) {\n      maxRight = this.data[i].y;\n      highestRight = i;\n    } else {\n      break;\n    }\n  }\n\n  for (var i = closest - 1; i >= 0; i--) {\n    if (this.data[i].y + .05 > maxLeft) {\n      maxLeft = this.data[i].y;\n      highestLeft = i;\n    } else {\n      break;\n    }\n  }\n\n  var p = this.data[highestLeft - closest > highestRight - closest ? highestRight : highestLeft];\n  return new _Point__WEBPACK_IMPORTED_MODULE_2__[\"default\"](p.x, p.y * 100);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/structures/Spectrum.js\n");

/***/ }),

/***/ "./src/ChemDoodle/structures/VisualSpecifications.js":
/*!***********************************************************!*\
  !*** ./src/ChemDoodle/structures/VisualSpecifications.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return VisualSpecifications; });\n/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../ChemDoodle */ \"./src/ChemDoodle/index.js\");\n\nfunction VisualSpecifications() {\n  // canvas properties\n  this.backgroundColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_backgroundColor\"];\n  this.scale = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_scale\"];\n  this.rotateAngle = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_rotateAngle\"];\n  this.bondLength_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bondLength_2D\"];\n  this.angstromsPerBondLength = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_angstromsPerBondLength\"];\n  this.lightDirection_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_lightDirection_3D\"].slice(0);\n  this.lightDiffuseColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_lightDiffuseColor_3D\"];\n  this.lightSpecularColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_lightSpecularColor_3D\"];\n  this.projectionPerspective_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_projectionPerspective_3D\"];\n  this.projectionPerspectiveVerticalFieldOfView_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_projectionPerspectiveVerticalFieldOfView_3D\"];\n  this.projectionOrthoWidth_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_projectionOrthoWidth_3D\"];\n  this.projectionWidthHeightRatio_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_projectionWidthHeightRatio_3D\"];\n  this.projectionFrontCulling_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_projectionFrontCulling_3D\"];\n  this.projectionBackCulling_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_projectionBackCulling_3D\"];\n  this.cullBackFace_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_cullBackFace_3D\"];\n  this.fog_mode_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_fog_mode_3D\"];\n  this.fog_color_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_fog_color_3D\"];\n  this.fog_start_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_fog_start_3D\"];\n  this.fog_end_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_fog_end_3D\"];\n  this.fog_density_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_fog_density_3D\"];\n  this.shadow_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_shadow_3D\"];\n  this.shadow_intensity_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_shadow_intensity_3D\"];\n  this.flat_color_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_flat_color_3D\"];\n  this.antialias_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_antialias_3D\"];\n  this.gammaCorrection_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_gammaCorrection_3D\"];\n  this.colorHover = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_colorHover\"];\n  this.colorSelect = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_colorSelect\"];\n  this.colorError = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_colorError\"];\n  this.colorPreview = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_colorPreview\"]; // 3D shaders\n  // ssao properties\n\n  this.ssao_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_ssao_3D\"];\n  this.ssao_kernel_radius = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_ssao_kernel_radius\"];\n  this.ssao_kernel_samples = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_ssao_kernel_samples\"];\n  this.ssao_power = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_ssao_power\"]; // outline properties\n\n  this.outline_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_outline_3D\"];\n  this.outline_normal_threshold = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_outline_normal_threshold\"];\n  this.outline_depth_threshold = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_outline_depth_threshold\"];\n  this.outline_thickness = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_outline_thickness\"]; // fxaa properties\n\n  this.fxaa_edgeThreshold = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_fxaa_edgeThreshold\"];\n  this.fxaa_edgeThresholdMin = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_fxaa_edgeThresholdMin\"];\n  this.fxaa_searchSteps = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_fxaa_searchSteps\"];\n  this.fxaa_searchThreshold = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_fxaa_searchThreshold\"];\n  this.fxaa_subpixCap = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_fxaa_subpixCap\"];\n  this.fxaa_subpixTrim = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_fxaa_subpixTrim\"]; // atom properties\n\n  this.atoms_display = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_display\"];\n  this.atoms_color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_color\"];\n  this.atoms_font_size_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_font_size_2D\"];\n  this.atoms_font_families_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_font_families_2D\"].slice(0);\n  this.atoms_font_bold_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_font_bold_2D\"];\n  this.atoms_font_italic_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_font_italic_2D\"];\n  this.atoms_circles_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_circles_2D\"];\n  this.atoms_circleDiameter_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_circleDiameter_2D\"];\n  this.atoms_circleBorderWidth_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_circleBorderWidth_2D\"];\n  this.atoms_lonePairDistance_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_lonePairDistance_2D\"];\n  this.atoms_lonePairSpread_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_lonePairSpread_2D\"];\n  this.atoms_lonePairDiameter_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_lonePairDiameter_2D\"];\n  this.atoms_useJMOLColors = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_useJMOLColors\"];\n  this.atoms_usePYMOLColors = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_usePYMOLColors\"];\n  this.atoms_HBlack_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_HBlack_2D\"];\n  this.atoms_implicitHydrogens_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_implicitHydrogens_2D\"];\n  this.atoms_displayTerminalCarbonLabels_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_displayTerminalCarbonLabels_2D\"];\n  this.atoms_showHiddenCarbons_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_showHiddenCarbons_2D\"];\n  this.atoms_showAttributedCarbons_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_showAttributedCarbons_2D\"];\n  this.atoms_displayAllCarbonLabels_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_displayAllCarbonLabels_2D\"];\n  this.atoms_resolution_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_resolution_3D\"];\n  this.atoms_sphereDiameter_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_sphereDiameter_3D\"];\n  this.atoms_useVDWDiameters_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_useVDWDiameters_3D\"];\n  this.atoms_vdwMultiplier_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_vdwMultiplier_3D\"];\n  this.atoms_materialAmbientColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_materialAmbientColor_3D\"];\n  this.atoms_materialSpecularColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_materialSpecularColor_3D\"];\n  this.atoms_materialShininess_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_materialShininess_3D\"];\n  this.atoms_nonBondedAsStars_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_nonBondedAsStars_3D\"];\n  this.atoms_displayLabels_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_displayLabels_3D\"]; // bond properties\n\n  this.bonds_display = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_display\"];\n  this.bonds_color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_color\"];\n  this.bonds_width_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_width_2D\"];\n  this.bonds_useAbsoluteSaturationWidths_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_useAbsoluteSaturationWidths_2D\"];\n  this.bonds_saturationWidth_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_saturationWidth_2D\"];\n  this.bonds_saturationWidthAbs_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_saturationWidthAbs_2D\"];\n  this.bonds_ends_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_ends_2D\"];\n  this.bonds_splitColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_splitColor\"];\n  this.bonds_colorGradient = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_colorGradient\"];\n  this.bonds_saturationAngle_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_saturationAngle_2D\"];\n  this.bonds_symmetrical_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_symmetrical_2D\"];\n  this.bonds_clearOverlaps_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_clearOverlaps_2D\"];\n  this.bonds_overlapClearWidth_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_overlapClearWidth_2D\"];\n  this.bonds_atomLabelBuffer_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_atomLabelBuffer_2D\"];\n  this.bonds_wedgeThickness_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_wedgeThickness_2D\"];\n  this.bonds_wavyLength_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_wavyLength_2D\"];\n  this.bonds_hashWidth_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_hashWidth_2D\"];\n  this.bonds_hashSpacing_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_hashSpacing_2D\"];\n  this.bonds_dotSize_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_dotSize_2D\"];\n  this.bonds_lewisStyle_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_lewisStyle_2D\"];\n  this.bonds_showBondOrders_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_showBondOrders_3D\"];\n  this.bonds_resolution_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_resolution_3D\"];\n  this.bonds_renderAsLines_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_renderAsLines_3D\"];\n  this.bonds_cylinderDiameter_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_cylinderDiameter_3D\"];\n  this.bonds_pillHeight_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_pillHeight_3D\"];\n  this.bonds_pillLatitudeResolution_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_pillLatitudeResolution_3D\"];\n  this.bonds_pillLongitudeResolution_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_pillLongitudeResolution_3D\"];\n  this.bonds_pillSpacing_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_pillSpacing_3D\"];\n  this.bonds_pillDiameter_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_pillDiameter_3D\"];\n  this.bonds_materialAmbientColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_materialAmbientColor_3D\"];\n  this.bonds_materialSpecularColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_materialSpecularColor_3D\"];\n  this.bonds_materialShininess_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_bonds_materialShininess_3D\"]; // macromolecular properties\n\n  this.proteins_displayRibbon = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_displayRibbon\"];\n  this.proteins_displayBackbone = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_displayBackbone\"];\n  this.proteins_backboneThickness = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_backboneThickness\"];\n  this.proteins_backboneColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_backboneColor\"];\n  this.proteins_ribbonCartoonize = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_ribbonCartoonize\"];\n  this.proteins_residueColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_residueColor\"];\n  this.proteins_primaryColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_primaryColor\"];\n  this.proteins_secondaryColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_secondaryColor\"];\n  this.proteins_ribbonCartoonHelixPrimaryColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_ribbonCartoonHelixPrimaryColor\"];\n  this.proteins_ribbonCartoonHelixSecondaryColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_ribbonCartoonHelixSecondaryColor\"];\n  this.proteins_tubeColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_tubeColor\"];\n  this.proteins_tubeResolution_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_tubeResolution_3D\"];\n  this.proteins_displayPipePlank = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_displayPipePlank\"];\n  this.proteins_ribbonCartoonSheetColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_ribbonCartoonSheetColor\"];\n  this.proteins_ribbonThickness = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_ribbonThickness\"];\n  this.proteins_tubeThickness = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_tubeThickness\"];\n  this.proteins_plankSheetWidth = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_plankSheetWidth\"];\n  this.proteins_cylinderHelixDiameter = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_cylinderHelixDiameter\"];\n  this.proteins_verticalResolution = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_verticalResolution\"];\n  this.proteins_horizontalResolution = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_horizontalResolution\"];\n  this.proteins_materialAmbientColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_materialAmbientColor_3D\"];\n  this.proteins_materialSpecularColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_materialSpecularColor_3D\"];\n  this.proteins_materialShininess_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_proteins_materialShininess_3D\"];\n  this.macro_displayAtoms = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_macro_displayAtoms\"];\n  this.macro_displayBonds = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_macro_displayBonds\"];\n  this.macro_atomToLigandDistance = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_macro_atomToLigandDistance\"];\n  this.nucleics_display = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_nucleics_display\"];\n  this.nucleics_tubeColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_nucleics_tubeColor\"];\n  this.nucleics_baseColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_nucleics_baseColor\"];\n  this.nucleics_residueColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_nucleics_residueColor\"];\n  this.nucleics_tubeThickness = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_nucleics_tubeThickness\"];\n  this.nucleics_tubeResolution_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_nucleics_tubeResolution_3D\"];\n  this.nucleics_verticalResolution = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_nucleics_verticalResolution\"];\n  this.nucleics_materialAmbientColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_nucleics_materialAmbientColor_3D\"];\n  this.nucleics_materialSpecularColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_nucleics_materialSpecularColor_3D\"];\n  this.nucleics_materialShininess_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_nucleics_materialShininess_3D\"];\n  this.macro_showWater = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_macro_showWater\"];\n  this.macro_colorByChain = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_macro_colorByChain\"];\n  this.macro_rainbowColors = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_macro_rainbowColors\"].slice(0); // surface properties\n\n  this.surfaces_display = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_surfaces_display\"];\n  this.surfaces_alpha = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_surfaces_alpha\"];\n  this.surfaces_style = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_surfaces_style\"];\n  this.surfaces_color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_surfaces_color\"];\n  this.surfaces_materialAmbientColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_surfaces_materialAmbientColor_3D\"];\n  this.surfaces_materialSpecularColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_surfaces_materialSpecularColor_3D\"];\n  this.surfaces_materialShininess_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_surfaces_materialShininess_3D\"]; // spectrum properties\n\n  this.plots_color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_plots_color\"];\n  this.plots_width = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_plots_width\"];\n  this.plots_showIntegration = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_plots_showIntegration\"];\n  this.plots_integrationColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_plots_integrationColor\"];\n  this.plots_integrationLineWidth = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_plots_integrationLineWidth\"];\n  this.plots_showGrid = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_plots_showGrid\"];\n  this.plots_gridColor = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_plots_gridColor\"];\n  this.plots_gridLineWidth = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_plots_gridLineWidth\"];\n  this.plots_showYAxis = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_plots_showYAxis\"];\n  this.plots_flipXAxis = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_plots_flipXAxis\"]; // shape properties\n\n  this.text_font_size = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_text_font_size\"];\n  this.text_font_families = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_text_font_families\"].slice(0);\n  this.text_font_bold = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_text_font_bold\"];\n  this.text_font_italic = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_text_font_italic\"];\n  this.text_font_stroke_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_text_font_stroke_3D\"];\n  this.text_color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_text_color\"];\n  this.shapes_color = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_shapes_color\"];\n  this.shapes_lineWidth = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_shapes_lineWidth\"];\n  this.shapes_pointSize = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_shapes_pointSize\"];\n  this.shapes_arrowLength_2D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_shapes_arrowLength_2D\"];\n  this.compass_display = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_compass_display\"];\n  this.compass_axisXColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_compass_axisXColor_3D\"];\n  this.compass_axisYColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_compass_axisYColor_3D\"];\n  this.compass_axisZColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_compass_axisZColor_3D\"];\n  this.compass_size_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_compass_size_3D\"];\n  this.compass_resolution_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_compass_resolution_3D\"];\n  this.compass_displayText_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_compass_displayText_3D\"];\n  this.compass_type_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_compass_type_3D\"];\n  this.measurement_update_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_measurement_update_3D\"];\n  this.measurement_angleBands_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_measurement_angleBands_3D\"];\n  this.measurement_displayText_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_measurement_displayText_3D\"];\n}\n;\nvar _ = VisualSpecifications.prototype;\n\n_.set3DRepresentation = function (representation) {\n  this.atoms_display = true;\n  this.bonds_display = true;\n  this.bonds_color = '#777777';\n  this.atoms_useVDWDiameters_3D = true;\n  this.atoms_useJMOLColors = true;\n  this.bonds_splitColor = true;\n  this.bonds_showBondOrders_3D = true;\n  this.bonds_renderAsLines_3D = false;\n\n  if (representation === 'Ball and Stick') {\n    this.atoms_vdwMultiplier_3D = .3;\n    this.bonds_splitColor = false;\n    this.bonds_cylinderDiameter_3D = .3;\n    this.bonds_materialAmbientColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_materialAmbientColor_3D\"];\n    this.bonds_pillDiameter_3D = .15;\n  } else if (representation === 'van der Waals Spheres') {\n    this.bonds_display = false;\n    this.atoms_vdwMultiplier_3D = 1;\n  } else if (representation === 'Stick') {\n    this.atoms_useVDWDiameters_3D = false;\n    this.bonds_showBondOrders_3D = false;\n    this.bonds_cylinderDiameter_3D = this.atoms_sphereDiameter_3D = .8;\n    this.bonds_materialAmbientColor_3D = this.atoms_materialAmbientColor_3D;\n  } else if (representation === 'Wireframe') {\n    this.atoms_useVDWDiameters_3D = false;\n    this.bonds_cylinderDiameter_3D = this.bonds_pillDiameter_3D = .05;\n    this.atoms_sphereDiameter_3D = .15;\n    this.bonds_materialAmbientColor_3D = _ChemDoodle__WEBPACK_IMPORTED_MODULE_0__[\"default_atoms_materialAmbientColor_3D\"];\n  } else if (representation === 'Line') {\n    this.atoms_display = false;\n    this.bonds_renderAsLines_3D = true;\n    this.bonds_width_2D = 1;\n    this.bonds_cylinderDiameter_3D = .05;\n  } else {\n    alert('\"' + representation + '\" is not recognized. Use one of the following strings:\\n\\n' + '1. Ball and Stick\\n' + '2. van der Waals Spheres\\n' + '3. Stick\\n' + '4. Wireframe\\n' + '5. Line\\n');\n  }\n};\n\n_.copy = function () {\n  var copy = JSON.parse(JSON.stringify(this));\n  copy.set3DRepresentation = _.set3DRepresentation;\n  return copy;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/structures/VisualSpecifications.js\n");

/***/ }),

/***/ "./src/ChemDoodle/structures/d2/index.js":
/*!***********************************************!*\
  !*** ./src/ChemDoodle/structures/d2/index.js ***!
  \***********************************************/
/*! exports provided: d2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d2\", function() { return d2; });\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../math */ \"./src/ChemDoodle/math/index.js\");\n/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../extensions */ \"./src/ChemDoodle/extensions/index.js\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib */ \"./src/ChemDoodle/lib/index.js\");\n/* harmony import */ var _structures__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../structures */ \"./src/ChemDoodle/structures/index.js\");\n\n\n\n\nvar m = Math;\nvar d2 = {};\n\n(function (undefined) {\n  'use strict';\n\n  d2._Shape = function () {};\n\n  var _ = d2._Shape.prototype;\n\n  _.drawDecorations = function (ctx, specs) {\n    if (this.isHover) {\n      var ps = this.getPoints();\n\n      for (var i = 0, ii = ps.length; i < ii; i++) {\n        var p = ps[i];\n        this.drawAnchor(ctx, specs, p, p === this.hoverPoint);\n      }\n    }\n  };\n\n  _.getBounds = function () {\n    var bounds = new _math__WEBPACK_IMPORTED_MODULE_0__[\"Bounds\"]();\n    var ps = this.getPoints();\n\n    for (var i = 0, ii = ps.length; i < ii; i++) {\n      var p = ps[i];\n      bounds.expand(p.x, p.y);\n    }\n\n    return bounds;\n  };\n\n  _.drawAnchor = function (ctx, specs, p, hovered) {\n    ctx.save();\n    ctx.translate(p.x, p.y);\n    ctx.rotate(m.PI / 4);\n    ctx.scale(1 / specs.scale, 1 / specs.scale);\n    var boxRadius = 4;\n    var innerRadius = boxRadius / 2;\n    ctx.beginPath();\n    ctx.moveTo(-boxRadius, -boxRadius);\n    ctx.lineTo(boxRadius, -boxRadius);\n    ctx.lineTo(boxRadius, boxRadius);\n    ctx.lineTo(-boxRadius, boxRadius);\n    ctx.closePath();\n\n    if (hovered) {\n      ctx.fillStyle = specs.colorHover;\n    } else {\n      ctx.fillStyle = 'white';\n    }\n\n    ctx.fill();\n    ctx.beginPath();\n    ctx.moveTo(-boxRadius, -innerRadius);\n    ctx.lineTo(-boxRadius, -boxRadius);\n    ctx.lineTo(-innerRadius, -boxRadius);\n    ctx.moveTo(innerRadius, -boxRadius);\n    ctx.lineTo(boxRadius, -boxRadius);\n    ctx.lineTo(boxRadius, -innerRadius);\n    ctx.moveTo(boxRadius, innerRadius);\n    ctx.lineTo(boxRadius, boxRadius);\n    ctx.lineTo(innerRadius, boxRadius);\n    ctx.moveTo(-innerRadius, boxRadius);\n    ctx.lineTo(-boxRadius, boxRadius);\n    ctx.lineTo(-boxRadius, innerRadius);\n    ctx.moveTo(-boxRadius, -innerRadius);\n    ctx.strokeStyle = 'rgba(0,0,0,.2)';\n    ctx.lineWidth = 5;\n    ctx.stroke();\n    ctx.strokeStyle = 'blue';\n    ctx.lineWidth = 1;\n    ctx.stroke();\n    ctx.restore();\n  };\n})();\n\n(function (undefined) {\n  'use strict';\n\n  d2.AtomMapping = function (o1, o2) {\n    // these need to be named 'o', not 'a' or the generic erase function won't work for them\n    this.o1 = o1;\n    this.o2 = o2;\n    this.label = '0';\n    this.error = false;\n  };\n\n  var _ = d2.AtomMapping.prototype = new d2._Shape();\n\n  _.drawDecorations = function (ctx, specs) {\n    if (this.isHover || this.isSelected) {\n      ctx.strokeStyle = this.isHover ? specs.colorHover : specs.colorSelect;\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n      ctx.moveTo(this.o1.x, this.o1.y);\n      ctx.lineTo(this.o2.x, this.o2.y);\n      ctx.setLineDash([2]);\n      ctx.stroke();\n      ctx.setLineDash([]);\n    }\n  };\n\n  _.draw = function (ctx, specs) {\n    if (this.o1 && this.o2) {\n      var sep = 14;\n      this.x1 = this.o1.x + sep * m.cos(this.o1.angleOfLeastInterference);\n      this.y1 = this.o1.y - sep * m.sin(this.o1.angleOfLeastInterference);\n      this.x2 = this.o2.x + sep * m.cos(this.o2.angleOfLeastInterference);\n      this.y2 = this.o2.y - sep * m.sin(this.o2.angleOfLeastInterference);\n      ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_1__[\"getFontString\"](specs.text_font_size, specs.text_font_families, specs.text_font_bold, specs.text_font_italic);\n      var label = this.label;\n      var w = ctx.measureText(label).width;\n\n      if (this.isLassoed) {\n        ctx.fillStyle = specs.colorHover;\n        ctx.fillRect(this.x1 - w / 2 - 3, this.y1 - specs.text_font_size / 2 - 3, w + 6, specs.text_font_size + 6);\n        ctx.fillRect(this.x2 - w / 2 - 3, this.y2 - specs.text_font_size / 2 - 3, w + 6, specs.text_font_size + 6);\n      }\n\n      var color = this.error ? specs.colorError : specs.shapes_color;\n\n      if (this.isHover || this.isSelected) {\n        color = this.isHover ? specs.colorHover : specs.colorSelect;\n      }\n\n      ctx.fillStyle = color;\n      ctx.fillRect(this.x1 - w / 2 - 1, this.y1 - specs.text_font_size / 2 - 1, w + 2, specs.text_font_size + 2);\n      ctx.fillRect(this.x2 - w / 2 - 1, this.y2 - specs.text_font_size / 2 - 1, w + 2, specs.text_font_size + 2);\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillStyle = specs.backgroundColor;\n      ctx.fillText(label, this.x1, this.y1);\n      ctx.fillText(label, this.x2, this.y2);\n    }\n  };\n\n  _.getPoints = function () {\n    return [new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](this.x1, this.y1), new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](this.x2, this.y2)];\n  };\n\n  _.isOver = function (p, barrier) {\n    if (this.x1) {\n      return p.distance({\n        x: this.x1,\n        y: this.y1\n      }) < barrier || p.distance({\n        x: this.x2,\n        y: this.y2\n      }) < barrier;\n    }\n\n    return false;\n  };\n})();\n\n(function (undefined) {\n  'use strict';\n\n  d2.Bracket = function (p1, p2) {\n    this.p1 = p1 ? p1 : new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"]();\n    this.p2 = p2 ? p2 : new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"]();\n  };\n\n  var _ = d2.Bracket.prototype = new d2._Shape();\n\n  _.charge = 0;\n  _.mult = 0;\n  _.repeat = 0;\n\n  _.draw = function (ctx, specs) {\n    var minX = m.min(this.p1.x, this.p2.x);\n    var maxX = m.max(this.p1.x, this.p2.x);\n    var minY = m.min(this.p1.y, this.p2.y);\n    var maxY = m.max(this.p1.y, this.p2.y);\n    var h = maxY - minY;\n    var lip = h / 10;\n    ctx.beginPath();\n    ctx.moveTo(minX + lip, minY);\n    ctx.lineTo(minX, minY);\n    ctx.lineTo(minX, maxY);\n    ctx.lineTo(minX + lip, maxY);\n    ctx.moveTo(maxX - lip, maxY);\n    ctx.lineTo(maxX, maxY);\n    ctx.lineTo(maxX, minY);\n    ctx.lineTo(maxX - lip, minY);\n\n    if (this.isLassoed) {\n      var grd = ctx.createLinearGradient(this.p1.x, this.p1.y, this.p2.x, this.p2.y);\n      grd.addColorStop(0, 'rgba(212, 99, 0, 0)');\n      grd.addColorStop(0.5, 'rgba(212, 99, 0, 0.8)');\n      grd.addColorStop(1, 'rgba(212, 99, 0, 0)');\n      ctx.lineWidth = specs.shapes_lineWidth + 5;\n      ctx.strokeStyle = grd;\n      ctx.lineJoin = 'miter';\n      ctx.lineCap = 'square';\n      ctx.stroke();\n    }\n\n    ctx.strokeStyle = specs.shapes_color;\n    ctx.lineWidth = specs.shapes_lineWidth;\n    ctx.lineJoin = 'miter';\n    ctx.lineCap = 'butt';\n    ctx.stroke();\n\n    if (this.charge !== 0) {\n      ctx.fillStyle = specs.text_color;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'alphabetic';\n      ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_1__[\"getFontString\"](specs.text_font_size, specs.text_font_families);\n      var s = this.charge.toFixed(0);\n\n      if (s === '1') {\n        s = '+';\n      } else if (s === '-1') {\n        s = \"\\u2013\";\n      } else if (_extensions__WEBPACK_IMPORTED_MODULE_1__[\"stringStartsWith\"](s, '-')) {\n        s = s.substring(1) + \"\\u2013\";\n      } else {\n        s += '+';\n      }\n\n      ctx.fillText(s, maxX + 5, minY + 5);\n    }\n\n    if (this.mult !== 0) {\n      ctx.fillStyle = specs.text_color;\n      ctx.textAlign = 'right';\n      ctx.textBaseline = 'middle';\n      ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_1__[\"getFontString\"](specs.text_font_size, specs.text_font_families);\n      ctx.fillText(this.mult.toFixed(0), minX - 5, minY + h / 2);\n    }\n\n    if (this.repeat !== 0) {\n      ctx.fillStyle = specs.text_color;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'top';\n      ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_1__[\"getFontString\"](specs.text_font_size, specs.text_font_families);\n      var s = this.repeat.toFixed(0);\n      ctx.fillText(s, maxX + 5, maxY - 5);\n    }\n  };\n\n  _.getPoints = function () {\n    return [this.p1, this.p2];\n  };\n\n  _.isOver = function (p, barrier) {\n    return _math__WEBPACK_IMPORTED_MODULE_0__[\"isBetween\"](p.x, this.p1.x, this.p2.x) && _math__WEBPACK_IMPORTED_MODULE_0__[\"isBetween\"](p.y, this.p1.y, this.p2.y);\n  };\n})();\n\n(function (undefined) {\n  'use strict';\n\n  d2.DynamicBracket = function (b1, b2) {\n    this.b1 = b1;\n    this.b2 = b2;\n    this.n1 = 1;\n    this.n2 = 4;\n    this.contents = [];\n    this.ps = [];\n  };\n\n  var _ = d2.DynamicBracket.prototype = new d2._Shape();\n\n  _.drawDecorations = function (ctx, specs) {\n    if (this.isHover) {\n      for (var i = 0, ii = this.contents.length; i < ii; i++) {\n        var a = this.contents[i];\n        var grd = ctx.createRadialGradient(a.x - 1, a.y - 1, 0, a.x, a.y, 7);\n        grd.addColorStop(0, 'rgba(212, 99, 0, 0)');\n        grd.addColorStop(0.7, 'rgba(212, 99, 0, 0.8)');\n        ctx.fillStyle = grd;\n        ctx.beginPath();\n        ctx.arc(a.x, a.y, 5, 0, m.PI * 2, false);\n        ctx.fill();\n      }\n    }\n  };\n\n  var drawEnd = function drawEnd(ctx, specs, b, b2, contents) {\n    var ps = [];\n    var stretch = 10;\n    var arm = 4;\n    var a = contents.length > 0 ? contents.indexOf(b.a1) === -1 ? b.a2 : b.a1 : b.a1.distance(b2.getCenter()) < b.a2.distance(b2.getCenter()) ? b.a1 : b.a2;\n    var angle = a.angle(b.getNeighbor(a));\n    var perp = angle + m.PI / 2;\n    var length = b.getLength() / (contents.length > 1 ? 4 : 2);\n    var psx = a.x + length * m.cos(angle);\n    var psy = a.y - length * m.sin(angle);\n    var scos = stretch * m.cos(perp);\n    var ssin = stretch * m.sin(perp);\n    var p1x = psx + scos;\n    var p1y = psy - ssin;\n    var p2x = psx - scos;\n    var p2y = psy + ssin;\n    var acos = -arm * m.cos(angle);\n    var asin = -arm * m.sin(angle);\n    var p1ax = p1x + acos;\n    var p1ay = p1y - asin;\n    var p2ax = p2x + acos;\n    var p2ay = p2y - asin;\n    ctx.beginPath();\n    ctx.moveTo(p1ax, p1ay);\n    ctx.lineTo(p1x, p1y);\n    ctx.lineTo(p2x, p2y);\n    ctx.lineTo(p2ax, p2ay);\n    ctx.stroke();\n    ps.push(new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](p1x, p1y));\n    ps.push(new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](p2x, p2y));\n    return ps;\n  };\n\n  _.draw = function (ctx, specs) {\n    if (this.b1 && this.b2) {\n      var color = this.error ? specs.colorError : specs.shapes_color;\n\n      if (this.isHover || this.isSelected) {\n        color = this.isHover ? specs.colorHover : specs.colorSelect;\n      }\n\n      ctx.strokeStyle = color;\n      ctx.fillStyle = ctx.strokeStyle;\n      ctx.lineWidth = specs.shapes_lineWidth;\n      ctx.lineJoin = 'miter';\n      ctx.lineCap = 'butt';\n      var ps1 = drawEnd(ctx, specs, this.b1, this.b2, this.contents);\n      var ps2 = drawEnd(ctx, specs, this.b2, this.b1, this.contents);\n      this.ps = ps1.concat(ps2);\n\n      if (this.b1.getCenter().x > this.b2.getCenter().x) {\n        if (this.ps[0].x > this.ps[1].x + 5) {\n          this.textPos = this.ps[0];\n        } else {\n          this.textPos = this.ps[1];\n        }\n      } else {\n        if (this.ps[2].x > this.ps[3].x + 5) {\n          this.textPos = this.ps[2];\n        } else {\n          this.textPos = this.ps[3];\n        }\n      }\n\n      if (!this.error && this.contents.length > 0) {\n        ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_1__[\"getFontString\"](specs.text_font_size, specs.text_font_families, specs.text_font_bold, specs.text_font_italic);\n        ctx.fillStyle = this.isHover ? specs.colorHover : specs.text_color;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'bottom';\n        ctx.fillText(this.n1 + '-' + this.n2, this.textPos.x + 2, this.textPos.y + 2);\n      }\n    }\n  };\n\n  _.getPoints = function () {\n    return this.ps;\n  };\n\n  _.isOver = function (p, barrier) {\n    return false;\n  };\n\n  _.setContents = function (sketcher) {\n    this.contents = [];\n    var m1 = sketcher.getMoleculeByAtom(this.b1.a1);\n    var m2 = sketcher.getMoleculeByAtom(this.b2.a1); // make sure both b1 and b2 are part of the same molecule\n\n    if (m1 && m1 === m2) {\n      // if either b1 or b2 is in a ring, then stop, as this is a violation\n      // unless b1 and b2 are part of the same ring and are part of no other rings\n      var c1 = 0;\n      var c2 = 0;\n\n      for (var i = 0, ii = m1.rings.length; i < ii; i++) {\n        var r = m1.rings[i];\n\n        for (var j = 0, jj = r.bonds.length; j < jj; j++) {\n          var rb = r.bonds[j];\n\n          if (rb === this.b1) {\n            c1++;\n          } else if (rb === this.b2) {\n            c2++;\n          }\n        }\n      }\n\n      var sameSingleRing = c1 === 1 && c2 === 1 && this.b1.ring === this.b2.ring;\n      this.contents.flippable = sameSingleRing;\n\n      if (this.b1.ring === undefined && this.b2.ring === undefined || sameSingleRing) {\n        for (var i = 0, ii = m1.atoms.length; i < ii; i++) {\n          var reached1 = false;\n          var reached2 = false;\n          var reachedInner = false;\n\n          for (var j = 0, jj = m1.bonds.length; j < jj; j++) {\n            m1.bonds[j].visited = false;\n          }\n\n          var q = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Queue\"]();\n          var a = m1.atoms[i];\n          q.enqueue(a);\n\n          while (!q.isEmpty() && !(reached1 && reached2)) {\n            var check = q.dequeue();\n\n            if (sameSingleRing && (!this.flip && check === this.b1.a1 || this.flip && check === this.b1.a2)) {\n              reachedInner = true;\n            }\n\n            for (var j = 0, jj = m1.bonds.length; j < jj; j++) {\n              var b = m1.bonds[j];\n\n              if (b.a1 === check || b.a2 === check) {\n                if (b === this.b1) {\n                  reached1 = true;\n                } else if (b === this.b2) {\n                  reached2 = true;\n                } else if (!b.visited) {\n                  b.visited = true;\n                  q.enqueue(b.getNeighbor(check));\n                }\n              }\n            }\n          }\n\n          if (reached1 && reached2 && (!sameSingleRing || reachedInner)) {\n            this.contents.push(a);\n          }\n        }\n      }\n    }\n  };\n})();\n\n(function (undefined) {\n  'use strict';\n\n  d2.Line = function (p1, p2) {\n    this.p1 = p1 ? p1 : new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"]();\n    this.p2 = p2 ? p2 : new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"]();\n  };\n\n  d2.Line.ARROW_SYNTHETIC = 'synthetic';\n  d2.Line.ARROW_RETROSYNTHETIC = 'retrosynthetic';\n  d2.Line.ARROW_RESONANCE = 'resonance';\n  d2.Line.ARROW_EQUILIBRIUM = 'equilibrium';\n\n  var _ = d2.Line.prototype = new d2._Shape();\n\n  _.arrowType = undefined;\n  _.topText = undefined;\n  _.bottomText = undefined;\n\n  _.draw = function (ctx, specs) {\n    if (this.isLassoed) {\n      var grd = ctx.createLinearGradient(this.p1.x, this.p1.y, this.p2.x, this.p2.y);\n      grd.addColorStop(0, 'rgba(212, 99, 0, 0)');\n      grd.addColorStop(0.5, 'rgba(212, 99, 0, 0.8)');\n      grd.addColorStop(1, 'rgba(212, 99, 0, 0)');\n      var useDist = 2.5;\n      var perpendicular = this.p1.angle(this.p2) + m.PI / 2;\n      var mcosp = m.cos(perpendicular);\n      var msinp = m.sin(perpendicular);\n      var cx1 = this.p1.x - mcosp * useDist;\n      var cy1 = this.p1.y + msinp * useDist;\n      var cx2 = this.p1.x + mcosp * useDist;\n      var cy2 = this.p1.y - msinp * useDist;\n      var cx3 = this.p2.x + mcosp * useDist;\n      var cy3 = this.p2.y - msinp * useDist;\n      var cx4 = this.p2.x - mcosp * useDist;\n      var cy4 = this.p2.y + msinp * useDist;\n      ctx.fillStyle = grd;\n      ctx.beginPath();\n      ctx.moveTo(cx1, cy1);\n      ctx.lineTo(cx2, cy2);\n      ctx.lineTo(cx3, cy3);\n      ctx.lineTo(cx4, cy4);\n      ctx.closePath();\n      ctx.fill();\n    }\n\n    ctx.strokeStyle = specs.shapes_color;\n    ctx.fillStyle = specs.shapes_color;\n    ctx.lineWidth = specs.shapes_lineWidth;\n    ctx.lineJoin = 'miter';\n    ctx.lineCap = 'butt';\n\n    if (this.p1.x !== this.p2.x || this.p1.y !== this.p2.y) {\n      // only render if the points are different, otherwise this will\n      // cause fill overflows\n      if (this.arrowType === d2.Line.ARROW_RETROSYNTHETIC) {\n        var r2 = m.sqrt(2) * 2;\n        var useDist = specs.shapes_arrowLength_2D / r2;\n        var angle = this.p1.angle(this.p2);\n        var perpendicular = angle + m.PI / 2;\n        var retract = specs.shapes_arrowLength_2D / r2;\n        var mcosa = m.cos(angle);\n        var msina = m.sin(angle);\n        var mcosp = m.cos(perpendicular);\n        var msinp = m.sin(perpendicular);\n        var cx1 = this.p1.x - mcosp * useDist;\n        var cy1 = this.p1.y + msinp * useDist;\n        var cx2 = this.p1.x + mcosp * useDist;\n        var cy2 = this.p1.y - msinp * useDist;\n        var cx3 = this.p2.x + mcosp * useDist - mcosa * retract;\n        var cy3 = this.p2.y - msinp * useDist + msina * retract;\n        var cx4 = this.p2.x - mcosp * useDist - mcosa * retract;\n        var cy4 = this.p2.y + msinp * useDist + msina * retract;\n        var ax1 = this.p2.x + mcosp * useDist * 2 - mcosa * retract * 2;\n        var ay1 = this.p2.y - msinp * useDist * 2 + msina * retract * 2;\n        var ax2 = this.p2.x - mcosp * useDist * 2 - mcosa * retract * 2;\n        var ay2 = this.p2.y + msinp * useDist * 2 + msina * retract * 2;\n        ctx.beginPath();\n        ctx.moveTo(cx2, cy2);\n        ctx.lineTo(cx3, cy3);\n        ctx.moveTo(ax1, ay1);\n        ctx.lineTo(this.p2.x, this.p2.y);\n        ctx.lineTo(ax2, ay2);\n        ctx.moveTo(cx4, cy4);\n        ctx.lineTo(cx1, cy1);\n        ctx.stroke();\n      } else if (this.arrowType === d2.Line.ARROW_EQUILIBRIUM) {\n        var r2 = m.sqrt(2) * 2;\n        var useDist = specs.shapes_arrowLength_2D / r2 / 2;\n        var angle = this.p1.angle(this.p2);\n        var perpendicular = angle + m.PI / 2;\n        var retract = specs.shapes_arrowLength_2D * 2 / m.sqrt(3);\n        var mcosa = m.cos(angle);\n        var msina = m.sin(angle);\n        var mcosp = m.cos(perpendicular);\n        var msinp = m.sin(perpendicular);\n        var cx1 = this.p1.x - mcosp * useDist;\n        var cy1 = this.p1.y + msinp * useDist;\n        var cx2 = this.p1.x + mcosp * useDist;\n        var cy2 = this.p1.y - msinp * useDist;\n        var cx3 = this.p2.x + mcosp * useDist;\n        var cy3 = this.p2.y - msinp * useDist;\n        var cx4 = this.p2.x - mcosp * useDist;\n        var cy4 = this.p2.y + msinp * useDist;\n        ctx.beginPath();\n        ctx.moveTo(cx2, cy2);\n        ctx.lineTo(cx3, cy3);\n        ctx.moveTo(cx4, cy4);\n        ctx.lineTo(cx1, cy1);\n        ctx.stroke(); // right arrow\n\n        var rx1 = cx3 - mcosa * retract * .8;\n        var ry1 = cy3 + msina * retract * .8;\n        var ax1 = cx3 + mcosp * specs.shapes_arrowLength_2D / 3 - mcosa * retract;\n        var ay1 = cy3 - msinp * specs.shapes_arrowLength_2D / 3 + msina * retract;\n        ctx.beginPath();\n        ctx.moveTo(cx3, cy3);\n        ctx.lineTo(ax1, ay1);\n        ctx.lineTo(rx1, ry1);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke(); // left arrow\n\n        rx1 = cx1 + mcosa * retract * .8;\n        ry1 = cy1 - msina * retract * .8;\n        ax1 = cx1 - mcosp * specs.shapes_arrowLength_2D / 3 + mcosa * retract;\n        ay1 = cy1 + msinp * specs.shapes_arrowLength_2D / 3 - msina * retract;\n        ctx.beginPath();\n        ctx.moveTo(cx1, cy1);\n        ctx.lineTo(ax1, ay1);\n        ctx.lineTo(rx1, ry1);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n      } else if (this.arrowType === d2.Line.ARROW_SYNTHETIC) {\n        var angle = this.p1.angle(this.p2);\n        var perpendicular = angle + m.PI / 2;\n        var retract = specs.shapes_arrowLength_2D * 2 / m.sqrt(3);\n        var mcosa = m.cos(angle);\n        var msina = m.sin(angle);\n        var mcosp = m.cos(perpendicular);\n        var msinp = m.sin(perpendicular);\n        ctx.beginPath();\n        ctx.moveTo(this.p1.x, this.p1.y);\n        ctx.lineTo(this.p2.x - mcosa * retract / 2, this.p2.y + msina * retract / 2);\n        ctx.stroke();\n        var rx1 = this.p2.x - mcosa * retract * .8;\n        var ry1 = this.p2.y + msina * retract * .8;\n        var ax1 = this.p2.x + mcosp * specs.shapes_arrowLength_2D / 3 - mcosa * retract;\n        var ay1 = this.p2.y - msinp * specs.shapes_arrowLength_2D / 3 + msina * retract;\n        var ax2 = this.p2.x - mcosp * specs.shapes_arrowLength_2D / 3 - mcosa * retract;\n        var ay2 = this.p2.y + msinp * specs.shapes_arrowLength_2D / 3 + msina * retract;\n        ctx.beginPath();\n        ctx.moveTo(this.p2.x, this.p2.y);\n        ctx.lineTo(ax2, ay2);\n        ctx.lineTo(rx1, ry1);\n        ctx.lineTo(ax1, ay1);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n      } else if (this.arrowType === d2.Line.ARROW_RESONANCE) {\n        var angle = this.p1.angle(this.p2);\n        var perpendicular = angle + m.PI / 2;\n        var retract = specs.shapes_arrowLength_2D * 2 / m.sqrt(3);\n        var mcosa = m.cos(angle);\n        var msina = m.sin(angle);\n        var mcosp = m.cos(perpendicular);\n        var msinp = m.sin(perpendicular);\n        ctx.beginPath();\n        ctx.moveTo(this.p1.x + mcosa * retract / 2, this.p1.y - msina * retract / 2);\n        ctx.lineTo(this.p2.x - mcosa * retract / 2, this.p2.y + msina * retract / 2);\n        ctx.stroke(); // right arrow\n\n        var rx1 = this.p2.x - mcosa * retract * .8;\n        var ry1 = this.p2.y + msina * retract * .8;\n        var ax1 = this.p2.x + mcosp * specs.shapes_arrowLength_2D / 3 - mcosa * retract;\n        var ay1 = this.p2.y - msinp * specs.shapes_arrowLength_2D / 3 + msina * retract;\n        var ax2 = this.p2.x - mcosp * specs.shapes_arrowLength_2D / 3 - mcosa * retract;\n        var ay2 = this.p2.y + msinp * specs.shapes_arrowLength_2D / 3 + msina * retract;\n        ctx.beginPath();\n        ctx.moveTo(this.p2.x, this.p2.y);\n        ctx.lineTo(ax2, ay2);\n        ctx.lineTo(rx1, ry1);\n        ctx.lineTo(ax1, ay1);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke(); // left arrow\n\n        rx1 = this.p1.x + mcosa * retract * .8;\n        ry1 = this.p1.y - msina * retract * .8;\n        ax1 = this.p1.x - mcosp * specs.shapes_arrowLength_2D / 3 + mcosa * retract;\n        ay1 = this.p1.y + msinp * specs.shapes_arrowLength_2D / 3 - msina * retract;\n        ax2 = this.p1.x + mcosp * specs.shapes_arrowLength_2D / 3 + mcosa * retract;\n        ay2 = this.p1.y - msinp * specs.shapes_arrowLength_2D / 3 - msina * retract;\n        ctx.beginPath();\n        ctx.moveTo(this.p1.x, this.p1.y);\n        ctx.lineTo(ax2, ay2);\n        ctx.lineTo(rx1, ry1);\n        ctx.lineTo(ax1, ay1);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n      } else {\n        ctx.beginPath();\n        ctx.moveTo(this.p1.x, this.p1.y);\n        ctx.lineTo(this.p2.x, this.p2.y);\n        ctx.stroke();\n      }\n\n      if (this.topText || this.bottomText) {\n        ctx.font = _extensions__WEBPACK_IMPORTED_MODULE_1__[\"getFontString\"](specs.text_font_size, specs.text_font_families, specs.text_font_bold, specs.text_font_italic);\n        ctx.fillStyle = specs.text_color;\n      }\n\n      if (this.topText) {\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'bottom';\n        ctx.fillText(this.topText, (this.p1.x + this.p2.x) / 2, this.p1.y - 5);\n      }\n\n      if (this.bottomText) {\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'top';\n        ctx.fillText(this.bottomText, (this.p1.x + this.p2.x) / 2, this.p1.y + 5);\n      }\n    }\n  };\n\n  _.getPoints = function () {\n    return [this.p1, this.p2];\n  };\n\n  _.isOver = function (p, barrier) {\n    var dist = _math__WEBPACK_IMPORTED_MODULE_0__[\"distanceFromPointToLineInclusive\"](p, this.p1, this.p2);\n    return dist !== -1 && dist < barrier;\n  };\n})();\n\n(function (undefined) {\n  'use strict';\n\n  var getPossibleAngles = function getPossibleAngles(o) {\n    var as = [];\n\n    if (o instanceof _structures__WEBPACK_IMPORTED_MODULE_3__[\"Atom\"]) {\n      if (o.bondNumber === 0) {\n        as.push(m.PI);\n      } else if (o.angles) {\n        if (o.angles.length === 1) {\n          as.push(o.angles[0] + m.PI);\n        } else {\n          for (var i = 1, ii = o.angles.length; i < ii; i++) {\n            as.push(o.angles[i - 1] + (o.angles[i] - o.angles[i - 1]) / 2);\n          }\n\n          var firstIncreased = o.angles[0] + m.PI * 2;\n          var last = o.angles[o.angles.length - 1];\n          as.push(last + (firstIncreased - last) / 2);\n        }\n\n        if (o.largestAngle > m.PI) {\n          // always use angle of least interfearence if it is greater\n          // than 120\n          as = [o.angleOfLeastInterference];\n        }\n\n        if (o.bonds) {\n          // point up towards a carbonyl\n          for (var i = 0, ii = o.bonds.length; i < ii; i++) {\n            var b = o.bonds[i];\n\n            if (b.bondOrder === 2) {\n              var n = b.getNeighbor(o);\n\n              if (n.label === 'O') {\n                as = [n.angle(o)];\n                break;\n              }\n            }\n          }\n        }\n      }\n    } else {\n      var angle = o.a1.angle(o.a2);\n      as.push(angle + m.PI / 2);\n      as.push(angle + 3 * m.PI / 2);\n    }\n\n    for (var i = 0, ii = as.length; i < ii; i++) {\n      while (as[i] > m.PI * 2) {\n        as[i] -= m.PI * 2;\n      }\n\n      while (as[i] < 0) {\n        as[i] += m.PI * 2;\n      }\n    }\n\n    return as;\n  };\n\n  var getPullBack = function getPullBack(o, specs) {\n    var pullback = 3;\n\n    if (o instanceof _structures__WEBPACK_IMPORTED_MODULE_3__[\"Atom\"]) {\n      if (o.isLabelVisible(specs)) {\n        pullback = 8;\n      }\n\n      if (o.charge !== 0 || o.numRadical !== 0 || o.numLonePair !== 0) {\n        pullback = 13;\n      }\n    } else if (o instanceof _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"]) {\n      // this is the midpoint of a bond forming pusher\n      pullback = 0;\n    } else {\n      if (o.bondOrder > 1) {\n        pullback = 5;\n      }\n    }\n\n    return pullback;\n  };\n\n  var drawPusher = function drawPusher(ctx, specs, o1, o2, p1, c1, c2, p2, numElectron, caches) {\n    var angle1 = c1.angle(p1);\n    var angle2 = c2.angle(p2);\n    var mcosa = m.cos(angle1);\n    var msina = m.sin(angle1); // pull back from start\n\n    var pullBack = getPullBack(o1, specs);\n    p1.x -= mcosa * pullBack;\n    p1.y += msina * pullBack; // arrow\n\n    var perpendicular = angle2 + m.PI / 2;\n    var retract = specs.shapes_arrowLength_2D * 2 / m.sqrt(3);\n    var mcosa = m.cos(angle2);\n    var msina = m.sin(angle2);\n    var mcosp = m.cos(perpendicular);\n    var msinp = m.sin(perpendicular);\n    p2.x -= mcosa * 5;\n    p2.y += msina * 5;\n    var nap = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](p2.x, p2.y); // pull back from end\n\n    pullBack = getPullBack(o2, specs) / 3;\n    nap.x -= mcosa * pullBack;\n    nap.y += msina * pullBack;\n    p2.x -= mcosa * (retract * 0.8 + pullBack);\n    p2.y += msina * (retract * 0.8 + pullBack);\n    var rx1 = nap.x - mcosa * retract * 0.8;\n    var ry1 = nap.y + msina * retract * 0.8;\n    var a1 = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](nap.x + mcosp * specs.shapes_arrowLength_2D / 3 - mcosa * retract, nap.y - msinp * specs.shapes_arrowLength_2D / 3 + msina * retract);\n    var a2 = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](nap.x - mcosp * specs.shapes_arrowLength_2D / 3 - mcosa * retract, nap.y + msinp * specs.shapes_arrowLength_2D / 3 + msina * retract);\n    var include1 = true,\n        include2 = true;\n\n    if (numElectron === 1) {\n      if (a1.distance(c1) > a2.distance(c1)) {\n        include2 = false;\n      } else {\n        include1 = false;\n      }\n    }\n\n    ctx.beginPath();\n    ctx.moveTo(nap.x, nap.y);\n\n    if (include2) {\n      ctx.lineTo(a2.x, a2.y);\n    }\n\n    ctx.lineTo(rx1, ry1);\n\n    if (include1) {\n      ctx.lineTo(a1.x, a1.y);\n    }\n\n    ctx.closePath();\n    ctx.fill();\n    ctx.stroke(); // bezier\n\n    ctx.beginPath();\n    ctx.moveTo(p1.x, p1.y);\n    ctx.bezierCurveTo(c1.x, c1.y, c2.x, c2.y, p2.x, p2.y);\n    ctx.stroke();\n    caches.push([p1, c1, c2, p2]);\n  };\n\n  d2.Pusher = function (o1, o2, numElectron) {\n    this.o1 = o1;\n    this.o2 = o2;\n    this.numElectron = numElectron ? numElectron : 1;\n  };\n\n  var _ = d2.Pusher.prototype = new d2._Shape();\n\n  _.drawDecorations = function (ctx, specs) {\n    if (this.isHover) {\n      var p1 = this.o1 instanceof _structures__WEBPACK_IMPORTED_MODULE_3__[\"Atom\"] ? new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](this.o1.x, this.o1.y) : this.o1.getCenter();\n      var p2 = this.o2 instanceof _structures__WEBPACK_IMPORTED_MODULE_3__[\"Atom\"] ? new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](this.o2.x, this.o2.y) : this.o2.getCenter();\n      var ps = [p1, p2];\n\n      for (var i = 0, ii = ps.length; i < ii; i++) {\n        var p = ps[i];\n        this.drawAnchor(ctx, specs, p, p === this.hoverPoint);\n      }\n    }\n  };\n\n  _.draw = function (ctx, specs) {\n    if (this.o1 && this.o2) {\n      ctx.strokeStyle = specs.shapes_color;\n      ctx.fillStyle = specs.shapes_color;\n      ctx.lineWidth = specs.shapes_lineWidth;\n      ctx.lineJoin = 'miter';\n      ctx.lineCap = 'butt';\n      var p1 = this.o1 instanceof _structures__WEBPACK_IMPORTED_MODULE_3__[\"Atom\"] ? new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](this.o1.x, this.o1.y) : this.o1.getCenter();\n      var p2 = this.o2 instanceof _structures__WEBPACK_IMPORTED_MODULE_3__[\"Atom\"] ? new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](this.o2.x, this.o2.y) : this.o2.getCenter();\n      var controlDist = 35;\n      var as1 = getPossibleAngles(this.o1);\n      var as2 = getPossibleAngles(this.o2);\n      var c1, c2;\n      var minDif = Infinity;\n\n      for (var i = 0, ii = as1.length; i < ii; i++) {\n        for (var j = 0, jj = as2.length; j < jj; j++) {\n          var c1c = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](p1.x + controlDist * m.cos(as1[i]), p1.y - controlDist * m.sin(as1[i]));\n          var c2c = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](p2.x + controlDist * m.cos(as2[j]), p2.y - controlDist * m.sin(as2[j]));\n          var dif = c1c.distance(c2c);\n\n          if (dif < minDif) {\n            minDif = dif;\n            c1 = c1c;\n            c2 = c2c;\n          }\n        }\n      }\n\n      this.caches = [];\n\n      if (this.numElectron === -1) {\n        var dist = p1.distance(p2) / 2;\n        var angle = p1.angle(p2);\n        var perp = angle + m.PI / 2;\n        var mcosa = m.cos(angle);\n        var msina = m.sin(angle);\n        var m1 = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](p1.x + (dist - 1) * mcosa, p1.y - (dist - 1) * msina);\n        var cm1 = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](m1.x + m.cos(perp + m.PI / 6) * controlDist, m1.y - m.sin(perp + m.PI / 6) * controlDist);\n        var m2 = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](p1.x + (dist + 1) * mcosa, p1.y - (dist + 1) * msina);\n        var cm2 = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](m2.x + m.cos(perp - m.PI / 6) * controlDist, m2.y - m.sin(perp - m.PI / 6) * controlDist);\n        drawPusher(ctx, specs, this.o1, m1, p1, c1, cm1, m1, 1, this.caches);\n        drawPusher(ctx, specs, this.o2, m2, p2, c2, cm2, m2, 1, this.caches);\n      } else {\n        if (_math__WEBPACK_IMPORTED_MODULE_0__[\"intersectLines\"](p1.x, p1.y, c1.x, c1.y, p2.x, p2.y, c2.x, c2.y)) {\n          var tmp = c1;\n          c1 = c2;\n          c2 = tmp;\n        } // try to clean up problems, like loops\n\n\n        var angle1 = c1.angle(p1);\n        var angle2 = c2.angle(p2);\n        var angleDif = m.max(angle1, angle2) - m.min(angle1, angle2);\n\n        if (m.abs(angleDif - m.PI) < .001 && this.o1.molCenter === this.o2.molCenter) {\n          // in the case where the control tangents are parallel\n          angle1 += m.PI / 2;\n          angle2 -= m.PI / 2;\n          c1.x = p1.x + controlDist * m.cos(angle1 + m.PI);\n          c1.y = p1.y - controlDist * m.sin(angle1 + m.PI);\n          c2.x = p2.x + controlDist * m.cos(angle2 + m.PI);\n          c2.y = p2.y - controlDist * m.sin(angle2 + m.PI);\n        }\n\n        drawPusher(ctx, specs, this.o1, this.o2, p1, c1, c2, p2, this.numElectron, this.caches);\n      }\n    }\n  };\n\n  _.getPoints = function () {\n    return [];\n  };\n\n  _.isOver = function (p, barrier) {\n    for (var i = 0, ii = this.caches.length; i < ii; i++) {\n      var r = _lib__WEBPACK_IMPORTED_MODULE_2__[\"jsBezier\"].distanceFromCurve(p, this.caches[i]);\n\n      if (r.distance < barrier) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n})();\n\n(function (undefined) {\n  'use strict';\n\n  var BOND = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Bond\"]();\n\n  d2.VAP = function (x, y) {\n    this.asterisk = new _structures__WEBPACK_IMPORTED_MODULE_3__[\"Atom\"]('O', x, y);\n    this.substituent;\n    this.bondType = 1;\n    this.attachments = [];\n  };\n\n  var _ = d2.VAP.prototype = new d2._Shape();\n\n  _.drawDecorations = function (ctx, specs) {\n    if (this.isHover || this.isSelected) {\n      ctx.strokeStyle = this.isHover ? specs.colorHover : specs.colorSelect;\n      ctx.lineWidth = 1.2;\n      var radius = 7;\n\n      if (this.hoverBond) {\n        var pi2 = 2 * m.PI;\n        var angle = (this.asterisk.angleForStupidCanvasArcs(this.hoverBond) + m.PI / 2) % pi2;\n        ctx.strokeStyle = this.isHover ? specs.colorHover : specs.colorSelect;\n        ctx.beginPath();\n        var angleTo = (angle + m.PI) % pi2;\n        angleTo = angleTo % (m.PI * 2);\n        ctx.arc(this.asterisk.x, this.asterisk.y, radius, angle, angleTo, false);\n        ctx.stroke();\n        ctx.beginPath();\n        angle += m.PI;\n        angleTo = (angle + m.PI) % pi2;\n        ctx.arc(this.hoverBond.x, this.hoverBond.y, radius, angle, angleTo, false);\n        ctx.stroke();\n      } else {\n        ctx.beginPath();\n        ctx.arc(this.asterisk.x, this.asterisk.y, radius, 0, m.PI * 2, false);\n        ctx.stroke();\n      }\n    }\n  };\n\n  _.draw = function (ctx, specs) {\n    // asterisk\n    ctx.strokeStyle = this.error ? specs.colorError : specs.shapes_color;\n    ctx.lineWidth = 1;\n    var length = 4;\n    var sqrt3 = m.sqrt(3) / 2;\n    ctx.beginPath();\n    ctx.moveTo(this.asterisk.x, this.asterisk.y - length);\n    ctx.lineTo(this.asterisk.x, this.asterisk.y + length);\n    ctx.moveTo(this.asterisk.x - sqrt3 * length, this.asterisk.y - length / 2);\n    ctx.lineTo(this.asterisk.x + sqrt3 * length, this.asterisk.y + length / 2);\n    ctx.moveTo(this.asterisk.x - sqrt3 * length, this.asterisk.y + length / 2);\n    ctx.lineTo(this.asterisk.x + sqrt3 * length, this.asterisk.y - length / 2);\n    ctx.stroke();\n    this.asterisk.textBounds = [];\n    this.asterisk.textBounds.push({\n      x: this.asterisk.x - length,\n      y: this.asterisk.y - length,\n      w: length * 2,\n      h: length * 2\n    });\n    var bcsave = specs.bonds_color;\n\n    if (this.error) {\n      specs.bonds_color = specs.colorError;\n    }\n\n    BOND.a1 = this.asterisk; // substituent bond\n\n    if (this.substituent) {\n      BOND.a2 = this.substituent;\n      BOND.bondOrder = this.bondType;\n      BOND.draw(ctx, specs);\n    } // attachment bonds\n\n\n    BOND.bondOrder = 0;\n\n    if (!this.error) {\n      specs.bonds_color = specs.shapes_color;\n    }\n\n    for (var i = 0, ii = this.attachments.length; i < ii; i++) {\n      BOND.a2 = this.attachments[i];\n      BOND.draw(ctx, specs);\n    }\n\n    specs.bonds_color = bcsave;\n  };\n\n  _.getPoints = function () {\n    return [this.asterisk];\n  };\n\n  _.isOver = function (p, barrier) {\n    return false;\n  };\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/structures/d2/index.js\n");

/***/ }),

/***/ "./src/ChemDoodle/structures/d3/index.js":
/*!***********************************************!*\
  !*** ./src/ChemDoodle/structures/d3/index.js ***!
  \***********************************************/
/*! exports provided: d3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d3\", function() { return d3; });\n/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Point */ \"./src/ChemDoodle/structures/Point.js\");\n/* harmony import */ var _Atom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Atom */ \"./src/ChemDoodle/structures/Atom.js\");\n/* harmony import */ var _Residue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Residue */ \"./src/ChemDoodle/structures/Residue.js\");\n/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../ChemDoodle */ \"./src/ChemDoodle/index.js\");\n/* harmony import */ var _extensions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../extensions */ \"./src/ChemDoodle/extensions/index.js\");\n/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../math */ \"./src/ChemDoodle/math/index.js\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib */ \"./src/ChemDoodle/lib/index.js\");\n\n\n\n\n\n\n\nvar m = Math;\nvar d3 = {};\n\n(function (d3, m, undefined) {\n  'use strict';\n\n  d3._Mesh = function () {};\n\n  var _ = d3._Mesh.prototype;\n\n  _.storeData = function (positionData, normalData, indexData) {\n    this.positionData = positionData;\n    this.normalData = normalData;\n    this.indexData = indexData;\n  };\n\n  _.setupBuffers = function (gl) {\n    this.vertexPositionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexPositionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.positionData), gl.STATIC_DRAW);\n    this.vertexPositionBuffer.itemSize = 3;\n    this.vertexPositionBuffer.numItems = this.positionData.length / 3;\n    this.vertexNormalBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexNormalBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.normalData), gl.STATIC_DRAW);\n    this.vertexNormalBuffer.itemSize = 3;\n    this.vertexNormalBuffer.numItems = this.normalData.length / 3;\n\n    if (this.indexData) {\n      this.vertexIndexBuffer = gl.createBuffer();\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.vertexIndexBuffer);\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(this.indexData), gl.STATIC_DRAW);\n      this.vertexIndexBuffer.itemSize = 1;\n      this.vertexIndexBuffer.numItems = this.indexData.length;\n    }\n\n    if (this.partitions) {\n      for (var i = 0, ii = this.partitions.length; i < ii; i++) {\n        var p = this.partitions[i];\n        var buffers = this.generateBuffers(gl, p.positionData, p.normalData, p.indexData);\n        p.vertexPositionBuffer = buffers[0];\n        p.vertexNormalBuffer = buffers[1];\n        p.vertexIndexBuffer = buffers[2];\n      }\n    }\n  };\n\n  _.generateBuffers = function (gl, positionData, normalData, indexData) {\n    var vertexPositionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexPositionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positionData), gl.STATIC_DRAW);\n    vertexPositionBuffer.itemSize = 3;\n    vertexPositionBuffer.numItems = positionData.length / 3;\n    var vertexNormalBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexNormalBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(normalData), gl.STATIC_DRAW);\n    vertexNormalBuffer.itemSize = 3;\n    vertexNormalBuffer.numItems = normalData.length / 3;\n    var vertexIndexBuffer;\n\n    if (indexData) {\n      vertexIndexBuffer = gl.createBuffer();\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndexBuffer);\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexData), gl.STATIC_DRAW);\n      vertexIndexBuffer.itemSize = 1;\n      vertexIndexBuffer.numItems = indexData.length;\n    }\n\n    return [vertexPositionBuffer, vertexNormalBuffer, vertexIndexBuffer];\n  };\n\n  _.bindBuffers = function (gl) {\n    if (!this.vertexPositionBuffer) {\n      this.setupBuffers(gl);\n    } // positions\n\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexPositionBuffer);\n    gl.vertexAttribPointer(gl.shader.vertexPositionAttribute, this.vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0); // normals\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexNormalBuffer);\n    gl.vertexAttribPointer(gl.shader.vertexNormalAttribute, this.vertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0);\n\n    if (this.vertexIndexBuffer) {\n      // indexes\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.vertexIndexBuffer);\n    }\n  };\n})(d3, m);\n\n(function (d3, undefined) {\n  'use strict';\n\n  d3._Measurement = function () {};\n\n  var _ = d3._Measurement.prototype = new d3._Mesh();\n\n  _.render = function (gl, specs) {\n    gl.shader.setMatrixUniforms(gl); // setting the vertex position buffer to undefined resets the buffers, so this shape can be dynamically updated with the molecule\n\n    if (specs.measurement_update_3D) {\n      this.vertexPositionBuffer = undefined;\n      this.text = undefined;\n    }\n\n    if (!this.vertexPositionBuffer) {\n      this.calculateData(specs);\n    }\n\n    this.bindBuffers(gl); // colors\n\n    gl.material.setDiffuseColor(gl, specs.shapes_color);\n    gl.lineWidth(specs.shapes_lineWidth); // render\n\n    gl.drawElements(gl.LINES, this.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n  };\n\n  _.renderText = function (gl, specs) {\n    gl.shader.setMatrixUniforms(gl); // render the text\n\n    if (!this.text) {\n      this.text = this.getText(specs);\n    }\n\n    var vertexData = {\n      position: [],\n      texCoord: [],\n      translation: []\n    };\n    gl.textImage.pushVertexData(this.text.value, this.text.pos, 1, vertexData);\n    gl.textMesh.storeData(gl, vertexData.position, vertexData.texCoord, vertexData.translation);\n    gl.textImage.useTexture(gl);\n    gl.textMesh.render(gl);\n  };\n})(d3);\n\n(function (ELEMENT, extensions, d3, math, m, m4, v3, undefined) {\n  'use strict';\n\n  d3.Angle = function (a1, a2, a3) {\n    this.a1 = a1;\n    this.a2 = a2;\n    this.a3 = a3;\n  };\n\n  var _ = d3.Angle.prototype = new d3._Measurement();\n\n  _.calculateData = function (specs) {\n    var positionData = [];\n    var normalData = [];\n    var indexData = [];\n    var dist1 = this.a2.distance3D(this.a1);\n    var dist2 = this.a2.distance3D(this.a3);\n    this.distUse = m.min(dist1, dist2) / 2; // data for the angle\n\n    this.vec1 = v3.normalize([this.a1.x - this.a2.x, this.a1.y - this.a2.y, this.a1.z - this.a2.z]);\n    this.vec2 = v3.normalize([this.a3.x - this.a2.x, this.a3.y - this.a2.y, this.a3.z - this.a2.z]);\n    this.angle = extensions.vec3AngleFrom(this.vec1, this.vec2);\n    var axis = v3.normalize(v3.cross(this.vec1, this.vec2, []));\n    var vec3 = v3.normalize(v3.cross(axis, this.vec1, []));\n    var bands = specs.measurement_angleBands_3D;\n\n    for (var i = 0; i <= bands; ++i) {\n      var theta = this.angle * i / bands;\n      var vecCos = v3.scale(this.vec1, m.cos(theta), []);\n      var vecSin = v3.scale(vec3, m.sin(theta), []);\n      var norm = v3.scale(v3.normalize(v3.add(vecCos, vecSin, [])), this.distUse);\n      positionData.push(this.a2.x + norm[0], this.a2.y + norm[1], this.a2.z + norm[2]);\n      normalData.push(0, 0, 0);\n\n      if (i < bands) {\n        indexData.push(i, i + 1);\n      }\n    }\n\n    this.storeData(positionData, normalData, indexData);\n  };\n\n  _.getText = function (specs) {\n    var vecCenter = v3.scale(v3.normalize(v3.add(this.vec1, this.vec2, [])), this.distUse + 0.3);\n    return {\n      pos: [this.a2.x + vecCenter[0], this.a2.y + vecCenter[1], this.a2.z + vecCenter[2]],\n      value: [math.angleBounds(this.angle, true).toFixed(2), \" \\xB0\"].join('')\n    };\n  };\n})(_ChemDoodle__WEBPACK_IMPORTED_MODULE_3__[\"ELEMENT\"], _extensions__WEBPACK_IMPORTED_MODULE_4__, d3, _math__WEBPACK_IMPORTED_MODULE_5__, m, _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat4\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"vec3\"]);\n\n(function (d3, m, undefined) {\n  'use strict';\n\n  d3.Arrow = function (radius, longitudeBands) {\n    var positionData = [];\n    var normalData = [];\n\n    for (var longNumber = 0; longNumber <= longitudeBands; longNumber++) {\n      var theta = longNumber * 2 * m.PI / longitudeBands;\n      var sinTheta = m.sin(theta);\n      var cosTheta = m.cos(theta);\n      var x = cosTheta;\n      var y = sinTheta;\n      normalData.push( // base cylinder\n      0, 0, -1, 0, 0, -1, // cylinder\n      x, y, 0, x, y, 0, // base cone\n      0, 0, -1, 0, 0, -1, // cone\n      x, y, 1, x, y, 1);\n      positionData.push( // base cylinder\n      0, 0, 0, radius * x, radius * y, 0, // cylinder\n      radius * x, radius * y, 0, radius * x, radius * y, 2, // base cone\n      radius * x, radius * y, 2, radius * x * 2, radius * y * 2, 2, // cone\n      radius * x * 2, radius * y * 2, 2, 0, 0, 3);\n    }\n\n    var indexData = [];\n\n    for (var i = 0; i < longitudeBands; i++) {\n      var offset = i * 8;\n\n      for (var j = 0, jj = 7; j < jj; j++) {\n        var first = j + offset;\n        var second = first + 1;\n        var third = first + jj + 2;\n        var forth = third - 1;\n        indexData.push(first, third, second, third, first, forth);\n      }\n    }\n\n    this.storeData(positionData, normalData, indexData);\n  };\n\n  d3.Arrow.prototype = new d3._Mesh();\n})(d3, m);\n\n(function (d3, m, undefined) {\n  'use strict';\n\n  d3.Box = function (width, height, depth) {\n    width /= 2;\n    depth /= 2;\n    var positionData = [];\n    var normalData = []; // top\n\n    positionData.push(width, height, -depth);\n    positionData.push(width, height, -depth);\n    positionData.push(-width, height, -depth);\n    positionData.push(width, height, depth);\n    positionData.push(-width, height, depth);\n    positionData.push(-width, height, depth);\n\n    for (var i = 6; i--; normalData.push(0, 1, 0)) {\n      ;\n    } // front\n\n\n    positionData.push(-width, height, depth);\n    positionData.push(-width, height, depth);\n    positionData.push(-width, 0, depth);\n    positionData.push(width, height, depth);\n    positionData.push(width, 0, depth);\n    positionData.push(width, 0, depth);\n\n    for (var i = 6; i--; normalData.push(0, 0, 1)) {\n      ;\n    } // right\n\n\n    positionData.push(width, height, depth);\n    positionData.push(width, height, depth);\n    positionData.push(width, 0, depth);\n    positionData.push(width, height, -depth);\n    positionData.push(width, 0, -depth);\n    positionData.push(width, 0, -depth);\n\n    for (var i = 6; i--; normalData.push(1, 0, 0)) {\n      ;\n    } // back\n\n\n    positionData.push(width, height, -depth);\n    positionData.push(width, height, -depth);\n    positionData.push(width, 0, -depth);\n    positionData.push(-width, height, -depth);\n    positionData.push(-width, 0, -depth);\n    positionData.push(-width, 0, -depth);\n\n    for (var i = 6; i--; normalData.push(0, 0, -1)) {\n      ;\n    } // left\n\n\n    positionData.push(-width, height, -depth);\n    positionData.push(-width, height, -depth);\n    positionData.push(-width, 0, -depth);\n    positionData.push(-width, height, depth);\n    positionData.push(-width, 0, depth);\n    positionData.push(-width, 0, depth);\n\n    for (var i = 6; i--; normalData.push(-1, 0, 0)) {\n      ;\n    } // bottom\n\n\n    positionData.push(-width, 0, depth);\n    positionData.push(-width, 0, depth);\n    positionData.push(-width, 0, -depth);\n    positionData.push(width, 0, depth);\n    positionData.push(width, 0, -depth);\n    positionData.push(width, 0, -depth);\n\n    for (var i = 6; i--; normalData.push(0, -1, 0)) {\n      ;\n    }\n\n    this.storeData(positionData, normalData);\n  };\n\n  d3.Box.prototype = new d3._Mesh();\n})(d3, m);\n\n(function (math, d3, v3, m4, m, undefined) {\n  'use strict';\n\n  d3.Camera = function () {\n    this.fieldOfView = 45;\n    this.aspect = 1;\n    this.near = 0.1;\n    this.far = 10000;\n    this.zoom = 1;\n    this.viewMatrix = m4.identity([]);\n    this.projectionMatrix = m4.identity([]);\n  };\n\n  var _ = d3.Camera.prototype;\n\n  _.perspectiveProjectionMatrix = function () {\n    var top = m.tan(this.fieldOfView / 360 * m.PI) * this.near * this.zoom;\n    var right = this.aspect * top;\n    return m4.frustum(-right, right, -top, top, this.near, this.far, this.projectionMatrix);\n  };\n\n  _.orthogonalProjectionMatrix = function () {\n    var top = m.tan(this.fieldOfView / 360 * m.PI) * ((this.far - this.near) / 2 + this.near) * this.zoom;\n    var right = this.aspect * top;\n    return m4.ortho(-right, right, -top, top, this.near, this.far, this.projectionMatrix);\n  };\n\n  _.updateProjectionMatrix = function (isPerspective) {\n    return isPerspective ? this.perspectiveProjectionMatrix() : this.orthogonalProjectionMatrix();\n  };\n\n  _.focalLength = function () {\n    return (this.far - this.near) / 2 + this.near;\n  };\n\n  _.zoomIn = function () {\n    this.zoom = m.min(this.zoom * 1.25, 200);\n  };\n\n  _.zoomOut = function () {\n    this.zoom = m.max(this.zoom / 1.25, 1 / 400);\n  };\n})(_math__WEBPACK_IMPORTED_MODULE_5__, d3, _lib__WEBPACK_IMPORTED_MODULE_6__[\"vec3\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat4\"], m);\n\n(function (d3, m, m4, undefined) {\n  'use strict';\n\n  d3.LineArrow = function () {\n    var d = 2.8;\n    var w = 0.1;\n    this.storeData([0, 0, -3, w, 0, -d, 0, 0, -3, -w, 0, -d, 0, 0, -3, 0, 0, 3, 0, 0, 3, w, 0, d, 0, 0, 3, -w, 0, d], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n  };\n\n  d3.LineArrow.prototype = new d3._Mesh();\n\n  d3.Compass = function (gl, specs) {\n    // setup text X Y Z\n    this.textImage = new d3.TextImage();\n    this.textImage.init(gl);\n    this.textImage.updateFont(gl, specs.text_font_size, specs.text_font_families, specs.text_font_bold, specs.text_font_italic, specs.text_font_stroke_3D);\n    this.textMesh = new d3.TextMesh();\n    this.textMesh.init(gl);\n    var screenRatioHeight = specs.compass_size_3D / gl.canvas.clientHeight;\n    var height = 3 / screenRatioHeight;\n    var tanTheta = m.tan(specs.projectionPerspectiveVerticalFieldOfView_3D / 360 * m.PI);\n    var depth = height / tanTheta;\n    var near = m.max(depth - height, 0.1);\n    var far = depth + height;\n    var aspec = gl.canvas.clientWidth / gl.canvas.clientHeight;\n    var fnProjection, z;\n\n    if (specs.projectionPerspective_3D) {\n      z = near;\n      fnProjection = m4.frustum;\n    } else {\n      z = depth;\n      fnProjection = m4.ortho;\n    }\n\n    var nearRatio = z / gl.canvas.clientHeight * 2 * tanTheta;\n    var top = tanTheta * z;\n    var bottom = -top;\n    var left = aspec * bottom;\n    var right = aspec * top;\n\n    if (specs.compass_type_3D === 0) {\n      var deltaX = -(gl.canvas.clientWidth - specs.compass_size_3D) / 2 + this.textImage.charHeight;\n      var deltaY = -(gl.canvas.clientHeight - specs.compass_size_3D) / 2 + this.textImage.charHeight;\n      var x = deltaX * nearRatio;\n      var y = deltaY * nearRatio;\n      left -= x;\n      right -= x;\n      bottom -= y;\n      top -= y;\n    }\n\n    this.projectionMatrix = fnProjection(left, right, bottom, top, near, far);\n    this.translationMatrix = m4.translate(m4.identity([]), [0, 0, -depth]); // vertex data for X Y Z text label\n\n    var vertexData = {\n      position: [],\n      texCoord: [],\n      translation: []\n    }; // it need to auto calculated somehow\n\n    var textPos = 3.5;\n    this.textImage.pushVertexData('X', [textPos, 0, 0], 0, vertexData);\n    this.textImage.pushVertexData('Y', [0, textPos, 0], 0, vertexData);\n    this.textImage.pushVertexData('Z', [0, 0, textPos], 0, vertexData);\n    this.textMesh.storeData(gl, vertexData.position, vertexData.texCoord, vertexData.translation);\n  };\n\n  var _ = d3.Compass.prototype;\n\n  _.renderArrow = function (gl, type, color, mvMatrix) {\n    gl.material.setDiffuseColor(gl, color);\n    gl.shader.setModelViewMatrix(gl, mvMatrix);\n\n    if (type === 1) {\n      gl.drawArrays(gl.LINES, 0, gl.lineArrowBuffer.vertexPositionBuffer.numItems);\n    } else {\n      gl.drawElements(gl.TRIANGLES, gl.arrowBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n    }\n  };\n\n  _.render = function (gl, specs) {\n    gl.shader.setProjectionMatrix(gl, this.projectionMatrix);\n    specs.compass_type_3D === 1 ? gl.lineArrowBuffer.bindBuffers(gl) : gl.arrowBuffer.bindBuffers(gl);\n    gl.material.setTempColors(gl, specs.bonds_materialAmbientColor_3D, undefined, specs.bonds_materialSpecularColor_3D, specs.bonds_materialShininess_3D);\n    var modelMatrix = m4.multiply(this.translationMatrix, gl.rotationMatrix, []);\n    var angle = m.PI / 2; // x - axis\n\n    this.renderArrow(gl, specs.compass_type_3D, specs.compass_axisXColor_3D, m4.rotateY(modelMatrix, angle, [])); // y - axis\n\n    this.renderArrow(gl, specs.compass_type_3D, specs.compass_axisYColor_3D, m4.rotateX(modelMatrix, -angle, [])); // z - axis\n\n    this.renderArrow(gl, specs.compass_type_3D, specs.compass_axisZColor_3D, modelMatrix);\n  };\n\n  _.renderAxis = function (gl) {\n    gl.shader.setProjectionMatrix(gl, this.projectionMatrix);\n    var mvMatrix = m4.multiply(this.translationMatrix, gl.rotationMatrix, []);\n    gl.shader.setModelViewMatrix(gl, mvMatrix);\n    this.textImage.useTexture(gl);\n    this.textMesh.render(gl);\n  };\n})(d3, m, _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat4\"]);\n\n(function (d3, m, undefined) {\n  'use strict';\n\n  d3.Cylinder = function (radius, height, bands, closed) {\n    var positionData = [];\n    var normalData = [];\n\n    if (closed) {\n      for (var i = 0; i <= bands; i++) {\n        var theta = i % bands * 2 * m.PI / bands;\n        var cosTheta = m.cos(theta);\n        var sinTheta = m.sin(theta);\n        normalData.push(0, -1, 0);\n        positionData.push(0, 0, 0);\n        normalData.push(0, -1, 0);\n        positionData.push(radius * cosTheta, 0, radius * sinTheta);\n      }\n\n      for (var i = 0; i <= bands; i++) {\n        var theta = i % bands * 2 * m.PI / bands;\n        var cosTheta = m.cos(theta);\n        var sinTheta = m.sin(theta);\n        normalData.push(cosTheta, 0, sinTheta);\n        positionData.push(radius * cosTheta, 0, radius * sinTheta);\n        normalData.push(cosTheta, 0, sinTheta);\n        positionData.push(radius * cosTheta, height, radius * sinTheta);\n      }\n\n      for (var i = 0; i <= bands; i++) {\n        var theta = i % bands * 2 * m.PI / bands;\n        var cosTheta = m.cos(theta);\n        var sinTheta = m.sin(theta);\n        normalData.push(0, 1, 0);\n        positionData.push(radius * cosTheta, height, radius * sinTheta);\n        normalData.push(0, 1, 0);\n        positionData.push(0, height, 0);\n      }\n    } else {\n      for (var i = 0; i < bands; i++) {\n        var theta = i * 2 * m.PI / bands;\n        var cosTheta = m.cos(theta);\n        var sinTheta = m.sin(theta);\n        normalData.push(cosTheta, 0, sinTheta);\n        positionData.push(radius * cosTheta, 0, radius * sinTheta);\n        normalData.push(cosTheta, 0, sinTheta);\n        positionData.push(radius * cosTheta, height, radius * sinTheta);\n      }\n\n      normalData.push(1, 0, 0);\n      positionData.push(radius, 0, 0);\n      normalData.push(1, 0, 0);\n      positionData.push(radius, height, 0);\n    }\n\n    this.storeData(positionData, normalData);\n  };\n\n  d3.Cylinder.prototype = new d3._Mesh();\n})(d3, m);\n\n(function (ELEMENT, d3, m, v3, undefined) {\n  'use strict';\n\n  d3.Distance = function (a1, a2, node, offset) {\n    this.a1 = a1;\n    this.a2 = a2;\n    this.node = node;\n    this.offset = offset ? offset : 0;\n  };\n\n  var _ = d3.Distance.prototype = new d3._Measurement();\n\n  _.calculateData = function (specs) {\n    var positionData = [this.a1.x, this.a1.y, this.a1.z, this.a2.x, this.a2.y, this.a2.z];\n\n    if (this.node) {\n      var r1 = specs.atoms_useVDWDiameters_3D ? ELEMENT[this.a1.label].vdWRadius * specs.atoms_vdwMultiplier_3D : specs.atoms_sphereDiameter_3D / 2;\n      var r2 = specs.atoms_useVDWDiameters_3D ? ELEMENT[this.a2.label].vdWRadius * specs.atoms_vdwMultiplier_3D : specs.atoms_sphereDiameter_3D / 2;\n      this.move = this.offset + m.max(r1, r2);\n      this.displacement = [(this.a1.x + this.a2.x) / 2 - this.node.x, (this.a1.y + this.a2.y) / 2 - this.node.y, (this.a1.z + this.a2.z) / 2 - this.node.z];\n      v3.normalize(this.displacement);\n      var change = v3.scale(this.displacement, this.move, []);\n      positionData[0] += change[0];\n      positionData[1] += change[1];\n      positionData[2] += change[2];\n      positionData[3] += change[0];\n      positionData[4] += change[1];\n      positionData[5] += change[2];\n    }\n\n    var normalData = [0, 0, 0, 0, 0, 0];\n    var indexData = [0, 1];\n    this.storeData(positionData, normalData, indexData);\n  };\n\n  _.getText = function (specs) {\n    var dist = this.a1.distance3D(this.a2);\n    var center = [(this.a1.x + this.a2.x) / 2, (this.a1.y + this.a2.y) / 2, (this.a1.z + this.a2.z) / 2];\n\n    if (this.node) {\n      var change = v3.scale(this.displacement, this.move + .1, []);\n      center[0] += change[0];\n      center[1] += change[1];\n      center[2] += change[2];\n    }\n\n    return {\n      pos: center,\n      value: [dist.toFixed(2), \" \\u212B\"].join('')\n    };\n  };\n})(_ChemDoodle__WEBPACK_IMPORTED_MODULE_3__[\"ELEMENT\"], d3, m, _lib__WEBPACK_IMPORTED_MODULE_6__[\"vec3\"]);\n\n(function (math, d3, v3, undefined) {\n  'use strict';\n\n  d3.Fog = function (color, fogStart, fogEnd, density) {\n    this.fogScene(color, fogStart, fogEnd, density);\n  };\n\n  var _ = d3.Fog.prototype;\n\n  _.fogScene = function (color, fogStart, fogEnd, density) {\n    this.colorRGB = math.getRGB(color, 1);\n    this.fogStart = fogStart;\n    this.fogEnd = fogEnd;\n    this.density = density;\n  };\n})(_math__WEBPACK_IMPORTED_MODULE_5__, d3, _lib__WEBPACK_IMPORTED_MODULE_6__[\"vec3\"]);\n\n(function (ELEMENT, d3, undefined) {\n  d3.Label = function (textImage) {};\n\n  var _ = d3.Label.prototype;\n\n  _.updateVerticesBuffer = function (gl, molecules, specs) {\n    for (var i = 0, ii = molecules.length; i < ii; i++) {\n      var molecule = molecules[i];\n      var moleculeLabel = molecule.labelMesh;\n      var atoms = molecule.atoms;\n      var vertexData = {\n        position: [],\n        texCoord: [],\n        translation: []\n      };\n      var isMacro = atoms.length > 0 && atoms[0].hetatm != undefined;\n\n      for (var j = 0, jj = atoms.length; j < jj; j++) {\n        var atom = atoms[j];\n        var atomLabel = atom.label;\n        var zDepth = 0.05; // Sphere or Ball and Stick\n\n        if (specs.atoms_useVDWDiameters_3D) {\n          var add = ELEMENT[atomLabel].vdWRadius * specs.atoms_vdwMultiplier_3D;\n\n          if (add === 0) {\n            add = 1;\n          }\n\n          zDepth += add;\n        } // if Stick or Wireframe\n        else if (specs.atoms_sphereDiameter_3D) {\n            zDepth += specs.atoms_sphereDiameter_3D / 2 * 1.5;\n          }\n\n        if (isMacro) {\n          if (!atom.hetatm) {\n            if (!specs.macro_displayAtoms) {\n              continue;\n            }\n          } else if (atom.isWater) {\n            if (!specs.macro_showWaters) {\n              continue;\n            }\n          }\n        }\n\n        gl.textImage.pushVertexData(atom.altLabel ? atom.altLabel : atom.label, [atom.x, atom.y, atom.z], zDepth, vertexData);\n      }\n\n      var chains = molecule.chains;\n\n      if (chains && (specs.proteins_displayRibbon || specs.proteins_displayBackbone)) {\n        for (var j = 0, jj = chains.length; j < jj; j++) {\n          var chain = chains[j];\n\n          for (var k = 0, kk = chain.length; k < kk; k++) {\n            var residue = chain[k];\n\n            if (residue.name) {\n              var atom = residue.cp1;\n              gl.textImage.pushVertexData(residue.name, [atom.x, atom.y, atom.z], 2, vertexData);\n            }\n          }\n        }\n      }\n\n      moleculeLabel.storeData(gl, vertexData.position, vertexData.texCoord, vertexData.translation, vertexData.zDepth);\n    }\n  };\n\n  _.render = function (gl, specs, molecules) {\n    // use projection for shader text.\n    gl.shader.setMatrixUniforms(gl);\n    gl.textImage.useTexture(gl);\n\n    for (var i = 0, ii = molecules.length; i < ii; i++) {\n      if (molecules[i].labelMesh) {\n        molecules[i].labelMesh.render(gl);\n      }\n    }\n  };\n})(_ChemDoodle__WEBPACK_IMPORTED_MODULE_3__[\"ELEMENT\"], d3);\n\n(function (d3, m, undefined) {\n  'use strict';\n\n  d3.Sphere = function (radius, latitudeBands, longitudeBands) {\n    var positionData = [];\n    var normalData = [];\n\n    for (var latNumber = 0; latNumber <= latitudeBands; latNumber++) {\n      var theta = latNumber * m.PI / latitudeBands;\n      var sinTheta = m.sin(theta);\n      var cosTheta = m.cos(theta);\n\n      for (var longNumber = 0; longNumber <= longitudeBands; longNumber++) {\n        var phi = longNumber * 2 * m.PI / longitudeBands;\n        var sinPhi = m.sin(phi);\n        var cosPhi = m.cos(phi);\n        var x = cosPhi * sinTheta;\n        var y = cosTheta;\n        var z = sinPhi * sinTheta;\n        normalData.push(x, y, z);\n        positionData.push(radius * x, radius * y, radius * z);\n      }\n    }\n\n    var indexData = [];\n    longitudeBands += 1;\n\n    for (var latNumber = 0; latNumber < latitudeBands; latNumber++) {\n      for (var longNumber = 0; longNumber < longitudeBands; longNumber++) {\n        var first = latNumber * longitudeBands + longNumber % longitudeBands;\n        var second = first + longitudeBands;\n        indexData.push(first, first + 1, second);\n\n        if (longNumber < longitudeBands - 1) {\n          indexData.push(second, first + 1, second + 1);\n        }\n      }\n    }\n\n    this.storeData(positionData, normalData, indexData);\n  };\n\n  d3.Sphere.prototype = new d3._Mesh();\n})(d3, m);\n\n(function (RESIDUE, d3, m, v3, undefined) {\n  'use strict';\n\n  var loadPartition = function loadPartition(gl, p) {\n    // positions\n    gl.bindBuffer(gl.ARRAY_BUFFER, p.vertexPositionBuffer);\n    gl.vertexAttribPointer(gl.shader.vertexPositionAttribute, p.vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0); // normals\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, p.vertexNormalBuffer);\n    gl.vertexAttribPointer(gl.shader.vertexNormalAttribute, p.vertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0); // indexes\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, p.vertexIndexBuffer);\n  };\n\n  function SubRibbon(entire, name, indexes, pi) {\n    this.entire = entire;\n    this.name = name;\n    this.indexes = indexes;\n    this.pi = pi;\n  }\n\n  var _2 = SubRibbon.prototype; // NOTE: To use rainbow coloring for chains, it needs coloring each residue with total residue count\n  // and current index residue in chain parameters.\n\n  _2.getColor = function (specs) {\n    if (specs.macro_colorByChain) {\n      return this.entire.chainColor;\n    } else if (this.name) {\n      return this.getResidueColor(RESIDUE[this.name] ? this.name : '*', specs);\n    } else if (this.helix) {\n      return this.entire.front ? specs.proteins_ribbonCartoonHelixPrimaryColor : specs.proteins_ribbonCartoonHelixSecondaryColor;\n    } else if (this.sheet) {\n      return specs.proteins_ribbonCartoonSheetColor;\n    } else {\n      return this.entire.front ? specs.proteins_primaryColor : specs.proteins_secondaryColor;\n    }\n  };\n\n  _2.getResidueColor = function (name, specs) {\n    var r = RESIDUE[name];\n\n    if (specs.proteins_residueColor === 'shapely') {\n      return r.shapelyColor;\n    } else if (specs.proteins_residueColor === 'amino') {\n      return r.aminoColor;\n    } else if (specs.proteins_residueColor === 'polarity') {\n      if (r.polar) {\n        return '#C10000';\n      } else {\n        return '#FFFFFF';\n      }\n    } else if (specs.proteins_residueColor === 'acidity') {\n      if (r.acidity === 1) {\n        return '#0000FF';\n      } else if (r.acidity === -1) {\n        return '#FF0000';\n      } else if (r.polar) {\n        return '#FFFFFF';\n      } else {\n        return '#773300';\n      }\n    }\n\n    return '#FFFFFF';\n  };\n\n  _2.render = function (gl, specs, noColor) {\n    if (this.entire.partitions && this.pi !== this.entire.partitions.lastRender) {\n      loadPartition(gl, this.entire.partitions[this.pi]);\n      this.entire.partitions.lastRender = this.pi;\n    }\n\n    if (!this.vertexIndexBuffer) {\n      this.vertexIndexBuffer = gl.createBuffer();\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.vertexIndexBuffer);\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(this.indexes), gl.STATIC_DRAW);\n      this.vertexIndexBuffer.itemSize = 1;\n      this.vertexIndexBuffer.numItems = this.indexes.length;\n    } // indexes\n\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.vertexIndexBuffer); // colors\n\n    if (!noColor && specs.proteins_residueColor !== 'rainbow') {\n      gl.material.setDiffuseColor(gl, this.getColor(specs));\n    } // render\n\n\n    gl.drawElements(gl.TRIANGLES, this.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n  };\n\n  d3.Ribbon = function (chain, offset, cartoon) {\n    // ribbon meshes build front to back, not side to side, so keep this in\n    // mind\n    var lineSegmentNum = chain[0].lineSegments.length;\n    var lineSegmentLength = chain[0].lineSegments[0].length;\n    this.partitions = [];\n    this.partitions.lastRender = 0;\n    var currentPartition;\n    this.front = offset > 0; // calculate vertex and normal points\n\n    for (var i = 0, ii = chain.length; i < ii; i++) {\n      if (!currentPartition || currentPartition.positionData.length > 65000) {\n        if (this.partitions.length > 0) {\n          i--;\n        }\n\n        currentPartition = {\n          count: 0,\n          positionData: [],\n          normalData: []\n        };\n        this.partitions.push(currentPartition);\n      }\n\n      var residue = chain[i];\n      currentPartition.count++;\n\n      for (var j = 0; j < lineSegmentNum; j++) {\n        var lineSegment = cartoon ? residue.lineSegmentsCartoon[j] : residue.lineSegments[j];\n        var doSide1 = j === 0;\n        var doSide2 = false;\n\n        for (var k = 0; k < lineSegmentLength; k++) {\n          var a = lineSegment[k]; // normals\n\n          var abovei = i;\n          var abovek = k + 1;\n\n          if (i === chain.length - 1 && k === lineSegmentLength - 1) {\n            abovek--;\n          } else if (k === lineSegmentLength - 1) {\n            abovei++;\n            abovek = 0;\n          }\n\n          var above = cartoon ? chain[abovei].lineSegmentsCartoon[j][abovek] : chain[abovei].lineSegments[j][abovek];\n          var negate = false;\n          var nextj = j + 1;\n\n          if (j === lineSegmentNum - 1) {\n            nextj -= 2;\n            negate = true;\n          }\n\n          var side = cartoon ? residue.lineSegmentsCartoon[nextj][k] : residue.lineSegments[nextj][k];\n          var toAbove = [above.x - a.x, above.y - a.y, above.z - a.z];\n          var toSide = [side.x - a.x, side.y - a.y, side.z - a.z];\n          var normal = v3.cross(toAbove, toSide, []); // positions\n\n          if (k === 0) {\n            // tip\n            v3.normalize(toAbove);\n            v3.scale(toAbove, -1);\n            currentPartition.normalData.push(toAbove[0], toAbove[1], toAbove[2]);\n            currentPartition.positionData.push(a.x, a.y, a.z);\n          }\n\n          if (doSide1 || doSide2) {\n            // sides\n            v3.normalize(toSide);\n            v3.scale(toSide, -1);\n            currentPartition.normalData.push(toSide[0], toSide[1], toSide[2]);\n            currentPartition.positionData.push(a.x, a.y, a.z);\n\n            if (doSide1 && k === lineSegmentLength - 1) {\n              doSide1 = false;\n              k = -1;\n            }\n          } else {\n            // center strips\n            v3.normalize(normal);\n\n            if (negate && !this.front || !negate && this.front) {\n              v3.scale(normal, -1);\n            }\n\n            currentPartition.normalData.push(normal[0], normal[1], normal[2]);\n            v3.scale(normal, m.abs(offset));\n            currentPartition.positionData.push(a.x + normal[0], a.y + normal[1], a.z + normal[2]);\n\n            if (j === lineSegmentNum - 1 && k === lineSegmentLength - 1) {\n              doSide2 = true;\n              k = -1;\n            }\n          }\n\n          if (k === -1 || k === lineSegmentLength - 1) {\n            // end\n            v3.normalize(toAbove);\n            currentPartition.normalData.push(toAbove[0], toAbove[1], toAbove[2]);\n            currentPartition.positionData.push(a.x, a.y, a.z);\n          }\n        }\n      }\n    } // build mesh connectivity\n    // add 2 to lineSegmentNum and lineSegmentLength to account for sides\n    // and ends\n\n\n    lineSegmentNum += 2;\n    lineSegmentLength += 2;\n    this.segments = [];\n    this.partitionSegments = [];\n\n    for (var n = 0, nn = this.partitions.length; n < nn; n++) {\n      var currentPartition = this.partitions[n];\n      var partitionSegmentIndexData = [];\n\n      for (var i = 0, ii = currentPartition.count - 1; i < ii; i++) {\n        var chainIndex = i;\n\n        for (var j = 0; j < n; j++) {\n          chainIndex += this.partitions[j].count - 1;\n        }\n\n        var c = chain[chainIndex];\n        var residueIndexStart = i * lineSegmentNum * lineSegmentLength;\n        var individualIndexData = [];\n\n        for (var j = 0, jj = lineSegmentNum - 1; j < jj; j++) {\n          var segmentIndexStart = residueIndexStart + j * lineSegmentLength;\n\n          for (var k = 0; k < lineSegmentLength - 1; k++) {\n            var nextRes = 1;\n\n            if (i === ii) {\n              nextRes = 0;\n            }\n\n            var add = [segmentIndexStart + k, segmentIndexStart + lineSegmentLength + k, segmentIndexStart + lineSegmentLength + k + nextRes, segmentIndexStart + k, segmentIndexStart + k + nextRes, segmentIndexStart + lineSegmentLength + k + nextRes];\n\n            if (k !== lineSegmentLength - 1) {\n              if (this.front) {\n                individualIndexData.push(add[0], add[1], add[2], add[3], add[5], add[4]);\n              } else {\n                individualIndexData.push(add[0], add[2], add[1], add[3], add[4], add[5]);\n              }\n            }\n\n            if (k === lineSegmentLength - 2 && !(i === currentPartition.count - 2 && n === this.partitions.length - 1)) {\n              // jump the gap, the other mesh points will be\n              // covered,\n              // so no need to explicitly skip them\n              var jump = lineSegmentNum * lineSegmentLength - k;\n              add[2] += jump;\n              add[4] += jump;\n              add[5] += jump;\n            }\n\n            if (this.front) {\n              partitionSegmentIndexData.push(add[0], add[1], add[2], add[3], add[5], add[4]);\n            } else {\n              partitionSegmentIndexData.push(add[0], add[2], add[1], add[3], add[4], add[5]);\n            }\n          }\n        }\n\n        if (cartoon && c.split) {\n          var sr = new SubRibbon(this, undefined, partitionSegmentIndexData, n);\n          sr.helix = c.helix;\n          sr.sheet = c.sheet;\n          this.partitionSegments.push(sr);\n          partitionSegmentIndexData = [];\n        }\n\n        this.segments.push(new SubRibbon(this, c.name, individualIndexData, n));\n      }\n\n      var sr = new SubRibbon(this, undefined, partitionSegmentIndexData, n);\n      sr.helix = c.helix;\n      sr.sheet = c.sheet;\n      this.partitionSegments.push(sr);\n    }\n\n    this.storeData(this.partitions[0].positionData, this.partitions[0].normalData);\n\n    if (this.partitions.length === 1) {\n      // clear partitions to reduce overhead\n      this.partitions = undefined;\n    }\n  };\n\n  var _ = d3.Ribbon.prototype = new d3._Mesh();\n\n  _.render = function (gl, specs) {\n    this.bindBuffers(gl); // colors\n\n    var color = specs.macro_colorByChain ? this.chainColor : undefined;\n\n    if (!color) {\n      color = this.front ? specs.proteins_primaryColor : specs.proteins_secondaryColor;\n    }\n\n    gl.material.setDiffuseColor(gl, color);\n\n    for (var i = 0, ii = this.partitionSegments.length; i < ii; i++) {\n      this.partitionSegments[i].render(gl, specs, !specs.proteins_ribbonCartoonize);\n    }\n  };\n})(_ChemDoodle__WEBPACK_IMPORTED_MODULE_3__[\"RESIDUE\"], d3, m, _lib__WEBPACK_IMPORTED_MODULE_6__[\"vec3\"]);\n\n(function (math, d3, v3, m4, undefined) {\n  'use strict';\n\n  d3.Light = function (diffuseColor, specularColor, direction) {\n    this.camera = new d3.Camera();\n    this.lightScene(diffuseColor, specularColor, direction);\n  };\n\n  var _ = d3.Light.prototype;\n\n  _.lightScene = function (diffuseColor, specularColor, direction) {\n    this.diffuseRGB = math.getRGB(diffuseColor, 1);\n    this.specularRGB = math.getRGB(specularColor, 1);\n    this.direction = direction;\n    this.updateView();\n  };\n\n  _.updateView = function () {\n    var lightDir = v3.normalize(this.direction, []);\n    var eyePos = v3.scale(lightDir, (this.camera.near - this.camera.far) / 2 - this.camera.near, []);\n    var up = v3.equal(lightDir, [0, 1, 0]) ? [0, 0, 1] : [0, 1, 0];\n    m4.lookAt(eyePos, [0, 0, 0], up, this.camera.viewMatrix);\n    this.camera.orthogonalProjectionMatrix();\n  };\n})(_math__WEBPACK_IMPORTED_MODULE_5__, d3, _lib__WEBPACK_IMPORTED_MODULE_6__[\"vec3\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat4\"]);\n\n(function (d3, undefined) {\n  'use strict';\n\n  d3.Line = function () {\n    this.storeData([0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0]);\n  };\n\n  d3.Line.prototype = new d3._Mesh();\n})(d3);\n\n(function (math, d3, undefined) {\n  'use strict';\n\n  d3.Material = function () {};\n\n  var _ = d3.Material.prototype;\n\n  _.setTempColors = function (gl, ambientColor, diffuseColor, specularColor, shininess) {\n    if (ambientColor) {\n      gl.shader.setMaterialAmbientColor(gl, math.getRGB(ambientColor, 1));\n    }\n\n    if (diffuseColor) {\n      gl.shader.setMaterialDiffuseColor(gl, math.getRGB(diffuseColor, 1));\n    }\n\n    if (specularColor) {\n      gl.shader.setMaterialSpecularColor(gl, math.getRGB(specularColor, 1));\n    }\n\n    gl.shader.setMaterialShininess(gl, shininess);\n    gl.shader.setMaterialAlpha(gl, 1);\n  };\n\n  _.setDiffuseColor = function (gl, diffuseColor) {\n    gl.shader.setMaterialDiffuseColor(gl, math.getRGB(diffuseColor, 1));\n  };\n\n  _.setAlpha = function (gl, alpha) {\n    gl.shader.setMaterialAlpha(gl, alpha);\n  };\n})(_math__WEBPACK_IMPORTED_MODULE_5__, d3);\n\n(function (d3, math, document, undefined) {\n  'use strict';\n\n  d3.Picker = function () {};\n\n  var _ = d3.Picker.prototype;\n\n  _.init = function (gl) {\n    // setup for picking system\n    this.framebuffer = gl.createFramebuffer(); // set pick texture\n\n    var texture2D = gl.createTexture();\n    var renderbuffer = gl.createRenderbuffer();\n    gl.bindTexture(gl.TEXTURE_2D, texture2D);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer); // set framebuffer and bind the texture and renderbuffer\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture2D, 0);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  };\n\n  _.setDimension = function (gl, width, height) {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer); // get binded depth attachment renderbuffer\n\n    var renderbuffer = gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME);\n\n    if (gl.isRenderbuffer(renderbuffer)) {\n      // set renderbuffer dimension\n      gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\n      gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n      gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    } // get binded color attachment texture 2d\n\n\n    var texture2D = gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME);\n\n    if (gl.isTexture(texture2D)) {\n      // set texture dimension\n      gl.bindTexture(gl.TEXTURE_2D, texture2D);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  };\n})(d3, _math__WEBPACK_IMPORTED_MODULE_5__, document);\n\n(function (d3, m, undefined) {\n  'use strict';\n\n  d3.Pill = function (radius, height, latitudeBands, longitudeBands) {\n    var capHeightScale = 1;\n    var capDiameter = 2 * radius;\n    height -= capDiameter;\n\n    if (height < 0) {\n      capHeightScale = 0;\n      height += capDiameter;\n    } else if (height < capDiameter) {\n      capHeightScale = height / capDiameter;\n      height = capDiameter;\n    } // update latitude and logintude band for two caps.\n    // latitudeBands *= 2;\n    // longitudeBands *= 2;\n\n\n    var positionData = [];\n    var normalData = [];\n\n    for (var latNumber = 0; latNumber <= latitudeBands; latNumber++) {\n      var theta = latNumber * m.PI / latitudeBands;\n      var sinTheta = m.sin(theta);\n      var cosTheta = m.cos(theta) * capHeightScale;\n\n      for (var longNumber = 0; longNumber <= longitudeBands; longNumber++) {\n        var phi = longNumber * 2 * m.PI / longitudeBands;\n        var sinPhi = m.sin(phi);\n        var cosPhi = m.cos(phi);\n        var x = cosPhi * sinTheta;\n        var y = cosTheta;\n        var z = sinPhi * sinTheta;\n        normalData.push(x, y, z);\n        positionData.push(radius * x, radius * y + (latNumber < latitudeBands / 2 ? height : 0), radius * z);\n      }\n    }\n\n    var indexData = [];\n    longitudeBands += 1;\n\n    for (var latNumber = 0; latNumber < latitudeBands; latNumber++) {\n      for (var longNumber = 0; longNumber < longitudeBands; longNumber++) {\n        var first = latNumber * longitudeBands + longNumber % longitudeBands;\n        var second = first + longitudeBands;\n        indexData.push(first, first + 1, second);\n\n        if (longNumber < longitudeBands - 1) {\n          indexData.push(second, first + 1, second + 1);\n        }\n      }\n    }\n\n    this.storeData(positionData, normalData, indexData);\n  };\n\n  d3.Pill.prototype = new d3._Mesh();\n})(d3, m);\n\n(function (extensions, RESIDUE, d3, m, m4, v3, math, undefined) {\n  'use strict';\n\n  function createDummyResidue(x, y, z) {\n    var dummyRes = new _Residue__WEBPACK_IMPORTED_MODULE_2__[\"default\"](-1);\n    dummyRes.cp1 = dummyRes.cp2 = new _Atom__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('', x, y, z);\n    return dummyRes;\n  }\n\n  function Pipe(a1, a2) {\n    this.a1 = a1;\n    this.a2 = a2;\n  }\n\n  ;\n  var _ = Pipe.prototype;\n\n  _.render = function (gl, specs) {\n    var p1 = this.a1;\n    var p2 = this.a2;\n    var height = 1.001 * p1.distance3D(p2);\n    var radiusScale = specs.proteins_cylinderHelixDiameter / 2;\n    var scaleVector = [radiusScale, height, radiusScale];\n    var transform = m4.translate(m4.identity(), [p1.x, p1.y, p1.z]);\n    var y = [0, 1, 0];\n    var ang = 0;\n    var axis;\n\n    if (p1.x === p2.x && p1.z === p2.z) {\n      axis = [0, 0, 1];\n\n      if (p2.y < p1.y) {\n        ang = m.PI;\n      }\n    } else {\n      var a2b = [p2.x - p1.x, p2.y - p1.y, p2.z - p1.z];\n      ang = extensions.vec3AngleFrom(y, a2b);\n      axis = v3.cross(y, a2b, []);\n    }\n\n    if (ang !== 0) {\n      m4.rotate(transform, ang, axis);\n    }\n\n    m4.scale(transform, scaleVector);\n    gl.shader.setMatrixUniforms(gl, transform);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, gl.cylinderClosedBuffer.vertexPositionBuffer.numItems);\n  };\n\n  function Plank(a1, a2, vx) {\n    this.a1 = a1;\n    this.a2 = a2;\n    this.vx = vx;\n  }\n\n  ;\n  var _ = Plank.prototype;\n\n  _.render = function (gl, specs) {\n    if (this.specs) {\n      specs = this.specs;\n    } // this is the elongation vector for the plank\n\n\n    var height = 1.001 * this.a1.distance3D(this.a2);\n    var diry = [this.a2.x - this.a1.x, this.a2.y - this.a1.y, this.a2.z - this.a1.z];\n    var dirz = v3.cross(diry, this.vx, []);\n    var dirx = v3.cross(dirz, diry, []);\n    v3.normalize(dirx);\n    v3.normalize(diry);\n    v3.normalize(dirz);\n    var transform = [dirx[0], dirx[1], dirx[2], 0, diry[0], diry[1], diry[2], 0, dirz[0], dirz[1], dirz[2], 0, this.a1.x, this.a1.y, this.a1.z, 1];\n    var scaleVector = [specs.proteins_plankSheetWidth, height, specs.proteins_tubeThickness];\n    m4.scale(transform, scaleVector);\n    gl.shader.setMatrixUniforms(gl, transform);\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, gl.boxBuffer.vertexPositionBuffer.numItems);\n  };\n\n  d3.PipePlank = function (rs, specs) {\n    this.tubes = [];\n    this.helixCylinders = [];\n    this.sheetPlanks = [];\n    this.chainColor = rs.chainColor;\n    var chainNoSS = [];\n    var noSSResidues = [];\n    var helixResidues = [];\n    var sheetResidues = []; // the first residue just a dummy residue.\n    // so at beginning, the secondary structure of second residue must be check\n\n    if (rs.length > 1) {\n      var r0 = rs[0];\n      var r1 = rs[1];\n\n      if (r1.helix) {\n        helixResidues.push(r0);\n      } else if (r1.sheet) {\n        sheetResidues.push(r0);\n      } else {\n        noSSResidues.push(r0);\n      }\n    } // iterate residues\n\n\n    for (var i = 1, ii = rs.length - 1; i <= ii; i++) {\n      var residue = rs[i];\n\n      if (residue.helix) {\n        helixResidues.push(residue);\n\n        if (residue.arrow) {\n          var startPoint = v3.create();\n          var endPoint = v3.create();\n\n          if (helixResidues.length == 2) {\n            // PDB like 2PEC have helix which is just have 2 residues in it.\n            startPoint = [helixResidues[0].cp1.x, helixResidues[0].cp1.y, helixResidues[0].cp1.z];\n            endPoint = [helixResidues[1].cp1.x, helixResidues[1].cp1.y, helixResidues[1].cp1.z];\n          } else {\n            // To get helix axis, we need at least 4 residues.\n            // if residues lenght is 3, then one residue need to be added.\n            // The added residue is residue before helix.\n            if (helixResidues.length == 3) {\n              helixResidues.unshift(rs[m.max(i - 3, 0)]);\n            }\n\n            var Ps = [];\n            var Vs = [];\n\n            for (var h = 1, hh = helixResidues.length - 1; h < hh; h++) {\n              var cai = [helixResidues[h].cp1.x, helixResidues[h].cp1.y, helixResidues[h].cp1.z];\n              var A = [helixResidues[h - 1].cp1.x, helixResidues[h - 1].cp1.y, helixResidues[h - 1].cp1.z];\n              var B = [helixResidues[h + 1].cp1.x, helixResidues[h + 1].cp1.y, helixResidues[h + 1].cp1.z];\n              v3.subtract(A, cai);\n              v3.subtract(B, cai);\n              var Al = v3.scale(A, v3.length(B), []);\n              var Bl = v3.scale(B, v3.length(A), []);\n              var V = v3.normalize(v3.add(Al, Bl, []));\n              Ps.push(cai);\n              Vs.push(V);\n            }\n\n            var axes = [];\n\n            for (var h = 0, hh = Ps.length - 1; h < hh; h++) {\n              var P1 = Ps[h];\n              var V1 = Vs[h];\n              var P2 = Ps[h + 1];\n              var V2 = Vs[h + 1];\n              var H = v3.normalize(v3.cross(V1, V2, []));\n              var P2subP1 = v3.subtract(P2, P1, []);\n              var d = v3.dot(P2subP1, H);\n              var dH = v3.scale(H, d, []);\n              var dHl = v3.length(dH);\n              var P2subP1l = v3.length(P2subP1);\n              var r = -(dHl * dHl - P2subP1l * P2subP1l) / (2 * v3.dot(v3.subtract(P1, P2, []), V2));\n              var H1 = v3.add(P1, v3.scale(V1, r, []), []);\n              var H2 = v3.add(P2, v3.scale(V2, r, []), []);\n              axes.push([H1, H2]);\n            }\n\n            var firstPoint = axes[0][0];\n            var secondPoint = axes[0][1];\n            var secondToFirst = v3.subtract(firstPoint, secondPoint, []);\n            v3.add(firstPoint, secondToFirst, startPoint);\n            var firstPoint = axes[axes.length - 1][1];\n            var secondPoint = axes[axes.length - 1][0];\n            var secondToFirst = v3.subtract(firstPoint, secondPoint, []);\n            v3.add(firstPoint, secondToFirst, endPoint);\n          }\n\n          var startAtom = new _Atom__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('', startPoint[0], startPoint[1], startPoint[2]);\n          var endAtom = new _Atom__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('', endPoint[0], endPoint[1], endPoint[2]);\n          this.helixCylinders.push(new Pipe(startAtom, endAtom));\n          helixResidues = []; // get vector direction from Pipe end to start\n\n          var helixDir = v3.subtract(startPoint, endPoint, []);\n          v3.normalize(helixDir);\n          v3.scale(helixDir, .5);\n\n          if (noSSResidues.length > 0) {\n            var additionCp = v3.add(startPoint, helixDir, []);\n            var prevResCp = noSSResidues[noSSResidues.length - 1].cp1;\n            var helixDirToPrevRes = v3.subtract([prevResCp.x, prevResCp.y, prevResCp.z], additionCp, []);\n            v3.normalize(helixDirToPrevRes);\n            v3.scale(helixDirToPrevRes, .5);\n            v3.add(additionCp, helixDirToPrevRes);\n            var dummyRes = new _Residue__WEBPACK_IMPORTED_MODULE_2__[\"default\"](-1);\n            dummyRes.cp1 = dummyRes.cp2 = new _Atom__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('', additionCp[0], additionCp[1], additionCp[2]);\n            noSSResidues.push(dummyRes); // force the non secondary structure spline to end on helix start point.\n\n            var dummyRes = createDummyResidue(startPoint[0], startPoint[1], startPoint[2]);\n            noSSResidues.push(dummyRes);\n            chainNoSS.push(noSSResidues);\n          }\n\n          noSSResidues = []; // check for next residue\n\n          if (i < ii) {\n            // force the non secondary structure spline to start on helix end point.\n            var dummyRes = createDummyResidue(endPoint[0], endPoint[1], endPoint[2]);\n            noSSResidues.push(dummyRes);\n            var rm = rs[i + 1];\n\n            if (rm.sheet) {\n              noSSResidues.push(residue);\n              noSSResidues.push(residue);\n              chainNoSS.push(noSSResidues);\n              noSSResidues = [];\n              sheetResidues.push(residue);\n            } else {\n              // force the non secondary structure spline to start on helix end point.\n              v3.scale(helixDir, -1);\n              var additionCp = v3.add(endPoint, helixDir, []);\n              var nextResCp = rm.cp1;\n              var helixDirToNextRes = v3.subtract([nextResCp.x, nextResCp.y, nextResCp.z], additionCp, []);\n              v3.normalize(helixDirToNextRes);\n              v3.scale(helixDirToNextRes, .5);\n              v3.add(additionCp, helixDirToNextRes);\n              var dummyRes = createDummyResidue(additionCp[0], additionCp[1], additionCp[2]);\n              noSSResidues.push(dummyRes);\n            }\n          }\n        }\n      } else if (residue.sheet) {\n        sheetResidues.push(residue);\n\n        if (residue.arrow) {\n          var p1 = [0, 0, 0];\n          var p2 = [0, 0, 0];\n\n          for (var h = 0, hh = sheetResidues.length; h < hh; h++) {\n            var guidePoints = sheetResidues[h].guidePointsLarge;\n            var gp1 = guidePoints[0];\n            var gp2 = guidePoints[guidePoints.length - 1];\n            v3.add(p1, [gp1.x, gp1.y, gp1.z]);\n            v3.add(p2, [gp2.x, gp2.y, gp2.z]);\n          }\n\n          v3.scale(p1, 1 / hh);\n          v3.scale(p2, 1 / hh);\n          var dirx = v3.subtract(p1, p2);\n          var firstRs = sheetResidues[0];\n          var lastRs = sheetResidues[sheetResidues.length - 1];\n          var firstGuidePoints = firstRs.guidePointsSmall[0];\n          var lastGuidePoints = lastRs.guidePointsSmall[0];\n          this.sheetPlanks.push(new Plank(firstGuidePoints, lastGuidePoints, dirx));\n          sheetResidues = [];\n\n          if (i < ii) {\n            var rm = rs[i + 1];\n\n            if (rm.sheet) {\n              sheetResidues.push(residue);\n            } else {\n              var dummyRes = createDummyResidue(lastGuidePoints.x, lastGuidePoints.y, lastGuidePoints.z);\n              noSSResidues.push(dummyRes);\n            }\n          }\n        }\n      } else {\n        noSSResidues.push(residue);\n\n        if (i < ii) {\n          var rm = rs[i + 1];\n\n          if (rm.sheet) {\n            var guidePoints = residue.guidePointsSmall[0];\n            var dummyRes = createDummyResidue(guidePoints.x, guidePoints.y, guidePoints.z);\n            noSSResidues.push(dummyRes);\n            chainNoSS.push(noSSResidues);\n            noSSResidues = [];\n            sheetResidues.push(residue);\n          }\n        }\n      }\n    }\n\n    if (noSSResidues.length > 1) {\n      if (noSSResidues.length == 2) {\n        noSSResidues.push(noSSResidues[noSSResidues.length - 1]);\n      }\n\n      chainNoSS.push(noSSResidues);\n    }\n\n    noSSResidues = [];\n    var chainSegments = [];\n\n    for (var n = 0, nn = chainNoSS.length; n < nn; n++) {\n      var nhs = chainNoSS[n];\n      var lineSegmentsList = [];\n\n      for (var i = 0, ii = nhs.length - 1; i <= ii; i++) {\n        lineSegmentsList.push(nhs[i].cp1);\n      }\n\n      chainSegments.push(lineSegmentsList);\n    }\n\n    for (var i = 0, ii = chainSegments.length; i < ii; i++) {\n      var t = new d3.CatmullTube(chainSegments[i], specs.proteins_tubeThickness, specs.proteins_tubeResolution_3D, specs.proteins_horizontalResolution);\n      t.chainColor = rs.chainColor;\n      this.tubes.push(t);\n    }\n  };\n\n  var _ = d3.PipePlank.prototype = new d3._Mesh();\n\n  _.render = function (gl, specs) {\n    gl.material.setTempColors(gl, specs.proteins_materialAmbientColor_3D, undefined, specs.proteins_materialSpecularColor_3D, specs.proteins_materialShininess_3D); // colors\n\n    gl.material.setDiffuseColor(gl, specs.macro_colorByChain ? this.chainColor : specs.proteins_tubeColor);\n\n    for (var j = 0, jj = this.tubes.length; j < jj; j++) {\n      gl.shader.setMatrixUniforms(gl);\n      this.tubes[j].render(gl, specs);\n    }\n\n    if (!specs.macro_colorByChain) {\n      gl.material.setDiffuseColor(gl, specs.proteins_ribbonCartoonHelixSecondaryColor);\n    }\n\n    gl.cylinderClosedBuffer.bindBuffers(gl);\n\n    for (var j = 0, jj = this.helixCylinders.length; j < jj; j++) {\n      this.helixCylinders[j].render(gl, specs);\n    }\n\n    if (!specs.macro_colorByChain) {\n      gl.material.setDiffuseColor(gl, specs.proteins_ribbonCartoonSheetColor);\n    }\n\n    gl.boxBuffer.bindBuffers(gl);\n\n    for (var j = 0, jj = this.sheetPlanks.length; j < jj; j++) {\n      this.sheetPlanks[j].render(gl, specs);\n    }\n  };\n})(_extensions__WEBPACK_IMPORTED_MODULE_4__, _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__[\"RESIDUE\"], d3, m, _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat4\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"vec3\"], _math__WEBPACK_IMPORTED_MODULE_5__);\n\n(function (d3, undefined) {\n  'use strict';\n\n  d3.Quad = function () {\n    var positionData = [-1, 1, 0, -1, -1, 0, 1, 1, 0, 1, -1, 0];\n    var normalData = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    this.storeData(positionData, normalData);\n  };\n\n  d3.Quad.prototype = new d3._Mesh();\n})(d3);\n\n(function (d3, v3, undefined) {\n  'use strict';\n\n  d3.Shape = function (points, thickness) {\n    // points must be in the xy-plane, all z-coords must be 0, thickness\n    // will be in the z-plane\n    var numPoints = points.length;\n    var positionData = [];\n    var normalData = []; // calculate vertex and normal points\n\n    var center = new _Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\n    for (var i = 0, ii = numPoints; i < ii; i++) {\n      var next = i + 1;\n\n      if (i === ii - 1) {\n        next = 0;\n      }\n\n      var z = [0, 0, 1];\n      var currentPoint = points[i];\n      var nextPoint = points[next];\n      var v = [nextPoint.x - currentPoint.x, nextPoint.y - currentPoint.y, 0];\n      var normal = v3.cross(z, v); // first four are for the side normal\n      // second four will do both the bottom and top triangle normals\n\n      for (var j = 0; j < 2; j++) {\n        positionData.push(currentPoint.x, currentPoint.y, thickness / 2);\n        positionData.push(currentPoint.x, currentPoint.y, -thickness / 2);\n        positionData.push(nextPoint.x, nextPoint.y, thickness / 2);\n        positionData.push(nextPoint.x, nextPoint.y, -thickness / 2);\n      } // side normals\n\n\n      for (var j = 0; j < 4; j++) {\n        normalData.push(normal[0], normal[1], normal[2]);\n      } // top and bottom normals\n\n\n      normalData.push(0, 0, 1);\n      normalData.push(0, 0, -1);\n      normalData.push(0, 0, 1);\n      normalData.push(0, 0, -1);\n      center.add(currentPoint);\n    } // centers\n\n\n    center.x /= numPoints;\n    center.y /= numPoints;\n    normalData.push(0, 0, 1);\n    positionData.push(center.x, center.y, thickness / 2);\n    normalData.push(0, 0, -1);\n    positionData.push(center.x, center.y, -thickness / 2); // build mesh connectivity\n\n    var indexData = [];\n    var centerIndex = numPoints * 8;\n\n    for (var i = 0, ii = numPoints; i < ii; i++) {\n      var start = i * 8; // sides\n\n      indexData.push(start);\n      indexData.push(start + 3);\n      indexData.push(start + 1);\n      indexData.push(start);\n      indexData.push(start + 2);\n      indexData.push(start + 3); // top and bottom\n\n      indexData.push(start + 4);\n      indexData.push(centerIndex);\n      indexData.push(start + 6);\n      indexData.push(start + 5);\n      indexData.push(start + 7);\n      indexData.push(centerIndex + 1);\n    }\n\n    this.storeData(positionData, normalData, indexData);\n  };\n\n  d3.Shape.prototype = new d3._Mesh();\n})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__[\"vec3\"]);\n\n(function (d3, m, v3, undefined) {\n  'use strict';\n\n  d3.Star = function () {\n    var ps = [.8944, .4472, 0, .2764, .4472, .8506, .2764, .4472, -.8506, -.7236, .4472, .5257, -.7236, .4472, -.5257, -.3416, .4472, 0, -.1056, .4472, .3249, -.1056, .4472, -.3249, .2764, .4472, .2008, .2764, .4472, -.2008, -.8944, -.4472, 0, -.2764, -.4472, .8506, -.2764, -.4472, -.8506, .7236, -.4472, .5257, .7236, -.4472, -.5257, .3416, -.4472, 0, .1056, -.4472, .3249, .1056, -.4472, -.3249, -.2764, -.4472, .2008, -.2764, -.4472, -.2008, -.5527, .1058, 0, -.1708, .1058, .5527, -.1708, .1058, -.5527, .4471, .1058, .3249, .4471, .1058, -.3249, .5527, -.1058, 0, .1708, -.1058, .5527, .1708, -.1058, -.5527, -.4471, -.1058, .3249, -.4471, -.1058, -.3249, 0, 1, 0, 0, -1, 0];\n    var is = [0, 9, 8, 2, 7, 9, 4, 5, 7, 3, 6, 5, 1, 8, 6, 0, 8, 23, 30, 6, 8, 3, 21, 6, 11, 26, 21, 13, 23, 26, 2, 9, 24, 30, 8, 9, 1, 23, 8, 13, 25, 23, 14, 24, 25, 4, 7, 22, 30, 9, 7, 0, 24, 9, 14, 27, 24, 12, 22, 27, 3, 5, 20, 30, 7, 5, 2, 22, 7, 12, 29, 22, 10, 20, 29, 1, 6, 21, 30, 5, 6, 4, 20, 5, 10, 28, 20, 11, 21, 28, 10, 19, 18, 12, 17, 19, 14, 15, 17, 13, 16, 15, 11, 18, 16, 31, 19, 17, 14, 17, 27, 2, 27, 22, 4, 22, 29, 10, 29, 19, 31, 18, 19, 12, 19, 29, 4, 29, 20, 3, 20, 28, 11, 28, 18, 31, 16, 18, 10, 18, 28, 3, 28, 21, 1, 21, 26, 13, 26, 16, 31, 15, 16, 11, 16, 26, 1, 26, 23, 0, 23, 25, 14, 25, 15, 31, 17, 15, 13, 15, 25, 0, 25, 24, 2, 24, 27, 12, 27, 17];\n    var positionData = [];\n    var normalData = [];\n    var indexData = [];\n\n    for (var i = 0, ii = is.length; i < ii; i += 3) {\n      var j1 = is[i] * 3;\n      var j2 = is[i + 1] * 3;\n      var j3 = is[i + 2] * 3;\n      var p1 = [ps[j1], ps[j1 + 1], ps[j1 + 2]];\n      var p2 = [ps[j2], ps[j2 + 1], ps[j2 + 2]];\n      var p3 = [ps[j3], ps[j3 + 1], ps[j3 + 2]];\n      var toAbove = [p1[0] - p2[0], p1[1] - p2[1], p1[2] - p2[2]];\n      var toSide = [p3[0] - p2[0], p3[1] - p2[1], p3[2] - p2[2]];\n      var normal = v3.cross(toSide, toAbove, []);\n      v3.normalize(normal);\n      positionData.push(p1[0], p1[1], p1[2], p2[0], p2[1], p2[2], p3[0], p3[1], p3[2]);\n      normalData.push(normal[0], normal[1], normal[2], normal[0], normal[1], normal[2], normal[0], normal[1], normal[2]);\n      indexData.push(i, i + 1, i + 2);\n    }\n\n    this.storeData(positionData, normalData, indexData);\n  };\n\n  d3.Star.prototype = new d3._Mesh();\n})(d3, m, _lib__WEBPACK_IMPORTED_MODULE_6__[\"vec3\"]);\n\n(function (d3, extensions, document, window, undefined) {\n  'use strict';\n\n  var ratio = 1;\n\n  if (window.devicePixelRatio) {\n    ratio = window.devicePixelRatio;\n  }\n\n  d3.TextImage = function () {\n    this.ctx = document.createElement('canvas').getContext('2d');\n    this.data = [];\n    this.text = '';\n    this.charHeight = 0;\n  };\n\n  var _ = d3.TextImage.prototype;\n\n  _.init = function (gl) {\n    // init texture\n    this.textureImage = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, this.textureImage);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    this.updateFont(gl, 12, ['Sans-serif'], false, false, false);\n  };\n\n  _.charData = function (character) {\n    var index = this.text.indexOf(character);\n    return index >= 0 ? this.data[index] : null;\n  };\n\n  _.updateFont = function (gl, fontSize, fontFamilies, fontBold, fontItalic, fontStroke) {\n    var ctx = this.ctx;\n    var canvas = this.ctx.canvas;\n    var data = [];\n    var text = \"\";\n    fontSize *= ratio;\n    var contextFont = extensions.getFontString(fontSize, fontFamilies, fontBold, fontItalic);\n    ctx.font = contextFont;\n    ctx.save();\n    var totalWidth = 0;\n    var charHeight = fontSize * 1.5;\n\n    for (var i = 32, ii = 127; i < ii; i++) {\n      // skip control characters\n      // if(i <= 31 || i == 127) continue;\n      var character = String.fromCharCode(i),\n          width = ctx.measureText(character).width;\n      data.push({\n        text: character,\n        width: width,\n        height: charHeight\n      });\n      totalWidth += width * 2;\n    } // add other characters\n\n\n    var chars = \"\\xB0\\u212B\\xAE\".split('');\n\n    for (var i = 0, ii = chars.length; i < ii; i++) {\n      var character = chars[i],\n          width = ctx.measureText(character).width;\n      data.push({\n        text: character,\n        width: width,\n        height: charHeight\n      });\n      totalWidth += width * 2;\n    }\n\n    var areaImage = totalWidth * charHeight;\n    var sqrtArea = m.sqrt(areaImage);\n    var totalRows = m.ceil(sqrtArea / charHeight);\n    var maxWidth = m.ceil(totalWidth / (totalRows - 1));\n    canvas.width = maxWidth;\n    canvas.height = totalRows * charHeight;\n    ctx.font = contextFont;\n    ctx.textAlign = \"left\";\n    ctx.textBaseline = \"middle\";\n    ctx.strokeStyle = \"#000\";\n    ctx.lineWidth = 1.4;\n    ctx.fillStyle = \"#fff\";\n    var offsetRow = 0;\n    var posX = 0;\n\n    for (var i = 0, ii = data.length; i < ii; i++) {\n      var charData = data[i];\n      var charWidth = charData.width * 2;\n      var charHeight = charData.height;\n      var charText = charData.text;\n      var willWidth = posX + charWidth;\n\n      if (willWidth > maxWidth) {\n        offsetRow++;\n        posX = 0;\n      }\n\n      var posY = offsetRow * charHeight;\n\n      if (fontStroke) {\n        // stroke must draw before fill\n        ctx.strokeText(charText, posX, posY + charHeight / 2);\n      }\n\n      ctx.fillText(charText, posX, posY + charHeight / 2);\n      charData.x = posX;\n      charData.y = posY;\n      text += charText;\n      posX += charWidth;\n    }\n\n    this.text = text;\n    this.data = data;\n    this.charHeight = charHeight; // also update the texture\n\n    gl.bindTexture(gl.TEXTURE_2D, this.textureImage);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n  };\n\n  _.pushVertexData = function (text, position, zDepth, data) {\n    // characters of string text\n    var textPiece = text.toString().split(\"\"); // height of texture image\n\n    var heightImage = this.getHeight();\n    var widthImage = this.getWidth();\n    var x1 = -this.textWidth(text) / 2 / ratio;\n    var y1 = -this.charHeight / 2 / ratio; // iterate each character\n\n    for (var j = 0, jj = textPiece.length; j < jj; j++) {\n      var charData = this.charData(textPiece[j]);\n      var width = charData.width;\n      var left = charData.x / widthImage;\n      var right = left + charData.width * 1.8 / widthImage;\n      var top = charData.y / heightImage;\n      var bottom = top + charData.height / heightImage;\n      var x2 = x1 + width * 1.8 / ratio;\n      var y2 = this.charHeight / 2 / ratio;\n      data.position.push( // left top\n      position[0], position[1], position[2], // right top\n      position[0], position[1], position[2], // right bottom\n      position[0], position[1], position[2], // left top\n      position[0], position[1], position[2], // left bottom\n      position[0], position[1], position[2], // right bottom\n      position[0], position[1], position[2]);\n      data.texCoord.push( // left top\n      left, top, // right bottom\n      right, bottom, // right top\n      right, top, // left top\n      left, top, // left bottom\n      left, bottom, // right bottom\n      right, bottom);\n      data.translation.push( // left top\n      x1, y2, zDepth, // right bottom\n      x2, y1, zDepth, // right top\n      x2, y2, zDepth, // left top\n      x1, y2, zDepth, // left bottom\n      x1, y1, zDepth, // right bottom\n      x2, y1, zDepth);\n      x1 = x2 + (width - width * 1.8) / ratio;\n    }\n  };\n\n  _.getCanvas = function () {\n    return this.ctx.canvas;\n  };\n\n  _.getHeight = function () {\n    return this.getCanvas().height;\n  };\n\n  _.getWidth = function () {\n    return this.getCanvas().width;\n  };\n\n  _.textWidth = function (text) {\n    return this.ctx.measureText(text).width;\n  };\n\n  _.test = function () {\n    document.body.appendChild(this.getCanvas());\n  };\n\n  _.useTexture = function (gl) {\n    gl.bindTexture(gl.TEXTURE_2D, this.textureImage);\n  };\n})(d3, _extensions__WEBPACK_IMPORTED_MODULE_4__, document, window);\n\n(function (d3, m, undefined) {\n  'use strict';\n\n  d3.TextMesh = function () {};\n\n  var _ = d3.TextMesh.prototype;\n\n  _.init = function (gl) {\n    // set vertex buffer\n    this.vertexPositionBuffer = gl.createBuffer();\n    this.vertexTexCoordBuffer = gl.createBuffer();\n    this.vertexTranslationBuffer = gl.createBuffer();\n  };\n\n  _.setVertexData = function (gl, vertexBuffer, bufferData, itemSize) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(bufferData), gl.STATIC_DRAW);\n    vertexBuffer.itemSize = itemSize;\n    vertexBuffer.numItems = bufferData.length / itemSize;\n  };\n\n  _.storeData = function (gl, vertexPositionData, vertexTexCoordData, vertexTranslationData) {\n    this.setVertexData(gl, this.vertexPositionBuffer, vertexPositionData, 3);\n    this.setVertexData(gl, this.vertexTexCoordBuffer, vertexTexCoordData, 2);\n    this.setVertexData(gl, this.vertexTranslationBuffer, vertexTranslationData, 3);\n  };\n\n  _.bindBuffers = function (gl) {\n    // positions\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexPositionBuffer);\n    gl.vertexAttribPointer(gl.shader.vertexPositionAttribute, this.vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0); // texCoord\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexTexCoordBuffer);\n    gl.vertexAttribPointer(gl.shader.vertexTexCoordAttribute, this.vertexTexCoordBuffer.itemSize, gl.FLOAT, false, 0, 0); // translation and z depth\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexTranslationBuffer);\n    gl.vertexAttribPointer(gl.shader.vertexNormalAttribute, this.vertexTranslationBuffer.itemSize, gl.FLOAT, false, 0, 0);\n  };\n\n  _.render = function (gl) {\n    var numItems = this.vertexPositionBuffer.numItems;\n\n    if (!numItems) {\n      // nothing to do here\n      return;\n    }\n\n    this.bindBuffers(gl);\n    gl.drawArrays(gl.TRIANGLES, 0, numItems);\n  };\n})(d3, m);\n\n(function (ELEMENT, math, d3, m, m4, v3, undefined) {\n  'use strict';\n\n  d3.Torsion = function (a1, a2, a3, a4) {\n    this.a1 = a1;\n    this.a2 = a2;\n    this.a3 = a3;\n    this.a4 = a4;\n  };\n\n  var _ = d3.Torsion.prototype = new d3._Measurement();\n\n  _.calculateData = function (specs) {\n    var positionData = [];\n    var normalData = [];\n    var indexData = [];\n    var dist1 = this.a2.distance3D(this.a1);\n    var dist2 = this.a2.distance3D(this.a3);\n    this.distUse = m.min(dist1, dist2) / 2; // data for the angle\n\n    var b1 = [this.a2.x - this.a1.x, this.a2.y - this.a1.y, this.a2.z - this.a1.z];\n    var b2 = [this.a3.x - this.a2.x, this.a3.y - this.a2.y, this.a3.z - this.a2.z];\n    var b3 = [this.a4.x - this.a3.x, this.a4.y - this.a3.y, this.a4.z - this.a3.z];\n    var cross12 = v3.cross(b1, b2, []);\n    var cross23 = v3.cross(b2, b3, []);\n    v3.scale(b1, v3.length(b2));\n    this.torsion = m.atan2(v3.dot(b1, cross23), v3.dot(cross12, cross23));\n    var vec1 = v3.normalize(v3.cross(cross12, b2, []));\n    var vec3 = v3.normalize(v3.cross(b2, vec1, []));\n    this.pos = v3.add([this.a2.x, this.a2.y, this.a2.z], v3.scale(v3.normalize(b2, []), this.distUse));\n    var vec0 = [];\n    var bands = specs.measurement_angleBands_3D;\n\n    for (var i = 0; i <= bands; ++i) {\n      var theta = this.torsion * i / bands;\n      var vecCos = v3.scale(vec1, m.cos(theta), []);\n      var vecSin = v3.scale(vec3, m.sin(theta), []);\n      var norm = v3.scale(v3.normalize(v3.add(vecCos, vecSin, [])), this.distUse);\n\n      if (i == 0) {\n        vec0 = norm;\n      }\n\n      positionData.push(this.pos[0] + norm[0], this.pos[1] + norm[1], this.pos[2] + norm[2]);\n      normalData.push(0, 0, 0);\n\n      if (i < bands) {\n        indexData.push(i, i + 1);\n      }\n    }\n\n    this.vecText = v3.normalize(v3.add(vec0, norm, []));\n    var arrowLength = 0.25;\n    var b2Norm = v3.normalize(b2, []);\n    v3.scale(b2Norm, arrowLength / 4);\n    var theta = this.torsion - m.asin(arrowLength / 2) * 2 * this.torsion / m.abs(this.torsion);\n    var vecCos = v3.scale(vec1, m.cos(theta), []);\n    var vecSin = v3.scale(vec3, m.sin(theta), []);\n    var norm = v3.scale(v3.normalize(v3.add(vecCos, vecSin, [])), this.distUse);\n    positionData.push(this.pos[0] + b2Norm[0] + norm[0], this.pos[1] + b2Norm[1] + norm[1], this.pos[2] + b2Norm[2] + norm[2]);\n    normalData.push(0, 0, 0);\n    positionData.push(this.pos[0] - b2Norm[0] + norm[0], this.pos[1] - b2Norm[1] + norm[1], this.pos[2] - b2Norm[2] + norm[2]);\n    normalData.push(0, 0, 0);\n    indexData.push(--i, i + 1, i, i + 2);\n    this.storeData(positionData, normalData, indexData);\n  };\n\n  _.getText = function (specs) {\n    v3.add(this.pos, v3.scale(this.vecText, this.distUse + 0.3, []));\n    return {\n      pos: this.pos,\n      value: [math.angleBounds(this.torsion, true, true).toFixed(2), \" \\xB0\"].join('')\n    };\n  };\n})(_ChemDoodle__WEBPACK_IMPORTED_MODULE_3__[\"ELEMENT\"], _math__WEBPACK_IMPORTED_MODULE_5__, d3, m, _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat4\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"vec3\"]);\n\n(function (extensions, RESIDUE, d3, m, m4, v3, math, undefined) {\n  'use strict';\n\n  var loadPartition = function loadPartition(gl, p) {\n    // positions\n    gl.bindBuffer(gl.ARRAY_BUFFER, p.vertexPositionBuffer);\n    gl.vertexAttribPointer(gl.shader.vertexPositionAttribute, p.vertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0); // normals\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, p.vertexNormalBuffer);\n    gl.vertexAttribPointer(gl.shader.vertexNormalAttribute, p.vertexNormalBuffer.itemSize, gl.FLOAT, false, 0, 0); // indexes\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, p.vertexIndexBuffer);\n  };\n\n  var PointRotator = function PointRotator(point, axis, angle) {\n    var d = m.sqrt(axis[1] * axis[1] + axis[2] * axis[2]);\n    var Rx = [1, 0, 0, 0, 0, axis[2] / d, -axis[1] / d, 0, 0, axis[1] / d, axis[2] / d, 0, 0, 0, 0, 1];\n    var RxT = [1, 0, 0, 0, 0, axis[2] / d, axis[1] / d, 0, 0, -axis[1] / d, axis[2] / d, 0, 0, 0, 0, 1];\n    var Ry = [d, 0, -axis[0], 0, 0, 1, 0, 0, axis[0], 0, d, 0, 0, 0, 0, 1];\n    var RyT = [d, 0, axis[0], 0, 0, 1, 0, 0, -axis[0], 0, d, 0, 0, 0, 0, 1];\n    var Rz = [m.cos(angle), -m.sin(angle), 0, 0, m.sin(angle), m.cos(angle), 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n    var matrix = m4.multiply(Rx, m4.multiply(Ry, m4.multiply(Rz, m4.multiply(RyT, RxT, []))));\n\n    this.rotate = function () {\n      return m4.multiplyVec3(matrix, point);\n    };\n  };\n\n  d3.Tube = function (chain, thickness, cylinderResolution) {\n    var lineSegmentNum = chain[0].lineSegments[0].length;\n    this.partitions = [];\n    var currentPartition;\n    this.ends = [];\n    this.ends.push(chain[0].lineSegments[0][0]);\n    this.ends.push(chain[chain.length - 1].lineSegments[0][0]); // calculate vertex and normal points\n\n    var last = [1, 0, 0];\n\n    for (var i = 0, ii = chain.length; i < ii; i++) {\n      if (!currentPartition || currentPartition.positionData.length > 65000) {\n        if (this.partitions.length > 0) {\n          i--;\n        }\n\n        currentPartition = {\n          count: 0,\n          positionData: [],\n          normalData: [],\n          indexData: []\n        };\n        this.partitions.push(currentPartition);\n      }\n\n      var residue = chain[i];\n      currentPartition.count++;\n      var min = Infinity;\n      var p = new _Atom__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('', chain[i].cp1.x, chain[i].cp1.y, chain[i].cp1.z);\n\n      for (var j = 0; j < lineSegmentNum; j++) {\n        var currentPoint = residue.lineSegments[0][j];\n        var nextPoint;\n\n        if (j === lineSegmentNum - 1) {\n          if (i === chain.length - 1) {\n            nextPoint = residue.lineSegments[0][j - 1];\n          } else {\n            nextPoint = chain[i + 1].lineSegments[0][0];\n          }\n        } else {\n          nextPoint = residue.lineSegments[0][j + 1];\n        }\n\n        var axis = [nextPoint.x - currentPoint.x, nextPoint.y - currentPoint.y, nextPoint.z - currentPoint.z];\n        v3.normalize(axis);\n\n        if (i === chain.length - 1 && j === lineSegmentNum - 1) {\n          v3.scale(axis, -1);\n        }\n\n        var startVector = v3.cross(axis, last, []);\n        v3.normalize(startVector);\n        v3.scale(startVector, thickness / 2);\n        var rotator = new PointRotator(startVector, axis, 2 * m.PI / cylinderResolution);\n\n        for (var k = 0, kk = cylinderResolution; k < kk; k++) {\n          var use = rotator.rotate();\n\n          if (k === m.floor(cylinderResolution / 4)) {\n            last = [use[0], use[1], use[2]];\n          }\n\n          currentPartition.normalData.push(use[0], use[1], use[2]);\n          currentPartition.positionData.push(currentPoint.x + use[0], currentPoint.y + use[1], currentPoint.z + use[2]);\n        } // find closest point to attach stick to\n\n\n        if (p) {\n          var dist = currentPoint.distance3D(p);\n\n          if (dist < min) {\n            min = dist;\n            chain[i].pPoint = currentPoint;\n          }\n        }\n      }\n    } // build mesh connectivity\n\n\n    for (var n = 0, nn = this.partitions.length; n < nn; n++) {\n      var currentPartition = this.partitions[n];\n\n      for (var i = 0, ii = currentPartition.count - 1; i < ii; i++) {\n        var indexStart = i * lineSegmentNum * cylinderResolution;\n\n        for (var j = 0, jj = lineSegmentNum; j < jj; j++) {\n          var segmentIndexStart = indexStart + j * cylinderResolution;\n\n          for (var k = 0; k < cylinderResolution; k++) {\n            var next = 1;\n            var sk = segmentIndexStart + k;\n            currentPartition.indexData.push(sk);\n            currentPartition.indexData.push(sk + cylinderResolution);\n            currentPartition.indexData.push(sk + cylinderResolution + next);\n            currentPartition.indexData.push(sk);\n            currentPartition.indexData.push(sk + cylinderResolution + next);\n            currentPartition.indexData.push(sk + next);\n          }\n        }\n      }\n    }\n\n    this.storeData(this.partitions[0].positionData, this.partitions[0].normalData, this.partitions[0].indexData);\n    var ps = [new _Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"](2, 0)];\n\n    for (var i = 0; i < 60; i++) {\n      var ang = i / 60 * m.PI;\n      ps.push(new _Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"](2 * m.cos(ang), -2 * m.sin(ang)));\n    }\n\n    ps.push(new _Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"](-2, 0), new _Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"](-2, 4), new _Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"](2, 4));\n    var platform = new d3.Shape(ps, 1);\n\n    this.render = function (gl, specs) {\n      // draw tube\n      this.bindBuffers(gl); // colors\n\n      gl.material.setDiffuseColor(gl, specs.macro_colorByChain ? this.chainColor : specs.nucleics_tubeColor); // render\n\n      gl.drawElements(gl.TRIANGLES, this.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n\n      if (this.partitions) {\n        for (var i = 1, ii = this.partitions.length; i < ii; i++) {\n          var p = this.partitions[i];\n          loadPartition(gl, p); // render\n\n          gl.drawElements(gl.TRIANGLES, p.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n        }\n      } // draw ends\n\n\n      gl.sphereBuffer.bindBuffers(gl);\n\n      for (var i = 0; i < 2; i++) {\n        var p = this.ends[i];\n        var transform = m4.translate(m4.identity(), [p.x, p.y, p.z]);\n        var radius = thickness / 2;\n        m4.scale(transform, [radius, radius, radius]); // render\n\n        gl.shader.setMatrixUniforms(gl, transform);\n        gl.drawElements(gl.TRIANGLES, gl.sphereBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n      } // draw nucleotide handles\n\n\n      gl.cylinderBuffer.bindBuffers(gl);\n\n      for (var i = 0, ii = chain.length - 1; i < ii; i++) {\n        var residue = chain[i];\n        var p1 = residue.pPoint;\n        var p2 = new _Atom__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('', residue.cp2.x, residue.cp2.y, residue.cp2.z);\n        var height = 1.001 * p1.distance3D(p2);\n        var scaleVector = [thickness / 4, height, thickness / 4];\n        var transform = m4.translate(m4.identity(), [p1.x, p1.y, p1.z]);\n        var y = [0, 1, 0];\n        var ang = 0;\n        var axis;\n        var a2b = [p2.x - p1.x, p2.y - p1.y, p2.z - p1.z];\n\n        if (p1.x === p2.x && p1.z === p2.z) {\n          axis = [0, 0, 1];\n\n          if (p1.y < p1.y) {\n            ang = m.PI;\n          }\n        } else {\n          ang = extensions.vec3AngleFrom(y, a2b);\n          axis = v3.cross(y, a2b, []);\n        }\n\n        if (ang !== 0) {\n          m4.rotate(transform, ang, axis);\n        }\n\n        m4.scale(transform, scaleVector);\n        gl.shader.setMatrixUniforms(gl, transform);\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, gl.cylinderBuffer.vertexPositionBuffer.numItems);\n      } // draw nucleotide platforms\n\n\n      platform.bindBuffers(gl); // colors\n\n      if (specs.nucleics_residueColor === 'none' && !specs.macro_colorByChain) {\n        gl.material.setDiffuseColor(gl, specs.nucleics_baseColor);\n      }\n\n      for (var i = 0, ii = chain.length - 1; i < ii; i++) {\n        var residue = chain[i];\n        var p2 = residue.cp2;\n        var transform = m4.translate(m4.identity(), [p2.x, p2.y, p2.z]); // rotate to direction\n\n        var y = [0, 1, 0];\n        var ang = 0;\n        var axis;\n        var p3 = residue.cp3;\n\n        if (p3) {\n          var a2b = [p3.x - p2.x, p3.y - p2.y, p3.z - p2.z];\n\n          if (p2.x === p3.x && p2.z === p3.z) {\n            axis = [0, 0, 1];\n\n            if (p2.y < p2.y) {\n              ang = m.PI;\n            }\n          } else {\n            ang = extensions.vec3AngleFrom(y, a2b);\n            axis = v3.cross(y, a2b, []);\n          }\n\n          if (ang !== 0) {\n            m4.rotate(transform, ang, axis);\n          } // rotate to orientation\n\n\n          var x = [1, 0, 0];\n          var rM = m4.rotate(m4.identity([]), ang, axis);\n          m4.multiplyVec3(rM, x);\n          var p4 = residue.cp4;\n          var p5 = residue.cp5;\n\n          if (!(p4.y === p5.y && p4.z === p5.z)) {\n            var pivot = [p5.x - p4.x, p5.y - p4.y, p5.z - p4.z];\n            var ang2 = extensions.vec3AngleFrom(x, pivot);\n\n            if (v3.dot(a2b, v3.cross(x, pivot)) < 0) {\n              ang2 *= -1;\n            }\n\n            m4.rotateY(transform, ang2);\n          } // color\n\n\n          if (!specs.macro_colorByChain) {\n            if (specs.nucleics_residueColor === 'shapely') {\n              if (RESIDUE[residue.name]) {\n                gl.material.setDiffuseColor(gl, RESIDUE[residue.name].shapelyColor);\n              } else {\n                gl.material.setDiffuseColor(gl, RESIDUE['*'].shapelyColor);\n              }\n            } else if (specs.nucleics_residueColor === 'rainbow') {\n              gl.material.setDiffuseColor(gl, math.rainbowAt(i, ii, specs.macro_rainbowColors));\n            }\n          } // render\n\n\n          gl.shader.setMatrixUniforms(gl, transform);\n          gl.drawElements(gl.TRIANGLES, platform.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n        }\n      }\n    };\n  };\n\n  d3.Tube.prototype = new d3._Mesh();\n\n  d3.CatmullTube = function (chains, thickness, cylinderResolution, horizontalResolution) {\n    var chain = [];\n    chains.push(chains[chains.length - 1]);\n\n    for (var i = 0, ii = chains.length - 2; i <= ii; i++) {\n      var p0 = chains[i == 0 ? 0 : i - 1];\n      var p1 = chains[i + 0];\n      var p2 = chains[i + 1];\n      var p3 = chains[i == ii ? i + 1 : i + 2];\n      var segments = [];\n\n      for (var j = 0; j < horizontalResolution; j++) {\n        var t = j / horizontalResolution;\n\n        if (i == ii) {\n          t = j / (horizontalResolution - 1);\n        }\n\n        var x = 0.5 * (2 * p1.x + (p2.x - p0.x) * t + (2 * p0.x - 5 * p1.x + 4 * p2.x - p3.x) * t * t + (3 * p1.x - p0.x - 3 * p2.x + p3.x) * t * t * t);\n        var y = 0.5 * (2 * p1.y + (p2.y - p0.y) * t + (2 * p0.y - 5 * p1.y + 4 * p2.y - p3.y) * t * t + (3 * p1.y - p0.y - 3 * p2.y + p3.y) * t * t * t);\n        var z = 0.5 * (2 * p1.z + (p2.z - p0.z) * t + (2 * p0.z - 5 * p1.z + 4 * p2.z - p3.z) * t * t + (3 * p1.z - p0.z - 3 * p2.z + p3.z) * t * t * t);\n        var o = new _Atom__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('C', x, y, z);\n        segments.push(o);\n      }\n\n      chain.push(segments);\n    }\n\n    var lineSegmentNum = chain[0].length;\n    this.partitions = [];\n    var currentPartition;\n    this.ends = [];\n    this.ends.push(chain[0][0]);\n    this.ends.push(chain[chain.length - 1][0]); // calculate vertex and normal points\n\n    var last = [1, 0, 0];\n\n    for (var i = 0, ii = chain.length; i < ii; i++) {\n      if (!currentPartition || currentPartition.positionData.length > 65000) {\n        if (this.partitions.length > 0) {\n          i--;\n        }\n\n        currentPartition = {\n          count: 0,\n          positionData: [],\n          normalData: [],\n          indexData: []\n        };\n        this.partitions.push(currentPartition);\n      }\n\n      var residue = chain[i];\n      currentPartition.count++;\n      var min = Infinity; // var p = new Atom('', chain[i].cp1.x, chain[i].cp1.y, chain[i].cp1.z);\n\n      for (var j = 0; j < lineSegmentNum; j++) {\n        var currentPoint = residue[j];\n        var nextPoint;\n\n        if (j === lineSegmentNum - 1) {\n          if (i === chain.length - 1) {\n            nextPoint = residue[j - 1];\n          } else {\n            nextPoint = chain[i + 1][0];\n          }\n        } else {\n          nextPoint = residue[j + 1];\n        }\n\n        var axis = [nextPoint.x - currentPoint.x, nextPoint.y - currentPoint.y, nextPoint.z - currentPoint.z];\n        v3.normalize(axis);\n\n        if (i === chain.length - 1 && j === lineSegmentNum - 1) {\n          v3.scale(axis, -1);\n        }\n\n        var startVector = v3.cross(axis, last, []);\n        v3.normalize(startVector);\n        v3.scale(startVector, thickness / 2);\n        var rotator = new PointRotator(startVector, axis, 2 * m.PI / cylinderResolution);\n\n        for (var k = 0, kk = cylinderResolution; k < kk; k++) {\n          var use = rotator.rotate();\n\n          if (k === m.floor(cylinderResolution / 4)) {\n            last = [use[0], use[1], use[2]];\n          }\n\n          currentPartition.normalData.push(use[0], use[1], use[2]);\n          currentPartition.positionData.push(currentPoint.x + use[0], currentPoint.y + use[1], currentPoint.z + use[2]);\n        }\n      }\n    } // build mesh connectivity\n\n\n    for (var n = 0, nn = this.partitions.length; n < nn; n++) {\n      var currentPartition = this.partitions[n];\n\n      for (var i = 0, ii = currentPartition.count - 1; i < ii; i++) {\n        var indexStart = i * lineSegmentNum * cylinderResolution;\n\n        for (var j = 0, jj = lineSegmentNum; j < jj; j++) {\n          var segmentIndexStart = indexStart + j * cylinderResolution;\n\n          for (var k = 0; k <= cylinderResolution; k++) {\n            var sk = segmentIndexStart + k % cylinderResolution;\n            currentPartition.indexData.push(sk, sk + cylinderResolution);\n          }\n        }\n      }\n    }\n\n    this.storeData(this.partitions[0].positionData, this.partitions[0].normalData, this.partitions[0].indexData);\n  };\n\n  var _ = d3.CatmullTube.prototype = new d3._Mesh();\n\n  _.render = function (gl, specs) {\n    // draw tube\n    this.bindBuffers(gl); // render\n\n    for (var i = 0, ii = this.partitions.length; i < ii; i++) {\n      var p = this.partitions[i];\n      loadPartition(gl, p); // render\n\n      gl.drawElements(gl.TRIANGLE_STRIP, p.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n    } // draw ends\n\n\n    gl.sphereBuffer.bindBuffers(gl);\n\n    for (var i = 0; i < 2; i++) {\n      var p = this.ends[i];\n      var transform = m4.translate(m4.identity(), [p.x, p.y, p.z]);\n      var radius = specs.proteins_tubeThickness / 2;\n      m4.scale(transform, [radius, radius, radius]); // render\n\n      gl.shader.setMatrixUniforms(gl, transform);\n      gl.drawElements(gl.TRIANGLES, gl.sphereBuffer.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n    }\n  };\n})(_extensions__WEBPACK_IMPORTED_MODULE_4__, _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__[\"RESIDUE\"], d3, m, _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat4\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"vec3\"], _math__WEBPACK_IMPORTED_MODULE_5__);\n\n(function (d3, v3, undefined) {\n  'use strict';\n\n  d3.UnitCell = function (unitCellVectors) {\n    this.unitCell = unitCellVectors;\n    var positionData = [];\n    var normalData = []; // calculate vertex and normal points\n\n    var pushSide = function pushSide(p1, p2, p3, p4) {\n      positionData.push(p1[0], p1[1], p1[2]);\n      positionData.push(p2[0], p2[1], p2[2]);\n      positionData.push(p3[0], p3[1], p3[2]);\n      positionData.push(p4[0], p4[1], p4[2]); // push 0s for normals so shader gives them full color\n\n      for (var i = 0; i < 4; i++) {\n        normalData.push(0, 0, 0);\n      }\n    };\n\n    pushSide(unitCellVectors.o, unitCellVectors.x, unitCellVectors.xy, unitCellVectors.y);\n    pushSide(unitCellVectors.o, unitCellVectors.y, unitCellVectors.yz, unitCellVectors.z);\n    pushSide(unitCellVectors.o, unitCellVectors.z, unitCellVectors.xz, unitCellVectors.x);\n    pushSide(unitCellVectors.yz, unitCellVectors.y, unitCellVectors.xy, unitCellVectors.xyz);\n    pushSide(unitCellVectors.xyz, unitCellVectors.xz, unitCellVectors.z, unitCellVectors.yz);\n    pushSide(unitCellVectors.xy, unitCellVectors.x, unitCellVectors.xz, unitCellVectors.xyz); // build mesh connectivity\n\n    var indexData = [];\n\n    for (var i = 0; i < 6; i++) {\n      var start = i * 4; // sides\n\n      indexData.push(start, start + 1, start + 1, start + 2, start + 2, start + 3, start + 3, start);\n    }\n\n    this.storeData(positionData, normalData, indexData);\n  };\n\n  var _ = d3.UnitCell.prototype = new d3._Mesh();\n\n  _.render = function (gl, specs) {\n    gl.shader.setMatrixUniforms(gl);\n    this.bindBuffers(gl); // colors\n\n    gl.material.setDiffuseColor(gl, specs.shapes_color);\n    gl.lineWidth(specs.shapes_lineWidth); // render\n\n    gl.drawElements(gl.LINES, this.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n  };\n})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__[\"vec3\"]);\n\n(function (d3, math, document, undefined) {\n  'use strict';\n\n  d3.Framebuffer = function () {};\n\n  var _ = d3.Framebuffer.prototype;\n\n  _.init = function (gl) {\n    this.framebuffer = gl.createFramebuffer();\n  };\n\n  _.setColorTexture = function (gl, texture, attachment) {\n    var i = attachment === undefined ? 0 : attachment;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, texture, 0);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  };\n\n  _.setColorRenderbuffer = function (gl, renderbuffer, attachment) {\n    var i = attachment === undefined ? 0 : attachment;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.RENDERBUFFER, renderbuffer);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  };\n\n  _.setDepthTexture = function (gl, texture) {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, texture, 0);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  };\n\n  _.setDepthRenderbuffer = function (gl, renderbuffer) {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);\n    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  };\n\n  _.bind = function (gl, width, height) {\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.viewport(0, 0, width, height);\n  };\n})(d3, _math__WEBPACK_IMPORTED_MODULE_5__, document);\n\n(function (d3, math, document, undefined) {\n  'use strict';\n\n  d3.Renderbuffer = function () {};\n\n  var _ = d3.Renderbuffer.prototype;\n\n  _.init = function (gl, format) {\n    this.renderbuffer = gl.createRenderbuffer();\n    this.format = format;\n  };\n\n  _.setParameter = function (gl, width, height) {\n    this.width = width;\n    this.height = height;\n    gl.bindRenderbuffer(gl.RENDERBUFFER, this.renderbuffer);\n    gl.renderbufferStorage(gl.RENDERBUFFER, this.format, this.width, this.height);\n    gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n  };\n})(d3, _math__WEBPACK_IMPORTED_MODULE_5__, document);\n\n(function (math, d3, m, undefined) {\n  'use strict';\n\n  d3.SSAO = function () {};\n\n  var _ = d3.SSAO.prototype;\n\n  _.initSampleKernel = function (kernelSize) {\n    var sampleKernel = [];\n\n    for (var i = 0; i < kernelSize; i++) {\n      var x = m.random() * 2.0 - 1.0;\n      var y = m.random() * 2.0 - 1.0;\n      var z = m.random() * 2.0 - 1.0;\n      var scale = i / kernelSize;\n      var scale2 = scale * scale;\n      var lerp = 0.1 + scale2 * 0.9;\n      x *= lerp;\n      y *= lerp;\n      z *= lerp;\n      sampleKernel.push(x, y, z);\n    }\n\n    this.sampleKernel = new Float32Array(sampleKernel);\n  };\n\n  _.initNoiseTexture = function (gl) {\n    var noiseSize = 16;\n    var ssaoNoise = [];\n\n    for (var i = 0; i < noiseSize; i++) {\n      ssaoNoise.push(m.random() * 2 - 1);\n      ssaoNoise.push(m.random() * 2 - 1);\n      ssaoNoise.push(0.0);\n    }\n\n    this.noiseTexture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, this.noiseTexture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 4, 4, 0, gl.RGB, gl.FLOAT, new Float32Array(ssaoNoise));\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n  };\n})(_math__WEBPACK_IMPORTED_MODULE_5__, d3, m);\n\n(function (d3, math, document, undefined) {\n  'use strict';\n\n  d3.Texture = function () {};\n\n  var _ = d3.Texture.prototype;\n\n  _.init = function (gl, type, internalFormat, format) {\n    this.texture = gl.createTexture();\n    this.type = type;\n    this.internalFormat = internalFormat;\n    this.format = format !== undefined ? format : internalFormat;\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n  };\n\n  _.setParameter = function (gl, width, height) {\n    this.width = width;\n    this.height = height; // set texture dimension\n\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, this.width, this.height, 0, this.format, this.type, null);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n  };\n})(d3, _math__WEBPACK_IMPORTED_MODULE_5__, document);\n\n(function (d3, m3, m4, document, undefined) {\n  'use strict';\n\n  d3._Shader = function () {};\n\n  var _ = d3._Shader.prototype;\n\n  _.useShaderProgram = function (gl) {\n    gl.useProgram(this.gProgram);\n    gl.shader = this;\n  };\n\n  _.init = function (gl) {\n    var vertexShader = this.getShader(gl, 'vertex-shader');\n\n    if (!vertexShader) {\n      vertexShader = this.loadDefaultVertexShader(gl);\n    }\n\n    var fragmentShader = this.getShader(gl, 'fragment-shader');\n\n    if (!fragmentShader) {\n      fragmentShader = this.loadDefaultFragmentShader(gl);\n    }\n\n    this.gProgram = gl.createProgram();\n    gl.attachShader(this.gProgram, vertexShader);\n    gl.attachShader(this.gProgram, fragmentShader);\n    this.onShaderAttached(gl);\n    gl.linkProgram(this.gProgram);\n\n    if (!gl.getProgramParameter(this.gProgram, gl.LINK_STATUS)) {\n      alert('Could not initialize shaders: ' + gl.getProgramInfoLog(this.gProgram));\n    }\n\n    gl.useProgram(this.gProgram);\n    this.initUniformLocations(gl);\n    gl.useProgram(null);\n  };\n\n  _.onShaderAttached = function (gl) {\n    // set vertex attributes explicitly\n    this.vertexPositionAttribute = 0;\n    this.vertexNormalAttribute = 1;\n    gl.bindAttribLocation(this.gProgram, this.vertexPositionAttribute, 'a_vertex_position');\n    gl.bindAttribLocation(this.gProgram, this.vertexNormalAttribute, 'a_vertex_normal');\n  };\n\n  _.getShaderFromStr = function (gl, shaderType, strSrc) {\n    var shader = gl.createShader(shaderType);\n    gl.shaderSource(shader, strSrc);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      alert(shaderScript.type + ' ' + gl.getShaderInfoLog(shader));\n      gl.deleteShader(shader);\n      return undefined;\n    }\n\n    return shader;\n  };\n\n  _.enableAttribsArray = function (gl) {\n    gl.enableVertexAttribArray(this.vertexPositionAttribute);\n  };\n\n  _.disableAttribsArray = function (gl) {\n    gl.disableVertexAttribArray(this.vertexPositionAttribute);\n  };\n\n  _.getShader = function (gl, id) {\n    var shaderScript = document.getElementById(id);\n\n    if (!shaderScript) {\n      return undefined;\n    }\n\n    var sb = [];\n    var k = shaderScript.firstChild;\n\n    while (k) {\n      if (k.nodeType === 3) {\n        sb.push(k.textContent);\n      }\n\n      k = k.nextSibling;\n    }\n\n    var sdrSrc = sb.join('');\n    var shader;\n\n    if (shaderScript.type === 'x-shader/x-fragment') {\n      shader = this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sdrSrc);\n    } else if (shaderScript.type === 'x-shader/x-vertex') {\n      shader = this.getShaderFromStr(gl, gl.VERTEX_SHADER, sdrSrc);\n    } else {\n      return undefined;\n    }\n\n    return shader;\n  };\n\n  _.initUniformLocations = function (gl) {\n    this.modelViewMatrixUniform = gl.getUniformLocation(this.gProgram, 'u_model_view_matrix');\n    this.projectionMatrixUniform = gl.getUniformLocation(this.gProgram, 'u_projection_matrix');\n  };\n\n  _.loadDefaultVertexShader = function (gl) {};\n\n  _.loadDefaultFragmentShader = function (gl) {};\n\n  _.setMatrixUniforms = function (gl, modelMatrix) {\n    if (modelMatrix === undefined) {\n      this.setModelViewMatrix(gl, gl.modelViewMatrix);\n    } else {\n      this.setModelViewMatrix(gl, m4.multiply(gl.modelViewMatrix, modelMatrix, []));\n    }\n  };\n\n  _.setProjectionMatrix = function (gl, matrix) {\n    gl.uniformMatrix4fv(this.projectionMatrixUniform, false, matrix);\n  };\n\n  _.setModelViewMatrix = function (gl, mvMatrix) {\n    gl.uniformMatrix4fv(this.modelViewMatrixUniform, false, mvMatrix);\n  };\n\n  _.setMaterialAmbientColor = function (gl, ambient) {};\n\n  _.setMaterialDiffuseColor = function (gl, diffuse) {};\n\n  _.setMaterialSpecularColor = function (gl, specular) {};\n\n  _.setMaterialShininess = function (gl, shininess) {};\n\n  _.setMaterialAlpha = function (gl, alpha) {};\n})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat3\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat4\"], document);\n\n(function (d3, m3, m4, document, undefined) {\n  'use strict';\n\n  d3.FXAAShader = function () {};\n\n  var _super = d3._Shader.prototype;\n\n  var _ = d3.FXAAShader.prototype = new d3._Shader();\n\n  _.initUniformLocations = function (gl) {\n    // assign uniform properties\n    _super.initUniformLocations.call(this, gl);\n\n    this.buffersizeUniform = gl.getUniformLocation(this.gProgram, 'u_buffersize');\n    this.antialiasUniform = gl.getUniformLocation(this.gProgram, 'u_antialias');\n    this.edgeThresholdUniform = gl.getUniformLocation(this.gProgram, 'u_edge_threshold');\n    this.edgeThresholdMinUniform = gl.getUniformLocation(this.gProgram, 'u_edge_threshold_min');\n    this.searchStepsUniform = gl.getUniformLocation(this.gProgram, 'u_search_steps');\n    this.searchThresholdUniform = gl.getUniformLocation(this.gProgram, 'u_search_threshold');\n    this.subpixCapUniform = gl.getUniformLocation(this.gProgram, 'u_subpix_cap');\n    this.subpixTrimUniform = gl.getUniformLocation(this.gProgram, 'u_subpix_trim');\n  };\n\n  _.setBuffersize = function (gl, width, height) {\n    gl.uniform2f(this.buffersizeUniform, width, height);\n  };\n\n  _.setAntialias = function (gl, val) {\n    gl.uniform1f(this.antialiasUniform, val);\n  };\n\n  _.setEdgeThreshold = function (gl, val) {\n    gl.uniform1f(this.edgeThresholdUniform, val);\n  };\n\n  _.setEdgeThresholdMin = function (gl, val) {\n    gl.uniform1f(this.edgeThresholdMinUniform, val);\n  };\n\n  _.setSearchSteps = function (gl, val) {\n    gl.uniform1i(this.searchStepsUniform, val);\n  };\n\n  _.setSearchThreshold = function (gl, val) {\n    gl.uniform1f(this.searchThresholdUniform, val);\n  };\n\n  _.setSubpixCap = function (gl, val) {\n    gl.uniform1f(this.subpixCapUniform, val);\n  };\n\n  _.setSubpixTrim = function (gl, val) {\n    gl.uniform1f(this.subpixTrimUniform, val);\n  };\n\n  _.loadDefaultVertexShader = function (gl) {\n    var sb = ['precision mediump float;', // attributes set when rendering objects\n    'attribute vec3 a_vertex_position;', 'varying vec2 v_texcoord;', 'void main() {', 'gl_Position = vec4(a_vertex_position, 1.);', 'v_texcoord = a_vertex_position.xy * .5 + .5;', '}'].join('');\n    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);\n  };\n\n  _.loadDefaultFragmentShader = function (gl) {\n    var sb = ['precision mediump float;', 'const int fxaaMaxSearchSteps = 128;', 'uniform float u_edge_threshold;', 'uniform float u_edge_threshold_min;', 'uniform int u_search_steps;', 'uniform float u_search_threshold;', 'uniform float u_subpix_cap;', 'uniform float u_subpix_trim;', 'uniform sampler2D u_sampler0;', 'uniform vec2 u_buffersize;', 'uniform bool u_antialias;', 'varying vec2 v_texcoord;', 'float FxaaLuma(vec3 rgb) {', 'return rgb.y * (0.587/0.299) + rgb.x;', '}', 'vec3 FxaaLerp3(vec3 a, vec3 b, float amountOfA) {', 'return (vec3(-amountOfA) * b) + ((a * vec3(amountOfA)) + b);', '}', 'vec4 FxaaTexOff(sampler2D tex, vec2 pos, vec2 off, vec2 rcpFrame) {', 'return texture2D(tex, pos + off * rcpFrame);', '}', 'vec3 FxaaPixelShader(vec2 pos, sampler2D tex, vec2 rcpFrame) {', 'float subpix_trim_scale = (1.0/(1.0 - u_subpix_trim));', 'vec3 rgbN = FxaaTexOff(tex, pos.xy, vec2( 0.,-1.), rcpFrame).xyz;', 'vec3 rgbW = FxaaTexOff(tex, pos.xy, vec2(-1., 0.), rcpFrame).xyz;', 'vec3 rgbM = FxaaTexOff(tex, pos.xy, vec2( 0., 0.), rcpFrame).xyz;', 'vec3 rgbE = FxaaTexOff(tex, pos.xy, vec2( 1., 0.), rcpFrame).xyz;', 'vec3 rgbS = FxaaTexOff(tex, pos.xy, vec2( 0., 1.), rcpFrame).xyz;', 'float lumaN = FxaaLuma(rgbN);', 'float lumaW = FxaaLuma(rgbW);', 'float lumaM = FxaaLuma(rgbM);', 'float lumaE = FxaaLuma(rgbE);', 'float lumaS = FxaaLuma(rgbS);', 'float rangeMin = min(lumaM, min(min(lumaN, lumaW), min(lumaS, lumaE)));', 'float rangeMax = max(lumaM, max(max(lumaN, lumaW), max(lumaS, lumaE)));', 'float range = rangeMax - rangeMin;', 'if(range < max(u_edge_threshold_min, rangeMax * u_edge_threshold)) {', 'return rgbM;', '}', 'vec3 rgbL = rgbN + rgbW + rgbM + rgbE + rgbS;', 'float lumaL = (lumaN + lumaW + lumaE + lumaS) * 0.25;', 'float rangeL = abs(lumaL - lumaM);', 'float blendL = max(0.0, (rangeL / range) - u_subpix_trim) * subpix_trim_scale;', 'blendL = min(u_subpix_cap, blendL);', 'vec3 rgbNW = FxaaTexOff(tex, pos.xy, vec2(-1.,-1.), rcpFrame).xyz;', 'vec3 rgbNE = FxaaTexOff(tex, pos.xy, vec2( 1.,-1.), rcpFrame).xyz;', 'vec3 rgbSW = FxaaTexOff(tex, pos.xy, vec2(-1., 1.), rcpFrame).xyz;', 'vec3 rgbSE = FxaaTexOff(tex, pos.xy, vec2( 1., 1.), rcpFrame).xyz;', 'rgbL += (rgbNW + rgbNE + rgbSW + rgbSE);', 'rgbL *= vec3(1.0/9.0);', 'float lumaNW = FxaaLuma(rgbNW);', 'float lumaNE = FxaaLuma(rgbNE);', 'float lumaSW = FxaaLuma(rgbSW);', 'float lumaSE = FxaaLuma(rgbSE);', 'float edgeVert =', 'abs((0.25 * lumaNW) + (-0.5 * lumaN) + (0.25 * lumaNE)) +', 'abs((0.50 * lumaW ) + (-1.0 * lumaM) + (0.50 * lumaE )) +', 'abs((0.25 * lumaSW) + (-0.5 * lumaS) + (0.25 * lumaSE));', 'float edgeHorz =', 'abs((0.25 * lumaNW) + (-0.5 * lumaW) + (0.25 * lumaSW)) +', 'abs((0.50 * lumaN ) + (-1.0 * lumaM) + (0.50 * lumaS )) +', 'abs((0.25 * lumaNE) + (-0.5 * lumaE) + (0.25 * lumaSE));', 'bool horzSpan = edgeHorz >= edgeVert;', 'float lengthSign = horzSpan ? -rcpFrame.y : -rcpFrame.x;', 'if(!horzSpan) {', 'lumaN = lumaW;', 'lumaS = lumaE;', '}', 'float gradientN = abs(lumaN - lumaM);', 'float gradientS = abs(lumaS - lumaM);', 'lumaN = (lumaN + lumaM) * 0.5;', 'lumaS = (lumaS + lumaM) * 0.5;', 'if (gradientN < gradientS) {', 'lumaN = lumaS;', 'lumaN = lumaS;', 'gradientN = gradientS;', 'lengthSign *= -1.0;', '}', 'vec2 posN;', 'posN.x = pos.x + (horzSpan ? 0.0 : lengthSign * 0.5);', 'posN.y = pos.y + (horzSpan ? lengthSign * 0.5 : 0.0);', 'gradientN *= u_search_threshold;', 'vec2 posP = posN;', 'vec2 offNP = horzSpan ? vec2(rcpFrame.x, 0.0) : vec2(0.0, rcpFrame.y);', 'float lumaEndN = lumaN;', 'float lumaEndP = lumaN;', 'bool doneN = false;', 'bool doneP = false;', 'posN += offNP * vec2(-1.0, -1.0);', 'posP += offNP * vec2( 1.0,  1.0);', 'for(int i = 0; i < fxaaMaxSearchSteps; i++) {', 'if(i >= u_search_steps) break;', 'if(!doneN) {', 'lumaEndN = FxaaLuma(texture2D(tex, posN.xy).xyz);', '}', 'if(!doneP) {', 'lumaEndP = FxaaLuma(texture2D(tex, posP.xy).xyz);', '}', 'doneN = doneN || (abs(lumaEndN - lumaN) >= gradientN);', 'doneP = doneP || (abs(lumaEndP - lumaN) >= gradientN);', 'if(doneN && doneP) {', 'break;', '}', 'if(!doneN) {', 'posN -= offNP;', '}', 'if(!doneP) {', 'posP += offNP;', '}', '}', 'float dstN = horzSpan ? pos.x - posN.x : pos.y - posN.y;', 'float dstP = horzSpan ? posP.x - pos.x : posP.y - pos.y;', 'bool directionN = dstN < dstP;', 'lumaEndN = directionN ? lumaEndN : lumaEndP;', 'if(((lumaM - lumaN) < 0.0) == ((lumaEndN - lumaN) < 0.0)) {', 'lengthSign = 0.0;', '}', 'float spanLength = (dstP + dstN);', 'dstN = directionN ? dstN : dstP;', 'float subPixelOffset = (0.5 + (dstN * (-1.0/spanLength))) * lengthSign;', 'vec3 rgbF = texture2D(tex, vec2(', 'pos.x + (horzSpan ? 0.0 : subPixelOffset),', 'pos.y + (horzSpan ? subPixelOffset : 0.0))).xyz;', 'return FxaaLerp3(rgbL, rgbF, blendL);', '}', 'void main() {', 'gl_FragColor = texture2D(u_sampler0, v_texcoord);', 'if(u_antialias) {', 'gl_FragColor.xyz = FxaaPixelShader(v_texcoord, u_sampler0, 1. / u_buffersize).xyz;', '}', '}'].join('\\n');\n    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);\n  };\n})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat3\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat4\"], document);\n\n(function (d3, m3, m4, document, undefined) {\n  'use strict';\n\n  d3.LabelShader = function () {};\n\n  var _super = d3._Shader.prototype;\n\n  var _ = d3.LabelShader.prototype = new d3._Shader();\n\n  _.initUniformLocations = function (gl) {\n    _super.initUniformLocations.call(this, gl);\n\n    this.dimensionUniform = gl.getUniformLocation(this.gProgram, 'u_dimension');\n  };\n\n  _.onShaderAttached = function (gl) {\n    _super.onShaderAttached.call(this, gl);\n\n    this.vertexTexCoordAttribute = 2;\n    gl.bindAttribLocation(this.gProgram, this.vertexTexCoordAttribute, 'a_vertex_texcoord');\n  };\n\n  _.loadDefaultVertexShader = function (gl) {\n    var sb = ['precision mediump float;', // attributes set when rendering objects\n    'attribute vec3 a_vertex_position;', 'attribute vec3 a_vertex_normal;', 'attribute vec2 a_vertex_texcoord;', // matrices set by gl.setMatrixUniforms\n    'uniform mat4 u_model_view_matrix;', 'uniform mat4 u_projection_matrix;', 'uniform vec2 u_dimension;', // sent to the fragment shader\n    'varying vec2 v_texcoord;', 'void main() {', 'gl_Position = u_model_view_matrix * vec4(a_vertex_position, 1.);', 'vec4 depth_pos = vec4(gl_Position);', 'depth_pos.z += a_vertex_normal.z;', 'gl_Position = u_projection_matrix * gl_Position;', 'depth_pos = u_projection_matrix * depth_pos;', 'gl_Position /= gl_Position.w;', 'gl_Position.xy += a_vertex_normal.xy / u_dimension * 2.;', 'gl_Position.z = depth_pos.z / depth_pos.w;', 'v_texcoord = a_vertex_texcoord;', '}'].join('');\n    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);\n  };\n\n  _.loadDefaultFragmentShader = function (gl) {\n    var sb = [// set macro for depth mmap texture\n    gl.depthTextureExt ? '#define CWC_DEPTH_TEX\\n' : '', // set float precision\n    'precision mediump float;', // texture for draw text nor shadow map\n    'uniform sampler2D u_image;', // from the vertex shader\n    'varying vec2 v_texcoord;', 'void main(void) {', 'gl_FragColor = texture2D(u_image, v_texcoord);', '}'].join('');\n    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);\n  };\n\n  _.enableAttribsArray = function (gl) {\n    _super.enableAttribsArray.call(this, gl);\n\n    gl.enableVertexAttribArray(this.vertexNormalAttribute);\n    gl.enableVertexAttribArray(this.vertexTexCoordAttribute);\n  };\n\n  _.disableAttribsArray = function (gl) {\n    _super.disableAttribsArray.call(this, gl);\n\n    gl.disableVertexAttribArray(this.vertexNormalAttribute);\n    gl.disableVertexAttribArray(this.vertexTexCoordAttribute);\n  };\n\n  _.setDimension = function (gl, width, height) {\n    gl.uniform2f(this.dimensionUniform, width, height);\n  };\n})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat3\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat4\"], document);\n\n(function (d3, m3, m4, document, undefined) {\n  'use strict';\n\n  d3.LightingShader = function () {};\n\n  var _super = d3._Shader.prototype;\n\n  var _ = d3.LightingShader.prototype = new d3._Shader();\n\n  _.initUniformLocations = function (gl) {\n    _super.initUniformLocations.call(this, gl); // assign uniform properties\n\n\n    this.positionSampleUniform = gl.getUniformLocation(this.gProgram, 'u_position_sample');\n    this.colorSampleUniform = gl.getUniformLocation(this.gProgram, 'u_color_sample');\n    this.ssaoSampleUniform = gl.getUniformLocation(this.gProgram, 'u_ssao_sample');\n    this.outlineSampleUniform = gl.getUniformLocation(this.gProgram, 'u_outline_sample');\n  };\n\n  _.loadDefaultVertexShader = function (gl) {\n    var sb = ['precision mediump float;', // attributes set when rendering objects\n    'attribute vec3 a_vertex_position;', // sent to the fragment shader\n    'varying vec2 v_texcoord;', 'void main() {', 'gl_Position = vec4(a_vertex_position, 1.);', 'v_texcoord = a_vertex_position.xy * .5 + .5;', '}'].join('');\n    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);\n  };\n\n  _.loadDefaultFragmentShader = function (gl) {\n    var sb = [// set float precision\n    'precision mediump float;', 'uniform sampler2D u_position_sample;', 'uniform sampler2D u_color_sample;', 'uniform sampler2D u_ssao_sample;', 'uniform sampler2D u_outline_sample;', 'varying vec2 v_texcoord;', 'void main() {', 'vec4 position = texture2D(u_position_sample, v_texcoord);', 'vec4 color = texture2D(u_color_sample, v_texcoord);', 'vec4 ao = texture2D(u_ssao_sample, v_texcoord);', 'float outline = texture2D(u_outline_sample, v_texcoord).r;', // skip background color\n    'if(position.w == 0. && outline == 1.) {', // 'gl_FragColor = vec4(0., 0., 0., 1.);',\n    'return;', '}', 'gl_FragColor = vec4(color.rgb * ao.r * outline, 1.);', '}'].join('');\n    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);\n  };\n})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat3\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat4\"], document);\n\n(function (d3, m3, m4, document, undefined) {\n  'use strict';\n\n  d3.NormalShader = function () {};\n\n  var _super = d3._Shader.prototype;\n\n  var _ = d3.NormalShader.prototype = new d3._Shader();\n\n  _.initUniformLocations = function (gl) {\n    _super.initUniformLocations.call(this, gl); // assign uniform properties\n\n\n    this.normalMatrixUniform = gl.getUniformLocation(this.gProgram, 'u_normal_matrix');\n  };\n\n  _.loadDefaultVertexShader = function (gl) {\n    var sb = ['precision mediump float;', // attributes set when rendering objects\n    'attribute vec3 a_vertex_position;', 'attribute vec3 a_vertex_normal;', // matrices set by gl.setMatrixUniforms\n    'uniform mat4 u_model_view_matrix;', 'uniform mat4 u_projection_matrix;', 'uniform mat3 u_normal_matrix;', // sent to the fragment shader\n    'varying vec3 v_normal;', 'void main() {', 'v_normal = length(a_vertex_normal)==0. ? a_vertex_normal : u_normal_matrix * a_vertex_normal;', 'gl_Position = u_projection_matrix * u_model_view_matrix * vec4(a_vertex_position, 1.);', '}'].join('');\n    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);\n  };\n\n  _.loadDefaultFragmentShader = function (gl) {\n    var sb = [// set float precision\n    'precision mediump float;', 'varying vec3 v_normal;', 'void main(void) {', 'vec3 normal = length(v_normal)==0. ? vec3(0., 0., 1.) : normalize(v_normal);', 'gl_FragColor = vec4(normal, 0.);', '}'].join('');\n    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);\n  };\n\n  _.enableAttribsArray = function (gl) {\n    _super.enableAttribsArray.call(this, gl);\n\n    gl.enableVertexAttribArray(this.vertexNormalAttribute);\n  };\n\n  _.disableAttribsArray = function (gl) {\n    _super.disableAttribsArray.call(this, gl);\n\n    gl.disableVertexAttribArray(this.vertexNormalAttribute);\n  };\n\n  _.setModelViewMatrix = function (gl, mvMatrix) {\n    _super.setModelViewMatrix.call(this, gl, mvMatrix); // create the normal matrix and push it to the graphics card\n\n\n    var normalMatrix = m3.transpose(m4.toInverseMat3(mvMatrix, []));\n    gl.uniformMatrix3fv(this.normalMatrixUniform, false, normalMatrix);\n  };\n})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat3\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat4\"], document);\n\n(function (d3, m3, m4, document, undefined) {\n  'use strict';\n\n  d3.OutlineShader = function () {};\n\n  var _super = d3._Shader.prototype;\n\n  var _ = d3.OutlineShader.prototype = new d3._Shader();\n\n  _.initUniformLocations = function (gl) {\n    _super.initUniformLocations.call(this, gl);\n\n    this.normalSampleUniform = gl.getUniformLocation(this.gProgram, 'u_normal_sample');\n    this.depthSampleUniform = gl.getUniformLocation(this.gProgram, 'u_depth_sample');\n    this.gbufferTextureSizeUniform = gl.getUniformLocation(this.gProgram, 'u_gbuffer_texture_size');\n    this.normalThresholdUniform = gl.getUniformLocation(this.gProgram, 'u_normal_threshold');\n    this.depthThresholdUniform = gl.getUniformLocation(this.gProgram, 'u_depth_threshold');\n    this.thicknessUniform = gl.getUniformLocation(this.gProgram, 'u_thickness');\n  };\n\n  _.loadDefaultVertexShader = function (gl) {\n    var sb = ['precision mediump float;', // attributes set when rendering objects\n    'attribute vec3 a_vertex_position;', 'varying vec2 v_texcoord;', 'void main() {', 'gl_Position = vec4(a_vertex_position, 1.);', 'v_texcoord = a_vertex_position.xy * .5 + .5;', '}'].join('');\n    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);\n  };\n\n  _.loadDefaultFragmentShader = function (gl) {\n    var sb = [// set float precision\n    'precision mediump float;', 'uniform sampler2D u_normal_sample;', 'uniform sampler2D u_depth_sample;', 'uniform float u_normal_threshold;', 'uniform float u_depth_threshold;', 'uniform float u_thickness;', 'uniform vec2 u_gbuffer_texture_size;', 'varying vec2 v_texcoord;', 'void main() {', 'vec3 normal = texture2D(u_normal_sample, v_texcoord).xyz;', 'float depth = texture2D(u_depth_sample, v_texcoord).r;', // check background pixel\n    // 'if(depth == 1.) {',\n    // \t'return;',\n    // '}',\n    'vec2 texelSize = u_thickness/u_gbuffer_texture_size * .5;', 'vec2 offsets[8];', 'offsets[0] = vec2(-texelSize.x, -texelSize.y);', 'offsets[1] = vec2(-texelSize.x, 0);', 'offsets[2] = vec2(-texelSize.x, texelSize.y);', 'offsets[3] = vec2(0, -texelSize.y);', 'offsets[4] = vec2(0,  texelSize.y);', 'offsets[5] = vec2(texelSize.x, -texelSize.y);', 'offsets[6] = vec2(texelSize.x, 0);', 'offsets[7] = vec2(texelSize.x, texelSize.y);', 'float edge = 0.;', 'for (int i = 0; i < 8; i++) {', 'vec3 sampleNorm = texture2D(u_normal_sample, v_texcoord + offsets[i]).xyz;', 'if(normal == vec3(.0, .0, .0)) {', 'if(sampleNorm != vec3(.0, .0, .0)) {', 'edge = 1.0;', 'break;', '}', 'continue;', '}', 'if (dot(sampleNorm, normal) < u_normal_threshold) {', 'edge = 1.0;', 'break;', '}', 'float sampleDepth = texture2D(u_depth_sample, v_texcoord + offsets[i]).r;', 'if (abs(sampleDepth - depth) > u_depth_threshold) {', 'edge = 1.0;', 'break;', '}', '}', 'edge = 1. - edge;', 'gl_FragColor = vec4(edge, edge, edge, 1.);', '}'].join('');\n    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);\n  };\n\n  _.setGbufferTextureSize = function (gl, width, height) {\n    gl.uniform2f(this.gbufferTextureSizeUniform, width, height);\n  };\n\n  _.setNormalThreshold = function (gl, value) {\n    gl.uniform1f(this.normalThresholdUniform, value);\n  };\n\n  _.setDepthThreshold = function (gl, value) {\n    gl.uniform1f(this.depthThresholdUniform, value);\n  };\n\n  _.setThickness = function (gl, value) {\n    gl.uniform1f(this.thicknessUniform, value);\n  };\n})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat3\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat4\"], document);\n\n(function (d3, m3, m4, document, undefined) {\n  'use strict';\n\n  d3.PhongShader = function () {};\n\n  var _super = d3._Shader.prototype;\n\n  var _ = d3.PhongShader.prototype = new d3._Shader();\n\n  _.initUniformLocations = function (gl) {\n    _super.initUniformLocations.call(this, gl); // assign uniform properties\n\n\n    this.shadowUniform = gl.getUniformLocation(this.gProgram, 'u_shadow');\n    this.flatColorUniform = gl.getUniformLocation(this.gProgram, 'u_flat_color');\n    this.normalMatrixUniform = gl.getUniformLocation(this.gProgram, 'u_normal_matrix');\n    this.lightModelViewMatrixUniform = gl.getUniformLocation(this.gProgram, 'u_light_model_view_matrix');\n    this.lightProjectionMatrixUniform = gl.getUniformLocation(this.gProgram, 'u_light_projection_matrix');\n    this.lightDiffuseColorUniform = gl.getUniformLocation(this.gProgram, 'u_light_diffuse_color');\n    this.lightSpecularColorUniform = gl.getUniformLocation(this.gProgram, 'u_light_specular_color');\n    this.lightDirectionUniform = gl.getUniformLocation(this.gProgram, 'u_light_direction');\n    this.materialAmbientColorUniform = gl.getUniformLocation(this.gProgram, 'u_material_ambient_color');\n    this.materialDiffuseColorUniform = gl.getUniformLocation(this.gProgram, 'u_material_diffuse_color');\n    this.materialSpecularColorUniform = gl.getUniformLocation(this.gProgram, 'u_material_specular_color');\n    this.materialShininessUniform = gl.getUniformLocation(this.gProgram, 'u_material_shininess');\n    this.materialAlphaUniform = gl.getUniformLocation(this.gProgram, 'u_material_alpha');\n    this.fogModeUniform = gl.getUniformLocation(this.gProgram, 'u_fog_mode');\n    this.fogColorUniform = gl.getUniformLocation(this.gProgram, 'u_fog_color');\n    this.fogStartUniform = gl.getUniformLocation(this.gProgram, 'u_fog_start');\n    this.fogEndUniform = gl.getUniformLocation(this.gProgram, 'u_fog_end');\n    this.fogDensityUniform = gl.getUniformLocation(this.gProgram, 'u_fog_density'); // texture for shadow map\n\n    this.shadowDepthSampleUniform = gl.getUniformLocation(this.gProgram, 'u_shadow_depth_sample');\n    this.shadowTextureSizeUniform = gl.getUniformLocation(this.gProgram, 'u_shadow_texture_size');\n    this.shadowIntensityUniform = gl.getUniformLocation(this.gProgram, 'u_shadow_intensity'); // gamma correction\n\n    this.gammaCorrectionUniform = gl.getUniformLocation(this.gProgram, 'u_gamma_inverted'); // point size\n\n    this.pointSizeUniform = gl.getUniformLocation(this.gProgram, 'u_point_size');\n  };\n\n  _.loadDefaultVertexShader = function (gl) {\n    var sb = ['precision mediump float;', // attributes set when rendering objects\n    'attribute vec3 a_vertex_position;', 'attribute vec3 a_vertex_normal;', // scene uniforms\n    'uniform vec3 u_light_diffuse_color;', 'uniform vec3 u_material_ambient_color;', 'uniform vec3 u_material_diffuse_color;', // matrices set by gl.setMatrixUniforms\n    'uniform mat4 u_model_view_matrix;', 'uniform mat4 u_projection_matrix;', 'uniform mat3 u_normal_matrix;', 'uniform mat4 u_light_model_view_matrix;', 'uniform mat4 u_light_projection_matrix;', 'uniform bool u_shadow;', // sent to the fragment shader\n    'varying vec3 v_viewpos;', 'varying vec4 v_shadcoord;', 'varying vec3 v_diffuse;', 'varying vec3 v_ambient;', 'varying vec3 v_normal;', 'uniform float u_point_size;', 'void main() {', 'v_normal = length(a_vertex_normal)==0. ? a_vertex_normal : u_normal_matrix * a_vertex_normal;', 'v_ambient = u_material_ambient_color;', 'v_diffuse = u_material_diffuse_color * u_light_diffuse_color;', 'if(u_shadow) {', 'v_shadcoord = u_light_projection_matrix * u_light_model_view_matrix * vec4(a_vertex_position, 1.);', 'v_shadcoord /= v_shadcoord.w;', '}', 'vec4 viewPos = u_model_view_matrix * vec4(a_vertex_position, 1.);', 'v_viewpos = viewPos.xyz / viewPos.w;', 'gl_Position = u_projection_matrix * viewPos;', // just to make sure the w is 1\n    'gl_Position /= gl_Position.w;', 'gl_PointSize = u_point_size;', '}'].join('');\n    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);\n  };\n\n  _.loadDefaultFragmentShader = function (gl) {\n    var sb = [// set macro for depth mmap texture\n    gl.depthTextureExt ? '#define CWC_DEPTH_TEX\\n' : '', // set float precision\n    'precision mediump float;', // scene uniforms\n    'uniform vec3 u_light_specular_color;', 'uniform vec3 u_light_direction;', 'uniform vec3 u_material_specular_color;', 'uniform float u_material_shininess;', 'uniform float u_material_alpha;', 'uniform int u_fog_mode;', 'uniform vec3 u_fog_color;', 'uniform float u_fog_density;', 'uniform float u_fog_start;', 'uniform float u_fog_end;', 'uniform bool u_shadow;', 'uniform float u_shadow_intensity;', 'uniform bool u_flat_color;', 'uniform float u_gamma_inverted;', // texture for shadow map\n    'uniform sampler2D u_shadow_depth_sample;', 'uniform vec2 u_shadow_texture_size;', // from the vertex shader\n    'varying vec3 v_viewpos;', 'varying vec4 v_shadcoord;', 'varying vec3 v_diffuse;', 'varying vec3 v_ambient;', 'varying vec3 v_normal;', '\\n#ifndef CWC_DEPTH_TEX\\n', 'float unpack (vec4 colour) {', 'const vec4 bitShifts = vec4(1.,', '1. / 255.,', '1. / (255. * 255.),', '1. / (255. * 255. * 255.));', 'return dot(colour, bitShifts);', '}', '\\n#endif\\n', 'float shadowMapDepth(vec4 shadowMapColor) {', 'float zShadowMap;', '\\n#ifdef CWC_DEPTH_TEX\\n', 'zShadowMap = shadowMapColor.r;', '\\n#else\\n', 'zShadowMap = unpack(shadowMapColor);', '\\n#endif\\n', 'return zShadowMap;', '}', 'void main(void) {', 'vec3 color = v_diffuse;', 'if(length(v_normal)!=0.){', 'vec3 normal = normalize(v_normal);', 'vec3 lightDir = normalize(-u_light_direction);', 'float nDotL = dot(normal, lightDir);', 'float shadow = 0.0;', 'if(u_shadow) {', 'vec3 depthCoord = .5 + v_shadcoord.xyz / v_shadcoord.w * .5;', 'if(depthCoord.z <= 1. && depthCoord.z >= 0.) {', 'float bias = max(.05 * (1. - nDotL), .005);', 'vec2 texelSize = 1. / u_shadow_texture_size;', 'for(int x = -1; x <= 1; ++x) {', 'for(int y = -1; y <= 1; ++y)  {', 'vec4 shadowMapColor = texture2D(u_shadow_depth_sample, depthCoord.xy + vec2(x, y) * texelSize);', 'float zShadowMap = shadowMapDepth(shadowMapColor);', 'shadow += zShadowMap + bias < depthCoord.z ? 1. : 0.;', '}', '}', 'shadow /= 9.;', 'shadow *= u_shadow_intensity;', '}', '}', 'if(!u_flat_color) {', 'vec3 viewDir = normalize(-v_viewpos);', 'vec3 halfDir = normalize(lightDir + viewDir);', 'float nDotHV = max(dot(halfDir, normal), 0.);', 'vec3 specular = u_material_specular_color * u_light_specular_color;', 'color*=max(nDotL, 0.);', 'color+=specular * pow(nDotHV, u_material_shininess);', '}', // set the color\n    'color = (1.-shadow)*color+v_ambient;', '}', 'gl_FragColor = vec4(pow(color, vec3(u_gamma_inverted)), u_material_alpha);', 'if(u_fog_mode != 0){', 'float fogCoord = 1.-clamp((u_fog_end - gl_FragCoord.z/gl_FragCoord.w) / (u_fog_end - u_fog_start), 0., 1.);', 'float fogFactor = 1.;', // linear equation\n    'if(u_fog_mode == 1){', 'fogFactor = 1.-fogCoord;', '}', // exp equation\n    'else if(u_fog_mode == 2) {', 'fogFactor = clamp(exp(-u_fog_density*fogCoord), 0., 1.);', '}', // exp2 equation\n    'else if(u_fog_mode == 3) {', 'fogFactor = clamp(exp(-pow(u_fog_density*fogCoord, 2.)), 0., 1.);', '}', 'gl_FragColor = mix(vec4(u_fog_color, 1.), gl_FragColor, fogFactor);', // for debugging\n    // 'gl_FragColor = vec4(vec3(fogFactor), 1.);',\n    '}', '}'].join('');\n    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);\n  };\n\n  _.enableAttribsArray = function (gl) {\n    _super.enableAttribsArray.call(this, gl);\n\n    gl.enableVertexAttribArray(this.vertexNormalAttribute);\n  };\n\n  _.disableAttribsArray = function (gl) {\n    _super.disableAttribsArray.call(this, gl);\n\n    gl.disableVertexAttribArray(this.vertexNormalAttribute);\n  };\n\n  _.setMatrixUniforms = function (gl, modelMatrix) {\n    if (modelMatrix === undefined) {\n      this.setModelViewMatrix(gl, gl.modelViewMatrix);\n      this.setLightModelViewMatrix(gl, gl.lightViewMatrix);\n    } else {\n      var mvMatrix = m4.multiply(gl.modelViewMatrix, modelMatrix, []);\n      var lightModelViewMatrix = m4.multiply(gl.lightViewMatrix, modelMatrix, []);\n      this.setModelViewMatrix(gl, mvMatrix);\n      this.setLightModelViewMatrix(gl, lightModelViewMatrix);\n    }\n  };\n\n  _.setModelViewMatrix = function (gl, mvMatrix) {\n    _super.setModelViewMatrix.call(this, gl, mvMatrix); // create the normal matrix and push it to the graphics card\n\n\n    var normalMatrix = m3.transpose(m4.toInverseMat3(mvMatrix, []));\n    gl.uniformMatrix3fv(this.normalMatrixUniform, false, normalMatrix);\n  };\n\n  _.setFlatColor = function (gl, enabled) {\n    gl.uniform1i(this.flatColorUniform, enabled);\n  };\n\n  _.setShadow = function (gl, enabled) {\n    gl.uniform1i(this.shadowUniform, enabled);\n  };\n\n  _.setFogMode = function (gl, mode) {\n    gl.uniform1i(this.fogModeUniform, mode);\n  };\n\n  _.setFogColor = function (gl, color) {\n    gl.uniform3fv(this.fogColorUniform, color);\n  };\n\n  _.setFogStart = function (gl, fogStart) {\n    gl.uniform1f(this.fogStartUniform, fogStart);\n  };\n\n  _.setFogEnd = function (gl, fogEnd) {\n    gl.uniform1f(this.fogEndUniform, fogEnd);\n  };\n\n  _.setFogDensity = function (gl, density) {\n    gl.uniform1f(this.fogDensityUniform, density);\n  };\n\n  _.setMaterialAmbientColor = function (gl, ambient) {\n    gl.uniform3fv(this.materialAmbientColorUniform, ambient);\n  };\n\n  _.setMaterialDiffuseColor = function (gl, diffuse) {\n    gl.uniform3fv(this.materialDiffuseColorUniform, diffuse);\n  };\n\n  _.setMaterialSpecularColor = function (gl, specular) {\n    gl.uniform3fv(this.materialSpecularColorUniform, specular);\n  };\n\n  _.setMaterialShininess = function (gl, shininess) {\n    gl.uniform1f(this.materialShininessUniform, shininess);\n  };\n\n  _.setMaterialAlpha = function (gl, alpha) {\n    gl.uniform1f(this.materialAlphaUniform, alpha);\n  };\n\n  _.setLightDiffuseColor = function (gl, diffuse) {\n    gl.uniform3fv(this.lightDiffuseColorUniform, diffuse);\n  };\n\n  _.setLightSpecularColor = function (gl, specular) {\n    gl.uniform3fv(this.lightSpecularColorUniform, specular);\n  };\n\n  _.setLightDirection = function (gl, direction) {\n    gl.uniform3fv(this.lightDirectionUniform, direction);\n  };\n\n  _.setLightModelViewMatrix = function (gl, mvMatrix) {\n    gl.uniformMatrix4fv(this.lightModelViewMatrixUniform, false, mvMatrix);\n  };\n\n  _.setLightProjectionMatrix = function (gl, matrix) {\n    gl.uniformMatrix4fv(this.lightProjectionMatrixUniform, false, matrix);\n  };\n\n  _.setShadowTextureSize = function (gl, width, height) {\n    gl.uniform2f(this.shadowTextureSizeUniform, width, height);\n  };\n\n  _.setShadowIntensity = function (gl, intensity) {\n    gl.uniform1f(this.shadowIntensityUniform, intensity);\n  };\n\n  _.setGammaCorrection = function (gl, gammaCorrection) {\n    // make sure gamma correction is inverted here as it is more efficient in the shader\n    gl.uniform1f(this.gammaCorrectionUniform, 1.0 / gammaCorrection);\n  };\n\n  _.setPointSize = function (gl, pointSize) {\n    gl.uniform1f(this.pointSizeUniform, pointSize);\n  };\n})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat3\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat4\"], document);\n\n(function (d3, m3, m4, document, undefined) {\n  'use strict';\n\n  d3.PickShader = function () {};\n\n  var _super = d3._Shader.prototype;\n\n  var _ = d3.PickShader.prototype = new d3._Shader();\n\n  _.initUniformLocations = function (gl) {\n    // assign uniform properties\n    _super.initUniformLocations.call(this, gl);\n\n    this.materialDiffuseColorUniform = gl.getUniformLocation(this.gProgram, 'u_material_diffuse_color');\n  };\n\n  _.loadDefaultVertexShader = function (gl) {\n    var sb = ['precision mediump float;', // attributes set when rendering objects\n    'attribute vec3 a_vertex_position;', // matrices set by gl.setMatrixUniforms\n    'uniform mat4 u_model_view_matrix;', 'uniform mat4 u_projection_matrix;', 'void main() {', 'gl_Position = u_projection_matrix * u_model_view_matrix * vec4(a_vertex_position, 1.);', // just to make sure the w is 1\n    'gl_Position /= gl_Position.w;', '}'].join('');\n    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);\n  };\n\n  _.loadDefaultFragmentShader = function (gl) {\n    var sb = [// set macro for depth mmap texture\n    gl.depthTextureExt ? '#define CWC_DEPTH_TEX\\n' : '', // set float precision\n    'precision mediump float;', 'uniform vec3 u_material_diffuse_color;', 'void main(void) {', 'gl_FragColor = vec4(u_material_diffuse_color, 1.);', '}'].join('');\n    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);\n  };\n\n  _.setMaterialDiffuseColor = function (gl, diffuse) {\n    gl.uniform3fv(this.materialDiffuseColorUniform, diffuse);\n  };\n})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat3\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat4\"], document);\n\n(function (d3, m3, m4, document, undefined) {\n  'use strict';\n\n  d3.PositionShader = function () {};\n\n  var _super = d3._Shader.prototype;\n\n  var _ = d3.PositionShader.prototype = new d3._Shader();\n\n  _.loadDefaultVertexShader = function (gl) {\n    var sb = ['precision mediump float;', // attributes set when rendering objects\n    'attribute vec3 a_vertex_position;', // matrices set by gl.setMatrixUniforms\n    'uniform mat4 u_model_view_matrix;', 'uniform mat4 u_projection_matrix;', 'varying vec4 v_position;', 'void main() {', 'vec4 viewPos = u_model_view_matrix * vec4(a_vertex_position, 1.);', 'gl_Position = u_projection_matrix * viewPos;', 'v_position = viewPos / viewPos.w;', '}'].join('');\n    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);\n  };\n\n  _.loadDefaultFragmentShader = function (gl) {\n    var sb = [// set float precision\n    'precision mediump float;', 'varying vec4 v_position;', 'void main(void) {', 'gl_FragColor = v_position;', '}'].join('');\n    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);\n  };\n})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat3\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat4\"], document);\n\n(function (d3, m3, m4, document, undefined) {\n  'use strict';\n\n  d3.QuadShader = function () {};\n\n  var _ = d3.QuadShader.prototype = new d3._Shader();\n\n  _.loadDefaultVertexShader = function (gl) {\n    var sb = ['precision mediump float;', // attributes set when rendering objects\n    'attribute vec3 a_vertex_position;', 'varying vec2 v_texcoord;', 'void main() {', 'gl_Position = vec4(a_vertex_position, 1.);', 'v_texcoord = a_vertex_position.xy * .5 + .5;', '}'].join('');\n    return this.getShaderFromStr(gl, gl.VERTEX_SHADER, sb);\n  };\n\n  _.loadDefaultFragmentShader = function (gl) {\n    var sb = [// set float precision\n    'precision mediump float;', 'uniform sampler2D u_image;', 'varying vec2 v_texcoord;', 'void main() {', 'gl_FragColor = texture2D(u_image, v_texcoord);', '}'].join('');\n    return this.getShaderFromStr(gl, gl.FRAGMENT_SHADER, sb);\n  };\n})(d3, _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat3\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"mat4\"], document);\n\n(function (d3, ELEMENT, MarchingCubes, v3, m, undefined) {\n  'use strict';\n\n  var Triangle = function Triangle(i1, i2, i3) {\n    this.i1 = i1;\n    this.i2 = i2;\n    this.i3 = i3;\n  };\n\n  function getRange(atoms, probeRadius) {\n    var r = [Infinity, -Infinity, Infinity, -Infinity, Infinity, -Infinity];\n    var add = probeRadius + 2;\n\n    for (var i = 0, ii = atoms.length; i < ii; i++) {\n      var a = atoms[i];\n      r[0] = m.min(r[0], a.x - add);\n      r[1] = m.max(r[1], a.x + add);\n      r[2] = m.min(r[2], a.y - add);\n      r[3] = m.max(r[3], a.y + add);\n      r[4] = m.min(r[4], a.z - add);\n      r[5] = m.max(r[5], a.z + add);\n    }\n\n    return r;\n  }\n\n  ;\n\n  function addPoint(p, points, xs, ys, zs, step) {\n    // transform back into real space\n    var px = p[0] * step + xs - step;\n    var py = p[1] * step + ys - step;\n    var pz = p[2] * step + zs - step; // find any previous match\n\n    var index = -1;\n    var cutoff = 1E-3;\n\n    for (var j = 0, jj = points.length; j < jj; j++) {\n      var pj = points[j];\n\n      if (m.abs(pj.x - px) < cutoff && m.abs(pj.y - py) < cutoff && m.abs(pj.z - pz) < cutoff) {\n        index = j;\n        break;\n      }\n    }\n\n    if (index == -1) {\n      index = points.length;\n      points.push(new _Atom__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('C', px, py, pz));\n    }\n\n    return index;\n  }\n\n  ;\n\n  d3._Surface = function () {};\n\n  var _ = d3._Surface.prototype = new d3._Mesh();\n\n  _.generate = function (xdif, ydif, zdif, step, range, xsteps, ysteps, zsteps) {\n    // generate the function\n    var vals = [];\n    var z = range[4] - step;\n\n    for (var k = 0; k < zsteps; k++) {\n      var y = range[2] - step;\n\n      for (var j = 0; j < ysteps; j++) {\n        var x = range[0] - step;\n\n        for (var i = 0; i < xsteps; i++) {\n          vals.push(this.calculate(x, y, z));\n          x += step;\n        }\n\n        y += step;\n      }\n\n      z += step;\n    }\n\n    return vals;\n  };\n\n  _.build = function (atoms, probeRadius, resolution) {\n    var positionData = [];\n    var normalData = [];\n    var indexData = []; // calculate the range of the function\n\n    var range = getRange(atoms, probeRadius);\n    var xdif = range[1] - range[0];\n    var ydif = range[3] - range[2];\n    var zdif = range[5] - range[4];\n    var step = m.min(xdif, m.min(ydif, zdif)) / resolution; // generate the function\n\n    var xsteps = 2 + m.ceil(xdif / step);\n    var ysteps = 2 + m.ceil(ydif / step);\n    var zsteps = 2 + m.ceil(zdif / step);\n    var vals = this.generate(xdif, ydif, zdif, step, range, xsteps, ysteps, zsteps); // marching cubes\n\n    var mesh = MarchingCubes(vals, [xsteps, ysteps, zsteps]); // build surface\n\n    var ps = [];\n    var is = [];\n\n    for (var i = 0, ii = mesh.vertices.length; i < ii; i++) {\n      is.push(addPoint(mesh.vertices[i], ps, range[0], range[2], range[4], step));\n    } // triangles\n\n\n    var triangles = [];\n\n    for (var i = 0, ii = mesh.faces.length; i < ii; i++) {\n      var f = mesh.faces[i];\n      var i1 = is[f[0]];\n      var i2 = is[f[1]];\n      var i3 = is[f[2]];\n      triangles.push(new Triangle(i1, i2, i3));\n      indexData.push(i1, i2, i3);\n    } // smoothing - 1 pass\n\n\n    var savedConnections = [];\n\n    for (var i = 0, ii = ps.length; i < ii; i++) {\n      var connections = [];\n\n      for (var j = 0, jj = triangles.length; j < jj; j++) {\n        var t = triangles[j];\n\n        if (t.i1 === i || t.i2 === i || t.i3 === i) {\n          if (t.i1 != i && connections.indexOf(t.i1) === -1) {\n            connections.push(t.i1);\n          }\n\n          if (t.i2 != i && connections.indexOf(t.i2) === -1) {\n            connections.push(t.i2);\n          }\n\n          if (t.i3 != i && connections.indexOf(t.i3) === -1) {\n            connections.push(t.i3);\n          }\n        }\n      }\n\n      savedConnections.push(connections);\n    }\n\n    var tmp = [];\n\n    for (var i = 0, ii = ps.length; i < ii; i++) {\n      var pi = ps[i];\n      var connections = savedConnections[i];\n      var pt = new _Atom__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n\n      if (connections.length < 3) {\n        pt.x = pi.x;\n        pt.y = pi.y;\n        pt.z = pi.z;\n      } else {\n        var wt = 1;\n\n        if (connections.length < 5) {\n          wt = .5;\n        }\n\n        for (var j = 0, jj = connections.length; j < jj; j++) {\n          var pc = ps[connections[j]];\n          pt.x += pc.x;\n          pt.y += pc.y;\n          pt.z += pc.z;\n        }\n\n        pt.x += pi.x * wt;\n        pt.y += pi.y * wt;\n        pt.z += pi.z * wt;\n        var scale = 1 / (wt + connections.length);\n        pt.x *= scale;\n        pt.y *= scale;\n        pt.z *= scale;\n      }\n\n      tmp.push(pt);\n    }\n\n    ps = tmp;\n\n    for (var i = 0, ii = ps.length; i < ii; i++) {\n      var pi = ps[i];\n      positionData.push(pi.x, pi.y, pi.z);\n    } // normals\n\n\n    for (var i = 0, ii = triangles.length; i < ii; i++) {\n      var t = triangles[i];\n      var p1 = ps[t.i1];\n      var p2 = ps[t.i2];\n      var p3 = ps[t.i3];\n      var v12 = [p2.x - p1.x, p2.y - p1.y, p2.z - p1.z];\n      var v13 = [p3.x - p1.x, p3.y - p1.y, p3.z - p1.z];\n      v3.cross(v12, v13);\n\n      if (isNaN(v12[0])) {\n        // for some reason, origin shows up as some points and should be\n        // ignored\n        v12 = [0, 0, 0];\n      }\n\n      t.normal = v12;\n    }\n\n    for (var i = 0, ii = ps.length; i < ii; i++) {\n      var sum = [0, 0, 0];\n\n      for (var j = 0, jj = triangles.length; j < jj; j++) {\n        var t = triangles[j];\n\n        if (t.i1 === i || t.i2 === i || t.i3 === i) {\n          sum[0] += t.normal[0];\n          sum[1] += t.normal[1];\n          sum[2] += t.normal[2];\n        }\n      }\n\n      v3.normalize(sum);\n      normalData.push(sum[0], sum[1], sum[2]);\n    }\n\n    this.storeData(positionData, normalData, indexData);\n  };\n\n  _.render = function (gl, specs) {\n    if (this.specs) {\n      specs = this.specs;\n    }\n\n    if (!specs.surfaces_display) {\n      return;\n    }\n\n    gl.shader.setMatrixUniforms(gl);\n    this.bindBuffers(gl); // colors\n\n    gl.material.setTempColors(gl, specs.surfaces_materialAmbientColor_3D, specs.surfaces_color, specs.surfaces_materialSpecularColor_3D, specs.surfaces_materialShininess_3D); // alpha must be set after temp colors as that function sets alpha to 1\n\n    gl.material.setAlpha(gl, specs.surfaces_alpha); // render\n\n    if (specs.surfaces_style === 'Dots') {\n      // dots\n      //gl.pointSize(1);\n      // pointSize isn't part of WebGL API, so we have to make it a shader uniform in the vertex shader\n      gl.shader.setPointSize(gl, specs.shapes_pointSize); //gl.drawArrays(gl.POINTS, 0, this.vertexIndexBuffer.numItems);\n\n      gl.drawElements(gl.POINTS, this.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n    } else if (specs.surfaces_style === 'Mesh') {\n      // mesh\n      gl.lineWidth(specs.shapes_lineWidth); //gl.polygonMode(gl.FRONT_AND_BACK, gl.LINE);\n\n      gl.drawElements(gl.LINES, this.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0); //gl.polygonMode(gl.FRONT_AND_BACK, gl.FILL);\n    } else {\n      // solid\n      gl.drawElements(gl.TRIANGLES, this.vertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);\n    }\n  };\n})(d3, _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__[\"ELEMENT\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"MarchingCubes\"], _lib__WEBPACK_IMPORTED_MODULE_6__[\"vec3\"], m);\n\n(function (d3, ELEMENT, m, undefined) {\n  'use strict';\n\n  d3.SASSurface = function (atoms, probeRadius, resolution) {\n    this.atoms = atoms;\n    this.probeRadius = probeRadius;\n    this.resolution = resolution;\n    this.build(atoms, probeRadius, resolution);\n  };\n\n  var _ = d3.SASSurface.prototype = new d3._Surface();\n\n  _.calculate = function (x, y, z) {\n    var min = Infinity;\n    var p = new _Atom__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('C', x, y, z);\n\n    for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n      var a = this.atoms[i];\n      var vdwRadius = ELEMENT[a.label] && ELEMENT[a.label].vdWRadius !== 0 ? ELEMENT[a.label].vdWRadius : 2;\n      var distanceCenter = a.distance3D(p) - this.probeRadius;\n      var distanceSurface = distanceCenter - vdwRadius;\n      min = m.min(min, distanceSurface);\n    }\n\n    return min;\n  };\n})(d3, _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__[\"ELEMENT\"], m);\n\n(function (d3, ELEMENT, m, undefined) {\n  'use strict';\n\n  d3.VDWSurface = function (atoms, resolution) {\n    this.atoms = atoms;\n    this.probeRadius = 0;\n    this.resolution = resolution;\n    this.build(atoms, 0, resolution);\n  };\n\n  var _ = d3.VDWSurface.prototype = new d3._Surface();\n\n  _.calculate = function (x, y, z) {\n    var min = Infinity;\n    var p = new _Atom__WEBPACK_IMPORTED_MODULE_1__[\"default\"]('C', x, y, z);\n\n    for (var i = 0, ii = this.atoms.length; i < ii; i++) {\n      var a = this.atoms[i];\n      var vdwRadius = ELEMENT[a.label] && ELEMENT[a.label].vdWRadius !== 0 ? ELEMENT[a.label].vdWRadius : 2;\n      var distanceCenter = a.distance3D(p);\n      var distanceSurface = distanceCenter - vdwRadius;\n      min = m.min(min, distanceSurface);\n    }\n\n    return min;\n  };\n})(d3, _ChemDoodle__WEBPACK_IMPORTED_MODULE_3__[\"ELEMENT\"], m);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvc3RydWN0dXJlcy9kMy9pbmRleC5qcz8wYTYyIl0sIm5hbWVzIjpbIm0iLCJNYXRoIiwiZDMiLCJ1bmRlZmluZWQiLCJfTWVzaCIsIl8iLCJwcm90b3R5cGUiLCJzdG9yZURhdGEiLCJwb3NpdGlvbkRhdGEiLCJub3JtYWxEYXRhIiwiaW5kZXhEYXRhIiwic2V0dXBCdWZmZXJzIiwiZ2wiLCJ2ZXJ0ZXhQb3NpdGlvbkJ1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsImJpbmRCdWZmZXIiLCJBUlJBWV9CVUZGRVIiLCJidWZmZXJEYXRhIiwiRmxvYXQzMkFycmF5IiwiU1RBVElDX0RSQVciLCJpdGVtU2l6ZSIsIm51bUl0ZW1zIiwibGVuZ3RoIiwidmVydGV4Tm9ybWFsQnVmZmVyIiwidmVydGV4SW5kZXhCdWZmZXIiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsIlVpbnQxNkFycmF5IiwicGFydGl0aW9ucyIsImkiLCJpaSIsInAiLCJidWZmZXJzIiwiZ2VuZXJhdGVCdWZmZXJzIiwiYmluZEJ1ZmZlcnMiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwic2hhZGVyIiwidmVydGV4UG9zaXRpb25BdHRyaWJ1dGUiLCJGTE9BVCIsInZlcnRleE5vcm1hbEF0dHJpYnV0ZSIsIl9NZWFzdXJlbWVudCIsInJlbmRlciIsInNwZWNzIiwic2V0TWF0cml4VW5pZm9ybXMiLCJtZWFzdXJlbWVudF91cGRhdGVfM0QiLCJ0ZXh0IiwiY2FsY3VsYXRlRGF0YSIsIm1hdGVyaWFsIiwic2V0RGlmZnVzZUNvbG9yIiwic2hhcGVzX2NvbG9yIiwibGluZVdpZHRoIiwic2hhcGVzX2xpbmVXaWR0aCIsImRyYXdFbGVtZW50cyIsIkxJTkVTIiwiVU5TSUdORURfU0hPUlQiLCJyZW5kZXJUZXh0IiwiZ2V0VGV4dCIsInZlcnRleERhdGEiLCJwb3NpdGlvbiIsInRleENvb3JkIiwidHJhbnNsYXRpb24iLCJ0ZXh0SW1hZ2UiLCJwdXNoVmVydGV4RGF0YSIsInZhbHVlIiwicG9zIiwidGV4dE1lc2giLCJ1c2VUZXh0dXJlIiwiRUxFTUVOVCIsImV4dGVuc2lvbnMiLCJtYXRoIiwibTQiLCJ2MyIsIkFuZ2xlIiwiYTEiLCJhMiIsImEzIiwiZGlzdDEiLCJkaXN0YW5jZTNEIiwiZGlzdDIiLCJkaXN0VXNlIiwibWluIiwidmVjMSIsIm5vcm1hbGl6ZSIsIngiLCJ5IiwieiIsInZlYzIiLCJhbmdsZSIsInZlYzNBbmdsZUZyb20iLCJheGlzIiwiY3Jvc3MiLCJ2ZWMzIiwiYmFuZHMiLCJtZWFzdXJlbWVudF9hbmdsZUJhbmRzXzNEIiwidGhldGEiLCJ2ZWNDb3MiLCJzY2FsZSIsImNvcyIsInZlY1NpbiIsInNpbiIsIm5vcm0iLCJhZGQiLCJwdXNoIiwidmVjQ2VudGVyIiwiYW5nbGVCb3VuZHMiLCJ0b0ZpeGVkIiwiam9pbiIsIkFycm93IiwicmFkaXVzIiwibG9uZ2l0dWRlQmFuZHMiLCJsb25nTnVtYmVyIiwiUEkiLCJzaW5UaGV0YSIsImNvc1RoZXRhIiwib2Zmc2V0IiwiaiIsImpqIiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsImZvcnRoIiwiQm94Iiwid2lkdGgiLCJoZWlnaHQiLCJkZXB0aCIsIkNhbWVyYSIsImZpZWxkT2ZWaWV3IiwiYXNwZWN0IiwibmVhciIsImZhciIsInpvb20iLCJ2aWV3TWF0cml4IiwiaWRlbnRpdHkiLCJwcm9qZWN0aW9uTWF0cml4IiwicGVyc3BlY3RpdmVQcm9qZWN0aW9uTWF0cml4IiwidG9wIiwidGFuIiwicmlnaHQiLCJmcnVzdHVtIiwib3J0aG9nb25hbFByb2plY3Rpb25NYXRyaXgiLCJvcnRobyIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJpc1BlcnNwZWN0aXZlIiwiZm9jYWxMZW5ndGgiLCJ6b29tSW4iLCJ6b29tT3V0IiwibWF4IiwiTGluZUFycm93IiwiZCIsInciLCJDb21wYXNzIiwiVGV4dEltYWdlIiwiaW5pdCIsInVwZGF0ZUZvbnQiLCJ0ZXh0X2ZvbnRfc2l6ZSIsInRleHRfZm9udF9mYW1pbGllcyIsInRleHRfZm9udF9ib2xkIiwidGV4dF9mb250X2l0YWxpYyIsInRleHRfZm9udF9zdHJva2VfM0QiLCJUZXh0TWVzaCIsInNjcmVlblJhdGlvSGVpZ2h0IiwiY29tcGFzc19zaXplXzNEIiwiY2FudmFzIiwiY2xpZW50SGVpZ2h0IiwidGFuVGhldGEiLCJwcm9qZWN0aW9uUGVyc3BlY3RpdmVWZXJ0aWNhbEZpZWxkT2ZWaWV3XzNEIiwiYXNwZWMiLCJjbGllbnRXaWR0aCIsImZuUHJvamVjdGlvbiIsInByb2plY3Rpb25QZXJzcGVjdGl2ZV8zRCIsIm5lYXJSYXRpbyIsImJvdHRvbSIsImxlZnQiLCJjb21wYXNzX3R5cGVfM0QiLCJkZWx0YVgiLCJjaGFySGVpZ2h0IiwiZGVsdGFZIiwidHJhbnNsYXRpb25NYXRyaXgiLCJ0cmFuc2xhdGUiLCJ0ZXh0UG9zIiwicmVuZGVyQXJyb3ciLCJ0eXBlIiwiY29sb3IiLCJtdk1hdHJpeCIsInNldE1vZGVsVmlld01hdHJpeCIsImRyYXdBcnJheXMiLCJsaW5lQXJyb3dCdWZmZXIiLCJUUklBTkdMRVMiLCJhcnJvd0J1ZmZlciIsInNldFByb2plY3Rpb25NYXRyaXgiLCJzZXRUZW1wQ29sb3JzIiwiYm9uZHNfbWF0ZXJpYWxBbWJpZW50Q29sb3JfM0QiLCJib25kc19tYXRlcmlhbFNwZWN1bGFyQ29sb3JfM0QiLCJib25kc19tYXRlcmlhbFNoaW5pbmVzc18zRCIsIm1vZGVsTWF0cml4IiwibXVsdGlwbHkiLCJyb3RhdGlvbk1hdHJpeCIsImNvbXBhc3NfYXhpc1hDb2xvcl8zRCIsInJvdGF0ZVkiLCJjb21wYXNzX2F4aXNZQ29sb3JfM0QiLCJyb3RhdGVYIiwiY29tcGFzc19heGlzWkNvbG9yXzNEIiwicmVuZGVyQXhpcyIsIkN5bGluZGVyIiwiY2xvc2VkIiwiRGlzdGFuY2UiLCJub2RlIiwicjEiLCJhdG9tc191c2VWRFdEaWFtZXRlcnNfM0QiLCJsYWJlbCIsInZkV1JhZGl1cyIsImF0b21zX3Zkd011bHRpcGxpZXJfM0QiLCJhdG9tc19zcGhlcmVEaWFtZXRlcl8zRCIsInIyIiwibW92ZSIsImRpc3BsYWNlbWVudCIsImNoYW5nZSIsImRpc3QiLCJjZW50ZXIiLCJGb2ciLCJmb2dTdGFydCIsImZvZ0VuZCIsImRlbnNpdHkiLCJmb2dTY2VuZSIsImNvbG9yUkdCIiwiZ2V0UkdCIiwiTGFiZWwiLCJ1cGRhdGVWZXJ0aWNlc0J1ZmZlciIsIm1vbGVjdWxlcyIsIm1vbGVjdWxlIiwibW9sZWN1bGVMYWJlbCIsImxhYmVsTWVzaCIsImF0b21zIiwiaXNNYWNybyIsImhldGF0bSIsImF0b20iLCJhdG9tTGFiZWwiLCJ6RGVwdGgiLCJtYWNyb19kaXNwbGF5QXRvbXMiLCJpc1dhdGVyIiwibWFjcm9fc2hvd1dhdGVycyIsImFsdExhYmVsIiwiY2hhaW5zIiwicHJvdGVpbnNfZGlzcGxheVJpYmJvbiIsInByb3RlaW5zX2Rpc3BsYXlCYWNrYm9uZSIsImNoYWluIiwiayIsImtrIiwicmVzaWR1ZSIsIm5hbWUiLCJjcDEiLCJTcGhlcmUiLCJsYXRpdHVkZUJhbmRzIiwibGF0TnVtYmVyIiwicGhpIiwic2luUGhpIiwiY29zUGhpIiwiUkVTSURVRSIsImxvYWRQYXJ0aXRpb24iLCJTdWJSaWJib24iLCJlbnRpcmUiLCJpbmRleGVzIiwicGkiLCJfMiIsImdldENvbG9yIiwibWFjcm9fY29sb3JCeUNoYWluIiwiY2hhaW5Db2xvciIsImdldFJlc2lkdWVDb2xvciIsImhlbGl4IiwiZnJvbnQiLCJwcm90ZWluc19yaWJib25DYXJ0b29uSGVsaXhQcmltYXJ5Q29sb3IiLCJwcm90ZWluc19yaWJib25DYXJ0b29uSGVsaXhTZWNvbmRhcnlDb2xvciIsInNoZWV0IiwicHJvdGVpbnNfcmliYm9uQ2FydG9vblNoZWV0Q29sb3IiLCJwcm90ZWluc19wcmltYXJ5Q29sb3IiLCJwcm90ZWluc19zZWNvbmRhcnlDb2xvciIsInIiLCJwcm90ZWluc19yZXNpZHVlQ29sb3IiLCJzaGFwZWx5Q29sb3IiLCJhbWlub0NvbG9yIiwicG9sYXIiLCJhY2lkaXR5Iiwibm9Db2xvciIsImxhc3RSZW5kZXIiLCJSaWJib24iLCJjYXJ0b29uIiwibGluZVNlZ21lbnROdW0iLCJsaW5lU2VnbWVudHMiLCJsaW5lU2VnbWVudExlbmd0aCIsImN1cnJlbnRQYXJ0aXRpb24iLCJjb3VudCIsImxpbmVTZWdtZW50IiwibGluZVNlZ21lbnRzQ2FydG9vbiIsImRvU2lkZTEiLCJkb1NpZGUyIiwiYSIsImFib3ZlaSIsImFib3ZlayIsImFib3ZlIiwibmVnYXRlIiwibmV4dGoiLCJzaWRlIiwidG9BYm92ZSIsInRvU2lkZSIsIm5vcm1hbCIsImFicyIsInNlZ21lbnRzIiwicGFydGl0aW9uU2VnbWVudHMiLCJuIiwibm4iLCJwYXJ0aXRpb25TZWdtZW50SW5kZXhEYXRhIiwiY2hhaW5JbmRleCIsImMiLCJyZXNpZHVlSW5kZXhTdGFydCIsImluZGl2aWR1YWxJbmRleERhdGEiLCJzZWdtZW50SW5kZXhTdGFydCIsIm5leHRSZXMiLCJqdW1wIiwic3BsaXQiLCJzciIsInByb3RlaW5zX3JpYmJvbkNhcnRvb25pemUiLCJMaWdodCIsImRpZmZ1c2VDb2xvciIsInNwZWN1bGFyQ29sb3IiLCJkaXJlY3Rpb24iLCJjYW1lcmEiLCJsaWdodFNjZW5lIiwiZGlmZnVzZVJHQiIsInNwZWN1bGFyUkdCIiwidXBkYXRlVmlldyIsImxpZ2h0RGlyIiwiZXllUG9zIiwidXAiLCJlcXVhbCIsImxvb2tBdCIsIkxpbmUiLCJNYXRlcmlhbCIsImFtYmllbnRDb2xvciIsInNoaW5pbmVzcyIsInNldE1hdGVyaWFsQW1iaWVudENvbG9yIiwic2V0TWF0ZXJpYWxEaWZmdXNlQ29sb3IiLCJzZXRNYXRlcmlhbFNwZWN1bGFyQ29sb3IiLCJzZXRNYXRlcmlhbFNoaW5pbmVzcyIsInNldE1hdGVyaWFsQWxwaGEiLCJzZXRBbHBoYSIsImFscGhhIiwiZG9jdW1lbnQiLCJQaWNrZXIiLCJmcmFtZWJ1ZmZlciIsImNyZWF0ZUZyYW1lYnVmZmVyIiwidGV4dHVyZTJEIiwiY3JlYXRlVGV4dHVyZSIsInJlbmRlcmJ1ZmZlciIsImNyZWF0ZVJlbmRlcmJ1ZmZlciIsImJpbmRUZXh0dXJlIiwiVEVYVFVSRV8yRCIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX01BR19GSUxURVIiLCJORUFSRVNUIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiVEVYVFVSRV9XUkFQX1MiLCJDTEFNUF9UT19FREdFIiwiVEVYVFVSRV9XUkFQX1QiLCJiaW5kUmVuZGVyYnVmZmVyIiwiUkVOREVSQlVGRkVSIiwiYmluZEZyYW1lYnVmZmVyIiwiRlJBTUVCVUZGRVIiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRCIsIkNPTE9SX0FUVEFDSE1FTlQwIiwiZnJhbWVidWZmZXJSZW5kZXJidWZmZXIiLCJERVBUSF9BVFRBQ0hNRU5UIiwic2V0RGltZW5zaW9uIiwiZ2V0RnJhbWVidWZmZXJBdHRhY2htZW50UGFyYW1ldGVyIiwiRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9PQkpFQ1RfTkFNRSIsImlzUmVuZGVyYnVmZmVyIiwicmVuZGVyYnVmZmVyU3RvcmFnZSIsIkRFUFRIX0NPTVBPTkVOVDE2IiwiaXNUZXh0dXJlIiwidGV4SW1hZ2UyRCIsIlJHQkEiLCJVTlNJR05FRF9CWVRFIiwiUGlsbCIsImNhcEhlaWdodFNjYWxlIiwiY2FwRGlhbWV0ZXIiLCJjcmVhdGVEdW1teVJlc2lkdWUiLCJkdW1teVJlcyIsIlJlc2lkdWUiLCJjcDIiLCJBdG9tIiwiUGlwZSIsInAxIiwicDIiLCJyYWRpdXNTY2FsZSIsInByb3RlaW5zX2N5bGluZGVySGVsaXhEaWFtZXRlciIsInNjYWxlVmVjdG9yIiwidHJhbnNmb3JtIiwiYW5nIiwiYTJiIiwicm90YXRlIiwiVFJJQU5HTEVfU1RSSVAiLCJjeWxpbmRlckNsb3NlZEJ1ZmZlciIsIlBsYW5rIiwidngiLCJkaXJ5IiwiZGlyeiIsImRpcngiLCJwcm90ZWluc19wbGFua1NoZWV0V2lkdGgiLCJwcm90ZWluc190dWJlVGhpY2tuZXNzIiwiYm94QnVmZmVyIiwiUGlwZVBsYW5rIiwicnMiLCJ0dWJlcyIsImhlbGl4Q3lsaW5kZXJzIiwic2hlZXRQbGFua3MiLCJjaGFpbk5vU1MiLCJub1NTUmVzaWR1ZXMiLCJoZWxpeFJlc2lkdWVzIiwic2hlZXRSZXNpZHVlcyIsInIwIiwiYXJyb3ciLCJzdGFydFBvaW50IiwiY3JlYXRlIiwiZW5kUG9pbnQiLCJ1bnNoaWZ0IiwiUHMiLCJWcyIsImgiLCJoaCIsImNhaSIsIkEiLCJCIiwic3VidHJhY3QiLCJBbCIsIkJsIiwiViIsImF4ZXMiLCJQMSIsIlYxIiwiUDIiLCJWMiIsIkgiLCJQMnN1YlAxIiwiZG90IiwiZEgiLCJkSGwiLCJQMnN1YlAxbCIsIkgxIiwiSDIiLCJmaXJzdFBvaW50Iiwic2Vjb25kUG9pbnQiLCJzZWNvbmRUb0ZpcnN0Iiwic3RhcnRBdG9tIiwiZW5kQXRvbSIsImhlbGl4RGlyIiwiYWRkaXRpb25DcCIsInByZXZSZXNDcCIsImhlbGl4RGlyVG9QcmV2UmVzIiwicm0iLCJuZXh0UmVzQ3AiLCJoZWxpeERpclRvTmV4dFJlcyIsImd1aWRlUG9pbnRzIiwiZ3VpZGVQb2ludHNMYXJnZSIsImdwMSIsImdwMiIsImZpcnN0UnMiLCJsYXN0UnMiLCJmaXJzdEd1aWRlUG9pbnRzIiwiZ3VpZGVQb2ludHNTbWFsbCIsImxhc3RHdWlkZVBvaW50cyIsImNoYWluU2VnbWVudHMiLCJuaHMiLCJsaW5lU2VnbWVudHNMaXN0IiwidCIsIkNhdG11bGxUdWJlIiwicHJvdGVpbnNfdHViZVJlc29sdXRpb25fM0QiLCJwcm90ZWluc19ob3Jpem9udGFsUmVzb2x1dGlvbiIsInByb3RlaW5zX21hdGVyaWFsQW1iaWVudENvbG9yXzNEIiwicHJvdGVpbnNfbWF0ZXJpYWxTcGVjdWxhckNvbG9yXzNEIiwicHJvdGVpbnNfbWF0ZXJpYWxTaGluaW5lc3NfM0QiLCJwcm90ZWluc190dWJlQ29sb3IiLCJRdWFkIiwiU2hhcGUiLCJwb2ludHMiLCJ0aGlja25lc3MiLCJudW1Qb2ludHMiLCJQb2ludCIsIm5leHQiLCJjdXJyZW50UG9pbnQiLCJuZXh0UG9pbnQiLCJ2IiwiY2VudGVySW5kZXgiLCJzdGFydCIsIlN0YXIiLCJwcyIsImlzIiwiajEiLCJqMiIsImozIiwicDMiLCJ3aW5kb3ciLCJyYXRpbyIsImRldmljZVBpeGVsUmF0aW8iLCJjdHgiLCJjcmVhdGVFbGVtZW50IiwiZ2V0Q29udGV4dCIsImRhdGEiLCJ0ZXh0dXJlSW1hZ2UiLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJjaGFyRGF0YSIsImNoYXJhY3RlciIsImluZGV4IiwiaW5kZXhPZiIsImZvbnRTaXplIiwiZm9udEZhbWlsaWVzIiwiZm9udEJvbGQiLCJmb250SXRhbGljIiwiZm9udFN0cm9rZSIsImNvbnRleHRGb250IiwiZ2V0Rm9udFN0cmluZyIsImZvbnQiLCJzYXZlIiwidG90YWxXaWR0aCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsIm1lYXN1cmVUZXh0IiwiY2hhcnMiLCJhcmVhSW1hZ2UiLCJzcXJ0QXJlYSIsInNxcnQiLCJ0b3RhbFJvd3MiLCJjZWlsIiwibWF4V2lkdGgiLCJ0ZXh0QWxpZ24iLCJ0ZXh0QmFzZWxpbmUiLCJzdHJva2VTdHlsZSIsImZpbGxTdHlsZSIsIm9mZnNldFJvdyIsInBvc1giLCJjaGFyV2lkdGgiLCJjaGFyVGV4dCIsIndpbGxXaWR0aCIsInBvc1kiLCJzdHJva2VUZXh0IiwiZmlsbFRleHQiLCJ0ZXh0UGllY2UiLCJ0b1N0cmluZyIsImhlaWdodEltYWdlIiwiZ2V0SGVpZ2h0Iiwid2lkdGhJbWFnZSIsImdldFdpZHRoIiwieDEiLCJ0ZXh0V2lkdGgiLCJ5MSIsIngyIiwieTIiLCJnZXRDYW52YXMiLCJ0ZXN0IiwiYm9keSIsImFwcGVuZENoaWxkIiwidmVydGV4VGV4Q29vcmRCdWZmZXIiLCJ2ZXJ0ZXhUcmFuc2xhdGlvbkJ1ZmZlciIsInNldFZlcnRleERhdGEiLCJ2ZXJ0ZXhCdWZmZXIiLCJ2ZXJ0ZXhQb3NpdGlvbkRhdGEiLCJ2ZXJ0ZXhUZXhDb29yZERhdGEiLCJ2ZXJ0ZXhUcmFuc2xhdGlvbkRhdGEiLCJ2ZXJ0ZXhUZXhDb29yZEF0dHJpYnV0ZSIsIlRvcnNpb24iLCJhNCIsImIxIiwiYjIiLCJiMyIsImNyb3NzMTIiLCJjcm9zczIzIiwidG9yc2lvbiIsImF0YW4yIiwidmVjMCIsInZlY1RleHQiLCJhcnJvd0xlbmd0aCIsImIyTm9ybSIsImFzaW4iLCJQb2ludFJvdGF0b3IiLCJwb2ludCIsIlJ4IiwiUnhUIiwiUnkiLCJSeVQiLCJSeiIsIm1hdHJpeCIsIm11bHRpcGx5VmVjMyIsIlR1YmUiLCJjeWxpbmRlclJlc29sdXRpb24iLCJlbmRzIiwibGFzdCIsIkluZmluaXR5Iiwic3RhcnRWZWN0b3IiLCJyb3RhdG9yIiwidXNlIiwiZmxvb3IiLCJwUG9pbnQiLCJpbmRleFN0YXJ0Iiwic2siLCJwbGF0Zm9ybSIsIm51Y2xlaWNzX3R1YmVDb2xvciIsInNwaGVyZUJ1ZmZlciIsImN5bGluZGVyQnVmZmVyIiwibnVjbGVpY3NfcmVzaWR1ZUNvbG9yIiwibnVjbGVpY3NfYmFzZUNvbG9yIiwiY3AzIiwick0iLCJwNCIsImNwNCIsInA1IiwiY3A1IiwicGl2b3QiLCJhbmcyIiwicmFpbmJvd0F0IiwibWFjcm9fcmFpbmJvd0NvbG9ycyIsImhvcml6b250YWxSZXNvbHV0aW9uIiwicDAiLCJvIiwiVW5pdENlbGwiLCJ1bml0Q2VsbFZlY3RvcnMiLCJ1bml0Q2VsbCIsInB1c2hTaWRlIiwieHkiLCJ5eiIsInh6IiwieHl6IiwiRnJhbWVidWZmZXIiLCJzZXRDb2xvclRleHR1cmUiLCJ0ZXh0dXJlIiwiYXR0YWNobWVudCIsInNldENvbG9yUmVuZGVyYnVmZmVyIiwic2V0RGVwdGhUZXh0dXJlIiwic2V0RGVwdGhSZW5kZXJidWZmZXIiLCJiaW5kIiwidmlld3BvcnQiLCJSZW5kZXJidWZmZXIiLCJmb3JtYXQiLCJzZXRQYXJhbWV0ZXIiLCJTU0FPIiwiaW5pdFNhbXBsZUtlcm5lbCIsImtlcm5lbFNpemUiLCJzYW1wbGVLZXJuZWwiLCJyYW5kb20iLCJzY2FsZTIiLCJsZXJwIiwiaW5pdE5vaXNlVGV4dHVyZSIsIm5vaXNlU2l6ZSIsInNzYW9Ob2lzZSIsIm5vaXNlVGV4dHVyZSIsIlJHQiIsIlJFUEVBVCIsIlRleHR1cmUiLCJpbnRlcm5hbEZvcm1hdCIsIm0zIiwiX1NoYWRlciIsInVzZVNoYWRlclByb2dyYW0iLCJ1c2VQcm9ncmFtIiwiZ1Byb2dyYW0iLCJ2ZXJ0ZXhTaGFkZXIiLCJnZXRTaGFkZXIiLCJsb2FkRGVmYXVsdFZlcnRleFNoYWRlciIsImZyYWdtZW50U2hhZGVyIiwibG9hZERlZmF1bHRGcmFnbWVudFNoYWRlciIsImNyZWF0ZVByb2dyYW0iLCJhdHRhY2hTaGFkZXIiLCJvblNoYWRlckF0dGFjaGVkIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJhbGVydCIsImdldFByb2dyYW1JbmZvTG9nIiwiaW5pdFVuaWZvcm1Mb2NhdGlvbnMiLCJiaW5kQXR0cmliTG9jYXRpb24iLCJnZXRTaGFkZXJGcm9tU3RyIiwic2hhZGVyVHlwZSIsInN0clNyYyIsImNyZWF0ZVNoYWRlciIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsInNoYWRlclNjcmlwdCIsImdldFNoYWRlckluZm9Mb2ciLCJkZWxldGVTaGFkZXIiLCJlbmFibGVBdHRyaWJzQXJyYXkiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsImRpc2FibGVBdHRyaWJzQXJyYXkiLCJkaXNhYmxlVmVydGV4QXR0cmliQXJyYXkiLCJpZCIsImdldEVsZW1lbnRCeUlkIiwic2IiLCJmaXJzdENoaWxkIiwibm9kZVR5cGUiLCJ0ZXh0Q29udGVudCIsIm5leHRTaWJsaW5nIiwic2RyU3JjIiwiRlJBR01FTlRfU0hBREVSIiwiVkVSVEVYX1NIQURFUiIsIm1vZGVsVmlld01hdHJpeFVuaWZvcm0iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJwcm9qZWN0aW9uTWF0cml4VW5pZm9ybSIsIm1vZGVsVmlld01hdHJpeCIsInVuaWZvcm1NYXRyaXg0ZnYiLCJhbWJpZW50IiwiZGlmZnVzZSIsInNwZWN1bGFyIiwiRlhBQVNoYWRlciIsIl9zdXBlciIsImNhbGwiLCJidWZmZXJzaXplVW5pZm9ybSIsImFudGlhbGlhc1VuaWZvcm0iLCJlZGdlVGhyZXNob2xkVW5pZm9ybSIsImVkZ2VUaHJlc2hvbGRNaW5Vbmlmb3JtIiwic2VhcmNoU3RlcHNVbmlmb3JtIiwic2VhcmNoVGhyZXNob2xkVW5pZm9ybSIsInN1YnBpeENhcFVuaWZvcm0iLCJzdWJwaXhUcmltVW5pZm9ybSIsInNldEJ1ZmZlcnNpemUiLCJ1bmlmb3JtMmYiLCJzZXRBbnRpYWxpYXMiLCJ2YWwiLCJ1bmlmb3JtMWYiLCJzZXRFZGdlVGhyZXNob2xkIiwic2V0RWRnZVRocmVzaG9sZE1pbiIsInNldFNlYXJjaFN0ZXBzIiwidW5pZm9ybTFpIiwic2V0U2VhcmNoVGhyZXNob2xkIiwic2V0U3VicGl4Q2FwIiwic2V0U3VicGl4VHJpbSIsIkxhYmVsU2hhZGVyIiwiZGltZW5zaW9uVW5pZm9ybSIsImRlcHRoVGV4dHVyZUV4dCIsIkxpZ2h0aW5nU2hhZGVyIiwicG9zaXRpb25TYW1wbGVVbmlmb3JtIiwiY29sb3JTYW1wbGVVbmlmb3JtIiwic3Nhb1NhbXBsZVVuaWZvcm0iLCJvdXRsaW5lU2FtcGxlVW5pZm9ybSIsIk5vcm1hbFNoYWRlciIsIm5vcm1hbE1hdHJpeFVuaWZvcm0iLCJub3JtYWxNYXRyaXgiLCJ0cmFuc3Bvc2UiLCJ0b0ludmVyc2VNYXQzIiwidW5pZm9ybU1hdHJpeDNmdiIsIk91dGxpbmVTaGFkZXIiLCJub3JtYWxTYW1wbGVVbmlmb3JtIiwiZGVwdGhTYW1wbGVVbmlmb3JtIiwiZ2J1ZmZlclRleHR1cmVTaXplVW5pZm9ybSIsIm5vcm1hbFRocmVzaG9sZFVuaWZvcm0iLCJkZXB0aFRocmVzaG9sZFVuaWZvcm0iLCJ0aGlja25lc3NVbmlmb3JtIiwic2V0R2J1ZmZlclRleHR1cmVTaXplIiwic2V0Tm9ybWFsVGhyZXNob2xkIiwic2V0RGVwdGhUaHJlc2hvbGQiLCJzZXRUaGlja25lc3MiLCJQaG9uZ1NoYWRlciIsInNoYWRvd1VuaWZvcm0iLCJmbGF0Q29sb3JVbmlmb3JtIiwibGlnaHRNb2RlbFZpZXdNYXRyaXhVbmlmb3JtIiwibGlnaHRQcm9qZWN0aW9uTWF0cml4VW5pZm9ybSIsImxpZ2h0RGlmZnVzZUNvbG9yVW5pZm9ybSIsImxpZ2h0U3BlY3VsYXJDb2xvclVuaWZvcm0iLCJsaWdodERpcmVjdGlvblVuaWZvcm0iLCJtYXRlcmlhbEFtYmllbnRDb2xvclVuaWZvcm0iLCJtYXRlcmlhbERpZmZ1c2VDb2xvclVuaWZvcm0iLCJtYXRlcmlhbFNwZWN1bGFyQ29sb3JVbmlmb3JtIiwibWF0ZXJpYWxTaGluaW5lc3NVbmlmb3JtIiwibWF0ZXJpYWxBbHBoYVVuaWZvcm0iLCJmb2dNb2RlVW5pZm9ybSIsImZvZ0NvbG9yVW5pZm9ybSIsImZvZ1N0YXJ0VW5pZm9ybSIsImZvZ0VuZFVuaWZvcm0iLCJmb2dEZW5zaXR5VW5pZm9ybSIsInNoYWRvd0RlcHRoU2FtcGxlVW5pZm9ybSIsInNoYWRvd1RleHR1cmVTaXplVW5pZm9ybSIsInNoYWRvd0ludGVuc2l0eVVuaWZvcm0iLCJnYW1tYUNvcnJlY3Rpb25Vbmlmb3JtIiwicG9pbnRTaXplVW5pZm9ybSIsInNldExpZ2h0TW9kZWxWaWV3TWF0cml4IiwibGlnaHRWaWV3TWF0cml4IiwibGlnaHRNb2RlbFZpZXdNYXRyaXgiLCJzZXRGbGF0Q29sb3IiLCJlbmFibGVkIiwic2V0U2hhZG93Iiwic2V0Rm9nTW9kZSIsIm1vZGUiLCJzZXRGb2dDb2xvciIsInVuaWZvcm0zZnYiLCJzZXRGb2dTdGFydCIsInNldEZvZ0VuZCIsInNldEZvZ0RlbnNpdHkiLCJzZXRMaWdodERpZmZ1c2VDb2xvciIsInNldExpZ2h0U3BlY3VsYXJDb2xvciIsInNldExpZ2h0RGlyZWN0aW9uIiwic2V0TGlnaHRQcm9qZWN0aW9uTWF0cml4Iiwic2V0U2hhZG93VGV4dHVyZVNpemUiLCJzZXRTaGFkb3dJbnRlbnNpdHkiLCJpbnRlbnNpdHkiLCJzZXRHYW1tYUNvcnJlY3Rpb24iLCJnYW1tYUNvcnJlY3Rpb24iLCJzZXRQb2ludFNpemUiLCJwb2ludFNpemUiLCJQaWNrU2hhZGVyIiwiUG9zaXRpb25TaGFkZXIiLCJRdWFkU2hhZGVyIiwiTWFyY2hpbmdDdWJlcyIsIlRyaWFuZ2xlIiwiaTEiLCJpMiIsImkzIiwiZ2V0UmFuZ2UiLCJwcm9iZVJhZGl1cyIsImFkZFBvaW50IiwieHMiLCJ5cyIsInpzIiwic3RlcCIsInB4IiwicHkiLCJweiIsImN1dG9mZiIsInBqIiwiX1N1cmZhY2UiLCJnZW5lcmF0ZSIsInhkaWYiLCJ5ZGlmIiwiemRpZiIsInJhbmdlIiwieHN0ZXBzIiwieXN0ZXBzIiwienN0ZXBzIiwidmFscyIsImNhbGN1bGF0ZSIsImJ1aWxkIiwicmVzb2x1dGlvbiIsIm1lc2giLCJ2ZXJ0aWNlcyIsInRyaWFuZ2xlcyIsImZhY2VzIiwiZiIsInNhdmVkQ29ubmVjdGlvbnMiLCJjb25uZWN0aW9ucyIsInRtcCIsInB0Iiwid3QiLCJwYyIsInYxMiIsInYxMyIsImlzTmFOIiwic3VtIiwic3VyZmFjZXNfZGlzcGxheSIsInN1cmZhY2VzX21hdGVyaWFsQW1iaWVudENvbG9yXzNEIiwic3VyZmFjZXNfY29sb3IiLCJzdXJmYWNlc19tYXRlcmlhbFNwZWN1bGFyQ29sb3JfM0QiLCJzdXJmYWNlc19tYXRlcmlhbFNoaW5pbmVzc18zRCIsInN1cmZhY2VzX2FscGhhIiwic3VyZmFjZXNfc3R5bGUiLCJzaGFwZXNfcG9pbnRTaXplIiwiUE9JTlRTIiwiU0FTU3VyZmFjZSIsInZkd1JhZGl1cyIsImRpc3RhbmNlQ2VudGVyIiwiZGlzdGFuY2VTdXJmYWNlIiwiVkRXU3VyZmFjZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQSxJQUFNQSxDQUFDLEdBQUdDLElBQVY7QUFFTyxJQUFJQyxFQUFFLEdBQUcsRUFBVDs7QUFFUCxDQUFDLFVBQVNBLEVBQVQs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RyxFQUFxRyxDQUFyRyxFQUF3RyxDQUF4RyxFQUEyRyxFQUEzRyxFQUErRyxFQUEvRyxFQUFtSCxDQUFuSCxFQUFzSCxDQUF0SCxFQUF5SCxDQUF6SCxFQUE0SCxFQUE1SCxFQUFnSSxDQUFoSSxFQUFtSSxFQUFuSSxFQUF1SSxFQUF2SSxFQUEySSxFQUEzSSxFQUErSSxFQUEvSSxFQUFtSixFQUFuSixFQUF1SixFQUF2SixFQUEySixDQUEzSixFQUE4SixDQUE5SixFQUFpSyxFQUFqSyxFQUFxSyxFQUFySyxFQUF5SyxDQUF6SyxFQUE0SyxDQUE1SyxFQUErSyxDQUEvSyxFQUFrTCxFQUFsTCxFQUFzTCxDQUF0TCxFQUF5TCxFQUF6TCxFQUE2TCxFQUE3TCxFQUFpTSxFQUFqTSxFQUFxTSxFQUFyTSxFQUF5TSxFQUF6TSxFQUE2TSxFQUE3TSxFQUFpTixDQUFqTixFQUFvTixDQUFwTixFQUF1TixFQUF2TixFQUEyTixFQUEzTixFQUErTixDQUEvTixFQUFrTyxDQUFsTyxFQUFxTyxDQUFyTyxFQUF3TyxFQUF4TyxFQUE0TyxDQUE1TyxFQUErTyxFQUEvTyxFQUFtUCxFQUFuUCxFQUF1UCxFQUF2UCxFQUEyUCxFQUEzUCxFQUErUCxFQUEvUCxFQUFtUSxFQUFuUSxFQUF1USxDQUF2USxFQUEwUSxDQUExUSxFQUE2USxFQUE3USxFQUFpUixFQUFqUixFQUFxUixDQUFyUixFQUF3UixDQUF4UixFQUEyUixDQUEzUixFQUE4UixFQUE5UixFQUFrUyxDQUFsUyxFQUFxUyxFQUFyUyxFQUF5UyxFQUF6UyxFQUE2UyxFQUE3UyxFQUFpVCxFQUFqVCxFQUFxVCxFQUFyVCxFQUF5VCxFQUF6VCxFQUE2VCxFQUE3VCxFQUFpVSxFQUFqVSxFQUFxVSxFQUFyVSxFQUF5VSxFQUF6VSxFQUE2VSxFQUE3VSxFQUFpVixFQUFqVixFQUFxVixFQUFyVixFQUF5VixFQUF6VixFQUE2VixFQUE3VixFQUFpVyxFQUFqVyxFQUFxVyxFQUFyVyxFQUF5VyxFQUF6VyxFQUE2VyxFQUE3VyxFQUFpWCxFQUFqWCxFQUFxWCxFQUFy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QUwsQ0FBVzNNLENBQVgsQ0FBUjtBQUNBLFVBQUlrMEIsU0FBUyxHQUFJNXhCLE9BQU8sQ0FBQ29PLENBQUMsQ0FBQ3RGLEtBQUgsQ0FBUCxJQUFvQjlJLE9BQU8sQ0FBQ29PLENBQUMsQ0FBQ3RGLEtBQUgsQ0FBUCxDQUFpQkMsU0FBakIsS0FBNkIsQ0FBbEQsR0FBcUQvSSxPQUFPLENBQUNvTyxDQUFDLENBQUN0RixLQUFILENBQVAsQ0FBaUJDLFNBQXRFLEdBQWdGLENBQWhHO0FBQ0EsVUFBSThvQixjQUFjLEdBQUd6akIsQ0FBQyxDQUFDMU4sVUFBRixDQUFhOUMsQ0FBYixDQUFyQjtBQUNBLFVBQUlrMEIsZUFBZSxHQUFHRCxjQUFjLEdBQUdELFNBQXZDO0FBQ0Evd0IsU0FBRyxHQUFHL0UsQ0FBQyxDQUFDK0UsR0FBRixDQUFNQSxHQUFOLEVBQVdpeEIsZUFBWCxDQUFOO0FBQ0E7O0FBQ0QsV0FBT2p4QixHQUFQO0FBQ0EsR0FYRDtBQWNBLENBeEJELEVBd0JHN0UsRUF4QkgsRUF3Qk9nRSxtREF4QlAsRUF3QmdCbEUsQ0F4QmhCIiwiZmlsZSI6Ii4vc3JjL0NoZW1Eb29kbGUvc3RydWN0dXJlcy9kMy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQb2ludCBmcm9tICcuLi9Qb2ludCc7XG5pbXBvcnQgQXRvbSBmcm9tICcuLi9BdG9tJztcbmltcG9ydCBSZXNpZHVlIGZyb20gJy4uL1Jlc2lkdWUnO1xuaW1wb3J0IHsgRUxFTUVOVCwgUkVTSURVRSB9IGZyb20gJy4uLy4uLy4uL0NoZW1Eb29kbGUnO1xuaW1wb3J0ICogYXMgZXh0ZW5zaW9ucyBmcm9tICcuLi8uLi9leHRlbnNpb25zJztcbmltcG9ydCAqIGFzIG1hdGggZnJvbSAnLi4vLi4vbWF0aCc7XG5pbXBvcnQge1xuICBtYXQzIGFzIG0zLFxuICBtYXQ0IGFzIG00LFxuICB2ZWMzIGFzIHYzLFxuICBNYXJjaGluZ0N1YmVzXG59IGZyb20gJy4uLy4uL2xpYic7XG5cbmNvbnN0IG0gPSBNYXRoO1xuXG5leHBvcnQgbGV0IGQzID0ge307XG5cbihmdW5jdGlvbihkMywgbSwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDMuX01lc2ggPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF8gPSBkMy5fTWVzaC5wcm90b3R5cGU7XG5cdF8uc3RvcmVEYXRhID0gZnVuY3Rpb24ocG9zaXRpb25EYXRhLCBub3JtYWxEYXRhLCBpbmRleERhdGEpIHtcblx0XHR0aGlzLnBvc2l0aW9uRGF0YSA9IHBvc2l0aW9uRGF0YTtcblx0XHR0aGlzLm5vcm1hbERhdGEgPSBub3JtYWxEYXRhO1xuXHRcdHRoaXMuaW5kZXhEYXRhID0gaW5kZXhEYXRhO1xuXHR9O1xuXHRfLnNldHVwQnVmZmVycyA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dGhpcy52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnZlcnRleFBvc2l0aW9uQnVmZmVyKTtcblx0XHRnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheSh0aGlzLnBvc2l0aW9uRGF0YSksIGdsLlNUQVRJQ19EUkFXKTtcblx0XHR0aGlzLnZlcnRleFBvc2l0aW9uQnVmZmVyLml0ZW1TaXplID0gMztcblx0XHR0aGlzLnZlcnRleFBvc2l0aW9uQnVmZmVyLm51bUl0ZW1zID0gdGhpcy5wb3NpdGlvbkRhdGEubGVuZ3RoIC8gMztcblxuXHRcdHRoaXMudmVydGV4Tm9ybWFsQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMudmVydGV4Tm9ybWFsQnVmZmVyKTtcblx0XHRnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheSh0aGlzLm5vcm1hbERhdGEpLCBnbC5TVEFUSUNfRFJBVyk7XG5cdFx0dGhpcy52ZXJ0ZXhOb3JtYWxCdWZmZXIuaXRlbVNpemUgPSAzO1xuXHRcdHRoaXMudmVydGV4Tm9ybWFsQnVmZmVyLm51bUl0ZW1zID0gdGhpcy5ub3JtYWxEYXRhLmxlbmd0aCAvIDM7XG5cblx0XHRpZiAodGhpcy5pbmRleERhdGEpIHtcblx0XHRcdHRoaXMudmVydGV4SW5kZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcblx0XHRcdGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMudmVydGV4SW5kZXhCdWZmZXIpO1xuXHRcdFx0Z2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbmV3IFVpbnQxNkFycmF5KHRoaXMuaW5kZXhEYXRhKSwgZ2wuU1RBVElDX0RSQVcpO1xuXHRcdFx0dGhpcy52ZXJ0ZXhJbmRleEJ1ZmZlci5pdGVtU2l6ZSA9IDE7XG5cdFx0XHR0aGlzLnZlcnRleEluZGV4QnVmZmVyLm51bUl0ZW1zID0gdGhpcy5pbmRleERhdGEubGVuZ3RoO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLnBhcnRpdGlvbnMpIHtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLnBhcnRpdGlvbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0XHR2YXIgcCA9IHRoaXMucGFydGl0aW9uc1tpXTtcblx0XHRcdFx0dmFyIGJ1ZmZlcnMgPSB0aGlzLmdlbmVyYXRlQnVmZmVycyhnbCwgcC5wb3NpdGlvbkRhdGEsIHAubm9ybWFsRGF0YSwgcC5pbmRleERhdGEpO1xuXHRcdFx0XHRwLnZlcnRleFBvc2l0aW9uQnVmZmVyID0gYnVmZmVyc1swXTtcblx0XHRcdFx0cC52ZXJ0ZXhOb3JtYWxCdWZmZXIgPSBidWZmZXJzWzFdO1xuXHRcdFx0XHRwLnZlcnRleEluZGV4QnVmZmVyID0gYnVmZmVyc1syXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdF8uZ2VuZXJhdGVCdWZmZXJzID0gZnVuY3Rpb24oZ2wsIHBvc2l0aW9uRGF0YSwgbm9ybWFsRGF0YSwgaW5kZXhEYXRhKSB7XG5cdFx0dmFyIHZlcnRleFBvc2l0aW9uQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHZlcnRleFBvc2l0aW9uQnVmZmVyKTtcblx0XHRnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheShwb3NpdGlvbkRhdGEpLCBnbC5TVEFUSUNfRFJBVyk7XG5cdFx0dmVydGV4UG9zaXRpb25CdWZmZXIuaXRlbVNpemUgPSAzO1xuXHRcdHZlcnRleFBvc2l0aW9uQnVmZmVyLm51bUl0ZW1zID0gcG9zaXRpb25EYXRhLmxlbmd0aCAvIDM7XG5cblx0XHR2YXIgdmVydGV4Tm9ybWFsQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHZlcnRleE5vcm1hbEJ1ZmZlcik7XG5cdFx0Z2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkobm9ybWFsRGF0YSksIGdsLlNUQVRJQ19EUkFXKTtcblx0XHR2ZXJ0ZXhOb3JtYWxCdWZmZXIuaXRlbVNpemUgPSAzO1xuXHRcdHZlcnRleE5vcm1hbEJ1ZmZlci5udW1JdGVtcyA9IG5vcm1hbERhdGEubGVuZ3RoIC8gMztcblxuXHRcdHZhciB2ZXJ0ZXhJbmRleEJ1ZmZlcjtcblx0XHRpZiAoaW5kZXhEYXRhKSB7XG5cdFx0XHR2ZXJ0ZXhJbmRleEJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuXHRcdFx0Z2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdmVydGV4SW5kZXhCdWZmZXIpO1xuXHRcdFx0Z2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbmV3IFVpbnQxNkFycmF5KGluZGV4RGF0YSksIGdsLlNUQVRJQ19EUkFXKTtcblx0XHRcdHZlcnRleEluZGV4QnVmZmVyLml0ZW1TaXplID0gMTtcblx0XHRcdHZlcnRleEluZGV4QnVmZmVyLm51bUl0ZW1zID0gaW5kZXhEYXRhLmxlbmd0aDtcblx0XHR9XG5cblx0XHRyZXR1cm4gWyB2ZXJ0ZXhQb3NpdGlvbkJ1ZmZlciwgdmVydGV4Tm9ybWFsQnVmZmVyLCB2ZXJ0ZXhJbmRleEJ1ZmZlciBdO1xuXHR9O1xuXHRfLmJpbmRCdWZmZXJzID0gZnVuY3Rpb24oZ2wpIHtcblx0XHRpZiAoIXRoaXMudmVydGV4UG9zaXRpb25CdWZmZXIpIHtcblx0XHRcdHRoaXMuc2V0dXBCdWZmZXJzKGdsKTtcblx0XHR9XG5cdFx0Ly8gcG9zaXRpb25zXG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMudmVydGV4UG9zaXRpb25CdWZmZXIpO1xuXHRcdGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoZ2wuc2hhZGVyLnZlcnRleFBvc2l0aW9uQXR0cmlidXRlLCB0aGlzLnZlcnRleFBvc2l0aW9uQnVmZmVyLml0ZW1TaXplLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXHRcdC8vIG5vcm1hbHNcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy52ZXJ0ZXhOb3JtYWxCdWZmZXIpO1xuXHRcdGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoZ2wuc2hhZGVyLnZlcnRleE5vcm1hbEF0dHJpYnV0ZSwgdGhpcy52ZXJ0ZXhOb3JtYWxCdWZmZXIuaXRlbVNpemUsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG5cdFx0aWYgKHRoaXMudmVydGV4SW5kZXhCdWZmZXIpIHtcblx0XHRcdC8vIGluZGV4ZXNcblx0XHRcdGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMudmVydGV4SW5kZXhCdWZmZXIpO1xuXHRcdH1cblx0fTtcblxufSkoZDMsIG0pO1xuXG4oZnVuY3Rpb24oZDMsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLl9NZWFzdXJlbWVudCA9IGZ1bmN0aW9uKCkge1xuXHR9O1xuXHR2YXIgXyA9IGQzLl9NZWFzdXJlbWVudC5wcm90b3R5cGUgPSBuZXcgZDMuX01lc2goKTtcblx0Xy5yZW5kZXIgPSBmdW5jdGlvbihnbCwgc3BlY3MpIHtcblx0XHRnbC5zaGFkZXIuc2V0TWF0cml4VW5pZm9ybXMoZ2wpO1xuXHRcdC8vIHNldHRpbmcgdGhlIHZlcnRleCBwb3NpdGlvbiBidWZmZXIgdG8gdW5kZWZpbmVkIHJlc2V0cyB0aGUgYnVmZmVycywgc28gdGhpcyBzaGFwZSBjYW4gYmUgZHluYW1pY2FsbHkgdXBkYXRlZCB3aXRoIHRoZSBtb2xlY3VsZVxuXHRcdGlmKHNwZWNzLm1lYXN1cmVtZW50X3VwZGF0ZV8zRCl7XG5cdFx0XHR0aGlzLnZlcnRleFBvc2l0aW9uQnVmZmVyID0gdW5kZWZpbmVkO1xuXHRcdFx0dGhpcy50ZXh0ID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZighdGhpcy52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlcil7XG5cdFx0XHR0aGlzLmNhbGN1bGF0ZURhdGEoc3BlY3MpO1xuXHRcdH1cblx0XHR0aGlzLmJpbmRCdWZmZXJzKGdsKTtcblx0XHQvLyBjb2xvcnNcblx0XHRnbC5tYXRlcmlhbC5zZXREaWZmdXNlQ29sb3IoZ2wsIHNwZWNzLnNoYXBlc19jb2xvcik7XG5cdFx0Z2wubGluZVdpZHRoKHNwZWNzLnNoYXBlc19saW5lV2lkdGgpO1xuXHRcdC8vIHJlbmRlclxuXHRcdGdsLmRyYXdFbGVtZW50cyhnbC5MSU5FUywgdGhpcy52ZXJ0ZXhJbmRleEJ1ZmZlci5udW1JdGVtcywgZ2wuVU5TSUdORURfU0hPUlQsIDApO1xuXHR9O1xuXHRfLnJlbmRlclRleHQgPSBmdW5jdGlvbihnbCwgc3BlY3MpIHtcblx0XHRnbC5zaGFkZXIuc2V0TWF0cml4VW5pZm9ybXMoZ2wpO1xuXHRcdC8vIHJlbmRlciB0aGUgdGV4dFxuXHRcdGlmKCF0aGlzLnRleHQpe1xuXHRcdFx0dGhpcy50ZXh0ID0gdGhpcy5nZXRUZXh0KHNwZWNzKTtcblx0XHR9XG5cdFx0XG5cdFx0dmFyIHZlcnRleERhdGEgPSB7XG5cdFx0XHRwb3NpdGlvbiA6IFtdLFxuXHRcdFx0dGV4Q29vcmQgOiBbXSxcblx0XHRcdHRyYW5zbGF0aW9uIDogW11cblx0XHR9O1xuXG5cdFx0Z2wudGV4dEltYWdlLnB1c2hWZXJ0ZXhEYXRhKHRoaXMudGV4dC52YWx1ZSwgdGhpcy50ZXh0LnBvcywgMSwgdmVydGV4RGF0YSk7XG5cdFx0Z2wudGV4dE1lc2guc3RvcmVEYXRhKGdsLCB2ZXJ0ZXhEYXRhLnBvc2l0aW9uLCB2ZXJ0ZXhEYXRhLnRleENvb3JkLCB2ZXJ0ZXhEYXRhLnRyYW5zbGF0aW9uKTtcblx0XHRcblx0XHRnbC50ZXh0SW1hZ2UudXNlVGV4dHVyZShnbCk7XG5cdFx0Z2wudGV4dE1lc2gucmVuZGVyKGdsKTtcblx0fTtcblxufSkoZDMpO1xuXG4oZnVuY3Rpb24oRUxFTUVOVCwgZXh0ZW5zaW9ucywgZDMsIG1hdGgsIG0sIG00LCB2MywgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDMuQW5nbGUgPSBmdW5jdGlvbihhMSwgYTIsIGEzKSB7XG5cdFx0dGhpcy5hMSA9IGExO1xuXHRcdHRoaXMuYTIgPSBhMjtcblx0XHR0aGlzLmEzID0gYTM7XG5cdH07XG5cdHZhciBfID0gZDMuQW5nbGUucHJvdG90eXBlID0gbmV3IGQzLl9NZWFzdXJlbWVudCgpO1xuXHRfLmNhbGN1bGF0ZURhdGEgPSBmdW5jdGlvbihzcGVjcykge1xuXHRcdHZhciBwb3NpdGlvbkRhdGEgPSBbXTtcblx0XHR2YXIgbm9ybWFsRGF0YSA9IFtdO1xuXHRcdHZhciBpbmRleERhdGEgPSBbXTtcblx0XHR2YXIgZGlzdDEgPSB0aGlzLmEyLmRpc3RhbmNlM0QodGhpcy5hMSk7XG5cdFx0dmFyIGRpc3QyID0gdGhpcy5hMi5kaXN0YW5jZTNEKHRoaXMuYTMpO1xuXHRcdHRoaXMuZGlzdFVzZSA9IG0ubWluKGRpc3QxLCBkaXN0MikgLyAyO1xuXHRcdC8vIGRhdGEgZm9yIHRoZSBhbmdsZVxuXHRcdHRoaXMudmVjMSA9IHYzLm5vcm1hbGl6ZShbIHRoaXMuYTEueCAtIHRoaXMuYTIueCwgdGhpcy5hMS55IC0gdGhpcy5hMi55LCB0aGlzLmExLnogLSB0aGlzLmEyLnogXSk7XG5cdFx0dGhpcy52ZWMyID0gdjMubm9ybWFsaXplKFsgdGhpcy5hMy54IC0gdGhpcy5hMi54LCB0aGlzLmEzLnkgLSB0aGlzLmEyLnksIHRoaXMuYTMueiAtIHRoaXMuYTIueiBdKTtcblx0XHR0aGlzLmFuZ2xlID0gZXh0ZW5zaW9ucy52ZWMzQW5nbGVGcm9tKHRoaXMudmVjMSwgdGhpcy52ZWMyKTtcblxuXHRcdHZhciBheGlzID0gdjMubm9ybWFsaXplKHYzLmNyb3NzKHRoaXMudmVjMSwgdGhpcy52ZWMyLCBbXSkpO1xuXHRcdHZhciB2ZWMzID0gdjMubm9ybWFsaXplKHYzLmNyb3NzKGF4aXMsIHRoaXMudmVjMSwgW10pKTtcblxuXHRcdHZhciBiYW5kcyA9IHNwZWNzLm1lYXN1cmVtZW50X2FuZ2xlQmFuZHNfM0Q7XG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDw9IGJhbmRzOyArK2kpIHtcblx0XHRcdHZhciB0aGV0YSA9IHRoaXMuYW5nbGUgKiBpIC8gYmFuZHM7XG5cdFx0XHR2YXIgdmVjQ29zID0gdjMuc2NhbGUodGhpcy52ZWMxLCBtLmNvcyh0aGV0YSksIFtdKTtcblx0XHRcdHZhciB2ZWNTaW4gPSB2My5zY2FsZSh2ZWMzLCBtLnNpbih0aGV0YSksIFtdKTtcblx0XHRcdHZhciBub3JtID0gdjMuc2NhbGUodjMubm9ybWFsaXplKHYzLmFkZCh2ZWNDb3MsIHZlY1NpbiwgW10pKSwgdGhpcy5kaXN0VXNlKTtcblxuXHRcdFx0cG9zaXRpb25EYXRhLnB1c2godGhpcy5hMi54ICsgbm9ybVswXSwgdGhpcy5hMi55ICsgbm9ybVsxXSwgdGhpcy5hMi56ICsgbm9ybVsyXSk7XG5cdFx0XHRub3JtYWxEYXRhLnB1c2goMCwgMCwgMCk7XG5cdFx0XHRpZiAoaSA8IGJhbmRzKSB7XG5cdFx0XHRcdGluZGV4RGF0YS5wdXNoKGksIGkgKyAxKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnN0b3JlRGF0YShwb3NpdGlvbkRhdGEsIG5vcm1hbERhdGEsIGluZGV4RGF0YSk7XG5cdH07XG5cdF8uZ2V0VGV4dCA9IGZ1bmN0aW9uKHNwZWNzKSB7XG5cdFx0dmFyIHZlY0NlbnRlciA9IHYzLnNjYWxlKHYzLm5vcm1hbGl6ZSh2My5hZGQodGhpcy52ZWMxLCB0aGlzLnZlYzIsIFtdKSksIHRoaXMuZGlzdFVzZSArIDAuMyk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHBvcyA6IFsgdGhpcy5hMi54ICsgdmVjQ2VudGVyWzBdLCB0aGlzLmEyLnkgKyB2ZWNDZW50ZXJbMV0sIHRoaXMuYTIueiArIHZlY0NlbnRlclsyXSBdLFxuXHRcdFx0dmFsdWUgOiBbIG1hdGguYW5nbGVCb3VuZHModGhpcy5hbmdsZSwgdHJ1ZSkudG9GaXhlZCgyKSwgJyBcXHUwMGIwJyBdLmpvaW4oJycpXG5cdFx0fTtcblx0fTtcblxufSkoRUxFTUVOVCwgZXh0ZW5zaW9ucywgZDMsIG1hdGgsIG0sIG00LCB2Myk7XG5cbihmdW5jdGlvbihkMywgbSwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDMuQXJyb3cgPSBmdW5jdGlvbihyYWRpdXMsIGxvbmdpdHVkZUJhbmRzKSB7XG5cdFx0dmFyIHBvc2l0aW9uRGF0YSA9IFtdO1xuXHRcdHZhciBub3JtYWxEYXRhID0gW107XG5cblx0XHRmb3IgKCB2YXIgbG9uZ051bWJlciA9IDA7IGxvbmdOdW1iZXIgPD0gbG9uZ2l0dWRlQmFuZHM7IGxvbmdOdW1iZXIrKykge1xuXHRcdFx0dmFyIHRoZXRhID0gbG9uZ051bWJlciAqIDIgKiBtLlBJIC8gbG9uZ2l0dWRlQmFuZHM7XG5cdFx0XHR2YXIgc2luVGhldGEgPSBtLnNpbih0aGV0YSk7XG5cdFx0XHR2YXIgY29zVGhldGEgPSBtLmNvcyh0aGV0YSk7XG5cblx0XHRcdHZhciB4ID0gY29zVGhldGE7XG5cdFx0XHR2YXIgeSA9IHNpblRoZXRhO1xuXG5cdFx0XHRub3JtYWxEYXRhLnB1c2goXG5cdFx0XHQvLyBiYXNlIGN5bGluZGVyXG5cdFx0XHQwLCAwLCAtMSwgMCwgMCwgLTEsXG5cdFx0XHQvLyBjeWxpbmRlclxuXHRcdFx0eCwgeSwgMCwgeCwgeSwgMCxcblx0XHRcdC8vIGJhc2UgY29uZVxuXHRcdFx0MCwgMCwgLTEsIDAsIDAsIC0xLFxuXHRcdFx0Ly8gY29uZVxuXHRcdFx0eCwgeSwgMSwgeCwgeSwgMSk7XG5cblx0XHRcdHBvc2l0aW9uRGF0YS5wdXNoKFxuXHRcdFx0Ly8gYmFzZSBjeWxpbmRlclxuXHRcdFx0MCwgMCwgMCwgcmFkaXVzICogeCwgcmFkaXVzICogeSwgMCxcblx0XHRcdC8vIGN5bGluZGVyXG5cdFx0XHRyYWRpdXMgKiB4LCByYWRpdXMgKiB5LCAwLCByYWRpdXMgKiB4LCByYWRpdXMgKiB5LCAyLFxuXHRcdFx0Ly8gYmFzZSBjb25lXG5cdFx0XHRyYWRpdXMgKiB4LCByYWRpdXMgKiB5LCAyLCByYWRpdXMgKiB4ICogMiwgcmFkaXVzICogeSAqIDIsIDIsXG5cdFx0XHQvLyBjb25lXG5cdFx0XHRyYWRpdXMgKiB4ICogMiwgcmFkaXVzICogeSAqIDIsIDIsIDAsIDAsIDMpO1xuXHRcdH1cblxuXHRcdHZhciBpbmRleERhdGEgPSBbXTtcblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBsb25naXR1ZGVCYW5kczsgaSsrKSB7XG5cdFx0XHR2YXIgb2Zmc2V0ID0gaSAqIDg7XG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gNzsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0dmFyIGZpcnN0ID0gaiArIG9mZnNldDtcblx0XHRcdFx0dmFyIHNlY29uZCA9IGZpcnN0ICsgMTtcblx0XHRcdFx0dmFyIHRoaXJkID0gZmlyc3QgKyBqaiArIDI7XG5cdFx0XHRcdHZhciBmb3J0aCA9IHRoaXJkIC0gMTtcblx0XHRcdFx0aW5kZXhEYXRhLnB1c2goZmlyc3QsIHRoaXJkLCBzZWNvbmQsIHRoaXJkLCBmaXJzdCwgZm9ydGgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMuc3RvcmVEYXRhKHBvc2l0aW9uRGF0YSwgbm9ybWFsRGF0YSwgaW5kZXhEYXRhKTtcblx0fTtcblx0ZDMuQXJyb3cucHJvdG90eXBlID0gbmV3IGQzLl9NZXNoKCk7XG5cbn0pKGQzLCBtKTtcblxuKGZ1bmN0aW9uKGQzLCBtLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRkMy5Cb3ggPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0LCBkZXB0aCkge1xuXHRcdHdpZHRoIC89IDI7XG5cdFx0ZGVwdGggLz0gMjtcblxuXHRcdHZhciBwb3NpdGlvbkRhdGEgPSBbXTtcblx0XHR2YXIgbm9ybWFsRGF0YSA9IFtdO1xuXG5cdFx0Ly8gdG9wXG5cdFx0cG9zaXRpb25EYXRhLnB1c2god2lkdGgsIGhlaWdodCwgLWRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCh3aWR0aCwgaGVpZ2h0LCAtZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKC13aWR0aCwgaGVpZ2h0LCAtZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKHdpZHRoLCBoZWlnaHQsIGRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCgtd2lkdGgsIGhlaWdodCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKC13aWR0aCwgaGVpZ2h0LCBkZXB0aCk7XG5cdFx0Zm9yKHZhciBpID0gNjsgaS0tOyBub3JtYWxEYXRhLnB1c2goMCAsIDEsIDApKTtcblxuXHRcdC8vIGZyb250XG5cdFx0cG9zaXRpb25EYXRhLnB1c2goLXdpZHRoLCBoZWlnaHQsIGRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCgtd2lkdGgsIGhlaWdodCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKC13aWR0aCwgMCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKHdpZHRoLCBoZWlnaHQsIGRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCh3aWR0aCwgMCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKHdpZHRoLCAwLCBkZXB0aCk7XG5cdFx0Zm9yKHZhciBpID0gNjsgaS0tOyBub3JtYWxEYXRhLnB1c2goMCAsIDAsIDEpKTtcblxuXHRcdC8vIHJpZ2h0XG5cdFx0cG9zaXRpb25EYXRhLnB1c2god2lkdGgsIGhlaWdodCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKHdpZHRoLCBoZWlnaHQsIGRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCh3aWR0aCwgMCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKHdpZHRoLCBoZWlnaHQsIC1kZXB0aCk7XG5cdFx0cG9zaXRpb25EYXRhLnB1c2god2lkdGgsIDAsIC1kZXB0aCk7XG5cdFx0cG9zaXRpb25EYXRhLnB1c2god2lkdGgsIDAsIC1kZXB0aCk7XG5cdFx0Zm9yKHZhciBpID0gNjsgaS0tOyBub3JtYWxEYXRhLnB1c2goMSAsIDAsIDApKTtcblxuXHRcdC8vIGJhY2tcblx0XHRwb3NpdGlvbkRhdGEucHVzaCh3aWR0aCwgaGVpZ2h0LCAtZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKHdpZHRoLCBoZWlnaHQsIC1kZXB0aCk7XG5cdFx0cG9zaXRpb25EYXRhLnB1c2god2lkdGgsIDAsIC1kZXB0aCk7XG5cdFx0cG9zaXRpb25EYXRhLnB1c2goLXdpZHRoLCBoZWlnaHQsIC1kZXB0aCk7XG5cdFx0cG9zaXRpb25EYXRhLnB1c2goLXdpZHRoLCAwLCAtZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKC13aWR0aCwgMCwgLWRlcHRoKTtcblx0XHRmb3IodmFyIGkgPSA2OyBpLS07IG5vcm1hbERhdGEucHVzaCgwICwgMCwgLTEpKTtcblxuXHRcdC8vIGxlZnRcblx0XHRwb3NpdGlvbkRhdGEucHVzaCgtd2lkdGgsIGhlaWdodCwgLWRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCgtd2lkdGgsIGhlaWdodCwgLWRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCgtd2lkdGgsIDAsIC1kZXB0aCk7XG5cdFx0cG9zaXRpb25EYXRhLnB1c2goLXdpZHRoLCBoZWlnaHQsIGRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCgtd2lkdGgsIDAsIGRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCgtd2lkdGgsIDAsIGRlcHRoKTtcblx0XHRmb3IodmFyIGkgPSA2OyBpLS07IG5vcm1hbERhdGEucHVzaCgtMSAsIDAsIDApKTtcblxuXHRcdC8vIGJvdHRvbVxuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKC13aWR0aCwgMCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKC13aWR0aCwgMCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKC13aWR0aCwgMCwgLWRlcHRoKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaCh3aWR0aCwgMCwgZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKHdpZHRoLCAwLCAtZGVwdGgpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKHdpZHRoLCAwLCAtZGVwdGgpO1xuXHRcdGZvcih2YXIgaSA9IDY7IGktLTsgbm9ybWFsRGF0YS5wdXNoKDAgLCAtMSwgMCkpO1xuXG5cdFx0dGhpcy5zdG9yZURhdGEocG9zaXRpb25EYXRhLCBub3JtYWxEYXRhKTtcblx0fTtcblx0ZDMuQm94LnByb3RvdHlwZSA9IG5ldyBkMy5fTWVzaCgpO1xuXG59KShkMywgbSk7XG5cbihmdW5jdGlvbihtYXRoLCBkMywgdjMsIG00LCBtLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRkMy5DYW1lcmEgPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmZpZWxkT2ZWaWV3ID0gNDU7XG5cdFx0dGhpcy5hc3BlY3QgPSAxO1xuXHRcdHRoaXMubmVhciA9IDAuMTtcblx0XHR0aGlzLmZhciA9IDEwMDAwO1xuXHRcdHRoaXMuem9vbSA9IDE7XG5cdFx0dGhpcy52aWV3TWF0cml4ID0gbTQuaWRlbnRpdHkoW10pO1xuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeCA9IG00LmlkZW50aXR5KFtdKTtcblx0fTtcblx0dmFyIF8gPSBkMy5DYW1lcmEucHJvdG90eXBlO1xuXHRfLnBlcnNwZWN0aXZlUHJvamVjdGlvbk1hdHJpeCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdG9wID0gbS50YW4odGhpcy5maWVsZE9mVmlldyAvIDM2MCAqIG0uUEkpICogdGhpcy5uZWFyICogdGhpcy56b29tO1xuICAgICAgICB2YXIgcmlnaHQgPSB0aGlzLmFzcGVjdCAqIHRvcDtcbiAgICAgICAgcmV0dXJuIG00LmZydXN0dW0oLXJpZ2h0LCByaWdodCwgLXRvcCwgdG9wLCB0aGlzLm5lYXIsIHRoaXMuZmFyLCB0aGlzLnByb2plY3Rpb25NYXRyaXgpO1xuXHR9O1xuXHRfLm9ydGhvZ29uYWxQcm9qZWN0aW9uTWF0cml4ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0b3AgPSBtLnRhbih0aGlzLmZpZWxkT2ZWaWV3IC8gMzYwICogbS5QSSkgKiAoKHRoaXMuZmFyIC0gdGhpcy5uZWFyKSAvIDIgKyB0aGlzLm5lYXIpICogdGhpcy56b29tO1xuICAgICAgICB2YXIgcmlnaHQgPSB0aGlzLmFzcGVjdCAqIHRvcDtcbiAgICAgICAgcmV0dXJuIG00Lm9ydGhvKC1yaWdodCwgcmlnaHQsIC10b3AsIHRvcCwgdGhpcy5uZWFyLCB0aGlzLmZhciwgdGhpcy5wcm9qZWN0aW9uTWF0cml4KTtcblx0fTtcblx0Xy51cGRhdGVQcm9qZWN0aW9uTWF0cml4ID0gZnVuY3Rpb24oaXNQZXJzcGVjdGl2ZSkge1xuXHRcdHJldHVybiBpc1BlcnNwZWN0aXZlID8gdGhpcy5wZXJzcGVjdGl2ZVByb2plY3Rpb25NYXRyaXgoKSA6IHRoaXMub3J0aG9nb25hbFByb2plY3Rpb25NYXRyaXgoKTtcblx0fTtcblx0Xy5mb2NhbExlbmd0aCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAodGhpcy5mYXIgLSB0aGlzLm5lYXIpIC8gMiArIHRoaXMubmVhcjtcblx0fTtcbiAgICBfLnpvb21JbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnpvb20gPSBtLm1pbih0aGlzLnpvb20gKiAxLjI1LCAyMDApO1xuICAgIH07XG4gICAgXy56b29tT3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuem9vbSA9IG0ubWF4KHRoaXMuem9vbSAvIDEuMjUsIDEgLyA0MDApO1xuICAgIH07XG5cbn0pKG1hdGgsIGQzLCB2MywgbTQsIG0pO1xuXG4oZnVuY3Rpb24oZDMsIG0sIG00LCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRkMy5MaW5lQXJyb3cgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgZCA9IDIuODtcblx0XHR2YXIgdyA9IDAuMTtcblxuXHRcdHRoaXMuc3RvcmVEYXRhKFtcblx0XHRcdFx0MCwgMCwgLTMsIHcsIDAsIC1kLFxuXHRcdFx0XHQwLCAwLCAtMywgLXcsIDAsIC1kLFxuXG5cdFx0XHRcdDAsIDAsIC0zLCAwLCAwLCAzLFxuXG5cdFx0XHRcdDAsIDAsIDMsIHcsIDAsIGQsXG5cdFx0XHRcdDAsIDAsIDMsIC13LCAwLCBkXG5cdFx0XHRdLFxuXHRcdFx0W1xuXHRcdFx0XHQwLCAwLCAwLCAwLCAwLCAwLFxuXHRcdFx0XHQwLCAwLCAwLCAwLCAwLCAwLFxuXHRcdFx0XHQwLCAwLCAwLCAwLCAwLCAwLFxuXHRcdFx0XHQwLCAwLCAwLCAwLCAwLCAwLFxuXHRcdFx0XHQwLCAwLCAwLCAwLCAwLCAwXG5cdFx0XHRdKTtcblx0fTtcblx0ZDMuTGluZUFycm93LnByb3RvdHlwZSA9IG5ldyBkMy5fTWVzaCgpO1xuXHRcblx0ZDMuQ29tcGFzcyA9IGZ1bmN0aW9uKGdsLCBzcGVjcykge1xuXG5cdFx0Ly8gc2V0dXAgdGV4dCBYIFkgWlxuXHRcdHRoaXMudGV4dEltYWdlID0gbmV3IGQzLlRleHRJbWFnZSgpO1xuXHRcdHRoaXMudGV4dEltYWdlLmluaXQoZ2wpO1xuXHRcdHRoaXMudGV4dEltYWdlLnVwZGF0ZUZvbnQoZ2wsIHNwZWNzLnRleHRfZm9udF9zaXplLCBzcGVjcy50ZXh0X2ZvbnRfZmFtaWxpZXMsIHNwZWNzLnRleHRfZm9udF9ib2xkLCBzcGVjcy50ZXh0X2ZvbnRfaXRhbGljLCBzcGVjcy50ZXh0X2ZvbnRfc3Ryb2tlXzNEKTtcblxuXHRcdHRoaXMudGV4dE1lc2ggPSBuZXcgZDMuVGV4dE1lc2goKTtcblx0XHR0aGlzLnRleHRNZXNoLmluaXQoZ2wpO1xuXG5cdFx0dmFyIHNjcmVlblJhdGlvSGVpZ2h0ID0gc3BlY3MuY29tcGFzc19zaXplXzNEIC8gZ2wuY2FudmFzLmNsaWVudEhlaWdodDtcblxuXHRcdHZhciBoZWlnaHQgPSAzIC8gc2NyZWVuUmF0aW9IZWlnaHQ7XG5cdFx0dmFyIHRhblRoZXRhID0gbS50YW4oc3BlY3MucHJvamVjdGlvblBlcnNwZWN0aXZlVmVydGljYWxGaWVsZE9mVmlld18zRCAvIDM2MCAqIG0uUEkpO1xuXHRcdHZhciBkZXB0aCA9IGhlaWdodCAvIHRhblRoZXRhO1xuXHRcdHZhciBuZWFyID0gbS5tYXgoZGVwdGggLSBoZWlnaHQsIDAuMSk7XG5cdFx0dmFyIGZhciA9IGRlcHRoICsgaGVpZ2h0O1xuXG5cdFx0dmFyIGFzcGVjID0gZ2wuY2FudmFzLmNsaWVudFdpZHRoIC8gZ2wuY2FudmFzLmNsaWVudEhlaWdodDtcblxuXHRcdHZhciBmblByb2plY3Rpb24sIHo7XG5cblx0XHRpZiAoc3BlY3MucHJvamVjdGlvblBlcnNwZWN0aXZlXzNEKSB7XG5cdFx0XHR6ID0gbmVhcjtcblx0XHRcdGZuUHJvamVjdGlvbiA9IG00LmZydXN0dW07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHogPSBkZXB0aDtcblx0XHRcdGZuUHJvamVjdGlvbiA9IG00Lm9ydGhvO1xuXHRcdH1cblxuXHRcdHZhciBuZWFyUmF0aW8gPSB6IC8gZ2wuY2FudmFzLmNsaWVudEhlaWdodCAqIDIgKiB0YW5UaGV0YTtcblx0XHR2YXIgdG9wID0gdGFuVGhldGEgKiB6O1xuXHRcdHZhciBib3R0b20gPSAtdG9wO1xuXHRcdHZhciBsZWZ0ID0gYXNwZWMgKiBib3R0b207XG5cdFx0dmFyIHJpZ2h0ID0gYXNwZWMgKiB0b3A7XG5cblx0XHRpZihzcGVjcy5jb21wYXNzX3R5cGVfM0QgPT09IDApIHtcblx0XHRcdHZhciBkZWx0YVggPSAtKGdsLmNhbnZhcy5jbGllbnRXaWR0aCAtIHNwZWNzLmNvbXBhc3Nfc2l6ZV8zRCkgLyAyICsgdGhpcy50ZXh0SW1hZ2UuY2hhckhlaWdodDtcblx0XHRcdHZhciBkZWx0YVkgPSAtKGdsLmNhbnZhcy5jbGllbnRIZWlnaHQgLSBzcGVjcy5jb21wYXNzX3NpemVfM0QpIC8gMiArIHRoaXMudGV4dEltYWdlLmNoYXJIZWlnaHQ7XG5cblx0XHRcdHZhciB4ID0gZGVsdGFYICogbmVhclJhdGlvO1xuXHRcdFx0dmFyIHkgPSBkZWx0YVkgKiBuZWFyUmF0aW87XG5cblx0XHRcdGxlZnQgLT0geDtcblx0XHRcdHJpZ2h0IC09IHg7XG5cdFx0XHRib3R0b20gLT0geTtcblx0XHRcdHRvcCAtPSB5O1xuXHRcdH1cblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeCA9IGZuUHJvamVjdGlvbihsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcik7XG5cdFx0dGhpcy50cmFuc2xhdGlvbk1hdHJpeCA9IG00LnRyYW5zbGF0ZShtNC5pZGVudGl0eShbXSksIFsgMCwgMCwgLWRlcHRoIF0pO1xuXG5cdFx0Ly8gdmVydGV4IGRhdGEgZm9yIFggWSBaIHRleHQgbGFiZWxcblx0XHR2YXIgdmVydGV4RGF0YSA9IHtcblx0XHRcdHBvc2l0aW9uIDogW10sXG5cdFx0XHR0ZXhDb29yZCA6IFtdLFxuXHRcdFx0dHJhbnNsYXRpb24gOiBbXVxuXHRcdH07XG5cblx0XHQvLyBpdCBuZWVkIHRvIGF1dG8gY2FsY3VsYXRlZCBzb21laG93XG5cdFx0dmFyIHRleHRQb3MgPSAzLjU7XG5cblx0XHR0aGlzLnRleHRJbWFnZS5wdXNoVmVydGV4RGF0YSgnWCcsIFsgdGV4dFBvcywgMCwgMCBdLCAwLCB2ZXJ0ZXhEYXRhKTtcblx0XHR0aGlzLnRleHRJbWFnZS5wdXNoVmVydGV4RGF0YSgnWScsIFsgMCwgdGV4dFBvcywgMCBdLCAwLCB2ZXJ0ZXhEYXRhKTtcblx0XHR0aGlzLnRleHRJbWFnZS5wdXNoVmVydGV4RGF0YSgnWicsIFsgMCwgMCwgdGV4dFBvcyBdLCAwLCB2ZXJ0ZXhEYXRhKTtcblxuXHRcdHRoaXMudGV4dE1lc2guc3RvcmVEYXRhKGdsLCB2ZXJ0ZXhEYXRhLnBvc2l0aW9uLCB2ZXJ0ZXhEYXRhLnRleENvb3JkLCB2ZXJ0ZXhEYXRhLnRyYW5zbGF0aW9uKTtcblx0fTtcblxuXHR2YXIgXyA9IGQzLkNvbXBhc3MucHJvdG90eXBlO1xuXHRfLnJlbmRlckFycm93ID0gZnVuY3Rpb24oZ2wsIHR5cGUsIGNvbG9yLCBtdk1hdHJpeCkge1xuXHRcdGdsLm1hdGVyaWFsLnNldERpZmZ1c2VDb2xvcihnbCwgY29sb3IpO1xuXHRcdGdsLnNoYWRlci5zZXRNb2RlbFZpZXdNYXRyaXgoZ2wsIG12TWF0cml4KTtcblx0XHRpZih0eXBlID09PSAxKSB7XG5cdFx0XHRnbC5kcmF3QXJyYXlzKGdsLkxJTkVTLCAwLCBnbC5saW5lQXJyb3dCdWZmZXIudmVydGV4UG9zaXRpb25CdWZmZXIubnVtSXRlbXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCBnbC5hcnJvd0J1ZmZlci52ZXJ0ZXhJbmRleEJ1ZmZlci5udW1JdGVtcywgZ2wuVU5TSUdORURfU0hPUlQsIDApO1xuXHRcdH1cblx0fTtcblx0Xy5yZW5kZXIgPSBmdW5jdGlvbihnbCwgc3BlY3MpIHtcblx0XHRnbC5zaGFkZXIuc2V0UHJvamVjdGlvbk1hdHJpeChnbCwgdGhpcy5wcm9qZWN0aW9uTWF0cml4KTtcblx0XHRzcGVjcy5jb21wYXNzX3R5cGVfM0QgPT09IDEgPyBnbC5saW5lQXJyb3dCdWZmZXIuYmluZEJ1ZmZlcnMoZ2wpIDogZ2wuYXJyb3dCdWZmZXIuYmluZEJ1ZmZlcnMoZ2wpO1xuXG5cdFx0Z2wubWF0ZXJpYWwuc2V0VGVtcENvbG9ycyhnbCwgc3BlY3MuYm9uZHNfbWF0ZXJpYWxBbWJpZW50Q29sb3JfM0QsIHVuZGVmaW5lZCwgc3BlY3MuYm9uZHNfbWF0ZXJpYWxTcGVjdWxhckNvbG9yXzNELCBzcGVjcy5ib25kc19tYXRlcmlhbFNoaW5pbmVzc18zRCk7XG5cblx0XHR2YXIgbW9kZWxNYXRyaXggPSBtNC5tdWx0aXBseSh0aGlzLnRyYW5zbGF0aW9uTWF0cml4LCBnbC5yb3RhdGlvbk1hdHJpeCwgW10pO1xuXHRcdHZhciBhbmdsZSA9IG0uUEkgLyAyO1xuXG5cdFx0Ly8geCAtIGF4aXNcblx0XHR0aGlzLnJlbmRlckFycm93KGdsLCBzcGVjcy5jb21wYXNzX3R5cGVfM0QsIHNwZWNzLmNvbXBhc3NfYXhpc1hDb2xvcl8zRCwgbTQucm90YXRlWShtb2RlbE1hdHJpeCwgYW5nbGUsIFtdKSk7XG5cblx0XHQvLyB5IC0gYXhpc1xuXHRcdHRoaXMucmVuZGVyQXJyb3coZ2wsIHNwZWNzLmNvbXBhc3NfdHlwZV8zRCwgc3BlY3MuY29tcGFzc19heGlzWUNvbG9yXzNELCBtNC5yb3RhdGVYKG1vZGVsTWF0cml4LCAtYW5nbGUsIFtdKSk7XG5cblx0XHQvLyB6IC0gYXhpc1xuXHRcdHRoaXMucmVuZGVyQXJyb3coZ2wsIHNwZWNzLmNvbXBhc3NfdHlwZV8zRCwgc3BlY3MuY29tcGFzc19heGlzWkNvbG9yXzNELCBtb2RlbE1hdHJpeCk7XG5cdH07XG5cdF8ucmVuZGVyQXhpcyA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0Z2wuc2hhZGVyLnNldFByb2plY3Rpb25NYXRyaXgoZ2wsIHRoaXMucHJvamVjdGlvbk1hdHJpeCk7XG5cdFx0dmFyIG12TWF0cml4ID0gbTQubXVsdGlwbHkodGhpcy50cmFuc2xhdGlvbk1hdHJpeCwgZ2wucm90YXRpb25NYXRyaXgsIFtdKTtcblx0XHRnbC5zaGFkZXIuc2V0TW9kZWxWaWV3TWF0cml4KGdsLCBtdk1hdHJpeCk7XG5cblx0XHR0aGlzLnRleHRJbWFnZS51c2VUZXh0dXJlKGdsKTtcblx0XHR0aGlzLnRleHRNZXNoLnJlbmRlcihnbCk7XG5cdH07XG5cbn0pKGQzLCBtLCBtNCk7XG5cbihmdW5jdGlvbihkMywgbSwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDMuQ3lsaW5kZXIgPSBmdW5jdGlvbihyYWRpdXMsIGhlaWdodCwgYmFuZHMsIGNsb3NlZCkge1xuXHRcdHZhciBwb3NpdGlvbkRhdGEgPSBbXTtcblx0XHR2YXIgbm9ybWFsRGF0YSA9IFtdO1xuXG5cdFx0aWYgKGNsb3NlZCkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPD0gYmFuZHM7IGkrKykge1xuXHRcdFx0XHR2YXIgdGhldGEgPSBpICUgYmFuZHMgKiAyICogbS5QSSAvIGJhbmRzO1xuXHRcdFx0XHR2YXIgY29zVGhldGEgPSBtLmNvcyh0aGV0YSk7XG5cdFx0XHRcdHZhciBzaW5UaGV0YSA9IG0uc2luKHRoZXRhKTtcblxuXHRcdFx0XHRub3JtYWxEYXRhLnB1c2goMCwgLTEsIDApO1xuXHRcdFx0XHRwb3NpdGlvbkRhdGEucHVzaCgwLCAwLCAwKTtcblx0XHRcdFx0bm9ybWFsRGF0YS5wdXNoKDAsIC0xLCAwKTtcblx0XHRcdFx0cG9zaXRpb25EYXRhLnB1c2gocmFkaXVzICogY29zVGhldGEsIDAsIHJhZGl1cyAqIHNpblRoZXRhKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8PSBiYW5kczsgaSsrKSB7XG5cdFx0XHRcdHZhciB0aGV0YSA9IGkgJSBiYW5kcyAqIDIgKiBtLlBJIC8gYmFuZHM7XG5cdFx0XHRcdHZhciBjb3NUaGV0YSA9IG0uY29zKHRoZXRhKTtcblx0XHRcdFx0dmFyIHNpblRoZXRhID0gbS5zaW4odGhldGEpO1xuXG5cdFx0XHRcdG5vcm1hbERhdGEucHVzaChjb3NUaGV0YSwgMCwgc2luVGhldGEpO1xuXHRcdFx0XHRwb3NpdGlvbkRhdGEucHVzaChyYWRpdXMgKiBjb3NUaGV0YSwgMCwgcmFkaXVzICogc2luVGhldGEpO1xuXG5cdFx0XHRcdG5vcm1hbERhdGEucHVzaChjb3NUaGV0YSwgMCwgc2luVGhldGEpO1xuXHRcdFx0XHRwb3NpdGlvbkRhdGEucHVzaChyYWRpdXMgKiBjb3NUaGV0YSwgaGVpZ2h0LCByYWRpdXMgKiBzaW5UaGV0YSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDw9IGJhbmRzOyBpKyspIHtcblx0XHRcdFx0dmFyIHRoZXRhID0gaSAlIGJhbmRzICogMiAqIG0uUEkgLyBiYW5kcztcblx0XHRcdFx0dmFyIGNvc1RoZXRhID0gbS5jb3ModGhldGEpO1xuXHRcdFx0XHR2YXIgc2luVGhldGEgPSBtLnNpbih0aGV0YSk7XG5cblx0XHRcdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDEsIDApO1xuXHRcdFx0XHRwb3NpdGlvbkRhdGEucHVzaChyYWRpdXMgKiBjb3NUaGV0YSwgaGVpZ2h0LCByYWRpdXMgKiBzaW5UaGV0YSk7XG5cblx0XHRcdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDEsIDApO1xuXHRcdFx0XHRwb3NpdGlvbkRhdGEucHVzaCgwLCBoZWlnaHQsIDApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGJhbmRzOyBpKyspIHtcblx0XHRcdFx0dmFyIHRoZXRhID0gaSAqIDIgKiBtLlBJIC8gYmFuZHM7XG5cdFx0XHRcdHZhciBjb3NUaGV0YSA9IG0uY29zKHRoZXRhKTtcblx0XHRcdFx0dmFyIHNpblRoZXRhID0gbS5zaW4odGhldGEpO1xuXHRcdFx0XHRub3JtYWxEYXRhLnB1c2goY29zVGhldGEsIDAsIHNpblRoZXRhKTtcblx0XHRcdFx0cG9zaXRpb25EYXRhLnB1c2gocmFkaXVzICogY29zVGhldGEsIDAsIHJhZGl1cyAqIHNpblRoZXRhKTtcblx0XHRcdFx0bm9ybWFsRGF0YS5wdXNoKGNvc1RoZXRhLCAwLCBzaW5UaGV0YSk7XG5cdFx0XHRcdHBvc2l0aW9uRGF0YS5wdXNoKHJhZGl1cyAqIGNvc1RoZXRhLCBoZWlnaHQsIHJhZGl1cyAqIHNpblRoZXRhKTtcblx0XHRcdH1cblx0XHRcdG5vcm1hbERhdGEucHVzaCgxLCAwLCAwKTtcblx0XHRcdHBvc2l0aW9uRGF0YS5wdXNoKHJhZGl1cywgMCwgMCk7XG5cdFx0XHRub3JtYWxEYXRhLnB1c2goMSwgMCwgMCk7XG5cdFx0XHRwb3NpdGlvbkRhdGEucHVzaChyYWRpdXMsIGhlaWdodCwgMCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9yZURhdGEocG9zaXRpb25EYXRhLCBub3JtYWxEYXRhKTtcblx0fTtcblx0ZDMuQ3lsaW5kZXIucHJvdG90eXBlID0gbmV3IGQzLl9NZXNoKCk7XG5cbn0pKGQzLCBtKTtcblxuKGZ1bmN0aW9uKEVMRU1FTlQsIGQzLCBtLCB2MywgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDMuRGlzdGFuY2UgPSBmdW5jdGlvbihhMSwgYTIsIG5vZGUsIG9mZnNldCkge1xuXHRcdHRoaXMuYTEgPSBhMTtcblx0XHR0aGlzLmEyID0gYTI7XG5cdFx0dGhpcy5ub2RlID0gbm9kZTtcblx0XHR0aGlzLm9mZnNldCA9IG9mZnNldCA/IG9mZnNldCA6IDA7XG5cdH07XG5cdHZhciBfID0gZDMuRGlzdGFuY2UucHJvdG90eXBlID0gbmV3IGQzLl9NZWFzdXJlbWVudCgpO1xuXHRfLmNhbGN1bGF0ZURhdGEgPSBmdW5jdGlvbihzcGVjcykge1xuXHRcdHZhciBwb3NpdGlvbkRhdGEgPSBbIHRoaXMuYTEueCwgdGhpcy5hMS55LCB0aGlzLmExLnosIHRoaXMuYTIueCwgdGhpcy5hMi55LCB0aGlzLmEyLnogXTtcblx0XHRpZiAodGhpcy5ub2RlKSB7XG5cdFx0XHR2YXIgcjEgPSBzcGVjcy5hdG9tc191c2VWRFdEaWFtZXRlcnNfM0QgPyBFTEVNRU5UW3RoaXMuYTEubGFiZWxdLnZkV1JhZGl1cyAqIHNwZWNzLmF0b21zX3Zkd011bHRpcGxpZXJfM0QgOiBzcGVjcy5hdG9tc19zcGhlcmVEaWFtZXRlcl8zRCAvIDI7XG5cdFx0XHR2YXIgcjIgPSBzcGVjcy5hdG9tc191c2VWRFdEaWFtZXRlcnNfM0QgPyBFTEVNRU5UW3RoaXMuYTIubGFiZWxdLnZkV1JhZGl1cyAqIHNwZWNzLmF0b21zX3Zkd011bHRpcGxpZXJfM0QgOiBzcGVjcy5hdG9tc19zcGhlcmVEaWFtZXRlcl8zRCAvIDI7XG5cdFx0XHR0aGlzLm1vdmUgPSB0aGlzLm9mZnNldCArIG0ubWF4KHIxLCByMik7XG5cdFx0XHR0aGlzLmRpc3BsYWNlbWVudCA9IFsgKHRoaXMuYTEueCArIHRoaXMuYTIueCkgLyAyIC0gdGhpcy5ub2RlLngsICh0aGlzLmExLnkgKyB0aGlzLmEyLnkpIC8gMiAtIHRoaXMubm9kZS55LCAodGhpcy5hMS56ICsgdGhpcy5hMi56KSAvIDIgLSB0aGlzLm5vZGUueiBdO1xuXHRcdFx0djMubm9ybWFsaXplKHRoaXMuZGlzcGxhY2VtZW50KTtcblx0XHRcdHZhciBjaGFuZ2UgPSB2My5zY2FsZSh0aGlzLmRpc3BsYWNlbWVudCwgdGhpcy5tb3ZlLCBbXSk7XG5cdFx0XHRwb3NpdGlvbkRhdGFbMF0gKz0gY2hhbmdlWzBdO1xuXHRcdFx0cG9zaXRpb25EYXRhWzFdICs9IGNoYW5nZVsxXTtcblx0XHRcdHBvc2l0aW9uRGF0YVsyXSArPSBjaGFuZ2VbMl07XG5cdFx0XHRwb3NpdGlvbkRhdGFbM10gKz0gY2hhbmdlWzBdO1xuXHRcdFx0cG9zaXRpb25EYXRhWzRdICs9IGNoYW5nZVsxXTtcblx0XHRcdHBvc2l0aW9uRGF0YVs1XSArPSBjaGFuZ2VbMl07XG5cdFx0fVxuXHRcdHZhciBub3JtYWxEYXRhID0gWyAwLCAwLCAwLCAwLCAwLCAwIF07XG5cdFx0dmFyIGluZGV4RGF0YSA9IFsgMCwgMSBdO1xuXHRcdHRoaXMuc3RvcmVEYXRhKHBvc2l0aW9uRGF0YSwgbm9ybWFsRGF0YSwgaW5kZXhEYXRhKTtcblx0fTtcblx0Xy5nZXRUZXh0ID0gZnVuY3Rpb24oc3BlY3MpIHtcblx0XHR2YXIgZGlzdCA9IHRoaXMuYTEuZGlzdGFuY2UzRCh0aGlzLmEyKTtcblx0XHR2YXIgY2VudGVyID0gWyAodGhpcy5hMS54ICsgdGhpcy5hMi54KSAvIDIsICh0aGlzLmExLnkgKyB0aGlzLmEyLnkpIC8gMiwgKHRoaXMuYTEueiArIHRoaXMuYTIueikgLyAyIF07XG5cdFx0aWYgKHRoaXMubm9kZSkge1xuXHRcdFx0dmFyIGNoYW5nZSA9IHYzLnNjYWxlKHRoaXMuZGlzcGxhY2VtZW50LCB0aGlzLm1vdmUrLjEsIFtdKTtcblx0XHRcdGNlbnRlclswXSArPSBjaGFuZ2VbMF07XG5cdFx0XHRjZW50ZXJbMV0gKz0gY2hhbmdlWzFdO1xuXHRcdFx0Y2VudGVyWzJdICs9IGNoYW5nZVsyXTtcblx0XHR9XG5cdFx0cmV0dXJuIHtcblx0XHRcdHBvcyA6IGNlbnRlcixcblx0XHRcdHZhbHVlIDogWyBkaXN0LnRvRml4ZWQoMiksICcgXFx1MjEyYicgXS5qb2luKCcnKVxuXHRcdH07XG5cdH07XG5cbn0pKEVMRU1FTlQsIGQzLCBtLCB2Myk7XG5cbihmdW5jdGlvbihtYXRoLCBkMywgdjMsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0ZDMuRm9nID0gZnVuY3Rpb24oY29sb3IsIGZvZ1N0YXJ0LCBmb2dFbmQsIGRlbnNpdHkpIHtcblx0XHR0aGlzLmZvZ1NjZW5lKGNvbG9yLCBmb2dTdGFydCwgZm9nRW5kLCBkZW5zaXR5KTtcblx0fTtcblx0dmFyIF8gPSBkMy5Gb2cucHJvdG90eXBlO1xuXHRfLmZvZ1NjZW5lID0gZnVuY3Rpb24oY29sb3IsIGZvZ1N0YXJ0LCBmb2dFbmQsIGRlbnNpdHkpIHtcblx0XHR0aGlzLmNvbG9yUkdCID0gbWF0aC5nZXRSR0IoY29sb3IsIDEpO1xuXHRcdHRoaXMuZm9nU3RhcnQgPSBmb2dTdGFydDtcblx0XHR0aGlzLmZvZ0VuZCA9IGZvZ0VuZDtcblx0XHR0aGlzLmRlbnNpdHkgPSBkZW5zaXR5O1xuXHR9O1xuXHRcbn0pKG1hdGgsIGQzLCB2Myk7XG5cbihmdW5jdGlvbihFTEVNRU5ULCBkMywgdW5kZWZpbmVkKSB7XG5cblx0ZDMuTGFiZWwgPSBmdW5jdGlvbih0ZXh0SW1hZ2UpIHtcblx0fTtcblx0dmFyIF8gPSBkMy5MYWJlbC5wcm90b3R5cGU7XG5cdF8udXBkYXRlVmVydGljZXNCdWZmZXIgPSBmdW5jdGlvbihnbCwgbW9sZWN1bGVzLCBzcGVjcykge1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBtb2xlY3VsZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIG1vbGVjdWxlID0gbW9sZWN1bGVzW2ldO1xuXHRcdFx0dmFyIG1vbGVjdWxlTGFiZWwgPSBtb2xlY3VsZS5sYWJlbE1lc2g7XG5cdFx0XHR2YXIgYXRvbXMgPSBtb2xlY3VsZS5hdG9tcztcblx0XHRcdHZhciB2ZXJ0ZXhEYXRhID0ge1xuXHRcdFx0XHRwb3NpdGlvbiA6IFtdLFxuXHRcdFx0XHR0ZXhDb29yZCA6IFtdLFxuXHRcdFx0XHR0cmFuc2xhdGlvbiA6IFtdXG5cdFx0XHR9O1xuXG5cdFx0XHR2YXIgaXNNYWNybyA9IGF0b21zLmxlbmd0aCA+IDAgJiYgYXRvbXNbMF0uaGV0YXRtICE9IHVuZGVmaW5lZDtcblxuXHRcdFx0Zm9yICggdmFyIGogPSAwLCBqaiA9IGF0b21zLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0dmFyIGF0b20gPSBhdG9tc1tqXTtcblx0XHRcdFx0XG5cdFx0XHRcdHZhciBhdG9tTGFiZWwgPSBhdG9tLmxhYmVsO1xuXHRcdFx0XHR2YXIgekRlcHRoID0gMC4wNTtcblxuXHRcdFx0XHQvLyBTcGhlcmUgb3IgQmFsbCBhbmQgU3RpY2tcblx0XHRcdFx0aWYgKHNwZWNzLmF0b21zX3VzZVZEV0RpYW1ldGVyc18zRCkge1xuXHRcdFx0XHRcdHZhciBhZGQgPSBFTEVNRU5UW2F0b21MYWJlbF0udmRXUmFkaXVzICogc3BlY3MuYXRvbXNfdmR3TXVsdGlwbGllcl8zRDtcblx0XHRcdFx0XHRpZiAoYWRkID09PSAwKSB7XG5cdFx0XHRcdFx0XHRhZGQgPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR6RGVwdGggKz0gYWRkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIGlmIFN0aWNrIG9yIFdpcmVmcmFtZVxuXHRcdFx0XHRlbHNlIGlmIChzcGVjcy5hdG9tc19zcGhlcmVEaWFtZXRlcl8zRCkge1xuXHRcdFx0XHRcdHpEZXB0aCArPSBzcGVjcy5hdG9tc19zcGhlcmVEaWFtZXRlcl8zRCAvIDIgKiAxLjU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoaXNNYWNybykge1xuXHRcdFx0XHRcdGlmICghYXRvbS5oZXRhdG0pIHtcblx0XHRcdFx0XHRcdGlmICghc3BlY3MubWFjcm9fZGlzcGxheUF0b21zKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoYXRvbS5pc1dhdGVyKSB7XG5cdFx0XHRcdFx0XHRpZiAoIXNwZWNzLm1hY3JvX3Nob3dXYXRlcnMpIHtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRnbC50ZXh0SW1hZ2UucHVzaFZlcnRleERhdGEoYXRvbS5hbHRMYWJlbCA/IGF0b20uYWx0TGFiZWwgOiBhdG9tLmxhYmVsLCBbIGF0b20ueCwgYXRvbS55LCBhdG9tLnogXSwgekRlcHRoLCB2ZXJ0ZXhEYXRhKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgY2hhaW5zID0gbW9sZWN1bGUuY2hhaW5zO1xuXG5cdFx0XHRpZiAoY2hhaW5zICYmIChzcGVjcy5wcm90ZWluc19kaXNwbGF5UmliYm9uIHx8IHNwZWNzLnByb3RlaW5zX2Rpc3BsYXlCYWNrYm9uZSkpIHtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gY2hhaW5zLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgY2hhaW4gPSBjaGFpbnNbal07XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgayA9IDAsIGtrID0gY2hhaW4ubGVuZ3RoOyBrIDwga2s7IGsrKykge1xuXHRcdFx0XHRcdFx0dmFyIHJlc2lkdWUgPSBjaGFpbltrXTtcblxuXHRcdFx0XHRcdFx0aWYgKHJlc2lkdWUubmFtZSkge1xuXHRcdFx0XHRcdFx0XHR2YXIgYXRvbSA9IHJlc2lkdWUuY3AxO1xuXHRcdFx0XHRcdFx0XHRnbC50ZXh0SW1hZ2UucHVzaFZlcnRleERhdGEocmVzaWR1ZS5uYW1lLCBbIGF0b20ueCwgYXRvbS55LCBhdG9tLnogXSwgMiwgdmVydGV4RGF0YSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0bW9sZWN1bGVMYWJlbC5zdG9yZURhdGEoZ2wsIHZlcnRleERhdGEucG9zaXRpb24sIHZlcnRleERhdGEudGV4Q29vcmQsIHZlcnRleERhdGEudHJhbnNsYXRpb24sIHZlcnRleERhdGEuekRlcHRoKTtcblx0XHR9XG5cdH07XG5cdF8ucmVuZGVyID0gZnVuY3Rpb24oZ2wsIHNwZWNzLCBtb2xlY3VsZXMpIHtcblx0XHQvLyB1c2UgcHJvamVjdGlvbiBmb3Igc2hhZGVyIHRleHQuXG5cdFx0Z2wuc2hhZGVyLnNldE1hdHJpeFVuaWZvcm1zKGdsKTtcblxuXHRcdGdsLnRleHRJbWFnZS51c2VUZXh0dXJlKGdsKTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gbW9sZWN1bGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdGlmIChtb2xlY3VsZXNbaV0ubGFiZWxNZXNoKSB7XG5cdFx0XHRcdG1vbGVjdWxlc1tpXS5sYWJlbE1lc2gucmVuZGVyKGdsKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cbn0pKEVMRU1FTlQsIGQzKTtcblxuKGZ1bmN0aW9uKGQzLCBtLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRkMy5TcGhlcmUgPSBmdW5jdGlvbihyYWRpdXMsIGxhdGl0dWRlQmFuZHMsIGxvbmdpdHVkZUJhbmRzKSB7XG5cdFx0dmFyIHBvc2l0aW9uRGF0YSA9IFtdO1xuXHRcdHZhciBub3JtYWxEYXRhID0gW107XG5cdFx0Zm9yICggdmFyIGxhdE51bWJlciA9IDA7IGxhdE51bWJlciA8PSBsYXRpdHVkZUJhbmRzOyBsYXROdW1iZXIrKykge1xuXHRcdFx0dmFyIHRoZXRhID0gbGF0TnVtYmVyICogbS5QSSAvIGxhdGl0dWRlQmFuZHM7XG5cdFx0XHR2YXIgc2luVGhldGEgPSBtLnNpbih0aGV0YSk7XG5cdFx0XHR2YXIgY29zVGhldGEgPSBtLmNvcyh0aGV0YSk7XG5cblx0XHRcdGZvciAoIHZhciBsb25nTnVtYmVyID0gMDsgbG9uZ051bWJlciA8PSBsb25naXR1ZGVCYW5kczsgbG9uZ051bWJlcisrKSB7XG5cdFx0XHRcdHZhciBwaGkgPSBsb25nTnVtYmVyICogMiAqIG0uUEkgLyBsb25naXR1ZGVCYW5kcztcblx0XHRcdFx0dmFyIHNpblBoaSA9IG0uc2luKHBoaSk7XG5cdFx0XHRcdHZhciBjb3NQaGkgPSBtLmNvcyhwaGkpO1xuXG5cdFx0XHRcdHZhciB4ID0gY29zUGhpICogc2luVGhldGE7XG5cdFx0XHRcdHZhciB5ID0gY29zVGhldGE7XG5cdFx0XHRcdHZhciB6ID0gc2luUGhpICogc2luVGhldGE7XG5cblx0XHRcdFx0bm9ybWFsRGF0YS5wdXNoKHgsIHksIHopO1xuXHRcdFx0XHRwb3NpdGlvbkRhdGEucHVzaChyYWRpdXMgKiB4LCByYWRpdXMgKiB5LCByYWRpdXMgKiB6KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgaW5kZXhEYXRhID0gW107XG5cdFx0bG9uZ2l0dWRlQmFuZHMgKz0gMTtcblx0XHRmb3IgKCB2YXIgbGF0TnVtYmVyID0gMDsgbGF0TnVtYmVyIDwgbGF0aXR1ZGVCYW5kczsgbGF0TnVtYmVyKyspIHtcblx0XHRcdGZvciAoIHZhciBsb25nTnVtYmVyID0gMDsgbG9uZ051bWJlciA8IGxvbmdpdHVkZUJhbmRzOyBsb25nTnVtYmVyKyspIHtcblx0XHRcdFx0dmFyIGZpcnN0ID0gKGxhdE51bWJlciAqIGxvbmdpdHVkZUJhbmRzKSArIChsb25nTnVtYmVyICUgbG9uZ2l0dWRlQmFuZHMpO1xuXHRcdFx0XHR2YXIgc2Vjb25kID0gZmlyc3QgKyBsb25naXR1ZGVCYW5kcztcblx0XHRcdFx0aW5kZXhEYXRhLnB1c2goZmlyc3QsIGZpcnN0ICsgMSwgc2Vjb25kKTtcblx0XHRcdFx0aWYgKGxvbmdOdW1iZXIgPCBsb25naXR1ZGVCYW5kcyAtIDEpIHtcblx0XHRcdFx0XHRpbmRleERhdGEucHVzaChzZWNvbmQsIGZpcnN0ICsgMSwgc2Vjb25kICsgMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnN0b3JlRGF0YShwb3NpdGlvbkRhdGEsIG5vcm1hbERhdGEsIGluZGV4RGF0YSk7XG5cdH07XG5cdGQzLlNwaGVyZS5wcm90b3R5cGUgPSBuZXcgZDMuX01lc2goKTtcblxufSkoZDMsIG0pO1xuXG4oZnVuY3Rpb24oUkVTSURVRSwgZDMsIG0sIHYzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHR2YXIgbG9hZFBhcnRpdGlvbiA9IGZ1bmN0aW9uKGdsLCBwKSB7XG5cdFx0Ly8gcG9zaXRpb25zXG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHAudmVydGV4UG9zaXRpb25CdWZmZXIpO1xuXHRcdGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoZ2wuc2hhZGVyLnZlcnRleFBvc2l0aW9uQXR0cmlidXRlLCBwLnZlcnRleFBvc2l0aW9uQnVmZmVyLml0ZW1TaXplLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXHRcdC8vIG5vcm1hbHNcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgcC52ZXJ0ZXhOb3JtYWxCdWZmZXIpO1xuXHRcdGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoZ2wuc2hhZGVyLnZlcnRleE5vcm1hbEF0dHJpYnV0ZSwgcC52ZXJ0ZXhOb3JtYWxCdWZmZXIuaXRlbVNpemUsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG5cdFx0Ly8gaW5kZXhlc1xuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHAudmVydGV4SW5kZXhCdWZmZXIpO1xuXHR9O1xuXG5cdGZ1bmN0aW9uIFN1YlJpYmJvbihlbnRpcmUsIG5hbWUsIGluZGV4ZXMsIHBpKSB7XG5cdFx0dGhpcy5lbnRpcmUgPSBlbnRpcmU7XG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcblx0XHR0aGlzLmluZGV4ZXMgPSBpbmRleGVzO1xuXHRcdHRoaXMucGkgPSBwaTtcblx0fVxuXHR2YXIgXzIgPSBTdWJSaWJib24ucHJvdG90eXBlO1xuXHQvLyBOT1RFOiBUbyB1c2UgcmFpbmJvdyBjb2xvcmluZyBmb3IgY2hhaW5zLCBpdCBuZWVkcyBjb2xvcmluZyBlYWNoIHJlc2lkdWUgd2l0aCB0b3RhbCByZXNpZHVlIGNvdW50XG5cdC8vIGFuZCBjdXJyZW50IGluZGV4IHJlc2lkdWUgaW4gY2hhaW4gcGFyYW1ldGVycy5cblx0XzIuZ2V0Q29sb3IgPSBmdW5jdGlvbihzcGVjcykge1xuXHRcdGlmIChzcGVjcy5tYWNyb19jb2xvckJ5Q2hhaW4pIHtcblx0XHRcdHJldHVybiB0aGlzLmVudGlyZS5jaGFpbkNvbG9yO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5uYW1lKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRSZXNpZHVlQ29sb3IoUkVTSURVRVt0aGlzLm5hbWVdID8gdGhpcy5uYW1lIDogJyonLCBzcGVjcyk7XG5cdFx0fSBlbHNlIGlmICh0aGlzLmhlbGl4KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lbnRpcmUuZnJvbnQgPyBzcGVjcy5wcm90ZWluc19yaWJib25DYXJ0b29uSGVsaXhQcmltYXJ5Q29sb3IgOiBzcGVjcy5wcm90ZWluc19yaWJib25DYXJ0b29uSGVsaXhTZWNvbmRhcnlDb2xvcjtcblx0XHR9IGVsc2UgaWYgKHRoaXMuc2hlZXQpIHtcblx0XHRcdHJldHVybiBzcGVjcy5wcm90ZWluc19yaWJib25DYXJ0b29uU2hlZXRDb2xvcjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuZW50aXJlLmZyb250ID8gc3BlY3MucHJvdGVpbnNfcHJpbWFyeUNvbG9yIDogc3BlY3MucHJvdGVpbnNfc2Vjb25kYXJ5Q29sb3I7XG5cdFx0fVxuXHR9O1xuXHRfMi5nZXRSZXNpZHVlQ29sb3IgPSBmdW5jdGlvbihuYW1lLCBzcGVjcykge1xuXHRcdHZhciByID0gUkVTSURVRVtuYW1lXTtcblx0XHRpZiAoc3BlY3MucHJvdGVpbnNfcmVzaWR1ZUNvbG9yID09PSAnc2hhcGVseScpIHtcblx0XHRcdHJldHVybiByLnNoYXBlbHlDb2xvcjtcblx0XHR9IGVsc2UgaWYgKHNwZWNzLnByb3RlaW5zX3Jlc2lkdWVDb2xvciA9PT0gJ2FtaW5vJykge1xuXHRcdFx0cmV0dXJuIHIuYW1pbm9Db2xvcjtcblx0XHR9IGVsc2UgaWYgKHNwZWNzLnByb3RlaW5zX3Jlc2lkdWVDb2xvciA9PT0gJ3BvbGFyaXR5Jykge1xuXHRcdFx0aWYgKHIucG9sYXIpIHtcblx0XHRcdFx0cmV0dXJuICcjQzEwMDAwJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiAnI0ZGRkZGRic7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChzcGVjcy5wcm90ZWluc19yZXNpZHVlQ29sb3IgPT09ICdhY2lkaXR5Jykge1xuXHRcdFx0aWYoci5hY2lkaXR5ID09PSAxKXtcblx0XHRcdFx0cmV0dXJuICcjMDAwMEZGJztcblx0XHRcdH1lbHNlIGlmKHIuYWNpZGl0eSA9PT0gLTEpe1xuXHRcdFx0XHRyZXR1cm4gJyNGRjAwMDAnO1xuXHRcdFx0fWVsc2UgaWYgKHIucG9sYXIpIHtcblx0XHRcdFx0cmV0dXJuICcjRkZGRkZGJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiAnIzc3MzMwMCc7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAnI0ZGRkZGRic7XG5cdH07XG5cdF8yLnJlbmRlciA9IGZ1bmN0aW9uKGdsLCBzcGVjcywgbm9Db2xvcikge1xuXHRcdGlmICh0aGlzLmVudGlyZS5wYXJ0aXRpb25zICYmIHRoaXMucGkgIT09IHRoaXMuZW50aXJlLnBhcnRpdGlvbnMubGFzdFJlbmRlcikge1xuXHRcdFx0bG9hZFBhcnRpdGlvbihnbCwgdGhpcy5lbnRpcmUucGFydGl0aW9uc1t0aGlzLnBpXSk7XG5cdFx0XHR0aGlzLmVudGlyZS5wYXJ0aXRpb25zLmxhc3RSZW5kZXIgPSB0aGlzLnBpO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMudmVydGV4SW5kZXhCdWZmZXIpIHtcblx0XHRcdHRoaXMudmVydGV4SW5kZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcblx0XHRcdGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMudmVydGV4SW5kZXhCdWZmZXIpO1xuXHRcdFx0Z2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbmV3IFVpbnQxNkFycmF5KHRoaXMuaW5kZXhlcyksIGdsLlNUQVRJQ19EUkFXKTtcblx0XHRcdHRoaXMudmVydGV4SW5kZXhCdWZmZXIuaXRlbVNpemUgPSAxO1xuXHRcdFx0dGhpcy52ZXJ0ZXhJbmRleEJ1ZmZlci5udW1JdGVtcyA9IHRoaXMuaW5kZXhlcy5sZW5ndGg7XG5cdFx0fVxuXHRcdC8vIGluZGV4ZXNcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLnZlcnRleEluZGV4QnVmZmVyKTtcblx0XHQvLyBjb2xvcnNcblx0XHRpZiAoIW5vQ29sb3IgJiYgc3BlY3MucHJvdGVpbnNfcmVzaWR1ZUNvbG9yICE9PSAncmFpbmJvdycpIHtcblx0XHRcdGdsLm1hdGVyaWFsLnNldERpZmZ1c2VDb2xvcihnbCwgdGhpcy5nZXRDb2xvcihzcGVjcykpO1xuXHRcdH1cblx0XHQvLyByZW5kZXJcblx0XHRnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCB0aGlzLnZlcnRleEluZGV4QnVmZmVyLm51bUl0ZW1zLCBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XG5cdH07XG5cblx0ZDMuUmliYm9uID0gZnVuY3Rpb24oY2hhaW4sIG9mZnNldCwgY2FydG9vbikge1xuXHRcdC8vIHJpYmJvbiBtZXNoZXMgYnVpbGQgZnJvbnQgdG8gYmFjaywgbm90IHNpZGUgdG8gc2lkZSwgc28ga2VlcCB0aGlzIGluXG5cdFx0Ly8gbWluZFxuXHRcdHZhciBsaW5lU2VnbWVudE51bSA9IGNoYWluWzBdLmxpbmVTZWdtZW50cy5sZW5ndGg7XG5cdFx0dmFyIGxpbmVTZWdtZW50TGVuZ3RoID0gY2hhaW5bMF0ubGluZVNlZ21lbnRzWzBdLmxlbmd0aDtcblx0XHR0aGlzLnBhcnRpdGlvbnMgPSBbXTtcblx0XHR0aGlzLnBhcnRpdGlvbnMubGFzdFJlbmRlciA9IDA7XG5cdFx0dmFyIGN1cnJlbnRQYXJ0aXRpb247XG5cdFx0dGhpcy5mcm9udCA9IG9mZnNldCA+IDA7XG5cdFx0Ly8gY2FsY3VsYXRlIHZlcnRleCBhbmQgbm9ybWFsIHBvaW50c1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBjaGFpbi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRpZiAoIWN1cnJlbnRQYXJ0aXRpb24gfHwgY3VycmVudFBhcnRpdGlvbi5wb3NpdGlvbkRhdGEubGVuZ3RoID4gNjUwMDApIHtcblx0XHRcdFx0aWYgKHRoaXMucGFydGl0aW9ucy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0aS0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24gPSB7XG5cdFx0XHRcdFx0Y291bnQgOiAwLFxuXHRcdFx0XHRcdHBvc2l0aW9uRGF0YSA6IFtdLFxuXHRcdFx0XHRcdG5vcm1hbERhdGEgOiBbXVxuXHRcdFx0XHR9O1xuXHRcdFx0XHR0aGlzLnBhcnRpdGlvbnMucHVzaChjdXJyZW50UGFydGl0aW9uKTtcblx0XHRcdH1cblx0XHRcdHZhciByZXNpZHVlID0gY2hhaW5baV07XG5cdFx0XHRjdXJyZW50UGFydGl0aW9uLmNvdW50Kys7XG5cdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCBsaW5lU2VnbWVudE51bTsgaisrKSB7XG5cdFx0XHRcdHZhciBsaW5lU2VnbWVudCA9IGNhcnRvb24gPyByZXNpZHVlLmxpbmVTZWdtZW50c0NhcnRvb25bal0gOiByZXNpZHVlLmxpbmVTZWdtZW50c1tqXTtcblx0XHRcdFx0dmFyIGRvU2lkZTEgPSBqID09PSAwO1xuXHRcdFx0XHR2YXIgZG9TaWRlMiA9IGZhbHNlO1xuXHRcdFx0XHRmb3IgKCB2YXIgayA9IDA7IGsgPCBsaW5lU2VnbWVudExlbmd0aDsgaysrKSB7XG5cdFx0XHRcdFx0dmFyIGEgPSBsaW5lU2VnbWVudFtrXTtcblx0XHRcdFx0XHQvLyBub3JtYWxzXG5cdFx0XHRcdFx0dmFyIGFib3ZlaSA9IGk7XG5cdFx0XHRcdFx0dmFyIGFib3ZlayA9IGsgKyAxO1xuXHRcdFx0XHRcdGlmIChpID09PSBjaGFpbi5sZW5ndGggLSAxICYmIGsgPT09IGxpbmVTZWdtZW50TGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRcdFx0YWJvdmVrLS07XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChrID09PSBsaW5lU2VnbWVudExlbmd0aCAtIDEpIHtcblx0XHRcdFx0XHRcdGFib3ZlaSsrO1xuXHRcdFx0XHRcdFx0YWJvdmVrID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFyIGFib3ZlID0gY2FydG9vbiA/IGNoYWluW2Fib3ZlaV0ubGluZVNlZ21lbnRzQ2FydG9vbltqXVthYm92ZWtdIDogY2hhaW5bYWJvdmVpXS5saW5lU2VnbWVudHNbal1bYWJvdmVrXTtcblx0XHRcdFx0XHR2YXIgbmVnYXRlID0gZmFsc2U7XG5cdFx0XHRcdFx0dmFyIG5leHRqID0gaiArIDE7XG5cdFx0XHRcdFx0aWYgKGogPT09IGxpbmVTZWdtZW50TnVtIC0gMSkge1xuXHRcdFx0XHRcdFx0bmV4dGogLT0gMjtcblx0XHRcdFx0XHRcdG5lZ2F0ZSA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciBzaWRlID0gY2FydG9vbiA/IHJlc2lkdWUubGluZVNlZ21lbnRzQ2FydG9vbltuZXh0al1ba10gOiByZXNpZHVlLmxpbmVTZWdtZW50c1tuZXh0al1ba107XG5cdFx0XHRcdFx0dmFyIHRvQWJvdmUgPSBbIGFib3ZlLnggLSBhLngsIGFib3ZlLnkgLSBhLnksIGFib3ZlLnogLSBhLnogXTtcblx0XHRcdFx0XHR2YXIgdG9TaWRlID0gWyBzaWRlLnggLSBhLngsIHNpZGUueSAtIGEueSwgc2lkZS56IC0gYS56IF07XG5cdFx0XHRcdFx0dmFyIG5vcm1hbCA9IHYzLmNyb3NzKHRvQWJvdmUsIHRvU2lkZSwgW10pO1xuXHRcdFx0XHRcdC8vIHBvc2l0aW9uc1xuXHRcdFx0XHRcdGlmIChrID09PSAwKSB7XG5cdFx0XHRcdFx0XHQvLyB0aXBcblx0XHRcdFx0XHRcdHYzLm5vcm1hbGl6ZSh0b0Fib3ZlKTtcblx0XHRcdFx0XHRcdHYzLnNjYWxlKHRvQWJvdmUsIC0xKTtcblx0XHRcdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24ubm9ybWFsRGF0YS5wdXNoKHRvQWJvdmVbMF0sIHRvQWJvdmVbMV0sIHRvQWJvdmVbMl0pO1xuXHRcdFx0XHRcdFx0Y3VycmVudFBhcnRpdGlvbi5wb3NpdGlvbkRhdGEucHVzaChhLngsIGEueSwgYS56KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGRvU2lkZTEgfHwgZG9TaWRlMikge1xuXHRcdFx0XHRcdFx0Ly8gc2lkZXNcblx0XHRcdFx0XHRcdHYzLm5vcm1hbGl6ZSh0b1NpZGUpO1xuXHRcdFx0XHRcdFx0djMuc2NhbGUodG9TaWRlLCAtMSk7XG5cdFx0XHRcdFx0XHRjdXJyZW50UGFydGl0aW9uLm5vcm1hbERhdGEucHVzaCh0b1NpZGVbMF0sIHRvU2lkZVsxXSwgdG9TaWRlWzJdKTtcblx0XHRcdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24ucG9zaXRpb25EYXRhLnB1c2goYS54LCBhLnksIGEueik7XG5cdFx0XHRcdFx0XHRpZiAoZG9TaWRlMSAmJiBrID09PSBsaW5lU2VnbWVudExlbmd0aCAtIDEpIHtcblx0XHRcdFx0XHRcdFx0ZG9TaWRlMSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRrID0gLTE7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdC8vIGNlbnRlciBzdHJpcHNcblx0XHRcdFx0XHRcdHYzLm5vcm1hbGl6ZShub3JtYWwpO1xuXHRcdFx0XHRcdFx0aWYgKG5lZ2F0ZSAmJiAhdGhpcy5mcm9udCB8fCAhbmVnYXRlICYmIHRoaXMuZnJvbnQpIHtcblx0XHRcdFx0XHRcdFx0djMuc2NhbGUobm9ybWFsLCAtMSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjdXJyZW50UGFydGl0aW9uLm5vcm1hbERhdGEucHVzaChub3JtYWxbMF0sIG5vcm1hbFsxXSwgbm9ybWFsWzJdKTtcblx0XHRcdFx0XHRcdHYzLnNjYWxlKG5vcm1hbCwgbS5hYnMob2Zmc2V0KSk7XG5cdFx0XHRcdFx0XHRjdXJyZW50UGFydGl0aW9uLnBvc2l0aW9uRGF0YS5wdXNoKGEueCArIG5vcm1hbFswXSwgYS55ICsgbm9ybWFsWzFdLCBhLnogKyBub3JtYWxbMl0pO1xuXHRcdFx0XHRcdFx0aWYgKGogPT09IGxpbmVTZWdtZW50TnVtIC0gMSAmJiBrID09PSBsaW5lU2VnbWVudExlbmd0aCAtIDEpIHtcblx0XHRcdFx0XHRcdFx0ZG9TaWRlMiA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdGsgPSAtMTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGsgPT09IC0xIHx8IGsgPT09IGxpbmVTZWdtZW50TGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRcdFx0Ly8gZW5kXG5cdFx0XHRcdFx0XHR2My5ub3JtYWxpemUodG9BYm92ZSk7XG5cdFx0XHRcdFx0XHRjdXJyZW50UGFydGl0aW9uLm5vcm1hbERhdGEucHVzaCh0b0Fib3ZlWzBdLCB0b0Fib3ZlWzFdLCB0b0Fib3ZlWzJdKTtcblx0XHRcdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24ucG9zaXRpb25EYXRhLnB1c2goYS54LCBhLnksIGEueik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdC8vIGJ1aWxkIG1lc2ggY29ubmVjdGl2aXR5XG5cdFx0Ly8gYWRkIDIgdG8gbGluZVNlZ21lbnROdW0gYW5kIGxpbmVTZWdtZW50TGVuZ3RoIHRvIGFjY291bnQgZm9yIHNpZGVzXG5cdFx0Ly8gYW5kIGVuZHNcblx0XHRsaW5lU2VnbWVudE51bSArPSAyO1xuXHRcdGxpbmVTZWdtZW50TGVuZ3RoICs9IDI7XG5cdFx0dGhpcy5zZWdtZW50cyA9IFtdO1xuXHRcdHRoaXMucGFydGl0aW9uU2VnbWVudHMgPSBbXTtcblx0XHRmb3IgKCB2YXIgbiA9IDAsIG5uID0gdGhpcy5wYXJ0aXRpb25zLmxlbmd0aDsgbiA8IG5uOyBuKyspIHtcblx0XHRcdHZhciBjdXJyZW50UGFydGl0aW9uID0gdGhpcy5wYXJ0aXRpb25zW25dO1xuXHRcdFx0dmFyIHBhcnRpdGlvblNlZ21lbnRJbmRleERhdGEgPSBbXTtcblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBjdXJyZW50UGFydGl0aW9uLmNvdW50IC0gMTsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIGNoYWluSW5kZXggPSBpO1xuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCBuOyBqKyspIHtcblx0XHRcdFx0XHRjaGFpbkluZGV4ICs9IHRoaXMucGFydGl0aW9uc1tqXS5jb3VudCAtIDE7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGMgPSBjaGFpbltjaGFpbkluZGV4XTtcblx0XHRcdFx0dmFyIHJlc2lkdWVJbmRleFN0YXJ0ID0gaSAqIGxpbmVTZWdtZW50TnVtICogbGluZVNlZ21lbnRMZW5ndGg7XG5cdFx0XHRcdHZhciBpbmRpdmlkdWFsSW5kZXhEYXRhID0gW107XG5cdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamogPSBsaW5lU2VnbWVudE51bSAtIDE7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIHNlZ21lbnRJbmRleFN0YXJ0ID0gcmVzaWR1ZUluZGV4U3RhcnQgKyBqICogbGluZVNlZ21lbnRMZW5ndGg7XG5cdFx0XHRcdFx0Zm9yICggdmFyIGsgPSAwOyBrIDwgbGluZVNlZ21lbnRMZW5ndGgtMTsgaysrKSB7XG5cdFx0XHRcdFx0XHR2YXIgbmV4dFJlcyA9IDE7XG5cdFx0XHRcdFx0XHRpZiAoaSA9PT0gaWkpIHtcblx0XHRcdFx0XHRcdFx0bmV4dFJlcyA9IDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR2YXIgYWRkID0gWyBzZWdtZW50SW5kZXhTdGFydCArIGssIHNlZ21lbnRJbmRleFN0YXJ0ICsgbGluZVNlZ21lbnRMZW5ndGggKyBrLCBzZWdtZW50SW5kZXhTdGFydCArIGxpbmVTZWdtZW50TGVuZ3RoICsgayArIG5leHRSZXMsIHNlZ21lbnRJbmRleFN0YXJ0ICsgaywgc2VnbWVudEluZGV4U3RhcnQgKyBrICsgbmV4dFJlcywgc2VnbWVudEluZGV4U3RhcnQgKyBsaW5lU2VnbWVudExlbmd0aCArIGsgKyBuZXh0UmVzIF07XG5cdFx0XHRcdFx0XHRpZiAoayAhPT0gbGluZVNlZ21lbnRMZW5ndGggLSAxKSB7XG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLmZyb250KSB7XG5cdFx0XHRcdFx0XHRcdFx0aW5kaXZpZHVhbEluZGV4RGF0YS5wdXNoKGFkZFswXSwgYWRkWzFdLCBhZGRbMl0sIGFkZFszXSwgYWRkWzVdLCBhZGRbNF0pO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGluZGl2aWR1YWxJbmRleERhdGEucHVzaChhZGRbMF0sIGFkZFsyXSwgYWRkWzFdLCBhZGRbM10sIGFkZFs0XSwgYWRkWzVdKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGsgPT09IGxpbmVTZWdtZW50TGVuZ3RoIC0gMiAmJiAhKGkgPT09IGN1cnJlbnRQYXJ0aXRpb24uY291bnQgLSAyICYmIG4gPT09IHRoaXMucGFydGl0aW9ucy5sZW5ndGggLSAxKSkge1xuXHRcdFx0XHRcdFx0XHQvLyBqdW1wIHRoZSBnYXAsIHRoZSBvdGhlciBtZXNoIHBvaW50cyB3aWxsIGJlXG5cdFx0XHRcdFx0XHRcdC8vIGNvdmVyZWQsXG5cdFx0XHRcdFx0XHRcdC8vIHNvIG5vIG5lZWQgdG8gZXhwbGljaXRseSBza2lwIHRoZW1cblx0XHRcdFx0XHRcdFx0dmFyIGp1bXAgPSBsaW5lU2VnbWVudE51bSAqIGxpbmVTZWdtZW50TGVuZ3RoIC0gaztcblx0XHRcdFx0XHRcdFx0YWRkWzJdICs9IGp1bXA7XG5cdFx0XHRcdFx0XHRcdGFkZFs0XSArPSBqdW1wO1xuXHRcdFx0XHRcdFx0XHRhZGRbNV0gKz0ganVtcDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICh0aGlzLmZyb250KSB7XG5cdFx0XHRcdFx0XHRcdHBhcnRpdGlvblNlZ21lbnRJbmRleERhdGEucHVzaChhZGRbMF0sIGFkZFsxXSwgYWRkWzJdLCBhZGRbM10sIGFkZFs1XSwgYWRkWzRdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHBhcnRpdGlvblNlZ21lbnRJbmRleERhdGEucHVzaChhZGRbMF0sIGFkZFsyXSwgYWRkWzFdLCBhZGRbM10sIGFkZFs0XSwgYWRkWzVdKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY2FydG9vbiAmJiBjLnNwbGl0KSB7XG5cdFx0XHRcdFx0dmFyIHNyID0gbmV3IFN1YlJpYmJvbih0aGlzLCB1bmRlZmluZWQsIHBhcnRpdGlvblNlZ21lbnRJbmRleERhdGEsIG4pO1xuXHRcdFx0XHRcdHNyLmhlbGl4ID0gYy5oZWxpeDtcblx0XHRcdFx0XHRzci5zaGVldCA9IGMuc2hlZXQ7XG5cdFx0XHRcdFx0dGhpcy5wYXJ0aXRpb25TZWdtZW50cy5wdXNoKHNyKTtcblx0XHRcdFx0XHRwYXJ0aXRpb25TZWdtZW50SW5kZXhEYXRhID0gW107XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLnNlZ21lbnRzLnB1c2gobmV3IFN1YlJpYmJvbih0aGlzLCBjLm5hbWUsIGluZGl2aWR1YWxJbmRleERhdGEsIG4pKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHNyID0gbmV3IFN1YlJpYmJvbih0aGlzLCB1bmRlZmluZWQsIHBhcnRpdGlvblNlZ21lbnRJbmRleERhdGEsIG4pO1xuXHRcdFx0c3IuaGVsaXggPSBjLmhlbGl4O1xuXHRcdFx0c3Iuc2hlZXQgPSBjLnNoZWV0O1xuXHRcdFx0dGhpcy5wYXJ0aXRpb25TZWdtZW50cy5wdXNoKHNyKTtcblx0XHR9XG5cdFx0dGhpcy5zdG9yZURhdGEodGhpcy5wYXJ0aXRpb25zWzBdLnBvc2l0aW9uRGF0YSwgdGhpcy5wYXJ0aXRpb25zWzBdLm5vcm1hbERhdGEpO1xuXHRcdGlmICh0aGlzLnBhcnRpdGlvbnMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHQvLyBjbGVhciBwYXJ0aXRpb25zIHRvIHJlZHVjZSBvdmVyaGVhZFxuXHRcdFx0dGhpcy5wYXJ0aXRpb25zID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fTtcblx0dmFyIF8gPSBkMy5SaWJib24ucHJvdG90eXBlID0gbmV3IGQzLl9NZXNoKCk7XG5cdF8ucmVuZGVyID0gZnVuY3Rpb24oZ2wsIHNwZWNzKSB7XG5cdFx0dGhpcy5iaW5kQnVmZmVycyhnbCk7XG5cdFx0Ly8gY29sb3JzXG5cdFx0dmFyIGNvbG9yID0gc3BlY3MubWFjcm9fY29sb3JCeUNoYWluID8gdGhpcy5jaGFpbkNvbG9yIDogdW5kZWZpbmVkO1xuXHRcdGlmICghY29sb3IpIHtcblx0XHRcdGNvbG9yID0gdGhpcy5mcm9udCA/IHNwZWNzLnByb3RlaW5zX3ByaW1hcnlDb2xvciA6IHNwZWNzLnByb3RlaW5zX3NlY29uZGFyeUNvbG9yO1xuXHRcdH1cblx0XHRnbC5tYXRlcmlhbC5zZXREaWZmdXNlQ29sb3IoZ2wsIGNvbG9yKTtcblx0XHRcdFxuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSB0aGlzLnBhcnRpdGlvblNlZ21lbnRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHRoaXMucGFydGl0aW9uU2VnbWVudHNbaV0ucmVuZGVyKGdsLCBzcGVjcywgIXNwZWNzLnByb3RlaW5zX3JpYmJvbkNhcnRvb25pemUpO1xuXHRcdH1cblx0fTtcblxufSkoUkVTSURVRSwgZDMsIG0sIHYzKTtcblxuKGZ1bmN0aW9uKG1hdGgsIGQzLCB2MywgbTQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLkxpZ2h0ID0gZnVuY3Rpb24oZGlmZnVzZUNvbG9yLCBzcGVjdWxhckNvbG9yLCBkaXJlY3Rpb24pIHtcblx0XHR0aGlzLmNhbWVyYSA9IG5ldyBkMy5DYW1lcmEoKTtcblx0XHR0aGlzLmxpZ2h0U2NlbmUoZGlmZnVzZUNvbG9yLCBzcGVjdWxhckNvbG9yLCBkaXJlY3Rpb24pO1xuXHR9O1xuXHR2YXIgXyA9IGQzLkxpZ2h0LnByb3RvdHlwZTtcblx0Xy5saWdodFNjZW5lID0gZnVuY3Rpb24oZGlmZnVzZUNvbG9yLCBzcGVjdWxhckNvbG9yLCBkaXJlY3Rpb24pIHtcblx0XHR0aGlzLmRpZmZ1c2VSR0IgPSBtYXRoLmdldFJHQihkaWZmdXNlQ29sb3IsIDEpO1xuXHRcdHRoaXMuc3BlY3VsYXJSR0IgPSBtYXRoLmdldFJHQihzcGVjdWxhckNvbG9yLCAxKTtcblx0XHR0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcblx0XHR0aGlzLnVwZGF0ZVZpZXcoKTtcblx0fTtcblx0Xy51cGRhdGVWaWV3ID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGxpZ2h0RGlyID0gdjMubm9ybWFsaXplKHRoaXMuZGlyZWN0aW9uLCBbXSk7XG5cdFx0dmFyIGV5ZVBvcyA9IHYzLnNjYWxlKGxpZ2h0RGlyLCAodGhpcy5jYW1lcmEubmVhciAtIHRoaXMuY2FtZXJhLmZhcikgLyAyIC0gdGhpcy5jYW1lcmEubmVhciwgW10pO1xuXHRcdHZhciB1cCA9IHYzLmVxdWFsKGxpZ2h0RGlyLCBbMCwgMSwgMF0pID8gWzAsIDAsIDFdIDogWzAsIDEsIDBdO1xuXHRcdG00Lmxvb2tBdChleWVQb3MsIFswLCAwLCAwXSwgdXAsIHRoaXMuY2FtZXJhLnZpZXdNYXRyaXgpO1xuXHRcdHRoaXMuY2FtZXJhLm9ydGhvZ29uYWxQcm9qZWN0aW9uTWF0cml4KCk7XG5cdH07XG5cbn0pKG1hdGgsIGQzLCB2MywgbTQpO1xuXG4oZnVuY3Rpb24oZDMsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLkxpbmUgPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLnN0b3JlRGF0YShbIDAsIDAsIDAsIDAsIDEsIDAgXSwgWyAwLCAwLCAwLCAwLCAwLCAwIF0pO1xuXHR9O1xuXHRkMy5MaW5lLnByb3RvdHlwZSA9IG5ldyBkMy5fTWVzaCgpO1xuXG59KShkMyk7XG5cbihmdW5jdGlvbihtYXRoLCBkMywgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDMuTWF0ZXJpYWwgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF8gPSBkMy5NYXRlcmlhbC5wcm90b3R5cGU7XG5cdF8uc2V0VGVtcENvbG9ycyA9IGZ1bmN0aW9uKGdsLCBhbWJpZW50Q29sb3IsIGRpZmZ1c2VDb2xvciwgc3BlY3VsYXJDb2xvciwgc2hpbmluZXNzKSB7XG5cdFx0aWYgKGFtYmllbnRDb2xvcikge1xuXHRcdFx0Z2wuc2hhZGVyLnNldE1hdGVyaWFsQW1iaWVudENvbG9yKGdsLCBtYXRoLmdldFJHQihhbWJpZW50Q29sb3IsIDEpKTtcblx0XHR9XG5cdFx0aWYgKGRpZmZ1c2VDb2xvcikge1xuXHRcdFx0Z2wuc2hhZGVyLnNldE1hdGVyaWFsRGlmZnVzZUNvbG9yKGdsLCBtYXRoLmdldFJHQihkaWZmdXNlQ29sb3IsIDEpKTtcblx0XHR9XG5cdFx0aWYgKHNwZWN1bGFyQ29sb3IpIHtcblx0XHRcdGdsLnNoYWRlci5zZXRNYXRlcmlhbFNwZWN1bGFyQ29sb3IoZ2wsIG1hdGguZ2V0UkdCKHNwZWN1bGFyQ29sb3IsIDEpKTtcblx0XHR9XG5cdFx0Z2wuc2hhZGVyLnNldE1hdGVyaWFsU2hpbmluZXNzKGdsLCBzaGluaW5lc3MpO1xuXHRcdGdsLnNoYWRlci5zZXRNYXRlcmlhbEFscGhhKGdsLCAxKTtcblx0fTtcblx0Xy5zZXREaWZmdXNlQ29sb3IgPSBmdW5jdGlvbihnbCwgZGlmZnVzZUNvbG9yKSB7XG5cdFx0Z2wuc2hhZGVyLnNldE1hdGVyaWFsRGlmZnVzZUNvbG9yKGdsLCBtYXRoLmdldFJHQihkaWZmdXNlQ29sb3IsIDEpKTtcblx0fTtcblx0Xy5zZXRBbHBoYSA9IGZ1bmN0aW9uKGdsLCBhbHBoYSkge1xuXHRcdGdsLnNoYWRlci5zZXRNYXRlcmlhbEFscGhhKGdsLCBhbHBoYSk7XG5cdH07XG5cbn0pKG1hdGgsIGQzKTtcblxuKGZ1bmN0aW9uKGQzLCBtYXRoLCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDMuUGlja2VyID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfID0gZDMuUGlja2VyLnByb3RvdHlwZTtcblxuXHRfLmluaXQgPSBmdW5jdGlvbihnbCkge1xuXHRcdC8vIHNldHVwIGZvciBwaWNraW5nIHN5c3RlbVxuXHRcdHRoaXMuZnJhbWVidWZmZXIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXG5cdFx0Ly8gc2V0IHBpY2sgdGV4dHVyZVxuXHRcdHZhciB0ZXh0dXJlMkQgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG5cdFx0dmFyIHJlbmRlcmJ1ZmZlciA9IGdsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuXG5cdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZTJEKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLk5FQVJFU1QpO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLkNMQU1QX1RPX0VER0UpO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuXG5cdFx0Z2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIHJlbmRlcmJ1ZmZlcik7XG5cblx0XHQvLyBzZXQgZnJhbWVidWZmZXIgYW5kIGJpbmQgdGhlIHRleHR1cmUgYW5kIHJlbmRlcmJ1ZmZlclxuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5mcmFtZWJ1ZmZlcik7XG5cdFx0Z2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5URVhUVVJFXzJELCB0ZXh0dXJlMkQsIDApO1xuXHRcdGdsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBnbC5ERVBUSF9BVFRBQ0hNRU5ULCBnbC5SRU5ERVJCVUZGRVIsIHJlbmRlcmJ1ZmZlcik7XG5cblx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcblx0XHRnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgbnVsbCk7XG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcblx0fTtcblxuXHRfLnNldERpbWVuc2lvbiA9IGZ1bmN0aW9uKGdsLCB3aWR0aCwgaGVpZ2h0KSB7XG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB0aGlzLmZyYW1lYnVmZmVyKTtcblxuXHRcdC8vIGdldCBiaW5kZWQgZGVwdGggYXR0YWNobWVudCByZW5kZXJidWZmZXJcblx0XHR2YXIgcmVuZGVyYnVmZmVyID0gZ2wuZ2V0RnJhbWVidWZmZXJBdHRhY2htZW50UGFyYW1ldGVyKGdsLkZSQU1FQlVGRkVSLCBnbC5ERVBUSF9BVFRBQ0hNRU5ULCBnbC5GUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX09CSkVDVF9OQU1FKTtcblx0XHRpZiAoZ2wuaXNSZW5kZXJidWZmZXIocmVuZGVyYnVmZmVyKSkge1xuXHRcdFx0Ly8gc2V0IHJlbmRlcmJ1ZmZlciBkaW1lbnNpb25cblx0XHRcdGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIpO1xuXHRcdFx0Z2wucmVuZGVyYnVmZmVyU3RvcmFnZShnbC5SRU5ERVJCVUZGRVIsIGdsLkRFUFRIX0NPTVBPTkVOVDE2LCB3aWR0aCwgaGVpZ2h0KTtcblx0XHRcdGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCBudWxsKTtcblx0XHR9XG5cblx0XHQvLyBnZXQgYmluZGVkIGNvbG9yIGF0dGFjaG1lbnQgdGV4dHVyZSAyZFxuXHRcdHZhciB0ZXh0dXJlMkQgPSBnbC5nZXRGcmFtZWJ1ZmZlckF0dGFjaG1lbnRQYXJhbWV0ZXIoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5GUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX09CSkVDVF9OQU1FKTtcblx0XHRpZiAoZ2wuaXNUZXh0dXJlKHRleHR1cmUyRCkpIHtcblx0XHRcdC8vIHNldCB0ZXh0dXJlIGRpbWVuc2lvblxuXHRcdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZTJEKTtcblx0XHRcdGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgd2lkdGgsIGhlaWdodCwgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgbnVsbCk7XG5cdFx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcblx0XHR9XG5cblx0XHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuXHR9O1xuXG59KShkMywgbWF0aCwgZG9jdW1lbnQpO1xuXG4oZnVuY3Rpb24oZDMsIG0sIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0ZDMuUGlsbCA9IGZ1bmN0aW9uKHJhZGl1cywgaGVpZ2h0LCBsYXRpdHVkZUJhbmRzLCBsb25naXR1ZGVCYW5kcykge1xuXG5cdFx0dmFyIGNhcEhlaWdodFNjYWxlID0gMTtcblx0XHR2YXIgY2FwRGlhbWV0ZXIgPSAyICogcmFkaXVzO1xuXG5cdFx0aGVpZ2h0IC09IGNhcERpYW1ldGVyO1xuXG5cdFx0aWYgKGhlaWdodCA8IDApIHtcblx0XHRcdGNhcEhlaWdodFNjYWxlID0gMDtcblx0XHRcdGhlaWdodCArPSBjYXBEaWFtZXRlcjtcblx0XHR9IGVsc2UgaWYgKGhlaWdodCA8IGNhcERpYW1ldGVyKSB7XG5cdFx0XHRjYXBIZWlnaHRTY2FsZSA9IGhlaWdodCAvIGNhcERpYW1ldGVyO1xuXHRcdFx0aGVpZ2h0ID0gY2FwRGlhbWV0ZXI7XG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIGxhdGl0dWRlIGFuZCBsb2dpbnR1ZGUgYmFuZCBmb3IgdHdvIGNhcHMuXG5cdFx0Ly8gbGF0aXR1ZGVCYW5kcyAqPSAyO1xuXHRcdC8vIGxvbmdpdHVkZUJhbmRzICo9IDI7XG5cblx0XHR2YXIgcG9zaXRpb25EYXRhID0gW107XG5cdFx0dmFyIG5vcm1hbERhdGEgPSBbXTtcblx0XHRmb3IgKCB2YXIgbGF0TnVtYmVyID0gMDsgbGF0TnVtYmVyIDw9IGxhdGl0dWRlQmFuZHM7IGxhdE51bWJlcisrKSB7XG5cdFx0XHR2YXIgdGhldGEgPSBsYXROdW1iZXIgKiBtLlBJIC8gbGF0aXR1ZGVCYW5kcztcblx0XHRcdHZhciBzaW5UaGV0YSA9IG0uc2luKHRoZXRhKTtcblx0XHRcdHZhciBjb3NUaGV0YSA9IG0uY29zKHRoZXRhKSAqIGNhcEhlaWdodFNjYWxlO1xuXG5cdFx0XHRmb3IgKCB2YXIgbG9uZ051bWJlciA9IDA7IGxvbmdOdW1iZXIgPD0gbG9uZ2l0dWRlQmFuZHM7IGxvbmdOdW1iZXIrKykge1xuXHRcdFx0XHR2YXIgcGhpID0gbG9uZ051bWJlciAqIDIgKiBtLlBJIC8gbG9uZ2l0dWRlQmFuZHM7XG5cdFx0XHRcdHZhciBzaW5QaGkgPSBtLnNpbihwaGkpO1xuXHRcdFx0XHR2YXIgY29zUGhpID0gbS5jb3MocGhpKTtcblxuXHRcdFx0XHR2YXIgeCA9IGNvc1BoaSAqIHNpblRoZXRhO1xuXHRcdFx0XHR2YXIgeSA9IGNvc1RoZXRhO1xuXHRcdFx0XHR2YXIgeiA9IHNpblBoaSAqIHNpblRoZXRhO1xuXG5cdFx0XHRcdG5vcm1hbERhdGEucHVzaCh4LCB5LCB6KTtcblx0XHRcdFx0cG9zaXRpb25EYXRhLnB1c2gocmFkaXVzICogeCwgcmFkaXVzICogeSArIChsYXROdW1iZXIgPCBsYXRpdHVkZUJhbmRzIC8gMiA/IGhlaWdodCA6IDApLCByYWRpdXMgKiB6KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgaW5kZXhEYXRhID0gW107XG5cdFx0bG9uZ2l0dWRlQmFuZHMgKz0gMTtcblx0XHRmb3IgKCB2YXIgbGF0TnVtYmVyID0gMDsgbGF0TnVtYmVyIDwgbGF0aXR1ZGVCYW5kczsgbGF0TnVtYmVyKyspIHtcblx0XHRcdGZvciAoIHZhciBsb25nTnVtYmVyID0gMDsgbG9uZ051bWJlciA8IGxvbmdpdHVkZUJhbmRzOyBsb25nTnVtYmVyKyspIHtcblx0XHRcdFx0dmFyIGZpcnN0ID0gKGxhdE51bWJlciAqIGxvbmdpdHVkZUJhbmRzKSArIChsb25nTnVtYmVyICUgbG9uZ2l0dWRlQmFuZHMpO1xuXHRcdFx0XHR2YXIgc2Vjb25kID0gZmlyc3QgKyBsb25naXR1ZGVCYW5kcztcblx0XHRcdFx0aW5kZXhEYXRhLnB1c2goZmlyc3QsIGZpcnN0ICsgMSwgc2Vjb25kKTtcblx0XHRcdFx0aWYgKGxvbmdOdW1iZXIgPCBsb25naXR1ZGVCYW5kcyAtIDEpIHtcblx0XHRcdFx0XHRpbmRleERhdGEucHVzaChzZWNvbmQsIGZpcnN0ICsgMSwgc2Vjb25kICsgMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnN0b3JlRGF0YShwb3NpdGlvbkRhdGEsIG5vcm1hbERhdGEsIGluZGV4RGF0YSk7XG5cdH07XG5cdGQzLlBpbGwucHJvdG90eXBlID0gbmV3IGQzLl9NZXNoKCk7XG5cbn0pKGQzLCBtKTtcblxuKGZ1bmN0aW9uKGV4dGVuc2lvbnMsIFJFU0lEVUUsIGQzLCBtLCBtNCwgdjMsIG1hdGgsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRmdW5jdGlvbiBjcmVhdGVEdW1teVJlc2lkdWUoeCwgeSwgeikge1xuXHRcdHZhciBkdW1teVJlcyA9IG5ldyBSZXNpZHVlKC0xKTtcblx0XHRkdW1teVJlcy5jcDEgPSBkdW1teVJlcy5jcDIgPSBuZXcgQXRvbSgnJywgeCwgeSwgeik7XG5cdFx0cmV0dXJuIGR1bW15UmVzO1xuXHR9XG5cdFxuXHRmdW5jdGlvbiBQaXBlKGExLCBhMikge1xuXHRcdHRoaXMuYTEgPSBhMTtcblx0XHR0aGlzLmEyID0gYTI7XG5cdH07XG5cdHZhciBfID0gUGlwZS5wcm90b3R5cGU7XG5cdF8ucmVuZGVyID0gZnVuY3Rpb24oZ2wsIHNwZWNzKSB7XG5cdFx0dmFyIHAxID0gdGhpcy5hMTtcblx0XHR2YXIgcDIgPSB0aGlzLmEyO1xuXHRcdHZhciBoZWlnaHQgPSAxLjAwMSAqIHAxLmRpc3RhbmNlM0QocDIpO1xuXHRcdHZhciByYWRpdXNTY2FsZSA9IHNwZWNzLnByb3RlaW5zX2N5bGluZGVySGVsaXhEaWFtZXRlciAvIDI7XG5cdFx0dmFyIHNjYWxlVmVjdG9yID0gWyByYWRpdXNTY2FsZSwgaGVpZ2h0LCByYWRpdXNTY2FsZSBdO1xuXHRcdHZhciB0cmFuc2Zvcm0gPSBtNC50cmFuc2xhdGUobTQuaWRlbnRpdHkoKSwgWyBwMS54LCBwMS55LCBwMS56IF0pO1xuXHRcdHZhciB5ID0gWyAwLCAxLCAwIF07XG5cdFx0dmFyIGFuZyA9IDA7XG5cdFx0dmFyIGF4aXM7XG5cdFx0aWYgKHAxLnggPT09IHAyLnggJiYgcDEueiA9PT0gcDIueikge1xuXHRcdFx0YXhpcyA9IFsgMCwgMCwgMSBdO1xuXHRcdFx0aWYgKHAyLnkgPCBwMS55KSB7XG5cdFx0XHRcdGFuZyA9IG0uUEk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBhMmIgPSBbIHAyLnggLSBwMS54LCBwMi55IC0gcDEueSwgcDIueiAtIHAxLnogXTtcblx0XHRcdGFuZyA9IGV4dGVuc2lvbnMudmVjM0FuZ2xlRnJvbSh5LCBhMmIpO1xuXHRcdFx0YXhpcyA9IHYzLmNyb3NzKHksIGEyYiwgW10pO1xuXHRcdH1cblxuXHRcdGlmIChhbmcgIT09IDApIHtcblx0XHRcdG00LnJvdGF0ZSh0cmFuc2Zvcm0sIGFuZywgYXhpcyk7XG5cdFx0fVxuXHRcdG00LnNjYWxlKHRyYW5zZm9ybSwgc2NhbGVWZWN0b3IpO1xuXHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCwgdHJhbnNmb3JtKTtcblx0XHRnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCBnbC5jeWxpbmRlckNsb3NlZEJ1ZmZlci52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5udW1JdGVtcyk7XG5cdH07XG5cblx0ZnVuY3Rpb24gUGxhbmsoYTEsIGEyLCB2eCkge1xuXHRcdHRoaXMuYTEgPSBhMTtcblx0XHR0aGlzLmEyID0gYTI7XG5cdFx0dGhpcy52eCA9IHZ4O1xuXHR9O1xuXHR2YXIgXyA9IFBsYW5rLnByb3RvdHlwZTtcblx0Xy5yZW5kZXIgPSBmdW5jdGlvbihnbCwgc3BlY3MpIHtcblx0XHRpZiAodGhpcy5zcGVjcykge1xuXHRcdFx0c3BlY3MgPSB0aGlzLnNwZWNzO1xuXHRcdH1cblx0XHQvLyB0aGlzIGlzIHRoZSBlbG9uZ2F0aW9uIHZlY3RvciBmb3IgdGhlIHBsYW5rXG5cdFx0dmFyIGhlaWdodCA9IDEuMDAxICogdGhpcy5hMS5kaXN0YW5jZTNEKHRoaXMuYTIpO1xuXG5cdFx0dmFyIGRpcnkgPSBbIHRoaXMuYTIueCAtIHRoaXMuYTEueCwgdGhpcy5hMi55IC0gdGhpcy5hMS55LCB0aGlzLmEyLnogLSB0aGlzLmExLnogXTtcblx0XHR2YXIgZGlyeiA9IHYzLmNyb3NzKGRpcnksIHRoaXMudngsIFtdKTtcblx0XHR2YXIgZGlyeCA9IHYzLmNyb3NzKGRpcnosIGRpcnksIFtdKTtcblxuXHRcdHYzLm5vcm1hbGl6ZShkaXJ4KTtcblx0XHR2My5ub3JtYWxpemUoZGlyeSk7XG5cdFx0djMubm9ybWFsaXplKGRpcnopO1xuXG5cdFx0dmFyIHRyYW5zZm9ybSA9IFtcblx0XHRcdGRpcnhbMF0sIGRpcnhbMV0sIGRpcnhbMl0sIDAsXG5cdFx0XHRkaXJ5WzBdLCBkaXJ5WzFdLCBkaXJ5WzJdLCAwLFxuXHRcdFx0ZGlyelswXSwgZGlyelsxXSwgZGlyelsyXSwgMCxcblx0XHRcdHRoaXMuYTEueCwgdGhpcy5hMS55LCB0aGlzLmExLnosIDFcblx0XHRdO1xuXG5cdFx0dmFyIHNjYWxlVmVjdG9yID0gWyBzcGVjcy5wcm90ZWluc19wbGFua1NoZWV0V2lkdGgsIGhlaWdodCwgc3BlY3MucHJvdGVpbnNfdHViZVRoaWNrbmVzc107XG5cdFx0bTQuc2NhbGUodHJhbnNmb3JtLCBzY2FsZVZlY3Rvcik7XG5cdFx0Z2wuc2hhZGVyLnNldE1hdHJpeFVuaWZvcm1zKGdsLCB0cmFuc2Zvcm0pO1xuXHRcdGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVfU1RSSVAsIDAsIGdsLmJveEJ1ZmZlci52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5udW1JdGVtcyk7XG5cdH07XG5cblxuXHRkMy5QaXBlUGxhbmsgPSBmdW5jdGlvbihycywgc3BlY3MpIHtcblx0XHR0aGlzLnR1YmVzID0gW107XG5cdFx0dGhpcy5oZWxpeEN5bGluZGVycyA9IFtdO1xuXHRcdHRoaXMuc2hlZXRQbGFua3MgPSBbXTtcblx0XHR0aGlzLmNoYWluQ29sb3IgPSBycy5jaGFpbkNvbG9yO1xuXG5cdFx0dmFyIGNoYWluTm9TUyA9IFtdO1xuXHRcdHZhciBub1NTUmVzaWR1ZXMgPSBbXTtcblx0XHR2YXIgaGVsaXhSZXNpZHVlcyA9IFtdO1xuXHRcdHZhciBzaGVldFJlc2lkdWVzID0gW107XG5cblx0XHQvLyB0aGUgZmlyc3QgcmVzaWR1ZSBqdXN0IGEgZHVtbXkgcmVzaWR1ZS5cblx0XHQvLyBzbyBhdCBiZWdpbm5pbmcsIHRoZSBzZWNvbmRhcnkgc3RydWN0dXJlIG9mIHNlY29uZCByZXNpZHVlIG11c3QgYmUgY2hlY2tcblx0XHRpZihycy5sZW5ndGggPiAxKSB7XG5cdFx0XHR2YXIgcjAgPSByc1swXTtcblx0XHRcdHZhciByMSA9IHJzWzFdO1xuXHRcdFx0aWYgKHIxLmhlbGl4KSB7XG5cdFx0XHRcdGhlbGl4UmVzaWR1ZXMucHVzaChyMCk7XG5cdFx0XHR9IGVsc2UgaWYocjEuc2hlZXQpIHtcblx0XHRcdFx0c2hlZXRSZXNpZHVlcy5wdXNoKHIwKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG5vU1NSZXNpZHVlcy5wdXNoKHIwKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBpdGVyYXRlIHJlc2lkdWVzXG5cdFx0Zm9yICggdmFyIGkgPSAxLCBpaSA9IHJzLmxlbmd0aCAtIDE7IGkgPD0gaWk7IGkrKykge1xuXHRcdFx0dmFyIHJlc2lkdWUgPSByc1tpXTtcblx0XHRcdGlmKHJlc2lkdWUuaGVsaXgpIHtcblx0XHRcdFx0aGVsaXhSZXNpZHVlcy5wdXNoKHJlc2lkdWUpO1xuXG5cdFx0XHRcdGlmKHJlc2lkdWUuYXJyb3cpIHtcblx0XHRcdFx0XHR2YXIgc3RhcnRQb2ludCA9IHYzLmNyZWF0ZSgpO1xuXHRcdFx0XHRcdHZhciBlbmRQb2ludCA9IHYzLmNyZWF0ZSgpO1xuXG5cdFx0XHRcdFx0aWYgKGhlbGl4UmVzaWR1ZXMubGVuZ3RoID09IDIpIHtcblx0XHRcdFx0XHRcdC8vIFBEQiBsaWtlIDJQRUMgaGF2ZSBoZWxpeCB3aGljaCBpcyBqdXN0IGhhdmUgMiByZXNpZHVlcyBpbiBpdC5cblx0XHRcdFx0XHRcdHN0YXJ0UG9pbnQgPSBbaGVsaXhSZXNpZHVlc1swXS5jcDEueCwgaGVsaXhSZXNpZHVlc1swXS5jcDEueSwgaGVsaXhSZXNpZHVlc1swXS5jcDEuel07XG5cdFx0XHRcdFx0XHRlbmRQb2ludCA9IFtoZWxpeFJlc2lkdWVzWzFdLmNwMS54LCBoZWxpeFJlc2lkdWVzWzFdLmNwMS55LCBoZWxpeFJlc2lkdWVzWzFdLmNwMS56XTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQvLyBUbyBnZXQgaGVsaXggYXhpcywgd2UgbmVlZCBhdCBsZWFzdCA0IHJlc2lkdWVzLlxuXHRcdFx0XHRcdFx0Ly8gaWYgcmVzaWR1ZXMgbGVuZ2h0IGlzIDMsIHRoZW4gb25lIHJlc2lkdWUgbmVlZCB0byBiZSBhZGRlZC5cblx0XHRcdFx0XHRcdC8vIFRoZSBhZGRlZCByZXNpZHVlIGlzIHJlc2lkdWUgYmVmb3JlIGhlbGl4LlxuXHRcdFx0XHRcdFx0aWYoaGVsaXhSZXNpZHVlcy5sZW5ndGggPT0gMykge1xuXHRcdFx0XHRcdFx0XHRoZWxpeFJlc2lkdWVzLnVuc2hpZnQocnNbbS5tYXgoaSAtIDMsIDApXSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHZhciBQcyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIFZzID0gW107XG5cblx0XHRcdFx0XHRcdGZvciAodmFyIGggPSAxLCBoaCA9IGhlbGl4UmVzaWR1ZXMubGVuZ3RoIC0gMTsgaCA8IGhoOyBoKyspIHtcblx0XHRcdFx0XHRcdFx0dmFyIGNhaSA9IFtoZWxpeFJlc2lkdWVzW2hdLmNwMS54LCBoZWxpeFJlc2lkdWVzW2hdLmNwMS55LCBoZWxpeFJlc2lkdWVzW2hdLmNwMS56XTtcblx0XHRcdFx0XHRcdFx0dmFyIEEgPSBbaGVsaXhSZXNpZHVlc1toLTFdLmNwMS54LCBoZWxpeFJlc2lkdWVzW2gtMV0uY3AxLnksIGhlbGl4UmVzaWR1ZXNbaC0xXS5jcDEuel07XG5cdFx0XHRcdFx0XHRcdHZhciBCID0gW2hlbGl4UmVzaWR1ZXNbaCsxXS5jcDEueCwgaGVsaXhSZXNpZHVlc1toKzFdLmNwMS55LCBoZWxpeFJlc2lkdWVzW2grMV0uY3AxLnpdO1xuXG5cdFx0XHRcdFx0XHRcdHYzLnN1YnRyYWN0KEEsIGNhaSk7XG5cdFx0XHRcdFx0XHRcdHYzLnN1YnRyYWN0KEIsIGNhaSk7XG5cblx0XHRcdFx0XHRcdFx0dmFyIEFsID0gdjMuc2NhbGUoQSwgdjMubGVuZ3RoKEIpLCBbXSk7XG5cdFx0XHRcdFx0XHRcdHZhciBCbCA9IHYzLnNjYWxlKEIsIHYzLmxlbmd0aChBKSwgW10pO1xuXG5cdFx0XHRcdFx0XHRcdHZhciBWID0gdjMubm9ybWFsaXplKHYzLmFkZChBbCwgQmwsIFtdKSk7XG5cblx0XHRcdFx0XHRcdFx0UHMucHVzaChjYWkpO1xuXHRcdFx0XHRcdFx0XHRWcy5wdXNoKFYpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR2YXIgYXhlcyA9IFtdO1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaCA9IDAsIGhoID0gUHMubGVuZ3RoIC0gMTsgaCA8IGhoOyBoKyspIHtcblx0XHRcdFx0XHRcdFx0dmFyIFAxID0gUHNbaF07XG5cdFx0XHRcdFx0XHRcdHZhciBWMSA9IFZzW2hdO1xuXHRcdFx0XHRcdFx0XHR2YXIgUDIgPSBQc1toKzFdO1xuXHRcdFx0XHRcdFx0XHR2YXIgVjIgPSBWc1toKzFdO1xuXG5cdFx0XHRcdFx0XHRcdHZhciBIID0gdjMubm9ybWFsaXplKHYzLmNyb3NzKFYxLCBWMiwgW10pKTtcblxuXHRcdFx0XHRcdFx0XHR2YXIgUDJzdWJQMSA9IHYzLnN1YnRyYWN0KFAyLCBQMSwgW10pO1xuXHRcdFx0XHRcdFx0XHR2YXIgZCA9IHYzLmRvdChQMnN1YlAxLCBIKTtcblxuXHRcdFx0XHRcdFx0XHR2YXIgZEggPSB2My5zY2FsZShILCBkLCBbXSk7XG5cblx0XHRcdFx0XHRcdFx0dmFyIGRIbCA9IHYzLmxlbmd0aChkSCk7XG5cdFx0XHRcdFx0XHRcdHZhciBQMnN1YlAxbCA9IHYzLmxlbmd0aChQMnN1YlAxKTtcblxuXHRcdFx0XHRcdFx0XHR2YXIgciA9IC0oZEhsICogZEhsIC0gUDJzdWJQMWwgKiBQMnN1YlAxbCkgLyAoMiAqIHYzLmRvdCh2My5zdWJ0cmFjdChQMSwgUDIsIFtdKSwgVjIpKTtcblxuXHRcdFx0XHRcdFx0XHR2YXIgSDEgPSB2My5hZGQoUDEsIHYzLnNjYWxlKFYxLCByLCBbXSksIFtdKTtcblx0XHRcdFx0XHRcdFx0dmFyIEgyID0gdjMuYWRkKFAyLCB2My5zY2FsZShWMiwgciwgW10pLCBbXSk7XG5cblx0XHRcdFx0XHRcdFx0YXhlcy5wdXNoKFtIMSwgSDJdKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dmFyIGZpcnN0UG9pbnQgPSBheGVzWzBdWzBdO1xuXHRcdFx0XHRcdFx0dmFyIHNlY29uZFBvaW50ID0gYXhlc1swXVsxXTtcblx0XHRcdFx0XHRcdHZhciBzZWNvbmRUb0ZpcnN0ID0gdjMuc3VidHJhY3QoZmlyc3RQb2ludCwgc2Vjb25kUG9pbnQsIFtdKTtcblx0XHRcdFx0XHRcdHYzLmFkZChmaXJzdFBvaW50LCBzZWNvbmRUb0ZpcnN0LCBzdGFydFBvaW50KTtcblxuXHRcdFx0XHRcdFx0dmFyIGZpcnN0UG9pbnQgPSBheGVzW2F4ZXMubGVuZ3RoLTFdWzFdO1xuXHRcdFx0XHRcdFx0dmFyIHNlY29uZFBvaW50ID0gYXhlc1theGVzLmxlbmd0aC0xXVswXTtcblx0XHRcdFx0XHRcdHZhciBzZWNvbmRUb0ZpcnN0ID0gdjMuc3VidHJhY3QoZmlyc3RQb2ludCwgc2Vjb25kUG9pbnQsIFtdKTtcblx0XHRcdFx0XHRcdHYzLmFkZChmaXJzdFBvaW50LCBzZWNvbmRUb0ZpcnN0LCBlbmRQb2ludCk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgc3RhcnRBdG9tID0gbmV3IEF0b20oJycsIHN0YXJ0UG9pbnRbMF0sIHN0YXJ0UG9pbnRbMV0sIHN0YXJ0UG9pbnRbMl0pO1xuXHRcdFx0XHRcdHZhciBlbmRBdG9tID0gbmV3IEF0b20oJycsIGVuZFBvaW50WzBdLCBlbmRQb2ludFsxXSwgZW5kUG9pbnRbMl0pO1xuXG5cdFx0XHRcdFx0dGhpcy5oZWxpeEN5bGluZGVycy5wdXNoKG5ldyBQaXBlKHN0YXJ0QXRvbSwgZW5kQXRvbSkpO1xuXG5cdFx0XHRcdFx0aGVsaXhSZXNpZHVlcyA9IFtdO1xuXG5cdFx0XHRcdFx0Ly8gZ2V0IHZlY3RvciBkaXJlY3Rpb24gZnJvbSBQaXBlIGVuZCB0byBzdGFydFxuXHRcdFx0XHRcdHZhciBoZWxpeERpciA9IHYzLnN1YnRyYWN0KHN0YXJ0UG9pbnQsIGVuZFBvaW50LCBbXSk7XG5cdFx0XHRcdFx0djMubm9ybWFsaXplKGhlbGl4RGlyKTtcblx0XHRcdFx0XHR2My5zY2FsZShoZWxpeERpciwgLjUpO1xuXG5cdFx0XHRcdFx0aWYgKG5vU1NSZXNpZHVlcy5sZW5ndGggPiAwKSB7XG5cblx0XHRcdFx0XHRcdHZhciBhZGRpdGlvbkNwID0gdjMuYWRkKHN0YXJ0UG9pbnQsIGhlbGl4RGlyLCBbXSk7XG5cdFx0XHRcdFx0XHR2YXIgcHJldlJlc0NwID0gbm9TU1Jlc2lkdWVzW25vU1NSZXNpZHVlcy5sZW5ndGggLSAxXS5jcDE7XG5cdFx0XHRcdFx0XHR2YXIgaGVsaXhEaXJUb1ByZXZSZXMgPSB2My5zdWJ0cmFjdChbcHJldlJlc0NwLngsIHByZXZSZXNDcC55LCBwcmV2UmVzQ3Auel0sIGFkZGl0aW9uQ3AsIFtdKTtcblx0XHRcdFx0XHRcdHYzLm5vcm1hbGl6ZShoZWxpeERpclRvUHJldlJlcyk7XG5cdFx0XHRcdFx0XHR2My5zY2FsZShoZWxpeERpclRvUHJldlJlcywgLjUpO1xuXHRcdFx0XHRcdFx0djMuYWRkKGFkZGl0aW9uQ3AsIGhlbGl4RGlyVG9QcmV2UmVzKTtcblx0XHRcdFx0XHRcdHZhciBkdW1teVJlcyA9IG5ldyBSZXNpZHVlKC0xKTtcblx0XHRcdFx0XHRcdGR1bW15UmVzLmNwMSA9IGR1bW15UmVzLmNwMiA9IG5ldyBBdG9tKCcnLCBhZGRpdGlvbkNwWzBdLCBhZGRpdGlvbkNwWzFdLCBhZGRpdGlvbkNwWzJdKTtcblx0XHRcdFx0XHRcdG5vU1NSZXNpZHVlcy5wdXNoKGR1bW15UmVzKTtcblxuXHRcdFx0XHRcdFx0Ly8gZm9yY2UgdGhlIG5vbiBzZWNvbmRhcnkgc3RydWN0dXJlIHNwbGluZSB0byBlbmQgb24gaGVsaXggc3RhcnQgcG9pbnQuXG5cdFx0XHRcdFx0XHR2YXIgZHVtbXlSZXMgPSBjcmVhdGVEdW1teVJlc2lkdWUoc3RhcnRQb2ludFswXSwgc3RhcnRQb2ludFsxXSwgc3RhcnRQb2ludFsyXSk7XG5cdFx0XHRcdFx0XHRub1NTUmVzaWR1ZXMucHVzaChkdW1teVJlcyk7XG5cblx0XHRcdFx0XHRcdGNoYWluTm9TUy5wdXNoKG5vU1NSZXNpZHVlcyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bm9TU1Jlc2lkdWVzID0gW107XG5cblx0XHRcdFx0XHQvLyBjaGVjayBmb3IgbmV4dCByZXNpZHVlXG5cdFx0XHRcdFx0aWYgKGkgPCBpaSkge1xuXHRcdFx0XHRcdFx0Ly8gZm9yY2UgdGhlIG5vbiBzZWNvbmRhcnkgc3RydWN0dXJlIHNwbGluZSB0byBzdGFydCBvbiBoZWxpeCBlbmQgcG9pbnQuXG5cdFx0XHRcdFx0XHR2YXIgZHVtbXlSZXMgPSBjcmVhdGVEdW1teVJlc2lkdWUoZW5kUG9pbnRbMF0sIGVuZFBvaW50WzFdLCBlbmRQb2ludFsyXSk7XG5cdFx0XHRcdFx0XHRub1NTUmVzaWR1ZXMucHVzaChkdW1teVJlcyk7XG5cblx0XHRcdFx0XHRcdHZhciBybSA9IHJzW2kgKyAxXTtcblx0XHRcdFx0XHRcdGlmIChybS5zaGVldCkge1xuXHRcdFx0XHRcdFx0XHRub1NTUmVzaWR1ZXMucHVzaChyZXNpZHVlKTtcblx0XHRcdFx0XHRcdFx0bm9TU1Jlc2lkdWVzLnB1c2gocmVzaWR1ZSk7XG5cdFx0XHRcdFx0XHRcdGNoYWluTm9TUy5wdXNoKG5vU1NSZXNpZHVlcyk7XG5cdFx0XHRcdFx0XHRcdG5vU1NSZXNpZHVlcyA9IFtdO1xuXG5cdFx0XHRcdFx0XHRcdHNoZWV0UmVzaWR1ZXMucHVzaChyZXNpZHVlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIGZvcmNlIHRoZSBub24gc2Vjb25kYXJ5IHN0cnVjdHVyZSBzcGxpbmUgdG8gc3RhcnQgb24gaGVsaXggZW5kIHBvaW50LlxuXHRcdFx0XHRcdFx0XHR2My5zY2FsZShoZWxpeERpciwgLTEpO1xuXHRcdFx0XHRcdFx0XHR2YXIgYWRkaXRpb25DcCA9IHYzLmFkZChlbmRQb2ludCwgaGVsaXhEaXIsIFtdKTtcblx0XHRcdFx0XHRcdFx0dmFyIG5leHRSZXNDcCA9IHJtLmNwMTtcblx0XHRcdFx0XHRcdFx0dmFyIGhlbGl4RGlyVG9OZXh0UmVzID0gdjMuc3VidHJhY3QoW25leHRSZXNDcC54LCBuZXh0UmVzQ3AueSwgbmV4dFJlc0NwLnpdLCBhZGRpdGlvbkNwLCBbXSk7XG5cdFx0XHRcdFx0XHRcdHYzLm5vcm1hbGl6ZShoZWxpeERpclRvTmV4dFJlcyk7XG5cdFx0XHRcdFx0XHRcdHYzLnNjYWxlKGhlbGl4RGlyVG9OZXh0UmVzLCAuNSk7XG5cdFx0XHRcdFx0XHRcdHYzLmFkZChhZGRpdGlvbkNwLCBoZWxpeERpclRvTmV4dFJlcyk7XG5cdFx0XHRcdFx0XHRcdHZhciBkdW1teVJlcyA9IGNyZWF0ZUR1bW15UmVzaWR1ZShhZGRpdGlvbkNwWzBdLCBhZGRpdGlvbkNwWzFdLCBhZGRpdGlvbkNwWzJdKTtcblx0XHRcdFx0XHRcdFx0bm9TU1Jlc2lkdWVzLnB1c2goZHVtbXlSZXMpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYocmVzaWR1ZS5zaGVldCkge1xuXG5cdFx0XHRcdHNoZWV0UmVzaWR1ZXMucHVzaChyZXNpZHVlKTtcblx0XHRcdFx0aWYocmVzaWR1ZS5hcnJvdykge1xuXG5cdFx0XHRcdFx0dmFyIHAxID0gWzAsIDAsIDBdO1xuXHRcdFx0XHRcdHZhciBwMiA9IFswLCAwLCAwXTtcblx0XHRcdFx0XHRmb3IodmFyIGggPSAwLCBoaCA9IHNoZWV0UmVzaWR1ZXMubGVuZ3RoOyBoIDwgaGg7IGgrKykge1xuXHRcdFx0XHRcdFx0dmFyIGd1aWRlUG9pbnRzID0gc2hlZXRSZXNpZHVlc1toXS5ndWlkZVBvaW50c0xhcmdlO1xuXHRcdFx0XHRcdFx0dmFyIGdwMSA9IGd1aWRlUG9pbnRzWzBdO1xuXHRcdFx0XHRcdFx0dmFyIGdwMiA9IGd1aWRlUG9pbnRzW2d1aWRlUG9pbnRzLmxlbmd0aCAtIDFdO1xuXG5cdFx0XHRcdFx0XHR2My5hZGQocDEsIFtncDEueCwgZ3AxLnksIGdwMS56XSk7XG5cdFx0XHRcdFx0XHR2My5hZGQocDIsIFtncDIueCwgZ3AyLnksIGdwMi56XSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0djMuc2NhbGUocDEsIDEgLyBoaCk7XG5cdFx0XHRcdFx0djMuc2NhbGUocDIsIDEgLyBoaCk7XG5cblx0XHRcdFx0XHR2YXIgZGlyeCA9IHYzLnN1YnRyYWN0KHAxLCBwMik7XG5cblx0XHRcdFx0XHR2YXIgZmlyc3RScyA9IHNoZWV0UmVzaWR1ZXNbMF07XG5cdFx0XHRcdFx0dmFyIGxhc3RScyA9IHNoZWV0UmVzaWR1ZXNbc2hlZXRSZXNpZHVlcy5sZW5ndGggLSAxXTtcblxuXHRcdFx0XHRcdHZhciBmaXJzdEd1aWRlUG9pbnRzID0gZmlyc3RScy5ndWlkZVBvaW50c1NtYWxsWzBdO1xuXHRcdFx0XHRcdHZhciBsYXN0R3VpZGVQb2ludHMgPSBsYXN0UnMuZ3VpZGVQb2ludHNTbWFsbFswXTtcblxuXHRcdFx0XHRcdHRoaXMuc2hlZXRQbGFua3MucHVzaChuZXcgUGxhbmsoZmlyc3RHdWlkZVBvaW50cywgbGFzdEd1aWRlUG9pbnRzLCBkaXJ4KSk7XG5cblx0XHRcdFx0XHRzaGVldFJlc2lkdWVzID0gW107XG5cblx0XHRcdFx0XHRpZiAoaSA8IGlpKSB7XG5cdFx0XHRcdFx0XHR2YXIgcm0gPSByc1tpICsgMV07XG5cblx0XHRcdFx0XHRcdGlmIChybS5zaGVldCkge1xuXHRcdFx0XHRcdFx0XHRzaGVldFJlc2lkdWVzLnB1c2gocmVzaWR1ZSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR2YXIgZHVtbXlSZXMgPSBjcmVhdGVEdW1teVJlc2lkdWUobGFzdEd1aWRlUG9pbnRzLngsIGxhc3RHdWlkZVBvaW50cy55LCBsYXN0R3VpZGVQb2ludHMueik7XG5cdFx0XHRcdFx0XHRcdG5vU1NSZXNpZHVlcy5wdXNoKGR1bW15UmVzKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bm9TU1Jlc2lkdWVzLnB1c2gocmVzaWR1ZSk7XG5cblx0XHRcdFx0aWYgKGkgPCBpaSkge1xuXHRcdFx0XHRcdHZhciBybSA9IHJzW2kgKyAxXTtcblx0XHRcdFx0XHRpZiAocm0uc2hlZXQpIHtcblx0XHRcdFx0XHRcdHZhciBndWlkZVBvaW50cyA9IHJlc2lkdWUuZ3VpZGVQb2ludHNTbWFsbFswXTtcblx0XHRcdFx0XHRcdHZhciBkdW1teVJlcyA9IGNyZWF0ZUR1bW15UmVzaWR1ZShndWlkZVBvaW50cy54LCBndWlkZVBvaW50cy55LCBndWlkZVBvaW50cy56KTtcblxuXHRcdFx0XHRcdFx0bm9TU1Jlc2lkdWVzLnB1c2goZHVtbXlSZXMpO1xuXG5cdFx0XHRcdFx0XHRjaGFpbk5vU1MucHVzaChub1NTUmVzaWR1ZXMpO1xuXHRcdFx0XHRcdFx0bm9TU1Jlc2lkdWVzID0gW107XG5cblx0XHRcdFx0XHRcdHNoZWV0UmVzaWR1ZXMucHVzaChyZXNpZHVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZihub1NTUmVzaWR1ZXMubGVuZ3RoID4gMSkge1xuXHRcdFx0aWYobm9TU1Jlc2lkdWVzLmxlbmd0aCA9PSAyKSB7XG5cdFx0XHRcdG5vU1NSZXNpZHVlcy5wdXNoKG5vU1NSZXNpZHVlc1tub1NTUmVzaWR1ZXMubGVuZ3RoIC0gMV0pO1xuXHRcdFx0fVxuXHRcdFx0Y2hhaW5Ob1NTLnB1c2gobm9TU1Jlc2lkdWVzKTtcblx0XHR9XG5cdFx0bm9TU1Jlc2lkdWVzID0gW107XG5cblx0XHR2YXIgY2hhaW5TZWdtZW50cyA9IFtdO1xuXHRcdGZvciAoIHZhciBuID0gMCwgbm4gPSBjaGFpbk5vU1MubGVuZ3RoOyBuIDwgbm47IG4rKykge1xuXHRcdFx0dmFyIG5ocyA9IGNoYWluTm9TU1tuXTtcblx0XHRcdHZhciBsaW5lU2VnbWVudHNMaXN0ID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBuaHMubGVuZ3RoIC0gMTsgaSA8PSBpaTsgaSsrKSB7XG5cdFx0XHRcdGxpbmVTZWdtZW50c0xpc3QucHVzaChuaHNbaV0uY3AxKTtcblx0XHRcdH1cblx0XHRcdGNoYWluU2VnbWVudHMucHVzaChsaW5lU2VnbWVudHNMaXN0KTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMCwgaWkgPSBjaGFpblNlZ21lbnRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciB0ID0gbmV3IGQzLkNhdG11bGxUdWJlKGNoYWluU2VnbWVudHNbaV0sIHNwZWNzLnByb3RlaW5zX3R1YmVUaGlja25lc3MsIHNwZWNzLnByb3RlaW5zX3R1YmVSZXNvbHV0aW9uXzNELCBzcGVjcy5wcm90ZWluc19ob3Jpem9udGFsUmVzb2x1dGlvbik7XG5cdFx0XHR0LmNoYWluQ29sb3IgPSBycy5jaGFpbkNvbG9yO1xuXHRcdFx0dGhpcy50dWJlcy5wdXNoKHQpO1xuXHRcdH1cblx0fTtcblx0dmFyIF8gPSBkMy5QaXBlUGxhbmsucHJvdG90eXBlID0gbmV3IGQzLl9NZXNoKCk7XG5cdF8ucmVuZGVyID0gZnVuY3Rpb24oZ2wsIHNwZWNzKSB7XG5cdFx0Z2wubWF0ZXJpYWwuc2V0VGVtcENvbG9ycyhnbCwgc3BlY3MucHJvdGVpbnNfbWF0ZXJpYWxBbWJpZW50Q29sb3JfM0QsIHVuZGVmaW5lZCwgc3BlY3MucHJvdGVpbnNfbWF0ZXJpYWxTcGVjdWxhckNvbG9yXzNELCBzcGVjcy5wcm90ZWluc19tYXRlcmlhbFNoaW5pbmVzc18zRCk7XG5cdFx0XG5cdFx0Ly8gY29sb3JzXG5cdFx0Z2wubWF0ZXJpYWwuc2V0RGlmZnVzZUNvbG9yKGdsLCBzcGVjcy5tYWNyb19jb2xvckJ5Q2hhaW4gPyB0aGlzLmNoYWluQ29sb3IgOiBzcGVjcy5wcm90ZWluc190dWJlQ29sb3IpO1xuXHRcdGZvciAoIHZhciBqID0gMCwgamogPSB0aGlzLnR1YmVzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCk7XG5cdFx0XHR0aGlzLnR1YmVzW2pdLnJlbmRlcihnbCwgc3BlY3MpO1xuXHRcdH1cblxuXHRcdGlmKCFzcGVjcy5tYWNyb19jb2xvckJ5Q2hhaW4pIHtcblx0XHRcdGdsLm1hdGVyaWFsLnNldERpZmZ1c2VDb2xvcihnbCwgc3BlY3MucHJvdGVpbnNfcmliYm9uQ2FydG9vbkhlbGl4U2Vjb25kYXJ5Q29sb3IpO1xuXHRcdH1cblxuXHRcdGdsLmN5bGluZGVyQ2xvc2VkQnVmZmVyLmJpbmRCdWZmZXJzKGdsKTtcblx0XHRmb3IgKHZhciBqID0gMCwgamogPSB0aGlzLmhlbGl4Q3lsaW5kZXJzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdHRoaXMuaGVsaXhDeWxpbmRlcnNbal0ucmVuZGVyKGdsLCBzcGVjcyk7XG5cdFx0fVxuXG5cdFx0aWYoIXNwZWNzLm1hY3JvX2NvbG9yQnlDaGFpbikge1xuXHRcdFx0Z2wubWF0ZXJpYWwuc2V0RGlmZnVzZUNvbG9yKGdsLCBzcGVjcy5wcm90ZWluc19yaWJib25DYXJ0b29uU2hlZXRDb2xvcik7XG5cdFx0fVxuXG5cdFx0Z2wuYm94QnVmZmVyLmJpbmRCdWZmZXJzKGdsKTtcblx0XHRmb3IgKHZhciBqID0gMCwgamogPSB0aGlzLnNoZWV0UGxhbmtzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdHRoaXMuc2hlZXRQbGFua3Nbal0ucmVuZGVyKGdsLCBzcGVjcyk7XG5cdFx0fVxuXG5cdH07XG5cbn0pKGV4dGVuc2lvbnMsIFJFU0lEVUUsIGQzLCBtLCBtNCwgdjMsIG1hdGgpO1xuXG4oZnVuY3Rpb24oZDMsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLlF1YWQgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgcG9zaXRpb25EYXRhID0gW1xuXHRcdFx0LTEsIDEsIDAsIFxuXHRcdFx0LTEsIC0xLCAwLCBcblx0XHRcdDEsIDEsIDAsIFxuXHRcdFx0MSwgLTEsIDBcblx0XHRdO1xuXHRcdHZhciBub3JtYWxEYXRhID0gW1xuXHRcdFx0MCwgMCwgMCxcblx0XHRcdDAsIDAsIDAsXG5cdFx0XHQwLCAwLCAwLFxuXHRcdFx0MCwgMCwgMFxuXHRcdF07XG5cdFx0dGhpcy5zdG9yZURhdGEocG9zaXRpb25EYXRhLCBub3JtYWxEYXRhKTtcblx0fTtcblx0ZDMuUXVhZC5wcm90b3R5cGUgPSBuZXcgZDMuX01lc2goKTtcblxufSkoZDMpO1xuXG4oZnVuY3Rpb24oZDMsIHYzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRkMy5TaGFwZSA9IGZ1bmN0aW9uKHBvaW50cywgdGhpY2tuZXNzKSB7XG5cdFx0Ly8gcG9pbnRzIG11c3QgYmUgaW4gdGhlIHh5LXBsYW5lLCBhbGwgei1jb29yZHMgbXVzdCBiZSAwLCB0aGlja25lc3Ncblx0XHQvLyB3aWxsIGJlIGluIHRoZSB6LXBsYW5lXG5cdFx0dmFyIG51bVBvaW50cyA9IHBvaW50cy5sZW5ndGg7XG5cdFx0dmFyIHBvc2l0aW9uRGF0YSA9IFtdO1xuXHRcdHZhciBub3JtYWxEYXRhID0gW107XG5cblx0XHQvLyBjYWxjdWxhdGUgdmVydGV4IGFuZCBub3JtYWwgcG9pbnRzXG5cdFx0dmFyIGNlbnRlciA9IG5ldyBQb2ludCgpO1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBudW1Qb2ludHM7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgbmV4dCA9IGkgKyAxO1xuXHRcdFx0aWYgKGkgPT09IGlpIC0gMSkge1xuXHRcdFx0XHRuZXh0ID0gMDtcblx0XHRcdH1cblx0XHRcdHZhciB6ID0gWyAwLCAwLCAxIF07XG5cdFx0XHR2YXIgY3VycmVudFBvaW50ID0gcG9pbnRzW2ldO1xuXHRcdFx0dmFyIG5leHRQb2ludCA9IHBvaW50c1tuZXh0XTtcblx0XHRcdHZhciB2ID0gWyBuZXh0UG9pbnQueCAtIGN1cnJlbnRQb2ludC54LCBuZXh0UG9pbnQueSAtIGN1cnJlbnRQb2ludC55LCAwIF07XG5cdFx0XHR2YXIgbm9ybWFsID0gdjMuY3Jvc3Moeiwgdik7XG5cdFx0XHQvLyBmaXJzdCBmb3VyIGFyZSBmb3IgdGhlIHNpZGUgbm9ybWFsXG5cdFx0XHQvLyBzZWNvbmQgZm91ciB3aWxsIGRvIGJvdGggdGhlIGJvdHRvbSBhbmQgdG9wIHRyaWFuZ2xlIG5vcm1hbHNcblx0XHRcdGZvciAoIHZhciBqID0gMDsgaiA8IDI7IGorKykge1xuXHRcdFx0XHRwb3NpdGlvbkRhdGEucHVzaChjdXJyZW50UG9pbnQueCwgY3VycmVudFBvaW50LnksIHRoaWNrbmVzcyAvIDIpO1xuXHRcdFx0XHRwb3NpdGlvbkRhdGEucHVzaChjdXJyZW50UG9pbnQueCwgY3VycmVudFBvaW50LnksIC10aGlja25lc3MgLyAyKTtcblx0XHRcdFx0cG9zaXRpb25EYXRhLnB1c2gobmV4dFBvaW50LngsIG5leHRQb2ludC55LCB0aGlja25lc3MgLyAyKTtcblx0XHRcdFx0cG9zaXRpb25EYXRhLnB1c2gobmV4dFBvaW50LngsIG5leHRQb2ludC55LCAtdGhpY2tuZXNzIC8gMik7XG5cdFx0XHR9XG5cdFx0XHQvLyBzaWRlIG5vcm1hbHNcblx0XHRcdGZvciAoIHZhciBqID0gMDsgaiA8IDQ7IGorKykge1xuXHRcdFx0XHRub3JtYWxEYXRhLnB1c2gobm9ybWFsWzBdLCBub3JtYWxbMV0sIG5vcm1hbFsyXSk7XG5cdFx0XHR9XG5cdFx0XHQvLyB0b3AgYW5kIGJvdHRvbSBub3JtYWxzXG5cdFx0XHRub3JtYWxEYXRhLnB1c2goMCwgMCwgMSk7XG5cdFx0XHRub3JtYWxEYXRhLnB1c2goMCwgMCwgLTEpO1xuXHRcdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDAsIDEpO1xuXHRcdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDAsIC0xKTtcblx0XHRcdGNlbnRlci5hZGQoY3VycmVudFBvaW50KTtcblx0XHR9XG5cdFx0Ly8gY2VudGVyc1xuXHRcdGNlbnRlci54IC89IG51bVBvaW50cztcblx0XHRjZW50ZXIueSAvPSBudW1Qb2ludHM7XG5cdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDAsIDEpO1xuXHRcdHBvc2l0aW9uRGF0YS5wdXNoKGNlbnRlci54LCBjZW50ZXIueSwgdGhpY2tuZXNzIC8gMik7XG5cdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDAsIC0xKTtcblx0XHRwb3NpdGlvbkRhdGEucHVzaChjZW50ZXIueCwgY2VudGVyLnksIC10aGlja25lc3MgLyAyKTtcblxuXHRcdC8vIGJ1aWxkIG1lc2ggY29ubmVjdGl2aXR5XG5cdFx0dmFyIGluZGV4RGF0YSA9IFtdO1xuXHRcdHZhciBjZW50ZXJJbmRleCA9IG51bVBvaW50cyAqIDg7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IG51bVBvaW50czsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBzdGFydCA9IGkgKiA4O1xuXHRcdFx0Ly8gc2lkZXNcblx0XHRcdGluZGV4RGF0YS5wdXNoKHN0YXJ0KTtcblx0XHRcdGluZGV4RGF0YS5wdXNoKHN0YXJ0ICsgMyk7XG5cdFx0XHRpbmRleERhdGEucHVzaChzdGFydCArIDEpO1xuXHRcdFx0aW5kZXhEYXRhLnB1c2goc3RhcnQpO1xuXHRcdFx0aW5kZXhEYXRhLnB1c2goc3RhcnQgKyAyKTtcblx0XHRcdGluZGV4RGF0YS5wdXNoKHN0YXJ0ICsgMyk7XG5cdFx0XHQvLyB0b3AgYW5kIGJvdHRvbVxuXHRcdFx0aW5kZXhEYXRhLnB1c2goc3RhcnQgKyA0KTtcblx0XHRcdGluZGV4RGF0YS5wdXNoKGNlbnRlckluZGV4KTtcblx0XHRcdGluZGV4RGF0YS5wdXNoKHN0YXJ0ICsgNik7XG5cdFx0XHRpbmRleERhdGEucHVzaChzdGFydCArIDUpO1xuXHRcdFx0aW5kZXhEYXRhLnB1c2goc3RhcnQgKyA3KTtcblx0XHRcdGluZGV4RGF0YS5wdXNoKGNlbnRlckluZGV4ICsgMSk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9yZURhdGEocG9zaXRpb25EYXRhLCBub3JtYWxEYXRhLCBpbmRleERhdGEpO1xuXHR9O1xuXHRkMy5TaGFwZS5wcm90b3R5cGUgPSBuZXcgZDMuX01lc2goKTtcblxufSkoZDMsIHYzKTtcblxuKGZ1bmN0aW9uKGQzLCBtLCB2MywgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDMuU3RhciA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwcyA9IFsgLjg5NDQsIC40NDcyLCAwLCAuMjc2NCwgLjQ0NzIsIC44NTA2LCAuMjc2NCwgLjQ0NzIsIC0uODUwNiwgLS43MjM2LCAuNDQ3MiwgLjUyNTcsIC0uNzIzNiwgLjQ0NzIsIC0uNTI1NywgLS4zNDE2LCAuNDQ3MiwgMCwgLS4xMDU2LCAuNDQ3MiwgLjMyNDksIC0uMTA1NiwgLjQ0NzIsIC0uMzI0OSwgLjI3NjQsIC40NDcyLCAuMjAwOCwgLjI3NjQsIC40NDcyLCAtLjIwMDgsIC0uODk0NCwgLS40NDcyLCAwLCAtLjI3NjQsIC0uNDQ3MiwgLjg1MDYsIC0uMjc2NCwgLS40NDcyLCAtLjg1MDYsIC43MjM2LCAtLjQ0NzIsIC41MjU3LCAuNzIzNiwgLS40NDcyLCAtLjUyNTcsIC4zNDE2LCAtLjQ0NzIsIDAsIC4xMDU2LCAtLjQ0NzIsIC4zMjQ5LCAuMTA1NiwgLS40NDcyLCAtLjMyNDksIC0uMjc2NCwgLS40NDcyLCAuMjAwOCwgLS4yNzY0LCAtLjQ0NzIsIC0uMjAwOCwgLS41NTI3LCAuMTA1OCwgMCwgLS4xNzA4LCAuMTA1OCwgLjU1MjcsIC0uMTcwOCxcblx0XHRcdFx0LjEwNTgsIC0uNTUyNywgLjQ0NzEsIC4xMDU4LCAuMzI0OSwgLjQ0NzEsIC4xMDU4LCAtLjMyNDksIC41NTI3LCAtLjEwNTgsIDAsIC4xNzA4LCAtLjEwNTgsIC41NTI3LCAuMTcwOCwgLS4xMDU4LCAtLjU1MjcsIC0uNDQ3MSwgLS4xMDU4LCAuMzI0OSwgLS40NDcxLCAtLjEwNTgsIC0uMzI0OSwgMCwgMSwgMCwgMCwgLTEsIDAgXTtcblx0XHR2YXIgaXMgPSBbIDAsIDksIDgsIDIsIDcsIDksIDQsIDUsIDcsIDMsIDYsIDUsIDEsIDgsIDYsIDAsIDgsIDIzLCAzMCwgNiwgOCwgMywgMjEsIDYsIDExLCAyNiwgMjEsIDEzLCAyMywgMjYsIDIsIDksIDI0LCAzMCwgOCwgOSwgMSwgMjMsIDgsIDEzLCAyNSwgMjMsIDE0LCAyNCwgMjUsIDQsIDcsIDIyLCAzMCwgOSwgNywgMCwgMjQsIDksIDE0LCAyNywgMjQsIDEyLCAyMiwgMjcsIDMsIDUsIDIwLCAzMCwgNywgNSwgMiwgMjIsIDcsIDEyLCAyOSwgMjIsIDEwLCAyMCwgMjksIDEsIDYsIDIxLCAzMCwgNSwgNiwgNCwgMjAsIDUsIDEwLCAyOCwgMjAsIDExLCAyMSwgMjgsIDEwLCAxOSwgMTgsIDEyLCAxNywgMTksIDE0LCAxNSwgMTcsIDEzLCAxNiwgMTUsIDExLCAxOCwgMTYsIDMxLCAxOSwgMTcsIDE0LCAxNywgMjcsIDIsIDI3LCAyMiwgNCwgMjIsIDI5LCAxMCwgMjksIDE5LCAzMSwgMTgsIDE5LCAxMiwgMTksIDI5LCA0LCAyOSwgMjAsIDMsIDIwLCAyOCxcblx0XHRcdFx0MTEsIDI4LCAxOCwgMzEsIDE2LCAxOCwgMTAsIDE4LCAyOCwgMywgMjgsIDIxLCAxLCAyMSwgMjYsIDEzLCAyNiwgMTYsIDMxLCAxNSwgMTYsIDExLCAxNiwgMjYsIDEsIDI2LCAyMywgMCwgMjMsIDI1LCAxNCwgMjUsIDE1LCAzMSwgMTcsIDE1LCAxMywgMTUsIDI1LCAwLCAyNSwgMjQsIDIsIDI0LCAyNywgMTIsIDI3LCAxNyBdO1xuXG5cdFx0dmFyIHBvc2l0aW9uRGF0YSA9IFtdO1xuXHRcdHZhciBub3JtYWxEYXRhID0gW107XG5cdFx0dmFyIGluZGV4RGF0YSA9IFtdO1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBpcy5sZW5ndGg7IGkgPCBpaTsgaSArPSAzKSB7XG5cdFx0XHR2YXIgajEgPSBpc1tpXSAqIDM7XG5cdFx0XHR2YXIgajIgPSBpc1tpICsgMV0gKiAzO1xuXHRcdFx0dmFyIGozID0gaXNbaSArIDJdICogMztcblxuXHRcdFx0dmFyIHAxID0gWyBwc1tqMV0sIHBzW2oxICsgMV0sIHBzW2oxICsgMl0gXTtcblx0XHRcdHZhciBwMiA9IFsgcHNbajJdLCBwc1tqMiArIDFdLCBwc1tqMiArIDJdIF07XG5cdFx0XHR2YXIgcDMgPSBbIHBzW2ozXSwgcHNbajMgKyAxXSwgcHNbajMgKyAyXSBdO1xuXG5cdFx0XHR2YXIgdG9BYm92ZSA9IFsgcDFbMF0gLSBwMlswXSwgcDFbMV0gLSBwMlsxXSwgcDFbMl0gLSBwMlsyXSBdO1xuXHRcdFx0dmFyIHRvU2lkZSA9IFsgcDNbMF0gLSBwMlswXSwgcDNbMV0gLSBwMlsxXSwgcDNbMl0gLSBwMlsyXSBdO1xuXHRcdFx0dmFyIG5vcm1hbCA9IHYzLmNyb3NzKHRvU2lkZSwgdG9BYm92ZSwgW10pO1xuXHRcdFx0djMubm9ybWFsaXplKG5vcm1hbCk7XG5cblx0XHRcdHBvc2l0aW9uRGF0YS5wdXNoKHAxWzBdLCBwMVsxXSwgcDFbMl0sIHAyWzBdLCBwMlsxXSwgcDJbMl0sIHAzWzBdLCBwM1sxXSwgcDNbMl0pO1xuXHRcdFx0bm9ybWFsRGF0YS5wdXNoKG5vcm1hbFswXSwgbm9ybWFsWzFdLCBub3JtYWxbMl0sIG5vcm1hbFswXSwgbm9ybWFsWzFdLCBub3JtYWxbMl0sIG5vcm1hbFswXSwgbm9ybWFsWzFdLCBub3JtYWxbMl0pO1xuXHRcdFx0aW5kZXhEYXRhLnB1c2goaSwgaSArIDEsIGkgKyAyKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3JlRGF0YShwb3NpdGlvbkRhdGEsIG5vcm1hbERhdGEsIGluZGV4RGF0YSk7XG5cdH07XG5cdGQzLlN0YXIucHJvdG90eXBlID0gbmV3IGQzLl9NZXNoKCk7XG5cbn0pKGQzLCBtLCB2Myk7XG5cbihmdW5jdGlvbihkMywgZXh0ZW5zaW9ucywgZG9jdW1lbnQsIHdpbmRvdywgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIHJhdGlvID0gMTtcblx0aWYod2luZG93LmRldmljZVBpeGVsUmF0aW8pe1xuXHRcdHJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG5cdH1cblx0XG5cdGQzLlRleHRJbWFnZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMuY3R4ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykuZ2V0Q29udGV4dCgnMmQnKTtcblx0XHR0aGlzLmRhdGEgPSBbXTtcblx0XHR0aGlzLnRleHQgPSAnJztcblx0XHR0aGlzLmNoYXJIZWlnaHQgPSAwO1xuXHR9O1xuXG5cdHZhciBfID0gZDMuVGV4dEltYWdlLnByb3RvdHlwZTtcblxuXHRfLmluaXQgPSBmdW5jdGlvbihnbCkge1xuXHRcdC8vIGluaXQgdGV4dHVyZVxuXHRcdHRoaXMudGV4dHVyZUltYWdlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMudGV4dHVyZUltYWdlKTtcblxuXHRcdGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIGZhbHNlKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QpO1xuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXG5cdFx0dGhpcy51cGRhdGVGb250KGdsLCAxMiwgWyAnU2Fucy1zZXJpZicgXSwgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XG5cdH07XG5cblx0Xy5jaGFyRGF0YSA9IGZ1bmN0aW9uKGNoYXJhY3Rlcikge1xuXHRcdHZhciBpbmRleCA9IHRoaXMudGV4dC5pbmRleE9mKGNoYXJhY3Rlcik7XG5cdFx0cmV0dXJuIGluZGV4ID49IDAgPyB0aGlzLmRhdGFbaW5kZXhdIDogbnVsbDtcblx0fTtcblxuXHRfLnVwZGF0ZUZvbnQgPSBmdW5jdGlvbihnbCwgZm9udFNpemUsIGZvbnRGYW1pbGllcywgZm9udEJvbGQsIGZvbnRJdGFsaWMsIGZvbnRTdHJva2UpIHtcblx0XHR2YXIgY3R4ID0gdGhpcy5jdHg7XG5cdFx0dmFyIGNhbnZhcyA9IHRoaXMuY3R4LmNhbnZhcztcblx0XHR2YXIgZGF0YSA9IFtdO1xuXHRcdHZhciB0ZXh0ID0gXCJcIjtcblx0XHRmb250U2l6ZSAqPSByYXRpbztcblx0XHR2YXIgY29udGV4dEZvbnQgPSBleHRlbnNpb25zLmdldEZvbnRTdHJpbmcoZm9udFNpemUsIGZvbnRGYW1pbGllcywgZm9udEJvbGQsIGZvbnRJdGFsaWMpO1xuXG5cdFx0Y3R4LmZvbnQgPSBjb250ZXh0Rm9udDtcblxuXHRcdGN0eC5zYXZlKCk7XG5cblx0XHR2YXIgdG90YWxXaWR0aCA9IDA7XG5cdFx0dmFyIGNoYXJIZWlnaHQgPSBmb250U2l6ZSAqIDEuNTtcblxuXHRcdGZvciAoIHZhciBpID0gMzIsIGlpID0gMTI3OyBpIDwgaWk7IGkrKykge1xuXG5cdFx0XHQvLyBza2lwIGNvbnRyb2wgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaWYoaSA8PSAzMSB8fCBpID09IDEyNykgY29udGludWU7XG5cblx0XHRcdHZhciBjaGFyYWN0ZXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpLCB3aWR0aCA9IGN0eC5tZWFzdXJlVGV4dChjaGFyYWN0ZXIpLndpZHRoO1xuXG5cdFx0XHRkYXRhLnB1c2goe1xuXHRcdFx0XHR0ZXh0IDogY2hhcmFjdGVyLFxuXHRcdFx0XHR3aWR0aCA6IHdpZHRoLFxuXHRcdFx0XHRoZWlnaHQgOiBjaGFySGVpZ2h0XG5cdFx0XHR9KTtcblxuXHRcdFx0dG90YWxXaWR0aCArPSB3aWR0aCAqIDI7XG5cdFx0fVxuXHRcdFxuXHRcdC8vIGFkZCBvdGhlciBjaGFyYWN0ZXJzXG5cdFx0dmFyIGNoYXJzID0gJ1xcdTAwYjBcXHUyMTJiXFx1MDBBRScuc3BsaXQoJycpO1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBjaGFycy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cblx0XHRcdHZhciBjaGFyYWN0ZXIgPSBjaGFyc1tpXSwgd2lkdGggPSBjdHgubWVhc3VyZVRleHQoY2hhcmFjdGVyKS53aWR0aDtcblxuXHRcdFx0ZGF0YS5wdXNoKHtcblx0XHRcdFx0dGV4dCA6IGNoYXJhY3Rlcixcblx0XHRcdFx0d2lkdGggOiB3aWR0aCxcblx0XHRcdFx0aGVpZ2h0IDogY2hhckhlaWdodFxuXHRcdFx0fSk7XG5cblx0XHRcdHRvdGFsV2lkdGggKz0gd2lkdGggKiAyO1xuXHRcdH1cblxuXHRcdHZhciBhcmVhSW1hZ2UgPSB0b3RhbFdpZHRoICogY2hhckhlaWdodDtcblx0XHR2YXIgc3FydEFyZWEgPSBtLnNxcnQoYXJlYUltYWdlKTtcblx0XHR2YXIgdG90YWxSb3dzID0gbS5jZWlsKHNxcnRBcmVhIC8gY2hhckhlaWdodCk7XG5cdFx0dmFyIG1heFdpZHRoID0gbS5jZWlsKHRvdGFsV2lkdGggLyAodG90YWxSb3dzIC0gMSkpO1xuXG5cdFx0Y2FudmFzLndpZHRoID0gbWF4V2lkdGg7XG5cdFx0Y2FudmFzLmhlaWdodCA9IHRvdGFsUm93cyAqIGNoYXJIZWlnaHQ7XG5cblx0XHRjdHguZm9udCA9IGNvbnRleHRGb250O1xuXHRcdGN0eC50ZXh0QWxpZ24gPSBcImxlZnRcIjtcblx0XHRjdHgudGV4dEJhc2VsaW5lID0gXCJtaWRkbGVcIjtcblxuXHRcdGN0eC5zdHJva2VTdHlsZSA9IFwiIzAwMFwiO1xuXHRcdGN0eC5saW5lV2lkdGggPSAxLjQ7XG5cblx0XHRjdHguZmlsbFN0eWxlID0gXCIjZmZmXCI7XG5cblx0XHR2YXIgb2Zmc2V0Um93ID0gMDtcblx0XHR2YXIgcG9zWCA9IDA7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IGRhdGEubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIGNoYXJEYXRhID0gZGF0YVtpXTtcblx0XHRcdHZhciBjaGFyV2lkdGggPSBjaGFyRGF0YS53aWR0aCAqIDI7XG5cdFx0XHR2YXIgY2hhckhlaWdodCA9IGNoYXJEYXRhLmhlaWdodDtcblx0XHRcdHZhciBjaGFyVGV4dCA9IGNoYXJEYXRhLnRleHQ7XG5cdFx0XHR2YXIgd2lsbFdpZHRoID0gcG9zWCArIGNoYXJXaWR0aDtcblxuXHRcdFx0aWYgKHdpbGxXaWR0aCA+IG1heFdpZHRoKSB7XG5cdFx0XHRcdG9mZnNldFJvdysrO1xuXHRcdFx0XHRwb3NYID0gMDtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHBvc1kgPSBvZmZzZXRSb3cgKiBjaGFySGVpZ2h0O1xuXG5cdFx0XHRpZiAoZm9udFN0cm9rZSkge1xuXHRcdFx0XHQvLyBzdHJva2UgbXVzdCBkcmF3IGJlZm9yZSBmaWxsXG5cdFx0XHRcdGN0eC5zdHJva2VUZXh0KGNoYXJUZXh0LCBwb3NYLCBwb3NZICsgKGNoYXJIZWlnaHQgLyAyKSk7XG5cdFx0XHR9XG5cblx0XHRcdGN0eC5maWxsVGV4dChjaGFyVGV4dCwgcG9zWCwgcG9zWSArIChjaGFySGVpZ2h0IC8gMikpO1xuXG5cdFx0XHRjaGFyRGF0YS54ID0gcG9zWDtcblx0XHRcdGNoYXJEYXRhLnkgPSBwb3NZO1xuXG5cdFx0XHR0ZXh0ICs9IGNoYXJUZXh0O1xuXHRcdFx0cG9zWCArPSBjaGFyV2lkdGg7XG5cdFx0fVxuXG5cdFx0dGhpcy50ZXh0ID0gdGV4dDtcblx0XHR0aGlzLmRhdGEgPSBkYXRhO1xuXHRcdHRoaXMuY2hhckhlaWdodCA9IGNoYXJIZWlnaHQ7XG5cblx0XHQvLyBhbHNvIHVwZGF0ZSB0aGUgdGV4dHVyZVxuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMudGV4dHVyZUltYWdlKTtcblx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIGNhbnZhcyk7XG5cdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XG5cdH07XG5cdF8ucHVzaFZlcnRleERhdGEgPSBmdW5jdGlvbih0ZXh0LCBwb3NpdGlvbiwgekRlcHRoLCBkYXRhKSB7XG5cdFx0Ly8gY2hhcmFjdGVycyBvZiBzdHJpbmcgdGV4dFxuXHRcdHZhciB0ZXh0UGllY2UgPSB0ZXh0LnRvU3RyaW5nKCkuc3BsaXQoXCJcIik7XG5cblx0XHQvLyBoZWlnaHQgb2YgdGV4dHVyZSBpbWFnZVxuXHRcdHZhciBoZWlnaHRJbWFnZSA9IHRoaXMuZ2V0SGVpZ2h0KCk7XG5cdFx0dmFyIHdpZHRoSW1hZ2UgPSB0aGlzLmdldFdpZHRoKCk7XG5cblx0XHR2YXIgeDEgPSAtdGhpcy50ZXh0V2lkdGgodGV4dCkgLyAyIC8gcmF0aW87XG5cdFx0dmFyIHkxID0gLXRoaXMuY2hhckhlaWdodCAvIDIgLyByYXRpbztcblxuXHRcdC8vIGl0ZXJhdGUgZWFjaCBjaGFyYWN0ZXJcblx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gdGV4dFBpZWNlLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdHZhciBjaGFyRGF0YSA9IHRoaXMuY2hhckRhdGEodGV4dFBpZWNlW2pdKTtcblxuXHRcdFx0dmFyIHdpZHRoID0gY2hhckRhdGEud2lkdGg7XG5cdFx0XHR2YXIgbGVmdCA9IGNoYXJEYXRhLnggLyB3aWR0aEltYWdlO1xuXHRcdFx0dmFyIHJpZ2h0ID0gbGVmdCArIGNoYXJEYXRhLndpZHRoICogMS44IC8gd2lkdGhJbWFnZTtcblx0XHRcdHZhciB0b3AgPSBjaGFyRGF0YS55IC8gaGVpZ2h0SW1hZ2U7XG5cdFx0XHR2YXIgYm90dG9tID0gdG9wICsgY2hhckRhdGEuaGVpZ2h0IC8gaGVpZ2h0SW1hZ2U7XG5cblx0XHRcdHZhciB4MiA9IHgxICsgd2lkdGggKiAxLjggLyByYXRpbztcblx0XHRcdHZhciB5MiA9IHRoaXMuY2hhckhlaWdodCAvIDIgLyByYXRpbztcblxuXHRcdFx0ZGF0YS5wb3NpdGlvbi5wdXNoKFxuXHRcdFx0Ly8gbGVmdCB0b3Bcblx0XHRcdHBvc2l0aW9uWzBdLCBwb3NpdGlvblsxXSwgcG9zaXRpb25bMl0sXG5cdFx0XHQvLyByaWdodCB0b3Bcblx0XHRcdHBvc2l0aW9uWzBdLCBwb3NpdGlvblsxXSwgcG9zaXRpb25bMl0sXG5cdFx0XHQvLyByaWdodCBib3R0b21cblx0XHRcdHBvc2l0aW9uWzBdLCBwb3NpdGlvblsxXSwgcG9zaXRpb25bMl0sXG5cblx0XHRcdC8vIGxlZnQgdG9wXG5cdFx0XHRwb3NpdGlvblswXSwgcG9zaXRpb25bMV0sIHBvc2l0aW9uWzJdLFxuXHRcdFx0Ly8gbGVmdCBib3R0b21cblx0XHRcdHBvc2l0aW9uWzBdLCBwb3NpdGlvblsxXSwgcG9zaXRpb25bMl0sXG5cdFx0XHQvLyByaWdodCBib3R0b21cblx0XHRcdHBvc2l0aW9uWzBdLCBwb3NpdGlvblsxXSwgcG9zaXRpb25bMl0pO1xuXG5cdFx0XHRkYXRhLnRleENvb3JkLnB1c2goXG5cdFx0XHQvLyBsZWZ0IHRvcFxuXHRcdFx0bGVmdCwgdG9wLFxuXHRcdFx0Ly8gcmlnaHQgYm90dG9tXG5cdFx0XHRyaWdodCwgYm90dG9tLFxuXHRcdFx0Ly8gcmlnaHQgdG9wXG5cdFx0XHRyaWdodCwgdG9wLFxuXG5cdFx0XHQvLyBsZWZ0IHRvcFxuXHRcdFx0bGVmdCwgdG9wLFxuXHRcdFx0Ly8gbGVmdCBib3R0b21cblx0XHRcdGxlZnQsIGJvdHRvbSxcblx0XHRcdC8vIHJpZ2h0IGJvdHRvbVxuXHRcdFx0cmlnaHQsIGJvdHRvbSk7XG5cblx0XHRcdGRhdGEudHJhbnNsYXRpb24ucHVzaChcblx0XHRcdC8vIGxlZnQgdG9wXG5cdFx0XHR4MSwgeTIsIHpEZXB0aCxcblx0XHRcdC8vIHJpZ2h0IGJvdHRvbVxuXHRcdFx0eDIsIHkxLCB6RGVwdGgsXG5cdFx0XHQvLyByaWdodCB0b3Bcblx0XHRcdHgyLCB5MiwgekRlcHRoLFxuXG5cdFx0XHQvLyBsZWZ0IHRvcFxuXHRcdFx0eDEsIHkyLCB6RGVwdGgsXG5cdFx0XHQvLyBsZWZ0IGJvdHRvbVxuXHRcdFx0eDEsIHkxLCB6RGVwdGgsXG5cdFx0XHQvLyByaWdodCBib3R0b21cblx0XHRcdHgyLCB5MSwgekRlcHRoKTtcblxuXHRcdFx0eDEgPSB4MiArICh3aWR0aCAtIHdpZHRoICogMS44KSAvIHJhdGlvO1xuXHRcdH1cblxuXHR9O1xuXHRfLmdldENhbnZhcyA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmN0eC5jYW52YXM7XG5cdH07XG5cdF8uZ2V0SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0Q2FudmFzKCkuaGVpZ2h0O1xuXHR9O1xuXHRfLmdldFdpZHRoID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0Q2FudmFzKCkud2lkdGg7XG5cdH07XG5cdF8udGV4dFdpZHRoID0gZnVuY3Rpb24odGV4dCkge1xuXHRcdHJldHVybiB0aGlzLmN0eC5tZWFzdXJlVGV4dCh0ZXh0KS53aWR0aDtcblx0fTtcblx0Xy50ZXN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmdldENhbnZhcygpKTtcblx0fTtcblx0Xy51c2VUZXh0dXJlID0gZnVuY3Rpb24oZ2wpIHtcblx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLnRleHR1cmVJbWFnZSk7XG5cdH07XG5cbn0pKGQzLCBleHRlbnNpb25zLCBkb2N1bWVudCwgd2luZG93KTtcblxuKGZ1bmN0aW9uKGQzLCBtLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRkMy5UZXh0TWVzaCA9IGZ1bmN0aW9uKCkge1xuXHR9O1xuXHR2YXIgXyA9IGQzLlRleHRNZXNoLnByb3RvdHlwZTtcblx0Xy5pbml0ID0gZnVuY3Rpb24oZ2wpIHtcblx0XHQvLyBzZXQgdmVydGV4IGJ1ZmZlclxuXHRcdHRoaXMudmVydGV4UG9zaXRpb25CdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcblx0XHR0aGlzLnZlcnRleFRleENvb3JkQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0dGhpcy52ZXJ0ZXhUcmFuc2xhdGlvbkJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuXHR9O1xuXHRfLnNldFZlcnRleERhdGEgPSBmdW5jdGlvbihnbCwgdmVydGV4QnVmZmVyLCBidWZmZXJEYXRhLCBpdGVtU2l6ZSkge1xuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB2ZXJ0ZXhCdWZmZXIpO1xuXHRcdGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlckRhdGEpLCBnbC5TVEFUSUNfRFJBVyk7XG5cdFx0dmVydGV4QnVmZmVyLml0ZW1TaXplID0gaXRlbVNpemU7XG5cdFx0dmVydGV4QnVmZmVyLm51bUl0ZW1zID0gYnVmZmVyRGF0YS5sZW5ndGggLyBpdGVtU2l6ZTtcblx0fTtcblx0Xy5zdG9yZURhdGEgPSBmdW5jdGlvbihnbCwgdmVydGV4UG9zaXRpb25EYXRhLCB2ZXJ0ZXhUZXhDb29yZERhdGEsIHZlcnRleFRyYW5zbGF0aW9uRGF0YSkge1xuXHRcdHRoaXMuc2V0VmVydGV4RGF0YShnbCwgdGhpcy52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlciwgdmVydGV4UG9zaXRpb25EYXRhLCAzKTtcblx0XHR0aGlzLnNldFZlcnRleERhdGEoZ2wsIHRoaXMudmVydGV4VGV4Q29vcmRCdWZmZXIsIHZlcnRleFRleENvb3JkRGF0YSwgMik7XG5cdFx0dGhpcy5zZXRWZXJ0ZXhEYXRhKGdsLCB0aGlzLnZlcnRleFRyYW5zbGF0aW9uQnVmZmVyLCB2ZXJ0ZXhUcmFuc2xhdGlvbkRhdGEsIDMpO1xuXHR9O1xuXHRfLmJpbmRCdWZmZXJzID0gZnVuY3Rpb24oZ2wpIHtcblx0XHQvLyBwb3NpdGlvbnNcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlcik7XG5cdFx0Z2wudmVydGV4QXR0cmliUG9pbnRlcihnbC5zaGFkZXIudmVydGV4UG9zaXRpb25BdHRyaWJ1dGUsIHRoaXMudmVydGV4UG9zaXRpb25CdWZmZXIuaXRlbVNpemUsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7XG5cblx0XHQvLyB0ZXhDb29yZFxuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnZlcnRleFRleENvb3JkQnVmZmVyKTtcblx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGdsLnNoYWRlci52ZXJ0ZXhUZXhDb29yZEF0dHJpYnV0ZSwgdGhpcy52ZXJ0ZXhUZXhDb29yZEJ1ZmZlci5pdGVtU2l6ZSwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcblxuXHRcdC8vIHRyYW5zbGF0aW9uIGFuZCB6IGRlcHRoXG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMudmVydGV4VHJhbnNsYXRpb25CdWZmZXIpO1xuXHRcdGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoZ2wuc2hhZGVyLnZlcnRleE5vcm1hbEF0dHJpYnV0ZSwgdGhpcy52ZXJ0ZXhUcmFuc2xhdGlvbkJ1ZmZlci5pdGVtU2l6ZSwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcblx0fTtcblx0Xy5yZW5kZXIgPSBmdW5jdGlvbihnbCkge1xuXHRcdHZhciBudW1JdGVtcyA9IHRoaXMudmVydGV4UG9zaXRpb25CdWZmZXIubnVtSXRlbXM7XG5cblx0XHRpZiAoIW51bUl0ZW1zKSB7XG5cdFx0XHQvLyBub3RoaW5nIHRvIGRvIGhlcmVcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLmJpbmRCdWZmZXJzKGdsKTtcblx0XHRnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFUywgMCwgbnVtSXRlbXMpO1xuXHR9O1xuXG59KShkMywgbSk7XG5cbihmdW5jdGlvbihFTEVNRU5ULCBtYXRoLCBkMywgbSwgbTQsIHYzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRkMy5Ub3JzaW9uID0gZnVuY3Rpb24oYTEsIGEyLCBhMywgYTQpIHtcblx0XHR0aGlzLmExID0gYTE7XG5cdFx0dGhpcy5hMiA9IGEyO1xuXHRcdHRoaXMuYTMgPSBhMztcblx0XHR0aGlzLmE0ID0gYTQ7XG5cdH07XG5cdHZhciBfID0gZDMuVG9yc2lvbi5wcm90b3R5cGUgPSBuZXcgZDMuX01lYXN1cmVtZW50KCk7XG5cdF8uY2FsY3VsYXRlRGF0YSA9IGZ1bmN0aW9uKHNwZWNzKSB7XG5cdFx0dmFyIHBvc2l0aW9uRGF0YSA9IFtdO1xuXHRcdHZhciBub3JtYWxEYXRhID0gW107XG5cdFx0dmFyIGluZGV4RGF0YSA9IFtdO1xuXHRcdHZhciBkaXN0MSA9IHRoaXMuYTIuZGlzdGFuY2UzRCh0aGlzLmExKTtcblx0XHR2YXIgZGlzdDIgPSB0aGlzLmEyLmRpc3RhbmNlM0QodGhpcy5hMyk7XG5cdFx0dGhpcy5kaXN0VXNlID0gbS5taW4oZGlzdDEsIGRpc3QyKSAvIDI7XG5cdFx0Ly8gZGF0YSBmb3IgdGhlIGFuZ2xlXG5cdFx0dmFyIGIxID0gWyB0aGlzLmEyLnggLSB0aGlzLmExLngsIHRoaXMuYTIueSAtIHRoaXMuYTEueSwgdGhpcy5hMi56IC0gdGhpcy5hMS56IF07XG5cdFx0dmFyIGIyID0gWyB0aGlzLmEzLnggLSB0aGlzLmEyLngsIHRoaXMuYTMueSAtIHRoaXMuYTIueSwgdGhpcy5hMy56IC0gdGhpcy5hMi56IF07XG5cdFx0dmFyIGIzID0gWyB0aGlzLmE0LnggLSB0aGlzLmEzLngsIHRoaXMuYTQueSAtIHRoaXMuYTMueSwgdGhpcy5hNC56IC0gdGhpcy5hMy56IF07XG5cdFx0dmFyIGNyb3NzMTIgPSB2My5jcm9zcyhiMSwgYjIsIFtdKTtcblx0XHR2YXIgY3Jvc3MyMyA9IHYzLmNyb3NzKGIyLCBiMywgW10pO1xuXHRcdHYzLnNjYWxlKGIxLCB2My5sZW5ndGgoYjIpKTtcblx0XHR0aGlzLnRvcnNpb24gPSBtLmF0YW4yKHYzLmRvdChiMSwgY3Jvc3MyMyksIHYzLmRvdChjcm9zczEyLCBjcm9zczIzKSk7XG5cblx0XHR2YXIgdmVjMSA9IHYzLm5vcm1hbGl6ZSh2My5jcm9zcyhjcm9zczEyLCBiMiwgW10pKTtcblx0XHR2YXIgdmVjMyA9IHYzLm5vcm1hbGl6ZSh2My5jcm9zcyhiMiwgdmVjMSwgW10pKTtcblxuXHRcdHRoaXMucG9zID0gdjMuYWRkKFsgdGhpcy5hMi54LCB0aGlzLmEyLnksIHRoaXMuYTIueiBdLCB2My5zY2FsZSh2My5ub3JtYWxpemUoYjIsIFtdKSwgdGhpcy5kaXN0VXNlKSk7XG5cblx0XHR2YXIgdmVjMCA9IFtdO1xuXG5cdFx0dmFyIGJhbmRzID0gc3BlY3MubWVhc3VyZW1lbnRfYW5nbGVCYW5kc18zRDtcblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPD0gYmFuZHM7ICsraSkge1xuXHRcdFx0dmFyIHRoZXRhID0gdGhpcy50b3JzaW9uICogaSAvIGJhbmRzO1xuXHRcdFx0dmFyIHZlY0NvcyA9IHYzLnNjYWxlKHZlYzEsIG0uY29zKHRoZXRhKSwgW10pO1xuXHRcdFx0dmFyIHZlY1NpbiA9IHYzLnNjYWxlKHZlYzMsIG0uc2luKHRoZXRhKSwgW10pO1xuXHRcdFx0dmFyIG5vcm0gPSB2My5zY2FsZSh2My5ub3JtYWxpemUodjMuYWRkKHZlY0NvcywgdmVjU2luLCBbXSkpLCB0aGlzLmRpc3RVc2UpO1xuXG5cdFx0XHRpZiAoaSA9PSAwKSB7XG5cdFx0XHRcdHZlYzAgPSBub3JtO1xuXHRcdFx0fVxuXG5cdFx0XHRwb3NpdGlvbkRhdGEucHVzaCh0aGlzLnBvc1swXSArIG5vcm1bMF0sIHRoaXMucG9zWzFdICsgbm9ybVsxXSwgdGhpcy5wb3NbMl0gKyBub3JtWzJdKTtcblx0XHRcdG5vcm1hbERhdGEucHVzaCgwLCAwLCAwKTtcblx0XHRcdGlmIChpIDwgYmFuZHMpIHtcblx0XHRcdFx0aW5kZXhEYXRhLnB1c2goaSwgaSArIDEpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMudmVjVGV4dCA9IHYzLm5vcm1hbGl6ZSh2My5hZGQodmVjMCwgbm9ybSwgW10pKTtcblx0XHRcblx0XHR2YXIgYXJyb3dMZW5ndGggPSAwLjI1O1xuXHRcdHZhciBiMk5vcm0gPSB2My5ub3JtYWxpemUoYjIsIFtdKTtcblx0XHR2My5zY2FsZShiMk5vcm0sIGFycm93TGVuZ3RoIC8gNCk7XG5cblx0XHR2YXIgdGhldGEgPSB0aGlzLnRvcnNpb24gLSBtLmFzaW4oYXJyb3dMZW5ndGggLyAyKSAqIDIgKiB0aGlzLnRvcnNpb24gLyBtLmFicyh0aGlzLnRvcnNpb24pO1xuXHRcdHZhciB2ZWNDb3MgPSB2My5zY2FsZSh2ZWMxLCBtLmNvcyh0aGV0YSksIFtdKTtcblx0XHR2YXIgdmVjU2luID0gdjMuc2NhbGUodmVjMywgbS5zaW4odGhldGEpLCBbXSk7XG5cdFx0dmFyIG5vcm0gPSB2My5zY2FsZSh2My5ub3JtYWxpemUodjMuYWRkKHZlY0NvcywgdmVjU2luLCBbXSkpLCB0aGlzLmRpc3RVc2UpO1xuXG5cdFx0cG9zaXRpb25EYXRhLnB1c2godGhpcy5wb3NbMF0gKyBiMk5vcm1bMF0gKyBub3JtWzBdLCB0aGlzLnBvc1sxXSArIGIyTm9ybVsxXSArIG5vcm1bMV0sIHRoaXMucG9zWzJdICsgYjJOb3JtWzJdICsgbm9ybVsyXSk7XG5cdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDAsIDApO1xuXG5cdFx0cG9zaXRpb25EYXRhLnB1c2godGhpcy5wb3NbMF0gLSBiMk5vcm1bMF0gKyBub3JtWzBdLCB0aGlzLnBvc1sxXSAtIGIyTm9ybVsxXSArIG5vcm1bMV0sIHRoaXMucG9zWzJdIC0gYjJOb3JtWzJdICsgbm9ybVsyXSk7XG5cdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDAsIDApO1xuXG5cdFx0aW5kZXhEYXRhLnB1c2goLS1pLCBpICsgMSwgaSwgaSArIDIpO1xuXG5cdFx0dGhpcy5zdG9yZURhdGEocG9zaXRpb25EYXRhLCBub3JtYWxEYXRhLCBpbmRleERhdGEpO1xuXHR9O1xuXHRfLmdldFRleHQgPSBmdW5jdGlvbihzcGVjcykge1xuXHRcdHYzLmFkZCh0aGlzLnBvcywgdjMuc2NhbGUodGhpcy52ZWNUZXh0LCB0aGlzLmRpc3RVc2UgKyAwLjMsIFtdKSk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0cG9zIDogdGhpcy5wb3MsXG5cdFx0XHR2YWx1ZSA6IFsgbWF0aC5hbmdsZUJvdW5kcyh0aGlzLnRvcnNpb24sIHRydWUsIHRydWUpLnRvRml4ZWQoMiksICcgXFx1MDBiMCcgXS5qb2luKCcnKVxuXHRcdH07XG5cdH07XG5cbn0pKEVMRU1FTlQsIG1hdGgsIGQzLCBtLCBtNCwgdjMpO1xuXG4oZnVuY3Rpb24oZXh0ZW5zaW9ucywgUkVTSURVRSwgZDMsIG0sIG00LCB2MywgbWF0aCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0dmFyIGxvYWRQYXJ0aXRpb24gPSBmdW5jdGlvbihnbCwgcCkge1xuXHRcdC8vIHBvc2l0aW9uc1xuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBwLnZlcnRleFBvc2l0aW9uQnVmZmVyKTtcblx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGdsLnNoYWRlci52ZXJ0ZXhQb3NpdGlvbkF0dHJpYnV0ZSwgcC52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5pdGVtU2l6ZSwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcblx0XHQvLyBub3JtYWxzXG5cdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHAudmVydGV4Tm9ybWFsQnVmZmVyKTtcblx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGdsLnNoYWRlci52ZXJ0ZXhOb3JtYWxBdHRyaWJ1dGUsIHAudmVydGV4Tm9ybWFsQnVmZmVyLml0ZW1TaXplLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuXHRcdC8vIGluZGV4ZXNcblx0XHRnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBwLnZlcnRleEluZGV4QnVmZmVyKTtcblx0fTtcblxuXHR2YXIgUG9pbnRSb3RhdG9yID0gZnVuY3Rpb24ocG9pbnQsIGF4aXMsIGFuZ2xlKSB7XG5cdFx0dmFyIGQgPSBtLnNxcnQoYXhpc1sxXSAqIGF4aXNbMV0gKyBheGlzWzJdICogYXhpc1syXSk7XG5cdFx0dmFyIFJ4ID0gWyAxLCAwLCAwLCAwLCAwLCBheGlzWzJdIC8gZCwgLWF4aXNbMV0gLyBkLCAwLCAwLCBheGlzWzFdIC8gZCwgYXhpc1syXSAvIGQsIDAsIDAsIDAsIDAsIDEgXTtcblx0XHR2YXIgUnhUID0gWyAxLCAwLCAwLCAwLCAwLCBheGlzWzJdIC8gZCwgYXhpc1sxXSAvIGQsIDAsIDAsIC1heGlzWzFdIC8gZCwgYXhpc1syXSAvIGQsIDAsIDAsIDAsIDAsIDEgXTtcblx0XHR2YXIgUnkgPSBbIGQsIDAsIC1heGlzWzBdLCAwLCAwLCAxLCAwLCAwLCBheGlzWzBdLCAwLCBkLCAwLCAwLCAwLCAwLCAxIF07XG5cdFx0dmFyIFJ5VCA9IFsgZCwgMCwgYXhpc1swXSwgMCwgMCwgMSwgMCwgMCwgLWF4aXNbMF0sIDAsIGQsIDAsIDAsIDAsIDAsIDEgXTtcblx0XHR2YXIgUnogPSBbIG0uY29zKGFuZ2xlKSwgLW0uc2luKGFuZ2xlKSwgMCwgMCwgbS5zaW4oYW5nbGUpLCBtLmNvcyhhbmdsZSksIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEgXTtcblx0XHR2YXIgbWF0cml4ID0gbTQubXVsdGlwbHkoUngsIG00Lm11bHRpcGx5KFJ5LCBtNC5tdWx0aXBseShSeiwgbTQubXVsdGlwbHkoUnlULCBSeFQsIFtdKSkpKTtcblx0XHR0aGlzLnJvdGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIG00Lm11bHRpcGx5VmVjMyhtYXRyaXgsIHBvaW50KTtcblx0XHR9O1xuXHR9O1xuXG5cdGQzLlR1YmUgPSBmdW5jdGlvbihjaGFpbiwgdGhpY2tuZXNzLCBjeWxpbmRlclJlc29sdXRpb24pIHtcblx0XHR2YXIgbGluZVNlZ21lbnROdW0gPSBjaGFpblswXS5saW5lU2VnbWVudHNbMF0ubGVuZ3RoO1xuXHRcdHRoaXMucGFydGl0aW9ucyA9IFtdO1xuXHRcdHZhciBjdXJyZW50UGFydGl0aW9uO1xuXHRcdHRoaXMuZW5kcyA9IFtdO1xuXHRcdHRoaXMuZW5kcy5wdXNoKGNoYWluWzBdLmxpbmVTZWdtZW50c1swXVswXSk7XG5cdFx0dGhpcy5lbmRzLnB1c2goY2hhaW5bY2hhaW4ubGVuZ3RoIC0gMV0ubGluZVNlZ21lbnRzWzBdWzBdKTtcblx0XHQvLyBjYWxjdWxhdGUgdmVydGV4IGFuZCBub3JtYWwgcG9pbnRzXG5cdFx0dmFyIGxhc3QgPSBbIDEsIDAsIDAgXTtcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gY2hhaW4ubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0aWYgKCFjdXJyZW50UGFydGl0aW9uIHx8IGN1cnJlbnRQYXJ0aXRpb24ucG9zaXRpb25EYXRhLmxlbmd0aCA+IDY1MDAwKSB7XG5cdFx0XHRcdGlmICh0aGlzLnBhcnRpdGlvbnMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdGktLTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjdXJyZW50UGFydGl0aW9uID0ge1xuXHRcdFx0XHRcdGNvdW50IDogMCxcblx0XHRcdFx0XHRwb3NpdGlvbkRhdGEgOiBbXSxcblx0XHRcdFx0XHRub3JtYWxEYXRhIDogW10sXG5cdFx0XHRcdFx0aW5kZXhEYXRhIDogW11cblx0XHRcdFx0fTtcblx0XHRcdFx0dGhpcy5wYXJ0aXRpb25zLnB1c2goY3VycmVudFBhcnRpdGlvbik7XG5cdFx0XHR9XG5cdFx0XHR2YXIgcmVzaWR1ZSA9IGNoYWluW2ldO1xuXHRcdFx0Y3VycmVudFBhcnRpdGlvbi5jb3VudCsrO1xuXHRcdFx0dmFyIG1pbiA9IEluZmluaXR5O1xuXHRcdFx0dmFyIHAgPSBuZXcgQXRvbSgnJywgY2hhaW5baV0uY3AxLngsIGNoYWluW2ldLmNwMS55LCBjaGFpbltpXS5jcDEueik7XG5cdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCBsaW5lU2VnbWVudE51bTsgaisrKSB7XG5cdFx0XHRcdHZhciBjdXJyZW50UG9pbnQgPSByZXNpZHVlLmxpbmVTZWdtZW50c1swXVtqXTtcblx0XHRcdFx0dmFyIG5leHRQb2ludDtcblx0XHRcdFx0aWYgKGogPT09IGxpbmVTZWdtZW50TnVtIC0gMSkge1xuXHRcdFx0XHRcdGlmIChpID09PSBjaGFpbi5sZW5ndGggLSAxKSB7XG5cdFx0XHRcdFx0XHRuZXh0UG9pbnQgPSByZXNpZHVlLmxpbmVTZWdtZW50c1swXVtqIC0gMV07XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdG5leHRQb2ludCA9IGNoYWluW2kgKyAxXS5saW5lU2VnbWVudHNbMF1bMF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG5leHRQb2ludCA9IHJlc2lkdWUubGluZVNlZ21lbnRzWzBdW2ogKyAxXTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgYXhpcyA9IFsgbmV4dFBvaW50LnggLSBjdXJyZW50UG9pbnQueCwgbmV4dFBvaW50LnkgLSBjdXJyZW50UG9pbnQueSwgbmV4dFBvaW50LnogLSBjdXJyZW50UG9pbnQueiBdO1xuXHRcdFx0XHR2My5ub3JtYWxpemUoYXhpcyk7XG5cdFx0XHRcdGlmIChpID09PSBjaGFpbi5sZW5ndGggLSAxICYmIGogPT09IGxpbmVTZWdtZW50TnVtIC0gMSkge1xuXHRcdFx0XHRcdHYzLnNjYWxlKGF4aXMsIC0xKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgc3RhcnRWZWN0b3IgPSB2My5jcm9zcyhheGlzLCBsYXN0LCBbXSk7XG5cdFx0XHRcdHYzLm5vcm1hbGl6ZShzdGFydFZlY3Rvcik7XG5cdFx0XHRcdHYzLnNjYWxlKHN0YXJ0VmVjdG9yLCB0aGlja25lc3MgLyAyKTtcblx0XHRcdFx0dmFyIHJvdGF0b3IgPSBuZXcgUG9pbnRSb3RhdG9yKHN0YXJ0VmVjdG9yLCBheGlzLCAyICogbS5QSSAvIGN5bGluZGVyUmVzb2x1dGlvbik7XG5cdFx0XHRcdGZvciAoIHZhciBrID0gMCwga2sgPSBjeWxpbmRlclJlc29sdXRpb247IGsgPCBrazsgaysrKSB7XG5cdFx0XHRcdFx0dmFyIHVzZSA9IHJvdGF0b3Iucm90YXRlKCk7XG5cdFx0XHRcdFx0aWYgKGsgPT09IG0uZmxvb3IoY3lsaW5kZXJSZXNvbHV0aW9uIC8gNCkpIHtcblx0XHRcdFx0XHRcdGxhc3QgPSBbIHVzZVswXSwgdXNlWzFdLCB1c2VbMl0gXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y3VycmVudFBhcnRpdGlvbi5ub3JtYWxEYXRhLnB1c2godXNlWzBdLCB1c2VbMV0sIHVzZVsyXSk7XG5cdFx0XHRcdFx0Y3VycmVudFBhcnRpdGlvbi5wb3NpdGlvbkRhdGEucHVzaChjdXJyZW50UG9pbnQueCArIHVzZVswXSwgY3VycmVudFBvaW50LnkgKyB1c2VbMV0sIGN1cnJlbnRQb2ludC56ICsgdXNlWzJdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBmaW5kIGNsb3Nlc3QgcG9pbnQgdG8gYXR0YWNoIHN0aWNrIHRvXG5cdFx0XHRcdGlmIChwKSB7XG5cdFx0XHRcdFx0dmFyIGRpc3QgPSBjdXJyZW50UG9pbnQuZGlzdGFuY2UzRChwKTtcblx0XHRcdFx0XHRpZiAoZGlzdCA8IG1pbikge1xuXHRcdFx0XHRcdFx0bWluID0gZGlzdDtcblx0XHRcdFx0XHRcdGNoYWluW2ldLnBQb2ludCA9IGN1cnJlbnRQb2ludDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBidWlsZCBtZXNoIGNvbm5lY3Rpdml0eVxuXHRcdGZvciAoIHZhciBuID0gMCwgbm4gPSB0aGlzLnBhcnRpdGlvbnMubGVuZ3RoOyBuIDwgbm47IG4rKykge1xuXHRcdFx0dmFyIGN1cnJlbnRQYXJ0aXRpb24gPSB0aGlzLnBhcnRpdGlvbnNbbl07XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gY3VycmVudFBhcnRpdGlvbi5jb3VudCAtIDE7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBpbmRleFN0YXJ0ID0gaSAqIGxpbmVTZWdtZW50TnVtICogY3lsaW5kZXJSZXNvbHV0aW9uO1xuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gbGluZVNlZ21lbnROdW07IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIHNlZ21lbnRJbmRleFN0YXJ0ID0gaW5kZXhTdGFydCArIGogKiBjeWxpbmRlclJlc29sdXRpb247XG5cdFx0XHRcdFx0Zm9yICggdmFyIGsgPSAwOyBrIDwgY3lsaW5kZXJSZXNvbHV0aW9uOyBrKyspIHtcblx0XHRcdFx0XHRcdHZhciBuZXh0ID0gMTtcblx0XHRcdFx0XHRcdHZhciBzayA9IHNlZ21lbnRJbmRleFN0YXJ0ICsgaztcblx0XHRcdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24uaW5kZXhEYXRhLnB1c2goc2spO1xuXHRcdFx0XHRcdFx0Y3VycmVudFBhcnRpdGlvbi5pbmRleERhdGEucHVzaChzayArIGN5bGluZGVyUmVzb2x1dGlvbik7XG5cdFx0XHRcdFx0XHRjdXJyZW50UGFydGl0aW9uLmluZGV4RGF0YS5wdXNoKHNrICsgY3lsaW5kZXJSZXNvbHV0aW9uICsgbmV4dCk7XG5cdFx0XHRcdFx0XHRjdXJyZW50UGFydGl0aW9uLmluZGV4RGF0YS5wdXNoKHNrKTtcblx0XHRcdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24uaW5kZXhEYXRhLnB1c2goc2sgKyBjeWxpbmRlclJlc29sdXRpb24gKyBuZXh0KTtcblx0XHRcdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24uaW5kZXhEYXRhLnB1c2goc2sgKyBuZXh0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnN0b3JlRGF0YSh0aGlzLnBhcnRpdGlvbnNbMF0ucG9zaXRpb25EYXRhLCB0aGlzLnBhcnRpdGlvbnNbMF0ubm9ybWFsRGF0YSwgdGhpcy5wYXJ0aXRpb25zWzBdLmluZGV4RGF0YSk7XG5cblx0XHR2YXIgcHMgPSBbIG5ldyBQb2ludCgyLCAwKSBdO1xuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDYwOyBpKyspIHtcblx0XHRcdHZhciBhbmcgPSBpIC8gNjAgKiBtLlBJO1xuXHRcdFx0cHMucHVzaChuZXcgUG9pbnQoMiAqIG0uY29zKGFuZyksIC0yICogbS5zaW4oYW5nKSkpO1xuXHRcdH1cblx0XHRwcy5wdXNoKG5ldyBQb2ludCgtMiwgMCksIG5ldyBQb2ludCgtMiwgNCksIG5ldyBQb2ludCgyLCA0KSk7XG5cdFx0dmFyIHBsYXRmb3JtID0gbmV3IGQzLlNoYXBlKHBzLCAxKTtcblxuXHRcdHRoaXMucmVuZGVyID0gZnVuY3Rpb24oZ2wsIHNwZWNzKSB7XG5cdFx0XHQvLyBkcmF3IHR1YmVcblx0XHRcdHRoaXMuYmluZEJ1ZmZlcnMoZ2wpO1xuXHRcdFx0Ly8gY29sb3JzXG5cdFx0XHRnbC5tYXRlcmlhbC5zZXREaWZmdXNlQ29sb3IoZ2wsIHNwZWNzLm1hY3JvX2NvbG9yQnlDaGFpbiA/IHRoaXMuY2hhaW5Db2xvciA6IHNwZWNzLm51Y2xlaWNzX3R1YmVDb2xvcik7XG5cdFx0XHQvLyByZW5kZXJcblx0XHRcdGdsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRVMsIHRoaXMudmVydGV4SW5kZXhCdWZmZXIubnVtSXRlbXMsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcblx0XHRcdGlmICh0aGlzLnBhcnRpdGlvbnMpIHtcblx0XHRcdFx0Zm9yICggdmFyIGkgPSAxLCBpaSA9IHRoaXMucGFydGl0aW9ucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdFx0dmFyIHAgPSB0aGlzLnBhcnRpdGlvbnNbaV07XG5cdFx0XHRcdFx0bG9hZFBhcnRpdGlvbihnbCwgcCk7XG5cdFx0XHRcdFx0Ly8gcmVuZGVyXG5cdFx0XHRcdFx0Z2wuZHJhd0VsZW1lbnRzKGdsLlRSSUFOR0xFUywgcC52ZXJ0ZXhJbmRleEJ1ZmZlci5udW1JdGVtcywgZ2wuVU5TSUdORURfU0hPUlQsIDApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGRyYXcgZW5kc1xuXHRcdFx0Z2wuc3BoZXJlQnVmZmVyLmJpbmRCdWZmZXJzKGdsKTtcblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDI7IGkrKykge1xuXHRcdFx0XHR2YXIgcCA9IHRoaXMuZW5kc1tpXTtcblx0XHRcdFx0dmFyIHRyYW5zZm9ybSA9IG00LnRyYW5zbGF0ZShtNC5pZGVudGl0eSgpLCBbIHAueCwgcC55LCBwLnogXSk7XG5cdFx0XHRcdHZhciByYWRpdXMgPSB0aGlja25lc3MgLyAyO1xuXHRcdFx0XHRtNC5zY2FsZSh0cmFuc2Zvcm0sIFsgcmFkaXVzLCByYWRpdXMsIHJhZGl1cyBdKTtcblx0XHRcdFx0Ly8gcmVuZGVyXG5cdFx0XHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCwgdHJhbnNmb3JtKTtcblx0XHRcdFx0Z2wuZHJhd0VsZW1lbnRzKGdsLlRSSUFOR0xFUywgZ2wuc3BoZXJlQnVmZmVyLnZlcnRleEluZGV4QnVmZmVyLm51bUl0ZW1zLCBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGRyYXcgbnVjbGVvdGlkZSBoYW5kbGVzXG5cdFx0XHRnbC5jeWxpbmRlckJ1ZmZlci5iaW5kQnVmZmVycyhnbCk7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gY2hhaW4ubGVuZ3RoIC0gMTsgaSA8IGlpOyBpKyspIHtcblx0XHRcdFx0dmFyIHJlc2lkdWUgPSBjaGFpbltpXTtcblx0XHRcdFx0dmFyIHAxID0gcmVzaWR1ZS5wUG9pbnQ7XG5cdFx0XHRcdHZhciBwMiA9IG5ldyBBdG9tKCcnLCByZXNpZHVlLmNwMi54LCByZXNpZHVlLmNwMi55LCByZXNpZHVlLmNwMi56KTtcblx0XHRcdFx0dmFyIGhlaWdodCA9IDEuMDAxICogcDEuZGlzdGFuY2UzRChwMik7XG5cdFx0XHRcdHZhciBzY2FsZVZlY3RvciA9IFsgdGhpY2tuZXNzIC8gNCwgaGVpZ2h0LCB0aGlja25lc3MgLyA0IF07XG5cdFx0XHRcdHZhciB0cmFuc2Zvcm0gPSBtNC50cmFuc2xhdGUobTQuaWRlbnRpdHkoKSwgWyBwMS54LCBwMS55LCBwMS56IF0pO1xuXHRcdFx0XHR2YXIgeSA9IFsgMCwgMSwgMCBdO1xuXHRcdFx0XHR2YXIgYW5nID0gMDtcblx0XHRcdFx0dmFyIGF4aXM7XG5cdFx0XHRcdHZhciBhMmIgPSBbIHAyLnggLSBwMS54LCBwMi55IC0gcDEueSwgcDIueiAtIHAxLnogXTtcblx0XHRcdFx0aWYgKHAxLnggPT09IHAyLnggJiYgcDEueiA9PT0gcDIueikge1xuXHRcdFx0XHRcdGF4aXMgPSBbIDAsIDAsIDEgXTtcblx0XHRcdFx0XHRpZiAocDEueSA8IHAxLnkpIHtcblx0XHRcdFx0XHRcdGFuZyA9IG0uUEk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGFuZyA9IGV4dGVuc2lvbnMudmVjM0FuZ2xlRnJvbSh5LCBhMmIpO1xuXHRcdFx0XHRcdGF4aXMgPSB2My5jcm9zcyh5LCBhMmIsIFtdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoYW5nICE9PSAwKSB7XG5cdFx0XHRcdFx0bTQucm90YXRlKHRyYW5zZm9ybSwgYW5nLCBheGlzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRtNC5zY2FsZSh0cmFuc2Zvcm0sIHNjYWxlVmVjdG9yKTtcblx0XHRcdFx0Z2wuc2hhZGVyLnNldE1hdHJpeFVuaWZvcm1zKGdsLCB0cmFuc2Zvcm0pO1xuXHRcdFx0XHRnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCBnbC5jeWxpbmRlckJ1ZmZlci52ZXJ0ZXhQb3NpdGlvbkJ1ZmZlci5udW1JdGVtcyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGRyYXcgbnVjbGVvdGlkZSBwbGF0Zm9ybXNcblx0XHRcdHBsYXRmb3JtLmJpbmRCdWZmZXJzKGdsKTtcblx0XHRcdC8vIGNvbG9yc1xuXHRcdFx0aWYgKHNwZWNzLm51Y2xlaWNzX3Jlc2lkdWVDb2xvciA9PT0gJ25vbmUnICYmICFzcGVjcy5tYWNyb19jb2xvckJ5Q2hhaW4pIHtcblx0XHRcdFx0Z2wubWF0ZXJpYWwuc2V0RGlmZnVzZUNvbG9yKGdsLCBzcGVjcy5udWNsZWljc19iYXNlQ29sb3IpO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IGNoYWluLmxlbmd0aCAtIDE7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciByZXNpZHVlID0gY2hhaW5baV07XG5cdFx0XHRcdHZhciBwMiA9IHJlc2lkdWUuY3AyO1xuXHRcdFx0XHR2YXIgdHJhbnNmb3JtID0gbTQudHJhbnNsYXRlKG00LmlkZW50aXR5KCksIFsgcDIueCwgcDIueSwgcDIueiBdKTtcblx0XHRcdFx0Ly8gcm90YXRlIHRvIGRpcmVjdGlvblxuXHRcdFx0XHR2YXIgeSA9IFsgMCwgMSwgMCBdO1xuXHRcdFx0XHR2YXIgYW5nID0gMDtcblx0XHRcdFx0dmFyIGF4aXM7XG5cdFx0XHRcdHZhciBwMyA9IHJlc2lkdWUuY3AzO1xuXHRcdFx0XHRpZihwMyl7XG5cdFx0XHRcdFx0dmFyIGEyYiA9IFsgcDMueCAtIHAyLngsIHAzLnkgLSBwMi55LCBwMy56IC0gcDIueiBdO1xuXHRcdFx0XHRcdGlmIChwMi54ID09PSBwMy54ICYmIHAyLnogPT09IHAzLnopIHtcblx0XHRcdFx0XHRcdGF4aXMgPSBbIDAsIDAsIDEgXTtcblx0XHRcdFx0XHRcdGlmIChwMi55IDwgcDIueSkge1xuXHRcdFx0XHRcdFx0XHRhbmcgPSBtLlBJO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRhbmcgPSBleHRlbnNpb25zLnZlYzNBbmdsZUZyb20oeSwgYTJiKTtcblx0XHRcdFx0XHRcdGF4aXMgPSB2My5jcm9zcyh5LCBhMmIsIFtdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGFuZyAhPT0gMCkge1xuXHRcdFx0XHRcdFx0bTQucm90YXRlKHRyYW5zZm9ybSwgYW5nLCBheGlzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gcm90YXRlIHRvIG9yaWVudGF0aW9uXG5cdFx0XHRcdFx0dmFyIHggPSBbIDEsIDAsIDAgXTtcblx0XHRcdFx0XHR2YXIgck0gPSBtNC5yb3RhdGUobTQuaWRlbnRpdHkoW10pLCBhbmcsIGF4aXMpO1xuXHRcdFx0XHRcdG00Lm11bHRpcGx5VmVjMyhyTSwgeCk7XG5cdFx0XHRcdFx0dmFyIHA0ID0gcmVzaWR1ZS5jcDQ7XG5cdFx0XHRcdFx0dmFyIHA1ID0gcmVzaWR1ZS5jcDU7XG5cdFx0XHRcdFx0aWYgKCEocDQueSA9PT0gcDUueSAmJiBwNC56ID09PSBwNS56KSkge1xuXHRcdFx0XHRcdFx0dmFyIHBpdm90ID0gWyBwNS54IC0gcDQueCwgcDUueSAtIHA0LnksIHA1LnogLSBwNC56IF07XG5cdFx0XHRcdFx0XHR2YXIgYW5nMiA9IGV4dGVuc2lvbnMudmVjM0FuZ2xlRnJvbSh4LCBwaXZvdCk7XG5cdFx0XHRcdFx0XHRpZiAodjMuZG90KGEyYiwgdjMuY3Jvc3MoeCwgcGl2b3QpKSA8IDApIHtcblx0XHRcdFx0XHRcdFx0YW5nMiAqPSAtMTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG00LnJvdGF0ZVkodHJhbnNmb3JtLCBhbmcyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gY29sb3Jcblx0XHRcdFx0XHRpZiAoIXNwZWNzLm1hY3JvX2NvbG9yQnlDaGFpbikge1xuXHRcdFx0XHRcdFx0aWYgKHNwZWNzLm51Y2xlaWNzX3Jlc2lkdWVDb2xvciA9PT0gJ3NoYXBlbHknKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChSRVNJRFVFW3Jlc2lkdWUubmFtZV0pIHtcblx0XHRcdFx0XHRcdFx0XHRnbC5tYXRlcmlhbC5zZXREaWZmdXNlQ29sb3IoZ2wsIFJFU0lEVUVbcmVzaWR1ZS5uYW1lXS5zaGFwZWx5Q29sb3IpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGdsLm1hdGVyaWFsLnNldERpZmZ1c2VDb2xvcihnbCwgUkVTSURVRVsnKiddLnNoYXBlbHlDb2xvcik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoc3BlY3MubnVjbGVpY3NfcmVzaWR1ZUNvbG9yID09PSAncmFpbmJvdycpIHtcblx0XHRcdFx0XHRcdFx0Z2wubWF0ZXJpYWwuc2V0RGlmZnVzZUNvbG9yKGdsLCBtYXRoLnJhaW5ib3dBdChpLCBpaSwgc3BlY3MubWFjcm9fcmFpbmJvd0NvbG9ycykpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyByZW5kZXJcblx0XHRcdFx0XHRnbC5zaGFkZXIuc2V0TWF0cml4VW5pZm9ybXMoZ2wsIHRyYW5zZm9ybSk7XG5cdFx0XHRcdFx0Z2wuZHJhd0VsZW1lbnRzKGdsLlRSSUFOR0xFUywgcGxhdGZvcm0udmVydGV4SW5kZXhCdWZmZXIubnVtSXRlbXMsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fTtcblx0fTtcblx0ZDMuVHViZS5wcm90b3R5cGUgPSBuZXcgZDMuX01lc2goKTtcblxuXHRkMy5DYXRtdWxsVHViZSA9IGZ1bmN0aW9uKGNoYWlucywgdGhpY2tuZXNzLCBjeWxpbmRlclJlc29sdXRpb24sIGhvcml6b250YWxSZXNvbHV0aW9uKSB7XG5cdFx0dmFyIGNoYWluID0gW107XG5cdFx0Y2hhaW5zLnB1c2goY2hhaW5zW2NoYWlucy5sZW5ndGggLSAxXSk7XG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IGNoYWlucy5sZW5ndGggLSAyOyBpIDw9IGlpOyBpKyspIHtcblx0XHRcdHZhciBwMCA9IGNoYWluc1tpID09IDAgPyAwIDogaSAtIDFdO1xuXHRcdFx0dmFyIHAxID0gY2hhaW5zW2kgKyAwXTtcblx0XHRcdHZhciBwMiA9IGNoYWluc1tpICsgMV07XG5cdFx0XHR2YXIgcDMgPSBjaGFpbnNbaSA9PSBpaSA/IGkgKyAxIDogaSArIDJdO1xuXG5cdFx0XHR2YXIgc2VnbWVudHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGhvcml6b250YWxSZXNvbHV0aW9uOyBqKyspIHtcblxuXHRcdFx0XHR2YXIgdCA9IGogLyBob3Jpem9udGFsUmVzb2x1dGlvbjtcblx0XHRcdFx0aWYoaSA9PSBpaSkge1xuXHRcdFx0XHRcdHQgPSBqIC8gKGhvcml6b250YWxSZXNvbHV0aW9uLTEpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHggPSAwLjUgKiAoKDIgKiBwMS54KSArXG4gICAgICAgICAgICAgICAgICAgICAgKHAyLnggLSBwMC54KSAqIHQgK1xuICAgICAgICAgICAgICAgICAgICAgICgyKnAwLnggLSA1KnAxLnggKyA0KnAyLnggLSBwMy54KSAqIHQgKiB0ICtcbiAgICAgICAgICAgICAgICAgICAgICAoMypwMS54IC0gcDAueCAtIDMgKiBwMi54ICsgcDMueCkgKiB0ICogdCAqIHQpO1xuXHRcdFx0XHR2YXIgeSA9IDAuNSAqICgoMiAqIHAxLnkpICtcbiAgICAgICAgICAgICAgICAgICAgICAocDIueSAtIHAwLnkpICogdCArXG4gICAgICAgICAgICAgICAgICAgICAgKDIqcDAueSAtIDUqcDEueSArIDQqcDIueSAtIHAzLnkpICogdCAqIHQgK1xuICAgICAgICAgICAgICAgICAgICAgICgzKnAxLnkgLXAwLnkgLSAzICogcDIueSArIHAzLnkpICogdCAqIHQgKiB0KTtcblx0XHRcdFx0dmFyIHogPSAwLjUgKiAoKDIgKiBwMS56KSArXG4gICAgICAgICAgICAgICAgICAgICAgKHAyLnogLSBwMC56KSAqIHQgK1xuICAgICAgICAgICAgICAgICAgICAgICgyKnAwLnogLSA1KnAxLnogKyA0KnAyLnogLSBwMy56KSAqIHQgKiB0ICtcbiAgICAgICAgICAgICAgICAgICAgICAoMypwMS56IC1wMC56IC0gMyAqIHAyLnogKyBwMy56KSAqIHQgKiB0ICogdCk7XG5cblx0XHRcdFx0dmFyIG8gPSBuZXcgQXRvbSgnQycsIHgsIHksIHopO1xuXHRcdFx0XHRzZWdtZW50cy5wdXNoKG8pO1xuXHRcdFx0fVxuXG5cdFx0XHRjaGFpbi5wdXNoKHNlZ21lbnRzKTtcblx0XHR9XG5cblx0XHR2YXIgbGluZVNlZ21lbnROdW0gPSBjaGFpblswXS5sZW5ndGg7XG5cdFx0dGhpcy5wYXJ0aXRpb25zID0gW107XG5cdFx0dmFyIGN1cnJlbnRQYXJ0aXRpb247XG5cdFx0dGhpcy5lbmRzID0gW107XG5cdFx0dGhpcy5lbmRzLnB1c2goY2hhaW5bMF1bMF0pO1xuXHRcdHRoaXMuZW5kcy5wdXNoKGNoYWluW2NoYWluLmxlbmd0aCAtIDFdWzBdKTtcblxuXHRcdC8vIGNhbGN1bGF0ZSB2ZXJ0ZXggYW5kIG5vcm1hbCBwb2ludHNcblx0XHR2YXIgbGFzdCA9IFsgMSwgMCwgMCBdO1xuXHRcdGZvciAoIHZhciBpID0gMCwgaWkgPSBjaGFpbi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRpZiAoIWN1cnJlbnRQYXJ0aXRpb24gfHwgY3VycmVudFBhcnRpdGlvbi5wb3NpdGlvbkRhdGEubGVuZ3RoID4gNjUwMDApIHtcblx0XHRcdFx0aWYgKHRoaXMucGFydGl0aW9ucy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0aS0tO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24gPSB7XG5cdFx0XHRcdFx0Y291bnQgOiAwLFxuXHRcdFx0XHRcdHBvc2l0aW9uRGF0YSA6IFtdLFxuXHRcdFx0XHRcdG5vcm1hbERhdGEgOiBbXSxcblx0XHRcdFx0XHRpbmRleERhdGEgOiBbXVxuXHRcdFx0XHR9O1xuXHRcdFx0XHR0aGlzLnBhcnRpdGlvbnMucHVzaChjdXJyZW50UGFydGl0aW9uKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHJlc2lkdWUgPSBjaGFpbltpXTtcblxuXHRcdFx0Y3VycmVudFBhcnRpdGlvbi5jb3VudCsrO1xuXHRcdFx0dmFyIG1pbiA9IEluZmluaXR5O1xuXHRcdFx0Ly8gdmFyIHAgPSBuZXcgQXRvbSgnJywgY2hhaW5baV0uY3AxLngsIGNoYWluW2ldLmNwMS55LCBjaGFpbltpXS5jcDEueik7XG5cdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCBsaW5lU2VnbWVudE51bTsgaisrKSB7XG5cdFx0XHRcdHZhciBjdXJyZW50UG9pbnQgPSByZXNpZHVlW2pdO1xuXHRcdFx0XHR2YXIgbmV4dFBvaW50O1xuXHRcdFx0XHRpZiAoaiA9PT0gbGluZVNlZ21lbnROdW0gLSAxKSB7XG5cdFx0XHRcdFx0aWYgKGkgPT09IGNoYWluLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0XHRcdG5leHRQb2ludCA9IHJlc2lkdWVbaiAtIDFdO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRuZXh0UG9pbnQgPSBjaGFpbltpICsgMV1bMF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG5leHRQb2ludCA9IHJlc2lkdWVbaiArIDFdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGF4aXMgPSBbIG5leHRQb2ludC54IC0gY3VycmVudFBvaW50LngsIG5leHRQb2ludC55IC0gY3VycmVudFBvaW50LnksIG5leHRQb2ludC56IC0gY3VycmVudFBvaW50LnogXTtcblx0XHRcdFx0djMubm9ybWFsaXplKGF4aXMpO1xuXHRcdFx0XHRpZiAoaSA9PT0gY2hhaW4ubGVuZ3RoIC0gMSAmJiBqID09PSBsaW5lU2VnbWVudE51bSAtIDEpIHtcblx0XHRcdFx0XHR2My5zY2FsZShheGlzLCAtMSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIHN0YXJ0VmVjdG9yID0gdjMuY3Jvc3MoYXhpcywgbGFzdCwgW10pO1xuXHRcdFx0XHR2My5ub3JtYWxpemUoc3RhcnRWZWN0b3IpO1xuXHRcdFx0XHR2My5zY2FsZShzdGFydFZlY3RvciwgdGhpY2tuZXNzIC8gMik7XG5cdFx0XHRcdHZhciByb3RhdG9yID0gbmV3IFBvaW50Um90YXRvcihzdGFydFZlY3RvciwgYXhpcywgMiAqIG0uUEkgLyBjeWxpbmRlclJlc29sdXRpb24pO1xuXHRcdFx0XHRmb3IgKCB2YXIgayA9IDAsIGtrID0gY3lsaW5kZXJSZXNvbHV0aW9uOyBrIDwga2s7IGsrKykge1xuXHRcdFx0XHRcdHZhciB1c2UgPSByb3RhdG9yLnJvdGF0ZSgpO1xuXHRcdFx0XHRcdGlmIChrID09PSBtLmZsb29yKGN5bGluZGVyUmVzb2x1dGlvbiAvIDQpKSB7XG5cdFx0XHRcdFx0XHRsYXN0ID0gWyB1c2VbMF0sIHVzZVsxXSwgdXNlWzJdIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24ubm9ybWFsRGF0YS5wdXNoKHVzZVswXSwgdXNlWzFdLCB1c2VbMl0pO1xuXHRcdFx0XHRcdGN1cnJlbnRQYXJ0aXRpb24ucG9zaXRpb25EYXRhLnB1c2goY3VycmVudFBvaW50LnggKyB1c2VbMF0sIGN1cnJlbnRQb2ludC55ICsgdXNlWzFdLCBjdXJyZW50UG9pbnQueiArIHVzZVsyXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBidWlsZCBtZXNoIGNvbm5lY3Rpdml0eVxuXHRcdGZvciAoIHZhciBuID0gMCwgbm4gPSB0aGlzLnBhcnRpdGlvbnMubGVuZ3RoOyBuIDwgbm47IG4rKykge1xuXHRcdFx0dmFyIGN1cnJlbnRQYXJ0aXRpb24gPSB0aGlzLnBhcnRpdGlvbnNbbl07XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlpID0gY3VycmVudFBhcnRpdGlvbi5jb3VudCAtIDE7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHRcdHZhciBpbmRleFN0YXJ0ID0gaSAqIGxpbmVTZWdtZW50TnVtICogY3lsaW5kZXJSZXNvbHV0aW9uO1xuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpqID0gbGluZVNlZ21lbnROdW07IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIHNlZ21lbnRJbmRleFN0YXJ0ID0gaW5kZXhTdGFydCArIGogKiBjeWxpbmRlclJlc29sdXRpb247XG5cdFx0XHRcdFx0Zm9yICggdmFyIGsgPSAwOyBrIDw9IGN5bGluZGVyUmVzb2x1dGlvbjsgaysrKSB7XG5cdFx0XHRcdFx0XHR2YXIgc2sgPSBzZWdtZW50SW5kZXhTdGFydCArIGsgJSBjeWxpbmRlclJlc29sdXRpb247XG5cdFx0XHRcdFx0XHRjdXJyZW50UGFydGl0aW9uLmluZGV4RGF0YS5wdXNoKHNrLCBzayArIGN5bGluZGVyUmVzb2x1dGlvbik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9yZURhdGEodGhpcy5wYXJ0aXRpb25zWzBdLnBvc2l0aW9uRGF0YSwgdGhpcy5wYXJ0aXRpb25zWzBdLm5vcm1hbERhdGEsIHRoaXMucGFydGl0aW9uc1swXS5pbmRleERhdGEpO1xuXHR9O1xuXHR2YXIgXyA9IGQzLkNhdG11bGxUdWJlLnByb3RvdHlwZSA9IG5ldyBkMy5fTWVzaCgpO1xuXHRfLnJlbmRlciA9IGZ1bmN0aW9uKGdsLCBzcGVjcykge1xuXHRcdC8vIGRyYXcgdHViZVxuXHRcdHRoaXMuYmluZEJ1ZmZlcnMoZ2wpO1xuXG5cdFx0Ly8gcmVuZGVyXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpaSA9IHRoaXMucGFydGl0aW9ucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgcCA9IHRoaXMucGFydGl0aW9uc1tpXTtcblx0XHRcdGxvYWRQYXJ0aXRpb24oZ2wsIHApO1xuXHRcdFx0Ly8gcmVuZGVyXG5cdFx0XHRnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVfU1RSSVAsIHAudmVydGV4SW5kZXhCdWZmZXIubnVtSXRlbXMsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcblx0XHR9XG5cblx0XHQvLyBkcmF3IGVuZHNcblx0XHRnbC5zcGhlcmVCdWZmZXIuYmluZEJ1ZmZlcnMoZ2wpO1xuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDI7IGkrKykge1xuXHRcdFx0dmFyIHAgPSB0aGlzLmVuZHNbaV07XG5cdFx0XHR2YXIgdHJhbnNmb3JtID0gbTQudHJhbnNsYXRlKG00LmlkZW50aXR5KCksIFsgcC54LCBwLnksIHAueiBdKTtcblx0XHRcdHZhciByYWRpdXMgPSBzcGVjcy5wcm90ZWluc190dWJlVGhpY2tuZXNzIC8gMjtcblx0XHRcdG00LnNjYWxlKHRyYW5zZm9ybSwgWyByYWRpdXMsIHJhZGl1cywgcmFkaXVzIF0pO1xuXHRcdFx0Ly8gcmVuZGVyXG5cdFx0XHRnbC5zaGFkZXIuc2V0TWF0cml4VW5pZm9ybXMoZ2wsIHRyYW5zZm9ybSk7XG5cdFx0XHRnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCBnbC5zcGhlcmVCdWZmZXIudmVydGV4SW5kZXhCdWZmZXIubnVtSXRlbXMsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcblx0XHR9XG5cdH07XG5cbn0pKGV4dGVuc2lvbnMsIFJFU0lEVUUsIGQzLCBtLCBtNCwgdjMsIG1hdGgpO1xuXG4oZnVuY3Rpb24oZDMsIHYzLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRkMy5Vbml0Q2VsbCA9IGZ1bmN0aW9uKHVuaXRDZWxsVmVjdG9ycykge1xuXHRcdHRoaXMudW5pdENlbGwgPSB1bml0Q2VsbFZlY3RvcnM7XG5cdFx0dmFyIHBvc2l0aW9uRGF0YSA9IFtdO1xuXHRcdHZhciBub3JtYWxEYXRhID0gW107XG5cdFx0Ly8gY2FsY3VsYXRlIHZlcnRleCBhbmQgbm9ybWFsIHBvaW50c1xuXG5cdFx0dmFyIHB1c2hTaWRlID0gZnVuY3Rpb24ocDEsIHAyLCBwMywgcDQpIHtcblx0XHRcdHBvc2l0aW9uRGF0YS5wdXNoKHAxWzBdLCBwMVsxXSwgcDFbMl0pO1xuXHRcdFx0cG9zaXRpb25EYXRhLnB1c2gocDJbMF0sIHAyWzFdLCBwMlsyXSk7XG5cdFx0XHRwb3NpdGlvbkRhdGEucHVzaChwM1swXSwgcDNbMV0sIHAzWzJdKTtcblx0XHRcdHBvc2l0aW9uRGF0YS5wdXNoKHA0WzBdLCBwNFsxXSwgcDRbMl0pO1xuXHRcdFx0Ly8gcHVzaCAwcyBmb3Igbm9ybWFscyBzbyBzaGFkZXIgZ2l2ZXMgdGhlbSBmdWxsIGNvbG9yXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0XHRcdFx0bm9ybWFsRGF0YS5wdXNoKDAsIDAsIDApO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0cHVzaFNpZGUodW5pdENlbGxWZWN0b3JzLm8sIHVuaXRDZWxsVmVjdG9ycy54LCB1bml0Q2VsbFZlY3RvcnMueHksIHVuaXRDZWxsVmVjdG9ycy55KTtcblx0XHRwdXNoU2lkZSh1bml0Q2VsbFZlY3RvcnMubywgdW5pdENlbGxWZWN0b3JzLnksIHVuaXRDZWxsVmVjdG9ycy55eiwgdW5pdENlbGxWZWN0b3JzLnopO1xuXHRcdHB1c2hTaWRlKHVuaXRDZWxsVmVjdG9ycy5vLCB1bml0Q2VsbFZlY3RvcnMueiwgdW5pdENlbGxWZWN0b3JzLnh6LCB1bml0Q2VsbFZlY3RvcnMueCk7XG5cdFx0cHVzaFNpZGUodW5pdENlbGxWZWN0b3JzLnl6LCB1bml0Q2VsbFZlY3RvcnMueSwgdW5pdENlbGxWZWN0b3JzLnh5LCB1bml0Q2VsbFZlY3RvcnMueHl6KTtcblx0XHRwdXNoU2lkZSh1bml0Q2VsbFZlY3RvcnMueHl6LCB1bml0Q2VsbFZlY3RvcnMueHosIHVuaXRDZWxsVmVjdG9ycy56LCB1bml0Q2VsbFZlY3RvcnMueXopO1xuXHRcdHB1c2hTaWRlKHVuaXRDZWxsVmVjdG9ycy54eSwgdW5pdENlbGxWZWN0b3JzLngsIHVuaXRDZWxsVmVjdG9ycy54eiwgdW5pdENlbGxWZWN0b3JzLnh5eik7XG5cblx0XHQvLyBidWlsZCBtZXNoIGNvbm5lY3Rpdml0eVxuXHRcdHZhciBpbmRleERhdGEgPSBbXTtcblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpKyspIHtcblx0XHRcdHZhciBzdGFydCA9IGkgKiA0O1xuXHRcdFx0Ly8gc2lkZXNcblx0XHRcdGluZGV4RGF0YS5wdXNoKHN0YXJ0LCBzdGFydCArIDEsIHN0YXJ0ICsgMSwgc3RhcnQgKyAyLCBzdGFydCArIDIsIHN0YXJ0ICsgMywgc3RhcnQgKyAzLCBzdGFydCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9yZURhdGEocG9zaXRpb25EYXRhLCBub3JtYWxEYXRhLCBpbmRleERhdGEpO1xuXHR9O1xuXHR2YXIgXyA9IGQzLlVuaXRDZWxsLnByb3RvdHlwZSA9IG5ldyBkMy5fTWVzaCgpO1xuXHRfLnJlbmRlciA9IGZ1bmN0aW9uKGdsLCBzcGVjcykge1xuXHRcdGdsLnNoYWRlci5zZXRNYXRyaXhVbmlmb3JtcyhnbCk7XG5cdFx0dGhpcy5iaW5kQnVmZmVycyhnbCk7XG5cdFx0Ly8gY29sb3JzXG5cdFx0Z2wubWF0ZXJpYWwuc2V0RGlmZnVzZUNvbG9yKGdsLCBzcGVjcy5zaGFwZXNfY29sb3IpO1xuXHRcdGdsLmxpbmVXaWR0aChzcGVjcy5zaGFwZXNfbGluZVdpZHRoKTtcblx0XHQvLyByZW5kZXJcblx0XHRnbC5kcmF3RWxlbWVudHMoZ2wuTElORVMsIHRoaXMudmVydGV4SW5kZXhCdWZmZXIubnVtSXRlbXMsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcblx0fTtcblxufSkoZDMsIHYzKTtcblxuKGZ1bmN0aW9uKGQzLCBtYXRoLCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDMuRnJhbWVidWZmZXIgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF8gPSBkMy5GcmFtZWJ1ZmZlci5wcm90b3R5cGU7XG5cblx0Xy5pbml0ID0gZnVuY3Rpb24oZ2wpIHtcblx0XHR0aGlzLmZyYW1lYnVmZmVyID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblx0fTtcblxuXHRfLnNldENvbG9yVGV4dHVyZSA9IGZ1bmN0aW9uKGdsLCB0ZXh0dXJlLCBhdHRhY2htZW50KSB7XG5cdFx0dmFyIGkgPSBhdHRhY2htZW50ID09PSB1bmRlZmluZWQgPyAwIDogYXR0YWNobWVudDtcblx0XHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHRoaXMuZnJhbWVidWZmZXIpO1xuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xuXHRcdGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGdsLkZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksIGdsLlRFWFRVUkVfMkQsIHRleHR1cmUsIDApO1xuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG5cdH07XG5cdF8uc2V0Q29sb3JSZW5kZXJidWZmZXIgPSBmdW5jdGlvbihnbCwgcmVuZGVyYnVmZmVyLCBhdHRhY2htZW50KSB7XG5cdFx0dmFyIGkgPSBhdHRhY2htZW50ID09PSB1bmRlZmluZWQgPyAwIDogYXR0YWNobWVudDtcblx0XHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHRoaXMuZnJhbWVidWZmZXIpO1xuXHRcdGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIpO1xuXHRcdGdsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGksIGdsLlJFTkRFUkJVRkZFUiwgcmVuZGVyYnVmZmVyKTtcblx0XHRnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgbnVsbCk7XG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcblx0fTtcblx0Xy5zZXREZXB0aFRleHR1cmUgPSBmdW5jdGlvbihnbCwgdGV4dHVyZSkge1xuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5mcmFtZWJ1ZmZlcik7XG5cdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XG5cdFx0Z2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkRFUFRIX0FUVEFDSE1FTlQsIGdsLlRFWFRVUkVfMkQsIHRleHR1cmUsIDApO1xuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG5cdH07XG5cdF8uc2V0RGVwdGhSZW5kZXJidWZmZXIgPSBmdW5jdGlvbihnbCwgcmVuZGVyYnVmZmVyKSB7XG5cdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB0aGlzLmZyYW1lYnVmZmVyKTtcblx0XHRnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgcmVuZGVyYnVmZmVyKTtcblx0XHRnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfQVRUQUNITUVOVCwgZ2wuUkVOREVSQlVGRkVSLCByZW5kZXJidWZmZXIpO1xuXHRcdGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCBudWxsKTtcblx0XHRnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xuXHR9O1xuXHRfLmJpbmQgPSBmdW5jdGlvbihnbCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5mcmFtZWJ1ZmZlcik7XG5cdFx0Z2wudmlld3BvcnQoMCwgMCwgd2lkdGgsIGhlaWdodCk7XG5cdH07XG5cbn0pKGQzLCBtYXRoLCBkb2N1bWVudCk7XG5cbihmdW5jdGlvbihkMywgbWF0aCwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLlJlbmRlcmJ1ZmZlciA9IGZ1bmN0aW9uKCkge1xuXHR9O1xuXHR2YXIgXyA9IGQzLlJlbmRlcmJ1ZmZlci5wcm90b3R5cGU7XG5cblx0Xy5pbml0ID0gZnVuY3Rpb24oZ2wsIGZvcm1hdCkge1xuXHRcdHRoaXMucmVuZGVyYnVmZmVyID0gZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cdFx0dGhpcy5mb3JtYXQgPSBmb3JtYXQ7XG5cdH07XG5cblx0Xy5zZXRQYXJhbWV0ZXIgPSBmdW5jdGlvbihnbCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblx0XHRcblx0XHRnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgdGhpcy5yZW5kZXJidWZmZXIpO1xuXHRcdGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoZ2wuUkVOREVSQlVGRkVSLCB0aGlzLmZvcm1hdCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuXHRcdGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCBudWxsKTtcblx0fTtcblxufSkoZDMsIG1hdGgsIGRvY3VtZW50KTtcblxuKGZ1bmN0aW9uKG1hdGgsIGQzLCBtLCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXHRkMy5TU0FPID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfID0gZDMuU1NBTy5wcm90b3R5cGU7XG5cblx0Xy5pbml0U2FtcGxlS2VybmVsID0gZnVuY3Rpb24oa2VybmVsU2l6ZSkge1xuXHRcdHZhciBzYW1wbGVLZXJuZWwgPSBbXTtcblxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBrZXJuZWxTaXplOyBpKyspIHtcblx0XHRcdHZhciB4ID0gbS5yYW5kb20oKSAqIDIuMCAtIDEuMDtcblx0XHRcdHZhciB5ID0gbS5yYW5kb20oKSAqIDIuMCAtIDEuMDtcblx0XHRcdHZhciB6ID0gbS5yYW5kb20oKSAqIDIuMCAtIDEuMDtcblxuXHRcdFx0dmFyIHNjYWxlID0gaSAvIGtlcm5lbFNpemU7XG5cdFx0XHR2YXIgc2NhbGUyID0gc2NhbGUgKiBzY2FsZTtcblx0XHRcdHZhciBsZXJwID0gMC4xICsgc2NhbGUyICogMC45O1xuXG5cdFx0XHR4ICo9IGxlcnA7XG5cdFx0XHR5ICo9IGxlcnA7XG5cdFx0XHR6ICo9IGxlcnA7XG5cblx0XHRcdHNhbXBsZUtlcm5lbC5wdXNoKHgsIHksIHopO1xuXHRcdH1cblxuXHRcdHRoaXMuc2FtcGxlS2VybmVsID0gbmV3IEZsb2F0MzJBcnJheShzYW1wbGVLZXJuZWwpO1xuXHR9O1xuXG5cdF8uaW5pdE5vaXNlVGV4dHVyZSA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIG5vaXNlU2l6ZSA9IDE2O1xuXHRcdHZhciBzc2FvTm9pc2UgPSBbXTtcblxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBub2lzZVNpemU7IGkrKykge1xuXHRcdFx0c3Nhb05vaXNlLnB1c2gobS5yYW5kb20oKSAqIDIgLSAxKTtcblx0XHRcdHNzYW9Ob2lzZS5wdXNoKG0ucmFuZG9tKCkgKiAyIC0gMSk7XG5cdFx0XHRzc2FvTm9pc2UucHVzaCgwLjApO1xuXHRcdH1cblxuXHRcdHRoaXMubm9pc2VUZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMubm9pc2VUZXh0dXJlKTtcblx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQiwgNCwgNCwgMCwgZ2wuUkdCLCBnbC5GTE9BVCwgbmV3IEZsb2F0MzJBcnJheShzc2FvTm9pc2UpKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QpO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLlJFUEVBVCk7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuUkVQRUFUKTtcblxuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXHR9O1xuXG59KShtYXRoLCBkMywgbSk7XG5cbihmdW5jdGlvbihkMywgbWF0aCwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLlRleHR1cmUgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF8gPSBkMy5UZXh0dXJlLnByb3RvdHlwZTtcblxuXHRfLmluaXQgPSBmdW5jdGlvbihnbCwgdHlwZSwgaW50ZXJuYWxGb3JtYXQsIGZvcm1hdCkge1xuXHRcdHRoaXMudGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdHRoaXMuaW50ZXJuYWxGb3JtYXQgPSBpbnRlcm5hbEZvcm1hdDtcblx0XHR0aGlzLmZvcm1hdCA9IGZvcm1hdCAhPT0gdW5kZWZpbmVkID8gZm9ybWF0IDogaW50ZXJuYWxGb3JtYXQ7XG5cblx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLnRleHR1cmUpO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5ORUFSRVNUKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG5cdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG5cdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XG5cdH07XG5cdF8uc2V0UGFyYW1ldGVyID0gZnVuY3Rpb24oZ2wsIHdpZHRoLCBoZWlnaHQpIHtcblx0XHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHQvLyBzZXQgdGV4dHVyZSBkaW1lbnNpb25cblx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLnRleHR1cmUpO1xuXHRcdGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgdGhpcy5pbnRlcm5hbEZvcm1hdCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIDAsIHRoaXMuZm9ybWF0LCB0aGlzLnR5cGUsIG51bGwpO1xuXHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xuXHR9O1xuXG59KShkMywgbWF0aCwgZG9jdW1lbnQpO1xuXG4oZnVuY3Rpb24oZDMsIG0zLCBtNCwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdGQzLl9TaGFkZXIgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF8gPSBkMy5fU2hhZGVyLnByb3RvdHlwZTtcblx0Xy51c2VTaGFkZXJQcm9ncmFtID0gZnVuY3Rpb24oZ2wpIHtcblx0XHRnbC51c2VQcm9ncmFtKHRoaXMuZ1Byb2dyYW0pO1xuXHRcdGdsLnNoYWRlciA9IHRoaXM7XG5cdH07XG5cdF8uaW5pdCA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIHZlcnRleFNoYWRlciA9IHRoaXMuZ2V0U2hhZGVyKGdsLCAndmVydGV4LXNoYWRlcicpO1xuXHRcdGlmICghdmVydGV4U2hhZGVyKSB7XG5cdFx0XHR2ZXJ0ZXhTaGFkZXIgPSB0aGlzLmxvYWREZWZhdWx0VmVydGV4U2hhZGVyKGdsKTtcblx0XHR9XG5cdFx0dmFyIGZyYWdtZW50U2hhZGVyID0gdGhpcy5nZXRTaGFkZXIoZ2wsICdmcmFnbWVudC1zaGFkZXInKTtcblx0XHRpZiAoIWZyYWdtZW50U2hhZGVyKSB7XG5cdFx0XHRmcmFnbWVudFNoYWRlciA9IHRoaXMubG9hZERlZmF1bHRGcmFnbWVudFNoYWRlcihnbCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5nUHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcblxuXHRcdGdsLmF0dGFjaFNoYWRlcih0aGlzLmdQcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xuXHRcdGdsLmF0dGFjaFNoYWRlcih0aGlzLmdQcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XG5cdFx0XG5cdFx0dGhpcy5vblNoYWRlckF0dGFjaGVkKGdsKTtcblxuXHRcdGdsLmxpbmtQcm9ncmFtKHRoaXMuZ1Byb2dyYW0pO1xuXG5cdFx0aWYgKCFnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHRoaXMuZ1Byb2dyYW0sIGdsLkxJTktfU1RBVFVTKSkge1xuXHRcdFx0YWxlcnQoJ0NvdWxkIG5vdCBpbml0aWFsaXplIHNoYWRlcnM6ICcgKyBnbC5nZXRQcm9ncmFtSW5mb0xvZyh0aGlzLmdQcm9ncmFtKSk7XG5cdFx0fVxuXG5cdFx0Z2wudXNlUHJvZ3JhbSh0aGlzLmdQcm9ncmFtKTtcblx0XHR0aGlzLmluaXRVbmlmb3JtTG9jYXRpb25zKGdsKTtcblx0XHRnbC51c2VQcm9ncmFtKG51bGwpO1xuXHR9O1xuXHRfLm9uU2hhZGVyQXR0YWNoZWQgPSBmdW5jdGlvbihnbCkge1xuXHRcdC8vIHNldCB2ZXJ0ZXggYXR0cmlidXRlcyBleHBsaWNpdGx5XG5cdFx0dGhpcy52ZXJ0ZXhQb3NpdGlvbkF0dHJpYnV0ZSA9IDA7XG5cdFx0dGhpcy52ZXJ0ZXhOb3JtYWxBdHRyaWJ1dGUgPSAxO1xuXG5cdFx0Z2wuYmluZEF0dHJpYkxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sIHRoaXMudmVydGV4UG9zaXRpb25BdHRyaWJ1dGUsICdhX3ZlcnRleF9wb3NpdGlvbicpO1xuXHRcdGdsLmJpbmRBdHRyaWJMb2NhdGlvbih0aGlzLmdQcm9ncmFtLCB0aGlzLnZlcnRleE5vcm1hbEF0dHJpYnV0ZSwgJ2FfdmVydGV4X25vcm1hbCcpO1xuXHR9O1xuXHRfLmdldFNoYWRlckZyb21TdHIgPSBmdW5jdGlvbihnbCwgc2hhZGVyVHlwZSwgc3RyU3JjKSB7XG5cdFx0dmFyIHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihzaGFkZXJUeXBlKTtcblx0XHRnbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzdHJTcmMpO1xuXHRcdGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcblx0XHRpZiAoIWdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xuXHRcdFx0YWxlcnQoc2hhZGVyU2NyaXB0LnR5cGUgKyAnICcgKyBnbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcikpO1xuXHRcdFx0Z2wuZGVsZXRlU2hhZGVyKHNoYWRlcik7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRyZXR1cm4gc2hhZGVyO1xuXHR9O1xuXHRfLmVuYWJsZUF0dHJpYnNBcnJheSA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0Z2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy52ZXJ0ZXhQb3NpdGlvbkF0dHJpYnV0ZSk7XG5cdH07XG5cdF8uZGlzYWJsZUF0dHJpYnNBcnJheSA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0Z2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMudmVydGV4UG9zaXRpb25BdHRyaWJ1dGUpO1xuXHR9O1xuXHRfLmdldFNoYWRlciA9IGZ1bmN0aW9uKGdsLCBpZCkge1xuXHRcdHZhciBzaGFkZXJTY3JpcHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG5cdFx0aWYgKCFzaGFkZXJTY3JpcHQpIHtcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHZhciBzYiA9IFtdO1xuXHRcdHZhciBrID0gc2hhZGVyU2NyaXB0LmZpcnN0Q2hpbGQ7XG5cdFx0d2hpbGUgKGspIHtcblx0XHRcdGlmIChrLm5vZGVUeXBlID09PSAzKSB7XG5cdFx0XHRcdHNiLnB1c2goay50ZXh0Q29udGVudCk7XG5cdFx0XHR9XG5cdFx0XHRrID0gay5uZXh0U2libGluZztcblx0XHR9XG5cdFx0dmFyIHNkclNyYyA9IHNiLmpvaW4oJycpO1xuXHRcdHZhciBzaGFkZXI7XG5cdFx0aWYgKHNoYWRlclNjcmlwdC50eXBlID09PSAneC1zaGFkZXIveC1mcmFnbWVudCcpIHtcblx0XHRcdHNoYWRlciA9IHRoaXMuZ2V0U2hhZGVyRnJvbVN0cihnbCwgZ2wuRlJBR01FTlRfU0hBREVSLCBzZHJTcmMpO1xuXHRcdH0gZWxzZSBpZiAoc2hhZGVyU2NyaXB0LnR5cGUgPT09ICd4LXNoYWRlci94LXZlcnRleCcpIHtcblx0XHRcdHNoYWRlciA9IHRoaXMuZ2V0U2hhZGVyRnJvbVN0cihnbCwgZ2wuVkVSVEVYX1NIQURFUiwgc2RyU3JjKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0cmV0dXJuIHNoYWRlcjtcblx0fTtcblx0Xy5pbml0VW5pZm9ybUxvY2F0aW9ucyA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dGhpcy5tb2RlbFZpZXdNYXRyaXhVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X21vZGVsX3ZpZXdfbWF0cml4Jyk7XG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4VW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9wcm9qZWN0aW9uX21hdHJpeCcpO1xuXHR9O1xuXHRfLmxvYWREZWZhdWx0VmVydGV4U2hhZGVyID0gZnVuY3Rpb24oZ2wpIHtcblx0fTtcblx0Xy5sb2FkRGVmYXVsdEZyYWdtZW50U2hhZGVyID0gZnVuY3Rpb24oZ2wpIHtcblx0fTtcblx0Xy5zZXRNYXRyaXhVbmlmb3JtcyA9IGZ1bmN0aW9uKGdsLCBtb2RlbE1hdHJpeCkge1xuXHRcdGlmKG1vZGVsTWF0cml4ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXMuc2V0TW9kZWxWaWV3TWF0cml4KGdsLCBnbC5tb2RlbFZpZXdNYXRyaXgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnNldE1vZGVsVmlld01hdHJpeChnbCwgbTQubXVsdGlwbHkoZ2wubW9kZWxWaWV3TWF0cml4LCBtb2RlbE1hdHJpeCwgW10pKTtcblx0XHR9XG5cdH07XG5cdF8uc2V0UHJvamVjdGlvbk1hdHJpeCA9IGZ1bmN0aW9uKGdsLCBtYXRyaXgpIHtcblx0XHRnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMucHJvamVjdGlvbk1hdHJpeFVuaWZvcm0sIGZhbHNlLCBtYXRyaXgpO1xuXHR9O1xuXHRfLnNldE1vZGVsVmlld01hdHJpeCA9IGZ1bmN0aW9uKGdsLCBtdk1hdHJpeCkge1xuXHRcdGdsLnVuaWZvcm1NYXRyaXg0ZnYodGhpcy5tb2RlbFZpZXdNYXRyaXhVbmlmb3JtLCBmYWxzZSwgbXZNYXRyaXgpO1xuXHR9O1xuXHRfLnNldE1hdGVyaWFsQW1iaWVudENvbG9yID0gZnVuY3Rpb24oZ2wsIGFtYmllbnQpIHtcblx0fTtcblx0Xy5zZXRNYXRlcmlhbERpZmZ1c2VDb2xvciA9IGZ1bmN0aW9uKGdsLCBkaWZmdXNlKSB7XG5cdH07XG5cdF8uc2V0TWF0ZXJpYWxTcGVjdWxhckNvbG9yID0gZnVuY3Rpb24oZ2wsIHNwZWN1bGFyKSB7XG5cdH07XG5cdF8uc2V0TWF0ZXJpYWxTaGluaW5lc3MgPSBmdW5jdGlvbihnbCwgc2hpbmluZXNzKSB7XG5cdH07XG5cdF8uc2V0TWF0ZXJpYWxBbHBoYSA9IGZ1bmN0aW9uKGdsLCBhbHBoYSkge1xuXHR9O1xuXG59KShkMywgbTMsIG00LCBkb2N1bWVudCk7XG5cbihmdW5jdGlvbihkMywgbTMsIG00LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRkMy5GWEFBU2hhZGVyID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfc3VwZXIgPSBkMy5fU2hhZGVyLnByb3RvdHlwZTtcblx0dmFyIF8gPSBkMy5GWEFBU2hhZGVyLnByb3RvdHlwZSA9IG5ldyBkMy5fU2hhZGVyKCk7XG5cdF8uaW5pdFVuaWZvcm1Mb2NhdGlvbnMgPSBmdW5jdGlvbihnbCkge1xuXHRcdC8vIGFzc2lnbiB1bmlmb3JtIHByb3BlcnRpZXNcblx0XHRfc3VwZXIuaW5pdFVuaWZvcm1Mb2NhdGlvbnMuY2FsbCh0aGlzLCBnbCk7XG5cdFx0dGhpcy5idWZmZXJzaXplVW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9idWZmZXJzaXplJyk7XG5cdFx0dGhpcy5hbnRpYWxpYXNVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X2FudGlhbGlhcycpO1xuXG5cdFx0dGhpcy5lZGdlVGhyZXNob2xkVW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9lZGdlX3RocmVzaG9sZCcpO1xuXHRcdHRoaXMuZWRnZVRocmVzaG9sZE1pblVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3VfZWRnZV90aHJlc2hvbGRfbWluJyk7XG5cdFx0dGhpcy5zZWFyY2hTdGVwc1VuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3Vfc2VhcmNoX3N0ZXBzJyk7XG5cdFx0dGhpcy5zZWFyY2hUaHJlc2hvbGRVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X3NlYXJjaF90aHJlc2hvbGQnKTtcblx0XHR0aGlzLnN1YnBpeENhcFVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3Vfc3VicGl4X2NhcCcpO1xuXHRcdHRoaXMuc3VicGl4VHJpbVVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3Vfc3VicGl4X3RyaW0nKTtcblx0fTtcblx0Xy5zZXRCdWZmZXJzaXplID0gZnVuY3Rpb24oZ2wsIHdpZHRoLCBoZWlnaHQpIHtcblx0XHRnbC51bmlmb3JtMmYodGhpcy5idWZmZXJzaXplVW5pZm9ybSwgd2lkdGgsIGhlaWdodCk7XG5cdH07XG5cdF8uc2V0QW50aWFsaWFzID0gZnVuY3Rpb24oZ2wsIHZhbCkge1xuXHRcdGdsLnVuaWZvcm0xZih0aGlzLmFudGlhbGlhc1VuaWZvcm0sIHZhbCk7XG5cdH07XG5cdF8uc2V0RWRnZVRocmVzaG9sZCA9IGZ1bmN0aW9uKGdsLCB2YWwpIHtcblx0XHRnbC51bmlmb3JtMWYodGhpcy5lZGdlVGhyZXNob2xkVW5pZm9ybSwgdmFsKTtcblx0fTtcblx0Xy5zZXRFZGdlVGhyZXNob2xkTWluID0gZnVuY3Rpb24oZ2wsIHZhbCkge1xuXHRcdGdsLnVuaWZvcm0xZih0aGlzLmVkZ2VUaHJlc2hvbGRNaW5Vbmlmb3JtLCB2YWwpO1xuXHR9O1xuXHRfLnNldFNlYXJjaFN0ZXBzID0gZnVuY3Rpb24oZ2wsIHZhbCkge1xuXHRcdGdsLnVuaWZvcm0xaSh0aGlzLnNlYXJjaFN0ZXBzVW5pZm9ybSwgdmFsKTtcblx0fTtcblx0Xy5zZXRTZWFyY2hUaHJlc2hvbGQgPSBmdW5jdGlvbihnbCwgdmFsKSB7XG5cdFx0Z2wudW5pZm9ybTFmKHRoaXMuc2VhcmNoVGhyZXNob2xkVW5pZm9ybSwgdmFsKTtcblx0fTtcblx0Xy5zZXRTdWJwaXhDYXAgPSBmdW5jdGlvbihnbCwgdmFsKSB7XG5cdFx0Z2wudW5pZm9ybTFmKHRoaXMuc3VicGl4Q2FwVW5pZm9ybSwgdmFsKTtcblx0fTtcblx0Xy5zZXRTdWJwaXhUcmltID0gZnVuY3Rpb24oZ2wsIHZhbCkge1xuXHRcdGdsLnVuaWZvcm0xZih0aGlzLnN1YnBpeFRyaW1Vbmlmb3JtLCB2YWwpO1xuXHR9O1xuXHRfLmxvYWREZWZhdWx0VmVydGV4U2hhZGVyID0gZnVuY3Rpb24oZ2wpIHtcblx0XHR2YXIgc2IgPSBbXG5cdFx0J3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycsXG5cdFx0XG5cdFx0Ly8gYXR0cmlidXRlcyBzZXQgd2hlbiByZW5kZXJpbmcgb2JqZWN0c1xuXHRcdCdhdHRyaWJ1dGUgdmVjMyBhX3ZlcnRleF9wb3NpdGlvbjsnLFxuXG4gICAgXHQndmFyeWluZyB2ZWMyIHZfdGV4Y29vcmQ7JyxcblxuXHRcdCd2b2lkIG1haW4oKSB7Jyxcblx0XHRcdCdnbF9Qb3NpdGlvbiA9IHZlYzQoYV92ZXJ0ZXhfcG9zaXRpb24sIDEuKTsnLFxuICAgICAgICBcdCd2X3RleGNvb3JkID0gYV92ZXJ0ZXhfcG9zaXRpb24ueHkgKiAuNSArIC41OycsXG5cdFx0J30nXS5qb2luKCcnKTtcblxuXHRcdHJldHVybiB0aGlzLmdldFNoYWRlckZyb21TdHIoZ2wsIGdsLlZFUlRFWF9TSEFERVIsIHNiKTtcblx0fTtcblxuXHRfLmxvYWREZWZhdWx0RnJhZ21lbnRTaGFkZXIgPSBmdW5jdGlvbihnbCkge1xuXHRcdHZhciBzYiA9IFtcblx0XHQncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyxcblxuXHRcdCdjb25zdCBpbnQgZnhhYU1heFNlYXJjaFN0ZXBzID0gMTI4OycsXG5cblx0XHQndW5pZm9ybSBmbG9hdCB1X2VkZ2VfdGhyZXNob2xkOycsXG5cdFx0J3VuaWZvcm0gZmxvYXQgdV9lZGdlX3RocmVzaG9sZF9taW47Jyxcblx0XHQndW5pZm9ybSBpbnQgdV9zZWFyY2hfc3RlcHM7Jyxcblx0XHQndW5pZm9ybSBmbG9hdCB1X3NlYXJjaF90aHJlc2hvbGQ7Jyxcblx0XHQndW5pZm9ybSBmbG9hdCB1X3N1YnBpeF9jYXA7Jyxcblx0XHQndW5pZm9ybSBmbG9hdCB1X3N1YnBpeF90cmltOycsXG5cblx0XHQndW5pZm9ybSBzYW1wbGVyMkQgdV9zYW1wbGVyMDsnLFxuXHRcdCd1bmlmb3JtIHZlYzIgdV9idWZmZXJzaXplOycsXG5cdFx0J3VuaWZvcm0gYm9vbCB1X2FudGlhbGlhczsnLFxuXG5cdFx0J3ZhcnlpbmcgdmVjMiB2X3RleGNvb3JkOycsXG5cblx0XHQnZmxvYXQgRnhhYUx1bWEodmVjMyByZ2IpIHsnLFxuXHRcdFx0J3JldHVybiByZ2IueSAqICgwLjU4Ny8wLjI5OSkgKyByZ2IueDsnLFxuXHRcdCd9JyxcblxuXHRcdCd2ZWMzIEZ4YWFMZXJwMyh2ZWMzIGEsIHZlYzMgYiwgZmxvYXQgYW1vdW50T2ZBKSB7Jyxcblx0XHQgICAgJ3JldHVybiAodmVjMygtYW1vdW50T2ZBKSAqIGIpICsgKChhICogdmVjMyhhbW91bnRPZkEpKSArIGIpOycsXG5cdFx0J30nLFxuXG5cdFx0J3ZlYzQgRnhhYVRleE9mZihzYW1wbGVyMkQgdGV4LCB2ZWMyIHBvcywgdmVjMiBvZmYsIHZlYzIgcmNwRnJhbWUpIHsnLFxuXHRcdCAgICAncmV0dXJuIHRleHR1cmUyRCh0ZXgsIHBvcyArIG9mZiAqIHJjcEZyYW1lKTsnLFxuXHRcdCd9JyxcblxuXHRcdCd2ZWMzIEZ4YWFQaXhlbFNoYWRlcih2ZWMyIHBvcywgc2FtcGxlcjJEIHRleCwgdmVjMiByY3BGcmFtZSkgeycsXG5cdFx0XHQnZmxvYXQgc3VicGl4X3RyaW1fc2NhbGUgPSAoMS4wLygxLjAgLSB1X3N1YnBpeF90cmltKSk7Jyxcblx0XHQgICAgJ3ZlYzMgcmdiTiA9IEZ4YWFUZXhPZmYodGV4LCBwb3MueHksIHZlYzIoIDAuLC0xLiksIHJjcEZyYW1lKS54eXo7Jyxcblx0XHQgICAgJ3ZlYzMgcmdiVyA9IEZ4YWFUZXhPZmYodGV4LCBwb3MueHksIHZlYzIoLTEuLCAwLiksIHJjcEZyYW1lKS54eXo7Jyxcblx0XHQgICAgJ3ZlYzMgcmdiTSA9IEZ4YWFUZXhPZmYodGV4LCBwb3MueHksIHZlYzIoIDAuLCAwLiksIHJjcEZyYW1lKS54eXo7Jyxcblx0XHQgICAgJ3ZlYzMgcmdiRSA9IEZ4YWFUZXhPZmYodGV4LCBwb3MueHksIHZlYzIoIDEuLCAwLiksIHJjcEZyYW1lKS54eXo7Jyxcblx0XHQgICAgJ3ZlYzMgcmdiUyA9IEZ4YWFUZXhPZmYodGV4LCBwb3MueHksIHZlYzIoIDAuLCAxLiksIHJjcEZyYW1lKS54eXo7JyxcblxuXHRcdCAgICAnZmxvYXQgbHVtYU4gPSBGeGFhTHVtYShyZ2JOKTsnLFxuXHRcdCAgICAnZmxvYXQgbHVtYVcgPSBGeGFhTHVtYShyZ2JXKTsnLFxuXHRcdCAgICAnZmxvYXQgbHVtYU0gPSBGeGFhTHVtYShyZ2JNKTsnLFxuXHRcdCAgICAnZmxvYXQgbHVtYUUgPSBGeGFhTHVtYShyZ2JFKTsnLFxuXHRcdCAgICAnZmxvYXQgbHVtYVMgPSBGeGFhTHVtYShyZ2JTKTsnLFxuXHRcdCAgICAnZmxvYXQgcmFuZ2VNaW4gPSBtaW4obHVtYU0sIG1pbihtaW4obHVtYU4sIGx1bWFXKSwgbWluKGx1bWFTLCBsdW1hRSkpKTsnLFxuXHRcdCAgICAnZmxvYXQgcmFuZ2VNYXggPSBtYXgobHVtYU0sIG1heChtYXgobHVtYU4sIGx1bWFXKSwgbWF4KGx1bWFTLCBsdW1hRSkpKTsnLFxuXG5cdFx0ICAgICdmbG9hdCByYW5nZSA9IHJhbmdlTWF4IC0gcmFuZ2VNaW47Jyxcblx0XHQgICAgJ2lmKHJhbmdlIDwgbWF4KHVfZWRnZV90aHJlc2hvbGRfbWluLCByYW5nZU1heCAqIHVfZWRnZV90aHJlc2hvbGQpKSB7Jyxcblx0XHQgICAgICAgICdyZXR1cm4gcmdiTTsnLFxuXHRcdCAgICAnfScsXG5cblx0XHQgICAgJ3ZlYzMgcmdiTCA9IHJnYk4gKyByZ2JXICsgcmdiTSArIHJnYkUgKyByZ2JTOycsXG5cblx0XHQgICAgJ2Zsb2F0IGx1bWFMID0gKGx1bWFOICsgbHVtYVcgKyBsdW1hRSArIGx1bWFTKSAqIDAuMjU7Jyxcblx0XHQgICAgJ2Zsb2F0IHJhbmdlTCA9IGFicyhsdW1hTCAtIGx1bWFNKTsnLFxuXHRcdCAgICAnZmxvYXQgYmxlbmRMID0gbWF4KDAuMCwgKHJhbmdlTCAvIHJhbmdlKSAtIHVfc3VicGl4X3RyaW0pICogc3VicGl4X3RyaW1fc2NhbGU7Jyxcblx0XHQgICAgJ2JsZW5kTCA9IG1pbih1X3N1YnBpeF9jYXAsIGJsZW5kTCk7JyxcblxuXHRcdCAgICAndmVjMyByZ2JOVyA9IEZ4YWFUZXhPZmYodGV4LCBwb3MueHksIHZlYzIoLTEuLC0xLiksIHJjcEZyYW1lKS54eXo7Jyxcblx0XHQgICAgJ3ZlYzMgcmdiTkUgPSBGeGFhVGV4T2ZmKHRleCwgcG9zLnh5LCB2ZWMyKCAxLiwtMS4pLCByY3BGcmFtZSkueHl6OycsXG5cdFx0ICAgICd2ZWMzIHJnYlNXID0gRnhhYVRleE9mZih0ZXgsIHBvcy54eSwgdmVjMigtMS4sIDEuKSwgcmNwRnJhbWUpLnh5ejsnLFxuXHRcdCAgICAndmVjMyByZ2JTRSA9IEZ4YWFUZXhPZmYodGV4LCBwb3MueHksIHZlYzIoIDEuLCAxLiksIHJjcEZyYW1lKS54eXo7Jyxcblx0XHQgICAgJ3JnYkwgKz0gKHJnYk5XICsgcmdiTkUgKyByZ2JTVyArIHJnYlNFKTsnLFxuXHRcdCAgICAncmdiTCAqPSB2ZWMzKDEuMC85LjApOycsXG5cblx0XHQgICAgJ2Zsb2F0IGx1bWFOVyA9IEZ4YWFMdW1hKHJnYk5XKTsnLFxuXHRcdCAgICAnZmxvYXQgbHVtYU5FID0gRnhhYUx1bWEocmdiTkUpOycsXG5cdFx0ICAgICdmbG9hdCBsdW1hU1cgPSBGeGFhTHVtYShyZ2JTVyk7Jyxcblx0XHQgICAgJ2Zsb2F0IGx1bWFTRSA9IEZ4YWFMdW1hKHJnYlNFKTsnLFxuXG5cdFx0ICAgICdmbG9hdCBlZGdlVmVydCA9Jyxcblx0XHQgICAgICAgICdhYnMoKDAuMjUgKiBsdW1hTlcpICsgKC0wLjUgKiBsdW1hTikgKyAoMC4yNSAqIGx1bWFORSkpICsnLFxuXHRcdCAgICAgICAgJ2FicygoMC41MCAqIGx1bWFXICkgKyAoLTEuMCAqIGx1bWFNKSArICgwLjUwICogbHVtYUUgKSkgKycsXG5cdFx0ICAgICAgICAnYWJzKCgwLjI1ICogbHVtYVNXKSArICgtMC41ICogbHVtYVMpICsgKDAuMjUgKiBsdW1hU0UpKTsnLFxuXHRcdCAgICAnZmxvYXQgZWRnZUhvcnogPScsXG5cdFx0ICAgICAgICAnYWJzKCgwLjI1ICogbHVtYU5XKSArICgtMC41ICogbHVtYVcpICsgKDAuMjUgKiBsdW1hU1cpKSArJyxcblx0XHQgICAgICAgICdhYnMoKDAuNTAgKiBsdW1hTiApICsgKC0xLjAgKiBsdW1hTSkgKyAoMC41MCAqIGx1bWFTICkpICsnLFxuXHRcdCAgICAgICAgJ2FicygoMC4yNSAqIGx1bWFORSkgKyAoLTAuNSAqIGx1bWFFKSArICgwLjI1ICogbHVtYVNFKSk7JyxcblxuXHRcdCAgICAnYm9vbCBob3J6U3BhbiA9IGVkZ2VIb3J6ID49IGVkZ2VWZXJ0OycsXG5cdFx0ICAgICdmbG9hdCBsZW5ndGhTaWduID0gaG9yelNwYW4gPyAtcmNwRnJhbWUueSA6IC1yY3BGcmFtZS54OycsXG5cblx0XHQgICAgJ2lmKCFob3J6U3BhbikgeycsXG5cdFx0ICAgICAgICAnbHVtYU4gPSBsdW1hVzsnLFxuXHRcdCAgICAgICAgJ2x1bWFTID0gbHVtYUU7Jyxcblx0XHQgICAgJ30nLFxuXG5cdFx0ICAgICdmbG9hdCBncmFkaWVudE4gPSBhYnMobHVtYU4gLSBsdW1hTSk7Jyxcblx0XHQgICAgJ2Zsb2F0IGdyYWRpZW50UyA9IGFicyhsdW1hUyAtIGx1bWFNKTsnLFxuXHRcdCAgICAnbHVtYU4gPSAobHVtYU4gKyBsdW1hTSkgKiAwLjU7Jyxcblx0XHQgICAgJ2x1bWFTID0gKGx1bWFTICsgbHVtYU0pICogMC41OycsXG5cblx0XHQgICAgJ2lmIChncmFkaWVudE4gPCBncmFkaWVudFMpIHsnLFxuXHRcdCAgICAgICAgJ2x1bWFOID0gbHVtYVM7Jyxcblx0XHQgICAgICAgICdsdW1hTiA9IGx1bWFTOycsXG5cdFx0ICAgICAgICAnZ3JhZGllbnROID0gZ3JhZGllbnRTOycsXG5cdFx0ICAgICAgICAnbGVuZ3RoU2lnbiAqPSAtMS4wOycsXG5cdFx0ICAgICd9JyxcblxuXHRcdCAgICAndmVjMiBwb3NOOycsXG5cdFx0ICAgICdwb3NOLnggPSBwb3MueCArIChob3J6U3BhbiA/IDAuMCA6IGxlbmd0aFNpZ24gKiAwLjUpOycsXG5cdFx0ICAgICdwb3NOLnkgPSBwb3MueSArIChob3J6U3BhbiA/IGxlbmd0aFNpZ24gKiAwLjUgOiAwLjApOycsXG5cblx0XHQgICAgJ2dyYWRpZW50TiAqPSB1X3NlYXJjaF90aHJlc2hvbGQ7JyxcblxuXHRcdCAgICAndmVjMiBwb3NQID0gcG9zTjsnLFxuXHRcdCAgICAndmVjMiBvZmZOUCA9IGhvcnpTcGFuID8gdmVjMihyY3BGcmFtZS54LCAwLjApIDogdmVjMigwLjAsIHJjcEZyYW1lLnkpOycsXG5cdFx0ICAgICdmbG9hdCBsdW1hRW5kTiA9IGx1bWFOOycsXG5cdFx0ICAgICdmbG9hdCBsdW1hRW5kUCA9IGx1bWFOOycsXG5cdFx0ICAgICdib29sIGRvbmVOID0gZmFsc2U7Jyxcblx0XHQgICAgJ2Jvb2wgZG9uZVAgPSBmYWxzZTsnLFxuXHRcdCAgICAncG9zTiArPSBvZmZOUCAqIHZlYzIoLTEuMCwgLTEuMCk7Jyxcblx0XHQgICAgJ3Bvc1AgKz0gb2ZmTlAgKiB2ZWMyKCAxLjAsICAxLjApOycsXG5cblx0XHQgICAgJ2ZvcihpbnQgaSA9IDA7IGkgPCBmeGFhTWF4U2VhcmNoU3RlcHM7IGkrKykgeycsXG5cdFx0ICAgIFx0J2lmKGkgPj0gdV9zZWFyY2hfc3RlcHMpIGJyZWFrOycsXG5cdFx0ICAgICAgICAnaWYoIWRvbmVOKSB7Jyxcblx0XHQgICAgICAgICAgICAnbHVtYUVuZE4gPSBGeGFhTHVtYSh0ZXh0dXJlMkQodGV4LCBwb3NOLnh5KS54eXopOycsXG5cdFx0ICAgICAgICAnfScsXG5cdFx0ICAgICAgICAnaWYoIWRvbmVQKSB7Jyxcblx0XHQgICAgICAgICAgICAnbHVtYUVuZFAgPSBGeGFhTHVtYSh0ZXh0dXJlMkQodGV4LCBwb3NQLnh5KS54eXopOycsXG5cdFx0ICAgICAgICAnfScsXG5cblx0XHQgICAgICAgICdkb25lTiA9IGRvbmVOIHx8IChhYnMobHVtYUVuZE4gLSBsdW1hTikgPj0gZ3JhZGllbnROKTsnLFxuXHRcdCAgICAgICAgJ2RvbmVQID0gZG9uZVAgfHwgKGFicyhsdW1hRW5kUCAtIGx1bWFOKSA+PSBncmFkaWVudE4pOycsXG5cblx0XHQgICAgICAgICdpZihkb25lTiAmJiBkb25lUCkgeycsXG5cdFx0ICAgICAgICAgICAgJ2JyZWFrOycsXG5cdFx0ICAgICAgICAnfScsXG5cdFx0ICAgICAgICAnaWYoIWRvbmVOKSB7Jyxcblx0XHQgICAgICAgICAgICAncG9zTiAtPSBvZmZOUDsnLFxuXHRcdCAgICAgICAgJ30nLFxuXHRcdCAgICAgICAgJ2lmKCFkb25lUCkgeycsXG5cdFx0ICAgICAgICAgICAgJ3Bvc1AgKz0gb2ZmTlA7Jyxcblx0XHQgICAgICAgICd9Jyxcblx0XHQgICAgJ30nLFxuXG5cdFx0ICAgICdmbG9hdCBkc3ROID0gaG9yelNwYW4gPyBwb3MueCAtIHBvc04ueCA6IHBvcy55IC0gcG9zTi55OycsXG5cdFx0ICAgICdmbG9hdCBkc3RQID0gaG9yelNwYW4gPyBwb3NQLnggLSBwb3MueCA6IHBvc1AueSAtIHBvcy55OycsXG5cdFx0ICAgICdib29sIGRpcmVjdGlvbk4gPSBkc3ROIDwgZHN0UDsnLFxuXHRcdCAgICAnbHVtYUVuZE4gPSBkaXJlY3Rpb25OID8gbHVtYUVuZE4gOiBsdW1hRW5kUDsnLFxuXG5cdFx0ICAgICdpZigoKGx1bWFNIC0gbHVtYU4pIDwgMC4wKSA9PSAoKGx1bWFFbmROIC0gbHVtYU4pIDwgMC4wKSkgeycsXG5cdFx0ICAgICAgICAnbGVuZ3RoU2lnbiA9IDAuMDsnLFxuXHRcdCAgICAnfScsXG5cblxuXHRcdCAgICAnZmxvYXQgc3Bhbkxlbmd0aCA9IChkc3RQICsgZHN0Tik7Jyxcblx0XHQgICAgJ2RzdE4gPSBkaXJlY3Rpb25OID8gZHN0TiA6IGRzdFA7Jyxcblx0XHQgICAgJ2Zsb2F0IHN1YlBpeGVsT2Zmc2V0ID0gKDAuNSArIChkc3ROICogKC0xLjAvc3Bhbkxlbmd0aCkpKSAqIGxlbmd0aFNpZ247Jyxcblx0XHQgICAgJ3ZlYzMgcmdiRiA9IHRleHR1cmUyRCh0ZXgsIHZlYzIoJyxcblx0XHQgICAgICAgICdwb3MueCArIChob3J6U3BhbiA/IDAuMCA6IHN1YlBpeGVsT2Zmc2V0KSwnLFxuXHRcdCAgICAgICAgJ3Bvcy55ICsgKGhvcnpTcGFuID8gc3ViUGl4ZWxPZmZzZXQgOiAwLjApKSkueHl6OycsXG5cdFx0ICAgICdyZXR1cm4gRnhhYUxlcnAzKHJnYkwsIHJnYkYsIGJsZW5kTCk7Jyxcblx0XHQnfScsXG5cblx0XHQndm9pZCBtYWluKCkgeycsXG5cdFx0XHQnZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHVfc2FtcGxlcjAsIHZfdGV4Y29vcmQpOycsXG5cdFx0XHQnaWYodV9hbnRpYWxpYXMpIHsnLFxuXHRcdFx0XHQnZ2xfRnJhZ0NvbG9yLnh5eiA9IEZ4YWFQaXhlbFNoYWRlcih2X3RleGNvb3JkLCB1X3NhbXBsZXIwLCAxLiAvIHVfYnVmZmVyc2l6ZSkueHl6OycsXG5cdFx0XHQnfScsXG5cdFx0J30nXG5cdFx0XS5qb2luKCdcXG4nKTtcblxuXHRcdHJldHVybiB0aGlzLmdldFNoYWRlckZyb21TdHIoZ2wsIGdsLkZSQUdNRU5UX1NIQURFUiwgc2IpO1xuXHR9O1xuXG59KShkMywgbTMsIG00LCBkb2N1bWVudCk7XG5cbihmdW5jdGlvbihkMywgbTMsIG00LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0ZDMuTGFiZWxTaGFkZXIgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF9zdXBlciA9IGQzLl9TaGFkZXIucHJvdG90eXBlO1xuXHR2YXIgXyA9IGQzLkxhYmVsU2hhZGVyLnByb3RvdHlwZSA9IG5ldyBkMy5fU2hhZGVyKCk7XG5cdF8uaW5pdFVuaWZvcm1Mb2NhdGlvbnMgPSBmdW5jdGlvbihnbCkge1xuXHRcdF9zdXBlci5pbml0VW5pZm9ybUxvY2F0aW9ucy5jYWxsKHRoaXMsIGdsKTtcblx0XHR0aGlzLmRpbWVuc2lvblVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3VfZGltZW5zaW9uJyk7XG5cdH07XG5cdF8ub25TaGFkZXJBdHRhY2hlZCA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0X3N1cGVyLm9uU2hhZGVyQXR0YWNoZWQuY2FsbCh0aGlzLCBnbCk7XG5cdFx0dGhpcy52ZXJ0ZXhUZXhDb29yZEF0dHJpYnV0ZSA9IDI7XG5cdFx0Z2wuYmluZEF0dHJpYkxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sIHRoaXMudmVydGV4VGV4Q29vcmRBdHRyaWJ1dGUsICdhX3ZlcnRleF90ZXhjb29yZCcpO1xuXHR9O1xuXHRfLmxvYWREZWZhdWx0VmVydGV4U2hhZGVyID0gZnVuY3Rpb24oZ2wpIHtcblx0XHR2YXIgc2IgPSBbXG5cdFx0J3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycsXG5cdFx0XG5cdFx0Ly8gYXR0cmlidXRlcyBzZXQgd2hlbiByZW5kZXJpbmcgb2JqZWN0c1xuXHRcdCdhdHRyaWJ1dGUgdmVjMyBhX3ZlcnRleF9wb3NpdGlvbjsnLFxuXHRcdCdhdHRyaWJ1dGUgdmVjMyBhX3ZlcnRleF9ub3JtYWw7Jyxcblx0XHQnYXR0cmlidXRlIHZlYzIgYV92ZXJ0ZXhfdGV4Y29vcmQ7JyxcblxuXHRcdC8vIG1hdHJpY2VzIHNldCBieSBnbC5zZXRNYXRyaXhVbmlmb3Jtc1xuXHRcdCd1bmlmb3JtIG1hdDQgdV9tb2RlbF92aWV3X21hdHJpeDsnLFxuXHRcdCd1bmlmb3JtIG1hdDQgdV9wcm9qZWN0aW9uX21hdHJpeDsnLFxuXHRcdCd1bmlmb3JtIHZlYzIgdV9kaW1lbnNpb247JyxcblxuXHRcdC8vIHNlbnQgdG8gdGhlIGZyYWdtZW50IHNoYWRlclxuXHRcdCd2YXJ5aW5nIHZlYzIgdl90ZXhjb29yZDsnLFxuXG5cdFx0J3ZvaWQgbWFpbigpIHsnLFxuXG5cdFx0XHQnZ2xfUG9zaXRpb24gPSB1X21vZGVsX3ZpZXdfbWF0cml4ICogdmVjNChhX3ZlcnRleF9wb3NpdGlvbiwgMS4pOycsXG5cblx0XHRcdCd2ZWM0IGRlcHRoX3BvcyA9IHZlYzQoZ2xfUG9zaXRpb24pOycsXG5cblx0XHRcdCdkZXB0aF9wb3MueiArPSBhX3ZlcnRleF9ub3JtYWwuejsnLFxuXG5cdFx0XHQnZ2xfUG9zaXRpb24gPSB1X3Byb2plY3Rpb25fbWF0cml4ICogZ2xfUG9zaXRpb247JyxcblxuXHRcdFx0J2RlcHRoX3BvcyA9IHVfcHJvamVjdGlvbl9tYXRyaXggKiBkZXB0aF9wb3M7JyxcblxuXHRcdFx0J2dsX1Bvc2l0aW9uIC89IGdsX1Bvc2l0aW9uLnc7JyxcblxuXHRcdFx0J2dsX1Bvc2l0aW9uLnh5ICs9IGFfdmVydGV4X25vcm1hbC54eSAvIHVfZGltZW5zaW9uICogMi47JyxcblxuXHRcdFx0J2dsX1Bvc2l0aW9uLnogPSBkZXB0aF9wb3MueiAvIGRlcHRoX3Bvcy53OycsXG5cblx0XHRcdCd2X3RleGNvb3JkID0gYV92ZXJ0ZXhfdGV4Y29vcmQ7JyxcblxuXHRcdCd9J10uam9pbignJyk7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRTaGFkZXJGcm9tU3RyKGdsLCBnbC5WRVJURVhfU0hBREVSLCBzYik7XG5cdH07XG5cdF8ubG9hZERlZmF1bHRGcmFnbWVudFNoYWRlciA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIHNiID0gW1xuXHRcdC8vIHNldCBtYWNybyBmb3IgZGVwdGggbW1hcCB0ZXh0dXJlXG5cdFx0Z2wuZGVwdGhUZXh0dXJlRXh0ID8gJyNkZWZpbmUgQ1dDX0RFUFRIX1RFWFxcbicgOiAnJyxcblx0XHRcblx0XHQvLyBzZXQgZmxvYXQgcHJlY2lzaW9uXG5cdFx0J3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycsXG5cblx0XHQvLyB0ZXh0dXJlIGZvciBkcmF3IHRleHQgbm9yIHNoYWRvdyBtYXBcblx0XHQndW5pZm9ybSBzYW1wbGVyMkQgdV9pbWFnZTsnLFxuXHRcdFx0XHRcdFxuXHRcdC8vIGZyb20gdGhlIHZlcnRleCBzaGFkZXJcblx0XHQndmFyeWluZyB2ZWMyIHZfdGV4Y29vcmQ7JyxcblxuXHRcdCd2b2lkIG1haW4odm9pZCkgeycsXG5cdFx0XHQnZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHVfaW1hZ2UsIHZfdGV4Y29vcmQpOycsXG5cdFx0J30nXG5cdFx0XS5qb2luKCcnKTtcblxuXHRcdHJldHVybiB0aGlzLmdldFNoYWRlckZyb21TdHIoZ2wsIGdsLkZSQUdNRU5UX1NIQURFUiwgc2IpO1xuXHR9O1xuXHRfLmVuYWJsZUF0dHJpYnNBcnJheSA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0X3N1cGVyLmVuYWJsZUF0dHJpYnNBcnJheS5jYWxsKHRoaXMsIGdsKTtcblx0XHRnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLnZlcnRleE5vcm1hbEF0dHJpYnV0ZSk7XG5cdFx0Z2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy52ZXJ0ZXhUZXhDb29yZEF0dHJpYnV0ZSk7XG5cdH07XG5cdF8uZGlzYWJsZUF0dHJpYnNBcnJheSA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0X3N1cGVyLmRpc2FibGVBdHRyaWJzQXJyYXkuY2FsbCh0aGlzLCBnbCk7XG5cdFx0Z2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMudmVydGV4Tm9ybWFsQXR0cmlidXRlKTtcblx0XHRnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy52ZXJ0ZXhUZXhDb29yZEF0dHJpYnV0ZSk7XG5cdH07XG5cdF8uc2V0RGltZW5zaW9uID0gZnVuY3Rpb24oZ2wsIHdpZHRoLCBoZWlnaHQpIHtcblx0XHRnbC51bmlmb3JtMmYodGhpcy5kaW1lbnNpb25Vbmlmb3JtLCB3aWR0aCwgaGVpZ2h0KTtcblx0fTtcblxufSkoZDMsIG0zLCBtNCwgZG9jdW1lbnQpO1xuXG4oZnVuY3Rpb24oZDMsIG0zLCBtNCwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0ZDMuTGlnaHRpbmdTaGFkZXIgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF9zdXBlciA9IGQzLl9TaGFkZXIucHJvdG90eXBlO1xuXHR2YXIgXyA9IGQzLkxpZ2h0aW5nU2hhZGVyLnByb3RvdHlwZSA9IG5ldyBkMy5fU2hhZGVyKCk7XG5cdFxuXHRfLmluaXRVbmlmb3JtTG9jYXRpb25zID0gZnVuY3Rpb24oZ2wpIHtcblx0XHRfc3VwZXIuaW5pdFVuaWZvcm1Mb2NhdGlvbnMuY2FsbCh0aGlzLCBnbCk7XG5cdFx0Ly8gYXNzaWduIHVuaWZvcm0gcHJvcGVydGllc1xuXHRcdHRoaXMucG9zaXRpb25TYW1wbGVVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X3Bvc2l0aW9uX3NhbXBsZScpO1xuXHRcdHRoaXMuY29sb3JTYW1wbGVVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X2NvbG9yX3NhbXBsZScpO1xuXHRcdHRoaXMuc3Nhb1NhbXBsZVVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3Vfc3Nhb19zYW1wbGUnKTtcblx0XHR0aGlzLm91dGxpbmVTYW1wbGVVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X291dGxpbmVfc2FtcGxlJyk7XG5cdH07XG5cdF8ubG9hZERlZmF1bHRWZXJ0ZXhTaGFkZXIgPSBmdW5jdGlvbihnbCkge1xuXHRcdHZhciBzYiA9IFtcblx0XHQncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7Jyxcblx0XHRcblx0XHQvLyBhdHRyaWJ1dGVzIHNldCB3aGVuIHJlbmRlcmluZyBvYmplY3RzXG5cdFx0J2F0dHJpYnV0ZSB2ZWMzIGFfdmVydGV4X3Bvc2l0aW9uOycsXG5cblx0XHQvLyBzZW50IHRvIHRoZSBmcmFnbWVudCBzaGFkZXJcbiAgICBcdCd2YXJ5aW5nIHZlYzIgdl90ZXhjb29yZDsnLFxuXG5cdFx0J3ZvaWQgbWFpbigpIHsnLFxuXHRcdFx0J2dsX1Bvc2l0aW9uID0gdmVjNChhX3ZlcnRleF9wb3NpdGlvbiwgMS4pOycsXG4gICAgICAgIFx0J3ZfdGV4Y29vcmQgPSBhX3ZlcnRleF9wb3NpdGlvbi54eSAqIC41ICsgLjU7Jyxcblx0XHQnfSddLmpvaW4oJycpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2V0U2hhZGVyRnJvbVN0cihnbCwgZ2wuVkVSVEVYX1NIQURFUiwgc2IpO1xuXHR9O1xuXHRfLmxvYWREZWZhdWx0RnJhZ21lbnRTaGFkZXIgPSBmdW5jdGlvbihnbCkge1xuXHRcdHZhciBzYiA9IFtcblxuXHRcdC8vIHNldCBmbG9hdCBwcmVjaXNpb25cblx0XHQncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyxcblxuXHQgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVfcG9zaXRpb25fc2FtcGxlOycsXG5cdCAgICAndW5pZm9ybSBzYW1wbGVyMkQgdV9jb2xvcl9zYW1wbGU7Jyxcblx0XHQndW5pZm9ybSBzYW1wbGVyMkQgdV9zc2FvX3NhbXBsZTsnLFxuXHRcdCd1bmlmb3JtIHNhbXBsZXIyRCB1X291dGxpbmVfc2FtcGxlOycsXG5cdCAgICBcbiAgICBcdCd2YXJ5aW5nIHZlYzIgdl90ZXhjb29yZDsnLFxuXG5cdCAgICAndm9pZCBtYWluKCkgeycsXG5cdCAgICBcdCd2ZWM0IHBvc2l0aW9uID0gdGV4dHVyZTJEKHVfcG9zaXRpb25fc2FtcGxlLCB2X3RleGNvb3JkKTsnLFxuXHQgICAgXHQndmVjNCBjb2xvciA9IHRleHR1cmUyRCh1X2NvbG9yX3NhbXBsZSwgdl90ZXhjb29yZCk7Jyxcblx0XHRcdCd2ZWM0IGFvID0gdGV4dHVyZTJEKHVfc3Nhb19zYW1wbGUsIHZfdGV4Y29vcmQpOycsXG5cdFx0XHQnZmxvYXQgb3V0bGluZSA9IHRleHR1cmUyRCh1X291dGxpbmVfc2FtcGxlLCB2X3RleGNvb3JkKS5yOycsXG5cblx0XHRcdC8vIHNraXAgYmFja2dyb3VuZCBjb2xvclxuXHQgICAgXHQnaWYocG9zaXRpb24udyA9PSAwLiAmJiBvdXRsaW5lID09IDEuKSB7Jyxcblx0XHRcdFx0Ly8gJ2dsX0ZyYWdDb2xvciA9IHZlYzQoMC4sIDAuLCAwLiwgMS4pOycsXG5cdCAgICBcdFx0J3JldHVybjsnLFxuXHQgICAgXHQnfScsXG5cblx0XHRcdCdnbF9GcmFnQ29sb3IgPSB2ZWM0KGNvbG9yLnJnYiAqIGFvLnIgKiBvdXRsaW5lLCAxLik7Jyxcblx0ICAgICd9J10uam9pbignJyk7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRTaGFkZXJGcm9tU3RyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIHNiKTtcblx0fTtcblxufSkoZDMsIG0zLCBtNCwgZG9jdW1lbnQpO1xuXG4oZnVuY3Rpb24oZDMsIG0zLCBtNCwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0ZDMuTm9ybWFsU2hhZGVyID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfc3VwZXIgPSBkMy5fU2hhZGVyLnByb3RvdHlwZTtcblx0dmFyIF8gPSBkMy5Ob3JtYWxTaGFkZXIucHJvdG90eXBlID0gbmV3IGQzLl9TaGFkZXIoKTtcblx0Xy5pbml0VW5pZm9ybUxvY2F0aW9ucyA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0X3N1cGVyLmluaXRVbmlmb3JtTG9jYXRpb25zLmNhbGwodGhpcywgZ2wpO1xuXHRcdC8vIGFzc2lnbiB1bmlmb3JtIHByb3BlcnRpZXNcblx0XHR0aGlzLm5vcm1hbE1hdHJpeFVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3Vfbm9ybWFsX21hdHJpeCcpO1xuXHR9O1xuXHRfLmxvYWREZWZhdWx0VmVydGV4U2hhZGVyID0gZnVuY3Rpb24oZ2wpIHtcblx0XHR2YXIgc2IgPSBbXG5cdFx0J3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycsXG5cdFx0XG5cdFx0Ly8gYXR0cmlidXRlcyBzZXQgd2hlbiByZW5kZXJpbmcgb2JqZWN0c1xuXHRcdCdhdHRyaWJ1dGUgdmVjMyBhX3ZlcnRleF9wb3NpdGlvbjsnLFxuXHRcdCdhdHRyaWJ1dGUgdmVjMyBhX3ZlcnRleF9ub3JtYWw7JyxcblxuXHRcdC8vIG1hdHJpY2VzIHNldCBieSBnbC5zZXRNYXRyaXhVbmlmb3Jtc1xuXHRcdCd1bmlmb3JtIG1hdDQgdV9tb2RlbF92aWV3X21hdHJpeDsnLFxuXHRcdCd1bmlmb3JtIG1hdDQgdV9wcm9qZWN0aW9uX21hdHJpeDsnLFxuXHRcdCd1bmlmb3JtIG1hdDMgdV9ub3JtYWxfbWF0cml4OycsXG5cblx0XHQvLyBzZW50IHRvIHRoZSBmcmFnbWVudCBzaGFkZXJcblx0XHQndmFyeWluZyB2ZWMzIHZfbm9ybWFsOycsXG5cblx0XHQndm9pZCBtYWluKCkgeycsXG5cblx0XHRcdCd2X25vcm1hbCA9IGxlbmd0aChhX3ZlcnRleF9ub3JtYWwpPT0wLiA/IGFfdmVydGV4X25vcm1hbCA6IHVfbm9ybWFsX21hdHJpeCAqIGFfdmVydGV4X25vcm1hbDsnLFxuXHRcdFx0XG5cdFx0XHQnZ2xfUG9zaXRpb24gPSB1X3Byb2plY3Rpb25fbWF0cml4ICogdV9tb2RlbF92aWV3X21hdHJpeCAqIHZlYzQoYV92ZXJ0ZXhfcG9zaXRpb24sIDEuKTsnLFxuXG5cdFx0J30nXS5qb2luKCcnKTtcblx0XHRcblx0XHRyZXR1cm4gdGhpcy5nZXRTaGFkZXJGcm9tU3RyKGdsLCBnbC5WRVJURVhfU0hBREVSLCBzYik7XG5cdH07XG5cdF8ubG9hZERlZmF1bHRGcmFnbWVudFNoYWRlciA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIHNiID0gW1xuXHRcdFxuXHRcdC8vIHNldCBmbG9hdCBwcmVjaXNpb25cblx0XHQncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7Jyxcblx0XHRcdFx0XHRcblx0XHQndmFyeWluZyB2ZWMzIHZfbm9ybWFsOycsXG5cblx0XHQndm9pZCBtYWluKHZvaWQpIHsnLFxuXHRcdFx0J3ZlYzMgbm9ybWFsID0gbGVuZ3RoKHZfbm9ybWFsKT09MC4gPyB2ZWMzKDAuLCAwLiwgMS4pIDogbm9ybWFsaXplKHZfbm9ybWFsKTsnLFxuXHRcdFx0J2dsX0ZyYWdDb2xvciA9IHZlYzQobm9ybWFsLCAwLik7Jyxcblx0XHQnfSddLmpvaW4oJycpO1xuXHRcdFxuXHRcdHJldHVybiB0aGlzLmdldFNoYWRlckZyb21TdHIoZ2wsIGdsLkZSQUdNRU5UX1NIQURFUiwgc2IpO1xuXHR9O1xuXHRfLmVuYWJsZUF0dHJpYnNBcnJheSA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0X3N1cGVyLmVuYWJsZUF0dHJpYnNBcnJheS5jYWxsKHRoaXMsIGdsKTtcblx0XHRnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLnZlcnRleE5vcm1hbEF0dHJpYnV0ZSk7XG5cdH07XG5cdF8uZGlzYWJsZUF0dHJpYnNBcnJheSA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0X3N1cGVyLmRpc2FibGVBdHRyaWJzQXJyYXkuY2FsbCh0aGlzLCBnbCk7XG5cdFx0Z2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMudmVydGV4Tm9ybWFsQXR0cmlidXRlKTtcblx0fTtcblx0Xy5zZXRNb2RlbFZpZXdNYXRyaXggPSBmdW5jdGlvbihnbCwgbXZNYXRyaXgpIHtcblx0XHRfc3VwZXIuc2V0TW9kZWxWaWV3TWF0cml4LmNhbGwodGhpcywgZ2wsIG12TWF0cml4KTtcblx0XHQvLyBjcmVhdGUgdGhlIG5vcm1hbCBtYXRyaXggYW5kIHB1c2ggaXQgdG8gdGhlIGdyYXBoaWNzIGNhcmRcblx0XHR2YXIgbm9ybWFsTWF0cml4ID0gbTMudHJhbnNwb3NlKG00LnRvSW52ZXJzZU1hdDMobXZNYXRyaXgsIFtdKSk7XG5cdFx0Z2wudW5pZm9ybU1hdHJpeDNmdih0aGlzLm5vcm1hbE1hdHJpeFVuaWZvcm0sIGZhbHNlLCBub3JtYWxNYXRyaXgpO1xuXHR9O1xuXG59KShkMywgbTMsIG00LCBkb2N1bWVudCk7XG5cbihmdW5jdGlvbihkMywgbTMsIG00LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRkMy5PdXRsaW5lU2hhZGVyID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfc3VwZXIgPSBkMy5fU2hhZGVyLnByb3RvdHlwZTtcblx0dmFyIF8gPSBkMy5PdXRsaW5lU2hhZGVyLnByb3RvdHlwZSA9IG5ldyBkMy5fU2hhZGVyKCk7XG5cblx0Xy5pbml0VW5pZm9ybUxvY2F0aW9ucyA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0X3N1cGVyLmluaXRVbmlmb3JtTG9jYXRpb25zLmNhbGwodGhpcywgZ2wpO1xuXHRcdHRoaXMubm9ybWFsU2FtcGxlVW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9ub3JtYWxfc2FtcGxlJyk7XG5cdFx0dGhpcy5kZXB0aFNhbXBsZVVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3VfZGVwdGhfc2FtcGxlJyk7XG5cdFx0dGhpcy5nYnVmZmVyVGV4dHVyZVNpemVVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X2didWZmZXJfdGV4dHVyZV9zaXplJyk7XG5cblx0XHR0aGlzLm5vcm1hbFRocmVzaG9sZFVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3Vfbm9ybWFsX3RocmVzaG9sZCcpO1xuXHRcdHRoaXMuZGVwdGhUaHJlc2hvbGRVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X2RlcHRoX3RocmVzaG9sZCcpO1xuXHRcdHRoaXMudGhpY2tuZXNzVW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV90aGlja25lc3MnKTtcblx0fTtcblx0Xy5sb2FkRGVmYXVsdFZlcnRleFNoYWRlciA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIHNiID0gW1xuXHRcdCdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnLFxuXHRcdFxuXHRcdC8vIGF0dHJpYnV0ZXMgc2V0IHdoZW4gcmVuZGVyaW5nIG9iamVjdHNcblx0XHQnYXR0cmlidXRlIHZlYzMgYV92ZXJ0ZXhfcG9zaXRpb247JyxcblxuICAgIFx0J3ZhcnlpbmcgdmVjMiB2X3RleGNvb3JkOycsXG5cblx0XHQndm9pZCBtYWluKCkgeycsXG5cdFx0XHQnZ2xfUG9zaXRpb24gPSB2ZWM0KGFfdmVydGV4X3Bvc2l0aW9uLCAxLik7JyxcbiAgICAgICAgXHQndl90ZXhjb29yZCA9IGFfdmVydGV4X3Bvc2l0aW9uLnh5ICogLjUgKyAuNTsnLFxuXHRcdCd9J10uam9pbignJyk7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRTaGFkZXJGcm9tU3RyKGdsLCBnbC5WRVJURVhfU0hBREVSLCBzYik7XG5cdH07XG5cdF8ubG9hZERlZmF1bHRGcmFnbWVudFNoYWRlciA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIHNiID0gW1xuXHRcdC8vIHNldCBmbG9hdCBwcmVjaXNpb25cblx0XHQncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7JyxcblxuXHQgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVfbm9ybWFsX3NhbXBsZTsnLFxuXHQgICAgJ3VuaWZvcm0gc2FtcGxlcjJEIHVfZGVwdGhfc2FtcGxlOycsXG5cblx0ICAgICd1bmlmb3JtIGZsb2F0IHVfbm9ybWFsX3RocmVzaG9sZDsnLFxuXHQgICAgJ3VuaWZvcm0gZmxvYXQgdV9kZXB0aF90aHJlc2hvbGQ7JyxcblxuXHQgICAgJ3VuaWZvcm0gZmxvYXQgdV90aGlja25lc3M7JyxcblxuXHQgICAgJ3VuaWZvcm0gdmVjMiB1X2didWZmZXJfdGV4dHVyZV9zaXplOycsXG5cblx0ICAgIFxuXHQgICAgJ3ZhcnlpbmcgdmVjMiB2X3RleGNvb3JkOycsXG5cblx0ICAgICd2b2lkIG1haW4oKSB7Jyxcblx0ICAgIFx0J3ZlYzMgbm9ybWFsID0gdGV4dHVyZTJEKHVfbm9ybWFsX3NhbXBsZSwgdl90ZXhjb29yZCkueHl6OycsXG5cdCAgICBcdCdmbG9hdCBkZXB0aCA9IHRleHR1cmUyRCh1X2RlcHRoX3NhbXBsZSwgdl90ZXhjb29yZCkucjsnLFxuXG5cdCAgICBcdC8vIGNoZWNrIGJhY2tncm91bmQgcGl4ZWxcblx0ICAgIFx0Ly8gJ2lmKGRlcHRoID09IDEuKSB7Jyxcblx0ICAgIFx0Ly8gXHQncmV0dXJuOycsXG5cdCAgICBcdC8vICd9JyxcblxuXHQgICAgXHQndmVjMiB0ZXhlbFNpemUgPSB1X3RoaWNrbmVzcy91X2didWZmZXJfdGV4dHVyZV9zaXplICogLjU7Jyxcblx0ICAgIFx0J3ZlYzIgb2Zmc2V0c1s4XTsnLFxuXG5cdFx0XHQnb2Zmc2V0c1swXSA9IHZlYzIoLXRleGVsU2l6ZS54LCAtdGV4ZWxTaXplLnkpOycsXG5cdFx0XHQnb2Zmc2V0c1sxXSA9IHZlYzIoLXRleGVsU2l6ZS54LCAwKTsnLFxuXHRcdFx0J29mZnNldHNbMl0gPSB2ZWMyKC10ZXhlbFNpemUueCwgdGV4ZWxTaXplLnkpOycsXG5cblx0XHRcdCdvZmZzZXRzWzNdID0gdmVjMigwLCAtdGV4ZWxTaXplLnkpOycsXG5cdFx0XHQnb2Zmc2V0c1s0XSA9IHZlYzIoMCwgIHRleGVsU2l6ZS55KTsnLFxuXG5cdFx0XHQnb2Zmc2V0c1s1XSA9IHZlYzIodGV4ZWxTaXplLngsIC10ZXhlbFNpemUueSk7Jyxcblx0XHRcdCdvZmZzZXRzWzZdID0gdmVjMih0ZXhlbFNpemUueCwgMCk7Jyxcblx0XHRcdCdvZmZzZXRzWzddID0gdmVjMih0ZXhlbFNpemUueCwgdGV4ZWxTaXplLnkpOycsXG5cblx0XHRcdCdmbG9hdCBlZGdlID0gMC47JyxcblxuXHRcdFx0J2ZvciAoaW50IGkgPSAwOyBpIDwgODsgaSsrKSB7Jyxcblx0XHRcdFx0J3ZlYzMgc2FtcGxlTm9ybSA9IHRleHR1cmUyRCh1X25vcm1hbF9zYW1wbGUsIHZfdGV4Y29vcmQgKyBvZmZzZXRzW2ldKS54eXo7JyxcblxuXHRcdFx0XHQnaWYobm9ybWFsID09IHZlYzMoLjAsIC4wLCAuMCkpIHsnLFxuXHRcdFx0XHRcdCdpZihzYW1wbGVOb3JtICE9IHZlYzMoLjAsIC4wLCAuMCkpIHsnLFxuXHRcdFx0XHRcdFx0J2VkZ2UgPSAxLjA7Jyxcblx0XHRcdFx0XHRcdCdicmVhazsnLFxuXHRcdFx0XHRcdCd9Jyxcblx0XHRcdFx0XHQnY29udGludWU7Jyxcblx0XHRcdFx0J30nLFxuXG5cdFx0XHRcdCdpZiAoZG90KHNhbXBsZU5vcm0sIG5vcm1hbCkgPCB1X25vcm1hbF90aHJlc2hvbGQpIHsnLFxuXHRcdFx0XHRcdCdlZGdlID0gMS4wOycsXG5cdFx0XHRcdFx0J2JyZWFrOycsXG5cdFx0XHRcdCd9JyxcblxuXHRcdFx0XHQnZmxvYXQgc2FtcGxlRGVwdGggPSB0ZXh0dXJlMkQodV9kZXB0aF9zYW1wbGUsIHZfdGV4Y29vcmQgKyBvZmZzZXRzW2ldKS5yOycsXG5cdFx0XHRcdCdpZiAoYWJzKHNhbXBsZURlcHRoIC0gZGVwdGgpID4gdV9kZXB0aF90aHJlc2hvbGQpIHsnLFxuXHRcdFx0XHRcdCdlZGdlID0gMS4wOycsXG5cdFx0XHRcdFx0J2JyZWFrOycsXG5cdFx0XHRcdCd9Jyxcblx0XHRcdCd9JyxcblxuXHRcdFx0J2VkZ2UgPSAxLiAtIGVkZ2U7JyxcblxuXHRcdCAgICAnZ2xfRnJhZ0NvbG9yID0gdmVjNChlZGdlLCBlZGdlLCBlZGdlLCAxLik7Jyxcblx0ICAgICd9J10uam9pbignJyk7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRTaGFkZXJGcm9tU3RyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIHNiKTtcblx0fTtcblx0Xy5zZXRHYnVmZmVyVGV4dHVyZVNpemUgPSBmdW5jdGlvbihnbCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdGdsLnVuaWZvcm0yZih0aGlzLmdidWZmZXJUZXh0dXJlU2l6ZVVuaWZvcm0sIHdpZHRoLCBoZWlnaHQpO1xuXHR9O1xuXHRfLnNldE5vcm1hbFRocmVzaG9sZCA9IGZ1bmN0aW9uKGdsLCB2YWx1ZSkge1xuXHRcdGdsLnVuaWZvcm0xZih0aGlzLm5vcm1hbFRocmVzaG9sZFVuaWZvcm0sIHZhbHVlKTtcblx0fTtcblx0Xy5zZXREZXB0aFRocmVzaG9sZCA9IGZ1bmN0aW9uKGdsLCB2YWx1ZSkge1xuXHRcdGdsLnVuaWZvcm0xZih0aGlzLmRlcHRoVGhyZXNob2xkVW5pZm9ybSwgdmFsdWUpO1xuXHR9O1xuXHRfLnNldFRoaWNrbmVzcyA9IGZ1bmN0aW9uKGdsLCB2YWx1ZSkge1xuXHRcdGdsLnVuaWZvcm0xZih0aGlzLnRoaWNrbmVzc1VuaWZvcm0sIHZhbHVlKTtcblx0fTtcblxufSkoZDMsIG0zLCBtNCwgZG9jdW1lbnQpO1xuXG4oZnVuY3Rpb24oZDMsIG0zLCBtNCwgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0ZDMuUGhvbmdTaGFkZXIgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF9zdXBlciA9IGQzLl9TaGFkZXIucHJvdG90eXBlO1xuXHR2YXIgXyA9IGQzLlBob25nU2hhZGVyLnByb3RvdHlwZSA9IG5ldyBkMy5fU2hhZGVyKCk7XG5cdF8uaW5pdFVuaWZvcm1Mb2NhdGlvbnMgPSBmdW5jdGlvbihnbCkge1xuXHRcdF9zdXBlci5pbml0VW5pZm9ybUxvY2F0aW9ucy5jYWxsKHRoaXMsIGdsKTtcblx0XHQvLyBhc3NpZ24gdW5pZm9ybSBwcm9wZXJ0aWVzXG5cdFx0dGhpcy5zaGFkb3dVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X3NoYWRvdycpO1xuXHRcdHRoaXMuZmxhdENvbG9yVW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9mbGF0X2NvbG9yJyk7XG5cdFx0dGhpcy5ub3JtYWxNYXRyaXhVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X25vcm1hbF9tYXRyaXgnKTtcblx0XHRcblx0XHR0aGlzLmxpZ2h0TW9kZWxWaWV3TWF0cml4VW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9saWdodF9tb2RlbF92aWV3X21hdHJpeCcpO1xuXHRcdHRoaXMubGlnaHRQcm9qZWN0aW9uTWF0cml4VW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9saWdodF9wcm9qZWN0aW9uX21hdHJpeCcpO1xuXG5cdFx0dGhpcy5saWdodERpZmZ1c2VDb2xvclVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3VfbGlnaHRfZGlmZnVzZV9jb2xvcicpO1xuXHRcdHRoaXMubGlnaHRTcGVjdWxhckNvbG9yVW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9saWdodF9zcGVjdWxhcl9jb2xvcicpO1xuXHRcdHRoaXMubGlnaHREaXJlY3Rpb25Vbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X2xpZ2h0X2RpcmVjdGlvbicpO1xuXG5cdFx0dGhpcy5tYXRlcmlhbEFtYmllbnRDb2xvclVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3VfbWF0ZXJpYWxfYW1iaWVudF9jb2xvcicpO1xuXHRcdHRoaXMubWF0ZXJpYWxEaWZmdXNlQ29sb3JVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X21hdGVyaWFsX2RpZmZ1c2VfY29sb3InKTtcblx0XHR0aGlzLm1hdGVyaWFsU3BlY3VsYXJDb2xvclVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3VfbWF0ZXJpYWxfc3BlY3VsYXJfY29sb3InKTtcblx0XHR0aGlzLm1hdGVyaWFsU2hpbmluZXNzVW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9tYXRlcmlhbF9zaGluaW5lc3MnKTtcblx0XHR0aGlzLm1hdGVyaWFsQWxwaGFVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X21hdGVyaWFsX2FscGhhJyk7XG5cblx0XHR0aGlzLmZvZ01vZGVVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X2ZvZ19tb2RlJyk7XG5cdFx0dGhpcy5mb2dDb2xvclVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3VfZm9nX2NvbG9yJyk7XG5cdFx0dGhpcy5mb2dTdGFydFVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3VfZm9nX3N0YXJ0Jyk7XG5cdFx0dGhpcy5mb2dFbmRVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X2ZvZ19lbmQnKTtcblx0XHR0aGlzLmZvZ0RlbnNpdHlVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X2ZvZ19kZW5zaXR5Jyk7XG5cblx0XHQvLyB0ZXh0dXJlIGZvciBzaGFkb3cgbWFwXG5cdFx0dGhpcy5zaGFkb3dEZXB0aFNhbXBsZVVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3Vfc2hhZG93X2RlcHRoX3NhbXBsZScpO1xuXHRcdHRoaXMuc2hhZG93VGV4dHVyZVNpemVVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X3NoYWRvd190ZXh0dXJlX3NpemUnKTtcblx0XHR0aGlzLnNoYWRvd0ludGVuc2l0eVVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3Vfc2hhZG93X2ludGVuc2l0eScpO1xuXHRcdFxuXHRcdC8vIGdhbW1hIGNvcnJlY3Rpb25cblx0XHR0aGlzLmdhbW1hQ29ycmVjdGlvblVuaWZvcm0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5nUHJvZ3JhbSwgJ3VfZ2FtbWFfaW52ZXJ0ZWQnKTtcblx0XHRcblx0XHQvLyBwb2ludCBzaXplXG5cdFx0dGhpcy5wb2ludFNpemVVbmlmb3JtID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuZ1Byb2dyYW0sICd1X3BvaW50X3NpemUnKTtcblx0fTtcblx0Xy5sb2FkRGVmYXVsdFZlcnRleFNoYWRlciA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIHNiID0gW1xuXHRcdCdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnLFxuXHRcdFxuXHRcdC8vIGF0dHJpYnV0ZXMgc2V0IHdoZW4gcmVuZGVyaW5nIG9iamVjdHNcblx0XHQnYXR0cmlidXRlIHZlYzMgYV92ZXJ0ZXhfcG9zaXRpb247Jyxcblx0XHQnYXR0cmlidXRlIHZlYzMgYV92ZXJ0ZXhfbm9ybWFsOycsXG5cblx0XHQvLyBzY2VuZSB1bmlmb3Jtc1xuXHRcdCd1bmlmb3JtIHZlYzMgdV9saWdodF9kaWZmdXNlX2NvbG9yOycsXG5cdFx0J3VuaWZvcm0gdmVjMyB1X21hdGVyaWFsX2FtYmllbnRfY29sb3I7Jyxcblx0XHQndW5pZm9ybSB2ZWMzIHVfbWF0ZXJpYWxfZGlmZnVzZV9jb2xvcjsnLFxuXHRcdC8vIG1hdHJpY2VzIHNldCBieSBnbC5zZXRNYXRyaXhVbmlmb3Jtc1xuXHRcdCd1bmlmb3JtIG1hdDQgdV9tb2RlbF92aWV3X21hdHJpeDsnLFxuXHRcdCd1bmlmb3JtIG1hdDQgdV9wcm9qZWN0aW9uX21hdHJpeDsnLFxuXHRcdCd1bmlmb3JtIG1hdDMgdV9ub3JtYWxfbWF0cml4OycsXG5cblx0XHQndW5pZm9ybSBtYXQ0IHVfbGlnaHRfbW9kZWxfdmlld19tYXRyaXg7Jyxcblx0XHQndW5pZm9ybSBtYXQ0IHVfbGlnaHRfcHJvamVjdGlvbl9tYXRyaXg7JyxcblxuXHRcdCd1bmlmb3JtIGJvb2wgdV9zaGFkb3c7JyxcblxuXHRcdC8vIHNlbnQgdG8gdGhlIGZyYWdtZW50IHNoYWRlclxuXHRcdCd2YXJ5aW5nIHZlYzMgdl92aWV3cG9zOycsXG4gIFx0XHQndmFyeWluZyB2ZWM0IHZfc2hhZGNvb3JkOycsXG5cdFx0J3ZhcnlpbmcgdmVjMyB2X2RpZmZ1c2U7Jyxcblx0XHQndmFyeWluZyB2ZWMzIHZfYW1iaWVudDsnLFxuXHRcdCd2YXJ5aW5nIHZlYzMgdl9ub3JtYWw7Jyxcblx0XHRcblx0XHQndW5pZm9ybSBmbG9hdCB1X3BvaW50X3NpemU7JyxcblxuXHRcdCd2b2lkIG1haW4oKSB7JyxcblxuXHRcdFx0J3Zfbm9ybWFsID0gbGVuZ3RoKGFfdmVydGV4X25vcm1hbCk9PTAuID8gYV92ZXJ0ZXhfbm9ybWFsIDogdV9ub3JtYWxfbWF0cml4ICogYV92ZXJ0ZXhfbm9ybWFsOycsXG5cdFx0XHQndl9hbWJpZW50ID0gdV9tYXRlcmlhbF9hbWJpZW50X2NvbG9yOycsXG5cdFx0XHQndl9kaWZmdXNlID0gdV9tYXRlcmlhbF9kaWZmdXNlX2NvbG9yICogdV9saWdodF9kaWZmdXNlX2NvbG9yOycsXG5cblx0XHRcdCdpZih1X3NoYWRvdykgeycsXG5cdFx0XHRcdCd2X3NoYWRjb29yZCA9IHVfbGlnaHRfcHJvamVjdGlvbl9tYXRyaXggKiB1X2xpZ2h0X21vZGVsX3ZpZXdfbWF0cml4ICogdmVjNChhX3ZlcnRleF9wb3NpdGlvbiwgMS4pOycsXG5cdFx0XHRcdCd2X3NoYWRjb29yZCAvPSB2X3NoYWRjb29yZC53OycsXG5cdFx0XHQnfScsXG5cblx0XHRcdCd2ZWM0IHZpZXdQb3MgPSB1X21vZGVsX3ZpZXdfbWF0cml4ICogdmVjNChhX3ZlcnRleF9wb3NpdGlvbiwgMS4pOycsXG5cblx0XHRcdCd2X3ZpZXdwb3MgPSB2aWV3UG9zLnh5eiAvIHZpZXdQb3MudzsnLFxuXHRcdFx0XG5cdFx0XHQnZ2xfUG9zaXRpb24gPSB1X3Byb2plY3Rpb25fbWF0cml4ICogdmlld1BvczsnLFxuXG5cdFx0XHQvLyBqdXN0IHRvIG1ha2Ugc3VyZSB0aGUgdyBpcyAxXG5cdFx0XHQnZ2xfUG9zaXRpb24gLz0gZ2xfUG9zaXRpb24udzsnLFxuXHRcdFx0J2dsX1BvaW50U2l6ZSA9IHVfcG9pbnRfc2l6ZTsnLFxuXG5cdFx0J30nXS5qb2luKCcnKTtcblx0XHRcblx0XHRyZXR1cm4gdGhpcy5nZXRTaGFkZXJGcm9tU3RyKGdsLCBnbC5WRVJURVhfU0hBREVSLCBzYik7XG5cdH07XG5cdF8ubG9hZERlZmF1bHRGcmFnbWVudFNoYWRlciA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIHNiID0gW1xuXHRcdC8vIHNldCBtYWNybyBmb3IgZGVwdGggbW1hcCB0ZXh0dXJlXG5cdFx0Z2wuZGVwdGhUZXh0dXJlRXh0ID8gJyNkZWZpbmUgQ1dDX0RFUFRIX1RFWFxcbicgOiAnJyxcblx0XHRcblx0XHQvLyBzZXQgZmxvYXQgcHJlY2lzaW9uXG5cdFx0J3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycsXG5cdFx0XHRcdFx0XG5cdFx0Ly8gc2NlbmUgdW5pZm9ybXNcblx0XHQndW5pZm9ybSB2ZWMzIHVfbGlnaHRfc3BlY3VsYXJfY29sb3I7Jyxcblx0XHQndW5pZm9ybSB2ZWMzIHVfbGlnaHRfZGlyZWN0aW9uOycsXG5cblx0XHQndW5pZm9ybSB2ZWMzIHVfbWF0ZXJpYWxfc3BlY3VsYXJfY29sb3I7Jyxcblx0XHQndW5pZm9ybSBmbG9hdCB1X21hdGVyaWFsX3NoaW5pbmVzczsnLFxuXHRcdCd1bmlmb3JtIGZsb2F0IHVfbWF0ZXJpYWxfYWxwaGE7JyxcblxuXHRcdCd1bmlmb3JtIGludCB1X2ZvZ19tb2RlOycsXG5cdFx0J3VuaWZvcm0gdmVjMyB1X2ZvZ19jb2xvcjsnLFxuXHRcdCd1bmlmb3JtIGZsb2F0IHVfZm9nX2RlbnNpdHk7Jyxcblx0XHQndW5pZm9ybSBmbG9hdCB1X2ZvZ19zdGFydDsnLFxuXHRcdCd1bmlmb3JtIGZsb2F0IHVfZm9nX2VuZDsnLFxuXG5cdFx0J3VuaWZvcm0gYm9vbCB1X3NoYWRvdzsnLFxuXHRcdCd1bmlmb3JtIGZsb2F0IHVfc2hhZG93X2ludGVuc2l0eTsnLFxuXG5cdFx0J3VuaWZvcm0gYm9vbCB1X2ZsYXRfY29sb3I7Jyxcblx0XHRcblx0XHQndW5pZm9ybSBmbG9hdCB1X2dhbW1hX2ludmVydGVkOycsXG5cblx0XHQvLyB0ZXh0dXJlIGZvciBzaGFkb3cgbWFwXG5cdFx0J3VuaWZvcm0gc2FtcGxlcjJEIHVfc2hhZG93X2RlcHRoX3NhbXBsZTsnLFxuXG5cdFx0J3VuaWZvcm0gdmVjMiB1X3NoYWRvd190ZXh0dXJlX3NpemU7Jyxcblx0XHRcdFx0XHRcblx0XHQvLyBmcm9tIHRoZSB2ZXJ0ZXggc2hhZGVyXG5cdFx0J3ZhcnlpbmcgdmVjMyB2X3ZpZXdwb3M7JyxcbiAgXHRcdCd2YXJ5aW5nIHZlYzQgdl9zaGFkY29vcmQ7Jyxcblx0XHQndmFyeWluZyB2ZWMzIHZfZGlmZnVzZTsnLFxuXHRcdCd2YXJ5aW5nIHZlYzMgdl9hbWJpZW50OycsXG5cdFx0J3ZhcnlpbmcgdmVjMyB2X25vcm1hbDsnLFxuXG5cblx0XHQnXFxuI2lmbmRlZiBDV0NfREVQVEhfVEVYXFxuJyxcblx0XHQnZmxvYXQgdW5wYWNrICh2ZWM0IGNvbG91cikgeycsXG5cdFx0XHQnY29uc3QgdmVjNCBiaXRTaGlmdHMgPSB2ZWM0KDEuLCcsXG5cdFx0XHRcdCcxLiAvIDI1NS4sJyxcblx0XHRcdFx0JzEuIC8gKDI1NS4gKiAyNTUuKSwnLFxuXHRcdFx0XHQnMS4gLyAoMjU1LiAqIDI1NS4gKiAyNTUuKSk7Jyxcblx0XHRcdCdyZXR1cm4gZG90KGNvbG91ciwgYml0U2hpZnRzKTsnLFxuXHRcdCd9Jyxcblx0XHQnXFxuI2VuZGlmXFxuJyxcblxuXHRcdCdmbG9hdCBzaGFkb3dNYXBEZXB0aCh2ZWM0IHNoYWRvd01hcENvbG9yKSB7Jyxcblx0XHRcdCdmbG9hdCB6U2hhZG93TWFwOycsXG5cdFx0XHQnXFxuI2lmZGVmIENXQ19ERVBUSF9URVhcXG4nLFxuXHRcdFx0J3pTaGFkb3dNYXAgPSBzaGFkb3dNYXBDb2xvci5yOycsXG5cdFx0XHQnXFxuI2Vsc2VcXG4nLFxuXHRcdFx0J3pTaGFkb3dNYXAgPSB1bnBhY2soc2hhZG93TWFwQ29sb3IpOycsXG5cdFx0XHQnXFxuI2VuZGlmXFxuJyxcblx0XHRcdCdyZXR1cm4gelNoYWRvd01hcDsnLFxuXHRcdCd9JyxcblxuXHRcdCd2b2lkIG1haW4odm9pZCkgeycsXG5cdFx0XHQndmVjMyBjb2xvciA9IHZfZGlmZnVzZTsnLFxuXHRcdFx0J2lmKGxlbmd0aCh2X25vcm1hbCkhPTAuKXsnLFxuXHRcdFx0XHQndmVjMyBub3JtYWwgPSBub3JtYWxpemUodl9ub3JtYWwpOycsXG5cdFx0XHRcdCd2ZWMzIGxpZ2h0RGlyID0gbm9ybWFsaXplKC11X2xpZ2h0X2RpcmVjdGlvbik7Jyxcblx0XHRcdFx0J2Zsb2F0IG5Eb3RMID0gZG90KG5vcm1hbCwgbGlnaHREaXIpOycsXG5cbiAgICBcdFx0XHQnZmxvYXQgc2hhZG93ID0gMC4wOycsXG4gICAgXHRcdFx0J2lmKHVfc2hhZG93KSB7Jyxcblx0XHRcdFx0XHQndmVjMyBkZXB0aENvb3JkID0gLjUgKyB2X3NoYWRjb29yZC54eXogLyB2X3NoYWRjb29yZC53ICogLjU7JyxcblxuXHRcdFx0XHQgICAgJ2lmKGRlcHRoQ29vcmQueiA8PSAxLiAmJiBkZXB0aENvb3JkLnogPj0gMC4pIHsnLFxuXHRcdFx0XHRcdFx0J2Zsb2F0IGJpYXMgPSBtYXgoLjA1ICogKDEuIC0gbkRvdEwpLCAuMDA1KTsnLFxuXHRcdFx0XHRcdFx0J3ZlYzIgdGV4ZWxTaXplID0gMS4gLyB1X3NoYWRvd190ZXh0dXJlX3NpemU7Jyxcblx0XHRcdFx0XHQgICAgJ2ZvcihpbnQgeCA9IC0xOyB4IDw9IDE7ICsreCkgeycsXG5cdFx0XHRcdFx0ICAgICAgICAnZm9yKGludCB5ID0gLTE7IHkgPD0gMTsgKyt5KSAgeycsXG5cdFx0XHRcdFx0XHRcdFx0J3ZlYzQgc2hhZG93TWFwQ29sb3IgPSB0ZXh0dXJlMkQodV9zaGFkb3dfZGVwdGhfc2FtcGxlLCBkZXB0aENvb3JkLnh5ICsgdmVjMih4LCB5KSAqIHRleGVsU2l6ZSk7Jyxcblx0XHRcdFx0XHRcdFx0XHQnZmxvYXQgelNoYWRvd01hcCA9IHNoYWRvd01hcERlcHRoKHNoYWRvd01hcENvbG9yKTsnLFxuXHRcdFx0XHRcdCAgICAgICAgICAgICdzaGFkb3cgKz0gelNoYWRvd01hcCArIGJpYXMgPCBkZXB0aENvb3JkLnogPyAxLiA6IDAuOycsXG5cdFx0XHRcdFx0ICAgICAgICAnfScsXG5cdFx0XHRcdFx0ICAgICd9Jyxcblx0XHRcdFx0XHQgICAgJ3NoYWRvdyAvPSA5LjsnLFxuXHRcdFx0XHRcdCAgICAnc2hhZG93ICo9IHVfc2hhZG93X2ludGVuc2l0eTsnLFxuXHRcdFx0XHRcdCd9JyxcbiAgICBcdFx0XHQnfScsXG5cbiAgICBcdFx0XHQnaWYoIXVfZmxhdF9jb2xvcikgeycsXG5cdFx0XHRcdFx0J3ZlYzMgdmlld0RpciA9IG5vcm1hbGl6ZSgtdl92aWV3cG9zKTsnLFxuXHRcdFx0XHRcdCd2ZWMzIGhhbGZEaXIgPSBub3JtYWxpemUobGlnaHREaXIgKyB2aWV3RGlyKTsnLFxuXHRcdFx0XHRcdCdmbG9hdCBuRG90SFYgPSBtYXgoZG90KGhhbGZEaXIsIG5vcm1hbCksIDAuKTsnLFxuXHRcdFx0XHRcdCd2ZWMzIHNwZWN1bGFyID0gdV9tYXRlcmlhbF9zcGVjdWxhcl9jb2xvciAqIHVfbGlnaHRfc3BlY3VsYXJfY29sb3I7Jyxcblx0XHRcdFx0XHQnY29sb3IqPW1heChuRG90TCwgMC4pOycsXG5cdFx0XHRcdFx0J2NvbG9yKz1zcGVjdWxhciAqIHBvdyhuRG90SFYsIHVfbWF0ZXJpYWxfc2hpbmluZXNzKTsnLFxuXHRcdFx0XHQnfScsXG5cblx0XHRcdFx0Ly8gc2V0IHRoZSBjb2xvclxuXHRcdFx0XHQnY29sb3IgPSAoMS4tc2hhZG93KSpjb2xvcit2X2FtYmllbnQ7Jyxcblx0XHRcdCd9JyxcblxuXHRcdFx0J2dsX0ZyYWdDb2xvciA9IHZlYzQocG93KGNvbG9yLCB2ZWMzKHVfZ2FtbWFfaW52ZXJ0ZWQpKSwgdV9tYXRlcmlhbF9hbHBoYSk7JyxcblxuXHRcdFx0J2lmKHVfZm9nX21vZGUgIT0gMCl7Jyxcblx0XHRcdFx0J2Zsb2F0IGZvZ0Nvb3JkID0gMS4tY2xhbXAoKHVfZm9nX2VuZCAtIGdsX0ZyYWdDb29yZC56L2dsX0ZyYWdDb29yZC53KSAvICh1X2ZvZ19lbmQgLSB1X2ZvZ19zdGFydCksIDAuLCAxLik7Jyxcblx0XHRcdFx0J2Zsb2F0IGZvZ0ZhY3RvciA9IDEuOycsXG5cblx0XHRcdFx0Ly8gbGluZWFyIGVxdWF0aW9uXG5cdFx0XHRcdCdpZih1X2ZvZ19tb2RlID09IDEpeycsXG5cdFx0XHRcdFx0J2ZvZ0ZhY3RvciA9IDEuLWZvZ0Nvb3JkOycsXG5cdFx0XHRcdCd9Jyxcblx0XHRcdFx0Ly8gZXhwIGVxdWF0aW9uXG5cdFx0XHRcdCdlbHNlIGlmKHVfZm9nX21vZGUgPT0gMikgeycsXG5cdFx0XHRcdFx0J2ZvZ0ZhY3RvciA9IGNsYW1wKGV4cCgtdV9mb2dfZGVuc2l0eSpmb2dDb29yZCksIDAuLCAxLik7Jyxcblx0XHRcdFx0J30nLFxuXHRcdFx0XHQvLyBleHAyIGVxdWF0aW9uXG5cdFx0XHRcdCdlbHNlIGlmKHVfZm9nX21vZGUgPT0gMykgeycsXG5cdFx0XHRcdFx0J2ZvZ0ZhY3RvciA9IGNsYW1wKGV4cCgtcG93KHVfZm9nX2RlbnNpdHkqZm9nQ29vcmQsIDIuKSksIDAuLCAxLik7Jyxcblx0XHRcdFx0J30nLFxuXHRcdFx0XHQnZ2xfRnJhZ0NvbG9yID0gbWl4KHZlYzQodV9mb2dfY29sb3IsIDEuKSwgZ2xfRnJhZ0NvbG9yLCBmb2dGYWN0b3IpOycsXG5cblx0XHRcdFx0Ly8gZm9yIGRlYnVnZ2luZ1xuXHRcdFx0XHQvLyAnZ2xfRnJhZ0NvbG9yID0gdmVjNCh2ZWMzKGZvZ0ZhY3RvciksIDEuKTsnLFxuXHRcdFx0J30nLFxuXHRcdCd9J1xuXHRcdF0uam9pbignJyk7XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuZ2V0U2hhZGVyRnJvbVN0cihnbCwgZ2wuRlJBR01FTlRfU0hBREVSLCBzYik7XG5cdH07XG5cdF8uZW5hYmxlQXR0cmlic0FycmF5ID0gZnVuY3Rpb24oZ2wpIHtcblx0XHRfc3VwZXIuZW5hYmxlQXR0cmlic0FycmF5LmNhbGwodGhpcywgZ2wpO1xuXHRcdGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMudmVydGV4Tm9ybWFsQXR0cmlidXRlKTtcblx0fTtcblx0Xy5kaXNhYmxlQXR0cmlic0FycmF5ID0gZnVuY3Rpb24oZ2wpIHtcblx0XHRfc3VwZXIuZGlzYWJsZUF0dHJpYnNBcnJheS5jYWxsKHRoaXMsIGdsKTtcblx0XHRnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy52ZXJ0ZXhOb3JtYWxBdHRyaWJ1dGUpO1xuXHR9O1xuXHRfLnNldE1hdHJpeFVuaWZvcm1zID0gZnVuY3Rpb24oZ2wsIG1vZGVsTWF0cml4KSB7XG5cdFx0aWYobW9kZWxNYXRyaXggPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dGhpcy5zZXRNb2RlbFZpZXdNYXRyaXgoZ2wsIGdsLm1vZGVsVmlld01hdHJpeCk7XG5cdFx0XHR0aGlzLnNldExpZ2h0TW9kZWxWaWV3TWF0cml4KGdsLCBnbC5saWdodFZpZXdNYXRyaXgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgbXZNYXRyaXggPSBtNC5tdWx0aXBseShnbC5tb2RlbFZpZXdNYXRyaXgsIG1vZGVsTWF0cml4LCBbXSk7XG5cdFx0XHR2YXIgbGlnaHRNb2RlbFZpZXdNYXRyaXggPSBtNC5tdWx0aXBseShnbC5saWdodFZpZXdNYXRyaXgsIG1vZGVsTWF0cml4LCBbXSk7XG5cblx0XHRcdHRoaXMuc2V0TW9kZWxWaWV3TWF0cml4KGdsLCBtdk1hdHJpeCk7XG5cdFx0XHR0aGlzLnNldExpZ2h0TW9kZWxWaWV3TWF0cml4KGdsLCBsaWdodE1vZGVsVmlld01hdHJpeCk7XG5cdFx0fVxuXHR9O1xuXHRfLnNldE1vZGVsVmlld01hdHJpeCA9IGZ1bmN0aW9uKGdsLCBtdk1hdHJpeCkge1xuXHRcdF9zdXBlci5zZXRNb2RlbFZpZXdNYXRyaXguY2FsbCh0aGlzLCBnbCwgbXZNYXRyaXgpO1xuXHRcdC8vIGNyZWF0ZSB0aGUgbm9ybWFsIG1hdHJpeCBhbmQgcHVzaCBpdCB0byB0aGUgZ3JhcGhpY3MgY2FyZFxuXHRcdHZhciBub3JtYWxNYXRyaXggPSBtMy50cmFuc3Bvc2UobTQudG9JbnZlcnNlTWF0Myhtdk1hdHJpeCwgW10pKTtcblx0XHRnbC51bmlmb3JtTWF0cml4M2Z2KHRoaXMubm9ybWFsTWF0cml4VW5pZm9ybSwgZmFsc2UsIG5vcm1hbE1hdHJpeCk7XG5cdH07XG5cdF8uc2V0RmxhdENvbG9yID0gZnVuY3Rpb24oZ2wsIGVuYWJsZWQpIHtcblx0XHRnbC51bmlmb3JtMWkodGhpcy5mbGF0Q29sb3JVbmlmb3JtLCBlbmFibGVkKTtcblx0fTtcblx0Xy5zZXRTaGFkb3cgPSBmdW5jdGlvbihnbCwgZW5hYmxlZCkge1xuXHRcdGdsLnVuaWZvcm0xaSh0aGlzLnNoYWRvd1VuaWZvcm0sIGVuYWJsZWQpO1xuXHR9O1xuXHRfLnNldEZvZ01vZGUgPSBmdW5jdGlvbihnbCwgbW9kZSkge1xuXHRcdGdsLnVuaWZvcm0xaSh0aGlzLmZvZ01vZGVVbmlmb3JtLCBtb2RlKTtcblx0fTtcblx0Xy5zZXRGb2dDb2xvciA9IGZ1bmN0aW9uKGdsLCBjb2xvcikge1xuXHRcdGdsLnVuaWZvcm0zZnYodGhpcy5mb2dDb2xvclVuaWZvcm0sIGNvbG9yKTtcblx0fTtcblx0Xy5zZXRGb2dTdGFydCA9IGZ1bmN0aW9uKGdsLCBmb2dTdGFydCkge1xuXHRcdGdsLnVuaWZvcm0xZih0aGlzLmZvZ1N0YXJ0VW5pZm9ybSwgZm9nU3RhcnQpO1xuXHR9O1xuXHRfLnNldEZvZ0VuZCA9IGZ1bmN0aW9uKGdsLCBmb2dFbmQpIHtcblx0XHRnbC51bmlmb3JtMWYodGhpcy5mb2dFbmRVbmlmb3JtLCBmb2dFbmQpO1xuXHR9O1xuXHRfLnNldEZvZ0RlbnNpdHkgPSBmdW5jdGlvbihnbCwgZGVuc2l0eSkge1xuXHRcdGdsLnVuaWZvcm0xZih0aGlzLmZvZ0RlbnNpdHlVbmlmb3JtLCBkZW5zaXR5KTtcblx0fTtcblx0Xy5zZXRNYXRlcmlhbEFtYmllbnRDb2xvciA9IGZ1bmN0aW9uKGdsLCBhbWJpZW50KSB7XG5cdFx0Z2wudW5pZm9ybTNmdih0aGlzLm1hdGVyaWFsQW1iaWVudENvbG9yVW5pZm9ybSwgYW1iaWVudCk7XG5cdH07XG5cdF8uc2V0TWF0ZXJpYWxEaWZmdXNlQ29sb3IgPSBmdW5jdGlvbihnbCwgZGlmZnVzZSkge1xuXHRcdGdsLnVuaWZvcm0zZnYodGhpcy5tYXRlcmlhbERpZmZ1c2VDb2xvclVuaWZvcm0sIGRpZmZ1c2UpO1xuXHR9O1xuXHRfLnNldE1hdGVyaWFsU3BlY3VsYXJDb2xvciA9IGZ1bmN0aW9uKGdsLCBzcGVjdWxhcikge1xuXHRcdGdsLnVuaWZvcm0zZnYodGhpcy5tYXRlcmlhbFNwZWN1bGFyQ29sb3JVbmlmb3JtLCBzcGVjdWxhcik7XG5cdH07XG5cdF8uc2V0TWF0ZXJpYWxTaGluaW5lc3MgPSBmdW5jdGlvbihnbCwgc2hpbmluZXNzKSB7XG5cdFx0Z2wudW5pZm9ybTFmKHRoaXMubWF0ZXJpYWxTaGluaW5lc3NVbmlmb3JtLCBzaGluaW5lc3MpO1xuXHR9O1xuXHRfLnNldE1hdGVyaWFsQWxwaGEgPSBmdW5jdGlvbihnbCwgYWxwaGEpIHtcblx0XHRnbC51bmlmb3JtMWYodGhpcy5tYXRlcmlhbEFscGhhVW5pZm9ybSwgYWxwaGEpO1xuXHR9O1xuXHRfLnNldExpZ2h0RGlmZnVzZUNvbG9yID0gZnVuY3Rpb24oZ2wsIGRpZmZ1c2UpIHtcblx0XHRnbC51bmlmb3JtM2Z2KHRoaXMubGlnaHREaWZmdXNlQ29sb3JVbmlmb3JtLCBkaWZmdXNlKTtcblx0fTtcblx0Xy5zZXRMaWdodFNwZWN1bGFyQ29sb3IgPSBmdW5jdGlvbihnbCwgc3BlY3VsYXIpIHtcblx0XHRnbC51bmlmb3JtM2Z2KHRoaXMubGlnaHRTcGVjdWxhckNvbG9yVW5pZm9ybSwgc3BlY3VsYXIpO1xuXHR9O1xuXHRfLnNldExpZ2h0RGlyZWN0aW9uID0gZnVuY3Rpb24oZ2wsIGRpcmVjdGlvbikge1xuXHRcdGdsLnVuaWZvcm0zZnYodGhpcy5saWdodERpcmVjdGlvblVuaWZvcm0sIGRpcmVjdGlvbik7XG5cdH07XG5cdF8uc2V0TGlnaHRNb2RlbFZpZXdNYXRyaXggPSBmdW5jdGlvbihnbCwgbXZNYXRyaXgpIHtcblx0XHRnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMubGlnaHRNb2RlbFZpZXdNYXRyaXhVbmlmb3JtLCBmYWxzZSwgbXZNYXRyaXgpO1xuXHR9O1xuXHRfLnNldExpZ2h0UHJvamVjdGlvbk1hdHJpeCA9IGZ1bmN0aW9uKGdsLCBtYXRyaXgpIHtcblx0XHRnbC51bmlmb3JtTWF0cml4NGZ2KHRoaXMubGlnaHRQcm9qZWN0aW9uTWF0cml4VW5pZm9ybSwgZmFsc2UsIG1hdHJpeCk7XG5cdH07XG5cdF8uc2V0U2hhZG93VGV4dHVyZVNpemUgPSBmdW5jdGlvbihnbCwgd2lkdGgsIGhlaWdodCkge1xuXHRcdGdsLnVuaWZvcm0yZih0aGlzLnNoYWRvd1RleHR1cmVTaXplVW5pZm9ybSwgd2lkdGgsIGhlaWdodCk7XG5cdH07XG5cdF8uc2V0U2hhZG93SW50ZW5zaXR5ID0gZnVuY3Rpb24oZ2wsIGludGVuc2l0eSkge1xuXHRcdGdsLnVuaWZvcm0xZih0aGlzLnNoYWRvd0ludGVuc2l0eVVuaWZvcm0sIGludGVuc2l0eSk7XG5cdH07XG5cdF8uc2V0R2FtbWFDb3JyZWN0aW9uID0gZnVuY3Rpb24oZ2wsIGdhbW1hQ29ycmVjdGlvbikge1xuXHQgICAgLy8gbWFrZSBzdXJlIGdhbW1hIGNvcnJlY3Rpb24gaXMgaW52ZXJ0ZWQgaGVyZSBhcyBpdCBpcyBtb3JlIGVmZmljaWVudCBpbiB0aGUgc2hhZGVyXG5cdFx0Z2wudW5pZm9ybTFmKHRoaXMuZ2FtbWFDb3JyZWN0aW9uVW5pZm9ybSwgMS4wL2dhbW1hQ29ycmVjdGlvbik7XG5cdH07XG5cdF8uc2V0UG9pbnRTaXplID0gZnVuY3Rpb24oZ2wsIHBvaW50U2l6ZSkge1xuXHRcdGdsLnVuaWZvcm0xZih0aGlzLnBvaW50U2l6ZVVuaWZvcm0sIHBvaW50U2l6ZSk7XG5cdH07XG5cbn0pKGQzLCBtMywgbTQsIGRvY3VtZW50KTtcblxuKGZ1bmN0aW9uKGQzLCBtMywgbTQsIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGQzLlBpY2tTaGFkZXIgPSBmdW5jdGlvbigpIHtcblx0fTtcblx0dmFyIF9zdXBlciA9IGQzLl9TaGFkZXIucHJvdG90eXBlO1xuXHR2YXIgXyA9IGQzLlBpY2tTaGFkZXIucHJvdG90eXBlID0gbmV3IGQzLl9TaGFkZXIoKTtcblx0Xy5pbml0VW5pZm9ybUxvY2F0aW9ucyA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0Ly8gYXNzaWduIHVuaWZvcm0gcHJvcGVydGllc1xuXHRcdF9zdXBlci5pbml0VW5pZm9ybUxvY2F0aW9ucy5jYWxsKHRoaXMsIGdsKTtcblx0XHR0aGlzLm1hdGVyaWFsRGlmZnVzZUNvbG9yVW5pZm9ybSA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLmdQcm9ncmFtLCAndV9tYXRlcmlhbF9kaWZmdXNlX2NvbG9yJyk7XG5cdH07XG5cdF8ubG9hZERlZmF1bHRWZXJ0ZXhTaGFkZXIgPSBmdW5jdGlvbihnbCkge1xuXHRcdHZhciBzYiA9IFtcblx0XHQncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7Jyxcblx0XHRcblx0XHQvLyBhdHRyaWJ1dGVzIHNldCB3aGVuIHJlbmRlcmluZyBvYmplY3RzXG5cdFx0J2F0dHJpYnV0ZSB2ZWMzIGFfdmVydGV4X3Bvc2l0aW9uOycsXG5cblx0XHQvLyBtYXRyaWNlcyBzZXQgYnkgZ2wuc2V0TWF0cml4VW5pZm9ybXNcblx0XHQndW5pZm9ybSBtYXQ0IHVfbW9kZWxfdmlld19tYXRyaXg7Jyxcblx0XHQndW5pZm9ybSBtYXQ0IHVfcHJvamVjdGlvbl9tYXRyaXg7JyxcblxuXHRcdCd2b2lkIG1haW4oKSB7Jyxcblx0XHRcdFxuXHRcdFx0J2dsX1Bvc2l0aW9uID0gdV9wcm9qZWN0aW9uX21hdHJpeCAqIHVfbW9kZWxfdmlld19tYXRyaXggKiB2ZWM0KGFfdmVydGV4X3Bvc2l0aW9uLCAxLik7JyxcblxuXHRcdFx0Ly8ganVzdCB0byBtYWtlIHN1cmUgdGhlIHcgaXMgMVxuXHRcdFx0J2dsX1Bvc2l0aW9uIC89IGdsX1Bvc2l0aW9uLnc7JyxcblxuXHRcdCd9J10uam9pbignJyk7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRTaGFkZXJGcm9tU3RyKGdsLCBnbC5WRVJURVhfU0hBREVSLCBzYik7XG5cdH07XG5cdF8ubG9hZERlZmF1bHRGcmFnbWVudFNoYWRlciA9IGZ1bmN0aW9uKGdsKSB7XG5cdFx0dmFyIHNiID0gW1xuXHRcdC8vIHNldCBtYWNybyBmb3IgZGVwdGggbW1hcCB0ZXh0dXJlXG5cdFx0Z2wuZGVwdGhUZXh0dXJlRXh0ID8gJyNkZWZpbmUgQ1dDX0RFUFRIX1RFWFxcbicgOiAnJyxcblx0XHRcblx0XHQvLyBzZXQgZmxvYXQgcHJlY2lzaW9uXG5cdFx0J3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycsXG5cblx0XHQndW5pZm9ybSB2ZWMzIHVfbWF0ZXJpYWxfZGlmZnVzZV9jb2xvcjsnLFxuXHRcdFx0XHRcdFxuXHRcdCd2b2lkIG1haW4odm9pZCkgeycsXG5cdFx0XHQnZ2xfRnJhZ0NvbG9yID0gdmVjNCh1X21hdGVyaWFsX2RpZmZ1c2VfY29sb3IsIDEuKTsnLFxuXHRcdCd9J1xuXHRcdF0uam9pbignJyk7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRTaGFkZXJGcm9tU3RyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIHNiKTtcblx0fTtcblx0Xy5zZXRNYXRlcmlhbERpZmZ1c2VDb2xvciA9IGZ1bmN0aW9uKGdsLCBkaWZmdXNlKSB7XG5cdFx0Z2wudW5pZm9ybTNmdih0aGlzLm1hdGVyaWFsRGlmZnVzZUNvbG9yVW5pZm9ybSwgZGlmZnVzZSk7XG5cdH07XG5cbn0pKGQzLCBtMywgbTQsIGRvY3VtZW50KTtcblxuKGZ1bmN0aW9uKGQzLCBtMywgbTQsIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGQzLlBvc2l0aW9uU2hhZGVyID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfc3VwZXIgPSBkMy5fU2hhZGVyLnByb3RvdHlwZTtcblx0dmFyIF8gPSBkMy5Qb3NpdGlvblNoYWRlci5wcm90b3R5cGUgPSBuZXcgZDMuX1NoYWRlcigpO1xuXG5cdF8ubG9hZERlZmF1bHRWZXJ0ZXhTaGFkZXIgPSBmdW5jdGlvbihnbCkge1xuXHRcdHZhciBzYiA9IFtcblx0XHQncHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7Jyxcblx0XHRcblx0XHQvLyBhdHRyaWJ1dGVzIHNldCB3aGVuIHJlbmRlcmluZyBvYmplY3RzXG5cdFx0J2F0dHJpYnV0ZSB2ZWMzIGFfdmVydGV4X3Bvc2l0aW9uOycsXG5cblx0XHQvLyBtYXRyaWNlcyBzZXQgYnkgZ2wuc2V0TWF0cml4VW5pZm9ybXNcblx0XHQndW5pZm9ybSBtYXQ0IHVfbW9kZWxfdmlld19tYXRyaXg7Jyxcblx0XHQndW5pZm9ybSBtYXQ0IHVfcHJvamVjdGlvbl9tYXRyaXg7JyxcblxuXHRcdCd2YXJ5aW5nIHZlYzQgdl9wb3NpdGlvbjsnLFxuXG5cdFx0J3ZvaWQgbWFpbigpIHsnLFxuXHRcdFx0J3ZlYzQgdmlld1BvcyA9IHVfbW9kZWxfdmlld19tYXRyaXggKiB2ZWM0KGFfdmVydGV4X3Bvc2l0aW9uLCAxLik7JyxcblxuXHRcdFx0J2dsX1Bvc2l0aW9uID0gdV9wcm9qZWN0aW9uX21hdHJpeCAqIHZpZXdQb3M7JyxcblxuXHRcdFx0J3ZfcG9zaXRpb24gPSB2aWV3UG9zIC8gdmlld1Bvcy53OycsXG5cblx0XHQnfSddLmpvaW4oJycpO1xuXHRcdFxuXHRcdHJldHVybiB0aGlzLmdldFNoYWRlckZyb21TdHIoZ2wsIGdsLlZFUlRFWF9TSEFERVIsIHNiKTtcblx0fTtcblx0Xy5sb2FkRGVmYXVsdEZyYWdtZW50U2hhZGVyID0gZnVuY3Rpb24oZ2wpIHtcblx0XHR2YXIgc2IgPSBbXG5cdFx0Ly8gc2V0IGZsb2F0IHByZWNpc2lvblxuXHRcdCdwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsnLFxuXG5cdFx0J3ZhcnlpbmcgdmVjNCB2X3Bvc2l0aW9uOycsXG5cblx0XHQndm9pZCBtYWluKHZvaWQpIHsnLFxuXHRcdFx0J2dsX0ZyYWdDb2xvciA9IHZfcG9zaXRpb247Jyxcblx0XHQnfSddLmpvaW4oJycpO1xuXHRcdFxuXHRcdHJldHVybiB0aGlzLmdldFNoYWRlckZyb21TdHIoZ2wsIGdsLkZSQUdNRU5UX1NIQURFUiwgc2IpO1xuXHR9O1xuXG59KShkMywgbTMsIG00LCBkb2N1bWVudCk7XG5cbihmdW5jdGlvbihkMywgbTMsIG00LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRkMy5RdWFkU2hhZGVyID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfID0gZDMuUXVhZFNoYWRlci5wcm90b3R5cGUgPSBuZXcgZDMuX1NoYWRlcigpO1xuXHRfLmxvYWREZWZhdWx0VmVydGV4U2hhZGVyID0gZnVuY3Rpb24oZ2wpIHtcblx0XHR2YXIgc2IgPSBbXG5cdFx0J3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycsXG5cdFx0XG5cdFx0Ly8gYXR0cmlidXRlcyBzZXQgd2hlbiByZW5kZXJpbmcgb2JqZWN0c1xuXHRcdCdhdHRyaWJ1dGUgdmVjMyBhX3ZlcnRleF9wb3NpdGlvbjsnLFxuXG4gICAgXHQndmFyeWluZyB2ZWMyIHZfdGV4Y29vcmQ7JyxcblxuXHRcdCd2b2lkIG1haW4oKSB7Jyxcblx0XHRcdCdnbF9Qb3NpdGlvbiA9IHZlYzQoYV92ZXJ0ZXhfcG9zaXRpb24sIDEuKTsnLFxuICAgICAgICBcdCd2X3RleGNvb3JkID0gYV92ZXJ0ZXhfcG9zaXRpb24ueHkgKiAuNSArIC41OycsXG5cdFx0J30nXS5qb2luKCcnKTtcblxuXHRcdHJldHVybiB0aGlzLmdldFNoYWRlckZyb21TdHIoZ2wsIGdsLlZFUlRFWF9TSEFERVIsIHNiKTtcblx0fTtcblx0Xy5sb2FkRGVmYXVsdEZyYWdtZW50U2hhZGVyID0gZnVuY3Rpb24oZ2wpIHtcblx0XHR2YXIgc2IgPSBbXG5cblx0XHQvLyBzZXQgZmxvYXQgcHJlY2lzaW9uXG5cdFx0J3ByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OycsXG5cblx0ICAgICd1bmlmb3JtIHNhbXBsZXIyRCB1X2ltYWdlOycsXG5cbiAgICBcdCd2YXJ5aW5nIHZlYzIgdl90ZXhjb29yZDsnLFxuXHQgICAgXG5cdCAgICAndm9pZCBtYWluKCkgeycsXG5cdCAgICAgICAgJ2dsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCh1X2ltYWdlLCB2X3RleGNvb3JkKTsnLFxuXHQgICAgJ30nXS5qb2luKCcnKTtcblxuXHRcdHJldHVybiB0aGlzLmdldFNoYWRlckZyb21TdHIoZ2wsIGdsLkZSQUdNRU5UX1NIQURFUiwgc2IpO1xuXHR9O1xuXG59KShkMywgbTMsIG00LCBkb2N1bWVudCk7XG5cbihmdW5jdGlvbihkMywgRUxFTUVOVCwgTWFyY2hpbmdDdWJlcywgdjMsIG0sIHVuZGVmaW5lZCkge1xuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgVHJpYW5nbGUgPSBmdW5jdGlvbihpMSwgaTIsIGkzKXtcblx0XHR0aGlzLmkxID0gaTE7XG5cdFx0dGhpcy5pMiA9IGkyO1xuXHRcdHRoaXMuaTMgPSBpMztcblx0fTtcblx0XG5cdGZ1bmN0aW9uIGdldFJhbmdlKGF0b21zLCBwcm9iZVJhZGl1cykge1xuXHRcdHZhciByID0gW0luZmluaXR5LCAtSW5maW5pdHksIEluZmluaXR5LCAtSW5maW5pdHksIEluZmluaXR5LCAtSW5maW5pdHldO1xuXHRcdHZhciBhZGQgPSBwcm9iZVJhZGl1cyArIDI7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlpID0gYXRvbXMubGVuZ3RoOyBpPGlpOyBpKyspIHtcblx0XHRcdHZhciBhID0gYXRvbXNbaV07XG5cdFx0XHRyWzBdID0gbS5taW4oclswXSwgYS54IC0gYWRkKTtcblx0XHRcdHJbMV0gPSBtLm1heChyWzFdLCBhLnggKyBhZGQpO1xuXHRcdFx0clsyXSA9IG0ubWluKHJbMl0sIGEueSAtIGFkZCk7XG5cdFx0XHRyWzNdID0gbS5tYXgoclszXSwgYS55ICsgYWRkKTtcblx0XHRcdHJbNF0gPSBtLm1pbihyWzRdLCBhLnogLSBhZGQpO1xuXHRcdFx0cls1XSA9IG0ubWF4KHJbNV0sIGEueiArIGFkZCk7XG5cdFx0fVxuXHRcdHJldHVybiByO1xuXHR9O1xuXHRcblx0ZnVuY3Rpb24gYWRkUG9pbnQocCwgcG9pbnRzLCB4cywgeXMsIHpzLCBzdGVwKSB7XG5cdFx0Ly8gdHJhbnNmb3JtIGJhY2sgaW50byByZWFsIHNwYWNlXG5cdFx0dmFyIHB4ID0gcFswXSAqIHN0ZXAgKyB4cyAtIHN0ZXA7XG5cdFx0dmFyIHB5ID0gcFsxXSAqIHN0ZXAgKyB5cyAtIHN0ZXA7XG5cdFx0dmFyIHB6ID0gcFsyXSAqIHN0ZXAgKyB6cyAtIHN0ZXA7XG5cdFx0Ly8gZmluZCBhbnkgcHJldmlvdXMgbWF0Y2hcblx0XHR2YXIgaW5kZXggPSAtMTtcblx0XHR2YXIgY3V0b2ZmID0gMUUtMztcblx0XHRmb3IgKHZhciBqID0gMCwgamogPSBwb2ludHMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0dmFyIHBqID0gcG9pbnRzW2pdO1xuXHRcdFx0aWYgKG0uYWJzKHBqLnggLSBweCkgPCBjdXRvZmYgJiYgbS5hYnMocGoueSAtIHB5KSA8IGN1dG9mZiAmJiBtLmFicyhwai56IC0gcHopIDwgY3V0b2ZmKSB7XG5cdFx0XHRcdGluZGV4ID0gajtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChpbmRleCA9PSAtMSkge1xuXHRcdFx0aW5kZXggPSBwb2ludHMubGVuZ3RoO1xuXHRcdFx0cG9pbnRzLnB1c2gobmV3IEF0b20oJ0MnLCBweCwgcHksIHB6KSk7XG5cdFx0fVxuXHRcdHJldHVybiBpbmRleDtcblx0fTtcblx0XG5cdGQzLl9TdXJmYWNlID0gZnVuY3Rpb24oKSB7XG5cdH07XG5cdHZhciBfID0gZDMuX1N1cmZhY2UucHJvdG90eXBlID0gbmV3IGQzLl9NZXNoKCk7XG5cdF8uZ2VuZXJhdGUgPSBmdW5jdGlvbih4ZGlmLCB5ZGlmLCB6ZGlmLCBzdGVwLCByYW5nZSwgeHN0ZXBzLCB5c3RlcHMsIHpzdGVwcyl7XG5cdFx0Ly8gZ2VuZXJhdGUgdGhlIGZ1bmN0aW9uXG5cdFx0dmFyIHZhbHMgPSBbXTtcblx0XHR2YXIgeiA9IHJhbmdlWzRdIC0gc3RlcDtcblx0XHRmb3IgKHZhciBrID0gMDsgayA8IHpzdGVwczsgaysrKSB7XG5cdFx0XHR2YXIgeSA9IHJhbmdlWzJdIC0gc3RlcDtcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgeXN0ZXBzOyBqKyspIHtcblx0XHRcdFx0dmFyIHggPSByYW5nZVswXSAtIHN0ZXA7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgeHN0ZXBzOyBpKyspIHtcblx0XHRcdFx0XHR2YWxzLnB1c2godGhpcy5jYWxjdWxhdGUoeCwgeSwgeikpO1xuXHRcdFx0XHRcdHggKz0gc3RlcDtcblx0XHRcdFx0fVxuXHRcdFx0XHR5ICs9IHN0ZXA7XG5cdFx0XHR9XG5cdFx0XHR6ICs9IHN0ZXA7XG5cdFx0fVxuXHRcdHJldHVybiB2YWxzO1xuXHR9O1xuXHRfLmJ1aWxkID0gZnVuY3Rpb24oYXRvbXMsIHByb2JlUmFkaXVzLCByZXNvbHV0aW9uKSB7XG5cdFx0dmFyIHBvc2l0aW9uRGF0YSA9IFtdO1xuXHRcdHZhciBub3JtYWxEYXRhID0gW107XG5cdFx0dmFyIGluZGV4RGF0YSA9IFtdO1xuXG5cdFx0Ly8gY2FsY3VsYXRlIHRoZSByYW5nZSBvZiB0aGUgZnVuY3Rpb25cblx0XHR2YXIgcmFuZ2UgPSBnZXRSYW5nZShhdG9tcywgcHJvYmVSYWRpdXMpO1xuXHRcdHZhciB4ZGlmID0gcmFuZ2VbMV0gLSByYW5nZVswXTtcblx0XHR2YXIgeWRpZiA9IHJhbmdlWzNdIC0gcmFuZ2VbMl07XG5cdFx0dmFyIHpkaWYgPSByYW5nZVs1XSAtIHJhbmdlWzRdO1xuXHRcdHZhciBzdGVwID0gbS5taW4oeGRpZiwgbS5taW4oeWRpZiwgemRpZikpIC8gcmVzb2x1dGlvbjtcblx0XHRcblx0XHQvLyBnZW5lcmF0ZSB0aGUgZnVuY3Rpb25cblx0XHR2YXIgeHN0ZXBzID0gMiArIG0uY2VpbCh4ZGlmIC8gc3RlcCk7XG5cdFx0dmFyIHlzdGVwcyA9IDIgKyBtLmNlaWwoeWRpZiAvIHN0ZXApO1xuXHRcdHZhciB6c3RlcHMgPSAyICsgbS5jZWlsKHpkaWYgLyBzdGVwKTtcblx0XHR2YXIgdmFscyA9IHRoaXMuZ2VuZXJhdGUoeGRpZiwgeWRpZiwgemRpZiwgc3RlcCwgcmFuZ2UsIHhzdGVwcywgeXN0ZXBzLCB6c3RlcHMpO1xuXHRcdFxuXHRcdC8vIG1hcmNoaW5nIGN1YmVzXG5cdFx0dmFyIG1lc2ggPSBNYXJjaGluZ0N1YmVzKHZhbHMsIFt4c3RlcHMsIHlzdGVwcywgenN0ZXBzXSk7XG5cdFx0XG5cdFx0Ly8gYnVpbGQgc3VyZmFjZVxuXHRcdHZhciBwcyA9IFtdO1xuXHRcdHZhciBpcyA9IFtdO1xuXHRcdGZvciAodmFyIGkgPSAwLCBpaSA9IG1lc2gudmVydGljZXMubGVuZ3RoOyBpPGlpOyBpKyspIHtcblx0XHRcdGlzLnB1c2goYWRkUG9pbnQobWVzaC52ZXJ0aWNlc1tpXSwgcHMsIHJhbmdlWzBdLCByYW5nZVsyXSwgcmFuZ2VbNF0sIHN0ZXApKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gdHJpYW5nbGVzXG5cdFx0dmFyIHRyaWFuZ2xlcyA9IFtdO1xuXHRcdGZvciAodmFyIGkgPSAwLCBpaSA9IG1lc2guZmFjZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIGYgPSBtZXNoLmZhY2VzW2ldO1xuXHRcdFx0dmFyIGkxID0gaXNbZlswXV07XG5cdFx0XHR2YXIgaTIgPSBpc1tmWzFdXTtcblx0XHRcdHZhciBpMyA9IGlzW2ZbMl1dO1xuXHRcdFx0dHJpYW5nbGVzLnB1c2gobmV3IFRyaWFuZ2xlKGkxLCBpMiwgaTMpKTtcblx0XHRcdGluZGV4RGF0YS5wdXNoKGkxLCBpMiwgaTMpO1xuXHRcdH1cblx0XHRcblx0XHQvLyBzbW9vdGhpbmcgLSAxIHBhc3Ncblx0XHR2YXIgc2F2ZWRDb25uZWN0aW9ucyA9IFtdO1xuXHRcdGZvciAodmFyIGkgPSAwLCBpaSA9IHBzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0XHRcdHZhciBjb25uZWN0aW9ucyA9IFtdO1xuXHRcdFx0Zm9yICh2YXIgaiA9IDAsIGpqID0gdHJpYW5nbGVzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0XHRcdFx0dmFyIHQgPSB0cmlhbmdsZXNbal07XG5cdFx0XHRcdGlmICh0LmkxPT09aSB8fCB0LmkyPT09aSB8fCB0LmkzPT09aSkge1xuXHRcdFx0XHRcdGlmICh0LmkxICE9IGkgJiYgY29ubmVjdGlvbnMuaW5kZXhPZih0LmkxKT09PS0xKSB7XG5cdFx0XHRcdFx0XHRjb25uZWN0aW9ucy5wdXNoKHQuaTEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodC5pMiAhPSBpICYmIGNvbm5lY3Rpb25zLmluZGV4T2YodC5pMik9PT0tMSkge1xuXHRcdFx0XHRcdFx0Y29ubmVjdGlvbnMucHVzaCh0LmkyKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHQuaTMgIT0gaSAmJiBjb25uZWN0aW9ucy5pbmRleE9mKHQuaTMpPT09LTEpIHtcblx0XHRcdFx0XHRcdGNvbm5lY3Rpb25zLnB1c2godC5pMyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRzYXZlZENvbm5lY3Rpb25zLnB1c2goY29ubmVjdGlvbnMpO1xuXHRcdH1cblx0XHR2YXIgdG1wID0gW107XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlpID0gcHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIHBpID0gcHNbaV07XG5cdFx0XHR2YXIgY29ubmVjdGlvbnMgPSBzYXZlZENvbm5lY3Rpb25zW2ldO1xuXHRcdFx0dmFyIHB0ID0gbmV3IEF0b20oKTtcblx0XHRcdGlmIChjb25uZWN0aW9ucy5sZW5ndGggPCAzKSB7XG5cdFx0XHRcdHB0LnggPSBwaS54O1xuXHRcdFx0XHRwdC55ID0gcGkueTtcblx0XHRcdFx0cHQueiA9IHBpLno7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIgd3QgPSAxO1xuXHRcdFx0XHRpZiAoY29ubmVjdGlvbnMubGVuZ3RoIDwgNSkge1xuXHRcdFx0XHRcdHd0ID0gLjU7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yICh2YXIgaiA9IDAsIGpqID0gY29ubmVjdGlvbnMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHRcdFx0XHRcdHZhciBwYyA9IHBzW2Nvbm5lY3Rpb25zW2pdXTtcblx0XHRcdFx0XHRwdC54Kz1wYy54O1xuXHRcdFx0XHRcdHB0LnkrPXBjLnk7XG5cdFx0XHRcdFx0cHQueis9cGMuejtcblx0XHRcdFx0fVxuXHRcdFx0XHRwdC54ICs9IHBpLngqd3Q7XG5cdFx0XHRcdHB0LnkgKz0gcGkueSp3dDtcblx0XHRcdFx0cHQueiArPSBwaS56Knd0O1xuXHRcdFx0XHR2YXIgc2NhbGUgPSAxIC8gKHd0ICsgY29ubmVjdGlvbnMubGVuZ3RoKTtcblx0XHRcdFx0cHQueCo9c2NhbGU7XG5cdFx0XHRcdHB0LnkqPXNjYWxlO1xuXHRcdFx0XHRwdC56Kj1zY2FsZTtcblx0XHRcdH1cblx0XHRcdHRtcC5wdXNoKHB0KTtcblx0XHR9XG5cdFx0cHMgPSB0bXA7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlpID0gcHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIHBpID0gcHNbaV07XG5cdFx0XHRwb3NpdGlvbkRhdGEucHVzaChwaS54LCBwaS55LCBwaS56KTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gbm9ybWFsc1xuXHRcdGZvciAodmFyIGkgPSAwLCBpaSA9IHRyaWFuZ2xlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdFx0XHR2YXIgdCA9IHRyaWFuZ2xlc1tpXTtcblx0XHRcdHZhciBwMSA9IHBzW3QuaTFdO1xuXHRcdFx0dmFyIHAyID0gcHNbdC5pMl07XG5cdFx0XHR2YXIgcDMgPSBwc1t0LmkzXTtcblx0XHRcdHZhciB2MTIgPSBbcDIueC1wMS54LCBwMi55LXAxLnksIHAyLnotcDEuel07XG5cdFx0XHR2YXIgdjEzID0gW3AzLngtcDEueCwgcDMueS1wMS55LCBwMy56LXAxLnpdO1xuXHRcdFx0djMuY3Jvc3ModjEyLCB2MTMpO1xuXHRcdFx0aWYgKGlzTmFOKHYxMlswXSkpIHtcblx0XHRcdFx0Ly8gZm9yIHNvbWUgcmVhc29uLCBvcmlnaW4gc2hvd3MgdXAgYXMgc29tZSBwb2ludHMgYW5kIHNob3VsZCBiZVxuXHRcdFx0XHQvLyBpZ25vcmVkXG5cdFx0XHRcdHYxMiA9IFswLDAsMF07XG5cdFx0XHR9XG5cdFx0XHR0Lm5vcm1hbCA9IHYxMjtcblx0XHR9XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlpID0gcHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHRcdFx0dmFyIHN1bSA9IFswLCAwLCAwXTtcblx0XHRcdGZvciAodmFyIGogPSAwLCBqaiA9IHRyaWFuZ2xlcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdFx0XHRcdHZhciB0ID0gdHJpYW5nbGVzW2pdO1xuXHRcdFx0XHRpZiAodC5pMT09PWkgfHwgdC5pMj09PWkgfHwgdC5pMz09PWkpIHtcblx0XHRcdFx0XHRzdW1bMF0rPXQubm9ybWFsWzBdO1xuXHRcdFx0XHRcdHN1bVsxXSs9dC5ub3JtYWxbMV07XG5cdFx0XHRcdFx0c3VtWzJdKz10Lm5vcm1hbFsyXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0djMubm9ybWFsaXplKHN1bSk7XG5cdFx0XHRub3JtYWxEYXRhLnB1c2goc3VtWzBdLCBzdW1bMV0sIHN1bVsyXSk7XG5cdFx0fVxuXHRcdHRoaXMuc3RvcmVEYXRhKHBvc2l0aW9uRGF0YSwgbm9ybWFsRGF0YSwgaW5kZXhEYXRhKTtcblx0fTtcblx0Xy5yZW5kZXIgPSBmdW5jdGlvbihnbCwgc3BlY3MpIHtcblx0XHRpZih0aGlzLnNwZWNzKXtcblx0XHRcdHNwZWNzID0gdGhpcy5zcGVjcztcblx0XHR9XG5cdFx0aWYoIXNwZWNzLnN1cmZhY2VzX2Rpc3BsYXkpe1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRnbC5zaGFkZXIuc2V0TWF0cml4VW5pZm9ybXMoZ2wpO1xuXHRcdHRoaXMuYmluZEJ1ZmZlcnMoZ2wpO1xuXHRcdC8vIGNvbG9yc1xuXHRcdGdsLm1hdGVyaWFsLnNldFRlbXBDb2xvcnMoZ2wsIHNwZWNzLnN1cmZhY2VzX21hdGVyaWFsQW1iaWVudENvbG9yXzNELCBzcGVjcy5zdXJmYWNlc19jb2xvciwgc3BlY3Muc3VyZmFjZXNfbWF0ZXJpYWxTcGVjdWxhckNvbG9yXzNELCBzcGVjcy5zdXJmYWNlc19tYXRlcmlhbFNoaW5pbmVzc18zRCk7XG5cdFx0Ly8gYWxwaGEgbXVzdCBiZSBzZXQgYWZ0ZXIgdGVtcCBjb2xvcnMgYXMgdGhhdCBmdW5jdGlvbiBzZXRzIGFscGhhIHRvIDFcblx0XHRnbC5tYXRlcmlhbC5zZXRBbHBoYShnbCwgc3BlY3Muc3VyZmFjZXNfYWxwaGEpO1xuXHRcdC8vIHJlbmRlclxuXHRcdGlmKHNwZWNzLnN1cmZhY2VzX3N0eWxlID09PSAnRG90cycpe1xuXHRcdFx0Ly8gZG90c1xuXHRcdFx0Ly9nbC5wb2ludFNpemUoMSk7XG5cdFx0XHQvLyBwb2ludFNpemUgaXNuJ3QgcGFydCBvZiBXZWJHTCBBUEksIHNvIHdlIGhhdmUgdG8gbWFrZSBpdCBhIHNoYWRlciB1bmlmb3JtIGluIHRoZSB2ZXJ0ZXggc2hhZGVyXG5cdFx0XHRnbC5zaGFkZXIuc2V0UG9pbnRTaXplKGdsLCBzcGVjcy5zaGFwZXNfcG9pbnRTaXplKTtcblx0XHRcdC8vZ2wuZHJhd0FycmF5cyhnbC5QT0lOVFMsIDAsIHRoaXMudmVydGV4SW5kZXhCdWZmZXIubnVtSXRlbXMpO1xuXHRcdFx0Z2wuZHJhd0VsZW1lbnRzKGdsLlBPSU5UUywgdGhpcy52ZXJ0ZXhJbmRleEJ1ZmZlci5udW1JdGVtcywgZ2wuVU5TSUdORURfU0hPUlQsIDApO1xuXHRcdH1lbHNlIGlmKHNwZWNzLnN1cmZhY2VzX3N0eWxlID09PSAnTWVzaCcpe1xuXHRcdFx0Ly8gbWVzaFxuXHRcdFx0Z2wubGluZVdpZHRoKHNwZWNzLnNoYXBlc19saW5lV2lkdGgpO1xuXHRcdFx0Ly9nbC5wb2x5Z29uTW9kZShnbC5GUk9OVF9BTkRfQkFDSywgZ2wuTElORSk7XG5cdFx0XHRnbC5kcmF3RWxlbWVudHMoZ2wuTElORVMsIHRoaXMudmVydGV4SW5kZXhCdWZmZXIubnVtSXRlbXMsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcblx0XHRcdC8vZ2wucG9seWdvbk1vZGUoZ2wuRlJPTlRfQU5EX0JBQ0ssIGdsLkZJTEwpO1xuXHRcdH1lbHNle1xuXHRcdFx0Ly8gc29saWRcblx0XHRcdGdsLmRyYXdFbGVtZW50cyhnbC5UUklBTkdMRVMsIHRoaXMudmVydGV4SW5kZXhCdWZmZXIubnVtSXRlbXMsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcblx0XHR9XG5cdFx0XG5cdH07XG5cbn0pKGQzLCBFTEVNRU5ULCBNYXJjaGluZ0N1YmVzLCB2MywgbSk7XG5cbihmdW5jdGlvbihkMywgRUxFTUVOVCwgbSwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdGQzLlNBU1N1cmZhY2UgPSBmdW5jdGlvbihhdG9tcywgcHJvYmVSYWRpdXMsIHJlc29sdXRpb24pIHtcblx0XHR0aGlzLmF0b21zID0gYXRvbXM7XG5cdFx0dGhpcy5wcm9iZVJhZGl1cyA9IHByb2JlUmFkaXVzO1xuXHRcdHRoaXMucmVzb2x1dGlvbiA9IHJlc29sdXRpb247XG5cdFx0dGhpcy5idWlsZChhdG9tcywgcHJvYmVSYWRpdXMsIHJlc29sdXRpb24pO1xuXHR9O1xuXHR2YXIgXyA9IGQzLlNBU1N1cmZhY2UucHJvdG90eXBlID0gbmV3IGQzLl9TdXJmYWNlKCk7XG5cdF8uY2FsY3VsYXRlID0gZnVuY3Rpb24oeCwgeSwgeikge1xuXHRcdHZhciBtaW4gPSBJbmZpbml0eTtcblx0XHR2YXIgcCA9IG5ldyBBdG9tKCdDJywgeCwgeSwgeik7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlpID0gdGhpcy5hdG9tcy5sZW5ndGg7IGk8aWk7IGkrKykge1xuXHRcdFx0dmFyIGEgPSB0aGlzLmF0b21zW2ldO1xuXHRcdFx0dmFyIHZkd1JhZGl1cyA9IChFTEVNRU5UW2EubGFiZWxdICYmIEVMRU1FTlRbYS5sYWJlbF0udmRXUmFkaXVzIT09MCk/RUxFTUVOVFthLmxhYmVsXS52ZFdSYWRpdXM6Mjtcblx0XHRcdHZhciBkaXN0YW5jZUNlbnRlciA9IGEuZGlzdGFuY2UzRChwKSAtIHRoaXMucHJvYmVSYWRpdXM7XG5cdFx0XHR2YXIgZGlzdGFuY2VTdXJmYWNlID0gZGlzdGFuY2VDZW50ZXIgLSB2ZHdSYWRpdXM7XG5cdFx0XHRtaW4gPSBtLm1pbihtaW4sIGRpc3RhbmNlU3VyZmFjZSk7XG5cdFx0fVxuXHRcdHJldHVybiBtaW47XG5cdH07XG5cdFxuXG59KShkMywgRUxFTUVOVCwgbSk7XG5cbihmdW5jdGlvbihkMywgRUxFTUVOVCwgbSwgdW5kZWZpbmVkKSB7XG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdGQzLlZEV1N1cmZhY2UgPSBmdW5jdGlvbihhdG9tcywgcmVzb2x1dGlvbikge1xuXHRcdHRoaXMuYXRvbXMgPSBhdG9tcztcblx0XHR0aGlzLnByb2JlUmFkaXVzID0gMDtcblx0XHR0aGlzLnJlc29sdXRpb24gPSByZXNvbHV0aW9uO1xuXHRcdHRoaXMuYnVpbGQoYXRvbXMsIDAsIHJlc29sdXRpb24pO1xuXHR9O1xuXHR2YXIgXyA9IGQzLlZEV1N1cmZhY2UucHJvdG90eXBlID0gbmV3IGQzLl9TdXJmYWNlKCk7XG5cdF8uY2FsY3VsYXRlID0gZnVuY3Rpb24oeCwgeSwgeikge1xuXHRcdHZhciBtaW4gPSBJbmZpbml0eTtcblx0XHR2YXIgcCA9IG5ldyBBdG9tKCdDJywgeCwgeSwgeik7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGlpID0gdGhpcy5hdG9tcy5sZW5ndGg7IGk8aWk7IGkrKykge1xuXHRcdFx0dmFyIGEgPSB0aGlzLmF0b21zW2ldO1xuXHRcdFx0dmFyIHZkd1JhZGl1cyA9IChFTEVNRU5UW2EubGFiZWxdICYmIEVMRU1FTlRbYS5sYWJlbF0udmRXUmFkaXVzIT09MCk/RUxFTUVOVFthLmxhYmVsXS52ZFdSYWRpdXM6Mjtcblx0XHRcdHZhciBkaXN0YW5jZUNlbnRlciA9IGEuZGlzdGFuY2UzRChwKTtcblx0XHRcdHZhciBkaXN0YW5jZVN1cmZhY2UgPSBkaXN0YW5jZUNlbnRlciAtIHZkd1JhZGl1cztcblx0XHRcdG1pbiA9IG0ubWluKG1pbiwgZGlzdGFuY2VTdXJmYWNlKTtcblx0XHR9XG5cdFx0cmV0dXJuIG1pbjtcblx0fTtcblx0XG5cbn0pKGQzLCBFTEVNRU5ULCBtKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/ChemDoodle/structures/d3/index.js\n");

/***/ }),

/***/ "./src/ChemDoodle/structures/index.js":
/*!********************************************!*\
  !*** ./src/ChemDoodle/structures/index.js ***!
  \********************************************/
/*! exports provided: Point, Queue, Query, Ring, Atom, Bond, Residue, Molecule, Spectrum, Plate, VisualSpecifications, d2, d3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Point */ \"./src/ChemDoodle/structures/Point.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Point\", function() { return _Point__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _Queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Queue */ \"./src/ChemDoodle/structures/Queue.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Queue\", function() { return _Queue__WEBPACK_IMPORTED_MODULE_1__[\"default\"]; });\n\n/* harmony import */ var _Query__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Query */ \"./src/ChemDoodle/structures/Query.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Query\", function() { return _Query__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n/* harmony import */ var _Ring__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Ring */ \"./src/ChemDoodle/structures/Ring.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Ring\", function() { return _Ring__WEBPACK_IMPORTED_MODULE_3__[\"default\"]; });\n\n/* harmony import */ var _Atom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Atom */ \"./src/ChemDoodle/structures/Atom.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Atom\", function() { return _Atom__WEBPACK_IMPORTED_MODULE_4__[\"default\"]; });\n\n/* harmony import */ var _Bond__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Bond */ \"./src/ChemDoodle/structures/Bond.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Bond\", function() { return _Bond__WEBPACK_IMPORTED_MODULE_5__[\"default\"]; });\n\n/* harmony import */ var _Residue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Residue */ \"./src/ChemDoodle/structures/Residue.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Residue\", function() { return _Residue__WEBPACK_IMPORTED_MODULE_6__[\"default\"]; });\n\n/* harmony import */ var _Molecule__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Molecule */ \"./src/ChemDoodle/structures/Molecule.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Molecule\", function() { return _Molecule__WEBPACK_IMPORTED_MODULE_7__[\"default\"]; });\n\n/* harmony import */ var _Spectrum__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Spectrum */ \"./src/ChemDoodle/structures/Spectrum.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Spectrum\", function() { return _Spectrum__WEBPACK_IMPORTED_MODULE_8__[\"default\"]; });\n\n/* harmony import */ var _Plate__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Plate */ \"./src/ChemDoodle/structures/Plate.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Plate\", function() { return _Plate__WEBPACK_IMPORTED_MODULE_9__[\"default\"]; });\n\n/* harmony import */ var _VisualSpecifications__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./VisualSpecifications */ \"./src/ChemDoodle/structures/VisualSpecifications.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"VisualSpecifications\", function() { return _VisualSpecifications__WEBPACK_IMPORTED_MODULE_10__[\"default\"]; });\n\n/* harmony import */ var _d2__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./d2 */ \"./src/ChemDoodle/structures/d2/index.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"d2\", function() { return _d2__WEBPACK_IMPORTED_MODULE_11__[\"d2\"]; });\n\n/* harmony import */ var _d3__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./d3 */ \"./src/ChemDoodle/structures/d3/index.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"d3\", function() { return _d3__WEBPACK_IMPORTED_MODULE_12__[\"d3\"]; });\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvc3RydWN0dXJlcy9pbmRleC5qcz84YTIwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vc3JjL0NoZW1Eb29kbGUvc3RydWN0dXJlcy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGRlZmF1bHQgYXMgUG9pbnQgfSBmcm9tICcuL1BvaW50JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUXVldWUgfSBmcm9tICcuL1F1ZXVlJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUXVlcnkgfSBmcm9tICcuL1F1ZXJ5JztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUmluZyB9IGZyb20gJy4vUmluZyc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEF0b20gfSBmcm9tICcuL0F0b20nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBCb25kIH0gZnJvbSAnLi9Cb25kJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUmVzaWR1ZSB9IGZyb20gJy4vUmVzaWR1ZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIE1vbGVjdWxlIH0gZnJvbSAnLi9Nb2xlY3VsZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFNwZWN0cnVtIH0gZnJvbSAnLi9TcGVjdHJ1bSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFBsYXRlIH0gZnJvbSAnLi9QbGF0ZSc7XG5leHBvcnQgeyBkZWZhdWx0IGFzIFZpc3VhbFNwZWNpZmljYXRpb25zIH0gZnJvbSAnLi9WaXN1YWxTcGVjaWZpY2F0aW9ucyc7XG5leHBvcnQgeyBkMiB9IGZyb20gJy4vZDInO1xuZXhwb3J0IHsgZDMgfSBmcm9tICcuL2QzJztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/ChemDoodle/structures/index.js\n");

/***/ }),

/***/ "./src/ChemDoodleWeb-unpacked.js":
/*!***************************************!*\
  !*** ./src/ChemDoodleWeb-unpacked.js ***!
  \***************************************/
/*! exports provided: ChemDoodle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ChemDoodle\", function() { return ChemDoodle; });\n/* harmony import */ var _ChemDoodle_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ChemDoodle/lib */ \"./src/ChemDoodle/lib/index.js\");\n/* harmony import */ var _ChemDoodle_extensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ChemDoodle/extensions */ \"./src/ChemDoodle/extensions/index.js\");\n/* harmony import */ var _ChemDoodle_structures__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ChemDoodle/structures */ \"./src/ChemDoodle/structures/index.js\");\n/* harmony import */ var _ChemDoodle_math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ChemDoodle/math */ \"./src/ChemDoodle/math/index.js\");\n/* harmony import */ var _ChemDoodle_informatics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ChemDoodle/informatics */ \"./src/ChemDoodle/informatics/index.js\");\n/* harmony import */ var _ChemDoodle_io__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ChemDoodle/io */ \"./src/ChemDoodle/io/index.js\");\n/* harmony import */ var _ChemDoodle_animations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ChemDoodle/animations */ \"./src/ChemDoodle/animations.js\");\n/* harmony import */ var _ChemDoodle_featureDetection__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ChemDoodle/featureDetection */ \"./src/ChemDoodle/featureDetection.js\");\n/* harmony import */ var _ChemDoodle_monitor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ChemDoodle/monitor */ \"./src/ChemDoodle/monitor.js\");\n/* harmony import */ var _ChemDoodle_iChemLabs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ChemDoodle/iChemLabs */ \"./src/ChemDoodle/iChemLabs.js\");\n/* harmony import */ var _ChemDoodle__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ChemDoodle */ \"./src/ChemDoodle/index.js\");\n//\n// ChemDoodle Web Components 8.0.0\n//\n// http://web.chemdoodle.com\n//\n// Copyright 2009-2017 iChemLabs, LLC.  All rights reserved.\n//\n// The ChemDoodle Web Components library is licensed under version 3\n// of the GNU GENERAL PUBLIC LICENSE.\n//\n// You may redistribute it and/or modify it under the terms of the\n// GNU General Public License as published by the Free Software Foundation,\n// either version 3 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n// Please contact iChemLabs <http://www.ichemlabs.com/contact-us> for\n// alternate licensing options.\n//\n\n\n\n\n\n\n\n\n\n\n\nvar ChemDoodle = _ChemDoodle__WEBPACK_IMPORTED_MODULE_10__;\nChemDoodle.iChemLabs = _ChemDoodle_iChemLabs__WEBPACK_IMPORTED_MODULE_9__[\"default\"];\nChemDoodle.informatics = _ChemDoodle_informatics__WEBPACK_IMPORTED_MODULE_4__;\nChemDoodle.io = _ChemDoodle_io__WEBPACK_IMPORTED_MODULE_5__;\nChemDoodle.lib = _ChemDoodle_lib__WEBPACK_IMPORTED_MODULE_0__;\nChemDoodle.notations = {};\nChemDoodle.structures = _ChemDoodle_structures__WEBPACK_IMPORTED_MODULE_2__;\nChemDoodle.animations = _ChemDoodle_animations__WEBPACK_IMPORTED_MODULE_6__[\"default\"];\nChemDoodle.extensions = _ChemDoodle_extensions__WEBPACK_IMPORTED_MODULE_1__;\nChemDoodle.math = _ChemDoodle_math__WEBPACK_IMPORTED_MODULE_3__;\nChemDoodle.featureDetection = _ChemDoodle_featureDetection__WEBPACK_IMPORTED_MODULE_7__[\"default\"];\n\n(function (informatics, io, structures, undefined) {\n  'use strict';\n\n  informatics.StructureBuilder = function () {};\n\n  var _ = informatics.StructureBuilder.prototype;\n\n  _.copy = function (molecule) {\n    var json = new io.JSONInterpreter();\n    return json.molFrom(json.molTo(molecule));\n  };\n})(ChemDoodle.informatics, ChemDoodle.io, ChemDoodle.structures);\n\n(function (io, undefined) {\n  'use strict';\n\n  io._Interpreter = function () {};\n\n  var _ = io._Interpreter.prototype;\n\n  _.fit = function (data, length, leftAlign) {\n    var size = data.length;\n    var padding = [];\n\n    for (var i = 0; i < length - size; i++) {\n      padding.push(' ');\n    }\n\n    return leftAlign ? data + padding.join('') : padding.join('') + data;\n  };\n})(ChemDoodle.io);\n\n(function (c, extensions, io, structures, d3, m, m4, v3, undefined) {\n  'use strict';\n\n  var whitespaceRegex = /\\s+/g;\n  var whitespaceAndParenthesisRegex = /\\(|\\)|\\s+/g;\n  var whitespaceAndQuoteRegex = /\\'|\\s+/g;\n  var whitespaceAndQuoteAndCommaRegex = /,|\\'|\\s+/g;\n  var leadingWhitespaceRegex = /^\\s+/;\n  var digitsRegex = /[0-9]/g;\n  var digitsSymbolRegex = /[0-9]|\\+|\\-/g;\n\n  var filter = function filter(s) {\n    return s.length !== 0;\n  };\n\n  var hallTranslations = {\n    'P': [],\n    'A': [[0, .5, .5]],\n    'B': [[.5, 0, .5]],\n    'C': [[.5, .5, 0]],\n    'I': [[.5, .5, .5]],\n    'R': [[2 / 3, 1 / 3, 1 / 3], [1 / 3, 2 / 3, 2 / 3]],\n    'S': [[1 / 3, 1 / 3, 2 / 3], [2 / 3, 2 / 3, 1 / 3]],\n    'T': [[1 / 3, 2 / 3, 1 / 3], [2 / 3, 1 / 3, 2 / 3]],\n    'F': [[0, .5, .5], [.5, 0, .5], [.5, .5, 0]]\n  };\n\n  var parseTransform = function parseTransform(s) {\n    var displacement = 0;\n    var x = 0,\n        y = 0,\n        z = 0;\n    var indexx = s.indexOf('x');\n    var indexy = s.indexOf('y');\n    var indexz = s.indexOf('z');\n\n    if (indexx !== -1) {\n      x++;\n\n      if (indexx > 0 && s.charAt(indexx - 1) !== '+') {\n        x *= -1;\n      }\n    }\n\n    if (indexy !== -1) {\n      y++;\n\n      if (indexy > 0 && s.charAt(indexy - 1) !== '+') {\n        y *= -1;\n      }\n    }\n\n    if (indexz !== -1) {\n      z++;\n\n      if (indexz > 0 && s.charAt(indexz - 1) !== '+') {\n        z *= -1;\n      }\n    }\n\n    if (s.length > 2) {\n      var op = '+';\n\n      for (var i = 0, ii = s.length; i < ii; i++) {\n        var l = s.charAt(i);\n\n        if ((l === '-' || l === '/') && (i === s.length - 1 || s.charAt(i + 1).match(digitsRegex))) {\n          op = l;\n        }\n\n        if (l.match(digitsRegex)) {\n          if (op === '+') {\n            displacement += parseInt(l);\n          } else if (op === '-') {\n            displacement -= parseInt(l);\n          } else if (op === '/') {\n            displacement /= parseInt(l);\n          }\n        }\n      }\n    }\n\n    return [displacement, x, y, z];\n  };\n\n  var generateABC2XYZ = function generateABC2XYZ(a, b, c, alpha, beta, gamma) {\n    var d = (m.cos(alpha) - m.cos(gamma) * m.cos(beta)) / m.sin(gamma);\n    return [a, 0, 0, 0, b * m.cos(gamma), b * m.sin(gamma), 0, 0, c * m.cos(beta), c * d, c * m.sqrt(1 - m.pow(m.cos(beta), 2) - d * d), 0, 0, 0, 0, 1];\n  };\n\n  io.CIFInterpreter = function () {};\n\n  var _ = io.CIFInterpreter.prototype = new io._Interpreter();\n\n  _.read = function (content, xSuper, ySuper, zSuper) {\n    xSuper = xSuper ? xSuper : 1;\n    ySuper = ySuper ? ySuper : 1;\n    zSuper = zSuper ? zSuper : 1;\n    var molecule = new structures.Molecule();\n\n    if (!content) {\n      return molecule;\n    }\n\n    var lines = content.split('\\n');\n    var aLength = 0,\n        bLength = 0,\n        cLength = 0,\n        alphaAngle = 0,\n        betaAngle = 0,\n        gammaAngle = 0;\n    var hallClass = 'P';\n    var transformLoop;\n    var atomLoop;\n    var bondLoop;\n    var line;\n    var shift = true;\n\n    while (lines.length > 0) {\n      if (shift) {\n        line = lines.shift();\n      } else {\n        shift = true;\n      }\n\n      if (line.length > 0) {\n        if (extensions.stringStartsWith(line, '_cell_length_a')) {\n          aLength = parseFloat(line.split(whitespaceAndParenthesisRegex)[1]);\n        } else if (extensions.stringStartsWith(line, '_cell_length_b')) {\n          bLength = parseFloat(line.split(whitespaceAndParenthesisRegex)[1]);\n        } else if (extensions.stringStartsWith(line, '_cell_length_c')) {\n          cLength = parseFloat(line.split(whitespaceAndParenthesisRegex)[1]);\n        } else if (extensions.stringStartsWith(line, '_cell_angle_alpha')) {\n          alphaAngle = m.PI * parseFloat(line.split(whitespaceAndParenthesisRegex)[1]) / 180;\n        } else if (extensions.stringStartsWith(line, '_cell_angle_beta')) {\n          betaAngle = m.PI * parseFloat(line.split(whitespaceAndParenthesisRegex)[1]) / 180;\n        } else if (extensions.stringStartsWith(line, '_cell_angle_gamma')) {\n          gammaAngle = m.PI * parseFloat(line.split(whitespaceAndParenthesisRegex)[1]) / 180;\n        } else if (extensions.stringStartsWith(line, '_symmetry_space_group_name_H-M')) {\n          hallClass = line.split(whitespaceAndQuoteRegex)[1];\n        } else if (extensions.stringStartsWith(line, 'loop_')) {\n          var loop = {\n            fields: [],\n            lines: []\n          };\n          var pushingLines = false; // keep undefined check here because the line may be an\n          // empty string\n\n          while ((line = lines.shift()) !== undefined && !extensions.stringStartsWith(line = line.replace(leadingWhitespaceRegex, ''), 'loop_') && line.length > 0) {\n            // remove leading whitespace that may appear in\n            // subloop lines ^\n            if (extensions.stringStartsWith(line, '_')) {\n              if (pushingLines) {\n                break;\n              }\n\n              loop.fields = loop.fields.concat(line.split(whitespaceRegex).filter(filter));\n            } else {\n              pushingLines = true;\n              loop.lines.push(line);\n            }\n          }\n\n          if (lines.length !== 0 && (extensions.stringStartsWith(line, 'loop_') || extensions.stringStartsWith(line, '_'))) {\n            shift = false;\n          }\n\n          if (loop.fields.indexOf('_symmetry_equiv_pos_as_xyz') !== -1 || loop.fields.indexOf('_space_group_symop_operation_xyz') !== -1) {\n            transformLoop = loop;\n          } else if (loop.fields.indexOf('_atom_site_label') !== -1) {\n            atomLoop = loop;\n          } else if (loop.fields.indexOf('_geom_bond_atom_site_label_1') !== -1) {\n            bondLoop = loop;\n          }\n        }\n      }\n    }\n\n    var abc2xyz = generateABC2XYZ(aLength, bLength, cLength, alphaAngle, betaAngle, gammaAngle); // internal atom coordinates\n\n    if (atomLoop) {\n      var labelIndex = -1,\n          altLabelIndex = -1,\n          xIndex = -1,\n          yIndex = -1,\n          zIndex = -1;\n\n      for (var i = 0, ii = atomLoop.fields.length; i < ii; i++) {\n        var field = atomLoop.fields[i];\n\n        if (field === '_atom_site_type_symbol') {\n          labelIndex = i;\n        } else if (field === '_atom_site_label') {\n          altLabelIndex = i;\n        } else if (field === '_atom_site_fract_x') {\n          xIndex = i;\n        } else if (field === '_atom_site_fract_y') {\n          yIndex = i;\n        } else if (field === '_atom_site_fract_z') {\n          zIndex = i;\n        }\n      }\n\n      for (var i = 0, ii = atomLoop.lines.length; i < ii; i++) {\n        line = atomLoop.lines[i];\n        var tokens = line.split(whitespaceRegex).filter(filter);\n        var a = new structures.Atom(tokens[labelIndex === -1 ? altLabelIndex : labelIndex].split(digitsSymbolRegex)[0], parseFloat(tokens[xIndex]), parseFloat(tokens[yIndex]), parseFloat(tokens[zIndex]));\n        molecule.atoms.push(a);\n\n        if (altLabelIndex !== -1) {\n          a.cifId = tokens[altLabelIndex];\n          a.cifPart = 0;\n        }\n      }\n    } // transforms, unless bonds are specified\n\n\n    if (transformLoop && !bondLoop) {\n      // assume the index is 0, just incase a different identifier is\n      // used\n      var symIndex = 0;\n\n      for (var i = 0, ii = transformLoop.fields.length; i < ii; i++) {\n        var field = transformLoop.fields[i];\n\n        if (field === '_symmetry_equiv_pos_as_xyz' || field === '_space_group_symop_operation_xyz') {\n          symIndex = i;\n        }\n      }\n\n      var impliedTranslations = hallTranslations[hallClass];\n      var add = [];\n\n      for (var i = 0, ii = transformLoop.lines.length; i < ii; i++) {\n        var parts = transformLoop.lines[i].split(whitespaceAndQuoteAndCommaRegex).filter(filter);\n        var multx = parseTransform(parts[symIndex]);\n        var multy = parseTransform(parts[symIndex + 1]);\n        var multz = parseTransform(parts[symIndex + 2]);\n\n        for (var j = 0, jj = molecule.atoms.length; j < jj; j++) {\n          var a = molecule.atoms[j];\n          var x = a.x * multx[1] + a.y * multx[2] + a.z * multx[3] + multx[0];\n          var y = a.x * multy[1] + a.y * multy[2] + a.z * multy[3] + multy[0];\n          var z = a.x * multz[1] + a.y * multz[2] + a.z * multz[3] + multz[0];\n          var copy1 = new structures.Atom(a.label, x, y, z);\n          add.push(copy1); // cifID could be 0, so check for undefined\n\n          if (a.cifId !== undefined) {\n            copy1.cifId = a.cifId;\n            copy1.cifPart = i + 1;\n          }\n\n          if (impliedTranslations) {\n            for (var k = 0, kk = impliedTranslations.length; k < kk; k++) {\n              var trans = impliedTranslations[k];\n              var copy2 = new structures.Atom(a.label, x + trans[0], y + trans[1], z + trans[2]);\n              add.push(copy2); // cifID could be 0, so check for undefined\n\n              if (a.cifId !== undefined) {\n                copy2.cifId = a.cifId;\n                copy2.cifPart = i + 1;\n              }\n            }\n          }\n        }\n      } // make sure all atoms are within the unit cell\n\n\n      for (var i = 0, ii = add.length; i < ii; i++) {\n        var a = add[i];\n\n        while (a.x >= 1) {\n          a.x--;\n        }\n\n        while (a.x < 0) {\n          a.x++;\n        }\n\n        while (a.y >= 1) {\n          a.y--;\n        }\n\n        while (a.y < 0) {\n          a.y++;\n        }\n\n        while (a.z >= 1) {\n          a.z--;\n        }\n\n        while (a.z < 0) {\n          a.z++;\n        }\n      } // remove overlaps\n\n\n      var noOverlaps = [];\n\n      for (var i = 0, ii = add.length; i < ii; i++) {\n        var overlap = false;\n        var a = add[i];\n\n        for (var j = 0, jj = molecule.atoms.length; j < jj; j++) {\n          if (molecule.atoms[j].distance3D(a) < .0001) {\n            overlap = true;\n            break;\n          }\n        }\n\n        if (!overlap) {\n          for (var j = 0, jj = noOverlaps.length; j < jj; j++) {\n            if (noOverlaps[j].distance3D(a) < .0001) {\n              overlap = true;\n              break;\n            }\n          }\n\n          if (!overlap) {\n            noOverlaps.push(a);\n          }\n        }\n      } // concat arrays\n\n\n      molecule.atoms = molecule.atoms.concat(noOverlaps);\n    } // build super cell\n\n\n    var extras = [];\n\n    for (var i = 0; i < xSuper; i++) {\n      for (var j = 0; j < ySuper; j++) {\n        for (var k = 0; k < zSuper; k++) {\n          if (!(i === 0 && j === 0 && k === 0)) {\n            for (var l = 0, ll = molecule.atoms.length; l < ll; l++) {\n              var a = molecule.atoms[l];\n              var copy = new structures.Atom(a.label, a.x + i, a.y + j, a.z + k);\n              extras.push(copy); // cifID could be 0, so check for undefined\n\n              if (a.cifId !== undefined) {\n                copy.cifId = a.cifId;\n                copy.cifPart = a.cifPart + (transformLoop ? transformLoop.lines.length : 0) + i + j * 10 + k * 100;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    molecule.atoms = molecule.atoms.concat(extras); // convert to xyz\n\n    for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {\n      var a = molecule.atoms[i];\n      var xyz = m4.multiplyVec3(abc2xyz, [a.x, a.y, a.z]);\n      a.x = xyz[0];\n      a.y = xyz[1];\n      a.z = xyz[2];\n    } // handle bonds\n\n\n    if (bondLoop) {\n      var atom1 = -1,\n          atom2 = -1;\n\n      for (var i = 0, ii = bondLoop.fields.length; i < ii; i++) {\n        var field = bondLoop.fields[i];\n\n        if (field === '_geom_bond_atom_site_label_1') {\n          atom1 = i;\n        } else if (field === '_geom_bond_atom_site_label_2') {\n          atom2 = i;\n        }\n      }\n\n      for (var k = 0, kk = bondLoop.lines.length; k < kk; k++) {\n        var tokens = bondLoop.lines[k].split(whitespaceRegex).filter(filter);\n        var id1 = tokens[atom1];\n        var id2 = tokens[atom2];\n\n        for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {\n          for (var j = i + 1; j < ii; j++) {\n            var ai = molecule.atoms[i];\n            var aj = molecule.atoms[j];\n\n            if (ai.cifPart !== aj.cifPart) {\n              break;\n            }\n\n            if (ai.cifId === id1 && aj.cifId === id2 || ai.cifId === id2 && aj.cifId === id1) {\n              molecule.bonds.push(new structures.Bond(ai, aj));\n            }\n          }\n        }\n      }\n    } else {\n      new c.informatics.BondDeducer().deduceCovalentBonds(molecule, 1);\n    } // generate unit cell\n\n\n    var o = [-xSuper / 2, -ySuper / 2, -zSuper / 2];\n    var unitCellVectors = {\n      o: m4.multiplyVec3(abc2xyz, o, []),\n      x: m4.multiplyVec3(abc2xyz, [o[0] + 1, o[1], o[2]]),\n      y: m4.multiplyVec3(abc2xyz, [o[0], o[1] + 1, o[2]]),\n      z: m4.multiplyVec3(abc2xyz, [o[0], o[1], o[2] + 1]),\n      xy: m4.multiplyVec3(abc2xyz, [o[0] + 1, o[1] + 1, o[2]]),\n      xz: m4.multiplyVec3(abc2xyz, [o[0] + 1, o[1], o[2] + 1]),\n      yz: m4.multiplyVec3(abc2xyz, [o[0], o[1] + 1, o[2] + 1]),\n      xyz: m4.multiplyVec3(abc2xyz, [o[0] + 1, o[1] + 1, o[2] + 1])\n    };\n    return {\n      molecule: molecule,\n      unitCell: new d3.UnitCell(unitCellVectors)\n    };\n  }; // shortcuts\n\n\n  var interpreter = new io.CIFInterpreter();\n\n  c.readCIF = function (content, xSuper, ySuper, zSuper) {\n    return interpreter.read(content, xSuper, ySuper, zSuper);\n  };\n})(ChemDoodle, ChemDoodle.extensions, ChemDoodle.io, ChemDoodle.structures, ChemDoodle.structures.d3, Math, ChemDoodle.lib.mat4, ChemDoodle.lib.vec3);\n\n(function (c, io, structures, q, undefined) {\n  'use strict';\n\n  io.CMLInterpreter = function () {};\n\n  var _ = io.CMLInterpreter.prototype = new io._Interpreter();\n\n  _.read = function (content) {\n    var molecules = [];\n    var xml = q.parseXML(content); // Possible for multiple CML tags to exist\n\n    var allCml = q(xml).find('cml');\n\n    for (var i = 0, ii = allCml.length; i < ii; i++) {\n      var allMolecules = q(allCml[i]).find('molecule');\n\n      for (var j = 0, jj = allMolecules.length; j < jj; j++) {\n        var currentMolecule = molecules[j] = new structures.Molecule();\n        var idmap = []; // Don't even bother with atomArrays, there's no point.\n\n        var cmlAtoms = q(allMolecules[j]).find('atom');\n\n        for (var k = 0, kk = cmlAtoms.length; k < kk; k++) {\n          var currentCMLAtom = q(cmlAtoms[k]);\n          var label = currentCMLAtom.attr('elementType');\n          var x, y, z, currentAtom;\n\n          if (currentCMLAtom.attr('x2') == undefined) {\n            x = currentCMLAtom.attr('x3');\n            y = currentCMLAtom.attr('y3');\n            z = currentCMLAtom.attr('z3');\n          } else {\n            x = currentCMLAtom.attr('x2');\n            y = currentCMLAtom.attr('y2');\n            z = 0;\n          }\n\n          currentAtom = molecules[j].atoms[k] = new structures.Atom(label, x, y, z);\n          idmap[k] = currentCMLAtom.attr('id'); // charge\n\n          if (currentCMLAtom.attr('formalCharge') != undefined) {\n            currentAtom.charge = currentCMLAtom.attr('formalCharge');\n          }\n        }\n\n        var cmlBonds = q(allMolecules[j]).find('bond');\n\n        for (var k = 0, kk = cmlBonds.length; k < kk; k++) {\n          var currentCMLBond = q(cmlBonds[k]);\n          var atomRefs2 = currentCMLBond.attr('atomRefs2').split(' ');\n          var a1, a2, order;\n          a1 = currentMolecule.atoms[q.inArray(atomRefs2[0], idmap)];\n          a2 = currentMolecule.atoms[q.inArray(atomRefs2[1], idmap)];\n\n          switch (currentCMLBond.attr('order')) {\n            case '2':\n            case 'D':\n              order = 2;\n              break;\n\n            case '3':\n            case 'T':\n              order = 3;\n              break;\n\n            case 'A':\n              order = 1.5;\n              break;\n\n            default:\n              order = 1;\n          }\n\n          var currentBond = molecules[j].bonds[k] = new structures.Bond(a1, a2, order); // check stereo... only support W or H\n\n          switch (currentCMLBond.find('bondStereo').text()) {\n            case 'W':\n              currentBond.stereo = structures.Bond.STEREO_PROTRUDING;\n              break;\n\n            case 'H':\n              currentBond.stereo = structures.Bond.STEREO_RECESSED;\n              break;\n          }\n        }\n      }\n    }\n\n    return molecules;\n  };\n\n  _.write = function (molecules) {\n    var sb = [];\n    sb.push('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n');\n    sb.push('<cml convention=\"conventions:molecular\" xmlns=\"http://www.xml-cml.org/schema\" xmlns:conventions=\"http://www.xml-cml.org/convention/\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\\n'); // TODO: Metadata\n\n    for (var i = 0, ii = molecules.length; i < ii; i++) {\n      sb.push('<molecule id=\"m');\n      sb.push(i);\n      sb.push('\">');\n      sb.push('<atomArray>');\n\n      for (var j = 0, jj = molecules[i].atoms.length; j < jj; j++) {\n        var currentAtom = molecules[i].atoms[j];\n        sb.push('<atom elementType=\"');\n        sb.push(currentAtom.label);\n        sb.push('\" id=\"a');\n        sb.push(j);\n        sb.push('\" '); // Always do 3D coordinates, unless there is a fancy reliable way to tell if the molecule is 2D.\n\n        sb.push('x3=\"');\n        sb.push(currentAtom.x);\n        sb.push('\" y3=\"');\n        sb.push(currentAtom.y);\n        sb.push('\" z3=\"');\n        sb.push(currentAtom.z);\n        sb.push('\" ');\n\n        if (currentAtom.charge != 0) {\n          sb.push('formalCharge=\"');\n          sb.push(currentAtom.charge);\n          sb.push('\" ');\n        }\n\n        sb.push('/>');\n      }\n\n      sb.push('</atomArray>');\n      sb.push('<bondArray>');\n\n      for (var j = 0, jj = molecules[i].bonds.length; j < jj; j++) {\n        var currentBond = molecules[i].bonds[j];\n        sb.push('<bond atomRefs2=\"a');\n        sb.push(molecules[i].atoms.indexOf(currentBond.a1));\n        sb.push(' a');\n        sb.push(molecules[i].atoms.indexOf(currentBond.a2));\n        sb.push('\" order=\"');\n\n        switch (currentBond.bondOrder) {\n          case 1.5:\n            sb.push('A');\n            break;\n\n          case 1:\n          case 2:\n          case 3:\n            sb.push(currentBond.bondOrder);\n            break;\n\n          case 0.5:\n          default:\n            sb.push('S');\n            break;\n        }\n\n        sb.push('\"/>');\n      }\n\n      sb.push('</bondArray>');\n      sb.push('</molecule>');\n    }\n\n    sb.push('</cml>');\n    return sb.join('');\n  }; // shortcuts\n\n\n  var interpreter = new io.CMLInterpreter();\n\n  c.readCML = function (content) {\n    return interpreter.read(content);\n  };\n\n  c.writeCML = function (molecules) {\n    return interpreter.write(molecules);\n  };\n})(ChemDoodle, ChemDoodle.io, ChemDoodle.structures, ChemDoodle.lib.jQuery);\n\n(function (c, ELEMENT, io, structures, undefined) {\n  'use strict';\n\n  io.MOLInterpreter = function () {};\n\n  var _ = io.MOLInterpreter.prototype = new io._Interpreter();\n\n  _.read = function (content, multiplier) {\n    if (!multiplier) {\n      multiplier = c.default_bondLength_2D;\n    }\n\n    var molecule = new structures.Molecule();\n\n    if (!content) {\n      return molecule;\n    }\n\n    var currentTagTokens = content.split('\\n');\n    var counts = currentTagTokens[3];\n    var numAtoms = parseInt(counts.substring(0, 3));\n    var numBonds = parseInt(counts.substring(3, 6));\n\n    for (var i = 0; i < numAtoms; i++) {\n      var line = currentTagTokens[4 + i];\n      molecule.atoms[i] = new structures.Atom(line.substring(31, 34), parseFloat(line.substring(0, 10)) * multiplier, (multiplier === 1 ? 1 : -1) * parseFloat(line.substring(10, 20)) * multiplier, parseFloat(line.substring(20, 30)) * multiplier);\n      var massDif = parseInt(line.substring(34, 36));\n\n      if (massDif !== 0 && ELEMENT[molecule.atoms[i].label]) {\n        molecule.atoms[i].mass = ELEMENT[molecule.atoms[i].label].mass + massDif;\n      }\n\n      switch (parseInt(line.substring(36, 39))) {\n        case 1:\n          molecule.atoms[i].charge = 3;\n          break;\n\n        case 2:\n          molecule.atoms[i].charge = 2;\n          break;\n\n        case 3:\n          molecule.atoms[i].charge = 1;\n          break;\n\n        case 5:\n          molecule.atoms[i].charge = -1;\n          break;\n\n        case 6:\n          molecule.atoms[i].charge = -2;\n          break;\n\n        case 7:\n          molecule.atoms[i].charge = -3;\n          break;\n      }\n    }\n\n    for (var i = 0; i < numBonds; i++) {\n      var line = currentTagTokens[4 + numAtoms + i];\n      var bondOrder = parseInt(line.substring(6, 9));\n      var stereo = parseInt(line.substring(9, 12));\n\n      if (bondOrder > 3) {\n        switch (bondOrder) {\n          case 4:\n            bondOrder = 1.5;\n            break;\n\n          default:\n            bondOrder = 1;\n            break;\n        }\n      }\n\n      var b = new structures.Bond(molecule.atoms[parseInt(line.substring(0, 3)) - 1], molecule.atoms[parseInt(line.substring(3, 6)) - 1], bondOrder);\n\n      switch (stereo) {\n        case 3:\n          b.stereo = structures.Bond.STEREO_AMBIGUOUS;\n          break;\n\n        case 1:\n          b.stereo = structures.Bond.STEREO_PROTRUDING;\n          break;\n\n        case 6:\n          b.stereo = structures.Bond.STEREO_RECESSED;\n          break;\n      }\n\n      molecule.bonds[i] = b;\n    }\n\n    return molecule;\n  };\n\n  _.write = function (molecule) {\n    var sb = [];\n    sb.push('Molecule from ChemDoodle Web Components\\n\\nhttp://www.ichemlabs.com\\n');\n    sb.push(this.fit(molecule.atoms.length.toString(), 3));\n    sb.push(this.fit(molecule.bonds.length.toString(), 3));\n    sb.push('  0  0  0  0            999 V2000\\n');\n    var p = molecule.getCenter();\n\n    for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {\n      var a = molecule.atoms[i];\n      var mass = ' 0';\n\n      if (a.mass !== -1 && ELEMENT[a.label]) {\n        var dif = a.mass - ELEMENT[a.label].mass;\n\n        if (dif < 5 && dif > -4) {\n          mass = (dif > -1 ? ' ' : '') + dif;\n        }\n      }\n\n      var charge = '  0';\n\n      if (a.charge !== 0) {\n        switch (a.charge) {\n          case 3:\n            charge = '  1';\n            break;\n\n          case 2:\n            charge = '  2';\n            break;\n\n          case 1:\n            charge = '  3';\n            break;\n\n          case -1:\n            charge = '  5';\n            break;\n\n          case -2:\n            charge = '  6';\n            break;\n\n          case -3:\n            charge = '  7';\n            break;\n        }\n      }\n\n      sb.push(this.fit(((a.x - p.x) / c.default_bondLength_2D).toFixed(4), 10));\n      sb.push(this.fit((-(a.y - p.y) / c.default_bondLength_2D).toFixed(4), 10));\n      sb.push(this.fit((a.z / c.default_bondLength_2D).toFixed(4), 10));\n      sb.push(' ');\n      sb.push(this.fit(a.label, 3, true));\n      sb.push(mass);\n      sb.push(charge);\n      sb.push('  0  0  0  0\\n');\n    }\n\n    for (var i = 0, ii = molecule.bonds.length; i < ii; i++) {\n      var b = molecule.bonds[i];\n      var stereo = 0;\n\n      if (b.stereo === structures.Bond.STEREO_AMBIGUOUS) {\n        stereo = 3;\n      } else if (b.stereo === structures.Bond.STEREO_PROTRUDING) {\n        stereo = 1;\n      } else if (b.stereo === structures.Bond.STEREO_RECESSED) {\n        stereo = 6;\n      }\n\n      sb.push(this.fit((molecule.atoms.indexOf(b.a1) + 1).toString(), 3));\n      sb.push(this.fit((molecule.atoms.indexOf(b.a2) + 1).toString(), 3));\n      var btype = b.bondOrder;\n\n      if (btype == 1.5) {\n        btype = 4;\n      } else if (btype > 3 || btype % 1 != 0) {\n        btype = 1;\n      }\n\n      sb.push(this.fit(btype.toString(), 3));\n      sb.push('  ');\n      sb.push(stereo);\n      sb.push('  0  0  0\\n');\n    }\n\n    sb.push('M  END');\n    return sb.join('');\n  }; // shortcuts\n\n\n  var interpreter = new io.MOLInterpreter();\n\n  c.readMOL = function (content, multiplier) {\n    return interpreter.read(content, multiplier);\n  };\n\n  c.writeMOL = function (mol) {\n    return interpreter.write(mol);\n  };\n})(ChemDoodle, ChemDoodle.ELEMENT, ChemDoodle.io, ChemDoodle.structures);\n\n(function (c, extensions, io, structures, ELEMENT, trim, m, undefined) {\n  'use strict';\n\n  function checkContained(residue, set, chainID, index, helix) {\n    for (var j = 0, jj = set.length; j < jj; j++) {\n      var check = set[j];\n\n      if (check.id === chainID && index >= check.start && index <= check.end) {\n        if (helix) {\n          residue.helix = true;\n        } else {\n          residue.sheet = true;\n        }\n\n        if (index === check.end) {\n          residue.arrow = true;\n        }\n\n        return;\n      }\n    }\n  }\n\n  io.PDBInterpreter = function () {};\n\n  var _ = io.PDBInterpreter.prototype = new io._Interpreter();\n\n  _.calculateRibbonDistances = false;\n  _.deduceResidueBonds = false;\n\n  _.read = function (content, multiplier) {\n    var molecule = new structures.Molecule();\n    molecule.chains = [];\n\n    if (!content) {\n      return molecule;\n    }\n\n    var currentTagTokens = content.split('\\n');\n\n    if (!multiplier) {\n      multiplier = 1;\n    }\n\n    var helices = [];\n    var sheets = [];\n    var lastC;\n    var currentChain = [];\n    var resatoms = [];\n    var atomSerials = [];\n\n    for (var i = 0, ii = currentTagTokens.length; i < ii; i++) {\n      var line = currentTagTokens[i];\n\n      if (extensions.stringStartsWith(line, 'HELIX')) {\n        helices.push({\n          id: line.substring(19, 20),\n          start: parseInt(line.substring(21, 25)),\n          end: parseInt(line.substring(33, 37))\n        });\n      } else if (extensions.stringStartsWith(line, 'SHEET')) {\n        sheets.push({\n          id: line.substring(21, 22),\n          start: parseInt(line.substring(22, 26)),\n          end: parseInt(line.substring(33, 37))\n        });\n      } else if (extensions.stringStartsWith(line, 'ATOM')) {\n        var altLoc = line.substring(16, 17);\n\n        if (altLoc === ' ' || altLoc === 'A') {\n          var label = trim(line.substring(76, 78));\n\n          if (label.length === 0) {\n            var s = trim(line.substring(12, 14));\n\n            if (s === 'HD') {\n              label = 'H';\n            } else if (s.length > 0) {\n              if (s.length > 1) {\n                label = s.charAt(0) + s.substring(1).toLowerCase();\n              } else {\n                label = s;\n              }\n            }\n          }\n\n          var a = new structures.Atom(label, parseFloat(line.substring(30, 38)) * multiplier, parseFloat(line.substring(38, 46)) * multiplier, parseFloat(line.substring(46, 54)) * multiplier);\n          a.hetatm = false;\n          resatoms.push(a); // set up residue\n\n          var resSeq = parseInt(line.substring(22, 26));\n\n          if (currentChain.length === 0) {\n            for (var j = 0; j < 3; j++) {\n              var dummyFront = new structures.Residue(-1);\n              dummyFront.cp1 = a;\n              dummyFront.cp2 = a;\n              currentChain.push(dummyFront);\n            }\n          }\n\n          if (resSeq !== Number.NaN && currentChain[currentChain.length - 1].resSeq !== resSeq) {\n            var r = new structures.Residue(resSeq);\n            r.name = trim(line.substring(17, 20));\n\n            if (r.name.length === 3) {\n              r.name = r.name.substring(0, 1) + r.name.substring(1).toLowerCase();\n            } else {\n              if (r.name.length === 2 && r.name.charAt(0) === 'D') {\n                r.name = r.name.substring(1);\n              }\n            }\n\n            currentChain.push(r);\n            var chainID = line.substring(21, 22);\n            checkContained(r, helices, chainID, resSeq, true);\n            checkContained(r, sheets, chainID, resSeq, false);\n          } // end residue setup\n\n\n          var atomName = trim(line.substring(12, 16));\n          var currentResidue = currentChain[currentChain.length - 1];\n\n          if (atomName === 'CA' || atomName === 'P' || atomName === 'O5\\'') {\n            if (!currentResidue.cp1) {\n              currentResidue.cp1 = a;\n            }\n          } else if (atomName === 'N3' && (currentResidue.name === 'C' || currentResidue.name === 'U' || currentResidue.name === 'T') || atomName === 'N1' && (currentResidue.name === 'A' || currentResidue.name === 'G')) {\n            // control points for base platform direction\n            currentResidue.cp3 = a;\n          } else if (atomName === 'C2') {\n            // control points for base platform orientation\n            currentResidue.cp4 = a;\n          } else if (atomName === 'C4' && (currentResidue.name === 'C' || currentResidue.name === 'U' || currentResidue.name === 'T') || atomName === 'C6' && (currentResidue.name === 'A' || currentResidue.name === 'G')) {\n            // control points for base platform orientation\n            currentResidue.cp5 = a;\n          } else if (atomName === 'O' || atomName === 'C6' && (currentResidue.name === 'C' || currentResidue.name === 'U' || currentResidue.name === 'T') || atomName === 'N9') {\n            if (!currentChain[currentChain.length - 1].cp2) {\n              if (atomName === 'C6' || atomName === 'N9') {\n                lastC = a;\n              }\n\n              currentResidue.cp2 = a;\n            }\n          } else if (atomName === 'C') {\n            lastC = a;\n          }\n        }\n      } else if (extensions.stringStartsWith(line, 'HETATM')) {\n        var symbol = trim(line.substring(76, 78));\n\n        if (symbol.length === 0) {\n          // handle the case where an improperly formatted PDB\n          // file states the element label in the atom name column\n          symbol = trim(line.substring(12, 16));\n        }\n\n        if (symbol.length > 1) {\n          symbol = symbol.substring(0, 1) + symbol.substring(1).toLowerCase();\n        }\n\n        var het = new structures.Atom(symbol, parseFloat(line.substring(30, 38)) * multiplier, parseFloat(line.substring(38, 46)) * multiplier, parseFloat(line.substring(46, 54)) * multiplier);\n        het.hetatm = true;\n        var residueName = trim(line.substring(17, 20));\n\n        if (residueName === 'HOH') {\n          het.isWater = true;\n        }\n\n        molecule.atoms.push(het);\n        atomSerials[parseInt(trim(line.substring(6, 11)))] = het;\n      } else if (extensions.stringStartsWith(line, 'CONECT')) {\n        var oid = parseInt(trim(line.substring(6, 11)));\n\n        if (atomSerials[oid]) {\n          var origin = atomSerials[oid];\n\n          for (var k = 0; k < 4; k++) {\n            var next = trim(line.substring(11 + k * 5, 16 + k * 5));\n\n            if (next.length !== 0) {\n              var nid = parseInt(next);\n\n              if (atomSerials[nid]) {\n                var a2 = atomSerials[nid];\n                var found = false;\n\n                for (var j = 0, jj = molecule.bonds.length; j < jj; j++) {\n                  var b = molecule.bonds[j];\n\n                  if (b.a1 === origin && b.a2 === a2 || b.a1 === a2 && b.a2 === origin) {\n                    found = true;\n                    break;\n                  }\n                }\n\n                if (!found) {\n                  molecule.bonds.push(new structures.Bond(origin, a2));\n                }\n              }\n            }\n          }\n        }\n      } else if (extensions.stringStartsWith(line, 'TER')) {\n        this.endChain(molecule, currentChain, lastC, resatoms);\n        currentChain = [];\n      } else if (extensions.stringStartsWith(line, 'ENDMDL')) {\n        break;\n      }\n    }\n\n    this.endChain(molecule, currentChain, lastC, resatoms);\n\n    if (molecule.bonds.size === 0) {\n      new c.informatics.BondDeducer().deduceCovalentBonds(molecule, multiplier);\n    }\n\n    if (this.deduceResidueBonds) {\n      for (var i = 0, ii = resatoms.length; i < ii; i++) {\n        var max = m.min(ii, i + 20);\n\n        for (var j = i + 1; j < max; j++) {\n          var first = resatoms[i];\n          var second = resatoms[j];\n\n          if (first.distance3D(second) < (ELEMENT[first.label].covalentRadius + ELEMENT[second.label].covalentRadius) * 1.1) {\n            molecule.bonds.push(new structures.Bond(first, second, 1));\n          }\n        }\n      }\n    }\n\n    molecule.atoms = molecule.atoms.concat(resatoms);\n\n    if (this.calculateRibbonDistances) {\n      this.calculateDistances(molecule, resatoms);\n    }\n\n    return molecule;\n  };\n\n  _.endChain = function (molecule, chain, lastC, resatoms) {\n    if (chain.length > 0) {\n      var last = chain[chain.length - 1];\n\n      if (!last.cp1) {\n        last.cp1 = resatoms[resatoms.length - 2];\n      }\n\n      if (!last.cp2) {\n        last.cp2 = resatoms[resatoms.length - 1];\n      }\n\n      for (var i = 0; i < 4; i++) {\n        var dummyEnd = new structures.Residue(-1);\n        dummyEnd.cp1 = lastC;\n        dummyEnd.cp2 = chain[chain.length - 1].cp2;\n        chain.push(dummyEnd);\n      }\n\n      molecule.chains.push(chain);\n    }\n  };\n\n  _.calculateDistances = function (molecule, resatoms) {\n    var hetatm = [];\n\n    for (var i = 0, ii = molecule.atoms.length; i < ii; i++) {\n      var a = molecule.atoms[i];\n\n      if (a.hetatm) {\n        if (!a.isWater) {\n          hetatm.push(a);\n        }\n      }\n    }\n\n    for (var i = 0, ii = resatoms.length; i < ii; i++) {\n      var a = resatoms[i];\n      a.closestDistance = Number.POSITIVE_INFINITY;\n\n      if (hetatm.length === 0) {\n        a.closestDistance = 0;\n      } else {\n        for (var j = 0, jj = hetatm.length; j < jj; j++) {\n          a.closestDistance = Math.min(a.closestDistance, a.distance3D(hetatm[j]));\n        }\n      }\n    }\n  }; // shortcuts\n\n\n  var interpreter = new io.PDBInterpreter();\n\n  c.readPDB = function (content, multiplier) {\n    return interpreter.read(content, multiplier);\n  };\n})(ChemDoodle, ChemDoodle.extensions, ChemDoodle.io, ChemDoodle.structures, ChemDoodle.ELEMENT, ChemDoodle.lib.jQuery.trim, Math);\n\n(function (c, extensions, io, structures, q, undefined) {\n  'use strict';\n\n  var SQZ_HASH = {\n    '@': 0,\n    'A': 1,\n    'B': 2,\n    'C': 3,\n    'D': 4,\n    'E': 5,\n    'F': 6,\n    'G': 7,\n    'H': 8,\n    'I': 9,\n    'a': -1,\n    'b': -2,\n    'c': -3,\n    'd': -4,\n    'e': -5,\n    'f': -6,\n    'g': -7,\n    'h': -8,\n    'i': -9\n  },\n      DIF_HASH = {\n    '%': 0,\n    'J': 1,\n    'K': 2,\n    'L': 3,\n    'M': 4,\n    'N': 5,\n    'O': 6,\n    'P': 7,\n    'Q': 8,\n    'R': 9,\n    'j': -1,\n    'k': -2,\n    'l': -3,\n    'm': -4,\n    'n': -5,\n    'o': -6,\n    'p': -7,\n    'q': -8,\n    'r': -9\n  },\n      DUP_HASH = {\n    'S': 1,\n    'T': 2,\n    'U': 3,\n    'V': 4,\n    'W': 5,\n    'X': 6,\n    'Y': 7,\n    'Z': 8,\n    's': 9\n  };\n\n  io.JCAMPInterpreter = function () {};\n\n  var _ = io.JCAMPInterpreter.prototype = new io._Interpreter();\n\n  _.convertHZ2PPM = false;\n\n  _.read = function (content) {\n    this.isBreak = function (c) {\n      // some of these arrays may return zero, so check if undefined\n      return SQZ_HASH[c] !== undefined || DIF_HASH[c] !== undefined || DUP_HASH[c] !== undefined || c === ' ' || c === '-' || c === '+';\n    };\n\n    this.getValue = function (decipher, lastDif) {\n      var first = decipher.charAt(0);\n      var rest = decipher.substring(1); // some of these arrays may return zero, so check if undefined\n\n      if (SQZ_HASH[first] !== undefined) {\n        return parseFloat(SQZ_HASH[first] + rest);\n      } else if (DIF_HASH[first] !== undefined) {\n        return parseFloat(DIF_HASH[first] + rest) + lastDif;\n      }\n\n      return parseFloat(rest);\n    };\n\n    var spectrum = new structures.Spectrum();\n\n    if (content === undefined || content.length === 0) {\n      return spectrum;\n    }\n\n    var lines = content.split('\\n');\n    var sb = [];\n    var xLast,\n        xFirst,\n        yFirst,\n        nPoints,\n        xFactor = 1,\n        yFactor = 1,\n        observeFrequency = 1,\n        deltaX = -1,\n        shiftOffsetNum = -1,\n        shiftOffsetVal = -1;\n    var recordMeta = true,\n        divideByFrequency = false;\n\n    for (var i = 0, ii = lines.length; i < ii; i++) {\n      var use = lines[i].trim();\n      var index = use.indexOf('$$');\n\n      if (index !== -1) {\n        use = use.substring(0, index);\n      }\n\n      if (sb.length === 0 || !extensions.stringStartsWith(lines[i], '##')) {\n        var trimmed = use.trim();\n\n        if (sb.length !== 0 && trimmed.length !== 0) {\n          sb.push('\\n');\n        }\n\n        sb.push(trimmed);\n      } else {\n        var currentRecord = sb.join('');\n\n        if (recordMeta && currentRecord.length < 100) {\n          spectrum.metadata.push(currentRecord);\n        }\n\n        sb = [use];\n\n        if (extensions.stringStartsWith(currentRecord, '##TITLE=')) {\n          spectrum.title = currentRecord.substring(8).trim();\n        } else if (extensions.stringStartsWith(currentRecord, '##XUNITS=')) {\n          spectrum.xUnit = currentRecord.substring(9).trim();\n\n          if (this.convertHZ2PPM && spectrum.xUnit.toUpperCase() === 'HZ') {\n            spectrum.xUnit = 'PPM';\n            divideByFrequency = true;\n          }\n        } else if (extensions.stringStartsWith(currentRecord, '##YUNITS=')) {\n          spectrum.yUnit = currentRecord.substring(9).trim();\n        } else if (extensions.stringStartsWith(currentRecord, '##XYPAIRS=')) {// spectrum.yUnit = currentRecord.substring(9).trim();\n        } else if (extensions.stringStartsWith(currentRecord, '##FIRSTX=')) {\n          xFirst = parseFloat(currentRecord.substring(9).trim());\n        } else if (extensions.stringStartsWith(currentRecord, '##LASTX=')) {\n          xLast = parseFloat(currentRecord.substring(8).trim());\n        } else if (extensions.stringStartsWith(currentRecord, '##FIRSTY=')) {\n          yFirst = parseFloat(currentRecord.substring(9).trim());\n        } else if (extensions.stringStartsWith(currentRecord, '##NPOINTS=')) {\n          nPoints = parseFloat(currentRecord.substring(10).trim());\n        } else if (extensions.stringStartsWith(currentRecord, '##XFACTOR=')) {\n          xFactor = parseFloat(currentRecord.substring(10).trim());\n        } else if (extensions.stringStartsWith(currentRecord, '##YFACTOR=')) {\n          yFactor = parseFloat(currentRecord.substring(10).trim());\n        } else if (extensions.stringStartsWith(currentRecord, '##DELTAX=')) {\n          deltaX = parseFloat(currentRecord.substring(9).trim());\n        } else if (extensions.stringStartsWith(currentRecord, '##.OBSERVE FREQUENCY=')) {\n          if (this.convertHZ2PPM) {\n            observeFrequency = parseFloat(currentRecord.substring(21).trim());\n          }\n        } else if (extensions.stringStartsWith(currentRecord, '##.SHIFT REFERENCE=')) {\n          if (this.convertHZ2PPM) {\n            var parts = currentRecord.substring(19).split(',');\n            shiftOffsetNum = parseInt(parts[2].trim());\n            shiftOffsetVal = parseFloat(parts[3].trim());\n          }\n        } else if (extensions.stringStartsWith(currentRecord, '##XYDATA=')) {\n          if (!divideByFrequency) {\n            observeFrequency = 1;\n          }\n\n          recordMeta = false;\n          var lastWasDif = false;\n          var innerLines = currentRecord.split('\\n');\n          var abscissaSpacing = (xLast - xFirst) / (nPoints - 1);\n          var lastX = xFirst - abscissaSpacing;\n          var lastY = yFirst;\n          var lastDif = 0;\n          var lastOrdinate;\n\n          for (var j = 1, jj = innerLines.length; j < jj; j++) {\n            var data = [];\n            var read = innerLines[j].trim();\n            var sb = [];\n\n            for (var k = 0, kk = read.length; k < kk; k++) {\n              if (this.isBreak(read.charAt(k))) {\n                if (sb.length > 0 && !(sb.length === 1 && sb[0] === ' ')) {\n                  data.push(sb.join(''));\n                }\n\n                sb = [read.charAt(k)];\n              } else {\n                sb.push(read.charAt(k));\n              }\n            }\n\n            data.push(sb.join(''));\n            lastX = parseFloat(data[0]) * xFactor - abscissaSpacing;\n\n            for (var k = 1, kk = data.length; k < kk; k++) {\n              var decipher = data[k]; // some of these arrays may return zero, so\n              // check if undefined\n\n              if (DUP_HASH[decipher.charAt(0)] !== undefined) {\n                // be careful when reading this, to keep\n                // spectra efficient, DUPS are actually\n                // discarded, except the last y!\n                var dup = parseInt(DUP_HASH[decipher.charAt(0)] + decipher.substring(1)) - 1;\n\n                for (var l = 0; l < dup; l++) {\n                  lastX += abscissaSpacing;\n                  lastDif = this.getValue(lastOrdinate, lastDif);\n                  lastY = lastDif * yFactor;\n                  count++;\n                  spectrum.data[spectrum.data.length - 1] = new structures.Point(lastX / observeFrequency, lastY);\n                }\n              } else {\n                // some of these arrays may return zero, so\n                // check if undefined\n                if (!(SQZ_HASH[decipher.charAt(0)] !== undefined && lastWasDif)) {\n                  lastWasDif = DIF_HASH[decipher.charAt(0)] !== undefined;\n                  lastOrdinate = decipher;\n                  lastX += abscissaSpacing;\n                  lastDif = this.getValue(decipher, lastDif);\n                  lastY = lastDif * yFactor;\n                  count++;\n                  spectrum.data.push(new structures.Point(lastX / observeFrequency, lastY));\n                } else {\n                  lastY = this.getValue(decipher, lastDif) * yFactor;\n                }\n              }\n            }\n          }\n\n          if (shiftOffsetNum !== -1) {\n            var dif = shiftOffsetVal - spectrum.data[shiftOffsetNum - 1].x;\n\n            for (var i = 0, ii = spectrum.data.length; i < ii; i++) {\n              spectrum.data[i].x += dif;\n            }\n          }\n        } else if (extensions.stringStartsWith(currentRecord, '##PEAK TABLE=')) {\n          recordMeta = false;\n          spectrum.continuous = false;\n          var innerLines = currentRecord.split('\\n');\n          var count = 0;\n          var reg = /[\\s,]+/;\n\n          for (var j = 1, jj = innerLines.length; j < jj; j++) {\n            var items = innerLines[j].split(reg);\n            count += items.length / 2;\n\n            for (var k = 0, kk = items.length; k + 1 < kk; k += 2) {\n              spectrum.data.push(new structures.Point(parseFloat(items[k].trim()), parseFloat(items[k + 1].trim())));\n            }\n          }\n        } else if (extensions.stringStartsWith(currentRecord, '##ATOMLIST=')) {\n          spectrum.molecule = new structures.Molecule();\n          var innerLines = currentRecord.split('\\n');\n          var reg = /[\\s]+/;\n\n          for (var j = 1, jj = innerLines.length; j < jj; j++) {\n            var items = innerLines[j].split(reg);\n            spectrum.molecule.atoms.push(new structures.Atom(items[1]));\n          }\n        } else if (extensions.stringStartsWith(currentRecord, '##BONDLIST=')) {\n          var innerLines = currentRecord.split('\\n');\n          var reg = /[\\s]+/;\n\n          for (var j = 1, jj = innerLines.length; j < jj; j++) {\n            var items = innerLines[j].split(reg);\n            var order = 1;\n\n            if (items[2] === 'D') {\n              order = 2;\n            } else if (items[2] === 'T') {\n              order = 3;\n            }\n\n            spectrum.molecule.bonds.push(new structures.Bond(spectrum.molecule.atoms[parseInt(items[0]) - 1], spectrum.molecule.atoms[parseInt(items[1]) - 1], order));\n          }\n        } else if (spectrum.molecule && extensions.stringStartsWith(currentRecord, '##XY_RASTER=')) {\n          var innerLines = currentRecord.split('\\n');\n          var reg = /[\\s]+/;\n\n          for (var j = 1, jj = innerLines.length; j < jj; j++) {\n            var items = innerLines[j].split(reg);\n            var a = spectrum.molecule.atoms[parseInt(items[0]) - 1];\n            a.x = parseInt(items[1]);\n            a.y = parseInt(items[2]);\n\n            if (items.length == 4) {\n              a.z = parseInt(items[3]);\n            }\n          }\n\n          spectrum.molecule.scaleToAverageBondLength(20);\n        } else if (extensions.stringStartsWith(currentRecord, '##PEAK ASSIGNMENTS=')) {\n          var innerLines = currentRecord.split('\\n');\n          var reg = /[\\s,()<>]+/;\n          spectrum.assignments = [];\n\n          for (var j = 1, jj = innerLines.length; j < jj; j++) {\n            var items = innerLines[j].split(reg);\n            var x = parseFloat(items[1]);\n            var y = parseFloat(items[2]);\n            var a = spectrum.molecule.atoms[parseInt(items[3]) - 1];\n            var used = false;\n\n            for (var k = 0, kk = spectrum.assignments.length; k < kk; k++) {\n              var assign = spectrum.assignments[k];\n\n              if (assign.x === x) {\n                assign.as.push(a);\n                a.assigned = assign;\n                used = true;\n                break;\n              }\n            }\n\n            if (!used) {\n              var assign = {\n                x: x,\n                y: y,\n                as: [a]\n              };\n              a.assigned = assign;\n              spectrum.assignments.push(assign);\n            }\n          }\n        }\n      }\n    }\n\n    spectrum.setup();\n    return spectrum;\n  };\n\n  _.makeStructureSpectrumSet = function (id, content) {\n    this.convertHZ2PPM = true;\n    var spectrum = this.read(content);\n    var mcanvas = new c.ViewerCanvas(id + '_molecule', 200, 200);\n    mcanvas.specs.atoms_displayTerminalCarbonLabels_2D = true;\n    mcanvas.specs.atoms_displayImplicitHydrogens_2D = true;\n\n    mcanvas.mouseout = function (e) {\n      if (this.molecules.length !== 0) {\n        for (var i = 0, ii = this.molecules[0].atoms.length; i < ii; i++) {\n          this.molecules[0].atoms[i].isHover = false;\n        }\n\n        spectrum.hovered = undefined;\n        this.repaint();\n        scanvas.repaint();\n      }\n    };\n\n    mcanvas.touchend = mcanvas.mouseout;\n\n    mcanvas.mousemove = function (e) {\n      if (this.molecules.length !== 0) {\n        var closest = undefined;\n\n        for (var i = 0, ii = this.molecules[0].atoms.length; i < ii; i++) {\n          var a = this.molecules[0].atoms[i];\n          a.isHover = false;\n\n          if (a.assigned && (closest === undefined || e.p.distance(a) < e.p.distance(closest))) {\n            closest = a;\n          }\n        }\n\n        spectrum.hovered = undefined;\n\n        if (e.p.distance(closest) < 20) {\n          for (var i = 0, ii = closest.assigned.as.length; i < ii; i++) {\n            closest.assigned.as[i].isHover = true;\n          }\n\n          scanvas.spectrum.hovered = closest.assigned;\n        }\n\n        this.repaint();\n        scanvas.repaint();\n      }\n    };\n\n    mcanvas.touchmove = mcanvas.mousemove;\n\n    mcanvas.drawChildExtras = function (ctx, specs) {\n      if (this.molecules.length !== 0) {\n        for (var i = 0, ii = this.molecules[0].atoms.length; i < ii; i++) {\n          this.molecules[0].atoms[i].drawDecorations(ctx, specs);\n        }\n      }\n    };\n\n    var scanvas = new c.ObserverCanvas(id + '_spectrum', 400, 200);\n    scanvas.specs.plots_showYAxis = false;\n    scanvas.specs.plots_flipXAxis = true;\n\n    scanvas.mouseout = function (e) {\n      if (this.spectrum && this.spectrum.assignments) {\n        for (var i = 0, ii = mcanvas.molecules[0].atoms.length; i < ii; i++) {\n          mcanvas.molecules[0].atoms[i].isHover = false;\n        }\n\n        this.spectrum.hovered = undefined;\n        mcanvas.repaint();\n        this.repaint();\n      }\n    };\n\n    scanvas.touchend = scanvas.mouseout;\n\n    scanvas.mousemove = function (e) {\n      if (this.spectrum && this.spectrum.assignments) {\n        var closest = undefined;\n\n        for (var i = 0, ii = mcanvas.molecules[0].atoms.length; i < ii; i++) {\n          mcanvas.molecules[0].atoms[i].isHover = false;\n        }\n\n        this.spectrum.hovered = undefined;\n\n        for (var i = 0, ii = this.spectrum.assignments.length; i < ii; i++) {\n          var a = this.spectrum.assignments[i];\n\n          if (closest === undefined || Math.abs(this.spectrum.getTransformedX(a.x, this.specs, this.spectrum.memory.width, this.spectrum.memory.offsetLeft) - e.p.x) < Math.abs(this.spectrum.getTransformedX(closest.x, this.specs, this.spectrum.memory.width, this.spectrum.memory.offsetLeft) - e.p.x)) {\n            closest = a;\n          }\n        }\n\n        if (Math.abs(this.spectrum.getTransformedX(closest.x, this.specs, this.spectrum.memory.width, this.spectrum.memory.offsetLeft) - e.p.x) < 20) {\n          for (var i = 0, ii = closest.as.length; i < ii; i++) {\n            closest.as[i].isHover = true;\n          }\n\n          this.spectrum.hovered = closest;\n        }\n\n        mcanvas.repaint();\n        this.repaint();\n      }\n    };\n\n    scanvas.touchmove = scanvas.mousemove;\n\n    scanvas.drawChildExtras = function (ctx) {\n      if (this.spectrum && this.spectrum.hovered) {\n        var x = this.spectrum.getTransformedX(this.spectrum.hovered.x, scanvas.specs, this.spectrum.memory.width, this.spectrum.memory.offsetLeft);\n\n        if (x >= this.spectrum.memory.offsetLeft && x < this.spectrum.memory.width) {\n          ctx.save();\n          ctx.strokeStyle = '#885110';\n          ctx.lineWidth = 3;\n          ctx.beginPath();\n          ctx.moveTo(x, this.spectrum.memory.height - this.spectrum.memory.offsetBottom);\n          ctx.lineTo(x, this.spectrum.getTransformedY(this.spectrum.hovered.y, scanvas.specs, this.spectrum.memory.height, this.spectrum.memory.offsetBottom, this.spectrum.memory.offsetTop));\n          ctx.stroke();\n          ctx.restore();\n        }\n      }\n    };\n\n    if (spectrum) {\n      scanvas.loadSpectrum(spectrum);\n\n      if (spectrum.molecule) {\n        mcanvas.loadMolecule(spectrum.molecule);\n      }\n    }\n\n    return [mcanvas, scanvas];\n  }; // shortcuts\n\n\n  var interpreter = new io.JCAMPInterpreter();\n  interpreter.convertHZ2PPM = true;\n\n  c.readJCAMP = function (content) {\n    return interpreter.read(content);\n  };\n})(ChemDoodle, ChemDoodle.extensions, ChemDoodle.io, ChemDoodle.structures, ChemDoodle.lib.jQuery);\n\n(function (c, io, structures, undefined) {\n  'use strict';\n\n  io.RXNInterpreter = function () {};\n\n  var _ = io.RXNInterpreter.prototype = new io._Interpreter();\n\n  _.read = function (content, multiplier) {\n    if (!multiplier) {\n      multiplier = c.default_bondLength_2D;\n    }\n\n    var molecules = [];\n    var line;\n\n    if (!content) {\n      molecules.push(new structures.Molecule());\n      line = new structures.d2.Line(new structures.Point(-20, 0), new structures.Point(20, 0));\n    } else {\n      var contentTokens = content.split('$MOL\\n');\n      var headerTokens = contentTokens[0].split('\\n');\n      var counts = headerTokens[4];\n      var numReactants = parseInt(counts.substring(0, 3));\n      var numProducts = parseInt(counts.substring(3, 6));\n      var currentMolecule = 1;\n      var start = 0;\n\n      for (var i = 0, ii = numReactants + numProducts; i < ii; i++) {\n        molecules[i] = c.readMOL(contentTokens[currentMolecule], multiplier);\n        var b = molecules[i].getBounds();\n        var width = b.maxX - b.minX;\n        start -= width + 40;\n        currentMolecule++;\n      }\n\n      for (var i = 0, ii = numReactants; i < ii; i++) {\n        var b = molecules[i].getBounds();\n        var width = b.maxX - b.minX;\n        var center = molecules[i].getCenter();\n\n        for (var j = 0, jj = molecules[i].atoms.length; j < jj; j++) {\n          var a = molecules[i].atoms[j];\n          a.x += start + width / 2 - center.x;\n          a.y -= center.y;\n        }\n\n        start += width + 40;\n      }\n\n      line = new structures.d2.Line(new structures.Point(start, 0), new structures.Point(start + 40, 0));\n      start += 80;\n\n      for (var i = numReactants, ii = numReactants + numProducts; i < ii; i++) {\n        var b = molecules[i].getBounds();\n        var width = b.maxX - b.minX;\n        var center = molecules[i].getCenter();\n\n        for (var j = 0; j < molecules[i].atoms.length; j++) {\n          var a = molecules[i].atoms[j];\n          a.x += start + width / 2 - center.x;\n          a.y -= center.y;\n        }\n\n        start += width + 40;\n      }\n    }\n\n    line.arrowType = structures.d2.Line.ARROW_SYNTHETIC;\n    return {\n      'molecules': molecules,\n      'shapes': [line]\n    };\n  };\n\n  _.write = function (mols, shapes) {\n    var molecules = [[], []];\n    var ps = undefined;\n\n    if (!mols || !shapes) {\n      return;\n    }\n\n    for (i = 0, ii = shapes.length; i < ii; i++) {\n      if (shapes[i] instanceof structures.d2.Line) {\n        ps = shapes[i].getPoints();\n        break;\n      }\n    }\n\n    if (!ps) {\n      return '';\n    }\n\n    for (var i = 0, ii = mols.length; i < ii; i++) {\n      var center = mols[i].getCenter();\n\n      if (center.x < ps[1].x) {\n        molecules[0].push(mols[i]);\n      } else {\n        molecules[1].push(mols[i]);\n      }\n    }\n\n    var sb = [];\n    sb.push('$RXN\\nReaction from ChemDoodle Web Components\\n\\nhttp://www.ichemlabs.com\\n');\n    sb.push(this.fit(molecules[0].length.toString(), 3));\n    sb.push(this.fit(molecules[1].length.toString(), 3));\n    sb.push('\\n');\n\n    for (var i = 0; i < 2; i++) {\n      for (var j = 0, jj = molecules[i].length; j < jj; j++) {\n        sb.push('$MOL\\n');\n        sb.push(c.writeMOL(molecules[i][j]));\n        sb.push('\\n');\n      }\n    }\n\n    return sb.join('');\n  }; // shortcuts\n\n\n  var interpreter = new io.RXNInterpreter();\n\n  c.readRXN = function (content, multiplier) {\n    return interpreter.read(content, multiplier);\n  };\n\n  c.writeRXN = function (mols, shapes) {\n    return interpreter.write(mols, shapes);\n  };\n})(ChemDoodle, ChemDoodle.io, ChemDoodle.structures);\n\n(function (c, ELEMENT, SYMBOLS, io, structures, trim, undefined) {\n  'use strict';\n\n  io.XYZInterpreter = function () {};\n\n  var _ = io.XYZInterpreter.prototype = new io._Interpreter();\n\n  _.deduceCovalentBonds = true;\n\n  _.read = function (content) {\n    var molecule = new structures.Molecule();\n\n    if (!content) {\n      return molecule;\n    }\n\n    var lines = content.split('\\n');\n    var numAtoms = parseInt(trim(lines[0]));\n\n    for (var i = 0; i < numAtoms; i++) {\n      var line = lines[i + 2];\n      var tokens = line.split(/\\s+/g);\n      molecule.atoms[i] = new structures.Atom(isNaN(tokens[0]) ? tokens[0] : SYMBOLS[parseInt(tokens[0]) - 1], parseFloat(tokens[1]), parseFloat(tokens[2]), parseFloat(tokens[3]));\n    }\n\n    if (this.deduceCovalentBonds) {\n      new c.informatics.BondDeducer().deduceCovalentBonds(molecule, 1);\n    }\n\n    return molecule;\n  }; // shortcuts\n\n\n  var interpreter = new io.XYZInterpreter();\n\n  c.readXYZ = function (content) {\n    return interpreter.read(content);\n  };\n})(ChemDoodle, ChemDoodle.ELEMENT, ChemDoodle.SYMBOLS, ChemDoodle.io, ChemDoodle.structures, ChemDoodle.lib.jQuery.trim);\n\nChemDoodle.monitor = _ChemDoodle_monitor__WEBPACK_IMPORTED_MODULE_8__[\"default\"];\n\n(function (c, extensions, m, undefined) {\n  'use strict';\n\n  c.SeekerCanvas = function (id, width, height, seekType) {\n    if (id) {\n      this.create(id, width, height);\n    }\n\n    this.seekType = seekType;\n  };\n\n  var _ = c.SeekerCanvas.prototype = new c._SpectrumCanvas();\n\n  _.superRepaint = _.innerRepaint;\n\n  _.innerRepaint = function (ctx) {\n    this.superRepaint(ctx);\n\n    if (this.spectrum && this.spectrum.data.length > 0 && this.p) {\n      // set up coords\n      var renderP;\n      var internalP;\n\n      if (this.seekType === c.SeekerCanvas.SEEK_POINTER) {\n        renderP = this.p;\n        internalP = this.spectrum.getInternalCoordinates(renderP.x, renderP.y);\n      } else if (this.seekType === c.SeekerCanvas.SEEK_PLOT || this.seekType === c.SeekerCanvas.SEEK_PEAK) {\n        internalP = this.seekType === c.SeekerCanvas.SEEK_PLOT ? this.spectrum.getClosestPlotInternalCoordinates(this.p.x) : this.spectrum.getClosestPeakInternalCoordinates(this.p.x);\n\n        if (!internalP) {\n          return;\n        }\n\n        renderP = {\n          x: this.spectrum.getTransformedX(internalP.x, this.specs, this.width, this.spectrum.memory.offsetLeft),\n          y: this.spectrum.getTransformedY(internalP.y / 100, this.specs, this.height, this.spectrum.memory.offsetBottom, this.spectrum.memory.offsetTop)\n        };\n      } // draw point\n\n\n      ctx.fillStyle = 'white';\n      ctx.strokeStyle = this.specs.plots_color;\n      ctx.lineWidth = this.specs.plots_width;\n      ctx.beginPath();\n      ctx.arc(renderP.x, renderP.y, 3, 0, m.PI * 2, false);\n      ctx.fill();\n      ctx.stroke(); // draw internal coordinates\n\n      ctx.font = extensions.getFontString(this.specs.text_font_size, this.specs.text_font_families);\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'bottom';\n      var s = 'x:' + internalP.x.toFixed(3) + ', y:' + internalP.y.toFixed(3);\n      var x = renderP.x + 3;\n      var w = ctx.measureText(s).width;\n\n      if (x + w > this.width - 2) {\n        x -= 6 + w;\n      }\n\n      var y = renderP.y;\n\n      if (y - this.specs.text_font_size - 2 < 0) {\n        y += this.specs.text_font_size;\n      }\n\n      ctx.fillRect(x, y - this.specs.text_font_size, w, this.specs.text_font_size);\n      ctx.fillStyle = 'black';\n      ctx.fillText(s, x, y);\n    }\n  };\n\n  _.mouseout = function (e) {\n    this.p = undefined;\n    this.repaint();\n  };\n\n  _.mousemove = function (e) {\n    this.p = {\n      x: e.p.x - 2,\n      y: e.p.y - 3\n    };\n    this.repaint();\n  };\n\n  _.touchstart = function (e) {\n    this.mousemove(e);\n  };\n\n  _.touchmove = function (e) {\n    this.mousemove(e);\n  };\n\n  _.touchend = function (e) {\n    this.mouseout(e);\n  };\n\n  c.SeekerCanvas.SEEK_POINTER = 'pointer';\n  c.SeekerCanvas.SEEK_PLOT = 'plot';\n  c.SeekerCanvas.SEEK_PEAK = 'peak';\n})(ChemDoodle, ChemDoodle.extensions, Math);\n\n(function (c, iChemLabs, q, document, undefined) {\n  'use strict';\n\n  c.MolGrabberCanvas3D = function (id, width, height) {\n    if (id) {\n      this.create(id, width, height);\n    }\n\n    var sb = [];\n    sb.push('<br><input type=\"text\" id=\"');\n    sb.push(id);\n    sb.push('_query\" size=\"32\" value=\"\" />');\n    sb.push('<br><nobr>');\n    sb.push('<select id=\"');\n    sb.push(id);\n    sb.push('_select\">'); // sb.push('<option value=\"chemexper\">ChemExper');\n    // sb.push('<option value=\"chemspider\">ChemSpider');\n\n    sb.push('<option value=\"pubchem\" selected>PubChem');\n    sb.push('</select>');\n    sb.push('<button id=\"');\n    sb.push(id);\n    sb.push('_submit\">Show Molecule</button>');\n    sb.push('</nobr>');\n    document.writeln(sb.join(''));\n    var self = this;\n    q('#' + id + '_submit').click(function () {\n      self.search();\n    });\n    q('#' + id + '_query').keypress(function (e) {\n      if (e.which === 13) {\n        self.search();\n      }\n    });\n  };\n\n  var _ = c.MolGrabberCanvas3D.prototype = new c._Canvas3D();\n\n  _.setSearchTerm = function (term) {\n    q('#' + this.id + '_query').val(term);\n    this.search();\n  };\n\n  _.search = function () {\n    var self = this;\n    iChemLabs.getMoleculeFromDatabase(q('#' + this.id + '_query').val(), {\n      database: q('#' + this.id + '_select').val(),\n      dimension: 3\n    }, function (mol) {\n      self.loadMolecule(mol);\n    });\n  };\n})(ChemDoodle, ChemDoodle.iChemLabs, ChemDoodle.lib.jQuery, document);\n\n(function (c, m, m4, undefined) {\n  'use strict'; // keep these declaration outside the loop to avoid overhead\n\n  var matrix = [];\n  var xAxis = [1, 0, 0];\n  var yAxis = [0, 1, 0];\n  var zAxis = [0, 0, 1];\n\n  c.RotatorCanvas3D = function (id, width, height) {\n    if (id) {\n      this.create(id, width, height);\n    }\n  };\n\n  var _ = c.RotatorCanvas3D.prototype = new c._Canvas3D();\n\n  _.timeout = 33;\n  var increment = m.PI / 15;\n  _.xIncrement = increment;\n  _.yIncrement = increment;\n  _.zIncrement = increment;\n  _.startAnimation = c._AnimatorCanvas.prototype.startAnimation;\n  _.stopAnimation = c._AnimatorCanvas.prototype.stopAnimation;\n  _.isRunning = c._AnimatorCanvas.prototype.isRunning;\n  _.dblclick = c.RotatorCanvas.prototype.dblclick;\n  _.mousedown = undefined;\n  _.rightmousedown = undefined;\n  _.drag = undefined;\n  _.mousewheel = undefined;\n\n  _.nextFrame = function (delta) {\n    if (this.molecules.length === 0 && this.shapes.length === 0) {\n      this.stopAnimation();\n      return;\n    }\n\n    m4.identity(matrix);\n    var change = delta / 1000;\n    m4.rotate(matrix, this.xIncrement * change, xAxis);\n    m4.rotate(matrix, this.yIncrement * change, yAxis);\n    m4.rotate(matrix, this.zIncrement * change, zAxis);\n    m4.multiply(this.rotationMatrix, matrix);\n  };\n})(ChemDoodle, Math, ChemDoodle.lib.mat4);\n\n(function (c, undefined) {\n  'use strict';\n\n  c.TransformCanvas3D = function (id, width, height) {\n    if (id) {\n      this.create(id, width, height);\n    }\n  };\n\n  c.TransformCanvas3D.prototype = new c._Canvas3D();\n})(ChemDoodle);\n\n(function (c, undefined) {\n  'use strict';\n\n  c.ViewerCanvas3D = function (id, width, height) {\n    if (id) {\n      this.create(id, width, height);\n    }\n  };\n\n  var _ = c.ViewerCanvas3D.prototype = new c._Canvas3D();\n\n  _.mousedown = undefined;\n  _.rightmousedown = undefined;\n  _.drag = undefined;\n  _.mousewheel = undefined;\n})(ChemDoodle);\n\n(function (c, extensions, math, document, undefined) {\n  'use strict';\n\n  function PeriodicCell(element, x, y, dimension) {\n    this.element = element;\n    this.x = x;\n    this.y = y;\n    this.dimension = dimension;\n    this.allowMultipleSelections = false;\n  }\n\n  c.PeriodicTableCanvas = function (id, cellDimension) {\n    this.padding = 5;\n\n    if (id) {\n      this.create(id, cellDimension * 18 + this.padding * 2, cellDimension * 10 + this.padding * 2);\n    }\n\n    this.cellDimension = cellDimension ? cellDimension : 20;\n    this.setupTable();\n    this.repaint();\n  };\n\n  var _ = c.PeriodicTableCanvas.prototype = new c._Canvas();\n\n  _.loadMolecule = undefined;\n  _.getMolecule = undefined;\n\n  _.getHoveredElement = function () {\n    if (this.hovered) {\n      return this.hovered.element;\n    }\n\n    return undefined;\n  };\n\n  _.innerRepaint = function (ctx) {\n    for (var i = 0, ii = this.cells.length; i < ii; i++) {\n      this.drawCell(ctx, this.specs, this.cells[i]);\n    }\n\n    if (this.hovered) {\n      this.drawCell(ctx, this.specs, this.hovered);\n    }\n\n    if (this.selected) {\n      this.drawCell(ctx, this.specs, this.selected);\n    }\n  };\n\n  _.setupTable = function () {\n    this.cells = [];\n    var x = this.padding;\n    var y = this.padding;\n    var count = 0;\n\n    for (var i = 0, ii = c.SYMBOLS.length; i < ii; i++) {\n      if (count === 18) {\n        count = 0;\n        y += this.cellDimension;\n        x = this.padding;\n      }\n\n      var e = c.ELEMENT[c.SYMBOLS[i]];\n\n      if (e.atomicNumber === 2) {\n        x += 16 * this.cellDimension;\n        count += 16;\n      } else if (e.atomicNumber === 5 || e.atomicNumber === 13) {\n        x += 10 * this.cellDimension;\n        count += 10;\n      }\n\n      if ((e.atomicNumber < 58 || e.atomicNumber > 71 && e.atomicNumber < 90 || e.atomicNumber > 103) && e.atomicNumber <= 118) {\n        this.cells.push(new PeriodicCell(e, x, y, this.cellDimension));\n        x += this.cellDimension;\n        count++;\n      }\n    }\n\n    y += 2 * this.cellDimension;\n    x = 3 * this.cellDimension + this.padding;\n\n    for (var i = 57; i < 104; i++) {\n      var e = c.ELEMENT[c.SYMBOLS[i]];\n\n      if (e.atomicNumber === 90) {\n        y += this.cellDimension;\n        x = 3 * this.cellDimension + this.padding;\n      }\n\n      if (e.atomicNumber >= 58 && e.atomicNumber <= 71 || e.atomicNumber >= 90 && e.atomicNumber <= 103) {\n        this.cells.push(new PeriodicCell(e, x, y, this.cellDimension));\n        x += this.cellDimension;\n      }\n    }\n  };\n\n  _.drawCell = function (ctx, specs, cell) {\n    var radgrad = ctx.createRadialGradient(cell.x + cell.dimension / 3, cell.y + cell.dimension / 3, cell.dimension * 1.5, cell.x + cell.dimension / 3, cell.y + cell.dimension / 3, cell.dimension / 10);\n    radgrad.addColorStop(0, '#000000');\n    radgrad.addColorStop(.7, cell.element.jmolColor);\n    radgrad.addColorStop(1, '#FFFFFF');\n    ctx.fillStyle = radgrad;\n    extensions.contextRoundRect(ctx, cell.x, cell.y, cell.dimension, cell.dimension, cell.dimension / 8);\n\n    if (cell === this.hovered || cell === this.selected || cell.selected) {\n      ctx.lineWidth = 2;\n      ctx.strokeStyle = '#c10000';\n      ctx.stroke();\n      ctx.fillStyle = 'white';\n    }\n\n    ctx.fill();\n    ctx.font = extensions.getFontString(specs.text_font_size, specs.text_font_families);\n    ctx.fillStyle = specs.text_color;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText(cell.element.symbol, cell.x + cell.dimension / 2, cell.y + cell.dimension / 2);\n  };\n\n  _.click = function (e) {\n    if (this.hovered) {\n      if (this.allowMultipleSelections) {\n        this.hovered.selected = !this.hovered.selected;\n      } else {\n        this.selected = this.hovered;\n      }\n\n      this.repaint();\n    }\n  };\n\n  _.touchstart = function (e) {\n    // try to hover an element\n    this.mousemove(e);\n  };\n\n  _.mousemove = function (e) {\n    var x = e.p.x;\n    var y = e.p.y;\n    this.hovered = undefined;\n\n    for (var i = 0, ii = this.cells.length; i < ii; i++) {\n      var c = this.cells[i];\n\n      if (math.isBetween(x, c.x, c.x + c.dimension) && math.isBetween(y, c.y, c.y + c.dimension)) {\n        this.hovered = c;\n        break;\n      }\n    }\n\n    this.repaint();\n  };\n\n  _.mouseout = function (e) {\n    this.hovered = undefined;\n    this.repaint();\n  };\n})(ChemDoodle, ChemDoodle.extensions, ChemDoodle.math, document);\n\n(function (io, document, window, undefined) {\n  'use strict';\n\n  io.png = {};\n\n  io.png.string = function (canvas) {\n    // this will not work for WebGL canvases in some browsers\n    // to fix that you need to set the \"preserveDrawingBuffer\" to true when\n    // creating the WebGL context\n    // note that this will cause performance issues on some platforms and is\n    // therefore not done by default\n    return document.getElementById(canvas.id).toDataURL('image/png');\n  };\n\n  io.png.open = function (canvas) {\n    window.open(this.string(canvas));\n  };\n})(ChemDoodle.io, document, window);\n\n(function (io, q, undefined) {\n  'use strict';\n\n  io.file = {}; // this function will only work with files from the same origin it is being\n  // called from, unless the receiving server supports XHR2\n\n  io.file.content = function (url, callback) {\n    q.get(url, '', callback);\n  };\n})(ChemDoodle.io, ChemDoodle.lib.jQuery);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodleWeb-unpacked.js\n");

/***/ })

/******/ })["ChemDoodle"];
});