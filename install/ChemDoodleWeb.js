(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("ChemDoodle", [], factory);
	else if(typeof exports === 'object')
		exports["ChemDoodle"] = factory();
	else
		root["ChemDoodle"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/ChemDoodleWeb-unpacked.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/jquery-mousewheel/jquery.mousewheel.js":
/*!*************************************************************!*\
  !*** ./node_modules/jquery-mousewheel/jquery.mousewheel.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery Mousewheel 3.1.13\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n */\n\n(function (factory) {\n    if ( true ) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(function ($) {\n\n    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],\n        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?\n                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],\n        slice  = Array.prototype.slice,\n        nullLowestDeltaTimeout, lowestDelta;\n\n    if ( $.event.fixHooks ) {\n        for ( var i = toFix.length; i; ) {\n            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;\n        }\n    }\n\n    var special = $.event.special.mousewheel = {\n        version: '3.1.12',\n\n        setup: function() {\n            if ( this.addEventListener ) {\n                for ( var i = toBind.length; i; ) {\n                    this.addEventListener( toBind[--i], handler, false );\n                }\n            } else {\n                this.onmousewheel = handler;\n            }\n            // Store the line height and page height for this particular element\n            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));\n            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));\n        },\n\n        teardown: function() {\n            if ( this.removeEventListener ) {\n                for ( var i = toBind.length; i; ) {\n                    this.removeEventListener( toBind[--i], handler, false );\n                }\n            } else {\n                this.onmousewheel = null;\n            }\n            // Clean up the data we added to the element\n            $.removeData(this, 'mousewheel-line-height');\n            $.removeData(this, 'mousewheel-page-height');\n        },\n\n        getLineHeight: function(elem) {\n            var $elem = $(elem),\n                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();\n            if (!$parent.length) {\n                $parent = $('body');\n            }\n            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;\n        },\n\n        getPageHeight: function(elem) {\n            return $(elem).height();\n        },\n\n        settings: {\n            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below\n            normalizeOffset: true  // calls getBoundingClientRect for each event\n        }\n    };\n\n    $.fn.extend({\n        mousewheel: function(fn) {\n            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');\n        },\n\n        unmousewheel: function(fn) {\n            return this.unbind('mousewheel', fn);\n        }\n    });\n\n\n    function handler(event) {\n        var orgEvent   = event || window.event,\n            args       = slice.call(arguments, 1),\n            delta      = 0,\n            deltaX     = 0,\n            deltaY     = 0,\n            absDelta   = 0,\n            offsetX    = 0,\n            offsetY    = 0;\n        event = $.event.fix(orgEvent);\n        event.type = 'mousewheel';\n\n        // Old school scrollwheel delta\n        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }\n        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }\n        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }\n        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }\n\n        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event\n        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {\n            deltaX = deltaY * -1;\n            deltaY = 0;\n        }\n\n        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy\n        delta = deltaY === 0 ? deltaX : deltaY;\n\n        // New school wheel delta (wheel event)\n        if ( 'deltaY' in orgEvent ) {\n            deltaY = orgEvent.deltaY * -1;\n            delta  = deltaY;\n        }\n        if ( 'deltaX' in orgEvent ) {\n            deltaX = orgEvent.deltaX;\n            if ( deltaY === 0 ) { delta  = deltaX * -1; }\n        }\n\n        // No change actually happened, no reason to go any further\n        if ( deltaY === 0 && deltaX === 0 ) { return; }\n\n        // Need to convert lines and pages to pixels if we aren't already in pixels\n        // There are three delta modes:\n        //   * deltaMode 0 is by pixels, nothing to do\n        //   * deltaMode 1 is by lines\n        //   * deltaMode 2 is by pages\n        if ( orgEvent.deltaMode === 1 ) {\n            var lineHeight = $.data(this, 'mousewheel-line-height');\n            delta  *= lineHeight;\n            deltaY *= lineHeight;\n            deltaX *= lineHeight;\n        } else if ( orgEvent.deltaMode === 2 ) {\n            var pageHeight = $.data(this, 'mousewheel-page-height');\n            delta  *= pageHeight;\n            deltaY *= pageHeight;\n            deltaX *= pageHeight;\n        }\n\n        // Store lowest absolute delta to normalize the delta values\n        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );\n\n        if ( !lowestDelta || absDelta < lowestDelta ) {\n            lowestDelta = absDelta;\n\n            // Adjust older deltas if necessary\n            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {\n                lowestDelta /= 40;\n            }\n        }\n\n        // Adjust older deltas if necessary\n        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {\n            // Divide all the things by 40!\n            delta  /= 40;\n            deltaX /= 40;\n            deltaY /= 40;\n        }\n\n        // Get a whole, normalized value for the deltas\n        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);\n        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);\n        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);\n\n        // Normalise offsetX and offsetY properties\n        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {\n            var boundingRect = this.getBoundingClientRect();\n            offsetX = event.clientX - boundingRect.left;\n            offsetY = event.clientY - boundingRect.top;\n        }\n\n        // Add information to the event object\n        event.deltaX = deltaX;\n        event.deltaY = deltaY;\n        event.deltaFactor = lowestDelta;\n        event.offsetX = offsetX;\n        event.offsetY = offsetY;\n        // Go ahead and set deltaMode to 0 since we converted to pixels\n        // Although this is a little odd since we overwrite the deltaX/Y\n        // properties with normalized deltas.\n        event.deltaMode = 0;\n\n        // Add event and delta to the front of the arguments\n        args.unshift(event, delta, deltaX, deltaY);\n\n        // Clearout lowestDelta after sometime to better\n        // handle multiple device types that give different\n        // a different lowestDelta\n        // Ex: trackpad = 3 and mouse wheel = 120\n        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }\n        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);\n\n        return ($.event.dispatch || $.event.handle).apply(this, args);\n    }\n\n    function nullLowestDelta() {\n        lowestDelta = null;\n    }\n\n    function shouldAdjustOldDeltas(orgEvent, absDelta) {\n        // If this is an older event and the delta is divisable by 120,\n        // then we are assuming that the browser is treating this as an\n        // older mouse wheel event and that we should divide the deltas\n        // by 40 to try and get a more usable deltaFactor.\n        // Side note, this actually impacts the reported scroll distance\n        // in older browsers and can cause scrolling to be slower than native.\n        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.\n        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;\n    }\n\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery-mousewheel/jquery.mousewheel.js\n");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v2.2.4\n * http://jquery.com/\n *\n * Includes Sizzle.js\n * http://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-05-20T17:23Z\n */\n\n(function( global, factory ) {\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n}(typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Support: Firefox 18+\n// Can't be in strict mode, several libs including ASP.NET trace\n// the stack via arguments.caller.callee and Firefox dies if\n// you try to trace through \"use strict\" call chains. (#13335)\n//\"use strict\";\nvar arr = [];\n\nvar document = window.document;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar support = {};\n\n\n\nvar\n\tversion = \"2.2.4\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android<4.1\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\trdashAlpha = /-([\\da-z])/gi,\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function( all, letter ) {\n\t\treturn letter.toUpperCase();\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// Start with an empty selector\n\tselector: \"\",\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\t\treturn num != null ?\n\n\t\t\t// Return just the one element from the set\n\t\t\t( num < 0 ? this[ num + this.length ] : this[ num ] ) :\n\n\t\t\t// Return all the elements in a clean array\n\t\t\tslice.call( this );\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\t\tret.context = this.context;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = jQuery.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && jQuery.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisFunction: function( obj ) {\n\t\treturn jQuery.type( obj ) === \"function\";\n\t},\n\n\tisArray: Array.isArray,\n\n\tisWindow: function( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t},\n\n\tisNumeric: function( obj ) {\n\n\t\t// parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t// adding 1 corrects loss of precision from parseFloat (#15100)\n\t\tvar realStringObj = obj && obj.toString();\n\t\treturn !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;\n\t},\n\n\tisPlainObject: function( obj ) {\n\t\tvar key;\n\n\t\t// Not plain objects:\n\t\t// - Any object or value whose internal [[Class]] property is not \"[object Object]\"\n\t\t// - DOM nodes\n\t\t// - window\n\t\tif ( jQuery.type( obj ) !== \"object\" || obj.nodeType || jQuery.isWindow( obj ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Not own constructor property must be Object\n\t\tif ( obj.constructor &&\n\t\t\t\t!hasOwn.call( obj, \"constructor\" ) &&\n\t\t\t\t!hasOwn.call( obj.constructor.prototype || {}, \"isPrototypeOf\" ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t// if last one is own, then all properties are own\n\t\tfor ( key in obj ) {}\n\n\t\treturn key === undefined || hasOwn.call( obj, key );\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\ttype: function( obj ) {\n\t\tif ( obj == null ) {\n\t\t\treturn obj + \"\";\n\t\t}\n\n\t\t// Support: Android<4.0, iOS<6 (functionish RegExp)\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\t\ttypeof obj;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tvar script,\n\t\t\tindirect = eval;\n\n\t\tcode = jQuery.trim( code );\n\n\t\tif ( code ) {\n\n\t\t\t// If the code includes a valid, prologue position\n\t\t\t// strict mode pragma, execute code by injecting a\n\t\t\t// script tag into the document.\n\t\t\tif ( code.indexOf( \"use strict\" ) === 1 ) {\n\t\t\t\tscript = document.createElement( \"script\" );\n\t\t\t\tscript.text = code;\n\t\t\t\tdocument.head.appendChild( script ).parentNode.removeChild( script );\n\t\t\t} else {\n\n\t\t\t\t// Otherwise, avoid the DOM node creation, insertion\n\t\t\t\t// and removal by using an indirect global eval\n\n\t\t\t\tindirect( code );\n\t\t\t}\n\t\t}\n\t},\n\n\t// Convert dashed to camelCase; used by the css and data modules\n\t// Support: IE9-11+\n\t// Microsoft forgot to hump their vendor prefix (#9572)\n\tcamelCase: function( string ) {\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n\t},\n\n\tnodeName: function( elem, name ) {\n\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android<4.1\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// Bind a function to a context, optionally partially applying any\n\t// arguments.\n\tproxy: function( fn, context ) {\n\t\tvar tmp, args, proxy;\n\n\t\tif ( typeof context === \"string\" ) {\n\t\t\ttmp = fn[ context ];\n\t\t\tcontext = fn;\n\t\t\tfn = tmp;\n\t\t}\n\n\t\t// Quick check to determine if target is callable, in the spec\n\t\t// this throws a TypeError, but we will just return undefined.\n\t\tif ( !jQuery.isFunction( fn ) ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Simulated bind\n\t\targs = slice.call( arguments, 2 );\n\t\tproxy = function() {\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t\t};\n\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\treturn proxy;\n\t},\n\n\tnow: Date.now,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\n// JSHint would error on this code due to the Symbol not being defined in ES5.\n// Defining this global in .jshintrc would create a danger of using the global\n// unguarded in another place, it seems safer to just disable JSHint for these\n// three lines.\n/* jshint ignore: start */\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n/* jshint ignore: end */\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: iOS 8.2 (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = jQuery.type( obj );\n\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.2.1\n * http://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2015-10-17\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// General-purpose constants\n\tMAX_NEGATIVE = 1 << 31,\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// http://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\trescape = /'|\\\\/g,\n\n\t// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t};\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, nidselect, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rescape, \"\\\\$&\" );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\tnidselect = ridentifier.test( nid ) ? \"#\" + nid : \"[id='\" + nid + \"']\";\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = nidselect + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created div and expects a boolean result\n */\nfunction assert( fn ) {\n\tvar div = document.createElement(\"div\");\n\n\ttry {\n\t\treturn !!fn( div );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( div.parentNode ) {\n\t\t\tdiv.parentNode.removeChild( div );\n\t\t}\n\t\t// release memory in IE\n\t\tdiv = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\t( ~b.sourceIndex || MAX_NEGATIVE ) -\n\t\t\t( ~a.sourceIndex || MAX_NEGATIVE );\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, parent,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( (parent = document.defaultView) && parent.top !== parent ) {\n\t\t// Support: IE 11\n\t\tif ( parent.addEventListener ) {\n\t\t\tparent.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( parent.attachEvent ) {\n\t\t\tparent.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( div ) {\n\t\tdiv.className = \"i\";\n\t\treturn !div.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( div ) {\n\t\tdiv.appendChild( document.createComment(\"\") );\n\t\treturn !div.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( div ) {\n\t\tdocElem.appendChild( div ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID find and filter\n\tif ( support.getById ) {\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar m = context.getElementById( id );\n\t\t\t\treturn m ? [ m ] : [];\n\t\t\t}\n\t\t};\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t} else {\n\t\t// Support: IE6/7\n\t\t// getElementById is not reliable as a find shortcut\n\t\tdelete Expr.find[\"ID\"];\n\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See http://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( div ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// http://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( div ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( div.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !div.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !div.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !div.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibing-combinator selector` fails\n\t\t\tif ( !div.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( div ) {\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tdiv.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( div.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !div.querySelectorAll(\":enabled\").length ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tdiv.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( div ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( div, \"div\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( div, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": function( elem ) {\n\t\t\treturn elem.disabled === false;\n\t\t},\n\n\t\t\"disabled\": function( elem ) {\n\t\t\treturn elem.disabled === true;\n\t\t},\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tcheckNonElements = base && dir === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( (oldCache = uniqueCache[ dir ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ dir ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tsupport.getById && context.nodeType === 9 && documentIsHTML &&\n\t\t\t\tExpr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( div1 ) {\n\t// Should return 1, but returns 4 (following)\n\treturn div1.compareDocumentPosition( document.createElement(\"div\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( div ) {\n\tdiv.innerHTML = \"<a href='#'></a>\";\n\treturn div.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( div ) {\n\tdiv.innerHTML = \"<input/>\";\n\tdiv.firstChild.setAttribute( \"value\", \"\" );\n\treturn div.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( div ) {\n\treturn div.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = ( /^<([\\w-]+)\\s*\\/?>(?:<\\/\\1>|)$/ );\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( jQuery.isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\t/* jshint -W018 */\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\n\t}\n\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\n\t}\n\n\tif ( typeof qualifier === \"string\" ) {\n\t\tif ( risSimple.test( qualifier ) ) {\n\t\t\treturn jQuery.filter( qualifier, elements, not );\n\t\t}\n\n\t\tqualifier = jQuery.filter( qualifier, elements );\n\t}\n\n\treturn jQuery.grep( elements, function( elem ) {\n\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t} );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\treturn elems.length === 1 && elem.nodeType === 1 ?\n\t\tjQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :\n\t\tjQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\t\treturn elem.nodeType === 1;\n\t\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i,\n\t\t\tlen = this.length,\n\t\t\tret = [],\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\t// Needed because $( selector, context ) becomes $( context ).find( selector )\n\t\tret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );\n\t\tret.selector = this.selector ? this.selector + \" \" + selector : selector;\n\t\treturn ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\t// Support: Blackberry 4.6\n\t\t\t\t\t// gEBID returns nodes no longer in the document (#6963)\n\t\t\t\t\tif ( elem && elem.parentNode ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.context = document;\n\t\t\t\t\tthis.selector = selector;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis.context = this[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( jQuery.isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\tif ( selector.selector !== undefined ) {\n\t\t\tthis.selector = selector.selector;\n\t\t\tthis.context = selector.context;\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\tpos = rneedsContext.test( selectors ) || typeof selectors !== \"string\" ?\n\t\t\t\tjQuery( selectors, context || this.context ) :\n\t\t\t\t0;\n\n\t\tfor ( ; i < l; i++ ) {\n\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t// Always skip document fragments\n\t\t\t\tif ( cur.nodeType < 11 && ( pos ?\n\t\t\t\t\tpos.index( cur ) > -1 :\n\n\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\treturn elem.contentDocument || jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnotwhite = ( /\\S+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( jQuery.isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && jQuery.type( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, listener list, final state\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ), \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ), \"rejected\" ],\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ) ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\tthen: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];\n\n\t\t\t\t\t\t\t// deferred[ done | fail | progress ] for forwarding actions to newDefer\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis === promise ? newDefer.promise() : this,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Keep pipe for back-compat\n\t\tpromise.pipe = promise.then;\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 3 ];\n\n\t\t\t// promise[ done | fail | progress ] = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add( function() {\n\n\t\t\t\t\t// state = [ resolved | rejected ]\n\t\t\t\t\tstate = stateString;\n\n\t\t\t\t// [ reject_list | resolve_list ].disable; progress_list.lock\n\t\t\t\t}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );\n\t\t\t}\n\n\t\t\t// deferred[ resolve | reject | notify ]\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? promise : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( subordinate /* , ..., subordinateN */ ) {\n\t\tvar i = 0,\n\t\t\tresolveValues = slice.call( arguments ),\n\t\t\tlength = resolveValues.length,\n\n\t\t\t// the count of uncompleted subordinates\n\t\t\tremaining = length !== 1 ||\n\t\t\t\t( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,\n\n\t\t\t// the master Deferred.\n\t\t\t// If resolveValues consist of only a single Deferred, just use that.\n\t\t\tdeferred = remaining === 1 ? subordinate : jQuery.Deferred(),\n\n\t\t\t// Update function for both resolve and progress values\n\t\t\tupdateFunc = function( i, contexts, values ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tcontexts[ i ] = this;\n\t\t\t\t\tvalues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( values === progressValues ) {\n\t\t\t\t\t\tdeferred.notifyWith( contexts, values );\n\t\t\t\t\t} else if ( !( --remaining ) ) {\n\t\t\t\t\t\tdeferred.resolveWith( contexts, values );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tprogressValues, progressContexts, resolveContexts;\n\n\t\t// Add listeners to Deferred subordinates; treat others as resolved\n\t\tif ( length > 1 ) {\n\t\t\tprogressValues = new Array( length );\n\t\t\tprogressContexts = new Array( length );\n\t\t\tresolveContexts = new Array( length );\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {\n\t\t\t\t\tresolveValues[ i ].promise()\n\t\t\t\t\t\t.progress( updateFunc( i, progressContexts, progressValues ) )\n\t\t\t\t\t\t.done( updateFunc( i, resolveContexts, resolveValues ) )\n\t\t\t\t\t\t.fail( deferred.reject );\n\t\t\t\t} else {\n\t\t\t\t\t--remaining;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we're not waiting on anything, resolve the master\n\t\tif ( !remaining ) {\n\t\t\tdeferred.resolveWith( resolveContexts, resolveValues );\n\t\t}\n\n\t\treturn deferred.promise();\n\t}\n} );\n\n\n// The deferred used on DOM ready\nvar readyList;\n\njQuery.fn.ready = function( fn ) {\n\n\t// Add the callback\n\tjQuery.ready.promise().done( fn );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Hold (or release) the ready event\n\tholdReady: function( hold ) {\n\t\tif ( hold ) {\n\t\t\tjQuery.readyWait++;\n\t\t} else {\n\t\t\tjQuery.ready( true );\n\t\t}\n\t},\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\n\t\t// Trigger any bound ready events\n\t\tif ( jQuery.fn.triggerHandler ) {\n\t\t\tjQuery( document ).triggerHandler( \"ready\" );\n\t\t\tjQuery( document ).off( \"ready\" );\n\t\t}\n\t}\n} );\n\n/**\n * The ready event handler and self cleanup method\n */\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\njQuery.ready.promise = function( obj ) {\n\tif ( !readyList ) {\n\n\t\treadyList = jQuery.Deferred();\n\n\t\t// Catch cases where $(document).ready() is called\n\t\t// after the browser event has already occurred.\n\t\t// Support: IE9-10 only\n\t\t// Older IE sometimes signals \"interactive\" too soon\n\t\tif ( document.readyState === \"complete\" ||\n\t\t\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t\t\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\t\t\twindow.setTimeout( jQuery.ready );\n\n\t\t} else {\n\n\t\t\t// Use the handy event callback\n\t\t\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t\t\t// A fallback to window.onload, that will always work\n\t\t\twindow.addEventListener( \"load\", completed );\n\t\t}\n\t}\n\treturn readyList.promise( obj );\n};\n\n// Kick off the DOM ready check even if the user does not\njQuery.ready.promise();\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( jQuery.type( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !jQuery.isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn chainable ?\n\t\telems :\n\n\t\t// Gets\n\t\tbulk ?\n\t\t\tfn.call( elems ) :\n\t\t\tlen ? fn( elems[ 0 ], key ) : emptyGet;\n};\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\t/* jshint -W018 */\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tregister: function( owner, initial ) {\n\t\tvar value = initial || {};\n\n\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t// use plain assignment\n\t\tif ( owner.nodeType ) {\n\t\t\towner[ this.expando ] = value;\n\n\t\t// Otherwise secure it in a non-enumerable, non-writable property\n\t\t// configurability must be true to allow the property to be\n\t\t// deleted with the delete operator\n\t\t} else {\n\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\tvalue: value,\n\t\t\t\twritable: true,\n\t\t\t\tconfigurable: true\n\t\t\t} );\n\t\t}\n\t\treturn owner[ this.expando ];\n\t},\n\tcache: function( owner ) {\n\n\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t// but we should not, see #8335.\n\t\t// Always return an empty object.\n\t\tif ( !acceptData( owner ) ) {\n\t\t\treturn {};\n\t\t}\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ data ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ prop ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\t\t\towner[ this.expando ] && owner[ this.expando ][ key ];\n\t},\n\taccess: function( owner, key, value ) {\n\t\tvar stored;\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\tstored = this.get( owner, key );\n\n\t\t\treturn stored !== undefined ?\n\t\t\t\tstored : this.get( owner, jQuery.camelCase( key ) );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i, name, camel,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key === undefined ) {\n\t\t\tthis.register( owner );\n\n\t\t} else {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( jQuery.isArray( key ) ) {\n\n\t\t\t\t// If \"name\" is an array of keys...\n\t\t\t\t// When data is initially created, via (\"key\", \"val\") signature,\n\t\t\t\t// keys will be converted to camelCase.\n\t\t\t\t// Since there is no way to tell _how_ a key was added, remove\n\t\t\t\t// both plain key and camelCase key. #12786\n\t\t\t\t// This will only penalize the array argument path.\n\t\t\t\tname = key.concat( key.map( jQuery.camelCase ) );\n\t\t\t} else {\n\t\t\t\tcamel = jQuery.camelCase( key );\n\n\t\t\t\t// Try the string as a key before any manipulation\n\t\t\t\tif ( key in cache ) {\n\t\t\t\t\tname = [ key, camel ];\n\t\t\t\t} else {\n\n\t\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\t\tname = camel;\n\t\t\t\t\tname = name in cache ?\n\t\t\t\t\t\t[ name ] : ( name.match( rnotwhite ) || [] );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = name.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ name[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <= 35-45+\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://code.google.com/p/chromium/issues/detail?id=378607\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = data === \"true\" ? true :\n\t\t\t\t\tdata === \"false\" ? false :\n\t\t\t\t\tdata === \"null\" ? null :\n\n\t\t\t\t\t// Only convert to a number if it doesn't change the string\n\t\t\t\t\t+data + \"\" === data ? +data :\n\t\t\t\t\trbrace.test( data ) ? jQuery.parseJSON( data ) :\n\t\t\t\t\tdata;\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE11+\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data, camelKey;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// with the key as-is\n\t\t\t\tdata = dataUser.get( elem, key ) ||\n\n\t\t\t\t\t// Try to find dashed key if it exists (gh-2779)\n\t\t\t\t\t// This is for 2.2.x only\n\t\t\t\t\tdataUser.get( elem, key.replace( rmultiDash, \"-$&\" ).toLowerCase() );\n\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\tcamelKey = jQuery.camelCase( key );\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// with the key camelized\n\t\t\t\tdata = dataUser.get( elem, camelKey );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, camelKey, undefined );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tcamelKey = jQuery.camelCase( key );\n\t\t\tthis.each( function() {\n\n\t\t\t\t// First, attempt to store a copy or reference of any\n\t\t\t\t// data that might've been store with a camelCased key.\n\t\t\t\tvar data = dataUser.get( this, camelKey );\n\n\t\t\t\t// For HTML5 data-* attribute interop, we have to\n\t\t\t\t// store property names with dashes in a camelCase form.\n\t\t\t\t// This might not apply to all properties...*\n\t\t\t\tdataUser.set( this, camelKey, value );\n\n\t\t\t\t// *... In the case of properties that might _actually_\n\t\t\t\t// have dashes, we need to also store a copy of that\n\t\t\t\t// unchanged property.\n\t\t\t\tif ( key.indexOf( \"-\" ) > -1 && data !== undefined ) {\n\t\t\t\t\tdataUser.set( this, key, value );\n\t\t\t\t}\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || jQuery.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHidden = function( elem, el ) {\n\n\t\t// isHidden might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\t\treturn jQuery.css( elem, \"display\" ) === \"none\" ||\n\t\t\t!jQuery.contains( elem.ownerDocument, elem );\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted,\n\t\tscale = 1,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() { return tween.cur(); } :\n\t\t\tfunction() { return jQuery.css( elem, prop, \"\" ); },\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\tdo {\n\n\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\tscale = scale || \".5\";\n\n\t\t\t// Adjust and apply\n\t\t\tinitialInUnit = initialInUnit / scale;\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n\t\t} while (\n\t\t\tscale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\n\t\t);\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([\\w:-]+)/ );\n\nvar rscriptType = ( /^$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE9\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE9\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE9-11+\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret = typeof context.getElementsByTagName !== \"undefined\" ?\n\t\t\tcontext.getElementsByTagName( tag || \"*\" ) :\n\t\t\ttypeof context.querySelectorAll !== \"undefined\" ?\n\t\t\t\tcontext.querySelectorAll( tag || \"*\" ) :\n\t\t\t[];\n\n\treturn tag === undefined || tag && jQuery.nodeName( context, tag ) ?\n\t\tjQuery.merge( [ context ], ret ) :\n\t\tret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, contains, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( jQuery.type( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android<4.1, PhantomJS<2\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android<4.1, PhantomJS<2\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0-4.3, Safari<=5.1\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Safari<=5.1, Android<4.2\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE<=11+\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE9\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnotwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( event ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tevent = jQuery.event.fix( event );\n\n\t\tvar i, j, ret, matched, handleObj,\n\t\t\thandlerQueue = [],\n\t\t\targs = slice.call( arguments ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, matches, sel, handleObj,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Support (at least): Chrome, IE9\n\t\t// Find delegate handlers\n\t\t// Black-hole SVG <use> instance trees (#13180)\n\t\t//\n\t\t// Support: Firefox<=42+\n\t\t// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)\n\t\tif ( delegateCount && cur.nodeType &&\n\t\t\t( event.type !== \"click\" || isNaN( event.button ) || event.button < 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== \"click\" ) ) {\n\t\t\t\t\tmatches = [];\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matches[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatches[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matches[ sel ] ) {\n\t\t\t\t\t\t\tmatches.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matches.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matches } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\t// Includes some event props shared by KeyEvent and MouseEvent\n\tprops: ( \"altKey bubbles cancelable ctrlKey currentTarget detail eventPhase \" +\n\t\t\"metaKey relatedTarget shiftKey target timeStamp view which\" ).split( \" \" ),\n\n\tfixHooks: {},\n\n\tkeyHooks: {\n\t\tprops: \"char charCode key keyCode\".split( \" \" ),\n\t\tfilter: function( event, original ) {\n\n\t\t\t// Add which for key events\n\t\t\tif ( event.which == null ) {\n\t\t\t\tevent.which = original.charCode != null ? original.charCode : original.keyCode;\n\t\t\t}\n\n\t\t\treturn event;\n\t\t}\n\t},\n\n\tmouseHooks: {\n\t\tprops: ( \"button buttons clientX clientY offsetX offsetY pageX pageY \" +\n\t\t\t\"screenX screenY toElement\" ).split( \" \" ),\n\t\tfilter: function( event, original ) {\n\t\t\tvar eventDoc, doc, body,\n\t\t\t\tbutton = original.button;\n\n\t\t\t// Calculate pageX/Y if missing and clientX/Y available\n\t\t\tif ( event.pageX == null && original.clientX != null ) {\n\t\t\t\teventDoc = event.target.ownerDocument || document;\n\t\t\t\tdoc = eventDoc.documentElement;\n\t\t\t\tbody = eventDoc.body;\n\n\t\t\t\tevent.pageX = original.clientX +\n\t\t\t\t\t( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -\n\t\t\t\t\t( doc && doc.clientLeft || body && body.clientLeft || 0 );\n\t\t\t\tevent.pageY = original.clientY +\n\t\t\t\t\t( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -\n\t\t\t\t\t( doc && doc.clientTop  || body && body.clientTop  || 0 );\n\t\t\t}\n\n\t\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\t\t// Note: button is not normalized, so don't use it\n\t\t\tif ( !event.which && button !== undefined ) {\n\t\t\t\tevent.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );\n\t\t\t}\n\n\t\t\treturn event;\n\t\t}\n\t},\n\n\tfix: function( event ) {\n\t\tif ( event[ jQuery.expando ] ) {\n\t\t\treturn event;\n\t\t}\n\n\t\t// Create a writable copy of the event object and normalize some properties\n\t\tvar i, prop, copy,\n\t\t\ttype = event.type,\n\t\t\toriginalEvent = event,\n\t\t\tfixHook = this.fixHooks[ type ];\n\n\t\tif ( !fixHook ) {\n\t\t\tthis.fixHooks[ type ] = fixHook =\n\t\t\t\trmouseEvent.test( type ) ? this.mouseHooks :\n\t\t\t\trkeyEvent.test( type ) ? this.keyHooks :\n\t\t\t\t{};\n\t\t}\n\t\tcopy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;\n\n\t\tevent = new jQuery.Event( originalEvent );\n\n\t\ti = copy.length;\n\t\twhile ( i-- ) {\n\t\t\tprop = copy[ i ];\n\t\t\tevent[ prop ] = originalEvent[ prop ];\n\t\t}\n\n\t\t// Support: Cordova 2.5 (WebKit) (#13255)\n\t\t// All events should have a target; Cordova deviceready doesn't\n\t\tif ( !event.target ) {\n\t\t\tevent.target = document;\n\t\t}\n\n\t\t// Support: Safari 6.0+, Chrome<28\n\t\t// Target should not be a text node (#504, #13143)\n\t\tif ( event.target.nodeType === 3 ) {\n\t\t\tevent.target = event.target.parentNode;\n\t\t}\n\n\t\treturn fixHook.filter ? fixHook.filter( event, originalEvent ) : event;\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this.type === \"checkbox\" && this.click && jQuery.nodeName( this, \"input\" ) ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn jQuery.nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android<4.0\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://code.google.com/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:-]+)[^>]*)\\/>/gi,\n\n\t// Support: IE 10-11, Edge 10240+\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trscriptTypeMasked = /^true\\/(.*)/,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Manipulating tables requires a tbody\nfunction manipulationTarget( elem, content ) {\n\treturn jQuery.nodeName( elem, \"table\" ) &&\n\t\tjQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ?\n\n\t\telem.getElementsByTagName( \"tbody\" )[ 0 ] ||\n\t\t\telem.appendChild( elem.ownerDocument.createElement( \"tbody\" ) ) :\n\t\telem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tvar match = rscriptTypeMasked.exec( elem.type );\n\n\tif ( match ) {\n\t\telem.type = match[ 1 ];\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tisFunction = jQuery.isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( isFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( isFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android<4.1, PhantomJS<2\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tjQuery.globalEval( node.textContent.replace( rcleanScript, \"\" ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <= 35-45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <= 35-45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\n\t// Keep domManip exposed until 3.0 (gh-2225)\n\tdomManip: domManip,\n\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: QtWebKit\n\t\t\t// .get() because push.apply(_, arraylike) throws\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\n\n\nvar iframe,\n\telemdisplay = {\n\n\t\t// Support: Firefox\n\t\t// We have to pre-define these values for FF (#10227)\n\t\tHTML: \"block\",\n\t\tBODY: \"block\"\n\t};\n\n/**\n * Retrieve the actual display of a element\n * @param {String} name nodeName of the element\n * @param {Object} doc Document object\n */\n\n// Called only from within defaultDisplay\nfunction actualDisplay( name, doc ) {\n\tvar elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),\n\n\t\tdisplay = jQuery.css( elem[ 0 ], \"display\" );\n\n\t// We don't have any data stored on the element,\n\t// so use \"detach\" method as fast way to get rid of the element\n\telem.detach();\n\n\treturn display;\n}\n\n/**\n * Try to determine the default display value of an element\n * @param {String} nodeName\n */\nfunction defaultDisplay( nodeName ) {\n\tvar doc = document,\n\t\tdisplay = elemdisplay[ nodeName ];\n\n\tif ( !display ) {\n\t\tdisplay = actualDisplay( nodeName, doc );\n\n\t\t// If the simple way fails, read from inside an iframe\n\t\tif ( display === \"none\" || !display ) {\n\n\t\t\t// Use the already-created iframe if possible\n\t\t\tiframe = ( iframe || jQuery( \"<iframe frameborder='0' width='0' height='0'/>\" ) )\n\t\t\t\t.appendTo( doc.documentElement );\n\n\t\t\t// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse\n\t\t\tdoc = iframe[ 0 ].contentDocument;\n\n\t\t\t// Support: IE\n\t\t\tdoc.write();\n\t\t\tdoc.close();\n\n\t\t\tdisplay = actualDisplay( nodeName, doc );\n\t\t\tiframe.detach();\n\t\t}\n\n\t\t// Store the correct default display\n\t\telemdisplay[ nodeName ] = display;\n\t}\n\n\treturn display;\n}\nvar rmargin = ( /^margin/ );\n\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE<=11+, Firefox<=30+ (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar documentElement = document.documentElement;\n\n\n\n( function() {\n\tvar pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE9-11+\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tcontainer.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" +\n\t\t\"padding:0;margin-top:1px;position:absolute\";\n\tcontainer.appendChild( div );\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\t\tdiv.style.cssText =\n\n\t\t\t// Support: Firefox<29, Android 2.3\n\t\t\t// Vendor-prefix box-sizing\n\t\t\t\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;\" +\n\t\t\t\"position:relative;display:block;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"top:1%;width:50%\";\n\t\tdiv.innerHTML = \"\";\n\t\tdocumentElement.appendChild( container );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\t\treliableMarginLeftVal = divStyle.marginLeft === \"2px\";\n\t\tboxSizingReliableVal = divStyle.width === \"4px\";\n\n\t\t// Support: Android 4.0 - 4.3 only\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.marginRight = \"50%\";\n\t\tpixelMarginRightVal = divStyle.marginRight === \"4px\";\n\n\t\tdocumentElement.removeChild( container );\n\t}\n\n\tjQuery.extend( support, {\n\t\tpixelPosition: function() {\n\n\t\t\t// This test is executed only once but we still do memoizing\n\t\t\t// since we can use the boxSizingReliable pre-computing.\n\t\t\t// No need to check if the test was already performed, though.\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\tboxSizingReliable: function() {\n\t\t\tif ( boxSizingReliableVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelMarginRight: function() {\n\n\t\t\t// Support: Android 4.0-4.3\n\t\t\t// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal\n\t\t\t// since that compresses better and they're computed together anyway.\n\t\t\tif ( boxSizingReliableVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn pixelMarginRightVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\n\t\t\t// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37\n\t\t\tif ( boxSizingReliableVal == null ) {\n\t\t\t\tcomputeStyleTests();\n\t\t\t}\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\treliableMarginRight: function() {\n\n\t\t\t// Support: Android 2.3\n\t\t\t// Check if div with explicit width and no margin-right incorrectly\n\t\t\t// gets computed margin-right based on width of container. (#3333)\n\t\t\t// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n\t\t\t// This support function is only executed once so no memoizing is needed.\n\t\t\tvar ret,\n\t\t\t\tmarginDiv = div.appendChild( document.createElement( \"div\" ) );\n\n\t\t\t// Reset CSS: box-sizing; display; margin; border; padding\n\t\t\tmarginDiv.style.cssText = div.style.cssText =\n\n\t\t\t\t// Support: Android 2.3\n\t\t\t\t// Vendor-prefix box-sizing\n\t\t\t\t\"-webkit-box-sizing:content-box;box-sizing:content-box;\" +\n\t\t\t\t\"display:block;margin:0;border:0;padding:0\";\n\t\t\tmarginDiv.style.marginRight = marginDiv.style.width = \"0\";\n\t\t\tdiv.style.width = \"1px\";\n\t\t\tdocumentElement.appendChild( container );\n\n\t\t\tret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );\n\n\t\t\tdocumentElement.removeChild( container );\n\t\t\tdiv.removeChild( marginDiv );\n\n\t\t\treturn ret;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\tret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;\n\n\t// Support: Opera 12.1x only\n\t// Fall back to style even without computed\n\t// computed is undefined for elems on document fragments\n\tif ( ( ret === \"\" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\tret = jQuery.style( elem, name );\n\t}\n\n\t// Support: IE9\n\t// getPropertyValue is only needed for .css('filter') (#12537)\n\tif ( computed ) {\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// http://dev.w3.org/csswg/cssom/#resolved-values\n\t\tif ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE9-11+\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"O\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n\tvar i = extra === ( isBorderBox ? \"border\" : \"content\" ) ?\n\n\t\t// If we already have the right measurement, avoid augmentation\n\t\t4 :\n\n\t\t// Otherwise initialize for horizontal or vertical properties\n\t\tname === \"width\" ? 1 : 0,\n\n\t\tval = 0;\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin, so add it if we want it\n\t\tif ( extra === \"margin\" ) {\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\tif ( isBorderBox ) {\n\n\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\tif ( extra === \"content\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// At this point, extra isn't border nor margin, so remove border\n\t\t\tif ( extra !== \"margin\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// At this point, extra isn't content, so add padding\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// At this point, extra isn't content nor padding, so add border\n\t\t\tif ( extra !== \"padding\" ) {\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n\t// Start with offset property, which is equivalent to the border-box value\n\tvar valueIsBorderBox = true,\n\t\tval = name === \"width\" ? elem.offsetWidth : elem.offsetHeight,\n\t\tstyles = getStyles( elem ),\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t// Some non-html elements return undefined for offsetWidth, so check for null/undefined\n\t// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n\t// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n\tif ( val <= 0 || val == null ) {\n\n\t\t// Fall back to computed then uncomputed css if necessary\n\t\tval = curCSS( elem, name, styles );\n\t\tif ( val < 0 || val == null ) {\n\t\t\tval = elem.style[ name ];\n\t\t}\n\n\t\t// Computed unit is not pixels. Stop here and return.\n\t\tif ( rnumnonpx.test( val ) ) {\n\t\t\treturn val;\n\t\t}\n\n\t\t// Check for style in case a browser which returns unreliable values\n\t\t// for getComputedStyle silently falls back to the reliable elem.style\n\t\tvalueIsBorderBox = isBorderBox &&\n\t\t\t( support.boxSizingReliable() || val === elem.style[ name ] );\n\n\t\t// Normalize \"\", auto, and prepare for extra\n\t\tval = parseFloat( val ) || 0;\n\t}\n\n\t// Use the active box-sizing model to add/subtract irrelevant styles\n\treturn ( val +\n\t\taugmentWidthOrHeight(\n\t\t\telem,\n\t\t\tname,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles\n\t\t)\n\t) + \"px\";\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem, hidden,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tvalues[ index ] = dataPriv.get( elem, \"olddisplay\" );\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Reset the inline display of this element to learn if it is\n\t\t\t// being hidden by cascaded rules or not\n\t\t\tif ( !values[ index ] && display === \"none\" ) {\n\t\t\t\telem.style.display = \"\";\n\t\t\t}\n\n\t\t\t// Set elements which have been overridden with display: none\n\t\t\t// in a stylesheet to whatever the default browser style is\n\t\t\t// for such an element\n\t\t\tif ( elem.style.display === \"\" && isHidden( elem ) ) {\n\t\t\t\tvalues[ index ] = dataPriv.access(\n\t\t\t\t\telem,\n\t\t\t\t\t\"olddisplay\",\n\t\t\t\t\tdefaultDisplay( elem.nodeName )\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\thidden = isHidden( elem );\n\n\t\t\tif ( display !== \"none\" || !hidden ) {\n\t\t\t\tdataPriv.set(\n\t\t\t\t\telem,\n\t\t\t\t\t\"olddisplay\",\n\t\t\t\t\thidden ? display : jQuery.css( elem, \"display\" )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of most of the elements in a second loop\n\t// to avoid the constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ( !show || elem.style.display === \"none\" || elem.style.display === \"\" ) {\n\t\t\telem.style.display = show ? values[ index ] || \"\" : \"none\";\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {\n\t\t\"float\": \"cssFloat\"\n\t},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tstyle = elem.style;\n\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === \"number\" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tstyle[ name ] = value;\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = jQuery.camelCase( name );\n\n\t\t// Make sure that we're working with the right name\n\t\tname = jQuery.cssProps[ origName ] ||\n\t\t\t( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, name ) {\n\tjQuery.cssHooks[ name ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\t\t\t\t\telem.offsetWidth === 0 ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, name, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = extra && getStyles( elem ),\n\t\t\t\tsubtract = extra && augmentWidthOrHeight(\n\t\t\t\t\telem,\n\t\t\t\t\tname,\n\t\t\t\t\textra,\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\t\tstyles\n\t\t\t\t);\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ name ] = value;\n\t\t\t\tvalue = jQuery.css( elem, name );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// Support: Android 2.3\njQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn swap( elem, { \"display\": \"inline-block\" },\n\t\t\t\tcurCSS, [ elem, \"marginRight\" ] );\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( !rmargin.test( prefix ) ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( jQuery.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t},\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHidden( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE9\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back Compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, timerId,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4 ; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\t/* jshint validthis: true */\n\tvar prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHidden( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Handle queue: false promises\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Height/width overflow pass\n\tif ( elem.nodeType === 1 && ( \"height\" in props || \"width\" in props ) ) {\n\n\t\t// Make sure that nothing sneaks out\n\t\t// Record all 3 overflow attributes because IE9-10 do not\n\t\t// change the overflow attribute when overflowX and\n\t\t// overflowY are set to the same value\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Set display property to inline-block for height/width\n\t\t// animations on inline elements that are having width/height animated\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\n\t\t// Test default display if display is currently \"none\"\n\t\tcheckDisplay = display === \"none\" ?\n\t\t\tdataPriv.get( elem, \"olddisplay\" ) || defaultDisplay( elem.nodeName ) : display;\n\n\t\tif ( checkDisplay === \"inline\" && jQuery.css( elem, \"float\" ) === \"none\" ) {\n\t\t\tstyle.display = \"inline-block\";\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// show/hide pass\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.exec( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// If there is dataShow left over from a stopped hide or show\n\t\t\t\t// and we are going to proceed with show, we should pretend to be hidden\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\n\t\t// Any non-fx value stops us from restoring the original display value\n\t\t} else {\n\t\t\tdisplay = undefined;\n\t\t}\n\t}\n\n\tif ( !jQuery.isEmptyObject( orig ) ) {\n\t\tif ( dataShow ) {\n\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\thidden = dataShow.hidden;\n\t\t\t}\n\t\t} else {\n\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", {} );\n\t\t}\n\n\t\t// Store state if its toggle - enables .stop().toggle() to \"reverse\"\n\t\tif ( toggle ) {\n\t\t\tdataShow.hidden = !hidden;\n\t\t}\n\t\tif ( hidden ) {\n\t\t\tjQuery( elem ).show();\n\t\t} else {\n\t\t\tanim.done( function() {\n\t\t\t\tjQuery( elem ).hide();\n\t\t\t} );\n\t\t}\n\t\tanim.done( function() {\n\t\t\tvar prop;\n\n\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\tfor ( prop in orig ) {\n\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t}\n\t\t} );\n\t\tfor ( prop in orig ) {\n\t\t\ttween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\n\t\t\tif ( !( prop in dataShow ) ) {\n\t\t\t\tdataShow[ prop ] = tween.start;\n\t\t\t\tif ( hidden ) {\n\t\t\t\t\ttween.end = tween.start;\n\t\t\t\t\ttween.start = prop === \"width\" || prop === \"height\" ? 1 : 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t// If this is a noop like .hide().hide(), restore an overwritten display value\n\t} else if ( ( display === \"none\" ? defaultDisplay( elem.nodeName ) : display ) === \"inline\" ) {\n\t\tstyle.display = display;\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = jQuery.camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( jQuery.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length ; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t} else {\n\t\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length ; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length ; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( jQuery.isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tjQuery.proxy( result.stop, result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( jQuery.isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\t// attach callbacks from options\n\treturn animation.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( jQuery.isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnotwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length ; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tjQuery.isFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n\t};\n\n\topt.duration = jQuery.fx.off ? 0 : typeof opt.duration === \"number\" ?\n\t\topt.duration : opt.duration in jQuery.fx.speeds ?\n\t\t\tjQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( jQuery.isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHidden ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = jQuery.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Checks the timer has not already been removed\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tif ( timer() ) {\n\t\tjQuery.fx.start();\n\t} else {\n\t\tjQuery.timers.pop();\n\t}\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( !timerId ) {\n\t\ttimerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );\n\t}\n};\n\njQuery.fx.stop = function() {\n\twindow.clearInterval( timerId );\n\n\ttimerId = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: iOS<=5.1, Android<=4.2+\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE<=11+\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: Android<=2.3\n\t// Options inside disabled selects are incorrectly marked as disabled\n\tselect.disabled = true;\n\tsupport.optDisabled = !opt.disabled;\n\n\t// Support: IE<=11+\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// All attributes are lowercase\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\tname = name.toLowerCase();\n\t\t\thooks = jQuery.attrHooks[ name ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tjQuery.nodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name, propName,\n\t\t\ti = 0,\n\t\t\tattrNames = value && value.match( rnotwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\tpropName = jQuery.propFix[ name ] || name;\n\n\t\t\t\t// Boolean attributes get special treatment (#10870)\n\t\t\t\tif ( jQuery.expr.match.bool.test( name ) ) {\n\n\t\t\t\t\t// Set corresponding property to false\n\t\t\t\t\telem[ propName ] = false;\n\t\t\t\t}\n\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle;\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ name ];\n\t\t\tattrHandle[ name ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tname.toLowerCase() :\n\t\t\t\tnull;\n\t\t\tattrHandle[ name ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\treturn tabindex ?\n\t\t\t\t\tparseInt( tabindex, 10 ) :\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\t\trclickable.test( elem.nodeName ) && elem.href ?\n\t\t\t\t\t\t\t0 :\n\t\t\t\t\t\t\t-1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\nvar rclass = /[\\t\\r\\n\\f]/g;\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnotwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 &&\n\t\t\t\t\t( \" \" + curValue + \" \" ).replace( rclass, \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = jQuery.trim( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnotwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 &&\n\t\t\t\t\t( \" \" + curValue + \" \" ).replace( rclass, \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = jQuery.trim( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value;\n\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( type === \"string\" ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = value.match( rnotwhite ) || [];\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + getClass( elem ) + \" \" ).replace( rclass, \" \" )\n\t\t\t\t\t.indexOf( className ) > -1\n\t\t\t) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g,\n\trspaces = /[\\x20\\t\\r\\n\\f]+/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, isFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\treturn typeof ret === \"string\" ?\n\n\t\t\t\t\t// Handle most common string cases\n\t\t\t\t\tret.replace( rreturn, \"\" ) :\n\n\t\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\t\tret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tisFunction = jQuery.isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( jQuery.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE10-11+\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tjQuery.trim( jQuery.text( elem ) ).replace( rspaces, \" \" );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\" || index < 0,\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length,\n\t\t\t\t\ti = index < 0 ?\n\t\t\t\t\t\tmax :\n\t\t\t\t\t\tone ? index : 0;\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t( support.optDisabled ?\n\t\t\t\t\t\t\t\t!option.disabled : option.getAttribute( \"disabled\" ) === null ) &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!jQuery.nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( jQuery.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\telem[ type ]();\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout load resize scroll unload click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup error contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\n// Support: Firefox\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome, Safari\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = jQuery.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Support: Android 2.3\n// Workaround failure to string-cast null input\njQuery.parseJSON = function( data ) {\n\treturn JSON.parse( data + \"\" );\n};\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE9\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trhash = /#.*$/,\n\trts = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];\n\n\t\tif ( jQuery.isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": jQuery.parseJSON,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// The jqXHR state\n\t\t\tstate = 0,\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( state === 2 ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn state === 2 ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tvar lname = name.toLowerCase();\n\t\t\t\t\tif ( !state ) {\n\t\t\t\t\t\tname = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( !state ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( state < 2 ) {\n\t\t\t\t\t\t\tfor ( code in map ) {\n\n\t\t\t\t\t\t\t\t// Lazy-add the new callback in a way that preserves old ones\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR ).complete = completeDeferred.add;\n\t\tjqXHR.success = jqXHR.done;\n\t\tjqXHR.error = jqXHR.fail;\n\n\t\t// Remove hash character (#7531: and string promotion)\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" ).replace( rhash, \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = jQuery.trim( s.dataType || \"*\" ).toLowerCase().match( rnotwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE8-11+\n\t\t\t// IE throws exception if url is malformed, e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE8-11+\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( state === 2 ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\tcacheURL = s.url;\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// If data is available, append data to url\n\t\t\tif ( s.data ) {\n\t\t\t\tcacheURL = ( s.url += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data );\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add anti-cache in url if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\ts.url = rts.test( cacheURL ) ?\n\n\t\t\t\t\t// If there is already a '_' parameter, set its value\n\t\t\t\t\tcacheURL.replace( rts, \"$1_=\" + nonce++ ) :\n\n\t\t\t\t\t// Otherwise add one to the end\n\t\t\t\t\tcacheURL + ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + nonce++;\n\t\t\t}\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tfor ( i in { success: 1, error: 1, complete: 1 } ) {\n\t\t\tjqXHR[ i ]( s[ i ] );\n\t\t}\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( state === 2 ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tstate = 1;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Propagate exception as error if not done\n\t\t\t\tif ( state < 2 ) {\n\t\t\t\t\tdone( -1, e );\n\n\t\t\t\t// Simply rethrow otherwise\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Called once\n\t\t\tif ( state === 2 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// State is \"done\" now\n\t\t\tstate = 2;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapAll( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( this[ 0 ] ) {\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar isFunction = jQuery.isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function() {\n\t\treturn this.parent().each( function() {\n\t\t\tif ( !jQuery.nodeName( this, \"body\" ) ) {\n\t\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t\t}\n\t\t} ).end();\n\t}\n} );\n\n\njQuery.expr.filters.hidden = function( elem ) {\n\treturn !jQuery.expr.filters.visible( elem );\n};\njQuery.expr.filters.visible = function( elem ) {\n\n\t// Support: Opera <= 12.12\n\t// Opera reports offsetWidths and offsetHeights less than zero on some elements\n\t// Use OR instead of AND as the element is not visible if either is true\n\t// See tickets #10406 and #13132\n\treturn elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;\n};\n\n\n\n\nvar r20 = /%20/g,\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( jQuery.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, value ) {\n\n\t\t\t// If value is a function, invoke it and return its value\n\t\t\tvalue = jQuery.isFunction( value ) ? value() : ( value == null ? \"\" : value );\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" + encodeURIComponent( value );\n\t\t};\n\n\t// Set traditional to true for jQuery <= 1.3.2 behavior.\n\tif ( traditional === undefined ) {\n\t\ttraditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" ).replace( r20, \"+\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\treturn val == null ?\n\t\t\t\tnull :\n\t\t\t\tjQuery.isArray( val ) ?\n\t\t\t\t\tjQuery.map( val, function( val ) {\n\t\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t\t} ) :\n\t\t\t\t\t{ name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE9\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE9\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = callback( \"error\" );\n\n\t\t\t\t// Support: IE9\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" ).prop( {\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t} ).on(\n\t\t\t\t\t\"load error\",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\tcontext = context || document;\n\n\tvar parsed = rsingleTag.exec( data ),\n\t\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n// Keep a copy of the old load method\nvar _load = jQuery.fn.load;\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tif ( typeof url !== \"string\" && _load ) {\n\t\treturn _load.apply( this, arguments );\n\t}\n\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = jQuery.trim( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( jQuery.isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.filters.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\n/**\n * Gets a window from an element\n */\nfunction getWindow( elem ) {\n\treturn jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;\n}\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( jQuery.isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\toffset: function( options ) {\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar docElem, win,\n\t\t\telem = this[ 0 ],\n\t\t\tbox = { top: 0, left: 0 },\n\t\t\tdoc = elem && elem.ownerDocument;\n\n\t\tif ( !doc ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdocElem = doc.documentElement;\n\n\t\t// Make sure it's not a disconnected DOM node\n\t\tif ( !jQuery.contains( docElem, elem ) ) {\n\t\t\treturn box;\n\t\t}\n\n\t\tbox = elem.getBoundingClientRect();\n\t\twin = getWindow( doc );\n\t\treturn {\n\t\t\ttop: box.top + win.pageYOffset - docElem.clientTop,\n\t\t\tleft: box.left + win.pageXOffset - docElem.clientLeft\n\t\t};\n\t},\n\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n\t\t// because it is its only offset parent\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume getBoundingClientRect is there when computed position is fixed\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\n\t\t\t// Get *real* offsetParent\n\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t// Get correct offsets\n\t\t\toffset = this.offset();\n\t\t\tif ( !jQuery.nodeName( offsetParent[ 0 ], \"html\" ) ) {\n\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t}\n\n\t\t\t// Add offsetParent borders\n\t\t\tparentOffset.top += jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true );\n\t\t\tparentOffset.left += jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true );\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\t\t\tvar win = getWindow( elem );\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari<7-8+, Chrome<37-44+\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\n\t\t\t\t\t// isn't a whole lot we can do. See pull request at this URL for discussion:\n\t\t\t\t\t// https://github.com/jquery/jquery/pull/764\n\t\t\t\t\treturn elem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable, null );\n\t\t};\n\t} );\n} );\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\tsize: function() {\n\t\treturn this.length;\n\t}\n} );\n\njQuery.fn.andSelf = jQuery.fn.addBack;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\nreturn jQuery;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcz9jZDAwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vZ2xvYmFsLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./src/ChemDoodle/lib/gl-matrix.js":
/*!*****************************************!*\
  !*** ./src/ChemDoodle/lib/gl-matrix.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * @fileoverview gl-matrix - High performance matrix and vector operations for WebGL\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 1.3.7\n */\n\n/*\n * Copyright (c) 2012 Brandon Jones, Colin MacKenzie IV\n *\n * This software is provided 'as-is', without any express or implied\n * warranty. In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n *    1. The origin of this software must not be misrepresented; you must not\n *    claim that you wrote the original software. If you use this software\n *    in a product, an acknowledgment in the product documentation would be\n *    appreciated but is not required.\n *\n *    2. Altered source versions must be plainly marked as such, and must not\n *    be misrepresented as being the original software.\n *\n *    3. This notice may not be removed or altered from any source\n *    distribution.\n */\n// Updated to use a modification of the \"returnExportsGlobal\" pattern from https://github.com/umdjs/umd\n(function (root, factory) {\n  if (( false ? undefined : _typeof(exports)) === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory(global);\n  } else if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return factory(root);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(this, function (root) {\n  \"use strict\"; // Tweak to your liking\n\n  var FLOAT_EPSILON = 0.000001;\n  var glMath = {};\n\n  (function () {\n    if (typeof Float32Array != 'undefined') {\n      var y = new Float32Array(1);\n      var i = new Int32Array(y.buffer);\n      /**\n       * Fast way to calculate the inverse square root,\n       * see http://jsperf.com/inverse-square-root/5\n       *\n       * If typed arrays are not available, a slower\n       * implementation will be used.\n       *\n       * @param {Number} number the number\n       * @returns {Number} Inverse square root\n       */\n\n      glMath.invsqrt = function (number) {\n        var x2 = number * 0.5;\n        y[0] = number;\n        var threehalfs = 1.5;\n        i[0] = 0x5f3759df - (i[0] >> 1);\n        var number2 = y[0];\n        return number2 * (threehalfs - x2 * number2 * number2);\n      };\n    } else {\n      glMath.invsqrt = function (number) {\n        return 1.0 / Math.sqrt(number);\n      };\n    }\n  })();\n  /**\n   * @class System-specific optimal array type\n   * @name MatrixArray\n   */\n\n\n  var MatrixArray = null; // explicitly sets and returns the type of array to use within glMatrix\n\n  function setMatrixArrayType(type) {\n    MatrixArray = type;\n    return MatrixArray;\n  } // auto-detects and returns the best type of array to use within glMatrix, falling\n  // back to Array if typed arrays are unsupported\n\n\n  function determineMatrixArrayType() {\n    MatrixArray = typeof Float32Array !== 'undefined' ? Float32Array : Array;\n    return MatrixArray;\n  }\n\n  determineMatrixArrayType();\n  /**\n   * @class 3 Dimensional Vector\n   * @name vec3\n   */\n\n  var vec3 = {};\n  /**\n   * Creates a new instance of a vec3 using the default array type\n   * Any javascript array-like objects containing at least 3 numeric elements can serve as a vec3\n   *\n   * @param {vec3} [vec] vec3 containing values to initialize with\n   *\n   * @returns {vec3} New vec3\n   */\n\n  vec3.create = function (vec) {\n    var dest = new MatrixArray(3);\n\n    if (vec) {\n      dest[0] = vec[0];\n      dest[1] = vec[1];\n      dest[2] = vec[2];\n    } else {\n      dest[0] = dest[1] = dest[2] = 0;\n    }\n\n    return dest;\n  };\n  /**\n   * Creates a new instance of a vec3, initializing it with the given arguments\n   *\n   * @param {number} x X value\n   * @param {number} y Y value\n   * @param {number} z Z value\n    * @returns {vec3} New vec3\n   */\n\n\n  vec3.createFrom = function (x, y, z) {\n    var dest = new MatrixArray(3);\n    dest[0] = x;\n    dest[1] = y;\n    dest[2] = z;\n    return dest;\n  };\n  /**\n   * Copies the values of one vec3 to another\n   *\n   * @param {vec3} vec vec3 containing values to copy\n   * @param {vec3} dest vec3 receiving copied values\n   *\n   * @returns {vec3} dest\n   */\n\n\n  vec3.set = function (vec, dest) {\n    dest[0] = vec[0];\n    dest[1] = vec[1];\n    dest[2] = vec[2];\n    return dest;\n  };\n  /**\n   * Compares two vectors for equality within a certain margin of error\n   *\n   * @param {vec3} a First vector\n   * @param {vec3} b Second vector\n   *\n   * @returns {Boolean} True if a is equivalent to b\n   */\n\n\n  vec3.equal = function (a, b) {\n    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON;\n  };\n  /**\n   * Performs a vector addition\n   *\n   * @param {vec3} vec First operand\n   * @param {vec3} vec2 Second operand\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.add = function (vec, vec2, dest) {\n    if (!dest || vec === dest) {\n      vec[0] += vec2[0];\n      vec[1] += vec2[1];\n      vec[2] += vec2[2];\n      return vec;\n    }\n\n    dest[0] = vec[0] + vec2[0];\n    dest[1] = vec[1] + vec2[1];\n    dest[2] = vec[2] + vec2[2];\n    return dest;\n  };\n  /**\n   * Performs a vector subtraction\n   *\n   * @param {vec3} vec First operand\n   * @param {vec3} vec2 Second operand\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.subtract = function (vec, vec2, dest) {\n    if (!dest || vec === dest) {\n      vec[0] -= vec2[0];\n      vec[1] -= vec2[1];\n      vec[2] -= vec2[2];\n      return vec;\n    }\n\n    dest[0] = vec[0] - vec2[0];\n    dest[1] = vec[1] - vec2[1];\n    dest[2] = vec[2] - vec2[2];\n    return dest;\n  };\n  /**\n   * Performs a vector multiplication\n   *\n   * @param {vec3} vec First operand\n   * @param {vec3} vec2 Second operand\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.multiply = function (vec, vec2, dest) {\n    if (!dest || vec === dest) {\n      vec[0] *= vec2[0];\n      vec[1] *= vec2[1];\n      vec[2] *= vec2[2];\n      return vec;\n    }\n\n    dest[0] = vec[0] * vec2[0];\n    dest[1] = vec[1] * vec2[1];\n    dest[2] = vec[2] * vec2[2];\n    return dest;\n  };\n  /**\n   * Negates the components of a vec3\n   *\n   * @param {vec3} vec vec3 to negate\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.negate = function (vec, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    dest[0] = -vec[0];\n    dest[1] = -vec[1];\n    dest[2] = -vec[2];\n    return dest;\n  };\n  /**\n   * Multiplies the components of a vec3 by a scalar value\n   *\n   * @param {vec3} vec vec3 to scale\n   * @param {number} val Value to scale by\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.scale = function (vec, val, dest) {\n    if (!dest || vec === dest) {\n      vec[0] *= val;\n      vec[1] *= val;\n      vec[2] *= val;\n      return vec;\n    }\n\n    dest[0] = vec[0] * val;\n    dest[1] = vec[1] * val;\n    dest[2] = vec[2] * val;\n    return dest;\n  };\n  /**\n   * Generates a unit vector of the same direction as the provided vec3\n   * If vector length is 0, returns [0, 0, 0]\n   *\n   * @param {vec3} vec vec3 to normalize\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.normalize = function (vec, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2],\n        len = Math.sqrt(x * x + y * y + z * z);\n\n    if (!len) {\n      dest[0] = 0;\n      dest[1] = 0;\n      dest[2] = 0;\n      return dest;\n    } else if (len === 1) {\n      dest[0] = x;\n      dest[1] = y;\n      dest[2] = z;\n      return dest;\n    }\n\n    len = 1 / len;\n    dest[0] = x * len;\n    dest[1] = y * len;\n    dest[2] = z * len;\n    return dest;\n  };\n  /**\n   * Generates the cross product of two vec3s\n   *\n   * @param {vec3} vec First operand\n   * @param {vec3} vec2 Second operand\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.cross = function (vec, vec2, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2],\n        x2 = vec2[0],\n        y2 = vec2[1],\n        z2 = vec2[2];\n    dest[0] = y * z2 - z * y2;\n    dest[1] = z * x2 - x * z2;\n    dest[2] = x * y2 - y * x2;\n    return dest;\n  };\n  /**\n   * Caclulates the length of a vec3\n   *\n   * @param {vec3} vec vec3 to calculate length of\n   *\n   * @returns {number} Length of vec\n   */\n\n\n  vec3.length = function (vec) {\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2];\n    return Math.sqrt(x * x + y * y + z * z);\n  };\n  /**\n   * Caclulates the squared length of a vec3\n   *\n   * @param {vec3} vec vec3 to calculate squared length of\n   *\n   * @returns {number} Squared Length of vec\n   */\n\n\n  vec3.squaredLength = function (vec) {\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2];\n    return x * x + y * y + z * z;\n  };\n  /**\n   * Caclulates the dot product of two vec3s\n   *\n   * @param {vec3} vec First operand\n   * @param {vec3} vec2 Second operand\n   *\n   * @returns {number} Dot product of vec and vec2\n   */\n\n\n  vec3.dot = function (vec, vec2) {\n    return vec[0] * vec2[0] + vec[1] * vec2[1] + vec[2] * vec2[2];\n  };\n  /**\n   * Generates a unit vector pointing from one vector to another\n   *\n   * @param {vec3} vec Origin vec3\n   * @param {vec3} vec2 vec3 to point to\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.direction = function (vec, vec2, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    var x = vec[0] - vec2[0],\n        y = vec[1] - vec2[1],\n        z = vec[2] - vec2[2],\n        len = Math.sqrt(x * x + y * y + z * z);\n\n    if (!len) {\n      dest[0] = 0;\n      dest[1] = 0;\n      dest[2] = 0;\n      return dest;\n    }\n\n    len = 1 / len;\n    dest[0] = x * len;\n    dest[1] = y * len;\n    dest[2] = z * len;\n    return dest;\n  };\n  /**\n   * Performs a linear interpolation between two vec3\n   *\n   * @param {vec3} vec First vector\n   * @param {vec3} vec2 Second vector\n   * @param {number} lerp Interpolation amount between the two inputs\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  vec3.lerp = function (vec, vec2, lerp, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    dest[0] = vec[0] + lerp * (vec2[0] - vec[0]);\n    dest[1] = vec[1] + lerp * (vec2[1] - vec[1]);\n    dest[2] = vec[2] + lerp * (vec2[2] - vec[2]);\n    return dest;\n  };\n  /**\n   * Calculates the euclidian distance between two vec3\n   *\n   * Params:\n   * @param {vec3} vec First vector\n   * @param {vec3} vec2 Second vector\n   *\n   * @returns {number} Distance between vec and vec2\n   */\n\n\n  vec3.dist = function (vec, vec2) {\n    var x = vec2[0] - vec[0],\n        y = vec2[1] - vec[1],\n        z = vec2[2] - vec[2];\n    return Math.sqrt(x * x + y * y + z * z);\n  }; // Pre-allocated to prevent unecessary garbage collection\n\n\n  var unprojectMat = null;\n  var unprojectVec = new MatrixArray(4);\n  /**\n   * Projects the specified vec3 from screen space into object space\n   * Based on the <a href=\"http://webcvs.freedesktop.org/mesa/Mesa/src/glu/mesa/project.c?revision=1.4&view=markup\">Mesa gluUnProject implementation</a>\n   *\n   * @param {vec3} vec Screen-space vector to project\n   * @param {mat4} view View matrix\n   * @param {mat4} proj Projection matrix\n   * @param {vec4} viewport Viewport as given to gl.viewport [x, y, width, height]\n   * @param {vec3} [dest] vec3 receiving unprojected result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n  vec3.unproject = function (vec, view, proj, viewport, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    if (!unprojectMat) {\n      unprojectMat = mat4.create();\n    }\n\n    var m = unprojectMat;\n    var v = unprojectVec;\n    v[0] = (vec[0] - viewport[0]) * 2.0 / viewport[2] - 1.0;\n    v[1] = (vec[1] - viewport[1]) * 2.0 / viewport[3] - 1.0;\n    v[2] = 2.0 * vec[2] - 1.0;\n    v[3] = 1.0;\n    mat4.multiply(proj, view, m);\n\n    if (!mat4.inverse(m)) {\n      return null;\n    }\n\n    mat4.multiplyVec4(m, v);\n\n    if (v[3] === 0.0) {\n      return null;\n    }\n\n    dest[0] = v[0] / v[3];\n    dest[1] = v[1] / v[3];\n    dest[2] = v[2] / v[3];\n    return dest;\n  };\n\n  var xUnitVec3 = vec3.createFrom(1, 0, 0);\n  var yUnitVec3 = vec3.createFrom(0, 1, 0);\n  var zUnitVec3 = vec3.createFrom(0, 0, 1);\n  var tmpvec3 = vec3.create();\n  /**\n   * Generates a quaternion of rotation between two given normalized vectors\n   *\n   * @param {vec3} a Normalized source vector\n   * @param {vec3} b Normalized target vector\n   * @param {quat4} [dest] quat4 receiving operation result.\n   *\n   * @returns {quat4} dest if specified, a new quat4 otherwise\n   */\n\n  vec3.rotationTo = function (a, b, dest) {\n    if (!dest) {\n      dest = quat4.create();\n    }\n\n    var d = vec3.dot(a, b);\n    var axis = tmpvec3;\n\n    if (d >= 1.0) {\n      quat4.set(identityQuat4, dest);\n    } else if (d < 0.000001 - 1.0) {\n      vec3.cross(xUnitVec3, a, axis);\n      if (vec3.length(axis) < 0.000001) vec3.cross(yUnitVec3, a, axis);\n      if (vec3.length(axis) < 0.000001) vec3.cross(zUnitVec3, a, axis);\n      vec3.normalize(axis);\n      quat4.fromAngleAxis(Math.PI, axis, dest);\n    } else {\n      var s = Math.sqrt((1.0 + d) * 2.0);\n      var sInv = 1.0 / s;\n      vec3.cross(a, b, axis);\n      dest[0] = axis[0] * sInv;\n      dest[1] = axis[1] * sInv;\n      dest[2] = axis[2] * sInv;\n      dest[3] = s * 0.5;\n      quat4.normalize(dest);\n    }\n\n    if (dest[3] > 1.0) dest[3] = 1.0;else if (dest[3] < -1.0) dest[3] = -1.0;\n    return dest;\n  };\n  /**\n   * Returns a string representation of a vector\n   *\n   * @param {vec3} vec Vector to represent as a string\n   *\n   * @returns {string} String representation of vec\n   */\n\n\n  vec3.str = function (vec) {\n    return '[' + vec[0] + ', ' + vec[1] + ', ' + vec[2] + ']';\n  };\n  /**\n   * @class 3x3 Matrix\n   * @name mat3\n   */\n\n\n  var mat3 = {};\n  /**\n   * Creates a new instance of a mat3 using the default array type\n   * Any javascript array-like object containing at least 9 numeric elements can serve as a mat3\n   *\n   * @param {mat3} [mat] mat3 containing values to initialize with\n   *\n   * @returns {mat3} New mat3\n   */\n\n  mat3.create = function (mat) {\n    var dest = new MatrixArray(9);\n\n    if (mat) {\n      dest[0] = mat[0];\n      dest[1] = mat[1];\n      dest[2] = mat[2];\n      dest[3] = mat[3];\n      dest[4] = mat[4];\n      dest[5] = mat[5];\n      dest[6] = mat[6];\n      dest[7] = mat[7];\n      dest[8] = mat[8];\n    } else {\n      dest[0] = dest[1] = dest[2] = dest[3] = dest[4] = dest[5] = dest[6] = dest[7] = dest[8] = 0;\n    }\n\n    return dest;\n  };\n  /**\n   * Creates a new instance of a mat3, initializing it with the given arguments\n   *\n   * @param {number} m00\n   * @param {number} m01\n   * @param {number} m02\n   * @param {number} m10\n   * @param {number} m11\n   * @param {number} m12\n   * @param {number} m20\n   * @param {number} m21\n   * @param {number} m22\n    * @returns {mat3} New mat3\n   */\n\n\n  mat3.createFrom = function (m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    var dest = new MatrixArray(9);\n    dest[0] = m00;\n    dest[1] = m01;\n    dest[2] = m02;\n    dest[3] = m10;\n    dest[4] = m11;\n    dest[5] = m12;\n    dest[6] = m20;\n    dest[7] = m21;\n    dest[8] = m22;\n    return dest;\n  };\n  /**\n   * Calculates the determinant of a mat3\n   *\n   * @param {mat3} mat mat3 to calculate determinant of\n   *\n   * @returns {Number} determinant of mat\n   */\n\n\n  mat3.determinant = function (mat) {\n    var a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a10 = mat[3],\n        a11 = mat[4],\n        a12 = mat[5],\n        a20 = mat[6],\n        a21 = mat[7],\n        a22 = mat[8];\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n  };\n  /**\n   * Calculates the inverse matrix of a mat3\n   *\n   * @param {mat3} mat mat3 to calculate inverse of\n   * @param {mat3} [dest] mat3 receiving inverse matrix. If not specified result is written to mat\n   *\n   * @param {mat3} dest is specified, mat otherwise, null if matrix cannot be inverted\n   */\n\n\n  mat3.inverse = function (mat, dest) {\n    var a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a10 = mat[3],\n        a11 = mat[4],\n        a12 = mat[5],\n        a20 = mat[6],\n        a21 = mat[7],\n        a22 = mat[8],\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n        d = a00 * b01 + a01 * b11 + a02 * b21,\n        id;\n\n    if (!d) {\n      return null;\n    }\n\n    id = 1 / d;\n\n    if (!dest) {\n      dest = mat3.create();\n    }\n\n    dest[0] = b01 * id;\n    dest[1] = (-a22 * a01 + a02 * a21) * id;\n    dest[2] = (a12 * a01 - a02 * a11) * id;\n    dest[3] = b11 * id;\n    dest[4] = (a22 * a00 - a02 * a20) * id;\n    dest[5] = (-a12 * a00 + a02 * a10) * id;\n    dest[6] = b21 * id;\n    dest[7] = (-a21 * a00 + a01 * a20) * id;\n    dest[8] = (a11 * a00 - a01 * a10) * id;\n    return dest;\n  };\n  /**\n   * Performs a matrix multiplication\n   *\n   * @param {mat3} mat First operand\n   * @param {mat3} mat2 Second operand\n   * @param {mat3} [dest] mat3 receiving operation result. If not specified result is written to mat\n   *\n   * @returns {mat3} dest if specified, mat otherwise\n   */\n\n\n  mat3.multiply = function (mat, mat2, dest) {\n    if (!dest) {\n      dest = mat;\n    } // Cache the matrix values (makes for huge speed increases!)\n\n\n    var a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a10 = mat[3],\n        a11 = mat[4],\n        a12 = mat[5],\n        a20 = mat[6],\n        a21 = mat[7],\n        a22 = mat[8],\n        b00 = mat2[0],\n        b01 = mat2[1],\n        b02 = mat2[2],\n        b10 = mat2[3],\n        b11 = mat2[4],\n        b12 = mat2[5],\n        b20 = mat2[6],\n        b21 = mat2[7],\n        b22 = mat2[8];\n    dest[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    dest[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    dest[2] = b00 * a02 + b01 * a12 + b02 * a22;\n    dest[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    dest[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    dest[5] = b10 * a02 + b11 * a12 + b12 * a22;\n    dest[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    dest[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    dest[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return dest;\n  };\n  /**\n   * Transforms the vec2 according to the given mat3.\n   *\n   * @param {mat3} matrix mat3 to multiply against\n   * @param {vec2} vec    the vector to multiply\n   * @param {vec2} [dest] an optional receiving vector. If not given, vec is used.\n   *\n   * @returns {vec2} The multiplication result\n   **/\n\n\n  mat3.multiplyVec2 = function (matrix, vec, dest) {\n    if (!dest) dest = vec;\n    var x = vec[0],\n        y = vec[1];\n    dest[0] = x * matrix[0] + y * matrix[3] + matrix[6];\n    dest[1] = x * matrix[1] + y * matrix[4] + matrix[7];\n    return dest;\n  };\n  /**\n   * Transforms the vec3 according to the given mat3\n   *\n   * @param {mat3} matrix mat3 to multiply against\n   * @param {vec3} vec    the vector to multiply\n   * @param {vec3} [dest] an optional receiving vector. If not given, vec is used.\n   *\n   * @returns {vec3} The multiplication result\n   **/\n\n\n  mat3.multiplyVec3 = function (matrix, vec, dest) {\n    if (!dest) dest = vec;\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2];\n    dest[0] = x * matrix[0] + y * matrix[3] + z * matrix[6];\n    dest[1] = x * matrix[1] + y * matrix[4] + z * matrix[7];\n    dest[2] = x * matrix[2] + y * matrix[5] + z * matrix[8];\n    return dest;\n  };\n  /**\n   * Copies the values of one mat3 to another\n   *\n   * @param {mat3} mat mat3 containing values to copy\n   * @param {mat3} dest mat3 receiving copied values\n   *\n   * @returns {mat3} dest\n   */\n\n\n  mat3.set = function (mat, dest) {\n    dest[0] = mat[0];\n    dest[1] = mat[1];\n    dest[2] = mat[2];\n    dest[3] = mat[3];\n    dest[4] = mat[4];\n    dest[5] = mat[5];\n    dest[6] = mat[6];\n    dest[7] = mat[7];\n    dest[8] = mat[8];\n    return dest;\n  };\n  /**\n   * Compares two matrices for equality within a certain margin of error\n   *\n   * @param {mat3} a First matrix\n   * @param {mat3} b Second matrix\n   *\n   * @returns {Boolean} True if a is equivalent to b\n   */\n\n\n  mat3.equal = function (a, b) {\n    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON && Math.abs(a[3] - b[3]) < FLOAT_EPSILON && Math.abs(a[4] - b[4]) < FLOAT_EPSILON && Math.abs(a[5] - b[5]) < FLOAT_EPSILON && Math.abs(a[6] - b[6]) < FLOAT_EPSILON && Math.abs(a[7] - b[7]) < FLOAT_EPSILON && Math.abs(a[8] - b[8]) < FLOAT_EPSILON;\n  };\n  /**\n   * Sets a mat3 to an identity matrix\n   *\n   * @param {mat3} dest mat3 to set\n   *\n   * @returns dest if specified, otherwise a new mat3\n   */\n\n\n  mat3.identity = function (dest) {\n    if (!dest) {\n      dest = mat3.create();\n    }\n\n    dest[0] = 1;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 0;\n    dest[4] = 1;\n    dest[5] = 0;\n    dest[6] = 0;\n    dest[7] = 0;\n    dest[8] = 1;\n    return dest;\n  };\n  /**\n   * Transposes a mat3 (flips the values over the diagonal)\n   *\n   * Params:\n   * @param {mat3} mat mat3 to transpose\n   * @param {mat3} [dest] mat3 receiving transposed values. If not specified result is written to mat\n   *\n   * @returns {mat3} dest is specified, mat otherwise\n   */\n\n\n  mat3.transpose = function (mat, dest) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (!dest || mat === dest) {\n      var a01 = mat[1],\n          a02 = mat[2],\n          a12 = mat[5];\n      mat[1] = mat[3];\n      mat[2] = mat[6];\n      mat[3] = a01;\n      mat[5] = mat[7];\n      mat[6] = a02;\n      mat[7] = a12;\n      return mat;\n    }\n\n    dest[0] = mat[0];\n    dest[1] = mat[3];\n    dest[2] = mat[6];\n    dest[3] = mat[1];\n    dest[4] = mat[4];\n    dest[5] = mat[7];\n    dest[6] = mat[2];\n    dest[7] = mat[5];\n    dest[8] = mat[8];\n    return dest;\n  };\n  /**\n   * Copies the elements of a mat3 into the upper 3x3 elements of a mat4\n   *\n   * @param {mat3} mat mat3 containing values to copy\n   * @param {mat4} [dest] mat4 receiving copied values\n   *\n   * @returns {mat4} dest if specified, a new mat4 otherwise\n   */\n\n\n  mat3.toMat4 = function (mat, dest) {\n    if (!dest) {\n      dest = mat4.create();\n    }\n\n    dest[15] = 1;\n    dest[14] = 0;\n    dest[13] = 0;\n    dest[12] = 0;\n    dest[11] = 0;\n    dest[10] = mat[8];\n    dest[9] = mat[7];\n    dest[8] = mat[6];\n    dest[7] = 0;\n    dest[6] = mat[5];\n    dest[5] = mat[4];\n    dest[4] = mat[3];\n    dest[3] = 0;\n    dest[2] = mat[2];\n    dest[1] = mat[1];\n    dest[0] = mat[0];\n    return dest;\n  };\n  /**\n   * Returns a string representation of a mat3\n   *\n   * @param {mat3} mat mat3 to represent as a string\n   *\n   * @param {string} String representation of mat\n   */\n\n\n  mat3.str = function (mat) {\n    return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] + ', ' + mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] + ', ' + mat[8] + ']';\n  };\n  /**\n   * @class 4x4 Matrix\n   * @name mat4\n   */\n\n\n  var mat4 = {};\n  /**\n   * Creates a new instance of a mat4 using the default array type\n   * Any javascript array-like object containing at least 16 numeric elements can serve as a mat4\n   *\n   * @param {mat4} [mat] mat4 containing values to initialize with\n   *\n   * @returns {mat4} New mat4\n   */\n\n  mat4.create = function (mat) {\n    var dest = new MatrixArray(16);\n\n    if (mat) {\n      dest[0] = mat[0];\n      dest[1] = mat[1];\n      dest[2] = mat[2];\n      dest[3] = mat[3];\n      dest[4] = mat[4];\n      dest[5] = mat[5];\n      dest[6] = mat[6];\n      dest[7] = mat[7];\n      dest[8] = mat[8];\n      dest[9] = mat[9];\n      dest[10] = mat[10];\n      dest[11] = mat[11];\n      dest[12] = mat[12];\n      dest[13] = mat[13];\n      dest[14] = mat[14];\n      dest[15] = mat[15];\n    }\n\n    return dest;\n  };\n  /**\n   * Creates a new instance of a mat4, initializing it with the given arguments\n   *\n   * @param {number} m00\n   * @param {number} m01\n   * @param {number} m02\n   * @param {number} m03\n   * @param {number} m10\n   * @param {number} m11\n   * @param {number} m12\n   * @param {number} m13\n   * @param {number} m20\n   * @param {number} m21\n   * @param {number} m22\n   * @param {number} m23\n   * @param {number} m30\n   * @param {number} m31\n   * @param {number} m32\n   * @param {number} m33\n    * @returns {mat4} New mat4\n   */\n\n\n  mat4.createFrom = function (m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    var dest = new MatrixArray(16);\n    dest[0] = m00;\n    dest[1] = m01;\n    dest[2] = m02;\n    dest[3] = m03;\n    dest[4] = m10;\n    dest[5] = m11;\n    dest[6] = m12;\n    dest[7] = m13;\n    dest[8] = m20;\n    dest[9] = m21;\n    dest[10] = m22;\n    dest[11] = m23;\n    dest[12] = m30;\n    dest[13] = m31;\n    dest[14] = m32;\n    dest[15] = m33;\n    return dest;\n  };\n  /**\n   * Copies the values of one mat4 to another\n   *\n   * @param {mat4} mat mat4 containing values to copy\n   * @param {mat4} dest mat4 receiving copied values\n   *\n   * @returns {mat4} dest\n   */\n\n\n  mat4.set = function (mat, dest) {\n    dest[0] = mat[0];\n    dest[1] = mat[1];\n    dest[2] = mat[2];\n    dest[3] = mat[3];\n    dest[4] = mat[4];\n    dest[5] = mat[5];\n    dest[6] = mat[6];\n    dest[7] = mat[7];\n    dest[8] = mat[8];\n    dest[9] = mat[9];\n    dest[10] = mat[10];\n    dest[11] = mat[11];\n    dest[12] = mat[12];\n    dest[13] = mat[13];\n    dest[14] = mat[14];\n    dest[15] = mat[15];\n    return dest;\n  };\n  /**\n   * Compares two matrices for equality within a certain margin of error\n   *\n   * @param {mat4} a First matrix\n   * @param {mat4} b Second matrix\n   *\n   * @returns {Boolean} True if a is equivalent to b\n   */\n\n\n  mat4.equal = function (a, b) {\n    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON && Math.abs(a[3] - b[3]) < FLOAT_EPSILON && Math.abs(a[4] - b[4]) < FLOAT_EPSILON && Math.abs(a[5] - b[5]) < FLOAT_EPSILON && Math.abs(a[6] - b[6]) < FLOAT_EPSILON && Math.abs(a[7] - b[7]) < FLOAT_EPSILON && Math.abs(a[8] - b[8]) < FLOAT_EPSILON && Math.abs(a[9] - b[9]) < FLOAT_EPSILON && Math.abs(a[10] - b[10]) < FLOAT_EPSILON && Math.abs(a[11] - b[11]) < FLOAT_EPSILON && Math.abs(a[12] - b[12]) < FLOAT_EPSILON && Math.abs(a[13] - b[13]) < FLOAT_EPSILON && Math.abs(a[14] - b[14]) < FLOAT_EPSILON && Math.abs(a[15] - b[15]) < FLOAT_EPSILON;\n  };\n  /**\n   * Sets a mat4 to an identity matrix\n   *\n   * @param {mat4} dest mat4 to set\n   *\n   * @returns {mat4} dest\n   */\n\n\n  mat4.identity = function (dest) {\n    if (!dest) {\n      dest = mat4.create();\n    }\n\n    dest[0] = 1;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 0;\n    dest[4] = 0;\n    dest[5] = 1;\n    dest[6] = 0;\n    dest[7] = 0;\n    dest[8] = 0;\n    dest[9] = 0;\n    dest[10] = 1;\n    dest[11] = 0;\n    dest[12] = 0;\n    dest[13] = 0;\n    dest[14] = 0;\n    dest[15] = 1;\n    return dest;\n  };\n  /**\n   * Transposes a mat4 (flips the values over the diagonal)\n   *\n   * @param {mat4} mat mat4 to transpose\n   * @param {mat4} [dest] mat4 receiving transposed values. If not specified result is written to mat\n   *\n   * @param {mat4} dest is specified, mat otherwise\n   */\n\n\n  mat4.transpose = function (mat, dest) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (!dest || mat === dest) {\n      var a01 = mat[1],\n          a02 = mat[2],\n          a03 = mat[3],\n          a12 = mat[6],\n          a13 = mat[7],\n          a23 = mat[11];\n      mat[1] = mat[4];\n      mat[2] = mat[8];\n      mat[3] = mat[12];\n      mat[4] = a01;\n      mat[6] = mat[9];\n      mat[7] = mat[13];\n      mat[8] = a02;\n      mat[9] = a12;\n      mat[11] = mat[14];\n      mat[12] = a03;\n      mat[13] = a13;\n      mat[14] = a23;\n      return mat;\n    }\n\n    dest[0] = mat[0];\n    dest[1] = mat[4];\n    dest[2] = mat[8];\n    dest[3] = mat[12];\n    dest[4] = mat[1];\n    dest[5] = mat[5];\n    dest[6] = mat[9];\n    dest[7] = mat[13];\n    dest[8] = mat[2];\n    dest[9] = mat[6];\n    dest[10] = mat[10];\n    dest[11] = mat[14];\n    dest[12] = mat[3];\n    dest[13] = mat[7];\n    dest[14] = mat[11];\n    dest[15] = mat[15];\n    return dest;\n  };\n  /**\n   * Calculates the determinant of a mat4\n   *\n   * @param {mat4} mat mat4 to calculate determinant of\n   *\n   * @returns {number} determinant of mat\n   */\n\n\n  mat4.determinant = function (mat) {\n    // Cache the matrix values (makes for huge speed increases!)\n    var a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a03 = mat[3],\n        a10 = mat[4],\n        a11 = mat[5],\n        a12 = mat[6],\n        a13 = mat[7],\n        a20 = mat[8],\n        a21 = mat[9],\n        a22 = mat[10],\n        a23 = mat[11],\n        a30 = mat[12],\n        a31 = mat[13],\n        a32 = mat[14],\n        a33 = mat[15];\n    return a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 + a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 + a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 + a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 + a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 + a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33;\n  };\n  /**\n   * Calculates the inverse matrix of a mat4\n   *\n   * @param {mat4} mat mat4 to calculate inverse of\n   * @param {mat4} [dest] mat4 receiving inverse matrix. If not specified result is written to mat\n   *\n   * @param {mat4} dest is specified, mat otherwise, null if matrix cannot be inverted\n   */\n\n\n  mat4.inverse = function (mat, dest) {\n    if (!dest) {\n      dest = mat;\n    } // Cache the matrix values (makes for huge speed increases!)\n\n\n    var a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a03 = mat[3],\n        a10 = mat[4],\n        a11 = mat[5],\n        a12 = mat[6],\n        a13 = mat[7],\n        a20 = mat[8],\n        a21 = mat[9],\n        a22 = mat[10],\n        a23 = mat[11],\n        a30 = mat[12],\n        a31 = mat[13],\n        a32 = mat[14],\n        a33 = mat[15],\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n        d = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06,\n        invDet; // Calculate the determinant\n\n    if (!d) {\n      return null;\n    }\n\n    invDet = 1 / d;\n    dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;\n    dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;\n    dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;\n    dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;\n    dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;\n    dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;\n    dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;\n    dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;\n    dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;\n    dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;\n    dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;\n    dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;\n    dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;\n    dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;\n    dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;\n    dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;\n    return dest;\n  };\n  /**\n   * Copies the upper 3x3 elements of a mat4 into another mat4\n   *\n   * @param {mat4} mat mat4 containing values to copy\n   * @param {mat4} [dest] mat4 receiving copied values\n   *\n   * @returns {mat4} dest is specified, a new mat4 otherwise\n   */\n\n\n  mat4.toRotationMat = function (mat, dest) {\n    if (!dest) {\n      dest = mat4.create();\n    }\n\n    dest[0] = mat[0];\n    dest[1] = mat[1];\n    dest[2] = mat[2];\n    dest[3] = mat[3];\n    dest[4] = mat[4];\n    dest[5] = mat[5];\n    dest[6] = mat[6];\n    dest[7] = mat[7];\n    dest[8] = mat[8];\n    dest[9] = mat[9];\n    dest[10] = mat[10];\n    dest[11] = mat[11];\n    dest[12] = 0;\n    dest[13] = 0;\n    dest[14] = 0;\n    dest[15] = 1;\n    return dest;\n  };\n  /**\n   * Copies the upper 3x3 elements of a mat4 into a mat3\n   *\n   * @param {mat4} mat mat4 containing values to copy\n   * @param {mat3} [dest] mat3 receiving copied values\n   *\n   * @returns {mat3} dest is specified, a new mat3 otherwise\n   */\n\n\n  mat4.toMat3 = function (mat, dest) {\n    if (!dest) {\n      dest = mat3.create();\n    }\n\n    dest[0] = mat[0];\n    dest[1] = mat[1];\n    dest[2] = mat[2];\n    dest[3] = mat[4];\n    dest[4] = mat[5];\n    dest[5] = mat[6];\n    dest[6] = mat[8];\n    dest[7] = mat[9];\n    dest[8] = mat[10];\n    return dest;\n  };\n  /**\n   * Calculates the inverse of the upper 3x3 elements of a mat4 and copies the result into a mat3\n   * The resulting matrix is useful for calculating transformed normals\n   *\n   * Params:\n   * @param {mat4} mat mat4 containing values to invert and copy\n   * @param {mat3} [dest] mat3 receiving values\n   *\n   * @returns {mat3} dest is specified, a new mat3 otherwise, null if the matrix cannot be inverted\n   */\n\n\n  mat4.toInverseMat3 = function (mat, dest) {\n    // Cache the matrix values (makes for huge speed increases!)\n    var a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a10 = mat[4],\n        a11 = mat[5],\n        a12 = mat[6],\n        a20 = mat[8],\n        a21 = mat[9],\n        a22 = mat[10],\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n        d = a00 * b01 + a01 * b11 + a02 * b21,\n        id;\n\n    if (!d) {\n      return null;\n    }\n\n    id = 1 / d;\n\n    if (!dest) {\n      dest = mat3.create();\n    }\n\n    dest[0] = b01 * id;\n    dest[1] = (-a22 * a01 + a02 * a21) * id;\n    dest[2] = (a12 * a01 - a02 * a11) * id;\n    dest[3] = b11 * id;\n    dest[4] = (a22 * a00 - a02 * a20) * id;\n    dest[5] = (-a12 * a00 + a02 * a10) * id;\n    dest[6] = b21 * id;\n    dest[7] = (-a21 * a00 + a01 * a20) * id;\n    dest[8] = (a11 * a00 - a01 * a10) * id;\n    return dest;\n  };\n  /**\n   * Performs a matrix multiplication\n   *\n   * @param {mat4} mat First operand\n   * @param {mat4} mat2 Second operand\n   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n   *\n   * @returns {mat4} dest if specified, mat otherwise\n   */\n\n\n  mat4.multiply = function (mat, mat2, dest) {\n    if (!dest) {\n      dest = mat;\n    } // Cache the matrix values (makes for huge speed increases!)\n\n\n    var a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a03 = mat[3];\n    var a10 = mat[4],\n        a11 = mat[5],\n        a12 = mat[6],\n        a13 = mat[7];\n    var a20 = mat[8],\n        a21 = mat[9],\n        a22 = mat[10],\n        a23 = mat[11];\n    var a30 = mat[12],\n        a31 = mat[13],\n        a32 = mat[14],\n        a33 = mat[15]; // Cache only the current line of the second matrix\n\n    var b0 = mat2[0],\n        b1 = mat2[1],\n        b2 = mat2[2],\n        b3 = mat2[3];\n    dest[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    dest[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    dest[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    dest[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = mat2[4];\n    b1 = mat2[5];\n    b2 = mat2[6];\n    b3 = mat2[7];\n    dest[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    dest[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    dest[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    dest[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = mat2[8];\n    b1 = mat2[9];\n    b2 = mat2[10];\n    b3 = mat2[11];\n    dest[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    dest[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    dest[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    dest[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    b0 = mat2[12];\n    b1 = mat2[13];\n    b2 = mat2[14];\n    b3 = mat2[15];\n    dest[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    dest[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    dest[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    dest[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return dest;\n  };\n  /**\n   * Transforms a vec3 with the given matrix\n   * 4th vector component is implicitly '1'\n   *\n   * @param {mat4} mat mat4 to transform the vector with\n   * @param {vec3} vec vec3 to transform\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec3} dest if specified, vec otherwise\n   */\n\n\n  mat4.multiplyVec3 = function (mat, vec, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2];\n    dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];\n    dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];\n    dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];\n    return dest;\n  };\n  /**\n   * Transforms a vec4 with the given matrix\n   *\n   * @param {mat4} mat mat4 to transform the vector with\n   * @param {vec4} vec vec4 to transform\n   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec4} dest if specified, vec otherwise\n   */\n\n\n  mat4.multiplyVec4 = function (mat, vec, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2],\n        w = vec[3];\n    dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12] * w;\n    dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13] * w;\n    dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14] * w;\n    dest[3] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15] * w;\n    return dest;\n  };\n  /**\n   * Translates a matrix by the given vector\n   *\n   * @param {mat4} mat mat4 to translate\n   * @param {vec3} vec vec3 specifying the translation\n   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n   *\n   * @returns {mat4} dest if specified, mat otherwise\n   */\n\n\n  mat4.translate = function (mat, vec, dest) {\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2],\n        a00,\n        a01,\n        a02,\n        a03,\n        a10,\n        a11,\n        a12,\n        a13,\n        a20,\n        a21,\n        a22,\n        a23;\n\n    if (!dest || mat === dest) {\n      mat[12] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];\n      mat[13] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];\n      mat[14] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];\n      mat[15] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15];\n      return mat;\n    }\n\n    a00 = mat[0];\n    a01 = mat[1];\n    a02 = mat[2];\n    a03 = mat[3];\n    a10 = mat[4];\n    a11 = mat[5];\n    a12 = mat[6];\n    a13 = mat[7];\n    a20 = mat[8];\n    a21 = mat[9];\n    a22 = mat[10];\n    a23 = mat[11];\n    dest[0] = a00;\n    dest[1] = a01;\n    dest[2] = a02;\n    dest[3] = a03;\n    dest[4] = a10;\n    dest[5] = a11;\n    dest[6] = a12;\n    dest[7] = a13;\n    dest[8] = a20;\n    dest[9] = a21;\n    dest[10] = a22;\n    dest[11] = a23;\n    dest[12] = a00 * x + a10 * y + a20 * z + mat[12];\n    dest[13] = a01 * x + a11 * y + a21 * z + mat[13];\n    dest[14] = a02 * x + a12 * y + a22 * z + mat[14];\n    dest[15] = a03 * x + a13 * y + a23 * z + mat[15];\n    return dest;\n  };\n  /**\n   * Scales a matrix by the given vector\n   *\n   * @param {mat4} mat mat4 to scale\n   * @param {vec3} vec vec3 specifying the scale for each axis\n   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n   *\n   * @param {mat4} dest if specified, mat otherwise\n   */\n\n\n  mat4.scale = function (mat, vec, dest) {\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2];\n\n    if (!dest || mat === dest) {\n      mat[0] *= x;\n      mat[1] *= x;\n      mat[2] *= x;\n      mat[3] *= x;\n      mat[4] *= y;\n      mat[5] *= y;\n      mat[6] *= y;\n      mat[7] *= y;\n      mat[8] *= z;\n      mat[9] *= z;\n      mat[10] *= z;\n      mat[11] *= z;\n      return mat;\n    }\n\n    dest[0] = mat[0] * x;\n    dest[1] = mat[1] * x;\n    dest[2] = mat[2] * x;\n    dest[3] = mat[3] * x;\n    dest[4] = mat[4] * y;\n    dest[5] = mat[5] * y;\n    dest[6] = mat[6] * y;\n    dest[7] = mat[7] * y;\n    dest[8] = mat[8] * z;\n    dest[9] = mat[9] * z;\n    dest[10] = mat[10] * z;\n    dest[11] = mat[11] * z;\n    dest[12] = mat[12];\n    dest[13] = mat[13];\n    dest[14] = mat[14];\n    dest[15] = mat[15];\n    return dest;\n  };\n  /**\n   * Rotates a matrix by the given angle around the specified axis\n   * If rotating around a primary axis (X,Y,Z) one of the specialized rotation functions should be used instead for performance\n   *\n   * @param {mat4} mat mat4 to rotate\n   * @param {number} angle Angle (in radians) to rotate\n   * @param {vec3} axis vec3 representing the axis to rotate around\n   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n   *\n   * @returns {mat4} dest if specified, mat otherwise\n   */\n\n\n  mat4.rotate = function (mat, angle, axis, dest) {\n    var x = axis[0],\n        y = axis[1],\n        z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s,\n        c,\n        t,\n        a00,\n        a01,\n        a02,\n        a03,\n        a10,\n        a11,\n        a12,\n        a13,\n        a20,\n        a21,\n        a22,\n        a23,\n        b00,\n        b01,\n        b02,\n        b10,\n        b11,\n        b12,\n        b20,\n        b21,\n        b22;\n\n    if (!len) {\n      return null;\n    }\n\n    if (len !== 1) {\n      len = 1 / len;\n      x *= len;\n      y *= len;\n      z *= len;\n    }\n\n    s = Math.sin(angle);\n    c = Math.cos(angle);\n    t = 1 - c;\n    a00 = mat[0];\n    a01 = mat[1];\n    a02 = mat[2];\n    a03 = mat[3];\n    a10 = mat[4];\n    a11 = mat[5];\n    a12 = mat[6];\n    a13 = mat[7];\n    a20 = mat[8];\n    a21 = mat[9];\n    a22 = mat[10];\n    a23 = mat[11]; // Construct the elements of the rotation matrix\n\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n\n    if (!dest) {\n      dest = mat;\n    } else if (mat !== dest) {\n      // If the source and destination differ, copy the unchanged last row\n      dest[12] = mat[12];\n      dest[13] = mat[13];\n      dest[14] = mat[14];\n      dest[15] = mat[15];\n    } // Perform rotation-specific matrix multiplication\n\n\n    dest[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    dest[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    dest[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    dest[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    dest[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    dest[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    dest[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    dest[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    dest[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    dest[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    dest[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    dest[11] = a03 * b20 + a13 * b21 + a23 * b22;\n    return dest;\n  };\n  /**\n   * Rotates a matrix by the given angle around the X axis\n   *\n   * @param {mat4} mat mat4 to rotate\n   * @param {number} angle Angle (in radians) to rotate\n   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n   *\n   * @returns {mat4} dest if specified, mat otherwise\n   */\n\n\n  mat4.rotateX = function (mat, angle, dest) {\n    var s = Math.sin(angle),\n        c = Math.cos(angle),\n        a10 = mat[4],\n        a11 = mat[5],\n        a12 = mat[6],\n        a13 = mat[7],\n        a20 = mat[8],\n        a21 = mat[9],\n        a22 = mat[10],\n        a23 = mat[11];\n\n    if (!dest) {\n      dest = mat;\n    } else if (mat !== dest) {\n      // If the source and destination differ, copy the unchanged rows\n      dest[0] = mat[0];\n      dest[1] = mat[1];\n      dest[2] = mat[2];\n      dest[3] = mat[3];\n      dest[12] = mat[12];\n      dest[13] = mat[13];\n      dest[14] = mat[14];\n      dest[15] = mat[15];\n    } // Perform axis-specific matrix multiplication\n\n\n    dest[4] = a10 * c + a20 * s;\n    dest[5] = a11 * c + a21 * s;\n    dest[6] = a12 * c + a22 * s;\n    dest[7] = a13 * c + a23 * s;\n    dest[8] = a10 * -s + a20 * c;\n    dest[9] = a11 * -s + a21 * c;\n    dest[10] = a12 * -s + a22 * c;\n    dest[11] = a13 * -s + a23 * c;\n    return dest;\n  };\n  /**\n   * Rotates a matrix by the given angle around the Y axis\n   *\n   * @param {mat4} mat mat4 to rotate\n   * @param {number} angle Angle (in radians) to rotate\n   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n   *\n   * @returns {mat4} dest if specified, mat otherwise\n   */\n\n\n  mat4.rotateY = function (mat, angle, dest) {\n    var s = Math.sin(angle),\n        c = Math.cos(angle),\n        a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a03 = mat[3],\n        a20 = mat[8],\n        a21 = mat[9],\n        a22 = mat[10],\n        a23 = mat[11];\n\n    if (!dest) {\n      dest = mat;\n    } else if (mat !== dest) {\n      // If the source and destination differ, copy the unchanged rows\n      dest[4] = mat[4];\n      dest[5] = mat[5];\n      dest[6] = mat[6];\n      dest[7] = mat[7];\n      dest[12] = mat[12];\n      dest[13] = mat[13];\n      dest[14] = mat[14];\n      dest[15] = mat[15];\n    } // Perform axis-specific matrix multiplication\n\n\n    dest[0] = a00 * c + a20 * -s;\n    dest[1] = a01 * c + a21 * -s;\n    dest[2] = a02 * c + a22 * -s;\n    dest[3] = a03 * c + a23 * -s;\n    dest[8] = a00 * s + a20 * c;\n    dest[9] = a01 * s + a21 * c;\n    dest[10] = a02 * s + a22 * c;\n    dest[11] = a03 * s + a23 * c;\n    return dest;\n  };\n  /**\n   * Rotates a matrix by the given angle around the Z axis\n   *\n   * @param {mat4} mat mat4 to rotate\n   * @param {number} angle Angle (in radians) to rotate\n   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat\n   *\n   * @returns {mat4} dest if specified, mat otherwise\n   */\n\n\n  mat4.rotateZ = function (mat, angle, dest) {\n    var s = Math.sin(angle),\n        c = Math.cos(angle),\n        a00 = mat[0],\n        a01 = mat[1],\n        a02 = mat[2],\n        a03 = mat[3],\n        a10 = mat[4],\n        a11 = mat[5],\n        a12 = mat[6],\n        a13 = mat[7];\n\n    if (!dest) {\n      dest = mat;\n    } else if (mat !== dest) {\n      // If the source and destination differ, copy the unchanged last row\n      dest[8] = mat[8];\n      dest[9] = mat[9];\n      dest[10] = mat[10];\n      dest[11] = mat[11];\n      dest[12] = mat[12];\n      dest[13] = mat[13];\n      dest[14] = mat[14];\n      dest[15] = mat[15];\n    } // Perform axis-specific matrix multiplication\n\n\n    dest[0] = a00 * c + a10 * s;\n    dest[1] = a01 * c + a11 * s;\n    dest[2] = a02 * c + a12 * s;\n    dest[3] = a03 * c + a13 * s;\n    dest[4] = a00 * -s + a10 * c;\n    dest[5] = a01 * -s + a11 * c;\n    dest[6] = a02 * -s + a12 * c;\n    dest[7] = a03 * -s + a13 * c;\n    return dest;\n  };\n  /**\n   * Generates a frustum matrix with the given bounds\n   *\n   * @param {number} left Left bound of the frustum\n   * @param {number} right Right bound of the frustum\n   * @param {number} bottom Bottom bound of the frustum\n   * @param {number} top Top bound of the frustum\n   * @param {number} near Near bound of the frustum\n   * @param {number} far Far bound of the frustum\n   * @param {mat4} [dest] mat4 frustum matrix will be written into\n   *\n   * @returns {mat4} dest if specified, a new mat4 otherwise\n   */\n\n\n  mat4.frustum = function (left, right, bottom, top, near, far, dest) {\n    if (!dest) {\n      dest = mat4.create();\n    }\n\n    var rl = right - left,\n        tb = top - bottom,\n        fn = far - near;\n    dest[0] = near * 2 / rl;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 0;\n    dest[4] = 0;\n    dest[5] = near * 2 / tb;\n    dest[6] = 0;\n    dest[7] = 0;\n    dest[8] = (right + left) / rl;\n    dest[9] = (top + bottom) / tb;\n    dest[10] = -(far + near) / fn;\n    dest[11] = -1;\n    dest[12] = 0;\n    dest[13] = 0;\n    dest[14] = -(far * near * 2) / fn;\n    dest[15] = 0;\n    return dest;\n  };\n  /**\n   * Generates a perspective projection matrix with the given bounds\n   *\n   * @param {number} fovy Vertical field of view\n   * @param {number} aspect Aspect ratio. typically viewport width/height\n   * @param {number} near Near bound of the frustum\n   * @param {number} far Far bound of the frustum\n   * @param {mat4} [dest] mat4 frustum matrix will be written into\n   *\n   * @returns {mat4} dest if specified, a new mat4 otherwise\n   */\n\n\n  mat4.perspective = function (fovy, aspect, near, far, dest) {\n    var top = near * Math.tan(fovy * Math.PI / 360.0),\n        right = top * aspect;\n    return mat4.frustum(-right, right, -top, top, near, far, dest);\n  };\n  /**\n   * Generates a orthogonal projection matrix with the given bounds\n   *\n   * @param {number} left Left bound of the frustum\n   * @param {number} right Right bound of the frustum\n   * @param {number} bottom Bottom bound of the frustum\n   * @param {number} top Top bound of the frustum\n   * @param {number} near Near bound of the frustum\n   * @param {number} far Far bound of the frustum\n   * @param {mat4} [dest] mat4 frustum matrix will be written into\n   *\n   * @returns {mat4} dest if specified, a new mat4 otherwise\n   */\n\n\n  mat4.ortho = function (left, right, bottom, top, near, far, dest) {\n    if (!dest) {\n      dest = mat4.create();\n    }\n\n    var rl = right - left,\n        tb = top - bottom,\n        fn = far - near;\n    dest[0] = 2 / rl;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 0;\n    dest[4] = 0;\n    dest[5] = 2 / tb;\n    dest[6] = 0;\n    dest[7] = 0;\n    dest[8] = 0;\n    dest[9] = 0;\n    dest[10] = -2 / fn;\n    dest[11] = 0;\n    dest[12] = -(left + right) / rl;\n    dest[13] = -(top + bottom) / tb;\n    dest[14] = -(far + near) / fn;\n    dest[15] = 1;\n    return dest;\n  };\n  /**\n   * Generates a look-at matrix with the given eye position, focal point, and up axis\n   *\n   * @param {vec3} eye Position of the viewer\n   * @param {vec3} center Point the viewer is looking at\n   * @param {vec3} up vec3 pointing \"up\"\n   * @param {mat4} [dest] mat4 frustum matrix will be written into\n   *\n   * @returns {mat4} dest if specified, a new mat4 otherwise\n   */\n\n\n  mat4.lookAt = function (eye, center, up, dest) {\n    if (!dest) {\n      dest = mat4.create();\n    }\n\n    var x0,\n        x1,\n        x2,\n        y0,\n        y1,\n        y2,\n        z0,\n        z1,\n        z2,\n        len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (eyex === centerx && eyey === centery && eyez === centerz) {\n      return mat4.identity(dest);\n    } //vec3.direction(eye, center, z);\n\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz; // normalize (no check needed for 0 because of early return)\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len; //vec3.normalize(vec3.cross(up, z, x));\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n\n    if (!len) {\n      x0 = 0;\n      x1 = 0;\n      x2 = 0;\n    } else {\n      len = 1 / len;\n      x0 *= len;\n      x1 *= len;\n      x2 *= len;\n    } //vec3.normalize(vec3.cross(z, x, y));\n\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n\n    if (!len) {\n      y0 = 0;\n      y1 = 0;\n      y2 = 0;\n    } else {\n      len = 1 / len;\n      y0 *= len;\n      y1 *= len;\n      y2 *= len;\n    }\n\n    dest[0] = x0;\n    dest[1] = y0;\n    dest[2] = z0;\n    dest[3] = 0;\n    dest[4] = x1;\n    dest[5] = y1;\n    dest[6] = z1;\n    dest[7] = 0;\n    dest[8] = x2;\n    dest[9] = y2;\n    dest[10] = z2;\n    dest[11] = 0;\n    dest[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    dest[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    dest[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    dest[15] = 1;\n    return dest;\n  };\n  /**\n   * Creates a matrix from a quaternion rotation and vector translation\n   * This is equivalent to (but much faster than):\n   *\n   *     mat4.identity(dest);\n   *     mat4.translate(dest, vec);\n   *     var quatMat = mat4.create();\n   *     quat4.toMat4(quat, quatMat);\n   *     mat4.multiply(dest, quatMat);\n   *\n   * @param {quat4} quat Rotation quaternion\n   * @param {vec3} vec Translation vector\n   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to a new mat4\n   *\n   * @returns {mat4} dest if specified, a new mat4 otherwise\n   */\n\n\n  mat4.fromRotationTranslation = function (quat, vec, dest) {\n    if (!dest) {\n      dest = mat4.create();\n    } // Quaternion math\n\n\n    var x = quat[0],\n        y = quat[1],\n        z = quat[2],\n        w = quat[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n    dest[0] = 1 - (yy + zz);\n    dest[1] = xy + wz;\n    dest[2] = xz - wy;\n    dest[3] = 0;\n    dest[4] = xy - wz;\n    dest[5] = 1 - (xx + zz);\n    dest[6] = yz + wx;\n    dest[7] = 0;\n    dest[8] = xz + wy;\n    dest[9] = yz - wx;\n    dest[10] = 1 - (xx + yy);\n    dest[11] = 0;\n    dest[12] = vec[0];\n    dest[13] = vec[1];\n    dest[14] = vec[2];\n    dest[15] = 1;\n    return dest;\n  };\n  /**\n   * Returns a string representation of a mat4\n   *\n   * @param {mat4} mat mat4 to represent as a string\n   *\n   * @returns {string} String representation of mat\n   */\n\n\n  mat4.str = function (mat) {\n    return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] + ', ' + mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] + ', ' + mat[8] + ', ' + mat[9] + ', ' + mat[10] + ', ' + mat[11] + ', ' + mat[12] + ', ' + mat[13] + ', ' + mat[14] + ', ' + mat[15] + ']';\n  };\n  /**\n   * @class Quaternion\n   * @name quat4\n   */\n\n\n  var quat4 = {};\n  /**\n   * Creates a new instance of a quat4 using the default array type\n   * Any javascript array containing at least 4 numeric elements can serve as a quat4\n   *\n   * @param {quat4} [quat] quat4 containing values to initialize with\n   *\n   * @returns {quat4} New quat4\n   */\n\n  quat4.create = function (quat) {\n    var dest = new MatrixArray(4);\n\n    if (quat) {\n      dest[0] = quat[0];\n      dest[1] = quat[1];\n      dest[2] = quat[2];\n      dest[3] = quat[3];\n    } else {\n      dest[0] = dest[1] = dest[2] = dest[3] = 0;\n    }\n\n    return dest;\n  };\n  /**\n   * Creates a new instance of a quat4, initializing it with the given arguments\n   *\n   * @param {number} x X value\n   * @param {number} y Y value\n   * @param {number} z Z value\n   * @param {number} w W value\n    * @returns {quat4} New quat4\n   */\n\n\n  quat4.createFrom = function (x, y, z, w) {\n    var dest = new MatrixArray(4);\n    dest[0] = x;\n    dest[1] = y;\n    dest[2] = z;\n    dest[3] = w;\n    return dest;\n  };\n  /**\n   * Copies the values of one quat4 to another\n   *\n   * @param {quat4} quat quat4 containing values to copy\n   * @param {quat4} dest quat4 receiving copied values\n   *\n   * @returns {quat4} dest\n   */\n\n\n  quat4.set = function (quat, dest) {\n    dest[0] = quat[0];\n    dest[1] = quat[1];\n    dest[2] = quat[2];\n    dest[3] = quat[3];\n    return dest;\n  };\n  /**\n   * Compares two quaternions for equality within a certain margin of error\n   *\n   * @param {quat4} a First vector\n   * @param {quat4} b Second vector\n   *\n   * @returns {Boolean} True if a is equivalent to b\n   */\n\n\n  quat4.equal = function (a, b) {\n    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON && Math.abs(a[3] - b[3]) < FLOAT_EPSILON;\n  };\n  /**\n   * Creates a new identity Quat4\n   *\n   * @param {quat4} [dest] quat4 receiving copied values\n   *\n   * @returns {quat4} dest is specified, new quat4 otherwise\n   */\n\n\n  quat4.identity = function (dest) {\n    if (!dest) {\n      dest = quat4.create();\n    }\n\n    dest[0] = 0;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 1;\n    return dest;\n  };\n\n  var identityQuat4 = quat4.identity();\n  /**\n   * Calculates the W component of a quat4 from the X, Y, and Z components.\n   * Assumes that quaternion is 1 unit in length.\n   * Any existing W component will be ignored.\n   *\n   * @param {quat4} quat quat4 to calculate W component of\n   * @param {quat4} [dest] quat4 receiving calculated values. If not specified result is written to quat\n   *\n   * @returns {quat4} dest if specified, quat otherwise\n   */\n\n  quat4.calculateW = function (quat, dest) {\n    var x = quat[0],\n        y = quat[1],\n        z = quat[2];\n\n    if (!dest || quat === dest) {\n      quat[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n      return quat;\n    }\n\n    dest[0] = x;\n    dest[1] = y;\n    dest[2] = z;\n    dest[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return dest;\n  };\n  /**\n   * Calculates the dot product of two quaternions\n   *\n   * @param {quat4} quat First operand\n   * @param {quat4} quat2 Second operand\n   *\n   * @return {number} Dot product of quat and quat2\n   */\n\n\n  quat4.dot = function (quat, quat2) {\n    return quat[0] * quat2[0] + quat[1] * quat2[1] + quat[2] * quat2[2] + quat[3] * quat2[3];\n  };\n  /**\n   * Calculates the inverse of a quat4\n   *\n   * @param {quat4} quat quat4 to calculate inverse of\n   * @param {quat4} [dest] quat4 receiving inverse values. If not specified result is written to quat\n   *\n   * @returns {quat4} dest if specified, quat otherwise\n   */\n\n\n  quat4.inverse = function (quat, dest) {\n    var q0 = quat[0],\n        q1 = quat[1],\n        q2 = quat[2],\n        q3 = quat[3],\n        dot = q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3,\n        invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    if (!dest || quat === dest) {\n      quat[0] *= -invDot;\n      quat[1] *= -invDot;\n      quat[2] *= -invDot;\n      quat[3] *= invDot;\n      return quat;\n    }\n\n    dest[0] = -quat[0] * invDot;\n    dest[1] = -quat[1] * invDot;\n    dest[2] = -quat[2] * invDot;\n    dest[3] = quat[3] * invDot;\n    return dest;\n  };\n  /**\n   * Calculates the conjugate of a quat4\n   * If the quaternion is normalized, this function is faster than quat4.inverse and produces the same result.\n   *\n   * @param {quat4} quat quat4 to calculate conjugate of\n   * @param {quat4} [dest] quat4 receiving conjugate values. If not specified result is written to quat\n   *\n   * @returns {quat4} dest if specified, quat otherwise\n   */\n\n\n  quat4.conjugate = function (quat, dest) {\n    if (!dest || quat === dest) {\n      quat[0] *= -1;\n      quat[1] *= -1;\n      quat[2] *= -1;\n      return quat;\n    }\n\n    dest[0] = -quat[0];\n    dest[1] = -quat[1];\n    dest[2] = -quat[2];\n    dest[3] = quat[3];\n    return dest;\n  };\n  /**\n   * Calculates the length of a quat4\n   *\n   * Params:\n   * @param {quat4} quat quat4 to calculate length of\n   *\n   * @returns Length of quat\n   */\n\n\n  quat4.length = function (quat) {\n    var x = quat[0],\n        y = quat[1],\n        z = quat[2],\n        w = quat[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  };\n  /**\n   * Generates a unit quaternion of the same direction as the provided quat4\n   * If quaternion length is 0, returns [0, 0, 0, 0]\n   *\n   * @param {quat4} quat quat4 to normalize\n   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat\n   *\n   * @returns {quat4} dest if specified, quat otherwise\n   */\n\n\n  quat4.normalize = function (quat, dest) {\n    if (!dest) {\n      dest = quat;\n    }\n\n    var x = quat[0],\n        y = quat[1],\n        z = quat[2],\n        w = quat[3],\n        len = Math.sqrt(x * x + y * y + z * z + w * w);\n\n    if (len === 0) {\n      dest[0] = 0;\n      dest[1] = 0;\n      dest[2] = 0;\n      dest[3] = 0;\n      return dest;\n    }\n\n    len = 1 / len;\n    dest[0] = x * len;\n    dest[1] = y * len;\n    dest[2] = z * len;\n    dest[3] = w * len;\n    return dest;\n  };\n  /**\n   * Performs quaternion addition\n   *\n   * @param {quat4} quat First operand\n   * @param {quat4} quat2 Second operand\n   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat\n   *\n   * @returns {quat4} dest if specified, quat otherwise\n   */\n\n\n  quat4.add = function (quat, quat2, dest) {\n    if (!dest || quat === dest) {\n      quat[0] += quat2[0];\n      quat[1] += quat2[1];\n      quat[2] += quat2[2];\n      quat[3] += quat2[3];\n      return quat;\n    }\n\n    dest[0] = quat[0] + quat2[0];\n    dest[1] = quat[1] + quat2[1];\n    dest[2] = quat[2] + quat2[2];\n    dest[3] = quat[3] + quat2[3];\n    return dest;\n  };\n  /**\n   * Performs a quaternion multiplication\n   *\n   * @param {quat4} quat First operand\n   * @param {quat4} quat2 Second operand\n   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat\n   *\n   * @returns {quat4} dest if specified, quat otherwise\n   */\n\n\n  quat4.multiply = function (quat, quat2, dest) {\n    if (!dest) {\n      dest = quat;\n    }\n\n    var qax = quat[0],\n        qay = quat[1],\n        qaz = quat[2],\n        qaw = quat[3],\n        qbx = quat2[0],\n        qby = quat2[1],\n        qbz = quat2[2],\n        qbw = quat2[3];\n    dest[0] = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n    dest[1] = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n    dest[2] = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n    dest[3] = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n    return dest;\n  };\n  /**\n   * Transforms a vec3 with the given quaternion\n   *\n   * @param {quat4} quat quat4 to transform the vector with\n   * @param {vec3} vec vec3 to transform\n   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec\n   *\n   * @returns dest if specified, vec otherwise\n   */\n\n\n  quat4.multiplyVec3 = function (quat, vec, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2],\n        qx = quat[0],\n        qy = quat[1],\n        qz = quat[2],\n        qw = quat[3],\n        // calculate quat * vec\n    ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n    dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return dest;\n  };\n  /**\n   * Multiplies the components of a quaternion by a scalar value\n   *\n   * @param {quat4} quat to scale\n   * @param {number} val Value to scale by\n   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat\n   *\n   * @returns {quat4} dest if specified, quat otherwise\n   */\n\n\n  quat4.scale = function (quat, val, dest) {\n    if (!dest || quat === dest) {\n      quat[0] *= val;\n      quat[1] *= val;\n      quat[2] *= val;\n      quat[3] *= val;\n      return quat;\n    }\n\n    dest[0] = quat[0] * val;\n    dest[1] = quat[1] * val;\n    dest[2] = quat[2] * val;\n    dest[3] = quat[3] * val;\n    return dest;\n  };\n  /**\n   * Calculates a 3x3 matrix from the given quat4\n   *\n   * @param {quat4} quat quat4 to create matrix from\n   * @param {mat3} [dest] mat3 receiving operation result\n   *\n   * @returns {mat3} dest if specified, a new mat3 otherwise\n   */\n\n\n  quat4.toMat3 = function (quat, dest) {\n    if (!dest) {\n      dest = mat3.create();\n    }\n\n    var x = quat[0],\n        y = quat[1],\n        z = quat[2],\n        w = quat[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n    dest[0] = 1 - (yy + zz);\n    dest[1] = xy + wz;\n    dest[2] = xz - wy;\n    dest[3] = xy - wz;\n    dest[4] = 1 - (xx + zz);\n    dest[5] = yz + wx;\n    dest[6] = xz + wy;\n    dest[7] = yz - wx;\n    dest[8] = 1 - (xx + yy);\n    return dest;\n  };\n  /**\n   * Calculates a 4x4 matrix from the given quat4\n   *\n   * @param {quat4} quat quat4 to create matrix from\n   * @param {mat4} [dest] mat4 receiving operation result\n   *\n   * @returns {mat4} dest if specified, a new mat4 otherwise\n   */\n\n\n  quat4.toMat4 = function (quat, dest) {\n    if (!dest) {\n      dest = mat4.create();\n    }\n\n    var x = quat[0],\n        y = quat[1],\n        z = quat[2],\n        w = quat[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n    dest[0] = 1 - (yy + zz);\n    dest[1] = xy + wz;\n    dest[2] = xz - wy;\n    dest[3] = 0;\n    dest[4] = xy - wz;\n    dest[5] = 1 - (xx + zz);\n    dest[6] = yz + wx;\n    dest[7] = 0;\n    dest[8] = xz + wy;\n    dest[9] = yz - wx;\n    dest[10] = 1 - (xx + yy);\n    dest[11] = 0;\n    dest[12] = 0;\n    dest[13] = 0;\n    dest[14] = 0;\n    dest[15] = 1;\n    return dest;\n  };\n  /**\n   * Performs a spherical linear interpolation between two quat4\n   *\n   * @param {quat4} quat First quaternion\n   * @param {quat4} quat2 Second quaternion\n   * @param {number} slerp Interpolation amount between the two inputs\n   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat\n   *\n   * @returns {quat4} dest if specified, quat otherwise\n   */\n\n\n  quat4.slerp = function (quat, quat2, slerp, dest) {\n    if (!dest) {\n      dest = quat;\n    }\n\n    var cosHalfTheta = quat[0] * quat2[0] + quat[1] * quat2[1] + quat[2] * quat2[2] + quat[3] * quat2[3],\n        halfTheta,\n        sinHalfTheta,\n        ratioA,\n        ratioB;\n\n    if (Math.abs(cosHalfTheta) >= 1.0) {\n      if (dest !== quat) {\n        dest[0] = quat[0];\n        dest[1] = quat[1];\n        dest[2] = quat[2];\n        dest[3] = quat[3];\n      }\n\n      return dest;\n    }\n\n    halfTheta = Math.acos(cosHalfTheta);\n    sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);\n\n    if (Math.abs(sinHalfTheta) < 0.001) {\n      dest[0] = quat[0] * 0.5 + quat2[0] * 0.5;\n      dest[1] = quat[1] * 0.5 + quat2[1] * 0.5;\n      dest[2] = quat[2] * 0.5 + quat2[2] * 0.5;\n      dest[3] = quat[3] * 0.5 + quat2[3] * 0.5;\n      return dest;\n    }\n\n    ratioA = Math.sin((1 - slerp) * halfTheta) / sinHalfTheta;\n    ratioB = Math.sin(slerp * halfTheta) / sinHalfTheta;\n    dest[0] = quat[0] * ratioA + quat2[0] * ratioB;\n    dest[1] = quat[1] * ratioA + quat2[1] * ratioB;\n    dest[2] = quat[2] * ratioA + quat2[2] * ratioB;\n    dest[3] = quat[3] * ratioA + quat2[3] * ratioB;\n    return dest;\n  };\n  /**\n   * Creates a quaternion from the given 3x3 rotation matrix.\n   * If dest is omitted, a new quaternion will be created.\n   *\n   * @param {mat3}  mat    the rotation matrix\n   * @param {quat4} [dest] an optional receiving quaternion\n   *\n   * @returns {quat4} the quaternion constructed from the rotation matrix\n   *\n   */\n\n\n  quat4.fromRotationMatrix = function (mat, dest) {\n    if (!dest) dest = quat4.create(); // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n\n    var fTrace = mat[0] + mat[4] + mat[8];\n    var fRoot;\n\n    if (fTrace > 0.0) {\n      // |w| > 1/2, may as well choose w > 1/2\n      fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n      dest[3] = 0.5 * fRoot;\n      fRoot = 0.5 / fRoot; // 1/(4w)\n\n      dest[0] = (mat[7] - mat[5]) * fRoot;\n      dest[1] = (mat[2] - mat[6]) * fRoot;\n      dest[2] = (mat[3] - mat[1]) * fRoot;\n    } else {\n      // |w| <= 1/2\n      var s_iNext = quat4.fromRotationMatrix.s_iNext = quat4.fromRotationMatrix.s_iNext || [1, 2, 0];\n      var i = 0;\n      if (mat[4] > mat[0]) i = 1;\n      if (mat[8] > mat[i * 3 + i]) i = 2;\n      var j = s_iNext[i];\n      var k = s_iNext[j];\n      fRoot = Math.sqrt(mat[i * 3 + i] - mat[j * 3 + j] - mat[k * 3 + k] + 1.0);\n      dest[i] = 0.5 * fRoot;\n      fRoot = 0.5 / fRoot;\n      dest[3] = (mat[k * 3 + j] - mat[j * 3 + k]) * fRoot;\n      dest[j] = (mat[j * 3 + i] + mat[i * 3 + j]) * fRoot;\n      dest[k] = (mat[k * 3 + i] + mat[i * 3 + k]) * fRoot;\n    }\n\n    return dest;\n  };\n  /**\n   * Alias. See the description for quat4.fromRotationMatrix().\n   */\n\n\n  mat3.toQuat4 = quat4.fromRotationMatrix;\n\n  (function () {\n    var mat = mat3.create();\n    /**\n     * Creates a quaternion from the 3 given vectors. They must be perpendicular\n     * to one another and represent the X, Y and Z axes.\n     *\n     * If dest is omitted, a new quat4 will be created.\n     *\n     * Example: The default OpenGL orientation has a view vector [0, 0, -1],\n     * right vector [1, 0, 0], and up vector [0, 1, 0]. A quaternion representing\n     * this orientation could be constructed with:\n     *\n     *   quat = quat4.fromAxes([0, 0, -1], [1, 0, 0], [0, 1, 0], quat4.create());\n     *\n     * @param {vec3}  view   the view vector, or direction the object is pointing in\n     * @param {vec3}  right  the right vector, or direction to the \"right\" of the object\n     * @param {vec3}  up     the up vector, or direction towards the object's \"up\"\n     * @param {quat4} [dest] an optional receiving quat4\n     *\n     * @returns {quat4} dest\n     **/\n\n    quat4.fromAxes = function (view, right, up, dest) {\n      mat[0] = right[0];\n      mat[3] = right[1];\n      mat[6] = right[2];\n      mat[1] = up[0];\n      mat[4] = up[1];\n      mat[7] = up[2];\n      mat[2] = view[0];\n      mat[5] = view[1];\n      mat[8] = view[2];\n      return quat4.fromRotationMatrix(mat, dest);\n    };\n  })();\n  /**\n   * Sets a quat4 to the Identity and returns it.\n   *\n   * @param {quat4} [dest] quat4 to set. If omitted, a\n   * new quat4 will be created.\n   *\n   * @returns {quat4} dest\n   */\n\n\n  quat4.identity = function (dest) {\n    if (!dest) dest = quat4.create();\n    dest[0] = 0;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 1;\n    return dest;\n  };\n  /**\n   * Sets a quat4 from the given angle and rotation axis,\n   * then returns it. If dest is not given, a new quat4 is created.\n   *\n   * @param {Number} angle  the angle in radians\n   * @param {vec3}   axis   the axis around which to rotate\n   * @param {quat4}  [dest] the optional quat4 to store the result\n   *\n   * @returns {quat4} dest\n   **/\n\n\n  quat4.fromAngleAxis = function (angle, axis, dest) {\n    // The quaternion representing the rotation is\n    //   q = cos(A/2)+sin(A/2)*(x*i+y*j+z*k)\n    if (!dest) dest = quat4.create();\n    var half = angle * 0.5;\n    var s = Math.sin(half);\n    dest[3] = Math.cos(half);\n    dest[0] = s * axis[0];\n    dest[1] = s * axis[1];\n    dest[2] = s * axis[2];\n    return dest;\n  };\n  /**\n   * Stores the angle and axis in a vec4, where the XYZ components represent\n   * the axis and the W (4th) component is the angle in radians.\n   *\n   * If dest is not given, src will be modified in place and returned, after\n   * which it should not be considered not a quaternion (just an axis and angle).\n   *\n   * @param {quat4} quat   the quaternion whose angle and axis to store\n   * @param {vec4}  [dest] the optional vec4 to receive the data\n   *\n   * @returns {vec4} dest\n   */\n\n\n  quat4.toAngleAxis = function (src, dest) {\n    if (!dest) dest = src; // The quaternion representing the rotation is\n    //   q = cos(A/2)+sin(A/2)*(x*i+y*j+z*k)\n\n    var sqrlen = src[0] * src[0] + src[1] * src[1] + src[2] * src[2];\n\n    if (sqrlen > 0) {\n      dest[3] = 2 * Math.acos(src[3]);\n      var invlen = glMath.invsqrt(sqrlen);\n      dest[0] = src[0] * invlen;\n      dest[1] = src[1] * invlen;\n      dest[2] = src[2] * invlen;\n    } else {\n      // angle is 0 (mod 2*pi), so any axis will do\n      dest[3] = 0;\n      dest[0] = 1;\n      dest[1] = 0;\n      dest[2] = 0;\n    }\n\n    return dest;\n  };\n  /**\n   * Returns a string representation of a quaternion\n   *\n   * @param {quat4} quat quat4 to represent as a string\n   *\n   * @returns {string} String representation of quat\n   */\n\n\n  quat4.str = function (quat) {\n    return '[' + quat[0] + ', ' + quat[1] + ', ' + quat[2] + ', ' + quat[3] + ']';\n  };\n  /**\n   * @class 2 Dimensional Vector\n   * @name vec2\n   */\n\n\n  var vec2 = {};\n  /**\n   * Creates a new vec2, initializing it from vec if vec\n   * is given.\n   *\n   * @param {vec2} [vec] the vector's initial contents\n   * @returns {vec2} a new 2D vector\n   */\n\n  vec2.create = function (vec) {\n    var dest = new MatrixArray(2);\n\n    if (vec) {\n      dest[0] = vec[0];\n      dest[1] = vec[1];\n    } else {\n      dest[0] = 0;\n      dest[1] = 0;\n    }\n\n    return dest;\n  };\n  /**\n   * Creates a new instance of a vec2, initializing it with the given arguments\n   *\n   * @param {number} x X value\n   * @param {number} y Y value\n    * @returns {vec2} New vec2\n   */\n\n\n  vec2.createFrom = function (x, y) {\n    var dest = new MatrixArray(2);\n    dest[0] = x;\n    dest[1] = y;\n    return dest;\n  };\n  /**\n   * Adds the vec2's together. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecB.\n   *\n   * @param {vec2} vecA the first operand\n   * @param {vec2} vecB the second operand\n   * @param {vec2} [dest] the optional receiving vector\n   * @returns {vec2} dest\n   */\n\n\n  vec2.add = function (vecA, vecB, dest) {\n    if (!dest) dest = vecB;\n    dest[0] = vecA[0] + vecB[0];\n    dest[1] = vecA[1] + vecB[1];\n    return dest;\n  };\n  /**\n   * Subtracts vecB from vecA. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecB.\n   *\n   * @param {vec2} vecA the first operand\n   * @param {vec2} vecB the second operand\n   * @param {vec2} [dest] the optional receiving vector\n   * @returns {vec2} dest\n   */\n\n\n  vec2.subtract = function (vecA, vecB, dest) {\n    if (!dest) dest = vecB;\n    dest[0] = vecA[0] - vecB[0];\n    dest[1] = vecA[1] - vecB[1];\n    return dest;\n  };\n  /**\n   * Multiplies vecA with vecB. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecB.\n   *\n   * @param {vec2} vecA the first operand\n   * @param {vec2} vecB the second operand\n   * @param {vec2} [dest] the optional receiving vector\n   * @returns {vec2} dest\n   */\n\n\n  vec2.multiply = function (vecA, vecB, dest) {\n    if (!dest) dest = vecB;\n    dest[0] = vecA[0] * vecB[0];\n    dest[1] = vecA[1] * vecB[1];\n    return dest;\n  };\n  /**\n   * Divides vecA by vecB. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecB.\n   *\n   * @param {vec2} vecA the first operand\n   * @param {vec2} vecB the second operand\n   * @param {vec2} [dest] the optional receiving vector\n   * @returns {vec2} dest\n   */\n\n\n  vec2.divide = function (vecA, vecB, dest) {\n    if (!dest) dest = vecB;\n    dest[0] = vecA[0] / vecB[0];\n    dest[1] = vecA[1] / vecB[1];\n    return dest;\n  };\n  /**\n   * Scales vecA by some scalar number. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecA.\n   *\n   * This is the same as multiplying each component of vecA\n   * by the given scalar.\n   *\n   * @param {vec2}   vecA the vector to be scaled\n   * @param {Number} scalar the amount to scale the vector by\n   * @param {vec2}   [dest] the optional receiving vector\n   * @returns {vec2} dest\n   */\n\n\n  vec2.scale = function (vecA, scalar, dest) {\n    if (!dest) dest = vecA;\n    dest[0] = vecA[0] * scalar;\n    dest[1] = vecA[1] * scalar;\n    return dest;\n  };\n  /**\n   * Calculates the euclidian distance between two vec2\n   *\n   * Params:\n   * @param {vec2} vecA First vector\n   * @param {vec2} vecB Second vector\n   *\n   * @returns {number} Distance between vecA and vecB\n   */\n\n\n  vec2.dist = function (vecA, vecB) {\n    var x = vecB[0] - vecA[0],\n        y = vecB[1] - vecA[1];\n    return Math.sqrt(x * x + y * y);\n  };\n  /**\n   * Copies the values of one vec2 to another\n   *\n   * @param {vec2} vec vec2 containing values to copy\n   * @param {vec2} dest vec2 receiving copied values\n   *\n   * @returns {vec2} dest\n   */\n\n\n  vec2.set = function (vec, dest) {\n    dest[0] = vec[0];\n    dest[1] = vec[1];\n    return dest;\n  };\n  /**\n   * Compares two vectors for equality within a certain margin of error\n   *\n   * @param {vec2} a First vector\n   * @param {vec2} b Second vector\n   *\n   * @returns {Boolean} True if a is equivalent to b\n   */\n\n\n  vec2.equal = function (a, b) {\n    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON;\n  };\n  /**\n   * Negates the components of a vec2\n   *\n   * @param {vec2} vec vec2 to negate\n   * @param {vec2} [dest] vec2 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec2} dest if specified, vec otherwise\n   */\n\n\n  vec2.negate = function (vec, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    dest[0] = -vec[0];\n    dest[1] = -vec[1];\n    return dest;\n  };\n  /**\n   * Normlize a vec2\n   *\n   * @param {vec2} vec vec2 to normalize\n   * @param {vec2} [dest] vec2 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec2} dest if specified, vec otherwise\n   */\n\n\n  vec2.normalize = function (vec, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    var mag = vec[0] * vec[0] + vec[1] * vec[1];\n\n    if (mag > 0) {\n      mag = Math.sqrt(mag);\n      dest[0] = vec[0] / mag;\n      dest[1] = vec[1] / mag;\n    } else {\n      dest[0] = dest[1] = 0;\n    }\n\n    return dest;\n  };\n  /**\n   * Computes the cross product of two vec2's. Note that the cross product must by definition\n   * produce a 3D vector. If a dest vector is given, it will contain the resultant 3D vector.\n   * Otherwise, a scalar number will be returned, representing the vector's Z coordinate, since\n   * its X and Y must always equal 0.\n   *\n   * Examples:\n   *    var crossResult = vec3.create();\n   *    vec2.cross([1, 2], [3, 4], crossResult);\n   *    //=> [0, 0, -2]\n   *\n   *    vec2.cross([1, 2], [3, 4]);\n   *    //=> -2\n   *\n   * See http://stackoverflow.com/questions/243945/calculating-a-2d-vectors-cross-product\n   * for some interesting facts.\n   *\n   * @param {vec2} vecA left operand\n   * @param {vec2} vecB right operand\n   * @param {vec2} [dest] optional vec2 receiving result. If not specified a scalar is returned\n   *\n   */\n\n\n  vec2.cross = function (vecA, vecB, dest) {\n    var z = vecA[0] * vecB[1] - vecA[1] * vecB[0];\n    if (!dest) return z;\n    dest[0] = dest[1] = 0;\n    dest[2] = z;\n    return dest;\n  };\n  /**\n   * Caclulates the length of a vec2\n   *\n   * @param {vec2} vec vec2 to calculate length of\n   *\n   * @returns {Number} Length of vec\n   */\n\n\n  vec2.length = function (vec) {\n    var x = vec[0],\n        y = vec[1];\n    return Math.sqrt(x * x + y * y);\n  };\n  /**\n   * Caclulates the squared length of a vec2\n   *\n   * @param {vec2} vec vec2 to calculate squared length of\n   *\n   * @returns {Number} Squared Length of vec\n   */\n\n\n  vec2.squaredLength = function (vec) {\n    var x = vec[0],\n        y = vec[1];\n    return x * x + y * y;\n  };\n  /**\n   * Caclulates the dot product of two vec2s\n   *\n   * @param {vec2} vecA First operand\n   * @param {vec2} vecB Second operand\n   *\n   * @returns {Number} Dot product of vecA and vecB\n   */\n\n\n  vec2.dot = function (vecA, vecB) {\n    return vecA[0] * vecB[0] + vecA[1] * vecB[1];\n  };\n  /**\n   * Generates a 2D unit vector pointing from one vector to another\n   *\n   * @param {vec2} vecA Origin vec2\n   * @param {vec2} vecB vec2 to point to\n   * @param {vec2} [dest] vec2 receiving operation result. If not specified result is written to vecA\n   *\n   * @returns {vec2} dest if specified, vecA otherwise\n   */\n\n\n  vec2.direction = function (vecA, vecB, dest) {\n    if (!dest) {\n      dest = vecA;\n    }\n\n    var x = vecA[0] - vecB[0],\n        y = vecA[1] - vecB[1],\n        len = x * x + y * y;\n\n    if (!len) {\n      dest[0] = 0;\n      dest[1] = 0;\n      dest[2] = 0;\n      return dest;\n    }\n\n    len = 1 / Math.sqrt(len);\n    dest[0] = x * len;\n    dest[1] = y * len;\n    return dest;\n  };\n  /**\n   * Performs a linear interpolation between two vec2\n   *\n   * @param {vec2} vecA First vector\n   * @param {vec2} vecB Second vector\n   * @param {Number} lerp Interpolation amount between the two inputs\n   * @param {vec2} [dest] vec2 receiving operation result. If not specified result is written to vecA\n   *\n   * @returns {vec2} dest if specified, vecA otherwise\n   */\n\n\n  vec2.lerp = function (vecA, vecB, lerp, dest) {\n    if (!dest) {\n      dest = vecA;\n    }\n\n    dest[0] = vecA[0] + lerp * (vecB[0] - vecA[0]);\n    dest[1] = vecA[1] + lerp * (vecB[1] - vecA[1]);\n    return dest;\n  };\n  /**\n   * Returns a string representation of a vector\n   *\n   * @param {vec2} vec Vector to represent as a string\n   *\n   * @returns {String} String representation of vec\n   */\n\n\n  vec2.str = function (vec) {\n    return '[' + vec[0] + ', ' + vec[1] + ']';\n  };\n  /**\n   * @class 2x2 Matrix\n   * @name mat2\n   */\n\n\n  var mat2 = {};\n  /**\n   * Creates a new 2x2 matrix. If src is given, the new matrix\n   * is initialized to those values.\n   *\n   * @param {mat2} [src] the seed values for the new matrix, if any\n   * @returns {mat2} a new matrix\n   */\n\n  mat2.create = function (src) {\n    var dest = new MatrixArray(4);\n\n    if (src) {\n      dest[0] = src[0];\n      dest[1] = src[1];\n      dest[2] = src[2];\n      dest[3] = src[3];\n    } else {\n      dest[0] = dest[1] = dest[2] = dest[3] = 0;\n    }\n\n    return dest;\n  };\n  /**\n   * Creates a new instance of a mat2, initializing it with the given arguments\n   *\n   * @param {number} m00\n   * @param {number} m01\n   * @param {number} m10\n   * @param {number} m11\n    * @returns {mat2} New mat2\n   */\n\n\n  mat2.createFrom = function (m00, m01, m10, m11) {\n    var dest = new MatrixArray(4);\n    dest[0] = m00;\n    dest[1] = m01;\n    dest[2] = m10;\n    dest[3] = m11;\n    return dest;\n  };\n  /**\n   * Copies the values of one mat2 to another\n   *\n   * @param {mat2} mat mat2 containing values to copy\n   * @param {mat2} dest mat2 receiving copied values\n   *\n   * @returns {mat2} dest\n   */\n\n\n  mat2.set = function (mat, dest) {\n    dest[0] = mat[0];\n    dest[1] = mat[1];\n    dest[2] = mat[2];\n    dest[3] = mat[3];\n    return dest;\n  };\n  /**\n   * Compares two matrices for equality within a certain margin of error\n   *\n   * @param {mat2} a First matrix\n   * @param {mat2} b Second matrix\n   *\n   * @returns {Boolean} True if a is equivalent to b\n   */\n\n\n  mat2.equal = function (a, b) {\n    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON && Math.abs(a[3] - b[3]) < FLOAT_EPSILON;\n  };\n  /**\n   * Sets a mat2 to an identity matrix\n   *\n   * @param {mat2} [dest] mat2 to set. If omitted a new one will be created.\n   *\n   * @returns {mat2} dest\n   */\n\n\n  mat2.identity = function (dest) {\n    if (!dest) {\n      dest = mat2.create();\n    }\n\n    dest[0] = 1;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 1;\n    return dest;\n  };\n  /**\n   * Transposes a mat2 (flips the values over the diagonal)\n   *\n   * @param {mat2} mat mat2 to transpose\n   * @param {mat2} [dest] mat2 receiving transposed values. If not specified result is written to mat\n   *\n   * @param {mat2} dest if specified, mat otherwise\n   */\n\n\n  mat2.transpose = function (mat, dest) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (!dest || mat === dest) {\n      var a00 = mat[1];\n      mat[1] = mat[2];\n      mat[2] = a00;\n      return mat;\n    }\n\n    dest[0] = mat[0];\n    dest[1] = mat[2];\n    dest[2] = mat[1];\n    dest[3] = mat[3];\n    return dest;\n  };\n  /**\n   * Calculates the determinant of a mat2\n   *\n   * @param {mat2} mat mat2 to calculate determinant of\n   *\n   * @returns {Number} determinant of mat\n   */\n\n\n  mat2.determinant = function (mat) {\n    return mat[0] * mat[3] - mat[2] * mat[1];\n  };\n  /**\n   * Calculates the inverse matrix of a mat2\n   *\n   * @param {mat2} mat mat2 to calculate inverse of\n   * @param {mat2} [dest] mat2 receiving inverse matrix. If not specified result is written to mat\n   *\n   * @param {mat2} dest is specified, mat otherwise, null if matrix cannot be inverted\n   */\n\n\n  mat2.inverse = function (mat, dest) {\n    if (!dest) {\n      dest = mat;\n    }\n\n    var a0 = mat[0],\n        a1 = mat[1],\n        a2 = mat[2],\n        a3 = mat[3];\n    var det = a0 * a3 - a2 * a1;\n    if (!det) return null;\n    det = 1.0 / det;\n    dest[0] = a3 * det;\n    dest[1] = -a1 * det;\n    dest[2] = -a2 * det;\n    dest[3] = a0 * det;\n    return dest;\n  };\n  /**\n   * Performs a matrix multiplication\n   *\n   * @param {mat2} matA First operand\n   * @param {mat2} matB Second operand\n   * @param {mat2} [dest] mat2 receiving operation result. If not specified result is written to matA\n   *\n   * @returns {mat2} dest if specified, matA otherwise\n   */\n\n\n  mat2.multiply = function (matA, matB, dest) {\n    if (!dest) {\n      dest = matA;\n    }\n\n    var a11 = matA[0],\n        a12 = matA[1],\n        a21 = matA[2],\n        a22 = matA[3];\n    dest[0] = a11 * matB[0] + a12 * matB[2];\n    dest[1] = a11 * matB[1] + a12 * matB[3];\n    dest[2] = a21 * matB[0] + a22 * matB[2];\n    dest[3] = a21 * matB[1] + a22 * matB[3];\n    return dest;\n  };\n  /**\n   * Rotates a 2x2 matrix by an angle\n   *\n   * @param {mat2}   mat   The matrix to rotate\n   * @param {Number} angle The angle in radians\n   * @param {mat2} [dest]  Optional mat2 receiving the result. If omitted mat will be used.\n   *\n   * @returns {mat2} dest if specified, mat otherwise\n   */\n\n\n  mat2.rotate = function (mat, angle, dest) {\n    if (!dest) {\n      dest = mat;\n    }\n\n    var a11 = mat[0],\n        a12 = mat[1],\n        a21 = mat[2],\n        a22 = mat[3],\n        s = Math.sin(angle),\n        c = Math.cos(angle);\n    dest[0] = a11 * c + a12 * s;\n    dest[1] = a11 * -s + a12 * c;\n    dest[2] = a21 * c + a22 * s;\n    dest[3] = a21 * -s + a22 * c;\n    return dest;\n  };\n  /**\n   * Multiplies the vec2 by the given 2x2 matrix\n   *\n   * @param {mat2} matrix the 2x2 matrix to multiply against\n   * @param {vec2} vec    the vector to multiply\n   * @param {vec2} [dest] an optional receiving vector. If not given, vec is used.\n   *\n   * @returns {vec2} The multiplication result\n   **/\n\n\n  mat2.multiplyVec2 = function (matrix, vec, dest) {\n    if (!dest) dest = vec;\n    var x = vec[0],\n        y = vec[1];\n    dest[0] = x * matrix[0] + y * matrix[1];\n    dest[1] = x * matrix[2] + y * matrix[3];\n    return dest;\n  };\n  /**\n   * Scales the mat2 by the dimensions in the given vec2\n   *\n   * @param {mat2} matrix the 2x2 matrix to scale\n   * @param {vec2} vec    the vector containing the dimensions to scale by\n   * @param {vec2} [dest] an optional receiving mat2. If not given, matrix is used.\n   *\n   * @returns {mat2} dest if specified, matrix otherwise\n   **/\n\n\n  mat2.scale = function (matrix, vec, dest) {\n    if (!dest) {\n      dest = matrix;\n    }\n\n    var a11 = matrix[0],\n        a12 = matrix[1],\n        a21 = matrix[2],\n        a22 = matrix[3],\n        b11 = vec[0],\n        b22 = vec[1];\n    dest[0] = a11 * b11;\n    dest[1] = a12 * b22;\n    dest[2] = a21 * b11;\n    dest[3] = a22 * b22;\n    return dest;\n  };\n  /**\n   * Returns a string representation of a mat2\n   *\n   * @param {mat2} mat mat2 to represent as a string\n   *\n   * @param {String} String representation of mat\n   */\n\n\n  mat2.str = function (mat) {\n    return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] + ']';\n  };\n  /**\n   * @class 4 Dimensional Vector\n   * @name vec4\n   */\n\n\n  var vec4 = {};\n  /**\n   * Creates a new vec4, initializing it from vec if vec\n   * is given.\n   *\n   * @param {vec4} [vec] the vector's initial contents\n   * @returns {vec4} a new 2D vector\n   */\n\n  vec4.create = function (vec) {\n    var dest = new MatrixArray(4);\n\n    if (vec) {\n      dest[0] = vec[0];\n      dest[1] = vec[1];\n      dest[2] = vec[2];\n      dest[3] = vec[3];\n    } else {\n      dest[0] = 0;\n      dest[1] = 0;\n      dest[2] = 0;\n      dest[3] = 0;\n    }\n\n    return dest;\n  };\n  /**\n   * Creates a new instance of a vec4, initializing it with the given arguments\n   *\n   * @param {number} x X value\n   * @param {number} y Y value\n   * @param {number} z Z value\n   * @param {number} w W value\n    * @returns {vec4} New vec4\n   */\n\n\n  vec4.createFrom = function (x, y, z, w) {\n    var dest = new MatrixArray(4);\n    dest[0] = x;\n    dest[1] = y;\n    dest[2] = z;\n    dest[3] = w;\n    return dest;\n  };\n  /**\n   * Adds the vec4's together. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecB.\n   *\n   * @param {vec4} vecA the first operand\n   * @param {vec4} vecB the second operand\n   * @param {vec4} [dest] the optional receiving vector\n   * @returns {vec4} dest\n   */\n\n\n  vec4.add = function (vecA, vecB, dest) {\n    if (!dest) dest = vecB;\n    dest[0] = vecA[0] + vecB[0];\n    dest[1] = vecA[1] + vecB[1];\n    dest[2] = vecA[2] + vecB[2];\n    dest[3] = vecA[3] + vecB[3];\n    return dest;\n  };\n  /**\n   * Subtracts vecB from vecA. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecB.\n   *\n   * @param {vec4} vecA the first operand\n   * @param {vec4} vecB the second operand\n   * @param {vec4} [dest] the optional receiving vector\n   * @returns {vec4} dest\n   */\n\n\n  vec4.subtract = function (vecA, vecB, dest) {\n    if (!dest) dest = vecB;\n    dest[0] = vecA[0] - vecB[0];\n    dest[1] = vecA[1] - vecB[1];\n    dest[2] = vecA[2] - vecB[2];\n    dest[3] = vecA[3] - vecB[3];\n    return dest;\n  };\n  /**\n   * Multiplies vecA with vecB. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecB.\n   *\n   * @param {vec4} vecA the first operand\n   * @param {vec4} vecB the second operand\n   * @param {vec4} [dest] the optional receiving vector\n   * @returns {vec4} dest\n   */\n\n\n  vec4.multiply = function (vecA, vecB, dest) {\n    if (!dest) dest = vecB;\n    dest[0] = vecA[0] * vecB[0];\n    dest[1] = vecA[1] * vecB[1];\n    dest[2] = vecA[2] * vecB[2];\n    dest[3] = vecA[3] * vecB[3];\n    return dest;\n  };\n  /**\n   * Divides vecA by vecB. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecB.\n   *\n   * @param {vec4} vecA the first operand\n   * @param {vec4} vecB the second operand\n   * @param {vec4} [dest] the optional receiving vector\n   * @returns {vec4} dest\n   */\n\n\n  vec4.divide = function (vecA, vecB, dest) {\n    if (!dest) dest = vecB;\n    dest[0] = vecA[0] / vecB[0];\n    dest[1] = vecA[1] / vecB[1];\n    dest[2] = vecA[2] / vecB[2];\n    dest[3] = vecA[3] / vecB[3];\n    return dest;\n  };\n  /**\n   * Scales vecA by some scalar number. If dest is given, the result\n   * is stored there. Otherwise, the result is stored in vecA.\n   *\n   * This is the same as multiplying each component of vecA\n   * by the given scalar.\n   *\n   * @param {vec4}   vecA the vector to be scaled\n   * @param {Number} scalar the amount to scale the vector by\n   * @param {vec4}   [dest] the optional receiving vector\n   * @returns {vec4} dest\n   */\n\n\n  vec4.scale = function (vecA, scalar, dest) {\n    if (!dest) dest = vecA;\n    dest[0] = vecA[0] * scalar;\n    dest[1] = vecA[1] * scalar;\n    dest[2] = vecA[2] * scalar;\n    dest[3] = vecA[3] * scalar;\n    return dest;\n  };\n  /**\n   * Copies the values of one vec4 to another\n   *\n   * @param {vec4} vec vec4 containing values to copy\n   * @param {vec4} dest vec4 receiving copied values\n   *\n   * @returns {vec4} dest\n   */\n\n\n  vec4.set = function (vec, dest) {\n    dest[0] = vec[0];\n    dest[1] = vec[1];\n    dest[2] = vec[2];\n    dest[3] = vec[3];\n    return dest;\n  };\n  /**\n   * Compares two vectors for equality within a certain margin of error\n   *\n   * @param {vec4} a First vector\n   * @param {vec4} b Second vector\n   *\n   * @returns {Boolean} True if a is equivalent to b\n   */\n\n\n  vec4.equal = function (a, b) {\n    return a === b || Math.abs(a[0] - b[0]) < FLOAT_EPSILON && Math.abs(a[1] - b[1]) < FLOAT_EPSILON && Math.abs(a[2] - b[2]) < FLOAT_EPSILON && Math.abs(a[3] - b[3]) < FLOAT_EPSILON;\n  };\n  /**\n   * Negates the components of a vec4\n   *\n   * @param {vec4} vec vec4 to negate\n   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec\n   *\n   * @returns {vec4} dest if specified, vec otherwise\n   */\n\n\n  vec4.negate = function (vec, dest) {\n    if (!dest) {\n      dest = vec;\n    }\n\n    dest[0] = -vec[0];\n    dest[1] = -vec[1];\n    dest[2] = -vec[2];\n    dest[3] = -vec[3];\n    return dest;\n  };\n  /**\n   * Caclulates the length of a vec2\n   *\n   * @param {vec2} vec vec2 to calculate length of\n   *\n   * @returns {Number} Length of vec\n   */\n\n\n  vec4.length = function (vec) {\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2],\n        w = vec[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n  };\n  /**\n   * Caclulates the squared length of a vec4\n   *\n   * @param {vec4} vec vec4 to calculate squared length of\n   *\n   * @returns {Number} Squared Length of vec\n   */\n\n\n  vec4.squaredLength = function (vec) {\n    var x = vec[0],\n        y = vec[1],\n        z = vec[2],\n        w = vec[3];\n    return x * x + y * y + z * z + w * w;\n  };\n  /**\n   * Performs a linear interpolation between two vec4\n   *\n   * @param {vec4} vecA First vector\n   * @param {vec4} vecB Second vector\n   * @param {Number} lerp Interpolation amount between the two inputs\n   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vecA\n   *\n   * @returns {vec4} dest if specified, vecA otherwise\n   */\n\n\n  vec4.lerp = function (vecA, vecB, lerp, dest) {\n    if (!dest) {\n      dest = vecA;\n    }\n\n    dest[0] = vecA[0] + lerp * (vecB[0] - vecA[0]);\n    dest[1] = vecA[1] + lerp * (vecB[1] - vecA[1]);\n    dest[2] = vecA[2] + lerp * (vecB[2] - vecA[2]);\n    dest[3] = vecA[3] + lerp * (vecB[3] - vecA[3]);\n    return dest;\n  };\n  /**\n   * Returns a string representation of a vector\n   *\n   * @param {vec4} vec Vector to represent as a string\n   *\n   * @returns {String} String representation of vec\n   */\n\n\n  vec4.str = function (vec) {\n    return '[' + vec[0] + ', ' + vec[1] + ', ' + vec[2] + ', ' + vec[3] + ']';\n  };\n  /*\n   * Exports\n   */\n\n\n  if (root) {\n    root.glMatrixArrayType = MatrixArray;\n    root.MatrixArray = MatrixArray;\n    root.setMatrixArrayType = setMatrixArrayType;\n    root.determineMatrixArrayType = determineMatrixArrayType;\n    root.glMath = glMath;\n    root.vec2 = vec2;\n    root.vec3 = vec3;\n    root.vec4 = vec4;\n    root.mat2 = mat2;\n    root.mat3 = mat3;\n    root.mat4 = mat4;\n    root.quat4 = quat4;\n  }\n\n  return {\n    glMatrixArrayType: MatrixArray,\n    MatrixArray: MatrixArray,\n    setMatrixArrayType: setMatrixArrayType,\n    determineMatrixArrayType: determineMatrixArrayType,\n    glMath: glMath,\n    vec2: vec2,\n    vec3: vec3,\n    vec4: vec4,\n    mat2: mat2,\n    mat3: mat3,\n    mat4: mat4,\n    quat4: quat4\n  };\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/lib/gl-matrix.js\n");

/***/ }),

/***/ "./src/ChemDoodle/lib/index.js":
/*!*************************************!*\
  !*** ./src/ChemDoodle/lib/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _jQuery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jQuery */ \"./src/ChemDoodle/lib/jQuery.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"jQuery\", function() { return _jQuery__WEBPACK_IMPORTED_MODULE_0__[\"default\"]; });\n\n/* harmony import */ var _gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gl-matrix */ \"./src/ChemDoodle/lib/gl-matrix.js\");\n/* harmony import */ var _gl_matrix__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_gl_matrix__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _gl_matrix__WEBPACK_IMPORTED_MODULE_1__) if([\"jQuery\",\"jsBezier\",\"default\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _gl_matrix__WEBPACK_IMPORTED_MODULE_1__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _jsBezier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./jsBezier */ \"./src/ChemDoodle/lib/jsBezier.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"jsBezier\", function() { return _jsBezier__WEBPACK_IMPORTED_MODULE_2__[\"default\"]; });\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvbGliL2luZGV4LmpzPzkxYTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBIiwiZmlsZSI6Ii4vc3JjL0NoZW1Eb29kbGUvbGliL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHtkZWZhdWx0IGFzIGpRdWVyeX0gZnJvbSAnLi9qUXVlcnknO1xuZXhwb3J0ICogZnJvbSAnLi9nbC1tYXRyaXgnO1xuZXhwb3J0IHtkZWZhdWx0IGFzIGpzQmV6aWVyfSBmcm9tICcuL2pzQmV6aWVyJztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/ChemDoodle/lib/index.js\n");

/***/ }),

/***/ "./src/ChemDoodle/lib/jQuery.js":
/*!**************************************!*\
  !*** ./src/ChemDoodle/lib/jQuery.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\");\n/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var jquery_mousewheel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery-mousewheel */ \"./node_modules/jquery-mousewheel/jquery.mousewheel.js\");\n/* harmony import */ var jquery_mousewheel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery_mousewheel__WEBPACK_IMPORTED_MODULE_1__);\n\n\njquery__WEBPACK_IMPORTED_MODULE_0___default.a.noConflict(true);\n/* harmony default export */ __webpack_exports__[\"default\"] = (jquery__WEBPACK_IMPORTED_MODULE_0___default.a);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9DaGVtRG9vZGxlLy4vc3JjL0NoZW1Eb29kbGUvbGliL2pRdWVyeS5qcz80Mjg1Il0sIm5hbWVzIjpbImpRdWVyeSIsIm5vQ29uZmxpY3QiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBRUFBLDZDQUFNLENBQUNDLFVBQVAsQ0FBa0IsSUFBbEI7QUFFZUQsNEdBQWYiLCJmaWxlIjoiLi9zcmMvQ2hlbURvb2RsZS9saWIvalF1ZXJ5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGpRdWVyeSBmcm9tICdqcXVlcnknO1xuaW1wb3J0IG1vdXNld2hlZWwgZnJvbSAnanF1ZXJ5LW1vdXNld2hlZWwnO1xuXG5qUXVlcnkubm9Db25mbGljdCh0cnVlKTtcblxuZXhwb3J0IGRlZmF1bHQgalF1ZXJ5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/ChemDoodle/lib/jQuery.js\n");

/***/ }),

/***/ "./src/ChemDoodle/lib/jsBezier.js":
/*!****************************************!*\
  !*** ./src/ChemDoodle/lib/jsBezier.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar lib = {};\n\n(function (lib) {\n  'use strict';\n\n  function sgn(x) {\n    return x == 0 ? 0 : x > 0 ? 1 : -1;\n  }\n\n  var Vectors = {\n    subtract: function subtract(v1, v2) {\n      return {\n        x: v1.x - v2.x,\n        y: v1.y - v2.y\n      };\n    },\n    dotProduct: function dotProduct(v1, v2) {\n      return v1.x * v2.x + v1.y * v2.y;\n    },\n    square: function square(v) {\n      return Math.sqrt(v.x * v.x + v.y * v.y);\n    },\n    scale: function scale(v, s) {\n      return {\n        x: v.x * s,\n        y: v.y * s\n      };\n    }\n  },\n      maxRecursion = 64,\n      flatnessTolerance = Math.pow(2.0, -maxRecursion - 1);\n  /**\n   * Calculates the distance that the point lies from the curve.\n   * \n   * @param point\n   *            a point in the form {x:567, y:3342}\n   * @param curve\n   *            a Bezier curve in the form [{x:..., y:...}, {x:..., y:...},\n   *            {x:..., y:...}, {x:..., y:...}]. note that this is currently\n   *            hardcoded to assume cubiz beziers, but would be better off\n   *            supporting any degree.\n   * @return a JS object literal containing location and distance, for\n   *         example: {location:0.35, distance:10}. Location is analogous to\n   *         the location argument you pass to the pointOnPath function: it is\n   *         a ratio of distance travelled along the curve. Distance is the\n   *         distance in pixels from the point to the curve.\n   */\n\n  var _distanceFromCurve = function _distanceFromCurve(point, curve) {\n    var candidates = [],\n        w = _convertToBezier(point, curve),\n        degree = curve.length - 1,\n        higherDegree = 2 * degree - 1,\n        numSolutions = _findRoots(w, higherDegree, candidates, 0),\n        v = Vectors.subtract(point, curve[0]),\n        dist = Vectors.square(v),\n        t = 0.0;\n\n    for (var i = 0; i < numSolutions; i++) {\n      v = Vectors.subtract(point, _bezier(curve, degree, candidates[i], null, null));\n      var newDist = Vectors.square(v);\n\n      if (newDist < dist) {\n        dist = newDist;\n        t = candidates[i];\n      }\n    }\n\n    v = Vectors.subtract(point, curve[degree]);\n    newDist = Vectors.square(v);\n\n    if (newDist < dist) {\n      dist = newDist;\n      t = 1.0;\n    }\n\n    return {\n      location: t,\n      distance: dist\n    };\n  };\n  /**\n   * finds the nearest point on the curve to the given point.\n   */\n\n\n  var _nearestPointOnCurve = function _nearestPointOnCurve(point, curve) {\n    var td = _distanceFromCurve(point, curve);\n\n    return {\n      point: _bezier(curve, curve.length - 1, td.location, null, null),\n      location: td.location\n    };\n  };\n\n  var _convertToBezier = function _convertToBezier(point, curve) {\n    var degree = curve.length - 1,\n        higherDegree = 2 * degree - 1,\n        c = [],\n        d = [],\n        cdTable = [],\n        w = [],\n        z = [[1.0, 0.6, 0.3, 0.1], [0.4, 0.6, 0.6, 0.4], [0.1, 0.3, 0.6, 1.0]];\n\n    for (var i = 0; i <= degree; i++) {\n      c[i] = Vectors.subtract(curve[i], point);\n    }\n\n    for (var i = 0; i <= degree - 1; i++) {\n      d[i] = Vectors.subtract(curve[i + 1], curve[i]);\n      d[i] = Vectors.scale(d[i], 3.0);\n    }\n\n    for (var row = 0; row <= degree - 1; row++) {\n      for (var column = 0; column <= degree; column++) {\n        if (!cdTable[row]) cdTable[row] = [];\n        cdTable[row][column] = Vectors.dotProduct(d[row], c[column]);\n      }\n    }\n\n    for (i = 0; i <= higherDegree; i++) {\n      if (!w[i]) w[i] = [];\n      w[i].y = 0.0;\n      w[i].x = parseFloat(i) / higherDegree;\n    }\n\n    var n = degree,\n        m = degree - 1;\n\n    for (var k = 0; k <= n + m; k++) {\n      var lb = Math.max(0, k - m),\n          ub = Math.min(k, n);\n\n      for (i = lb; i <= ub; i++) {\n        var j = k - i;\n        w[i + j].y += cdTable[j][i] * z[j][i];\n      }\n    }\n\n    return w;\n  };\n  /**\n   * counts how many roots there are.\n   */\n\n\n  var _findRoots = function _findRoots(w, degree, t, depth) {\n    var left = [],\n        right = [],\n        left_count,\n        right_count,\n        left_t = [],\n        right_t = [];\n\n    switch (_getCrossingCount(w, degree)) {\n      case 0:\n        {\n          return 0;\n        }\n\n      case 1:\n        {\n          if (depth >= maxRecursion) {\n            t[0] = (w[0].x + w[degree].x) / 2.0;\n            return 1;\n          }\n\n          if (_isFlatEnough(w, degree)) {\n            t[0] = _computeXIntercept(w, degree);\n            return 1;\n          }\n\n          break;\n        }\n    }\n\n    _bezier(w, degree, 0.5, left, right);\n\n    left_count = _findRoots(left, degree, left_t, depth + 1);\n    right_count = _findRoots(right, degree, right_t, depth + 1);\n\n    for (var i = 0; i < left_count; i++) {\n      t[i] = left_t[i];\n    }\n\n    for (var i = 0; i < right_count; i++) {\n      t[i + left_count] = right_t[i];\n    }\n\n    return left_count + right_count;\n  };\n\n  var _getCrossingCount = function _getCrossingCount(curve, degree) {\n    var n_crossings = 0,\n        sign,\n        old_sign;\n    sign = old_sign = sgn(curve[0].y);\n\n    for (var i = 1; i <= degree; i++) {\n      sign = sgn(curve[i].y);\n      if (sign != old_sign) n_crossings++;\n      old_sign = sign;\n    }\n\n    return n_crossings;\n  };\n\n  var _isFlatEnough = function _isFlatEnough(curve, degree) {\n    var error, intercept_1, intercept_2, left_intercept, right_intercept, a, b, c, det, dInv, a1, b1, c1, a2, b2, c2;\n    a = curve[0].y - curve[degree].y;\n    b = curve[degree].x - curve[0].x;\n    c = curve[0].x * curve[degree].y - curve[degree].x * curve[0].y;\n    var max_distance_above = 0.0,\n        max_distance_below = 0.0;\n\n    for (var i = 1; i < degree; i++) {\n      var value = a * curve[i].x + b * curve[i].y + c;\n      if (value > max_distance_above) max_distance_above = value;else if (value < max_distance_below) max_distance_below = value;\n    }\n\n    a1 = 0.0;\n    b1 = 1.0;\n    c1 = 0.0;\n    a2 = a;\n    b2 = b;\n    c2 = c - max_distance_above;\n    det = a1 * b2 - a2 * b1;\n    dInv = 1.0 / det;\n    intercept_1 = (b1 * c2 - b2 * c1) * dInv;\n    a2 = a;\n    b2 = b;\n    c2 = c - max_distance_below;\n    det = a1 * b2 - a2 * b1;\n    dInv = 1.0 / det;\n    intercept_2 = (b1 * c2 - b2 * c1) * dInv;\n    left_intercept = Math.min(intercept_1, intercept_2);\n    right_intercept = Math.max(intercept_1, intercept_2);\n    error = right_intercept - left_intercept;\n    return error < flatnessTolerance ? 1 : 0;\n  };\n\n  var _computeXIntercept = function _computeXIntercept(curve, degree) {\n    var XLK = 1.0,\n        YLK = 0.0,\n        XNM = curve[degree].x - curve[0].x,\n        YNM = curve[degree].y - curve[0].y,\n        XMK = curve[0].x - 0.0,\n        YMK = curve[0].y - 0.0,\n        det = XNM * YLK - YNM * XLK,\n        detInv = 1.0 / det,\n        S = (XNM * YMK - YNM * XMK) * detInv;\n    return 0.0 + XLK * S;\n  };\n\n  var _bezier = function _bezier(curve, degree, t, left, right) {\n    var temp = [[]];\n\n    for (var j = 0; j <= degree; j++) {\n      temp[0][j] = curve[j];\n    }\n\n    for (var i = 1; i <= degree; i++) {\n      for (var j = 0; j <= degree - i; j++) {\n        if (!temp[i]) temp[i] = [];\n        if (!temp[i][j]) temp[i][j] = {};\n        temp[i][j].x = (1.0 - t) * temp[i - 1][j].x + t * temp[i - 1][j + 1].x;\n        temp[i][j].y = (1.0 - t) * temp[i - 1][j].y + t * temp[i - 1][j + 1].y;\n      }\n    }\n\n    if (left != null) for (j = 0; j <= degree; j++) {\n      left[j] = temp[j][0];\n    }\n    if (right != null) for (j = 0; j <= degree; j++) {\n      right[j] = temp[degree - j][j];\n    }\n    return temp[degree][0];\n  };\n\n  var _curveFunctionCache = {};\n\n  var _getCurveFunctions = function _getCurveFunctions(order) {\n    var fns = _curveFunctionCache[order];\n\n    if (!fns) {\n      fns = [];\n\n      var f_term = function f_term() {\n        return function (t) {\n          return Math.pow(t, order);\n        };\n      },\n          l_term = function l_term() {\n        return function (t) {\n          return Math.pow(1 - t, order);\n        };\n      },\n          c_term = function c_term(c) {\n        return function (t) {\n          return c;\n        };\n      },\n          t_term = function t_term() {\n        return function (t) {\n          return t;\n        };\n      },\n          one_minus_t_term = function one_minus_t_term() {\n        return function (t) {\n          return 1 - t;\n        };\n      },\n          _termFunc = function _termFunc(terms) {\n        return function (t) {\n          var p = 1;\n\n          for (var i = 0; i < terms.length; i++) {\n            p = p * terms[i](t);\n          }\n\n          return p;\n        };\n      };\n\n      fns.push(new f_term()); // first is t to the power of the curve\n      // order\n\n      for (var i = 1; i < order; i++) {\n        var terms = [new c_term(order)];\n\n        for (var j = 0; j < order - i; j++) {\n          terms.push(new t_term());\n        }\n\n        for (var j = 0; j < i; j++) {\n          terms.push(new one_minus_t_term());\n        }\n\n        fns.push(new _termFunc(terms));\n      }\n\n      fns.push(new l_term()); // last is (1-t) to the power of the curve\n      // order\n\n      _curveFunctionCache[order] = fns;\n    }\n\n    return fns;\n  };\n  /**\n   * calculates a point on the curve, for a Bezier of arbitrary order.\n   * \n   * @param curve\n   *            an array of control points, eg [{x:10,y:20}, {x:50,y:50},\n   *            {x:100,y:100}, {x:120,y:100}]. For a cubic bezier this should\n   *            have four points.\n   * @param location\n   *            a decimal indicating the distance along the curve the point\n   *            should be located at. this is the distance along the curve as\n   *            it travels, taking the way it bends into account. should be a\n   *            number from 0 to 1, inclusive.\n   */\n\n\n  var _pointOnPath = function _pointOnPath(curve, location) {\n    var cc = _getCurveFunctions(curve.length - 1),\n        _x = 0,\n        _y = 0;\n\n    for (var i = 0; i < curve.length; i++) {\n      _x = _x + curve[i].x * cc[i](location);\n      _y = _y + curve[i].y * cc[i](location);\n    }\n\n    return {\n      x: _x,\n      y: _y\n    };\n  };\n\n  var _dist = function _dist(p1, p2) {\n    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n  };\n  /**\n   * finds the point that is 'distance' along the path from 'location'. this\n   * method returns both the x,y location of the point and also its 'location'\n   * (proportion of travel along the path); the method below -\n   * _pointAlongPathFrom - calls this method and just returns the point.\n   */\n\n\n  var _pointAlongPath = function _pointAlongPath(curve, location, distance) {\n    var prev = _pointOnPath(curve, location),\n        tally = 0,\n        curLoc = location,\n        direction = distance > 0 ? 1 : -1,\n        cur = null;\n\n    while (tally < Math.abs(distance)) {\n      curLoc += 0.005 * direction;\n      cur = _pointOnPath(curve, curLoc);\n      tally += _dist(cur, prev);\n      prev = cur;\n    }\n\n    return {\n      point: cur,\n      location: curLoc\n    };\n  };\n\n  var _length = function _length(curve) {\n    var prev = _pointOnPath(curve, 0),\n        tally = 0,\n        curLoc = 0,\n        direction = 1,\n        cur = null;\n\n    while (curLoc < 1) {\n      curLoc += 0.005 * direction;\n      cur = _pointOnPath(curve, curLoc);\n      tally += _dist(cur, prev);\n      prev = cur;\n    }\n\n    return tally;\n  };\n  /**\n   * finds the point that is 'distance' along the path from 'location'.\n   */\n\n\n  var _pointAlongPathFrom = function _pointAlongPathFrom(curve, location, distance) {\n    return _pointAlongPath(curve, location, distance).point;\n  };\n  /**\n   * finds the location that is 'distance' along the path from 'location'.\n   */\n\n\n  var _locationAlongPathFrom = function _locationAlongPathFrom(curve, location, distance) {\n    return _pointAlongPath(curve, location, distance).location;\n  };\n  /**\n   * returns the gradient of the curve at the given location, which is a\n   * decimal between 0 and 1 inclusive.\n   * \n   * thanks // http://bimixual.org/AnimationLibrary/beziertangents.html\n   */\n\n\n  var _gradientAtPoint = function _gradientAtPoint(curve, location) {\n    var p1 = _pointOnPath(curve, location),\n        p2 = _pointOnPath(curve.slice(0, curve.length - 1), location),\n        dy = p2.y - p1.y,\n        dx = p2.x - p1.x;\n\n    return dy == 0 ? Infinity : Math.atan(dy / dx);\n  };\n  /**\n   * returns the gradient of the curve at the point which is 'distance' from\n   * the given location. if this point is greater than location 1, the\n   * gradient at location 1 is returned. if this point is less than location\n   * 0, the gradient at location 0 is returned.\n   */\n\n\n  var _gradientAtPointAlongPathFrom = function _gradientAtPointAlongPathFrom(curve, location, distance) {\n    var p = _pointAlongPath(curve, location, distance);\n\n    if (p.location > 1) p.location = 1;\n    if (p.location < 0) p.location = 0;\n    return _gradientAtPoint(curve, p.location);\n  };\n  /**\n   * calculates a line that is 'length' pixels long, perpendicular to, and\n   * centered on, the path at 'distance' pixels from the given location. if\n   * distance is not supplied, the perpendicular for the given location is\n   * computed (ie. we set distance to zero).\n   */\n\n\n  var _perpendicularToPathAt = function _perpendicularToPathAt(curve, location, length, distance) {\n    distance = distance == null ? 0 : distance;\n\n    var p = _pointAlongPath(curve, location, distance),\n        m = _gradientAtPoint(curve, p.location),\n        _theta2 = Math.atan(-1 / m),\n        y = length / 2 * Math.sin(_theta2),\n        x = length / 2 * Math.cos(_theta2);\n\n    return [{\n      x: p.point.x + x,\n      y: p.point.y + y\n    }, {\n      x: p.point.x - x,\n      y: p.point.y - y\n    }];\n  };\n\n  lib.jsBezier = {\n    distanceFromCurve: _distanceFromCurve,\n    gradientAtPoint: _gradientAtPoint,\n    gradientAtPointAlongCurveFrom: _gradientAtPointAlongPathFrom,\n    nearestPointOnCurve: _nearestPointOnCurve,\n    pointOnCurve: _pointOnPath,\n    pointAlongCurveFrom: _pointAlongPathFrom,\n    perpendicularToCurveAt: _perpendicularToPathAt,\n    locationAlongCurveFrom: _locationAlongPathFrom,\n    getLength: _length\n  };\n})(lib);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (lib.jsBezier);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodle/lib/jsBezier.js\n");

/***/ }),

/***/ "./src/ChemDoodleWeb-unpacked.js":
/*!***************************************!*\
  !*** ./src/ChemDoodleWeb-unpacked.js ***!
  \***************************************/
/*! exports provided: ChemDoodle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ChemDoodle\", function() { return ChemDoodle; });\n/* harmony import */ var _ChemDoodle_lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ChemDoodle/lib */ \"./src/ChemDoodle/lib/index.js\");\n//\n// ChemDoodle Web Components 8.0.0\n//\n// http://web.chemdoodle.com\n//\n// Copyright 2009-2017 iChemLabs, LLC.  All rights reserved.\n//\n// The ChemDoodle Web Components library is licensed under version 3\n// of the GNU GENERAL PUBLIC LICENSE.\n//\n// You may redistribute it and/or modify it under the terms of the\n// GNU General Public License as published by the Free Software Foundation,\n// either version 3 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n// Please contact iChemLabs <http://www.ichemlabs.com/contact-us> for\n// alternate licensing options.\n//\n// google closure fails if undefined is provided to this module... but it is not needed so whatever...\nvar ChemDoodle=function(){'use strict';var c={};c.iChemLabs={};c.informatics={};c.io={};c.lib=_ChemDoodle_lib__WEBPACK_IMPORTED_MODULE_0__;c.notations={};c.structures={};c.structures.d2={};c.structures.d3={};var VERSION='8.0.0';c.getVersion=function(){return VERSION;};return c;}();// The MIT License (MIT)\n// Copyright (c) 2012-2013 Mikola Lysenko\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n/**\n * Javascript Marching Cubes\n *\n * Based on Paul Bourke's classic implementation:\n *    http://local.wasp.uwa.edu.au/~pbourke/geometry/polygonise/\n *\n * JS port by Mikola Lysenko\n */ChemDoodle.lib.MarchingCubes=function(){var edgeTable=new Uint32Array([0x0,0x109,0x203,0x30a,0x406,0x50f,0x605,0x70c,0x80c,0x905,0xa0f,0xb06,0xc0a,0xd03,0xe09,0xf00,0x190,0x99,0x393,0x29a,0x596,0x49f,0x795,0x69c,0x99c,0x895,0xb9f,0xa96,0xd9a,0xc93,0xf99,0xe90,0x230,0x339,0x33,0x13a,0x636,0x73f,0x435,0x53c,0xa3c,0xb35,0x83f,0x936,0xe3a,0xf33,0xc39,0xd30,0x3a0,0x2a9,0x1a3,0xaa,0x7a6,0x6af,0x5a5,0x4ac,0xbac,0xaa5,0x9af,0x8a6,0xfaa,0xea3,0xda9,0xca0,0x460,0x569,0x663,0x76a,0x66,0x16f,0x265,0x36c,0xc6c,0xd65,0xe6f,0xf66,0x86a,0x963,0xa69,0xb60,0x5f0,0x4f9,0x7f3,0x6fa,0x1f6,0xff,0x3f5,0x2fc,0xdfc,0xcf5,0xfff,0xef6,0x9fa,0x8f3,0xbf9,0xaf0,0x650,0x759,0x453,0x55a,0x256,0x35f,0x55,0x15c,0xe5c,0xf55,0xc5f,0xd56,0xa5a,0xb53,0x859,0x950,0x7c0,0x6c9,0x5c3,0x4ca,0x3c6,0x2cf,0x1c5,0xcc,0xfcc,0xec5,0xdcf,0xcc6,0xbca,0xac3,0x9c9,0x8c0,0x8c0,0x9c9,0xac3,0xbca,0xcc6,0xdcf,0xec5,0xfcc,0xcc,0x1c5,0x2cf,0x3c6,0x4ca,0x5c3,0x6c9,0x7c0,0x950,0x859,0xb53,0xa5a,0xd56,0xc5f,0xf55,0xe5c,0x15c,0x55,0x35f,0x256,0x55a,0x453,0x759,0x650,0xaf0,0xbf9,0x8f3,0x9fa,0xef6,0xfff,0xcf5,0xdfc,0x2fc,0x3f5,0xff,0x1f6,0x6fa,0x7f3,0x4f9,0x5f0,0xb60,0xa69,0x963,0x86a,0xf66,0xe6f,0xd65,0xc6c,0x36c,0x265,0x16f,0x66,0x76a,0x663,0x569,0x460,0xca0,0xda9,0xea3,0xfaa,0x8a6,0x9af,0xaa5,0xbac,0x4ac,0x5a5,0x6af,0x7a6,0xaa,0x1a3,0x2a9,0x3a0,0xd30,0xc39,0xf33,0xe3a,0x936,0x83f,0xb35,0xa3c,0x53c,0x435,0x73f,0x636,0x13a,0x33,0x339,0x230,0xe90,0xf99,0xc93,0xd9a,0xa96,0xb9f,0x895,0x99c,0x69c,0x795,0x49f,0x596,0x29a,0x393,0x99,0x190,0xf00,0xe09,0xd03,0xc0a,0xb06,0xa0f,0x905,0x80c,0x70c,0x605,0x50f,0x406,0x30a,0x203,0x109,0x0]),triTable=[[],[0,8,3],[0,1,9],[1,8,3,9,8,1],[1,2,10],[0,8,3,1,2,10],[9,2,10,0,2,9],[2,8,3,2,10,8,10,9,8],[3,11,2],[0,11,2,8,11,0],[1,9,0,2,3,11],[1,11,2,1,9,11,9,8,11],[3,10,1,11,10,3],[0,10,1,0,8,10,8,11,10],[3,9,0,3,11,9,11,10,9],[9,8,10,10,8,11],[4,7,8],[4,3,0,7,3,4],[0,1,9,8,4,7],[4,1,9,4,7,1,7,3,1],[1,2,10,8,4,7],[3,4,7,3,0,4,1,2,10],[9,2,10,9,0,2,8,4,7],[2,10,9,2,9,7,2,7,3,7,9,4],[8,4,7,3,11,2],[11,4,7,11,2,4,2,0,4],[9,0,1,8,4,7,2,3,11],[4,7,11,9,4,11,9,11,2,9,2,1],[3,10,1,3,11,10,7,8,4],[1,11,10,1,4,11,1,0,4,7,11,4],[4,7,8,9,0,11,9,11,10,11,0,3],[4,7,11,4,11,9,9,11,10],[9,5,4],[9,5,4,0,8,3],[0,5,4,1,5,0],[8,5,4,8,3,5,3,1,5],[1,2,10,9,5,4],[3,0,8,1,2,10,4,9,5],[5,2,10,5,4,2,4,0,2],[2,10,5,3,2,5,3,5,4,3,4,8],[9,5,4,2,3,11],[0,11,2,0,8,11,4,9,5],[0,5,4,0,1,5,2,3,11],[2,1,5,2,5,8,2,8,11,4,8,5],[10,3,11,10,1,3,9,5,4],[4,9,5,0,8,1,8,10,1,8,11,10],[5,4,0,5,0,11,5,11,10,11,0,3],[5,4,8,5,8,10,10,8,11],[9,7,8,5,7,9],[9,3,0,9,5,3,5,7,3],[0,7,8,0,1,7,1,5,7],[1,5,3,3,5,7],[9,7,8,9,5,7,10,1,2],[10,1,2,9,5,0,5,3,0,5,7,3],[8,0,2,8,2,5,8,5,7,10,5,2],[2,10,5,2,5,3,3,5,7],[7,9,5,7,8,9,3,11,2],[9,5,7,9,7,2,9,2,0,2,7,11],[2,3,11,0,1,8,1,7,8,1,5,7],[11,2,1,11,1,7,7,1,5],[9,5,8,8,5,7,10,1,3,10,3,11],[5,7,0,5,0,9,7,11,0,1,0,10,11,10,0],[11,10,0,11,0,3,10,5,0,8,0,7,5,7,0],[11,10,5,7,11,5],[10,6,5],[0,8,3,5,10,6],[9,0,1,5,10,6],[1,8,3,1,9,8,5,10,6],[1,6,5,2,6,1],[1,6,5,1,2,6,3,0,8],[9,6,5,9,0,6,0,2,6],[5,9,8,5,8,2,5,2,6,3,2,8],[2,3,11,10,6,5],[11,0,8,11,2,0,10,6,5],[0,1,9,2,3,11,5,10,6],[5,10,6,1,9,2,9,11,2,9,8,11],[6,3,11,6,5,3,5,1,3],[0,8,11,0,11,5,0,5,1,5,11,6],[3,11,6,0,3,6,0,6,5,0,5,9],[6,5,9,6,9,11,11,9,8],[5,10,6,4,7,8],[4,3,0,4,7,3,6,5,10],[1,9,0,5,10,6,8,4,7],[10,6,5,1,9,7,1,7,3,7,9,4],[6,1,2,6,5,1,4,7,8],[1,2,5,5,2,6,3,0,4,3,4,7],[8,4,7,9,0,5,0,6,5,0,2,6],[7,3,9,7,9,4,3,2,9,5,9,6,2,6,9],[3,11,2,7,8,4,10,6,5],[5,10,6,4,7,2,4,2,0,2,7,11],[0,1,9,4,7,8,2,3,11,5,10,6],[9,2,1,9,11,2,9,4,11,7,11,4,5,10,6],[8,4,7,3,11,5,3,5,1,5,11,6],[5,1,11,5,11,6,1,0,11,7,11,4,0,4,11],[0,5,9,0,6,5,0,3,6,11,6,3,8,4,7],[6,5,9,6,9,11,4,7,9,7,11,9],[10,4,9,6,4,10],[4,10,6,4,9,10,0,8,3],[10,0,1,10,6,0,6,4,0],[8,3,1,8,1,6,8,6,4,6,1,10],[1,4,9,1,2,4,2,6,4],[3,0,8,1,2,9,2,4,9,2,6,4],[0,2,4,4,2,6],[8,3,2,8,2,4,4,2,6],[10,4,9,10,6,4,11,2,3],[0,8,2,2,8,11,4,9,10,4,10,6],[3,11,2,0,1,6,0,6,4,6,1,10],[6,4,1,6,1,10,4,8,1,2,1,11,8,11,1],[9,6,4,9,3,6,9,1,3,11,6,3],[8,11,1,8,1,0,11,6,1,9,1,4,6,4,1],[3,11,6,3,6,0,0,6,4],[6,4,8,11,6,8],[7,10,6,7,8,10,8,9,10],[0,7,3,0,10,7,0,9,10,6,7,10],[10,6,7,1,10,7,1,7,8,1,8,0],[10,6,7,10,7,1,1,7,3],[1,2,6,1,6,8,1,8,9,8,6,7],[2,6,9,2,9,1,6,7,9,0,9,3,7,3,9],[7,8,0,7,0,6,6,0,2],[7,3,2,6,7,2],[2,3,11,10,6,8,10,8,9,8,6,7],[2,0,7,2,7,11,0,9,7,6,7,10,9,10,7],[1,8,0,1,7,8,1,10,7,6,7,10,2,3,11],[11,2,1,11,1,7,10,6,1,6,7,1],[8,9,6,8,6,7,9,1,6,11,6,3,1,3,6],[0,9,1,11,6,7],[7,8,0,7,0,6,3,11,0,11,6,0],[7,11,6],[7,6,11],[3,0,8,11,7,6],[0,1,9,11,7,6],[8,1,9,8,3,1,11,7,6],[10,1,2,6,11,7],[1,2,10,3,0,8,6,11,7],[2,9,0,2,10,9,6,11,7],[6,11,7,2,10,3,10,8,3,10,9,8],[7,2,3,6,2,7],[7,0,8,7,6,0,6,2,0],[2,7,6,2,3,7,0,1,9],[1,6,2,1,8,6,1,9,8,8,7,6],[10,7,6,10,1,7,1,3,7],[10,7,6,1,7,10,1,8,7,1,0,8],[0,3,7,0,7,10,0,10,9,6,10,7],[7,6,10,7,10,8,8,10,9],[6,8,4,11,8,6],[3,6,11,3,0,6,0,4,6],[8,6,11,8,4,6,9,0,1],[9,4,6,9,6,3,9,3,1,11,3,6],[6,8,4,6,11,8,2,10,1],[1,2,10,3,0,11,0,6,11,0,4,6],[4,11,8,4,6,11,0,2,9,2,10,9],[10,9,3,10,3,2,9,4,3,11,3,6,4,6,3],[8,2,3,8,4,2,4,6,2],[0,4,2,4,6,2],[1,9,0,2,3,4,2,4,6,4,3,8],[1,9,4,1,4,2,2,4,6],[8,1,3,8,6,1,8,4,6,6,10,1],[10,1,0,10,0,6,6,0,4],[4,6,3,4,3,8,6,10,3,0,3,9,10,9,3],[10,9,4,6,10,4],[4,9,5,7,6,11],[0,8,3,4,9,5,11,7,6],[5,0,1,5,4,0,7,6,11],[11,7,6,8,3,4,3,5,4,3,1,5],[9,5,4,10,1,2,7,6,11],[6,11,7,1,2,10,0,8,3,4,9,5],[7,6,11,5,4,10,4,2,10,4,0,2],[3,4,8,3,5,4,3,2,5,10,5,2,11,7,6],[7,2,3,7,6,2,5,4,9],[9,5,4,0,8,6,0,6,2,6,8,7],[3,6,2,3,7,6,1,5,0,5,4,0],[6,2,8,6,8,7,2,1,8,4,8,5,1,5,8],[9,5,4,10,1,6,1,7,6,1,3,7],[1,6,10,1,7,6,1,0,7,8,7,0,9,5,4],[4,0,10,4,10,5,0,3,10,6,10,7,3,7,10],[7,6,10,7,10,8,5,4,10,4,8,10],[6,9,5,6,11,9,11,8,9],[3,6,11,0,6,3,0,5,6,0,9,5],[0,11,8,0,5,11,0,1,5,5,6,11],[6,11,3,6,3,5,5,3,1],[1,2,10,9,5,11,9,11,8,11,5,6],[0,11,3,0,6,11,0,9,6,5,6,9,1,2,10],[11,8,5,11,5,6,8,0,5,10,5,2,0,2,5],[6,11,3,6,3,5,2,10,3,10,5,3],[5,8,9,5,2,8,5,6,2,3,8,2],[9,5,6,9,6,0,0,6,2],[1,5,8,1,8,0,5,6,8,3,8,2,6,2,8],[1,5,6,2,1,6],[1,3,6,1,6,10,3,8,6,5,6,9,8,9,6],[10,1,0,10,0,6,9,5,0,5,6,0],[0,3,8,5,6,10],[10,5,6],[11,5,10,7,5,11],[11,5,10,11,7,5,8,3,0],[5,11,7,5,10,11,1,9,0],[10,7,5,10,11,7,9,8,1,8,3,1],[11,1,2,11,7,1,7,5,1],[0,8,3,1,2,7,1,7,5,7,2,11],[9,7,5,9,2,7,9,0,2,2,11,7],[7,5,2,7,2,11,5,9,2,3,2,8,9,8,2],[2,5,10,2,3,5,3,7,5],[8,2,0,8,5,2,8,7,5,10,2,5],[9,0,1,5,10,3,5,3,7,3,10,2],[9,8,2,9,2,1,8,7,2,10,2,5,7,5,2],[1,3,5,3,7,5],[0,8,7,0,7,1,1,7,5],[9,0,3,9,3,5,5,3,7],[9,8,7,5,9,7],[5,8,4,5,10,8,10,11,8],[5,0,4,5,11,0,5,10,11,11,3,0],[0,1,9,8,4,10,8,10,11,10,4,5],[10,11,4,10,4,5,11,3,4,9,4,1,3,1,4],[2,5,1,2,8,5,2,11,8,4,5,8],[0,4,11,0,11,3,4,5,11,2,11,1,5,1,11],[0,2,5,0,5,9,2,11,5,4,5,8,11,8,5],[9,4,5,2,11,3],[2,5,10,3,5,2,3,4,5,3,8,4],[5,10,2,5,2,4,4,2,0],[3,10,2,3,5,10,3,8,5,4,5,8,0,1,9],[5,10,2,5,2,4,1,9,2,9,4,2],[8,4,5,8,5,3,3,5,1],[0,4,5,1,0,5],[8,4,5,8,5,3,9,0,5,0,3,5],[9,4,5],[4,11,7,4,9,11,9,10,11],[0,8,3,4,9,7,9,11,7,9,10,11],[1,10,11,1,11,4,1,4,0,7,4,11],[3,1,4,3,4,8,1,10,4,7,4,11,10,11,4],[4,11,7,9,11,4,9,2,11,9,1,2],[9,7,4,9,11,7,9,1,11,2,11,1,0,8,3],[11,7,4,11,4,2,2,4,0],[11,7,4,11,4,2,8,3,4,3,2,4],[2,9,10,2,7,9,2,3,7,7,4,9],[9,10,7,9,7,4,10,2,7,8,7,0,2,0,7],[3,7,10,3,10,2,7,4,10,1,10,0,4,0,10],[1,10,2,8,7,4],[4,9,1,4,1,7,7,1,3],[4,9,1,4,1,7,0,8,1,8,7,1],[4,0,3,7,4,3],[4,8,7],[9,10,8,10,11,8],[3,0,9,3,9,11,11,9,10],[0,1,10,0,10,8,8,10,11],[3,1,10,11,3,10],[1,2,11,1,11,9,9,11,8],[3,0,9,3,9,11,1,2,9,2,11,9],[0,2,11,8,0,11],[3,2,11],[2,3,8,2,8,10,10,8,9],[9,10,2,0,9,2],[2,3,8,2,8,10,0,1,8,1,10,8],[1,10,2],[1,3,8,9,1,8],[0,9,1],[0,3,8],[]],cubeVerts=[[0,0,0],[1,0,0],[1,1,0],[0,1,0],[0,0,1],[1,0,1],[1,1,1],[0,1,1]],edgeIndex=[[0,1],[1,2],[2,3],[3,0],[4,5],[5,6],[6,7],[7,4],[0,4],[1,5],[2,6],[3,7]];return function(data,dims){var vertices=[],faces=[],n=0,grid=new Float32Array(8),edges=new Int32Array(12),x=new Int32Array(3);//March over the volume\nfor(x[2]=0;x[2]<dims[2]-1;++x[2],n+=dims[0]){for(x[1]=0;x[1]<dims[1]-1;++x[1],++n){for(x[0]=0;x[0]<dims[0]-1;++x[0],++n){//For each cell, compute cube mask\nvar cube_index=0;for(var i=0;i<8;++i){var v=cubeVerts[i],s=data[n+v[0]+dims[0]*(v[1]+dims[1]*v[2])];grid[i]=s;cube_index|=s>0?1<<i:0;}//Compute vertices\nvar edge_mask=edgeTable[cube_index];if(edge_mask===0){continue;}for(var i=0;i<12;++i){if((edge_mask&1<<i)===0){continue;}edges[i]=vertices.length;var nv=[0,0,0],e=edgeIndex[i],p0=cubeVerts[e[0]],p1=cubeVerts[e[1]],a=grid[e[0]],b=grid[e[1]],d=a-b,t=0;if(Math.abs(d)>1e-6){t=a/d;}for(var j=0;j<3;++j){nv[j]=x[j]+p0[j]+t*(p1[j]-p0[j]);}vertices.push(nv);}//Add faces\nvar f=triTable[cube_index];for(var i=0;i<f.length;i+=3){faces.push([edges[f[i]],edges[f[i+1]],edges[f[i+2]]]);}}}}return{vertices:vertices,faces:faces};};}();ChemDoodle.animations=function(window,undefined){'use strict';var ext={};// Drop in replace functions for setTimeout() & setInterval() that \n// make use of requestAnimationFrame() for performance where available\n// http://www.joelambert.co.uk\n// Copyright 2011, Joe Lambert.\n// Free to use under the MIT license.\n// http://www.opensource.org/licenses/mit-license.php\n// requestAnimationFrame() shim by Paul Irish\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\nwindow.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(/* function */callback,/* DOMElement */element){window.setTimeout(callback,1000/60);};}();/**\n\t * Behaves the same as setInterval except uses requestAnimationFrame() where possible for better performance\n\t * @param {function} fn The callback function\n\t * @param {int} delay The delay in milliseconds\n\t */ext.requestInterval=function(fn,delay){if(!window.requestAnimationFrame&&!window.webkitRequestAnimationFrame&&!(window.mozRequestAnimationFrame&&window.mozCancelRequestAnimationFrame)&&// Firefox 5 ships without cancel support\n!window.oRequestAnimationFrame&&!window.msRequestAnimationFrame)return window.setInterval(fn,delay);var start=new Date().getTime(),handle=new Object();function loop(){var current=new Date().getTime(),delta=current-start;if(delta>=delay){fn.call();start=new Date().getTime();}handle.value=window.requestAnimFrame(loop);};handle.value=window.requestAnimFrame(loop);return handle;};/**\n\t * Behaves the same as clearInterval except uses cancelRequestAnimationFrame() where possible for better performance\n\t * @param {int|object} fn The callback function\n\t */ext.clearRequestInterval=function(handle){window.cancelAnimationFrame?window.cancelAnimationFrame(handle.value):window.webkitCancelAnimationFrame?window.webkitCancelAnimationFrame(handle.value):window.webkitCancelRequestAnimationFrame?window.webkitCancelRequestAnimationFrame(handle.value):/* Support for legacy API */window.mozCancelRequestAnimationFrame?window.mozCancelRequestAnimationFrame(handle.value):window.oCancelRequestAnimationFrame?window.oCancelRequestAnimationFrame(handle.value):window.msCancelRequestAnimationFrame?window.msCancelRequestAnimationFrame(handle.value):clearInterval(handle);};/**\n\t * Behaves the same as setTimeout except uses requestAnimationFrame() where possible for better performance\n\t * @param {function} fn The callback function\n\t * @param {int} delay The delay in milliseconds\n\t */ext.requestTimeout=function(fn,delay){if(!window.requestAnimationFrame&&!window.webkitRequestAnimationFrame&&!(window.mozRequestAnimationFrame&&window.mozCancelRequestAnimationFrame)&&// Firefox 5 ships without cancel support\n!window.oRequestAnimationFrame&&!window.msRequestAnimationFrame)return window.setTimeout(fn,delay);var start=new Date().getTime(),handle=new Object();function loop(){var current=new Date().getTime(),delta=current-start;delta>=delay?fn.call():handle.value=window.requestAnimFrame(loop);};handle.value=window.requestAnimFrame(loop);return handle;};/**\n\t * Behaves the same as clearTimeout except uses cancelRequestAnimationFrame() where possible for better performance\n\t * @param {int|object} fn The callback function\n\t */ext.clearRequestTimeout=function(handle){window.cancelAnimationFrame?window.cancelAnimationFrame(handle.value):window.webkitCancelAnimationFrame?window.webkitCancelAnimationFrame(handle.value):window.webkitCancelRequestAnimationFrame?window.webkitCancelRequestAnimationFrame(handle.value):/* Support for legacy API */window.mozCancelRequestAnimationFrame?window.mozCancelRequestAnimationFrame(handle.value):window.oCancelRequestAnimationFrame?window.oCancelRequestAnimationFrame(handle.value):window.msCancelRequestAnimationFrame?window.msCancelRequestAnimationFrame(handle.value):clearTimeout(handle);};return ext;}(window);ChemDoodle.extensions=function(structures,v3,m,undefined){'use strict';var ext={};ext.stringStartsWith=function(str,match){return str.slice(0,match.length)===match;};ext.vec3AngleFrom=function(v1,v2){var length1=v3.length(v1);var length2=v3.length(v2);var dot=v3.dot(v1,v2);var cosine=dot/length1/length2;return m.acos(cosine);};ext.contextRoundRect=function(ctx,x,y,width,height,radius){ctx.beginPath();ctx.moveTo(x+radius,y);ctx.lineTo(x+width-radius,y);ctx.quadraticCurveTo(x+width,y,x+width,y+radius);ctx.lineTo(x+width,y+height-radius);ctx.quadraticCurveTo(x+width,y+height,x+width-radius,y+height);ctx.lineTo(x+radius,y+height);ctx.quadraticCurveTo(x,y+height,x,y+height-radius);ctx.lineTo(x,y+radius);ctx.quadraticCurveTo(x,y,x+radius,y);ctx.closePath();};ext.contextEllipse=function(ctx,x,y,w,h){var kappa=.5522848;var ox=w/2*kappa;var oy=h/2*kappa;var xe=x+w;var ye=y+h;var xm=x+w/2;var ym=y+h/2;ctx.beginPath();ctx.moveTo(x,ym);ctx.bezierCurveTo(x,ym-oy,xm-ox,y,xm,y);ctx.bezierCurveTo(xm+ox,y,xe,ym-oy,xe,ym);ctx.bezierCurveTo(xe,ym+oy,xm+ox,ye,xm,ye);ctx.bezierCurveTo(xm-ox,ye,x,ym+oy,x,ym);ctx.closePath();};ext.getFontString=function(size,families,bold,italic){var sb=[];if(bold){sb.push('bold ');}if(italic){sb.push('italic ');}sb.push(size+'px ');for(var i=0,ii=families.length;i<ii;i++){var use=families[i];if(use.indexOf(' ')!==-1){use='\"'+use+'\"';}sb.push((i!==0?',':'')+use);}return sb.join('');};return ext;}(ChemDoodle.structures,ChemDoodle.lib.vec3,Math);ChemDoodle.math=function(c,extensions,structures,q,m,undefined){'use strict';var pack={};var namedColors={'aliceblue':'#f0f8ff','antiquewhite':'#faebd7','aqua':'#00ffff','aquamarine':'#7fffd4','azure':'#f0ffff','beige':'#f5f5dc','bisque':'#ffe4c4','black':'#000000','blanchedalmond':'#ffebcd','blue':'#0000ff','blueviolet':'#8a2be2','brown':'#a52a2a','burlywood':'#deb887','cadetblue':'#5f9ea0','chartreuse':'#7fff00','chocolate':'#d2691e','coral':'#ff7f50','cornflowerblue':'#6495ed','cornsilk':'#fff8dc','crimson':'#dc143c','cyan':'#00ffff','darkblue':'#00008b','darkcyan':'#008b8b','darkgoldenrod':'#b8860b','darkgray':'#a9a9a9','darkgreen':'#006400','darkkhaki':'#bdb76b','darkmagenta':'#8b008b','darkolivegreen':'#556b2f','darkorange':'#ff8c00','darkorchid':'#9932cc','darkred':'#8b0000','darksalmon':'#e9967a','darkseagreen':'#8fbc8f','darkslateblue':'#483d8b','darkslategray':'#2f4f4f','darkturquoise':'#00ced1','darkviolet':'#9400d3','deeppink':'#ff1493','deepskyblue':'#00bfff','dimgray':'#696969','dodgerblue':'#1e90ff','firebrick':'#b22222','floralwhite':'#fffaf0','forestgreen':'#228b22','fuchsia':'#ff00ff','gainsboro':'#dcdcdc','ghostwhite':'#f8f8ff','gold':'#ffd700','goldenrod':'#daa520','gray':'#808080','green':'#008000','greenyellow':'#adff2f','honeydew':'#f0fff0','hotpink':'#ff69b4','indianred ':'#cd5c5c','indigo ':'#4b0082','ivory':'#fffff0','khaki':'#f0e68c','lavender':'#e6e6fa','lavenderblush':'#fff0f5','lawngreen':'#7cfc00','lemonchiffon':'#fffacd','lightblue':'#add8e6','lightcoral':'#f08080','lightcyan':'#e0ffff','lightgoldenrodyellow':'#fafad2','lightgrey':'#d3d3d3','lightgreen':'#90ee90','lightpink':'#ffb6c1','lightsalmon':'#ffa07a','lightseagreen':'#20b2aa','lightskyblue':'#87cefa','lightslategray':'#778899','lightsteelblue':'#b0c4de','lightyellow':'#ffffe0','lime':'#00ff00','limegreen':'#32cd32','linen':'#faf0e6','magenta':'#ff00ff','maroon':'#800000','mediumaquamarine':'#66cdaa','mediumblue':'#0000cd','mediumorchid':'#ba55d3','mediumpurple':'#9370d8','mediumseagreen':'#3cb371','mediumslateblue':'#7b68ee','mediumspringgreen':'#00fa9a','mediumturquoise':'#48d1cc','mediumvioletred':'#c71585','midnightblue':'#191970','mintcream':'#f5fffa','mistyrose':'#ffe4e1','moccasin':'#ffe4b5','navajowhite':'#ffdead','navy':'#000080','oldlace':'#fdf5e6','olive':'#808000','olivedrab':'#6b8e23','orange':'#ffa500','orangered':'#ff4500','orchid':'#da70d6','palegoldenrod':'#eee8aa','palegreen':'#98fb98','paleturquoise':'#afeeee','palevioletred':'#d87093','papayawhip':'#ffefd5','peachpuff':'#ffdab9','peru':'#cd853f','pink':'#ffc0cb','plum':'#dda0dd','powderblue':'#b0e0e6','purple':'#800080','red':'#ff0000','rosybrown':'#bc8f8f','royalblue':'#4169e1','saddlebrown':'#8b4513','salmon':'#fa8072','sandybrown':'#f4a460','seagreen':'#2e8b57','seashell':'#fff5ee','sienna':'#a0522d','silver':'#c0c0c0','skyblue':'#87ceeb','slateblue':'#6a5acd','slategray':'#708090','snow':'#fffafa','springgreen':'#00ff7f','steelblue':'#4682b4','tan':'#d2b48c','teal':'#008080','thistle':'#d8bfd8','tomato':'#ff6347','turquoise':'#40e0d0','violet':'#ee82ee','wheat':'#f5deb3','white':'#ffffff','whitesmoke':'#f5f5f5','yellow':'#ffff00','yellowgreen':'#9acd32'};pack.angleBetweenLargest=function(angles){if(angles.length===0){return{angle:0,largest:m.PI*2};}if(angles.length===1){return{angle:angles[0]+m.PI,largest:m.PI*2};}var largest=0;var angle=0;for(var i=0,ii=angles.length-1;i<ii;i++){var dif=angles[i+1]-angles[i];if(dif>largest){largest=dif;angle=(angles[i+1]+angles[i])/2;}}var last=angles[0]+m.PI*2-angles[angles.length-1];if(last>largest){angle=angles[0]-last/2;largest=last;if(angle<0){angle+=m.PI*2;}}return{angle:angle,largest:largest};};pack.isBetween=function(x,left,right){if(left>right){var tmp=left;left=right;right=tmp;}return x>=left&&x<=right;};// be careful not to remove this, as this will cause corruption issues\n// contact iChemLabs for instructions to remove this\nq(document).ready(function(){if(c&&c.iChemLabs&&c.iChemLabs.checkForUpdates){c.iChemLabs.checkForUpdates({});}});pack.getRGB=function(color,multiplier){var err=[0,0,0];if(namedColors[color.toLowerCase()]){color=namedColors[color.toLowerCase()];}if(color.charAt(0)==='#'){if(color.length===4){color='#'+color.charAt(1)+color.charAt(1)+color.charAt(2)+color.charAt(2)+color.charAt(3)+color.charAt(3);}return[parseInt(color.substring(1,3),16)/255.0*multiplier,parseInt(color.substring(3,5),16)/255.0*multiplier,parseInt(color.substring(5,7),16)/255.0*multiplier];}else if(extensions.stringStartsWith(color,'rgb')){var cs=color.replace(/rgb\\(|\\)/g,'').split(',');if(cs.length!==3){return err;}return[parseInt(cs[0])/255.0*multiplier,parseInt(cs[1])/255.0*multiplier,parseInt(cs[2])/255.0*multiplier];}return err;};pack.hsl2rgb=function(h,s,l){var hue2rgb=function hue2rgb(p,q,t){if(t<0){t+=1;}else if(t>1){t-=1;}if(t<1/6){return p+(q-p)*6*t;}else if(t<1/2){return q;}else if(t<2/3){return p+(q-p)*(2/3-t)*6;}return p;};var r,g,b;if(s===0){r=g=b=l;// achromatic\n}else{var q=l<0.5?l*(1+s):l+s-l*s;var p=2*l-q;r=hue2rgb(p,q,h+1/3);g=hue2rgb(p,q,h);b=hue2rgb(p,q,h-1/3);}return[r*255,g*255,b*255];};pack.idx2color=function(value){var hex=value.toString(16);// add '0' padding\nfor(var i=0,ii=6-hex.length;i<ii;i++){hex=\"0\"+hex;}return\"#\"+hex;};pack.distanceFromPointToLineInclusive=function(p,l1,l2,retract){var length=l1.distance(l2);var angle=l1.angle(l2);var angleDif=m.PI/2-angle;var newAngleP=l1.angle(p)+angleDif;var pDist=l1.distance(p);var pcopRot=new structures.Point(pDist*m.cos(newAngleP),-pDist*m.sin(newAngleP));var pull=retract?retract:0;if(pack.isBetween(-pcopRot.y,pull,length-pull)){return m.abs(pcopRot.x);}return-1;};pack.calculateDistanceInterior=function(to,from,r){if(this.isBetween(from.x,r.x,r.x+r.w)&&this.isBetween(from.y,r.y,r.y+r.h)){return to.distance(from);}// calculates the distance that a line needs to remove from itself to be\n// outside that rectangle\nvar lines=[];// top\nlines.push({x1:r.x,y1:r.y,x2:r.x+r.w,y2:r.y});// bottom\nlines.push({x1:r.x,y1:r.y+r.h,x2:r.x+r.w,y2:r.y+r.h});// left\nlines.push({x1:r.x,y1:r.y,x2:r.x,y2:r.y+r.h});// right\nlines.push({x1:r.x+r.w,y1:r.y,x2:r.x+r.w,y2:r.y+r.h});var intersections=[];for(var i=0;i<4;i++){var l=lines[i];var p=this.intersectLines(from.x,from.y,to.x,to.y,l.x1,l.y1,l.x2,l.y2);if(p){intersections.push(p);}}if(intersections.length===0){return 0;}var max=0;for(var i=0,ii=intersections.length;i<ii;i++){var p=intersections[i];var dx=to.x-p.x;var dy=to.y-p.y;max=m.max(max,m.sqrt(dx*dx+dy*dy));}return max;};pack.intersectLines=function(ax,ay,bx,by,cx,cy,dx,dy){// calculate the direction vectors\nbx-=ax;by-=ay;dx-=cx;dy-=cy;// are they parallel?\nvar denominator=by*dx-bx*dy;if(denominator===0){return false;}// calculate point of intersection\nvar r=(dy*(ax-cx)-dx*(ay-cy))/denominator;var s=(by*(ax-cx)-bx*(ay-cy))/denominator;if(s>=0&&s<=1&&r>=0&&r<=1){return{x:ax+r*bx,y:ay+r*by};}else{return false;}};pack.clamp=function(value,min,max){return value<min?min:value>max?max:value;};pack.rainbowAt=function(i,ii,colors){// The rainbow colors length must be more than one color\nif(colors.length<1){colors.push('#000000','#FFFFFF');}else if(colors.length<2){colors.push('#FFFFFF');}var step=ii/(colors.length-1);var j=m.floor(i/step);var t=(i-j*step)/step;var startColor=pack.getRGB(colors[j],1);var endColor=pack.getRGB(colors[j+1],1);var lerpColor=[(startColor[0]+(endColor[0]-startColor[0])*t)*255,(startColor[1]+(endColor[1]-startColor[1])*t)*255,(startColor[2]+(endColor[2]-startColor[2])*t)*255];return'rgb('+lerpColor.join(',')+')';};pack.angleBounds=function(angle,convertToDegrees,limitToPi){var full=m.PI*2;while(angle<0){angle+=full;}while(angle>full){angle-=full;}if(limitToPi&&angle>m.PI){angle=2*m.PI-angle;}if(convertToDegrees){angle=180*angle/m.PI;}return angle;};pack.isPointInPoly=function(poly,pt){for(var c=false,i=-1,l=poly.length,j=l-1;++i<l;j=i){(poly[i].y<=pt.y&&pt.y<poly[j].y||poly[j].y<=pt.y&&pt.y<poly[i].y)&&pt.x<(poly[j].x-poly[i].x)*(pt.y-poly[i].y)/(poly[j].y-poly[i].y)+poly[i].x&&(c=!c);}return c;};return pack;}(ChemDoodle,ChemDoodle.extensions,ChemDoodle.structures,ChemDoodle.lib.jQuery,Math);(function(math,m,undefined){'use strict';math.Bounds=function(){};var _=math.Bounds.prototype;_.minX=_.minY=_.minZ=Infinity;_.maxX=_.maxY=_.maxZ=-Infinity;_.expand=function(x1,y1,x2,y2){if(x1 instanceof math.Bounds){// only need to compare min and max since bounds already has\n// them ordered\nthis.minX=m.min(this.minX,x1.minX);this.minY=m.min(this.minY,x1.minY);this.maxX=m.max(this.maxX,x1.maxX);this.maxY=m.max(this.maxY,x1.maxY);if(x1.maxZ!==Infinity){this.minZ=m.min(this.minZ,x1.minZ);this.maxZ=m.max(this.maxZ,x1.maxZ);}}else{this.minX=m.min(this.minX,x1);this.maxX=m.max(this.maxX,x1);this.minY=m.min(this.minY,y1);this.maxY=m.max(this.maxY,y1);// these two values could be 0, so check if undefined\nif(x2!==undefined&&y2!==undefined){this.minX=m.min(this.minX,x2);this.maxX=m.max(this.maxX,x2);this.minY=m.min(this.minY,y2);this.maxY=m.max(this.maxY,y2);}}};_.expand3D=function(x1,y1,z1,x2,y2,z2){this.minX=m.min(this.minX,x1);this.maxX=m.max(this.maxX,x1);this.minY=m.min(this.minY,y1);this.maxY=m.max(this.maxY,y1);this.minZ=m.min(this.minZ,z1);this.maxZ=m.max(this.maxZ,z1);// these two values could be 0, so check if undefined\nif(x2!==undefined&&y2!==undefined&&z2!==undefined){this.minX=m.min(this.minX,x2);this.maxX=m.max(this.maxX,x2);this.minY=m.min(this.minY,y2);this.maxY=m.max(this.maxY,y2);this.minZ=m.min(this.minZ,z2);this.maxZ=m.max(this.maxZ,z2);}};})(ChemDoodle.math,Math);ChemDoodle.featureDetection=function(iChemLabs,q,document,window,undefined){'use strict';var features={};features.supports_canvas=function(){return!!document.createElement('canvas').getContext;};features.supports_canvas_text=function(){if(!features.supports_canvas()){return false;}var dummy_canvas=document.createElement('canvas');var context=dummy_canvas.getContext('2d');return typeof context.fillText==='function';};features.supports_webgl=function(){var dummy_canvas=document.createElement('canvas');try{if(dummy_canvas.getContext('webgl')){return true;}if(dummy_canvas.getContext('experimental-webgl')){return true;}}catch(b){}return false;};features.supports_xhr2=function(){return q.support.cors;};features.supports_touch=function(){// check the mobile os so we don't interfere with hybrid pcs\nreturn'ontouchstart'in window&&!!navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|BB10/i);};features.supports_gesture=function(){return'ongesturestart'in window;};return features;}(ChemDoodle.iChemLabs,ChemDoodle.lib.jQuery,document,window);// all symbols\nChemDoodle.SYMBOLS=['H','He','Li','Be','B','C','N','O','F','Ne','Na','Mg','Al','Si','P','S','Cl','Ar','K','Ca','Sc','Ti','V','Cr','Mn','Fe','Co','Ni','Cu','Zn','Ga','Ge','As','Se','Br','Kr','Rb','Sr','Y','Zr','Nb','Mo','Tc','Ru','Rh','Pd','Ag','Cd','In','Sn','Sb','Te','I','Xe','Cs','Ba','La','Ce','Pr','Nd','Pm','Sm','Eu','Gd','Tb','Dy','Ho','Er','Tm','Yb','Lu','Hf','Ta','W','Re','Os','Ir','Pt','Au','Hg','Tl','Pb','Bi','Po','At','Rn','Fr','Ra','Ac','Th','Pa','U','Np','Pu','Am','Cm','Bk','Cf','Es','Fm','Md','No','Lr','Rf','Db','Sg','Bh','Hs','Mt','Ds','Rg','Cn','Nh','Fl','Mc','Lv','Ts','Og'];ChemDoodle.ELEMENT=function(SYMBOLS,undefined){'use strict';var E=[];function Element(symbol,name,atomicNumber,addH,color,covalentRadius,vdWRadius,valency,mass){this.symbol=symbol;this.name=name;this.atomicNumber=atomicNumber;this.addH=addH;this.jmolColor=this.pymolColor=color;this.covalentRadius=covalentRadius;this.vdWRadius=vdWRadius;this.valency=valency;this.mass=mass;}E.H=new Element('H','Hydrogen',1,false,'#FFFFFF',0.31,1.1,1,1);E.He=new Element('He','Helium',2,false,'#D9FFFF',0.28,1.4,0,4);E.Li=new Element('Li','Lithium',3,false,'#CC80FF',1.28,1.82,1,7);E.Be=new Element('Be','Beryllium',4,false,'#C2FF00',0.96,1.53,2,9);E.B=new Element('B','Boron',5,true,'#FFB5B5',0.84,1.92,3,11);E.C=new Element('C','Carbon',6,true,'#909090',0.76,1.7,4,12);E.N=new Element('N','Nitrogen',7,true,'#3050F8',0.71,1.55,3,14);E.O=new Element('O','Oxygen',8,true,'#FF0D0D',0.66,1.52,2,16);E.F=new Element('F','Fluorine',9,true,'#90E050',0.57,1.47,1,19);E.Ne=new Element('Ne','Neon',10,false,'#B3E3F5',0.58,1.54,0,20);E.Na=new Element('Na','Sodium',11,false,'#AB5CF2',1.66,2.27,1,23);E.Mg=new Element('Mg','Magnesium',12,false,'#8AFF00',1.41,1.73,0,24);E.Al=new Element('Al','Aluminum',13,false,'#BFA6A6',1.21,1.84,0,27);E.Si=new Element('Si','Silicon',14,true,'#F0C8A0',1.11,2.1,4,28);E.P=new Element('P','Phosphorus',15,true,'#FF8000',1.07,1.8,3,31);E.S=new Element('S','Sulfur',16,true,'#FFFF30',1.05,1.8,2,32);E.Cl=new Element('Cl','Chlorine',17,true,'#1FF01F',1.02,1.75,1,35);E.Ar=new Element('Ar','Argon',18,false,'#80D1E3',1.06,1.88,0,40);E.K=new Element('K','Potassium',19,false,'#8F40D4',2.03,2.75,0,39);E.Ca=new Element('Ca','Calcium',20,false,'#3DFF00',1.76,2.31,0,40);E.Sc=new Element('Sc','Scandium',21,false,'#E6E6E6',1.7,0,0,45);E.Ti=new Element('Ti','Titanium',22,false,'#BFC2C7',1.6,0,1,48);E.V=new Element('V','Vanadium',23,false,'#A6A6AB',1.53,0,1,51);E.Cr=new Element('Cr','Chromium',24,false,'#8A99C7',1.39,0,2,52);E.Mn=new Element('Mn','Manganese',25,false,'#9C7AC7',1.39,0,3,55);E.Fe=new Element('Fe','Iron',26,false,'#E06633',1.32,0,2,56);E.Co=new Element('Co','Cobalt',27,false,'#F090A0',1.26,0,1,59);E.Ni=new Element('Ni','Nickel',28,false,'#50D050',1.24,1.63,1,58);E.Cu=new Element('Cu','Copper',29,false,'#C88033',1.32,1.4,0,63);E.Zn=new Element('Zn','Zinc',30,false,'#7D80B0',1.22,1.39,0,64);E.Ga=new Element('Ga','Gallium',31,false,'#C28F8F',1.22,1.87,0,69);E.Ge=new Element('Ge','Germanium',32,false,'#668F8F',1.2,2.11,4,74);E.As=new Element('As','Arsenic',33,true,'#BD80E3',1.19,1.85,3,75);E.Se=new Element('Se','Selenium',34,true,'#FFA100',1.2,1.9,2,80);E.Br=new Element('Br','Bromine',35,true,'#A62929',1.2,1.85,1,79);E.Kr=new Element('Kr','Krypton',36,false,'#5CB8D1',1.16,2.02,0,84);E.Rb=new Element('Rb','Rubidium',37,false,'#702EB0',2.2,3.03,0,85);E.Sr=new Element('Sr','Strontium',38,false,'#00FF00',1.95,2.49,0,88);E.Y=new Element('Y','Yttrium',39,false,'#94FFFF',1.9,0,0,89);E.Zr=new Element('Zr','Zirconium',40,false,'#94E0E0',1.75,0,0,90);E.Nb=new Element('Nb','Niobium',41,false,'#73C2C9',1.64,0,1,93);E.Mo=new Element('Mo','Molybdenum',42,false,'#54B5B5',1.54,0,2,98);E.Tc=new Element('Tc','Technetium',43,false,'#3B9E9E',1.47,0,3,0);E.Ru=new Element('Ru','Ruthenium',44,false,'#248F8F',1.46,0,2,102);E.Rh=new Element('Rh','Rhodium',45,false,'#0A7D8C',1.42,0,1,103);E.Pd=new Element('Pd','Palladium',46,false,'#006985',1.39,1.63,0,106);E.Ag=new Element('Ag','Silver',47,false,'#C0C0C0',1.45,1.72,0,107);E.Cd=new Element('Cd','Cadmium',48,false,'#FFD98F',1.44,1.58,0,114);E.In=new Element('In','Indium',49,false,'#A67573',1.42,1.93,0,115);E.Sn=new Element('Sn','Tin',50,false,'#668080',1.39,2.17,4,120);E.Sb=new Element('Sb','Antimony',51,false,'#9E63B5',1.39,2.06,3,121);E.Te=new Element('Te','Tellurium',52,true,'#D47A00',1.38,2.06,2,130);E.I=new Element('I','Iodine',53,true,'#940094',1.39,1.98,1,127);E.Xe=new Element('Xe','Xenon',54,false,'#429EB0',1.4,2.16,0,132);E.Cs=new Element('Cs','Cesium',55,false,'#57178F',2.44,3.43,0,133);E.Ba=new Element('Ba','Barium',56,false,'#00C900',2.15,2.68,0,138);E.La=new Element('La','Lanthanum',57,false,'#70D4FF',2.07,0,0,139);E.Ce=new Element('Ce','Cerium',58,false,'#FFFFC7',2.04,0,0,140);E.Pr=new Element('Pr','Praseodymium',59,false,'#D9FFC7',2.03,0,0,141);E.Nd=new Element('Nd','Neodymium',60,false,'#C7FFC7',2.01,0,0,142);E.Pm=new Element('Pm','Promethium',61,false,'#A3FFC7',1.99,0,0,0);E.Sm=new Element('Sm','Samarium',62,false,'#8FFFC7',1.98,0,0,152);E.Eu=new Element('Eu','Europium',63,false,'#61FFC7',1.98,0,0,153);E.Gd=new Element('Gd','Gadolinium',64,false,'#45FFC7',1.96,0,0,158);E.Tb=new Element('Tb','Terbium',65,false,'#30FFC7',1.94,0,0,159);E.Dy=new Element('Dy','Dysprosium',66,false,'#1FFFC7',1.92,0,0,164);E.Ho=new Element('Ho','Holmium',67,false,'#00FF9C',1.92,0,0,165);E.Er=new Element('Er','Erbium',68,false,'#00E675',1.89,0,0,166);E.Tm=new Element('Tm','Thulium',69,false,'#00D452',1.9,0,0,169);E.Yb=new Element('Yb','Ytterbium',70,false,'#00BF38',1.87,0,0,174);E.Lu=new Element('Lu','Lutetium',71,false,'#00AB24',1.87,0,0,175);E.Hf=new Element('Hf','Hafnium',72,false,'#4DC2FF',1.75,0,0,180);E.Ta=new Element('Ta','Tantalum',73,false,'#4DA6FF',1.7,0,1,181);E.W=new Element('W','Tungsten',74,false,'#2194D6',1.62,0,2,184);E.Re=new Element('Re','Rhenium',75,false,'#267DAB',1.51,0,3,187);E.Os=new Element('Os','Osmium',76,false,'#266696',1.44,0,2,192);E.Ir=new Element('Ir','Iridium',77,false,'#175487',1.41,0,3,193);E.Pt=new Element('Pt','Platinum',78,false,'#D0D0E0',1.36,1.75,0,195);E.Au=new Element('Au','Gold',79,false,'#FFD123',1.36,1.66,1,197);E.Hg=new Element('Hg','Mercury',80,false,'#B8B8D0',1.32,1.55,0,202);E.Tl=new Element('Tl','Thallium',81,false,'#A6544D',1.45,1.96,0,205);E.Pb=new Element('Pb','Lead',82,false,'#575961',1.46,2.02,4,208);E.Bi=new Element('Bi','Bismuth',83,false,'#9E4FB5',1.48,2.07,3,209);E.Po=new Element('Po','Polonium',84,false,'#AB5C00',1.4,1.97,2,0);E.At=new Element('At','Astatine',85,true,'#754F45',1.5,2.02,1,0);E.Rn=new Element('Rn','Radon',86,false,'#428296',1.5,2.2,0,0);E.Fr=new Element('Fr','Francium',87,false,'#420066',2.6,3.48,0,0);E.Ra=new Element('Ra','Radium',88,false,'#007D00',2.21,2.83,0,0);E.Ac=new Element('Ac','Actinium',89,false,'#70ABFA',2.15,0,0,0);E.Th=new Element('Th','Thorium',90,false,'#00BAFF',2.06,0,0,232);E.Pa=new Element('Pa','Protactinium',91,false,'#00A1FF',2,0,0,231);E.U=new Element('U','Uranium',92,false,'#008FFF',1.96,1.86,0,238);E.Np=new Element('Np','Neptunium',93,false,'#0080FF',1.9,0,0,0);E.Pu=new Element('Pu','Plutonium',94,false,'#006BFF',1.87,0,0,0);E.Am=new Element('Am','Americium',95,false,'#545CF2',1.8,0,0,0);E.Cm=new Element('Cm','Curium',96,false,'#785CE3',1.69,0,0,0);E.Bk=new Element('Bk','Berkelium',97,false,'#8A4FE3',0,0,0,0);E.Cf=new Element('Cf','Californium',98,false,'#A136D4',0,0,0,0);E.Es=new Element('Es','Einsteinium',99,false,'#B31FD4',0,0,0,0);E.Fm=new Element('Fm','Fermium',100,false,'#B31FBA',0,0,0,0);E.Md=new Element('Md','Mendelevium',101,false,'#B30DA6',0,0,0,0);E.No=new Element('No','Nobelium',102,false,'#BD0D87',0,0,0,0);E.Lr=new Element('Lr','Lawrencium',103,false,'#C70066',0,0,0,0);E.Rf=new Element('Rf','Rutherfordium',104,false,'#CC0059',0,0,0,0);E.Db=new Element('Db','Dubnium',105,false,'#D1004F',0,0,0,0);E.Sg=new Element('Sg','Seaborgium',106,false,'#D90045',0,0,0,0);E.Bh=new Element('Bh','Bohrium',107,false,'#E00038',0,0,0,0);E.Hs=new Element('Hs','Hassium',108,false,'#E6002E',0,0,0,0);E.Mt=new Element('Mt','Meitnerium',109,false,'#EB0026',0,0,0,0);E.Ds=new Element('Ds','Darmstadtium',110,false,'#000000',0,0,0,0);E.Rg=new Element('Rg','Roentgenium',111,false,'#000000',0,0,0,0);E.Cn=new Element('Cn','Copernicium',112,false,'#000000',0,0,0,0);E.Nh=new Element('Nh','Nihonium',113,false,'#000000',0,0,0,0);E.Fl=new Element('Fl','Flerovium',114,false,'#000000',0,0,0,0);E.Mc=new Element('Mc','Moscovium',115,false,'#000000',0,0,0,0);E.Lv=new Element('Lv','Livermorium',116,false,'#000000',0,0,0,0);E.Ts=new Element('Ts','Tennessine',117,false,'#000000',0,0,0,0);E.Og=new Element('Og','Oganesson',118,false,'#000000',0,0,0,0);E.H.pymolColor='#E6E6E6';E.C.pymolColor='#33FF33';E.N.pymolColor='#3333FF';E.O.pymolColor='#FF4D4D';E.F.pymolColor='#B3FFFF';E.S.pymolColor='#E6C640';return E;}(ChemDoodle.SYMBOLS);ChemDoodle.RESIDUE=function(undefined){'use strict';var R=[];function Residue(symbol,name,polar,aminoColor,shapelyColor,acidity){this.symbol=symbol;this.name=name;this.polar=polar;this.aminoColor=aminoColor;this.shapelyColor=shapelyColor;this.acidity=acidity;}R.Ala=new Residue('Ala','Alanine',false,'#C8C8C8','#8CFF8C',0);R.Arg=new Residue('Arg','Arginine',true,'#145AFF','#00007C',1);R.Asn=new Residue('Asn','Asparagine',true,'#00DCDC','#FF7C70',0);R.Asp=new Residue('Asp','Aspartic Acid',true,'#E60A0A','#A00042',-1);R.Cys=new Residue('Cys','Cysteine',true,'#E6E600','#FFFF70',0);R.Gln=new Residue('Gln','Glutamine',true,'#00DCDC','#FF4C4C',0);R.Glu=new Residue('Glu','Glutamic Acid',true,'#E60A0A','#660000',-1);R.Gly=new Residue('Gly','Glycine',false,'#EBEBEB','#FFFFFF',0);R.His=new Residue('His','Histidine',true,'#8282D2','#7070FF',1);R.Ile=new Residue('Ile','Isoleucine',false,'#0F820F','#004C00',0);R.Leu=new Residue('Leu','Leucine',false,'#0F820F','#455E45',0);R.Lys=new Residue('Lys','Lysine',true,'#145AFF','#4747B8',1);R.Met=new Residue('Met','Methionine',false,'#E6E600','#B8A042',0);R.Phe=new Residue('Phe','Phenylalanine',false,'#3232AA','#534C52',0);R.Pro=new Residue('Pro','Proline',false,'#DC9682','#525252',0);R.Ser=new Residue('Ser','Serine',true,'#FA9600','#FF7042',0);R.Thr=new Residue('Thr','Threonine',true,'#FA9600','#B84C00',0);R.Trp=new Residue('Trp','Tryptophan',true,'#B45AB4','#4F4600',0);R.Tyr=new Residue('Tyr','Tyrosine',true,'#3232AA','#8C704C',0);R.Val=new Residue('Val','Valine',false,'#0F820F','#FF8CFF',0);R.Asx=new Residue('Asx','Asparagine/Aspartic Acid',true,'#FF69B4','#FF00FF',0);R.Glx=new Residue('Glx','Glutamine/Glutamic Acid',true,'#FF69B4','#FF00FF',0);R['*']=new Residue('*','Other',false,'#BEA06E','#FF00FF',0);R.A=new Residue('A','Adenine',false,'#BEA06E','#A0A0FF',0);R.G=new Residue('G','Guanine',false,'#BEA06E','#FF7070',0);R.I=new Residue('I','',false,'#BEA06E','#80FFFF',0);R.C=new Residue('C','Cytosine',false,'#BEA06E','#FF8C4B',0);R.T=new Residue('T','Thymine',false,'#BEA06E','#A0FFA0',0);R.U=new Residue('U','Uracil',false,'#BEA06E','#FF8080',0);return R;}();(function(structures,undefined){'use strict';// This is a more efficient Queue implementation other than using Array.shift() on each dequeue, which is very expensive\n// this is 2-3x faster\n/*\n\t * Creates a new Queue. A Queue is a first-in-first-out (FIFO) data\n\t * structure. Functions of the Queue object allow elements to be\n\t * enthis.queued and dethis.queued, the first element to be obtained without\n\t * dequeuing, and for the current size of the Queue and empty/non-empty\n\t * status to be obtained.\n\t */structures.Queue=function(){// the list of elements, initialised to the empty array\nthis.queue=[];};var _=structures.Queue.prototype;// the amount of space at the front of the this.queue, initialised to zero\n_.queueSpace=0;/*\n\t * Returns the size of this Queue. The size of a Queue is equal to the\n\t * number of elements that have been enthis.queued minus the number of\n\t * elements that have been dethis.queued.\n\t */_.getSize=function(){// return the number of elements in the this.queue\nreturn this.queue.length-this.queueSpace;};/*\n\t * Returns true if this Queue is empty, and false otherwise. A Queue is\n\t * empty if the number of elements that have been enthis.queued equals the\n\t * number of elements that have been dethis.queued.\n\t */_.isEmpty=function(){// return true if the this.queue is empty, and false otherwise\nreturn this.queue.length===0;};/*\n\t * Enthis.queues the specified element in this Queue. The parameter is:\n\t * \n\t * element - the element to enthis.queue\n\t */_.enqueue=function(element){this.queue.push(element);};/*\n\t * Dethis.queues an element from this Queue. The oldest element in this\n\t * Queue is removed and returned. If this Queue is empty then undefined is\n\t * returned.\n\t */_.dequeue=function(){// initialise the element to return to be undefined\nvar element;// check whether the this.queue is empty\nif(this.queue.length){// fetch the oldest element in the this.queue\nelement=this.queue[this.queueSpace];// update the amount of space and check whether a shift should\n// occur\nif(++this.queueSpace*2>=this.queue.length){// set the this.queue equal to the non-empty portion of the\n// this.queue\nthis.queue=this.queue.slice(this.queueSpace);// reset the amount of space at the front of the this.queue\nthis.queueSpace=0;}}// return the removed element\nreturn element;};/*\n\t * Returns the oldest element in this Queue. If this Queue is empty then\n\t * undefined is returned. This function returns the same value as the\n\t * dethis.queue function, but does not remove the returned element from this\n\t * Queue.\n\t */_.getOldestElement=function(){// initialise the element to return to be undefined\nvar element;// if the this.queue is not element then fetch the oldest element in the\n// this.queue\nif(this.queue.length){element=this.queue[this.queueSpace];}// return the oldest element\nreturn element;};})(ChemDoodle.structures);(function(structures,m,undefined){'use strict';structures.Point=function(x,y){this.x=x?x:0;this.y=y?y:0;};var _=structures.Point.prototype;_.sub=function(p){this.x-=p.x;this.y-=p.y;};_.add=function(p){this.x+=p.x;this.y+=p.y;};_.distance=function(p){var dx=p.x-this.x;var dy=p.y-this.y;return m.sqrt(dx*dx+dy*dy);};_.angleForStupidCanvasArcs=function(p){var dx=p.x-this.x;var dy=p.y-this.y;var angle=0;// Calculate angle\nif(dx===0){if(dy===0){angle=0;}else if(dy>0){angle=m.PI/2;}else{angle=3*m.PI/2;}}else if(dy===0){if(dx>0){angle=0;}else{angle=m.PI;}}else{if(dx<0){angle=m.atan(dy/dx)+m.PI;}else if(dy<0){angle=m.atan(dy/dx)+2*m.PI;}else{angle=m.atan(dy/dx);}}while(angle<0){angle+=m.PI*2;}angle=angle%(m.PI*2);return angle;};_.angle=function(p){// y is upside down to account for inverted canvas\nvar dx=p.x-this.x;var dy=this.y-p.y;var angle=0;// Calculate angle\nif(dx===0){if(dy===0){angle=0;}else if(dy>0){angle=m.PI/2;}else{angle=3*m.PI/2;}}else if(dy===0){if(dx>0){angle=0;}else{angle=m.PI;}}else{if(dx<0){angle=m.atan(dy/dx)+m.PI;}else if(dy<0){angle=m.atan(dy/dx)+2*m.PI;}else{angle=m.atan(dy/dx);}}while(angle<0){angle+=m.PI*2;}angle=angle%(m.PI*2);return angle;};})(ChemDoodle.structures,Math);(function(extensions,structures,m,undefined){'use strict';var COMMA_SPACE_REGEX=/[ ,]+/;var COMMA_DASH_REGEX=/\\-+/;var FONTS=['Helvetica','Arial','Dialog'];structures.Query=function(type){this.type=type;// atom properties\nthis.elements={v:[],not:false};this.charge=undefined;this.chirality=undefined;this.connectivity=undefined;this.connectivityNoH=undefined;this.hydrogens=undefined;this.saturation=undefined;// bond properties\nthis.orders={v:[],not:false};this.stereo=undefined;// generic properties\nthis.aromatic=undefined;this.ringCount=undefined;// cache the string value\nthis.cache=undefined;};structures.Query.TYPE_ATOM=0;structures.Query.TYPE_BOND=1;var _=structures.Query.prototype;_.parseRange=function(range){var points=[];var splits=range.split(COMMA_SPACE_REGEX);for(var i=0,ii=splits.length;i<ii;i++){var t=splits[i];var neg=false;var neg2=false;if(t.charAt(0)==='-'){neg=true;t=t.substring(1);}if(t.indexOf('--')!=-1){neg2=true;}if(t.indexOf('-')!=-1){var parts=t.split(COMMA_DASH_REGEX);var p={x:parseInt(parts[0])*(neg?-1:1),y:parseInt(parts[1])*(neg2?-1:1)};if(p.y<p.x){var tmp=p.y;p.y=p.x;p.x=tmp;}points.push(p);}else{points.push({x:parseInt(t)*(neg?-1:1)});}}return points;};_.draw=function(ctx,specs,pos){if(!this.cache){this.cache=this.toString();}var top=this.cache;var bottom=undefined;var split=top.indexOf('(');if(split!=-1){top=this.cache.substring(0,split);bottom=this.cache.substring(split,this.cache.length);}ctx.textAlign='center';ctx.textBaseline='middle';ctx.font=extensions.getFontString(12,FONTS,true,false);var tw=ctx.measureText(top).width;ctx.fillStyle=specs.backgroundColor;ctx.fillRect(pos.x-tw/2,pos.y-6,tw,12);ctx.fillStyle='black';ctx.fillText(top,pos.x,pos.y);if(bottom){ctx.font=extensions.getFontString(10,FONTS,false,true);tw=ctx.measureText(bottom).width;ctx.fillStyle=specs.backgroundColor;ctx.fillRect(pos.x-tw/2,pos.y+6,tw,11);ctx.fillStyle='black';ctx.fillText(bottom,pos.x,pos.y+11);}};_.outputRange=function(array){var comma=false;var sb=[];for(var i=0,ii=array.length;i<ii;i++){if(comma){sb.push(',');}comma=true;var p=array[i];if(p.y){sb.push(p.x);sb.push('-');sb.push(p.y);}else{sb.push(p.x);}}return sb.join('');};_.toString=function(){var sb=[];var attributes=[];if(this.type===structures.Query.TYPE_ATOM){if(!this.elements||this.elements.v.length===0){sb.push('[a]');}else{if(this.elements.not){sb.push('!');}sb.push('[');sb.push(this.elements.v.join(','));sb.push(']');}if(this.chirality){attributes.push((this.chirality.not?'!':'')+'@='+this.chirality.v);}if(this.aromatic){attributes.push((this.aromatic.not?'!':'')+'A');}if(this.charge){attributes.push((this.charge.not?'!':'')+'C='+this.outputRange(this.charge.v));}if(this.hydrogens){attributes.push((this.hydrogens.not?'!':'')+'H='+this.outputRange(this.hydrogens.v));}if(this.ringCount){attributes.push((this.ringCount.not?'!':'')+'R='+this.outputRange(this.ringCount.v));}if(this.saturation){attributes.push((this.saturation.not?'!':'')+'S');}if(this.connectivity){attributes.push((this.connectivity.not?'!':'')+'X='+this.outputRange(this.connectivity.v));}if(this.connectivityNoH){attributes.push((this.connectivityNoH.not?'!':'')+'x='+this.outputRange(this.connectivityNoH.v));}}else if(this.type===structures.Query.TYPE_BOND){if(!this.orders||this.orders.v.length===0){sb.push('[a]');}else{if(this.orders.not){sb.push('!');}sb.push('[');sb.push(this.orders.v.join(','));sb.push(']');}if(this.stereo){attributes.push((this.stereo.not?'!':'')+'@='+this.stereo.v);}if(this.aromatic){attributes.push((this.aromatic.not?'!':'')+'A');}if(this.ringCount){attributes.push((this.ringCount.not?'!':'')+'R='+this.outputRange(this.ringCount.v));}}if(attributes.length>0){sb.push('(');sb.push(attributes.join(','));sb.push(')');}return sb.join('');};})(ChemDoodle.extensions,ChemDoodle.structures,Math);(function(ELEMENT,extensions,math,structures,m,m4,undefined){'use strict';structures.Atom=function(label,x,y,z){this.label=label?label.replace(/\\s/g,''):'C';this.x=x?x:0;this.y=y?y:0;this.z=z?z:0;};var _=structures.Atom.prototype=new structures.Point(0,0);_.charge=0;_.numLonePair=0;_.numRadical=0;_.mass=-1;_.implicitH=-1;_.coordinationNumber=0;_.bondNumber=0;_.angleOfLeastInterference=0;_.isHidden=false;_.altLabel=undefined;_.isLone=false;_.isHover=false;_.isSelected=false;_.add3D=function(p){this.x+=p.x;this.y+=p.y;this.z+=p.z;};_.sub3D=function(p){this.x-=p.x;this.y-=p.y;this.z-=p.z;};_.distance3D=function(p){var dx=p.x-this.x;var dy=p.y-this.y;var dz=p.z-this.z;return m.sqrt(dx*dx+dy*dy+dz*dz);};_.draw=function(ctx,specs){if(this.dontDraw){// this is used when the atom shouldn't be visible, such as when the text input field is open over this atom\nreturn;}if(this.isLassoed){var grd=ctx.createRadialGradient(this.x-1,this.y-1,0,this.x,this.y,7);grd.addColorStop(0,'rgba(212, 99, 0, 0)');grd.addColorStop(0.7,'rgba(212, 99, 0, 0.8)');ctx.fillStyle=grd;ctx.beginPath();ctx.arc(this.x,this.y,5,0,m.PI*2,false);ctx.fill();}if(this.query){return;}this.textBounds=[];if(this.specs){specs=this.specs;}var font=extensions.getFontString(specs.atoms_font_size_2D,specs.atoms_font_families_2D,specs.atoms_font_bold_2D,specs.atoms_font_italic_2D);ctx.font=font;ctx.fillStyle=this.getElementColor(specs.atoms_useJMOLColors,specs.atoms_usePYMOLColors,specs.atoms_color,2);if(this.label==='H'&&specs.atoms_HBlack_2D){ctx.fillStyle='black';}if(this.error){ctx.fillStyle=specs.colorError;}var hAngle;var labelVisible=this.isLabelVisible(specs);if(this.isLone&&!labelVisible||specs.atoms_circles_2D){// always use carbon gray for lone carbon atom dots\nif(this.isLone){ctx.fillStyle='#909090';}ctx.beginPath();ctx.arc(this.x,this.y,specs.atoms_circleDiameter_2D/2,0,m.PI*2,false);ctx.fill();if(specs.atoms_circleBorderWidth_2D>0){ctx.lineWidth=specs.atoms_circleBorderWidth_2D;ctx.strokeStyle='black';ctx.stroke();}}else if(labelVisible){ctx.textAlign='center';ctx.textBaseline='middle';// keep check to undefined here as dev may set altLabel to empty\n// string\nif(this.altLabel!==undefined){// altLabel can be 0, so check if undefined\nctx.fillText(this.altLabel,this.x,this.y);var symbolWidth=ctx.measureText(this.altLabel).width;this.textBounds.push({x:this.x-symbolWidth/2,y:this.y-specs.atoms_font_size_2D/2+1,w:symbolWidth,h:specs.atoms_font_size_2D-2});}else if(!ELEMENT[this.label]){if(structures.CondensedLabel){// CondensedLabel is proprietary and not included in the GPL version\nif(!this.condensed||this.condensed.text!==this.label){this.condensed=new structures.CondensedLabel(this,this.label);}this.condensed.draw(ctx,specs);}else{ctx.fillText(this.label,this.x,this.y);var symbolWidth=ctx.measureText(this.label).width;this.textBounds.push({x:this.x-symbolWidth/2,y:this.y-specs.atoms_font_size_2D/2+1,w:symbolWidth,h:specs.atoms_font_size_2D-2});}}else{ctx.fillText(this.label,this.x,this.y);var symbolWidth=ctx.measureText(this.label).width;this.textBounds.push({x:this.x-symbolWidth/2,y:this.y-specs.atoms_font_size_2D/2+1,w:symbolWidth,h:specs.atoms_font_size_2D-2});// mass\nvar massWidth=0;if(this.mass!==-1){var fontSave=ctx.font;ctx.font=extensions.getFontString(specs.atoms_font_size_2D*.7,specs.atoms_font_families_2D,specs.atoms_font_bold_2D,specs.atoms_font_italic_2D);massWidth=ctx.measureText(this.mass).width;ctx.fillText(this.mass,this.x-massWidth-.5,this.y-specs.atoms_font_size_2D/2+1);this.textBounds.push({x:this.x-symbolWidth/2-massWidth-.5,y:this.y-specs.atoms_font_size_2D*1.7/2+1,w:massWidth,h:specs.atoms_font_size_2D/2-1});ctx.font=fontSave;}// implicit hydrogens\nvar chargeOffset=symbolWidth/2;var numHs=this.getImplicitHydrogenCount();if(specs.atoms_implicitHydrogens_2D&&numHs>0){hAngle=0;var hWidth=ctx.measureText('H').width;var moveCharge=true;if(numHs>1){var xoffset=symbolWidth/2+hWidth/2;var yoffset=0;var subFont=extensions.getFontString(specs.atoms_font_size_2D*.8,specs.atoms_font_families_2D,specs.atoms_font_bold_2D,specs.atoms_font_italic_2D);ctx.font=subFont;var numWidth=ctx.measureText(numHs).width;if(this.bondNumber===1){if(this.angleOfLeastInterference>m.PI/2&&this.angleOfLeastInterference<3*m.PI/2){xoffset=-symbolWidth/2-numWidth-hWidth/2-massWidth/2;moveCharge=false;hAngle=m.PI;}}else{if(this.angleOfLeastInterference<=m.PI/4){// default\n}else if(this.angleOfLeastInterference<3*m.PI/4){xoffset=0;yoffset=-specs.atoms_font_size_2D*.9;if(this.charge!==0){yoffset-=specs.atoms_font_size_2D*.3;}moveCharge=false;hAngle=m.PI/2;}else if(this.angleOfLeastInterference<=5*m.PI/4){xoffset=-symbolWidth/2-numWidth-hWidth/2-massWidth/2;moveCharge=false;hAngle=m.PI;}else if(this.angleOfLeastInterference<7*m.PI/4){xoffset=0;yoffset=specs.atoms_font_size_2D*.9;moveCharge=false;hAngle=3*m.PI/2;}}ctx.font=font;ctx.fillText('H',this.x+xoffset,this.y+yoffset);ctx.font=subFont;ctx.fillText(numHs,this.x+xoffset+hWidth/2+numWidth/2,this.y+yoffset+specs.atoms_font_size_2D*.3);this.textBounds.push({x:this.x+xoffset-hWidth/2,y:this.y+yoffset-specs.atoms_font_size_2D/2+1,w:hWidth,h:specs.atoms_font_size_2D-2});this.textBounds.push({x:this.x+xoffset+hWidth/2,y:this.y+yoffset+specs.atoms_font_size_2D*.3-specs.atoms_font_size_2D/2+1,w:numWidth,h:specs.atoms_font_size_2D*.8-2});}else{var xoffset=symbolWidth/2+hWidth/2;var yoffset=0;if(this.bondNumber===1){if(this.angleOfLeastInterference>m.PI/2&&this.angleOfLeastInterference<3*m.PI/2){xoffset=-symbolWidth/2-hWidth/2-massWidth/2;moveCharge=false;hAngle=m.PI;}}else{if(this.angleOfLeastInterference<=m.PI/4){// default\n}else if(this.angleOfLeastInterference<3*m.PI/4){xoffset=0;yoffset=-specs.atoms_font_size_2D*.9;moveCharge=false;hAngle=m.PI/2;}else if(this.angleOfLeastInterference<=5*m.PI/4){xoffset=-symbolWidth/2-hWidth/2-massWidth/2;moveCharge=false;hAngle=m.PI;}else if(this.angleOfLeastInterference<7*m.PI/4){xoffset=0;yoffset=specs.atoms_font_size_2D*.9;moveCharge=false;hAngle=3*m.PI/2;}}ctx.fillText('H',this.x+xoffset,this.y+yoffset);this.textBounds.push({x:this.x+xoffset-hWidth/2,y:this.y+yoffset-specs.atoms_font_size_2D/2+1,w:hWidth,h:specs.atoms_font_size_2D-2});}if(moveCharge){chargeOffset+=hWidth;}// adjust the angles metadata to account for hydrogen\n// placement\n/*\n\t\t\t\t\t * this.angles.push(hAngle); var angleData =\n\t\t\t\t\t * math.angleBetweenLargest(this.angles);\n\t\t\t\t\t * this.angleOfLeastInterference = angleData.angle % (m.PI *\n\t\t\t\t\t * 2); this.largestAngle = angleData.largest;\n\t\t\t\t\t */}// charge\nif(this.charge!==0){var s=this.charge.toFixed(0);if(s==='1'){s='+';}else if(s==='-1'){s=\"\\u2013\";}else if(extensions.stringStartsWith(s,'-')){s=s.substring(1)+\"\\u2013\";}else{s+='+';}var chargeWidth=ctx.measureText(s).width;chargeOffset+=chargeWidth/2;ctx.textAlign='center';ctx.textBaseline='middle';ctx.font=extensions.getFontString(m.floor(specs.atoms_font_size_2D*.8),specs.atoms_font_families_2D,specs.atoms_font_bold_2D,specs.atoms_font_italic_2D);ctx.fillText(s,this.x+chargeOffset-1,this.y-specs.atoms_font_size_2D/2+1);this.textBounds.push({x:this.x+chargeOffset-chargeWidth/2-1,y:this.y-specs.atoms_font_size_2D*1.8/2+5,w:chargeWidth,h:specs.atoms_font_size_2D/2-1});}}}if(this.numLonePair>0||this.numRadical>0){ctx.fillStyle='black';var as=this.angles.slice(0);var ali=this.angleOfLeastInterference;var la=this.largestAngle;if(hAngle!==undefined){// have to check for undefined here as this number can be 0\nas.push(hAngle);as.sort(function(a,b){return a-b;});var angleData=math.angleBetweenLargest(as);ali=angleData.angle%(m.PI*2);la=angleData.largest;}var things=[];for(var i=0;i<this.numLonePair;i++){things.push({t:2});}for(var i=0;i<this.numRadical;i++){things.push({t:1});}if(hAngle===undefined&&m.abs(la-2*m.PI/as.length)<m.PI/60){var mid=m.ceil(things.length/as.length);for(var i=0,ii=things.length;i<ii;i+=mid,ali+=la){this.drawElectrons(ctx,specs,things.slice(i,m.min(things.length,i+mid)),ali,la,hAngle);}}else{this.drawElectrons(ctx,specs,things,ali,la,hAngle);}}// for debugging atom label dimensions\n//ctx.strokeStyle = 'red'; for(var i = 0, ii = this.textBounds.length;i<ii; i++){ var r = this.textBounds[i];ctx.beginPath();ctx.rect(r.x, r.y, r.w, r.h); ctx.stroke(); }\n};_.drawElectrons=function(ctx,specs,things,angle,largest,hAngle){var segment=largest/(things.length+(this.bonds.length===0&&hAngle===undefined?0:1));var angleStart=angle-largest/2+segment;for(var i=0;i<things.length;i++){var t=things[i];var angle=angleStart+i*segment;var p1x=this.x+Math.cos(angle)*specs.atoms_lonePairDistance_2D;var p1y=this.y-Math.sin(angle)*specs.atoms_lonePairDistance_2D;if(t.t===2){var perp=angle+Math.PI/2;var difx=Math.cos(perp)*specs.atoms_lonePairSpread_2D/2;var dify=-Math.sin(perp)*specs.atoms_lonePairSpread_2D/2;ctx.beginPath();ctx.arc(p1x+difx,p1y+dify,specs.atoms_lonePairDiameter_2D,0,m.PI*2,false);ctx.fill();ctx.beginPath();ctx.arc(p1x-difx,p1y-dify,specs.atoms_lonePairDiameter_2D,0,m.PI*2,false);ctx.fill();}else if(t.t===1){ctx.beginPath();ctx.arc(p1x,p1y,specs.atoms_lonePairDiameter_2D,0,m.PI*2,false);ctx.fill();}}};_.drawDecorations=function(ctx,specs){if(this.isHover||this.isSelected){ctx.strokeStyle=this.isHover?specs.colorHover:specs.colorSelect;ctx.lineWidth=1.2;ctx.beginPath();var radius=this.isHover?7:15;ctx.arc(this.x,this.y,radius,0,m.PI*2,false);ctx.stroke();}if(this.isOverlap){ctx.strokeStyle=specs.colorError;ctx.lineWidth=1.2;ctx.beginPath();ctx.arc(this.x,this.y,7,0,m.PI*2,false);ctx.stroke();}};_.render=function(gl,specs,noColor){if(this.specs){specs=this.specs;}var transform=m4.translate(m4.identity(),[this.x,this.y,this.z]);var radius=specs.atoms_useVDWDiameters_3D?ELEMENT[this.label].vdWRadius*specs.atoms_vdwMultiplier_3D:specs.atoms_sphereDiameter_3D/2;if(radius===0){radius=1;}m4.scale(transform,[radius,radius,radius]);// colors\nif(!noColor){var color=specs.atoms_color;if(specs.atoms_useJMOLColors){color=ELEMENT[this.label].jmolColor;}else if(specs.atoms_usePYMOLColors){color=ELEMENT[this.label].pymolColor;}gl.material.setDiffuseColor(gl,color);}// render\ngl.shader.setMatrixUniforms(gl,transform);var buffer=this.renderAsStar?gl.starBuffer:gl.sphereBuffer;gl.drawElements(gl.TRIANGLES,buffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);};_.renderHighlight=function(gl,specs){if(this.isSelected||this.isHover){if(this.specs){specs=this.specs;}var transform=m4.translate(m4.identity(),[this.x,this.y,this.z]);var radius=specs.atoms_useVDWDiameters_3D?ELEMENT[this.label].vdWRadius*specs.atoms_vdwMultiplier_3D:specs.atoms_sphereDiameter_3D/2;if(radius===0){radius=1;}radius*=1.3;m4.scale(transform,[radius,radius,radius]);gl.shader.setMatrixUniforms(gl,transform);gl.material.setDiffuseColor(gl,this.isHover?specs.colorHover:specs.colorSelect);var buffer=this.renderAsStar?gl.starBuffer:gl.sphereBuffer;gl.drawElements(gl.TRIANGLES,buffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}};_.isLabelVisible=function(specs){if(specs.atoms_displayAllCarbonLabels_2D){// show all carbons\nreturn true;}if(this.label!=='C'){// not a carbon\nreturn true;}if(this.altLabel||!ELEMENT[this.label]){// there is an alternative or condensed label\nreturn true;}if(this.mass!==-1||this.implicitH!==-1||this.charge!==0){// an isotope or charge or implicit hydrogen override designation, so label must be shown\nreturn true;}if(specs.atoms_showAttributedCarbons_2D&&(this.numRadical!==0||this.numLonePair!==0)){// there are attributes and we want to show the associated label\nreturn true;}if(this.isHidden&&specs.atoms_showHiddenCarbons_2D){// if it is hidden and we want to show them\nreturn true;}if(specs.atoms_displayTerminalCarbonLabels_2D&&this.bondNumber===1){// if it is terminal and we want to show them\nreturn true;}return false;};_.getImplicitHydrogenCount=function(){if(!ELEMENT[this.label]||!ELEMENT[this.label].addH){return 0;}if(this.implicitH!==-1){return this.implicitH;}if(this.label==='H'){return 0;}var valence=ELEMENT[this.label].valency;var dif=valence-this.coordinationNumber;if(this.numRadical>0){dif=m.max(0,dif-this.numRadical);}if(this.charge>0){var vdif=4-valence;if(this.charge<=vdif){dif+=this.charge;}else{dif=4-this.coordinationNumber-this.charge+vdif;}}else{dif+=this.charge;}return dif<0?0:m.floor(dif);};_.getBounds=function(){var bounds=new math.Bounds();bounds.expand(this.x,this.y);if(this.textBounds){for(var i=0,ii=this.textBounds.length;i<ii;i++){var tb=this.textBounds[i];bounds.expand(tb.x,tb.y,tb.x+tb.w,tb.y+tb.h);}}return bounds;};_.getBounds3D=function(){var bounds=new math.Bounds();bounds.expand3D(this.x,this.y,this.z);return bounds;};/**\n\t * Get Color by atom element.\n\t * \n\t * @param {boolean}\n\t *            useJMOLColors\n\t * @param {boolean}\n\t *            usePYMOLColors\n\t * @param {string}\n\t *            color The default color\n\t * @param {number}\n\t *            dim The render dimension\n\t * @return {string} The atom element color\n\t */_.getElementColor=function(useJMOLColors,usePYMOLColors,color){if(!ELEMENT[this.label]){return'#000';}if(useJMOLColors){color=ELEMENT[this.label].jmolColor;}else if(usePYMOLColors){color=ELEMENT[this.label].pymolColor;}return color;};})(ChemDoodle.ELEMENT,ChemDoodle.extensions,ChemDoodle.math,ChemDoodle.structures,Math,ChemDoodle.lib.mat4);(function(ELEMENT,extensions,structures,math,m,m4,v3,undefined){'use strict';structures.Bond=function(a1,a2,bondOrder){this.a1=a1;this.a2=a2;// bondOrder can be 0, so need to check against undefined\nthis.bondOrder=bondOrder!==undefined?bondOrder:1;};structures.Bond.STEREO_NONE='none';structures.Bond.STEREO_PROTRUDING='protruding';structures.Bond.STEREO_RECESSED='recessed';structures.Bond.STEREO_AMBIGUOUS='ambiguous';var _=structures.Bond.prototype;_.stereo=structures.Bond.STEREO_NONE;_.isHover=false;_.ring=undefined;_.getCenter=function(){return new structures.Point((this.a1.x+this.a2.x)/2,(this.a1.y+this.a2.y)/2);};_.getLength=function(){return this.a1.distance(this.a2);};_.getLength3D=function(){return this.a1.distance3D(this.a2);};_.contains=function(a){return a===this.a1||a===this.a2;};_.getNeighbor=function(a){if(a===this.a1){return this.a2;}else if(a===this.a2){return this.a1;}return undefined;};_.draw=function(ctx,specs){if(this.a1.x===this.a2.x&&this.a1.y===this.a2.y){// return, as there is nothing to render, will only cause fill\n// overflows\nreturn;}if(this.specs){specs=this.specs;}var x1=this.a1.x;var x2=this.a2.x;var y1=this.a1.y;var y2=this.a2.y;var dist=this.a1.distance(this.a2);var difX=x2-x1;var difY=y2-y1;if(this.a1.isLassoed&&this.a2.isLassoed){var grd=ctx.createLinearGradient(x1,y1,x2,y2);grd.addColorStop(0,'rgba(212, 99, 0, 0)');grd.addColorStop(0.5,'rgba(212, 99, 0, 0.8)');grd.addColorStop(1,'rgba(212, 99, 0, 0)');var useDist=2.5;var perpendicular=this.a1.angle(this.a2)+m.PI/2;var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);var cx1=x1-mcosp*useDist;var cy1=y1+msinp*useDist;var cx2=x1+mcosp*useDist;var cy2=y1-msinp*useDist;var cx3=x2+mcosp*useDist;var cy3=y2-msinp*useDist;var cx4=x2-mcosp*useDist;var cy4=y2+msinp*useDist;ctx.fillStyle=grd;ctx.beginPath();ctx.moveTo(cx1,cy1);ctx.lineTo(cx2,cy2);ctx.lineTo(cx3,cy3);ctx.lineTo(cx4,cy4);ctx.closePath();ctx.fill();}if(specs.atoms_display&&!specs.atoms_circles_2D&&this.a1.isLabelVisible(specs)&&this.a1.textBounds){var distShrink=0;for(var i=0,ii=this.a1.textBounds.length;i<ii;i++){distShrink=Math.max(distShrink,math.calculateDistanceInterior(this.a1,this.a2,this.a1.textBounds[i]));}distShrink+=specs.bonds_atomLabelBuffer_2D;var perc=distShrink/dist;x1+=difX*perc;y1+=difY*perc;}if(specs.atoms_display&&!specs.atoms_circles_2D&&this.a2.isLabelVisible(specs)&&this.a2.textBounds){var distShrink=0;for(var i=0,ii=this.a2.textBounds.length;i<ii;i++){distShrink=Math.max(distShrink,math.calculateDistanceInterior(this.a2,this.a1,this.a2.textBounds[i]));}distShrink+=specs.bonds_atomLabelBuffer_2D;var perc=distShrink/dist;x2-=difX*perc;y2-=difY*perc;}if(specs.bonds_clearOverlaps_2D){var xs=x1+difX*.15;var ys=y1+difY*.15;var xf=x2-difX*.15;var yf=y2-difY*.15;ctx.strokeStyle=specs.backgroundColor;ctx.lineWidth=specs.bonds_width_2D+specs.bonds_overlapClearWidth_2D*2;ctx.lineCap='round';ctx.beginPath();ctx.moveTo(xs,ys);ctx.lineTo(xf,yf);ctx.closePath();ctx.stroke();}ctx.strokeStyle=this.error?specs.colorError:specs.bonds_color;ctx.fillStyle=this.error?specs.colorError:specs.bonds_color;ctx.lineWidth=specs.bonds_width_2D;ctx.lineCap=specs.bonds_ends_2D;if(specs.bonds_splitColor){var linearGradient=ctx.createLinearGradient(x1,y1,x2,y2);var specs1=this.a1.specs?this.a1.specs:specs;var specs2=this.a2.specs?this.a2.specs:specs;var color1=this.a1.getElementColor(specs1.atoms_useJMOLColors,specs1.atoms_usePYMOLColors,specs1.atoms_color,2);var color2=this.a2.getElementColor(specs2.atoms_useJMOLColors,specs2.atoms_usePYMOLColors,specs2.atoms_color,2);linearGradient.addColorStop(0,color1);if(!specs.bonds_colorGradient){linearGradient.addColorStop(0.5,color1);linearGradient.addColorStop(0.51,color2);}linearGradient.addColorStop(1,color2);ctx.strokeStyle=linearGradient;ctx.fillStyle=linearGradient;}if(specs.bonds_lewisStyle_2D&&this.bondOrder%1===0){this.drawLewisStyle(ctx,specs,x1,y1,x2,y2);}else{switch(this.query?1:this.bondOrder){case 0:var dx=x2-x1;var dy=y2-y1;var innerDist=m.sqrt(dx*dx+dy*dy);var num=m.floor(innerDist/specs.bonds_dotSize_2D);var remainder=(innerDist-(num-1)*specs.bonds_dotSize_2D)/2;if(num%2===1){remainder+=specs.bonds_dotSize_2D/4;}else{remainder-=specs.bonds_dotSize_2D/4;num+=2;}num/=2;var angle=this.a1.angle(this.a2);var xs=x1+remainder*Math.cos(angle);var ys=y1-remainder*Math.sin(angle);ctx.beginPath();for(var i=0;i<num;i++){ctx.arc(xs,ys,specs.bonds_dotSize_2D/2,0,m.PI*2,false);xs+=2*specs.bonds_dotSize_2D*Math.cos(angle);ys-=2*specs.bonds_dotSize_2D*Math.sin(angle);}ctx.fill();break;case 0.5:ctx.beginPath();ctx.moveTo(x1,y1);ctx.lineTo(x2,y2);ctx.setLineDash([specs.bonds_hashSpacing_2D,specs.bonds_hashSpacing_2D]);ctx.stroke();ctx.setLineDash([]);break;case 1:if(!this.query&&(this.stereo===structures.Bond.STEREO_PROTRUDING||this.stereo===structures.Bond.STEREO_RECESSED)){var thinSpread=specs.bonds_width_2D/2;var useDist=specs.bonds_wedgeThickness_2D/2;var perpendicular=this.a1.angle(this.a2)+m.PI/2;var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);var cx1=x1-mcosp*thinSpread;var cy1=y1+msinp*thinSpread;var cx2=x1+mcosp*thinSpread;var cy2=y1-msinp*thinSpread;var cx3=x2+mcosp*useDist;var cy3=y2-msinp*useDist;var cx4=x2-mcosp*useDist;var cy4=y2+msinp*useDist;ctx.beginPath();ctx.moveTo(cx1,cy1);ctx.lineTo(cx2,cy2);ctx.lineTo(cx3,cy3);ctx.lineTo(cx4,cy4);ctx.closePath();if(this.stereo===structures.Bond.STEREO_PROTRUDING){ctx.fill();}else{ctx.save();ctx.clip();ctx.lineWidth=useDist*2;ctx.lineCap='butt';ctx.beginPath();ctx.moveTo(x1,y1);// workaround to lengthen distance for Firefox as there is a bug, shouldn't affect rendering or performance\nvar dx=x2-x1;var dy=y2-y1;ctx.lineTo(x2+5*dx,y2+5*dy);ctx.setLineDash([specs.bonds_hashWidth_2D,specs.bonds_hashSpacing_2D]);ctx.stroke();ctx.setLineDash([]);ctx.restore();}}else if(!this.query&&this.stereo===structures.Bond.STEREO_AMBIGUOUS){ctx.beginPath();ctx.moveTo(x1,y1);var curves=m.floor(m.sqrt(difX*difX+difY*difY)/specs.bonds_wavyLength_2D);var x=x1;var y=y1;var perpendicular=this.a1.angle(this.a2)+m.PI/2;var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);var curveX=difX/curves;var curveY=difY/curves;var cpx1,cpx2,cpy1,cpy2;for(var i=0,ii=curves;i<ii;i++){x+=curveX;y+=curveY;cpx1=specs.bonds_wavyLength_2D*mcosp+x-curveX*0.5;cpy1=specs.bonds_wavyLength_2D*-msinp+y-curveY*0.5;cpx2=specs.bonds_wavyLength_2D*-mcosp+x-curveX*0.5;cpy2=specs.bonds_wavyLength_2D*msinp+y-curveY*0.5;if(i%2===0){ctx.quadraticCurveTo(cpx1,cpy1,x,y);}else{ctx.quadraticCurveTo(cpx2,cpy2,x,y);}}ctx.stroke();break;}else{ctx.beginPath();ctx.moveTo(x1,y1);ctx.lineTo(x2,y2);ctx.stroke();if(this.query){this.query.draw(ctx,specs,this.getCenter());}}break;case 1.5:case 2:var angle=this.a1.angle(this.a2);var perpendicular=angle+m.PI/2;var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);var dist=this.a1.distance(this.a2);var useDist=specs.bonds_useAbsoluteSaturationWidths_2D?specs.bonds_saturationWidthAbs_2D/2:dist*specs.bonds_saturationWidth_2D/2;if(this.stereo===structures.Bond.STEREO_AMBIGUOUS){var cx1=x1-mcosp*useDist;var cy1=y1+msinp*useDist;var cx2=x1+mcosp*useDist;var cy2=y1-msinp*useDist;var cx3=x2+mcosp*useDist;var cy3=y2-msinp*useDist;var cx4=x2-mcosp*useDist;var cy4=y2+msinp*useDist;ctx.beginPath();ctx.moveTo(cx1,cy1);ctx.lineTo(cx3,cy3);ctx.moveTo(cx2,cy2);ctx.lineTo(cx4,cy4);ctx.stroke();}else if(!specs.bonds_symmetrical_2D&&(this.ring||this.a1.label==='C'&&this.a2.label==='C')){ctx.beginPath();ctx.moveTo(x1,y1);ctx.lineTo(x2,y2);ctx.stroke();var clip=0;useDist*=2;var clipAngle=specs.bonds_saturationAngle_2D;if(clipAngle<m.PI/2){clip=-(useDist/m.tan(clipAngle));}if(m.abs(clip)<dist/2){var xuse1=x1-m.cos(angle)*clip;var xuse2=x2+m.cos(angle)*clip;var yuse1=y1+m.sin(angle)*clip;var yuse2=y2-m.sin(angle)*clip;var cx1=xuse1-mcosp*useDist;var cy1=yuse1+msinp*useDist;var cx2=xuse1+mcosp*useDist;var cy2=yuse1-msinp*useDist;var cx3=xuse2-mcosp*useDist;var cy3=yuse2+msinp*useDist;var cx4=xuse2+mcosp*useDist;var cy4=yuse2-msinp*useDist;var flip=!this.ring||this.ring.center.angle(this.a1)>this.ring.center.angle(this.a2)&&!(this.ring.center.angle(this.a1)-this.ring.center.angle(this.a2)>m.PI)||this.ring.center.angle(this.a1)-this.ring.center.angle(this.a2)<-m.PI;ctx.beginPath();if(flip){ctx.moveTo(cx1,cy1);ctx.lineTo(cx3,cy3);}else{ctx.moveTo(cx2,cy2);ctx.lineTo(cx4,cy4);}if(this.bondOrder!==2){ctx.setLineDash([specs.bonds_hashSpacing_2D,specs.bonds_hashSpacing_2D]);}ctx.stroke();ctx.setLineDash([]);}}else{var cx1=x1-mcosp*useDist;var cy1=y1+msinp*useDist;var cx2=x1+mcosp*useDist;var cy2=y1-msinp*useDist;var cx3=x2+mcosp*useDist;var cy3=y2-msinp*useDist;var cx4=x2-mcosp*useDist;var cy4=y2+msinp*useDist;ctx.beginPath();ctx.moveTo(cx1,cy1);ctx.lineTo(cx4,cy4);ctx.stroke();ctx.beginPath();ctx.moveTo(cx2,cy2);ctx.lineTo(cx3,cy3);if(this.bondOrder!==2){ctx.setLineDash([specs.bonds_hashWidth_2D,specs.bonds_hashSpacing_2D]);}ctx.stroke();ctx.setLineDash([]);}break;case 3:var useDist=specs.bonds_useAbsoluteSaturationWidths_2D?specs.bonds_saturationWidthAbs_2D:this.a1.distance(this.a2)*specs.bonds_saturationWidth_2D;var perpendicular=this.a1.angle(this.a2)+m.PI/2;var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);var cx1=x1-mcosp*useDist;var cy1=y1+msinp*useDist;var cx2=x1+mcosp*useDist;var cy2=y1-msinp*useDist;var cx3=x2+mcosp*useDist;var cy3=y2-msinp*useDist;var cx4=x2-mcosp*useDist;var cy4=y2+msinp*useDist;ctx.beginPath();ctx.moveTo(cx1,cy1);ctx.lineTo(cx4,cy4);ctx.moveTo(cx2,cy2);ctx.lineTo(cx3,cy3);ctx.moveTo(x1,y1);ctx.lineTo(x2,y2);ctx.stroke();break;}}};_.drawDecorations=function(ctx,specs){if(this.isHover||this.isSelected){var pi2=2*m.PI;var angle=(this.a1.angleForStupidCanvasArcs(this.a2)+m.PI/2)%pi2;ctx.strokeStyle=this.isHover?specs.colorHover:specs.colorSelect;ctx.lineWidth=1.2;ctx.beginPath();var angleTo=(angle+m.PI)%pi2;angleTo=angleTo%(m.PI*2);ctx.arc(this.a1.x,this.a1.y,7,angle,angleTo,false);ctx.stroke();ctx.beginPath();angle+=m.PI;angleTo=(angle+m.PI)%pi2;ctx.arc(this.a2.x,this.a2.y,7,angle,angleTo,false);ctx.stroke();}};_.drawLewisStyle=function(ctx,specs,x1,y1,x2,y2){var angle=this.a1.angle(this.a2);var perp=angle+m.PI/2;var difx=x2-x1;var dify=y2-y1;var increment=m.sqrt(difx*difx+dify*dify)/(this.bondOrder+1);var xi=increment*m.cos(angle);var yi=-increment*m.sin(angle);var x=x1+xi;var y=y1+yi;for(var i=0;i<this.bondOrder;i++){var sep=specs.atoms_lonePairSpread_2D/2;var cx1=x-m.cos(perp)*sep;var cy1=y+m.sin(perp)*sep;var cx2=x+m.cos(perp)*sep;var cy2=y-m.sin(perp)*sep;ctx.beginPath();ctx.arc(cx1-specs.atoms_lonePairDiameter_2D/2,cy1-specs.atoms_lonePairDiameter_2D/2,specs.atoms_lonePairDiameter_2D,0,m.PI*2,false);ctx.fill();ctx.beginPath();ctx.arc(cx2-specs.atoms_lonePairDiameter_2D/2,cy2-specs.atoms_lonePairDiameter_2D/2,specs.atoms_lonePairDiameter_2D,0,m.PI*2,false);ctx.fill();x+=xi;y+=yi;}};/**\n\t * \n\t * @param {WegGLRenderingContext}\n\t *            gl\n\t * @param {structures.VisualSpecifications}\n\t *            specs\n\t * @param {boolean}\n\t *            asSegments Using cylinder/solid line or segmented pills/dashed\n\t *            line\n\t * @return {void}\n\t */_.render=function(gl,specs,asSegments){if(this.specs){specs=this.specs;}// this is the elongation vector for the cylinder\nvar height=this.a1.distance3D(this.a2);if(height===0){// if there is no height, then no point in rendering this bond,\n// just return\nreturn;}// scale factor for cylinder/pill radius.\n// when scale pill, the cap will affected too.\nvar radiusScale=specs.bonds_cylinderDiameter_3D/2;// atom1 color and atom2 color\nvar a1Color=specs.bonds_color;var a2Color;// transform to the atom as well as the opposite atom (for Jmol and\n// PyMOL\n// color splits)\nvar transform=m4.translate(m4.identity(),[this.a1.x,this.a1.y,this.a1.z]);var transformOpposite;// vector from atom1 to atom2\nvar a2b=[this.a2.x-this.a1.x,this.a2.y-this.a1.y,this.a2.z-this.a1.z];// calculate the rotation\nvar y=[0,1,0];var ang=0;var axis;if(this.a1.x===this.a2.x&&this.a1.z===this.a2.z){axis=[0,0,1];if(this.a2.y<this.a1.y){ang=m.PI;}}else{ang=extensions.vec3AngleFrom(y,a2b);axis=v3.cross(y,a2b,[]);}// the specs will split color are\n// - Line\n// - Stick\n// - Wireframe\nif(specs.bonds_splitColor){var specs1=this.a1.specs?this.a1.specs:specs;var specs2=this.a2.specs?this.a2.specs:specs;a1Color=this.a1.getElementColor(specs1.atoms_useJMOLColors,specs1.atoms_usePYMOLColors,specs1.atoms_color);a2Color=this.a2.getElementColor(specs2.atoms_useJMOLColors,specs2.atoms_usePYMOLColors,specs2.atoms_color);// the transformOpposite will use for split color.\n// just make it splited if the color different.\nif(a1Color!=a2Color){transformOpposite=m4.translate(m4.identity(),[this.a2.x,this.a2.y,this.a2.z]);}}// calculate the translations for unsaturated bonds.\n// represenattio use saturatedCross are\n// - Line\n// - Wireframe\n// - Ball and Stick\n// just Stick will set bonds_showBondOrders_3D to false\nvar others=[0];var saturatedCross;if(asSegments){// block for draw bond as segmented line/pill\nif(specs.bonds_showBondOrders_3D&&this.bondOrder>1){// The \"0.5\" part set here,\n// the other part (1) will render as cylinder\nothers=[/*-specs.bonds_cylinderDiameter_3D, */specs.bonds_cylinderDiameter_3D];var z=[0,0,1];var inverse=m4.inverse(gl.rotationMatrix,[]);m4.multiplyVec3(inverse,z);saturatedCross=v3.cross(a2b,z,[]);v3.normalize(saturatedCross);}var segmentScale=1;var spaceBetweenPill=specs.bonds_pillSpacing_3D;var pillHeight=specs.bonds_pillHeight_3D;if(this.bondOrder==0){if(specs.bonds_renderAsLines_3D){pillHeight=spaceBetweenPill;}else{pillHeight=specs.bonds_pillDiameter_3D;// Detect Ball and Stick representation\nif(pillHeight<specs.bonds_cylinderDiameter_3D){pillHeight/=2;}segmentScale=pillHeight/2;height/=segmentScale;spaceBetweenPill/=segmentScale/2;}}// total space need for one pill, iclude the space.\nvar totalSpaceForPill=pillHeight+spaceBetweenPill;// segmented pills for one bond.\nvar totalPillsPerBond=height/totalSpaceForPill;// segmented one unit pill for one bond\nvar pillsPerBond=m.floor(totalPillsPerBond);var extraSegmentedSpace=height-totalSpaceForPill*pillsPerBond;var paddingSpace=(spaceBetweenPill+specs.bonds_pillDiameter_3D+extraSegmentedSpace)/2;// pillSegmentsLength will change if both atom1 and atom2 color used\n// for rendering\nvar pillSegmentsLength=pillsPerBond;if(transformOpposite){// floor will effected for odd pills, because one pill at the\n// center\n// will replace with splited pills\npillSegmentsLength=m.floor(pillsPerBond/2);}// render bonds\nfor(var i=0,ii=others.length;i<ii;i++){var transformUse=m4.set(transform,[]);if(others[i]!==0){m4.translate(transformUse,v3.scale(saturatedCross,others[i],[]));}if(ang!==0){m4.rotate(transformUse,ang,axis);}if(segmentScale!=1){m4.scale(transformUse,[segmentScale,segmentScale,segmentScale]);}// colors\nif(a1Color)gl.material.setDiffuseColor(gl,a1Color);m4.translate(transformUse,[0,paddingSpace,0]);for(var j=0;j<pillSegmentsLength;j++){if(specs.bonds_renderAsLines_3D){if(this.bondOrder==0){gl.shader.setMatrixUniforms(gl,transformUse);gl.drawArrays(gl.POINTS,0,1);}else{m4.scale(transformUse,[1,pillHeight,1]);gl.shader.setMatrixUniforms(gl,transformUse);gl.drawArrays(gl.LINES,0,gl.lineBuffer.vertexPositionBuffer.numItems);m4.scale(transformUse,[1,1/pillHeight,1]);}}else{gl.shader.setMatrixUniforms(gl,transformUse);if(this.bondOrder==0){gl.drawElements(gl.TRIANGLES,gl.sphereBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}else{gl.drawElements(gl.TRIANGLES,gl.pillBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}}m4.translate(transformUse,[0,totalSpaceForPill,0]);}// if rendering segmented pill use atom1 and atom2 color\nif(transformOpposite){// parameter for calculate splited pills\nvar scaleY,halfOneMinScaleY;if(specs.bonds_renderAsLines_3D){scaleY=pillHeight;// if(this.bondOrder != 0) {\n// scaleY -= spaceBetweenPill;\n// }\nscaleY/=2;halfOneMinScaleY=0;}else{scaleY=2/3;halfOneMinScaleY=(1-scaleY)/2;}// if count of pills per bound is odd,\n// then draw the splited pills of atom1\nif(pillsPerBond%2!=0){m4.scale(transformUse,[1,scaleY,1]);gl.shader.setMatrixUniforms(gl,transformUse);if(specs.bonds_renderAsLines_3D){if(this.bondOrder==0){gl.drawArrays(gl.POINTS,0,1);}else{gl.drawArrays(gl.LINES,0,gl.lineBuffer.vertexPositionBuffer.numItems);}}else{if(this.bondOrder==0){gl.drawElements(gl.TRIANGLES,gl.sphereBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}else{gl.drawElements(gl.TRIANGLES,gl.pillBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}}m4.translate(transformUse,[0,totalSpaceForPill*(1+halfOneMinScaleY),0]);m4.scale(transformUse,[1,1/scaleY,1]);}// prepare to render the atom2\nm4.set(transformOpposite,transformUse);if(others[i]!==0){m4.translate(transformUse,v3.scale(saturatedCross,others[i],[]));}// don't check for 0 here as that means it should be rotated\n// by PI, but PI will be negated\nm4.rotate(transformUse,ang+m.PI,axis);if(segmentScale!=1){m4.scale(transformUse,[segmentScale,segmentScale,segmentScale]);}// colors\nif(a2Color){gl.material.setDiffuseColor(gl,a2Color);}m4.translate(transformUse,[0,paddingSpace,0]);// draw the remain pills which use the atom2 color\nfor(var j=0;j<pillSegmentsLength;j++){if(specs.bonds_renderAsLines_3D){if(this.bondOrder==0){gl.shader.setMatrixUniforms(gl,transformUse);gl.drawArrays(gl.POINTS,0,1);}else{m4.scale(transformUse,[1,pillHeight,1]);gl.shader.setMatrixUniforms(gl,transformUse);gl.drawArrays(gl.LINES,0,gl.lineBuffer.vertexPositionBuffer.numItems);m4.scale(transformUse,[1,1/pillHeight,1]);}}else{gl.shader.setMatrixUniforms(gl,transformUse);if(this.bondOrder==0){gl.drawElements(gl.TRIANGLES,gl.sphereBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}else{gl.drawElements(gl.TRIANGLES,gl.pillBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}}m4.translate(transformUse,[0,totalSpaceForPill,0]);}// draw the splited center pills of atom2\nif(pillsPerBond%2!=0){m4.scale(transformUse,[1,scaleY,1]);gl.shader.setMatrixUniforms(gl,transformUse);if(specs.bonds_renderAsLines_3D){if(this.bondOrder==0){gl.drawArrays(gl.POINTS,0,1);}else{gl.drawArrays(gl.LINES,0,gl.lineBuffer.vertexPositionBuffer.numItems);}}else{if(this.bondOrder==0){gl.drawElements(gl.TRIANGLES,gl.sphereBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}else{gl.drawElements(gl.TRIANGLES,gl.pillBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}}m4.translate(transformUse,[0,totalSpaceForPill*(1+halfOneMinScaleY),0]);m4.scale(transformUse,[1,1/scaleY,1]);}}}}else{// calculate the translations for unsaturated bonds.\n// represenation that use saturatedCross are\n// - Line\n// - Wireframe\n// - Ball and Stick\n// just Stick will set bonds_showBondOrders_3D to false\nif(specs.bonds_showBondOrders_3D){switch(this.bondOrder){// the 0 and 0.5 bond order will draw as segmented pill.\n// so we not set that here.\n// case 0:\n// case 0.5: break;\ncase 1.5:// The \"1\" part set here,\n// the other part (0.5) will render as segmented pill\nothers=[-specs.bonds_cylinderDiameter_3D/*\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * ,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t * specs.bonds_cylinderDiameter_3D\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t */];break;case 2:others=[-specs.bonds_cylinderDiameter_3D,specs.bonds_cylinderDiameter_3D];break;case 3:others=[-1.2*specs.bonds_cylinderDiameter_3D,0,1.2*specs.bonds_cylinderDiameter_3D];break;}// saturatedCross just need for need for bondorder greather than\n// 1\nif(this.bondOrder>1){var z=[0,0,1];var inverse=m4.inverse(gl.rotationMatrix,[]);m4.multiplyVec3(inverse,z);saturatedCross=v3.cross(a2b,z,[]);v3.normalize(saturatedCross);}}// for Stick representation, we just change the cylinder radius\nelse{switch(this.bondOrder){case 0:radiusScale*=0.25;break;case 0.5:case 1.5:radiusScale*=0.5;break;}}// if transformOpposite is set, the it mean the color must be\n// splited.\n// so the heigh of cylinder will be half.\n// one half for atom1 color the other for atom2 color\nif(transformOpposite){height/=2;}// Radius of cylinder already defined when initialize cylinder mesh,\n// so at this rate, the scale just needed for Y to strech\n// cylinder to bond length (height) and X and Z for radius.\nvar scaleVector=[radiusScale,height,radiusScale];// render bonds\nfor(var i=0,ii=others.length;i<ii;i++){var transformUse=m4.set(transform,[]);if(others[i]!==0){m4.translate(transformUse,v3.scale(saturatedCross,others[i],[]));}if(ang!==0){m4.rotate(transformUse,ang,axis);}m4.scale(transformUse,scaleVector);// colors\nif(a1Color)gl.material.setDiffuseColor(gl,a1Color);// render\ngl.shader.setMatrixUniforms(gl,transformUse);if(specs.bonds_renderAsLines_3D){gl.drawArrays(gl.LINES,0,gl.lineBuffer.vertexPositionBuffer.numItems);}else{gl.drawArrays(gl.TRIANGLE_STRIP,0,gl.cylinderBuffer.vertexPositionBuffer.numItems);}// if transformOpposite is set, then a2Color also shoudl be\n// seted as well.\nif(transformOpposite){m4.set(transformOpposite,transformUse);if(others[i]!==0){m4.translate(transformUse,v3.scale(saturatedCross,others[i],[]));}// don't check for 0 here as that means it should be rotated\n// by PI, but PI will be negated\nm4.rotate(transformUse,ang+m.PI,axis);m4.scale(transformUse,scaleVector);// colors\nif(a2Color)gl.material.setDiffuseColor(gl,a2Color);// render\ngl.shader.setMatrixUniforms(gl,transformUse);if(specs.bonds_renderAsLines_3D){gl.drawArrays(gl.LINES,0,gl.lineBuffer.vertexPositionBuffer.numItems);}else{gl.drawArrays(gl.TRIANGLE_STRIP,0,gl.cylinderBuffer.vertexPositionBuffer.numItems);}}}}};_.renderHighlight=function(gl,specs){if(this.isSelected||this.isHover){if(this.specs){specs=this.specs;}if(this.specs){specs=this.specs;}// this is the elongation vector for the cylinder\nvar height=this.a1.distance3D(this.a2);if(height===0){// if there is no height, then no point in rendering this bond,\n// just return\nreturn;}// scale factor for cylinder/pill radius.\n// when scale pill, the cap will affected too.\nvar radiusScale=specs.bonds_cylinderDiameter_3D/1.2;var transform=m4.translate(m4.identity(),[this.a1.x,this.a1.y,this.a1.z]);// vector from atom1 to atom2\nvar a2b=[this.a2.x-this.a1.x,this.a2.y-this.a1.y,this.a2.z-this.a1.z];// calculate the rotation\nvar y=[0,1,0];var ang=0;var axis;if(this.a1.x===this.a2.x&&this.a1.z===this.a2.z){axis=[0,0,1];if(this.a2.y<this.a1.y){ang=m.PI;}}else{ang=extensions.vec3AngleFrom(y,a2b);axis=v3.cross(y,a2b,[]);}var scaleVector=[radiusScale,height,radiusScale];if(ang!==0){m4.rotate(transform,ang,axis);}m4.scale(transform,scaleVector);gl.shader.setMatrixUniforms(gl,transform);gl.material.setDiffuseColor(gl,this.isHover?specs.colorHover:specs.colorSelect);gl.drawArrays(gl.TRIANGLE_STRIP,0,gl.cylinderBuffer.vertexPositionBuffer.numItems);}};/**\n\t * \n\t * @param {WegGLRenderingContext}\n\t *            gl\n\t * @param {structures.VisualSpecifications}\n\t *            specs\n\t * @return {void}\n\t */_.renderPicker=function(gl,specs){// gl.cylinderBuffer.bindBuffers(gl);\n// gl.material.setDiffuseColor(\n// this.bondOrder == 0 ? '#FF0000' : // merah\n// this.bondOrder == 0.5 ? '#FFFF00' : // kuning\n// this.bondOrder == 1 ? '#FF00FF' : // ungu\n// this.bondOrder == 1.5 ? '#00FF00' : // hijau\n// this.bondOrder == 2 ? '#00FFFF' : // cyan\n// this.bondOrder == 3 ? '#0000FF' : // biru\n// '#FFFFFF');\n// gl.material.setAlpha(1);\nif(this.specs){specs=this.specs;}// this is the elongation vector for the cylinder\nvar height=this.a1.distance3D(this.a2);if(height===0){// if there is no height, then no point in rendering this bond,\n// just return\nreturn;}// scale factor for cylinder/pill radius.\n// when scale pill, the cap will affected too.\nvar radiusScale=specs.bonds_cylinderDiameter_3D/2;// transform to the atom as well as the opposite atom (for Jmol and\n// PyMOL\n// color splits)\nvar transform=m4.translate(m4.identity(),[this.a1.x,this.a1.y,this.a1.z]);// vector from atom1 to atom2\nvar a2b=[this.a2.x-this.a1.x,this.a2.y-this.a1.y,this.a2.z-this.a1.z];// calculate the rotation\nvar y=[0,1,0];var ang=0;var axis;if(this.a1.x===this.a2.x&&this.a1.z===this.a2.z){axis=[0,0,1];if(this.a2.y<this.a1.y){ang=m.PI;}}else{ang=extensions.vec3AngleFrom(y,a2b);axis=v3.cross(y,a2b,[]);}// calculate the translations for unsaturated bonds.\n// represenattio use saturatedCross are\n// - Line\n// - WIreframe\n// - Ball and Stick\n// just Stick will set bonds_showBondOrders_3D to false\nvar others=[0];var saturatedCross;if(specs.bonds_showBondOrders_3D){if(specs.bonds_renderAsLines_3D){switch(this.bondOrder){case 1.5:case 2:others=[-specs.bonds_cylinderDiameter_3D,specs.bonds_cylinderDiameter_3D];break;case 3:others=[-1.2*specs.bonds_cylinderDiameter_3D,0,1.2*specs.bonds_cylinderDiameter_3D];break;}// saturatedCross just need for need for bondorder greather than\n// 1\nif(this.bondOrder>1){var z=[0,0,1];var inverse=m4.inverse(gl.rotationMatrix,[]);m4.multiplyVec3(inverse,z);saturatedCross=v3.cross(a2b,z,[]);v3.normalize(saturatedCross);}}else{switch(this.bondOrder){case 1.5:case 2:radiusScale*=3;break;case 3:radiusScale*=3.4;break;}}}else{// this is for Stick repersentation because Stick not have\n// bonds_showBondOrders_3D\nswitch(this.bondOrder){case 0:radiusScale*=0.25;break;case 0.5:case 1.5:radiusScale*=0.5;break;}}// Radius of cylinder already defined when initialize cylinder mesh,\n// so at this rate, the scale just needed for Y to strech\n// cylinder to bond length (height) and X and Z for radius.\nvar scaleVector=[radiusScale,height,radiusScale];// render bonds\nfor(var i=0,ii=others.length;i<ii;i++){var transformUse=m4.set(transform,[]);if(others[i]!==0){m4.translate(transformUse,v3.scale(saturatedCross,others[i],[]));}if(ang!==0){m4.rotate(transformUse,ang,axis);}m4.scale(transformUse,scaleVector);// render\ngl.shader.setMatrixUniforms(gl,transformUse);if(specs.bonds_renderAsLines_3D){gl.drawArrays(gl.LINES,0,gl.lineBuffer.vertexPositionBuffer.numItems);}else{gl.drawArrays(gl.TRIANGLE_STRIP,0,gl.cylinderBuffer.vertexPositionBuffer.numItems);}}};})(ChemDoodle.ELEMENT,ChemDoodle.extensions,ChemDoodle.structures,ChemDoodle.math,Math,ChemDoodle.lib.mat4,ChemDoodle.lib.vec3);(function(structures,m,undefined){'use strict';structures.Ring=function(){this.atoms=[];this.bonds=[];};var _=structures.Ring.prototype;_.center=undefined;_.setupBonds=function(){for(var i=0,ii=this.bonds.length;i<ii;i++){this.bonds[i].ring=this;}this.center=this.getCenter();};_.getCenter=function(){var minX=Infinity,minY=Infinity,maxX=-Infinity,maxY=-Infinity;for(var i=0,ii=this.atoms.length;i<ii;i++){minX=m.min(this.atoms[i].x,minX);minY=m.min(this.atoms[i].y,minY);maxX=m.max(this.atoms[i].x,maxX);maxY=m.max(this.atoms[i].y,maxY);}return new structures.Point((maxX+minX)/2,(maxY+minY)/2);};})(ChemDoodle.structures,Math);(function(c,math,structures,RESIDUE,m,undefined){'use strict';structures.Molecule=function(){this.atoms=[];this.bonds=[];this.rings=[];};var _=structures.Molecule.prototype;// this can be an extensive algorithm for large molecules, you may want\n// to turn this off\n_.findRings=true;_.draw=function(ctx,specs){if(this.specs){specs=this.specs;}// draw\n// need this weird render of atoms before and after, just in case\n// circles are rendered, as those should be on top\nif(specs.atoms_display&&!specs.atoms_circles_2D){for(var i=0,ii=this.atoms.length;i<ii;i++){this.atoms[i].draw(ctx,specs);}}if(specs.bonds_display){for(var i=0,ii=this.bonds.length;i<ii;i++){this.bonds[i].draw(ctx,specs);}}if(specs.atoms_display){for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];if(specs.atoms_circles_2D){a.draw(ctx,specs);}if(a.query){a.query.draw(ctx,specs,a);}}}};_.render=function(gl,specs){// uncomment this to render the picking frame\n// return this.renderPickFrame(gl, specs, []);\nif(this.specs){specs=this.specs;}// check explicitly if it is undefined here, since hetatm is a\n// boolean that can be true or false, as long as it is set, it is\n// macro\nvar isMacro=this.atoms.length>0&&this.atoms[0].hetatm!==undefined;if(isMacro){if(specs.macro_displayBonds){if(this.bonds.length>0){if(specs.bonds_renderAsLines_3D&&!this.residueSpecs||this.residueSpecs&&this.residueSpecs.bonds_renderAsLines_3D){gl.lineWidth(this.residueSpecs?this.residueSpecs.bonds_width_2D:specs.bonds_width_2D);gl.lineBuffer.bindBuffers(gl);}else{gl.cylinderBuffer.bindBuffers(gl);}// colors\ngl.material.setTempColors(gl,specs.bonds_materialAmbientColor_3D,undefined,specs.bonds_materialSpecularColor_3D,specs.bonds_materialShininess_3D);}for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];// closestDistance may be 0, so check if undefined\nif(!b.a1.hetatm&&(specs.macro_atomToLigandDistance===-1||b.a1.closestDistance!==undefined&&specs.macro_atomToLigandDistance>=b.a1.closestDistance&&specs.macro_atomToLigandDistance>=b.a2.closestDistance)){b.render(gl,this.residueSpecs?this.residueSpecs:specs);}}}if(specs.macro_displayAtoms){if(this.atoms.length>0){gl.sphereBuffer.bindBuffers(gl);// colors\ngl.material.setTempColors(gl,specs.atoms_materialAmbientColor_3D,undefined,specs.atoms_materialSpecularColor_3D,specs.atoms_materialShininess_3D);}for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];// closestDistance may be 0, so check if undefined\nif(!a.hetatm&&(specs.macro_atomToLigandDistance===-1||a.closestDistance!==undefined&&specs.macro_atomToLigandDistance>=a.closestDistance)){a.render(gl,this.residueSpecs?this.residueSpecs:specs);}}}}if(specs.bonds_display){// Array for Half Bonds. It is needed because Half Bonds use the\n// pill buffer.\nvar asPills=[];// Array for 0 bond order.\nvar asSpheres=[];if(this.bonds.length>0){if(specs.bonds_renderAsLines_3D){gl.lineWidth(specs.bonds_width_2D);gl.lineBuffer.bindBuffers(gl);}else{gl.cylinderBuffer.bindBuffers(gl);}// colors\ngl.material.setTempColors(gl,specs.bonds_materialAmbientColor_3D,undefined,specs.bonds_materialSpecularColor_3D,specs.bonds_materialShininess_3D);}for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];if(!isMacro||b.a1.hetatm){// Check if render as segmented pill will used.\nif(specs.bonds_showBondOrders_3D){if(b.bondOrder==0){// 0 bond order\nasSpheres.push(b);}else if(b.bondOrder==0.5){// 0.5 bond order\nasPills.push(b);}else{if(b.bondOrder==1.5){// For 1.5 bond order, the \"1\" part will render\n// as cylinder, and the \"0.5\" part will render\n// as segmented pills\nasPills.push(b);}b.render(gl,specs);}}else{// this will render the Stick representation\nb.render(gl,specs);}}}// Render the Half Bond\nif(asPills.length>0){// if bonds_renderAsLines_3D is true, then lineBuffer will\n// binded.\n// so in here we just need to check if we need to change\n// the binding buffer to pillBuffer or not.\nif(!specs.bonds_renderAsLines_3D){gl.pillBuffer.bindBuffers(gl);}for(var i=0,ii=asPills.length;i<ii;i++){asPills[i].render(gl,specs,true);}}// Render zero bond order\nif(asSpheres.length>0){// if bonds_renderAsLines_3D is true, then lineBuffer will\n// binded.\n// so in here we just need to check if we need to change\n// the binding buffer to pillBuffer or not.\nif(!specs.bonds_renderAsLines_3D){gl.sphereBuffer.bindBuffers(gl);}for(var i=0,ii=asSpheres.length;i<ii;i++){asSpheres[i].render(gl,specs,true);}}}if(specs.atoms_display){for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];a.bondNumber=0;a.renderAsStar=false;}for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];b.a1.bondNumber++;b.a2.bondNumber++;}if(this.atoms.length>0){gl.sphereBuffer.bindBuffers(gl);// colors\ngl.material.setTempColors(gl,specs.atoms_materialAmbientColor_3D,undefined,specs.atoms_materialSpecularColor_3D,specs.atoms_materialShininess_3D);}var asStars=[];for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];if(!isMacro||a.hetatm&&(specs.macro_showWater||!a.isWater)){if(specs.atoms_nonBondedAsStars_3D&&a.bondNumber===0){a.renderAsStar=true;asStars.push(a);}else{a.render(gl,specs);}}}if(asStars.length>0){gl.starBuffer.bindBuffers(gl);for(var i=0,ii=asStars.length;i<ii;i++){asStars[i].render(gl,specs);}}}if(this.chains){// set up the model view matrix, since it won't be modified\n// for macromolecules\ngl.shader.setMatrixUniforms(gl);// render chains\nif(specs.proteins_displayRibbon){// proteins\n// colors\ngl.material.setTempColors(gl,specs.proteins_materialAmbientColor_3D,undefined,specs.proteins_materialSpecularColor_3D,specs.proteins_materialShininess_3D);var uses=specs.proteins_ribbonCartoonize?this.cartoons:this.ribbons;for(var j=0,jj=uses.length;j<jj;j++){var use=uses[j];if(specs.proteins_residueColor!=='none'){use.front.bindBuffers(gl);var rainbow=specs.proteins_residueColor==='rainbow';for(var i=0,ii=use.front.segments.length;i<ii;i++){if(rainbow){gl.material.setDiffuseColor(gl,math.rainbowAt(i,ii,specs.macro_rainbowColors));}use.front.segments[i].render(gl,specs);}use.back.bindBuffers(gl);for(var i=0,ii=use.back.segments.length;i<ii;i++){if(rainbow){gl.material.setDiffuseColor(gl,math.rainbowAt(i,ii,specs.macro_rainbowColors));}use.back.segments[i].render(gl,specs);}}else{use.front.render(gl,specs);use.back.render(gl,specs);}}}if(specs.proteins_displayPipePlank){for(var j=0,jj=this.pipePlanks.length;j<jj;j++){this.pipePlanks[j].render(gl,specs);}}if(specs.proteins_displayBackbone){if(!this.alphaCarbonTrace){// cache the alpha carbon trace\nthis.alphaCarbonTrace={nodes:[],edges:[]};for(var j=0,jj=this.chains.length;j<jj;j++){var rs=this.chains[j];var isNucleotide=rs.length>2&&RESIDUE[rs[2].name]&&RESIDUE[rs[2].name].aminoColor==='#BEA06E';if(!isNucleotide&&rs.length>0){for(var i=0,ii=rs.length-2;i<ii;i++){var n=rs[i].cp1;n.chainColor=rs.chainColor;this.alphaCarbonTrace.nodes.push(n);var b=new structures.Bond(rs[i].cp1,rs[i+1].cp1);b.residueName=rs[i].name;b.chainColor=rs.chainColor;this.alphaCarbonTrace.edges.push(b);if(i===rs.length-3){n=rs[i+1].cp1;n.chainColor=rs.chainColor;this.alphaCarbonTrace.nodes.push(n);}}}}}if(this.alphaCarbonTrace.nodes.length>0){var traceSpecs=new structures.VisualSpecifications();traceSpecs.atoms_display=true;traceSpecs.bonds_display=true;traceSpecs.atoms_sphereDiameter_3D=specs.proteins_backboneThickness;traceSpecs.bonds_cylinderDiameter_3D=specs.proteins_backboneThickness;traceSpecs.bonds_splitColor=false;traceSpecs.atoms_color=specs.proteins_backboneColor;traceSpecs.bonds_color=specs.proteins_backboneColor;traceSpecs.atoms_useVDWDiameters_3D=false;// colors\ngl.material.setTempColors(gl,specs.proteins_materialAmbientColor_3D,undefined,specs.proteins_materialSpecularColor_3D,specs.proteins_materialShininess_3D);gl.material.setDiffuseColor(gl,specs.proteins_backboneColor);for(var i=0,ii=this.alphaCarbonTrace.nodes.length;i<ii;i++){var n=this.alphaCarbonTrace.nodes[i];if(specs.macro_colorByChain){traceSpecs.atoms_color=n.chainColor;}gl.sphereBuffer.bindBuffers(gl);n.render(gl,traceSpecs);}for(var i=0,ii=this.alphaCarbonTrace.edges.length;i<ii;i++){var e=this.alphaCarbonTrace.edges[i];var color;var r=RESIDUE[e.residueName]?RESIDUE[e.residueName]:RESIDUE['*'];if(specs.macro_colorByChain){color=e.chainColor;}else if(specs.proteins_residueColor==='shapely'){color=r.shapelyColor;}else if(specs.proteins_residueColor==='amino'){color=r.aminoColor;}else if(specs.proteins_residueColor==='polarity'){if(r.polar){color='#C10000';}else{color='#FFFFFF';}}else if(specs.proteins_residueColor==='acidity'){if(r.acidity===1){color='#0000FF';}else if(r.acidity===-1){color='#FF0000';}else if(r.polar){color='#FFFFFF';}else{color='#773300';}}else if(specs.proteins_residueColor==='rainbow'){color=math.rainbowAt(i,ii,specs.macro_rainbowColors);}if(color){traceSpecs.bonds_color=color;}gl.cylinderBuffer.bindBuffers(gl);e.render(gl,traceSpecs);}}}if(specs.nucleics_display){// nucleic acids\n// colors\ngl.material.setTempColors(gl,specs.nucleics_materialAmbientColor_3D,undefined,specs.nucleics_materialSpecularColor_3D,specs.nucleics_materialShininess_3D);for(var j=0,jj=this.tubes.length;j<jj;j++){gl.shader.setMatrixUniforms(gl);var use=this.tubes[j];use.render(gl,specs);}}}if(specs.atoms_display){var highlight=false;for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];if(a.isHover||a.isSelected){highlight=true;break;}}if(!highlight){for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];if(b.isHover||b.isSelected){highlight=true;break;}}}if(highlight){gl.sphereBuffer.bindBuffers(gl);// colors\ngl.blendFunc(gl.SRC_ALPHA,gl.ONE);gl.material.setTempColors(gl,specs.atoms_materialAmbientColor_3D,undefined,'#000000',0);gl.enable(gl.BLEND);gl.depthMask(false);gl.material.setAlpha(gl,.4);gl.sphereBuffer.bindBuffers(gl);for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];if(a.isHover||a.isSelected){a.renderHighlight(gl,specs);}}gl.cylinderBuffer.bindBuffers(gl);for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];if(b.isHover||b.isSelected){b.renderHighlight(gl,specs);}}gl.depthMask(true);gl.disable(gl.BLEND);gl.blendFuncSeparate(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA,gl.ONE,gl.ONE_MINUS_SRC_ALPHA);}}};_.renderPickFrame=function(gl,specs,objects,includeAtoms,includeBonds){if(this.specs){specs=this.specs;}var isMacro=this.atoms.length>0&&this.atoms[0].hetatm!==undefined;if(includeBonds&&specs.bonds_display){if(this.bonds.length>0){if(specs.bonds_renderAsLines_3D){gl.lineWidth(specs.bonds_width_2D);gl.lineBuffer.bindBuffers(gl);}else{gl.cylinderBuffer.bindBuffers(gl);}}for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];if(!isMacro||b.a1.hetatm){gl.material.setDiffuseColor(gl,math.idx2color(objects.length));b.renderPicker(gl,specs);objects.push(b);}}}if(includeAtoms&&specs.atoms_display){for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];a.bondNumber=0;a.renderAsStar=false;}for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];b.a1.bondNumber++;b.a2.bondNumber++;}if(this.atoms.length>0){gl.sphereBuffer.bindBuffers(gl);}var asStars=[];for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];if(!isMacro||a.hetatm&&(specs.macro_showWater||!a.isWater)){if(specs.atoms_nonBondedAsStars_3D&&a.bondNumber===0){a.renderAsStar=true;asStars.push(a);}else{gl.material.setDiffuseColor(gl,math.idx2color(objects.length));a.render(gl,specs,true);objects.push(a);}}}if(asStars.length>0){gl.starBuffer.bindBuffers(gl);for(var i=0,ii=asStars.length;i<ii;i++){var a=asStars[i];gl.material.setDiffuseColor(gl,math.idx2color(objects.length));a.render(gl,specs,true);objects.push(a);}}}};_.getCenter3D=function(){if(this.atoms.length===1){return new structures.Atom('C',this.atoms[0].x,this.atoms[0].y,this.atoms[0].z);}var minX=Infinity,minY=Infinity,minZ=Infinity;var maxX=-Infinity,maxY=-Infinity,maxZ=-Infinity;if(this.chains){// residues\nfor(var i=0,ii=this.chains.length;i<ii;i++){var chain=this.chains[i];for(var j=0,jj=chain.length;j<jj;j++){var residue=chain[j];minX=m.min(residue.cp1.x,residue.cp2.x,minX);minY=m.min(residue.cp1.y,residue.cp2.y,minY);minZ=m.min(residue.cp1.z,residue.cp2.z,minZ);maxX=m.max(residue.cp1.x,residue.cp2.x,maxX);maxY=m.max(residue.cp1.y,residue.cp2.y,maxY);maxZ=m.max(residue.cp1.z,residue.cp2.z,maxZ);}}}for(var i=0,ii=this.atoms.length;i<ii;i++){minX=m.min(this.atoms[i].x,minX);minY=m.min(this.atoms[i].y,minY);minZ=m.min(this.atoms[i].z,minZ);maxX=m.max(this.atoms[i].x,maxX);maxY=m.max(this.atoms[i].y,maxY);maxZ=m.max(this.atoms[i].z,maxZ);}return new structures.Atom('C',(maxX+minX)/2,(maxY+minY)/2,(maxZ+minZ)/2);};_.getCenter=function(){if(this.atoms.length===1){return new structures.Point(this.atoms[0].x,this.atoms[0].y);}var minX=Infinity,minY=Infinity;var maxX=-Infinity,maxY=-Infinity;for(var i=0,ii=this.atoms.length;i<ii;i++){minX=m.min(this.atoms[i].x,minX);minY=m.min(this.atoms[i].y,minY);maxX=m.max(this.atoms[i].x,maxX);maxY=m.max(this.atoms[i].y,maxY);}return new structures.Point((maxX+minX)/2,(maxY+minY)/2);};_.getDimension=function(){if(this.atoms.length===1){return new structures.Point(0,0);}var minX=Infinity,minY=Infinity;var maxX=-Infinity,maxY=-Infinity;if(this.chains){for(var i=0,ii=this.chains.length;i<ii;i++){var chain=this.chains[i];for(var j=0,jj=chain.length;j<jj;j++){var residue=chain[j];minX=m.min(residue.cp1.x,residue.cp2.x,minX);minY=m.min(residue.cp1.y,residue.cp2.y,minY);maxX=m.max(residue.cp1.x,residue.cp2.x,maxX);maxY=m.max(residue.cp1.y,residue.cp2.y,maxY);}}minX-=30;minY-=30;maxX+=30;maxY+=30;}for(var i=0,ii=this.atoms.length;i<ii;i++){minX=m.min(this.atoms[i].x,minX);minY=m.min(this.atoms[i].y,minY);maxX=m.max(this.atoms[i].x,maxX);maxY=m.max(this.atoms[i].y,maxY);}return new structures.Point(maxX-minX,maxY-minY);};_.check=function(force){// using force improves efficiency, so changes will not be checked\n// until a render occurs\n// you can force a check by sending true to this function after\n// calling check with a false\nif(force&&this.doChecks){// only check if the number of bonds has changed\nif(this.findRings){if(this.bonds.length-this.atoms.length!==this.fjNumCache){// find rings\nthis.rings=new c.informatics.SSSRFinder(this).rings;for(var i=0,ii=this.bonds.length;i<ii;i++){this.bonds[i].ring=undefined;}for(var i=0,ii=this.rings.length;i<ii;i++){this.rings[i].setupBonds();}}else{// update rings if any\nfor(var i=0,ii=this.rings.length;i<ii;i++){var r=this.rings[i];r.center=r.getCenter();}}}// find lones\nfor(var i=0,ii=this.atoms.length;i<ii;i++){this.atoms[i].isLone=false;if(this.atoms[i].label==='C'){var counter=0;for(var j=0,jj=this.bonds.length;j<jj;j++){if(this.bonds[j].a1===this.atoms[i]||this.bonds[j].a2===this.atoms[i]){counter++;}}if(counter===0){this.atoms[i].isLone=true;}}}// sort\nvar sort=false;for(var i=0,ii=this.atoms.length;i<ii;i++){if(this.atoms[i].z!==0){sort=true;}}if(sort){this.sortAtomsByZ();this.sortBondsByZ();}// setup metadata\nthis.setupMetaData();this.atomNumCache=this.atoms.length;this.bondNumCache=this.bonds.length;// fj number cache doesnt care if there are separate molecules,\n// as the change will signal a need to check for rings; the\n// accuracy doesn't matter\nthis.fjNumCache=this.bonds.length-this.atoms.length;}this.doChecks=!force;};_.getAngles=function(a){var angles=[];for(var i=0,ii=this.bonds.length;i<ii;i++){if(this.bonds[i].contains(a)){angles.push(a.angle(this.bonds[i].getNeighbor(a)));}}angles.sort(function(a,b){return a-b;});return angles;};_.getCoordinationNumber=function(bs){var coordinationNumber=0;for(var i=0,ii=bs.length;i<ii;i++){coordinationNumber+=bs[i].bondOrder;}return coordinationNumber;};_.getBonds=function(a){var bonds=[];for(var i=0,ii=this.bonds.length;i<ii;i++){if(this.bonds[i].contains(a)){bonds.push(this.bonds[i]);}}return bonds;};_.sortAtomsByZ=function(){for(var i=1,ii=this.atoms.length;i<ii;i++){var index=i;while(index>0&&this.atoms[index].z<this.atoms[index-1].z){var hold=this.atoms[index];this.atoms[index]=this.atoms[index-1];this.atoms[index-1]=hold;index--;}}};_.sortBondsByZ=function(){for(var i=1,ii=this.bonds.length;i<ii;i++){var index=i;while(index>0&&this.bonds[index].a1.z+this.bonds[index].a2.z<this.bonds[index-1].a1.z+this.bonds[index-1].a2.z){var hold=this.bonds[index];this.bonds[index]=this.bonds[index-1];this.bonds[index-1]=hold;index--;}}};_.setupMetaData=function(){var center=this.getCenter();for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];a.bonds=this.getBonds(a);a.angles=this.getAngles(a);a.isHidden=a.bonds.length===2&&m.abs(m.abs(a.angles[1]-a.angles[0])-m.PI)<m.PI/30&&a.bonds[0].bondOrder===a.bonds[1].bondOrder;var angleData=math.angleBetweenLargest(a.angles);a.angleOfLeastInterference=angleData.angle%(m.PI*2);a.largestAngle=angleData.largest;a.coordinationNumber=this.getCoordinationNumber(a.bonds);a.bondNumber=a.bonds.length;a.molCenter=center;}for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];b.molCenter=center;}};_.scaleToAverageBondLength=function(length){var avBondLength=this.getAverageBondLength();if(avBondLength!==0){var scale=length/avBondLength;for(var i=0,ii=this.atoms.length;i<ii;i++){this.atoms[i].x*=scale;this.atoms[i].y*=scale;}}};_.getAverageBondLength=function(){if(this.bonds.length===0){return 0;}var tot=0;for(var i=0,ii=this.bonds.length;i<ii;i++){tot+=this.bonds[i].getLength();}tot/=this.bonds.length;return tot;};_.getBounds=function(){var bounds=new math.Bounds();for(var i=0,ii=this.atoms.length;i<ii;i++){bounds.expand(this.atoms[i].getBounds());}if(this.chains){for(var i=0,ii=this.chains.length;i<ii;i++){var chain=this.chains[i];for(var j=0,jj=chain.length;j<jj;j++){var residue=chain[j];bounds.expand(residue.cp1.x,residue.cp1.y);bounds.expand(residue.cp2.x,residue.cp2.y);}}bounds.minX-=30;bounds.minY-=30;bounds.maxX+=30;bounds.maxY+=30;}return bounds;};_.getBounds3D=function(){var bounds=new math.Bounds();for(var i=0,ii=this.atoms.length;i<ii;i++){bounds.expand(this.atoms[i].getBounds3D());}if(this.chains){for(var i=0,ii=this.chains.length;i<ii;i++){var chain=this.chains[i];for(var j=0,jj=chain.length;j<jj;j++){var residue=chain[j];bounds.expand3D(residue.cp1.x,residue.cp1.y,residue.cp1.z);bounds.expand3D(residue.cp2.x,residue.cp2.y,residue.cp2.z);}}}return bounds;};_.getAtomGroup=function(a){var ring=false;for(var i=0,ii=this.atoms.length;i<ii;i++){this.atoms[i].visited=false;}for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];if(!ring&&b.contains(a)&&b.ring!==undefined){ring=true;}}if(!ring){return undefined;}var set=[a];a.visited=true;var q=new structures.Queue();q.enqueue(a);while(!q.isEmpty()){var atom=q.dequeue();for(var i=0,ii=this.bonds.length;i<ii;i++){var b=this.bonds[i];if(b.contains(atom)&&ring===(b.ring!==undefined)){var n=b.getNeighbor(atom);if(!n.visited){n.visited=true;set.push(n);q.enqueue(n);}}}}return set;};_.getBondGroup=function(b){var ring=b.ring!==undefined;var contained=false;for(var i=0,ii=this.bonds.length;i<ii;i++){var bi=this.bonds[i];if(bi===b){contained=true;}bi.visited=false;}if(!contained){// this bond isn't part of the molecule\nreturn undefined;}var set=[b];b.visited=true;var q=new structures.Queue();q.enqueue(b);while(!q.isEmpty()){var bond=q.dequeue();for(var i=0,ii=this.bonds.length;i<ii;i++){var n=this.bonds[i];if(!n.visited&&(n.a1===bond.a1||n.a2===bond.a1||n.a1===bond.a2||n.a2===bond.a2)&&n.ring!==undefined===ring){n.visited=true;set.push(n);q.enqueue(n);}}}return set;};})(ChemDoodle,ChemDoodle.math,ChemDoodle.structures,ChemDoodle.RESIDUE,Math);(function(structures,m,m4,v3,undefined){'use strict';var SB;var lastVerticalResolution=-1;function setupMatrices(verticalResolution){var n2=verticalResolution*verticalResolution;var n3=verticalResolution*verticalResolution*verticalResolution;var S=[6/n3,0,0,0,6/n3,2/n2,0,0,1/n3,1/n2,1/verticalResolution,0,0,0,0,1];var Bm=[-1/6,1/2,-1/2,1/6,1/2,-1,1/2,0,-1/2,0,1/2,0,1/6,2/3,1/6,0];SB=m4.multiply(Bm,S,[]);lastVerticalResolution=verticalResolution;}structures.Residue=function(resSeq){// number of vertical slashes per segment\nthis.resSeq=resSeq;};var _=structures.Residue.prototype;_.setup=function(nextAlpha,horizontalResolution){this.horizontalResolution=horizontalResolution;// define plane\nvar A=[nextAlpha.x-this.cp1.x,nextAlpha.y-this.cp1.y,nextAlpha.z-this.cp1.z];var B=[this.cp2.x-this.cp1.x,this.cp2.y-this.cp1.y,this.cp2.z-this.cp1.z];var C=v3.cross(A,B,[]);this.D=v3.cross(C,A,[]);v3.normalize(C);v3.normalize(this.D);// generate guide coordinates\n// guides for the narrow parts of the ribbons\nthis.guidePointsSmall=[];// guides for the wide parts of the ribbons\nthis.guidePointsLarge=[];// guides for the ribbon part of helix as cylinder model\nvar P=[(nextAlpha.x+this.cp1.x)/2,(nextAlpha.y+this.cp1.y)/2,(nextAlpha.z+this.cp1.z)/2];if(this.helix){// expand helices\nv3.scale(C,1.5);v3.add(P,C);}this.guidePointsSmall[0]=new structures.Atom('',P[0]-this.D[0]/2,P[1]-this.D[1]/2,P[2]-this.D[2]/2);for(var i=1;i<horizontalResolution;i++){this.guidePointsSmall[i]=new structures.Atom('',this.guidePointsSmall[0].x+this.D[0]*i/horizontalResolution,this.guidePointsSmall[0].y+this.D[1]*i/horizontalResolution,this.guidePointsSmall[0].z+this.D[2]*i/horizontalResolution);}v3.scale(this.D,4);this.guidePointsLarge[0]=new structures.Atom('',P[0]-this.D[0]/2,P[1]-this.D[1]/2,P[2]-this.D[2]/2);for(var i=1;i<horizontalResolution;i++){this.guidePointsLarge[i]=new structures.Atom('',this.guidePointsLarge[0].x+this.D[0]*i/horizontalResolution,this.guidePointsLarge[0].y+this.D[1]*i/horizontalResolution,this.guidePointsLarge[0].z+this.D[2]*i/horizontalResolution);}};_.getGuidePointSet=function(type){if(type===0){return this.helix||this.sheet?this.guidePointsLarge:this.guidePointsSmall;}else if(type===1){return this.guidePointsSmall;}else if(type===2){return this.guidePointsLarge;}};_.computeLineSegments=function(b2,b1,a1,doCartoon,verticalResolution){this.setVerticalResolution(verticalResolution);this.split=a1.helix!==this.helix||a1.sheet!==this.sheet;this.lineSegments=this.innerCompute(0,b2,b1,a1,false,verticalResolution);if(doCartoon){this.lineSegmentsCartoon=this.innerCompute(this.helix||this.sheet?2:1,b2,b1,a1,true,verticalResolution);}};_.innerCompute=function(set,b2,b1,a1,useArrows,verticalResolution){var segments=[];var use=this.getGuidePointSet(set);var useb2=b2.getGuidePointSet(set);var useb1=b1.getGuidePointSet(set);var usea1=a1.getGuidePointSet(set);for(var l=0,ll=use.length;l<ll;l++){var G=[useb2[l].x,useb2[l].y,useb2[l].z,1,useb1[l].x,useb1[l].y,useb1[l].z,1,use[l].x,use[l].y,use[l].z,1,usea1[l].x,usea1[l].y,usea1[l].z,1];var M=m4.multiply(G,SB,[]);var strand=[];for(var k=0;k<verticalResolution;k++){for(var i=3;i>0;i--){for(var j=0;j<4;j++){M[i*4+j]+=M[(i-1)*4+j];}}strand[k]=new structures.Atom('',M[12]/M[15],M[13]/M[15],M[14]/M[15]);}segments[l]=strand;}if(useArrows&&this.arrow){for(var i=0,ii=verticalResolution;i<ii;i++){var mult=1.5-1.3*i/verticalResolution;var mid=m.floor(this.horizontalResolution/2);var center=segments[mid];for(var j=0,jj=segments.length;j<jj;j++){if(j!==mid){var o=center[i];var f=segments[j][i];var vec=[f.x-o.x,f.y-o.y,f.z-o.z];v3.scale(vec,mult);f.x=o.x+vec[0];f.y=o.y+vec[1];f.z=o.z+vec[2];}}}}return segments;};_.setVerticalResolution=function(verticalResolution){if(verticalResolution!==lastVerticalResolution){setupMatrices(verticalResolution);}};})(ChemDoodle.structures,Math,ChemDoodle.lib.mat4,ChemDoodle.lib.vec3);(function(extensions,structures,math,q,m,undefined){'use strict';structures.Spectrum=function(){this.data=[];this.metadata=[];this.dataDisplay=[];this.memory={offsetTop:0,offsetLeft:0,offsetBottom:0,flipXAxis:false,scale:1,width:0,height:0};};var _=structures.Spectrum.prototype;_.title=undefined;_.xUnit=undefined;_.yUnit=undefined;_.continuous=true;_.integrationSensitivity=0.01;_.draw=function(ctx,specs,width,height){if(this.specs){specs=this.specs;}var offsetTop=5;var offsetLeft=0;var offsetBottom=0;// draw decorations\nctx.fillStyle=specs.text_color;ctx.textAlign='center';ctx.textBaseline='alphabetic';ctx.font=extensions.getFontString(specs.text_font_size,specs.text_font_families);if(this.xUnit){offsetBottom+=specs.text_font_size;ctx.fillText(this.xUnit,width/2,height-2);}if(this.yUnit&&specs.plots_showYAxis){offsetLeft+=specs.text_font_size;ctx.save();ctx.translate(specs.text_font_size,height/2);ctx.rotate(-m.PI/2);ctx.fillText(this.yUnit,0,0);ctx.restore();}if(this.title){offsetTop+=specs.text_font_size;ctx.fillText(this.title,width/2,specs.text_font_size);}// draw ticks\nctx.lineCap='square';offsetBottom+=5+specs.text_font_size;if(specs.plots_showYAxis){offsetLeft+=5+ctx.measureText('1000').width;}if(specs.plots_showGrid){ctx.strokeStyle=specs.plots_gridColor;ctx.lineWidth=specs.plots_gridLineWidth;ctx.strokeRect(offsetLeft,offsetTop,width-offsetLeft,height-offsetBottom-offsetTop);}ctx.textAlign='center';ctx.textBaseline='top';var span=this.maxX-this.minX;var t=span/100;var major=.001;while(major<t||span/major>25){major*=10;}var counter=0;var overlapX=specs.plots_flipXAxis?width:0;for(var i=m.round(this.minX/major)*major;i<=this.maxX;i+=major/2){var x=this.getTransformedX(i,specs,width,offsetLeft);if(x>offsetLeft){ctx.strokeStyle='black';ctx.lineWidth=1;if(counter%2===0){ctx.beginPath();ctx.moveTo(x,height-offsetBottom);ctx.lineTo(x,height-offsetBottom+2);ctx.stroke();var s=i.toFixed(5);while(s.charAt(s.length-1)==='0'){s=s.substring(0,s.length-1);}if(s.charAt(s.length-1)==='.'){s=s.substring(0,s.length-1);}// do this to avoid label overlap\nvar numWidth=ctx.measureText(s).width;if(specs.plots_flipXAxis){numWidth*=-1;}var ls=x-numWidth/2;if(specs.plots_flipXAxis?ls<overlapX:ls>overlapX){ctx.fillText(s,x,height-offsetBottom+2);overlapX=x+numWidth/2;}if(specs.plots_showGrid){ctx.strokeStyle=specs.plots_gridColor;ctx.lineWidth=specs.plots_gridLineWidth;ctx.beginPath();ctx.moveTo(x,height-offsetBottom);ctx.lineTo(x,offsetTop);ctx.stroke();}}else{ctx.beginPath();ctx.moveTo(x,height-offsetBottom);ctx.lineTo(x,height-offsetBottom+2);ctx.stroke();}}counter++;}if(specs.plots_showYAxis||specs.plots_showGrid){var spany=1/specs.scale;ctx.textAlign='right';ctx.textBaseline='middle';for(var i=0;i<=10;i++){var yval=spany/10*i;var y=offsetTop+(height-offsetBottom-offsetTop)*(1-yval*specs.scale);if(specs.plots_showGrid){ctx.strokeStyle=specs.plots_gridColor;ctx.lineWidth=specs.plots_gridLineWidth;ctx.beginPath();ctx.moveTo(offsetLeft,y);ctx.lineTo(width,y);ctx.stroke();}if(specs.plots_showYAxis){ctx.strokeStyle='black';ctx.lineWidth=1;ctx.beginPath();ctx.moveTo(offsetLeft,y);ctx.lineTo(offsetLeft-3,y);ctx.stroke();var val=yval*100;var cutoff=m.max(0,3-m.floor(val).toString().length);var s=val.toFixed(cutoff);if(cutoff>0){while(s.charAt(s.length-1)==='0'){s=s.substring(0,s.length-1);}}if(s.charAt(s.length-1)==='.'){s=s.substring(0,s.length-1);}ctx.fillText(s,offsetLeft-3,y);}}}// draw axes\nctx.strokeStyle='black';ctx.lineWidth=1;ctx.beginPath();// draw x axis\nctx.moveTo(width,height-offsetBottom);ctx.lineTo(offsetLeft,height-offsetBottom);// draw y axis\nif(specs.plots_showYAxis){ctx.lineTo(offsetLeft,offsetTop);}ctx.stroke();// draw metadata\nif(this.dataDisplay.length>0){ctx.textAlign='left';ctx.textBaseline='top';var mcount=0;for(var i=0,ii=this.dataDisplay.length;i<ii;i++){if(this.dataDisplay[i].value){ctx.fillText([this.dataDisplay[i].display,': ',this.dataDisplay[i].value].join(''),offsetLeft+10,offsetTop+10+mcount*(specs.text_font_size+5));mcount++;}else if(this.dataDisplay[i].tag){for(var j=0,jj=this.metadata.length;j<jj;j++){if(extensions.stringStartsWith(this.metadata[j],this.dataDisplay[i].tag)){var draw=this.metadata[j];if(this.dataDisplay[i].display){var index=this.metadata[j].indexOf('=');draw=[this.dataDisplay[i].display,': ',index>-1?this.metadata[j].substring(index+2):this.metadata[j]].join('');}ctx.fillText(draw,offsetLeft+10,offsetTop+10+mcount*(specs.text_font_size+5));mcount++;break;}}}}}this.drawPlot(ctx,specs,width,height,offsetTop,offsetLeft,offsetBottom);this.memory.offsetTop=offsetTop;this.memory.offsetLeft=offsetLeft;this.memory.offsetBottom=offsetBottom;this.memory.flipXAxis=specs.plots_flipXAxis;this.memory.scale=specs.scale;this.memory.width=width;this.memory.height=height;};_.drawPlot=function(ctx,specs,width,height,offsetTop,offsetLeft,offsetBottom){if(this.specs){specs=this.specs;}ctx.strokeStyle=specs.plots_color;ctx.lineWidth=specs.plots_width;var integration=[];// clip the spectrum display bounds here to not draw over the axes\n// we do this because we want to continue drawing segments to their natural ends to be accurate, but don't want to see them past the display area\nctx.save();ctx.rect(offsetLeft,offsetTop,width-offsetLeft,height-offsetBottom-offsetTop);ctx.clip();ctx.beginPath();if(this.continuous){var started=false;var counter=0;var stop=false;for(var i=0,ii=this.data.length;i<ii;i++){var x=this.getTransformedX(this.data[i].x,specs,width,offsetLeft);var xnext;if(i<ii&&!started&&this.data[i+1]){// see if you should render this first segment\nxnext=this.getTransformedX(this.data[i+1].x,specs,width,offsetLeft);}// check xnext against undefined as it can be 0/1\nif(x>=offsetLeft&&x<width||xnext!==undefined&&xnext>=offsetLeft&&xnext<width){var y=this.getTransformedY(this.data[i].y,specs,height,offsetBottom,offsetTop);if(specs.plots_showIntegration&&m.abs(this.data[i].y)>this.integrationSensitivity){integration.push(new structures.Point(this.data[i].x,this.data[i].y));}if(!started){ctx.moveTo(x,y);started=true;}ctx.lineTo(x,y);counter++;if(counter%1000===0){// segment the path to avoid crashing safari on mac os x\nctx.stroke();ctx.beginPath();ctx.moveTo(x,y);}if(stop){break;}}else if(started){// render one more segment\nstop=true;}}}else{for(var i=0,ii=this.data.length;i<ii;i++){var x=this.getTransformedX(this.data[i].x,specs,width,offsetLeft);if(x>=offsetLeft&&x<width){ctx.moveTo(x,height-offsetBottom);ctx.lineTo(x,this.getTransformedY(this.data[i].y,specs,height,offsetBottom,offsetTop));}}}ctx.stroke();if(specs.plots_showIntegration&&integration.length>1){ctx.strokeStyle=specs.plots_integrationColor;ctx.lineWidth=specs.plots_integrationLineWidth;ctx.beginPath();var ascending=integration[1].x>integration[0].x;var max;if(this.flipXAxis&&!ascending||!this.flipXAxis&&ascending){for(var i=integration.length-2;i>=0;i--){integration[i].y=integration[i].y+integration[i+1].y;}max=integration[0].y;}else{for(var i=1,ii=integration.length;i<ii;i++){integration[i].y=integration[i].y+integration[i-1].y;}max=integration[integration.length-1].y;}for(var i=0,ii=integration.length;i<ii;i++){var x=this.getTransformedX(integration[i].x,specs,width,offsetLeft);var y=this.getTransformedY(integration[i].y/specs.scale/max,specs,height,offsetBottom,offsetTop);if(i===0){ctx.moveTo(x,y);}else{ctx.lineTo(x,y);}}ctx.stroke();}ctx.restore();};_.getTransformedY=function(y,specs,height,offsetBottom,offsetTop){return offsetTop+(height-offsetBottom-offsetTop)*(1-y*specs.scale);};_.getInverseTransformedY=function(y){// can only be called after a render when memory is set, this\n// function doesn't make sense without a render first anyway\nreturn(1-(y-this.memory.offsetTop)/(this.memory.height-this.memory.offsetBottom-this.memory.offsetTop))/this.memory.scale*100;};_.getTransformedX=function(x,specs,width,offsetLeft){var returning=offsetLeft+(x-this.minX)/(this.maxX-this.minX)*(width-offsetLeft);if(specs.plots_flipXAxis){returning=width+offsetLeft-returning;}return returning;};_.getInverseTransformedX=function(x){// can only be called after a render when memory is set, this\n// function doesn't make sense without a render first anyway\nif(this.memory.flipXAxis){x=this.memory.width+this.memory.offsetLeft-x;}return(x-this.memory.offsetLeft)*(this.maxX-this.minX)/(this.memory.width-this.memory.offsetLeft)+this.minX;};_.setup=function(){var xmin=Number.MAX_VALUE;var xmax=Number.MIN_VALUE;var ymax=Number.MIN_VALUE;for(var i=0,ii=this.data.length;i<ii;i++){xmin=m.min(xmin,this.data[i].x);xmax=m.max(xmax,this.data[i].x);ymax=m.max(ymax,this.data[i].y);}if(this.continuous){this.minX=xmin;this.maxX=xmax;}else{this.minX=xmin-1;this.maxX=xmax+1;}for(var i=0,ii=this.data.length;i<ii;i++){this.data[i].y/=ymax;}};_.zoom=function(pixel1,pixel2,width,rescaleY){var p1=this.getInverseTransformedX(pixel1);var p2=this.getInverseTransformedX(pixel2);this.minX=m.min(p1,p2);this.maxX=m.max(p1,p2);if(rescaleY){var ymax=Number.MIN_VALUE;for(var i=0,ii=this.data.length;i<ii;i++){if(math.isBetween(this.data[i].x,this.minX,this.maxX)){ymax=m.max(ymax,this.data[i].y);}}return 1/ymax;}};_.translate=function(dif,width){var dist=dif/(width-this.memory.offsetLeft)*(this.maxX-this.minX)*(this.memory.flipXAxis?1:-1);this.minX+=dist;this.maxX+=dist;};_.alertMetadata=function(){alert(this.metadata.join('\\n'));};_.getInternalCoordinates=function(x,y){return new ChemDoodle.structures.Point(this.getInverseTransformedX(x),this.getInverseTransformedY(y));};_.getClosestPlotInternalCoordinates=function(x){var xtl=this.getInverseTransformedX(x-1);var xtr=this.getInverseTransformedX(x+1);if(xtl>xtr){var temp=xtl;xtl=xtr;xtr=temp;}var highest=-1;var max=-Infinity;var inRange=false;for(var i=0,ii=this.data.length;i<ii;i++){var p=this.data[i];if(math.isBetween(p.x,xtl,xtr)){if(p.y>max){inRange=true;max=p.y;highest=i;}}else if(inRange){break;}}if(highest===-1){return undefined;}var p=this.data[highest];return new ChemDoodle.structures.Point(p.x,p.y*100);};_.getClosestPeakInternalCoordinates=function(x){var xt=this.getInverseTransformedX(x);var closest=0;var dif=Infinity;for(var i=0,ii=this.data.length;i<ii;i++){var sub=m.abs(this.data[i].x-xt);if(sub<=dif){dif=sub;closest=i;}else{break;}}var highestLeft=closest,highestRight=closest;var maxLeft=this.data[closest].y,maxRight=this.data[closest].y;for(var i=closest+1,ii=this.data.length;i<ii;i++){if(this.data[i].y+.05>maxRight){maxRight=this.data[i].y;highestRight=i;}else{break;}}for(var i=closest-1;i>=0;i--){if(this.data[i].y+.05>maxLeft){maxLeft=this.data[i].y;highestLeft=i;}else{break;}}var p=this.data[highestLeft-closest>highestRight-closest?highestRight:highestLeft];return new ChemDoodle.structures.Point(p.x,p.y*100);};})(ChemDoodle.extensions,ChemDoodle.structures,ChemDoodle.math,ChemDoodle.lib.jQuery,Math);(function(math,d2,m,undefined){'use strict';d2._Shape=function(){};var _=d2._Shape.prototype;_.drawDecorations=function(ctx,specs){if(this.isHover){var ps=this.getPoints();for(var i=0,ii=ps.length;i<ii;i++){var p=ps[i];this.drawAnchor(ctx,specs,p,p===this.hoverPoint);}}};_.getBounds=function(){var bounds=new math.Bounds();var ps=this.getPoints();for(var i=0,ii=ps.length;i<ii;i++){var p=ps[i];bounds.expand(p.x,p.y);}return bounds;};_.drawAnchor=function(ctx,specs,p,hovered){ctx.save();ctx.translate(p.x,p.y);ctx.rotate(m.PI/4);ctx.scale(1/specs.scale,1/specs.scale);var boxRadius=4;var innerRadius=boxRadius/2;ctx.beginPath();ctx.moveTo(-boxRadius,-boxRadius);ctx.lineTo(boxRadius,-boxRadius);ctx.lineTo(boxRadius,boxRadius);ctx.lineTo(-boxRadius,boxRadius);ctx.closePath();if(hovered){ctx.fillStyle=specs.colorHover;}else{ctx.fillStyle='white';}ctx.fill();ctx.beginPath();ctx.moveTo(-boxRadius,-innerRadius);ctx.lineTo(-boxRadius,-boxRadius);ctx.lineTo(-innerRadius,-boxRadius);ctx.moveTo(innerRadius,-boxRadius);ctx.lineTo(boxRadius,-boxRadius);ctx.lineTo(boxRadius,-innerRadius);ctx.moveTo(boxRadius,innerRadius);ctx.lineTo(boxRadius,boxRadius);ctx.lineTo(innerRadius,boxRadius);ctx.moveTo(-innerRadius,boxRadius);ctx.lineTo(-boxRadius,boxRadius);ctx.lineTo(-boxRadius,innerRadius);ctx.moveTo(-boxRadius,-innerRadius);ctx.strokeStyle='rgba(0,0,0,.2)';ctx.lineWidth=5;ctx.stroke();ctx.strokeStyle='blue';ctx.lineWidth=1;ctx.stroke();ctx.restore();};})(ChemDoodle.math,ChemDoodle.structures.d2,Math);(function(extensions,math,structures,d2,m,undefined){'use strict';d2.AtomMapping=function(o1,o2){// these need to be named 'o', not 'a' or the generic erase function won't work for them\nthis.o1=o1;this.o2=o2;this.label='0';this.error=false;};var _=d2.AtomMapping.prototype=new d2._Shape();_.drawDecorations=function(ctx,specs){if(this.isHover||this.isSelected){ctx.strokeStyle=this.isHover?specs.colorHover:specs.colorSelect;ctx.lineWidth=1;ctx.beginPath();ctx.moveTo(this.o1.x,this.o1.y);ctx.lineTo(this.o2.x,this.o2.y);ctx.setLineDash([2]);ctx.stroke();ctx.setLineDash([]);}};_.draw=function(ctx,specs){if(this.o1&&this.o2){var sep=14;this.x1=this.o1.x+sep*m.cos(this.o1.angleOfLeastInterference);this.y1=this.o1.y-sep*m.sin(this.o1.angleOfLeastInterference);this.x2=this.o2.x+sep*m.cos(this.o2.angleOfLeastInterference);this.y2=this.o2.y-sep*m.sin(this.o2.angleOfLeastInterference);ctx.font=extensions.getFontString(specs.text_font_size,specs.text_font_families,specs.text_font_bold,specs.text_font_italic);var label=this.label;var w=ctx.measureText(label).width;if(this.isLassoed){ctx.fillStyle=specs.colorHover;ctx.fillRect(this.x1-w/2-3,this.y1-specs.text_font_size/2-3,w+6,specs.text_font_size+6);ctx.fillRect(this.x2-w/2-3,this.y2-specs.text_font_size/2-3,w+6,specs.text_font_size+6);}var color=this.error?specs.colorError:specs.shapes_color;if(this.isHover||this.isSelected){color=this.isHover?specs.colorHover:specs.colorSelect;}ctx.fillStyle=color;ctx.fillRect(this.x1-w/2-1,this.y1-specs.text_font_size/2-1,w+2,specs.text_font_size+2);ctx.fillRect(this.x2-w/2-1,this.y2-specs.text_font_size/2-1,w+2,specs.text_font_size+2);ctx.textAlign='center';ctx.textBaseline='middle';ctx.fillStyle=specs.backgroundColor;ctx.fillText(label,this.x1,this.y1);ctx.fillText(label,this.x2,this.y2);}};_.getPoints=function(){return[new structures.Point(this.x1,this.y1),new structures.Point(this.x2,this.y2)];};_.isOver=function(p,barrier){if(this.x1){return p.distance({x:this.x1,y:this.y1})<barrier||p.distance({x:this.x2,y:this.y2})<barrier;}return false;};})(ChemDoodle.extensions,ChemDoodle.math,ChemDoodle.structures,ChemDoodle.structures.d2,Math);(function(extensions,math,structures,d2,m,undefined){'use strict';d2.Bracket=function(p1,p2){this.p1=p1?p1:new structures.Point();this.p2=p2?p2:new structures.Point();};var _=d2.Bracket.prototype=new d2._Shape();_.charge=0;_.mult=0;_.repeat=0;_.draw=function(ctx,specs){var minX=m.min(this.p1.x,this.p2.x);var maxX=m.max(this.p1.x,this.p2.x);var minY=m.min(this.p1.y,this.p2.y);var maxY=m.max(this.p1.y,this.p2.y);var h=maxY-minY;var lip=h/10;ctx.beginPath();ctx.moveTo(minX+lip,minY);ctx.lineTo(minX,minY);ctx.lineTo(minX,maxY);ctx.lineTo(minX+lip,maxY);ctx.moveTo(maxX-lip,maxY);ctx.lineTo(maxX,maxY);ctx.lineTo(maxX,minY);ctx.lineTo(maxX-lip,minY);if(this.isLassoed){var grd=ctx.createLinearGradient(this.p1.x,this.p1.y,this.p2.x,this.p2.y);grd.addColorStop(0,'rgba(212, 99, 0, 0)');grd.addColorStop(0.5,'rgba(212, 99, 0, 0.8)');grd.addColorStop(1,'rgba(212, 99, 0, 0)');ctx.lineWidth=specs.shapes_lineWidth+5;ctx.strokeStyle=grd;ctx.lineJoin='miter';ctx.lineCap='square';ctx.stroke();}ctx.strokeStyle=specs.shapes_color;ctx.lineWidth=specs.shapes_lineWidth;ctx.lineJoin='miter';ctx.lineCap='butt';ctx.stroke();if(this.charge!==0){ctx.fillStyle=specs.text_color;ctx.textAlign='left';ctx.textBaseline='alphabetic';ctx.font=extensions.getFontString(specs.text_font_size,specs.text_font_families);var s=this.charge.toFixed(0);if(s==='1'){s='+';}else if(s==='-1'){s=\"\\u2013\";}else if(extensions.stringStartsWith(s,'-')){s=s.substring(1)+\"\\u2013\";}else{s+='+';}ctx.fillText(s,maxX+5,minY+5);}if(this.mult!==0){ctx.fillStyle=specs.text_color;ctx.textAlign='right';ctx.textBaseline='middle';ctx.font=extensions.getFontString(specs.text_font_size,specs.text_font_families);ctx.fillText(this.mult.toFixed(0),minX-5,minY+h/2);}if(this.repeat!==0){ctx.fillStyle=specs.text_color;ctx.textAlign='left';ctx.textBaseline='top';ctx.font=extensions.getFontString(specs.text_font_size,specs.text_font_families);var s=this.repeat.toFixed(0);ctx.fillText(s,maxX+5,maxY-5);}};_.getPoints=function(){return[this.p1,this.p2];};_.isOver=function(p,barrier){return math.isBetween(p.x,this.p1.x,this.p2.x)&&math.isBetween(p.y,this.p1.y,this.p2.y);};})(ChemDoodle.extensions,ChemDoodle.math,ChemDoodle.structures,ChemDoodle.structures.d2,Math);(function(extensions,math,jsb,structures,d2,m,undefined){'use strict';d2.DynamicBracket=function(b1,b2){this.b1=b1;this.b2=b2;this.n1=1;this.n2=4;this.contents=[];this.ps=[];};var _=d2.DynamicBracket.prototype=new d2._Shape();_.drawDecorations=function(ctx,specs){if(this.isHover){for(var i=0,ii=this.contents.length;i<ii;i++){var a=this.contents[i];var grd=ctx.createRadialGradient(a.x-1,a.y-1,0,a.x,a.y,7);grd.addColorStop(0,'rgba(212, 99, 0, 0)');grd.addColorStop(0.7,'rgba(212, 99, 0, 0.8)');ctx.fillStyle=grd;ctx.beginPath();ctx.arc(a.x,a.y,5,0,m.PI*2,false);ctx.fill();}}};var drawEnd=function drawEnd(ctx,specs,b,b2,contents){var ps=[];var stretch=10;var arm=4;var a=contents.length>0?contents.indexOf(b.a1)===-1?b.a2:b.a1:b.a1.distance(b2.getCenter())<b.a2.distance(b2.getCenter())?b.a1:b.a2;var angle=a.angle(b.getNeighbor(a));var perp=angle+m.PI/2;var length=b.getLength()/(contents.length>1?4:2);var psx=a.x+length*m.cos(angle);var psy=a.y-length*m.sin(angle);var scos=stretch*m.cos(perp);var ssin=stretch*m.sin(perp);var p1x=psx+scos;var p1y=psy-ssin;var p2x=psx-scos;var p2y=psy+ssin;var acos=-arm*m.cos(angle);var asin=-arm*m.sin(angle);var p1ax=p1x+acos;var p1ay=p1y-asin;var p2ax=p2x+acos;var p2ay=p2y-asin;ctx.beginPath();ctx.moveTo(p1ax,p1ay);ctx.lineTo(p1x,p1y);ctx.lineTo(p2x,p2y);ctx.lineTo(p2ax,p2ay);ctx.stroke();ps.push(new structures.Point(p1x,p1y));ps.push(new structures.Point(p2x,p2y));return ps;};_.draw=function(ctx,specs){if(this.b1&&this.b2){var color=this.error?specs.colorError:specs.shapes_color;if(this.isHover||this.isSelected){color=this.isHover?specs.colorHover:specs.colorSelect;}ctx.strokeStyle=color;ctx.fillStyle=ctx.strokeStyle;ctx.lineWidth=specs.shapes_lineWidth;ctx.lineJoin='miter';ctx.lineCap='butt';var ps1=drawEnd(ctx,specs,this.b1,this.b2,this.contents);var ps2=drawEnd(ctx,specs,this.b2,this.b1,this.contents);this.ps=ps1.concat(ps2);if(this.b1.getCenter().x>this.b2.getCenter().x){if(this.ps[0].x>this.ps[1].x+5){this.textPos=this.ps[0];}else{this.textPos=this.ps[1];}}else{if(this.ps[2].x>this.ps[3].x+5){this.textPos=this.ps[2];}else{this.textPos=this.ps[3];}}if(!this.error&&this.contents.length>0){ctx.font=extensions.getFontString(specs.text_font_size,specs.text_font_families,specs.text_font_bold,specs.text_font_italic);ctx.fillStyle=this.isHover?specs.colorHover:specs.text_color;ctx.textAlign='left';ctx.textBaseline='bottom';ctx.fillText(this.n1+'-'+this.n2,this.textPos.x+2,this.textPos.y+2);}}};_.getPoints=function(){return this.ps;};_.isOver=function(p,barrier){return false;};_.setContents=function(sketcher){this.contents=[];var m1=sketcher.getMoleculeByAtom(this.b1.a1);var m2=sketcher.getMoleculeByAtom(this.b2.a1);// make sure both b1 and b2 are part of the same molecule\nif(m1&&m1===m2){// if either b1 or b2 is in a ring, then stop, as this is a violation\n// unless b1 and b2 are part of the same ring and are part of no other rings\nvar c1=0;var c2=0;for(var i=0,ii=m1.rings.length;i<ii;i++){var r=m1.rings[i];for(var j=0,jj=r.bonds.length;j<jj;j++){var rb=r.bonds[j];if(rb===this.b1){c1++;}else if(rb===this.b2){c2++;}}}var sameSingleRing=c1===1&&c2===1&&this.b1.ring===this.b2.ring;this.contents.flippable=sameSingleRing;if(this.b1.ring===undefined&&this.b2.ring===undefined||sameSingleRing){for(var i=0,ii=m1.atoms.length;i<ii;i++){var reached1=false;var reached2=false;var reachedInner=false;for(var j=0,jj=m1.bonds.length;j<jj;j++){m1.bonds[j].visited=false;}var q=new structures.Queue();var a=m1.atoms[i];q.enqueue(a);while(!q.isEmpty()&&!(reached1&&reached2)){var check=q.dequeue();if(sameSingleRing&&(!this.flip&&check===this.b1.a1||this.flip&&check===this.b1.a2)){reachedInner=true;}for(var j=0,jj=m1.bonds.length;j<jj;j++){var b=m1.bonds[j];if(b.a1===check||b.a2===check){if(b===this.b1){reached1=true;}else if(b===this.b2){reached2=true;}else if(!b.visited){b.visited=true;q.enqueue(b.getNeighbor(check));}}}}if(reached1&&reached2&&(!sameSingleRing||reachedInner)){this.contents.push(a);}}}}};})(ChemDoodle.extensions,ChemDoodle.math,ChemDoodle.lib.jsBezier,ChemDoodle.structures,ChemDoodle.structures.d2,Math);(function(extensions,math,structures,d2,m,undefined){'use strict';d2.Line=function(p1,p2){this.p1=p1?p1:new structures.Point();this.p2=p2?p2:new structures.Point();};d2.Line.ARROW_SYNTHETIC='synthetic';d2.Line.ARROW_RETROSYNTHETIC='retrosynthetic';d2.Line.ARROW_RESONANCE='resonance';d2.Line.ARROW_EQUILIBRIUM='equilibrium';var _=d2.Line.prototype=new d2._Shape();_.arrowType=undefined;_.topText=undefined;_.bottomText=undefined;_.draw=function(ctx,specs){if(this.isLassoed){var grd=ctx.createLinearGradient(this.p1.x,this.p1.y,this.p2.x,this.p2.y);grd.addColorStop(0,'rgba(212, 99, 0, 0)');grd.addColorStop(0.5,'rgba(212, 99, 0, 0.8)');grd.addColorStop(1,'rgba(212, 99, 0, 0)');var useDist=2.5;var perpendicular=this.p1.angle(this.p2)+m.PI/2;var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);var cx1=this.p1.x-mcosp*useDist;var cy1=this.p1.y+msinp*useDist;var cx2=this.p1.x+mcosp*useDist;var cy2=this.p1.y-msinp*useDist;var cx3=this.p2.x+mcosp*useDist;var cy3=this.p2.y-msinp*useDist;var cx4=this.p2.x-mcosp*useDist;var cy4=this.p2.y+msinp*useDist;ctx.fillStyle=grd;ctx.beginPath();ctx.moveTo(cx1,cy1);ctx.lineTo(cx2,cy2);ctx.lineTo(cx3,cy3);ctx.lineTo(cx4,cy4);ctx.closePath();ctx.fill();}ctx.strokeStyle=specs.shapes_color;ctx.fillStyle=specs.shapes_color;ctx.lineWidth=specs.shapes_lineWidth;ctx.lineJoin='miter';ctx.lineCap='butt';if(this.p1.x!==this.p2.x||this.p1.y!==this.p2.y){// only render if the points are different, otherwise this will\n// cause fill overflows\nif(this.arrowType===d2.Line.ARROW_RETROSYNTHETIC){var r2=m.sqrt(2)*2;var useDist=specs.shapes_arrowLength_2D/r2;var angle=this.p1.angle(this.p2);var perpendicular=angle+m.PI/2;var retract=specs.shapes_arrowLength_2D/r2;var mcosa=m.cos(angle);var msina=m.sin(angle);var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);var cx1=this.p1.x-mcosp*useDist;var cy1=this.p1.y+msinp*useDist;var cx2=this.p1.x+mcosp*useDist;var cy2=this.p1.y-msinp*useDist;var cx3=this.p2.x+mcosp*useDist-mcosa*retract;var cy3=this.p2.y-msinp*useDist+msina*retract;var cx4=this.p2.x-mcosp*useDist-mcosa*retract;var cy4=this.p2.y+msinp*useDist+msina*retract;var ax1=this.p2.x+mcosp*useDist*2-mcosa*retract*2;var ay1=this.p2.y-msinp*useDist*2+msina*retract*2;var ax2=this.p2.x-mcosp*useDist*2-mcosa*retract*2;var ay2=this.p2.y+msinp*useDist*2+msina*retract*2;ctx.beginPath();ctx.moveTo(cx2,cy2);ctx.lineTo(cx3,cy3);ctx.moveTo(ax1,ay1);ctx.lineTo(this.p2.x,this.p2.y);ctx.lineTo(ax2,ay2);ctx.moveTo(cx4,cy4);ctx.lineTo(cx1,cy1);ctx.stroke();}else if(this.arrowType===d2.Line.ARROW_EQUILIBRIUM){var r2=m.sqrt(2)*2;var useDist=specs.shapes_arrowLength_2D/r2/2;var angle=this.p1.angle(this.p2);var perpendicular=angle+m.PI/2;var retract=specs.shapes_arrowLength_2D*2/m.sqrt(3);var mcosa=m.cos(angle);var msina=m.sin(angle);var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);var cx1=this.p1.x-mcosp*useDist;var cy1=this.p1.y+msinp*useDist;var cx2=this.p1.x+mcosp*useDist;var cy2=this.p1.y-msinp*useDist;var cx3=this.p2.x+mcosp*useDist;var cy3=this.p2.y-msinp*useDist;var cx4=this.p2.x-mcosp*useDist;var cy4=this.p2.y+msinp*useDist;ctx.beginPath();ctx.moveTo(cx2,cy2);ctx.lineTo(cx3,cy3);ctx.moveTo(cx4,cy4);ctx.lineTo(cx1,cy1);ctx.stroke();// right arrow\nvar rx1=cx3-mcosa*retract*.8;var ry1=cy3+msina*retract*.8;var ax1=cx3+mcosp*specs.shapes_arrowLength_2D/3-mcosa*retract;var ay1=cy3-msinp*specs.shapes_arrowLength_2D/3+msina*retract;ctx.beginPath();ctx.moveTo(cx3,cy3);ctx.lineTo(ax1,ay1);ctx.lineTo(rx1,ry1);ctx.closePath();ctx.fill();ctx.stroke();// left arrow\nrx1=cx1+mcosa*retract*.8;ry1=cy1-msina*retract*.8;ax1=cx1-mcosp*specs.shapes_arrowLength_2D/3+mcosa*retract;ay1=cy1+msinp*specs.shapes_arrowLength_2D/3-msina*retract;ctx.beginPath();ctx.moveTo(cx1,cy1);ctx.lineTo(ax1,ay1);ctx.lineTo(rx1,ry1);ctx.closePath();ctx.fill();ctx.stroke();}else if(this.arrowType===d2.Line.ARROW_SYNTHETIC){var angle=this.p1.angle(this.p2);var perpendicular=angle+m.PI/2;var retract=specs.shapes_arrowLength_2D*2/m.sqrt(3);var mcosa=m.cos(angle);var msina=m.sin(angle);var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);ctx.beginPath();ctx.moveTo(this.p1.x,this.p1.y);ctx.lineTo(this.p2.x-mcosa*retract/2,this.p2.y+msina*retract/2);ctx.stroke();var rx1=this.p2.x-mcosa*retract*.8;var ry1=this.p2.y+msina*retract*.8;var ax1=this.p2.x+mcosp*specs.shapes_arrowLength_2D/3-mcosa*retract;var ay1=this.p2.y-msinp*specs.shapes_arrowLength_2D/3+msina*retract;var ax2=this.p2.x-mcosp*specs.shapes_arrowLength_2D/3-mcosa*retract;var ay2=this.p2.y+msinp*specs.shapes_arrowLength_2D/3+msina*retract;ctx.beginPath();ctx.moveTo(this.p2.x,this.p2.y);ctx.lineTo(ax2,ay2);ctx.lineTo(rx1,ry1);ctx.lineTo(ax1,ay1);ctx.closePath();ctx.fill();ctx.stroke();}else if(this.arrowType===d2.Line.ARROW_RESONANCE){var angle=this.p1.angle(this.p2);var perpendicular=angle+m.PI/2;var retract=specs.shapes_arrowLength_2D*2/m.sqrt(3);var mcosa=m.cos(angle);var msina=m.sin(angle);var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);ctx.beginPath();ctx.moveTo(this.p1.x+mcosa*retract/2,this.p1.y-msina*retract/2);ctx.lineTo(this.p2.x-mcosa*retract/2,this.p2.y+msina*retract/2);ctx.stroke();// right arrow\nvar rx1=this.p2.x-mcosa*retract*.8;var ry1=this.p2.y+msina*retract*.8;var ax1=this.p2.x+mcosp*specs.shapes_arrowLength_2D/3-mcosa*retract;var ay1=this.p2.y-msinp*specs.shapes_arrowLength_2D/3+msina*retract;var ax2=this.p2.x-mcosp*specs.shapes_arrowLength_2D/3-mcosa*retract;var ay2=this.p2.y+msinp*specs.shapes_arrowLength_2D/3+msina*retract;ctx.beginPath();ctx.moveTo(this.p2.x,this.p2.y);ctx.lineTo(ax2,ay2);ctx.lineTo(rx1,ry1);ctx.lineTo(ax1,ay1);ctx.closePath();ctx.fill();ctx.stroke();// left arrow\nrx1=this.p1.x+mcosa*retract*.8;ry1=this.p1.y-msina*retract*.8;ax1=this.p1.x-mcosp*specs.shapes_arrowLength_2D/3+mcosa*retract;ay1=this.p1.y+msinp*specs.shapes_arrowLength_2D/3-msina*retract;ax2=this.p1.x+mcosp*specs.shapes_arrowLength_2D/3+mcosa*retract;ay2=this.p1.y-msinp*specs.shapes_arrowLength_2D/3-msina*retract;ctx.beginPath();ctx.moveTo(this.p1.x,this.p1.y);ctx.lineTo(ax2,ay2);ctx.lineTo(rx1,ry1);ctx.lineTo(ax1,ay1);ctx.closePath();ctx.fill();ctx.stroke();}else{ctx.beginPath();ctx.moveTo(this.p1.x,this.p1.y);ctx.lineTo(this.p2.x,this.p2.y);ctx.stroke();}if(this.topText||this.bottomText){ctx.font=extensions.getFontString(specs.text_font_size,specs.text_font_families,specs.text_font_bold,specs.text_font_italic);ctx.fillStyle=specs.text_color;}if(this.topText){ctx.textAlign='center';ctx.textBaseline='bottom';ctx.fillText(this.topText,(this.p1.x+this.p2.x)/2,this.p1.y-5);}if(this.bottomText){ctx.textAlign='center';ctx.textBaseline='top';ctx.fillText(this.bottomText,(this.p1.x+this.p2.x)/2,this.p1.y+5);}}};_.getPoints=function(){return[this.p1,this.p2];};_.isOver=function(p,barrier){var dist=math.distanceFromPointToLineInclusive(p,this.p1,this.p2);return dist!==-1&&dist<barrier;};})(ChemDoodle.extensions,ChemDoodle.math,ChemDoodle.structures,ChemDoodle.structures.d2,Math);(function(math,jsb,structures,d2,m,undefined){'use strict';var getPossibleAngles=function getPossibleAngles(o){var as=[];if(o instanceof structures.Atom){if(o.bondNumber===0){as.push(m.PI);}else if(o.angles){if(o.angles.length===1){as.push(o.angles[0]+m.PI);}else{for(var i=1,ii=o.angles.length;i<ii;i++){as.push(o.angles[i-1]+(o.angles[i]-o.angles[i-1])/2);}var firstIncreased=o.angles[0]+m.PI*2;var last=o.angles[o.angles.length-1];as.push(last+(firstIncreased-last)/2);}if(o.largestAngle>m.PI){// always use angle of least interfearence if it is greater\n// than 120\nas=[o.angleOfLeastInterference];}if(o.bonds){// point up towards a carbonyl\nfor(var i=0,ii=o.bonds.length;i<ii;i++){var b=o.bonds[i];if(b.bondOrder===2){var n=b.getNeighbor(o);if(n.label==='O'){as=[n.angle(o)];break;}}}}}}else{var angle=o.a1.angle(o.a2);as.push(angle+m.PI/2);as.push(angle+3*m.PI/2);}for(var i=0,ii=as.length;i<ii;i++){while(as[i]>m.PI*2){as[i]-=m.PI*2;}while(as[i]<0){as[i]+=m.PI*2;}}return as;};var getPullBack=function getPullBack(o,specs){var pullback=3;if(o instanceof structures.Atom){if(o.isLabelVisible(specs)){pullback=8;}if(o.charge!==0||o.numRadical!==0||o.numLonePair!==0){pullback=13;}}else if(o instanceof structures.Point){// this is the midpoint of a bond forming pusher\npullback=0;}else{if(o.bondOrder>1){pullback=5;}}return pullback;};var drawPusher=function drawPusher(ctx,specs,o1,o2,p1,c1,c2,p2,numElectron,caches){var angle1=c1.angle(p1);var angle2=c2.angle(p2);var mcosa=m.cos(angle1);var msina=m.sin(angle1);// pull back from start\nvar pullBack=getPullBack(o1,specs);p1.x-=mcosa*pullBack;p1.y+=msina*pullBack;// arrow\nvar perpendicular=angle2+m.PI/2;var retract=specs.shapes_arrowLength_2D*2/m.sqrt(3);var mcosa=m.cos(angle2);var msina=m.sin(angle2);var mcosp=m.cos(perpendicular);var msinp=m.sin(perpendicular);p2.x-=mcosa*5;p2.y+=msina*5;var nap=new structures.Point(p2.x,p2.y);// pull back from end\npullBack=getPullBack(o2,specs)/3;nap.x-=mcosa*pullBack;nap.y+=msina*pullBack;p2.x-=mcosa*(retract*0.8+pullBack);p2.y+=msina*(retract*0.8+pullBack);var rx1=nap.x-mcosa*retract*0.8;var ry1=nap.y+msina*retract*0.8;var a1=new structures.Point(nap.x+mcosp*specs.shapes_arrowLength_2D/3-mcosa*retract,nap.y-msinp*specs.shapes_arrowLength_2D/3+msina*retract);var a2=new structures.Point(nap.x-mcosp*specs.shapes_arrowLength_2D/3-mcosa*retract,nap.y+msinp*specs.shapes_arrowLength_2D/3+msina*retract);var include1=true,include2=true;if(numElectron===1){if(a1.distance(c1)>a2.distance(c1)){include2=false;}else{include1=false;}}ctx.beginPath();ctx.moveTo(nap.x,nap.y);if(include2){ctx.lineTo(a2.x,a2.y);}ctx.lineTo(rx1,ry1);if(include1){ctx.lineTo(a1.x,a1.y);}ctx.closePath();ctx.fill();ctx.stroke();// bezier\nctx.beginPath();ctx.moveTo(p1.x,p1.y);ctx.bezierCurveTo(c1.x,c1.y,c2.x,c2.y,p2.x,p2.y);ctx.stroke();caches.push([p1,c1,c2,p2]);};d2.Pusher=function(o1,o2,numElectron){this.o1=o1;this.o2=o2;this.numElectron=numElectron?numElectron:1;};var _=d2.Pusher.prototype=new d2._Shape();_.drawDecorations=function(ctx,specs){if(this.isHover){var p1=this.o1 instanceof structures.Atom?new structures.Point(this.o1.x,this.o1.y):this.o1.getCenter();var p2=this.o2 instanceof structures.Atom?new structures.Point(this.o2.x,this.o2.y):this.o2.getCenter();var ps=[p1,p2];for(var i=0,ii=ps.length;i<ii;i++){var p=ps[i];this.drawAnchor(ctx,specs,p,p===this.hoverPoint);}}};_.draw=function(ctx,specs){if(this.o1&&this.o2){ctx.strokeStyle=specs.shapes_color;ctx.fillStyle=specs.shapes_color;ctx.lineWidth=specs.shapes_lineWidth;ctx.lineJoin='miter';ctx.lineCap='butt';var p1=this.o1 instanceof structures.Atom?new structures.Point(this.o1.x,this.o1.y):this.o1.getCenter();var p2=this.o2 instanceof structures.Atom?new structures.Point(this.o2.x,this.o2.y):this.o2.getCenter();var controlDist=35;var as1=getPossibleAngles(this.o1);var as2=getPossibleAngles(this.o2);var c1,c2;var minDif=Infinity;for(var i=0,ii=as1.length;i<ii;i++){for(var j=0,jj=as2.length;j<jj;j++){var c1c=new structures.Point(p1.x+controlDist*m.cos(as1[i]),p1.y-controlDist*m.sin(as1[i]));var c2c=new structures.Point(p2.x+controlDist*m.cos(as2[j]),p2.y-controlDist*m.sin(as2[j]));var dif=c1c.distance(c2c);if(dif<minDif){minDif=dif;c1=c1c;c2=c2c;}}}this.caches=[];if(this.numElectron===-1){var dist=p1.distance(p2)/2;var angle=p1.angle(p2);var perp=angle+m.PI/2;var mcosa=m.cos(angle);var msina=m.sin(angle);var m1=new structures.Point(p1.x+(dist-1)*mcosa,p1.y-(dist-1)*msina);var cm1=new structures.Point(m1.x+m.cos(perp+m.PI/6)*controlDist,m1.y-m.sin(perp+m.PI/6)*controlDist);var m2=new structures.Point(p1.x+(dist+1)*mcosa,p1.y-(dist+1)*msina);var cm2=new structures.Point(m2.x+m.cos(perp-m.PI/6)*controlDist,m2.y-m.sin(perp-m.PI/6)*controlDist);drawPusher(ctx,specs,this.o1,m1,p1,c1,cm1,m1,1,this.caches);drawPusher(ctx,specs,this.o2,m2,p2,c2,cm2,m2,1,this.caches);}else{if(math.intersectLines(p1.x,p1.y,c1.x,c1.y,p2.x,p2.y,c2.x,c2.y)){var tmp=c1;c1=c2;c2=tmp;}// try to clean up problems, like loops\nvar angle1=c1.angle(p1);var angle2=c2.angle(p2);var angleDif=m.max(angle1,angle2)-m.min(angle1,angle2);if(m.abs(angleDif-m.PI)<.001&&this.o1.molCenter===this.o2.molCenter){// in the case where the control tangents are parallel\nangle1+=m.PI/2;angle2-=m.PI/2;c1.x=p1.x+controlDist*m.cos(angle1+m.PI);c1.y=p1.y-controlDist*m.sin(angle1+m.PI);c2.x=p2.x+controlDist*m.cos(angle2+m.PI);c2.y=p2.y-controlDist*m.sin(angle2+m.PI);}drawPusher(ctx,specs,this.o1,this.o2,p1,c1,c2,p2,this.numElectron,this.caches);}}};_.getPoints=function(){return[];};_.isOver=function(p,barrier){for(var i=0,ii=this.caches.length;i<ii;i++){var r=jsb.distanceFromCurve(p,this.caches[i]);if(r.distance<barrier){return true;}}return false;};})(ChemDoodle.math,ChemDoodle.lib.jsBezier,ChemDoodle.structures,ChemDoodle.structures.d2,Math);(function(math,structures,d2,m,undefined){'use strict';var BOND=new structures.Bond();d2.VAP=function(x,y){this.asterisk=new structures.Atom('O',x,y);this.substituent;this.bondType=1;this.attachments=[];};var _=d2.VAP.prototype=new d2._Shape();_.drawDecorations=function(ctx,specs){if(this.isHover||this.isSelected){ctx.strokeStyle=this.isHover?specs.colorHover:specs.colorSelect;ctx.lineWidth=1.2;var radius=7;if(this.hoverBond){var pi2=2*m.PI;var angle=(this.asterisk.angleForStupidCanvasArcs(this.hoverBond)+m.PI/2)%pi2;ctx.strokeStyle=this.isHover?specs.colorHover:specs.colorSelect;ctx.beginPath();var angleTo=(angle+m.PI)%pi2;angleTo=angleTo%(m.PI*2);ctx.arc(this.asterisk.x,this.asterisk.y,radius,angle,angleTo,false);ctx.stroke();ctx.beginPath();angle+=m.PI;angleTo=(angle+m.PI)%pi2;ctx.arc(this.hoverBond.x,this.hoverBond.y,radius,angle,angleTo,false);ctx.stroke();}else{ctx.beginPath();ctx.arc(this.asterisk.x,this.asterisk.y,radius,0,m.PI*2,false);ctx.stroke();}}};_.draw=function(ctx,specs){// asterisk\nctx.strokeStyle=this.error?specs.colorError:specs.shapes_color;ctx.lineWidth=1;var length=4;var sqrt3=m.sqrt(3)/2;ctx.beginPath();ctx.moveTo(this.asterisk.x,this.asterisk.y-length);ctx.lineTo(this.asterisk.x,this.asterisk.y+length);ctx.moveTo(this.asterisk.x-sqrt3*length,this.asterisk.y-length/2);ctx.lineTo(this.asterisk.x+sqrt3*length,this.asterisk.y+length/2);ctx.moveTo(this.asterisk.x-sqrt3*length,this.asterisk.y+length/2);ctx.lineTo(this.asterisk.x+sqrt3*length,this.asterisk.y-length/2);ctx.stroke();this.asterisk.textBounds=[];this.asterisk.textBounds.push({x:this.asterisk.x-length,y:this.asterisk.y-length,w:length*2,h:length*2});var bcsave=specs.bonds_color;if(this.error){specs.bonds_color=specs.colorError;}BOND.a1=this.asterisk;// substituent bond\nif(this.substituent){BOND.a2=this.substituent;BOND.bondOrder=this.bondType;BOND.draw(ctx,specs);}// attachment bonds\nBOND.bondOrder=0;if(!this.error){specs.bonds_color=specs.shapes_color;}for(var i=0,ii=this.attachments.length;i<ii;i++){BOND.a2=this.attachments[i];BOND.draw(ctx,specs);}specs.bonds_color=bcsave;};_.getPoints=function(){return[this.asterisk];};_.isOver=function(p,barrier){return false;};})(ChemDoodle.math,ChemDoodle.structures,ChemDoodle.structures.d2,Math);(function(d3,m,undefined){'use strict';d3._Mesh=function(){};var _=d3._Mesh.prototype;_.storeData=function(positionData,normalData,indexData){this.positionData=positionData;this.normalData=normalData;this.indexData=indexData;};_.setupBuffers=function(gl){this.vertexPositionBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexPositionBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(this.positionData),gl.STATIC_DRAW);this.vertexPositionBuffer.itemSize=3;this.vertexPositionBuffer.numItems=this.positionData.length/3;this.vertexNormalBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexNormalBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(this.normalData),gl.STATIC_DRAW);this.vertexNormalBuffer.itemSize=3;this.vertexNormalBuffer.numItems=this.normalData.length/3;if(this.indexData){this.vertexIndexBuffer=gl.createBuffer();gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.vertexIndexBuffer);gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(this.indexData),gl.STATIC_DRAW);this.vertexIndexBuffer.itemSize=1;this.vertexIndexBuffer.numItems=this.indexData.length;}if(this.partitions){for(var i=0,ii=this.partitions.length;i<ii;i++){var p=this.partitions[i];var buffers=this.generateBuffers(gl,p.positionData,p.normalData,p.indexData);p.vertexPositionBuffer=buffers[0];p.vertexNormalBuffer=buffers[1];p.vertexIndexBuffer=buffers[2];}}};_.generateBuffers=function(gl,positionData,normalData,indexData){var vertexPositionBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vertexPositionBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(positionData),gl.STATIC_DRAW);vertexPositionBuffer.itemSize=3;vertexPositionBuffer.numItems=positionData.length/3;var vertexNormalBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,vertexNormalBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(normalData),gl.STATIC_DRAW);vertexNormalBuffer.itemSize=3;vertexNormalBuffer.numItems=normalData.length/3;var vertexIndexBuffer;if(indexData){vertexIndexBuffer=gl.createBuffer();gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,vertexIndexBuffer);gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(indexData),gl.STATIC_DRAW);vertexIndexBuffer.itemSize=1;vertexIndexBuffer.numItems=indexData.length;}return[vertexPositionBuffer,vertexNormalBuffer,vertexIndexBuffer];};_.bindBuffers=function(gl){if(!this.vertexPositionBuffer){this.setupBuffers(gl);}// positions\ngl.bindBuffer(gl.ARRAY_BUFFER,this.vertexPositionBuffer);gl.vertexAttribPointer(gl.shader.vertexPositionAttribute,this.vertexPositionBuffer.itemSize,gl.FLOAT,false,0,0);// normals\ngl.bindBuffer(gl.ARRAY_BUFFER,this.vertexNormalBuffer);gl.vertexAttribPointer(gl.shader.vertexNormalAttribute,this.vertexNormalBuffer.itemSize,gl.FLOAT,false,0,0);if(this.vertexIndexBuffer){// indexes\ngl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.vertexIndexBuffer);}};})(ChemDoodle.structures.d3,Math);(function(d3,undefined){'use strict';d3._Measurement=function(){};var _=d3._Measurement.prototype=new d3._Mesh();_.render=function(gl,specs){gl.shader.setMatrixUniforms(gl);// setting the vertex position buffer to undefined resets the buffers, so this shape can be dynamically updated with the molecule\nif(specs.measurement_update_3D){this.vertexPositionBuffer=undefined;this.text=undefined;}if(!this.vertexPositionBuffer){this.calculateData(specs);}this.bindBuffers(gl);// colors\ngl.material.setDiffuseColor(gl,specs.shapes_color);gl.lineWidth(specs.shapes_lineWidth);// render\ngl.drawElements(gl.LINES,this.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);};_.renderText=function(gl,specs){gl.shader.setMatrixUniforms(gl);// render the text\nif(!this.text){this.text=this.getText(specs);}var vertexData={position:[],texCoord:[],translation:[]};gl.textImage.pushVertexData(this.text.value,this.text.pos,1,vertexData);gl.textMesh.storeData(gl,vertexData.position,vertexData.texCoord,vertexData.translation);gl.textImage.useTexture(gl);gl.textMesh.render(gl);};})(ChemDoodle.structures.d3);(function(ELEMENT,extensions,d3,math,m,m4,v3,undefined){'use strict';d3.Angle=function(a1,a2,a3){this.a1=a1;this.a2=a2;this.a3=a3;};var _=d3.Angle.prototype=new d3._Measurement();_.calculateData=function(specs){var positionData=[];var normalData=[];var indexData=[];var dist1=this.a2.distance3D(this.a1);var dist2=this.a2.distance3D(this.a3);this.distUse=m.min(dist1,dist2)/2;// data for the angle\nthis.vec1=v3.normalize([this.a1.x-this.a2.x,this.a1.y-this.a2.y,this.a1.z-this.a2.z]);this.vec2=v3.normalize([this.a3.x-this.a2.x,this.a3.y-this.a2.y,this.a3.z-this.a2.z]);this.angle=extensions.vec3AngleFrom(this.vec1,this.vec2);var axis=v3.normalize(v3.cross(this.vec1,this.vec2,[]));var vec3=v3.normalize(v3.cross(axis,this.vec1,[]));var bands=specs.measurement_angleBands_3D;for(var i=0;i<=bands;++i){var theta=this.angle*i/bands;var vecCos=v3.scale(this.vec1,m.cos(theta),[]);var vecSin=v3.scale(vec3,m.sin(theta),[]);var norm=v3.scale(v3.normalize(v3.add(vecCos,vecSin,[])),this.distUse);positionData.push(this.a2.x+norm[0],this.a2.y+norm[1],this.a2.z+norm[2]);normalData.push(0,0,0);if(i<bands){indexData.push(i,i+1);}}this.storeData(positionData,normalData,indexData);};_.getText=function(specs){var vecCenter=v3.scale(v3.normalize(v3.add(this.vec1,this.vec2,[])),this.distUse+0.3);return{pos:[this.a2.x+vecCenter[0],this.a2.y+vecCenter[1],this.a2.z+vecCenter[2]],value:[math.angleBounds(this.angle,true).toFixed(2),\" \\xB0\"].join('')};};})(ChemDoodle.ELEMENT,ChemDoodle.extensions,ChemDoodle.structures.d3,ChemDoodle.math,Math,ChemDoodle.lib.mat4,ChemDoodle.lib.vec3);(function(d3,m,undefined){'use strict';d3.Arrow=function(radius,longitudeBands){var positionData=[];var normalData=[];for(var longNumber=0;longNumber<=longitudeBands;longNumber++){var theta=longNumber*2*m.PI/longitudeBands;var sinTheta=m.sin(theta);var cosTheta=m.cos(theta);var x=cosTheta;var y=sinTheta;normalData.push(// base cylinder\n0,0,-1,0,0,-1,// cylinder\nx,y,0,x,y,0,// base cone\n0,0,-1,0,0,-1,// cone\nx,y,1,x,y,1);positionData.push(// base cylinder\n0,0,0,radius*x,radius*y,0,// cylinder\nradius*x,radius*y,0,radius*x,radius*y,2,// base cone\nradius*x,radius*y,2,radius*x*2,radius*y*2,2,// cone\nradius*x*2,radius*y*2,2,0,0,3);}var indexData=[];for(var i=0;i<longitudeBands;i++){var offset=i*8;for(var j=0,jj=7;j<jj;j++){var first=j+offset;var second=first+1;var third=first+jj+2;var forth=third-1;indexData.push(first,third,second,third,first,forth);}}this.storeData(positionData,normalData,indexData);};d3.Arrow.prototype=new d3._Mesh();})(ChemDoodle.structures.d3,Math);(function(d3,m,undefined){'use strict';d3.Box=function(width,height,depth){width/=2;depth/=2;var positionData=[];var normalData=[];// top\npositionData.push(width,height,-depth);positionData.push(width,height,-depth);positionData.push(-width,height,-depth);positionData.push(width,height,depth);positionData.push(-width,height,depth);positionData.push(-width,height,depth);for(var i=6;i--;normalData.push(0,1,0)){;}// front\npositionData.push(-width,height,depth);positionData.push(-width,height,depth);positionData.push(-width,0,depth);positionData.push(width,height,depth);positionData.push(width,0,depth);positionData.push(width,0,depth);for(var i=6;i--;normalData.push(0,0,1)){;}// right\npositionData.push(width,height,depth);positionData.push(width,height,depth);positionData.push(width,0,depth);positionData.push(width,height,-depth);positionData.push(width,0,-depth);positionData.push(width,0,-depth);for(var i=6;i--;normalData.push(1,0,0)){;}// back\npositionData.push(width,height,-depth);positionData.push(width,height,-depth);positionData.push(width,0,-depth);positionData.push(-width,height,-depth);positionData.push(-width,0,-depth);positionData.push(-width,0,-depth);for(var i=6;i--;normalData.push(0,0,-1)){;}// left\npositionData.push(-width,height,-depth);positionData.push(-width,height,-depth);positionData.push(-width,0,-depth);positionData.push(-width,height,depth);positionData.push(-width,0,depth);positionData.push(-width,0,depth);for(var i=6;i--;normalData.push(-1,0,0)){;}// bottom\npositionData.push(-width,0,depth);positionData.push(-width,0,depth);positionData.push(-width,0,-depth);positionData.push(width,0,depth);positionData.push(width,0,-depth);positionData.push(width,0,-depth);for(var i=6;i--;normalData.push(0,-1,0)){;}this.storeData(positionData,normalData);};d3.Box.prototype=new d3._Mesh();})(ChemDoodle.structures.d3,Math);(function(math,d3,v3,m4,m,undefined){'use strict';d3.Camera=function(){this.fieldOfView=45;this.aspect=1;this.near=0.1;this.far=10000;this.zoom=1;this.viewMatrix=m4.identity([]);this.projectionMatrix=m4.identity([]);};var _=d3.Camera.prototype;_.perspectiveProjectionMatrix=function(){var top=m.tan(this.fieldOfView/360*m.PI)*this.near*this.zoom;var right=this.aspect*top;return m4.frustum(-right,right,-top,top,this.near,this.far,this.projectionMatrix);};_.orthogonalProjectionMatrix=function(){var top=m.tan(this.fieldOfView/360*m.PI)*((this.far-this.near)/2+this.near)*this.zoom;var right=this.aspect*top;return m4.ortho(-right,right,-top,top,this.near,this.far,this.projectionMatrix);};_.updateProjectionMatrix=function(isPerspective){return isPerspective?this.perspectiveProjectionMatrix():this.orthogonalProjectionMatrix();};_.focalLength=function(){return(this.far-this.near)/2+this.near;};_.zoomIn=function(){this.zoom=m.min(this.zoom*1.25,200);};_.zoomOut=function(){this.zoom=m.max(this.zoom/1.25,1/400);};})(ChemDoodle.math,ChemDoodle.structures.d3,ChemDoodle.lib.vec3,ChemDoodle.lib.mat4,window.Math);(function(d3,m,m4,undefined){'use strict';d3.LineArrow=function(){var d=2.8;var w=0.1;this.storeData([0,0,-3,w,0,-d,0,0,-3,-w,0,-d,0,0,-3,0,0,3,0,0,3,w,0,d,0,0,3,-w,0,d],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);};d3.LineArrow.prototype=new d3._Mesh();d3.Compass=function(gl,specs){// setup text X Y Z\nthis.textImage=new d3.TextImage();this.textImage.init(gl);this.textImage.updateFont(gl,specs.text_font_size,specs.text_font_families,specs.text_font_bold,specs.text_font_italic,specs.text_font_stroke_3D);this.textMesh=new d3.TextMesh();this.textMesh.init(gl);var screenRatioHeight=specs.compass_size_3D/gl.canvas.clientHeight;var height=3/screenRatioHeight;var tanTheta=m.tan(specs.projectionPerspectiveVerticalFieldOfView_3D/360*m.PI);var depth=height/tanTheta;var near=m.max(depth-height,0.1);var far=depth+height;var aspec=gl.canvas.clientWidth/gl.canvas.clientHeight;var fnProjection,z;if(specs.projectionPerspective_3D){z=near;fnProjection=m4.frustum;}else{z=depth;fnProjection=m4.ortho;}var nearRatio=z/gl.canvas.clientHeight*2*tanTheta;var top=tanTheta*z;var bottom=-top;var left=aspec*bottom;var right=aspec*top;if(specs.compass_type_3D===0){var deltaX=-(gl.canvas.clientWidth-specs.compass_size_3D)/2+this.textImage.charHeight;var deltaY=-(gl.canvas.clientHeight-specs.compass_size_3D)/2+this.textImage.charHeight;var x=deltaX*nearRatio;var y=deltaY*nearRatio;left-=x;right-=x;bottom-=y;top-=y;}this.projectionMatrix=fnProjection(left,right,bottom,top,near,far);this.translationMatrix=m4.translate(m4.identity([]),[0,0,-depth]);// vertex data for X Y Z text label\nvar vertexData={position:[],texCoord:[],translation:[]};// it need to auto calculated somehow\nvar textPos=3.5;this.textImage.pushVertexData('X',[textPos,0,0],0,vertexData);this.textImage.pushVertexData('Y',[0,textPos,0],0,vertexData);this.textImage.pushVertexData('Z',[0,0,textPos],0,vertexData);this.textMesh.storeData(gl,vertexData.position,vertexData.texCoord,vertexData.translation);};var _=d3.Compass.prototype;_.renderArrow=function(gl,type,color,mvMatrix){gl.material.setDiffuseColor(gl,color);gl.shader.setModelViewMatrix(gl,mvMatrix);if(type===1){gl.drawArrays(gl.LINES,0,gl.lineArrowBuffer.vertexPositionBuffer.numItems);}else{gl.drawElements(gl.TRIANGLES,gl.arrowBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}};_.render=function(gl,specs){gl.shader.setProjectionMatrix(gl,this.projectionMatrix);specs.compass_type_3D===1?gl.lineArrowBuffer.bindBuffers(gl):gl.arrowBuffer.bindBuffers(gl);gl.material.setTempColors(gl,specs.bonds_materialAmbientColor_3D,undefined,specs.bonds_materialSpecularColor_3D,specs.bonds_materialShininess_3D);var modelMatrix=m4.multiply(this.translationMatrix,gl.rotationMatrix,[]);var angle=m.PI/2;// x - axis\nthis.renderArrow(gl,specs.compass_type_3D,specs.compass_axisXColor_3D,m4.rotateY(modelMatrix,angle,[]));// y - axis\nthis.renderArrow(gl,specs.compass_type_3D,specs.compass_axisYColor_3D,m4.rotateX(modelMatrix,-angle,[]));// z - axis\nthis.renderArrow(gl,specs.compass_type_3D,specs.compass_axisZColor_3D,modelMatrix);};_.renderAxis=function(gl){gl.shader.setProjectionMatrix(gl,this.projectionMatrix);var mvMatrix=m4.multiply(this.translationMatrix,gl.rotationMatrix,[]);gl.shader.setModelViewMatrix(gl,mvMatrix);this.textImage.useTexture(gl);this.textMesh.render(gl);};})(ChemDoodle.structures.d3,Math,ChemDoodle.lib.mat4);(function(d3,m,undefined){'use strict';d3.Cylinder=function(radius,height,bands,closed){var positionData=[];var normalData=[];if(closed){for(var i=0;i<=bands;i++){var theta=i%bands*2*m.PI/bands;var cosTheta=m.cos(theta);var sinTheta=m.sin(theta);normalData.push(0,-1,0);positionData.push(0,0,0);normalData.push(0,-1,0);positionData.push(radius*cosTheta,0,radius*sinTheta);}for(var i=0;i<=bands;i++){var theta=i%bands*2*m.PI/bands;var cosTheta=m.cos(theta);var sinTheta=m.sin(theta);normalData.push(cosTheta,0,sinTheta);positionData.push(radius*cosTheta,0,radius*sinTheta);normalData.push(cosTheta,0,sinTheta);positionData.push(radius*cosTheta,height,radius*sinTheta);}for(var i=0;i<=bands;i++){var theta=i%bands*2*m.PI/bands;var cosTheta=m.cos(theta);var sinTheta=m.sin(theta);normalData.push(0,1,0);positionData.push(radius*cosTheta,height,radius*sinTheta);normalData.push(0,1,0);positionData.push(0,height,0);}}else{for(var i=0;i<bands;i++){var theta=i*2*m.PI/bands;var cosTheta=m.cos(theta);var sinTheta=m.sin(theta);normalData.push(cosTheta,0,sinTheta);positionData.push(radius*cosTheta,0,radius*sinTheta);normalData.push(cosTheta,0,sinTheta);positionData.push(radius*cosTheta,height,radius*sinTheta);}normalData.push(1,0,0);positionData.push(radius,0,0);normalData.push(1,0,0);positionData.push(radius,height,0);}this.storeData(positionData,normalData);};d3.Cylinder.prototype=new d3._Mesh();})(ChemDoodle.structures.d3,Math);(function(ELEMENT,d3,m,v3,undefined){'use strict';d3.Distance=function(a1,a2,node,offset){this.a1=a1;this.a2=a2;this.node=node;this.offset=offset?offset:0;};var _=d3.Distance.prototype=new d3._Measurement();_.calculateData=function(specs){var positionData=[this.a1.x,this.a1.y,this.a1.z,this.a2.x,this.a2.y,this.a2.z];if(this.node){var r1=specs.atoms_useVDWDiameters_3D?ELEMENT[this.a1.label].vdWRadius*specs.atoms_vdwMultiplier_3D:specs.atoms_sphereDiameter_3D/2;var r2=specs.atoms_useVDWDiameters_3D?ELEMENT[this.a2.label].vdWRadius*specs.atoms_vdwMultiplier_3D:specs.atoms_sphereDiameter_3D/2;this.move=this.offset+m.max(r1,r2);this.displacement=[(this.a1.x+this.a2.x)/2-this.node.x,(this.a1.y+this.a2.y)/2-this.node.y,(this.a1.z+this.a2.z)/2-this.node.z];v3.normalize(this.displacement);var change=v3.scale(this.displacement,this.move,[]);positionData[0]+=change[0];positionData[1]+=change[1];positionData[2]+=change[2];positionData[3]+=change[0];positionData[4]+=change[1];positionData[5]+=change[2];}var normalData=[0,0,0,0,0,0];var indexData=[0,1];this.storeData(positionData,normalData,indexData);};_.getText=function(specs){var dist=this.a1.distance3D(this.a2);var center=[(this.a1.x+this.a2.x)/2,(this.a1.y+this.a2.y)/2,(this.a1.z+this.a2.z)/2];if(this.node){var change=v3.scale(this.displacement,this.move+.1,[]);center[0]+=change[0];center[1]+=change[1];center[2]+=change[2];}return{pos:center,value:[dist.toFixed(2),\" \\u212B\"].join('')};};})(ChemDoodle.ELEMENT,ChemDoodle.structures.d3,Math,ChemDoodle.lib.vec3);(function(math,d3,v3,undefined){'use strict';d3.Fog=function(color,fogStart,fogEnd,density){this.fogScene(color,fogStart,fogEnd,density);};var _=d3.Fog.prototype;_.fogScene=function(color,fogStart,fogEnd,density){this.colorRGB=math.getRGB(color,1);this.fogStart=fogStart;this.fogEnd=fogEnd;this.density=density;};})(ChemDoodle.math,ChemDoodle.structures.d3,ChemDoodle.lib.vec3);(function(ELEMENT,d3,undefined){d3.Label=function(textImage){};var _=d3.Label.prototype;_.updateVerticesBuffer=function(gl,molecules,specs){for(var i=0,ii=molecules.length;i<ii;i++){var molecule=molecules[i];var moleculeLabel=molecule.labelMesh;var atoms=molecule.atoms;var vertexData={position:[],texCoord:[],translation:[]};var isMacro=atoms.length>0&&atoms[0].hetatm!=undefined;for(var j=0,jj=atoms.length;j<jj;j++){var atom=atoms[j];var atomLabel=atom.label;var zDepth=0.05;// Sphere or Ball and Stick\nif(specs.atoms_useVDWDiameters_3D){var add=ELEMENT[atomLabel].vdWRadius*specs.atoms_vdwMultiplier_3D;if(add===0){add=1;}zDepth+=add;}// if Stick or Wireframe\nelse if(specs.atoms_sphereDiameter_3D){zDepth+=specs.atoms_sphereDiameter_3D/2*1.5;}if(isMacro){if(!atom.hetatm){if(!specs.macro_displayAtoms){continue;}}else if(atom.isWater){if(!specs.macro_showWaters){continue;}}}gl.textImage.pushVertexData(atom.altLabel?atom.altLabel:atom.label,[atom.x,atom.y,atom.z],zDepth,vertexData);}var chains=molecule.chains;if(chains&&(specs.proteins_displayRibbon||specs.proteins_displayBackbone)){for(var j=0,jj=chains.length;j<jj;j++){var chain=chains[j];for(var k=0,kk=chain.length;k<kk;k++){var residue=chain[k];if(residue.name){var atom=residue.cp1;gl.textImage.pushVertexData(residue.name,[atom.x,atom.y,atom.z],2,vertexData);}}}}moleculeLabel.storeData(gl,vertexData.position,vertexData.texCoord,vertexData.translation,vertexData.zDepth);}};_.render=function(gl,specs,molecules){// use projection for shader text.\ngl.shader.setMatrixUniforms(gl);gl.textImage.useTexture(gl);for(var i=0,ii=molecules.length;i<ii;i++){if(molecules[i].labelMesh){molecules[i].labelMesh.render(gl);}}};})(ChemDoodle.ELEMENT,ChemDoodle.structures.d3);(function(d3,m,undefined){'use strict';d3.Sphere=function(radius,latitudeBands,longitudeBands){var positionData=[];var normalData=[];for(var latNumber=0;latNumber<=latitudeBands;latNumber++){var theta=latNumber*m.PI/latitudeBands;var sinTheta=m.sin(theta);var cosTheta=m.cos(theta);for(var longNumber=0;longNumber<=longitudeBands;longNumber++){var phi=longNumber*2*m.PI/longitudeBands;var sinPhi=m.sin(phi);var cosPhi=m.cos(phi);var x=cosPhi*sinTheta;var y=cosTheta;var z=sinPhi*sinTheta;normalData.push(x,y,z);positionData.push(radius*x,radius*y,radius*z);}}var indexData=[];longitudeBands+=1;for(var latNumber=0;latNumber<latitudeBands;latNumber++){for(var longNumber=0;longNumber<longitudeBands;longNumber++){var first=latNumber*longitudeBands+longNumber%longitudeBands;var second=first+longitudeBands;indexData.push(first,first+1,second);if(longNumber<longitudeBands-1){indexData.push(second,first+1,second+1);}}}this.storeData(positionData,normalData,indexData);};d3.Sphere.prototype=new d3._Mesh();})(ChemDoodle.structures.d3,Math);(function(RESIDUE,d3,m,v3,undefined){'use strict';var loadPartition=function loadPartition(gl,p){// positions\ngl.bindBuffer(gl.ARRAY_BUFFER,p.vertexPositionBuffer);gl.vertexAttribPointer(gl.shader.vertexPositionAttribute,p.vertexPositionBuffer.itemSize,gl.FLOAT,false,0,0);// normals\ngl.bindBuffer(gl.ARRAY_BUFFER,p.vertexNormalBuffer);gl.vertexAttribPointer(gl.shader.vertexNormalAttribute,p.vertexNormalBuffer.itemSize,gl.FLOAT,false,0,0);// indexes\ngl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,p.vertexIndexBuffer);};function SubRibbon(entire,name,indexes,pi){this.entire=entire;this.name=name;this.indexes=indexes;this.pi=pi;}var _2=SubRibbon.prototype;// NOTE: To use rainbow coloring for chains, it needs coloring each residue with total residue count\n// and current index residue in chain parameters.\n_2.getColor=function(specs){if(specs.macro_colorByChain){return this.entire.chainColor;}else if(this.name){return this.getResidueColor(RESIDUE[this.name]?this.name:'*',specs);}else if(this.helix){return this.entire.front?specs.proteins_ribbonCartoonHelixPrimaryColor:specs.proteins_ribbonCartoonHelixSecondaryColor;}else if(this.sheet){return specs.proteins_ribbonCartoonSheetColor;}else{return this.entire.front?specs.proteins_primaryColor:specs.proteins_secondaryColor;}};_2.getResidueColor=function(name,specs){var r=RESIDUE[name];if(specs.proteins_residueColor==='shapely'){return r.shapelyColor;}else if(specs.proteins_residueColor==='amino'){return r.aminoColor;}else if(specs.proteins_residueColor==='polarity'){if(r.polar){return'#C10000';}else{return'#FFFFFF';}}else if(specs.proteins_residueColor==='acidity'){if(r.acidity===1){return'#0000FF';}else if(r.acidity===-1){return'#FF0000';}else if(r.polar){return'#FFFFFF';}else{return'#773300';}}return'#FFFFFF';};_2.render=function(gl,specs,noColor){if(this.entire.partitions&&this.pi!==this.entire.partitions.lastRender){loadPartition(gl,this.entire.partitions[this.pi]);this.entire.partitions.lastRender=this.pi;}if(!this.vertexIndexBuffer){this.vertexIndexBuffer=gl.createBuffer();gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.vertexIndexBuffer);gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array(this.indexes),gl.STATIC_DRAW);this.vertexIndexBuffer.itemSize=1;this.vertexIndexBuffer.numItems=this.indexes.length;}// indexes\ngl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.vertexIndexBuffer);// colors\nif(!noColor&&specs.proteins_residueColor!=='rainbow'){gl.material.setDiffuseColor(gl,this.getColor(specs));}// render\ngl.drawElements(gl.TRIANGLES,this.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);};d3.Ribbon=function(chain,offset,cartoon){// ribbon meshes build front to back, not side to side, so keep this in\n// mind\nvar lineSegmentNum=chain[0].lineSegments.length;var lineSegmentLength=chain[0].lineSegments[0].length;this.partitions=[];this.partitions.lastRender=0;var currentPartition;this.front=offset>0;// calculate vertex and normal points\nfor(var i=0,ii=chain.length;i<ii;i++){if(!currentPartition||currentPartition.positionData.length>65000){if(this.partitions.length>0){i--;}currentPartition={count:0,positionData:[],normalData:[]};this.partitions.push(currentPartition);}var residue=chain[i];currentPartition.count++;for(var j=0;j<lineSegmentNum;j++){var lineSegment=cartoon?residue.lineSegmentsCartoon[j]:residue.lineSegments[j];var doSide1=j===0;var doSide2=false;for(var k=0;k<lineSegmentLength;k++){var a=lineSegment[k];// normals\nvar abovei=i;var abovek=k+1;if(i===chain.length-1&&k===lineSegmentLength-1){abovek--;}else if(k===lineSegmentLength-1){abovei++;abovek=0;}var above=cartoon?chain[abovei].lineSegmentsCartoon[j][abovek]:chain[abovei].lineSegments[j][abovek];var negate=false;var nextj=j+1;if(j===lineSegmentNum-1){nextj-=2;negate=true;}var side=cartoon?residue.lineSegmentsCartoon[nextj][k]:residue.lineSegments[nextj][k];var toAbove=[above.x-a.x,above.y-a.y,above.z-a.z];var toSide=[side.x-a.x,side.y-a.y,side.z-a.z];var normal=v3.cross(toAbove,toSide,[]);// positions\nif(k===0){// tip\nv3.normalize(toAbove);v3.scale(toAbove,-1);currentPartition.normalData.push(toAbove[0],toAbove[1],toAbove[2]);currentPartition.positionData.push(a.x,a.y,a.z);}if(doSide1||doSide2){// sides\nv3.normalize(toSide);v3.scale(toSide,-1);currentPartition.normalData.push(toSide[0],toSide[1],toSide[2]);currentPartition.positionData.push(a.x,a.y,a.z);if(doSide1&&k===lineSegmentLength-1){doSide1=false;k=-1;}}else{// center strips\nv3.normalize(normal);if(negate&&!this.front||!negate&&this.front){v3.scale(normal,-1);}currentPartition.normalData.push(normal[0],normal[1],normal[2]);v3.scale(normal,m.abs(offset));currentPartition.positionData.push(a.x+normal[0],a.y+normal[1],a.z+normal[2]);if(j===lineSegmentNum-1&&k===lineSegmentLength-1){doSide2=true;k=-1;}}if(k===-1||k===lineSegmentLength-1){// end\nv3.normalize(toAbove);currentPartition.normalData.push(toAbove[0],toAbove[1],toAbove[2]);currentPartition.positionData.push(a.x,a.y,a.z);}}}}// build mesh connectivity\n// add 2 to lineSegmentNum and lineSegmentLength to account for sides\n// and ends\nlineSegmentNum+=2;lineSegmentLength+=2;this.segments=[];this.partitionSegments=[];for(var n=0,nn=this.partitions.length;n<nn;n++){var currentPartition=this.partitions[n];var partitionSegmentIndexData=[];for(var i=0,ii=currentPartition.count-1;i<ii;i++){var chainIndex=i;for(var j=0;j<n;j++){chainIndex+=this.partitions[j].count-1;}var c=chain[chainIndex];var residueIndexStart=i*lineSegmentNum*lineSegmentLength;var individualIndexData=[];for(var j=0,jj=lineSegmentNum-1;j<jj;j++){var segmentIndexStart=residueIndexStart+j*lineSegmentLength;for(var k=0;k<lineSegmentLength-1;k++){var nextRes=1;if(i===ii){nextRes=0;}var add=[segmentIndexStart+k,segmentIndexStart+lineSegmentLength+k,segmentIndexStart+lineSegmentLength+k+nextRes,segmentIndexStart+k,segmentIndexStart+k+nextRes,segmentIndexStart+lineSegmentLength+k+nextRes];if(k!==lineSegmentLength-1){if(this.front){individualIndexData.push(add[0],add[1],add[2],add[3],add[5],add[4]);}else{individualIndexData.push(add[0],add[2],add[1],add[3],add[4],add[5]);}}if(k===lineSegmentLength-2&&!(i===currentPartition.count-2&&n===this.partitions.length-1)){// jump the gap, the other mesh points will be\n// covered,\n// so no need to explicitly skip them\nvar jump=lineSegmentNum*lineSegmentLength-k;add[2]+=jump;add[4]+=jump;add[5]+=jump;}if(this.front){partitionSegmentIndexData.push(add[0],add[1],add[2],add[3],add[5],add[4]);}else{partitionSegmentIndexData.push(add[0],add[2],add[1],add[3],add[4],add[5]);}}}if(cartoon&&c.split){var sr=new SubRibbon(this,undefined,partitionSegmentIndexData,n);sr.helix=c.helix;sr.sheet=c.sheet;this.partitionSegments.push(sr);partitionSegmentIndexData=[];}this.segments.push(new SubRibbon(this,c.name,individualIndexData,n));}var sr=new SubRibbon(this,undefined,partitionSegmentIndexData,n);sr.helix=c.helix;sr.sheet=c.sheet;this.partitionSegments.push(sr);}this.storeData(this.partitions[0].positionData,this.partitions[0].normalData);if(this.partitions.length===1){// clear partitions to reduce overhead\nthis.partitions=undefined;}};var _=d3.Ribbon.prototype=new d3._Mesh();_.render=function(gl,specs){this.bindBuffers(gl);// colors\nvar color=specs.macro_colorByChain?this.chainColor:undefined;if(!color){color=this.front?specs.proteins_primaryColor:specs.proteins_secondaryColor;}gl.material.setDiffuseColor(gl,color);for(var i=0,ii=this.partitionSegments.length;i<ii;i++){this.partitionSegments[i].render(gl,specs,!specs.proteins_ribbonCartoonize);}};})(ChemDoodle.RESIDUE,ChemDoodle.structures.d3,Math,ChemDoodle.lib.vec3);(function(math,d3,v3,m4,undefined){'use strict';d3.Light=function(diffuseColor,specularColor,direction){this.camera=new d3.Camera();this.lightScene(diffuseColor,specularColor,direction);};var _=d3.Light.prototype;_.lightScene=function(diffuseColor,specularColor,direction){this.diffuseRGB=math.getRGB(diffuseColor,1);this.specularRGB=math.getRGB(specularColor,1);this.direction=direction;this.updateView();};_.updateView=function(){var lightDir=v3.normalize(this.direction,[]);var eyePos=v3.scale(lightDir,(this.camera.near-this.camera.far)/2-this.camera.near,[]);var up=v3.equal(lightDir,[0,1,0])?[0,0,1]:[0,1,0];m4.lookAt(eyePos,[0,0,0],up,this.camera.viewMatrix);this.camera.orthogonalProjectionMatrix();};})(ChemDoodle.math,ChemDoodle.structures.d3,ChemDoodle.lib.vec3,ChemDoodle.lib.mat4);(function(d3,undefined){'use strict';d3.Line=function(){this.storeData([0,0,0,0,1,0],[0,0,0,0,0,0]);};d3.Line.prototype=new d3._Mesh();})(ChemDoodle.structures.d3);(function(math,d3,undefined){'use strict';d3.Material=function(){};var _=d3.Material.prototype;_.setTempColors=function(gl,ambientColor,diffuseColor,specularColor,shininess){if(ambientColor){gl.shader.setMaterialAmbientColor(gl,math.getRGB(ambientColor,1));}if(diffuseColor){gl.shader.setMaterialDiffuseColor(gl,math.getRGB(diffuseColor,1));}if(specularColor){gl.shader.setMaterialSpecularColor(gl,math.getRGB(specularColor,1));}gl.shader.setMaterialShininess(gl,shininess);gl.shader.setMaterialAlpha(gl,1);};_.setDiffuseColor=function(gl,diffuseColor){gl.shader.setMaterialDiffuseColor(gl,math.getRGB(diffuseColor,1));};_.setAlpha=function(gl,alpha){gl.shader.setMaterialAlpha(gl,alpha);};})(ChemDoodle.math,ChemDoodle.structures.d3);(function(d3,math,document,undefined){'use strict';d3.Picker=function(){};var _=d3.Picker.prototype;_.init=function(gl){// setup for picking system\nthis.framebuffer=gl.createFramebuffer();// set pick texture\nvar texture2D=gl.createTexture();var renderbuffer=gl.createRenderbuffer();gl.bindTexture(gl.TEXTURE_2D,texture2D);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.bindRenderbuffer(gl.RENDERBUFFER,renderbuffer);// set framebuffer and bind the texture and renderbuffer\ngl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,texture2D,0);gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,renderbuffer);gl.bindTexture(gl.TEXTURE_2D,null);gl.bindRenderbuffer(gl.RENDERBUFFER,null);gl.bindFramebuffer(gl.FRAMEBUFFER,null);};_.setDimension=function(gl,width,height){gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);// get binded depth attachment renderbuffer\nvar renderbuffer=gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME);if(gl.isRenderbuffer(renderbuffer)){// set renderbuffer dimension\ngl.bindRenderbuffer(gl.RENDERBUFFER,renderbuffer);gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,width,height);gl.bindRenderbuffer(gl.RENDERBUFFER,null);}// get binded color attachment texture 2d\nvar texture2D=gl.getFramebufferAttachmentParameter(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME);if(gl.isTexture(texture2D)){// set texture dimension\ngl.bindTexture(gl.TEXTURE_2D,texture2D);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,width,height,0,gl.RGBA,gl.UNSIGNED_BYTE,null);gl.bindTexture(gl.TEXTURE_2D,null);}gl.bindFramebuffer(gl.FRAMEBUFFER,null);};})(ChemDoodle.structures.d3,ChemDoodle.math,document);(function(d3,m,undefined){'use strict';d3.Pill=function(radius,height,latitudeBands,longitudeBands){var capHeightScale=1;var capDiameter=2*radius;height-=capDiameter;if(height<0){capHeightScale=0;height+=capDiameter;}else if(height<capDiameter){capHeightScale=height/capDiameter;height=capDiameter;}// update latitude and logintude band for two caps.\n// latitudeBands *= 2;\n// longitudeBands *= 2;\nvar positionData=[];var normalData=[];for(var latNumber=0;latNumber<=latitudeBands;latNumber++){var theta=latNumber*m.PI/latitudeBands;var sinTheta=m.sin(theta);var cosTheta=m.cos(theta)*capHeightScale;for(var longNumber=0;longNumber<=longitudeBands;longNumber++){var phi=longNumber*2*m.PI/longitudeBands;var sinPhi=m.sin(phi);var cosPhi=m.cos(phi);var x=cosPhi*sinTheta;var y=cosTheta;var z=sinPhi*sinTheta;normalData.push(x,y,z);positionData.push(radius*x,radius*y+(latNumber<latitudeBands/2?height:0),radius*z);}}var indexData=[];longitudeBands+=1;for(var latNumber=0;latNumber<latitudeBands;latNumber++){for(var longNumber=0;longNumber<longitudeBands;longNumber++){var first=latNumber*longitudeBands+longNumber%longitudeBands;var second=first+longitudeBands;indexData.push(first,first+1,second);if(longNumber<longitudeBands-1){indexData.push(second,first+1,second+1);}}}this.storeData(positionData,normalData,indexData);};d3.Pill.prototype=new d3._Mesh();})(ChemDoodle.structures.d3,Math);(function(extensions,RESIDUE,structures,d3,m,m4,v3,math,undefined){'use strict';function createDummyResidue(x,y,z){var dummyRes=new structures.Residue(-1);dummyRes.cp1=dummyRes.cp2=new structures.Atom('',x,y,z);return dummyRes;}function Pipe(a1,a2){this.a1=a1;this.a2=a2;};var _=Pipe.prototype;_.render=function(gl,specs){var p1=this.a1;var p2=this.a2;var height=1.001*p1.distance3D(p2);var radiusScale=specs.proteins_cylinderHelixDiameter/2;var scaleVector=[radiusScale,height,radiusScale];var transform=m4.translate(m4.identity(),[p1.x,p1.y,p1.z]);var y=[0,1,0];var ang=0;var axis;if(p1.x===p2.x&&p1.z===p2.z){axis=[0,0,1];if(p2.y<p1.y){ang=m.PI;}}else{var a2b=[p2.x-p1.x,p2.y-p1.y,p2.z-p1.z];ang=extensions.vec3AngleFrom(y,a2b);axis=v3.cross(y,a2b,[]);}if(ang!==0){m4.rotate(transform,ang,axis);}m4.scale(transform,scaleVector);gl.shader.setMatrixUniforms(gl,transform);gl.drawArrays(gl.TRIANGLE_STRIP,0,gl.cylinderClosedBuffer.vertexPositionBuffer.numItems);};function Plank(a1,a2,vx){this.a1=a1;this.a2=a2;this.vx=vx;};var _=Plank.prototype;_.render=function(gl,specs){if(this.specs){specs=this.specs;}// this is the elongation vector for the plank\nvar height=1.001*this.a1.distance3D(this.a2);var diry=[this.a2.x-this.a1.x,this.a2.y-this.a1.y,this.a2.z-this.a1.z];var dirz=v3.cross(diry,this.vx,[]);var dirx=v3.cross(dirz,diry,[]);v3.normalize(dirx);v3.normalize(diry);v3.normalize(dirz);var transform=[dirx[0],dirx[1],dirx[2],0,diry[0],diry[1],diry[2],0,dirz[0],dirz[1],dirz[2],0,this.a1.x,this.a1.y,this.a1.z,1];var scaleVector=[specs.proteins_plankSheetWidth,height,specs.proteins_tubeThickness];m4.scale(transform,scaleVector);gl.shader.setMatrixUniforms(gl,transform);gl.drawArrays(gl.TRIANGLE_STRIP,0,gl.boxBuffer.vertexPositionBuffer.numItems);};d3.PipePlank=function(rs,specs){this.tubes=[];this.helixCylinders=[];this.sheetPlanks=[];this.chainColor=rs.chainColor;var chainNoSS=[];var noSSResidues=[];var helixResidues=[];var sheetResidues=[];// the first residue just a dummy residue.\n// so at beginning, the secondary structure of second residue must be check\nif(rs.length>1){var r0=rs[0];var r1=rs[1];if(r1.helix){helixResidues.push(r0);}else if(r1.sheet){sheetResidues.push(r0);}else{noSSResidues.push(r0);}}// iterate residues\nfor(var i=1,ii=rs.length-1;i<=ii;i++){var residue=rs[i];if(residue.helix){helixResidues.push(residue);if(residue.arrow){var startPoint=v3.create();var endPoint=v3.create();if(helixResidues.length==2){// PDB like 2PEC have helix which is just have 2 residues in it.\nstartPoint=[helixResidues[0].cp1.x,helixResidues[0].cp1.y,helixResidues[0].cp1.z];endPoint=[helixResidues[1].cp1.x,helixResidues[1].cp1.y,helixResidues[1].cp1.z];}else{// To get helix axis, we need at least 4 residues.\n// if residues lenght is 3, then one residue need to be added.\n// The added residue is residue before helix.\nif(helixResidues.length==3){helixResidues.unshift(rs[m.max(i-3,0)]);}var Ps=[];var Vs=[];for(var h=1,hh=helixResidues.length-1;h<hh;h++){var cai=[helixResidues[h].cp1.x,helixResidues[h].cp1.y,helixResidues[h].cp1.z];var A=[helixResidues[h-1].cp1.x,helixResidues[h-1].cp1.y,helixResidues[h-1].cp1.z];var B=[helixResidues[h+1].cp1.x,helixResidues[h+1].cp1.y,helixResidues[h+1].cp1.z];v3.subtract(A,cai);v3.subtract(B,cai);var Al=v3.scale(A,v3.length(B),[]);var Bl=v3.scale(B,v3.length(A),[]);var V=v3.normalize(v3.add(Al,Bl,[]));Ps.push(cai);Vs.push(V);}var axes=[];for(var h=0,hh=Ps.length-1;h<hh;h++){var P1=Ps[h];var V1=Vs[h];var P2=Ps[h+1];var V2=Vs[h+1];var H=v3.normalize(v3.cross(V1,V2,[]));var P2subP1=v3.subtract(P2,P1,[]);var d=v3.dot(P2subP1,H);var dH=v3.scale(H,d,[]);var dHl=v3.length(dH);var P2subP1l=v3.length(P2subP1);var r=-(dHl*dHl-P2subP1l*P2subP1l)/(2*v3.dot(v3.subtract(P1,P2,[]),V2));var H1=v3.add(P1,v3.scale(V1,r,[]),[]);var H2=v3.add(P2,v3.scale(V2,r,[]),[]);axes.push([H1,H2]);}var firstPoint=axes[0][0];var secondPoint=axes[0][1];var secondToFirst=v3.subtract(firstPoint,secondPoint,[]);v3.add(firstPoint,secondToFirst,startPoint);var firstPoint=axes[axes.length-1][1];var secondPoint=axes[axes.length-1][0];var secondToFirst=v3.subtract(firstPoint,secondPoint,[]);v3.add(firstPoint,secondToFirst,endPoint);}var startAtom=new structures.Atom('',startPoint[0],startPoint[1],startPoint[2]);var endAtom=new structures.Atom('',endPoint[0],endPoint[1],endPoint[2]);this.helixCylinders.push(new Pipe(startAtom,endAtom));helixResidues=[];// get vector direction from Pipe end to start\nvar helixDir=v3.subtract(startPoint,endPoint,[]);v3.normalize(helixDir);v3.scale(helixDir,.5);if(noSSResidues.length>0){var additionCp=v3.add(startPoint,helixDir,[]);var prevResCp=noSSResidues[noSSResidues.length-1].cp1;var helixDirToPrevRes=v3.subtract([prevResCp.x,prevResCp.y,prevResCp.z],additionCp,[]);v3.normalize(helixDirToPrevRes);v3.scale(helixDirToPrevRes,.5);v3.add(additionCp,helixDirToPrevRes);var dummyRes=new structures.Residue(-1);dummyRes.cp1=dummyRes.cp2=new structures.Atom('',additionCp[0],additionCp[1],additionCp[2]);noSSResidues.push(dummyRes);// force the non secondary structure spline to end on helix start point.\nvar dummyRes=createDummyResidue(startPoint[0],startPoint[1],startPoint[2]);noSSResidues.push(dummyRes);chainNoSS.push(noSSResidues);}noSSResidues=[];// check for next residue\nif(i<ii){// force the non secondary structure spline to start on helix end point.\nvar dummyRes=createDummyResidue(endPoint[0],endPoint[1],endPoint[2]);noSSResidues.push(dummyRes);var rm=rs[i+1];if(rm.sheet){noSSResidues.push(residue);noSSResidues.push(residue);chainNoSS.push(noSSResidues);noSSResidues=[];sheetResidues.push(residue);}else{// force the non secondary structure spline to start on helix end point.\nv3.scale(helixDir,-1);var additionCp=v3.add(endPoint,helixDir,[]);var nextResCp=rm.cp1;var helixDirToNextRes=v3.subtract([nextResCp.x,nextResCp.y,nextResCp.z],additionCp,[]);v3.normalize(helixDirToNextRes);v3.scale(helixDirToNextRes,.5);v3.add(additionCp,helixDirToNextRes);var dummyRes=createDummyResidue(additionCp[0],additionCp[1],additionCp[2]);noSSResidues.push(dummyRes);}}}}else if(residue.sheet){sheetResidues.push(residue);if(residue.arrow){var p1=[0,0,0];var p2=[0,0,0];for(var h=0,hh=sheetResidues.length;h<hh;h++){var guidePoints=sheetResidues[h].guidePointsLarge;var gp1=guidePoints[0];var gp2=guidePoints[guidePoints.length-1];v3.add(p1,[gp1.x,gp1.y,gp1.z]);v3.add(p2,[gp2.x,gp2.y,gp2.z]);}v3.scale(p1,1/hh);v3.scale(p2,1/hh);var dirx=v3.subtract(p1,p2);var firstRs=sheetResidues[0];var lastRs=sheetResidues[sheetResidues.length-1];var firstGuidePoints=firstRs.guidePointsSmall[0];var lastGuidePoints=lastRs.guidePointsSmall[0];this.sheetPlanks.push(new Plank(firstGuidePoints,lastGuidePoints,dirx));sheetResidues=[];if(i<ii){var rm=rs[i+1];if(rm.sheet){sheetResidues.push(residue);}else{var dummyRes=createDummyResidue(lastGuidePoints.x,lastGuidePoints.y,lastGuidePoints.z);noSSResidues.push(dummyRes);}}}}else{noSSResidues.push(residue);if(i<ii){var rm=rs[i+1];if(rm.sheet){var guidePoints=residue.guidePointsSmall[0];var dummyRes=createDummyResidue(guidePoints.x,guidePoints.y,guidePoints.z);noSSResidues.push(dummyRes);chainNoSS.push(noSSResidues);noSSResidues=[];sheetResidues.push(residue);}}}}if(noSSResidues.length>1){if(noSSResidues.length==2){noSSResidues.push(noSSResidues[noSSResidues.length-1]);}chainNoSS.push(noSSResidues);}noSSResidues=[];var chainSegments=[];for(var n=0,nn=chainNoSS.length;n<nn;n++){var nhs=chainNoSS[n];var lineSegmentsList=[];for(var i=0,ii=nhs.length-1;i<=ii;i++){lineSegmentsList.push(nhs[i].cp1);}chainSegments.push(lineSegmentsList);}for(var i=0,ii=chainSegments.length;i<ii;i++){var t=new d3.CatmullTube(chainSegments[i],specs.proteins_tubeThickness,specs.proteins_tubeResolution_3D,specs.proteins_horizontalResolution);t.chainColor=rs.chainColor;this.tubes.push(t);}};var _=d3.PipePlank.prototype=new d3._Mesh();_.render=function(gl,specs){gl.material.setTempColors(gl,specs.proteins_materialAmbientColor_3D,undefined,specs.proteins_materialSpecularColor_3D,specs.proteins_materialShininess_3D);// colors\ngl.material.setDiffuseColor(gl,specs.macro_colorByChain?this.chainColor:specs.proteins_tubeColor);for(var j=0,jj=this.tubes.length;j<jj;j++){gl.shader.setMatrixUniforms(gl);this.tubes[j].render(gl,specs);}if(!specs.macro_colorByChain){gl.material.setDiffuseColor(gl,specs.proteins_ribbonCartoonHelixSecondaryColor);}gl.cylinderClosedBuffer.bindBuffers(gl);for(var j=0,jj=this.helixCylinders.length;j<jj;j++){this.helixCylinders[j].render(gl,specs);}if(!specs.macro_colorByChain){gl.material.setDiffuseColor(gl,specs.proteins_ribbonCartoonSheetColor);}gl.boxBuffer.bindBuffers(gl);for(var j=0,jj=this.sheetPlanks.length;j<jj;j++){this.sheetPlanks[j].render(gl,specs);}};})(ChemDoodle.extensions,ChemDoodle.RESIDUE,ChemDoodle.structures,ChemDoodle.structures.d3,Math,ChemDoodle.lib.mat4,ChemDoodle.lib.vec3,ChemDoodle.math);(function(d3,undefined){'use strict';d3.Quad=function(){var positionData=[-1,1,0,-1,-1,0,1,1,0,1,-1,0];var normalData=[0,0,0,0,0,0,0,0,0,0,0,0];this.storeData(positionData,normalData);};d3.Quad.prototype=new d3._Mesh();})(ChemDoodle.structures.d3);(function(structures,d3,v3,undefined){'use strict';d3.Shape=function(points,thickness){// points must be in the xy-plane, all z-coords must be 0, thickness\n// will be in the z-plane\nvar numPoints=points.length;var positionData=[];var normalData=[];// calculate vertex and normal points\nvar center=new structures.Point();for(var i=0,ii=numPoints;i<ii;i++){var next=i+1;if(i===ii-1){next=0;}var z=[0,0,1];var currentPoint=points[i];var nextPoint=points[next];var v=[nextPoint.x-currentPoint.x,nextPoint.y-currentPoint.y,0];var normal=v3.cross(z,v);// first four are for the side normal\n// second four will do both the bottom and top triangle normals\nfor(var j=0;j<2;j++){positionData.push(currentPoint.x,currentPoint.y,thickness/2);positionData.push(currentPoint.x,currentPoint.y,-thickness/2);positionData.push(nextPoint.x,nextPoint.y,thickness/2);positionData.push(nextPoint.x,nextPoint.y,-thickness/2);}// side normals\nfor(var j=0;j<4;j++){normalData.push(normal[0],normal[1],normal[2]);}// top and bottom normals\nnormalData.push(0,0,1);normalData.push(0,0,-1);normalData.push(0,0,1);normalData.push(0,0,-1);center.add(currentPoint);}// centers\ncenter.x/=numPoints;center.y/=numPoints;normalData.push(0,0,1);positionData.push(center.x,center.y,thickness/2);normalData.push(0,0,-1);positionData.push(center.x,center.y,-thickness/2);// build mesh connectivity\nvar indexData=[];var centerIndex=numPoints*8;for(var i=0,ii=numPoints;i<ii;i++){var start=i*8;// sides\nindexData.push(start);indexData.push(start+3);indexData.push(start+1);indexData.push(start);indexData.push(start+2);indexData.push(start+3);// top and bottom\nindexData.push(start+4);indexData.push(centerIndex);indexData.push(start+6);indexData.push(start+5);indexData.push(start+7);indexData.push(centerIndex+1);}this.storeData(positionData,normalData,indexData);};d3.Shape.prototype=new d3._Mesh();})(ChemDoodle.structures,ChemDoodle.structures.d3,ChemDoodle.lib.vec3);(function(d3,m,v3,undefined){'use strict';d3.Star=function(){var ps=[.8944,.4472,0,.2764,.4472,.8506,.2764,.4472,-.8506,-.7236,.4472,.5257,-.7236,.4472,-.5257,-.3416,.4472,0,-.1056,.4472,.3249,-.1056,.4472,-.3249,.2764,.4472,.2008,.2764,.4472,-.2008,-.8944,-.4472,0,-.2764,-.4472,.8506,-.2764,-.4472,-.8506,.7236,-.4472,.5257,.7236,-.4472,-.5257,.3416,-.4472,0,.1056,-.4472,.3249,.1056,-.4472,-.3249,-.2764,-.4472,.2008,-.2764,-.4472,-.2008,-.5527,.1058,0,-.1708,.1058,.5527,-.1708,.1058,-.5527,.4471,.1058,.3249,.4471,.1058,-.3249,.5527,-.1058,0,.1708,-.1058,.5527,.1708,-.1058,-.5527,-.4471,-.1058,.3249,-.4471,-.1058,-.3249,0,1,0,0,-1,0];var is=[0,9,8,2,7,9,4,5,7,3,6,5,1,8,6,0,8,23,30,6,8,3,21,6,11,26,21,13,23,26,2,9,24,30,8,9,1,23,8,13,25,23,14,24,25,4,7,22,30,9,7,0,24,9,14,27,24,12,22,27,3,5,20,30,7,5,2,22,7,12,29,22,10,20,29,1,6,21,30,5,6,4,20,5,10,28,20,11,21,28,10,19,18,12,17,19,14,15,17,13,16,15,11,18,16,31,19,17,14,17,27,2,27,22,4,22,29,10,29,19,31,18,19,12,19,29,4,29,20,3,20,28,11,28,18,31,16,18,10,18,28,3,28,21,1,21,26,13,26,16,31,15,16,11,16,26,1,26,23,0,23,25,14,25,15,31,17,15,13,15,25,0,25,24,2,24,27,12,27,17];var positionData=[];var normalData=[];var indexData=[];for(var i=0,ii=is.length;i<ii;i+=3){var j1=is[i]*3;var j2=is[i+1]*3;var j3=is[i+2]*3;var p1=[ps[j1],ps[j1+1],ps[j1+2]];var p2=[ps[j2],ps[j2+1],ps[j2+2]];var p3=[ps[j3],ps[j3+1],ps[j3+2]];var toAbove=[p1[0]-p2[0],p1[1]-p2[1],p1[2]-p2[2]];var toSide=[p3[0]-p2[0],p3[1]-p2[1],p3[2]-p2[2]];var normal=v3.cross(toSide,toAbove,[]);v3.normalize(normal);positionData.push(p1[0],p1[1],p1[2],p2[0],p2[1],p2[2],p3[0],p3[1],p3[2]);normalData.push(normal[0],normal[1],normal[2],normal[0],normal[1],normal[2],normal[0],normal[1],normal[2]);indexData.push(i,i+1,i+2);}this.storeData(positionData,normalData,indexData);};d3.Star.prototype=new d3._Mesh();})(ChemDoodle.structures.d3,Math,ChemDoodle.lib.vec3);(function(d3,extensions,document,window,undefined){'use strict';var ratio=1;if(window.devicePixelRatio){ratio=window.devicePixelRatio;}d3.TextImage=function(){this.ctx=document.createElement('canvas').getContext('2d');this.data=[];this.text='';this.charHeight=0;};var _=d3.TextImage.prototype;_.init=function(gl){// init texture\nthis.textureImage=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,this.textureImage);gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL,false);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);gl.bindTexture(gl.TEXTURE_2D,null);this.updateFont(gl,12,['Sans-serif'],false,false,false);};_.charData=function(character){var index=this.text.indexOf(character);return index>=0?this.data[index]:null;};_.updateFont=function(gl,fontSize,fontFamilies,fontBold,fontItalic,fontStroke){var ctx=this.ctx;var canvas=this.ctx.canvas;var data=[];var text=\"\";fontSize*=ratio;var contextFont=extensions.getFontString(fontSize,fontFamilies,fontBold,fontItalic);ctx.font=contextFont;ctx.save();var totalWidth=0;var charHeight=fontSize*1.5;for(var i=32,ii=127;i<ii;i++){// skip control characters\n// if(i <= 31 || i == 127) continue;\nvar character=String.fromCharCode(i),width=ctx.measureText(character).width;data.push({text:character,width:width,height:charHeight});totalWidth+=width*2;}// add other characters\nvar chars=\"\\xB0\\u212B\\xAE\".split('');for(var i=0,ii=chars.length;i<ii;i++){var character=chars[i],width=ctx.measureText(character).width;data.push({text:character,width:width,height:charHeight});totalWidth+=width*2;}var areaImage=totalWidth*charHeight;var sqrtArea=Math.sqrt(areaImage);var totalRows=Math.ceil(sqrtArea/charHeight);var maxWidth=Math.ceil(totalWidth/(totalRows-1));canvas.width=maxWidth;canvas.height=totalRows*charHeight;ctx.font=contextFont;ctx.textAlign=\"left\";ctx.textBaseline=\"middle\";ctx.strokeStyle=\"#000\";ctx.lineWidth=1.4;ctx.fillStyle=\"#fff\";var offsetRow=0;var posX=0;for(var i=0,ii=data.length;i<ii;i++){var charData=data[i];var charWidth=charData.width*2;var charHeight=charData.height;var charText=charData.text;var willWidth=posX+charWidth;if(willWidth>maxWidth){offsetRow++;posX=0;}var posY=offsetRow*charHeight;if(fontStroke){// stroke must draw before fill\nctx.strokeText(charText,posX,posY+charHeight/2);}ctx.fillText(charText,posX,posY+charHeight/2);charData.x=posX;charData.y=posY;text+=charText;posX+=charWidth;}this.text=text;this.data=data;this.charHeight=charHeight;// also update the texture\ngl.bindTexture(gl.TEXTURE_2D,this.textureImage);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,canvas);gl.bindTexture(gl.TEXTURE_2D,null);};_.pushVertexData=function(text,position,zDepth,data){// characters of string text\nvar textPiece=text.toString().split(\"\");// height of texture image\nvar heightImage=this.getHeight();var widthImage=this.getWidth();var x1=-this.textWidth(text)/2/ratio;var y1=-this.charHeight/2/ratio;// iterate each character\nfor(var j=0,jj=textPiece.length;j<jj;j++){var charData=this.charData(textPiece[j]);var width=charData.width;var left=charData.x/widthImage;var right=left+charData.width*1.8/widthImage;var top=charData.y/heightImage;var bottom=top+charData.height/heightImage;var x2=x1+width*1.8/ratio;var y2=this.charHeight/2/ratio;data.position.push(// left top\nposition[0],position[1],position[2],// right top\nposition[0],position[1],position[2],// right bottom\nposition[0],position[1],position[2],// left top\nposition[0],position[1],position[2],// left bottom\nposition[0],position[1],position[2],// right bottom\nposition[0],position[1],position[2]);data.texCoord.push(// left top\nleft,top,// right bottom\nright,bottom,// right top\nright,top,// left top\nleft,top,// left bottom\nleft,bottom,// right bottom\nright,bottom);data.translation.push(// left top\nx1,y2,zDepth,// right bottom\nx2,y1,zDepth,// right top\nx2,y2,zDepth,// left top\nx1,y2,zDepth,// left bottom\nx1,y1,zDepth,// right bottom\nx2,y1,zDepth);x1=x2+(width-width*1.8)/ratio;}};_.getCanvas=function(){return this.ctx.canvas;};_.getHeight=function(){return this.getCanvas().height;};_.getWidth=function(){return this.getCanvas().width;};_.textWidth=function(text){return this.ctx.measureText(text).width;};_.test=function(){document.body.appendChild(this.getCanvas());};_.useTexture=function(gl){gl.bindTexture(gl.TEXTURE_2D,this.textureImage);};})(ChemDoodle.structures.d3,ChemDoodle.extensions,document,window);(function(d3,m,undefined){'use strict';d3.TextMesh=function(){};var _=d3.TextMesh.prototype;_.init=function(gl){// set vertex buffer\nthis.vertexPositionBuffer=gl.createBuffer();this.vertexTexCoordBuffer=gl.createBuffer();this.vertexTranslationBuffer=gl.createBuffer();};_.setVertexData=function(gl,vertexBuffer,bufferData,itemSize){gl.bindBuffer(gl.ARRAY_BUFFER,vertexBuffer);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(bufferData),gl.STATIC_DRAW);vertexBuffer.itemSize=itemSize;vertexBuffer.numItems=bufferData.length/itemSize;};_.storeData=function(gl,vertexPositionData,vertexTexCoordData,vertexTranslationData){this.setVertexData(gl,this.vertexPositionBuffer,vertexPositionData,3);this.setVertexData(gl,this.vertexTexCoordBuffer,vertexTexCoordData,2);this.setVertexData(gl,this.vertexTranslationBuffer,vertexTranslationData,3);};_.bindBuffers=function(gl){// positions\ngl.bindBuffer(gl.ARRAY_BUFFER,this.vertexPositionBuffer);gl.vertexAttribPointer(gl.shader.vertexPositionAttribute,this.vertexPositionBuffer.itemSize,gl.FLOAT,false,0,0);// texCoord\ngl.bindBuffer(gl.ARRAY_BUFFER,this.vertexTexCoordBuffer);gl.vertexAttribPointer(gl.shader.vertexTexCoordAttribute,this.vertexTexCoordBuffer.itemSize,gl.FLOAT,false,0,0);// translation and z depth\ngl.bindBuffer(gl.ARRAY_BUFFER,this.vertexTranslationBuffer);gl.vertexAttribPointer(gl.shader.vertexNormalAttribute,this.vertexTranslationBuffer.itemSize,gl.FLOAT,false,0,0);};_.render=function(gl){var numItems=this.vertexPositionBuffer.numItems;if(!numItems){// nothing to do here\nreturn;}this.bindBuffers(gl);gl.drawArrays(gl.TRIANGLES,0,numItems);};})(ChemDoodle.structures.d3,Math);(function(ELEMENT,math,d3,m,m4,v3,undefined){'use strict';d3.Torsion=function(a1,a2,a3,a4){this.a1=a1;this.a2=a2;this.a3=a3;this.a4=a4;};var _=d3.Torsion.prototype=new d3._Measurement();_.calculateData=function(specs){var positionData=[];var normalData=[];var indexData=[];var dist1=this.a2.distance3D(this.a1);var dist2=this.a2.distance3D(this.a3);this.distUse=m.min(dist1,dist2)/2;// data for the angle\nvar b1=[this.a2.x-this.a1.x,this.a2.y-this.a1.y,this.a2.z-this.a1.z];var b2=[this.a3.x-this.a2.x,this.a3.y-this.a2.y,this.a3.z-this.a2.z];var b3=[this.a4.x-this.a3.x,this.a4.y-this.a3.y,this.a4.z-this.a3.z];var cross12=v3.cross(b1,b2,[]);var cross23=v3.cross(b2,b3,[]);v3.scale(b1,v3.length(b2));this.torsion=m.atan2(v3.dot(b1,cross23),v3.dot(cross12,cross23));var vec1=v3.normalize(v3.cross(cross12,b2,[]));var vec3=v3.normalize(v3.cross(b2,vec1,[]));this.pos=v3.add([this.a2.x,this.a2.y,this.a2.z],v3.scale(v3.normalize(b2,[]),this.distUse));var vec0=[];var bands=specs.measurement_angleBands_3D;for(var i=0;i<=bands;++i){var theta=this.torsion*i/bands;var vecCos=v3.scale(vec1,m.cos(theta),[]);var vecSin=v3.scale(vec3,m.sin(theta),[]);var norm=v3.scale(v3.normalize(v3.add(vecCos,vecSin,[])),this.distUse);if(i==0){vec0=norm;}positionData.push(this.pos[0]+norm[0],this.pos[1]+norm[1],this.pos[2]+norm[2]);normalData.push(0,0,0);if(i<bands){indexData.push(i,i+1);}}this.vecText=v3.normalize(v3.add(vec0,norm,[]));var arrowLength=0.25;var b2Norm=v3.normalize(b2,[]);v3.scale(b2Norm,arrowLength/4);var theta=this.torsion-m.asin(arrowLength/2)*2*this.torsion/m.abs(this.torsion);var vecCos=v3.scale(vec1,m.cos(theta),[]);var vecSin=v3.scale(vec3,m.sin(theta),[]);var norm=v3.scale(v3.normalize(v3.add(vecCos,vecSin,[])),this.distUse);positionData.push(this.pos[0]+b2Norm[0]+norm[0],this.pos[1]+b2Norm[1]+norm[1],this.pos[2]+b2Norm[2]+norm[2]);normalData.push(0,0,0);positionData.push(this.pos[0]-b2Norm[0]+norm[0],this.pos[1]-b2Norm[1]+norm[1],this.pos[2]-b2Norm[2]+norm[2]);normalData.push(0,0,0);indexData.push(--i,i+1,i,i+2);this.storeData(positionData,normalData,indexData);};_.getText=function(specs){v3.add(this.pos,v3.scale(this.vecText,this.distUse+0.3,[]));return{pos:this.pos,value:[math.angleBounds(this.torsion,true,true).toFixed(2),\" \\xB0\"].join('')};};})(ChemDoodle.ELEMENT,ChemDoodle.math,ChemDoodle.structures.d3,Math,ChemDoodle.lib.mat4,ChemDoodle.lib.vec3);(function(extensions,RESIDUE,structures,d3,m,m4,v3,math,undefined){'use strict';var loadPartition=function loadPartition(gl,p){// positions\ngl.bindBuffer(gl.ARRAY_BUFFER,p.vertexPositionBuffer);gl.vertexAttribPointer(gl.shader.vertexPositionAttribute,p.vertexPositionBuffer.itemSize,gl.FLOAT,false,0,0);// normals\ngl.bindBuffer(gl.ARRAY_BUFFER,p.vertexNormalBuffer);gl.vertexAttribPointer(gl.shader.vertexNormalAttribute,p.vertexNormalBuffer.itemSize,gl.FLOAT,false,0,0);// indexes\ngl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,p.vertexIndexBuffer);};var PointRotator=function PointRotator(point,axis,angle){var d=m.sqrt(axis[1]*axis[1]+axis[2]*axis[2]);var Rx=[1,0,0,0,0,axis[2]/d,-axis[1]/d,0,0,axis[1]/d,axis[2]/d,0,0,0,0,1];var RxT=[1,0,0,0,0,axis[2]/d,axis[1]/d,0,0,-axis[1]/d,axis[2]/d,0,0,0,0,1];var Ry=[d,0,-axis[0],0,0,1,0,0,axis[0],0,d,0,0,0,0,1];var RyT=[d,0,axis[0],0,0,1,0,0,-axis[0],0,d,0,0,0,0,1];var Rz=[m.cos(angle),-m.sin(angle),0,0,m.sin(angle),m.cos(angle),0,0,0,0,1,0,0,0,0,1];var matrix=m4.multiply(Rx,m4.multiply(Ry,m4.multiply(Rz,m4.multiply(RyT,RxT,[]))));this.rotate=function(){return m4.multiplyVec3(matrix,point);};};d3.Tube=function(chain,thickness,cylinderResolution){var lineSegmentNum=chain[0].lineSegments[0].length;this.partitions=[];var currentPartition;this.ends=[];this.ends.push(chain[0].lineSegments[0][0]);this.ends.push(chain[chain.length-1].lineSegments[0][0]);// calculate vertex and normal points\nvar last=[1,0,0];for(var i=0,ii=chain.length;i<ii;i++){if(!currentPartition||currentPartition.positionData.length>65000){if(this.partitions.length>0){i--;}currentPartition={count:0,positionData:[],normalData:[],indexData:[]};this.partitions.push(currentPartition);}var residue=chain[i];currentPartition.count++;var min=Infinity;var p=new structures.Atom('',chain[i].cp1.x,chain[i].cp1.y,chain[i].cp1.z);for(var j=0;j<lineSegmentNum;j++){var currentPoint=residue.lineSegments[0][j];var nextPoint;if(j===lineSegmentNum-1){if(i===chain.length-1){nextPoint=residue.lineSegments[0][j-1];}else{nextPoint=chain[i+1].lineSegments[0][0];}}else{nextPoint=residue.lineSegments[0][j+1];}var axis=[nextPoint.x-currentPoint.x,nextPoint.y-currentPoint.y,nextPoint.z-currentPoint.z];v3.normalize(axis);if(i===chain.length-1&&j===lineSegmentNum-1){v3.scale(axis,-1);}var startVector=v3.cross(axis,last,[]);v3.normalize(startVector);v3.scale(startVector,thickness/2);var rotator=new PointRotator(startVector,axis,2*Math.PI/cylinderResolution);for(var k=0,kk=cylinderResolution;k<kk;k++){var use=rotator.rotate();if(k===m.floor(cylinderResolution/4)){last=[use[0],use[1],use[2]];}currentPartition.normalData.push(use[0],use[1],use[2]);currentPartition.positionData.push(currentPoint.x+use[0],currentPoint.y+use[1],currentPoint.z+use[2]);}// find closest point to attach stick to\nif(p){var dist=currentPoint.distance3D(p);if(dist<min){min=dist;chain[i].pPoint=currentPoint;}}}}// build mesh connectivity\nfor(var n=0,nn=this.partitions.length;n<nn;n++){var currentPartition=this.partitions[n];for(var i=0,ii=currentPartition.count-1;i<ii;i++){var indexStart=i*lineSegmentNum*cylinderResolution;for(var j=0,jj=lineSegmentNum;j<jj;j++){var segmentIndexStart=indexStart+j*cylinderResolution;for(var k=0;k<cylinderResolution;k++){var next=1;var sk=segmentIndexStart+k;currentPartition.indexData.push(sk);currentPartition.indexData.push(sk+cylinderResolution);currentPartition.indexData.push(sk+cylinderResolution+next);currentPartition.indexData.push(sk);currentPartition.indexData.push(sk+cylinderResolution+next);currentPartition.indexData.push(sk+next);}}}}this.storeData(this.partitions[0].positionData,this.partitions[0].normalData,this.partitions[0].indexData);var ps=[new structures.Point(2,0)];for(var i=0;i<60;i++){var ang=i/60*m.PI;ps.push(new structures.Point(2*m.cos(ang),-2*m.sin(ang)));}ps.push(new structures.Point(-2,0),new structures.Point(-2,4),new structures.Point(2,4));var platform=new structures.d3.Shape(ps,1);this.render=function(gl,specs){// draw tube\nthis.bindBuffers(gl);// colors\ngl.material.setDiffuseColor(gl,specs.macro_colorByChain?this.chainColor:specs.nucleics_tubeColor);// render\ngl.drawElements(gl.TRIANGLES,this.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);if(this.partitions){for(var i=1,ii=this.partitions.length;i<ii;i++){var p=this.partitions[i];loadPartition(gl,p);// render\ngl.drawElements(gl.TRIANGLES,p.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}}// draw ends\ngl.sphereBuffer.bindBuffers(gl);for(var i=0;i<2;i++){var p=this.ends[i];var transform=m4.translate(m4.identity(),[p.x,p.y,p.z]);var radius=thickness/2;m4.scale(transform,[radius,radius,radius]);// render\ngl.shader.setMatrixUniforms(gl,transform);gl.drawElements(gl.TRIANGLES,gl.sphereBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}// draw nucleotide handles\ngl.cylinderBuffer.bindBuffers(gl);for(var i=0,ii=chain.length-1;i<ii;i++){var residue=chain[i];var p1=residue.pPoint;var p2=new structures.Atom('',residue.cp2.x,residue.cp2.y,residue.cp2.z);var height=1.001*p1.distance3D(p2);var scaleVector=[thickness/4,height,thickness/4];var transform=m4.translate(m4.identity(),[p1.x,p1.y,p1.z]);var y=[0,1,0];var ang=0;var axis;var a2b=[p2.x-p1.x,p2.y-p1.y,p2.z-p1.z];if(p1.x===p2.x&&p1.z===p2.z){axis=[0,0,1];if(p1.y<p1.y){ang=m.PI;}}else{ang=extensions.vec3AngleFrom(y,a2b);axis=v3.cross(y,a2b,[]);}if(ang!==0){m4.rotate(transform,ang,axis);}m4.scale(transform,scaleVector);gl.shader.setMatrixUniforms(gl,transform);gl.drawArrays(gl.TRIANGLE_STRIP,0,gl.cylinderBuffer.vertexPositionBuffer.numItems);}// draw nucleotide platforms\nplatform.bindBuffers(gl);// colors\nif(specs.nucleics_residueColor==='none'&&!specs.macro_colorByChain){gl.material.setDiffuseColor(gl,specs.nucleics_baseColor);}for(var i=0,ii=chain.length-1;i<ii;i++){var residue=chain[i];var p2=residue.cp2;var transform=m4.translate(m4.identity(),[p2.x,p2.y,p2.z]);// rotate to direction\nvar y=[0,1,0];var ang=0;var axis;var p3=residue.cp3;if(p3){var a2b=[p3.x-p2.x,p3.y-p2.y,p3.z-p2.z];if(p2.x===p3.x&&p2.z===p3.z){axis=[0,0,1];if(p2.y<p2.y){ang=m.PI;}}else{ang=extensions.vec3AngleFrom(y,a2b);axis=v3.cross(y,a2b,[]);}if(ang!==0){m4.rotate(transform,ang,axis);}// rotate to orientation\nvar x=[1,0,0];var rM=m4.rotate(m4.identity([]),ang,axis);m4.multiplyVec3(rM,x);var p4=residue.cp4;var p5=residue.cp5;if(!(p4.y===p5.y&&p4.z===p5.z)){var pivot=[p5.x-p4.x,p5.y-p4.y,p5.z-p4.z];var ang2=extensions.vec3AngleFrom(x,pivot);if(v3.dot(a2b,v3.cross(x,pivot))<0){ang2*=-1;}m4.rotateY(transform,ang2);}// color\nif(!specs.macro_colorByChain){if(specs.nucleics_residueColor==='shapely'){if(RESIDUE[residue.name]){gl.material.setDiffuseColor(gl,RESIDUE[residue.name].shapelyColor);}else{gl.material.setDiffuseColor(gl,RESIDUE['*'].shapelyColor);}}else if(specs.nucleics_residueColor==='rainbow'){gl.material.setDiffuseColor(gl,math.rainbowAt(i,ii,specs.macro_rainbowColors));}}// render\ngl.shader.setMatrixUniforms(gl,transform);gl.drawElements(gl.TRIANGLES,platform.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}}};};d3.Tube.prototype=new d3._Mesh();d3.CatmullTube=function(chains,thickness,cylinderResolution,horizontalResolution){var chain=[];chains.push(chains[chains.length-1]);for(var i=0,ii=chains.length-2;i<=ii;i++){var p0=chains[i==0?0:i-1];var p1=chains[i+0];var p2=chains[i+1];var p3=chains[i==ii?i+1:i+2];var segments=[];for(var j=0;j<horizontalResolution;j++){var t=j/horizontalResolution;if(i==ii){t=j/(horizontalResolution-1);}var x=0.5*(2*p1.x+(p2.x-p0.x)*t+(2*p0.x-5*p1.x+4*p2.x-p3.x)*t*t+(3*p1.x-p0.x-3*p2.x+p3.x)*t*t*t);var y=0.5*(2*p1.y+(p2.y-p0.y)*t+(2*p0.y-5*p1.y+4*p2.y-p3.y)*t*t+(3*p1.y-p0.y-3*p2.y+p3.y)*t*t*t);var z=0.5*(2*p1.z+(p2.z-p0.z)*t+(2*p0.z-5*p1.z+4*p2.z-p3.z)*t*t+(3*p1.z-p0.z-3*p2.z+p3.z)*t*t*t);var o=new structures.Atom('C',x,y,z);segments.push(o);}chain.push(segments);}var lineSegmentNum=chain[0].length;this.partitions=[];var currentPartition;this.ends=[];this.ends.push(chain[0][0]);this.ends.push(chain[chain.length-1][0]);// calculate vertex and normal points\nvar last=[1,0,0];for(var i=0,ii=chain.length;i<ii;i++){if(!currentPartition||currentPartition.positionData.length>65000){if(this.partitions.length>0){i--;}currentPartition={count:0,positionData:[],normalData:[],indexData:[]};this.partitions.push(currentPartition);}var residue=chain[i];currentPartition.count++;var min=Infinity;// var p = new structures.Atom('', chain[i].cp1.x, chain[i].cp1.y, chain[i].cp1.z);\nfor(var j=0;j<lineSegmentNum;j++){var currentPoint=residue[j];var nextPoint;if(j===lineSegmentNum-1){if(i===chain.length-1){nextPoint=residue[j-1];}else{nextPoint=chain[i+1][0];}}else{nextPoint=residue[j+1];}var axis=[nextPoint.x-currentPoint.x,nextPoint.y-currentPoint.y,nextPoint.z-currentPoint.z];v3.normalize(axis);if(i===chain.length-1&&j===lineSegmentNum-1){v3.scale(axis,-1);}var startVector=v3.cross(axis,last,[]);v3.normalize(startVector);v3.scale(startVector,thickness/2);var rotator=new PointRotator(startVector,axis,2*Math.PI/cylinderResolution);for(var k=0,kk=cylinderResolution;k<kk;k++){var use=rotator.rotate();if(k===m.floor(cylinderResolution/4)){last=[use[0],use[1],use[2]];}currentPartition.normalData.push(use[0],use[1],use[2]);currentPartition.positionData.push(currentPoint.x+use[0],currentPoint.y+use[1],currentPoint.z+use[2]);}}}// build mesh connectivity\nfor(var n=0,nn=this.partitions.length;n<nn;n++){var currentPartition=this.partitions[n];for(var i=0,ii=currentPartition.count-1;i<ii;i++){var indexStart=i*lineSegmentNum*cylinderResolution;for(var j=0,jj=lineSegmentNum;j<jj;j++){var segmentIndexStart=indexStart+j*cylinderResolution;for(var k=0;k<=cylinderResolution;k++){var sk=segmentIndexStart+k%cylinderResolution;currentPartition.indexData.push(sk,sk+cylinderResolution);}}}}this.storeData(this.partitions[0].positionData,this.partitions[0].normalData,this.partitions[0].indexData);};var _=d3.CatmullTube.prototype=new d3._Mesh();_.render=function(gl,specs){// draw tube\nthis.bindBuffers(gl);// render\nfor(var i=0,ii=this.partitions.length;i<ii;i++){var p=this.partitions[i];loadPartition(gl,p);// render\ngl.drawElements(gl.TRIANGLE_STRIP,p.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}// draw ends\ngl.sphereBuffer.bindBuffers(gl);for(var i=0;i<2;i++){var p=this.ends[i];var transform=m4.translate(m4.identity(),[p.x,p.y,p.z]);var radius=specs.proteins_tubeThickness/2;m4.scale(transform,[radius,radius,radius]);// render\ngl.shader.setMatrixUniforms(gl,transform);gl.drawElements(gl.TRIANGLES,gl.sphereBuffer.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}};})(ChemDoodle.extensions,ChemDoodle.RESIDUE,ChemDoodle.structures,ChemDoodle.structures.d3,Math,ChemDoodle.lib.mat4,ChemDoodle.lib.vec3,ChemDoodle.math);(function(d3,v3,undefined){'use strict';d3.UnitCell=function(unitCellVectors){this.unitCell=unitCellVectors;var positionData=[];var normalData=[];// calculate vertex and normal points\nvar pushSide=function pushSide(p1,p2,p3,p4){positionData.push(p1[0],p1[1],p1[2]);positionData.push(p2[0],p2[1],p2[2]);positionData.push(p3[0],p3[1],p3[2]);positionData.push(p4[0],p4[1],p4[2]);// push 0s for normals so shader gives them full color\nfor(var i=0;i<4;i++){normalData.push(0,0,0);}};pushSide(unitCellVectors.o,unitCellVectors.x,unitCellVectors.xy,unitCellVectors.y);pushSide(unitCellVectors.o,unitCellVectors.y,unitCellVectors.yz,unitCellVectors.z);pushSide(unitCellVectors.o,unitCellVectors.z,unitCellVectors.xz,unitCellVectors.x);pushSide(unitCellVectors.yz,unitCellVectors.y,unitCellVectors.xy,unitCellVectors.xyz);pushSide(unitCellVectors.xyz,unitCellVectors.xz,unitCellVectors.z,unitCellVectors.yz);pushSide(unitCellVectors.xy,unitCellVectors.x,unitCellVectors.xz,unitCellVectors.xyz);// build mesh connectivity\nvar indexData=[];for(var i=0;i<6;i++){var start=i*4;// sides\nindexData.push(start,start+1,start+1,start+2,start+2,start+3,start+3,start);}this.storeData(positionData,normalData,indexData);};var _=d3.UnitCell.prototype=new d3._Mesh();_.render=function(gl,specs){gl.shader.setMatrixUniforms(gl);this.bindBuffers(gl);// colors\ngl.material.setDiffuseColor(gl,specs.shapes_color);gl.lineWidth(specs.shapes_lineWidth);// render\ngl.drawElements(gl.LINES,this.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);};})(ChemDoodle.structures.d3,ChemDoodle.lib.vec3);(function(d3,math,document,undefined){'use strict';d3.Framebuffer=function(){};var _=d3.Framebuffer.prototype;_.init=function(gl){this.framebuffer=gl.createFramebuffer();};_.setColorTexture=function(gl,texture,attachment){var i=attachment===undefined?0:attachment;gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);gl.bindTexture(gl.TEXTURE_2D,texture);gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0+i,gl.TEXTURE_2D,texture,0);gl.bindTexture(gl.TEXTURE_2D,null);gl.bindFramebuffer(gl.FRAMEBUFFER,null);};_.setColorRenderbuffer=function(gl,renderbuffer,attachment){var i=attachment===undefined?0:attachment;gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);gl.bindRenderbuffer(gl.RENDERBUFFER,renderbuffer);gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0+i,gl.RENDERBUFFER,renderbuffer);gl.bindRenderbuffer(gl.RENDERBUFFER,null);gl.bindFramebuffer(gl.FRAMEBUFFER,null);};_.setDepthTexture=function(gl,texture){gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);gl.bindTexture(gl.TEXTURE_2D,texture);gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.TEXTURE_2D,texture,0);gl.bindTexture(gl.TEXTURE_2D,null);gl.bindFramebuffer(gl.FRAMEBUFFER,null);};_.setDepthRenderbuffer=function(gl,renderbuffer){gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);gl.bindRenderbuffer(gl.RENDERBUFFER,renderbuffer);gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,renderbuffer);gl.bindRenderbuffer(gl.RENDERBUFFER,null);gl.bindFramebuffer(gl.FRAMEBUFFER,null);};_.bind=function(gl,width,height){gl.bindFramebuffer(gl.FRAMEBUFFER,this.framebuffer);gl.viewport(0,0,width,height);};})(ChemDoodle.structures.d3,ChemDoodle.math,document);(function(d3,math,document,undefined){'use strict';d3.Renderbuffer=function(){};var _=d3.Renderbuffer.prototype;_.init=function(gl,format){this.renderbuffer=gl.createRenderbuffer();this.format=format;};_.setParameter=function(gl,width,height){this.width=width;this.height=height;gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderbuffer);gl.renderbufferStorage(gl.RENDERBUFFER,this.format,this.width,this.height);gl.bindRenderbuffer(gl.RENDERBUFFER,null);};})(ChemDoodle.structures.d3,ChemDoodle.math,document);(function(math,d3,m,undefined){'use strict';d3.SSAO=function(){};var _=d3.SSAO.prototype;_.initSampleKernel=function(kernelSize){var sampleKernel=[];for(var i=0;i<kernelSize;i++){var x=m.random()*2.0-1.0;var y=m.random()*2.0-1.0;var z=m.random()*2.0-1.0;var scale=i/kernelSize;var scale2=scale*scale;var lerp=0.1+scale2*0.9;x*=lerp;y*=lerp;z*=lerp;sampleKernel.push(x,y,z);}this.sampleKernel=new Float32Array(sampleKernel);};_.initNoiseTexture=function(gl){var noiseSize=16;var ssaoNoise=[];for(var i=0;i<noiseSize;i++){ssaoNoise.push(m.random()*2-1);ssaoNoise.push(m.random()*2-1);ssaoNoise.push(0.0);}this.noiseTexture=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,this.noiseTexture);gl.texImage2D(gl.TEXTURE_2D,0,gl.RGB,4,4,0,gl.RGB,gl.FLOAT,new Float32Array(ssaoNoise));gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT);gl.bindTexture(gl.TEXTURE_2D,null);};})(ChemDoodle.math,ChemDoodle.structures.d3,Math);(function(d3,math,document,undefined){'use strict';d3.Texture=function(){};var _=d3.Texture.prototype;_.init=function(gl,type,internalFormat,format){this.texture=gl.createTexture();this.type=type;this.internalFormat=internalFormat;this.format=format!==undefined?format:internalFormat;gl.bindTexture(gl.TEXTURE_2D,this.texture);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);gl.bindTexture(gl.TEXTURE_2D,null);};_.setParameter=function(gl,width,height){this.width=width;this.height=height;// set texture dimension\ngl.bindTexture(gl.TEXTURE_2D,this.texture);gl.texImage2D(gl.TEXTURE_2D,0,this.internalFormat,this.width,this.height,0,this.format,this.type,null);gl.bindTexture(gl.TEXTURE_2D,null);};})(ChemDoodle.structures.d3,ChemDoodle.math,document);(function(d3,m3,m4,document,undefined){'use strict';d3._Shader=function(){};var _=d3._Shader.prototype;_.useShaderProgram=function(gl){gl.useProgram(this.gProgram);gl.shader=this;};_.init=function(gl){var vertexShader=this.getShader(gl,'vertex-shader');if(!vertexShader){vertexShader=this.loadDefaultVertexShader(gl);}var fragmentShader=this.getShader(gl,'fragment-shader');if(!fragmentShader){fragmentShader=this.loadDefaultFragmentShader(gl);}this.gProgram=gl.createProgram();gl.attachShader(this.gProgram,vertexShader);gl.attachShader(this.gProgram,fragmentShader);this.onShaderAttached(gl);gl.linkProgram(this.gProgram);if(!gl.getProgramParameter(this.gProgram,gl.LINK_STATUS)){alert('Could not initialize shaders: '+gl.getProgramInfoLog(this.gProgram));}gl.useProgram(this.gProgram);this.initUniformLocations(gl);gl.useProgram(null);};_.onShaderAttached=function(gl){// set vertex attributes explicitly\nthis.vertexPositionAttribute=0;this.vertexNormalAttribute=1;gl.bindAttribLocation(this.gProgram,this.vertexPositionAttribute,'a_vertex_position');gl.bindAttribLocation(this.gProgram,this.vertexNormalAttribute,'a_vertex_normal');};_.getShaderFromStr=function(gl,shaderType,strSrc){var shader=gl.createShader(shaderType);gl.shaderSource(shader,strSrc);gl.compileShader(shader);if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)){alert(shaderScript.type+' '+gl.getShaderInfoLog(shader));gl.deleteShader(shader);return undefined;}return shader;};_.enableAttribsArray=function(gl){gl.enableVertexAttribArray(this.vertexPositionAttribute);};_.disableAttribsArray=function(gl){gl.disableVertexAttribArray(this.vertexPositionAttribute);};_.getShader=function(gl,id){var shaderScript=document.getElementById(id);if(!shaderScript){return undefined;}var sb=[];var k=shaderScript.firstChild;while(k){if(k.nodeType===3){sb.push(k.textContent);}k=k.nextSibling;}var sdrSrc=sb.join('');var shader;if(shaderScript.type==='x-shader/x-fragment'){shader=this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sdrSrc);}else if(shaderScript.type==='x-shader/x-vertex'){shader=this.getShaderFromStr(gl,gl.VERTEX_SHADER,sdrSrc);}else{return undefined;}return shader;};_.initUniformLocations=function(gl){this.modelViewMatrixUniform=gl.getUniformLocation(this.gProgram,'u_model_view_matrix');this.projectionMatrixUniform=gl.getUniformLocation(this.gProgram,'u_projection_matrix');};_.loadDefaultVertexShader=function(gl){};_.loadDefaultFragmentShader=function(gl){};_.setMatrixUniforms=function(gl,modelMatrix){if(modelMatrix===undefined){this.setModelViewMatrix(gl,gl.modelViewMatrix);}else{this.setModelViewMatrix(gl,m4.multiply(gl.modelViewMatrix,modelMatrix,[]));}};_.setProjectionMatrix=function(gl,matrix){gl.uniformMatrix4fv(this.projectionMatrixUniform,false,matrix);};_.setModelViewMatrix=function(gl,mvMatrix){gl.uniformMatrix4fv(this.modelViewMatrixUniform,false,mvMatrix);};_.setMaterialAmbientColor=function(gl,ambient){};_.setMaterialDiffuseColor=function(gl,diffuse){};_.setMaterialSpecularColor=function(gl,specular){};_.setMaterialShininess=function(gl,shininess){};_.setMaterialAlpha=function(gl,alpha){};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.FXAAShader=function(){};var _super=d3._Shader.prototype;var _=d3.FXAAShader.prototype=new d3._Shader();_.initUniformLocations=function(gl){// assign uniform properties\n_super.initUniformLocations.call(this,gl);this.buffersizeUniform=gl.getUniformLocation(this.gProgram,'u_buffersize');this.antialiasUniform=gl.getUniformLocation(this.gProgram,'u_antialias');this.edgeThresholdUniform=gl.getUniformLocation(this.gProgram,'u_edge_threshold');this.edgeThresholdMinUniform=gl.getUniformLocation(this.gProgram,'u_edge_threshold_min');this.searchStepsUniform=gl.getUniformLocation(this.gProgram,'u_search_steps');this.searchThresholdUniform=gl.getUniformLocation(this.gProgram,'u_search_threshold');this.subpixCapUniform=gl.getUniformLocation(this.gProgram,'u_subpix_cap');this.subpixTrimUniform=gl.getUniformLocation(this.gProgram,'u_subpix_trim');};_.setBuffersize=function(gl,width,height){gl.uniform2f(this.buffersizeUniform,width,height);};_.setAntialias=function(gl,val){gl.uniform1f(this.antialiasUniform,val);};_.setEdgeThreshold=function(gl,val){gl.uniform1f(this.edgeThresholdUniform,val);};_.setEdgeThresholdMin=function(gl,val){gl.uniform1f(this.edgeThresholdMinUniform,val);};_.setSearchSteps=function(gl,val){gl.uniform1i(this.searchStepsUniform,val);};_.setSearchThreshold=function(gl,val){gl.uniform1f(this.searchThresholdUniform,val);};_.setSubpixCap=function(gl,val){gl.uniform1f(this.subpixCapUniform,val);};_.setSubpixTrim=function(gl,val){gl.uniform1f(this.subpixTrimUniform,val);};_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;','varying vec2 v_texcoord;','void main() {','gl_Position = vec4(a_vertex_position, 1.);','v_texcoord = a_vertex_position.xy * .5 + .5;','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=['precision mediump float;','const int fxaaMaxSearchSteps = 128;','uniform float u_edge_threshold;','uniform float u_edge_threshold_min;','uniform int u_search_steps;','uniform float u_search_threshold;','uniform float u_subpix_cap;','uniform float u_subpix_trim;','uniform sampler2D u_sampler0;','uniform vec2 u_buffersize;','uniform bool u_antialias;','varying vec2 v_texcoord;','float FxaaLuma(vec3 rgb) {','return rgb.y * (0.587/0.299) + rgb.x;','}','vec3 FxaaLerp3(vec3 a, vec3 b, float amountOfA) {','return (vec3(-amountOfA) * b) + ((a * vec3(amountOfA)) + b);','}','vec4 FxaaTexOff(sampler2D tex, vec2 pos, vec2 off, vec2 rcpFrame) {','return texture2D(tex, pos + off * rcpFrame);','}','vec3 FxaaPixelShader(vec2 pos, sampler2D tex, vec2 rcpFrame) {','float subpix_trim_scale = (1.0/(1.0 - u_subpix_trim));','vec3 rgbN = FxaaTexOff(tex, pos.xy, vec2( 0.,-1.), rcpFrame).xyz;','vec3 rgbW = FxaaTexOff(tex, pos.xy, vec2(-1., 0.), rcpFrame).xyz;','vec3 rgbM = FxaaTexOff(tex, pos.xy, vec2( 0., 0.), rcpFrame).xyz;','vec3 rgbE = FxaaTexOff(tex, pos.xy, vec2( 1., 0.), rcpFrame).xyz;','vec3 rgbS = FxaaTexOff(tex, pos.xy, vec2( 0., 1.), rcpFrame).xyz;','float lumaN = FxaaLuma(rgbN);','float lumaW = FxaaLuma(rgbW);','float lumaM = FxaaLuma(rgbM);','float lumaE = FxaaLuma(rgbE);','float lumaS = FxaaLuma(rgbS);','float rangeMin = min(lumaM, min(min(lumaN, lumaW), min(lumaS, lumaE)));','float rangeMax = max(lumaM, max(max(lumaN, lumaW), max(lumaS, lumaE)));','float range = rangeMax - rangeMin;','if(range < max(u_edge_threshold_min, rangeMax * u_edge_threshold)) {','return rgbM;','}','vec3 rgbL = rgbN + rgbW + rgbM + rgbE + rgbS;','float lumaL = (lumaN + lumaW + lumaE + lumaS) * 0.25;','float rangeL = abs(lumaL - lumaM);','float blendL = max(0.0, (rangeL / range) - u_subpix_trim) * subpix_trim_scale;','blendL = min(u_subpix_cap, blendL);','vec3 rgbNW = FxaaTexOff(tex, pos.xy, vec2(-1.,-1.), rcpFrame).xyz;','vec3 rgbNE = FxaaTexOff(tex, pos.xy, vec2( 1.,-1.), rcpFrame).xyz;','vec3 rgbSW = FxaaTexOff(tex, pos.xy, vec2(-1., 1.), rcpFrame).xyz;','vec3 rgbSE = FxaaTexOff(tex, pos.xy, vec2( 1., 1.), rcpFrame).xyz;','rgbL += (rgbNW + rgbNE + rgbSW + rgbSE);','rgbL *= vec3(1.0/9.0);','float lumaNW = FxaaLuma(rgbNW);','float lumaNE = FxaaLuma(rgbNE);','float lumaSW = FxaaLuma(rgbSW);','float lumaSE = FxaaLuma(rgbSE);','float edgeVert =','abs((0.25 * lumaNW) + (-0.5 * lumaN) + (0.25 * lumaNE)) +','abs((0.50 * lumaW ) + (-1.0 * lumaM) + (0.50 * lumaE )) +','abs((0.25 * lumaSW) + (-0.5 * lumaS) + (0.25 * lumaSE));','float edgeHorz =','abs((0.25 * lumaNW) + (-0.5 * lumaW) + (0.25 * lumaSW)) +','abs((0.50 * lumaN ) + (-1.0 * lumaM) + (0.50 * lumaS )) +','abs((0.25 * lumaNE) + (-0.5 * lumaE) + (0.25 * lumaSE));','bool horzSpan = edgeHorz >= edgeVert;','float lengthSign = horzSpan ? -rcpFrame.y : -rcpFrame.x;','if(!horzSpan) {','lumaN = lumaW;','lumaS = lumaE;','}','float gradientN = abs(lumaN - lumaM);','float gradientS = abs(lumaS - lumaM);','lumaN = (lumaN + lumaM) * 0.5;','lumaS = (lumaS + lumaM) * 0.5;','if (gradientN < gradientS) {','lumaN = lumaS;','lumaN = lumaS;','gradientN = gradientS;','lengthSign *= -1.0;','}','vec2 posN;','posN.x = pos.x + (horzSpan ? 0.0 : lengthSign * 0.5);','posN.y = pos.y + (horzSpan ? lengthSign * 0.5 : 0.0);','gradientN *= u_search_threshold;','vec2 posP = posN;','vec2 offNP = horzSpan ? vec2(rcpFrame.x, 0.0) : vec2(0.0, rcpFrame.y);','float lumaEndN = lumaN;','float lumaEndP = lumaN;','bool doneN = false;','bool doneP = false;','posN += offNP * vec2(-1.0, -1.0);','posP += offNP * vec2( 1.0,  1.0);','for(int i = 0; i < fxaaMaxSearchSteps; i++) {','if(i >= u_search_steps) break;','if(!doneN) {','lumaEndN = FxaaLuma(texture2D(tex, posN.xy).xyz);','}','if(!doneP) {','lumaEndP = FxaaLuma(texture2D(tex, posP.xy).xyz);','}','doneN = doneN || (abs(lumaEndN - lumaN) >= gradientN);','doneP = doneP || (abs(lumaEndP - lumaN) >= gradientN);','if(doneN && doneP) {','break;','}','if(!doneN) {','posN -= offNP;','}','if(!doneP) {','posP += offNP;','}','}','float dstN = horzSpan ? pos.x - posN.x : pos.y - posN.y;','float dstP = horzSpan ? posP.x - pos.x : posP.y - pos.y;','bool directionN = dstN < dstP;','lumaEndN = directionN ? lumaEndN : lumaEndP;','if(((lumaM - lumaN) < 0.0) == ((lumaEndN - lumaN) < 0.0)) {','lengthSign = 0.0;','}','float spanLength = (dstP + dstN);','dstN = directionN ? dstN : dstP;','float subPixelOffset = (0.5 + (dstN * (-1.0/spanLength))) * lengthSign;','vec3 rgbF = texture2D(tex, vec2(','pos.x + (horzSpan ? 0.0 : subPixelOffset),','pos.y + (horzSpan ? subPixelOffset : 0.0))).xyz;','return FxaaLerp3(rgbL, rgbF, blendL);','}','void main() {','gl_FragColor = texture2D(u_sampler0, v_texcoord);','if(u_antialias) {','gl_FragColor.xyz = FxaaPixelShader(v_texcoord, u_sampler0, 1. / u_buffersize).xyz;','}','}'].join('\\n');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.LabelShader=function(){};var _super=d3._Shader.prototype;var _=d3.LabelShader.prototype=new d3._Shader();_.initUniformLocations=function(gl){_super.initUniformLocations.call(this,gl);this.dimensionUniform=gl.getUniformLocation(this.gProgram,'u_dimension');};_.onShaderAttached=function(gl){_super.onShaderAttached.call(this,gl);this.vertexTexCoordAttribute=2;gl.bindAttribLocation(this.gProgram,this.vertexTexCoordAttribute,'a_vertex_texcoord');};_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;','attribute vec3 a_vertex_normal;','attribute vec2 a_vertex_texcoord;',// matrices set by gl.setMatrixUniforms\n'uniform mat4 u_model_view_matrix;','uniform mat4 u_projection_matrix;','uniform vec2 u_dimension;',// sent to the fragment shader\n'varying vec2 v_texcoord;','void main() {','gl_Position = u_model_view_matrix * vec4(a_vertex_position, 1.);','vec4 depth_pos = vec4(gl_Position);','depth_pos.z += a_vertex_normal.z;','gl_Position = u_projection_matrix * gl_Position;','depth_pos = u_projection_matrix * depth_pos;','gl_Position /= gl_Position.w;','gl_Position.xy += a_vertex_normal.xy / u_dimension * 2.;','gl_Position.z = depth_pos.z / depth_pos.w;','v_texcoord = a_vertex_texcoord;','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=[// set macro for depth mmap texture\ngl.depthTextureExt?'#define CWC_DEPTH_TEX\\n':'',// set float precision\n'precision mediump float;',// texture for draw text nor shadow map\n'uniform sampler2D u_image;',// from the vertex shader\n'varying vec2 v_texcoord;','void main(void) {','gl_FragColor = texture2D(u_image, v_texcoord);','}'].join('');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};_.enableAttribsArray=function(gl){_super.enableAttribsArray.call(this,gl);gl.enableVertexAttribArray(this.vertexNormalAttribute);gl.enableVertexAttribArray(this.vertexTexCoordAttribute);};_.disableAttribsArray=function(gl){_super.disableAttribsArray.call(this,gl);gl.disableVertexAttribArray(this.vertexNormalAttribute);gl.disableVertexAttribArray(this.vertexTexCoordAttribute);};_.setDimension=function(gl,width,height){gl.uniform2f(this.dimensionUniform,width,height);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.LightingShader=function(){};var _super=d3._Shader.prototype;var _=d3.LightingShader.prototype=new d3._Shader();_.initUniformLocations=function(gl){_super.initUniformLocations.call(this,gl);// assign uniform properties\nthis.positionSampleUniform=gl.getUniformLocation(this.gProgram,'u_position_sample');this.colorSampleUniform=gl.getUniformLocation(this.gProgram,'u_color_sample');this.ssaoSampleUniform=gl.getUniformLocation(this.gProgram,'u_ssao_sample');this.outlineSampleUniform=gl.getUniformLocation(this.gProgram,'u_outline_sample');};_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;',// sent to the fragment shader\n'varying vec2 v_texcoord;','void main() {','gl_Position = vec4(a_vertex_position, 1.);','v_texcoord = a_vertex_position.xy * .5 + .5;','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=[// set float precision\n'precision mediump float;','uniform sampler2D u_position_sample;','uniform sampler2D u_color_sample;','uniform sampler2D u_ssao_sample;','uniform sampler2D u_outline_sample;','varying vec2 v_texcoord;','void main() {','vec4 position = texture2D(u_position_sample, v_texcoord);','vec4 color = texture2D(u_color_sample, v_texcoord);','vec4 ao = texture2D(u_ssao_sample, v_texcoord);','float outline = texture2D(u_outline_sample, v_texcoord).r;',// skip background color\n'if(position.w == 0. && outline == 1.) {',// 'gl_FragColor = vec4(0., 0., 0., 1.);',\n'return;','}','gl_FragColor = vec4(color.rgb * ao.r * outline, 1.);','}'].join('');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.NormalShader=function(){};var _super=d3._Shader.prototype;var _=d3.NormalShader.prototype=new d3._Shader();_.initUniformLocations=function(gl){_super.initUniformLocations.call(this,gl);// assign uniform properties\nthis.normalMatrixUniform=gl.getUniformLocation(this.gProgram,'u_normal_matrix');};_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;','attribute vec3 a_vertex_normal;',// matrices set by gl.setMatrixUniforms\n'uniform mat4 u_model_view_matrix;','uniform mat4 u_projection_matrix;','uniform mat3 u_normal_matrix;',// sent to the fragment shader\n'varying vec3 v_normal;','void main() {','v_normal = length(a_vertex_normal)==0. ? a_vertex_normal : u_normal_matrix * a_vertex_normal;','gl_Position = u_projection_matrix * u_model_view_matrix * vec4(a_vertex_position, 1.);','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=[// set float precision\n'precision mediump float;','varying vec3 v_normal;','void main(void) {','vec3 normal = length(v_normal)==0. ? vec3(0., 0., 1.) : normalize(v_normal);','gl_FragColor = vec4(normal, 0.);','}'].join('');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};_.enableAttribsArray=function(gl){_super.enableAttribsArray.call(this,gl);gl.enableVertexAttribArray(this.vertexNormalAttribute);};_.disableAttribsArray=function(gl){_super.disableAttribsArray.call(this,gl);gl.disableVertexAttribArray(this.vertexNormalAttribute);};_.setModelViewMatrix=function(gl,mvMatrix){_super.setModelViewMatrix.call(this,gl,mvMatrix);// create the normal matrix and push it to the graphics card\nvar normalMatrix=m3.transpose(m4.toInverseMat3(mvMatrix,[]));gl.uniformMatrix3fv(this.normalMatrixUniform,false,normalMatrix);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.OutlineShader=function(){};var _super=d3._Shader.prototype;var _=d3.OutlineShader.prototype=new d3._Shader();_.initUniformLocations=function(gl){_super.initUniformLocations.call(this,gl);this.normalSampleUniform=gl.getUniformLocation(this.gProgram,'u_normal_sample');this.depthSampleUniform=gl.getUniformLocation(this.gProgram,'u_depth_sample');this.gbufferTextureSizeUniform=gl.getUniformLocation(this.gProgram,'u_gbuffer_texture_size');this.normalThresholdUniform=gl.getUniformLocation(this.gProgram,'u_normal_threshold');this.depthThresholdUniform=gl.getUniformLocation(this.gProgram,'u_depth_threshold');this.thicknessUniform=gl.getUniformLocation(this.gProgram,'u_thickness');};_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;','varying vec2 v_texcoord;','void main() {','gl_Position = vec4(a_vertex_position, 1.);','v_texcoord = a_vertex_position.xy * .5 + .5;','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=[// set float precision\n'precision mediump float;','uniform sampler2D u_normal_sample;','uniform sampler2D u_depth_sample;','uniform float u_normal_threshold;','uniform float u_depth_threshold;','uniform float u_thickness;','uniform vec2 u_gbuffer_texture_size;','varying vec2 v_texcoord;','void main() {','vec3 normal = texture2D(u_normal_sample, v_texcoord).xyz;','float depth = texture2D(u_depth_sample, v_texcoord).r;',// check background pixel\n// 'if(depth == 1.) {',\n// \t'return;',\n// '}',\n'vec2 texelSize = u_thickness/u_gbuffer_texture_size * .5;','vec2 offsets[8];','offsets[0] = vec2(-texelSize.x, -texelSize.y);','offsets[1] = vec2(-texelSize.x, 0);','offsets[2] = vec2(-texelSize.x, texelSize.y);','offsets[3] = vec2(0, -texelSize.y);','offsets[4] = vec2(0,  texelSize.y);','offsets[5] = vec2(texelSize.x, -texelSize.y);','offsets[6] = vec2(texelSize.x, 0);','offsets[7] = vec2(texelSize.x, texelSize.y);','float edge = 0.;','for (int i = 0; i < 8; i++) {','vec3 sampleNorm = texture2D(u_normal_sample, v_texcoord + offsets[i]).xyz;','if(normal == vec3(.0, .0, .0)) {','if(sampleNorm != vec3(.0, .0, .0)) {','edge = 1.0;','break;','}','continue;','}','if (dot(sampleNorm, normal) < u_normal_threshold) {','edge = 1.0;','break;','}','float sampleDepth = texture2D(u_depth_sample, v_texcoord + offsets[i]).r;','if (abs(sampleDepth - depth) > u_depth_threshold) {','edge = 1.0;','break;','}','}','edge = 1. - edge;','gl_FragColor = vec4(edge, edge, edge, 1.);','}'].join('');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};_.setGbufferTextureSize=function(gl,width,height){gl.uniform2f(this.gbufferTextureSizeUniform,width,height);};_.setNormalThreshold=function(gl,value){gl.uniform1f(this.normalThresholdUniform,value);};_.setDepthThreshold=function(gl,value){gl.uniform1f(this.depthThresholdUniform,value);};_.setThickness=function(gl,value){gl.uniform1f(this.thicknessUniform,value);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.PhongShader=function(){};var _super=d3._Shader.prototype;var _=d3.PhongShader.prototype=new d3._Shader();_.initUniformLocations=function(gl){_super.initUniformLocations.call(this,gl);// assign uniform properties\nthis.shadowUniform=gl.getUniformLocation(this.gProgram,'u_shadow');this.flatColorUniform=gl.getUniformLocation(this.gProgram,'u_flat_color');this.normalMatrixUniform=gl.getUniformLocation(this.gProgram,'u_normal_matrix');this.lightModelViewMatrixUniform=gl.getUniformLocation(this.gProgram,'u_light_model_view_matrix');this.lightProjectionMatrixUniform=gl.getUniformLocation(this.gProgram,'u_light_projection_matrix');this.lightDiffuseColorUniform=gl.getUniformLocation(this.gProgram,'u_light_diffuse_color');this.lightSpecularColorUniform=gl.getUniformLocation(this.gProgram,'u_light_specular_color');this.lightDirectionUniform=gl.getUniformLocation(this.gProgram,'u_light_direction');this.materialAmbientColorUniform=gl.getUniformLocation(this.gProgram,'u_material_ambient_color');this.materialDiffuseColorUniform=gl.getUniformLocation(this.gProgram,'u_material_diffuse_color');this.materialSpecularColorUniform=gl.getUniformLocation(this.gProgram,'u_material_specular_color');this.materialShininessUniform=gl.getUniformLocation(this.gProgram,'u_material_shininess');this.materialAlphaUniform=gl.getUniformLocation(this.gProgram,'u_material_alpha');this.fogModeUniform=gl.getUniformLocation(this.gProgram,'u_fog_mode');this.fogColorUniform=gl.getUniformLocation(this.gProgram,'u_fog_color');this.fogStartUniform=gl.getUniformLocation(this.gProgram,'u_fog_start');this.fogEndUniform=gl.getUniformLocation(this.gProgram,'u_fog_end');this.fogDensityUniform=gl.getUniformLocation(this.gProgram,'u_fog_density');// texture for shadow map\nthis.shadowDepthSampleUniform=gl.getUniformLocation(this.gProgram,'u_shadow_depth_sample');this.shadowTextureSizeUniform=gl.getUniformLocation(this.gProgram,'u_shadow_texture_size');this.shadowIntensityUniform=gl.getUniformLocation(this.gProgram,'u_shadow_intensity');// gamma correction\nthis.gammaCorrectionUniform=gl.getUniformLocation(this.gProgram,'u_gamma_inverted');// point size\nthis.pointSizeUniform=gl.getUniformLocation(this.gProgram,'u_point_size');};_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;','attribute vec3 a_vertex_normal;',// scene uniforms\n'uniform vec3 u_light_diffuse_color;','uniform vec3 u_material_ambient_color;','uniform vec3 u_material_diffuse_color;',// matrices set by gl.setMatrixUniforms\n'uniform mat4 u_model_view_matrix;','uniform mat4 u_projection_matrix;','uniform mat3 u_normal_matrix;','uniform mat4 u_light_model_view_matrix;','uniform mat4 u_light_projection_matrix;','uniform bool u_shadow;',// sent to the fragment shader\n'varying vec3 v_viewpos;','varying vec4 v_shadcoord;','varying vec3 v_diffuse;','varying vec3 v_ambient;','varying vec3 v_normal;','uniform float u_point_size;','void main() {','v_normal = length(a_vertex_normal)==0. ? a_vertex_normal : u_normal_matrix * a_vertex_normal;','v_ambient = u_material_ambient_color;','v_diffuse = u_material_diffuse_color * u_light_diffuse_color;','if(u_shadow) {','v_shadcoord = u_light_projection_matrix * u_light_model_view_matrix * vec4(a_vertex_position, 1.);','v_shadcoord /= v_shadcoord.w;','}','vec4 viewPos = u_model_view_matrix * vec4(a_vertex_position, 1.);','v_viewpos = viewPos.xyz / viewPos.w;','gl_Position = u_projection_matrix * viewPos;',// just to make sure the w is 1\n'gl_Position /= gl_Position.w;','gl_PointSize = u_point_size;','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=[// set macro for depth mmap texture\ngl.depthTextureExt?'#define CWC_DEPTH_TEX\\n':'',// set float precision\n'precision mediump float;',// scene uniforms\n'uniform vec3 u_light_specular_color;','uniform vec3 u_light_direction;','uniform vec3 u_material_specular_color;','uniform float u_material_shininess;','uniform float u_material_alpha;','uniform int u_fog_mode;','uniform vec3 u_fog_color;','uniform float u_fog_density;','uniform float u_fog_start;','uniform float u_fog_end;','uniform bool u_shadow;','uniform float u_shadow_intensity;','uniform bool u_flat_color;','uniform float u_gamma_inverted;',// texture for shadow map\n'uniform sampler2D u_shadow_depth_sample;','uniform vec2 u_shadow_texture_size;',// from the vertex shader\n'varying vec3 v_viewpos;','varying vec4 v_shadcoord;','varying vec3 v_diffuse;','varying vec3 v_ambient;','varying vec3 v_normal;','\\n#ifndef CWC_DEPTH_TEX\\n','float unpack (vec4 colour) {','const vec4 bitShifts = vec4(1.,','1. / 255.,','1. / (255. * 255.),','1. / (255. * 255. * 255.));','return dot(colour, bitShifts);','}','\\n#endif\\n','float shadowMapDepth(vec4 shadowMapColor) {','float zShadowMap;','\\n#ifdef CWC_DEPTH_TEX\\n','zShadowMap = shadowMapColor.r;','\\n#else\\n','zShadowMap = unpack(shadowMapColor);','\\n#endif\\n','return zShadowMap;','}','void main(void) {','vec3 color = v_diffuse;','if(length(v_normal)!=0.){','vec3 normal = normalize(v_normal);','vec3 lightDir = normalize(-u_light_direction);','float nDotL = dot(normal, lightDir);','float shadow = 0.0;','if(u_shadow) {','vec3 depthCoord = .5 + v_shadcoord.xyz / v_shadcoord.w * .5;','if(depthCoord.z <= 1. && depthCoord.z >= 0.) {','float bias = max(.05 * (1. - nDotL), .005);','vec2 texelSize = 1. / u_shadow_texture_size;','for(int x = -1; x <= 1; ++x) {','for(int y = -1; y <= 1; ++y)  {','vec4 shadowMapColor = texture2D(u_shadow_depth_sample, depthCoord.xy + vec2(x, y) * texelSize);','float zShadowMap = shadowMapDepth(shadowMapColor);','shadow += zShadowMap + bias < depthCoord.z ? 1. : 0.;','}','}','shadow /= 9.;','shadow *= u_shadow_intensity;','}','}','if(!u_flat_color) {','vec3 viewDir = normalize(-v_viewpos);','vec3 halfDir = normalize(lightDir + viewDir);','float nDotHV = max(dot(halfDir, normal), 0.);','vec3 specular = u_material_specular_color * u_light_specular_color;','color*=max(nDotL, 0.);','color+=specular * pow(nDotHV, u_material_shininess);','}',// set the color\n'color = (1.-shadow)*color+v_ambient;','}','gl_FragColor = vec4(pow(color, vec3(u_gamma_inverted)), u_material_alpha);','if(u_fog_mode != 0){','float fogCoord = 1.-clamp((u_fog_end - gl_FragCoord.z/gl_FragCoord.w) / (u_fog_end - u_fog_start), 0., 1.);','float fogFactor = 1.;',// linear equation\n'if(u_fog_mode == 1){','fogFactor = 1.-fogCoord;','}',// exp equation\n'else if(u_fog_mode == 2) {','fogFactor = clamp(exp(-u_fog_density*fogCoord), 0., 1.);','}',// exp2 equation\n'else if(u_fog_mode == 3) {','fogFactor = clamp(exp(-pow(u_fog_density*fogCoord, 2.)), 0., 1.);','}','gl_FragColor = mix(vec4(u_fog_color, 1.), gl_FragColor, fogFactor);',// for debugging\n// 'gl_FragColor = vec4(vec3(fogFactor), 1.);',\n'}','}'].join('');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};_.enableAttribsArray=function(gl){_super.enableAttribsArray.call(this,gl);gl.enableVertexAttribArray(this.vertexNormalAttribute);};_.disableAttribsArray=function(gl){_super.disableAttribsArray.call(this,gl);gl.disableVertexAttribArray(this.vertexNormalAttribute);};_.setMatrixUniforms=function(gl,modelMatrix){if(modelMatrix===undefined){this.setModelViewMatrix(gl,gl.modelViewMatrix);this.setLightModelViewMatrix(gl,gl.lightViewMatrix);}else{var mvMatrix=m4.multiply(gl.modelViewMatrix,modelMatrix,[]);var lightModelViewMatrix=m4.multiply(gl.lightViewMatrix,modelMatrix,[]);this.setModelViewMatrix(gl,mvMatrix);this.setLightModelViewMatrix(gl,lightModelViewMatrix);}};_.setModelViewMatrix=function(gl,mvMatrix){_super.setModelViewMatrix.call(this,gl,mvMatrix);// create the normal matrix and push it to the graphics card\nvar normalMatrix=m3.transpose(m4.toInverseMat3(mvMatrix,[]));gl.uniformMatrix3fv(this.normalMatrixUniform,false,normalMatrix);};_.setFlatColor=function(gl,enabled){gl.uniform1i(this.flatColorUniform,enabled);};_.setShadow=function(gl,enabled){gl.uniform1i(this.shadowUniform,enabled);};_.setFogMode=function(gl,mode){gl.uniform1i(this.fogModeUniform,mode);};_.setFogColor=function(gl,color){gl.uniform3fv(this.fogColorUniform,color);};_.setFogStart=function(gl,fogStart){gl.uniform1f(this.fogStartUniform,fogStart);};_.setFogEnd=function(gl,fogEnd){gl.uniform1f(this.fogEndUniform,fogEnd);};_.setFogDensity=function(gl,density){gl.uniform1f(this.fogDensityUniform,density);};_.setMaterialAmbientColor=function(gl,ambient){gl.uniform3fv(this.materialAmbientColorUniform,ambient);};_.setMaterialDiffuseColor=function(gl,diffuse){gl.uniform3fv(this.materialDiffuseColorUniform,diffuse);};_.setMaterialSpecularColor=function(gl,specular){gl.uniform3fv(this.materialSpecularColorUniform,specular);};_.setMaterialShininess=function(gl,shininess){gl.uniform1f(this.materialShininessUniform,shininess);};_.setMaterialAlpha=function(gl,alpha){gl.uniform1f(this.materialAlphaUniform,alpha);};_.setLightDiffuseColor=function(gl,diffuse){gl.uniform3fv(this.lightDiffuseColorUniform,diffuse);};_.setLightSpecularColor=function(gl,specular){gl.uniform3fv(this.lightSpecularColorUniform,specular);};_.setLightDirection=function(gl,direction){gl.uniform3fv(this.lightDirectionUniform,direction);};_.setLightModelViewMatrix=function(gl,mvMatrix){gl.uniformMatrix4fv(this.lightModelViewMatrixUniform,false,mvMatrix);};_.setLightProjectionMatrix=function(gl,matrix){gl.uniformMatrix4fv(this.lightProjectionMatrixUniform,false,matrix);};_.setShadowTextureSize=function(gl,width,height){gl.uniform2f(this.shadowTextureSizeUniform,width,height);};_.setShadowIntensity=function(gl,intensity){gl.uniform1f(this.shadowIntensityUniform,intensity);};_.setGammaCorrection=function(gl,gammaCorrection){// make sure gamma correction is inverted here as it is more efficient in the shader\ngl.uniform1f(this.gammaCorrectionUniform,1.0/gammaCorrection);};_.setPointSize=function(gl,pointSize){gl.uniform1f(this.pointSizeUniform,pointSize);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.PickShader=function(){};var _super=d3._Shader.prototype;var _=d3.PickShader.prototype=new d3._Shader();_.initUniformLocations=function(gl){// assign uniform properties\n_super.initUniformLocations.call(this,gl);this.materialDiffuseColorUniform=gl.getUniformLocation(this.gProgram,'u_material_diffuse_color');};_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;',// matrices set by gl.setMatrixUniforms\n'uniform mat4 u_model_view_matrix;','uniform mat4 u_projection_matrix;','void main() {','gl_Position = u_projection_matrix * u_model_view_matrix * vec4(a_vertex_position, 1.);',// just to make sure the w is 1\n'gl_Position /= gl_Position.w;','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=[// set macro for depth mmap texture\ngl.depthTextureExt?'#define CWC_DEPTH_TEX\\n':'',// set float precision\n'precision mediump float;','uniform vec3 u_material_diffuse_color;','void main(void) {','gl_FragColor = vec4(u_material_diffuse_color, 1.);','}'].join('');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};_.setMaterialDiffuseColor=function(gl,diffuse){gl.uniform3fv(this.materialDiffuseColorUniform,diffuse);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.PositionShader=function(){};var _super=d3._Shader.prototype;var _=d3.PositionShader.prototype=new d3._Shader();_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;',// matrices set by gl.setMatrixUniforms\n'uniform mat4 u_model_view_matrix;','uniform mat4 u_projection_matrix;','varying vec4 v_position;','void main() {','vec4 viewPos = u_model_view_matrix * vec4(a_vertex_position, 1.);','gl_Position = u_projection_matrix * viewPos;','v_position = viewPos / viewPos.w;','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=[// set float precision\n'precision mediump float;','varying vec4 v_position;','void main(void) {','gl_FragColor = v_position;','}'].join('');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(d3,m3,m4,document,undefined){'use strict';d3.QuadShader=function(){};var _=d3.QuadShader.prototype=new d3._Shader();_.loadDefaultVertexShader=function(gl){var sb=['precision mediump float;',// attributes set when rendering objects\n'attribute vec3 a_vertex_position;','varying vec2 v_texcoord;','void main() {','gl_Position = vec4(a_vertex_position, 1.);','v_texcoord = a_vertex_position.xy * .5 + .5;','}'].join('');return this.getShaderFromStr(gl,gl.VERTEX_SHADER,sb);};_.loadDefaultFragmentShader=function(gl){var sb=[// set float precision\n'precision mediump float;','uniform sampler2D u_image;','varying vec2 v_texcoord;','void main() {','gl_FragColor = texture2D(u_image, v_texcoord);','}'].join('');return this.getShaderFromStr(gl,gl.FRAGMENT_SHADER,sb);};})(ChemDoodle.structures.d3,ChemDoodle.lib.mat3,ChemDoodle.lib.mat4,document);(function(structures,d3,ELEMENT,MarchingCubes,v3,m,undefined){'use strict';var Triangle=function Triangle(i1,i2,i3){this.i1=i1;this.i2=i2;this.i3=i3;};function getRange(atoms,probeRadius){var r=[Infinity,-Infinity,Infinity,-Infinity,Infinity,-Infinity];var add=probeRadius+2;for(var i=0,ii=atoms.length;i<ii;i++){var a=atoms[i];r[0]=m.min(r[0],a.x-add);r[1]=m.max(r[1],a.x+add);r[2]=m.min(r[2],a.y-add);r[3]=m.max(r[3],a.y+add);r[4]=m.min(r[4],a.z-add);r[5]=m.max(r[5],a.z+add);}return r;};function addPoint(p,points,xs,ys,zs,step){// transform back into real space\nvar px=p[0]*step+xs-step;var py=p[1]*step+ys-step;var pz=p[2]*step+zs-step;// find any previous match\nvar index=-1;var cutoff=1E-3;for(var j=0,jj=points.length;j<jj;j++){var pj=points[j];if(m.abs(pj.x-px)<cutoff&&m.abs(pj.y-py)<cutoff&&m.abs(pj.z-pz)<cutoff){index=j;break;}}if(index==-1){index=points.length;points.push(new structures.Atom('C',px,py,pz));}return index;};d3._Surface=function(){};var _=d3._Surface.prototype=new d3._Mesh();_.generate=function(xdif,ydif,zdif,step,range,xsteps,ysteps,zsteps){// generate the function\nvar vals=[];var z=range[4]-step;for(var k=0;k<zsteps;k++){var y=range[2]-step;for(var j=0;j<ysteps;j++){var x=range[0]-step;for(var i=0;i<xsteps;i++){vals.push(this.calculate(x,y,z));x+=step;}y+=step;}z+=step;}return vals;};_.build=function(atoms,probeRadius,resolution){var positionData=[];var normalData=[];var indexData=[];// calculate the range of the function\nvar range=getRange(atoms,probeRadius);var xdif=range[1]-range[0];var ydif=range[3]-range[2];var zdif=range[5]-range[4];var step=m.min(xdif,m.min(ydif,zdif))/resolution;// generate the function\nvar xsteps=2+m.ceil(xdif/step);var ysteps=2+m.ceil(ydif/step);var zsteps=2+m.ceil(zdif/step);var vals=this.generate(xdif,ydif,zdif,step,range,xsteps,ysteps,zsteps);// marching cubes\nvar mesh=MarchingCubes(vals,[xsteps,ysteps,zsteps]);// build surface\nvar ps=[];var is=[];for(var i=0,ii=mesh.vertices.length;i<ii;i++){is.push(addPoint(mesh.vertices[i],ps,range[0],range[2],range[4],step));}// triangles\nvar triangles=[];for(var i=0,ii=mesh.faces.length;i<ii;i++){var f=mesh.faces[i];var i1=is[f[0]];var i2=is[f[1]];var i3=is[f[2]];triangles.push(new Triangle(i1,i2,i3));indexData.push(i1,i2,i3);}// smoothing - 1 pass\nvar savedConnections=[];for(var i=0,ii=ps.length;i<ii;i++){var connections=[];for(var j=0,jj=triangles.length;j<jj;j++){var t=triangles[j];if(t.i1===i||t.i2===i||t.i3===i){if(t.i1!=i&&connections.indexOf(t.i1)===-1){connections.push(t.i1);}if(t.i2!=i&&connections.indexOf(t.i2)===-1){connections.push(t.i2);}if(t.i3!=i&&connections.indexOf(t.i3)===-1){connections.push(t.i3);}}}savedConnections.push(connections);}var tmp=[];for(var i=0,ii=ps.length;i<ii;i++){var pi=ps[i];var connections=savedConnections[i];var pt=new structures.Atom();if(connections.length<3){pt.x=pi.x;pt.y=pi.y;pt.z=pi.z;}else{var wt=1;if(connections.length<5){wt=.5;}for(var j=0,jj=connections.length;j<jj;j++){var pc=ps[connections[j]];pt.x+=pc.x;pt.y+=pc.y;pt.z+=pc.z;}pt.x+=pi.x*wt;pt.y+=pi.y*wt;pt.z+=pi.z*wt;var scale=1/(wt+connections.length);pt.x*=scale;pt.y*=scale;pt.z*=scale;}tmp.push(pt);}ps=tmp;for(var i=0,ii=ps.length;i<ii;i++){var pi=ps[i];positionData.push(pi.x,pi.y,pi.z);}// normals\nfor(var i=0,ii=triangles.length;i<ii;i++){var t=triangles[i];var p1=ps[t.i1];var p2=ps[t.i2];var p3=ps[t.i3];var v12=[p2.x-p1.x,p2.y-p1.y,p2.z-p1.z];var v13=[p3.x-p1.x,p3.y-p1.y,p3.z-p1.z];v3.cross(v12,v13);if(isNaN(v12[0])){// for some reason, origin shows up as some points and should be\n// ignored\nv12=[0,0,0];}t.normal=v12;}for(var i=0,ii=ps.length;i<ii;i++){var sum=[0,0,0];for(var j=0,jj=triangles.length;j<jj;j++){var t=triangles[j];if(t.i1===i||t.i2===i||t.i3===i){sum[0]+=t.normal[0];sum[1]+=t.normal[1];sum[2]+=t.normal[2];}}v3.normalize(sum);normalData.push(sum[0],sum[1],sum[2]);}this.storeData(positionData,normalData,indexData);};_.render=function(gl,specs){if(this.specs){specs=this.specs;}if(!specs.surfaces_display){return;}gl.shader.setMatrixUniforms(gl);this.bindBuffers(gl);// colors\ngl.material.setTempColors(gl,specs.surfaces_materialAmbientColor_3D,specs.surfaces_color,specs.surfaces_materialSpecularColor_3D,specs.surfaces_materialShininess_3D);// alpha must be set after temp colors as that function sets alpha to 1\ngl.material.setAlpha(gl,specs.surfaces_alpha);// render\nif(specs.surfaces_style==='Dots'){// dots\n//gl.pointSize(1);\n// pointSize isn't part of WebGL API, so we have to make it a shader uniform in the vertex shader\ngl.shader.setPointSize(gl,specs.shapes_pointSize);//gl.drawArrays(gl.POINTS, 0, this.vertexIndexBuffer.numItems);\ngl.drawElements(gl.POINTS,this.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}else if(specs.surfaces_style==='Mesh'){// mesh\ngl.lineWidth(specs.shapes_lineWidth);//gl.polygonMode(gl.FRONT_AND_BACK, gl.LINE);\ngl.drawElements(gl.LINES,this.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);//gl.polygonMode(gl.FRONT_AND_BACK, gl.FILL);\n}else{// solid\ngl.drawElements(gl.TRIANGLES,this.vertexIndexBuffer.numItems,gl.UNSIGNED_SHORT,0);}};})(ChemDoodle.structures,ChemDoodle.structures.d3,ChemDoodle.ELEMENT,ChemDoodle.lib.MarchingCubes,ChemDoodle.lib.vec3,Math);(function(structures,d3,ELEMENT,m,undefined){'use strict';d3.SASSurface=function(atoms,probeRadius,resolution){this.atoms=atoms;this.probeRadius=probeRadius;this.resolution=resolution;this.build(atoms,probeRadius,resolution);};var _=d3.SASSurface.prototype=new d3._Surface();_.calculate=function(x,y,z){var min=Infinity;var p=new structures.Atom('C',x,y,z);for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];var vdwRadius=ELEMENT[a.label]&&ELEMENT[a.label].vdWRadius!==0?ELEMENT[a.label].vdWRadius:2;var distanceCenter=a.distance3D(p)-this.probeRadius;var distanceSurface=distanceCenter-vdwRadius;min=m.min(min,distanceSurface);}return min;};})(ChemDoodle.structures,ChemDoodle.structures.d3,ChemDoodle.ELEMENT,Math);(function(structures,d3,ELEMENT,m,undefined){'use strict';d3.VDWSurface=function(atoms,resolution){this.atoms=atoms;this.probeRadius=0;this.resolution=resolution;this.build(atoms,0,resolution);};var _=d3.VDWSurface.prototype=new d3._Surface();_.calculate=function(x,y,z){var min=Infinity;var p=new structures.Atom('C',x,y,z);for(var i=0,ii=this.atoms.length;i<ii;i++){var a=this.atoms[i];var vdwRadius=ELEMENT[a.label]&&ELEMENT[a.label].vdWRadius!==0?ELEMENT[a.label].vdWRadius:2;var distanceCenter=a.distance3D(p);var distanceSurface=distanceCenter-vdwRadius;min=m.min(min,distanceSurface);}return min;};})(ChemDoodle.structures,ChemDoodle.structures.d3,ChemDoodle.ELEMENT,Math);(function(structures,extensions,m,undefined){'use strict';structures.Plate=function(lanes){this.lanes=new Array(lanes);for(i=0,ii=lanes;i<ii;i++){this.lanes[i]=[];}};var _=structures.Plate.prototype;_.sort=function(){for(i=0,ii=this.lanes.length;i<ii;i++){this.lanes[i].sort(function(a,b){return a-b;});}};_.draw=function(ctx,specs){// Front and origin\nvar width=ctx.canvas.width;var height=ctx.canvas.height;this.origin=9*height/10;this.front=height/10;this.laneLength=this.origin-this.front;ctx.strokeStyle='#000000';ctx.beginPath();ctx.moveTo(0,this.front);ctx.lineTo(width,this.front);ctx.setLineDash([3]);ctx.stroke();ctx.setLineDash([]);ctx.beginPath();ctx.moveTo(0,this.origin);ctx.lineTo(width,this.origin);ctx.closePath();ctx.stroke();// Lanes\nfor(i=0,ii=this.lanes.length;i<ii;i++){var laneX=(i+1)*width/(ii+1);ctx.beginPath();ctx.moveTo(laneX,this.origin);ctx.lineTo(laneX,this.origin+3);ctx.closePath();ctx.stroke();// Spots\nfor(s=0,ss=this.lanes[i].length;s<ss;s++){var spotY=this.origin-this.laneLength*this.lanes[i][s].rf;switch(this.lanes[i][s].type){case'compact':ctx.beginPath();ctx.arc(laneX,spotY,3,0,2*m.PI,false);ctx.closePath();break;case'expanded':ctx.beginPath();ctx.arc(laneX,spotY,7,0,2*m.PI,false);ctx.closePath();break;case'trailing':// trailing\nbreak;case'widened':extensions.contextEllipse(ctx,laneX-18,spotY-10,36,10);break;case'cresent':ctx.beginPath();ctx.arc(laneX,spotY,9,0,m.PI,true);ctx.closePath();break;}switch(this.lanes[i][s].style){case'solid':ctx.fillStyle='#000000';ctx.fill();break;case'transparent':ctx.stroke();break;case'gradient':// gradient\nbreak;}}}};structures.Plate.Spot=function(type,rf,style){this.type=type;this.rf=rf;this.style=style?style:'solid';};})(ChemDoodle.structures,ChemDoodle.extensions,Math);(function(c,structures,m,JSON,undefined){'use strict';// default canvas properties\nc.default_backgroundColor='#FFFFFF';c.default_scale=1;c.default_rotateAngle=0;c.default_bondLength_2D=20;c.default_angstromsPerBondLength=1.25;c.default_lightDirection_3D=[-.1,-.1,-1];c.default_lightDiffuseColor_3D='#FFFFFF';c.default_lightSpecularColor_3D='#FFFFFF';c.default_projectionPerspective_3D=true;c.default_projectionPerspectiveVerticalFieldOfView_3D=45;c.default_projectionOrthoWidth_3D=40;c.default_projectionWidthHeightRatio_3D=undefined;c.default_projectionFrontCulling_3D=.1;c.default_projectionBackCulling_3D=10000;c.default_cullBackFace_3D=true;c.default_fog_mode_3D=0;c.default_fog_color_3D='#000000';c.default_fog_start_3D=0;c.default_fog_end_3D=1;c.default_fog_density_3D=1;c.default_shadow_3D=false;c.default_shadow_intensity_3D=.85;c.default_flat_color_3D=false;c.default_antialias_3D=true;c.default_gammaCorrection_3D=2.2;c.default_colorHover='#885110';c.default_colorSelect='#0060B2';c.default_colorError='#c10000';c.default_colorPreview='#00FF00';// 3D shaders\n// default ssao\nc.default_ssao_3D=false;c.default_ssao_kernel_radius=17;c.default_ssao_kernel_samples=32;c.default_ssao_power=1.0;// default outline 3D\nc.default_outline_3D=false;c.default_outline_thickness=1.0;c.default_outline_normal_threshold=0.85;c.default_outline_depth_threshold=0.1;// defult fxaa antialiasing\nc.default_fxaa_edgeThreshold=1.0/16.0;c.default_fxaa_edgeThresholdMin=1.0/12.0;c.default_fxaa_searchSteps=64;c.default_fxaa_searchThreshold=1.0/4.0;c.default_fxaa_subpixCap=1.0;c.default_fxaa_subpixTrim=0.0;// default atom properties\nc.default_atoms_display=true;c.default_atoms_color='#000000';c.default_atoms_font_size_2D=12;c.default_atoms_font_families_2D=['Helvetica','Arial','Dialog'];c.default_atoms_font_bold_2D=false;c.default_atoms_font_italic_2D=false;c.default_atoms_circles_2D=false;c.default_atoms_circleDiameter_2D=10;c.default_atoms_circleBorderWidth_2D=1;c.default_atoms_lonePairDistance_2D=8;c.default_atoms_lonePairSpread_2D=4;c.default_atoms_lonePairDiameter_2D=1;c.default_atoms_useJMOLColors=false;c.default_atoms_usePYMOLColors=false;c.default_atoms_HBlack_2D=true;c.default_atoms_implicitHydrogens_2D=true;c.default_atoms_displayTerminalCarbonLabels_2D=false;c.default_atoms_showHiddenCarbons_2D=true;c.default_atoms_showAttributedCarbons_2D=true;c.default_atoms_displayAllCarbonLabels_2D=false;c.default_atoms_resolution_3D=30;c.default_atoms_sphereDiameter_3D=.8;c.default_atoms_useVDWDiameters_3D=false;c.default_atoms_vdwMultiplier_3D=1;c.default_atoms_materialAmbientColor_3D='#000000';c.default_atoms_materialSpecularColor_3D='#555555';c.default_atoms_materialShininess_3D=32;c.default_atoms_nonBondedAsStars_3D=false;c.default_atoms_displayLabels_3D=false;// default bond properties\nc.default_bonds_display=true;c.default_bonds_color='#000000';c.default_bonds_width_2D=1;c.default_bonds_useAbsoluteSaturationWidths_2D=true;c.default_bonds_saturationWidth_2D=.2;c.default_bonds_saturationWidthAbs_2D=5;c.default_bonds_ends_2D='round';c.default_bonds_splitColor=false;c.default_bonds_colorGradient=false;c.default_bonds_saturationAngle_2D=m.PI/3;c.default_bonds_symmetrical_2D=false;c.default_bonds_clearOverlaps_2D=false;c.default_bonds_overlapClearWidth_2D=.5;c.default_bonds_atomLabelBuffer_2D=1;c.default_bonds_wedgeThickness_2D=6;c.default_bonds_wavyLength_2D=4;c.default_bonds_hashWidth_2D=1;c.default_bonds_hashSpacing_2D=2.5;c.default_bonds_dotSize_2D=2;c.default_bonds_lewisStyle_2D=false;c.default_bonds_showBondOrders_3D=false;c.default_bonds_resolution_3D=30;c.default_bonds_renderAsLines_3D=false;c.default_bonds_cylinderDiameter_3D=.3;c.default_bonds_pillLatitudeResolution_3D=10;c.default_bonds_pillLongitudeResolution_3D=20;c.default_bonds_pillHeight_3D=.3;c.default_bonds_pillSpacing_3D=.1;c.default_bonds_pillDiameter_3D=.3;c.default_bonds_materialAmbientColor_3D='#000000';c.default_bonds_materialSpecularColor_3D='#555555';c.default_bonds_materialShininess_3D=32;// default macromolecular properties\nc.default_proteins_displayRibbon=true;c.default_proteins_displayBackbone=false;c.default_proteins_backboneThickness=1.5;c.default_proteins_backboneColor='#CCCCCC';c.default_proteins_ribbonCartoonize=false;c.default_proteins_displayPipePlank=false;// shapely, amino, polarity, rainbow, acidity\nc.default_proteins_residueColor='none';c.default_proteins_primaryColor='#FF0D0D';c.default_proteins_secondaryColor='#FFFF30';c.default_proteins_ribbonCartoonHelixPrimaryColor='#00E740';c.default_proteins_ribbonCartoonHelixSecondaryColor='#9905FF';c.default_proteins_ribbonCartoonSheetColor='#E8BB99';c.default_proteins_tubeColor='#FF0D0D';c.default_proteins_tubeResolution_3D=15;c.default_proteins_ribbonThickness=.2;c.default_proteins_tubeThickness=0.5;c.default_proteins_plankSheetWidth=3.5;c.default_proteins_cylinderHelixDiameter=4;c.default_proteins_verticalResolution=8;c.default_proteins_horizontalResolution=8;c.default_proteins_materialAmbientColor_3D='#000000';c.default_proteins_materialSpecularColor_3D='#555555';c.default_proteins_materialShininess_3D=32;c.default_nucleics_display=true;c.default_nucleics_tubeColor='#CCCCCC';c.default_nucleics_baseColor='#C10000';// shapely, rainbow\nc.default_nucleics_residueColor='none';c.default_nucleics_tubeThickness=1.5;c.default_nucleics_tubeResolution_3D=15;c.default_nucleics_verticalResolution=8;c.default_nucleics_materialAmbientColor_3D='#000000';c.default_nucleics_materialSpecularColor_3D='#555555';c.default_nucleics_materialShininess_3D=32;c.default_macro_displayAtoms=false;c.default_macro_displayBonds=false;c.default_macro_atomToLigandDistance=-1;c.default_macro_showWater=false;c.default_macro_colorByChain=false;c.default_macro_rainbowColors=['#0000FF','#00FFFF','#00FF00','#FFFF00','#FF0000'];// default surface properties\nc.default_surfaces_display=true;c.default_surfaces_alpha=.5;c.default_surfaces_style='Solid';c.default_surfaces_color='white';c.default_surfaces_materialAmbientColor_3D='#000000';c.default_surfaces_materialSpecularColor_3D='#000000';c.default_surfaces_materialShininess_3D=32;// default spectrum properties\nc.default_plots_color='#000000';c.default_plots_width=1;c.default_plots_showIntegration=false;c.default_plots_integrationColor='#c10000';c.default_plots_integrationLineWidth=1;c.default_plots_showGrid=false;c.default_plots_gridColor='gray';c.default_plots_gridLineWidth=.5;c.default_plots_showYAxis=true;c.default_plots_flipXAxis=false;// default shape properties\nc.default_text_font_size=12;c.default_text_font_families=['Helvetica','Arial','Dialog'];c.default_text_font_bold=true;c.default_text_font_italic=false;c.default_text_font_stroke_3D=true;c.default_text_color='#000000';c.default_shapes_color='#000000';c.default_shapes_lineWidth=1;c.default_shapes_pointSize=2;c.default_shapes_arrowLength_2D=8;c.default_compass_display=false;c.default_compass_axisXColor_3D='#FF0000';c.default_compass_axisYColor_3D='#00FF00';c.default_compass_axisZColor_3D='#0000FF';c.default_compass_size_3D=50;c.default_compass_resolution_3D=10;c.default_compass_displayText_3D=true;c.default_compass_type_3D=0;c.default_measurement_update_3D=false;c.default_measurement_angleBands_3D=10;c.default_measurement_displayText_3D=true;structures.VisualSpecifications=function(){// canvas properties\nthis.backgroundColor=c.default_backgroundColor;this.scale=c.default_scale;this.rotateAngle=c.default_rotateAngle;this.bondLength_2D=c.default_bondLength_2D;this.angstromsPerBondLength=c.default_angstromsPerBondLength;this.lightDirection_3D=c.default_lightDirection_3D.slice(0);this.lightDiffuseColor_3D=c.default_lightDiffuseColor_3D;this.lightSpecularColor_3D=c.default_lightSpecularColor_3D;this.projectionPerspective_3D=c.default_projectionPerspective_3D;this.projectionPerspectiveVerticalFieldOfView_3D=c.default_projectionPerspectiveVerticalFieldOfView_3D;this.projectionOrthoWidth_3D=c.default_projectionOrthoWidth_3D;this.projectionWidthHeightRatio_3D=c.default_projectionWidthHeightRatio_3D;this.projectionFrontCulling_3D=c.default_projectionFrontCulling_3D;this.projectionBackCulling_3D=c.default_projectionBackCulling_3D;this.cullBackFace_3D=c.default_cullBackFace_3D;this.fog_mode_3D=c.default_fog_mode_3D;this.fog_color_3D=c.default_fog_color_3D;this.fog_start_3D=c.default_fog_start_3D;this.fog_end_3D=c.default_fog_end_3D;this.fog_density_3D=c.default_fog_density_3D;this.shadow_3D=c.default_shadow_3D;this.shadow_intensity_3D=c.default_shadow_intensity_3D;this.flat_color_3D=c.default_flat_color_3D;this.antialias_3D=c.default_antialias_3D;this.gammaCorrection_3D=c.default_gammaCorrection_3D;this.colorHover=c.default_colorHover;this.colorSelect=c.default_colorSelect;this.colorError=c.default_colorError;this.colorPreview=c.default_colorPreview;// 3D shaders\n// ssao properties\nthis.ssao_3D=c.default_ssao_3D;this.ssao_kernel_radius=c.default_ssao_kernel_radius;this.ssao_kernel_samples=c.default_ssao_kernel_samples;this.ssao_power=c.default_ssao_power;// outline properties\nthis.outline_3D=c.default_outline_3D;this.outline_normal_threshold=c.default_outline_normal_threshold;this.outline_depth_threshold=c.default_outline_depth_threshold;this.outline_thickness=c.default_outline_thickness;// fxaa properties\nthis.fxaa_edgeThreshold=c.default_fxaa_edgeThreshold;this.fxaa_edgeThresholdMin=c.default_fxaa_edgeThresholdMin;this.fxaa_searchSteps=c.default_fxaa_searchSteps;this.fxaa_searchThreshold=c.default_fxaa_searchThreshold;this.fxaa_subpixCap=c.default_fxaa_subpixCap;this.fxaa_subpixTrim=c.default_fxaa_subpixTrim;// atom properties\nthis.atoms_display=c.default_atoms_display;this.atoms_color=c.default_atoms_color;this.atoms_font_size_2D=c.default_atoms_font_size_2D;this.atoms_font_families_2D=c.default_atoms_font_families_2D.slice(0);this.atoms_font_bold_2D=c.default_atoms_font_bold_2D;this.atoms_font_italic_2D=c.default_atoms_font_italic_2D;this.atoms_circles_2D=c.default_atoms_circles_2D;this.atoms_circleDiameter_2D=c.default_atoms_circleDiameter_2D;this.atoms_circleBorderWidth_2D=c.default_atoms_circleBorderWidth_2D;this.atoms_lonePairDistance_2D=c.default_atoms_lonePairDistance_2D;this.atoms_lonePairSpread_2D=c.default_atoms_lonePairSpread_2D;this.atoms_lonePairDiameter_2D=c.default_atoms_lonePairDiameter_2D;this.atoms_useJMOLColors=c.default_atoms_useJMOLColors;this.atoms_usePYMOLColors=c.default_atoms_usePYMOLColors;this.atoms_HBlack_2D=c.default_atoms_HBlack_2D;this.atoms_implicitHydrogens_2D=c.default_atoms_implicitHydrogens_2D;this.atoms_displayTerminalCarbonLabels_2D=c.default_atoms_displayTerminalCarbonLabels_2D;this.atoms_showHiddenCarbons_2D=c.default_atoms_showHiddenCarbons_2D;this.atoms_showAttributedCarbons_2D=c.default_atoms_showAttributedCarbons_2D;this.atoms_displayAllCarbonLabels_2D=c.default_atoms_displayAllCarbonLabels_2D;this.atoms_resolution_3D=c.default_atoms_resolution_3D;this.atoms_sphereDiameter_3D=c.default_atoms_sphereDiameter_3D;this.atoms_useVDWDiameters_3D=c.default_atoms_useVDWDiameters_3D;this.atoms_vdwMultiplier_3D=c.default_atoms_vdwMultiplier_3D;this.atoms_materialAmbientColor_3D=c.default_atoms_materialAmbientColor_3D;this.atoms_materialSpecularColor_3D=c.default_atoms_materialSpecularColor_3D;this.atoms_materialShininess_3D=c.default_atoms_materialShininess_3D;this.atoms_nonBondedAsStars_3D=c.default_atoms_nonBondedAsStars_3D;this.atoms_displayLabels_3D=c.default_atoms_displayLabels_3D;// bond properties\nthis.bonds_display=c.default_bonds_display;this.bonds_color=c.default_bonds_color;this.bonds_width_2D=c.default_bonds_width_2D;this.bonds_useAbsoluteSaturationWidths_2D=c.default_bonds_useAbsoluteSaturationWidths_2D;this.bonds_saturationWidth_2D=c.default_bonds_saturationWidth_2D;this.bonds_saturationWidthAbs_2D=c.default_bonds_saturationWidthAbs_2D;this.bonds_ends_2D=c.default_bonds_ends_2D;this.bonds_splitColor=c.default_bonds_splitColor;this.bonds_colorGradient=c.default_bonds_colorGradient;this.bonds_saturationAngle_2D=c.default_bonds_saturationAngle_2D;this.bonds_symmetrical_2D=c.default_bonds_symmetrical_2D;this.bonds_clearOverlaps_2D=c.default_bonds_clearOverlaps_2D;this.bonds_overlapClearWidth_2D=c.default_bonds_overlapClearWidth_2D;this.bonds_atomLabelBuffer_2D=c.default_bonds_atomLabelBuffer_2D;this.bonds_wedgeThickness_2D=c.default_bonds_wedgeThickness_2D;this.bonds_wavyLength_2D=c.default_bonds_wavyLength_2D;this.bonds_hashWidth_2D=c.default_bonds_hashWidth_2D;this.bonds_hashSpacing_2D=c.default_bonds_hashSpacing_2D;this.bonds_dotSize_2D=c.default_bonds_dotSize_2D;this.bonds_lewisStyle_2D=c.default_bonds_lewisStyle_2D;this.bonds_showBondOrders_3D=c.default_bonds_showBondOrders_3D;this.bonds_resolution_3D=c.default_bonds_resolution_3D;this.bonds_renderAsLines_3D=c.default_bonds_renderAsLines_3D;this.bonds_cylinderDiameter_3D=c.default_bonds_cylinderDiameter_3D;this.bonds_pillHeight_3D=c.default_bonds_pillHeight_3D;this.bonds_pillLatitudeResolution_3D=c.default_bonds_pillLatitudeResolution_3D;this.bonds_pillLongitudeResolution_3D=c.default_bonds_pillLongitudeResolution_3D;this.bonds_pillSpacing_3D=c.default_bonds_pillSpacing_3D;this.bonds_pillDiameter_3D=c.default_bonds_pillDiameter_3D;this.bonds_materialAmbientColor_3D=c.default_bonds_materialAmbientColor_3D;this.bonds_materialSpecularColor_3D=c.default_bonds_materialSpecularColor_3D;this.bonds_materialShininess_3D=c.default_bonds_materialShininess_3D;// macromolecular properties\nthis.proteins_displayRibbon=c.default_proteins_displayRibbon;this.proteins_displayBackbone=c.default_proteins_displayBackbone;this.proteins_backboneThickness=c.default_proteins_backboneThickness;this.proteins_backboneColor=c.default_proteins_backboneColor;this.proteins_ribbonCartoonize=c.default_proteins_ribbonCartoonize;this.proteins_residueColor=c.default_proteins_residueColor;this.proteins_primaryColor=c.default_proteins_primaryColor;this.proteins_secondaryColor=c.default_proteins_secondaryColor;this.proteins_ribbonCartoonHelixPrimaryColor=c.default_proteins_ribbonCartoonHelixPrimaryColor;this.proteins_ribbonCartoonHelixSecondaryColor=c.default_proteins_ribbonCartoonHelixSecondaryColor;this.proteins_tubeColor=c.default_proteins_tubeColor;this.proteins_tubeResolution_3D=c.default_proteins_tubeResolution_3D;this.proteins_displayPipePlank=c.default_proteins_displayPipePlank;this.proteins_ribbonCartoonSheetColor=c.default_proteins_ribbonCartoonSheetColor;this.proteins_ribbonThickness=c.default_proteins_ribbonThickness;this.proteins_tubeThickness=c.default_proteins_tubeThickness;this.proteins_plankSheetWidth=c.default_proteins_plankSheetWidth;this.proteins_cylinderHelixDiameter=c.default_proteins_cylinderHelixDiameter;this.proteins_verticalResolution=c.default_proteins_verticalResolution;this.proteins_horizontalResolution=c.default_proteins_horizontalResolution;this.proteins_materialAmbientColor_3D=c.default_proteins_materialAmbientColor_3D;this.proteins_materialSpecularColor_3D=c.default_proteins_materialSpecularColor_3D;this.proteins_materialShininess_3D=c.default_proteins_materialShininess_3D;this.macro_displayAtoms=c.default_macro_displayAtoms;this.macro_displayBonds=c.default_macro_displayBonds;this.macro_atomToLigandDistance=c.default_macro_atomToLigandDistance;this.nucleics_display=c.default_nucleics_display;this.nucleics_tubeColor=c.default_nucleics_tubeColor;this.nucleics_baseColor=c.default_nucleics_baseColor;this.nucleics_residueColor=c.default_nucleics_residueColor;this.nucleics_tubeThickness=c.default_nucleics_tubeThickness;this.nucleics_tubeResolution_3D=c.default_nucleics_tubeResolution_3D;this.nucleics_verticalResolution=c.default_nucleics_verticalResolution;this.nucleics_materialAmbientColor_3D=c.default_nucleics_materialAmbientColor_3D;this.nucleics_materialSpecularColor_3D=c.default_nucleics_materialSpecularColor_3D;this.nucleics_materialShininess_3D=c.default_nucleics_materialShininess_3D;this.macro_showWater=c.default_macro_showWater;this.macro_colorByChain=c.default_macro_colorByChain;this.macro_rainbowColors=c.default_macro_rainbowColors.slice(0);// surface properties\nthis.surfaces_display=c.default_surfaces_display;this.surfaces_alpha=c.default_surfaces_alpha;this.surfaces_style=c.default_surfaces_style;this.surfaces_color=c.default_surfaces_color;this.surfaces_materialAmbientColor_3D=c.default_surfaces_materialAmbientColor_3D;this.surfaces_materialSpecularColor_3D=c.default_surfaces_materialSpecularColor_3D;this.surfaces_materialShininess_3D=c.default_surfaces_materialShininess_3D;// spectrum properties\nthis.plots_color=c.default_plots_color;this.plots_width=c.default_plots_width;this.plots_showIntegration=c.default_plots_showIntegration;this.plots_integrationColor=c.default_plots_integrationColor;this.plots_integrationLineWidth=c.default_plots_integrationLineWidth;this.plots_showGrid=c.default_plots_showGrid;this.plots_gridColor=c.default_plots_gridColor;this.plots_gridLineWidth=c.default_plots_gridLineWidth;this.plots_showYAxis=c.default_plots_showYAxis;this.plots_flipXAxis=c.default_plots_flipXAxis;// shape properties\nthis.text_font_size=c.default_text_font_size;this.text_font_families=c.default_text_font_families.slice(0);this.text_font_bold=c.default_text_font_bold;this.text_font_italic=c.default_text_font_italic;this.text_font_stroke_3D=c.default_text_font_stroke_3D;this.text_color=c.default_text_color;this.shapes_color=c.default_shapes_color;this.shapes_lineWidth=c.default_shapes_lineWidth;this.shapes_pointSize=c.default_shapes_pointSize;this.shapes_arrowLength_2D=c.default_shapes_arrowLength_2D;this.compass_display=c.default_compass_display;this.compass_axisXColor_3D=c.default_compass_axisXColor_3D;this.compass_axisYColor_3D=c.default_compass_axisYColor_3D;this.compass_axisZColor_3D=c.default_compass_axisZColor_3D;this.compass_size_3D=c.default_compass_size_3D;this.compass_resolution_3D=c.default_compass_resolution_3D;this.compass_displayText_3D=c.default_compass_displayText_3D;this.compass_type_3D=c.default_compass_type_3D;this.measurement_update_3D=c.default_measurement_update_3D;this.measurement_angleBands_3D=c.default_measurement_angleBands_3D;this.measurement_displayText_3D=c.default_measurement_displayText_3D;};var _=structures.VisualSpecifications.prototype;_.set3DRepresentation=function(representation){this.atoms_display=true;this.bonds_display=true;this.bonds_color='#777777';this.atoms_useVDWDiameters_3D=true;this.atoms_useJMOLColors=true;this.bonds_splitColor=true;this.bonds_showBondOrders_3D=true;this.bonds_renderAsLines_3D=false;if(representation==='Ball and Stick'){this.atoms_vdwMultiplier_3D=.3;this.bonds_splitColor=false;this.bonds_cylinderDiameter_3D=.3;this.bonds_materialAmbientColor_3D=c.default_atoms_materialAmbientColor_3D;this.bonds_pillDiameter_3D=.15;}else if(representation==='van der Waals Spheres'){this.bonds_display=false;this.atoms_vdwMultiplier_3D=1;}else if(representation==='Stick'){this.atoms_useVDWDiameters_3D=false;this.bonds_showBondOrders_3D=false;this.bonds_cylinderDiameter_3D=this.atoms_sphereDiameter_3D=.8;this.bonds_materialAmbientColor_3D=this.atoms_materialAmbientColor_3D;}else if(representation==='Wireframe'){this.atoms_useVDWDiameters_3D=false;this.bonds_cylinderDiameter_3D=this.bonds_pillDiameter_3D=.05;this.atoms_sphereDiameter_3D=.15;this.bonds_materialAmbientColor_3D=c.default_atoms_materialAmbientColor_3D;}else if(representation==='Line'){this.atoms_display=false;this.bonds_renderAsLines_3D=true;this.bonds_width_2D=1;this.bonds_cylinderDiameter_3D=.05;}else{alert('\"'+representation+'\" is not recognized. Use one of the following strings:\\n\\n'+'1. Ball and Stick\\n'+'2. van der Waals Spheres\\n'+'3. Stick\\n'+'4. Wireframe\\n'+'5. Line\\n');}};_.copy=function(){var copy=JSON.parse(JSON.stringify(this));copy.set3DRepresentation=_.set3DRepresentation;return copy;};})(ChemDoodle,ChemDoodle.structures,Math,JSON);(function(c,ELEMENT,informatics,structures,undefined){'use strict';informatics.getPointsPerAngstrom=function(){return c.default_bondLength_2D/c.default_angstromsPerBondLength;};informatics.BondDeducer=function(){};var _=informatics.BondDeducer.prototype;_.margin=1.1;_.deduceCovalentBonds=function(molecule,customPointsPerAngstrom){var pointsPerAngstrom=informatics.getPointsPerAngstrom();if(customPointsPerAngstrom){pointsPerAngstrom=customPointsPerAngstrom;}for(var i=0,ii=molecule.atoms.length;i<ii;i++){for(var j=i+1;j<ii;j++){var first=molecule.atoms[i];var second=molecule.atoms[j];if(first.distance3D(second)<(ELEMENT[first.label].covalentRadius+ELEMENT[second.label].covalentRadius)*pointsPerAngstrom*this.margin){molecule.bonds.push(new structures.Bond(first,second,1));}}}};})(ChemDoodle,ChemDoodle.ELEMENT,ChemDoodle.informatics,ChemDoodle.structures);(function(informatics,structures,undefined){'use strict';informatics.HydrogenDeducer=function(){};var _=informatics.HydrogenDeducer.prototype;_.removeHydrogens=function(molecule,removeStereo){var atoms=[];var bonds=[];for(var i=0,ii=molecule.bonds.length;i<ii;i++){var b=molecule.bonds[i];var save=b.a1.label!=='H'&&b.a2.label!=='H';if(!save&&!removeStereo&&b.stereo!==structures.Bond.STEREO_NONE){save=true;}if(save){b.a1.tag=true;bonds.push(b);}else{if(b.a1.label==='H'){b.a1.remove=true;}if(b.a2.label==='H'){b.a2.remove=true;}}}for(var i=0,ii=molecule.atoms.length;i<ii;i++){var a=molecule.atoms[i];if(a.remove){a.remove=undefined;}else{atoms.push(a);}}molecule.atoms=atoms;molecule.bonds=bonds;};})(ChemDoodle.informatics,ChemDoodle.structures);(function(informatics,structures,undefined){'use strict';informatics.Splitter=function(){};var _=informatics.Splitter.prototype;_.split=function(molecule){var mols=[];for(var i=0,ii=molecule.atoms.length;i<ii;i++){molecule.atoms[i].visited=false;}for(var i=0,ii=molecule.bonds.length;i<ii;i++){molecule.bonds[i].visited=false;}for(var i=0,ii=molecule.atoms.length;i<ii;i++){var a=molecule.atoms[i];if(!a.visited){var newMol=new structures.Molecule();newMol.atoms.push(a);a.visited=true;var q=new structures.Queue();q.enqueue(a);while(!q.isEmpty()){var atom=q.dequeue();for(var j=0,jj=molecule.bonds.length;j<jj;j++){var b=molecule.bonds[j];if(b.contains(atom)&&!b.visited){b.visited=true;newMol.bonds.push(b);var neigh=b.getNeighbor(atom);if(!neigh.visited){neigh.visited=true;newMol.atoms.push(neigh);q.enqueue(neigh);}}}}mols.push(newMol);}}return mols;};})(ChemDoodle.informatics,ChemDoodle.structures);(function(informatics,io,structures,undefined){'use strict';informatics.StructureBuilder=function(){};var _=informatics.StructureBuilder.prototype;_.copy=function(molecule){var json=new io.JSONInterpreter();return json.molFrom(json.molTo(molecule));};})(ChemDoodle.informatics,ChemDoodle.io,ChemDoodle.structures);(function(informatics,undefined){'use strict';informatics._Counter=function(){};var _=informatics._Counter.prototype;_.value=0;_.molecule=undefined;_.setMolecule=function(molecule){this.value=0;this.molecule=molecule;if(this.innerCalculate){this.innerCalculate();}};})(ChemDoodle.informatics);(function(informatics,undefined){'use strict';informatics.FrerejacqueNumberCounter=function(molecule){this.setMolecule(molecule);};var _=informatics.FrerejacqueNumberCounter.prototype=new informatics._Counter();_.innerCalculate=function(){this.value=this.molecule.bonds.length-this.molecule.atoms.length+new informatics.NumberOfMoleculesCounter(this.molecule).value;};})(ChemDoodle.informatics);(function(structures,informatics,undefined){'use strict';informatics.NumberOfMoleculesCounter=function(molecule){this.setMolecule(molecule);};var _=informatics.NumberOfMoleculesCounter.prototype=new informatics._Counter();_.innerCalculate=function(){for(var i=0,ii=this.molecule.atoms.length;i<ii;i++){this.molecule.atoms[i].visited=false;}for(var i=0,ii=this.molecule.atoms.length;i<ii;i++){if(!this.molecule.atoms[i].visited){this.value++;var q=new structures.Queue();this.molecule.atoms[i].visited=true;q.enqueue(this.molecule.atoms[i]);while(!q.isEmpty()){var atom=q.dequeue();for(var j=0,jj=this.molecule.bonds.length;j<jj;j++){var b=this.molecule.bonds[j];if(b.contains(atom)){var neigh=b.getNeighbor(atom);if(!neigh.visited){neigh.visited=true;q.enqueue(neigh);}}}}}}};})(ChemDoodle.structures,ChemDoodle.informatics);(function(informatics,undefined){'use strict';informatics._RingFinder=function(){};var _=informatics._RingFinder.prototype;_.atoms=undefined;_.bonds=undefined;_.rings=undefined;_.reduce=function(molecule){for(var i=0,ii=molecule.atoms.length;i<ii;i++){molecule.atoms[i].visited=false;}for(var i=0,ii=molecule.bonds.length;i<ii;i++){molecule.bonds[i].visited=false;}var cont=true;while(cont){cont=false;for(var i=0,ii=molecule.atoms.length;i<ii;i++){var count=0;var bond;for(var j=0,jj=molecule.bonds.length;j<jj;j++){if(molecule.bonds[j].contains(molecule.atoms[i])&&!molecule.bonds[j].visited){count++;if(count===2){break;}bond=molecule.bonds[j];}}if(count===1){cont=true;bond.visited=true;molecule.atoms[i].visited=true;}}}for(var i=0,ii=molecule.atoms.length;i<ii;i++){if(!molecule.atoms[i].visited){this.atoms.push(molecule.atoms[i]);}}for(var i=0,ii=molecule.bonds.length;i<ii;i++){if(!molecule.bonds[i].visited){this.bonds.push(molecule.bonds[i]);}}if(this.bonds.length===0&&this.atoms.length!==0){this.atoms=[];}};_.setMolecule=function(molecule){this.atoms=[];this.bonds=[];this.rings=[];this.reduce(molecule);if(this.atoms.length>2&&this.innerGetRings){this.innerGetRings();}};_.fuse=function(){for(var i=0,ii=this.rings.length;i<ii;i++){for(var j=0,jj=this.bonds.length;j<jj;j++){if(this.rings[i].atoms.indexOf(this.bonds[j].a1)!==-1&&this.rings[i].atoms.indexOf(this.bonds[j].a2)!==-1){this.rings[i].bonds.push(this.bonds[j]);}}}};})(ChemDoodle.informatics);(function(informatics,structures,undefined){'use strict';function Finger(a,from){this.atoms=[];if(from){for(var i=0,ii=from.atoms.length;i<ii;i++){this.atoms[i]=from.atoms[i];}}this.atoms.push(a);}var _2=Finger.prototype;_2.grow=function(bonds,blockers){var last=this.atoms[this.atoms.length-1];var neighs=[];for(var i=0,ii=bonds.length;i<ii;i++){if(bonds[i].contains(last)){var neigh=bonds[i].getNeighbor(last);if(blockers.indexOf(neigh)===-1){neighs.push(neigh);}}}var returning=[];for(var i=0,ii=neighs.length;i<ii;i++){returning.push(new Finger(neighs[i],this));}return returning;};_2.check=function(bonds,finger,a){// check that they dont contain similar parts\nfor(var i=0,ii=finger.atoms.length-1;i<ii;i++){if(this.atoms.indexOf(finger.atoms[i])!==-1){return undefined;}}var ring;// check if fingers meet at tips\nif(finger.atoms[finger.atoms.length-1]===this.atoms[this.atoms.length-1]){ring=new structures.Ring();ring.atoms[0]=a;for(var i=0,ii=this.atoms.length;i<ii;i++){ring.atoms.push(this.atoms[i]);}for(var i=finger.atoms.length-2;i>=0;i--){ring.atoms.push(finger.atoms[i]);}}else{// check if fingers meet at bond\nvar endbonds=[];for(var i=0,ii=bonds.length;i<ii;i++){if(bonds[i].contains(finger.atoms[finger.atoms.length-1])){endbonds.push(bonds[i]);}}for(var i=0,ii=endbonds.length;i<ii;i++){if((finger.atoms.length===1||!endbonds[i].contains(finger.atoms[finger.atoms.length-2]))&&endbonds[i].contains(this.atoms[this.atoms.length-1])){ring=new structures.Ring();ring.atoms[0]=a;for(var j=0,jj=this.atoms.length;j<jj;j++){ring.atoms.push(this.atoms[j]);}for(var j=finger.atoms.length-1;j>=0;j--){ring.atoms.push(finger.atoms[j]);}break;}}}return ring;};informatics.EulerFacetRingFinder=function(molecule){this.setMolecule(molecule);};var _=informatics.EulerFacetRingFinder.prototype=new informatics._RingFinder();_.fingerBreak=5;_.innerGetRings=function(){for(var i=0,ii=this.atoms.length;i<ii;i++){var neigh=[];for(var j=0,jj=this.bonds.length;j<jj;j++){if(this.bonds[j].contains(this.atoms[i])){neigh.push(this.bonds[j].getNeighbor(this.atoms[i]));}}for(var j=0,jj=neigh.length;j<jj;j++){// weird that i can't optimize this loop without breaking a test\n// case...\nfor(var k=j+1;k<neigh.length;k++){var fingers=[];fingers[0]=new Finger(neigh[j]);fingers[1]=new Finger(neigh[k]);var blockers=[];blockers[0]=this.atoms[i];for(var l=0,ll=neigh.length;l<ll;l++){if(l!==j&&l!==k){blockers.push(neigh[l]);}}var found=[];// check for 3 membered ring\nvar three=fingers[0].check(this.bonds,fingers[1],this.atoms[i]);if(three){found[0]=three;}while(found.length===0&&fingers.length>0&&fingers[0].atoms.length<this.fingerBreak){var newfingers=[];for(var l=0,ll=fingers.length;l<ll;l++){var adding=fingers[l].grow(this.bonds,blockers);for(var m=0,mm=adding.length;m<mm;m++){newfingers.push(adding[m]);}}fingers=newfingers;for(var l=0,ll=fingers.length;l<ll;l++){for(var m=l+1;m<ll;m++){var r=fingers[l].check(this.bonds,fingers[m],this.atoms[i]);if(r){found.push(r);}}}if(found.length===0){var newBlockers=[];for(var l=0,ll=blockers.length;l<ll;l++){for(var m=0,mm=this.bonds.length;m<mm;m++){if(this.bonds[m].contains(blockers[l])){var neigh=this.bonds[m].getNeighbor(blockers[l]);if(blockers.indexOf(neigh)===-1&&newBlockers.indexOf(neigh)===-1){newBlockers.push(neigh);}}}}for(var l=0,ll=newBlockers.length;l<ll;l++){blockers.push(newBlockers[l]);}}}if(found.length>0){// this undefined is required...weird, don't know why\nvar use=undefined;for(var l=0,ll=found.length;l<ll;l++){if(!use||use.atoms.length>found[l].atoms.length){use=found[l];}}var already=false;for(var l=0,ll=this.rings.length;l<ll;l++){var all=true;for(var m=0,mm=use.atoms.length;m<mm;m++){if(this.rings[l].atoms.indexOf(use.atoms[m])===-1){all=false;break;}}if(all){already=true;break;}}if(!already){this.rings.push(use);}}}}}this.fuse();};})(ChemDoodle.informatics,ChemDoodle.structures);(function(informatics,undefined){'use strict';informatics.SSSRFinder=function(molecule){this.rings=[];if(molecule.atoms.length>0){var frerejacqueNumber=new informatics.FrerejacqueNumberCounter(molecule).value;var all=new informatics.EulerFacetRingFinder(molecule).rings;all.sort(function(a,b){return a.atoms.length-b.atoms.length;});for(var i=0,ii=molecule.bonds.length;i<ii;i++){molecule.bonds[i].visited=false;}for(var i=0,ii=all.length;i<ii;i++){var use=false;for(var j=0,jj=all[i].bonds.length;j<jj;j++){if(!all[i].bonds[j].visited){use=true;break;}}if(use){for(var j=0,jj=all[i].bonds.length;j<jj;j++){all[i].bonds[j].visited=true;}this.rings.push(all[i]);}if(this.rings.length===frerejacqueNumber){break;}}}};})(ChemDoodle.informatics);(function(io,undefined){'use strict';io._Interpreter=function(){};var _=io._Interpreter.prototype;_.fit=function(data,length,leftAlign){var size=data.length;var padding=[];for(var i=0;i<length-size;i++){padding.push(' ');}return leftAlign?data+padding.join(''):padding.join('')+data;};})(ChemDoodle.io);(function(c,extensions,io,structures,d3,m,m4,v3,undefined){'use strict';var whitespaceRegex=/\\s+/g;var whitespaceAndParenthesisRegex=/\\(|\\)|\\s+/g;var whitespaceAndQuoteRegex=/\\'|\\s+/g;var whitespaceAndQuoteAndCommaRegex=/,|\\'|\\s+/g;var leadingWhitespaceRegex=/^\\s+/;var digitsRegex=/[0-9]/g;var digitsSymbolRegex=/[0-9]|\\+|\\-/g;var filter=function filter(s){return s.length!==0;};var hallTranslations={'P':[],'A':[[0,.5,.5]],'B':[[.5,0,.5]],'C':[[.5,.5,0]],'I':[[.5,.5,.5]],'R':[[2/3,1/3,1/3],[1/3,2/3,2/3]],'S':[[1/3,1/3,2/3],[2/3,2/3,1/3]],'T':[[1/3,2/3,1/3],[2/3,1/3,2/3]],'F':[[0,.5,.5],[.5,0,.5],[.5,.5,0]]};var parseTransform=function parseTransform(s){var displacement=0;var x=0,y=0,z=0;var indexx=s.indexOf('x');var indexy=s.indexOf('y');var indexz=s.indexOf('z');if(indexx!==-1){x++;if(indexx>0&&s.charAt(indexx-1)!=='+'){x*=-1;}}if(indexy!==-1){y++;if(indexy>0&&s.charAt(indexy-1)!=='+'){y*=-1;}}if(indexz!==-1){z++;if(indexz>0&&s.charAt(indexz-1)!=='+'){z*=-1;}}if(s.length>2){var op='+';for(var i=0,ii=s.length;i<ii;i++){var l=s.charAt(i);if((l==='-'||l==='/')&&(i===s.length-1||s.charAt(i+1).match(digitsRegex))){op=l;}if(l.match(digitsRegex)){if(op==='+'){displacement+=parseInt(l);}else if(op==='-'){displacement-=parseInt(l);}else if(op==='/'){displacement/=parseInt(l);}}}}return[displacement,x,y,z];};var generateABC2XYZ=function generateABC2XYZ(a,b,c,alpha,beta,gamma){var d=(m.cos(alpha)-m.cos(gamma)*m.cos(beta))/m.sin(gamma);return[a,0,0,0,b*m.cos(gamma),b*m.sin(gamma),0,0,c*m.cos(beta),c*d,c*m.sqrt(1-m.pow(m.cos(beta),2)-d*d),0,0,0,0,1];};io.CIFInterpreter=function(){};var _=io.CIFInterpreter.prototype=new io._Interpreter();_.read=function(content,xSuper,ySuper,zSuper){xSuper=xSuper?xSuper:1;ySuper=ySuper?ySuper:1;zSuper=zSuper?zSuper:1;var molecule=new structures.Molecule();if(!content){return molecule;}var lines=content.split('\\n');var aLength=0,bLength=0,cLength=0,alphaAngle=0,betaAngle=0,gammaAngle=0;var hallClass='P';var transformLoop;var atomLoop;var bondLoop;var line;var shift=true;while(lines.length>0){if(shift){line=lines.shift();}else{shift=true;}if(line.length>0){if(extensions.stringStartsWith(line,'_cell_length_a')){aLength=parseFloat(line.split(whitespaceAndParenthesisRegex)[1]);}else if(extensions.stringStartsWith(line,'_cell_length_b')){bLength=parseFloat(line.split(whitespaceAndParenthesisRegex)[1]);}else if(extensions.stringStartsWith(line,'_cell_length_c')){cLength=parseFloat(line.split(whitespaceAndParenthesisRegex)[1]);}else if(extensions.stringStartsWith(line,'_cell_angle_alpha')){alphaAngle=m.PI*parseFloat(line.split(whitespaceAndParenthesisRegex)[1])/180;}else if(extensions.stringStartsWith(line,'_cell_angle_beta')){betaAngle=m.PI*parseFloat(line.split(whitespaceAndParenthesisRegex)[1])/180;}else if(extensions.stringStartsWith(line,'_cell_angle_gamma')){gammaAngle=m.PI*parseFloat(line.split(whitespaceAndParenthesisRegex)[1])/180;}else if(extensions.stringStartsWith(line,'_symmetry_space_group_name_H-M')){hallClass=line.split(whitespaceAndQuoteRegex)[1];}else if(extensions.stringStartsWith(line,'loop_')){var loop={fields:[],lines:[]};var pushingLines=false;// keep undefined check here because the line may be an\n// empty string\nwhile((line=lines.shift())!==undefined&&!extensions.stringStartsWith(line=line.replace(leadingWhitespaceRegex,''),'loop_')&&line.length>0){// remove leading whitespace that may appear in\n// subloop lines ^\nif(extensions.stringStartsWith(line,'_')){if(pushingLines){break;}loop.fields=loop.fields.concat(line.split(whitespaceRegex).filter(filter));}else{pushingLines=true;loop.lines.push(line);}}if(lines.length!==0&&(extensions.stringStartsWith(line,'loop_')||extensions.stringStartsWith(line,'_'))){shift=false;}if(loop.fields.indexOf('_symmetry_equiv_pos_as_xyz')!==-1||loop.fields.indexOf('_space_group_symop_operation_xyz')!==-1){transformLoop=loop;}else if(loop.fields.indexOf('_atom_site_label')!==-1){atomLoop=loop;}else if(loop.fields.indexOf('_geom_bond_atom_site_label_1')!==-1){bondLoop=loop;}}}}var abc2xyz=generateABC2XYZ(aLength,bLength,cLength,alphaAngle,betaAngle,gammaAngle);// internal atom coordinates\nif(atomLoop){var labelIndex=-1,altLabelIndex=-1,xIndex=-1,yIndex=-1,zIndex=-1;for(var i=0,ii=atomLoop.fields.length;i<ii;i++){var field=atomLoop.fields[i];if(field==='_atom_site_type_symbol'){labelIndex=i;}else if(field==='_atom_site_label'){altLabelIndex=i;}else if(field==='_atom_site_fract_x'){xIndex=i;}else if(field==='_atom_site_fract_y'){yIndex=i;}else if(field==='_atom_site_fract_z'){zIndex=i;}}for(var i=0,ii=atomLoop.lines.length;i<ii;i++){line=atomLoop.lines[i];var tokens=line.split(whitespaceRegex).filter(filter);var a=new structures.Atom(tokens[labelIndex===-1?altLabelIndex:labelIndex].split(digitsSymbolRegex)[0],parseFloat(tokens[xIndex]),parseFloat(tokens[yIndex]),parseFloat(tokens[zIndex]));molecule.atoms.push(a);if(altLabelIndex!==-1){a.cifId=tokens[altLabelIndex];a.cifPart=0;}}}// transforms, unless bonds are specified\nif(transformLoop&&!bondLoop){// assume the index is 0, just incase a different identifier is\n// used\nvar symIndex=0;for(var i=0,ii=transformLoop.fields.length;i<ii;i++){var field=transformLoop.fields[i];if(field==='_symmetry_equiv_pos_as_xyz'||field==='_space_group_symop_operation_xyz'){symIndex=i;}}var impliedTranslations=hallTranslations[hallClass];var add=[];for(var i=0,ii=transformLoop.lines.length;i<ii;i++){var parts=transformLoop.lines[i].split(whitespaceAndQuoteAndCommaRegex).filter(filter);var multx=parseTransform(parts[symIndex]);var multy=parseTransform(parts[symIndex+1]);var multz=parseTransform(parts[symIndex+2]);for(var j=0,jj=molecule.atoms.length;j<jj;j++){var a=molecule.atoms[j];var x=a.x*multx[1]+a.y*multx[2]+a.z*multx[3]+multx[0];var y=a.x*multy[1]+a.y*multy[2]+a.z*multy[3]+multy[0];var z=a.x*multz[1]+a.y*multz[2]+a.z*multz[3]+multz[0];var copy1=new structures.Atom(a.label,x,y,z);add.push(copy1);// cifID could be 0, so check for undefined\nif(a.cifId!==undefined){copy1.cifId=a.cifId;copy1.cifPart=i+1;}if(impliedTranslations){for(var k=0,kk=impliedTranslations.length;k<kk;k++){var trans=impliedTranslations[k];var copy2=new structures.Atom(a.label,x+trans[0],y+trans[1],z+trans[2]);add.push(copy2);// cifID could be 0, so check for undefined\nif(a.cifId!==undefined){copy2.cifId=a.cifId;copy2.cifPart=i+1;}}}}}// make sure all atoms are within the unit cell\nfor(var i=0,ii=add.length;i<ii;i++){var a=add[i];while(a.x>=1){a.x--;}while(a.x<0){a.x++;}while(a.y>=1){a.y--;}while(a.y<0){a.y++;}while(a.z>=1){a.z--;}while(a.z<0){a.z++;}}// remove overlaps\nvar noOverlaps=[];for(var i=0,ii=add.length;i<ii;i++){var overlap=false;var a=add[i];for(var j=0,jj=molecule.atoms.length;j<jj;j++){if(molecule.atoms[j].distance3D(a)<.0001){overlap=true;break;}}if(!overlap){for(var j=0,jj=noOverlaps.length;j<jj;j++){if(noOverlaps[j].distance3D(a)<.0001){overlap=true;break;}}if(!overlap){noOverlaps.push(a);}}}// concat arrays\nmolecule.atoms=molecule.atoms.concat(noOverlaps);}// build super cell\nvar extras=[];for(var i=0;i<xSuper;i++){for(var j=0;j<ySuper;j++){for(var k=0;k<zSuper;k++){if(!(i===0&&j===0&&k===0)){for(var l=0,ll=molecule.atoms.length;l<ll;l++){var a=molecule.atoms[l];var copy=new structures.Atom(a.label,a.x+i,a.y+j,a.z+k);extras.push(copy);// cifID could be 0, so check for undefined\nif(a.cifId!==undefined){copy.cifId=a.cifId;copy.cifPart=a.cifPart+(transformLoop?transformLoop.lines.length:0)+i+j*10+k*100;}}}}}}molecule.atoms=molecule.atoms.concat(extras);// convert to xyz\nfor(var i=0,ii=molecule.atoms.length;i<ii;i++){var a=molecule.atoms[i];var xyz=m4.multiplyVec3(abc2xyz,[a.x,a.y,a.z]);a.x=xyz[0];a.y=xyz[1];a.z=xyz[2];}// handle bonds\nif(bondLoop){var atom1=-1,atom2=-1;for(var i=0,ii=bondLoop.fields.length;i<ii;i++){var field=bondLoop.fields[i];if(field==='_geom_bond_atom_site_label_1'){atom1=i;}else if(field==='_geom_bond_atom_site_label_2'){atom2=i;}}for(var k=0,kk=bondLoop.lines.length;k<kk;k++){var tokens=bondLoop.lines[k].split(whitespaceRegex).filter(filter);var id1=tokens[atom1];var id2=tokens[atom2];for(var i=0,ii=molecule.atoms.length;i<ii;i++){for(var j=i+1;j<ii;j++){var ai=molecule.atoms[i];var aj=molecule.atoms[j];if(ai.cifPart!==aj.cifPart){break;}if(ai.cifId===id1&&aj.cifId===id2||ai.cifId===id2&&aj.cifId===id1){molecule.bonds.push(new structures.Bond(ai,aj));}}}}}else{new c.informatics.BondDeducer().deduceCovalentBonds(molecule,1);}// generate unit cell\nvar o=[-xSuper/2,-ySuper/2,-zSuper/2];var unitCellVectors={o:m4.multiplyVec3(abc2xyz,o,[]),x:m4.multiplyVec3(abc2xyz,[o[0]+1,o[1],o[2]]),y:m4.multiplyVec3(abc2xyz,[o[0],o[1]+1,o[2]]),z:m4.multiplyVec3(abc2xyz,[o[0],o[1],o[2]+1]),xy:m4.multiplyVec3(abc2xyz,[o[0]+1,o[1]+1,o[2]]),xz:m4.multiplyVec3(abc2xyz,[o[0]+1,o[1],o[2]+1]),yz:m4.multiplyVec3(abc2xyz,[o[0],o[1]+1,o[2]+1]),xyz:m4.multiplyVec3(abc2xyz,[o[0]+1,o[1]+1,o[2]+1])};return{molecule:molecule,unitCell:new d3.UnitCell(unitCellVectors)};};// shortcuts\nvar interpreter=new io.CIFInterpreter();c.readCIF=function(content,xSuper,ySuper,zSuper){return interpreter.read(content,xSuper,ySuper,zSuper);};})(ChemDoodle,ChemDoodle.extensions,ChemDoodle.io,ChemDoodle.structures,ChemDoodle.structures.d3,Math,ChemDoodle.lib.mat4,ChemDoodle.lib.vec3);(function(c,io,structures,q,undefined){'use strict';io.CMLInterpreter=function(){};var _=io.CMLInterpreter.prototype=new io._Interpreter();_.read=function(content){var molecules=[];var xml=q.parseXML(content);// Possible for multiple CML tags to exist\nvar allCml=q(xml).find('cml');for(var i=0,ii=allCml.length;i<ii;i++){var allMolecules=q(allCml[i]).find('molecule');for(var j=0,jj=allMolecules.length;j<jj;j++){var currentMolecule=molecules[j]=new structures.Molecule();var idmap=[];// Don't even bother with atomArrays, there's no point.\nvar cmlAtoms=q(allMolecules[j]).find('atom');for(var k=0,kk=cmlAtoms.length;k<kk;k++){var currentCMLAtom=q(cmlAtoms[k]);var label=currentCMLAtom.attr('elementType');var x,y,z,currentAtom;if(currentCMLAtom.attr('x2')==undefined){x=currentCMLAtom.attr('x3');y=currentCMLAtom.attr('y3');z=currentCMLAtom.attr('z3');}else{x=currentCMLAtom.attr('x2');y=currentCMLAtom.attr('y2');z=0;}currentAtom=molecules[j].atoms[k]=new structures.Atom(label,x,y,z);idmap[k]=currentCMLAtom.attr('id');// charge\nif(currentCMLAtom.attr('formalCharge')!=undefined){currentAtom.charge=currentCMLAtom.attr('formalCharge');}}var cmlBonds=q(allMolecules[j]).find('bond');for(var k=0,kk=cmlBonds.length;k<kk;k++){var currentCMLBond=q(cmlBonds[k]);var atomRefs2=currentCMLBond.attr('atomRefs2').split(' ');var a1,a2,order;a1=currentMolecule.atoms[q.inArray(atomRefs2[0],idmap)];a2=currentMolecule.atoms[q.inArray(atomRefs2[1],idmap)];switch(currentCMLBond.attr('order')){case'2':case'D':order=2;break;case'3':case'T':order=3;break;case'A':order=1.5;break;default:order=1;}var currentBond=molecules[j].bonds[k]=new structures.Bond(a1,a2,order);// check stereo... only support W or H\nswitch(currentCMLBond.find('bondStereo').text()){case'W':currentBond.stereo=structures.Bond.STEREO_PROTRUDING;break;case'H':currentBond.stereo=structures.Bond.STEREO_RECESSED;break;}}}}return molecules;};_.write=function(molecules){var sb=[];sb.push('<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n');sb.push('<cml convention=\"conventions:molecular\" xmlns=\"http://www.xml-cml.org/schema\" xmlns:conventions=\"http://www.xml-cml.org/convention/\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\\n');// TODO: Metadata\nfor(var i=0,ii=molecules.length;i<ii;i++){sb.push('<molecule id=\"m');sb.push(i);sb.push('\">');sb.push('<atomArray>');for(var j=0,jj=molecules[i].atoms.length;j<jj;j++){var currentAtom=molecules[i].atoms[j];sb.push('<atom elementType=\"');sb.push(currentAtom.label);sb.push('\" id=\"a');sb.push(j);sb.push('\" ');// Always do 3D coordinates, unless there is a fancy reliable way to tell if the molecule is 2D.\nsb.push('x3=\"');sb.push(currentAtom.x);sb.push('\" y3=\"');sb.push(currentAtom.y);sb.push('\" z3=\"');sb.push(currentAtom.z);sb.push('\" ');if(currentAtom.charge!=0){sb.push('formalCharge=\"');sb.push(currentAtom.charge);sb.push('\" ');}sb.push('/>');}sb.push('</atomArray>');sb.push('<bondArray>');for(var j=0,jj=molecules[i].bonds.length;j<jj;j++){var currentBond=molecules[i].bonds[j];sb.push('<bond atomRefs2=\"a');sb.push(molecules[i].atoms.indexOf(currentBond.a1));sb.push(' a');sb.push(molecules[i].atoms.indexOf(currentBond.a2));sb.push('\" order=\"');switch(currentBond.bondOrder){case 1.5:sb.push('A');break;case 1:case 2:case 3:sb.push(currentBond.bondOrder);break;case 0.5:default:sb.push('S');break;}sb.push('\"/>');}sb.push('</bondArray>');sb.push('</molecule>');}sb.push('</cml>');return sb.join('');};// shortcuts\nvar interpreter=new io.CMLInterpreter();c.readCML=function(content){return interpreter.read(content);};c.writeCML=function(molecules){return interpreter.write(molecules);};})(ChemDoodle,ChemDoodle.io,ChemDoodle.structures,ChemDoodle.lib.jQuery);(function(c,ELEMENT,io,structures,undefined){'use strict';io.MOLInterpreter=function(){};var _=io.MOLInterpreter.prototype=new io._Interpreter();_.read=function(content,multiplier){if(!multiplier){multiplier=c.default_bondLength_2D;}var molecule=new structures.Molecule();if(!content){return molecule;}var currentTagTokens=content.split('\\n');var counts=currentTagTokens[3];var numAtoms=parseInt(counts.substring(0,3));var numBonds=parseInt(counts.substring(3,6));for(var i=0;i<numAtoms;i++){var line=currentTagTokens[4+i];molecule.atoms[i]=new structures.Atom(line.substring(31,34),parseFloat(line.substring(0,10))*multiplier,(multiplier===1?1:-1)*parseFloat(line.substring(10,20))*multiplier,parseFloat(line.substring(20,30))*multiplier);var massDif=parseInt(line.substring(34,36));if(massDif!==0&&ELEMENT[molecule.atoms[i].label]){molecule.atoms[i].mass=ELEMENT[molecule.atoms[i].label].mass+massDif;}switch(parseInt(line.substring(36,39))){case 1:molecule.atoms[i].charge=3;break;case 2:molecule.atoms[i].charge=2;break;case 3:molecule.atoms[i].charge=1;break;case 5:molecule.atoms[i].charge=-1;break;case 6:molecule.atoms[i].charge=-2;break;case 7:molecule.atoms[i].charge=-3;break;}}for(var i=0;i<numBonds;i++){var line=currentTagTokens[4+numAtoms+i];var bondOrder=parseInt(line.substring(6,9));var stereo=parseInt(line.substring(9,12));if(bondOrder>3){switch(bondOrder){case 4:bondOrder=1.5;break;default:bondOrder=1;break;}}var b=new structures.Bond(molecule.atoms[parseInt(line.substring(0,3))-1],molecule.atoms[parseInt(line.substring(3,6))-1],bondOrder);switch(stereo){case 3:b.stereo=structures.Bond.STEREO_AMBIGUOUS;break;case 1:b.stereo=structures.Bond.STEREO_PROTRUDING;break;case 6:b.stereo=structures.Bond.STEREO_RECESSED;break;}molecule.bonds[i]=b;}return molecule;};_.write=function(molecule){var sb=[];sb.push('Molecule from ChemDoodle Web Components\\n\\nhttp://www.ichemlabs.com\\n');sb.push(this.fit(molecule.atoms.length.toString(),3));sb.push(this.fit(molecule.bonds.length.toString(),3));sb.push('  0  0  0  0            999 V2000\\n');var p=molecule.getCenter();for(var i=0,ii=molecule.atoms.length;i<ii;i++){var a=molecule.atoms[i];var mass=' 0';if(a.mass!==-1&&ELEMENT[a.label]){var dif=a.mass-ELEMENT[a.label].mass;if(dif<5&&dif>-4){mass=(dif>-1?' ':'')+dif;}}var charge='  0';if(a.charge!==0){switch(a.charge){case 3:charge='  1';break;case 2:charge='  2';break;case 1:charge='  3';break;case-1:charge='  5';break;case-2:charge='  6';break;case-3:charge='  7';break;}}sb.push(this.fit(((a.x-p.x)/c.default_bondLength_2D).toFixed(4),10));sb.push(this.fit((-(a.y-p.y)/c.default_bondLength_2D).toFixed(4),10));sb.push(this.fit((a.z/c.default_bondLength_2D).toFixed(4),10));sb.push(' ');sb.push(this.fit(a.label,3,true));sb.push(mass);sb.push(charge);sb.push('  0  0  0  0\\n');}for(var i=0,ii=molecule.bonds.length;i<ii;i++){var b=molecule.bonds[i];var stereo=0;if(b.stereo===structures.Bond.STEREO_AMBIGUOUS){stereo=3;}else if(b.stereo===structures.Bond.STEREO_PROTRUDING){stereo=1;}else if(b.stereo===structures.Bond.STEREO_RECESSED){stereo=6;}sb.push(this.fit((molecule.atoms.indexOf(b.a1)+1).toString(),3));sb.push(this.fit((molecule.atoms.indexOf(b.a2)+1).toString(),3));var btype=b.bondOrder;if(btype==1.5){btype=4;}else if(btype>3||btype%1!=0){btype=1;}sb.push(this.fit(btype.toString(),3));sb.push('  ');sb.push(stereo);sb.push('  0  0  0\\n');}sb.push('M  END');return sb.join('');};// shortcuts\nvar interpreter=new io.MOLInterpreter();c.readMOL=function(content,multiplier){return interpreter.read(content,multiplier);};c.writeMOL=function(mol){return interpreter.write(mol);};})(ChemDoodle,ChemDoodle.ELEMENT,ChemDoodle.io,ChemDoodle.structures);(function(c,extensions,io,structures,ELEMENT,trim,m,undefined){'use strict';function checkContained(residue,set,chainID,index,helix){for(var j=0,jj=set.length;j<jj;j++){var check=set[j];if(check.id===chainID&&index>=check.start&&index<=check.end){if(helix){residue.helix=true;}else{residue.sheet=true;}if(index===check.end){residue.arrow=true;}return;}}}io.PDBInterpreter=function(){};var _=io.PDBInterpreter.prototype=new io._Interpreter();_.calculateRibbonDistances=false;_.deduceResidueBonds=false;_.read=function(content,multiplier){var molecule=new structures.Molecule();molecule.chains=[];if(!content){return molecule;}var currentTagTokens=content.split('\\n');if(!multiplier){multiplier=1;}var helices=[];var sheets=[];var lastC;var currentChain=[];var resatoms=[];var atomSerials=[];for(var i=0,ii=currentTagTokens.length;i<ii;i++){var line=currentTagTokens[i];if(extensions.stringStartsWith(line,'HELIX')){helices.push({id:line.substring(19,20),start:parseInt(line.substring(21,25)),end:parseInt(line.substring(33,37))});}else if(extensions.stringStartsWith(line,'SHEET')){sheets.push({id:line.substring(21,22),start:parseInt(line.substring(22,26)),end:parseInt(line.substring(33,37))});}else if(extensions.stringStartsWith(line,'ATOM')){var altLoc=line.substring(16,17);if(altLoc===' '||altLoc==='A'){var label=trim(line.substring(76,78));if(label.length===0){var s=trim(line.substring(12,14));if(s==='HD'){label='H';}else if(s.length>0){if(s.length>1){label=s.charAt(0)+s.substring(1).toLowerCase();}else{label=s;}}}var a=new structures.Atom(label,parseFloat(line.substring(30,38))*multiplier,parseFloat(line.substring(38,46))*multiplier,parseFloat(line.substring(46,54))*multiplier);a.hetatm=false;resatoms.push(a);// set up residue\nvar resSeq=parseInt(line.substring(22,26));if(currentChain.length===0){for(var j=0;j<3;j++){var dummyFront=new structures.Residue(-1);dummyFront.cp1=a;dummyFront.cp2=a;currentChain.push(dummyFront);}}if(resSeq!==Number.NaN&&currentChain[currentChain.length-1].resSeq!==resSeq){var r=new structures.Residue(resSeq);r.name=trim(line.substring(17,20));if(r.name.length===3){r.name=r.name.substring(0,1)+r.name.substring(1).toLowerCase();}else{if(r.name.length===2&&r.name.charAt(0)==='D'){r.name=r.name.substring(1);}}currentChain.push(r);var chainID=line.substring(21,22);checkContained(r,helices,chainID,resSeq,true);checkContained(r,sheets,chainID,resSeq,false);}// end residue setup\nvar atomName=trim(line.substring(12,16));var currentResidue=currentChain[currentChain.length-1];if(atomName==='CA'||atomName==='P'||atomName==='O5\\''){if(!currentResidue.cp1){currentResidue.cp1=a;}}else if(atomName==='N3'&&(currentResidue.name==='C'||currentResidue.name==='U'||currentResidue.name==='T')||atomName==='N1'&&(currentResidue.name==='A'||currentResidue.name==='G')){// control points for base platform direction\ncurrentResidue.cp3=a;}else if(atomName==='C2'){// control points for base platform orientation\ncurrentResidue.cp4=a;}else if(atomName==='C4'&&(currentResidue.name==='C'||currentResidue.name==='U'||currentResidue.name==='T')||atomName==='C6'&&(currentResidue.name==='A'||currentResidue.name==='G')){// control points for base platform orientation\ncurrentResidue.cp5=a;}else if(atomName==='O'||atomName==='C6'&&(currentResidue.name==='C'||currentResidue.name==='U'||currentResidue.name==='T')||atomName==='N9'){if(!currentChain[currentChain.length-1].cp2){if(atomName==='C6'||atomName==='N9'){lastC=a;}currentResidue.cp2=a;}}else if(atomName==='C'){lastC=a;}}}else if(extensions.stringStartsWith(line,'HETATM')){var symbol=trim(line.substring(76,78));if(symbol.length===0){// handle the case where an improperly formatted PDB\n// file states the element label in the atom name column\nsymbol=trim(line.substring(12,16));}if(symbol.length>1){symbol=symbol.substring(0,1)+symbol.substring(1).toLowerCase();}var het=new structures.Atom(symbol,parseFloat(line.substring(30,38))*multiplier,parseFloat(line.substring(38,46))*multiplier,parseFloat(line.substring(46,54))*multiplier);het.hetatm=true;var residueName=trim(line.substring(17,20));if(residueName==='HOH'){het.isWater=true;}molecule.atoms.push(het);atomSerials[parseInt(trim(line.substring(6,11)))]=het;}else if(extensions.stringStartsWith(line,'CONECT')){var oid=parseInt(trim(line.substring(6,11)));if(atomSerials[oid]){var origin=atomSerials[oid];for(var k=0;k<4;k++){var next=trim(line.substring(11+k*5,16+k*5));if(next.length!==0){var nid=parseInt(next);if(atomSerials[nid]){var a2=atomSerials[nid];var found=false;for(var j=0,jj=molecule.bonds.length;j<jj;j++){var b=molecule.bonds[j];if(b.a1===origin&&b.a2===a2||b.a1===a2&&b.a2===origin){found=true;break;}}if(!found){molecule.bonds.push(new structures.Bond(origin,a2));}}}}}}else if(extensions.stringStartsWith(line,'TER')){this.endChain(molecule,currentChain,lastC,resatoms);currentChain=[];}else if(extensions.stringStartsWith(line,'ENDMDL')){break;}}this.endChain(molecule,currentChain,lastC,resatoms);if(molecule.bonds.size===0){new c.informatics.BondDeducer().deduceCovalentBonds(molecule,multiplier);}if(this.deduceResidueBonds){for(var i=0,ii=resatoms.length;i<ii;i++){var max=m.min(ii,i+20);for(var j=i+1;j<max;j++){var first=resatoms[i];var second=resatoms[j];if(first.distance3D(second)<(ELEMENT[first.label].covalentRadius+ELEMENT[second.label].covalentRadius)*1.1){molecule.bonds.push(new structures.Bond(first,second,1));}}}}molecule.atoms=molecule.atoms.concat(resatoms);if(this.calculateRibbonDistances){this.calculateDistances(molecule,resatoms);}return molecule;};_.endChain=function(molecule,chain,lastC,resatoms){if(chain.length>0){var last=chain[chain.length-1];if(!last.cp1){last.cp1=resatoms[resatoms.length-2];}if(!last.cp2){last.cp2=resatoms[resatoms.length-1];}for(var i=0;i<4;i++){var dummyEnd=new structures.Residue(-1);dummyEnd.cp1=lastC;dummyEnd.cp2=chain[chain.length-1].cp2;chain.push(dummyEnd);}molecule.chains.push(chain);}};_.calculateDistances=function(molecule,resatoms){var hetatm=[];for(var i=0,ii=molecule.atoms.length;i<ii;i++){var a=molecule.atoms[i];if(a.hetatm){if(!a.isWater){hetatm.push(a);}}}for(var i=0,ii=resatoms.length;i<ii;i++){var a=resatoms[i];a.closestDistance=Number.POSITIVE_INFINITY;if(hetatm.length===0){a.closestDistance=0;}else{for(var j=0,jj=hetatm.length;j<jj;j++){a.closestDistance=Math.min(a.closestDistance,a.distance3D(hetatm[j]));}}}};// shortcuts\nvar interpreter=new io.PDBInterpreter();c.readPDB=function(content,multiplier){return interpreter.read(content,multiplier);};})(ChemDoodle,ChemDoodle.extensions,ChemDoodle.io,ChemDoodle.structures,ChemDoodle.ELEMENT,ChemDoodle.lib.jQuery.trim,Math);(function(c,extensions,io,structures,q,undefined){'use strict';var SQZ_HASH={'@':0,'A':1,'B':2,'C':3,'D':4,'E':5,'F':6,'G':7,'H':8,'I':9,'a':-1,'b':-2,'c':-3,'d':-4,'e':-5,'f':-6,'g':-7,'h':-8,'i':-9},DIF_HASH={'%':0,'J':1,'K':2,'L':3,'M':4,'N':5,'O':6,'P':7,'Q':8,'R':9,'j':-1,'k':-2,'l':-3,'m':-4,'n':-5,'o':-6,'p':-7,'q':-8,'r':-9},DUP_HASH={'S':1,'T':2,'U':3,'V':4,'W':5,'X':6,'Y':7,'Z':8,'s':9};io.JCAMPInterpreter=function(){};var _=io.JCAMPInterpreter.prototype=new io._Interpreter();_.convertHZ2PPM=false;_.read=function(content){this.isBreak=function(c){// some of these arrays may return zero, so check if undefined\nreturn SQZ_HASH[c]!==undefined||DIF_HASH[c]!==undefined||DUP_HASH[c]!==undefined||c===' '||c==='-'||c==='+';};this.getValue=function(decipher,lastDif){var first=decipher.charAt(0);var rest=decipher.substring(1);// some of these arrays may return zero, so check if undefined\nif(SQZ_HASH[first]!==undefined){return parseFloat(SQZ_HASH[first]+rest);}else if(DIF_HASH[first]!==undefined){return parseFloat(DIF_HASH[first]+rest)+lastDif;}return parseFloat(rest);};var spectrum=new structures.Spectrum();if(content===undefined||content.length===0){return spectrum;}var lines=content.split('\\n');var sb=[];var xLast,xFirst,yFirst,nPoints,xFactor=1,yFactor=1,observeFrequency=1,deltaX=-1,shiftOffsetNum=-1,shiftOffsetVal=-1;var recordMeta=true,divideByFrequency=false;for(var i=0,ii=lines.length;i<ii;i++){var use=lines[i].trim();var index=use.indexOf('$$');if(index!==-1){use=use.substring(0,index);}if(sb.length===0||!extensions.stringStartsWith(lines[i],'##')){var trimmed=use.trim();if(sb.length!==0&&trimmed.length!==0){sb.push('\\n');}sb.push(trimmed);}else{var currentRecord=sb.join('');if(recordMeta&&currentRecord.length<100){spectrum.metadata.push(currentRecord);}sb=[use];if(extensions.stringStartsWith(currentRecord,'##TITLE=')){spectrum.title=currentRecord.substring(8).trim();}else if(extensions.stringStartsWith(currentRecord,'##XUNITS=')){spectrum.xUnit=currentRecord.substring(9).trim();if(this.convertHZ2PPM&&spectrum.xUnit.toUpperCase()==='HZ'){spectrum.xUnit='PPM';divideByFrequency=true;}}else if(extensions.stringStartsWith(currentRecord,'##YUNITS=')){spectrum.yUnit=currentRecord.substring(9).trim();}else if(extensions.stringStartsWith(currentRecord,'##XYPAIRS=')){// spectrum.yUnit = currentRecord.substring(9).trim();\n}else if(extensions.stringStartsWith(currentRecord,'##FIRSTX=')){xFirst=parseFloat(currentRecord.substring(9).trim());}else if(extensions.stringStartsWith(currentRecord,'##LASTX=')){xLast=parseFloat(currentRecord.substring(8).trim());}else if(extensions.stringStartsWith(currentRecord,'##FIRSTY=')){yFirst=parseFloat(currentRecord.substring(9).trim());}else if(extensions.stringStartsWith(currentRecord,'##NPOINTS=')){nPoints=parseFloat(currentRecord.substring(10).trim());}else if(extensions.stringStartsWith(currentRecord,'##XFACTOR=')){xFactor=parseFloat(currentRecord.substring(10).trim());}else if(extensions.stringStartsWith(currentRecord,'##YFACTOR=')){yFactor=parseFloat(currentRecord.substring(10).trim());}else if(extensions.stringStartsWith(currentRecord,'##DELTAX=')){deltaX=parseFloat(currentRecord.substring(9).trim());}else if(extensions.stringStartsWith(currentRecord,'##.OBSERVE FREQUENCY=')){if(this.convertHZ2PPM){observeFrequency=parseFloat(currentRecord.substring(21).trim());}}else if(extensions.stringStartsWith(currentRecord,'##.SHIFT REFERENCE=')){if(this.convertHZ2PPM){var parts=currentRecord.substring(19).split(',');shiftOffsetNum=parseInt(parts[2].trim());shiftOffsetVal=parseFloat(parts[3].trim());}}else if(extensions.stringStartsWith(currentRecord,'##XYDATA=')){if(!divideByFrequency){observeFrequency=1;}recordMeta=false;var lastWasDif=false;var innerLines=currentRecord.split('\\n');var abscissaSpacing=(xLast-xFirst)/(nPoints-1);var lastX=xFirst-abscissaSpacing;var lastY=yFirst;var lastDif=0;var lastOrdinate;for(var j=1,jj=innerLines.length;j<jj;j++){var data=[];var read=innerLines[j].trim();var sb=[];for(var k=0,kk=read.length;k<kk;k++){if(this.isBreak(read.charAt(k))){if(sb.length>0&&!(sb.length===1&&sb[0]===' ')){data.push(sb.join(''));}sb=[read.charAt(k)];}else{sb.push(read.charAt(k));}}data.push(sb.join(''));lastX=parseFloat(data[0])*xFactor-abscissaSpacing;for(var k=1,kk=data.length;k<kk;k++){var decipher=data[k];// some of these arrays may return zero, so\n// check if undefined\nif(DUP_HASH[decipher.charAt(0)]!==undefined){// be careful when reading this, to keep\n// spectra efficient, DUPS are actually\n// discarded, except the last y!\nvar dup=parseInt(DUP_HASH[decipher.charAt(0)]+decipher.substring(1))-1;for(var l=0;l<dup;l++){lastX+=abscissaSpacing;lastDif=this.getValue(lastOrdinate,lastDif);lastY=lastDif*yFactor;count++;spectrum.data[spectrum.data.length-1]=new structures.Point(lastX/observeFrequency,lastY);}}else{// some of these arrays may return zero, so\n// check if undefined\nif(!(SQZ_HASH[decipher.charAt(0)]!==undefined&&lastWasDif)){lastWasDif=DIF_HASH[decipher.charAt(0)]!==undefined;lastOrdinate=decipher;lastX+=abscissaSpacing;lastDif=this.getValue(decipher,lastDif);lastY=lastDif*yFactor;count++;spectrum.data.push(new structures.Point(lastX/observeFrequency,lastY));}else{lastY=this.getValue(decipher,lastDif)*yFactor;}}}}if(shiftOffsetNum!==-1){var dif=shiftOffsetVal-spectrum.data[shiftOffsetNum-1].x;for(var i=0,ii=spectrum.data.length;i<ii;i++){spectrum.data[i].x+=dif;}}}else if(extensions.stringStartsWith(currentRecord,'##PEAK TABLE=')){recordMeta=false;spectrum.continuous=false;var innerLines=currentRecord.split('\\n');var count=0;var reg=/[\\s,]+/;for(var j=1,jj=innerLines.length;j<jj;j++){var items=innerLines[j].split(reg);count+=items.length/2;for(var k=0,kk=items.length;k+1<kk;k+=2){spectrum.data.push(new structures.Point(parseFloat(items[k].trim()),parseFloat(items[k+1].trim())));}}}else if(extensions.stringStartsWith(currentRecord,'##ATOMLIST=')){spectrum.molecule=new structures.Molecule();var innerLines=currentRecord.split('\\n');var reg=/[\\s]+/;for(var j=1,jj=innerLines.length;j<jj;j++){var items=innerLines[j].split(reg);spectrum.molecule.atoms.push(new structures.Atom(items[1]));}}else if(extensions.stringStartsWith(currentRecord,'##BONDLIST=')){var innerLines=currentRecord.split('\\n');var reg=/[\\s]+/;for(var j=1,jj=innerLines.length;j<jj;j++){var items=innerLines[j].split(reg);var order=1;if(items[2]==='D'){order=2;}else if(items[2]==='T'){order=3;}spectrum.molecule.bonds.push(new structures.Bond(spectrum.molecule.atoms[parseInt(items[0])-1],spectrum.molecule.atoms[parseInt(items[1])-1],order));}}else if(spectrum.molecule&&extensions.stringStartsWith(currentRecord,'##XY_RASTER=')){var innerLines=currentRecord.split('\\n');var reg=/[\\s]+/;for(var j=1,jj=innerLines.length;j<jj;j++){var items=innerLines[j].split(reg);var a=spectrum.molecule.atoms[parseInt(items[0])-1];a.x=parseInt(items[1]);a.y=parseInt(items[2]);if(items.length==4){a.z=parseInt(items[3]);}}spectrum.molecule.scaleToAverageBondLength(20);}else if(extensions.stringStartsWith(currentRecord,'##PEAK ASSIGNMENTS=')){var innerLines=currentRecord.split('\\n');var reg=/[\\s,()<>]+/;spectrum.assignments=[];for(var j=1,jj=innerLines.length;j<jj;j++){var items=innerLines[j].split(reg);var x=parseFloat(items[1]);var y=parseFloat(items[2]);var a=spectrum.molecule.atoms[parseInt(items[3])-1];var used=false;for(var k=0,kk=spectrum.assignments.length;k<kk;k++){var assign=spectrum.assignments[k];if(assign.x===x){assign.as.push(a);a.assigned=assign;used=true;break;}}if(!used){var assign={x:x,y:y,as:[a]};a.assigned=assign;spectrum.assignments.push(assign);}}}}}spectrum.setup();return spectrum;};_.makeStructureSpectrumSet=function(id,content){this.convertHZ2PPM=true;var spectrum=this.read(content);var mcanvas=new c.ViewerCanvas(id+'_molecule',200,200);mcanvas.specs.atoms_displayTerminalCarbonLabels_2D=true;mcanvas.specs.atoms_displayImplicitHydrogens_2D=true;mcanvas.mouseout=function(e){if(this.molecules.length!==0){for(var i=0,ii=this.molecules[0].atoms.length;i<ii;i++){this.molecules[0].atoms[i].isHover=false;}spectrum.hovered=undefined;this.repaint();scanvas.repaint();}};mcanvas.touchend=mcanvas.mouseout;mcanvas.mousemove=function(e){if(this.molecules.length!==0){var closest=undefined;for(var i=0,ii=this.molecules[0].atoms.length;i<ii;i++){var a=this.molecules[0].atoms[i];a.isHover=false;if(a.assigned&&(closest===undefined||e.p.distance(a)<e.p.distance(closest))){closest=a;}}spectrum.hovered=undefined;if(e.p.distance(closest)<20){for(var i=0,ii=closest.assigned.as.length;i<ii;i++){closest.assigned.as[i].isHover=true;}scanvas.spectrum.hovered=closest.assigned;}this.repaint();scanvas.repaint();}};mcanvas.touchmove=mcanvas.mousemove;mcanvas.drawChildExtras=function(ctx,specs){if(this.molecules.length!==0){for(var i=0,ii=this.molecules[0].atoms.length;i<ii;i++){this.molecules[0].atoms[i].drawDecorations(ctx,specs);}}};var scanvas=new c.ObserverCanvas(id+'_spectrum',400,200);scanvas.specs.plots_showYAxis=false;scanvas.specs.plots_flipXAxis=true;scanvas.mouseout=function(e){if(this.spectrum&&this.spectrum.assignments){for(var i=0,ii=mcanvas.molecules[0].atoms.length;i<ii;i++){mcanvas.molecules[0].atoms[i].isHover=false;}this.spectrum.hovered=undefined;mcanvas.repaint();this.repaint();}};scanvas.touchend=scanvas.mouseout;scanvas.mousemove=function(e){if(this.spectrum&&this.spectrum.assignments){var closest=undefined;for(var i=0,ii=mcanvas.molecules[0].atoms.length;i<ii;i++){mcanvas.molecules[0].atoms[i].isHover=false;}this.spectrum.hovered=undefined;for(var i=0,ii=this.spectrum.assignments.length;i<ii;i++){var a=this.spectrum.assignments[i];if(closest===undefined||Math.abs(this.spectrum.getTransformedX(a.x,this.specs,this.spectrum.memory.width,this.spectrum.memory.offsetLeft)-e.p.x)<Math.abs(this.spectrum.getTransformedX(closest.x,this.specs,this.spectrum.memory.width,this.spectrum.memory.offsetLeft)-e.p.x)){closest=a;}}if(Math.abs(this.spectrum.getTransformedX(closest.x,this.specs,this.spectrum.memory.width,this.spectrum.memory.offsetLeft)-e.p.x)<20){for(var i=0,ii=closest.as.length;i<ii;i++){closest.as[i].isHover=true;}this.spectrum.hovered=closest;}mcanvas.repaint();this.repaint();}};scanvas.touchmove=scanvas.mousemove;scanvas.drawChildExtras=function(ctx){if(this.spectrum&&this.spectrum.hovered){var x=this.spectrum.getTransformedX(this.spectrum.hovered.x,scanvas.specs,this.spectrum.memory.width,this.spectrum.memory.offsetLeft);if(x>=this.spectrum.memory.offsetLeft&&x<this.spectrum.memory.width){ctx.save();ctx.strokeStyle='#885110';ctx.lineWidth=3;ctx.beginPath();ctx.moveTo(x,this.spectrum.memory.height-this.spectrum.memory.offsetBottom);ctx.lineTo(x,this.spectrum.getTransformedY(this.spectrum.hovered.y,scanvas.specs,this.spectrum.memory.height,this.spectrum.memory.offsetBottom,this.spectrum.memory.offsetTop));ctx.stroke();ctx.restore();}}};if(spectrum){scanvas.loadSpectrum(spectrum);if(spectrum.molecule){mcanvas.loadMolecule(spectrum.molecule);}}return[mcanvas,scanvas];};// shortcuts\nvar interpreter=new io.JCAMPInterpreter();interpreter.convertHZ2PPM=true;c.readJCAMP=function(content){return interpreter.read(content);};})(ChemDoodle,ChemDoodle.extensions,ChemDoodle.io,ChemDoodle.structures,ChemDoodle.lib.jQuery);(function(c,io,structures,d2,d3,JSON,undefined){'use strict';io.JSONInterpreter=function(){};var _=io.JSONInterpreter.prototype;_.contentTo=function(mols,shapes){if(!mols){mols=[];}if(!shapes){shapes=[];}var count1=0,count2=0;for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){mol.atoms[j].tmpid='a'+count1++;}for(var j=0,jj=mol.bonds.length;j<jj;j++){mol.bonds[j].tmpid='b'+count2++;}}count1=0;for(var i=0,ii=shapes.length;i<ii;i++){shapes[i].tmpid='s'+count1++;}var dummy={};if(mols&&mols.length>0){dummy.m=[];for(var i=0,ii=mols.length;i<ii;i++){dummy.m.push(this.molTo(mols[i]));}}if(shapes&&shapes.length>0){dummy.s=[];for(var i=0,ii=shapes.length;i<ii;i++){dummy.s.push(this.shapeTo(shapes[i]));}}for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){mol.atoms[j].tmpid=undefined;}for(var j=0,jj=mol.bonds.length;j<jj;j++){mol.bonds[j].tmpid=undefined;}}for(var i=0,ii=shapes.length;i<ii;i++){shapes[i].tmpid=undefined;}return dummy;};_.contentFrom=function(dummy){var obj={molecules:[],shapes:[]};if(dummy.m){for(var i=0,ii=dummy.m.length;i<ii;i++){obj.molecules.push(this.molFrom(dummy.m[i]));}}if(dummy.s){for(var i=0,ii=dummy.s.length;i<ii;i++){obj.shapes.push(this.shapeFrom(dummy.s[i],obj.molecules));}}for(var i=0,ii=obj.molecules.length;i<ii;i++){var mol=obj.molecules[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){mol.atoms[j].tmpid=undefined;}for(var j=0,jj=mol.bonds.length;j<jj;j++){mol.bonds[j].tmpid=undefined;}}for(var i=0,ii=obj.shapes.length;i<ii;i++){obj.shapes[i].tmpid=undefined;}return obj;};_.queryTo=function(query){var q={};var appendProperty=function appendProperty(q,p,name,isRange){if(p){q[name]={v:isRange?query.outputRange(p.v):p.v,n:p.not};}};if(query.type===structures.Query.TYPE_ATOM){appendProperty(q,query.elements,'as');appendProperty(q,query.chirality,'@');appendProperty(q,query.aromatic,'A');appendProperty(q,query.charge,'C',true);appendProperty(q,query.hydrogens,'H',true);appendProperty(q,query.ringCount,'R',true);appendProperty(q,query.saturation,'S');appendProperty(q,query.connectivity,'X',true);appendProperty(q,query.connectivityNoH,'x',true);}else{appendProperty(q,query.orders,'bs');appendProperty(q,query.stereo,'@');appendProperty(q,query.aromatic,'A');appendProperty(q,query.ringCount,'R',true);}return q;};_.molTo=function(mol){var dummy={a:[]};for(var i=0,ii=mol.atoms.length;i<ii;i++){var a=mol.atoms[i];var da={x:a.x,y:a.y};if(a.tmpid){da.i=a.tmpid;}if(a.label!=='C'){da.l=a.label;}if(a.z!==0){da.z=a.z;}if(a.charge!==0){da.c=a.charge;}if(a.mass!==-1){da.m=a.mass;}if(a.implicitH!==-1){da.h=a.implicitH;}if(a.numRadical!==0){da.r=a.numRadical;}if(a.numLonePair!==0){da.p=a.numLonePair;}if(a.query){da.q=this.queryTo(a.query);}dummy.a.push(da);}if(mol.bonds.length>0){dummy.b=[];for(var i=0,ii=mol.bonds.length;i<ii;i++){var b=mol.bonds[i];var db={b:mol.atoms.indexOf(b.a1),e:mol.atoms.indexOf(b.a2)};if(b.tmpid){db.i=b.tmpid;}if(b.bondOrder!==1){db.o=b.bondOrder;}if(b.stereo!==structures.Bond.STEREO_NONE){db.s=b.stereo;}if(b.query){db.q=this.queryTo(b.query);}dummy.b.push(db);}}return dummy;};_.queryFrom=function(json){var query=new structures.Query(json.as?structures.Query.TYPE_ATOM:structures.Query.TYPE_BOND);var setupProperty=function setupProperty(query,json,name,isRange){if(json){query[name]={};query[name].v=isRange?query.parseRange(json.v):json.v;if(json.n){query[name].not=true;}}};if(query.type===structures.Query.TYPE_ATOM){setupProperty(query,json.as,'elements');setupProperty(query,json['@'],'chirality');setupProperty(query,json.A,'aromatic');setupProperty(query,json.C,'charge',true);setupProperty(query,json.H,'hydrogens',true);setupProperty(query,json.R,'ringCount',true);setupProperty(query,json.S,'saturation');setupProperty(query,json.X,'connectivity',true);setupProperty(query,json.x,'connectivityNoH',true);}else{setupProperty(query,json.bs,'orders');setupProperty(query,json['@'],'stereo');setupProperty(query,json.A,'aromatic');setupProperty(query,json.R,'ringCount',true);}return query;};_.molFrom=function(json){var molecule=new structures.Molecule();for(var i=0,ii=json.a.length;i<ii;i++){var c=json.a[i];var a=new structures.Atom(c.l?c.l:'C',c.x,c.y);if(c.i){a.tmpid=c.i;}if(c.z){a.z=c.z;}if(c.c){a.charge=c.c;}if(c.m){a.mass=c.m;}if(c.h){a.implicitH=c.h;}if(c.r){a.numRadical=c.r;}if(c.p){a.numLonePair=c.p;}if(c.q){a.query=this.queryFrom(c.q);}// these are booleans or numbers, so check if undefined\nif(c.p_h!==undefined){a.hetatm=c.p_h;}if(c.p_w!==undefined){a.isWater=c.p_w;}if(c.p_d!==undefined){a.closestDistance=c.p_d;}molecule.atoms.push(a);}if(json.b){for(var i=0,ii=json.b.length;i<ii;i++){var c=json.b[i];// order can be 0, so check against undefined\nvar b=new structures.Bond(molecule.atoms[c.b],molecule.atoms[c.e],c.o===undefined?1:c.o);if(c.i){b.tmpid=c.i;}if(c.s){b.stereo=c.s;}if(c.q){b.query=this.queryFrom(c.q);}molecule.bonds.push(b);}}return molecule;};_.shapeTo=function(shape){var dummy={};if(shape.tmpid){dummy.i=shape.tmpid;}if(shape instanceof d2.Line){dummy.t='Line';dummy.x1=shape.p1.x;dummy.y1=shape.p1.y;dummy.x2=shape.p2.x;dummy.y2=shape.p2.y;dummy.a=shape.arrowType;}else if(shape instanceof d2.Pusher){dummy.t='Pusher';dummy.o1=shape.o1.tmpid;dummy.o2=shape.o2.tmpid;if(shape.numElectron!==1){dummy.e=shape.numElectron;}}else if(shape instanceof d2.AtomMapping){dummy.t='AtomMapping';dummy.a1=shape.o1.tmpid;dummy.a2=shape.o2.tmpid;}else if(shape instanceof d2.Bracket){dummy.t='Bracket';dummy.x1=shape.p1.x;dummy.y1=shape.p1.y;dummy.x2=shape.p2.x;dummy.y2=shape.p2.y;if(shape.charge!==0){dummy.c=shape.charge;}if(shape.mult!==0){dummy.m=shape.mult;}if(shape.repeat!==0){dummy.r=shape.repeat;}}else if(shape instanceof d2.DynamicBracket){dummy.t='DynamicBracket';dummy.b1=shape.b1.tmpid;dummy.b2=shape.b2.tmpid;dummy.n1=shape.n1;dummy.n2=shape.n2;if(shape.flip===true){dummy.f=true;}}else if(shape instanceof d2.VAP){dummy.t='VAP';dummy.x=shape.asterisk.x;dummy.y=shape.asterisk.y;if(shape.bondType!==1){dummy.o=shape.bondType;}if(shape.substituent){dummy.s=shape.substituent.tmpid;}dummy.a=[];for(var i=0,ii=shape.attachments.length;i<ii;i++){dummy.a.push(shape.attachments[i].tmpid);}}else if(shape instanceof d3.Distance){dummy.t='Distance';dummy.a1=shape.a1.tmpid;dummy.a2=shape.a2.tmpid;if(shape.node){dummy.n=shape.node;dummy.o=shape.offset;}}else if(shape instanceof d3.Angle){dummy.t='Angle';dummy.a1=shape.a1.tmpid;dummy.a2=shape.a2.tmpid;dummy.a3=shape.a3.tmpid;}else if(shape instanceof d3.Torsion){dummy.t='Torsion';dummy.a1=shape.a1.tmpid;dummy.a2=shape.a2.tmpid;dummy.a3=shape.a3.tmpid;dummy.a4=shape.a4.tmpid;}else if(shape instanceof d3._Surface){dummy.t='Surface';dummy.a=[];for(var i=0,ii=shape.atoms.length;i<ii;i++){dummy.a.push(shape.atoms[i].tmpid);}if(!(shape instanceof d3.VDWSurface)){dummy.p=shape.probeRadius;}dummy.r=shape.resolution;var type='vdw';if(shape instanceof d3.SASSurface){type='sas';}else if(d3.SESSurface&&shape instanceof d3.SESSurface){type='ses';}dummy.f=type;}else if(shape instanceof d3.UnitCell){dummy.t='UnitCell';for(var p in shape.unitCell){dummy[p]=shape.unitCell[p];}}return dummy;};_.shapeFrom=function(dummy,mols){var shape;if(dummy.t==='Line'){shape=new d2.Line(new structures.Point(dummy.x1,dummy.y1),new structures.Point(dummy.x2,dummy.y2));shape.arrowType=dummy.a;}else if(dummy.t==='Pusher'){var o1,o2;for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];if(a.tmpid===dummy.o1){o1=a;}else if(a.tmpid===dummy.o2){o2=a;}}for(var j=0,jj=mol.bonds.length;j<jj;j++){var b=mol.bonds[j];if(b.tmpid===dummy.o1){o1=b;}else if(b.tmpid===dummy.o2){o2=b;}}}shape=new d2.Pusher(o1,o2);if(dummy.e){shape.numElectron=dummy.e;}}else if(dummy.t==='AtomMapping'){var a1,a2;for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];if(a.tmpid===dummy.a1){a1=a;}else if(a.tmpid===dummy.a2){a2=a;}}}shape=new d2.AtomMapping(a1,a2);}else if(dummy.t==='Bracket'){shape=new d2.Bracket(new structures.Point(dummy.x1,dummy.y1),new structures.Point(dummy.x2,dummy.y2));if(dummy.c!==undefined){// have to check against undefined as it is an integer that can\n// be 0\nshape.charge=dummy.c;}if(dummy.m!==undefined){// have to check against undefined as it is an integer that can\n// be 0\nshape.mult=dummy.m;}if(dummy.r!==undefined){// have to check against undefined as it is an integer that can\n// be 0\nshape.repeat=dummy.r;}}else if(dummy.t==='DynamicBracket'){var b1,b2;for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.bonds.length;j<jj;j++){var b=mol.bonds[j];if(b.tmpid===dummy.b1){b1=b;}else if(b.tmpid===dummy.b2){b2=b;}}}shape=new d2.DynamicBracket(b1,b2);shape.n1=dummy.n1;shape.n2=dummy.n2;if(dummy.f){shape.flip=true;}}else if(dummy.t==='VAP'){shape=new d2.VAP(dummy.x,dummy.y);if(dummy.o){shape.bondType=dummy.o;}for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];if(a.tmpid===dummy.s){shape.substituent=a;}else{for(var k=0,kk=dummy.a.length;k<kk;k++){if(a.tmpid===dummy.a[k]){shape.attachments.push(a);}}}}}}else if(dummy.t==='Distance'){var a1,a2;for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];if(a.tmpid===dummy.a1){a1=a;}else if(a.tmpid===dummy.a2){a2=a;}}}shape=new d3.Distance(a1,a2,dummy.n,dummy.o);}else if(dummy.t==='Angle'){var a1,a2,a3;for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];if(a.tmpid===dummy.a1){a1=a;}else if(a.tmpid===dummy.a2){a2=a;}else if(a.tmpid===dummy.a3){a3=a;}}}shape=new d3.Angle(a1,a2,a3);}else if(dummy.t==='Torsion'){var a1,a2,a3,a4;for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];if(a.tmpid===dummy.a1){a1=a;}else if(a.tmpid===dummy.a2){a2=a;}else if(a.tmpid===dummy.a3){a3=a;}else if(a.tmpid===dummy.a4){a4=a;}}}shape=new d3.Torsion(a1,a2,a3,a4);}else if(dummy.t==='Surface'){var atoms=[];for(var i=0,ii=mols.length;i<ii;i++){var mol=mols[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];for(var k=0,kk=dummy.a.length;k<kk;k++){if(a.tmpid===dummy.a[k]){atoms.push(a);}}}}var probeRadius=dummy.p?dummy.p:1.4;var resolution=dummy.r?dummy.r:30;if(dummy.f==='vdw'){shape=new d3.VDWSurface(atoms,resolution);}else if(dummy.f==='sas'){shape=new d3.SASSurface(atoms,probeRadius,resolution);}else if(dummy.f==='ses'){shape=new d3.SESSurface(atoms,probeRadius,resolution);}}else if(dummy.t==='UnitCell'){var unitCellVectors={};for(var p in dummy){unitCellVectors[p]=dummy[p];}shape=new d3.UnitCell(unitCellVectors);}return shape;};_.pdbFrom=function(content){var mol=this.molFrom(content.mol);mol.findRings=false;// mark from JSON to note to algorithms that atoms in chain are not\n// same\n// objects as in atom array\nmol.fromJSON=true;mol.chains=this.chainsFrom(content.ribbons);return mol;};_.chainsFrom=function(content){var chains=[];for(var i=0,ii=content.cs.length;i<ii;i++){var chain=content.cs[i];var c=[];for(var j=0,jj=chain.length;j<jj;j++){var convert=chain[j];var r=new structures.Residue();r.name=convert.n;r.cp1=new structures.Atom('',convert.x1,convert.y1,convert.z1);r.cp2=new structures.Atom('',convert.x2,convert.y2,convert.z2);if(convert.x3){r.cp3=new structures.Atom('',convert.x3,convert.y3,convert.z3);r.cp4=new structures.Atom('',convert.x4,convert.y4,convert.z4);r.cp5=new structures.Atom('',convert.x5,convert.y5,convert.z5);}r.helix=convert.h;r.sheet=convert.s;r.arrow=j>0&&chain[j-1].a;c.push(r);}chains.push(c);}return chains;};// shortcuts\nvar interpreter=new io.JSONInterpreter();c.readJSON=function(string){var obj;try{obj=JSON.parse(string);}catch(e){// not json\nreturn undefined;}if(obj){if(obj.m||obj.s){return interpreter.contentFrom(obj);}else if(obj.a){return obj={molecules:[interpreter.molFrom(obj)],shapes:[]};}else{return obj={molecules:[],shapes:[]};}}return undefined;};c.writeJSON=function(mols,shapes){return JSON.stringify(interpreter.contentTo(mols,shapes));};})(ChemDoodle,ChemDoodle.io,ChemDoodle.structures,ChemDoodle.structures.d2,ChemDoodle.structures.d3,JSON);(function(c,io,structures,undefined){'use strict';io.RXNInterpreter=function(){};var _=io.RXNInterpreter.prototype=new io._Interpreter();_.read=function(content,multiplier){if(!multiplier){multiplier=c.default_bondLength_2D;}var molecules=[];var line;if(!content){molecules.push(new structures.Molecule());line=new structures.d2.Line(new structures.Point(-20,0),new structures.Point(20,0));}else{var contentTokens=content.split('$MOL\\n');var headerTokens=contentTokens[0].split('\\n');var counts=headerTokens[4];var numReactants=parseInt(counts.substring(0,3));var numProducts=parseInt(counts.substring(3,6));var currentMolecule=1;var start=0;for(var i=0,ii=numReactants+numProducts;i<ii;i++){molecules[i]=c.readMOL(contentTokens[currentMolecule],multiplier);var b=molecules[i].getBounds();var width=b.maxX-b.minX;start-=width+40;currentMolecule++;}for(var i=0,ii=numReactants;i<ii;i++){var b=molecules[i].getBounds();var width=b.maxX-b.minX;var center=molecules[i].getCenter();for(var j=0,jj=molecules[i].atoms.length;j<jj;j++){var a=molecules[i].atoms[j];a.x+=start+width/2-center.x;a.y-=center.y;}start+=width+40;}line=new structures.d2.Line(new structures.Point(start,0),new structures.Point(start+40,0));start+=80;for(var i=numReactants,ii=numReactants+numProducts;i<ii;i++){var b=molecules[i].getBounds();var width=b.maxX-b.minX;var center=molecules[i].getCenter();for(var j=0;j<molecules[i].atoms.length;j++){var a=molecules[i].atoms[j];a.x+=start+width/2-center.x;a.y-=center.y;}start+=width+40;}}line.arrowType=structures.d2.Line.ARROW_SYNTHETIC;return{'molecules':molecules,'shapes':[line]};};_.write=function(mols,shapes){var molecules=[[],[]];var ps=undefined;if(!mols||!shapes){return;}for(i=0,ii=shapes.length;i<ii;i++){if(shapes[i]instanceof structures.d2.Line){ps=shapes[i].getPoints();break;}}if(!ps){return'';}for(var i=0,ii=mols.length;i<ii;i++){var center=mols[i].getCenter();if(center.x<ps[1].x){molecules[0].push(mols[i]);}else{molecules[1].push(mols[i]);}}var sb=[];sb.push('$RXN\\nReaction from ChemDoodle Web Components\\n\\nhttp://www.ichemlabs.com\\n');sb.push(this.fit(molecules[0].length.toString(),3));sb.push(this.fit(molecules[1].length.toString(),3));sb.push('\\n');for(var i=0;i<2;i++){for(var j=0,jj=molecules[i].length;j<jj;j++){sb.push('$MOL\\n');sb.push(c.writeMOL(molecules[i][j]));sb.push('\\n');}}return sb.join('');};// shortcuts\nvar interpreter=new io.RXNInterpreter();c.readRXN=function(content,multiplier){return interpreter.read(content,multiplier);};c.writeRXN=function(mols,shapes){return interpreter.write(mols,shapes);};})(ChemDoodle,ChemDoodle.io,ChemDoodle.structures);(function(c,ELEMENT,SYMBOLS,io,structures,trim,undefined){'use strict';io.XYZInterpreter=function(){};var _=io.XYZInterpreter.prototype=new io._Interpreter();_.deduceCovalentBonds=true;_.read=function(content){var molecule=new structures.Molecule();if(!content){return molecule;}var lines=content.split('\\n');var numAtoms=parseInt(trim(lines[0]));for(var i=0;i<numAtoms;i++){var line=lines[i+2];var tokens=line.split(/\\s+/g);molecule.atoms[i]=new structures.Atom(isNaN(tokens[0])?tokens[0]:SYMBOLS[parseInt(tokens[0])-1],parseFloat(tokens[1]),parseFloat(tokens[2]),parseFloat(tokens[3]));}if(this.deduceCovalentBonds){new c.informatics.BondDeducer().deduceCovalentBonds(molecule,1);}return molecule;};// shortcuts\nvar interpreter=new io.XYZInterpreter();c.readXYZ=function(content){return interpreter.read(content);};})(ChemDoodle,ChemDoodle.ELEMENT,ChemDoodle.SYMBOLS,ChemDoodle.io,ChemDoodle.structures,ChemDoodle.lib.jQuery.trim);ChemDoodle.monitor=function(featureDetection,q,document,undefined){'use strict';var m={};m.CANVAS_DRAGGING=undefined;m.CANVAS_OVER=undefined;m.ALT=false;m.SHIFT=false;m.META=false;if(!featureDetection.supports_touch()){q(document).ready(function(){// handles dragging beyond the canvas bounds\nq(document).mousemove(function(e){if(m.CANVAS_DRAGGING){if(m.CANVAS_DRAGGING.drag){m.CANVAS_DRAGGING.prehandleEvent(e);m.CANVAS_DRAGGING.drag(e);}}});q(document).mouseup(function(e){if(m.CANVAS_DRAGGING&&m.CANVAS_DRAGGING!==m.CANVAS_OVER){if(m.CANVAS_DRAGGING.mouseup){m.CANVAS_DRAGGING.prehandleEvent(e);m.CANVAS_DRAGGING.mouseup(e);}}m.CANVAS_DRAGGING=undefined;});// handles modifier keys from a single keyboard\nq(document).keydown(function(e){m.SHIFT=e.shiftKey;m.ALT=e.altKey;m.META=e.metaKey||e.ctrlKey;var affecting=m.CANVAS_OVER;if(m.CANVAS_DRAGGING){affecting=m.CANVAS_DRAGGING;}if(affecting){if(affecting.keydown){affecting.prehandleEvent(e);affecting.keydown(e);}}});q(document).keypress(function(e){var affecting=m.CANVAS_OVER;if(m.CANVAS_DRAGGING){affecting=m.CANVAS_DRAGGING;}if(affecting){if(affecting.keypress){affecting.prehandleEvent(e);affecting.keypress(e);}}});q(document).keyup(function(e){m.SHIFT=e.shiftKey;m.ALT=e.altKey;m.META=e.metaKey||e.ctrlKey;var affecting=m.CANVAS_OVER;if(m.CANVAS_DRAGGING){affecting=m.CANVAS_DRAGGING;}if(affecting){if(affecting.keyup){affecting.prehandleEvent(e);affecting.keyup(e);}}});});}return m;}(ChemDoodle.featureDetection,ChemDoodle.lib.jQuery,document);(function(c,featureDetection,math,monitor,structures,q,m,document,window,userAgent,undefined){'use strict';c._Canvas=function(){};var _=c._Canvas.prototype;_.molecules=undefined;_.shapes=undefined;_.emptyMessage=undefined;_.image=undefined;_.repaint=function(){if(this.test){return;}var canvas=document.getElementById(this.id);if(canvas.getContext){var ctx=canvas.getContext('2d');if(this.pixelRatio!==1&&canvas.width===this.width){canvas.width=this.width*this.pixelRatio;canvas.height=this.height*this.pixelRatio;ctx.scale(this.pixelRatio,this.pixelRatio);}if(!this.image){if(this.specs.backgroundColor&&this.bgCache!==canvas.style.backgroundColor){canvas.style.backgroundColor=this.specs.backgroundColor;this.bgCache=canvas.style.backgroundColor;}// clearRect is correct, but doesn't work as expected on Android\n// ctx.clearRect(0, 0, this.width, this.height);\nctx.fillStyle=this.specs.backgroundColor;ctx.fillRect(0,0,this.width,this.height);}else{ctx.drawImage(this.image,0,0);}if(this.innerRepaint){this.innerRepaint(ctx);}else{if(this.molecules.length!==0||this.shapes.length!==0){ctx.save();ctx.translate(this.width/2,this.height/2);ctx.rotate(this.specs.rotateAngle);ctx.scale(this.specs.scale,this.specs.scale);ctx.translate(-this.width/2,-this.height/2);for(var i=0,ii=this.molecules.length;i<ii;i++){this.molecules[i].check(true);this.molecules[i].draw(ctx,this.specs);}if(this.checksOnAction){// checksOnAction() must be called after checking molecules, as it depends on molecules being correct\n// this function is only used by the uis\nthis.checksOnAction(true);}for(var i=0,ii=this.shapes.length;i<ii;i++){this.shapes[i].draw(ctx,this.specs);}ctx.restore();}else if(this.emptyMessage){ctx.fillStyle='#737683';ctx.textAlign='center';ctx.textBaseline='middle';ctx.font='18px Helvetica, Verdana, Arial, Sans-serif';ctx.fillText(this.emptyMessage,this.width/2,this.height/2);}}if(this.drawChildExtras){this.drawChildExtras(ctx,this.specs);}}};_.resize=function(w,h){var cap=q('#'+this.id);cap.attr({width:w,height:h});cap.css('width',w);cap.css('height',h);this.width=w;this.height=h;if(c._Canvas3D&&this instanceof c._Canvas3D){var wu=w;var hu=h;if(this.pixelRatio!==1){wu*=this.pixelRatio;hu*=this.pixelRatio;this.gl.canvas.width=wu;this.gl.canvas.height=hu;}this.gl.viewport(0,0,wu,hu);this.afterLoadContent();}else if(this.molecules.length>0){this.center();for(var i=0,ii=this.molecules.length;i<ii;i++){this.molecules[i].check();}}this.repaint();};_.setBackgroundImage=function(path){this.image=new Image();// Create new Image object\nvar me=this;this.image.onload=function(){me.repaint();};this.image.src=path;// Set source path\n};_.loadMolecule=function(molecule){this.clear();this.molecules.push(molecule);// do this twice to center based on atom labels, which must be first rendered to be considered in bounds\nfor(var i=0;i<2;i++){this.center();if(!(c._Canvas3D&&this instanceof c._Canvas3D)){molecule.check();}if(this.afterLoadContent){this.afterLoadContent();}this.repaint();}};_.loadContent=function(mols,shapes){this.molecules=mols?mols:[];this.shapes=shapes?shapes:[];// do this twice to center based on atom labels, which must be first rendered to be considered in bounds\nfor(var i=0;i<2;i++){this.center();if(!(c._Canvas3D&&this instanceof c._Canvas3D)){for(var i=0,ii=this.molecules.length;i<ii;i++){this.molecules[i].check();}}if(this.afterLoadContent){this.afterLoadContent();}this.repaint();}};_.addMolecule=function(molecule){this.molecules.push(molecule);if(!(c._Canvas3D&&this instanceof c._Canvas3D)){molecule.check();}this.repaint();};_.removeMolecule=function(mol){this.molecules=q.grep(this.molecules,function(value){return value!==mol;});this.repaint();};_.getMolecule=function(){return this.molecules.length>0?this.molecules[0]:undefined;};_.getMolecules=function(){return this.molecules;};_.addShape=function(shape){this.shapes.push(shape);this.repaint();};_.removeShape=function(shape){this.shapes=q.grep(this.shapes,function(value){return value!==shape;});this.repaint();};_.getShapes=function(){return this.shapes;};_.clear=function(){this.molecules=[];this.shapes=[];this.specs.scale=1;this.repaint();};_.center=function(){var bounds=this.getContentBounds();var center=new structures.Point((this.width-bounds.minX-bounds.maxX)/2,(this.height-bounds.minY-bounds.maxY)/2);for(var i=0,ii=this.molecules.length;i<ii;i++){var mol=this.molecules[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){mol.atoms[j].add(center);}}for(var i=0,ii=this.shapes.length;i<ii;i++){var sps=this.shapes[i].getPoints();for(var j=0,jj=sps.length;j<jj;j++){sps[j].add(center);}}this.specs.scale=1;var difX=bounds.maxX-bounds.minX;var difY=bounds.maxY-bounds.minY;if(difX>this.width-20||difY>this.height-20){this.specs.scale=m.min(this.width/difX,this.height/difY)*.85;}};_.bondExists=function(a1,a2){for(var i=0,ii=this.molecules.length;i<ii;i++){var mol=this.molecules[i];for(var j=0,jj=mol.bonds.length;j<jj;j++){var b=mol.bonds[j];if(b.contains(a1)&&b.contains(a2)){return true;}}}return false;};_.getBond=function(a1,a2){for(var i=0,ii=this.molecules.length;i<ii;i++){var mol=this.molecules[i];for(var j=0,jj=mol.bonds.length;j<jj;j++){var b=mol.bonds[j];if(b.contains(a1)&&b.contains(a2)){return b;}}}return undefined;};_.getMoleculeByAtom=function(a){for(var i=0,ii=this.molecules.length;i<ii;i++){var mol=this.molecules[i];if(mol.atoms.indexOf(a)!==-1){return mol;}}return undefined;};_.getAllAtoms=function(){var as=[];for(var i=0,ii=this.molecules.length;i<ii;i++){as=as.concat(this.molecules[i].atoms);}return as;};_.getAllBonds=function(){var bs=[];for(var i=0,ii=this.molecules.length;i<ii;i++){bs=bs.concat(this.molecules[i].bonds);}return bs;};_.getAllPoints=function(){var ps=[];for(var i=0,ii=this.molecules.length;i<ii;i++){ps=ps.concat(this.molecules[i].atoms);}for(var i=0,ii=this.shapes.length;i<ii;i++){ps=ps.concat(this.shapes[i].getPoints());}return ps;};_.getContentBounds=function(){var bounds=new math.Bounds();for(var i=0,ii=this.molecules.length;i<ii;i++){bounds.expand(this.molecules[i].getBounds());}for(var i=0,ii=this.shapes.length;i<ii;i++){bounds.expand(this.shapes[i].getBounds());}return bounds;};_.create=function(id,width,height){this.id=id;this.width=width;this.height=height;this.molecules=[];this.shapes=[];if(document.getElementById(id)){var canvas=q('#'+id);if(!width){this.width=canvas.attr('width');}else{canvas.attr('width',width);}if(!height){this.height=canvas.attr('height');}else{canvas.attr('height',height);}// If the canvas is pre-created, make sure that the class attribute\n// is specified.\ncanvas.attr('class','ChemDoodleWebComponent');}else if(!c.featureDetection.supports_canvas_text()&&userAgent.indexOf(\"MSIE\")!=-1){// Install Google Chrome Frame\ndocument.writeln('<div style=\"border: 1px solid black;\" width=\"'+width+'\" height=\"'+height+'\">Please install <a href=\"http://code.google.com/chrome/chromeframe/\">Google Chrome Frame</a>, then restart Internet Explorer.</div>');return;}else{document.writeln('<canvas class=\"ChemDoodleWebComponent\" id=\"'+id+'\" width=\"'+width+'\" height=\"'+height+'\" alt=\"ChemDoodle Web Component\">This browser does not support HTML5/Canvas.</canvas>');}var jqCapsule=q('#'+id);jqCapsule.css('width',this.width);jqCapsule.css('height',this.height);this.pixelRatio=window.devicePixelRatio?window.devicePixelRatio:1;this.specs=new structures.VisualSpecifications();// setup input events\n// make sure prehandle events are only in if statements if handled, so\n// as not to block browser events\nvar me=this;if(featureDetection.supports_touch()){// for iPhone OS and Android devices (and other mobile browsers that\n// support mobile events)\njqCapsule.bind('touchstart',function(e){var time=new Date().getTime();if(!featureDetection.supports_gesture()&&e.originalEvent.touches.length===2){// on some platforms, like Android, there is no gesture\n// support, so we have to implement it\nvar ts=e.originalEvent.touches;var p1=new structures.Point(ts[0].pageX,ts[0].pageY);var p2=new structures.Point(ts[1].pageX,ts[1].pageY);me.implementedGestureDist=p1.distance(p2);me.implementedGestureAngle=p1.angle(p2);if(me.gesturestart){me.prehandleEvent(e);me.gesturestart(e);}}if(me.lastTouch&&e.originalEvent.touches.length===1&&time-me.lastTouch<500){if(me.dbltap){me.prehandleEvent(e);me.dbltap(e);}else if(me.dblclick){me.prehandleEvent(e);me.dblclick(e);}else if(me.touchstart){me.prehandleEvent(e);me.touchstart(e);}else if(me.mousedown){me.prehandleEvent(e);me.mousedown(e);}}else if(me.touchstart){me.prehandleEvent(e);me.touchstart(e);if(this.hold){clearTimeout(this.hold);}if(this.touchhold){this.hold=setTimeout(function(){me.touchhold(e);},1000);}}else if(me.mousedown){me.prehandleEvent(e);me.mousedown(e);}me.lastTouch=time;});jqCapsule.bind('touchmove',function(e){if(this.hold){clearTimeout(this.hold);this.hold=undefined;}if(!featureDetection.supports_gesture()&&e.originalEvent.touches.length===2){// on some platforms, like Android, there is no gesture\n// support, so we have to implement it\nif(me.gesturechange){var ts=e.originalEvent.touches;var p1=new structures.Point(ts[0].pageX,ts[0].pageY);var p2=new structures.Point(ts[1].pageX,ts[1].pageY);var newDist=p1.distance(p2);var newAngle=p1.angle(p2);e.originalEvent.scale=newDist/me.implementedGestureDist;e.originalEvent.rotation=180*(me.implementedGestureAngle-newAngle)/m.PI;me.prehandleEvent(e);me.gesturechange(e);}}if(e.originalEvent.touches.length>1&&me.multitouchmove){var numFingers=e.originalEvent.touches.length;me.prehandleEvent(e);var center=new structures.Point(-e.offset.left*numFingers,-e.offset.top*numFingers);for(var i=0;i<numFingers;i++){center.x+=e.originalEvent.changedTouches[i].pageX;center.y+=e.originalEvent.changedTouches[i].pageY;}center.x/=numFingers;center.y/=numFingers;e.p=center;me.multitouchmove(e,numFingers);}else if(me.touchmove){me.prehandleEvent(e);me.touchmove(e);}else if(me.drag){me.prehandleEvent(e);me.drag(e);}});jqCapsule.bind('touchend',function(e){if(this.hold){clearTimeout(this.hold);this.hold=undefined;}if(!featureDetection.supports_gesture()&&me.implementedGestureDist){// on some platforms, like Android, there is no gesture\n// support, so we have to implement it\nme.implementedGestureDist=undefined;me.implementedGestureAngle=undefined;if(me.gestureend){me.prehandleEvent(e);me.gestureend(e);}}if(me.touchend){me.prehandleEvent(e);me.touchend(e);}else if(me.mouseup){me.prehandleEvent(e);me.mouseup(e);}if(new Date().getTime()-me.lastTouch<250){if(me.tap){me.prehandleEvent(e);me.tap(e);}else if(me.click){me.prehandleEvent(e);me.click(e);}}});jqCapsule.bind('gesturestart',function(e){if(me.gesturestart){me.prehandleEvent(e);me.gesturestart(e);}});jqCapsule.bind('gesturechange',function(e){if(me.gesturechange){me.prehandleEvent(e);me.gesturechange(e);}});jqCapsule.bind('gestureend',function(e){if(me.gestureend){me.prehandleEvent(e);me.gestureend(e);}});}else{// normal events\n// some mobile browsers will simulate mouse events, so do not set\n// these\n// events if mobile, or it will interfere with the handling of touch\n// events\njqCapsule.click(function(e){switch(e.which){case 1:// left mouse button pressed\nif(me.click){me.prehandleEvent(e);me.click(e);}break;case 2:// middle mouse button pressed\nif(me.middleclick){me.prehandleEvent(e);me.middleclick(e);}break;case 3:// right mouse button pressed\nif(me.rightclick){me.prehandleEvent(e);me.rightclick(e);}break;}});jqCapsule.dblclick(function(e){if(me.dblclick){me.prehandleEvent(e);me.dblclick(e);}});jqCapsule.mousedown(function(e){switch(e.which){case 1:// left mouse button pressed\nmonitor.CANVAS_DRAGGING=me;if(me.mousedown){me.prehandleEvent(e);me.mousedown(e);}break;case 2:// middle mouse button pressed\nif(me.middlemousedown){me.prehandleEvent(e);me.middlemousedown(e);}break;case 3:// right mouse button pressed\nif(me.rightmousedown){me.prehandleEvent(e);me.rightmousedown(e);}break;}});jqCapsule.mousemove(function(e){if(!monitor.CANVAS_DRAGGING&&me.mousemove){me.prehandleEvent(e);me.mousemove(e);}});jqCapsule.mouseout(function(e){monitor.CANVAS_OVER=undefined;if(me.mouseout){me.prehandleEvent(e);me.mouseout(e);}});jqCapsule.mouseover(function(e){monitor.CANVAS_OVER=me;if(me.mouseover){me.prehandleEvent(e);me.mouseover(e);}});jqCapsule.mouseup(function(e){switch(e.which){case 1:// left mouse button pressed\nif(me.mouseup){me.prehandleEvent(e);me.mouseup(e);}break;case 2:// middle mouse button pressed\nif(me.middlemouseup){me.prehandleEvent(e);me.middlemouseup(e);}break;case 3:// right mouse button pressed\nif(me.rightmouseup){me.prehandleEvent(e);me.rightmouseup(e);}break;}});jqCapsule.mousewheel(function(e,delta){if(me.mousewheel){me.prehandleEvent(e);me.mousewheel(e,delta);}});}if(this.subCreate){this.subCreate();}};_.prehandleEvent=function(e){if(e.originalEvent.changedTouches){e.pageX=e.originalEvent.changedTouches[0].pageX;e.pageY=e.originalEvent.changedTouches[0].pageY;}if(!this.doEventDefault){e.preventDefault();e.returnValue=false;}e.offset=q('#'+this.id).offset();e.p=new structures.Point(e.pageX-e.offset.left,e.pageY-e.offset.top);};})(ChemDoodle,ChemDoodle.featureDetection,ChemDoodle.math,ChemDoodle.monitor,ChemDoodle.structures,ChemDoodle.lib.jQuery,Math,document,window,navigator.userAgent);(function(c,animations,undefined){'use strict';c._AnimatorCanvas=function(id,width,height){if(id){this.create(id,width,height);}};var _=c._AnimatorCanvas.prototype=new c._Canvas();_.timeout=33;_.startAnimation=function(){this.stopAnimation();this.lastTime=new Date().getTime();var me=this;if(this.nextFrame){this.handle=animations.requestInterval(function(){// advance clock\nvar timeNow=new Date().getTime();// update and repaint\nme.nextFrame(timeNow-me.lastTime);me.repaint();me.lastTime=timeNow;},this.timeout);}};_.stopAnimation=function(){if(this.handle){animations.clearRequestInterval(this.handle);this.handle=undefined;}};_.isRunning=function(){// must compare to undefined here to return a boolean\nreturn this.handle!==undefined;};})(ChemDoodle,ChemDoodle.animations);(function(c,document,undefined){'use strict';c.FileCanvas=function(id,width,height,action){if(id){this.create(id,width,height);}var form='<br><form name=\"FileForm\" enctype=\"multipart/form-data\" method=\"POST\" action=\"'+action+'\" target=\"HiddenFileFrame\"><input type=\"file\" name=\"f\" /><input type=\"submit\" name=\"submitbutton\" value=\"Show File\" /></form><iframe id=\"HFF-'+id+'\" name=\"HiddenFileFrame\" height=\"0\" width=\"0\" style=\"display:none;\" onLoad=\"GetMolFromFrame(\\'HFF-'+id+'\\', '+id+')\"></iframe>';document.writeln(form);this.emptyMessage='Click below to load file';this.repaint();};c.FileCanvas.prototype=new c._Canvas();})(ChemDoodle,document);(function(c,undefined){'use strict';c.HyperlinkCanvas=function(id,width,height,urlOrFunction,color,size){if(id){this.create(id,width,height);}this.urlOrFunction=urlOrFunction;this.color=color?color:'blue';this.size=size?size:2;};var _=c.HyperlinkCanvas.prototype=new c._Canvas();_.openInNewWindow=true;_.hoverImage=undefined;_.drawChildExtras=function(ctx){if(this.e){if(this.hoverImage){ctx.drawImage(this.hoverImage,0,0);}else{ctx.strokeStyle=this.color;ctx.lineWidth=this.size*2;ctx.strokeRect(0,0,this.width,this.height);}}};_.setHoverImage=function(url){this.hoverImage=new Image();this.hoverImage.src=url;};_.click=function(p){this.e=undefined;this.repaint();if(this.urlOrFunction instanceof Function){this.urlOrFunction();}else{if(this.openInNewWindow){window.open(this.urlOrFunction);}else{location.href=this.urlOrFunction;}}};_.mouseout=function(e){this.e=undefined;this.repaint();};_.mouseover=function(e){this.e=e;this.repaint();};})(ChemDoodle);(function(c,iChemLabs,q,document,undefined){'use strict';c.MolGrabberCanvas=function(id,width,height){if(id){this.create(id,width,height);}var sb=[];sb.push('<br><input type=\"text\" id=\"');sb.push(id);sb.push('_query\" size=\"32\" value=\"\" />');sb.push(this.getInputFields());// Don't use document.writeln here, it breaks the whole page after\n// document is closed.\ndocument.getElementById(id);var canvas=q('#'+id);canvas.after(sb.join(''));var self=this;q('#'+id+'_submit').click(function(){self.search();});q('#'+id+'_query').keypress(function(e){if(e.which===13){self.search();}});this.emptyMessage='Enter search term below';this.repaint();};var _=c.MolGrabberCanvas.prototype=new c._Canvas();_.setSearchTerm=function(term){q('#'+this.id+'_query').val(term);this.search();};_.getInputFields=function(){var sb=[];sb.push('<br><nobr>');sb.push('<select id=\"');sb.push(this.id);sb.push('_select\">');sb.push('<option value=\"chemexper\">ChemExper');sb.push('<option value=\"chemspider\">ChemSpider');sb.push('<option value=\"pubchem\" selected>PubChem');sb.push('</select>');sb.push('<button id=\"');sb.push(this.id);sb.push('_submit\">Show Molecule</button>');sb.push('</nobr>');return sb.join('');};_.search=function(){this.emptyMessage='Searching...';this.clear();var self=this;iChemLabs.getMoleculeFromDatabase(q('#'+this.id+'_query').val(),{database:q('#'+this.id+'_select').val()},function(mol){self.loadMolecule(mol);});};})(ChemDoodle,ChemDoodle.iChemLabs,ChemDoodle.lib.jQuery,document);(function(c,m,m4,undefined){'use strict';// keep these declaration outside the loop to avoid overhead\nvar matrix=[];var xAxis=[1,0,0];var yAxis=[0,1,0];var zAxis=[0,0,1];c.RotatorCanvas=function(id,width,height,rotate3D){if(id){this.create(id,width,height);}this.rotate3D=rotate3D;};var _=c.RotatorCanvas.prototype=new c._AnimatorCanvas();var increment=m.PI/15;_.xIncrement=increment;_.yIncrement=increment;_.zIncrement=increment;_.nextFrame=function(delta){if(this.molecules.length===0&&this.shapes.length===0){this.stopAnimation();return;}var change=delta/1000;if(this.rotate3D){m4.identity(matrix);m4.rotate(matrix,this.xIncrement*change,xAxis);m4.rotate(matrix,this.yIncrement*change,yAxis);m4.rotate(matrix,this.zIncrement*change,zAxis);for(var i=0,ii=this.molecules.length;i<ii;i++){var m=this.molecules[i];for(var j=0,jj=m.atoms.length;j<jj;j++){var a=m.atoms[j];var p=[a.x-this.width/2,a.y-this.height/2,a.z];m4.multiplyVec3(matrix,p);a.x=p[0]+this.width/2;a.y=p[1]+this.height/2;a.z=p[2];}for(var j=0,jj=m.rings.length;j<jj;j++){m.rings[j].center=m.rings[j].getCenter();}if(this.specs.atoms_display&&this.specs.atoms_circles_2D){m.sortAtomsByZ();}if(this.specs.bonds_display&&this.specs.bonds_clearOverlaps_2D){m.sortBondsByZ();}}for(var i=0,ii=this.shapes.length;i<ii;i++){var sps=this.shapes[i].getPoints();for(var j=0,jj=sps.length;j<jj;j++){var a=sps[j];var p=[a.x-this.width/2,a.y-this.height/2,0];m4.multiplyVec3(matrix,p);a.x=p[0]+this.width/2;a.y=p[1]+this.height/2;}}}else{this.specs.rotateAngle+=this.zIncrement*change;}};_.dblclick=function(e){if(this.isRunning()){this.stopAnimation();}else{this.startAnimation();}};})(ChemDoodle,Math,ChemDoodle.lib.mat4);(function(c,animations,math,undefined){'use strict';c.SlideshowCanvas=function(id,width,height){if(id){this.create(id,width,height);}};var _=c.SlideshowCanvas.prototype=new c._AnimatorCanvas();_.frames=[];_.curIndex=0;_.timeout=5000;_.alpha=0;_.innerHandle=undefined;_.phase=0;_.drawChildExtras=function(ctx){var rgb=math.getRGB(this.specs.backgroundColor,255);ctx.fillStyle='rgba('+rgb[0]+', '+rgb[1]+', '+rgb[2]+', '+this.alpha+')';ctx.fillRect(0,0,this.width,this.height);};_.nextFrame=function(delta){if(this.frames.length===0){this.stopAnimation();return;}this.phase=0;var me=this;var count=1;this.innerHandle=setInterval(function(){me.alpha=count/15;me.repaint();if(count===15){me.breakInnerHandle();}count++;},33);};_.breakInnerHandle=function(){if(this.innerHandle){clearInterval(this.innerHandle);this.innerHandle=undefined;}if(this.phase===0){this.curIndex++;if(this.curIndex>this.frames.length-1){this.curIndex=0;}this.alpha=1;var f=this.frames[this.curIndex];this.loadContent(f.mols,f.shapes);this.phase=1;var me=this;var count=1;this.innerHandle=setInterval(function(){me.alpha=(15-count)/15;me.repaint();if(count===15){me.breakInnerHandle();}count++;},33);}else if(this.phase===1){this.alpha=0;this.repaint();}};_.addFrame=function(molecules,shapes){if(this.frames.length===0){this.loadContent(molecules,shapes);}this.frames.push({mols:molecules,shapes:shapes});};})(ChemDoodle,ChemDoodle.animations,ChemDoodle.math);(function(c,monitor,structures,m,m4,undefined){'use strict';c.TransformCanvas=function(id,width,height,rotate3D){if(id){this.create(id,width,height);}this.rotate3D=rotate3D;};var _=c.TransformCanvas.prototype=new c._Canvas();_.lastPoint=undefined;_.rotationMultMod=1.3;_.lastPinchScale=1;_.lastGestureRotate=0;_.mousedown=function(e){this.lastPoint=e.p;};_.dblclick=function(e){// center structure\nthis.center();this.repaint();};_.drag=function(e){if(!this.lastPoint.multi){if(monitor.ALT){var t=new structures.Point(e.p.x,e.p.y);t.sub(this.lastPoint);for(var i=0,ii=this.molecules.length;i<ii;i++){var mol=this.molecules[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){mol.atoms[j].add(t);}mol.check();}for(var i=0,ii=this.shapes.length;i<ii;i++){var sps=this.shapes[i].getPoints();for(var j=0,jj=sps.length;j<jj;j++){sps[j].add(t);}}this.lastPoint=e.p;this.repaint();}else{if(this.rotate3D===true){var diameter=m.max(this.width/4,this.height/4);var difx=e.p.x-this.lastPoint.x;var dify=e.p.y-this.lastPoint.y;var yIncrement=difx/diameter*this.rotationMultMod;var xIncrement=-dify/diameter*this.rotationMultMod;var matrix=[];m4.identity(matrix);m4.rotate(matrix,xIncrement,[1,0,0]);m4.rotate(matrix,yIncrement,[0,1,0]);for(var i=0,ii=this.molecules.length;i<ii;i++){var mol=this.molecules[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];var p=[a.x-this.width/2,a.y-this.height/2,a.z];m4.multiplyVec3(matrix,p);a.x=p[0]+this.width/2;a.y=p[1]+this.height/2;a.z=p[2];}for(var i=0,ii=mol.rings.length;i<ii;i++){mol.rings[i].center=mol.rings[i].getCenter();}this.lastPoint=e.p;if(this.specs.atoms_display&&this.specs.atoms_circles_2D){mol.sortAtomsByZ();}if(this.specs.bonds_display&&this.specs.bonds_clearOverlaps_2D){mol.sortBondsByZ();}}this.repaint();}else{var center=new structures.Point(this.width/2,this.height/2);var before=center.angle(this.lastPoint);var after=center.angle(e.p);this.specs.rotateAngle-=after-before;this.lastPoint=e.p;this.repaint();}}}};_.mousewheel=function(e,delta){this.specs.scale+=delta/50;if(this.specs.scale<.01){this.specs.scale=.01;}this.repaint();};_.multitouchmove=function(e,numFingers){if(numFingers===2){if(this.lastPoint.multi){var t=new structures.Point(e.p.x,e.p.y);t.sub(this.lastPoint);for(var i=0,ii=this.molecules.length;i<ii;i++){var m=this.molecules[i];for(var j=0,jj=m.atoms.length;j<jj;j++){m.atoms[j].add(t);}m.check();}for(var i=0,ii=this.shapes.length;i<ii;i++){var sps=this.shapes[i].getPoints();for(var j=0,jj=sps.length;j<jj;j++){sps[j].add(t);}}this.lastPoint=e.p;this.lastPoint.multi=true;this.repaint();}else{this.lastPoint=e.p;this.lastPoint.multi=true;}}};_.gesturechange=function(e){if(e.originalEvent.scale-this.lastPinchScale!==0){this.specs.scale*=e.originalEvent.scale/this.lastPinchScale;if(this.specs.scale<.01){this.specs.scale=.01;}this.lastPinchScale=e.originalEvent.scale;}if(this.lastGestureRotate-e.originalEvent.rotation!==0){var rot=(this.lastGestureRotate-e.originalEvent.rotation)/180*m.PI;var center=new structures.Point(this.width/2,this.height/2);for(var i=0,ii=this.molecules.length;i<ii;i++){var mol=this.molecules[i];for(var j=0,jj=mol.atoms.length;j<jj;j++){var a=mol.atoms[j];var dist=center.distance(a);var angle=center.angle(a)+rot;a.x=center.x+dist*m.cos(angle);a.y=center.y-dist*m.sin(angle);}mol.check();}this.lastGestureRotate=e.originalEvent.rotation;}this.repaint();};_.gestureend=function(e){this.lastPinchScale=1;this.lastGestureRotate=0;};})(ChemDoodle,ChemDoodle.monitor,ChemDoodle.structures,Math,ChemDoodle.lib.mat4);(function(c,undefined){'use strict';c.ViewerCanvas=function(id,width,height){if(id){this.create(id,width,height);}};c.ViewerCanvas.prototype=new c._Canvas();})(ChemDoodle);(function(c,document,undefined){'use strict';c._SpectrumCanvas=function(id,width,height){if(id){this.create(id,width,height);}};var _=c._SpectrumCanvas.prototype=new c._Canvas();_.spectrum=undefined;_.emptyMessage='No Spectrum Loaded or Recognized';_.loadMolecule=undefined;_.getMolecule=undefined;_.innerRepaint=function(ctx){if(this.spectrum&&this.spectrum.data.length>0){this.spectrum.draw(ctx,this.specs,this.width,this.height);}else if(this.emptyMessage){ctx.fillStyle='#737683';ctx.textAlign='center';ctx.textBaseline='middle';ctx.font='18px Helvetica, Verdana, Arial, Sans-serif';ctx.fillText(this.emptyMessage,this.width/2,this.height/2);}};_.loadSpectrum=function(spectrum){this.spectrum=spectrum;this.repaint();};_.getSpectrum=function(){return this.spectrum;};_.getSpectrumCoordinates=function(x,y){return spectrum.getInternalCoordinates(x,y,this.width,this.height);};})(ChemDoodle,document);(function(c,undefined){'use strict';c.ObserverCanvas=function(id,width,height){if(id){this.create(id,width,height);}};c.ObserverCanvas.prototype=new c._SpectrumCanvas();})(ChemDoodle);(function(c,undefined){'use strict';c.OverlayCanvas=function(id,width,height){if(id){this.create(id,width,height);}};var _=c.OverlayCanvas.prototype=new c._SpectrumCanvas();_.overlaySpectra=[];_.superRepaint=_.innerRepaint;_.innerRepaint=function(ctx){this.superRepaint(ctx);if(this.spectrum&&this.spectrum.data.length>0){for(var i=0,ii=this.overlaySpectra.length;i<ii;i++){var s=this.overlaySpectra[i];if(s&&s.data.length>0){s.minX=this.spectrum.minX;s.maxX=this.spectrum.maxX;s.drawPlot(ctx,this.specs,this.width,this.height,this.spectrum.memory.offsetTop,this.spectrum.memory.offsetLeft,this.spectrum.memory.offsetBottom);}}}};_.addSpectrum=function(spectrum){if(!this.spectrum){this.spectrum=spectrum;}else{this.overlaySpectra.push(spectrum);}};})(ChemDoodle);(function(c,monitor,m,undefined){'use strict';c.PerspectiveCanvas=function(id,width,height){if(id){this.create(id,width,height);}};var _=c.PerspectiveCanvas.prototype=new c._SpectrumCanvas();_.dragRange=undefined;_.rescaleYAxisOnZoom=true;_.lastPinchScale=1;_.mousedown=function(e){this.dragRange=new c.structures.Point(e.p.x,e.p.x);};_.mouseup=function(e){if(this.dragRange&&this.dragRange.x!==this.dragRange.y){if(!this.dragRange.multi){var newScale=this.spectrum.zoom(this.dragRange.x,e.p.x,this.width,this.rescaleYAxisOnZoom);if(this.rescaleYAxisOnZoom){this.specs.scale=newScale;}}this.dragRange=undefined;this.repaint();}};_.drag=function(e){if(this.dragRange){if(this.dragRange.multi){this.dragRange=undefined;}else if(monitor.SHIFT){this.spectrum.translate(e.p.x-this.dragRange.x,this.width);this.dragRange.x=e.p.x;this.dragRange.y=e.p.x;}else{this.dragRange.y=e.p.x;}this.repaint();}};_.drawChildExtras=function(ctx){if(this.dragRange){var xs=m.min(this.dragRange.x,this.dragRange.y);var xe=m.max(this.dragRange.x,this.dragRange.y);ctx.strokeStyle='gray';ctx.lineStyle=1;ctx.beginPath();ctx.moveTo(xs,this.height/2);for(var i=xs;i<=xe;i++){if(i%10<5){ctx.lineTo(i,m.round(this.height/2));}else{ctx.moveTo(i,m.round(this.height/2));}}ctx.stroke();}};_.mousewheel=function(e,delta){this.specs.scale+=delta/10;if(this.specs.scale<.01){this.specs.scale=.01;}this.repaint();};_.dblclick=function(e){this.spectrum.setup();this.specs.scale=1;this.repaint();};_.multitouchmove=function(e,numFingers){if(numFingers===2){if(!this.dragRange||!this.dragRange.multi){this.dragRange=new c.structures.Point(e.p.x,e.p.x);this.dragRange.multi=true;}else{this.spectrum.translate(e.p.x-this.dragRange.x,this.width);this.dragRange.x=e.p.x;this.dragRange.y=e.p.x;this.repaint();}}};_.gesturechange=function(e){this.specs.scale*=e.originalEvent.scale/this.lastPinchScale;if(this.specs.scale<.01){this.specs.scale=.01;}this.lastPinchScale=e.originalEvent.scale;this.repaint();};_.gestureend=function(e){this.lastPinchScale=1;};})(ChemDoodle,ChemDoodle.monitor,Math);(function(c,extensions,m,undefined){'use strict';c.SeekerCanvas=function(id,width,height,seekType){if(id){this.create(id,width,height);}this.seekType=seekType;};var _=c.SeekerCanvas.prototype=new c._SpectrumCanvas();_.superRepaint=_.innerRepaint;_.innerRepaint=function(ctx){this.superRepaint(ctx);if(this.spectrum&&this.spectrum.data.length>0&&this.p){// set up coords\nvar renderP;var internalP;if(this.seekType===c.SeekerCanvas.SEEK_POINTER){renderP=this.p;internalP=this.spectrum.getInternalCoordinates(renderP.x,renderP.y);}else if(this.seekType===c.SeekerCanvas.SEEK_PLOT||this.seekType===c.SeekerCanvas.SEEK_PEAK){internalP=this.seekType===c.SeekerCanvas.SEEK_PLOT?this.spectrum.getClosestPlotInternalCoordinates(this.p.x):this.spectrum.getClosestPeakInternalCoordinates(this.p.x);if(!internalP){return;}renderP={x:this.spectrum.getTransformedX(internalP.x,this.specs,this.width,this.spectrum.memory.offsetLeft),y:this.spectrum.getTransformedY(internalP.y/100,this.specs,this.height,this.spectrum.memory.offsetBottom,this.spectrum.memory.offsetTop)};}// draw point\nctx.fillStyle='white';ctx.strokeStyle=this.specs.plots_color;ctx.lineWidth=this.specs.plots_width;ctx.beginPath();ctx.arc(renderP.x,renderP.y,3,0,m.PI*2,false);ctx.fill();ctx.stroke();// draw internal coordinates\nctx.font=extensions.getFontString(this.specs.text_font_size,this.specs.text_font_families);ctx.textAlign='left';ctx.textBaseline='bottom';var s='x:'+internalP.x.toFixed(3)+', y:'+internalP.y.toFixed(3);var x=renderP.x+3;var w=ctx.measureText(s).width;if(x+w>this.width-2){x-=6+w;}var y=renderP.y;if(y-this.specs.text_font_size-2<0){y+=this.specs.text_font_size;}ctx.fillRect(x,y-this.specs.text_font_size,w,this.specs.text_font_size);ctx.fillStyle='black';ctx.fillText(s,x,y);}};_.mouseout=function(e){this.p=undefined;this.repaint();};_.mousemove=function(e){this.p={x:e.p.x-2,y:e.p.y-3};this.repaint();};_.touchstart=function(e){this.mousemove(e);};_.touchmove=function(e){this.mousemove(e);};_.touchend=function(e){this.mouseout(e);};c.SeekerCanvas.SEEK_POINTER='pointer';c.SeekerCanvas.SEEK_PLOT='plot';c.SeekerCanvas.SEEK_PEAK='peak';})(ChemDoodle,ChemDoodle.extensions,Math);(function(c,extensions,math,structures,d3,RESIDUE,m,document,m4,m3,v3,q,window,undefined){'use strict';c._Canvas3D=function(id,width,height){if(id){this.create(id,width,height);}};var _=c._Canvas3D.prototype=new c._Canvas();var _super=c._Canvas.prototype;_.rotationMatrix=undefined;_.lastPoint=undefined;_.emptyMessage='WebGL is Unavailable!';_.lastPinchScale=1;_.lastGestureRotate=0;_.afterLoadContent=function(){var bounds=new math.Bounds();for(var i=0,ii=this.molecules.length;i<ii;i++){bounds.expand(this.molecules[i].getBounds3D());}// build fog parameter\nvar maxDimension3D=v3.dist([bounds.maxX,bounds.maxY,bounds.maxZ],[bounds.minX,bounds.minY,bounds.minZ])/2+1.5;if(maxDimension3D===Infinity){// there is no content\nmaxDimension3D=10;}this.maxDimension=m.max(bounds.maxX-bounds.minX,bounds.maxY-bounds.minY);var fov=m.min(179.9,m.max(this.specs.projectionPerspectiveVerticalFieldOfView_3D,0.1));var theta=fov/360*m.PI;var tanTheta=m.tan(theta)/0.8;var top=maxDimension3D;var focalLength=top/tanTheta;var near=focalLength-top;var far=focalLength+top;var aspect=this.width/this.height;this.camera.fieldOfView=fov;this.camera.near=near;this.camera.far=far;this.camera.aspect=aspect;m4.translate(m4.identity(this.camera.viewMatrix),[0,0,-focalLength]);var lightFocalLength=top/m.tan(theta);this.lighting.camera.fieldOfView=fov;this.lighting.camera.near=lightFocalLength-top;this.lighting.camera.far=lightFocalLength+top;this.lighting.updateView();this.setupScene();};_.renderDepthMap=function(){if(this.specs.shadow_3D&&d3.DepthShader){var cullFaceEnabled=this.gl.isEnabled(this.gl.CULL_FACE);if(!cullFaceEnabled){this.gl.enable(this.gl.CULL_FACE);}this.depthShader.useShaderProgram(this.gl);// current clear color\nvar cs=this.gl.getParameter(this.gl.COLOR_CLEAR_VALUE);this.gl.clearColor(1.0,1.0,1.0,0.0);this.lightDepthMapFramebuffer.bind(this.gl,this.shadowTextureSize,this.shadowTextureSize);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);// use light projection matrix to draw the molecule\nthis.depthShader.setProjectionMatrix(this.gl,this.lighting.camera.projectionMatrix);this.depthShader.enableAttribsArray(this.gl);for(var i=0,ii=this.molecules.length;i<ii;i++){this.molecules[i].render(this.gl,this.specs);}this.gl.flush();this.depthShader.disableAttribsArray(this.gl);this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null);// set back the clear color\nthis.gl.clearColor(cs[0],cs[1],cs[2],cs[3]);if(!cullFaceEnabled){this.gl.disable(this.gl.CULL_FACE);}}};// draw anything those not molecules, example compass, shapes, text etc.\n_.renderExtras=function(){this.phongShader.useShaderProgram(this.gl);this.phongShader.enableAttribsArray(this.gl);var transparentShapes=[];for(var i=0,ii=this.shapes.length;i<ii;i++){var s=this.shapes[i];if(s instanceof d3._Surface&&(!s.specs&&this.specs.surfaces_alpha!==1||s.specs&&s.specs.surfaces_alpha!==1)){transparentShapes.push(s);}else{s.render(this.gl,this.specs);}}// transparent shapes\nif(transparentShapes.length!==0){//this.gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\nthis.gl.blendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA);this.gl.enable(this.gl.BLEND);this.gl.depthMask(false);for(var i=0,ii=transparentShapes.length;i<ii;i++){var s=transparentShapes[i];s.render(this.gl,this.specs);}this.gl.depthMask(true);this.gl.disable(this.gl.BLEND);this.gl.blendFuncSeparate(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA,this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA);}this.phongShader.setShadow(this.gl,false);this.phongShader.setFogMode(this.gl,0);this.phongShader.setFlatColor(this.gl,false);// compass use its own model view and projection matrix\n// so it need to use back the default matrix for other\n// rendering process (ex. render arbitrary text).\nif(this.specs.compass_display){this.phongShader.setLightDirection(this.gl,[0,0,-1]);this.compass.render(this.gl,this.specs);}this.phongShader.disableAttribsArray(this.gl);this.gl.flush();// enable blend and depth mask set to false\nthis.gl.enable(this.gl.BLEND);this.gl.depthMask(false);this.labelShader.useShaderProgram(this.gl);// use back the default model view matrix\nthis.labelShader.setMatrixUniforms(this.gl,this.gl.modelViewMatrix);// use back the default projection matrix\nthis.labelShader.setProjectionMatrix(this.gl,this.camera.projectionMatrix);this.labelShader.setDimension(this.gl,this.gl.canvas.clientWidth,this.gl.canvas.clientHeight);// enable vertex for draw text\nthis.labelShader.enableAttribsArray(this.gl);// draw label molecule\nif(this.specs.atoms_displayLabels_3D){this.label3D.render(this.gl,this.specs,this.getMolecules());}// draw measurement text\nif(this.specs.measurement_displayText_3D){for(var i=0,ii=this.shapes.length;i<ii;i++){var s=this.shapes[i];if(s.renderText){s.renderText(this.gl,this.specs);}}}// draw compass X Y Z text\nif(this.specs.compass_display&&this.specs.compass_displayText_3D){this.compass.renderAxis(this.gl);}// disable vertex for draw text\nthis.labelShader.disableAttribsArray(this.gl);// disable blend and depth mask set to true\nthis.gl.disable(this.gl.BLEND);this.gl.depthMask(true);this.gl.flush();if(this.drawChildExtras){this.drawChildExtras(this.gl);}this.gl.flush();};// molecule colors rendeing will both use on forward and deferred rendering\n_.renderColor=function(){this.phongShader.useShaderProgram(this.gl);this.gl.uniform1i(this.phongShader.shadowDepthSampleUniform,0);this.gl.activeTexture(this.gl.TEXTURE0);this.gl.bindTexture(this.gl.TEXTURE_2D,this.lightDepthMapTexture.texture);this.phongShader.setProjectionMatrix(this.gl,this.camera.projectionMatrix);this.phongShader.setShadow(this.gl,this.specs.shadow_3D);this.phongShader.setFlatColor(this.gl,this.specs.flat_color_3D);this.phongShader.setGammaCorrection(this.gl,this.specs.gammaCorrection_3D);this.phongShader.setShadowTextureSize(this.gl,this.shadowTextureSize,this.shadowTextureSize);this.phongShader.setShadowIntensity(this.gl,this.specs.shadow_intensity_3D);this.phongShader.setFogMode(this.gl,this.specs.fog_mode_3D);this.phongShader.setFogColor(this.gl,this.fogging.colorRGB);this.phongShader.setFogStart(this.gl,this.fogging.fogStart);this.phongShader.setFogEnd(this.gl,this.fogging.fogEnd);this.phongShader.setFogDensity(this.gl,this.fogging.density);this.phongShader.setLightProjectionMatrix(this.gl,this.lighting.camera.projectionMatrix);this.phongShader.setLightDiffuseColor(this.gl,this.lighting.diffuseRGB);this.phongShader.setLightSpecularColor(this.gl,this.lighting.specularRGB);this.phongShader.setLightDirection(this.gl,this.lighting.direction);this.phongShader.enableAttribsArray(this.gl);for(var i=0,ii=this.molecules.length;i<ii;i++){this.molecules[i].render(this.gl,this.specs);}this.phongShader.disableAttribsArray(this.gl);this.gl.flush();};_.renderPosition=function(){this.positionShader.useShaderProgram(this.gl);this.positionShader.setProjectionMatrix(this.gl,this.camera.projectionMatrix);this.positionShader.enableAttribsArray(this.gl);for(var i=0,ii=this.molecules.length;i<ii;i++){this.molecules[i].render(this.gl,this.specs);}this.positionShader.disableAttribsArray(this.gl);this.gl.flush();};_.renderNormal=function(){this.normalShader.useShaderProgram(this.gl);this.normalShader.setProjectionMatrix(this.gl,this.camera.projectionMatrix);this.normalShader.enableAttribsArray(this.gl);for(var i=0,ii=this.molecules.length;i<ii;i++){this.molecules[i].render(this.gl,this.specs);}this.normalShader.disableAttribsArray(this.gl);this.gl.flush();};_.renderSSAO=function(){this.ssaoShader.useShaderProgram(this.gl);this.ssaoShader.setProjectionMatrix(this.gl,this.camera.projectionMatrix);this.ssaoShader.setSampleKernel(this.gl,this.ssao.sampleKernel);this.ssaoShader.setKernelRadius(this.gl,this.specs.ssao_kernel_radius);this.ssaoShader.setPower(this.gl,this.specs.ssao_power);this.ssaoShader.setGbufferTextureSize(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.uniform1i(this.ssaoShader.positionSampleUniform,0);this.gl.uniform1i(this.ssaoShader.normalSampleUniform,1);this.gl.uniform1i(this.ssaoShader.noiseSampleUniform,2);this.gl.activeTexture(this.gl.TEXTURE0);this.gl.bindTexture(this.gl.TEXTURE_2D,this.positionTexture.texture);this.gl.activeTexture(this.gl.TEXTURE1);this.gl.bindTexture(this.gl.TEXTURE_2D,this.normalTexture.texture);this.gl.activeTexture(this.gl.TEXTURE2);this.gl.bindTexture(this.gl.TEXTURE_2D,this.ssao.noiseTexture);this.gl.activeTexture(this.gl.TEXTURE0);this.ssaoShader.enableAttribsArray(this.gl);this.gl.quadBuffer.bindBuffers(this.gl);this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.gl.quadBuffer.vertexPositionBuffer.numItems);this.ssaoShader.disableAttribsArray(this.gl);this.gl.flush();// render ssao blur shader\nthis.ssaoFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clear(this.gl.COLOR_BUFFER_BIT);this.ssaoBlurShader.useShaderProgram(this.gl);this.ssaoBlurShader.setGbufferTextureSize(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.uniform1i(this.ssaoBlurShader.aoSampleUniform,0);this.gl.uniform1i(this.ssaoBlurShader.depthSampleUniform,1);this.gl.activeTexture(this.gl.TEXTURE0);this.gl.bindTexture(this.gl.TEXTURE_2D,this.imageTexture.texture);this.gl.activeTexture(this.gl.TEXTURE1);this.gl.bindTexture(this.gl.TEXTURE_2D,this.depthTexture.texture);this.gl.activeTexture(this.gl.TEXTURE0);this.ssaoBlurShader.enableAttribsArray(this.gl);this.gl.quadBuffer.bindBuffers(this.gl);this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.gl.quadBuffer.vertexPositionBuffer.numItems);this.ssaoBlurShader.disableAttribsArray(this.gl);this.gl.activeTexture(this.gl.TEXTURE0);this.gl.flush();};_.renderOutline=function(){this.outlineShader.useShaderProgram(this.gl);this.outlineShader.setGbufferTextureSize(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.outlineShader.setNormalThreshold(this.gl,this.specs.outline_normal_threshold);this.outlineShader.setDepthThreshold(this.gl,this.specs.outline_depth_threshold);this.outlineShader.setThickness(this.gl,this.specs.outline_thickness);this.gl.uniform1i(this.outlineShader.normalSampleUniform,0);this.gl.uniform1i(this.outlineShader.depthSampleUniform,1);this.gl.activeTexture(this.gl.TEXTURE0);this.gl.bindTexture(this.gl.TEXTURE_2D,this.normalTexture.texture);this.gl.activeTexture(this.gl.TEXTURE1);this.gl.bindTexture(this.gl.TEXTURE_2D,this.depthTexture.texture);this.gl.activeTexture(this.gl.TEXTURE0);this.outlineShader.enableAttribsArray(this.gl);this.gl.quadBuffer.bindBuffers(this.gl);this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.gl.quadBuffer.vertexPositionBuffer.numItems);this.outlineShader.disableAttribsArray(this.gl);this.gl.flush();};_.deferredRender=function(){// get backdground color\nvar bgColor=this.gl.getParameter(this.gl.COLOR_CLEAR_VALUE);// set background to black\nthis.gl.clearColor(0.0,0.0,0.0,0.0);// render color\nthis.colorFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);this.renderColor();// render position\nthis.positionFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);this.renderPosition();// render normals\nthis.normalFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);this.renderNormal();// render ssao\nif(this.specs.ssao_3D&&d3.SSAOShader){// render ssao shading\nthis.quadFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clear(this.gl.COLOR_BUFFER_BIT);this.renderSSAO();}else{this.ssaoFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clearColor(1.0,1.0,1.0,1.0);this.gl.clear(this.gl.COLOR_BUFFER_BIT);}// render outline\nthis.outlineFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clearColor(1.0,1.0,1.0,1.0);this.gl.clear(this.gl.COLOR_BUFFER_BIT);if(this.specs.outline_3D){this.renderOutline();}// set back background color\nthis.gl.clearColor(bgColor[0],bgColor[1],bgColor[2],bgColor[3]);// composite render\nthis.quadFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clear(this.gl.COLOR_BUFFER_BIT);this.lightingShader.useShaderProgram(this.gl);this.gl.uniform1i(this.lightingShader.positionSampleUniform,0);this.gl.uniform1i(this.lightingShader.colorSampleUniform,1);this.gl.uniform1i(this.lightingShader.ssaoSampleUniform,2);this.gl.uniform1i(this.lightingShader.outlineSampleUniform,3);this.gl.activeTexture(this.gl.TEXTURE0);this.gl.bindTexture(this.gl.TEXTURE_2D,this.positionTexture.texture);this.gl.activeTexture(this.gl.TEXTURE1);this.gl.bindTexture(this.gl.TEXTURE_2D,this.colorTexture.texture);this.gl.activeTexture(this.gl.TEXTURE2);this.gl.bindTexture(this.gl.TEXTURE_2D,this.ssaoTexture.texture);this.gl.activeTexture(this.gl.TEXTURE3);this.gl.bindTexture(this.gl.TEXTURE_2D,this.outlineTexture.texture);this.gl.activeTexture(this.gl.TEXTURE0);this.lightingShader.enableAttribsArray(this.gl);this.gl.quadBuffer.bindBuffers(this.gl);this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.gl.quadBuffer.vertexPositionBuffer.numItems);this.lightingShader.disableAttribsArray(this.gl);this.gl.flush();// final render\nthis.fxaaFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);// setup viewport\nthis.gl.viewport(0,0,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.bindTexture(this.gl.TEXTURE_2D,this.imageTexture.texture);this.fxaaShader.useShaderProgram(this.gl);this.fxaaShader.setBuffersize(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.fxaaShader.setAntialias(this.gl,this.specs.antialias_3D);this.fxaaShader.setEdgeThreshold(this.gl,this.specs.fxaa_edgeThreshold);this.fxaaShader.setEdgeThresholdMin(this.gl,this.specs.fxaa_edgeThresholdMin);this.fxaaShader.setSearchSteps(this.gl,this.specs.fxaa_searchSteps);this.fxaaShader.setSearchThreshold(this.gl,this.specs.fxaa_searchThreshold);this.fxaaShader.setSubpixCap(this.gl,this.specs.fxaa_subpixCap);this.fxaaShader.setSubpixTrim(this.gl,this.specs.fxaa_subpixTrim);this.fxaaShader.enableAttribsArray(this.gl);this.gl.quadBuffer.bindBuffers(this.gl);this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.gl.quadBuffer.vertexPositionBuffer.numItems);this.fxaaShader.disableAttribsArray(this.gl);this.gl.flush();// final render\nthis.finalFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.renderExtras();// set back background color\nthis.gl.clearColor(bgColor[0],bgColor[1],bgColor[2],bgColor[3]);// last render\nthis.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);// setup viewport\nthis.gl.viewport(0,0,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.bindTexture(this.gl.TEXTURE_2D,this.fxaaTexture.texture);this.quadShader.useShaderProgram(this.gl);this.quadShader.enableAttribsArray(this.gl);this.gl.quadBuffer.bindBuffers(this.gl);this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.gl.quadBuffer.vertexPositionBuffer.numItems);this.quadShader.disableAttribsArray(this.gl);this.gl.flush();};_.forwardRender=function(){// last render\nthis.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);// setup viewport\nthis.gl.viewport(0,0,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.renderColor();this.renderExtras();};_.repaint=function(){if(this.gl){// set up the model view matrix to the specified transformations\nthis.gl.lightViewMatrix=m4.multiply(this.lighting.camera.viewMatrix,this.rotationMatrix,[]);this.gl.rotationMatrix=this.rotationMatrix;this.gl.modelViewMatrix=this.gl.lightViewMatrix;this.renderDepthMap();this.gl.modelViewMatrix=m4.multiply(this.camera.viewMatrix,this.rotationMatrix,[]);if(this.isSupportDeferred()&&(this.specs.ssao_3D||this.specs.outline_3D)){this.deferredRender();}else{this.forwardRender();}}};_.pick=function(x,y,includeAtoms,includeBonds){if(this.gl){// draw with pick framebuffer\nvar xu=x;var yu=this.height-y;if(this.pixelRatio!==1){xu*=this.pixelRatio;yu*=this.pixelRatio;}// set up the model view matrix to the specified transformations\nm4.multiply(this.camera.viewMatrix,this.rotationMatrix,this.gl.modelViewMatrix);this.gl.rotationMatrix=this.rotationMatrix;this.pickShader.useShaderProgram(this.gl);// current clear color\nvar cs=this.gl.getParameter(this.gl.COLOR_CLEAR_VALUE);this.gl.clearColor(1.0,1.0,1.0,0.0);this.pickerFramebuffer.bind(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT);// use default projection matrix to draw the molecule\nthis.pickShader.setProjectionMatrix(this.gl,this.camera.projectionMatrix);// not need the normal for diffuse light, we need flat color\nthis.pickShader.enableAttribsArray(this.gl);var objects=[];for(var i=0,ii=this.molecules.length;i<ii;i++){this.molecules[i].renderPickFrame(this.gl,this.specs,objects,includeAtoms,includeBonds);}this.pickShader.disableAttribsArray(this.gl);this.gl.flush();var rgba=new Uint8Array(4);this.gl.readPixels(xu-2,yu+2,1,1,this.gl.RGBA,this.gl.UNSIGNED_BYTE,rgba);var object=undefined;var idxMolecule=rgba[3];if(idxMolecule>0){var idxAtom=rgba[2]|rgba[1]<<8|rgba[0]<<16;object=objects[idxAtom];}this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null);// set back the clear color\nthis.gl.clearColor(cs[0],cs[1],cs[2],cs[3]);return object;}return undefined;};_.center=function(){var p=new structures.Atom();for(var k=0,kk=this.molecules.length;k<kk;k++){var m=this.molecules[k];p.add3D(m.getCenter3D());}p.x/=this.molecules.length;p.y/=this.molecules.length;for(var k=0,kk=this.molecules.length;k<kk;k++){var m=this.molecules[k];for(var i=0,ii=m.atoms.length;i<ii;i++){m.atoms[i].sub3D(p);}if(m.chains&&m.fromJSON){for(var i=0,ii=m.chains.length;i<ii;i++){var chain=m.chains[i];for(var j=0,jj=chain.length;j<jj;j++){var residue=chain[j];residue.cp1.sub3D(p);residue.cp2.sub3D(p);if(residue.cp3){residue.cp3.sub3D(p);residue.cp4.sub3D(p);residue.cp5.sub3D(p);}}}}}};_.isSupportDeferred=function(){return this.gl.textureFloatExt&&this.gl.depthTextureExt;};_.create=function(id,width,height){_super.create.call(this,id,width,height);// setup gl object\ntry{var canvas=document.getElementById(this.id);this.gl=canvas.getContext('webgl');if(!this.gl){this.gl=canvas.getContext('experimental-webgl');}}catch(e){}if(this.gl){if(this.pixelRatio!==1&&this.gl.canvas.width===this.width){this.gl.canvas.style.width=this.width+'px';this.gl.canvas.style.height=this.height+'px';this.gl.canvas.width=this.width*this.pixelRatio;this.gl.canvas.height=this.height*this.pixelRatio;}this.gl.enable(this.gl.DEPTH_TEST);this.gl.depthFunc(this.gl.LEQUAL);this.gl.blendFuncSeparate(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA,this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA);this.gl.clearDepth(1.0);// size of texture for render depth map from light view\nthis.shadowTextureSize=1024;// setup matrices\nthis.rotationMatrix=m4.identity([]);// set up camera\nthis.camera=new d3.Camera();this.label3D=new d3.Label();this.lighting=new d3.Light(this.specs.lightDiffuseColor_3D,this.specs.lightSpecularColor_3D,this.specs.lightDirection_3D);this.fogging=new d3.Fog(this.specs.fog_color_3D||this.specs.backgroundColor,this.specs.fog_start_3D,this.specs.fog_end_3D,this.specs.fog_density_3D);// uncomment this line to see shadow without depth texture extension\nthis.gl.depthTextureExt=this.gl.getExtension('WEBGL_depth_texture')||this.gl.getExtension('WEBKIT_WEBGL_depth_texture')||this.gl.getExtension('MOZ_WEBGL_depth_texture');this.gl.textureFloatExt=this.gl.getExtension('OES_texture_float')||this.gl.getExtension('WEBKIT_OES_texture_float')||this.gl.getExtension('MOZ_OES_texture_float');// this.gl.shaderTextureLodExt = this.gl.getExtension('EXT_shader_texture_lod') || this.gl.getExtension('WEBKIT_EXT_shader_texture_lod') || this.gl.getExtension('MOZ_EXT_shader_texture_lod');\n// this.gl.drawBuffersExt = this.gl.getExtension('WEBGL_draw_buffers');\nthis.ssao=new d3.SSAO();// set picker color attachment\nthis.pickerColorTexture=new d3.Texture();this.pickerColorTexture.init(this.gl,this.gl.UNSIGNED_BYTE,this.gl.RGBA,this.gl.RGBA);// set picker depth attachment \nthis.pickerDepthRenderbuffer=new d3.Renderbuffer();this.pickerDepthRenderbuffer.init(this.gl,this.gl.DEPTH_COMPONENT16);// set picker framebuffer\nthis.pickerFramebuffer=new d3.Framebuffer();this.pickerFramebuffer.init(this.gl);this.pickerFramebuffer.setColorTexture(this.gl,this.pickerColorTexture.texture);this.pickerFramebuffer.setDepthRenderbuffer(this.gl,this.pickerDepthRenderbuffer.renderbuffer);// depth map for shadowing\nthis.lightDepthMapTexture=new d3.Texture();this.lightDepthMapRenderbuffer=new d3.Renderbuffer();this.lightDepthMapFramebuffer=new d3.Framebuffer();this.lightDepthMapFramebuffer.init(this.gl);if(this.gl.depthTextureExt){this.lightDepthMapTexture.init(this.gl,this.gl.UNSIGNED_SHORT,this.gl.DEPTH_COMPONENT);this.lightDepthMapRenderbuffer.init(this.gl,this.gl.RGBA4);this.lightDepthMapFramebuffer.setColorRenderbuffer(this.gl,this.lightDepthMapRenderbuffer.renderbuffer);this.lightDepthMapFramebuffer.setDepthTexture(this.gl,this.lightDepthMapTexture.texture);}else{this.lightDepthMapTexture.init(this.gl,this.gl.UNSIGNED_BYTE,this.gl.RGBA,this.gl.RGBA);this.lightDepthMapRenderbuffer.init(this.gl,this.gl.DEPTH_COMPONENT16);this.lightDepthMapFramebuffer.setColorTexture(this.gl,this.lightDepthMapTexture.texture);this.lightDepthMapFramebuffer.setDepthRenderbuffer(this.gl,this.lightDepthMapRenderbuffer.renderbuffer);}// deferred shading textures, renderbuffers, framebuffers and shaders\nif(this.isSupportDeferred()){// g-buffer\nthis.depthTexture=new d3.Texture();this.depthTexture.init(this.gl,this.gl.UNSIGNED_SHORT,this.gl.DEPTH_COMPONENT);this.colorTexture=new d3.Texture();this.colorTexture.init(this.gl,this.gl.UNSIGNED_BYTE,this.gl.RGBA);this.positionTexture=new d3.Texture();this.positionTexture.init(this.gl,this.gl.FLOAT,this.gl.RGBA);this.normalTexture=new d3.Texture();this.normalTexture.init(this.gl,this.gl.FLOAT,this.gl.RGBA);// postprocesing effect\n// ssao\nthis.ssaoTexture=new d3.Texture();this.ssaoTexture.init(this.gl,this.gl.FLOAT,this.gl.RGBA);// outline\nthis.outlineTexture=new d3.Texture();this.outlineTexture.init(this.gl,this.gl.UNSIGNED_BYTE,this.gl.RGBA);this.fxaaTexture=new d3.Texture();this.fxaaTexture.init(this.gl,this.gl.FLOAT,this.gl.RGBA);// temp texture\nthis.imageTexture=new d3.Texture();this.imageTexture.init(this.gl,this.gl.FLOAT,this.gl.RGBA);// framebuffer\nthis.colorFramebuffer=new d3.Framebuffer();this.colorFramebuffer.init(this.gl);this.colorFramebuffer.setColorTexture(this.gl,this.colorTexture.texture);this.colorFramebuffer.setDepthTexture(this.gl,this.depthTexture.texture);this.normalFramebuffer=new d3.Framebuffer();this.normalFramebuffer.init(this.gl);this.normalFramebuffer.setColorTexture(this.gl,this.normalTexture.texture);this.normalFramebuffer.setDepthTexture(this.gl,this.depthTexture.texture);this.positionFramebuffer=new d3.Framebuffer();this.positionFramebuffer.init(this.gl);this.positionFramebuffer.setColorTexture(this.gl,this.positionTexture.texture);this.positionFramebuffer.setDepthTexture(this.gl,this.depthTexture.texture);this.ssaoFramebuffer=new d3.Framebuffer();this.ssaoFramebuffer.init(this.gl);this.ssaoFramebuffer.setColorTexture(this.gl,this.ssaoTexture.texture);this.outlineFramebuffer=new d3.Framebuffer();this.outlineFramebuffer.init(this.gl);this.outlineFramebuffer.setColorTexture(this.gl,this.outlineTexture.texture);this.fxaaFramebuffer=new d3.Framebuffer();this.fxaaFramebuffer.init(this.gl);this.fxaaFramebuffer.setColorTexture(this.gl,this.fxaaTexture.texture);this.quadFramebuffer=new d3.Framebuffer();this.quadFramebuffer.init(this.gl);this.quadFramebuffer.setColorTexture(this.gl,this.imageTexture.texture);this.finalFramebuffer=new d3.Framebuffer();this.finalFramebuffer.init(this.gl);this.finalFramebuffer.setColorTexture(this.gl,this.fxaaTexture.texture);this.finalFramebuffer.setDepthTexture(this.gl,this.depthTexture.texture);this.normalShader=new d3.NormalShader();this.normalShader.init(this.gl);this.positionShader=new d3.PositionShader();this.positionShader.init(this.gl);if(d3.SSAOShader){this.ssaoShader=new d3.SSAOShader();this.ssaoShader.init(this.gl);this.ssaoBlurShader=new d3.SSAOBlurShader();this.ssaoBlurShader.init(this.gl);}this.outlineShader=new d3.OutlineShader();this.outlineShader.init(this.gl);this.lightingShader=new d3.LightingShader();this.lightingShader.init(this.gl);this.fxaaShader=new d3.FXAAShader();this.fxaaShader.init(this.gl);this.quadShader=new d3.QuadShader();this.quadShader.init(this.gl);}// this is the shaders\nthis.labelShader=new d3.LabelShader();this.labelShader.init(this.gl);this.pickShader=new d3.PickShader();this.pickShader.init(this.gl);this.phongShader=new d3.PhongShader();this.phongShader.init(this.gl);if(d3.DepthShader){this.depthShader=new d3.DepthShader();this.depthShader.init(this.gl);}this.textTextImage=new d3.TextImage();this.textTextImage.init(this.gl);this.gl.textImage=new d3.TextImage();this.gl.textImage.init(this.gl);this.gl.textMesh=new d3.TextMesh();this.gl.textMesh.init(this.gl);// set up material\nthis.gl.material=new d3.Material();this.setupScene();}else{this.displayMessage();}};_.displayMessage=function(){var canvas=document.getElementById(this.id);if(canvas.getContext){var ctx=canvas.getContext('2d');if(this.specs.backgroundColor){ctx.fillStyle=this.specs.backgroundColor;ctx.fillRect(0,0,this.width,this.height);}if(this.emptyMessage){ctx.fillStyle='#737683';ctx.textAlign='center';ctx.textBaseline='middle';ctx.font='18px Helvetica, Verdana, Arial, Sans-serif';ctx.fillText(this.emptyMessage,this.width/2,this.height/2);}}};_.renderText=function(text,position){var vertexData={position:[],texCoord:[],translation:[]};this.textTextImage.pushVertexData(text,position,0,vertexData);this.gl.textMesh.storeData(this.gl,vertexData.position,vertexData.texCoord,vertexData.translation);this.textTextImage.useTexture(this.gl);this.gl.textMesh.render(this.gl);};_.setupScene=function(){if(this.gl){// clear the canvas\n// set background color for IE's sake, seems like an IE bug where half the repaints don't render a background\nvar jqCapsule=q('#'+this.id);jqCapsule.css('background-color',this.specs.backgroundColor);var cs=math.getRGB(this.specs.backgroundColor,1);this.gl.clearColor(cs[0],cs[1],cs[2],1.0);this.specs.cullBackFace_3D?this.gl.enable(this.gl.CULL_FACE):this.gl.disable(this.gl.CULL_FACE);// here is the sphere buffer to be drawn, make it once, then scale\n// and translate to draw atoms\nthis.gl.sphereBuffer=new d3.Sphere(1,this.specs.atoms_resolution_3D,this.specs.atoms_resolution_3D);this.gl.starBuffer=new d3.Star();this.gl.cylinderBuffer=new d3.Cylinder(1,1,this.specs.bonds_resolution_3D);this.gl.cylinderClosedBuffer=new d3.Cylinder(1,1,this.specs.bonds_resolution_3D,true);this.gl.boxBuffer=new d3.Box(1,1,1);this.gl.pillBuffer=new d3.Pill(this.specs.bonds_pillDiameter_3D/2,this.specs.bonds_pillHeight_3D,this.specs.bonds_pillLatitudeResolution_3D,this.specs.bonds_pillLongitudeResolution_3D);this.gl.lineBuffer=new d3.Line();this.gl.lineArrowBuffer=new d3.LineArrow();this.gl.arrowBuffer=new d3.Arrow(0.3,this.specs.compass_resolution_3D);this.gl.quadBuffer=new d3.Quad();// texture for rendering text\nthis.gl.textImage.updateFont(this.gl,this.specs.text_font_size,this.specs.text_font_families,this.specs.text_font_bold,this.specs.text_font_italic,this.specs.text_font_stroke_3D);// set up lighting\nthis.lighting.lightScene(this.specs.lightDiffuseColor_3D,this.specs.lightSpecularColor_3D,this.specs.lightDirection_3D);// set up fogging\nthis.fogging.fogScene(this.specs.fog_color_3D||this.specs.backgroundColor,this.specs.fog_start_3D,this.specs.fog_end_3D,this.specs.fog_density_3D);// set up compass\nthis.compass=new d3.Compass(this.gl,this.specs);// set texture and renderbuffer parameter\nthis.lightDepthMapTexture.setParameter(this.gl,this.shadowTextureSize,this.shadowTextureSize);this.lightDepthMapRenderbuffer.setParameter(this.gl,this.shadowTextureSize,this.shadowTextureSize);this.pickerColorTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.pickerDepthRenderbuffer.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);if(this.isSupportDeferred()){this.depthTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.colorTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.imageTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.positionTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.normalTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.ssaoTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.outlineTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);this.fxaaTexture.setParameter(this.gl,this.gl.drawingBufferWidth,this.gl.drawingBufferHeight);// set SSAO parameter\nthis.ssao.initSampleKernel(this.specs.ssao_kernel_samples);this.ssao.initNoiseTexture(this.gl);}this.camera.updateProjectionMatrix(this.specs.projectionPerspective_3D);for(var k=0,kk=this.molecules.length;k<kk;k++){var mol=this.molecules[k];if(!(mol.labelMesh instanceof d3.TextMesh)){mol.labelMesh=new d3.TextMesh();mol.labelMesh.init(this.gl);}if(mol.chains){mol.ribbons=[];mol.cartoons=[];mol.tubes=[];mol.pipePlanks=[];// set up ribbon diagram if available and not already setup\nfor(var j=0,jj=mol.chains.length;j<jj;j++){var rs=mol.chains[j];for(var i=0,ii=rs.length-1;i<ii;i++){rs[i].Test=i;}var isNucleotide=rs.length>3&&RESIDUE[rs[3].name]&&RESIDUE[rs[3].name].aminoColor==='#BEA06E';if(rs.length>0&&!rs[0].lineSegments){for(var i=0,ii=rs.length-1;i<ii;i++){rs[i].setup(rs[i+1].cp1,isNucleotide?1:this.specs.proteins_horizontalResolution);}if(!isNucleotide){for(var i=1,ii=rs.length-1;i<ii;i++){// reverse guide points if carbonyl\n// orientation flips\nif(extensions.vec3AngleFrom(rs[i-1].D,rs[i].D)>m.PI/2){rs[i].guidePointsSmall.reverse();rs[i].guidePointsLarge.reverse();v3.scale(rs[i].D,-1);}}}for(var i=2,ii=rs.length-3;i<ii;i++){// compute line segments\nrs[i].computeLineSegments(rs[i-2],rs[i-1],rs[i+1],!isNucleotide,isNucleotide?this.specs.nucleics_verticalResolution:this.specs.proteins_verticalResolution);}// remove unneeded dummies\nrs.pop();rs.pop();rs.pop();rs.shift();rs.shift();}// create the hsl color for the chain\nvar rgb=math.hsl2rgb(jj===1?.5:j/jj,1,.5);var chainColor='rgb('+rgb[0]+','+rgb[1]+','+rgb[2]+')';rs.chainColor=chainColor;if(isNucleotide){var t=new d3.Tube(rs,this.specs.nucleics_tubeThickness,this.specs.nucleics_tubeResolution_3D);t.chainColor=chainColor;mol.tubes.push(t);}else{var t=new d3.PipePlank(rs,this.specs);mol.pipePlanks.push(t);var res=rs.shift();var r={front:new d3.Ribbon(rs,this.specs.proteins_ribbonThickness,false),back:new d3.Ribbon(rs,-this.specs.proteins_ribbonThickness,false)};r.front.chainColor=chainColor;r.back.chainColor=chainColor;mol.ribbons.push(r);var d={front:new d3.Ribbon(rs,this.specs.proteins_ribbonThickness,true),back:new d3.Ribbon(rs,-this.specs.proteins_ribbonThickness,true)};d.front.chainColor=chainColor;d.back.chainColor=chainColor;mol.cartoons.push(d);rs.unshift(res);}}}}this.label3D.updateVerticesBuffer(this.gl,this.getMolecules(),this.specs);// the molecules in frame of MovieCanvas3D must be handled\nif(this instanceof c.MovieCanvas3D&&this.frames){for(var i=0,ii=this.frames.length;i<ii;i++){var f=this.frames[i];for(var j=0,jj=f.mols.length;j<jj;j++){var mol=f.mols[j];if(!(mol.labelMesh instanceof structures.d3.TextMesh)){mol.labelMesh=new structures.d3.TextMesh();mol.labelMesh.init(this.gl);}}this.label3D.updateVerticesBuffer(this.gl,f.mols,this.specs);}}}};_.updateScene=function(){this.camera.updateProjectionMatrix(this.specs.projectionPerspective_3D);this.lighting.lightScene(this.specs.lightDiffuseColor_3D,this.specs.lightSpecularColor_3D,this.specs.lightDirection_3D);this.fogging.fogScene(this.specs.fog_color_3D||this.specs.backgroundColor,this.specs.fog_start_3D,this.specs.fog_end_3D,this.specs.fog_density_3D);this.repaint();};_.mousedown=function(e){this.lastPoint=e.p;};_.mouseup=function(e){this.lastPoint=undefined;};_.rightmousedown=function(e){this.lastPoint=e.p;};_.drag=function(e){if(this.lastPoint){if(c.monitor.ALT){var t=new structures.Point(e.p.x,e.p.y);t.sub(this.lastPoint);var theta=this.camera.fieldOfView/360*m.PI;var tanTheta=m.tan(theta);var topScreen=this.height/2/this.camera.zoom;var nearScreen=topScreen/tanTheta;var nearRatio=this.camera.focalLength()/nearScreen;m4.translate(this.camera.viewMatrix,[t.x*nearRatio,-t.y*nearRatio,0]);}else{var difx=e.p.x-this.lastPoint.x;var dify=e.p.y-this.lastPoint.y;var rotation=m4.rotate(m4.identity([]),difx*m.PI/180.0,[0,1,0]);m4.rotate(rotation,dify*m.PI/180.0,[1,0,0]);this.rotationMatrix=m4.multiply(rotation,this.rotationMatrix);}this.lastPoint=e.p;this.repaint();}};_.mousewheel=function(e,delta){delta>0?this.camera.zoomIn():this.camera.zoomOut();this.updateScene();};_.multitouchmove=function(e,numFingers){if(numFingers===2){if(this.lastPoint&&this.lastPoint.multi){var t=new structures.Point(e.p.x,e.p.y);t.sub(this.lastPoint);var theta=this.camera.fieldOfView/360*m.PI;var tanTheta=m.tan(theta);var topScreen=this.height/2/this.camera.zoom;var nearScreen=topScreen/tanTheta;var nearRatio=this.camera.focalLength()/nearScreen;m4.translate(this.camera.viewMatrix,[t.x*nearRatio,-t.y*nearRatio,0]);this.lastPoint=e.p;this.repaint();}else{this.lastPoint=e.p;this.lastPoint.multi=true;}}};_.gesturechange=function(e){if(e.originalEvent.scale-this.lastPinchScale!==0){var minFov=0.1;var maxFov=179.9;var dz=-(e.originalEvent.scale/this.lastPinchScale-1)*30;if(isNaN(dz)){// this seems to happen on Android when using multiple fingers\nreturn;}dz>0?this.camera.zoomIn():this.camera.zoomOut();this.updateScene();this.lastPinchScale=e.originalEvent.scale;}this.repaint();};_.gestureend=function(e){this.lastPinchScale=1;this.lastGestureRotate=0;};})(ChemDoodle,ChemDoodle.extensions,ChemDoodle.math,ChemDoodle.structures,ChemDoodle.structures.d3,ChemDoodle.RESIDUE,Math,document,ChemDoodle.lib.mat4,ChemDoodle.lib.mat3,ChemDoodle.lib.vec3,ChemDoodle.lib.jQuery,window);(function(c,iChemLabs,q,document,undefined){'use strict';c.MolGrabberCanvas3D=function(id,width,height){if(id){this.create(id,width,height);}var sb=[];sb.push('<br><input type=\"text\" id=\"');sb.push(id);sb.push('_query\" size=\"32\" value=\"\" />');sb.push('<br><nobr>');sb.push('<select id=\"');sb.push(id);sb.push('_select\">');// sb.push('<option value=\"chemexper\">ChemExper');\n// sb.push('<option value=\"chemspider\">ChemSpider');\nsb.push('<option value=\"pubchem\" selected>PubChem');sb.push('</select>');sb.push('<button id=\"');sb.push(id);sb.push('_submit\">Show Molecule</button>');sb.push('</nobr>');document.writeln(sb.join(''));var self=this;q('#'+id+'_submit').click(function(){self.search();});q('#'+id+'_query').keypress(function(e){if(e.which===13){self.search();}});};var _=c.MolGrabberCanvas3D.prototype=new c._Canvas3D();_.setSearchTerm=function(term){q('#'+this.id+'_query').val(term);this.search();};_.search=function(){var self=this;iChemLabs.getMoleculeFromDatabase(q('#'+this.id+'_query').val(),{database:q('#'+this.id+'_select').val(),dimension:3},function(mol){self.loadMolecule(mol);});};})(ChemDoodle,ChemDoodle.iChemLabs,ChemDoodle.lib.jQuery,document);(function(c,structures,undefined){'use strict';c.MovieCanvas3D=function(id,width,height){if(id){this.create(id,width,height);}this.frames=[];};c.MovieCanvas3D.PLAY_ONCE=0;c.MovieCanvas3D.PLAY_LOOP=1;c.MovieCanvas3D.PLAY_SPRING=2;var _=c.MovieCanvas3D.prototype=new c._Canvas3D();_.timeout=50;_.frameNumber=0;_.playMode=2;_.reverse=false;_.startAnimation=c._AnimatorCanvas.prototype.startAnimation;_.stopAnimation=c._AnimatorCanvas.prototype.stopAnimation;_.isRunning=c._AnimatorCanvas.prototype.isRunning;_.dblclick=c.RotatorCanvas.prototype.dblclick;_.nextFrame=function(delta){var f=this.frames[this.frameNumber];this.molecules=f.mols;this.shapes=f.shapes;if(this.playMode===2&&this.reverse){this.frameNumber--;if(this.frameNumber<0){this.frameNumber=1;this.reverse=false;}}else{this.frameNumber++;if(this.frameNumber>=this.frames.length){if(this.playMode===2){this.frameNumber-=2;this.reverse=true;}else{this.frameNumber=0;if(this.playMode===0){this.stopAnimation();}}}}};_.center=function(){// override this function to center the entire movie\nvar p=new structures.Atom();var first=this.frames[0];for(var j=0,jj=first.mols.length;j<jj;j++){p.add3D(first.mols[j].getCenter3D());}p.x/=first.mols.length;p.y/=first.mols.length;var center=new structures.Atom();center.sub3D(p);for(var i=0,ii=this.frames.length;i<ii;i++){var f=this.frames[i];for(var j=0,jj=f.mols.length;j<jj;j++){var mol=f.mols[j];for(var k=0,kk=mol.atoms.length;k<kk;k++){mol.atoms[k].add3D(center);}}}};_.addFrame=function(molecules,shapes){this.frames.push({mols:molecules,shapes:shapes});};})(ChemDoodle,ChemDoodle.structures);(function(c,m,m4,undefined){'use strict';// keep these declaration outside the loop to avoid overhead\nvar matrix=[];var xAxis=[1,0,0];var yAxis=[0,1,0];var zAxis=[0,0,1];c.RotatorCanvas3D=function(id,width,height){if(id){this.create(id,width,height);}};var _=c.RotatorCanvas3D.prototype=new c._Canvas3D();_.timeout=33;var increment=m.PI/15;_.xIncrement=increment;_.yIncrement=increment;_.zIncrement=increment;_.startAnimation=c._AnimatorCanvas.prototype.startAnimation;_.stopAnimation=c._AnimatorCanvas.prototype.stopAnimation;_.isRunning=c._AnimatorCanvas.prototype.isRunning;_.dblclick=c.RotatorCanvas.prototype.dblclick;_.mousedown=undefined;_.rightmousedown=undefined;_.drag=undefined;_.mousewheel=undefined;_.nextFrame=function(delta){if(this.molecules.length===0&&this.shapes.length===0){this.stopAnimation();return;}m4.identity(matrix);var change=delta/1000;m4.rotate(matrix,this.xIncrement*change,xAxis);m4.rotate(matrix,this.yIncrement*change,yAxis);m4.rotate(matrix,this.zIncrement*change,zAxis);m4.multiply(this.rotationMatrix,matrix);};})(ChemDoodle,Math,ChemDoodle.lib.mat4);(function(c,undefined){'use strict';c.TransformCanvas3D=function(id,width,height){if(id){this.create(id,width,height);}};c.TransformCanvas3D.prototype=new c._Canvas3D();})(ChemDoodle);(function(c,undefined){'use strict';c.ViewerCanvas3D=function(id,width,height){if(id){this.create(id,width,height);}};var _=c.ViewerCanvas3D.prototype=new c._Canvas3D();_.mousedown=undefined;_.rightmousedown=undefined;_.drag=undefined;_.mousewheel=undefined;})(ChemDoodle);(function(c,extensions,math,document,undefined){'use strict';function PeriodicCell(element,x,y,dimension){this.element=element;this.x=x;this.y=y;this.dimension=dimension;this.allowMultipleSelections=false;}c.PeriodicTableCanvas=function(id,cellDimension){this.padding=5;if(id){this.create(id,cellDimension*18+this.padding*2,cellDimension*10+this.padding*2);}this.cellDimension=cellDimension?cellDimension:20;this.setupTable();this.repaint();};var _=c.PeriodicTableCanvas.prototype=new c._Canvas();_.loadMolecule=undefined;_.getMolecule=undefined;_.getHoveredElement=function(){if(this.hovered){return this.hovered.element;}return undefined;};_.innerRepaint=function(ctx){for(var i=0,ii=this.cells.length;i<ii;i++){this.drawCell(ctx,this.specs,this.cells[i]);}if(this.hovered){this.drawCell(ctx,this.specs,this.hovered);}if(this.selected){this.drawCell(ctx,this.specs,this.selected);}};_.setupTable=function(){this.cells=[];var x=this.padding;var y=this.padding;var count=0;for(var i=0,ii=c.SYMBOLS.length;i<ii;i++){if(count===18){count=0;y+=this.cellDimension;x=this.padding;}var e=c.ELEMENT[c.SYMBOLS[i]];if(e.atomicNumber===2){x+=16*this.cellDimension;count+=16;}else if(e.atomicNumber===5||e.atomicNumber===13){x+=10*this.cellDimension;count+=10;}if((e.atomicNumber<58||e.atomicNumber>71&&e.atomicNumber<90||e.atomicNumber>103)&&e.atomicNumber<=118){this.cells.push(new PeriodicCell(e,x,y,this.cellDimension));x+=this.cellDimension;count++;}}y+=2*this.cellDimension;x=3*this.cellDimension+this.padding;for(var i=57;i<104;i++){var e=c.ELEMENT[c.SYMBOLS[i]];if(e.atomicNumber===90){y+=this.cellDimension;x=3*this.cellDimension+this.padding;}if(e.atomicNumber>=58&&e.atomicNumber<=71||e.atomicNumber>=90&&e.atomicNumber<=103){this.cells.push(new PeriodicCell(e,x,y,this.cellDimension));x+=this.cellDimension;}}};_.drawCell=function(ctx,specs,cell){var radgrad=ctx.createRadialGradient(cell.x+cell.dimension/3,cell.y+cell.dimension/3,cell.dimension*1.5,cell.x+cell.dimension/3,cell.y+cell.dimension/3,cell.dimension/10);radgrad.addColorStop(0,'#000000');radgrad.addColorStop(.7,cell.element.jmolColor);radgrad.addColorStop(1,'#FFFFFF');ctx.fillStyle=radgrad;extensions.contextRoundRect(ctx,cell.x,cell.y,cell.dimension,cell.dimension,cell.dimension/8);if(cell===this.hovered||cell===this.selected||cell.selected){ctx.lineWidth=2;ctx.strokeStyle='#c10000';ctx.stroke();ctx.fillStyle='white';}ctx.fill();ctx.font=extensions.getFontString(specs.text_font_size,specs.text_font_families);ctx.fillStyle=specs.text_color;ctx.textAlign='center';ctx.textBaseline='middle';ctx.fillText(cell.element.symbol,cell.x+cell.dimension/2,cell.y+cell.dimension/2);};_.click=function(e){if(this.hovered){if(this.allowMultipleSelections){this.hovered.selected=!this.hovered.selected;}else{this.selected=this.hovered;}this.repaint();}};_.touchstart=function(e){// try to hover an element\nthis.mousemove(e);};_.mousemove=function(e){var x=e.p.x;var y=e.p.y;this.hovered=undefined;for(var i=0,ii=this.cells.length;i<ii;i++){var c=this.cells[i];if(math.isBetween(x,c.x,c.x+c.dimension)&&math.isBetween(y,c.y,c.y+c.dimension)){this.hovered=c;break;}}this.repaint();};_.mouseout=function(e){this.hovered=undefined;this.repaint();};})(ChemDoodle,ChemDoodle.extensions,ChemDoodle.math,document);(function(io,document,window,undefined){'use strict';io.png={};io.png.string=function(canvas){// this will not work for WebGL canvases in some browsers\n// to fix that you need to set the \"preserveDrawingBuffer\" to true when\n// creating the WebGL context\n// note that this will cause performance issues on some platforms and is\n// therefore not done by default\nreturn document.getElementById(canvas.id).toDataURL('image/png');};io.png.open=function(canvas){window.open(this.string(canvas));};})(ChemDoodle.io,document,window);(function(io,q,undefined){'use strict';io.file={};// this function will only work with files from the same origin it is being\n// called from, unless the receiving server supports XHR2\nio.file.content=function(url,callback){q.get(url,'',callback);};})(ChemDoodle.io,ChemDoodle.lib.jQuery);(function(c,iChemLabs,io,structures,q,location,undefined){'use strict';iChemLabs.SERVER_URL='https://ichemlabs.cloud.chemdoodle.com/icl_cdc_v070001/WebHQ';iChemLabs.inRelay=false;iChemLabs.asynchronous=true;iChemLabs.INFO={userAgent:navigator.userAgent,v_cwc:c.getVersion(),v_jQuery:q.fn.jquery,v_jQuery_ui:q.ui?q.ui.version:'N/A'};var JSON_INTERPRETER=new io.JSONInterpreter();var queue=new structures.Queue();iChemLabs._contactServer=function(call,content,options,callback,errorback){if(this.inRelay){queue.enqueue({'call':call,'content':content,'options':options,'callback':callback,'errorback':errorback});}else{iChemLabs.inRelay=true;q.ajax({dataType:'text',type:'POST',data:JSON.stringify({'call':call,'content':content,'options':options,'info':iChemLabs.INFO}),url:this.SERVER_URL,success:function success(data){var o=JSON.parse(data);if(o.message){alert(o.message);}iChemLabs.inRelay=false;if(callback&&o.content&&!o.stop){callback(o.content);}if(o.stop&&errorback){errorback();}if(!queue.isEmpty()){var next=queue.dequeue();iChemLabs._contactServer(next.call,next.content,next.options,next.callback,next.errorback);}},error:function error(xhr,status,_error){if(call!='checkForUpdates'){alert('Call failed. Please try again. If you continue to see this message, please contact iChemLabs customer support.');}iChemLabs.inRelay=false;if(errorback){errorback();}if(!queue.isEmpty()){var next=queue.dequeue();iChemLabs._contactServer(next.call,next.content,next.options,next.callback,next.errorback);}},xhrFields:{withCredentials:true},async:iChemLabs.asynchronous});}};// undocumented, this call is for clients that have licensed cloud for their\n// own servers\niChemLabs.authenticate=function(credential,options,callback,errorback){this._contactServer('authenticate',{'credential':credential},options,function(content){callback(content);},errorback);};iChemLabs.calculate=function(mol,options,callback,errorback){this._contactServer('calculate',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(content);},errorback);};iChemLabs.createLewisDotStructure=function(mol,options,callback,errorback){this._contactServer('createLewisDot',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(JSON_INTERPRETER.molFrom(content.mol));},errorback);};iChemLabs.generateImage=function(mol,options,callback,errorback){this._contactServer('generateImage',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(content.link);},errorback);};iChemLabs.generateIUPACName=function(mol,options,callback,errorback){this._contactServer('generateIUPACName',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(content.iupac);},errorback);};iChemLabs.getAd=function(callback,errorback){this._contactServer('getAd',{},{},function(content){callback(content.image_url,content.target_url);},errorback);};iChemLabs.getMoleculeFromContent=function(input,options,callback,errorback){this._contactServer('getMoleculeFromContent',{'content':input},options,function(content){var z=false;for(var i=0,ii=content.mol.a.length;i<ii;i++){if(content.mol.a[i].z!==0){z=true;break;}}if(z){for(var i=0,ii=content.mol.a.length;i<ii;i++){content.mol.a[i].x/=20;content.mol.a[i].y/=20;content.mol.a[i].z/=20;}}callback(JSON_INTERPRETER.molFrom(content.mol));},errorback);};iChemLabs.getMoleculeFromDatabase=function(query,options,callback,errorback){this._contactServer('getMoleculeFromDatabase',{'query':query},options,function(content){if(options.dimension===3){for(var i=0,ii=content.mol.a.length;i<ii;i++){content.mol.a[i].x/=20;content.mol.a[i].y/=-20;content.mol.a[i].z/=20;}}callback(JSON_INTERPRETER.molFrom(content.mol));},errorback);};iChemLabs.getOptimizedPDBStructure=function(id,options,callback,errorback){this._contactServer('getOptimizedPDBStructure',{'id':id},options,function(content){var mol;if(content.mol){mol=JSON_INTERPRETER.molFrom(content.mol);}else{mol=new structures.Molecule();}mol.chains=JSON_INTERPRETER.chainsFrom(content.ribbons);mol.fromJSON=true;callback(mol);},errorback);};iChemLabs.getZeoliteFromIZA=function(query,options,callback,errorback){this._contactServer('getZeoliteFromIZA',{'query':query},options,function(content){callback(ChemDoodle.readCIF(content.cif,options.xSuper,options.ySuper,options.zSuper));},errorback);};iChemLabs.isGraphIsomorphism=function(arrow,target,options,callback,errorback){this._contactServer('isGraphIsomorphism',{'arrow':JSON_INTERPRETER.molTo(arrow),'target':JSON_INTERPRETER.molTo(target)},options,function(content){callback(content.value);},errorback);};iChemLabs.isSubgraphIsomorphism=function(arrow,target,options,callback,errorback){this._contactServer('isSubgraphIsomorphism',{'arrow':JSON_INTERPRETER.molTo(arrow),'target':JSON_INTERPRETER.molTo(target)},options,function(content){callback(content.value);},errorback);};iChemLabs.isSupergraphIsomorphism=function(arrow,target,options,callback,errorback){this._contactServer('isSupergraphIsomorphism',{'arrow':JSON_INTERPRETER.molTo(arrow),'target':JSON_INTERPRETER.molTo(target)},options,function(content){callback(content.value);},errorback);};iChemLabs.getSimilarityMeasure=function(first,second,options,callback,errorback){this._contactServer('getSimilarityMeasure',{'first':JSON_INTERPRETER.molTo(first),'second':JSON_INTERPRETER.molTo(second)},options,function(content){callback(content.value);},errorback);};iChemLabs.kekulize=function(mol,options,callback,errorback){this._contactServer('kekulize',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(JSON_INTERPRETER.molFrom(content.mol));},errorback);};iChemLabs.mechanismMatch=function(arrow,targets,options,callback,errorback){this._contactServer('matchMechanism',{'arrow':arrow,'targets':targets},options,function(content){callback(content);},errorback);};iChemLabs.optimize=function(mol,options,callback,errorback){this._contactServer('optimize',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){var optimized=JSON_INTERPRETER.molFrom(content.mol);if(options.dimension===2){for(var i=0,ii=optimized.atoms.length;i<ii;i++){mol.atoms[i].x=optimized.atoms[i].x;mol.atoms[i].y=optimized.atoms[i].y;}callback();}else if(options.dimension===3){for(var i=0,ii=optimized.atoms.length;i<ii;i++){optimized.atoms[i].x/=20;optimized.atoms[i].y/=-20;optimized.atoms[i].z/=20;}callback(optimized);}},errorback);};iChemLabs.readIUPACName=function(iupac,options,callback,errorback){this._contactServer('readIUPACName',{'iupac':iupac},options,function(content){callback(JSON_INTERPRETER.molFrom(content.mol));},errorback);};iChemLabs.readSMILES=function(smiles,options,callback,errorback){this._contactServer('readSMILES',{'smiles':smiles},options,function(content){callback(JSON_INTERPRETER.molFrom(content.mol));},errorback);};iChemLabs.saveFile=function(mol,options,callback,errorback){this._contactServer('saveFile',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(content.link);},errorback);};iChemLabs.simulate13CNMR=function(mol,options,callback,errorback){options.nucleus='C';options.isotope=13;this._contactServer('simulateNMR',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(c.readJCAMP(content.jcamp));},errorback);};iChemLabs.simulate1HNMR=function(mol,options,callback,errorback){options.nucleus='H';options.isotope=1;this._contactServer('simulateNMR',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(c.readJCAMP(content.jcamp));},errorback);};iChemLabs.simulateMassParentPeak=function(mol,options,callback,errorback){this._contactServer('simulateMassParentPeak',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(c.readJCAMP(content.jcamp));},errorback);};iChemLabs.writeSMILES=function(mol,options,callback,errorback){this._contactServer('writeSMILES',{'mol':JSON_INTERPRETER.molTo(mol)},options,function(content){callback(content.smiles);},errorback);};iChemLabs.version=function(options,callback,errorback){this._contactServer('version',{},options,function(content){callback(content.value);},errorback);};iChemLabs.checkForUpdates=function(options){this._contactServer('checkForUpdates',{'value':location.href},options,function(content){},function(){});};})(ChemDoodle,ChemDoodle.iChemLabs,ChemDoodle.io,ChemDoodle.structures,ChemDoodle.lib.jQuery,location);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ChemDoodleWeb-unpacked.js\n");

/***/ })

/******/ })["ChemDoodle"];
});